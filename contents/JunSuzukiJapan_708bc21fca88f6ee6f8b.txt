{"context": " More than 1 year has passed since last update.\u81ea\u5206\u7528\u30e1\u30e2\n\n\u3053\u3053\u3067\u306f\u3001TypeScript\u306e\u30bd\u30fc\u30b9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u3066\u3001\n\u3000cd src/compiler\n\u3000tsc tsc.ts\n\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u51fa\u529b\u3055\u308c\u308bJavascript\u306e\u30bd\u30fc\u30b9\u3092\u8aad\u3093\u3067\u3044\u307e\u3059\u3002\n\n\n\u3084\u308a\u305f\u3044\u4e8b\n\u81ea\u5206\u306e\u66f8\u3044\u3066\u3044\u308bJavaScript\u306e\u30b3\u30fc\u30c9\u304b\u3089\u3001TypeScriptCompiler\u3092\u547c\u3073\u51fa\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3044\u3002\n\u53c2\u7167\u3057\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u3068\u304b\u306f\u8003\u3048\u306a\u3044\u3067\u3001\uff11\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u95a2\u6570\u3092\u66f8\u304f\u306e\u304c\u6700\u7d42\u7684\u306a\u76ee\u6a19\u3002\n\n\u7d50\u679c\u3060\u3051\u307f\u305f\u3044\u4eba\u306f\u300c\u307e\u3068\u3081\u300d\u307e\u3067\u98db\u3079\u3070\u30aa\u30c3\u30b1\u30fc\u3002\n\n\nTypeScriptCompiler\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\n\u307e\u305a\u306f\u3001\u30e1\u30bd\u30c3\u30c9BatchCompiler.prototype.compile\u3067TypeScriptCompiler\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u884c\u3092\u898b\u3066\u307f\u308b\u3002\n\ntsc.js\nvar compiler = new TypeScript.TypeScriptCompiler(logger, this.compilationSettings, localizedDiagnosticMessages);\n\n\n\u5f15\u6570\u306e\n\u30fblogger\n\u30fbthis.compilationSettings\n\u30fblocalizedDiagnosticMessages\n\u304c\u4f55\u3092\u6e21\u3057\u3066\u3044\u308b\u306e\u304b\u63a2\u3057\u3066\u307f\u308b\u3002\n\nlogger\n\u307e\u305a\u3001logger\u304b\u3089\u898b\u3066\u3044\u304f\u3068\u3001\u6b21\u306e\u884c\u304c\u307f\u3064\u304b\u308b\u3002\n\ntsc.js\nvar logger = this.compilationSettings.gatherDiagnostics ? new DiagnosticsLogger(this.ioHost) : new TypeScript.NullLogger();\n\n\n\u6700\u60aa\u3001TypeScriptNullLogger\u3068\u3044\u3046\u306e\u3092\u4f7f\u3048\u3070\u826f\u3055\u305d\u3046\u3060\u3002\n\u4e00\u5fdc\u3001NullLogger\u306e\u5b9a\u7fa9\u3092\u307f\u3066\u304a\u304f\u3002\n\ndiagnotics.js\nvar NullLogger = (function () {\n    function NullLogger() {\n    }\n    NullLogger.prototype.information = function () {\n        return false;\n    };\n    NullLogger.prototype.debug = function () {\n        return false;\n    };\n    NullLogger.prototype.warning = function () {\n        return false;\n    };\n    NullLogger.prototype.error = function () {\n        return false;\n    };\n    NullLogger.prototype.fatal = function () {\n        return false;\n    };\n    NullLogger.prototype.log = function (s) {\n    };\n    return NullLogger;\n})();\nTypeScript.NullLogger = NullLogger;\n\n\n\u3053\u308c\u3001\u4f55\u3082\u3057\u306a\u3044\u3068\u3044\u3046\u304b\u3001\u30ed\u30b0\u5410\u304b\u306a\u3044\u306e\u304b\u2026\u3002\n\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\n\nlogger\ninformation = function ()\ndebug = function ()\nwarning = function ()\nerror = function ()\nfatal = function ()\nlog = function (s)\n\n\n\u5b9f\u969b\u306b\u4ed5\u4e8b\u3059\u308b\u306e\u306f\u3001log(s)\u304b\u306a\u2026\u3002\n\nthis.compilationSettings\nBatchCompiler\u306e\u5ba3\u8a00\u306e\u3068\u3053\u308d\u306b\u3001\u6b21\u306e\u3088\u3046\u306a\u3068\u3053\u308d\u304c\u3042\u308b\u3002\n\ntsc.js\nvar BatchCompiler = (function () {\n    function BatchCompiler(ioHost) {\n        this.ioHost = ioHost;\n        this.resolvedEnvironment = null;\n        this.hasResolveErrors = false;\n        this.compilerVersion = \"0.9.0.1\";\n        this.printedVersion = false;\n        this.errorReporter = null;\n        this.compilationSettings = new TypeScript.CompilationSettings();\n        this.compilationEnvironment = new TypeScript.CompilationEnvironment(this.compilationSettings, this.ioHost);\n        this.errorReporter = new ErrorReporter(this.ioHost, this.compilationEnvironment);\n    }\n\n\nthis.compilationSettings\u3082\u3053\u3053\u3067\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u305d\u306e\u4ed6\u3042\u3068\u3067\u51fa\u3066\u304d\u305d\u3046\u306a\u5909\u6570\u304c\u3042\u308b\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u3001\u5168\u90e8\u306e\u3063\u3051\u3066\u304a\u304f\u3002\nTypeScript.CompilationSettings\u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u3042\u308b\u3089\u3057\u3044\u3053\u3068\u3060\u3051\u899a\u3048\u3066\u304a\u3053\u3046\u2026\u3002\n\nlocalizedDiagnosticMessages\nlocalizedDiagnosticMessages\u306b\u3064\u3044\u3066\u306f\u3001\u6b21\u306e\u884c\u304c\u53c2\u8003\u306b\u306a\u308a\u305d\u3046\u3002\n\ntsc.js\nif (typeof localizedDiagnosticMessages === \"undefined\") {\n    localizedDiagnosticMessages = null;\n}\n\n\nlocalizedDiagnosticMessages\u306e\u578b\u304c\"undefined\"\u3060\u3063\u305f\u3089\u3001null\u3092\u4ee3\u5165\u3057\u3066\u3044\u308b\u3002\n\u3064\u307e\u308a\u3001\u3088\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u3089\u3001null\u3092\u6e21\u3057\u3066\u304a\u3051\u3070\u826f\u3055\u305d\u3046\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\n\u5b9f\u969b\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u624b\u9806\u3092\u307f\u3066\u3044\u304f\u3002\n\ntsc.js\nfor (var iCode = 0; iCode < this.resolvedEnvironment.code.length; iCode++) {\n    var code = this.resolvedEnvironment.code[iCode];\n\n    if (!this.compilationSettings.resolve) {\n        try  {\n            code.fileInformation = this.ioHost.readFile(code.path);\n        } catch (e) {\n             \uff08\u7565\uff09\n        }\n\n        if (this.compilationSettings.generateDeclarationFiles) {\n             \uff08\u7565\uff09\n        }\n    }\n\n    if (code.fileInformation != null) {\n        compiler.addSourceUnit(\n            code.path,\n            TypeScript.ScriptSnapshot.fromString(code.fileInformation.contents()),\n            code.fileInformation.byteOrderMark(),\n            0,\n            false,\n            code.referencedFiles\n        );\n\n             \uff08\u7565\uff09\n    }\n}\n\n\n\u524d\u5f8c\u306e\u30bd\u30fc\u30b9\u3082\u542b\u3081\u3066\u3056\u3063\u3068\u773a\u3081\u305f\u611f\u3058\u3067\u306f\u3001\u95a2\u9023\u3059\u308b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u3059\u3079\u3066\u8aad\u307f\u8fbc\u3093\u3067\u304b\u3089\u3001\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u3002\n\u3067\u3001\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001\nthis.resolvedEnvironment.code\n\u306b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u2026\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u3002\n\u524d\u8ff0\u306eBatchCompiler\u306e\u5ba3\u8a00\u90e8\u5206\u3067\u306f\u3001\n\ntsc.js\nthis.resolvedEnvironment = null;\n\n\nnull\u304c\u4ee3\u5165\u3055\u308c\u3066\u3044\u305f\u306e\u3067\u3001\u305d\u308c\u304c\u3044\u3064\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831\u3092\u542b\u3080\u3088\u3046\u306b\u306a\u308b\u306e\u304b\u8abf\u3079\u3066\u307f\u3088\u3046\u3002\n\nBatchCompiler.prototype.batchCompile\n\u8abf\u3079\u3066\u3044\u304f\u3068\u3001\u30e1\u30bd\u30c3\u30c9BatchCompiler.prototype.batchCompile\u306e\u4e2d\u3067\n\ntsc.js\nvar onWatchedFileChange = function () {\n    _this.compilationEnvironment.code = sourceFiles;\n\n    _this.errorReporter.reset();\n\n    _this.resolvedEnvironment = _this.compilationSettings.resolve\n        ? _this.resolve() : _this.compilationEnvironment;\n\n\n\u306e\u3088\u3046\u306b\u4ee3\u5165\u3055\u308c\u3066\u3044\u308b\u3002\n\u307f\u3066\u306e\u3068\u304a\u308a\u3001_this.resolve()\u306e\u8fd4\u308a\u5024\u304b\u3001_this.compilationEnvironment\u304c\u4ee3\u5165\u3055\u308c\u3066\u3044\u308b\u3002\n\u3069\u3063\u3061\u304b\u3001\u8aad\u307f\u3084\u3059\u3044\u307b\u3046\u3092\u53c2\u8003\u306b\u3059\u308c\u3070\u826f\u3055\u305d\u3046\u3002\n\ncompilationEnvironment\ncompilationEnvironment\u306f\u3001\u524d\u306b\u51fa\u305f\n\ntsc.js\nvar BatchCompiler = (function () {\n    function BatchCompiler(ioHost) {\n        this.ioHost = ioHost;\n        \u2026\n        this.compilationSettings = new TypeScript.CompilationSettings();\n        this.compilationEnvironment = new TypeScript.CompilationEnvironment(this.compilationSettings, this.ioHost);\n        \u2026\n    }\n\n\n\u306e\u3068\u3053\u308d\u3067\u3001\u4ee3\u5165\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u306a\u3002\u3053\u3053\u3067\u306f\u3001\nnew TypeScript.CompilationEnvironment(this.compilationSettings, this.ioHost);\n\u304c\u4ee3\u5165\u3055\u308c\u3066\u3044\u3066\u3001\u5f15\u6570this.compilationSettings\u3001this.ioHost\u3068\u3082\u3059\u3050\u4e0a\u3067\u5024\u304c\u4ee3\u5165\u3055\u308c\u3066\u3044\u308b\u3002\n\u3068\u306a\u308b\u3068\u3001\u30af\u30e9\u30b9CompilationSettings\u3068CompilationEnvironment\u3092\u8abf\u3079\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u306a\u2026\u3002\n\nCompilationSettings\nprecompile.js\u306b\u4ee5\u4e0b\u306e\u8a18\u8ff0\u304c\u3042\u308b\u3002\n\nprecompile.js\n    var CompilationSettings = (function () {\n        function CompilationSettings() {\n            this.propagateConstants = false;\n            this.minWhitespace = false;\n            this.emitComments = false;\n            this.watch = false;\n            this.exec = false;\n            this.resolve = true;\n            this.disallowBool = false;\n            this.allowAutomaticSemicolonInsertion = true;\n            this.allowModuleKeywordInExternalModuleReference = true;\n            this.useDefaultLib = true;\n            this.codeGenTarget = TypeScript.LanguageVersion.EcmaScript3;\n            this.moduleGenTarget = TypeScript.ModuleGenTarget.Synchronous;\n            this.outputOption = \"\";\n            this.mapSourceFiles = false;\n            this.emitFullSourceMapPath = false;\n            this.generateDeclarationFiles = false;\n            this.useCaseSensitiveFileResolution = false;\n            this.gatherDiagnostics = false;\n            this.updateTC = false;\n            this.implicitAny = false;\n        }\n\n\n\u3044\u308d\u3044\u308d\u66f8\u3044\u3066\u3042\u308b\u3051\u3069\u3001\u3053\u306e\u307e\u307e\u4f7f\u3048\u305d\u3046\u306a\u6c17\u304c\u3059\u308b\u3002\n\nCompilationEnvironment\nreferenceResolutin.js\u306b\u4ee5\u4e0b\u306e\u8a18\u8ff0\u304c\u3042\u308b\u3002\n\nreferenceResolutin.js\n    var CompilationEnvironment = (function () {\n        function CompilationEnvironment(compilationSettings, ioHost) {\n            this.compilationSettings = compilationSettings;\n            this.ioHost = ioHost;\n            this.code = [];\n            this.inputFileNameToOutputFileName = new TypeScript.StringHashTable();\n        }\n\n\n\u3053\u3053\u306e\u3001 this.code \u306b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u683c\u7d0d\u3055\u308c\u3066\u308b\u306e\u304b\u306a\uff1f\uff1f\n\u9055\u3046\u306a\u3002\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u540d\u3058\u3083\u306a\u3044\u3002\u5225\u306e\u3068\u3053\u308d\u3067\u3001\ncode.path\ncode.fileInformation\n\n\u306a\u3069\u304c\u53c2\u7167\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u3001\u306a\u3093\u3089\u304b\u306e\u69cb\u9020\u3092\u6301\u3063\u305f\u3082\u306e\u3060\u306a\u2026\u3002\n\u305a\u308b\u3057\u3066\u3001referenceResolution. ts \u3092\u898b\u308b\u3068\u3001\n\nreferenceResolution.ts\n        public code: SourceUnit[] = [];\n\n\n\u3060\u304b\u3089\u3001SourceUnit\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\u3092\u63a2\u305d\u3046\u3002\n\nSourceUnit\n\nreferenceResolutin.js\n    var SourceUnit = (function () {\n        function SourceUnit(path, fileInformation) {\n            this.path = path;\n            this.fileInformation = fileInformation;\n            this.referencedFiles = null;\n            this.lineStarts = null;\n        }\n        SourceUnit.prototype.getText = function (start, end) {\n            return this.fileInformation.contents().substring(start, end);\n        };\n\n        SourceUnit.prototype.getLength = function () {\n            return this.fileInformation.contents().length;\n        };\n\n        SourceUnit.prototype.getLineStartPositions = function () {\n            if (this.lineStarts === null) {\n                this.lineStarts = TypeScript.LineMap.fromString(this.fileInformation.contents()).lineStarts();\n            }\n\n            return this.lineStarts;\n        };\n\n        SourceUnit.prototype.getTextChangeRangeSinceVersion = function (scriptVersion) {\n            throw TypeScript.Errors.notYetImplemented();\n        };\n        return SourceUnit;\n    })();\n    TypeScript.SourceUnit = SourceUnit;\n\n\n\u3053\u308c\u306f\u3053\u306e\u307e\u307e\u4f7f\u3048\u3070\u3044\u3044\u306e\u304b\u306a\u2026\u3002\n\u3068\u3053\u308d\u3067\u3001FileInformation\u304c\u4f55\u304b\u3092\u8abf\u3079\u308b\u3068\u3001\n\ncore/environment.ts\nenum ByteOrderMark {\n    None,\n    Utf8,\n    Utf16BigEndian,\n    Utf16LittleEndian,\n}\n\nclass FileInformation {\n    private _contents: string;\n    private _byteOrderMark: ByteOrderMark;\n\n    constructor(contents: string, byteOrderMark: ByteOrderMark) {\n        this._contents = contents;\n        this._byteOrderMark = byteOrderMark;\n    }\n\n    public contents(): string {\n        return this._contents;\n    }\n\n    public byteOrderMark(): ByteOrderMark {\n        return this._byteOrderMark;\n    }\n}\n\n\n\u30c6\u30ad\u30b9\u30c8\u3068\u30d0\u30a4\u30c8\u30aa\u30fc\u30c0\u30fc\u304c\u5165\u3063\u3066\u308b\u3088\u3046\u3060\u3002\n\nStringHashTable\nCompilationEnvironment\u306e\u4e2d\u3067\u3001\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u304cTypeScript.StringHashTable\u3002\n\u30e1\u30f3\u30d0\u30fc\u540d\u304b\u3089\u3057\u3066\u3001\u304a\u305d\u3089\u304f\u3001\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u3068\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u3092\u7d10\u3064\u3051\u305f\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3060\u308d\u3046\u3051\u3069\u2026\u3002\n\u4e00\u5fdc\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u306e\u305e\u3044\u3066\u304a\u304f\u3002\n\nhashTable.js\n    var StringHashTable = (function () {\n        function StringHashTable() {\n            this.itemCount = 0;\n            this.table = (new BlockIntrinsics());\n        }\n        StringHashTable.prototype.getAllKeys = function () {\n            var result = [];\n\n            for (var k in this.table) {\n                if (this.table[k] !== undefined) {\n                    result.push(k);\n                }\n            }\n\n            return result;\n        };\n\n        StringHashTable.prototype.add = function (key, data) {\n            if (this.table[key] !== undefined) {\n                return false;\n            }\n\n            this.table[key] = data;\n            this.itemCount++;\n            return true;\n        };\n\n        StringHashTable.prototype.addOrUpdate = function (key, data) {\n            if (this.table[key] !== undefined) {\n                this.table[key] = data;\n                return false;\n            }\n\n            this.table[key] = data;\n            this.itemCount++;\n            return true;\n        };\n\n        StringHashTable.prototype.map = function (fn, context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n\n                if (data !== undefined) {\n                    fn(k, this.table[k], context);\n                }\n            }\n        };\n\n        StringHashTable.prototype.every = function (fn, context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n\n                if (data !== undefined) {\n                    if (!fn(k, this.table[k], context)) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        };\n\n        StringHashTable.prototype.some = function (fn, context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n\n                if (data !== undefined) {\n                    if (fn(k, this.table[k], context)) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        };\n\n        StringHashTable.prototype.count = function () {\n            return this.itemCount;\n        };\n\n        StringHashTable.prototype.lookup = function (key) {\n            var data = this.table[key];\n            return data === undefined ? null : data;\n        };\n\n\n\u3044\u304f\u3064\u304b\u30e1\u30bd\u30c3\u30c9\u3082\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u306e\u307e\u307e\u4f7f\u3063\u305f\u307b\u3046\u304c\u826f\u3055\u305d\u3046\u3002\n\nioHost\n\u3053\u3053\u307e\u3067\u898b\u3066\u304d\u3066\u3001\u89e3\u6c7a\u3057\u3066\u3044\u306a\u3044\u306e\u304c\"ioHost\"\u3068\u304b\u3044\u3046\u3084\u3064\u3002\n\u30bd\u30fc\u30b9\u3092\u3056\u3063\u3068\u773a\u3081\u305f\u611f\u3058\u3067\u306f\u3001io.js\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\n\nio.js\nvar IO = (function () {\n\n\n\u3042\u305f\u308a\u304b\u306a\u3002\n\u3067\u3001ActiveX\u95a2\u4fc2\u3092\u4f7f\u3046\u5834\u5408\u304c\u3001\n\nio.js\n    function getWindowsScriptHostIO() {\n\n\n\u3067\u3001Node.js\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u5834\u5408\u304c\n\nio.js\n    function getNodeIO() {\n\n\n\u306a\u3093\u3060\u308d\u3046\uff08\u305f\u3076\u3093\uff09\u3002\n\u3067\u3001\u3069\u3061\u3089\u304b\u610f\u8b58\u3057\u306a\u3044\u3067\u3044\u3044\u3088\u3046\u306b\u3001var IO \u306e\u5b9a\u7fa9\u306e\u6700\u5f8c\u3067\u3001\n\nio.js\n    if (typeof ActiveXObject === \"function\")\n        return getWindowsScriptHostIO(); else if (typeof module !== 'undefined' && module.exports)\n        return getNodeIO(); else\n    return null;\n})();\n\n\n\u306e\u3088\u3046\u306b\u8fd4\u3057\u3066\u308b\u308f\u3051\u304b\u2026\u3002\n\u3064\u307e\u308a\u3001IO \u3092\u4f7f\u3048\u3070\u3088\u304d\u306b\u306f\u304b\u3089\u3063\u3066\u304f\u308c\u308b\u306e\u304b\u306a\u2026\u3002\n\u3044\u3061\u304a\u3046\u3001\u5f8c\u3067\u81ea\u5206\u3067\u66f8\u304f\u3068\u304d\u306e\u305f\u3081\u306b\u30b7\u30b0\u30cd\u30c1\u30e3\u3092\u30e1\u30e2\u3057\u3068\u304f\u304b\u2026\u3002\n\nio.js\nreadFile: function (file)\nwriteFile: function (path, contents, writeByteOrderMark)\ndeleteFile: function (path)\nfileExists: function (path)\ndir: function dir(path, spec, options)\ncreateDirectory: function (path)\ndirectoryExists: function (path)\nresolvePath: function (path)\ndirName: function (path)\nfindFile: function (rootPath, partialFilePath)\nprint: function (str)\nprintLine: function (str)\narguments: process.argv.slice(2)\nstderr: {\n   Write: function (str)\n   WriteLine: function (str)\n   Close: function ()\n  }\nstdout: {\n    Write: function (str)\n    WriteLine: function (str)\n    Close: function ()\n  }\nwatchFile: function (fileName, callback)\nrun: function (source, fileName)\ngetExecutingFilePath: function ()\nquit:\n\n\n\u3042\u3002\u7d50\u69cb\u3001\u3081\u3093\u3069\u3044\u2026\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u30bd\u30fc\u30b9\u306e\u8a2d\u5b9a\n\u3055\u3066\u3001\u3053\u308c\u3060\u3051\u306e\u60c5\u5831\u304c\u3042\u308c\u3070\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3051\u308b\u304b\u306a\u2026\uff1f\n\ntsc.js\nvar compiler = new TypeScript.TypeScriptCompiler(logger, this.compilationSettings, localizedDiagnosticMessages);\n\n\n\u307e\u305a\u306f\u3001\u3053\u306e\u30b3\u30fc\u30c9\u3092\u51fa\u767a\u70b9\u3068\u3059\u308b\u3002\nlocalizedDiagnosticMessages\u306f\u3001null\u3067\u69cb\u308f\u306a\u3044\u3002\n\u307e\u305f\u3001logger\u306fNullLogger\u3092\u4f7f\u3063\u3066\u304a\u304f\u3002\n\nmyCompile.js\nvar logger = new TypeScript.NullLoger();\nvar compiler = new TypeScript.TypeScriptCompiler(logger, this.compilationSettings, null);\n\n\n\u3072\u3068\u307e\u305a\u3001\u3053\u3046\u306a\u308b\u3002\n\u3042\u3068\u306f\u3001\u5b9f\u969b\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3053\u3068\u3092\u5ff5\u982d\u306b\u8003\u3048\u3066\u3044\u304f\u3002\nBatchCompiler\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u3001\u5fc5\u8981\u306a\u5909\u6570\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\nmyCompile.js\nvar ioHost = IO;\nvar compilationSettings = new TypeScript.CompilationSettings();\nvar compilationEnvironment = new TypeScript.CompilationEnvironment(compilationSettings, ioHost);\n\n\ntsc.js\u3067\u306f\u3001\u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u3044\u305f\u3051\u3069\u3001\n\u3053\u3053\u3067\u306f\u3001\uff11\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u30b3\u30f3\u30d1\u30a4\u30eb\u51fa\u6765\u308c\u3070\u5341\u5206\u306a\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\nmyCompile.js\nvar path = \"source.file.js\";\nvar fileInformation = ioHost.readFile(path);\nvar code = new TypeScript.SourceUnit(path, fileInformation);\ncompiler.addSourceUnit(\n    code.path,\n    TypeScript.ScriptSnapshot.fromString(code.fileInformation.contents()),\n    code.fileInformation.byteOrderMark(),\n    0,\n    false,\n    code.referencedFiles);\n\n\n\u3053\u308c\u3067\u3001\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092compiler\u306b\u7d50\u3073\u3064\u3051\u308b\u3068\u3053\u306f\u51fa\u6765\u305f\u304b\u306a\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u95a2\u9023\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\n\u6b21\u306f\u5b9f\u969b\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3042\u305f\u308a\u3002\n\u3084\u306f\u308a\u3001BatchCompiler\u3092\u53c2\u8003\u306b\u3057\u3066\u8003\u3048\u3066\u3044\u304f\u3002\n\n\u69cb\u6587\u30c1\u30a7\u30c3\u30af\n\u6700\u521d\u306b\u69cb\u6587\u30c1\u30a7\u30c3\u30af\u3059\u308b\u307f\u305f\u3044\u3002\n\nmyCompile.js\n// \u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30a8\u30e9\u30fc\u306e\u30c1\u30a7\u30c3\u30af\uff1f\nvar syntacticDiagnostics = compiler.getSyntacticDiagnostics(code.path);\ncompiler.reportDiagnostics(syntacticDiagnostics, this.errorReporter);\n\nvar anySintacticErros = false;\nif (syntacticDiagnostics.length > 0) {\n    anySyntacticErrors = true;  // \u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30a8\u30e9\u30fc\u6709\u308a\n}\n\nif (anySyntacticErrors) {\n    return true; // \u30a8\u30e9\u30fc\u3067\u7d42\u4e86\n}\n\n\n\u3069\u3046\u3067\u3082\u3044\u3044\u3051\u3069\u3001\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u305f\u3068\u304d\u306b\u771f\u3092\u8fd4\u3059\u3093\u3060\u2026\uff1cBatchCompiler\n\n\u578b\u30c1\u30a7\u30c3\u30af\u3068\u610f\u5473\u89e3\u6790\n\u6b21\u304c\u578b\u306e\u30c1\u30a7\u30c3\u30af\u3068\u610f\u5473\u89e3\u6790\u3063\u307d\u3044\u3002\n\nmyCompile.js\ncompiler.pullTypeCheck();\nvar fileNames = compiler.fileNameToDocument.getAllKeys();\n\nfor (var i = 0, n = fileNames.length; i < n; i++) {\n    var fileName = fileNames[i];\n    var semanticDiagnostics = compiler.getSemanticDiagnostics(fileName);\n    if (semanticDiagnostics.length > 0) {\n        anySemanticErrors = true;\n        compiler.reportDiagnostics(semanticDiagnostics, this.errorReporter);\n    }\n}\n\n\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u7d50\u679c\u306e\u66f8\u51fa\u3057\n\u3042\u3068\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\u306e\u304b\u306a\u3002\n\nmyCompile.js\n// \u30d5\u30a1\u30a4\u30eb\u66f8\u51fa\u3057\u7528\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\nvar emitterIOHost = {\n    writeFile: function (fileName, contents, writeByteOrderMark) {\n        return IOUtils.writeFileAndFolderStructure(_this.ioHost, fileName, contents, writeByteOrderMark);\n    },\n    directoryExists: this.ioHost.directoryExists,\n    fileExists: this.ioHost.fileExists,\n    resolvePath: this.ioHost.resolvePath\n};\n\n// \u3088\u304f\u308f\u304b\u3089\u306a\u3044\u4f55\u304b\uff08\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u3069\u3046\u3057\u305f\u3053\u3046\u3057\u305f\uff1f\uff09\nvar mapInputToOutput = function (inputFile, outputFile) {\n    _this.resolvedEnvironment.inputFileNameToOutputFileName.addOrUpdate(inputFile, outputFile);\n};\n\n// \u767a\u884c\uff08\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u51fa\u3057\uff1f\uff09\nvar emitDiagnostics = compiler.emitAll(emitterIOHost, mapInputToOutput);\ncompiler.reportDiagnostics(emitDiagnostics, this.errorReporter);\nif (emitDiagnostics.length > 0) {\n    return true; // \u30a8\u30e9\u30fc\u3067\u7d42\u4e86\n}\n\nif (anySemanticErrors) {\n    return true; // \u30a8\u30e9\u30fc\u3067\u7d42\u4e86\n}\n\n// \u767a\u884c\uff08\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u51fa\u3057\uff1f\uff09\u3000\u305d\u306e\uff12\nvar emitDeclarationsDiagnostics = compiler.emitAllDeclarations();\ncompiler.reportDiagnostics(emitDeclarationsDiagnostics, this.errorReporter);\nif (emitDeclarationsDiagnostics.length > 0) {\n    return true; // \u30a8\u30e9\u30fc\u3067\u7d42\u4e86\n}\n\nreturn false; // \u7121\u4e8b\u30b3\u30f3\u30d1\u30a4\u30eb\u5b8c\u4e86\n\n\n\u89e3\u6790\u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u307e\u3067\u306f\u3001\u307b\u307c\u3053\u306e\u307e\u307e\u4f7f\u3048\u305d\u3046\u304b\u306a\u2026\u3002\n\n\u307e\u3068\u3081\n\u3053\u3053\u307e\u3067\u3092\u307e\u3068\u3081\u3066\u3001\uff11\u3064\u306e\u30b3\u30fc\u30c9\u306b\u66f8\u3044\u3066\u307f\u308b\u3002\n\nmyCompile.js\nvar ByteOrderMark;\n(function (ByteOrderMark) {\n    ByteOrderMark[ByteOrderMark[\"None\"] = 0] = \"None\";\n    ByteOrderMark[ByteOrderMark[\"Utf8\"] = 1] = \"Utf8\";\n    ByteOrderMark[ByteOrderMark[\"Utf16BigEndian\"] = 2] = \"Utf16BigEndian\";\n    ByteOrderMark[ByteOrderMark[\"Utf16LittleEndian\"] = 3] = \"Utf16LittleEndian\";\n})(ByteOrderMark || (ByteOrderMark = {}));\n\nvar FileInformation = (function () {\n    function FileInformation(contents, byteOrderMark) {\n        this._contents = contents;\n        this._byteOrderMark = byteOrderMark;\n    }\n    FileInformation.prototype.contents = function () {\n        return this._contents;\n    };\n\n    FileInformation.prototype.byteOrderMark = function () {\n        return this._byteOrderMark;\n    };\n    return FileInformation;\n})();\n\nvar Environment = (function () {\n    function getWindowsScriptHostEnvironment() {\n        try  {\n            var fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n        } catch (e) {\n            return null;\n        }\n\n        var streamObjectPool = [];\n\n        function getStreamObject() {\n            if (streamObjectPool.length > 0) {\n                return streamObjectPool.pop();\n            } else {\n                return new ActiveXObject(\"ADODB.Stream\");\n            }\n        }\n\n        function releaseStreamObject(obj) {\n            streamObjectPool.push(obj);\n        }\n\n        var args = [];\n        for (var i = 0; i < WScript.Arguments.length; i++) {\n            args[i] = WScript.Arguments.Item(i);\n        }\n\n        return {\n            currentDirectory: function () {\n                return (WScript).CreateObject(\"WScript.Shell\").CurrentDirectory;\n            },\n            readFile: function (path) {\n                try  {\n                    var streamObj = getStreamObject();\n                    streamObj.Open();\n                    streamObj.Type = 2;\n\n                    streamObj.Charset = 'x-ansi';\n\n                    streamObj.LoadFromFile(path);\n                    var bomChar = streamObj.ReadText(2);\n\n                    streamObj.Position = 0;\n\n                    var byteOrderMark = ByteOrderMark.None;\n\n                    if (bomChar.charCodeAt(0) === 0xFE && bomChar.charCodeAt(1) === 0xFF) {\n                        streamObj.Charset = 'unicode';\n                        byteOrderMark = ByteOrderMark.Utf16BigEndian;\n                    } else if (bomChar.charCodeAt(0) === 0xFF && bomChar.charCodeAt(1) === 0xFE) {\n                        streamObj.Charset = 'unicode';\n                        byteOrderMark = ByteOrderMark.Utf16LittleEndian;\n                    } else if (bomChar.charCodeAt(0) === 0xEF && bomChar.charCodeAt(1) === 0xBB) {\n                        streamObj.Charset = 'utf-8';\n                        byteOrderMark = ByteOrderMark.Utf8;\n                    } else {\n                        streamObj.Charset = 'utf-8';\n                    }\n\n                    var contents = streamObj.ReadText(-1);\n                    streamObj.Close();\n                    releaseStreamObject(streamObj);\n                    return new FileInformation(contents, byteOrderMark);\n                } catch (err) {\n                    var error = new Error(err.message);\n\n                    var message;\n                    if (err.number === -2147024809) {\n                        error.isUnsupportedEncoding = true;\n                    }\n\n                    throw error;\n                }\n            },\n            writeFile: function (path, contents, writeByteOrderMark) {\n                var textStream = getStreamObject();\n                textStream.Charset = 'utf-8';\n                textStream.Open();\n                textStream.WriteText(contents, 0);\n\n                if (!writeByteOrderMark) {\n                    textStream.Position = 3;\n                } else {\n                    textStream.Position = 0;\n                }\n\n                var fileStream = getStreamObject();\n                fileStream.Type = 1;\n                fileStream.Open();\n\n                textStream.CopyTo(fileStream);\n\n                fileStream.Flush();\n                fileStream.SaveToFile(path, 2);\n                fileStream.Close();\n\n                textStream.Flush();\n                textStream.Close();\n            },\n            fileExists: function (path) {\n                return fso.FileExists(path);\n            },\n            deleteFile: function (path) {\n                if (fso.FileExists(path)) {\n                    fso.DeleteFile(path, true);\n                }\n            },\n            directoryExists: function (path) {\n                return fso.FolderExists(path);\n            },\n            listFiles: function (path, spec, options) {\n                options = options || {};\n                function filesInFolder(folder, root) {\n                    var paths = [];\n                    var fc;\n\n                    if (options.recursive) {\n                        fc = new Enumerator(folder.subfolders);\n\n                        for (; !fc.atEnd(); fc.moveNext()) {\n                            paths = paths.concat(filesInFolder(fc.item(), root + \"\\\\\" + fc.item().Name));\n                        }\n                    }\n\n                    fc = new Enumerator(folder.files);\n\n                    for (; !fc.atEnd(); fc.moveNext()) {\n                        if (!spec || fc.item().Name.match(spec)) {\n                            paths.push(root + \"\\\\\" + fc.item().Name);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                var folder = fso.GetFolder(path);\n                var paths = [];\n\n                return filesInFolder(folder, path);\n            },\n            arguments: args,\n            standardOut: WScript.StdOut\n        };\n    }\n    ;\n\n    function getNodeEnvironment() {\n        var _fs = require('fs');\n        var _path = require('path');\n        var _module = require('module');\n\n        return {\n            currentDirectory: function () {\n                return (process).cwd();\n            },\n            readFile: function (file) {\n                var buffer = _fs.readFileSync(file);\n                switch (buffer[0]) {\n                    case 0xFE:\n                        if (buffer[1] === 0xFF) {\n                            var i = 0;\n                            while ((i + 1) < buffer.length) {\n                                var temp = buffer[i];\n                                buffer[i] = buffer[i + 1];\n                                buffer[i + 1] = temp;\n                                i += 2;\n                            }\n                            return new FileInformation(buffer.toString(\"ucs2\", 2), ByteOrderMark.Utf16BigEndian);\n                        }\n                        break;\n                    case 0xFF:\n                        if (buffer[1] === 0xFE) {\n                            return new FileInformation(buffer.toString(\"ucs2\", 2), ByteOrderMark.Utf16LittleEndian);\n                        }\n                        break;\n                    case 0xEF:\n                        if (buffer[1] === 0xBB) {\n                            return new FileInformation(buffer.toString(\"utf8\", 3), ByteOrderMark.Utf8);\n                        }\n                }\n\n                return new FileInformation(buffer.toString(\"utf8\", 0), ByteOrderMark.None);\n            },\n            writeFile: function (path, contents, writeByteOrderMark) {\n                function mkdirRecursiveSync(path) {\n                    var stats = _fs.statSync(path);\n                    if (stats.isFile()) {\n                        throw \"\\\"\" + path + \"\\\" exists but isn't a directory.\";\n                    } else if (stats.isDirectory()) {\n                        return;\n                    } else {\n                        mkdirRecursiveSync(_path.dirname(path));\n                        _fs.mkdirSync(path, 0775);\n                    }\n                }\n                mkdirRecursiveSync(_path.dirname(path));\n\n                if (writeByteOrderMark) {\n                    contents = '\\uFEFF' + contents;\n                }\n                _fs.writeFileSync(path, contents, \"utf8\");\n            },\n            fileExists: function (path) {\n                return _fs.existsSync(path);\n            },\n            deleteFile: function (path) {\n                try  {\n                    _fs.unlinkSync(path);\n                } catch (e) {\n                }\n            },\n            directoryExists: function (path) {\n                return _fs.existsSync(path) && _fs.statSync(path).isDirectory();\n            },\n            listFiles: function dir(path, spec, options) {\n                options = options || {};\n\n                function filesInFolder(folder) {\n                    var paths = [];\n\n                    var files = _fs.readdirSync(folder);\n                    for (var i = 0; i < files.length; i++) {\n                        var stat = _fs.statSync(folder + \"\\\\\" + files[i]);\n                        if (options.recursive && stat.isDirectory()) {\n                            paths = paths.concat(filesInFolder(folder + \"\\\\\" + files[i]));\n                        } else if (stat.isFile() && (!spec || files[i].match(spec))) {\n                            paths.push(folder + \"\\\\\" + files[i]);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                return filesInFolder(path);\n            },\n            arguments: process.argv.slice(2),\n            standardOut: {\n                Write: function (str) {\n                    process.stdout.write(str);\n                },\n                WriteLine: function (str) {\n                    process.stdout.write(str + '\\n');\n                },\n                Close: function () {\n                }\n            }\n        };\n    }\n    ;\n\n    if (typeof WScript !== \"undefined\" && typeof ActiveXObject === \"function\") {\n        return getWindowsScriptHostEnvironment();\n    } else if (typeof module !== 'undefined' && module.exports) {\n        return getNodeEnvironment();\n    } else {\n        return null;\n    }\n})();\n\nvar IOUtils;\n(function (IOUtils) {\n    function createDirectoryStructure(ioHost, dirName) {\n        if (ioHost.directoryExists(dirName)) {\n            return;\n        }\n\n        var parentDirectory = ioHost.dirName(dirName);\n        if (parentDirectory != \"\") {\n            createDirectoryStructure(ioHost, parentDirectory);\n        }\n        ioHost.createDirectory(dirName);\n    }\n\n    function writeFileAndFolderStructure(ioHost, fileName, contents, writeByteOrderMark) {\n        var path = ioHost.resolvePath(fileName);\n        var dirName = ioHost.dirName(path);\n        createDirectoryStructure(ioHost, dirName);\n        return ioHost.writeFile(path, contents, writeByteOrderMark);\n    }\n    IOUtils.writeFileAndFolderStructure = writeFileAndFolderStructure;\n\n    function throwIOError(message, error) {\n        var errorMessage = message;\n        if (error && error.message) {\n            errorMessage += (\" \" + error.message);\n        }\n        throw new Error(errorMessage);\n    }\n    IOUtils.throwIOError = throwIOError;\n\n    var BufferedTextWriter = (function () {\n        function BufferedTextWriter(writer, capacity) {\n            if (typeof capacity === \"undefined\") { capacity = 1024; }\n            this.writer = writer;\n            this.capacity = capacity;\n            this.buffer = \"\";\n        }\n        BufferedTextWriter.prototype.Write = function (str) {\n            this.buffer += str;\n            if (this.buffer.length >= this.capacity) {\n                this.writer.Write(this.buffer);\n                this.buffer = \"\";\n            }\n        };\n        BufferedTextWriter.prototype.WriteLine = function (str) {\n            this.Write(str + '\\r\\n');\n        };\n        BufferedTextWriter.prototype.Close = function () {\n            this.writer.Write(this.buffer);\n            this.writer.Close();\n            this.buffer = null;\n        };\n        return BufferedTextWriter;\n    })();\n    IOUtils.BufferedTextWriter = BufferedTextWriter;\n})(IOUtils || (IOUtils = {}));\n\nvar IO = (function () {\n    function getWindowsScriptHostIO() {\n        var fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n        var streamObjectPool = [];\n\n        function getStreamObject() {\n            if (streamObjectPool.length > 0) {\n                return streamObjectPool.pop();\n            } else {\n                return new ActiveXObject(\"ADODB.Stream\");\n            }\n        }\n\n        function releaseStreamObject(obj) {\n            streamObjectPool.push(obj);\n        }\n\n        var args = [];\n        for (var i = 0; i < WScript.Arguments.length; i++) {\n            args[i] = WScript.Arguments.Item(i);\n        }\n\n        return {\n            readFile: function (path) {\n                return Environment.readFile(path);\n            },\n            writeFile: function (path, contents, writeByteOrderMark) {\n                Environment.writeFile(path, contents, writeByteOrderMark);\n            },\n            fileExists: function (path) {\n                return fso.FileExists(path);\n            },\n            resolvePath: function (path) {\n                return fso.GetAbsolutePathName(path);\n            },\n            dirName: function (path) {\n                return fso.GetParentFolderName(path);\n            },\n            findFile: function (rootPath, partialFilePath) {\n                var path = fso.GetAbsolutePathName(rootPath) + \"/\" + partialFilePath;\n\n                while (true) {\n                    if (fso.FileExists(path)) {\n                        return { fileInformation: this.readFile(path), path: path };\n                    } else {\n                        rootPath = fso.GetParentFolderName(fso.GetAbsolutePathName(rootPath));\n\n                        if (rootPath == \"\") {\n                            return null;\n                        } else {\n                            path = fso.BuildPath(rootPath, partialFilePath);\n                        }\n                    }\n                }\n            },\n            deleteFile: function (path) {\n                try  {\n                    if (fso.FileExists(path)) {\n                        fso.DeleteFile(path, true);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn't delete file '\" + path + \"'.\", e);\n                }\n            },\n            directoryExists: function (path) {\n                return fso.FolderExists(path);\n            },\n            createDirectory: function (path) {\n                try  {\n                    if (!this.directoryExists(path)) {\n                        fso.CreateFolder(path);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn't create directory '\" + path + \"'.\", e);\n                }\n            },\n            dir: function (path, spec, options) {\n                options = options || {};\n                function filesInFolder(folder, root) {\n                    var paths = [];\n                    var fc;\n\n                    if (options.recursive) {\n                        fc = new Enumerator(folder.subfolders);\n\n                        for (; !fc.atEnd(); fc.moveNext()) {\n                            paths = paths.concat(filesInFolder(fc.item(), root + \"/\" + fc.item().Name));\n                        }\n                    }\n\n                    fc = new Enumerator(folder.files);\n\n                    for (; !fc.atEnd(); fc.moveNext()) {\n                        if (!spec || fc.item().Name.match(spec)) {\n                            paths.push(root + \"/\" + fc.item().Name);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                var folder = fso.GetFolder(path);\n                var paths = [];\n\n                return filesInFolder(folder, path);\n            },\n            print: function (str) {\n                WScript.StdOut.Write(str);\n            },\n            printLine: function (str) {\n                WScript.Echo(str);\n            },\n            arguments: args,\n            stderr: WScript.StdErr,\n            stdout: WScript.StdOut,\n            watchFile: null,\n            run: function (source, fileName) {\n                try  {\n                    eval(source);\n                } catch (e) {\n                    IOUtils.throwIOError(\"Error while executing file '\" + fileName + \"'.\", e);\n                }\n            },\n            getExecutingFilePath: function () {\n                return WScript.ScriptFullName;\n            },\n            quit: function (exitCode) {\n                if (typeof exitCode === \"undefined\") { exitCode = 0; }\n                try  {\n                    WScript.Quit(exitCode);\n                } catch (e) {\n                }\n            }\n        };\n    }\n    ;\n\n    function getNodeIO() {\n        var _fs = require('fs');\n        var _path = require('path');\n        var _module = require('module');\n\n        return {\n            readFile: function (file) {\n                return Environment.readFile(file);\n            },\n            writeFile: function (path, contents, writeByteOrderMark) {\n                Environment.writeFile(path, contents, writeByteOrderMark);\n            },\n            deleteFile: function (path) {\n                try  {\n                    _fs.unlinkSync(path);\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn't delete file '\" + path + \"'.\", e);\n                }\n            },\n            fileExists: function (path) {\n                return _fs.existsSync(path);\n            },\n            dir: function dir(path, spec, options) {\n                options = options || {};\n\n                function filesInFolder(folder) {\n                    var paths = [];\n\n                    try  {\n                        var files = _fs.readdirSync(folder);\n                        for (var i = 0; i < files.length; i++) {\n                            var stat = _fs.statSync(folder + \"/\" + files[i]);\n                            if (options.recursive && stat.isDirectory()) {\n                                paths = paths.concat(filesInFolder(folder + \"/\" + files[i]));\n                            } else if (stat.isFile() && (!spec || files[i].match(spec))) {\n                                paths.push(folder + \"/\" + files[i]);\n                            }\n                        }\n                    } catch (err) {\n                    }\n\n                    return paths;\n                }\n\n                return filesInFolder(path);\n            },\n            createDirectory: function (path) {\n                try  {\n                    if (!this.directoryExists(path)) {\n                        _fs.mkdirSync(path);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn't create directory '\" + path + \"'.\", e);\n                }\n            },\n            directoryExists: function (path) {\n                return _fs.existsSync(path) && _fs.statSync(path).isDirectory();\n            },\n            resolvePath: function (path) {\n                return _path.resolve(path);\n            },\n            dirName: function (path) {\n                return _path.dirname(path);\n            },\n            findFile: function (rootPath, partialFilePath) {\n                var path = rootPath + \"/\" + partialFilePath;\n\n                while (true) {\n                    if (_fs.existsSync(path)) {\n                        return { fileInformation: this.readFile(path), path: path };\n                    } else {\n                        var parentPath = _path.resolve(rootPath, \"..\");\n\n                        if (rootPath === parentPath) {\n                            return null;\n                        } else {\n                            rootPath = parentPath;\n                            path = _path.resolve(rootPath, partialFilePath);\n                        }\n                    }\n                }\n            },\n            print: function (str) {\n                process.stdout.write(str);\n            },\n            printLine: function (str) {\n                process.stdout.write(str + '\\n');\n            },\n            arguments: process.argv.slice(2),\n            stderr: {\n                Write: function (str) {\n                    process.stderr.write(str);\n                },\n                WriteLine: function (str) {\n                    process.stderr.write(str + '\\n');\n                },\n                Close: function () {\n                }\n            },\n            stdout: {\n                Write: function (str) {\n                    process.stdout.write(str);\n                },\n                WriteLine: function (str) {\n                    process.stdout.write(str + '\\n');\n                },\n                Close: function () {\n                }\n            },\n            watchFile: function (fileName, callback) {\n                var firstRun = true;\n                var processingChange = false;\n\n                var fileChanged = function (curr, prev) {\n                    if (!firstRun) {\n                        if (curr.mtime < prev.mtime) {\n                            return;\n                        }\n\n                        _fs.unwatchFile(fileName, fileChanged);\n                        if (!processingChange) {\n                            processingChange = true;\n                            callback(fileName);\n                            setTimeout(function () {\n                                processingChange = false;\n                            }, 100);\n                        }\n                    }\n                    firstRun = false;\n                    _fs.watchFile(fileName, { persistent: true, interval: 500 }, fileChanged);\n                };\n\n                fileChanged();\n                return {\n                    fileName: fileName,\n                    close: function () {\n                        _fs.unwatchFile(fileName, fileChanged);\n                    }\n                };\n            },\n            run: function (source, fileName) {\n                require.main.fileName = fileName;\n                require.main.paths = _module._nodeModulePaths(_path.dirname(_fs.realpathSync(fileName)));\n                require.main._compile(source, fileName);\n            },\n            getExecutingFilePath: function () {\n                return process.mainModule.filename;\n            },\n            quit: process.exit\n        };\n    }\n    ;\n\n    if (typeof ActiveXObject === \"function\")\n        return getWindowsScriptHostIO(); else if (typeof module !== 'undefined' && module.exports)\n        return getNodeIO(); else\n        return null;\n})();\n\nfunction compile(logger, sourcefilename){\n    //\n    // \u30c6\u30f3\u30dd\u30e9\u30ea\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306btypescript.js\u304c\u7121\u3044\u3068\u304d\u306b\u306f\u3001node_modules/\u304b\u3089\u8aad\u307f\u8fbc\u3080\u3002\n    //\n    var fs = require(\"fs\"),\n        path = require(\"path\");\n\n    var typescript_filename = process.env.TMPDIR + \"typescript.js\";\n    if( ! fs.existsSync(typescript_filename)){\n        var code = [\n            fs.readFileSync(\"/usr/local/lib/node_modules/typescript/bin/typescript.js\"), // <-\u5404\u81ea\u306e\u74b0\u5883\u306b\u5408\u308f\u305b\u3066\u30d1\u30b9\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3002\n            \"exports.TypeScript = TypeScript;\"\n        ].join(\"\");\n        fs.writeFileSync(typescript_filename, code);\n    }\n\n    //\n    // \u3053\u306e\u8fba\u304b\u3089\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u672c\u7de8\n    //\n    var TypeScript = require(typescript_filename).TypeScript;\n    var _this = this;\n\n    var ErrorReporter = (function() {\n        function ErrorReporter(ioHost, compilationEnvironment) {\n            this.ioHost = ioHost;\n            this.hasErrors = false;\n            this.setCompilationEnvironment(compilationEnvironment);\n        }\n\n        ErrorReporter.prototype.addDiagnostic = function(diagnostic) {\n            this.hasErrors = true;\n\n            if (diagnostic.fileName()) {\n                var soruceUnit = this.compilationEnvironment.getSourceUnit(diagnostic.fileName());\n                if (!soruceUnit) {\n                    soruceUnit = new TypeScript.SourceUnit(diagnostic.fileName(), this.ioHost.readFile(diagnostic.fileName()));\n                }\n                var lineMap = new TypeScript.LineMap(soruceUnit.getLineStartPositions(), soruceUnit.getLength());\n                var lineCol = {\n                    line : -1,\n                    character : -1\n                };\n                lineMap.fillLineAndCharacterFromPosition(diagnostic.start(), lineCol);\n\n                this.ioHost.stderr.Write(diagnostic.fileName() + \"(\" + (lineCol.line + 1) + \",\" + (lineCol.character + 1) + \"): \");\n            }\n\n            this.ioHost.stderr.WriteLine(diagnostic.message());\n        };\n\n        ErrorReporter.prototype.setCompilationEnvironment = function(compilationEnvironment) {\n            this.compilationEnvironment = compilationEnvironment;\n        };\n\n        ErrorReporter.prototype.reset = function() {\n            this.hasErrors = false;\n        };\n        return ErrorReporter;\n    })(); \n\n    this.ioHost = IO;\n    this.hasResolveErrors = false;\n    this.compilerVersion = \"0.9.0.1\";\n    this.printedVersion = false;\n    this.errorReporter = null;\n    this.compilationSettings = new TypeScript.CompilationSettings();\n    this.compilationEnvironment = new TypeScript.CompilationEnvironment(compilationSettings, ioHost);\n    this.resolvedEnvironment = this.compilationEnvironment;\n    this.errorReporter = new ErrorReporter(this.ioHost, this.compilationEnvironment);\n\n    var compiler = new TypeScript.TypeScriptCompiler(logger, this.compilationSettings, null);\n\n    //\n    // \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u8a2d\u5b9a\n    //\n    var fileInformation = ioHost.readFile(sourcefilename);\n    var code = new TypeScript.SourceUnit(sourcefilename, fileInformation);\n\n    compiler.addSourceUnit(\n        code.path,\n        TypeScript.ScriptSnapshot.fromString(code.fileInformation.contents()),\n        code.fileInformation.byteOrderMark(),\n        0,\n        false,\n        code.referencedFiles);\n\n    //\n    // \u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30a8\u30e9\u30fc\u306e\u30c1\u30a7\u30c3\u30af\uff1f\n    //\n    var syntacticDiagnostics = compiler.getSyntacticDiagnostics(code.path);\n    compiler.reportDiagnostics(syntacticDiagnostics, this.errorReporter);\n\n    var anySyntacticErrors = false;\n    var anySemanticErrors = false;\n\n\n    if (syntacticDiagnostics.length > 0) {\n        anySyntacticErrors = true;  // \u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30a8\u30e9\u30fc\u6709\u308a\n    }\n\n    if (anySyntacticErrors) {\n        return true; // \u30a8\u30e9\u30fc\u3067\u7d42\u4e86\n    }\n\n    //\n    // \u578b\u30c1\u30a7\u30c3\u30af\u3068\u610f\u5473\u89e3\u6790\n    //\n    compiler.pullTypeCheck();\n    var fileNames = compiler.fileNameToDocument.getAllKeys();\n\n    for (var i = 0, n = fileNames.length; i < n; i++) {\n        var fileName = fileNames[i];\n        var semanticDiagnostics = compiler.getSemanticDiagnostics(fileName);\n        if (semanticDiagnostics.length > 0) {\n            anySemanticErrors = true;\n            compiler.reportDiagnostics(semanticDiagnostics, this.errorReporter);\n        }\n    }\n\n    //\n    // \u30b3\u30f3\u30d1\u30a4\u30eb\u7d50\u679c\u306e\u66f8\u51fa\u3057\n    //\n\n    // \u30d5\u30a1\u30a4\u30eb\u66f8\u51fa\u3057\u7528\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n    var emitterIOHost = {\n        writeFile: function (fileName, contents, writeByteOrderMark) {\n            return IOUtils.writeFileAndFolderStructure(_this.ioHost, fileName, contents, writeByteOrderMark);\n        },\n        directoryExists: this.ioHost.directoryExists,\n        fileExists: this.ioHost.fileExists,\n        resolvePath: this.ioHost.resolvePath\n    };\n\n    // \u3088\u304f\u308f\u304b\u3089\u306a\u3044\u4f55\u304b\uff08\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u3069\u3046\u3057\u305f\u3053\u3046\u3057\u305f\uff1f\uff09\n    var mapInputToOutput = function (inputFile, outputFile) {\n        _this.resolvedEnvironment.inputFileNameToOutputFileName.addOrUpdate(inputFile, outputFile);\n    };\n\n    // \u767a\u884c\uff08\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u51fa\u3057\uff1f\uff09\n    var emitDiagnostics = compiler.emitAll(emitterIOHost, mapInputToOutput);\n    compiler.reportDiagnostics(emitDiagnostics, this.errorReporter);\n    if (emitDiagnostics.length > 0) {\n        return true; // \u30a8\u30e9\u30fc\u3067\u7d42\u4e86\n    }\n\n    if (anySemanticErrors) {\n        return true; // \u30a8\u30e9\u30fc\u3067\u7d42\u4e86\n    }\n\n    // \u767a\u884c\uff08\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u51fa\u3057\uff1f\uff09\u3000\u305d\u306e\uff12\n    var emitDeclarationsDiagnostics = compiler.emitAllDeclarations();\n    compiler.reportDiagnostics(emitDeclarationsDiagnostics, this.errorReporter);\n    if (emitDeclarationsDiagnostics.length > 0) {\n        return true; // \u30a8\u30e9\u30fc\u3067\u7d42\u4e86\n    }\n\n    return false; // \u7121\u4e8b\u30b3\u30f3\u30d1\u30a4\u30eb\u5b8c\u4e86\n}\n\n// usage: \n/*\nvar logger = {\n    information: function () {\n        return false;\n    },\n    debug: function () {\n        return false;\n    },\n    warning: function () {\n        return false;\n    },\n    error: function () {\n        return false;\n    },\n    fatal: function () {\n        return false;\n    },\n    log: function (s) {\n        console.log(s);\n    }\n};\ncompile(logger, \"test.ts\");\n*/\n\n\n\n\u306a\u3093\u304b\u66f8\u3044\u3066\u308b\u3046\u3061\u306b\u9577\u304f\u306a\u3063\u305f\u2026orz\n\n\u52d5\u4f5c\u30c6\u30b9\u30c8\u3092\u3057\u305f\u3089\u3001\u304a\u3057\u307e\u3044\u3002\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30c6\u30b9\u30c8\u7528\u30d5\u30a1\u30a4\u30eb\u3082\u4e00\u5fdc\u3002\n\ntest.ts\nclass Human {\n    name: string;\n\n    constructor (name: string) {\n        this.name = name;\n    }\n\n    hello (): string {\n        return \"Hello, \" + this.name + \"!\";\n    }\n}\n\n\n\n\u81ea\u5206\u7528\u306e\u30e1\u30e2\u3068\u5272\u308a\u5207\u3063\u3066\u66f8\u3044\u305f\u304b\u3089\u3001\u3081\u3063\u3061\u3083\u8aad\u307f\u306b\u304f\u3044\u306a\u3053\u306e\u8a18\u4e8b\u2026\u3002\n\u529b\u6280\u3059\u304e\u308b\u304b\u3089\u3001\u3042\u3068\u3067\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u304b\u3082\u2026\u3002\n\n\u81ea\u5206\u7528\u30e1\u30e2\n\n>\u3053\u3053\u3067\u306f\u3001TypeScript\u306e\u30bd\u30fc\u30b9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u3066\u3001\n>\u3000cd src/compiler\n>\u3000tsc tsc.ts\n>\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u51fa\u529b\u3055\u308c\u308bJavascript\u306e\u30bd\u30fc\u30b9\u3092\u8aad\u3093\u3067\u3044\u307e\u3059\u3002\n\n# \u3084\u308a\u305f\u3044\u4e8b\n\n\u81ea\u5206\u306e\u66f8\u3044\u3066\u3044\u308bJavaScript\u306e\u30b3\u30fc\u30c9\u304b\u3089\u3001TypeScriptCompiler\u3092\u547c\u3073\u51fa\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3044\u3002\n\u53c2\u7167\u3057\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u3068\u304b\u306f\u8003\u3048\u306a\u3044\u3067\u3001\uff11\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u95a2\u6570\u3092\u66f8\u304f\u306e\u304c\u6700\u7d42\u7684\u306a\u76ee\u6a19\u3002\n\n>\u7d50\u679c\u3060\u3051\u307f\u305f\u3044\u4eba\u306f\u300c\u307e\u3068\u3081\u300d\u307e\u3067\u98db\u3079\u3070\u30aa\u30c3\u30b1\u30fc\u3002\n\n# TypeScriptCompiler\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\n\n\u307e\u305a\u306f\u3001\u30e1\u30bd\u30c3\u30c9BatchCompiler.prototype.compile\u3067TypeScriptCompiler\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u884c\u3092\u898b\u3066\u307f\u308b\u3002\n\n```javascript:tsc.js\nvar compiler = new TypeScript.TypeScriptCompiler(logger, this.compilationSettings, localizedDiagnosticMessages);\n```\n\n\u5f15\u6570\u306e\n\n\u30fblogger\n\u30fbthis.compilationSettings\n\u30fblocalizedDiagnosticMessages\n\n\u304c\u4f55\u3092\u6e21\u3057\u3066\u3044\u308b\u306e\u304b\u63a2\u3057\u3066\u307f\u308b\u3002\n\n## logger\n\n\u307e\u305a\u3001logger\u304b\u3089\u898b\u3066\u3044\u304f\u3068\u3001\u6b21\u306e\u884c\u304c\u307f\u3064\u304b\u308b\u3002\n\n```javascript:tsc.js\nvar logger = this.compilationSettings.gatherDiagnostics ? new DiagnosticsLogger(this.ioHost) : new TypeScript.NullLogger();\n```\n\n\u6700\u60aa\u3001TypeScriptNullLogger\u3068\u3044\u3046\u306e\u3092\u4f7f\u3048\u3070\u826f\u3055\u305d\u3046\u3060\u3002\n\u4e00\u5fdc\u3001NullLogger\u306e\u5b9a\u7fa9\u3092\u307f\u3066\u304a\u304f\u3002\n\n```javascript:diagnotics.js\nvar NullLogger = (function () {\n    function NullLogger() {\n    }\n    NullLogger.prototype.information = function () {\n        return false;\n    };\n    NullLogger.prototype.debug = function () {\n        return false;\n    };\n    NullLogger.prototype.warning = function () {\n        return false;\n    };\n    NullLogger.prototype.error = function () {\n        return false;\n    };\n    NullLogger.prototype.fatal = function () {\n        return false;\n    };\n    NullLogger.prototype.log = function (s) {\n    };\n    return NullLogger;\n})();\nTypeScript.NullLogger = NullLogger;\n```\n\n\u3053\u308c\u3001\u4f55\u3082\u3057\u306a\u3044\u3068\u3044\u3046\u304b\u3001\u30ed\u30b0\u5410\u304b\u306a\u3044\u306e\u304b\u2026\u3002\n\n\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\n\n```javascript:logger\ninformation = function ()\ndebug = function ()\nwarning = function ()\nerror = function ()\nfatal = function ()\nlog = function (s)\n```\n\n\u5b9f\u969b\u306b\u4ed5\u4e8b\u3059\u308b\u306e\u306f\u3001log(s)\u304b\u306a\u2026\u3002\n\n\n## this.compilationSettings\n\nBatchCompiler\u306e\u5ba3\u8a00\u306e\u3068\u3053\u308d\u306b\u3001\u6b21\u306e\u3088\u3046\u306a\u3068\u3053\u308d\u304c\u3042\u308b\u3002\n\n```javascript:tsc.js\nvar BatchCompiler = (function () {\n    function BatchCompiler(ioHost) {\n        this.ioHost = ioHost;\n        this.resolvedEnvironment = null;\n        this.hasResolveErrors = false;\n        this.compilerVersion = \"0.9.0.1\";\n        this.printedVersion = false;\n        this.errorReporter = null;\n        this.compilationSettings = new TypeScript.CompilationSettings();\n        this.compilationEnvironment = new TypeScript.CompilationEnvironment(this.compilationSettings, this.ioHost);\n        this.errorReporter = new ErrorReporter(this.ioHost, this.compilationEnvironment);\n    }\n```\n\nthis.compilationSettings\u3082\u3053\u3053\u3067\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u305d\u306e\u4ed6\u3042\u3068\u3067\u51fa\u3066\u304d\u305d\u3046\u306a\u5909\u6570\u304c\u3042\u308b\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u3001\u5168\u90e8\u306e\u3063\u3051\u3066\u304a\u304f\u3002\n\nTypeScript.CompilationSettings\u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u3042\u308b\u3089\u3057\u3044\u3053\u3068\u3060\u3051\u899a\u3048\u3066\u304a\u3053\u3046\u2026\u3002\n\n\n## localizedDiagnosticMessages\n\nlocalizedDiagnosticMessages\u306b\u3064\u3044\u3066\u306f\u3001\u6b21\u306e\u884c\u304c\u53c2\u8003\u306b\u306a\u308a\u305d\u3046\u3002\n\n```javascript:tsc.js\nif (typeof localizedDiagnosticMessages === \"undefined\") {\n    localizedDiagnosticMessages = null;\n}\n```\n\nlocalizedDiagnosticMessages\u306e\u578b\u304c\"undefined\"\u3060\u3063\u305f\u3089\u3001null\u3092\u4ee3\u5165\u3057\u3066\u3044\u308b\u3002\n\u3064\u307e\u308a\u3001\u3088\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u3089\u3001null\u3092\u6e21\u3057\u3066\u304a\u3051\u3070\u826f\u3055\u305d\u3046\u3002\n\n# \u30b3\u30f3\u30d1\u30a4\u30eb\n\n\u5b9f\u969b\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u624b\u9806\u3092\u307f\u3066\u3044\u304f\u3002\n\n```javascript:tsc.js\nfor (var iCode = 0; iCode < this.resolvedEnvironment.code.length; iCode++) {\n    var code = this.resolvedEnvironment.code[iCode];\n\n    if (!this.compilationSettings.resolve) {\n        try  {\n            code.fileInformation = this.ioHost.readFile(code.path);\n        } catch (e) {\n             \uff08\u7565\uff09\n        }\n\n        if (this.compilationSettings.generateDeclarationFiles) {\n             \uff08\u7565\uff09\n        }\n    }\n\n    if (code.fileInformation != null) {\n        compiler.addSourceUnit(\n            code.path,\n            TypeScript.ScriptSnapshot.fromString(code.fileInformation.contents()),\n            code.fileInformation.byteOrderMark(),\n            0,\n            false,\n            code.referencedFiles\n        );\n\n             \uff08\u7565\uff09\n    }\n}\n```\n\n\u524d\u5f8c\u306e\u30bd\u30fc\u30b9\u3082\u542b\u3081\u3066\u3056\u3063\u3068\u773a\u3081\u305f\u611f\u3058\u3067\u306f\u3001\u95a2\u9023\u3059\u308b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u3059\u3079\u3066\u8aad\u307f\u8fbc\u3093\u3067\u304b\u3089\u3001\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u3002\n\n\u3067\u3001\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001\nthis.resolvedEnvironment.code\n\u306b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u2026\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u3002\n\n\u524d\u8ff0\u306eBatchCompiler\u306e\u5ba3\u8a00\u90e8\u5206\u3067\u306f\u3001\n\n```javascript:tsc.js\nthis.resolvedEnvironment = null;\n```\n\nnull\u304c\u4ee3\u5165\u3055\u308c\u3066\u3044\u305f\u306e\u3067\u3001\u305d\u308c\u304c\u3044\u3064\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831\u3092\u542b\u3080\u3088\u3046\u306b\u306a\u308b\u306e\u304b\u8abf\u3079\u3066\u307f\u3088\u3046\u3002\n\n## BatchCompiler.prototype.batchCompile\n\n\u8abf\u3079\u3066\u3044\u304f\u3068\u3001\u30e1\u30bd\u30c3\u30c9BatchCompiler.prototype.batchCompile\u306e\u4e2d\u3067\n\n```javascript:tsc.js\nvar onWatchedFileChange = function () {\n    _this.compilationEnvironment.code = sourceFiles;\n\n    _this.errorReporter.reset();\n\n    _this.resolvedEnvironment = _this.compilationSettings.resolve\n        ? _this.resolve() : _this.compilationEnvironment;\n```\n\n\u306e\u3088\u3046\u306b\u4ee3\u5165\u3055\u308c\u3066\u3044\u308b\u3002\n\u307f\u3066\u306e\u3068\u304a\u308a\u3001_this.resolve()\u306e\u8fd4\u308a\u5024\u304b\u3001_this.compilationEnvironment\u304c\u4ee3\u5165\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u3069\u3063\u3061\u304b\u3001\u8aad\u307f\u3084\u3059\u3044\u307b\u3046\u3092\u53c2\u8003\u306b\u3059\u308c\u3070\u826f\u3055\u305d\u3046\u3002\n\n## compilationEnvironment\n\ncompilationEnvironment\u306f\u3001\u524d\u306b\u51fa\u305f\n\n```javascript:tsc.js\nvar BatchCompiler = (function () {\n    function BatchCompiler(ioHost) {\n        this.ioHost = ioHost;\n        \u2026\n        this.compilationSettings = new TypeScript.CompilationSettings();\n        this.compilationEnvironment = new TypeScript.CompilationEnvironment(this.compilationSettings, this.ioHost);\n        \u2026\n    }\n```\n\n\u306e\u3068\u3053\u308d\u3067\u3001\u4ee3\u5165\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u306a\u3002\u3053\u3053\u3067\u306f\u3001\n\nnew TypeScript.CompilationEnvironment(this.compilationSettings, this.ioHost);\n\n\u304c\u4ee3\u5165\u3055\u308c\u3066\u3044\u3066\u3001\u5f15\u6570this.compilationSettings\u3001this.ioHost\u3068\u3082\u3059\u3050\u4e0a\u3067\u5024\u304c\u4ee3\u5165\u3055\u308c\u3066\u3044\u308b\u3002\n\u3068\u306a\u308b\u3068\u3001\u30af\u30e9\u30b9CompilationSettings\u3068CompilationEnvironment\u3092\u8abf\u3079\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u306a\u2026\u3002\n\n## CompilationSettings\n\nprecompile.js\u306b\u4ee5\u4e0b\u306e\u8a18\u8ff0\u304c\u3042\u308b\u3002\n\n```javascript:precompile.js\n    var CompilationSettings = (function () {\n        function CompilationSettings() {\n            this.propagateConstants = false;\n            this.minWhitespace = false;\n            this.emitComments = false;\n            this.watch = false;\n            this.exec = false;\n            this.resolve = true;\n            this.disallowBool = false;\n            this.allowAutomaticSemicolonInsertion = true;\n            this.allowModuleKeywordInExternalModuleReference = true;\n            this.useDefaultLib = true;\n            this.codeGenTarget = TypeScript.LanguageVersion.EcmaScript3;\n            this.moduleGenTarget = TypeScript.ModuleGenTarget.Synchronous;\n            this.outputOption = \"\";\n            this.mapSourceFiles = false;\n            this.emitFullSourceMapPath = false;\n            this.generateDeclarationFiles = false;\n            this.useCaseSensitiveFileResolution = false;\n            this.gatherDiagnostics = false;\n            this.updateTC = false;\n            this.implicitAny = false;\n        }\n```\n\n\u3044\u308d\u3044\u308d\u66f8\u3044\u3066\u3042\u308b\u3051\u3069\u3001\u3053\u306e\u307e\u307e\u4f7f\u3048\u305d\u3046\u306a\u6c17\u304c\u3059\u308b\u3002\n\n\n## CompilationEnvironment\n\nreferenceResolutin.js\u306b\u4ee5\u4e0b\u306e\u8a18\u8ff0\u304c\u3042\u308b\u3002\n\n```javascript:referenceResolutin.js\n    var CompilationEnvironment = (function () {\n        function CompilationEnvironment(compilationSettings, ioHost) {\n            this.compilationSettings = compilationSettings;\n            this.ioHost = ioHost;\n            this.code = [];\n            this.inputFileNameToOutputFileName = new TypeScript.StringHashTable();\n        }\n```\n\n\u3053\u3053\u306e\u3001 this.code \u306b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u683c\u7d0d\u3055\u308c\u3066\u308b\u306e\u304b\u306a\uff1f\uff1f\n\u9055\u3046\u306a\u3002\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u540d\u3058\u3083\u306a\u3044\u3002\u5225\u306e\u3068\u3053\u308d\u3067\u3001\n\n```javascript:\ncode.path\ncode.fileInformation\n```\n\n\u306a\u3069\u304c\u53c2\u7167\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u3001\u306a\u3093\u3089\u304b\u306e\u69cb\u9020\u3092\u6301\u3063\u305f\u3082\u306e\u3060\u306a\u2026\u3002\n\u305a\u308b\u3057\u3066\u3001referenceResolution. **ts** \u3092\u898b\u308b\u3068\u3001\n\n```typescript:referenceResolution.ts\n        public code: SourceUnit[] = [];\n```\n\n\u3060\u304b\u3089\u3001SourceUnit\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\u3092\u63a2\u305d\u3046\u3002\n\n## SourceUnit\n\n```javascript:referenceResolutin.js\n    var SourceUnit = (function () {\n        function SourceUnit(path, fileInformation) {\n            this.path = path;\n            this.fileInformation = fileInformation;\n            this.referencedFiles = null;\n            this.lineStarts = null;\n        }\n        SourceUnit.prototype.getText = function (start, end) {\n            return this.fileInformation.contents().substring(start, end);\n        };\n\n        SourceUnit.prototype.getLength = function () {\n            return this.fileInformation.contents().length;\n        };\n\n        SourceUnit.prototype.getLineStartPositions = function () {\n            if (this.lineStarts === null) {\n                this.lineStarts = TypeScript.LineMap.fromString(this.fileInformation.contents()).lineStarts();\n            }\n\n            return this.lineStarts;\n        };\n\n        SourceUnit.prototype.getTextChangeRangeSinceVersion = function (scriptVersion) {\n            throw TypeScript.Errors.notYetImplemented();\n        };\n        return SourceUnit;\n    })();\n    TypeScript.SourceUnit = SourceUnit;\n```\n\n\u3053\u308c\u306f\u3053\u306e\u307e\u307e\u4f7f\u3048\u3070\u3044\u3044\u306e\u304b\u306a\u2026\u3002\n\n\u3068\u3053\u308d\u3067\u3001FileInformation\u304c\u4f55\u304b\u3092\u8abf\u3079\u308b\u3068\u3001\n\n```typescript:core/environment.ts\nenum ByteOrderMark {\n    None,\n    Utf8,\n    Utf16BigEndian,\n    Utf16LittleEndian,\n}\n\nclass FileInformation {\n    private _contents: string;\n    private _byteOrderMark: ByteOrderMark;\n\n    constructor(contents: string, byteOrderMark: ByteOrderMark) {\n        this._contents = contents;\n        this._byteOrderMark = byteOrderMark;\n    }\n\n    public contents(): string {\n        return this._contents;\n    }\n\n    public byteOrderMark(): ByteOrderMark {\n        return this._byteOrderMark;\n    }\n}\n```\n\n\u30c6\u30ad\u30b9\u30c8\u3068\u30d0\u30a4\u30c8\u30aa\u30fc\u30c0\u30fc\u304c\u5165\u3063\u3066\u308b\u3088\u3046\u3060\u3002\n\n## StringHashTable\n\nCompilationEnvironment\u306e\u4e2d\u3067\u3001\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u304cTypeScript.StringHashTable\u3002\n\u30e1\u30f3\u30d0\u30fc\u540d\u304b\u3089\u3057\u3066\u3001\u304a\u305d\u3089\u304f\u3001\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u3068\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u3092\u7d10\u3064\u3051\u305f\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3060\u308d\u3046\u3051\u3069\u2026\u3002\n\n\u4e00\u5fdc\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u306e\u305e\u3044\u3066\u304a\u304f\u3002\n\n```javascript:hashTable.js\n    var StringHashTable = (function () {\n        function StringHashTable() {\n            this.itemCount = 0;\n            this.table = (new BlockIntrinsics());\n        }\n        StringHashTable.prototype.getAllKeys = function () {\n            var result = [];\n\n            for (var k in this.table) {\n                if (this.table[k] !== undefined) {\n                    result.push(k);\n                }\n            }\n\n            return result;\n        };\n\n        StringHashTable.prototype.add = function (key, data) {\n            if (this.table[key] !== undefined) {\n                return false;\n            }\n\n            this.table[key] = data;\n            this.itemCount++;\n            return true;\n        };\n\n        StringHashTable.prototype.addOrUpdate = function (key, data) {\n            if (this.table[key] !== undefined) {\n                this.table[key] = data;\n                return false;\n            }\n\n            this.table[key] = data;\n            this.itemCount++;\n            return true;\n        };\n\n        StringHashTable.prototype.map = function (fn, context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n\n                if (data !== undefined) {\n                    fn(k, this.table[k], context);\n                }\n            }\n        };\n\n        StringHashTable.prototype.every = function (fn, context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n\n                if (data !== undefined) {\n                    if (!fn(k, this.table[k], context)) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        };\n\n        StringHashTable.prototype.some = function (fn, context) {\n            for (var k in this.table) {\n                var data = this.table[k];\n\n                if (data !== undefined) {\n                    if (fn(k, this.table[k], context)) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        };\n\n        StringHashTable.prototype.count = function () {\n            return this.itemCount;\n        };\n\n        StringHashTable.prototype.lookup = function (key) {\n            var data = this.table[key];\n            return data === undefined ? null : data;\n        };\n```\n\n\u3044\u304f\u3064\u304b\u30e1\u30bd\u30c3\u30c9\u3082\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u306e\u307e\u307e\u4f7f\u3063\u305f\u307b\u3046\u304c\u826f\u3055\u305d\u3046\u3002\n\n## ioHost\n\n\u3053\u3053\u307e\u3067\u898b\u3066\u304d\u3066\u3001\u89e3\u6c7a\u3057\u3066\u3044\u306a\u3044\u306e\u304c\"ioHost\"\u3068\u304b\u3044\u3046\u3084\u3064\u3002\n\n\u30bd\u30fc\u30b9\u3092\u3056\u3063\u3068\u773a\u3081\u305f\u611f\u3058\u3067\u306f\u3001io.js\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\n\n```javascript:io.js\nvar IO = (function () {\n```\n\n\u3042\u305f\u308a\u304b\u306a\u3002\n\u3067\u3001ActiveX\u95a2\u4fc2\u3092\u4f7f\u3046\u5834\u5408\u304c\u3001\n\n```javascript:io.js\n    function getWindowsScriptHostIO() {\n```\n\n\u3067\u3001Node.js\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u5834\u5408\u304c\n\n```javascript:io.js\n    function getNodeIO() {\n```\n\n\u306a\u3093\u3060\u308d\u3046\uff08\u305f\u3076\u3093\uff09\u3002\n\u3067\u3001\u3069\u3061\u3089\u304b\u610f\u8b58\u3057\u306a\u3044\u3067\u3044\u3044\u3088\u3046\u306b\u3001var IO \u306e\u5b9a\u7fa9\u306e\u6700\u5f8c\u3067\u3001\n\n```javascript:io.js\n    if (typeof ActiveXObject === \"function\")\n        return getWindowsScriptHostIO(); else if (typeof module !== 'undefined' && module.exports)\n        return getNodeIO(); else\n\treturn null;\n})();\n```\n\n\u306e\u3088\u3046\u306b\u8fd4\u3057\u3066\u308b\u308f\u3051\u304b\u2026\u3002\n\n\u3064\u307e\u308a\u3001IO \u3092\u4f7f\u3048\u3070\u3088\u304d\u306b\u306f\u304b\u3089\u3063\u3066\u304f\u308c\u308b\u306e\u304b\u306a\u2026\u3002\n\u3044\u3061\u304a\u3046\u3001\u5f8c\u3067\u81ea\u5206\u3067\u66f8\u304f\u3068\u304d\u306e\u305f\u3081\u306b\u30b7\u30b0\u30cd\u30c1\u30e3\u3092\u30e1\u30e2\u3057\u3068\u304f\u304b\u2026\u3002\n\n```javascript:io.js\nreadFile: function (file)\nwriteFile: function (path, contents, writeByteOrderMark)\ndeleteFile: function (path)\nfileExists: function (path)\ndir: function dir(path, spec, options)\ncreateDirectory: function (path)\ndirectoryExists: function (path)\nresolvePath: function (path)\ndirName: function (path)\nfindFile: function (rootPath, partialFilePath)\nprint: function (str)\nprintLine: function (str)\narguments: process.argv.slice(2)\nstderr: {\n   Write: function (str)\n   WriteLine: function (str)\n   Close: function ()\n  }\nstdout: {\n    Write: function (str)\n    WriteLine: function (str)\n    Close: function ()\n  }\nwatchFile: function (fileName, callback)\nrun: function (source, fileName)\ngetExecutingFilePath: function ()\nquit:\n```\n\n\u3042\u3002\u7d50\u69cb\u3001\u3081\u3093\u3069\u3044\u2026\u3002\n\n# \u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u30bd\u30fc\u30b9\u306e\u8a2d\u5b9a\n\n\u3055\u3066\u3001\u3053\u308c\u3060\u3051\u306e\u60c5\u5831\u304c\u3042\u308c\u3070\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3051\u308b\u304b\u306a\u2026\uff1f\n\n```javascript:tsc.js\nvar compiler = new TypeScript.TypeScriptCompiler(logger, this.compilationSettings, localizedDiagnosticMessages);\n```\n\n\u307e\u305a\u306f\u3001\u3053\u306e\u30b3\u30fc\u30c9\u3092\u51fa\u767a\u70b9\u3068\u3059\u308b\u3002\n\nlocalizedDiagnosticMessages\u306f\u3001null\u3067\u69cb\u308f\u306a\u3044\u3002\n\u307e\u305f\u3001logger\u306fNullLogger\u3092\u4f7f\u3063\u3066\u304a\u304f\u3002\n\n```javascript:myCompile.js\nvar logger = new TypeScript.NullLoger();\nvar compiler = new TypeScript.TypeScriptCompiler(logger, this.compilationSettings, null);\n```\n\n\u3072\u3068\u307e\u305a\u3001\u3053\u3046\u306a\u308b\u3002\n\u3042\u3068\u306f\u3001\u5b9f\u969b\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3053\u3068\u3092\u5ff5\u982d\u306b\u8003\u3048\u3066\u3044\u304f\u3002\n\nBatchCompiler\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u3001\u5fc5\u8981\u306a\u5909\u6570\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```javascript:myCompile.js\nvar ioHost = IO;\nvar compilationSettings = new TypeScript.CompilationSettings();\nvar compilationEnvironment = new TypeScript.CompilationEnvironment(compilationSettings, ioHost);\n```\n\ntsc.js\u3067\u306f\u3001\u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u3044\u305f\u3051\u3069\u3001\n\u3053\u3053\u3067\u306f\u3001\uff11\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u30b3\u30f3\u30d1\u30a4\u30eb\u51fa\u6765\u308c\u3070\u5341\u5206\u306a\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\n```javascript:myCompile.js\nvar path = \"source.file.js\";\nvar fileInformation = ioHost.readFile(path);\nvar code = new TypeScript.SourceUnit(path, fileInformation);\ncompiler.addSourceUnit(\n    code.path,\n    TypeScript.ScriptSnapshot.fromString(code.fileInformation.contents()),\n    code.fileInformation.byteOrderMark(),\n    0,\n    false,\n    code.referencedFiles);\n```\n\n\u3053\u308c\u3067\u3001\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092compiler\u306b\u7d50\u3073\u3064\u3051\u308b\u3068\u3053\u306f\u51fa\u6765\u305f\u304b\u306a\u3002\n\n# \u30b3\u30f3\u30d1\u30a4\u30eb\u95a2\u9023\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\n\n\u6b21\u306f\u5b9f\u969b\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3042\u305f\u308a\u3002\n\u3084\u306f\u308a\u3001BatchCompiler\u3092\u53c2\u8003\u306b\u3057\u3066\u8003\u3048\u3066\u3044\u304f\u3002\n\n## \u69cb\u6587\u30c1\u30a7\u30c3\u30af\n\n\u6700\u521d\u306b\u69cb\u6587\u30c1\u30a7\u30c3\u30af\u3059\u308b\u307f\u305f\u3044\u3002\n\n```javascript:myCompile.js\n// \u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30a8\u30e9\u30fc\u306e\u30c1\u30a7\u30c3\u30af\uff1f\nvar syntacticDiagnostics = compiler.getSyntacticDiagnostics(code.path);\ncompiler.reportDiagnostics(syntacticDiagnostics, this.errorReporter);\n\nvar anySintacticErros = false;\nif (syntacticDiagnostics.length > 0) {\n    anySyntacticErrors = true;  // \u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30a8\u30e9\u30fc\u6709\u308a\n}\n\nif (anySyntacticErrors) {\n    return true; // \u30a8\u30e9\u30fc\u3067\u7d42\u4e86\n}\n```\n\n\u3069\u3046\u3067\u3082\u3044\u3044\u3051\u3069\u3001\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u305f\u3068\u304d\u306b\u771f\u3092\u8fd4\u3059\u3093\u3060\u2026\uff1cBatchCompiler\n\n## \u578b\u30c1\u30a7\u30c3\u30af\u3068\u610f\u5473\u89e3\u6790\n\n\u6b21\u304c\u578b\u306e\u30c1\u30a7\u30c3\u30af\u3068\u610f\u5473\u89e3\u6790\u3063\u307d\u3044\u3002\n\n```javascript:myCompile.js\ncompiler.pullTypeCheck();\nvar fileNames = compiler.fileNameToDocument.getAllKeys();\n\nfor (var i = 0, n = fileNames.length; i < n; i++) {\n    var fileName = fileNames[i];\n    var semanticDiagnostics = compiler.getSemanticDiagnostics(fileName);\n    if (semanticDiagnostics.length > 0) {\n        anySemanticErrors = true;\n        compiler.reportDiagnostics(semanticDiagnostics, this.errorReporter);\n    }\n}\n```\n\n## \u30b3\u30f3\u30d1\u30a4\u30eb\u7d50\u679c\u306e\u66f8\u51fa\u3057\n\n\u3042\u3068\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\u306e\u304b\u306a\u3002\n\n```javascript:myCompile.js\n// \u30d5\u30a1\u30a4\u30eb\u66f8\u51fa\u3057\u7528\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\nvar emitterIOHost = {\n    writeFile: function (fileName, contents, writeByteOrderMark) {\n        return IOUtils.writeFileAndFolderStructure(_this.ioHost, fileName, contents, writeByteOrderMark);\n    },\n    directoryExists: this.ioHost.directoryExists,\n    fileExists: this.ioHost.fileExists,\n    resolvePath: this.ioHost.resolvePath\n};\n\n// \u3088\u304f\u308f\u304b\u3089\u306a\u3044\u4f55\u304b\uff08\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u3069\u3046\u3057\u305f\u3053\u3046\u3057\u305f\uff1f\uff09\nvar mapInputToOutput = function (inputFile, outputFile) {\n    _this.resolvedEnvironment.inputFileNameToOutputFileName.addOrUpdate(inputFile, outputFile);\n};\n\n// \u767a\u884c\uff08\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u51fa\u3057\uff1f\uff09\nvar emitDiagnostics = compiler.emitAll(emitterIOHost, mapInputToOutput);\ncompiler.reportDiagnostics(emitDiagnostics, this.errorReporter);\nif (emitDiagnostics.length > 0) {\n    return true; // \u30a8\u30e9\u30fc\u3067\u7d42\u4e86\n}\n\nif (anySemanticErrors) {\n    return true; // \u30a8\u30e9\u30fc\u3067\u7d42\u4e86\n}\n\n// \u767a\u884c\uff08\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u51fa\u3057\uff1f\uff09\u3000\u305d\u306e\uff12\nvar emitDeclarationsDiagnostics = compiler.emitAllDeclarations();\ncompiler.reportDiagnostics(emitDeclarationsDiagnostics, this.errorReporter);\nif (emitDeclarationsDiagnostics.length > 0) {\n    return true; // \u30a8\u30e9\u30fc\u3067\u7d42\u4e86\n}\n\nreturn false; // \u7121\u4e8b\u30b3\u30f3\u30d1\u30a4\u30eb\u5b8c\u4e86\n```\n\n\u89e3\u6790\u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u307e\u3067\u306f\u3001\u307b\u307c\u3053\u306e\u307e\u307e\u4f7f\u3048\u305d\u3046\u304b\u306a\u2026\u3002\n\n# \u307e\u3068\u3081\n\n\u3053\u3053\u307e\u3067\u3092\u307e\u3068\u3081\u3066\u3001\uff11\u3064\u306e\u30b3\u30fc\u30c9\u306b\u66f8\u3044\u3066\u307f\u308b\u3002\n\n```javascript:myCompile.js\nvar ByteOrderMark;\n(function (ByteOrderMark) {\n    ByteOrderMark[ByteOrderMark[\"None\"] = 0] = \"None\";\n    ByteOrderMark[ByteOrderMark[\"Utf8\"] = 1] = \"Utf8\";\n    ByteOrderMark[ByteOrderMark[\"Utf16BigEndian\"] = 2] = \"Utf16BigEndian\";\n    ByteOrderMark[ByteOrderMark[\"Utf16LittleEndian\"] = 3] = \"Utf16LittleEndian\";\n})(ByteOrderMark || (ByteOrderMark = {}));\n\nvar FileInformation = (function () {\n    function FileInformation(contents, byteOrderMark) {\n        this._contents = contents;\n        this._byteOrderMark = byteOrderMark;\n    }\n    FileInformation.prototype.contents = function () {\n        return this._contents;\n    };\n\n    FileInformation.prototype.byteOrderMark = function () {\n        return this._byteOrderMark;\n    };\n    return FileInformation;\n})();\n\nvar Environment = (function () {\n    function getWindowsScriptHostEnvironment() {\n        try  {\n            var fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n        } catch (e) {\n            return null;\n        }\n\n        var streamObjectPool = [];\n\n        function getStreamObject() {\n            if (streamObjectPool.length > 0) {\n                return streamObjectPool.pop();\n            } else {\n                return new ActiveXObject(\"ADODB.Stream\");\n            }\n        }\n\n        function releaseStreamObject(obj) {\n            streamObjectPool.push(obj);\n        }\n\n        var args = [];\n        for (var i = 0; i < WScript.Arguments.length; i++) {\n            args[i] = WScript.Arguments.Item(i);\n        }\n\n        return {\n            currentDirectory: function () {\n                return (WScript).CreateObject(\"WScript.Shell\").CurrentDirectory;\n            },\n            readFile: function (path) {\n                try  {\n                    var streamObj = getStreamObject();\n                    streamObj.Open();\n                    streamObj.Type = 2;\n\n                    streamObj.Charset = 'x-ansi';\n\n                    streamObj.LoadFromFile(path);\n                    var bomChar = streamObj.ReadText(2);\n\n                    streamObj.Position = 0;\n\n                    var byteOrderMark = ByteOrderMark.None;\n\n                    if (bomChar.charCodeAt(0) === 0xFE && bomChar.charCodeAt(1) === 0xFF) {\n                        streamObj.Charset = 'unicode';\n                        byteOrderMark = ByteOrderMark.Utf16BigEndian;\n                    } else if (bomChar.charCodeAt(0) === 0xFF && bomChar.charCodeAt(1) === 0xFE) {\n                        streamObj.Charset = 'unicode';\n                        byteOrderMark = ByteOrderMark.Utf16LittleEndian;\n                    } else if (bomChar.charCodeAt(0) === 0xEF && bomChar.charCodeAt(1) === 0xBB) {\n                        streamObj.Charset = 'utf-8';\n                        byteOrderMark = ByteOrderMark.Utf8;\n                    } else {\n                        streamObj.Charset = 'utf-8';\n                    }\n\n                    var contents = streamObj.ReadText(-1);\n                    streamObj.Close();\n                    releaseStreamObject(streamObj);\n                    return new FileInformation(contents, byteOrderMark);\n                } catch (err) {\n                    var error = new Error(err.message);\n\n                    var message;\n                    if (err.number === -2147024809) {\n                        error.isUnsupportedEncoding = true;\n                    }\n\n                    throw error;\n                }\n            },\n            writeFile: function (path, contents, writeByteOrderMark) {\n                var textStream = getStreamObject();\n                textStream.Charset = 'utf-8';\n                textStream.Open();\n                textStream.WriteText(contents, 0);\n\n                if (!writeByteOrderMark) {\n                    textStream.Position = 3;\n                } else {\n                    textStream.Position = 0;\n                }\n\n                var fileStream = getStreamObject();\n                fileStream.Type = 1;\n                fileStream.Open();\n\n                textStream.CopyTo(fileStream);\n\n                fileStream.Flush();\n                fileStream.SaveToFile(path, 2);\n                fileStream.Close();\n\n                textStream.Flush();\n                textStream.Close();\n            },\n            fileExists: function (path) {\n                return fso.FileExists(path);\n            },\n            deleteFile: function (path) {\n                if (fso.FileExists(path)) {\n                    fso.DeleteFile(path, true);\n                }\n            },\n            directoryExists: function (path) {\n                return fso.FolderExists(path);\n            },\n            listFiles: function (path, spec, options) {\n                options = options || {};\n                function filesInFolder(folder, root) {\n                    var paths = [];\n                    var fc;\n\n                    if (options.recursive) {\n                        fc = new Enumerator(folder.subfolders);\n\n                        for (; !fc.atEnd(); fc.moveNext()) {\n                            paths = paths.concat(filesInFolder(fc.item(), root + \"\\\\\" + fc.item().Name));\n                        }\n                    }\n\n                    fc = new Enumerator(folder.files);\n\n                    for (; !fc.atEnd(); fc.moveNext()) {\n                        if (!spec || fc.item().Name.match(spec)) {\n                            paths.push(root + \"\\\\\" + fc.item().Name);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                var folder = fso.GetFolder(path);\n                var paths = [];\n\n                return filesInFolder(folder, path);\n            },\n            arguments: args,\n            standardOut: WScript.StdOut\n        };\n    }\n    ;\n\n    function getNodeEnvironment() {\n        var _fs = require('fs');\n        var _path = require('path');\n        var _module = require('module');\n\n        return {\n            currentDirectory: function () {\n                return (process).cwd();\n            },\n            readFile: function (file) {\n                var buffer = _fs.readFileSync(file);\n                switch (buffer[0]) {\n                    case 0xFE:\n                        if (buffer[1] === 0xFF) {\n                            var i = 0;\n                            while ((i + 1) < buffer.length) {\n                                var temp = buffer[i];\n                                buffer[i] = buffer[i + 1];\n                                buffer[i + 1] = temp;\n                                i += 2;\n                            }\n                            return new FileInformation(buffer.toString(\"ucs2\", 2), ByteOrderMark.Utf16BigEndian);\n                        }\n                        break;\n                    case 0xFF:\n                        if (buffer[1] === 0xFE) {\n                            return new FileInformation(buffer.toString(\"ucs2\", 2), ByteOrderMark.Utf16LittleEndian);\n                        }\n                        break;\n                    case 0xEF:\n                        if (buffer[1] === 0xBB) {\n                            return new FileInformation(buffer.toString(\"utf8\", 3), ByteOrderMark.Utf8);\n                        }\n                }\n\n                return new FileInformation(buffer.toString(\"utf8\", 0), ByteOrderMark.None);\n            },\n            writeFile: function (path, contents, writeByteOrderMark) {\n                function mkdirRecursiveSync(path) {\n                    var stats = _fs.statSync(path);\n                    if (stats.isFile()) {\n                        throw \"\\\"\" + path + \"\\\" exists but isn't a directory.\";\n                    } else if (stats.isDirectory()) {\n                        return;\n                    } else {\n                        mkdirRecursiveSync(_path.dirname(path));\n                        _fs.mkdirSync(path, 0775);\n                    }\n                }\n                mkdirRecursiveSync(_path.dirname(path));\n\n                if (writeByteOrderMark) {\n                    contents = '\\uFEFF' + contents;\n                }\n                _fs.writeFileSync(path, contents, \"utf8\");\n            },\n            fileExists: function (path) {\n                return _fs.existsSync(path);\n            },\n            deleteFile: function (path) {\n                try  {\n                    _fs.unlinkSync(path);\n                } catch (e) {\n                }\n            },\n            directoryExists: function (path) {\n                return _fs.existsSync(path) && _fs.statSync(path).isDirectory();\n            },\n            listFiles: function dir(path, spec, options) {\n                options = options || {};\n\n                function filesInFolder(folder) {\n                    var paths = [];\n\n                    var files = _fs.readdirSync(folder);\n                    for (var i = 0; i < files.length; i++) {\n                        var stat = _fs.statSync(folder + \"\\\\\" + files[i]);\n                        if (options.recursive && stat.isDirectory()) {\n                            paths = paths.concat(filesInFolder(folder + \"\\\\\" + files[i]));\n                        } else if (stat.isFile() && (!spec || files[i].match(spec))) {\n                            paths.push(folder + \"\\\\\" + files[i]);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                return filesInFolder(path);\n            },\n            arguments: process.argv.slice(2),\n            standardOut: {\n                Write: function (str) {\n                    process.stdout.write(str);\n                },\n                WriteLine: function (str) {\n                    process.stdout.write(str + '\\n');\n                },\n                Close: function () {\n                }\n            }\n        };\n    }\n    ;\n\n    if (typeof WScript !== \"undefined\" && typeof ActiveXObject === \"function\") {\n        return getWindowsScriptHostEnvironment();\n    } else if (typeof module !== 'undefined' && module.exports) {\n        return getNodeEnvironment();\n    } else {\n        return null;\n    }\n})();\n\nvar IOUtils;\n(function (IOUtils) {\n    function createDirectoryStructure(ioHost, dirName) {\n        if (ioHost.directoryExists(dirName)) {\n            return;\n        }\n\n        var parentDirectory = ioHost.dirName(dirName);\n        if (parentDirectory != \"\") {\n            createDirectoryStructure(ioHost, parentDirectory);\n        }\n        ioHost.createDirectory(dirName);\n    }\n\n    function writeFileAndFolderStructure(ioHost, fileName, contents, writeByteOrderMark) {\n        var path = ioHost.resolvePath(fileName);\n        var dirName = ioHost.dirName(path);\n        createDirectoryStructure(ioHost, dirName);\n        return ioHost.writeFile(path, contents, writeByteOrderMark);\n    }\n    IOUtils.writeFileAndFolderStructure = writeFileAndFolderStructure;\n\n    function throwIOError(message, error) {\n        var errorMessage = message;\n        if (error && error.message) {\n            errorMessage += (\" \" + error.message);\n        }\n        throw new Error(errorMessage);\n    }\n    IOUtils.throwIOError = throwIOError;\n\n    var BufferedTextWriter = (function () {\n        function BufferedTextWriter(writer, capacity) {\n            if (typeof capacity === \"undefined\") { capacity = 1024; }\n            this.writer = writer;\n            this.capacity = capacity;\n            this.buffer = \"\";\n        }\n        BufferedTextWriter.prototype.Write = function (str) {\n            this.buffer += str;\n            if (this.buffer.length >= this.capacity) {\n                this.writer.Write(this.buffer);\n                this.buffer = \"\";\n            }\n        };\n        BufferedTextWriter.prototype.WriteLine = function (str) {\n            this.Write(str + '\\r\\n');\n        };\n        BufferedTextWriter.prototype.Close = function () {\n            this.writer.Write(this.buffer);\n            this.writer.Close();\n            this.buffer = null;\n        };\n        return BufferedTextWriter;\n    })();\n    IOUtils.BufferedTextWriter = BufferedTextWriter;\n})(IOUtils || (IOUtils = {}));\n\nvar IO = (function () {\n    function getWindowsScriptHostIO() {\n        var fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n        var streamObjectPool = [];\n\n        function getStreamObject() {\n            if (streamObjectPool.length > 0) {\n                return streamObjectPool.pop();\n            } else {\n                return new ActiveXObject(\"ADODB.Stream\");\n            }\n        }\n\n        function releaseStreamObject(obj) {\n            streamObjectPool.push(obj);\n        }\n\n        var args = [];\n        for (var i = 0; i < WScript.Arguments.length; i++) {\n            args[i] = WScript.Arguments.Item(i);\n        }\n\n        return {\n            readFile: function (path) {\n                return Environment.readFile(path);\n            },\n            writeFile: function (path, contents, writeByteOrderMark) {\n                Environment.writeFile(path, contents, writeByteOrderMark);\n            },\n            fileExists: function (path) {\n                return fso.FileExists(path);\n            },\n            resolvePath: function (path) {\n                return fso.GetAbsolutePathName(path);\n            },\n            dirName: function (path) {\n                return fso.GetParentFolderName(path);\n            },\n            findFile: function (rootPath, partialFilePath) {\n                var path = fso.GetAbsolutePathName(rootPath) + \"/\" + partialFilePath;\n\n                while (true) {\n                    if (fso.FileExists(path)) {\n                        return { fileInformation: this.readFile(path), path: path };\n                    } else {\n                        rootPath = fso.GetParentFolderName(fso.GetAbsolutePathName(rootPath));\n\n                        if (rootPath == \"\") {\n                            return null;\n                        } else {\n                            path = fso.BuildPath(rootPath, partialFilePath);\n                        }\n                    }\n                }\n            },\n            deleteFile: function (path) {\n                try  {\n                    if (fso.FileExists(path)) {\n                        fso.DeleteFile(path, true);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn't delete file '\" + path + \"'.\", e);\n                }\n            },\n            directoryExists: function (path) {\n                return fso.FolderExists(path);\n            },\n            createDirectory: function (path) {\n                try  {\n                    if (!this.directoryExists(path)) {\n                        fso.CreateFolder(path);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn't create directory '\" + path + \"'.\", e);\n                }\n            },\n            dir: function (path, spec, options) {\n                options = options || {};\n                function filesInFolder(folder, root) {\n                    var paths = [];\n                    var fc;\n\n                    if (options.recursive) {\n                        fc = new Enumerator(folder.subfolders);\n\n                        for (; !fc.atEnd(); fc.moveNext()) {\n                            paths = paths.concat(filesInFolder(fc.item(), root + \"/\" + fc.item().Name));\n                        }\n                    }\n\n                    fc = new Enumerator(folder.files);\n\n                    for (; !fc.atEnd(); fc.moveNext()) {\n                        if (!spec || fc.item().Name.match(spec)) {\n                            paths.push(root + \"/\" + fc.item().Name);\n                        }\n                    }\n\n                    return paths;\n                }\n\n                var folder = fso.GetFolder(path);\n                var paths = [];\n\n                return filesInFolder(folder, path);\n            },\n            print: function (str) {\n                WScript.StdOut.Write(str);\n            },\n            printLine: function (str) {\n                WScript.Echo(str);\n            },\n            arguments: args,\n            stderr: WScript.StdErr,\n            stdout: WScript.StdOut,\n            watchFile: null,\n            run: function (source, fileName) {\n                try  {\n                    eval(source);\n                } catch (e) {\n                    IOUtils.throwIOError(\"Error while executing file '\" + fileName + \"'.\", e);\n                }\n            },\n            getExecutingFilePath: function () {\n                return WScript.ScriptFullName;\n            },\n            quit: function (exitCode) {\n                if (typeof exitCode === \"undefined\") { exitCode = 0; }\n                try  {\n                    WScript.Quit(exitCode);\n                } catch (e) {\n                }\n            }\n        };\n    }\n    ;\n\n    function getNodeIO() {\n        var _fs = require('fs');\n        var _path = require('path');\n        var _module = require('module');\n\n        return {\n            readFile: function (file) {\n                return Environment.readFile(file);\n            },\n            writeFile: function (path, contents, writeByteOrderMark) {\n                Environment.writeFile(path, contents, writeByteOrderMark);\n            },\n            deleteFile: function (path) {\n                try  {\n                    _fs.unlinkSync(path);\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn't delete file '\" + path + \"'.\", e);\n                }\n            },\n            fileExists: function (path) {\n                return _fs.existsSync(path);\n            },\n            dir: function dir(path, spec, options) {\n                options = options || {};\n\n                function filesInFolder(folder) {\n                    var paths = [];\n\n                    try  {\n                        var files = _fs.readdirSync(folder);\n                        for (var i = 0; i < files.length; i++) {\n                            var stat = _fs.statSync(folder + \"/\" + files[i]);\n                            if (options.recursive && stat.isDirectory()) {\n                                paths = paths.concat(filesInFolder(folder + \"/\" + files[i]));\n                            } else if (stat.isFile() && (!spec || files[i].match(spec))) {\n                                paths.push(folder + \"/\" + files[i]);\n                            }\n                        }\n                    } catch (err) {\n                    }\n\n                    return paths;\n                }\n\n                return filesInFolder(path);\n            },\n            createDirectory: function (path) {\n                try  {\n                    if (!this.directoryExists(path)) {\n                        _fs.mkdirSync(path);\n                    }\n                } catch (e) {\n                    IOUtils.throwIOError(\"Couldn't create directory '\" + path + \"'.\", e);\n                }\n            },\n            directoryExists: function (path) {\n                return _fs.existsSync(path) && _fs.statSync(path).isDirectory();\n            },\n            resolvePath: function (path) {\n                return _path.resolve(path);\n            },\n            dirName: function (path) {\n                return _path.dirname(path);\n            },\n            findFile: function (rootPath, partialFilePath) {\n                var path = rootPath + \"/\" + partialFilePath;\n\n                while (true) {\n                    if (_fs.existsSync(path)) {\n                        return { fileInformation: this.readFile(path), path: path };\n                    } else {\n                        var parentPath = _path.resolve(rootPath, \"..\");\n\n                        if (rootPath === parentPath) {\n                            return null;\n                        } else {\n                            rootPath = parentPath;\n                            path = _path.resolve(rootPath, partialFilePath);\n                        }\n                    }\n                }\n            },\n            print: function (str) {\n                process.stdout.write(str);\n            },\n            printLine: function (str) {\n                process.stdout.write(str + '\\n');\n            },\n            arguments: process.argv.slice(2),\n            stderr: {\n                Write: function (str) {\n                    process.stderr.write(str);\n                },\n                WriteLine: function (str) {\n                    process.stderr.write(str + '\\n');\n                },\n                Close: function () {\n                }\n            },\n            stdout: {\n                Write: function (str) {\n                    process.stdout.write(str);\n                },\n                WriteLine: function (str) {\n                    process.stdout.write(str + '\\n');\n                },\n                Close: function () {\n                }\n            },\n            watchFile: function (fileName, callback) {\n                var firstRun = true;\n                var processingChange = false;\n\n                var fileChanged = function (curr, prev) {\n                    if (!firstRun) {\n                        if (curr.mtime < prev.mtime) {\n                            return;\n                        }\n\n                        _fs.unwatchFile(fileName, fileChanged);\n                        if (!processingChange) {\n                            processingChange = true;\n                            callback(fileName);\n                            setTimeout(function () {\n                                processingChange = false;\n                            }, 100);\n                        }\n                    }\n                    firstRun = false;\n                    _fs.watchFile(fileName, { persistent: true, interval: 500 }, fileChanged);\n                };\n\n                fileChanged();\n                return {\n                    fileName: fileName,\n                    close: function () {\n                        _fs.unwatchFile(fileName, fileChanged);\n                    }\n                };\n            },\n            run: function (source, fileName) {\n                require.main.fileName = fileName;\n                require.main.paths = _module._nodeModulePaths(_path.dirname(_fs.realpathSync(fileName)));\n                require.main._compile(source, fileName);\n            },\n            getExecutingFilePath: function () {\n                return process.mainModule.filename;\n            },\n            quit: process.exit\n        };\n    }\n    ;\n\n    if (typeof ActiveXObject === \"function\")\n        return getWindowsScriptHostIO(); else if (typeof module !== 'undefined' && module.exports)\n        return getNodeIO(); else\n        return null;\n})();\n\nfunction compile(logger, sourcefilename){\n\t//\n\t// \u30c6\u30f3\u30dd\u30e9\u30ea\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306btypescript.js\u304c\u7121\u3044\u3068\u304d\u306b\u306f\u3001node_modules/\u304b\u3089\u8aad\u307f\u8fbc\u3080\u3002\n\t//\n\tvar fs = require(\"fs\"),\n\t\tpath = require(\"path\");\n\n\tvar typescript_filename = process.env.TMPDIR + \"typescript.js\";\n\tif( ! fs.existsSync(typescript_filename)){\n\t\tvar code = [\n\t\t\tfs.readFileSync(\"/usr/local/lib/node_modules/typescript/bin/typescript.js\"), // <-\u5404\u81ea\u306e\u74b0\u5883\u306b\u5408\u308f\u305b\u3066\u30d1\u30b9\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3002\n\t\t\t\"exports.TypeScript = TypeScript;\"\n\t\t].join(\"\");\n\t\tfs.writeFileSync(typescript_filename, code);\n\t}\n\n\t//\n\t// \u3053\u306e\u8fba\u304b\u3089\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u672c\u7de8\n\t//\n\tvar TypeScript = require(typescript_filename).TypeScript;\n\tvar _this = this;\n\n\tvar ErrorReporter = (function() {\n\t\tfunction ErrorReporter(ioHost, compilationEnvironment) {\n\t\t\tthis.ioHost = ioHost;\n\t\t\tthis.hasErrors = false;\n\t\t\tthis.setCompilationEnvironment(compilationEnvironment);\n\t\t}\n\n\t\tErrorReporter.prototype.addDiagnostic = function(diagnostic) {\n\t\t\tthis.hasErrors = true;\n\n\t\t\tif (diagnostic.fileName()) {\n\t\t\t\tvar soruceUnit = this.compilationEnvironment.getSourceUnit(diagnostic.fileName());\n\t\t\t\tif (!soruceUnit) {\n\t\t\t\t\tsoruceUnit = new TypeScript.SourceUnit(diagnostic.fileName(), this.ioHost.readFile(diagnostic.fileName()));\n\t\t\t\t}\n\t\t\t\tvar lineMap = new TypeScript.LineMap(soruceUnit.getLineStartPositions(), soruceUnit.getLength());\n\t\t\t\tvar lineCol = {\n\t\t\t\t\tline : -1,\n\t\t\t\t\tcharacter : -1\n\t\t\t\t};\n\t\t\t\tlineMap.fillLineAndCharacterFromPosition(diagnostic.start(), lineCol);\n\n\t\t\t\tthis.ioHost.stderr.Write(diagnostic.fileName() + \"(\" + (lineCol.line + 1) + \",\" + (lineCol.character + 1) + \"): \");\n\t\t\t}\n\n\t\t\tthis.ioHost.stderr.WriteLine(diagnostic.message());\n\t\t};\n\n\t\tErrorReporter.prototype.setCompilationEnvironment = function(compilationEnvironment) {\n\t\t\tthis.compilationEnvironment = compilationEnvironment;\n\t\t};\n\n\t\tErrorReporter.prototype.reset = function() {\n\t\t\tthis.hasErrors = false;\n\t\t};\n\t\treturn ErrorReporter;\n\t})(); \n\n\tthis.ioHost = IO;\n    this.hasResolveErrors = false;\n    this.compilerVersion = \"0.9.0.1\";\n    this.printedVersion = false;\n    this.errorReporter = null;\n\tthis.compilationSettings = new TypeScript.CompilationSettings();\n\tthis.compilationEnvironment = new TypeScript.CompilationEnvironment(compilationSettings, ioHost);\n    this.resolvedEnvironment = this.compilationEnvironment;\n    this.errorReporter = new ErrorReporter(this.ioHost, this.compilationEnvironment);\n\n\tvar compiler = new TypeScript.TypeScriptCompiler(logger, this.compilationSettings, null);\n\n\t//\n\t// \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u8a2d\u5b9a\n\t//\n\tvar fileInformation = ioHost.readFile(sourcefilename);\n\tvar code = new TypeScript.SourceUnit(sourcefilename, fileInformation);\n\n\tcompiler.addSourceUnit(\n\t    code.path,\n    \tTypeScript.ScriptSnapshot.fromString(code.fileInformation.contents()),\n\t    code.fileInformation.byteOrderMark(),\n    \t0,\n\t    false,\n\t    code.referencedFiles);\n\n\t//\n\t// \u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30a8\u30e9\u30fc\u306e\u30c1\u30a7\u30c3\u30af\uff1f\n\t//\n\tvar syntacticDiagnostics = compiler.getSyntacticDiagnostics(code.path);\n\tcompiler.reportDiagnostics(syntacticDiagnostics, this.errorReporter);\n\n\tvar anySyntacticErrors = false;\n\tvar anySemanticErrors = false;\n\n\n\tif (syntacticDiagnostics.length > 0) {\n\t    anySyntacticErrors = true;  // \u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30a8\u30e9\u30fc\u6709\u308a\n\t}\n\n\tif (anySyntacticErrors) {\n\t    return true; // \u30a8\u30e9\u30fc\u3067\u7d42\u4e86\n\t}\n\n\t//\n\t// \u578b\u30c1\u30a7\u30c3\u30af\u3068\u610f\u5473\u89e3\u6790\n\t//\n\tcompiler.pullTypeCheck();\n\tvar fileNames = compiler.fileNameToDocument.getAllKeys();\n\n\tfor (var i = 0, n = fileNames.length; i < n; i++) {\n    \tvar fileName = fileNames[i];\n\t    var semanticDiagnostics = compiler.getSemanticDiagnostics(fileName);\n    \tif (semanticDiagnostics.length > 0) {\n        \tanySemanticErrors = true;\n\t        compiler.reportDiagnostics(semanticDiagnostics, this.errorReporter);\n    \t}\n\t}\n\n\t//\n\t// \u30b3\u30f3\u30d1\u30a4\u30eb\u7d50\u679c\u306e\u66f8\u51fa\u3057\n\t//\n\n\t// \u30d5\u30a1\u30a4\u30eb\u66f8\u51fa\u3057\u7528\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\tvar emitterIOHost = {\n    \twriteFile: function (fileName, contents, writeByteOrderMark) {\n        \treturn IOUtils.writeFileAndFolderStructure(_this.ioHost, fileName, contents, writeByteOrderMark);\n\t    },\n    \tdirectoryExists: this.ioHost.directoryExists,\n\t    fileExists: this.ioHost.fileExists,\n    \tresolvePath: this.ioHost.resolvePath\n\t};\n\n\t// \u3088\u304f\u308f\u304b\u3089\u306a\u3044\u4f55\u304b\uff08\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u3069\u3046\u3057\u305f\u3053\u3046\u3057\u305f\uff1f\uff09\n\tvar mapInputToOutput = function (inputFile, outputFile) {\n    \t_this.resolvedEnvironment.inputFileNameToOutputFileName.addOrUpdate(inputFile, outputFile);\n\t};\n\n\t// \u767a\u884c\uff08\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u51fa\u3057\uff1f\uff09\n\tvar emitDiagnostics = compiler.emitAll(emitterIOHost, mapInputToOutput);\n\tcompiler.reportDiagnostics(emitDiagnostics, this.errorReporter);\n\tif (emitDiagnostics.length > 0) {\n    \treturn true; // \u30a8\u30e9\u30fc\u3067\u7d42\u4e86\n\t}\n\n\tif (anySemanticErrors) {\n    \treturn true; // \u30a8\u30e9\u30fc\u3067\u7d42\u4e86\n\t}\n\n\t// \u767a\u884c\uff08\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u51fa\u3057\uff1f\uff09\u3000\u305d\u306e\uff12\n\tvar emitDeclarationsDiagnostics = compiler.emitAllDeclarations();\n\tcompiler.reportDiagnostics(emitDeclarationsDiagnostics, this.errorReporter);\n\tif (emitDeclarationsDiagnostics.length > 0) {\n    \treturn true; // \u30a8\u30e9\u30fc\u3067\u7d42\u4e86\n\t}\n\n\treturn false; // \u7121\u4e8b\u30b3\u30f3\u30d1\u30a4\u30eb\u5b8c\u4e86\n}\n\n// usage: \n/*\nvar logger = {\n    information: function () {\n        return false;\n    },\n    debug: function () {\n        return false;\n    },\n    warning: function () {\n        return false;\n    },\n    error: function () {\n        return false;\n    },\n    fatal: function () {\n        return false;\n    },\n    log: function (s) {\n    \tconsole.log(s);\n    }\n};\ncompile(logger, \"test.ts\");\n*/\n```\n\n>\u306a\u3093\u304b\u66f8\u3044\u3066\u308b\u3046\u3061\u306b\u9577\u304f\u306a\u3063\u305f\u2026orz\n\n\u52d5\u4f5c\u30c6\u30b9\u30c8\u3092\u3057\u305f\u3089\u3001\u304a\u3057\u307e\u3044\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30c6\u30b9\u30c8\u7528\u30d5\u30a1\u30a4\u30eb\u3082\u4e00\u5fdc\u3002\n\n```typescript:test.ts\nclass Human {\n    name: string;\n\n    constructor (name: string) {\n        this.name = name;\n    }\n\n    hello (): string {\n        return \"Hello, \" + this.name + \"!\";\n    }\n}\n```\n\n>\u81ea\u5206\u7528\u306e\u30e1\u30e2\u3068\u5272\u308a\u5207\u3063\u3066\u66f8\u3044\u305f\u304b\u3089\u3001\u3081\u3063\u3061\u3083\u8aad\u307f\u306b\u304f\u3044\u306a\u3053\u306e\u8a18\u4e8b\u2026\u3002\n>\u529b\u6280\u3059\u304e\u308b\u304b\u3089\u3001\u3042\u3068\u3067\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u304b\u3082\u2026\u3002\n", "tags": ["addSourceUnit", "TypeScript", "TypeScriptCompiler", "\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9"]}