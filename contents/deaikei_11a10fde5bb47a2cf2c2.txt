{"tags": ["Python", "K-means", "scikit-learn", "\u6a5f\u68b0\u5b66\u7fd2"], "context": "\n\n\u80cc\u666f\n\n\u304a\u624b\u8efd\u306a\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u624b\u6bb5\u3068\u3057\u3066k-means\u304c\u6709\u540d\u3067\u3042\u308b\u304c\u3001\u4ee5\u4e0b\u306e\u69d8\u306a\u56f0\u3063\u305f\u30dd\u30a4\u30f3\u30c8\u304c\u3042\u308b\n\n\nk-means\u6cd5\u306e\u554f\u984c\u70b9\u306e\u4e00\u3064\u306f\u3001\u30af\u30e9\u30b9\u30bf\u306e\u500b\u6570k\u3092\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u3060\u3002  \n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306f\u63a2\u7d22\u7684 (exploratory) \u306a\u30c7\u30fc\u30bf\u89e3\u6790\u624b\u6cd5\u3067\u3042\u3063\u3066\uff0c\u5206\u5272\u306f\u5fc5\u305a\u4f55\u3089\u304b\u306e\u4e3b\u89b3\u3084\u8996\u70b9\u306b\u57fa\u3065\u3044\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\u3088\u3063\u3066\uff0c\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u7d50\u679c\u306f\uff0c\u30c7\u30fc\u30bf\u306e\u8981\u7d04\u306a\u3069\u306e\u77e5\u898b\u3092\u5f97\u308b\u305f\u3081\u306b\u7528\u3044\uff0c\u5ba2\u89b3\u7684\u306a\u8a3c\u62e0\u3068\u3057\u3066\u7528\u3044\u3066\u306f\u306a\u308a\u307e\u305b\u3093\uff0e \n\u53c2\u7167\u5143\n\n\n\u305d\u308c\u306f\u77e5\u3063\u3066\u3044\u308b\u3002\u3067\u3001\u7d50\u5c40\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306f\u672c\u5f53\u306b\u5206\u6790\u8005\u306e\u6c7a\u3081\u6253\u3061\u3067\u3044\u3044\u306e\u304b\uff1f\n\n\n\u300c\u3053\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306f\u3069\u3046\u3084\u3063\u3066\u6c7a\u3081\u305f\u306e\uff1f\u300d\u300c\u3053\u308c\u307e\u3067\u306e\u5206\u6790\u7d50\u679c\u304b\u3089\u30bd\u30fc\u30b4\u30fc\u7684\u306b\u8003\u3048\u3066\u6c7a\u5b9a\u3057\u307e\u3057\u305f\u300d\u3068\u304b\u8a00\u3044\u305f\u304f\u306a\u3044\n\n\n\n\n\u3053\u306e\u30da\u30fc\u30b8\u306e\u76ee\u7684\n\n\n\u300c\u6700\u7d42\u7684\u306b\u306f\u5206\u6790\u5b98\u306e\u5224\u65ad\u3067\u30af\u30e9\u30b9\u30bf\u30fc\u306f\u6c7a\u5b9a\u3057\u307e\u3057\u305f\u300d\u3068\u3044\u3044\u3064\u3064\u3082\u3001\u4f55\u304b\u3057\u3089\u6570\u5024\u3068\u3057\u3066\u306e\u6839\u62e0\u3092\u6301\u3063\u3066\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u6c7a\u5b9a\u3057\u305f\u3044\n\n\u4f55\u304b\u826f\u3044\u5224\u65ad\u57fa\u6e96\u306f\u7121\u3044\u306e\u304b\uff1f\n\n\n\u5b8c\u74a7\u306a\u65b9\u6cd5\u3067\u306f\u306a\u3044\u304c\u3001\u300c\u30a8\u30eb\u30dc\u30fc\u6cd5\u300d\u3068\u300c\u30b7\u30eb\u30a8\u30c3\u30c8\u5206\u6790\u300d\u3068\u3044\u3046\u65b9\u6cd5\u3067\u9069\u5207\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306e\u691c\u8a0e\u304c\u3067\u304d\u308b\u3089\u3057\u3044\u306e\u3067\u305d\u306e\u7d39\u4ecb\u3092\u3059\u308b\n\n\n\u5b9f\u884c\u74b0\u5883\n\nPython2\nJupyter notebook\u4e0a\u3067\u5b9f\u884c -> markdown\u306b\u3057\u3066Qiita\u306b\u8cbc\u308a\u4ed8\u3051\n\n\n\uff08\u306a\u306e\u3067\u3001import\u3057\u3066\u3044\u308b\u3082\u306e\u306e\u4e2d\u306bJupyter\u5c02\u7528\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3042\u3063\u305f\u308a\u3001\u5b9f\u884c\u30bb\u30eb\u5358\u4f4d\u3067\u30b3\u30fc\u30c9\u304c\u5206\u304b\u308c\u3066\u305f\u308a\u3057\u3066\u3044\u307e\u3059\uff09\n\n\n\n\nScikit-learn\u3092\u4f7f\u3063\u305fk-means\n\n\u3072\u3068\u307e\u305ak-means\u3092\u3084\u3063\u3066\u307f\u308b\n\u307e\u305a\u306f\u30c7\u30e2\u30c7\u30fc\u30bf\u306e\u7528\u610f\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom IPython.display import display, HTML # Jupyter notebook\u7528\n%matplotlib inline # Jupyter notebook\u7528\n\nfrom sklearn.datasets import make_blobs  # \u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u306e\u751f\u6210\u7528\n\n# X\u306b\u306f1\u3064\u306e\u30d7\u30ed\u30c3\u30c8\u306e(x,y)\u304c\u3001y\u306b\u306f\u305d\u306e\u30d7\u30ed\u30c3\u30c8\u306e\u6240\u5c5e\u3059\u308b\u30af\u30e9\u30b9\u30bf\u30fc\u756a\u53f7\u304c\u5165\u308b\nX,y=make_blobs(n_samples=150,         # \u30b5\u30f3\u30d7\u30eb\u70b9\u306e\u7dcf\u6570\n               n_features=2,          # \u7279\u5fb4\u91cf\uff08\u6b21\u5143\u6570\uff09\u306e\u6307\u5b9a  default:2 \n               centers=3,             # \u30af\u30e9\u30b9\u30bf\u306e\u500b\u6570\n               cluster_std=0.5,       # \u30af\u30e9\u30b9\u30bf\u5185\u306e\u6a19\u6e96\u504f\u5dee \n               shuffle=True,          # \u30b5\u30f3\u30d7\u30eb\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\n               random_state=0)        # \u4e71\u6570\u751f\u6210\u5668\u306e\u72b6\u614b\u3092\u6307\u5b9a\n\nplt.scatter(X[:,0],X[:,1],c='white',marker='o',s=50)\nplt.grid()\nplt.show()\n\n\n\n\u30d1\u3063\u3068\u898b\u3067\uff13\u3064\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\n\n\u4eca\u56de\u306f\u3053\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u8a71\u3092\u9032\u3081\u308b\n\n\nK-means\u306e\u5fa9\u7fd2\n\n\n\u30af\u30e9\u30b9\u30bf\u5185\u8aa4\u5dee\u5e73\u65b9\u548c\uff08SSE\uff09\u3092\u53cd\u5fa9\u7684\u306b\u6700\u5c0f\u5316\u3059\u308b  \n\n\u5404\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u542b\u307e\u308c\u308b\u30b5\u30f3\u30d7\u30eb\u3068\u305d\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u4e2d\u5fc3\u70b9\uff08\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\uff09\u306e\u5dee\u306e2\u4e57\u548c\u3092\u6700\u5c0f\u5316\u3059\u308b\n\n\n\n\u767e\u805e\u306f\u4e00\u898b\u306b\u3057\u304b\u305a  \n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u5b9a\u756a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u300cK-means\u6cd5\u300d\u3092\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u305f\n\n\n\n\nScikit-learn\u306b\u304a\u3051\u308bKMeans\u306e\u95a2\u6570\n\n\u4eca\u56de\u306f k-means\u3092\u5b9f\u884c\u3059\u308b\u306e\u306b Scikit-learn\u3092\u5229\u7528\u3057\u305f\n\nScikit-learn\u3067\u306f\u3069\u306e\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u3067\u3082\u540c\u3058\u95a2\u6570\u3092\u4f7f\u3046\uff08\u300c\u5185\u5bb9\u300d\u306b\u306fk-means\u5b9f\u884c\u6642\u306e\u5185\u5bb9\u306b\u66f8\u304d\u63db\u3048\u3066\u3042\u308b\uff09\n\n\n\n\n\n\n\u95a2\u6570\n\u5185\u5bb9\n\n\n\n\nfit(X[, y])\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u8a08\u7b97\u3092\u5b9f\u884c\u3059\u308b\u3002\n\n\nfit_predict(X[, y])\n\u5404\u30b5\u30f3\u30d7\u30eb\u306b\u5bfe\u3059\u308b\u3001\u30af\u30e9\u30b9\u30bf\u756a\u53f7\u3092\u6c42\u3081\u308b\u3002\n\n\nfit_transform(X[, y])\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u8a08\u7b97\u3092\u884c\u3044\u3001X \u3092\u5206\u6790\u306b\u7528\u3044\u305f\u8ddd\u96e2\u7a7a\u9593\u306b\u5909\u63db\u3057\u3066\u8fd4\u3059\u3002\n\n\nget_params([deep])\n\u8a08\u7b97\u306b\u7528\u3044\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8fd4\u3059\u3002\n\n\npredict(X)\nX \u306e\u30b5\u30f3\u30d7\u30eb\u304c\u5c5e\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u30bf\u756a\u53f7\u3092\u8fd4\u3059\n\n\nset_params(**params)\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\n\n\ntransform(X[, y])\nX \u3092\u5206\u6790\u306b\u7528\u3044\u305f\u8ddd\u96e2\u7a7a\u9593\u306b\u5909\u63db\u3057\u3066\u8fd4\u3059\u3002\n\n\n\nfrom sklearn.cluster import KMeans\n\nkm = KMeans(n_clusters=3,            # \u30af\u30e9\u30b9\u30bf\u30fc\u306e\u500b\u6570\n            init='random',           # \u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5024\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u8a2d\u5b9a  default: 'k-means++'\n            n_init=10,               # \u7570\u306a\u308b\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5024\u3092\u7528\u3044\u305fk-means\u306e\u5b9f\u884c\u56de\u6570 default: '10' \u5b9f\u884c\u3057\u305f\u3046\u3061\u3082\u3063\u3068SSE\u5024\u304c\u5c0f\u3055\u3044\u30e2\u30c7\u30eb\u3092\u6700\u7d42\u30e2\u30c7\u30eb\u3068\u3057\u3066\u9078\u629e\n            max_iter=300,            # k-means\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5185\u90e8\u306e\u6700\u5927\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u56de\u6570  default: '300'\n            tol=1e-04,               # \u53ce\u675f\u3068\u5224\u5b9a\u3059\u308b\u305f\u3081\u306e\u76f8\u5bfe\u7684\u306a\u8a31\u5bb9\u8aa4\u5dee default: '1e-04'\n            random_state=0)          # \u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5316\u306b\u7528\u3044\u308b\u4e71\u6570\u767a\u751f\u5668\u306e\u72b6\u614b\n\ny_km = km.fit_predict(X)\n\n\nk-means++\n\n\u30e9\u30f3\u30c0\u30e0\u306b\u8a2d\u7f6e\u3055\u308c\u308b\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u304c\u3082\u3057\u4e92\u3044\u306b\u9055\u3044\u4f4d\u7f6e\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3059\u308b\u3068\u52b9\u7387\u7684\u306b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u304d\u306a\u3044\n\n\u305d\u3053\u3067k-means++\u3067\u306f\u521d\u671f\u306e\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u3092\u4e92\u3044\u306b\u96e2\u308c\u305f\u4f4d\u7f6e\u306b\u914d\u7f6e\u3059\u308b\u3002\u305d\u308c\u306b\u3088\u308a\u5f93\u6765\u306ek-means\u6cd5\u3088\u308a\u3082\u52b9\u679c\u7684\u306a\u3088\u308a\u4e00\u8cab\u6027\u306e\u3042\u308b\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\n\n\ninit = 'k-means++'\u306b\u3059\u308c\u3070\u826f\u3044\uff08\u305f\u3060\u3057\u30c7\u30d5\u30a9\u30eb\u30c8\u3067k-means++\u306b\u306a\u3063\u3066\u3044\u308b\uff09\n\n\u5206\u5272\u3057\u305f\u30af\u30e9\u30b9\u30bf\u30fc\u3092\u8272\u5206\u3051\uff06\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u3092\u63cf\u5199\u3059\u308b\nplt.scatter(X[y_km==0,0],         # y_km\uff08\u30af\u30e9\u30b9\u30bf\u30fc\u756a\u53f7\uff09\u304c0\u306e\u6642\u306bX\u306e0\u5217\u76ee\u3092\u62bd\u51fa\n                    X[y_km==0,1], # y_km\uff08\u30af\u30e9\u30b9\u30bf\u30fc\u756a\u53f7\uff09\u304c0\u306e\u6642\u306bX\u306e1\u5217\u76ee\u3092\u62bd\u51fa\n                    s=50,\n                    c='lightgreen',\n                    marker='s',\n                    label='cluster 1')\nplt.scatter(X[y_km==1,0],\n                    X[y_km==1,1],\n                    s=50,\n                    c='orange',\n                    marker='o',\n                    label='cluster 2')\nplt.scatter(X[y_km==2,0],\n                   X[y_km==2,1],\n                    s=50,\n                    c='lightblue',\n                    marker='v',\n                    label='cluster 3')\nplt.scatter(km.cluster_centers_[:,0],   # km.cluster_centers_\u306b\u306f\u5404\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u5ea7\u6a19\u304c\u5165\u3063\u3066\u3044\u308b\n                    km.cluster_centers_[:,1],\n                    s=250,\n                    marker='*',\n                    c='red',\n                    label='centroids')\nplt.legend()\nplt.grid()\nplt.show()\n\n\n\n\u30af\u30e9\u30b9\u30bf\u5185\u8aa4\u5dee\u5e73\u65b9\u548c\uff08SSE\uff09\u3078\u306e\u30a2\u30af\u30bb\u30b9\n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u6027\u80fd\u3092\u6570\u5024\u5316\u3059\u308b\u306b\u306f\u3001\u30af\u30e9\u30b9\u30bf\u5185SSE\u306e\u3088\u3046\u306a\u6307\u6a19\u3092\u7528\u3044\u3066\u3001\u3055\u307e\u3056\u307e\u306ak-means\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u6027\u80fd\u3092\u6bd4\u8f03\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n\nscikit-learn\u3067\u306fk-means\u30e2\u30c7\u30eb\u9069\u5fdc\u5f8c\u306f inertia_\u5c5e\u6027\u3092\u901a\u3058\u3066\u3053\u306e\u5024\u306b\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u308b  \uff08\u30af\u30e9\u30b9\u30bf\u5185SSE\u306e\u3053\u3068\u3092\"\u30af\u30e9\u30b9\u30bf\u306e\u6163\u6027\"cluster inertia \u3068\u3082\u547c\u3076\u3089\u3057\u3044 \uff09\n\n\u30af\u30e9\u30b9\u30bf\u5185SSE\u5024\u304c\u5c0f\u3055\u3044\u307b\u3069\u300c\u6b6a\u307f\u306e\u306a\u3044\uff08\u30af\u30a2\u30b9\u30bf\u30ea\u30f3\u30b0\u304c\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u308b\uff09\u826f\u3044\u30e2\u30c7\u30eb\u300d\u3068\u8a00\u3048\u308b\n\n\n\nprint ('Distortion: %.2f'% km.inertia_)\n\nDistortion: 72.48\n\n\n\u30a8\u30eb\u30dc\u30fc\u6cd5\n\u672c\u984c\u306e\u300c\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306e\u691c\u8a0e\u3092\u4ed8\u3051\u308b\u65b9\u6cd5\u300d\u306b\u3064\u3044\u3066\n\n\u30a8\u30eb\u30dc\u30fc\u6cd5\u3068\u306f\n\n\u30af\u30e9\u30b9\u30bf\u3054\u3068\u306eSSE\u5024\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u56f3\uff08\u305d\u308c\u3060\u3051\uff09\nSSE\u5024\u304c\"\u30d2\u30b8\"\u306e\u3088\u3046\u306b\u30ac\u30af\u30f3\u3068\u66f2\u304c\u3063\u305f\u70b9\uff08SSE\u5024\u306e\u4f4e\u4e0b\u304c\u30b5\u30c1\u308b\u5834\u6240\uff09\u304c\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3068\u307f\u306a\u3059\n\ndistortions = []\n\nfor i  in range(1,11):                # 1~10\u30af\u30e9\u30b9\u30bf\u307e\u3067\u4e00\u6c17\u306b\u8a08\u7b97 \n    km = KMeans(n_clusters=i,\n                init='k-means++',     # k-means++\u6cd5\u306b\u3088\u308a\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u3092\u9078\u629e\n                n_init=10,\n                max_iter=300,\n                random_state=0)\n    km.fit(X)                         # \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u8a08\u7b97\u3092\u5b9f\u884c\n    distortions.append(km.inertia_)   # km.fit\u3059\u308b\u3068km.inertia_\u304c\u5f97\u3089\u308c\u308b\n\nplt.plot(range(1,11),distortions,marker='o')\nplt.xlabel('Number of clusters')\nplt.ylabel('Distortion')\nplt.show()\n\n\n\n\u3053\u308c\u304c\u30a8\u30eb\u30dc\u30fc\u56f3\n\n\n\u300c\u30d2\u30b8\u304c\u6298\u308c\u66f2\u304c\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u307f\u3048\u308b\u300d\u304b\u3089\u305d\u3046\u3044\u3046\u547c\u3073\u65b9\u3089\u3057\u3044\n\u30af\u30e9\u30b9\u30bf\u30fc\u65703\u3067\u30ac\u30af\u30c3\u3068\u843d\u3061\u3066\u3044\u308b\uff08SSE\u5024\u304c\u30b5\u30c1\u3063\u3066\u3044\u308b\uff09\u306e\u3067\u3001\u300c\u30af\u30e9\u30b9\u30bf\u30fc\u65703\u304c\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u300d\u3068\u5224\u65ad\u3067\u304d\u308b\n\n\n\n\n\u3061\u306a\u307f\u306b\u30fb\u30fb\u30fb\n\n\u3053\u3053\u3067\u5177\u4f53\u7684\u306a\u56f3\u306a\u3069\u306f\u63b2\u8f09\u3067\u304d\u306a\u3044\u304c\u3001\u73fe\u5b9f\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30a8\u30eb\u30dc\u30fc\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\u3068\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306a\u300c\u7dba\u9e97\u306a\u30d2\u30b8\u300d\u306f\u306a\u304b\u306a\u304b\u73fe\u308c\u306a\u3044\n\n\n\u4f59\u7a0b\u660e\u78ba\u306b\u5206\u304b\u308c\u305f\u30af\u30e9\u30b9\u30bf\u30fc\u30c7\u30fc\u30bf\u3067\u306a\u3044\u9650\u308a\u3001\u30a8\u30eb\u30dc\u30fc\u56f3\u306f\u300c\u306a\u3060\u3089\u304b\u306a\u66f2\u7dda\u300d\u3092\u63cf\u304f\n\n\n\u300c\u30a8\u30eb\u30dc\u30fc\u56f3\u3092\u66f8\u304f\u3068\u7c21\u5358\u306b\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u691c\u8a0e\u304c\u3064\u304f\uff01\u300d\u3068\u3044\u3046\u3053\u3068\u306f\u307b\u307c\u7121\u3044\uff08\u73fe\u5b9f\u306f\u30ad\u30d3\u30b7\u30a4\uff09\n\n\n\n\n\n\n\u30b7\u30eb\u30a8\u30c3\u30c8\u5206\u6790 Silhouette analysis\n\n\u30b7\u30eb\u30a8\u30c3\u30c8\u5206\u6790\u3068\u306f\n\n\u30af\u30e9\u30b9\u30bf\u5185\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u3069\u306e\u7a0b\u5ea6\u5bc6\u306b\u30b0\u30eb\u30fc\u30d7\u3055\u308c\u3066\u3044\u308b\u304b\uff08\u51dd\u96c6\u5ea6\uff09\u306e\u76ee\u5b89\u3068\u306a\u308b\u30b0\u30e9\u30d5\u3092\u53ef\u8996\u5316\uff08=\u30d1\u30c3\u3068\u898b\u3067\u30af\u30e9\u30b9\u30bf\u30fc\u304c\u4e0a\u624b\u304f\u3067\u304d\u3066\u3044\u308b\u304b\u306a\u3093\u3068\u306a\u304f\u308f\u304b\u308b\uff09\n\uff11\u3064\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u304c\u96a3\u63a5\u3059\u308b\u30af\u30e9\u30b9\u30bf\u30fc\u3068\u3069\u308c\u304f\u3089\u3044\u96e2\u308c\u3066\u3044\u308b\u304b\u3092\u53ef\u8996\u5316\u3059\u308b \n\n\u307e\u305f\u3001    \n\n\u9069\u5207\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u304c\u3069\u308c\u304f\u3089\u3044\u304b\u3092\u8abf\u3079\u308b\u305f\u3081\u306b\u3082\u4f7f\u3048\u308b\n\u30b7\u30eb\u30a8\u30c3\u30c8\u5206\u6790\u306fK-measn\u6cd5\u4ee5\u5916\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3082\u9069\u5fdc\u3067\u304d\u308b\n\n\n\u30b7\u30eb\u30a8\u30c3\u30c8\u5206\u6790\u306e\u30ed\u30b8\u30c3\u30af\n\n\u30b5\u30f3\u30d7\u30ebx(i)x(i)\\text{x}^{(i)}\u3068\u540c\u3058\u30af\u30e9\u30b9\u30bf\u5185\u306e\u305d\u306e\u4ed6\u3059\u3079\u3066\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u306e\u5e73\u5747\u8ddd\u96e2\u3068\u3057\u3066\u3001\u30af\u30e9\u30b9\u30bf\u306e\u51dd\u96c6\u5ea6a(i)a(i)\\text{a}^{(i)}\u3092\u8a08\u7b97\u3059\u308b\u3002\n\u30b5\u30f3\u30d7\u30ebx(i)x(i)\\text{x}^{(i)}\u3068\u6700\u3082\u8fd1\u304f\u306b\u3042\u308b\u30af\u30e9\u30b9\u30bf\u5185\u306e\u3059\u3079\u3066\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u306e\u5e73\u5747\u8ddd\u96e2\u3068\u3057\u3066\u3001\u305d\u306e\u6b21\u306b\u8fd1\u3044\u30af\u30e9\u30b9\u30bf\u304b\u3089\u306e\u4e56\u96e2\u5ea6b(i)b(i)\\text{b}^{(i)}\u3092\u8a08\u7b97\u3059\u308b\n\u30af\u30e9\u30b9\u30bf\u306e\u51dd\u96c6\u5ea6\u3068\u4e56\u96e2\u5ea6\u306e\u5dee\u3092\u3001\u305d\u308c\u3089\u306e\u3046\u3061\u5927\u304d\u3044\u65b9\u306e\u5024\u3067\u5272\u308a\u3001\u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570s(i)s(i)\\text{s}^{(i)}\u3092\u8a08\u7b97\u3059\u308b\n\n\n(\u5f15\u7528: \u66f8\u7c4d Python\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 P307)\n\n\u518d\u5ea6 k-means\u3092\u5b9f\u884c\nkm = KMeans(n_clusters=3,            # \u30af\u30e9\u30b9\u30bf\u30fc\u306e\u500b\u6570\n            init='k-means++',        # \u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5024\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u8a2d\u5b9a\n            n_init=10,               # \u7570\u306a\u308b\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5024\u3092\u7528\u3044\u305fk-means\u3042\u308b\u30b4\u30eam\u30ba\u30e0\u306e\u5b9f\u884c\u56de\u6570\n            max_iter=300,            # k-means\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5185\u90e8\u306e\u6700\u5927\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u56de\u6570\n            tol=1e-04,               # \u53ce\u675f\u3068\u5224\u5b9a\u3059\u308b\u305f\u3081\u306e\u76f8\u5bfe\u7684\u306a\u8a31\u5bb9\u8aa4\u5dee\n            random_state=0)          # \u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5316\u306b\u7528\u3044\u308b\u4e71\u6570\u767a\u751f\u5668\u306e\u72b6\u614b\ny_km = km.fit_predict(X)\n\n\n\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u3092\u66f8\u304f\nfrom sklearn.metrics import silhouette_samples\nfrom matplotlib import cm\n\ncluster_labels = np.unique(y_km)       # y_km\u306e\u8981\u7d20\u306e\u4e2d\u3067\u91cd\u8907\u3092\u7121\u304f\u3059\nn_clusters=cluster_labels.shape[0]     # \u914d\u5217\u306e\u9577\u3055\u3092\u8fd4\u3059\u3002\u3064\u307e\u308a\u3053\u3053\u3067\u306f n_clusters\u3067\u6307\u5b9a\u3057\u305f3\u3068\u306a\u308b\n\n# \u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570\u3092\u8a08\u7b97\nsilhouette_vals = silhouette_samples(X,y_km,metric='euclidean')  # \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf, \u30af\u30e9\u30b9\u30bf\u30fc\u756a\u53f7\u3001\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u3067\u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570\u8a08\u7b97\ny_ax_lower, y_ax_upper= 0,0\nyticks = []\n\nfor i,c in enumerate(cluster_labels):\n        c_silhouette_vals = silhouette_vals[y_km==c]      # cluster_labels\u306b\u306f 0,1,2\u304c\u5165\u3063\u3066\u3044\u308b\uff08enumerate\u306a\u306e\u3067i\u306b\u30820,1,2\u304c\u5165\u3063\u3066\u308b\uff08\u305f\u307e\u305f\u307e\uff09\uff09\n        c_silhouette_vals.sort()\n        y_ax_upper += len(c_silhouette_vals)              # \u30b5\u30f3\u30d7\u30eb\u306e\u500b\u6570\u3092\u30af\u30e9\u30b9\u30bf\u30fc\u3054\u3068\u306b\u8db3\u3057\u4e0a\u3052\u3066y\u8ef8\u306e\u6700\u5927\u5024\u3092\u6c7a\u5b9a\n        color = cm.jet(float(i)/n_clusters)               # \u8272\u306e\u5024\u3092\u4f5c\u308b\n        plt.barh(range(y_ax_lower,y_ax_upper),            # \u6c34\u5e73\u306e\u68d2\u30b0\u30e9\u30d5\u306e\u3092\u63cf\u753b\uff08\u5e95\u8fba\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\uff09\n                         c_silhouette_vals,               # \u68d2\u306e\u5e45\uff081\u30b5\u30f3\u30d7\u30eb\u3092\u8868\u3059\uff09\n                         height=1.0,                      # \u68d2\u306e\u9ad8\u3055\n                         edgecolor='none',                # \u68d2\u306e\u7aef\u306e\u8272\n                         color=color)                     # \u68d2\u306e\u8272\n        yticks.append((y_ax_lower+y_ax_upper)/2)          # \u30af\u30e9\u30b9\u30bf\u30e9\u30d9\u30eb\u306e\u8868\u793a\u4f4d\u7f6e\u3092\u8ffd\u52a0\n        y_ax_lower += len(c_silhouette_vals)              # \u5e95\u8fba\u306e\u5024\u306b\u68d2\u306e\u5e45\u3092\u8ffd\u52a0\n\nsilhouette_avg = np.mean(silhouette_vals)                 # \u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570\u306e\u5e73\u5747\u5024\nplt.axvline(silhouette_avg,color=\"red\",linestyle=\"--\")    # \u4fc2\u6570\u306e\u5e73\u5747\u5024\u306b\u7834\u7dda\u3092\u5f15\u304f \nplt.yticks(yticks,cluster_labels + 1)                     # \u30af\u30e9\u30b9\u30bf\u30ec\u30d9\u30eb\u3092\u8868\u793a\nplt.ylabel('Cluster')\nplt.xlabel('silhouette coefficient')\nplt.show()\n\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u308f\u304b\u308b\u3088\u3046\u306b\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u306f\u3059\u3079\u3066\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u3064\u3044\u3066\u6a2a\u5411\u304d\u68d2\u30b0\u30e9\u30d5\uff08plt.barh\uff09\u3092\u66f8\u3044\u3066\u3044\u308b\u3060\u3051\n\n\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u306e\u898b\u65b9\n\n\n\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u300c\u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570 silhouette coefficient \u300d\u304c 1\u306b\u8fd1\u3044\u307b\u3069\u3001\u305d\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u306f\u4ed6\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u304b\u3089\u9060\u304f\u96e2\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u8868\u3059\uff08\u4fc2\u6570\u306f -1 ~ 1\u306e\u9593\u3092\u3068\u308b\uff09\n\n0\u306b\u8fd1\u3044\u307b\u3069\u96a3\u63a5\u3059\u308b\u30af\u30e9\u30b9\u30bf\u30fc\u3068\u63a5\u8fd1\u3057\u3066\u3044\u308b or \u96a3\u63a5\u3059\u308b\u30af\u30e9\u30b9\u30bf\u30fc\u3068\u91cd\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u8868\u3059\uff08\u4e0a\u624b\u304f\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u5206\u96e2\u304c\u3067\u304d\u3066\u3044\u306a\u3044\u72b6\u614b\uff09\n\u4fc2\u6570\u304c\u30de\u30a4\u30ca\u30b9\u5024\u3060\u3068\u30af\u30e9\u30b9\u30bf\u30fc\u5316\u3055\u308c\u305f\u30b5\u30f3\u30d7\u30eb\u306f\u9593\u9055\u3063\u305f\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\n\n\n\n\u30b7\u30eb\u30a8\u30c3\u30c8\u306e\"\u539a\u3055 thickness\"\u306f\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u30b5\u30a4\u30ba\uff08\u6240\u5c5e\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u6570\uff09\u3092\u8868\u3059\n\n\u9069\u5207\u306b\u30af\u30e9\u30b9\u30bf\u30fc\u5206\u96e2\u3067\u304d\u3066\u3044\u308c\u3070\u5404\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u306e\"\u539a\u3055\"\u306f\u5747\u7b49\u306b\u8fd1\u304f\u306a\u308b\u3089\u3057\u3044\n\n\n\n\n\u53c2\u8003: Selecting the number of clusters with silhouette analysis on KMeans clustering\n\n\u30c0\u30e1\u306a\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u306e\u4f8b\n\u672c\u5f53\u306f\u30af\u30e9\u30b9\u30bf\u30fc\u304c3\u3064\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u306e\u306b\u30012\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u5206\u96e2\u3055\u305b\u3088\u3046\u3068\u3057\u305f\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u69d8\u306a\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u3068\u306a\u308b\nkm = KMeans(n_clusters=2,            # \u30af\u30e9\u30b9\u30bf\u30fc\u306e\u500b\u6570\n            init='k-means++',        # \u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5024\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u8a2d\u5b9a\n            n_init=10,               # \u7570\u306a\u308b\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5024\u3092\u7528\u3044\u305fk-means\u3042\u308b\u30b4\u30eam\u30ba\u30e0\u306e\u5b9f\u884c\u56de\u6570\n            max_iter=300,            # k-means\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5185\u90e8\u306e\u6700\u5927\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u56de\u6570\n            tol=1e-04,               # \u53ce\u675f\u3068\u5224\u5b9a\u3059\u308b\u305f\u3081\u306e\u76f8\u5bfe\u7684\u306a\u8a31\u5bb9\u8aa4\u5dee\n            random_state=0)          # \u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5316\u306b\u7528\u3044\u308b\u4e71\u6570\u767a\u751f\u5668\u306e\u72b6\u614b\ny_km = km.fit_predict(X)\n\nplt.scatter(X[y_km==0,0],\n                   X[y_km==0,1],\n                    s=50,\n                    c='lightgreen',\n                    marker='s',\n                    label='cluster 1')\nplt.scatter(X[y_km==1,0],\n                   X[y_km==1,1],\n                    s=50,\n                    c='orange',\n                    marker='o',\n                    label='cluster 2')\nplt.scatter(km.cluster_centers_[:,0],\n                    km.cluster_centers_[:,1],\n                    s=250,\n                    marker='*',\n                    c='red',\n                    label='centroids')\nplt.legend()\nplt.grid()\nplt.show()\n\n\n\u672c\u5f53\u306f3\u30af\u30e9\u30b9\u30bf\u30fc\u5b58\u5728\u3059\u308b\u306e\u306b2\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u5206\u3051\u3066\u307f\u305f\u30c0\u30e1\u306a\u4f8b\u3002\u898b\u4e8b\u306b\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u304c\u304a\u304b\u3057\u306a\u4f4d\u7f6e\u306b\u3044\u308b\u3002\n\u305d\u3057\u3066\u305d\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u304c\u4ee5\u4e0b\ncluster_labels = np.unique(y_km)       # y_km\u306e\u8981\u7d20\u306e\u4e2d\u3067\u91cd\u8907\u3092\u7121\u304f\u3059\nn_clusters=cluster_labels.shape[0]     # \u914d\u5217\u306e\u9577\u3055\u3092\u8fd4\u3059\n\n# \u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570\u3092\u8a08\u7b97\nsilhouette_vals = silhouette_samples(X,y_km,metric='euclidean')\ny_ax_lower, y_ax_upper= 0,0\nyticks = []\n\nfor i,c in enumerate(cluster_labels):\n        c_silhouette_vals = silhouette_vals[y_km==c]\n        c_silhouette_vals.sort()\n        y_ax_upper += len(c_silhouette_vals)\n        color = cm.jet(float(i)/n_clusters)               # \u8272\u306e\u5024\u3092\u30bb\u30c3\u30c8\n        plt.barh(range(y_ax_lower,y_ax_upper),            # \u6c34\u5e73\u306e\u68d2\u30b0\u30e9\u30d5\u306e\u3092\u63cf\u753b\uff08\u5e95\u8fba\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\uff09\n                         c_silhouette_vals,               # \u68d2\u306e\u5e45 \n                         height=1.0,                      # \u68d2\u306e\u9ad8\u3055\n                         edgecolor='none',                # \u68d2\u306e\u7aef\u306e\u8272\n                         color=color)                     # \u68d2\u306e\u8272\n        yticks.append((y_ax_lower+y_ax_upper)/2)          # \u30af\u30e9\u30b9\u30bf\u30e9\u30d9\u30eb\u306e\u4fdd\u6cb9\u6b21\u4f4d\u7f6e\u3092\u8ffd\u52a0\n        y_ax_lower += len(c_silhouette_vals)              # \u5e95\u8fba\u306e\u5024\u306b\u68d2\u306e\u5e45\u3092\u8ffd\u52a0\n\nsilhouette_avg = np.mean(silhouette_vals)                 # \u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570\u306e\u5e73\u5747\u5024\nplt.axvline(silhouette_avg,color=\"red\",linestyle=\"--\")    # \u4fc2\u6570\u306e\u5e73\u5747\u5024\u306b\u7834\u7dda\u3092\u5f15\u304f \nplt.yticks(yticks,cluster_labels + 1)                     # \u30af\u30e9\u30b9\u30bf\u30ec\u30d9\u30eb\u3092\u8868\u793a\nplt.ylabel('Cluster')\nplt.xlabel('silhouette cofficient')\nplt.show()\n\n\n\n\u30af\u30e9\u30b9\u30bf\u30fc\uff12\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u304c\u539a\u3044\uff08=\u30af\u30e9\u30b9\u30bf\u30fc2\u306e\u65b9\u306b\u30b5\u30f3\u30d7\u30eb\u304c\u5bc4\u308a\u3059\u304e\u3066\u3044\u308b\uff09\n\u30af\u30e9\u30b9\u30bf\u30fc1,2\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570\u5e73\u5747\u5024\uff08\u8d64\u7834\u7dda\uff09\u3092\u30af\u30e9\u30b9\u30bf\u30fc2\u306e\u307b\u3068\u3093\u3069\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u4e0b\u56de\u3063\u3066\u3044\u308b\n\n\n\u300c\u3046\u30fc\u3093\u3001\u307e\u3060\u3044\u307e\u3044\u3061\u30d4\u30f3\u3068\u304d\u3066\u3044\u306a\u3044\u306e\u3060\u3051\u3069...\u300d\u3068\u3044\u3046\u4eba\u306f\n\n\n\u30b7\u30eb\u30a8\u30c3\u30c8\u5206\u6790\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u306fscikit-learn\u516c\u5f0f\u306e\u30da\u30fc\u30b8\u304c\u4e00\u756a\u308f\u304b\u308a\u6613\u3044  \n\n\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u5909\u3048\u305f\u6642\u306b\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u304c\u3069\u306e\u3088\u3046\u306b\u5909\u308f\u308b\u304b\u304c\u8ffd\u3044\u3084\u3059\u3044\n\n\n\n\u4ee5\u4e0b\u3001scikit-learn\u516c\u5f0f\u306e\u30da\u30fc\u30b8\u3092\u4e38\u30b3\u30d4\n\n\u672c\u5f53\u306f4\u3064\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u304c\u3001\u305d\u308c\u3092k-means\u30672~4\u306b\u5206\u96e2\u3057\u305f\u6642\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u306e\u9055\u3044\u304c\u53ef\u8996\u5316\u3055\u308c\u3066\u3044\u308b\uff084\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u304c\u3042\u308b\u3079\u304d\u6b63\u3057\u3044\u59ff\u3067\u30012,3,5\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u306f\u6b6a\u306a\u30b7\u30eb\u30a8\u30c3\u30c8\u3001\u3068\u3044\u3046\u3053\u3068\uff09\n\n\n\nfrom __future__ import print_function\n\nfrom sklearn.datasets import make_blobs\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_samples, silhouette_score\n\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np\n\nprint(__doc__)\n\n# Generating the sample data from make_blobs\n# This particular setting has one distict cluster and 3 clusters placed close\n# together.\nX, y = make_blobs(n_samples=500,\n                  n_features=2,\n                  centers=4,\n                  cluster_std=1,\n                  center_box=(-10.0, 10.0),\n                  shuffle=True,\n                  random_state=1)  # For reproducibility\n\nrange_n_clusters = [2, 3, 4, 5, 6]\n\nfor n_clusters in range_n_clusters:\n    # Create a subplot with 1 row and 2 columns\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    fig.set_size_inches(18, 7)\n\n    # The 1st subplot is the silhouette plot\n    # The silhouette coefficient can range from -1, 1 but in this example all\n    # lie within [-0.1, 1]\n    ax1.set_xlim([-0.1, 1])\n    # The (n_clusters+1)*10 is for inserting blank space between silhouette\n    # plots of individual clusters, to demarcate them clearly.\n    ax1.set_ylim([0, len(X) + (n_clusters + 1) * 10])\n\n    # Initialize the clusterer with n_clusters value and a random generator\n    # seed of 10 for reproducibility.\n    clusterer = KMeans(n_clusters=n_clusters, random_state=10)\n    cluster_labels = clusterer.fit_predict(X)\n\n    # The silhouette_score gives the average value for all the samples.\n    # This gives a perspective into the density and separation of the formed\n    # clusters\n    silhouette_avg = silhouette_score(X, cluster_labels)\n    print(\"For n_clusters =\", n_clusters,\n          \"The average silhouette_score is :\", silhouette_avg)\n\n    # Compute the silhouette scores for each sample\n    sample_silhouette_values = silhouette_samples(X, cluster_labels)\n\n    y_lower = 10\n    for i in range(n_clusters):\n        # Aggregate the silhouette scores for samples belonging to\n        # cluster i, and sort them\n        ith_cluster_silhouette_values = \\\n            sample_silhouette_values[cluster_labels == i]\n\n        ith_cluster_silhouette_values.sort()\n\n        size_cluster_i = ith_cluster_silhouette_values.shape[0]\n        y_upper = y_lower + size_cluster_i\n\n        color = cm.spectral(float(i) / n_clusters)\n        ax1.fill_betweenx(np.arange(y_lower, y_upper),\n                          0, ith_cluster_silhouette_values,\n                          facecolor=color, edgecolor=color, alpha=0.7)\n\n        # Label the silhouette plots with their cluster numbers at the middle\n        ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n\n        # Compute the new y_lower for next plot\n        y_lower = y_upper + 10  # 10 for the 0 samples\n\n    ax1.set_title(\"The silhouette plot for the various clusters.\")\n    ax1.set_xlabel(\"The silhouette coefficient values\")\n    ax1.set_ylabel(\"Cluster label\")\n\n    # The vertical line for average silhoutte score of all the values\n    ax1.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n\n    ax1.set_yticks([])  # Clear the yaxis labels / ticks\n    ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n\n    # 2nd Plot showing the actual clusters formed\n    colors = cm.spectral(cluster_labels.astype(float) / n_clusters)\n    ax2.scatter(X[:, 0], X[:, 1], marker='.', s=30, lw=0, alpha=0.7,\n                c=colors)\n\n    # Labeling the clusters\n    centers = clusterer.cluster_centers_\n    # Draw white circles at cluster centers\n    ax2.scatter(centers[:, 0], centers[:, 1],\n                marker='o', c=\"white\", alpha=1, s=200)\n\n    for i, c in enumerate(centers):\n        ax2.scatter(c[0], c[1], marker='$%d$' % i, alpha=1, s=50)\n\n    ax2.set_title(\"The visualization of the clustered data.\")\n    ax2.set_xlabel(\"Feature space for the 1st feature\")\n    ax2.set_ylabel(\"Feature space for the 2nd feature\")\n\n    plt.suptitle((\"Silhouette analysis for KMeans clustering on sample data \"\n                  \"with n_clusters = %d\" % n_clusters),\n                 fontsize=14, fontweight='bold')\n\n    plt.show()\n\nAutomatically created module for IPython interactive environment\nFor n_clusters = 2 The average silhouette_score is : 0.704978749608\n\n\nFor n_clusters = 3 The average silhouette_score is : 0.588200401213\n\n\nFor n_clusters = 4 The average silhouette_score is : 0.650518663273\n\n\nFor n_clusters = 5 The average silhouette_score is : 0.563764690262\n\n\nFor n_clusters = 6 The average silhouette_score is : 0.450466629437\n\n\n\n\u3061\u306a\u307f\u306b\u30fb\u30fb\u30fb\n\n\u8a00\u3044\u305f\u3044\u3053\u3068\u306f\u30a8\u30eb\u30dc\u30fc\u56f3\u306e\u6642\u3068\u540c\u3058\u3060\uff01\uff01\uff01\n\n\n\u307e\u3068\u3081\n\n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u898b\u7a4d\u3082\u308b\u6642\u306e\u53c2\u8003\u3068\u306a\u308b\u624b\u6cd5\u3068\u3057\u3066\u300c\u30a8\u30eb\u30dc\u30fc\u56f3\u300d\u3068\u300c\u30b7\u30eb\u30a8\u30c3\u30c8\u5206\u6790\u300d\u3092\u7d39\u4ecb\u3057\u305f\n\n\u305f\u3060\u3057\u3001\u4e8c\u3064\u306e\u624b\u6cd5\u3068\u3082\u3001\u300c\u3053\u308c\u3067\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u304c\u308f\u304b\u308b\uff01\uff01\uff01\u300d\u3068\u3044\u3046\u3082\u306e\u3067\u306f\u306a\u3044\n\n\n\u7d50\u5c40\u3001\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u660e\u78ba\u306b\u77e5\u308b\u304a\u624b\u8efd\u306a\u65b9\u6cd5\u306f\u7121\u3044\u304c\u3001\u300c\u306a\u305c\u3053\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306b\u3057\u305f\u306e\u304b\u300d\u3092\u8aac\u660e\u3059\u308b\u3068\u304d\u306e\u6750\u6599\u306b\u306f\u306a\u308b\uff08\u306a\u3063\u3066\u307b\u3057\u3044\uff09\n\n\n\u53c2\u8003\n\u53c2\u8003\u3068\u3044\u3046\u304b\u3001\u63b2\u8f09\u3057\u305f\u30b3\u30fc\u30c9\u306f\u307b\u307c\u4ee5\u4e0b\u306e\u5199\u7d4c\uff08\uff0b\u8ffd\u52a0\u89e3\u8aac\u30fb\u4e0d\u660e\u77ad\u306a\u7b87\u6240\u306e\u88dc\u8db3\uff09\n\n\u66f8\u7c4d Python \u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 \uff08\u3059\u3054\u304f\u826f\u3044\u672c\u3060\u3068\u601d\u3044\u307e\u3059\uff01\u5c11\u3057\u304a\u9ad8\u3044\u3067\u3059\u304c\u307e\u3058\u3081\u306b\u6a5f\u68b0\u5b66\u7fd2\u52c9\u5f37\u3057\u305f\u3044\u4eba\u306b\u306f\u30aa\u30b9\u30b9\u30e1\uff09\n\u4e0a\u8a18\u306e\u672c\u306e\u539f\u672c\u8457\u8005Sebastian Raschka\u6c0f\u306egithub\u30da\u30fc\u30b8\n\nSelecting the number of clusters with silhouette analysis on KMeans clustering\n\n\n\n# \u80cc\u666f\n\n- \u304a\u624b\u8efd\u306a\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u624b\u6bb5\u3068\u3057\u3066k-means\u304c\u6709\u540d\u3067\u3042\u308b\u304c\u3001\u4ee5\u4e0b\u306e\u69d8\u306a\u56f0\u3063\u305f\u30dd\u30a4\u30f3\u30c8\u304c\u3042\u308b\n\n> k-means\u6cd5\u306e\u554f\u984c\u70b9\u306e\u4e00\u3064\u306f\u3001\u30af\u30e9\u30b9\u30bf\u306e\u500b\u6570k\u3092\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u3060\u3002  \n\n> \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306f\u63a2\u7d22\u7684 (exploratory) \u306a\u30c7\u30fc\u30bf\u89e3\u6790\u624b\u6cd5\u3067\u3042\u3063\u3066\uff0c\u5206\u5272\u306f\u5fc5\u305a\u4f55\u3089\u304b\u306e\u4e3b\u89b3\u3084\u8996\u70b9\u306b\u57fa\u3065\u3044\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\u3088\u3063\u3066\uff0c\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u7d50\u679c\u306f\uff0c\u30c7\u30fc\u30bf\u306e\u8981\u7d04\u306a\u3069\u306e\u77e5\u898b\u3092\u5f97\u308b\u305f\u3081\u306b\u7528\u3044\uff0c\u5ba2\u89b3\u7684\u306a\u8a3c\u62e0\u3068\u3057\u3066\u7528\u3044\u3066\u306f\u306a\u308a\u307e\u305b\u3093\uff0e \n\n>[\u53c2\u7167\u5143](http://www.kamishima.net/jp/clustering/)\n\n- \u305d\u308c\u306f\u77e5\u3063\u3066\u3044\u308b\u3002\u3067\u3001\u7d50\u5c40\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306f\u672c\u5f53\u306b**\u5206\u6790\u8005\u306e\u6c7a\u3081\u6253\u3061**\u3067\u3044\u3044\u306e\u304b\uff1f\n    - \u300c\u3053\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306f\u3069\u3046\u3084\u3063\u3066\u6c7a\u3081\u305f\u306e\uff1f\u300d\u300c\u3053\u308c\u307e\u3067\u306e\u5206\u6790\u7d50\u679c\u304b\u3089\u30bd\u30fc\u30b4\u30fc\u7684\u306b\u8003\u3048\u3066\u6c7a\u5b9a\u3057\u307e\u3057\u305f\u300d\u3068\u304b\u8a00\u3044\u305f\u304f\u306a\u3044\n\n\n# \u3053\u306e\u30da\u30fc\u30b8\u306e\u76ee\u7684\n\n- \u300c\u6700\u7d42\u7684\u306b\u306f\u5206\u6790\u5b98\u306e\u5224\u65ad\u3067\u30af\u30e9\u30b9\u30bf\u30fc\u306f\u6c7a\u5b9a\u3057\u307e\u3057\u305f\u300d\u3068\u3044\u3044\u3064\u3064\u3082\u3001\u4f55\u304b\u3057\u3089\u6570\u5024\u3068\u3057\u3066\u306e\u6839\u62e0\u3092\u6301\u3063\u3066\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u6c7a\u5b9a\u3057\u305f\u3044\n    - \u4f55\u304b\u826f\u3044\u5224\u65ad\u57fa\u6e96\u306f\u7121\u3044\u306e\u304b\uff1f\n    \n    \n- \u5b8c\u74a7\u306a\u65b9\u6cd5\u3067\u306f\u306a\u3044\u304c\u3001**\u300c\u30a8\u30eb\u30dc\u30fc\u6cd5\u300d**\u3068**\u300c\u30b7\u30eb\u30a8\u30c3\u30c8\u5206\u6790\u300d**\u3068\u3044\u3046\u65b9\u6cd5\u3067\u9069\u5207\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306e\u691c\u8a0e\u304c\u3067\u304d\u308b\u3089\u3057\u3044\u306e\u3067\u305d\u306e\u7d39\u4ecb\u3092\u3059\u308b\n\n### \u5b9f\u884c\u74b0\u5883\n\n- Python2\n- Jupyter notebook\u4e0a\u3067\u5b9f\u884c -> markdown\u306b\u3057\u3066Qiita\u306b\u8cbc\u308a\u4ed8\u3051\n    - \uff08\u306a\u306e\u3067\u3001import\u3057\u3066\u3044\u308b\u3082\u306e\u306e\u4e2d\u306bJupyter\u5c02\u7528\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3042\u3063\u305f\u308a\u3001\u5b9f\u884c\u30bb\u30eb\u5358\u4f4d\u3067\u30b3\u30fc\u30c9\u304c\u5206\u304b\u308c\u3066\u305f\u308a\u3057\u3066\u3044\u307e\u3059\uff09\n\n# Scikit-learn\u3092\u4f7f\u3063\u305fk-means\n\n### \u3072\u3068\u307e\u305ak-means\u3092\u3084\u3063\u3066\u307f\u308b\n\n\u307e\u305a\u306f\u30c7\u30e2\u30c7\u30fc\u30bf\u306e\u7528\u610f\n\n\n```python\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom IPython.display import display, HTML # Jupyter notebook\u7528\n%matplotlib inline # Jupyter notebook\u7528\n```\n\n\n```python\nfrom sklearn.datasets import make_blobs  # \u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u306e\u751f\u6210\u7528\n\n# X\u306b\u306f1\u3064\u306e\u30d7\u30ed\u30c3\u30c8\u306e(x,y)\u304c\u3001y\u306b\u306f\u305d\u306e\u30d7\u30ed\u30c3\u30c8\u306e\u6240\u5c5e\u3059\u308b\u30af\u30e9\u30b9\u30bf\u30fc\u756a\u53f7\u304c\u5165\u308b\nX,y=make_blobs(n_samples=150,         # \u30b5\u30f3\u30d7\u30eb\u70b9\u306e\u7dcf\u6570\n               n_features=2,          # \u7279\u5fb4\u91cf\uff08\u6b21\u5143\u6570\uff09\u306e\u6307\u5b9a  default:2 \n               centers=3,             # \u30af\u30e9\u30b9\u30bf\u306e\u500b\u6570\n               cluster_std=0.5,       # \u30af\u30e9\u30b9\u30bf\u5185\u306e\u6a19\u6e96\u504f\u5dee \n               shuffle=True,          # \u30b5\u30f3\u30d7\u30eb\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\n               random_state=0)        # \u4e71\u6570\u751f\u6210\u5668\u306e\u72b6\u614b\u3092\u6307\u5b9a\n\nplt.scatter(X[:,0],X[:,1],c='white',marker='o',s=50)\nplt.grid()\nplt.show()\n```\n\n\n![fig1.png](https://qiita-image-store.s3.amazonaws.com/0/132984/8193ff0d-f096-4a4d-4105-a66ce8c0978e.png)\n\n\n\n- \u30d1\u3063\u3068\u898b\u3067\uff13\u3064\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b  \n- \u4eca\u56de\u306f\u3053\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u8a71\u3092\u9032\u3081\u308b\n\n### K-means\u306e\u5fa9\u7fd2\n\n- \u30af\u30e9\u30b9\u30bf\u5185\u8aa4\u5dee\u5e73\u65b9\u548c\uff08SSE\uff09\u3092\u53cd\u5fa9\u7684\u306b\u6700\u5c0f\u5316\u3059\u308b  \n    - \u5404\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u542b\u307e\u308c\u308b\u30b5\u30f3\u30d7\u30eb\u3068\u305d\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u4e2d\u5fc3\u70b9\uff08\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\uff09\u306e\u5dee\u306e2\u4e57\u548c\u3092\u6700\u5c0f\u5316\u3059\u308b\n\n\n- \u767e\u805e\u306f\u4e00\u898b\u306b\u3057\u304b\u305a  \n    - [\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u5b9a\u756a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u300cK-means\u6cd5\u300d\u3092\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u305f](http://tech.nitoyon.com/ja/blog/2009/04/09/kmeans-visualise/)\n\n### Scikit-learn\u306b\u304a\u3051\u308bKMeans\u306e\u95a2\u6570\n\n- \u4eca\u56de\u306f k-means\u3092\u5b9f\u884c\u3059\u308b\u306e\u306b Scikit-learn\u3092\u5229\u7528\u3057\u305f  \n    - Scikit-learn\u3067\u306f\u3069\u306e\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u3067\u3082\u540c\u3058\u95a2\u6570\u3092\u4f7f\u3046\uff08\u300c\u5185\u5bb9\u300d\u306b\u306fk-means\u5b9f\u884c\u6642\u306e\u5185\u5bb9\u306b\u66f8\u304d\u63db\u3048\u3066\u3042\u308b\uff09\n\n| \u95a2\u6570 | \u5185\u5bb9| \n|:-----------|:------------|\n|fit(X[, y])|\t\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u8a08\u7b97\u3092\u5b9f\u884c\u3059\u308b\u3002  |\n|fit_predict(X[, y])|\t\u5404\u30b5\u30f3\u30d7\u30eb\u306b\u5bfe\u3059\u308b\u3001\u30af\u30e9\u30b9\u30bf\u756a\u53f7\u3092\u6c42\u3081\u308b\u3002  |\n|fit_transform(X[, y])|\t\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u8a08\u7b97\u3092\u884c\u3044\u3001X \u3092\u5206\u6790\u306b\u7528\u3044\u305f\u8ddd\u96e2\u7a7a\u9593\u306b\u5909\u63db\u3057\u3066\u8fd4\u3059\u3002  |\n|get_params([deep])|\t\u8a08\u7b97\u306b\u7528\u3044\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8fd4\u3059\u3002  |\n|predict(X)|\tX \u306e\u30b5\u30f3\u30d7\u30eb\u304c\u5c5e\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u30bf\u756a\u53f7\u3092\u8fd4\u3059  |\n|set_params(**params)\t|\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b  |\n|transform(X[, y])|\tX \u3092\u5206\u6790\u306b\u7528\u3044\u305f\u8ddd\u96e2\u7a7a\u9593\u306b\u5909\u63db\u3057\u3066\u8fd4\u3059\u3002|\n\n\n```python\nfrom sklearn.cluster import KMeans\n\nkm = KMeans(n_clusters=3,            # \u30af\u30e9\u30b9\u30bf\u30fc\u306e\u500b\u6570\n            init='random',           # \u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5024\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u8a2d\u5b9a  default: 'k-means++'\n            n_init=10,               # \u7570\u306a\u308b\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5024\u3092\u7528\u3044\u305fk-means\u306e\u5b9f\u884c\u56de\u6570 default: '10' \u5b9f\u884c\u3057\u305f\u3046\u3061\u3082\u3063\u3068SSE\u5024\u304c\u5c0f\u3055\u3044\u30e2\u30c7\u30eb\u3092\u6700\u7d42\u30e2\u30c7\u30eb\u3068\u3057\u3066\u9078\u629e\n            max_iter=300,            # k-means\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5185\u90e8\u306e\u6700\u5927\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u56de\u6570  default: '300'\n            tol=1e-04,               # \u53ce\u675f\u3068\u5224\u5b9a\u3059\u308b\u305f\u3081\u306e\u76f8\u5bfe\u7684\u306a\u8a31\u5bb9\u8aa4\u5dee default: '1e-04'\n            random_state=0)          # \u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5316\u306b\u7528\u3044\u308b\u4e71\u6570\u767a\u751f\u5668\u306e\u72b6\u614b\n\ny_km = km.fit_predict(X)\n```\n\n### k-means++\n\n- \u30e9\u30f3\u30c0\u30e0\u306b\u8a2d\u7f6e\u3055\u308c\u308b\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u304c\u3082\u3057\u4e92\u3044\u306b\u9055\u3044\u4f4d\u7f6e\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3059\u308b\u3068\u52b9\u7387\u7684\u306b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u304d\u306a\u3044  \n    - \u305d\u3053\u3067k-means++\u3067\u306f\u521d\u671f\u306e\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u3092\u4e92\u3044\u306b\u96e2\u308c\u305f\u4f4d\u7f6e\u306b\u914d\u7f6e\u3059\u308b\u3002\u305d\u308c\u306b\u3088\u308a\u5f93\u6765\u306ek-means\u6cd5\u3088\u308a\u3082\u52b9\u679c\u7684\u306a\u3088\u308a\u4e00\u8cab\u6027\u306e\u3042\u308b\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\n- init = 'k-means++'\u306b\u3059\u308c\u3070\u826f\u3044\uff08\u305f\u3060\u3057\u30c7\u30d5\u30a9\u30eb\u30c8\u3067k-means++\u306b\u306a\u3063\u3066\u3044\u308b\uff09\n\n\u5206\u5272\u3057\u305f\u30af\u30e9\u30b9\u30bf\u30fc\u3092\u8272\u5206\u3051\uff06\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u3092\u63cf\u5199\u3059\u308b\n\n\n```python\nplt.scatter(X[y_km==0,0],         # y_km\uff08\u30af\u30e9\u30b9\u30bf\u30fc\u756a\u53f7\uff09\u304c0\u306e\u6642\u306bX\u306e0\u5217\u76ee\u3092\u62bd\u51fa\n                    X[y_km==0,1], # y_km\uff08\u30af\u30e9\u30b9\u30bf\u30fc\u756a\u53f7\uff09\u304c0\u306e\u6642\u306bX\u306e1\u5217\u76ee\u3092\u62bd\u51fa\n                    s=50,\n                    c='lightgreen',\n                    marker='s',\n                    label='cluster 1')\nplt.scatter(X[y_km==1,0],\n                    X[y_km==1,1],\n                    s=50,\n                    c='orange',\n                    marker='o',\n                    label='cluster 2')\nplt.scatter(X[y_km==2,0],\n                   X[y_km==2,1],\n                    s=50,\n                    c='lightblue',\n                    marker='v',\n                    label='cluster 3')\nplt.scatter(km.cluster_centers_[:,0],   # km.cluster_centers_\u306b\u306f\u5404\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u5ea7\u6a19\u304c\u5165\u3063\u3066\u3044\u308b\n                    km.cluster_centers_[:,1],\n                    s=250,\n                    marker='*',\n                    c='red',\n                    label='centroids')\nplt.legend()\nplt.grid()\nplt.show()\n```\n\n\n![fig2.png](https://qiita-image-store.s3.amazonaws.com/0/132984/ca140b65-e150-4495-ef47-50c7ed76acff.png)\n\n\n### \u30af\u30e9\u30b9\u30bf\u5185\u8aa4\u5dee\u5e73\u65b9\u548c\uff08SSE\uff09\u3078\u306e\u30a2\u30af\u30bb\u30b9\n\n- \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u6027\u80fd\u3092\u6570\u5024\u5316\u3059\u308b\u306b\u306f\u3001\u30af\u30e9\u30b9\u30bf\u5185SSE\u306e\u3088\u3046\u306a\u6307\u6a19\u3092\u7528\u3044\u3066\u3001\u3055\u307e\u3056\u307e\u306ak-means\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u6027\u80fd\u3092\u6bd4\u8f03\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b  \n    - scikit-learn\u3067\u306fk-means\u30e2\u30c7\u30eb\u9069\u5fdc\u5f8c\u306f inertia_\u5c5e\u6027\u3092\u901a\u3058\u3066\u3053\u306e\u5024\u306b\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u308b  \uff08\u30af\u30e9\u30b9\u30bf\u5185SSE\u306e\u3053\u3068\u3092\"\u30af\u30e9\u30b9\u30bf\u306e\u6163\u6027\"cluster inertia \u3068\u3082\u547c\u3076\u3089\u3057\u3044 \uff09  \n    - \u30af\u30e9\u30b9\u30bf\u5185SSE\u5024\u304c\u5c0f\u3055\u3044\u307b\u3069\u300c\u6b6a\u307f\u306e\u306a\u3044\uff08\u30af\u30a2\u30b9\u30bf\u30ea\u30f3\u30b0\u304c\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u308b\uff09\u826f\u3044\u30e2\u30c7\u30eb\u300d\u3068\u8a00\u3048\u308b\n\n\n```python\nprint ('Distortion: %.2f'% km.inertia_)\n```\n\n    Distortion: 72.48\n\n\n# \u30a8\u30eb\u30dc\u30fc\u6cd5\n\u672c\u984c\u306e\u300c\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306e\u691c\u8a0e\u3092\u4ed8\u3051\u308b\u65b9\u6cd5\u300d\u306b\u3064\u3044\u3066\n\n### \u30a8\u30eb\u30dc\u30fc\u6cd5\u3068\u306f\n- \u30af\u30e9\u30b9\u30bf\u3054\u3068\u306eSSE\u5024\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u56f3\uff08\u305d\u308c\u3060\u3051\uff09\n- SSE\u5024\u304c\"\u30d2\u30b8\"\u306e\u3088\u3046\u306b\u30ac\u30af\u30f3\u3068\u66f2\u304c\u3063\u305f\u70b9\uff08SSE\u5024\u306e\u4f4e\u4e0b\u304c\u30b5\u30c1\u308b\u5834\u6240\uff09\u304c\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3068\u307f\u306a\u3059\n\n\n```python\ndistortions = []\n\nfor i  in range(1,11):                # 1~10\u30af\u30e9\u30b9\u30bf\u307e\u3067\u4e00\u6c17\u306b\u8a08\u7b97 \n    km = KMeans(n_clusters=i,\n                init='k-means++',     # k-means++\u6cd5\u306b\u3088\u308a\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u3092\u9078\u629e\n                n_init=10,\n                max_iter=300,\n                random_state=0)\n    km.fit(X)                         # \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u8a08\u7b97\u3092\u5b9f\u884c\n    distortions.append(km.inertia_)   # km.fit\u3059\u308b\u3068km.inertia_\u304c\u5f97\u3089\u308c\u308b\n    \nplt.plot(range(1,11),distortions,marker='o')\nplt.xlabel('Number of clusters')\nplt.ylabel('Distortion')\nplt.show()\n```\n\n\n![fig3.png](https://qiita-image-store.s3.amazonaws.com/0/132984/1e80ba68-16c3-e620-51fc-7e5379a991ad.png)\n\n\n\n- \u3053\u308c\u304c\u30a8\u30eb\u30dc\u30fc\u56f3\n    - \u300c\u30d2\u30b8\u304c\u6298\u308c\u66f2\u304c\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u307f\u3048\u308b\u300d\u304b\u3089\u305d\u3046\u3044\u3046\u547c\u3073\u65b9\u3089\u3057\u3044\n    - \u30af\u30e9\u30b9\u30bf\u30fc\u65703\u3067\u30ac\u30af\u30c3\u3068\u843d\u3061\u3066\u3044\u308b\uff08SSE\u5024\u304c\u30b5\u30c1\u3063\u3066\u3044\u308b\uff09\u306e\u3067\u3001\u300c\u30af\u30e9\u30b9\u30bf\u30fc\u65703\u304c\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u300d\u3068\u5224\u65ad\u3067\u304d\u308b\n\n\n### \u3061\u306a\u307f\u306b\u30fb\u30fb\u30fb\n\n- \u3053\u3053\u3067\u5177\u4f53\u7684\u306a\u56f3\u306a\u3069\u306f\u63b2\u8f09\u3067\u304d\u306a\u3044\u304c\u3001\u73fe\u5b9f\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30a8\u30eb\u30dc\u30fc\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\u3068\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306a\u300c\u7dba\u9e97\u306a\u30d2\u30b8\u300d\u306f\u306a\u304b\u306a\u304b\u73fe\u308c\u306a\u3044\n    - \u4f59\u7a0b\u660e\u78ba\u306b\u5206\u304b\u308c\u305f\u30af\u30e9\u30b9\u30bf\u30fc\u30c7\u30fc\u30bf\u3067\u306a\u3044\u9650\u308a\u3001\u30a8\u30eb\u30dc\u30fc\u56f3\u306f\u300c\u306a\u3060\u3089\u304b\u306a\u66f2\u7dda\u300d\u3092\u63cf\u304f\n        - \u300c\u30a8\u30eb\u30dc\u30fc\u56f3\u3092\u66f8\u304f\u3068\u7c21\u5358\u306b\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u691c\u8a0e\u304c\u3064\u304f\uff01\u300d\u3068\u3044\u3046\u3053\u3068\u306f\u307b\u307c\u7121\u3044\uff08\u73fe\u5b9f\u306f\u30ad\u30d3\u30b7\u30a4\uff09\n\n# \u30b7\u30eb\u30a8\u30c3\u30c8\u5206\u6790 Silhouette analysis\n\n### \u30b7\u30eb\u30a8\u30c3\u30c8\u5206\u6790\u3068\u306f\n- \u30af\u30e9\u30b9\u30bf\u5185\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u3069\u306e\u7a0b\u5ea6\u5bc6\u306b\u30b0\u30eb\u30fc\u30d7\u3055\u308c\u3066\u3044\u308b\u304b\uff08\u51dd\u96c6\u5ea6\uff09\u306e\u76ee\u5b89\u3068\u306a\u308b\u30b0\u30e9\u30d5\u3092\u53ef\u8996\u5316\uff08=\u30d1\u30c3\u3068\u898b\u3067\u30af\u30e9\u30b9\u30bf\u30fc\u304c\u4e0a\u624b\u304f\u3067\u304d\u3066\u3044\u308b\u304b\u306a\u3093\u3068\u306a\u304f\u308f\u304b\u308b\uff09\n- \uff11\u3064\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u304c\u96a3\u63a5\u3059\u308b\u30af\u30e9\u30b9\u30bf\u30fc\u3068\u3069\u308c\u304f\u3089\u3044\u96e2\u308c\u3066\u3044\u308b\u304b\u3092\u53ef\u8996\u5316\u3059\u308b \n\n\u307e\u305f\u3001    \n\n- \u9069\u5207\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u304c\u3069\u308c\u304f\u3089\u3044\u304b\u3092\u8abf\u3079\u308b\u305f\u3081\u306b\u3082\u4f7f\u3048\u308b\n- \u30b7\u30eb\u30a8\u30c3\u30c8\u5206\u6790\u306fK-measn\u6cd5\u4ee5\u5916\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3082\u9069\u5fdc\u3067\u304d\u308b\n\n### \u30b7\u30eb\u30a8\u30c3\u30c8\u5206\u6790\u306e\u30ed\u30b8\u30c3\u30af\n\n1. \u30b5\u30f3\u30d7\u30eb$\\text{x}^{(i)}$\u3068\u540c\u3058\u30af\u30e9\u30b9\u30bf\u5185\u306e\u305d\u306e\u4ed6\u3059\u3079\u3066\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u306e\u5e73\u5747\u8ddd\u96e2\u3068\u3057\u3066\u3001\u30af\u30e9\u30b9\u30bf\u306e\u51dd\u96c6\u5ea6$\\text{a}^{(i)}$\u3092\u8a08\u7b97\u3059\u308b\u3002\n2. \u30b5\u30f3\u30d7\u30eb$\\text{x}^{(i)}$\u3068\u6700\u3082\u8fd1\u304f\u306b\u3042\u308b\u30af\u30e9\u30b9\u30bf\u5185\u306e\u3059\u3079\u3066\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u306e\u5e73\u5747\u8ddd\u96e2\u3068\u3057\u3066\u3001\u305d\u306e\u6b21\u306b\u8fd1\u3044\u30af\u30e9\u30b9\u30bf\u304b\u3089\u306e\u4e56\u96e2\u5ea6$\\text{b}^{(i)}$\u3092\u8a08\u7b97\u3059\u308b\n3. \u30af\u30e9\u30b9\u30bf\u306e\u51dd\u96c6\u5ea6\u3068\u4e56\u96e2\u5ea6\u306e\u5dee\u3092\u3001\u305d\u308c\u3089\u306e\u3046\u3061\u5927\u304d\u3044\u65b9\u306e\u5024\u3067\u5272\u308a\u3001\u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570$\\text{s}^{(i)}$\u3092\u8a08\u7b97\u3059\u308b\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-08-08 0.46.13.png](https://qiita-image-store.s3.amazonaws.com/0/132984/b8b94c4b-4fcc-95ea-d997-a5e1b138f82d.png)\n\n(\u5f15\u7528: \u66f8\u7c4d Python\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 P307)\n\n### \u518d\u5ea6 k-means\u3092\u5b9f\u884c\n\n\n```python\nkm = KMeans(n_clusters=3,            # \u30af\u30e9\u30b9\u30bf\u30fc\u306e\u500b\u6570\n            init='k-means++',        # \u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5024\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u8a2d\u5b9a\n            n_init=10,               # \u7570\u306a\u308b\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5024\u3092\u7528\u3044\u305fk-means\u3042\u308b\u30b4\u30eam\u30ba\u30e0\u306e\u5b9f\u884c\u56de\u6570\n            max_iter=300,            # k-means\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5185\u90e8\u306e\u6700\u5927\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u56de\u6570\n            tol=1e-04,               # \u53ce\u675f\u3068\u5224\u5b9a\u3059\u308b\u305f\u3081\u306e\u76f8\u5bfe\u7684\u306a\u8a31\u5bb9\u8aa4\u5dee\n            random_state=0)          # \u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5316\u306b\u7528\u3044\u308b\u4e71\u6570\u767a\u751f\u5668\u306e\u72b6\u614b\ny_km = km.fit_predict(X)\n```\n\n### \u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u3092\u66f8\u304f\n\n\n```python\nfrom sklearn.metrics import silhouette_samples\nfrom matplotlib import cm\n\ncluster_labels = np.unique(y_km)       # y_km\u306e\u8981\u7d20\u306e\u4e2d\u3067\u91cd\u8907\u3092\u7121\u304f\u3059\nn_clusters=cluster_labels.shape[0]     # \u914d\u5217\u306e\u9577\u3055\u3092\u8fd4\u3059\u3002\u3064\u307e\u308a\u3053\u3053\u3067\u306f n_clusters\u3067\u6307\u5b9a\u3057\u305f3\u3068\u306a\u308b\n\n# \u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570\u3092\u8a08\u7b97\nsilhouette_vals = silhouette_samples(X,y_km,metric='euclidean')  # \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf, \u30af\u30e9\u30b9\u30bf\u30fc\u756a\u53f7\u3001\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u3067\u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570\u8a08\u7b97\ny_ax_lower, y_ax_upper= 0,0\nyticks = []\n\nfor i,c in enumerate(cluster_labels):\n        c_silhouette_vals = silhouette_vals[y_km==c]      # cluster_labels\u306b\u306f 0,1,2\u304c\u5165\u3063\u3066\u3044\u308b\uff08enumerate\u306a\u306e\u3067i\u306b\u30820,1,2\u304c\u5165\u3063\u3066\u308b\uff08\u305f\u307e\u305f\u307e\uff09\uff09\n        c_silhouette_vals.sort()\n        y_ax_upper += len(c_silhouette_vals)              # \u30b5\u30f3\u30d7\u30eb\u306e\u500b\u6570\u3092\u30af\u30e9\u30b9\u30bf\u30fc\u3054\u3068\u306b\u8db3\u3057\u4e0a\u3052\u3066y\u8ef8\u306e\u6700\u5927\u5024\u3092\u6c7a\u5b9a\n        color = cm.jet(float(i)/n_clusters)               # \u8272\u306e\u5024\u3092\u4f5c\u308b\n        plt.barh(range(y_ax_lower,y_ax_upper),            # \u6c34\u5e73\u306e\u68d2\u30b0\u30e9\u30d5\u306e\u3092\u63cf\u753b\uff08\u5e95\u8fba\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\uff09\n                         c_silhouette_vals,               # \u68d2\u306e\u5e45\uff081\u30b5\u30f3\u30d7\u30eb\u3092\u8868\u3059\uff09\n                         height=1.0,                      # \u68d2\u306e\u9ad8\u3055\n                         edgecolor='none',                # \u68d2\u306e\u7aef\u306e\u8272\n                         color=color)                     # \u68d2\u306e\u8272\n        yticks.append((y_ax_lower+y_ax_upper)/2)          # \u30af\u30e9\u30b9\u30bf\u30e9\u30d9\u30eb\u306e\u8868\u793a\u4f4d\u7f6e\u3092\u8ffd\u52a0\n        y_ax_lower += len(c_silhouette_vals)              # \u5e95\u8fba\u306e\u5024\u306b\u68d2\u306e\u5e45\u3092\u8ffd\u52a0\n        \nsilhouette_avg = np.mean(silhouette_vals)                 # \u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570\u306e\u5e73\u5747\u5024\nplt.axvline(silhouette_avg,color=\"red\",linestyle=\"--\")    # \u4fc2\u6570\u306e\u5e73\u5747\u5024\u306b\u7834\u7dda\u3092\u5f15\u304f \nplt.yticks(yticks,cluster_labels + 1)                     # \u30af\u30e9\u30b9\u30bf\u30ec\u30d9\u30eb\u3092\u8868\u793a\nplt.ylabel('Cluster')\nplt.xlabel('silhouette coefficient')\nplt.show()\n```\n\n\n![fig4.png](https://qiita-image-store.s3.amazonaws.com/0/132984/cdf76273-b645-3945-7e61-5fe27f7f5705.png)\n\n\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u308f\u304b\u308b\u3088\u3046\u306b\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u306f\u3059\u3079\u3066\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u3064\u3044\u3066\u6a2a\u5411\u304d\u68d2\u30b0\u30e9\u30d5\uff08plt.barh\uff09\u3092\u66f8\u3044\u3066\u3044\u308b\u3060\u3051\n\n    \n### \u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u306e\u898b\u65b9\n\n- \u30af\u30e9\u30b9\u30bf\u30fc\u306e\u300c\u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570 silhouette coefficient \u300d\u304c 1\u306b\u8fd1\u3044\u307b\u3069\u3001\u305d\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u306f\u4ed6\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u304b\u3089\u9060\u304f\u96e2\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u8868\u3059\uff08\u4fc2\u6570\u306f -1 ~ 1\u306e\u9593\u3092\u3068\u308b\uff09\n    - 0\u306b\u8fd1\u3044\u307b\u3069\u96a3\u63a5\u3059\u308b\u30af\u30e9\u30b9\u30bf\u30fc\u3068\u63a5\u8fd1\u3057\u3066\u3044\u308b or \u96a3\u63a5\u3059\u308b\u30af\u30e9\u30b9\u30bf\u30fc\u3068\u91cd\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u8868\u3059\uff08\u4e0a\u624b\u304f\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u5206\u96e2\u304c\u3067\u304d\u3066\u3044\u306a\u3044\u72b6\u614b\uff09\n    - \u4fc2\u6570\u304c\u30de\u30a4\u30ca\u30b9\u5024\u3060\u3068\u30af\u30e9\u30b9\u30bf\u30fc\u5316\u3055\u308c\u305f\u30b5\u30f3\u30d7\u30eb\u306f\u9593\u9055\u3063\u305f\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\n    \n- \u30b7\u30eb\u30a8\u30c3\u30c8\u306e\"\u539a\u3055 thickness\"\u306f\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u30b5\u30a4\u30ba\uff08\u6240\u5c5e\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u6570\uff09\u3092\u8868\u3059\n    - \u9069\u5207\u306b\u30af\u30e9\u30b9\u30bf\u30fc\u5206\u96e2\u3067\u304d\u3066\u3044\u308c\u3070\u5404\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u306e\"\u539a\u3055\"\u306f\u5747\u7b49\u306b\u8fd1\u304f\u306a\u308b\u3089\u3057\u3044\n\n![\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u898b\u65b9.png](https://qiita-image-store.s3.amazonaws.com/0/132984/aeb679e5-2d33-be8d-ac99-7fa7edaeb224.png)\n\n\u53c2\u8003: [Selecting the number of clusters with silhouette analysis on KMeans clustering](http://scikit-learn.org/stable/auto_examples/cluster/plot_kmeans_silhouette_analysis.html#example-cluster-plot-kmeans-silhouette-analysis-py])\n\n\n### \u30c0\u30e1\u306a\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u306e\u4f8b\n\n\u672c\u5f53\u306f\u30af\u30e9\u30b9\u30bf\u30fc\u304c3\u3064\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u306e\u306b\u30012\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u5206\u96e2\u3055\u305b\u3088\u3046\u3068\u3057\u305f\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u69d8\u306a\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u3068\u306a\u308b\n\n\n```python\nkm = KMeans(n_clusters=2,            # \u30af\u30e9\u30b9\u30bf\u30fc\u306e\u500b\u6570\n            init='k-means++',        # \u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5024\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u8a2d\u5b9a\n            n_init=10,               # \u7570\u306a\u308b\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5024\u3092\u7528\u3044\u305fk-means\u3042\u308b\u30b4\u30eam\u30ba\u30e0\u306e\u5b9f\u884c\u56de\u6570\n            max_iter=300,            # k-means\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5185\u90e8\u306e\u6700\u5927\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u56de\u6570\n            tol=1e-04,               # \u53ce\u675f\u3068\u5224\u5b9a\u3059\u308b\u305f\u3081\u306e\u76f8\u5bfe\u7684\u306a\u8a31\u5bb9\u8aa4\u5dee\n            random_state=0)          # \u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5316\u306b\u7528\u3044\u308b\u4e71\u6570\u767a\u751f\u5668\u306e\u72b6\u614b\ny_km = km.fit_predict(X)\n\nplt.scatter(X[y_km==0,0],\n                   X[y_km==0,1],\n                    s=50,\n                    c='lightgreen',\n                    marker='s',\n                    label='cluster 1')\nplt.scatter(X[y_km==1,0],\n                   X[y_km==1,1],\n                    s=50,\n                    c='orange',\n                    marker='o',\n                    label='cluster 2')\nplt.scatter(km.cluster_centers_[:,0],\n                    km.cluster_centers_[:,1],\n                    s=250,\n                    marker='*',\n                    c='red',\n                    label='centroids')\nplt.legend()\nplt.grid()\nplt.show()\n```\n\n\n![fig6.png](https://qiita-image-store.s3.amazonaws.com/0/132984/6c03e094-5913-49e1-47a9-082393b449d3.png)\n\n\n\u672c\u5f53\u306f3\u30af\u30e9\u30b9\u30bf\u30fc\u5b58\u5728\u3059\u308b\u306e\u306b2\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u5206\u3051\u3066\u307f\u305f\u30c0\u30e1\u306a\u4f8b\u3002\u898b\u4e8b\u306b\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u304c\u304a\u304b\u3057\u306a\u4f4d\u7f6e\u306b\u3044\u308b\u3002\n\n\u305d\u3057\u3066\u305d\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u304c\u4ee5\u4e0b\n\n\n```python\ncluster_labels = np.unique(y_km)       # y_km\u306e\u8981\u7d20\u306e\u4e2d\u3067\u91cd\u8907\u3092\u7121\u304f\u3059\nn_clusters=cluster_labels.shape[0]     # \u914d\u5217\u306e\u9577\u3055\u3092\u8fd4\u3059\n\n# \u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570\u3092\u8a08\u7b97\nsilhouette_vals = silhouette_samples(X,y_km,metric='euclidean')\ny_ax_lower, y_ax_upper= 0,0\nyticks = []\n\nfor i,c in enumerate(cluster_labels):\n        c_silhouette_vals = silhouette_vals[y_km==c]\n        c_silhouette_vals.sort()\n        y_ax_upper += len(c_silhouette_vals)\n        color = cm.jet(float(i)/n_clusters)               # \u8272\u306e\u5024\u3092\u30bb\u30c3\u30c8\n        plt.barh(range(y_ax_lower,y_ax_upper),            # \u6c34\u5e73\u306e\u68d2\u30b0\u30e9\u30d5\u306e\u3092\u63cf\u753b\uff08\u5e95\u8fba\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\uff09\n                         c_silhouette_vals,               # \u68d2\u306e\u5e45 \n                         height=1.0,                      # \u68d2\u306e\u9ad8\u3055\n                         edgecolor='none',                # \u68d2\u306e\u7aef\u306e\u8272\n                         color=color)                     # \u68d2\u306e\u8272\n        yticks.append((y_ax_lower+y_ax_upper)/2)          # \u30af\u30e9\u30b9\u30bf\u30e9\u30d9\u30eb\u306e\u4fdd\u6cb9\u6b21\u4f4d\u7f6e\u3092\u8ffd\u52a0\n        y_ax_lower += len(c_silhouette_vals)              # \u5e95\u8fba\u306e\u5024\u306b\u68d2\u306e\u5e45\u3092\u8ffd\u52a0\n        \nsilhouette_avg = np.mean(silhouette_vals)                 # \u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570\u306e\u5e73\u5747\u5024\nplt.axvline(silhouette_avg,color=\"red\",linestyle=\"--\")    # \u4fc2\u6570\u306e\u5e73\u5747\u5024\u306b\u7834\u7dda\u3092\u5f15\u304f \nplt.yticks(yticks,cluster_labels + 1)                     # \u30af\u30e9\u30b9\u30bf\u30ec\u30d9\u30eb\u3092\u8868\u793a\nplt.ylabel('Cluster')\nplt.xlabel('silhouette cofficient')\nplt.show()\n```\n\n\n![fig7.png](https://qiita-image-store.s3.amazonaws.com/0/132984/13578473-54fb-a5a1-9261-fa2c35b0688b.png)\n\n\n- \u30af\u30e9\u30b9\u30bf\u30fc\uff12\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u304c\u539a\u3044\uff08=\u30af\u30e9\u30b9\u30bf\u30fc2\u306e\u65b9\u306b\u30b5\u30f3\u30d7\u30eb\u304c\u5bc4\u308a\u3059\u304e\u3066\u3044\u308b\uff09\n- \u30af\u30e9\u30b9\u30bf\u30fc1,2\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570\u5e73\u5747\u5024\uff08\u8d64\u7834\u7dda\uff09\u3092\u30af\u30e9\u30b9\u30bf\u30fc2\u306e\u307b\u3068\u3093\u3069\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u4e0b\u56de\u3063\u3066\u3044\u308b\n\n### \u300c\u3046\u30fc\u3093\u3001\u307e\u3060\u3044\u307e\u3044\u3061\u30d4\u30f3\u3068\u304d\u3066\u3044\u306a\u3044\u306e\u3060\u3051\u3069...\u300d\u3068\u3044\u3046\u4eba\u306f\n\n- \u30b7\u30eb\u30a8\u30c3\u30c8\u5206\u6790\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u306f[scikit-learn\u516c\u5f0f\u306e\u30da\u30fc\u30b8](http://scikit-learn.org/stable/auto_examples/cluster/plot_kmeans_silhouette_analysis.html#example-cluster-plot-kmeans-silhouette-analysis-py])\u304c\u4e00\u756a\u308f\u304b\u308a\u6613\u3044  \n    - \u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u5909\u3048\u305f\u6642\u306b\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u304c\u3069\u306e\u3088\u3046\u306b\u5909\u308f\u308b\u304b\u304c\u8ffd\u3044\u3084\u3059\u3044\n    \n    \n- \u4ee5\u4e0b\u3001[scikit-learn\u516c\u5f0f\u306e\u30da\u30fc\u30b8](http://scikit-learn.org/stable/auto_examples/cluster/plot_kmeans_silhouette_analysis.html#example-cluster-plot-kmeans-silhouette-analysis-py])\u3092\u4e38\u30b3\u30d4\n    - \u672c\u5f53\u306f4\u3064\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u304c\u3001\u305d\u308c\u3092k-means\u30672~4\u306b\u5206\u96e2\u3057\u305f\u6642\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u306e\u9055\u3044\u304c\u53ef\u8996\u5316\u3055\u308c\u3066\u3044\u308b\uff084\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u304c\u3042\u308b\u3079\u304d\u6b63\u3057\u3044\u59ff\u3067\u30012,3,5\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u306f\u6b6a\u306a\u30b7\u30eb\u30a8\u30c3\u30c8\u3001\u3068\u3044\u3046\u3053\u3068\uff09\n\n\n```python\nfrom __future__ import print_function\n\nfrom sklearn.datasets import make_blobs\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_samples, silhouette_score\n\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np\n\nprint(__doc__)\n\n# Generating the sample data from make_blobs\n# This particular setting has one distict cluster and 3 clusters placed close\n# together.\nX, y = make_blobs(n_samples=500,\n                  n_features=2,\n                  centers=4,\n                  cluster_std=1,\n                  center_box=(-10.0, 10.0),\n                  shuffle=True,\n                  random_state=1)  # For reproducibility\n\nrange_n_clusters = [2, 3, 4, 5, 6]\n\nfor n_clusters in range_n_clusters:\n    # Create a subplot with 1 row and 2 columns\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    fig.set_size_inches(18, 7)\n\n    # The 1st subplot is the silhouette plot\n    # The silhouette coefficient can range from -1, 1 but in this example all\n    # lie within [-0.1, 1]\n    ax1.set_xlim([-0.1, 1])\n    # The (n_clusters+1)*10 is for inserting blank space between silhouette\n    # plots of individual clusters, to demarcate them clearly.\n    ax1.set_ylim([0, len(X) + (n_clusters + 1) * 10])\n\n    # Initialize the clusterer with n_clusters value and a random generator\n    # seed of 10 for reproducibility.\n    clusterer = KMeans(n_clusters=n_clusters, random_state=10)\n    cluster_labels = clusterer.fit_predict(X)\n\n    # The silhouette_score gives the average value for all the samples.\n    # This gives a perspective into the density and separation of the formed\n    # clusters\n    silhouette_avg = silhouette_score(X, cluster_labels)\n    print(\"For n_clusters =\", n_clusters,\n          \"The average silhouette_score is :\", silhouette_avg)\n\n    # Compute the silhouette scores for each sample\n    sample_silhouette_values = silhouette_samples(X, cluster_labels)\n\n    y_lower = 10\n    for i in range(n_clusters):\n        # Aggregate the silhouette scores for samples belonging to\n        # cluster i, and sort them\n        ith_cluster_silhouette_values = \\\n            sample_silhouette_values[cluster_labels == i]\n\n        ith_cluster_silhouette_values.sort()\n\n        size_cluster_i = ith_cluster_silhouette_values.shape[0]\n        y_upper = y_lower + size_cluster_i\n\n        color = cm.spectral(float(i) / n_clusters)\n        ax1.fill_betweenx(np.arange(y_lower, y_upper),\n                          0, ith_cluster_silhouette_values,\n                          facecolor=color, edgecolor=color, alpha=0.7)\n\n        # Label the silhouette plots with their cluster numbers at the middle\n        ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n\n        # Compute the new y_lower for next plot\n        y_lower = y_upper + 10  # 10 for the 0 samples\n\n    ax1.set_title(\"The silhouette plot for the various clusters.\")\n    ax1.set_xlabel(\"The silhouette coefficient values\")\n    ax1.set_ylabel(\"Cluster label\")\n\n    # The vertical line for average silhoutte score of all the values\n    ax1.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n\n    ax1.set_yticks([])  # Clear the yaxis labels / ticks\n    ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n\n    # 2nd Plot showing the actual clusters formed\n    colors = cm.spectral(cluster_labels.astype(float) / n_clusters)\n    ax2.scatter(X[:, 0], X[:, 1], marker='.', s=30, lw=0, alpha=0.7,\n                c=colors)\n\n    # Labeling the clusters\n    centers = clusterer.cluster_centers_\n    # Draw white circles at cluster centers\n    ax2.scatter(centers[:, 0], centers[:, 1],\n                marker='o', c=\"white\", alpha=1, s=200)\n\n    for i, c in enumerate(centers):\n        ax2.scatter(c[0], c[1], marker='$%d$' % i, alpha=1, s=50)\n\n    ax2.set_title(\"The visualization of the clustered data.\")\n    ax2.set_xlabel(\"Feature space for the 1st feature\")\n    ax2.set_ylabel(\"Feature space for the 2nd feature\")\n\n    plt.suptitle((\"Silhouette analysis for KMeans clustering on sample data \"\n                  \"with n_clusters = %d\" % n_clusters),\n                 fontsize=14, fontweight='bold')\n\n    plt.show()\n```\n\n    Automatically created module for IPython interactive environment\n    For n_clusters = 2 The average silhouette_score is : 0.704978749608\n\n\n![fig8.png](https://qiita-image-store.s3.amazonaws.com/0/132984/6f19f658-4629-4971-c099-a9bb34042da1.png)\n\n\n\n    For n_clusters = 3 The average silhouette_score is : 0.588200401213\n\n\n![fig9.png](https://qiita-image-store.s3.amazonaws.com/0/132984/1f0c5ad8-3975-3797-65b8-27ee652dbd93.png)\n\n\n\n\n    For n_clusters = 4 The average silhouette_score is : 0.650518663273\n\n\n\n![fig10.png](https://qiita-image-store.s3.amazonaws.com/0/132984/1a2133ae-fa2d-7818-6b48-700f909136ca.png)\n\n\n\n    For n_clusters = 5 The average silhouette_score is : 0.563764690262\n\n\n![fig11.png](https://qiita-image-store.s3.amazonaws.com/0/132984/fd387a75-1c17-0e64-af5a-4f4b6eb73667.png)\n\n\n\n\n    For n_clusters = 6 The average silhouette_score is : 0.450466629437\n\n\n\n![fig12.png](https://qiita-image-store.s3.amazonaws.com/0/132984/f2200502-1ccf-d0a1-a86c-c3919036b46e.png)\n\n\n### \u3061\u306a\u307f\u306b\u30fb\u30fb\u30fb\n\n- \u8a00\u3044\u305f\u3044\u3053\u3068\u306f\u30a8\u30eb\u30dc\u30fc\u56f3\u306e\u6642\u3068\u540c\u3058\u3060\uff01\uff01\uff01\n\n# \u307e\u3068\u3081\n\n- \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u898b\u7a4d\u3082\u308b\u6642\u306e\u53c2\u8003\u3068\u306a\u308b\u624b\u6cd5\u3068\u3057\u3066\u300c\u30a8\u30eb\u30dc\u30fc\u56f3\u300d\u3068\u300c\u30b7\u30eb\u30a8\u30c3\u30c8\u5206\u6790\u300d\u3092\u7d39\u4ecb\u3057\u305f\n    - \u305f\u3060\u3057\u3001\u4e8c\u3064\u306e\u624b\u6cd5\u3068\u3082\u3001\u300c\u3053\u308c\u3067\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u304c\u308f\u304b\u308b\uff01\uff01\uff01\u300d\u3068\u3044\u3046\u3082\u306e\u3067\u306f\u306a\u3044\n    \n- \u7d50\u5c40\u3001\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u660e\u78ba\u306b\u77e5\u308b\u304a\u624b\u8efd\u306a\u65b9\u6cd5\u306f\u7121\u3044\u304c\u3001\u300c\u306a\u305c\u3053\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306b\u3057\u305f\u306e\u304b\u300d\u3092\u8aac\u660e\u3059\u308b\u3068\u304d\u306e\u6750\u6599\u306b\u306f\u306a\u308b\uff08\u306a\u3063\u3066\u307b\u3057\u3044\uff09\n\n# \u53c2\u8003\n\n\u53c2\u8003\u3068\u3044\u3046\u304b\u3001\u63b2\u8f09\u3057\u305f\u30b3\u30fc\u30c9\u306f\u307b\u307c\u4ee5\u4e0b\u306e\u5199\u7d4c\uff08\uff0b\u8ffd\u52a0\u89e3\u8aac\u30fb\u4e0d\u660e\u77ad\u306a\u7b87\u6240\u306e\u88dc\u8db3\uff09\n\n- \u66f8\u7c4d [Python \u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0](https://www.amazon.co.jp/dp/B01HGIPIAK/) \uff08\u3059\u3054\u304f\u826f\u3044\u672c\u3060\u3068\u601d\u3044\u307e\u3059\uff01\u5c11\u3057\u304a\u9ad8\u3044\u3067\u3059\u304c\u307e\u3058\u3081\u306b\u6a5f\u68b0\u5b66\u7fd2\u52c9\u5f37\u3057\u305f\u3044\u4eba\u306b\u306f\u30aa\u30b9\u30b9\u30e1\uff09\n- \u4e0a\u8a18\u306e\u672c\u306e\u539f\u672c\u8457\u8005Sebastian Raschka\u6c0f\u306e[github\u30da\u30fc\u30b8](https://github.com/rasbt/python-machine-learning-book/blob/master/code/ch11/ch11.ipynb)\n- [Selecting the number of clusters with silhouette analysis on KMeans clustering](http://scikit-learn.org/stable/auto_examples/cluster/plot_kmeans_silhouette_analysis.html#example-cluster-plot-kmeans-silhouette-analysis-py)\n"}