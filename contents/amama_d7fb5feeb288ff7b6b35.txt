{"context": " More than 1 year has passed since last update.\n\n1\u65e5\u76ee\nImplementing functional languages: a tutorial\u3092\u8aad\u3093\u3067\u91cd\u8981\u306a\u6240\u306e\u30e1\u30e2\u3092\u3059\u308b.\n\u30d1\u30fc\u30b5\u304c\u3067\u304d\u305f(Haskell)\n\n1.1\nCore Program\u306fsupercombinator difinitions\u3067\u69cb\u6210\u3055\u308c\u308b.\n\u5f15\u6570\u304c\u306a\u3044\u3082\u306e\u306fconstant applicative forms\u3068\u3044\u3046.\nlet\u2026in\u2026\u5f0f\u3068letrec\u2026in\u2026\u5f0f\u304c\u3042\u308a,\u5c40\u6240\u5b9a\u7fa9\u304c\u3067\u304d\u308b.\nlet\u5f0f\u306fletrec\u3088\u308a\u3082\u7c21\u5358.\n\u675f\u7e1b\u3059\u308b\u3082\u306e\u306f\u7c21\u5358\u306a\u5909\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044.\nlet\u5f0f\u306e\u5024\u306fin\u2026\u306e\u90e8\u5206.\nlambda\u5f0f\u3082\u3042\u308b.\n\u30e9\u30e0\u30c0\u5f0f\u3092\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306esupercombinator difinition\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d,\u30e9\u30e0\u30c0\u62bd\u8c61\u3068\u547c\u3076.\nstructured types,\u3059\u306a\u308f\u3061\u69cb\u9020\u5316\u3055\u308c\u305f\u578b(\u69cb\u9020\u4f53)\u306falgebraic data types,\u3059\u306a\u308f\u3061\u4ee3\u6570\u7684\u30c7\u30fc\u30bf\u578b\u3068\u547c\u3076.\n\u3053\u306e\u578b\u306fA|B\u306e\u578b\u3092\u6301\u3064,\u307f\u305f\u3044\u306a.\ntree * ::= Leaf * | Branch (tree *) (tree *)\n\n(Mirranda\u3067\u306f)\u4ee3\u6570\u7684\u30c7\u30fc\u30bf\u578b\u306f\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u306b\u4f7f\u3048\u308b.\n\u7c21\u5358\u306a\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3053\u308c\u3092\u4f55\u3068\u304b\u3059\u308b.\ncase\u5f0f\u306b\u843d\u3068\u3059.\nPack{tag, arity}\u3092\u4f7f\u3063\u3066\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u8868\u73fe\u3059\u308b.\ntag\u306f\u5b9f\u969b\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf,arity\u306f\u5f15\u6570\u306e\u6570.\nBranch (Leaf 3) (Leaf 4)\u3092Pack{7,2} (Pack{6,1} 3) (Pack{6,1} 4)\u3068\u304b\u304f.\u9762\u5012!\n\u3088\u304f\u308f\u304b\u3089\u306a\u3044\n\nThe tag is required so that objects built with different constructors can be distinguished from one\nanother. In a well-typed program, objects of different type will never need to be distinguished\nat run-time, so tags only need to be unique within a data type. Hence, we can start the tag at\n1 afresh for each new data type, giving the following representation:\n\nC\u306eenum\u307f\u305f\u3044\u306a\u3082\u306e?\ncase\u5f0f\nisRed c = case c of\n  <1> -> True ;\n  <2> -> False ;\n  <3> -> False\ndepth t = case t of\n  <1> n -> 0 ;\n  <2> t1 t2 -> 1 + max (depth t1) (depth t2)\n\ncase\u5f0f\u306e\u6570\u5b57\u306fpack\u3067\u4f5c\u3063\u305ftag\u306e\u6570\u5b57\u3060\u3051\u3089\u3057\u3044.\n\n1.2\n\u6f14\u7b97\u5b50\u306e\u30c6\u30fc\u30d6\u30eb\n\n\n\n\u512a\u5148\u9806\u4f4d\n\u7d50\u5408\u6027\n\u6f14\u7b97\u5b50\n\n\n\n\n6\n\u5de6\n\u9069\u7528\n\n\n5\n\u53f3\n*\n\n\n\n\u306a\u3057\n/\n\n\n4\n\u53f3\n+\n\n\n\n\u306a\u3057\n-\n\n\n3\n\u306a\u3057\n== \u02dc= > >= < <=\n\n\n2\n\u53f3\n&\n\n\n1\n\u53f3\n\\\n\n\n\n\u7c21\u5358\u306e\u305f\u3081\u306b,x/y/z\u306a\u3093\u3066\u8868\u8a18\u306f\u3067\u304d\u306a\u3044.\u7d50\u5408\u6027\u304c\u300c\u306a\u3057\u300d\u306e\u6f14\u7b97\u5b50\u306f\u5168\u90e8\u305d\u3046\u3060\u3068\u601d\u3046.\n\u5358\u9805-(\u30de\u30a4\u30ca\u30b9)\u3084\u5358\u9805!(\u5426\u5b9a)\u306a\u3093\u3066\u3082\u306e\u306f\u306a\u3044.\n\n1.3\nCore Program\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u305f\u3081\u306bCore Program\u7528\u306e\u30c7\u30fc\u30bf\u578b\u3092\u4f5c\u308b.\u3084\u3063\u3068\u305d\u308c\u3063\u307d\u304f\u306a\u3063\u3066\u304d\u305f!\nMiranda\u306a\u3093\u3066\u4f7f\u308f\u306a\u3044\u306e\u3067,C(\u3068\u3067\u304d\u308c\u3070Scheme\u3067\u3082)\u3067\u66f8\u304f.\nMiranda\u306e\u6587\u6cd5\u306a\u3093\u3066\u77e5\u3089\u306a\u3044\u306e\u3067,\u30b3\u30fc\u30c9\u306e\u96f0\u56f2\u6c17\u3067\u305d\u308c\u3063\u307d\u304f\u66f8\u304f\u306e\u3067,\u3044\u3064\u306e\u9593\u306b\u304b\u5909\u308f\u3063\u3066\u308b\u304b\u3082.\n\n\u8a00\u8a9e\u306fMiranda\nmodule Language where\nimport Utils\ndata Expr a\n   = EVar Name -- Variables\n   | ENum Int -- Numbers\n   | EConstr Int Int -- Constructor tag arity\n   | EAp (Expr a) (Expr a) -- Applications\n   | ELet -- Let(rec) expressions\n   IsRec -- boolean with True = recursive,\n   [(a, Expr a)] -- Definitions\n   (Expr a) -- Body of let(rec)\n   | ECase -- Case expression\n   (Expr a) -- Expression to scrutinise\n   [Alter a] -- Alternatives\n   | ELam [a] (Expr a) -- Lambda abstractions\n    deriving (Text)\n\n\n\nc11\n#include <stdalign.h>\n\n/*\n|~~~|num|\n0:reserved\n1:ENum\n2:EConstr\n3:EAp\n4:ELet\n5:ELetrec\n6:Ecase\n7:ELam\n8:EVar\n9~15:reserved\n*/\n\nstruct {\n    alignas(16) void *car;\n    alignas(16) void *cdr;\n} typedef Expr;\n\n\n\n17\u30da\u30fc\u30b8\u307e\u3067\u9032\u3093\u3060\n# 1\u65e5\u76ee\n[Implementing functional languages: a tutorial](https://www.google.com.au/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0ahUKEwiCltrpo43LAhXEFZQKHVKDDRIQFgggMAA&url=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fsimonpj%2FPapers%2Fpj-lester-book%2F&usg=AFQjCNF5yFcGU5LUtS2BCmPHhZ--2UY8oQ&bvm=bv.114733917,d.dGo)\u3092\u8aad\u3093\u3067\u91cd\u8981\u306a\u6240\u306e\u30e1\u30e2\u3092\u3059\u308b.\n[\u30d1\u30fc\u30b5\u304c\u3067\u304d\u305f(Haskell)](http://qiita.com/amama/items/406aab20f5a82fbbeeb0)\n\n## 1.1\nCore Program\u306f_supercombinator difinitions_\u3067\u69cb\u6210\u3055\u308c\u308b.\n\u5f15\u6570\u304c\u306a\u3044\u3082\u306e\u306f_constant applicative forms_\u3068\u3044\u3046.\nlet\u2026in\u2026\u5f0f\u3068letrec\u2026in\u2026\u5f0f\u304c\u3042\u308a,\u5c40\u6240\u5b9a\u7fa9\u304c\u3067\u304d\u308b.\nlet\u5f0f\u306fletrec\u3088\u308a\u3082\u7c21\u5358.\n\u675f\u7e1b\u3059\u308b\u3082\u306e\u306f\u7c21\u5358\u306a\u5909\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044.\nlet\u5f0f\u306e\u5024\u306fin\u2026\u306e\u90e8\u5206.\nlambda\u5f0f\u3082\u3042\u308b.\n\u30e9\u30e0\u30c0\u5f0f\u3092\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306esupercombinator difinition\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d,_\u30e9\u30e0\u30c0\u62bd\u8c61_\u3068\u547c\u3076.\n_structured types_,\u3059\u306a\u308f\u3061\u69cb\u9020\u5316\u3055\u308c\u305f\u578b(\u69cb\u9020\u4f53)\u306f_algebraic data types_,\u3059\u306a\u308f\u3061\u4ee3\u6570\u7684\u30c7\u30fc\u30bf\u578b\u3068\u547c\u3076.\n\u3053\u306e\u578b\u306fA|B\u306e\u578b\u3092\u6301\u3064,\u307f\u305f\u3044\u306a.\n\n```hs\ntree * ::= Leaf * | Branch (tree *) (tree *)\n```\n\n(Mirranda\u3067\u306f)\u4ee3\u6570\u7684\u30c7\u30fc\u30bf\u578b\u306f\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u306b\u4f7f\u3048\u308b.\n\u7c21\u5358\u306a\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3053\u308c\u3092\u4f55\u3068\u304b\u3059\u308b.\ncase\u5f0f\u306b\u843d\u3068\u3059.\nPack{_tag_, _arity_}\u3092\u4f7f\u3063\u3066\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u8868\u73fe\u3059\u308b.\n_tag_\u306f\u5b9f\u969b\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf,_arity_\u306f\u5f15\u6570\u306e\u6570.\n`Branch (Leaf 3) (Leaf 4)`\u3092`Pack{7,2} (Pack{6,1} 3) (Pack{6,1} 4)`\u3068\u304b\u304f.\u9762\u5012!\n\u3088\u304f\u308f\u304b\u3089\u306a\u3044\n\n> The tag is required so that objects built with different constructors can be distinguished from one\n> another. In a well-typed program, objects of different type will never need to be distinguished\n> at run-time, so tags only need to be unique within a data type. Hence, we can start the tag at\n> 1 afresh for each new data type, giving the following representation:\n\nC\u306eenum\u307f\u305f\u3044\u306a\u3082\u306e?\ncase\u5f0f\n\n```\nisRed c = case c of\n  <1> -> True ;\n  <2> -> False ;\n  <3> -> False\ndepth t = case t of\n  <1> n -> 0 ;\n  <2> t1 t2 -> 1 + max (depth t1) (depth t2)\n```\n\ncase\u5f0f\u306e\u6570\u5b57\u306fpack\u3067\u4f5c\u3063\u305ftag\u306e\u6570\u5b57\u3060\u3051\u3089\u3057\u3044.\n\n## 1.2\n\u6f14\u7b97\u5b50\u306e\u30c6\u30fc\u30d6\u30eb\n\n| \u512a\u5148\u9806\u4f4d | \u7d50\u5408\u6027 | \u6f14\u7b97\u5b50 |\n|:--:|:--:|:--:|\n| 6 | \u5de6 | \u9069\u7528 |\n| 5 | \u53f3 | * |\n|   | \u306a\u3057 | / |\n| 4 | \u53f3 | + |\n|   | \u306a\u3057 | - |\n| 3 | \u306a\u3057 | == \u02dc= > >= < <= |\n| 2 | \u53f3 | & |\n| 1 | \u53f3 | \\| |\n\n\u7c21\u5358\u306e\u305f\u3081\u306b,`x/y/z`\u306a\u3093\u3066\u8868\u8a18\u306f\u3067\u304d\u306a\u3044.\u7d50\u5408\u6027\u304c\u300c\u306a\u3057\u300d\u306e\u6f14\u7b97\u5b50\u306f\u5168\u90e8\u305d\u3046\u3060\u3068\u601d\u3046.\n\u5358\u9805-(\u30de\u30a4\u30ca\u30b9)\u3084\u5358\u9805!(\u5426\u5b9a)\u306a\u3093\u3066\u3082\u306e\u306f\u306a\u3044.\n\n## 1.3\nCore Program\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u305f\u3081\u306bCore Program\u7528\u306e\u30c7\u30fc\u30bf\u578b\u3092\u4f5c\u308b.\u3084\u3063\u3068\u305d\u308c\u3063\u307d\u304f\u306a\u3063\u3066\u304d\u305f!\nMiranda\u306a\u3093\u3066\u4f7f\u308f\u306a\u3044\u306e\u3067,C(\u3068\u3067\u304d\u308c\u3070Scheme\u3067\u3082)\u3067\u66f8\u304f.\nMiranda\u306e\u6587\u6cd5\u306a\u3093\u3066\u77e5\u3089\u306a\u3044\u306e\u3067,\u30b3\u30fc\u30c9\u306e\u96f0\u56f2\u6c17\u3067\u305d\u308c\u3063\u307d\u304f\u66f8\u304f\u306e\u3067,\u3044\u3064\u306e\u9593\u306b\u304b\u5909\u308f\u3063\u3066\u308b\u304b\u3082.\n\n```hs:\u8a00\u8a9e\u306fMiranda\nmodule Language where\nimport Utils\ndata Expr a\n   = EVar Name -- Variables\n   | ENum Int -- Numbers\n   | EConstr Int Int -- Constructor tag arity\n   | EAp (Expr a) (Expr a) -- Applications\n   | ELet -- Let(rec) expressions\n   IsRec -- boolean with True = recursive,\n   [(a, Expr a)] -- Definitions\n   (Expr a) -- Body of let(rec)\n   | ECase -- Case expression\n   (Expr a) -- Expression to scrutinise\n   [Alter a] -- Alternatives\n   | ELam [a] (Expr a) -- Lambda abstractions\n    deriving (Text)\n```\n\n```c:c11\n#include <stdalign.h>\n\n/*\n|~~~|num|\n0:reserved\n1:ENum\n2:EConstr\n3:EAp\n4:ELet\n5:ELetrec\n6:Ecase\n7:ELam\n8:EVar\n9~15:reserved\n*/\n\nstruct {\n\talignas(16) void *car;\n\talignas(16) void *cdr;\n} typedef Expr;\n\n```\n\n**17\u30da\u30fc\u30b8\u307e\u3067\u9032\u3093\u3060**\n", "tags": ["\u30a4\u30f3\u30d7\u30ea\u30e1\u30f3\u30c6\u30a3\u30f3\u30b0\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30ca\u30eb\u30e9\u30f3\u30b2\u30fc\u30b8\u30ba"]}