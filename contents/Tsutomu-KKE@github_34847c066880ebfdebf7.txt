{"context": "Jupyter\u306e\u5c0f\u62803\u306e\u7d9a\u304d\n\n\u3053\u308c\u306a\u306b\n\u4e0b\u8a18\u306e15\u500b\u306e\u56f3\u5f62\u304b\u3089\u3001\u30e9\u30f3\u30c0\u30e0\u306b3\u500b\u306e\u7d75\u3092\u8868\u793a\u3055\u305b\u307e\u30591\u3002\n\n\u6e96\u5099\u3068\u3057\u3066\u3001\u307e\u305a\u3001\u4e0b\u8a18\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\njupyter_notebook\nfrom IPython.display import display, SVG\nimport numpy as np, IPython.core.getipython\nss = \"\"\"\\\n1/e50 50 50 50 url(#g) black 0.5\n1/e50 50 50 50 url(#g)/r0 0 100 50 white/e 50 50 50 10 #E0E0E0 black 0.5\n0/pM1,34_L35,10_L99,10_L66,34_L99,10_L99,75_L66,99 #E0E0E0 black 0.5/r1 34 65 65 #C0C0C0 black 0.5\n0/e50 82 50 17 #E0E0E0 black 0.5/pM0,80_L50,0_L100,80 #E0E0E0 black 0.5\n0/e90 50 10 30 #E0E0E0 black 0.5/pM90,20_L10,20_L10,80_L90,80 #E0E0E0 black 0.5/e10 50 10 30 #C0C0C0 black 0.5\n0/pM10,70_C10,60_30,30_50,30_C70,40_50,60_70,70_C90,70_90,40_90,30 none black\n0/pM10,70_C10,60_30,30_50,30_C70,40_50,60_70,70_C90,70_90,40_90,30 none black 10\\\n/pM10,69.2_C10,60_30,30_50,30_C70,40_50,60_70,70_C90,70_90,40_90,30.8 none white 8.4\n0/pM0,70_L30,30_L100,30_L70,70_Z #E0E0E0 black 0.8\n0/pM20,20_L20,80_L80,80 none black 10/pM20,21_L20,80_L79,80 none white 8.4\n0/pM1,50_L80,25_L99,25_L25,50_M99,25_L99,50_L25,75_L25,50 #E0E0E0 black 0.5/r1 50 25 25 #C0C0C0 black 0.5\n0/pM25,40_C50,-15_99,40_67,67_C60,70_50,80_50,98 none black 0.8/c 25 40 1.2/c 50 98 1.2\n0/e20 39.5 16 24 gray black 0.5/e24 40 16 24 #C0C0C0 black 0.5/e24 40 2 3 #555/l24 40 84 60 gray 2\\\n/e80 59.5 16 24 gray black 0.5/e84 60 16 24 #C0C0C0 black 0.5/e84 60 2 3 #555\n0/l10 10 90 90 black 10/l10.5 10.5 89.5 89.5 white 8.4/l10 90 90 10 black 10/l10.5 89.5 89.5 10.5 white 8.4\n0/c50 50 40 none black 10/c50 50 40 none white 8.4\n0/pM10,70_A40,40_0_0_1_90,70 none black 10/pM10,69.2_A40,39.2_0_0_1_90,69.2 none white 8.4\"\"\".splitlines()\ntt = {\n      'p':'path d fill stroke stroke-width'.split(),\n      'l':'line x1 y1 x2 y2 stroke stroke-width'.split(),\n      'c':'circle cx cy r fill stroke stroke-width'.split(),\n      'e':'ellipse cx cy rx ry fill stroke stroke-width'.split(),\n      'r':'rect x y width height fill stroke stroke-width'.split(),\n}\ndef make_svg(ids, ss=ss, tt=tt):\n    rs, n = [], len(ids)\n    for i, j in enumerate(ids):\n        rr = ['<g transform=\"translate(%d,0)\">'%(i*120)]\n        vv = ss[j].split('/')\n        if vv[0] == '1':\n            rr.append(\"\"\"\\\n                <defs><radialGradient id=\"g\" gradientUnits=\"userSpaceOnUse\"\n                  cx=\"50\" cy=\"50\" r=\"50\" fx=\"20\" fy=\"50\">\n                <stop offset=\"0%\" stop-color=\"white\" />\n                <stop offset=\"100%\" stop-color=\"gray\" />\n                </radialGradient></defs>\"\"\")\n        for s in vv[1:]:\n            uu = tt[s[0]]\n            rr.append('<%s %s />'%(uu[0],' '.join('%s=\"%s\"'%(u,\n                a.replace('_',' ')) for u, a in zip(uu[1:], s[1:].split()))))\n        rs.append('\\n'.join(rr+['</g>']))\n    return SVG('<svg width=\"%d\" height=\"100\">%s</svg>'%(n*120,'\\n'.join(rs)))\ndef F_impl(s):\n    return make_svg(np.random.choice(range(15), int(s) if s else 3, False))\nip = IPython.core.getipython.get_ipython()\nif ip:\n    ip.register_magic_function(F_impl, magic_name='F')\n\n\n\n\u5b9f\u884c\u3057\u3066\u307f\u308b\n\njupyter_notebook\nF\n\n\n\n\njupyter_notebook\nF\n\n\n\n\njupyter_notebook\nfor i in range(1,4):\n    svg = %F {i}\n    display(svg)\n\n\n\n\u300c{ }\u300d\u3067\u56f2\u3080\u3068\u3001\u5148\u306b\u8a55\u4fa1(eval)\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u4e00\u65e6\u3001\u7d50\u679c\u3092\u5909\u6570\u306b\u4fdd\u5b58\u3057\u3066\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0a\n\n\n\n\n\u66f8\u7c4d\u300c\u30a2\u30a4\u30c7\u30a2\u5927\u5168\u300d\u306e\u300c09 \u30d5\u30a3\u30f3\u30b1\u306e\u3042\u3044\u307e\u3044\u306a\u90e8\u54c1\u300d\u53c2\u7167\u3002\u00a0\u21a9\n\n\n\n[Jupyter\u306e\u5c0f\u62803](http://qiita.com/Tsutomu-KKE@github/items/67ff53d58955082fd582)\u306e\u7d9a\u304d\n# \u3053\u308c\u306a\u306b\n\u4e0b\u8a18\u306e15\u500b\u306e\u56f3\u5f62\u304b\u3089\u3001\u30e9\u30f3\u30c0\u30e0\u306b3\u500b\u306e\u7d75\u3092\u8868\u793a\u3055\u305b\u307e\u3059[^1]\u3002\n\n[^1]: \u66f8\u7c4d\u300c[\u30a2\u30a4\u30c7\u30a2\u5927\u5168](https://www.amazon.co.jp/dp/4894517450)\u300d\u306e\u300c09 \u30d5\u30a3\u30f3\u30b1\u306e\u3042\u3044\u307e\u3044\u306a\u90e8\u54c1\u300d\u53c2\u7167\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/da4f9bb9-2fa8-aab2-0f56-c6651fa07de9.png)\n\n\n\u6e96\u5099\u3068\u3057\u3066\u3001\u307e\u305a\u3001\u4e0b\u8a18\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```py3:jupyter_notebook\nfrom IPython.display import display, SVG\nimport numpy as np, IPython.core.getipython\nss = \"\"\"\\\n1/e50 50 50 50 url(#g) black 0.5\n1/e50 50 50 50 url(#g)/r0 0 100 50 white/e 50 50 50 10 #E0E0E0 black 0.5\n0/pM1,34_L35,10_L99,10_L66,34_L99,10_L99,75_L66,99 #E0E0E0 black 0.5/r1 34 65 65 #C0C0C0 black 0.5\n0/e50 82 50 17 #E0E0E0 black 0.5/pM0,80_L50,0_L100,80 #E0E0E0 black 0.5\n0/e90 50 10 30 #E0E0E0 black 0.5/pM90,20_L10,20_L10,80_L90,80 #E0E0E0 black 0.5/e10 50 10 30 #C0C0C0 black 0.5\n0/pM10,70_C10,60_30,30_50,30_C70,40_50,60_70,70_C90,70_90,40_90,30 none black\n0/pM10,70_C10,60_30,30_50,30_C70,40_50,60_70,70_C90,70_90,40_90,30 none black 10\\\n/pM10,69.2_C10,60_30,30_50,30_C70,40_50,60_70,70_C90,70_90,40_90,30.8 none white 8.4\n0/pM0,70_L30,30_L100,30_L70,70_Z #E0E0E0 black 0.8\n0/pM20,20_L20,80_L80,80 none black 10/pM20,21_L20,80_L79,80 none white 8.4\n0/pM1,50_L80,25_L99,25_L25,50_M99,25_L99,50_L25,75_L25,50 #E0E0E0 black 0.5/r1 50 25 25 #C0C0C0 black 0.5\n0/pM25,40_C50,-15_99,40_67,67_C60,70_50,80_50,98 none black 0.8/c 25 40 1.2/c 50 98 1.2\n0/e20 39.5 16 24 gray black 0.5/e24 40 16 24 #C0C0C0 black 0.5/e24 40 2 3 #555/l24 40 84 60 gray 2\\\n/e80 59.5 16 24 gray black 0.5/e84 60 16 24 #C0C0C0 black 0.5/e84 60 2 3 #555\n0/l10 10 90 90 black 10/l10.5 10.5 89.5 89.5 white 8.4/l10 90 90 10 black 10/l10.5 89.5 89.5 10.5 white 8.4\n0/c50 50 40 none black 10/c50 50 40 none white 8.4\n0/pM10,70_A40,40_0_0_1_90,70 none black 10/pM10,69.2_A40,39.2_0_0_1_90,69.2 none white 8.4\"\"\".splitlines()\ntt = {\n      'p':'path d fill stroke stroke-width'.split(),\n      'l':'line x1 y1 x2 y2 stroke stroke-width'.split(),\n      'c':'circle cx cy r fill stroke stroke-width'.split(),\n      'e':'ellipse cx cy rx ry fill stroke stroke-width'.split(),\n      'r':'rect x y width height fill stroke stroke-width'.split(),\n}\ndef make_svg(ids, ss=ss, tt=tt):\n    rs, n = [], len(ids)\n    for i, j in enumerate(ids):\n        rr = ['<g transform=\"translate(%d,0)\">'%(i*120)]\n        vv = ss[j].split('/')\n        if vv[0] == '1':\n            rr.append(\"\"\"\\\n                <defs><radialGradient id=\"g\" gradientUnits=\"userSpaceOnUse\"\n                  cx=\"50\" cy=\"50\" r=\"50\" fx=\"20\" fy=\"50\">\n                <stop offset=\"0%\" stop-color=\"white\" />\n                <stop offset=\"100%\" stop-color=\"gray\" />\n                </radialGradient></defs>\"\"\")\n        for s in vv[1:]:\n            uu = tt[s[0]]\n            rr.append('<%s %s />'%(uu[0],' '.join('%s=\"%s\"'%(u,\n                a.replace('_',' ')) for u, a in zip(uu[1:], s[1:].split()))))\n        rs.append('\\n'.join(rr+['</g>']))\n    return SVG('<svg width=\"%d\" height=\"100\">%s</svg>'%(n*120,'\\n'.join(rs)))\ndef F_impl(s):\n    return make_svg(np.random.choice(range(15), int(s) if s else 3, False))\nip = IPython.core.getipython.get_ipython()\nif ip:\n    ip.register_magic_function(F_impl, magic_name='F')\n```\n\n# \u5b9f\u884c\u3057\u3066\u307f\u308b\n\n```py3:jupyter_notebook\nF\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/e953b84f-a668-2e7c-da6f-0219525d71e7.png)\n\n\n```py3:jupyter_notebook\nF\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/661f7966-5cf9-6c57-8ac3-1f328930f216.png)\n\n\n```py3:jupyter_notebook\nfor i in range(1,4):\n    svg = %F {i}\n    display(svg)\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/70fb29b6-1ddd-5b2e-d77a-b01ed0b3d164.png)\n\n\n\u300c{ }\u300d\u3067\u56f2\u3080\u3068\u3001\u5148\u306b\u8a55\u4fa1(eval)\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u4e00\u65e6\u3001\u7d50\u679c\u3092\u5909\u6570\u306b\u4fdd\u5b58\u3057\u3066\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n\u4ee5\u4e0a\n", "tags": ["Python", "Jupyter", "\u30a2\u30a4\u30c7\u30a2\u5927\u5168", "\u30d5\u30a3\u30f3\u30b1\u306e\u3042\u3044\u307e\u3044\u306a\u90e8\u54c1"]}