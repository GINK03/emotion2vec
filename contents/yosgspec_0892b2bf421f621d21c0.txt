{"tags": ["\u30d9\u30f3\u30c1\u30de\u30fc\u30af", "JavaScript", "C#", "VB.Net", "dlang"], "context": "\u91cd\u3044\u51e6\u7406\u306f\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3068\u304b\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30b9\u3067Prallel\u51e6\u7406\u3092\u884c\u3046\u7269\u3068\u306f\u826f\u304f\u805e\u304f\u8a71\u3002\n\u3058\u3083\u3042\u3001\u3069\u3053\u307e\u3067\u901f\u5ea6\u304c\u6539\u5584\u3055\u308c\u308b\u306e?\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u5b9f\u6e2c\u3057\u3066\u307f\u308b\u3002\n(\u3064\u3044\u3067\u306b\u8a00\u8a9e\u3054\u3068\u306e\u901f\u5ea6\u30c6\u30b9\u30c8\u3082)\nParallel\u51e6\u7406\u306f\u52ff\u8ad6\u306e\u3053\u3068\u3001\u305d\u308c\u4ee5\u5916\u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u51e6\u7406\u304c\u4f7f\u3048\u308b\u3082\u306e\u306f\u305d\u3061\u3089\u3067\u3082\u30c6\u30b9\u30c8\u3002\nHSP\u4ee5\u5916\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u307f\u3092\u4f7f\u7528\u3059\u308b\u3002\n\n\u5b9f\u884c\u6761\u4ef6\nOS:Windows7 32bit\n\u30b3\u30a2\u6570:4\nC++:Microsoft(R) C/C++ Optimizing Compiler Version 19.00.24215.1\nD:DMD32 D Compiler v2.066.1\nC#:Microsoft (R) Visual C# Compiler \u30d0\u30fc\u30b8\u30e7\u30f3 1.3.1.60616\nVB:Microsoft (R) Visual Basic Compiler \u30d0\u30fc\u30b8\u30e7\u30f3 1.3.1.60616\nNode.js:node v7.3.0\nHSP:HSP 3.4\nPython:Python 3.6.0\nRuby:Ruby 2.3.1\n\n\u51e6\u7406\u65b9\u6cd5\u4e00\u89a7\n\nC++\n\n\nfor(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\nfuture(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\nparallel for(OpenMP)(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\n\n\nD\n\n\nfor(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\nThread(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\nparallel foreach(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\n\n\nC#\n\n\nfor(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\nTask(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\nParallel.For(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\n\n\nVisualBasic\n\n\nFor(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\nTask(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\nParallel.For(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\n\n\nNode.js(JavaScript)\n\n\nfor(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\nPromise(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\ncluster(\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30b9)\n\n\nHSP\n\n\nrepeat(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\nfor(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\nmstThread(mist\u30d7\u30e9\u30b0\u30a4\u30f3)(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\n\n\nPython\n\n\nfor(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\nfuture Thread(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\nfuture Process(\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30b9)\n\n\nRuby\n\n\nfor(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\nThread(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\n\n\n\n\n\u30c6\u30b9\u30c8\u5185\u5bb9\n2000000000\u56de\u53ca\u30735000000000\u56de\u306e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u51e6\u7406\u30924\u3064\u306b\u5206\u3051\u3066\u884c\u3046\u3002\n\u8a00\u8a9e\u3054\u3068\u306e\u5b9f\u88c5\u306f\u5f8c\u8ff0\u3059\u308b\u3002\n\n\u5b9f\u884c\u7d50\u679c\n\n\n\n\u8a08\u7b97\u56de\u6570[\u56de]\n2,000,000,000\n5,000,000,000\n\n\n\n\nLanguage/Process\nTime[ms]\nTime[ms]\n\n\nC++\n\n\n\n\nfor\n0\n4593\n\n\nfuture\n0\n2319\n\n\nparallel for\n0\n2358\n\n\nD\n\n\n\n\nfor\n646\n4673\n\n\nThread\n342\n2351\n\n\nparallel foreach\n312\n2345\n\n\nC#\n\n\n\n\nfor\n642\n4577\n\n\nTask\n332\n2539\n\n\nParallel.For\n316\n2465\n\n\nVisualBasic\n\n\n\n\nFor\n1827\n4716\n\n\nTask\n940\n2506\n\n\nParallel.For\n942\n2414\n\n\nNode.js\n\n\n\n\nfor\n2461\n9485\n\n\nPromise\n2443\n9499\n\n\ncluster\n1555\n5517\n\n\nHSP\n\n\n\n\nrepeat\n106000\n282400\n\n\nfor\n326000\n951600\n\n\nmstThread\n59300\n215300\n\n\nPython\n\n\n\n\nfor\n197500\n499000\n\n\nfuture Thread\n205800\n498500\n\n\nfuture Process\n134400\n272600\n\n\nRuby\n\n\n\n\nfor\n160900\n485100\n\n\nThread\n158800\n468100\n\n\n\n\u203bHSP\u3001Python\u3001Ruby\u306f\u51e6\u7406\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u51e6\u7406\u91cf\u3092100\u5206\u306e1(100\u305a\u3064\u52a0\u7b97)\u306b\u3057\u3001\u305d\u306e\u4ee3\u308f\u308a\u8a08\u6e2c\u6642\u9593\u3092100\u500d\u3068\u3057\u3066\u3044\u308b\u3002\n\n\u3042\u3068\u304c\u304d\n\n\u7d50\u679c\u306b\u3064\u3044\u3066\n\u57fa\u672c\u7684\u306b\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3084\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30b9\u306f\u6709\u52b9\u3067\u30014\u500d\u307e\u3067\u3068\u306f\u8a00\u308f\u306a\u3044\u3082\u306e\u306e\u5927\u3088\u305d2\u500d\u7a0b\u5ea6\u307e\u3067\u306f\u901f\u5ea6\u3092\u5f15\u304d\u4e0a\u3052\u3089\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3002\nThread\u3092\u4f7f\u3063\u3066\u3082Prallel\u3092\u4f7f\u3063\u3066\u3082\u52b9\u529b\u3068\u3057\u3066\u306f\u540c\u7a0b\u5ea6\u3002\n\u5fc5\u8981\u306a\u3089\u3069\u3061\u3089\u3092\u4f7f\u3063\u3066\u3082\u826f\u3044\u306e\u304b\u306a\u3002\n\u305f\u3060\u3057\u3001Python\u3068Ruby\u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306b\u95a2\u3057\u3066\u306f\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3068\u3042\u307e\u308a\u5909\u308f\u308b\u7d50\u679c\u3068\u306f\u306a\u3089\u306a\u304b\u3063\u305f\u3002Ruby\u306f\u540c\u6642\u306b\u4e00\u3064\u307e\u3067\u3057\u304b\u30b9\u30ec\u30c3\u30c9\u3092\u52d5\u304b\u305b\u306a\u3044\u3068\u304b\u805e\u3044\u305f\u3051\u308c\u3069\u3001Python\u3082\u305d\u3046\u3044\u3046\u3053\u3068\u306a\u306e\u304b\u306a\u3002\n\u3061\u306a\u307f\u306bJavaScript\u306ePromise\u306b\u3064\u3044\u3066\u306f\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u306a\u306e\u3067\u305d\u306e\u307e\u3093\u307e\u3068\u3044\u3046\u6240\u3002\n\n\u8a00\u8a9e\u3054\u3068\u306e\u8a08\u7b97\u901f\u5ea6\u306b\u3064\u3044\u3066\n\u4eca\u56de\u8272\u3005\u8a66\u3057\u3066\u3044\u3066\u3001\u5358\u7d14\u306a\u30eb\u30fc\u30d7\u3084\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u901f\u5ea6\u3082\u898b\u3066\u307f\u305f\u3002\n\u9759\u7684\u578b\u4ed8\u3051\u8a00\u8a9e\u306b\u3064\u3044\u3066\u306f\u578b\u306e\u91cd\u8981\u3055\u304c\u898b\u3066\u53d6\u308c\u305f\u3002\n\u30c7\u30fc\u30bf\u306f\u9332\u3063\u3066\u3044\u306a\u3044\u304c\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u5834\u5408\u306f\u4e00\u822c\u7684\u306b\u6574\u6570\u578b\u306e\u65b9\u304c\u6d6e\u904a\u5c0f\u6570\u70b9\u578b\u306b\u6bd4\u3079\u3001\u65e9\u304f\u306a\u308b\u50be\u5411\u304c\u3042\u308b\u307f\u305f\u3044\u3060\u3002\n\u307e\u305f\u3001\u540c\u3058\u6574\u6570\u578b\u3067\u3082long\u3088\u308a\u3082int\u306e\u65b9\u304c\u901f\u304f\u306a\u308b\u69d8\u5b50\u3002\n\u7279\u306bC++\u306e\u901f\u5ea6\u306e\u4f4e\u4e0b\u3063\u3077\u308a\u306f\u8457\u3057\u3044\u3002\n\u305d\u308c\u3067\u3082\u3001D\u3001C#\u3001VB\u3068\u4e26\u3093\u3067\u3044\u308b\u4f4d\u306a\u306e\u3067\u3001\u9045\u304f\u306f\u306a\u3044\u3051\u3069\u3002\n\u3042\u3068\u306f\u3001D\u8a00\u8a9e\u3068C#\u306e\u5dee\u7570\u306b\u306f\u3042\u308c\u3063?\u3068\u8a00\u3046\u611f\u3058\u3002\nC++\u3068D\u8a00\u8a9e\u306f\u30cd\u30a4\u30c6\u30a3\u30d6\u30b3\u30f3\u30d1\u30a4\u30eb\u306a\u306e\u3067\u3001\u4e2d\u9593\u8a00\u8a9e\u578b\u306e.NET\u8a00\u8a9e\u306b\u5bfe\u3057\u3066\u306f\u660e\u78ba\u306a\u5dee\u304c\u51fa\u308b\u3068\u601d\u3063\u3066\u3044\u305f\u3002\n\u305d\u308c\u3068\u3001C#\u3068\u307b\u307c\u540c\u3058\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u306bVB\u304c\u9045\u304b\u3063\u305f\u3053\u3068\u306b\u30d3\u30c3\u30af\u30ea\u3068\u3044\u3046\u304b\u6b8b\u5ff5\u3060\u3063\u305f\u3002\n\u751f\u6210\u3055\u308c\u308b\u30a2\u30bb\u30f3\u30d6\u30ea\u3068\u304b\u89e3\u8aad\u3059\u308c\u3070\u539f\u56e0\u306f\u308f\u304b\u308b\u306e\u3060\u308d\u3046\u304b\u3002\n\n\u8ffd\u8a18:CIL\u306b\u5909\u63db\u3057\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u8997\u3044\u3066\u307f\u305f\u3002\n\u6b63\u76f4\u3001\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3051\u3069\u3001\u5927\u307e\u304b\u306e\u6d41\u308c\u306f\u4f3c\u3066\u3044\u308b\u3002\n\u3057\u304b\u3057\u3001\u898b\u3066\u3044\u304f\u3068C#\u3067\u306fadd\u3068\u306a\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u304cVB\u3067\u306fadd.ovf\u3068\u306a\u3063\u3066\u3044\u305f\u3002\n\u3053\u308c\u306f\u3001\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306e\u691c\u67fb\u3092\u3059\u308b\u3082\u306e\u3089\u3057\u304f\u3001\u305d\u308c\u304cVB\u3067\u306f\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u3068\u306a\u3063\u3066\u3044\u305f\u306e\u304b\u306a\u3041\u3068\u60f3\u50cf\u3059\u308b\u3002\n\n\u6b21\u306bNode.js\u3002\n\u9759\u7684\u8a00\u8a9e\u52e2\u306b\u4f55\u3060\u304b\u3093\u3060\u5927\u5dee\u4ed8\u3051\u3089\u308c\u3066\u3044\u306a\u3044\u3042\u305f\u308a\u6d41\u77f3JIT\u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3002\n\u306a\u304a\u3001\u30d3\u30c3\u30c8\u8ad6\u7406\u548c\u6f14\u7b97\u5b50(\"|\")\u30680\u3067\u5c0f\u7d30\u5de5\u3057\u3066\u5185\u90e8\u7684\u306b\u6574\u6570\u578b\u306b\u56fa\u5b9a\u3055\u305b\u308b\u3068\u50c5\u304b\u306b\u901f\u5ea6\u304c\u4e0a\u304c\u308b\u307f\u305f\u3044\u3002\n(asm.js\u306e\u578b\u6307\u5b9a\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u3082\u306e\u3089\u3057\u3044)\n\u7d50\u679c\u306f\u8f09\u305b\u3066\u306a\u3044\u3051\u3069\u30012000000000\u56de\u306e\u8a08\u7b97\u6642\u70b9\u3067100\uff5e200ms\u306e\u5dee\u304c\u51fa\u3066\u3044\u308b\u3002\n\u3057\u304b\u3057\u3001\u8a08\u7b97\u56de\u6570\u304c5000000000\u56de\u306e\u6642\u3067\u306f\u8fd4\u3063\u30662\u500d\u304f\u3089\u3044\u9045\u304f\u306a\u3063\u305f\u306e\u3067\u305d\u3061\u3089\u3067\u306f\u666e\u901a\u306e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3068\u3057\u305f\u3002\n\u3042\u3068\u306f\u3001\u6574\u6570\u7dad\u6301\u3057\u7d9a\u3051\u308b\u3068\u666e\u901a\u306b\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3059\u308b\u3002\nHSP\u3002\n\u805e\u3044\u3066\u3044\u305f\u8a71\u3060\u3051\u3069\u3001for\u30de\u30af\u30ed\u306f\u975e\u5e38\u306b\u9045\u3044\u3002\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u306f\u8a00\u3063\u3066\u3082\u7d50\u5c40\u306f\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u8a00\u8a9e\u306a\u305f\u3081\u3001\u901f\u5ea6\u306f\u304a\u5bdf\u3057\u3002\nint\u3092\u4f7f\u3044\u7d9a\u3051\u308b\u3068\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3059\u308b\u3051\u3069\u3001double\u3092\u4f7f\u3063\u3066\u3082\u901f\u5ea6\u7684\u306b\u76ee\u7acb\u3063\u305f\u5927\u5dee\u306f\u306a\u3044\u307f\u305f\u3044\u3060\u3002\nRuby\u3001Python\u3002\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u7684\u306b\u306f\u4f3c\u305f\u308a\u5bc4\u3063\u305f\u308a\u306a\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u8a00\u8a9e\u4e8c\u3064\u3002\nRuby\u306e\u65b9\u304c\u5fae\u5999\u306b\u65e9\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u3002\n\n\u5b9f\u88c5\n\n2,000,000,000\u56de\u7248\n\nC++\n#include<iostream>\n#include<vector>\n#include<thread>\n#include<future>\n#include<omp.h>\nusing namespace std;\nusing namespace std::chrono;\n\nconst int cores=4;\nint maxsum=2000000000;\n\nint main(){\n    maxsum/=cores;\n    int sum=0;\n\n    cout<<\"for\"<<endl;\n    auto sw0=system_clock::now();\n    for(int n=0;n<cores;n++){\n        int esum=0;\n        for(int i=0;i<maxsum;i++){\n            esum++;\n        }\n        sum+=esum;\n    }\n    auto sw=duration_cast<milliseconds>(system_clock::now()-sw0).count();\n    cout<<\"time: \"<<sw<<\"ms\"<<endl;\n    cout<<sum<<endl;\n\n    cout<<\"for future\"<<endl;\n    sw0=system_clock::now();\n    sum=0;\n    vector<future<void>> futures;\n    for(int n=0;n<cores;n++){\n        futures.push_back(async(launch::async,[&]{\n            int esum=0;\n            for(int i=0;i<maxsum;i++){\n                esum++;\n            }\n            sum+=esum;\n        }));\n    }\n    for(auto &t:futures){\n        t.wait();\n    }\n    sw=duration_cast<milliseconds>(system_clock::now()-sw0).count();\n    cout<<\"time: \"<<sw<<\"ms\"<<endl;\n    cout<<sum<<endl;\n\n    cout<<\"OpenMP parallel for\"<<endl;\n    sw0=system_clock::now();\n    sum=0;\n    #pragma omp parallel for reduction(+:sum)\n    for(int n=0;n<cores;n++){\n        int esum=0;\n        for(int i=0;i<maxsum;i++){\n            esum++;\n        }\n        sum+=esum;\n    }\n    sw=duration_cast<milliseconds>(system_clock::now()-sw0).count();\n    cout<<\"time: \"<<sw<<\"ms\"<<endl;\n    cout<<sum<<endl;\n}\n\n\nD\nimport std.stdio;\nimport std.datetime;\nimport core.thread;\nimport std.parallelism;\nimport std.range;\nimport std.array;\n\nStopWatch sw;\nimmutable int cores=4;\nint maxsum=2000000000;\n\nvoid main(){\n    maxsum/=cores;\n    int maxsum=maxsum;\n\n    writeln(\"for\");\n    sw.start();\n    int sum=0;\n    for(int n=0;n<cores;n++){\n        int esum=0;\n        for(int i=0;i<maxsum;i++){\n            esum++;\n        }\n        sum+=esum;\n    }\n    sw.stop();\n    writeln(\"time: \",sw.peek().to!(\"msecs\",real)(),\"ms\");\n    writefln(\"%d\",sum);\n\n    sw.reset();\n\n    writeln(\"for Thread\");\n    sw.start();\n    sum=0;\n    auto tg=new ThreadGroup();\n\n    for(int n;n<cores;n++){\n        auto t=new Thread(delegate(){\n            int esum=0;\n            for(int i=0;i<maxsum;i++){\n                esum++;\n            }\n            sum+=esum;\n        });\n        tg.add(t);\n        t.start();\n    }\n    tg.joinAll();\n    sw.stop();\n    writeln(\"time: \",sw.peek().to!(\"msecs\",real)(),\"ms\");\n    writefln(\"%d\",sum);\n\n    sw.reset();\n    writeln(\"foreach parallel\");\n    sw.start();\n    sum=0;\n    foreach(n;parallel(cores.iota.array)){\n        int esum=0;\n        for(int i=0;i<maxsum;i++){\n            esum++;\n        }\n        sum+=esum;\n    }\n    sw.stop();\n    writeln(\"time: \",sw.peek().to!(\"msecs\",real)(),\"ms\");\n    writefln(\"%d\",sum);\n}\n\n\nC#\n\nusing System;\nusing System.Diagnostics;\nusing System.Threading.Tasks;\n\nstatic class Program{\n    static Stopwatch sw=new Stopwatch();\n    const int cores=4;\n    static int maxsum=2000000000;\n\n    static void Main(){\n        maxsum/=cores;\n\n        Console.WriteLine(\"for\");\n        sw.Start();\n        int sum=0;\n        for(int n=0;n<cores;n++){\n            int esum=0;\n            for(int i=0;i<maxsum;i++){\n                esum++;\n            }\n            sum+=esum;\n        }\n        sw.Stop();\n        Console.WriteLine($\"time: {sw.ElapsedMilliseconds}ms\");\n        Console.WriteLine(\"{0}\",sum);\n\n        sw.Reset();\n\n        Console.WriteLine(\"ConvertAll Task\");\n        sw.Start();\n        sum=0;\n        var Taskss=Array.ConvertAll(new object[cores],n=>Task.Run(()=>{\n            int esum=0;\n            for(int i=0;i<maxsum;i++){\n                esum++;\n            }\n            sum+=esum;\n        }));\n        Task.WaitAll(Taskss);\n        sw.Stop();\n        Console.WriteLine($\"time: {sw.ElapsedMilliseconds}ms\");\n        Console.WriteLine(\"{0}\",sum);\n\n        sw.Reset();\n\n        Console.WriteLine(\"Parallel.For\");\n        sw.Start();\n        sum=0;\n        Parallel.For(0,cores,(n)=>{\n            int esum=0;\n            for(int i=0;i<maxsum;i++){\n                esum++;\n            }\n            sum+=esum;\n        });\n        sw.Stop();\n        Console.WriteLine($\"time: {sw.ElapsedMilliseconds}ms\");\n        Console.WriteLine(\"{0}\",sum);\n    }\n}\n\n\nVisualBasic.NET\nOption Strict On\nImports System.Console\nImports System.Diagnostics\nImports System.Threading.Tasks\n\nModule Program\n    Dim sw As New StopWatch\n    Const cores As Integer=4\n    Dim maxsum As Integer=2000000000\n\n    Sub Main\n        maxsum\\=cores\n\n        WriteLine(\"For\")\n        sw.Start()\n        Dim sum As Integer=0\n        For n As Integer=0 To cores-1\n            Dim esum As Integer=0\n            For i As Integer=0 To maxsum-1\n                esum+=1\n            Next\n            sum+=esum\n        Next\n        sw.Stop()\n        WriteLine($\"time: {sw.ElapsedMilliseconds}ms\")\n        WriteLine(\"{0}\",sum)\n\n        sw.Reset()\n\n        WriteLine(\"CovertAll Task\")\n        sw.Start()\n        sum=0\n        Dim Taskes=Array.ConvertAll(New Object(cores-1){},Function(n)Task.Run(Sub()\n            Dim esum As Integer=0\n            For i As Integer=0 To maxsum-1\n                esum+=1\n            Next\n            sum+=esum\n        End Sub))\n        Task.WaitAll(Taskes)\n        sw.Stop()\n        WriteLine($\"time: {sw.ElapsedMilliseconds}ms\")\n        WriteLine(\"{0}\",sum)\n\n        sw.Reset()\n\n        WriteLine(\"Parallel.For\")\n        sw.Start()\n        sum=0\n        Parallel.For(0,cores,Sub(n)\n            Dim esum As Integer=0\n            For i As Integer=0 To maxsum-1\n                esum+=1\n            Next\n            sum+=esum\n        End Sub)\n        sw.Stop()\n        WriteLine($\"time: {sw.ElapsedMilliseconds}ms\")\n        WriteLine(\"{0}\",sum)\n    End Sub\nEnd Module\n\n\nNode.js(JavaScript)\n\"use strict\";\nvar cluster=require(\"cluster\");\n\nconst cores=4;\nvar maxsum=2000000000;\n\nfunction main(){\n    maxsum/=cores;\n\n    console.log(\"for\");\n    console.time(\"time\");\n    var sum=0\n    for(var n=0;n<cores;n=0|n+1){\n        var esum=0;\n        for(var i=0;i<maxsum;i=0|i+1){\n            esum=0|esum+1;\n        }\n        sum=0|sum+esum;\n    }\n    console.timeEnd(\"time\");\n    console.log(\"%d\",sum);\n\n    console.log(\"map Promise\");\n    console.time(\"time\");\n    sum=0;\n    var Promises=new Array(cores).fill().map(n=>new Promise(resolve=>{\n        var esum=0\n        for(var i=0;i<maxsum;i=0|i+1){\n            esum=0|esum+1;\n        }\n        sum=0|sum+esum;\n        resolve();\n    }));\n    Promise.all(Promises).then(()=>{\n        console.timeEnd(\"time\");\n        console.log(\"%d\",sum);\n\n        console.log(\"map cluster\");\n        console.time(\"time\");\n        sum=0;\n        var clusters=Array(cores).fill().map(n=>new Promise(resolve=>{\n            cluster.setupMaster({args:[maxsum]});\n            cluster.fork().once(\"message\",esum=>{\n                sum=0|sum+esum;\n                resolve();\n            });\n        }));\n        Promise.all(clusters).then(()=>{\n            console.timeEnd(\"time\");\n            console.log(\"%d\",sum);\n        });\n    });\n}\n\nif(cluster.isWorker){\n    maxsum=parseInt(process.argv[2]);\n    var esum=0;\n    for(var i=0;i<maxsum;i=0|i+1){\n        esum=0|esum+1;\n    }\n    process.send(esum);\n    cluster.worker.kill();\n    process.exit();\n}\n\nmain();\n\n\nHSP\n#packopt name \"timeHsp\"\n#runtime \"hsp3cl\"\n#uselib \"Kernel32\"\n#cfunc global GetTickCount \"GetTickCount\"\n#include \"mist.hsp\"\n\n#const global cores 4\nmaxsum=2000000000\n\n#module Program\n    #deffunc main\n        maxsum@/=100\n        maxsum@/=cores\n\n        mes \"repeat\"\n        sw=GetTickCount()\n        sum=0\n        repeat cores\n            esum=0\n            repeat maxsum@\n                esum+=100\n            loop\n            sum+=esum\n        loop\n        mes \"time: \"+(GetTickCount()-sw)+\"ms\"\n        mes sum\n\n        mes \"repert for\"\n        sw=GetTickCount()\n        sum=0\n        repeat cores\n            esum=0\n            for i,0,maxsum@\n                esum+=100\n            next\n            sum+=esum\n        loop\n        mes \"time: \"+(GetTickCount()-sw)+\"ms\"\n        mes sum\n\n        mes \"repert mstThread\"\n        sw=GetTickCount()\n        mstOpenHspLib\n        sum=0\n        mstBind \"sum\",sum\n        mstCompile {\"\n            #deffunc worker int maxsum,local esum\n                esum=0\n                repeat maxsum\n                    esum+=100\n                loop\n                sum+=esum\n            return\n        \"}\n        mstSetWorkerNum cores\n        repeat cores\n            mstThreadCall \"worker\",maxsum@\n        loop\n        mstThreadJoin\n        mes \"time: \"+(GetTickCount()-sw)+\"ms\"\n        mes sum\n    return\n#global\n\nmain\n\n\nPython\nimport time\nimport functools\nimport concurrent.futures\nfutures=concurrent.futures\n\ncores=4\nmaxsum=2000000000\n\ndef main():\n    global maxsum\n    maxsum/=100\n    maxsum=int(maxsum/cores)\n\n    print(\"for\")\n    sw=time.time()\n    sum=0\n    for n in range(0,cores):\n        esum=0\n        for i in range(0,maxsum):\n            esum+=100\n        sum+=esum\n    print(\"time: {0:.2f}ms\".format((time.time()-sw)*1000))\n    print(\"sum: {0}\".format(sum))\n\n    print(\"map future Thread\")\n    with futures.ThreadPoolExecutor() as TP:\n        sw=time.time()\n        sum=0\n        workers=list(map(lambda n:TP.submit(worker,maxsum),range(0,cores)))\n        for esum in futures.wait(workers)[0]:\n            sum+=esum.result()\n        print(\"time: {0:.2f}ms\".format((time.time()-sw)*1000))\n        print(\"sum: {0}\".format(sum))\n\n    print(\"map future Process\")\n    with futures.ProcessPoolExecutor() as TP:\n        sw=time.time()\n        sum=0\n        workers=list(map(lambda n:TP.submit(worker,maxsum),range(0,cores)))\n        for esum in futures.wait(workers)[0]:\n            sum+=esum.result()\n        print(\"time: {0:.2f}ms\".format((time.time()-sw)*1000))\n        print(\"sum: {0}\".format(sum))\n\ndef worker(maxsum):\n    esum=0\n    for i in range(0,maxsum):\n        esum+=100\n    return esum\n\nif __name__==\"__main__\":\n    main()\n\n\nRuby\nrequire \"thwait\"\nrequire \"benchmark\"\n\n@cores=4\n@maxsum=2000000000\n\ndef main()\n    puts \"for\"\n    @maxsum/=100\n    @maxsum/=@cores\n\n    sw=Benchmark.realtime do\n        @sum=0\n        for n in 0..@cores-1\n            esum=0\n            for i in 0..@maxsum-1\n                esum+=100\n            end\n            @sum+=esum\n        end\n    end\n    puts \"time: #{(sw*1000).round(2)}ms\"\n    puts @sum\n\n    puts \"for Thread\"\n    sw2=Benchmark.realtime do\n        @sum=0\n        @threads=[]\n        for n in 0..@cores-1\n            @threads.push(Thread.new do\n                esum=0\n                for i in 0..@maxsum-1\n                    esum+=100\n                end\n                @sum+=esum\n            end)\n        end\n        ThreadsWait.all_waits(*@threads)\n    end\n    puts \"time: #{(sw2*1000).round(2)}ms\"\n    puts @sum\nend\n\nmain()\n\n\n5,000,000,000\u56de\u7248\n\nC++\n#include<iostream>\n#include<vector>\n#include<thread>\n#include<future>\n#include<omp.h>\nusing namespace std;\nusing namespace std::chrono;\n\nconst int cores=4;\nlong long maxsum=5000000000;\n\nint main(){\n    maxsum/=cores;\n    long long sum=0;\n\n    cout<<\"for\"<<endl;\n    auto sw0=system_clock::now();\n    for(int n=0;n<cores;n++){\n        unsigned esum=0;\n        for(unsigned i=0;i<maxsum;i++){\n            esum++;\n        }\n        sum+=esum;\n    }\n    auto sw=duration_cast<milliseconds>(system_clock::now()-sw0).count();\n    cout<<\"time: \"<<sw<<\"ms\"<<endl;\n    cout<<sum<<endl;\n\n    cout<<\"for future\"<<endl;\n    sw0=system_clock::now();\n    sum=0;\n    vector<future<void>> futures;\n    for(int n=0;n<cores;n++){\n        futures.push_back(async(launch::async,[&]{\n            unsigned esum=0;\n            for(unsigned i=0;i<maxsum;i++){\n                esum++;\n            }\n            sum+=esum;\n        }));\n    }\n    for(auto &t:futures){\n        t.wait();\n    }\n    sw=duration_cast<milliseconds>(system_clock::now()-sw0).count();\n    cout<<\"time: \"<<sw<<\"ms\"<<endl;\n    cout<<sum<<endl;\n\n    cout<<\"OpenMP parallel for\"<<endl;\n    sw0=system_clock::now();\n    sum=0;\n    #pragma omp parallel for reduction(+:sum)\n    for(int n=0;n<cores;n++){\n        unsigned esum=0;\n        for(unsigned i=0;i<maxsum;i++){\n            esum++;\n        }\n        sum+=esum;\n    }\n    sw=duration_cast<milliseconds>(system_clock::now()-sw0).count();\n    cout<<\"time: \"<<sw<<\"ms\"<<endl;\n    cout<<sum<<endl;\n}\n\n\nD\nimport std.stdio;\nimport std.datetime;\nimport core.thread;\nimport std.parallelism;\nimport std.range;\nimport std.array;\n\nStopWatch sw;\nimmutable int cores=4;\nlong maxsum=5000000000;\n\nvoid main(){\n    maxsum/=cores;\n    long maxsum=maxsum;\n\n    writeln(\"for\");\n    sw.start();\n    long sum=0;\n    for(int n=0;n<cores;n++){\n        uint esum=0;\n        for(uint i=0;i<maxsum;i++){\n            esum++;\n        }\n        sum+=esum;\n    }\n    sw.stop();\n    writeln(\"time: \",sw.peek().to!(\"msecs\",real)(),\"ms\");\n    writefln(\"%d\",sum);\n\n    sw.reset();\n\n    writeln(\"for Thread\");\n    sw.start();\n    sum=0;\n    auto tg=new ThreadGroup();\n\n    for(int n;n<cores;n++){\n        auto t=new Thread(delegate(){\n            uint esum=0;\n            for(uint i=0;i<maxsum;i++){\n                esum++;\n            }\n            sum+=esum;\n        });\n        tg.add(t);\n        t.start();\n    }\n    tg.joinAll();\n    sw.stop();\n    writeln(\"time: \",sw.peek().to!(\"msecs\",real)(),\"ms\");\n    writefln(\"%d\",sum);\n\n    sw.reset();\n    writeln(\"foreach parallel\");\n    sw.start();\n    sum=0;\n    foreach(n;parallel(cores.iota.array)){\n        uint esum=0;\n        for(uint i=0;i<maxsum;i++){\n            esum++;\n        }\n        sum+=esum;\n    }\n    sw.stop();\n    writeln(\"time: \",sw.peek().to!(\"msecs\",real)(),\"ms\");\n    writefln(\"%d\",sum);\n}\n\n\nC#\n\nusing System;\nusing System.Diagnostics;\nusing System.Threading.Tasks;\n\nstatic class Program{\n    static Stopwatch sw=new Stopwatch();\n    const int cores=4;\n    static long maxsum=5000000000;\n\n    static void Main(){\n        maxsum/=cores;\n\n        Console.WriteLine(\"for\");\n        sw.Start();\n        long sum=0;\n        for(int n=0;n<cores;n++){\n            uint esum=0;\n            for(uint i=0;i<maxsum;i++){\n                esum++;\n            }\n            sum+=esum;\n        }\n        sw.Stop();\n        Console.WriteLine($\"time: {sw.ElapsedMilliseconds}ms\");\n        Console.WriteLine(\"{0}\",sum);\n\n        sw.Reset();\n\n        Console.WriteLine(\"ConvertAll Task\");\n        sw.Start();\n        sum=0;\n        var Taskss=Array.ConvertAll(new object[cores],n=>Task.Run(()=>{\n            uint esum=0;\n            for(uint i=0;i<maxsum;i++){\n                esum++;\n            }\n            sum+=esum;\n        }));\n        Task.WaitAll(Taskss);\n        sw.Stop();\n        Console.WriteLine($\"time: {sw.ElapsedMilliseconds}ms\");\n        Console.WriteLine(\"{0}\",sum);\n\n        sw.Reset();\n\n        Console.WriteLine(\"Parallel.For\");\n        sw.Start();\n        sum=0;\n        Parallel.For(0,cores,(n)=>{\n            uint esum=0;\n            for(uint i=0;i<maxsum;i++){\n                esum++;\n            }\n            sum+=esum;\n        });\n        sw.Stop();\n        Console.WriteLine($\"time: {sw.ElapsedMilliseconds}ms\");\n        Console.WriteLine(\"{0}\",sum);\n    }\n}\n\n\nVisualBasic.NET\nOption Strict On\nImports System.Console\nImports System.Diagnostics\nImports System.Threading.Tasks\n\nModule Program\n    Dim sw As New StopWatch\n    Const cores As Integer=4\n    Dim maxsum As Long=5000000000\n\n    Sub Main\n        maxsum\\=cores\n\n        WriteLine(\"For\")\n        sw.Start()\n        Dim sum As Long=0\n        For n As Integer=0 To cores-1\n            Dim esum As UInteger=0\n            For i As UInteger=0 To CUInt(maxsum-1)\n                esum+=CUInt(1)\n            Next\n            sum+=esum\n        Next\n        sw.Stop()\n        WriteLine($\"time: {sw.ElapsedMilliseconds}ms\")\n        WriteLine(\"{0}\",sum)\n\n        sw.Reset()\n\n        WriteLine(\"CovertAll Task\")\n        sw.Start()\n        sum=0\n        Dim Taskes=Array.ConvertAll(New Object(cores-1){},Function(n)Task.Run(Sub()\n            Dim esum As UInteger=0\n            For i As UInteger=0 To CUInt(maxsum-1)\n                esum+=CUInt(1)\n            Next\n            sum+=esum\n        End Sub))\n        Task.WaitAll(Taskes)\n        sw.Stop()\n        WriteLine($\"time: {sw.ElapsedMilliseconds}ms\")\n        WriteLine(\"{0}\",sum)\n\n        sw.Reset()\n\n        WriteLine(\"Parallel.For\")\n        sw.Start()\n        sum=0\n        Parallel.For(0,cores,Sub(n)\n            Dim esum As UInteger=0\n            For i As UInteger=0 To CUInt(maxsum-1)\n                esum+=CUInt(1)\n            Next\n            sum+=esum\n        End Sub)\n        sw.Stop()\n        WriteLine($\"time: {sw.ElapsedMilliseconds}ms\")\n        WriteLine(\"{0}\",sum)\n    End Sub\nEnd Module\n\n\nNode.js(JavaScript)\n\"use strict\";\nvar cluster=require(\"cluster\");\n\nconst cores=4;\nvar maxsum=5000000000;\n\nfunction main(){\n    maxsum/=cores;\n\n    console.log(\"for\");\n    console.time(\"time\");\n    var sum=0\n    for(var n=0;n<cores;n++){\n        var esum=0;\n        for(var i=0;i<maxsum;i++){\n            esum++;\n        }\n        sum+=esum;\n    }\n    console.timeEnd(\"time\");\n    console.log(\"%d\",sum);\n\n    console.log(\"map Promise\");\n    console.time(\"time\");\n    sum=0;\n    var Promises=new Array(cores).fill().map(n=>new Promise(resolve=>{\n        var esum=0\n        for(var i=0;i<maxsum;i++){\n            esum++;\n        }\n        sum+=esum;\n        resolve();\n    }));\n    Promise.all(Promises).then(()=>{\n        console.timeEnd(\"time\");\n        console.log(\"%d\",sum);\n\n        console.log(\"map cluster\");\n        console.time(\"time\");\n        sum=0;\n        var clusters=Array(cores).fill().map(n=>new Promise(resolve=>{\n            cluster.setupMaster({args:[maxsum]});\n            cluster.fork().once(\"message\",esum=>{\n                sum+=esum;\n                resolve();\n            });\n        }));\n        Promise.all(clusters).then(()=>{\n            console.timeEnd(\"time\");\n            console.log(\"%d\",sum);\n        });\n    });\n}\n\nif(cluster.isWorker){\n    maxsum=parseInt(process.argv[2]);\n    var esum=0\n    for(var i=0;i<maxsum;i++){\n        esum++;\n    }\n    process.send(esum);\n    cluster.worker.kill();\n    process.exit();\n}\n\nmain();\n\n\nHSP\n#packopt name \"timeHsp\"\n#runtime \"hsp3cl\"\n#uselib \"Kernel32\"\n#cfunc global GetTickCount \"GetTickCount\"\n#include \"mist.hsp\"\n\n#const global cores 4\nmaxsum=5000000000.0\n\n#module Program\n    #deffunc main\n        maxsum@/=100\n        maxsum@/=cores\n\n        mes \"repeat\"\n        sw=GetTickCount()\n        sum=0.0\n        repeat cores\n            esum=0.0\n            repeat maxsum@\n                esum+=100\n            loop\n            sum+=esum\n        loop\n        mes \"time: \"+(GetTickCount()-sw)+\"ms\"\n        mes strf(\"%.0f\",sum)\n\n        mes \"repert for\"\n        sw=GetTickCount()\n        sum=0.0\n        repeat cores\n            esum=0.0\n            for i,0,maxsum@\n                esum+=100\n            next\n            sum+=esum\n        loop\n        mes \"time: \"+(GetTickCount()-sw)+\"ms\"\n        mes strf(\"%.0f\",sum)\n\n        mes \"repert mstThread\"\n        sw=GetTickCount()\n        mstOpenHspLib\n        sum=0.0\n        mstBind \"sum\",sum\n        mstCompile {\"\n            #deffunc worker int maxsum,local esum\n                esum=0.0\n                repeat maxsum\n                    esum+=100\n                loop\n                sum+=esum\n            return\n        \"}\n        mstSetWorkerNum cores\n        repeat cores\n            mstThreadCall \"worker\",maxsum@\n        loop\n        mstThreadJoin\n        mes \"time: \"+(GetTickCount()-sw)+\"ms\"\n        mes strf(\"%.0f\",sum)\n    return\n#global\n\nmain\n\n\nPython\nimport time\nimport functools\nimport concurrent.futures\nfutures=concurrent.futures\n\ncores=4\nmaxsum=5000000000\n\ndef main():\n    global maxsum\n    maxsum/=100\n    maxsum=int(maxsum/cores)\n\n    print(\"for\")\n    sw=time.time()\n    sum=0\n    for n in range(0,cores):\n        esum=0\n        for i in range(0,maxsum):\n            esum+=100\n        sum+=esum\n    print(\"time: {0:.2f}ms\".format((time.time()-sw)*1000))\n    print(\"sum: {0}\".format(sum))\n\n    print(\"map future Thread\")\n    with futures.ThreadPoolExecutor() as TP:\n        sw=time.time()\n        sum=0\n        workers=list(map(lambda n:TP.submit(worker,maxsum),range(0,cores)))\n        for esum in futures.wait(workers)[0]:\n            sum+=esum.result()\n        print(\"time: {0:.2f}ms\".format((time.time()-sw)*1000))\n        print(\"sum: {0}\".format(sum))\n\n    print(\"map future Process\")\n    with futures.ProcessPoolExecutor() as TP:\n        sw=time.time()\n        sum=0\n        workers=list(map(lambda n:TP.submit(worker,maxsum),range(0,cores)))\n        for esum in futures.wait(workers)[0]:\n            sum+=esum.result()\n        print(\"time: {0:.2f}ms\".format((time.time()-sw)*1000))\n        print(\"sum: {0}\".format(sum))\n\ndef worker(maxsum):\n    esum=0\n    for i in range(0,maxsum):\n        esum+=100\n    return esum\n\nif __name__==\"__main__\":\n    main()\n\n\nRuby\nrequire \"thwait\"\nrequire \"benchmark\"\n\n@cores=4\n@maxsum=5000000000\n\ndef main()\n    puts \"for\"\n    @maxsum/=100\n    @maxsum/=@cores\n\n    sw=Benchmark.realtime do\n        @sum=0\n        for n in 0..@cores-1\n            esum=0\n            for i in 0..@maxsum-1\n                esum+=100\n            end\n            @sum+=esum\n        end\n    end\n    puts \"time: #{(sw*1000).round(2)}ms\"\n    puts @sum\n\n    puts \"for Thread\"\n    sw2=Benchmark.realtime do\n        @sum=0\n        @threads=[]\n        for n in 0..@cores-1\n            @threads.push(Thread.new do\n                esum=0\n                for i in 0..@maxsum-1\n                    esum+=100\n                end\n                @sum+=esum\n            end)\n        end\n        ThreadsWait.all_waits(*@threads)\n    end\n    puts \"time: #{(sw2*1000).round(2)}ms\"\n    puts @sum\nend\n\nmain()\n\n\u91cd\u3044\u51e6\u7406\u306f\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3068\u304b\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30b9\u3067Prallel\u51e6\u7406\u3092\u884c\u3046\u7269\u3068\u306f\u826f\u304f\u805e\u304f\u8a71\u3002\n\u3058\u3083\u3042\u3001\u3069\u3053\u307e\u3067\u901f\u5ea6\u304c\u6539\u5584\u3055\u308c\u308b\u306e?\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u5b9f\u6e2c\u3057\u3066\u307f\u308b\u3002\n(\u3064\u3044\u3067\u306b\u8a00\u8a9e\u3054\u3068\u306e\u901f\u5ea6\u30c6\u30b9\u30c8\u3082)\nParallel\u51e6\u7406\u306f\u52ff\u8ad6\u306e\u3053\u3068\u3001\u305d\u308c\u4ee5\u5916\u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u51e6\u7406\u304c\u4f7f\u3048\u308b\u3082\u306e\u306f\u305d\u3061\u3089\u3067\u3082\u30c6\u30b9\u30c8\u3002\nHSP\u4ee5\u5916\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u307f\u3092\u4f7f\u7528\u3059\u308b\u3002\n\n# \u5b9f\u884c\u6761\u4ef6\nOS:Windows7 32bit\n\u30b3\u30a2\u6570:4\n\nC++:Microsoft(R) C/C++ Optimizing Compiler Version 19.00.24215.1\nD:DMD32 D Compiler v2.066.1\nC#:Microsoft (R) Visual C# Compiler \u30d0\u30fc\u30b8\u30e7\u30f3 1.3.1.60616\nVB:Microsoft (R) Visual Basic Compiler \u30d0\u30fc\u30b8\u30e7\u30f3 1.3.1.60616\nNode.js:node v7.3.0\nHSP:HSP 3.4\nPython:Python 3.6.0\nRuby:Ruby 2.3.1\n\n## \u51e6\u7406\u65b9\u6cd5\u4e00\u89a7\n* C++\n\t+ for(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\n\t+ future(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\n\t+ parallel for(OpenMP)(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\n* D\n\t+ for(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\n\t+ Thread(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\n\t+ parallel foreach(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\n* C<sapn>#</span>\n\t+ for(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\n\t+ Task(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\n\t+ Parallel.For(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\n* VisualBasic\n\t+ For(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\n\t+ Task(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\n\t+ Parallel.For(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\n* Node.js(JavaScript)\n\t+ for(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\n\t+ Promise(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\n\t+ cluster(\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30b9)\n* HSP\n\t+ repeat(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\n\t+ for(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\n\t+ mstThread(mist\u30d7\u30e9\u30b0\u30a4\u30f3)(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\n* Python\n\t+ for(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\n\t+ future Thread(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\n\t+ future Process(\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30b9)\n* Ruby\n\t+ for(\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9)\n\t+ Thread(\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9)\n\n## \u30c6\u30b9\u30c8\u5185\u5bb9\n2000000000\u56de\u53ca\u30735000000000\u56de\u306e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u51e6\u7406\u30924\u3064\u306b\u5206\u3051\u3066\u884c\u3046\u3002\n\u8a00\u8a9e\u3054\u3068\u306e\u5b9f\u88c5\u306f\u5f8c\u8ff0\u3059\u308b\u3002\n\n#\u5b9f\u884c\u7d50\u679c\n\n| \u8a08\u7b97\u56de\u6570[\u56de]        | 2,000,000,000 | 5,000,000,000 |\n|:--------------------|--------------:|--------------:|\n| **Language/Process** | **Time[ms]**  | **Time[ms]**  |\n| **C++**             |               |               |\n| for                 |             0 |          4593 |\n| future              |             0 |          2319 |\n| parallel for        |             0 |          2358 |\n| **D**               |               |               |\n| for                 |           646 |          4673 |\n| Thread              |           342 |          2351 |\n| parallel foreach    |           312 |          2345 |\n| **C<sapn>#</span>** |               |               |\n| for                 |           642 |          4577 |\n| Task                |           332 |          2539 |\n| Parallel.For        |           316 |          2465 |\n| **VisualBasic**     |               |               |\n| For                 |          1827 |          4716 |\n| Task                |           940 |          2506 |\n| Parallel.For        |           942 |          2414 |\n| **Node.js**         |               |               |\n| for                 |          2461 |          9485 |\n| Promise             |          2443 |          9499 |\n| cluster             |          1555 |          5517 |\n| **HSP**             |               |               |\n| repeat              |        106000 |        282400 |\n| for                 |        326000 |        951600 |\n| mstThread           |         59300 |        215300 |\n| **Python**          |               |               |\n| for                 |        197500 |        499000 |\n| future Thread       |        205800 |        498500 |\n| future Process      |        134400 |        272600 |\n| **Ruby**            |               |               |\n| for                 |        160900 |        485100 |\n| Thread              |        158800 |        468100 |\n\n\u203bHSP\u3001Python\u3001Ruby\u306f\u51e6\u7406\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\u3001\u51e6\u7406\u91cf\u3092100\u5206\u306e1(100\u305a\u3064\u52a0\u7b97)\u306b\u3057\u3001\u305d\u306e\u4ee3\u308f\u308a\u8a08\u6e2c\u6642\u9593\u3092100\u500d\u3068\u3057\u3066\u3044\u308b\u3002\n\n# \u3042\u3068\u304c\u304d\n## \u7d50\u679c\u306b\u3064\u3044\u3066\n\u57fa\u672c\u7684\u306b\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3084\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30b9\u306f\u6709\u52b9\u3067\u30014\u500d\u307e\u3067\u3068\u306f\u8a00\u308f\u306a\u3044\u3082\u306e\u306e\u5927\u3088\u305d2\u500d\u7a0b\u5ea6\u307e\u3067\u306f\u901f\u5ea6\u3092\u5f15\u304d\u4e0a\u3052\u3089\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3002\nThread\u3092\u4f7f\u3063\u3066\u3082Prallel\u3092\u4f7f\u3063\u3066\u3082\u52b9\u529b\u3068\u3057\u3066\u306f\u540c\u7a0b\u5ea6\u3002\n\u5fc5\u8981\u306a\u3089\u3069\u3061\u3089\u3092\u4f7f\u3063\u3066\u3082\u826f\u3044\u306e\u304b\u306a\u3002\n\u305f\u3060\u3057\u3001Python\u3068Ruby\u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306b\u95a2\u3057\u3066\u306f\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3068\u3042\u307e\u308a\u5909\u308f\u308b\u7d50\u679c\u3068\u306f\u306a\u3089\u306a\u304b\u3063\u305f\u3002Ruby\u306f\u540c\u6642\u306b\u4e00\u3064\u307e\u3067\u3057\u304b\u30b9\u30ec\u30c3\u30c9\u3092\u52d5\u304b\u305b\u306a\u3044\u3068\u304b\u805e\u3044\u305f\u3051\u308c\u3069\u3001Python\u3082\u305d\u3046\u3044\u3046\u3053\u3068\u306a\u306e\u304b\u306a\u3002\n\u3061\u306a\u307f\u306bJavaScript\u306ePromise\u306b\u3064\u3044\u3066\u306f\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u306a\u306e\u3067\u305d\u306e\u307e\u3093\u307e\u3068\u3044\u3046\u6240\u3002\n\n## \u8a00\u8a9e\u3054\u3068\u306e\u8a08\u7b97\u901f\u5ea6\u306b\u3064\u3044\u3066\n\u4eca\u56de\u8272\u3005\u8a66\u3057\u3066\u3044\u3066\u3001\u5358\u7d14\u306a\u30eb\u30fc\u30d7\u3084\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u901f\u5ea6\u3082\u898b\u3066\u307f\u305f\u3002\n\u9759\u7684\u578b\u4ed8\u3051\u8a00\u8a9e\u306b\u3064\u3044\u3066\u306f\u578b\u306e\u91cd\u8981\u3055\u304c\u898b\u3066\u53d6\u308c\u305f\u3002\n\u30c7\u30fc\u30bf\u306f\u9332\u3063\u3066\u3044\u306a\u3044\u304c\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u5834\u5408\u306f\u4e00\u822c\u7684\u306b\u6574\u6570\u578b\u306e\u65b9\u304c\u6d6e\u904a\u5c0f\u6570\u70b9\u578b\u306b\u6bd4\u3079\u3001\u65e9\u304f\u306a\u308b\u50be\u5411\u304c\u3042\u308b\u307f\u305f\u3044\u3060\u3002\n\u307e\u305f\u3001\u540c\u3058\u6574\u6570\u578b\u3067\u3082long\u3088\u308a\u3082int\u306e\u65b9\u304c\u901f\u304f\u306a\u308b\u69d8\u5b50\u3002\n\u7279\u306bC++\u306e\u901f\u5ea6\u306e\u4f4e\u4e0b\u3063\u3077\u308a\u306f\u8457\u3057\u3044\u3002\n\u305d\u308c\u3067\u3082\u3001D\u3001C#\u3001VB\u3068\u4e26\u3093\u3067\u3044\u308b\u4f4d\u306a\u306e\u3067\u3001\u9045\u304f\u306f\u306a\u3044\u3051\u3069\u3002\n\n\u3042\u3068\u306f\u3001D\u8a00\u8a9e\u3068C#\u306e\u5dee\u7570\u306b\u306f\u3042\u308c\u3063?\u3068\u8a00\u3046\u611f\u3058\u3002\nC++\u3068D\u8a00\u8a9e\u306f\u30cd\u30a4\u30c6\u30a3\u30d6\u30b3\u30f3\u30d1\u30a4\u30eb\u306a\u306e\u3067\u3001\u4e2d\u9593\u8a00\u8a9e\u578b\u306e.NET\u8a00\u8a9e\u306b\u5bfe\u3057\u3066\u306f\u660e\u78ba\u306a\u5dee\u304c\u51fa\u308b\u3068\u601d\u3063\u3066\u3044\u305f\u3002\n\n\u305d\u308c\u3068\u3001C#\u3068\u307b\u307c\u540c\u3058\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u306bVB\u304c\u9045\u304b\u3063\u305f\u3053\u3068\u306b\u30d3\u30c3\u30af\u30ea\u3068\u3044\u3046\u304b\u6b8b\u5ff5\u3060\u3063\u305f\u3002\n\u751f\u6210\u3055\u308c\u308b\u30a2\u30bb\u30f3\u30d6\u30ea\u3068\u304b\u89e3\u8aad\u3059\u308c\u3070\u539f\u56e0\u306f\u308f\u304b\u308b\u306e\u3060\u308d\u3046\u304b\u3002\n\n* \u8ffd\u8a18:CIL\u306b\u5909\u63db\u3057\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u8997\u3044\u3066\u307f\u305f\u3002  \n  \u6b63\u76f4\u3001\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3051\u3069\u3001\u5927\u307e\u304b\u306e\u6d41\u308c\u306f\u4f3c\u3066\u3044\u308b\u3002  \n  \u3057\u304b\u3057\u3001\u898b\u3066\u3044\u304f\u3068C#\u3067\u306fadd\u3068\u306a\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u304cVB\u3067\u306fadd.ovf\u3068\u306a\u3063\u3066\u3044\u305f\u3002  \n  \u3053\u308c\u306f\u3001\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306e\u691c\u67fb\u3092\u3059\u308b\u3082\u306e\u3089\u3057\u304f\u3001\u305d\u308c\u304cVB\u3067\u306f\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u3068\u306a\u3063\u3066\u3044\u305f\u306e\u304b\u306a\u3041\u3068\u60f3\u50cf\u3059\u308b\u3002\n\n\u6b21\u306bNode.js\u3002\n\u9759\u7684\u8a00\u8a9e\u52e2\u306b\u4f55\u3060\u304b\u3093\u3060\u5927\u5dee\u4ed8\u3051\u3089\u308c\u3066\u3044\u306a\u3044\u3042\u305f\u308a\u6d41\u77f3JIT\u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3002\n\u306a\u304a\u3001\u30d3\u30c3\u30c8\u8ad6\u7406\u548c\u6f14\u7b97\u5b50(\"|\")\u30680\u3067\u5c0f\u7d30\u5de5\u3057\u3066\u5185\u90e8\u7684\u306b\u6574\u6570\u578b\u306b\u56fa\u5b9a\u3055\u305b\u308b\u3068\u50c5\u304b\u306b\u901f\u5ea6\u304c\u4e0a\u304c\u308b\u307f\u305f\u3044\u3002\n(asm.js\u306e\u578b\u6307\u5b9a\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u3082\u306e\u3089\u3057\u3044)\n\u7d50\u679c\u306f\u8f09\u305b\u3066\u306a\u3044\u3051\u3069\u30012000000000\u56de\u306e\u8a08\u7b97\u6642\u70b9\u3067100\uff5e200ms\u306e\u5dee\u304c\u51fa\u3066\u3044\u308b\u3002\n\u3057\u304b\u3057\u3001\u8a08\u7b97\u56de\u6570\u304c5000000000\u56de\u306e\u6642\u3067\u306f\u8fd4\u3063\u30662\u500d\u304f\u3089\u3044\u9045\u304f\u306a\u3063\u305f\u306e\u3067\u305d\u3061\u3089\u3067\u306f\u666e\u901a\u306e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3068\u3057\u305f\u3002\n\u3042\u3068\u306f\u3001\u6574\u6570\u7dad\u6301\u3057\u7d9a\u3051\u308b\u3068\u666e\u901a\u306b\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3059\u308b\u3002\n\nHSP\u3002\n\u805e\u3044\u3066\u3044\u305f\u8a71\u3060\u3051\u3069\u3001for\u30de\u30af\u30ed\u306f\u975e\u5e38\u306b\u9045\u3044\u3002\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u306f\u8a00\u3063\u3066\u3082\u7d50\u5c40\u306f\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u8a00\u8a9e\u306a\u305f\u3081\u3001\u901f\u5ea6\u306f\u304a\u5bdf\u3057\u3002\nint\u3092\u4f7f\u3044\u7d9a\u3051\u308b\u3068\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3059\u308b\u3051\u3069\u3001double\u3092\u4f7f\u3063\u3066\u3082\u901f\u5ea6\u7684\u306b\u76ee\u7acb\u3063\u305f\u5927\u5dee\u306f\u306a\u3044\u307f\u305f\u3044\u3060\u3002\n\nRuby\u3001Python\u3002\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u7684\u306b\u306f\u4f3c\u305f\u308a\u5bc4\u3063\u305f\u308a\u306a\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u8a00\u8a9e\u4e8c\u3064\u3002\nRuby\u306e\u65b9\u304c\u5fae\u5999\u306b\u65e9\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u3002\n\n# \u5b9f\u88c5\n## 2,000,000,000\u56de\u7248\n### C++\n```cpp:\n#include<iostream>\n#include<vector>\n#include<thread>\n#include<future>\n#include<omp.h>\nusing namespace std;\nusing namespace std::chrono;\n\nconst int cores=4;\nint maxsum=2000000000;\n\nint main(){\n\tmaxsum/=cores;\n\tint sum=0;\n\n\tcout<<\"for\"<<endl;\n\tauto sw0=system_clock::now();\n\tfor(int n=0;n<cores;n++){\n\t\tint esum=0;\n\t\tfor(int i=0;i<maxsum;i++){\n\t\t\tesum++;\n\t\t}\n\t\tsum+=esum;\n\t}\n\tauto sw=duration_cast<milliseconds>(system_clock::now()-sw0).count();\n\tcout<<\"time: \"<<sw<<\"ms\"<<endl;\n\tcout<<sum<<endl;\n\n\tcout<<\"for future\"<<endl;\n\tsw0=system_clock::now();\n\tsum=0;\n\tvector<future<void>> futures;\n\tfor(int n=0;n<cores;n++){\n\t\tfutures.push_back(async(launch::async,[&]{\n\t\t\tint esum=0;\n\t\t\tfor(int i=0;i<maxsum;i++){\n\t\t\t\tesum++;\n\t\t\t}\n\t\t\tsum+=esum;\n\t\t}));\n\t}\n\tfor(auto &t:futures){\n\t\tt.wait();\n\t}\n\tsw=duration_cast<milliseconds>(system_clock::now()-sw0).count();\n\tcout<<\"time: \"<<sw<<\"ms\"<<endl;\n\tcout<<sum<<endl;\n\n\tcout<<\"OpenMP parallel for\"<<endl;\n\tsw0=system_clock::now();\n\tsum=0;\n\t#pragma omp parallel for reduction(+:sum)\n\tfor(int n=0;n<cores;n++){\n\t\tint esum=0;\n\t\tfor(int i=0;i<maxsum;i++){\n\t\t\tesum++;\n\t\t}\n\t\tsum+=esum;\n\t}\n\tsw=duration_cast<milliseconds>(system_clock::now()-sw0).count();\n\tcout<<\"time: \"<<sw<<\"ms\"<<endl;\n\tcout<<sum<<endl;\n}\n```\n\n### D\n```d:\nimport std.stdio;\nimport std.datetime;\nimport core.thread;\nimport std.parallelism;\nimport std.range;\nimport std.array;\n\nStopWatch sw;\nimmutable int cores=4;\nint maxsum=2000000000;\n\nvoid main(){\n\tmaxsum/=cores;\n\tint maxsum=maxsum;\n\n\twriteln(\"for\");\n\tsw.start();\n\tint sum=0;\n\tfor(int n=0;n<cores;n++){\n\t\tint esum=0;\n\t\tfor(int i=0;i<maxsum;i++){\n\t\t\tesum++;\n\t\t}\n\t\tsum+=esum;\n\t}\n\tsw.stop();\n\twriteln(\"time: \",sw.peek().to!(\"msecs\",real)(),\"ms\");\n\twritefln(\"%d\",sum);\n\n\tsw.reset();\n\n\twriteln(\"for Thread\");\n\tsw.start();\n\tsum=0;\n\tauto tg=new ThreadGroup();\n\n\tfor(int n;n<cores;n++){\n\t\tauto t=new Thread(delegate(){\n\t\t\tint esum=0;\n\t\t\tfor(int i=0;i<maxsum;i++){\n\t\t\t\tesum++;\n\t\t\t}\n\t\t\tsum+=esum;\n\t\t});\n\t\ttg.add(t);\n\t\tt.start();\n\t}\n\ttg.joinAll();\n\tsw.stop();\n\twriteln(\"time: \",sw.peek().to!(\"msecs\",real)(),\"ms\");\n\twritefln(\"%d\",sum);\n\n\tsw.reset();\n\twriteln(\"foreach parallel\");\n\tsw.start();\n\tsum=0;\n\tforeach(n;parallel(cores.iota.array)){\n\t\tint esum=0;\n\t\tfor(int i=0;i<maxsum;i++){\n\t\t\tesum++;\n\t\t}\n\t\tsum+=esum;\n\t}\n\tsw.stop();\n\twriteln(\"time: \",sw.peek().to!(\"msecs\",real)(),\"ms\");\n\twritefln(\"%d\",sum);\n}\n```\n\n### C<span>#</span>\n```csharp:\nusing System;\nusing System.Diagnostics;\nusing System.Threading.Tasks;\n\nstatic class Program{\n\tstatic Stopwatch sw=new Stopwatch();\n\tconst int cores=4;\n\tstatic int maxsum=2000000000;\n\n\tstatic void Main(){\n\t\tmaxsum/=cores;\n\n\t\tConsole.WriteLine(\"for\");\n\t\tsw.Start();\n\t\tint sum=0;\n\t\tfor(int n=0;n<cores;n++){\n\t\t\tint esum=0;\n\t\t\tfor(int i=0;i<maxsum;i++){\n\t\t\t\tesum++;\n\t\t\t}\n\t\t\tsum+=esum;\n\t\t}\n\t\tsw.Stop();\n\t\tConsole.WriteLine($\"time: {sw.ElapsedMilliseconds}ms\");\n\t\tConsole.WriteLine(\"{0}\",sum);\n\n\t\tsw.Reset();\n\n\t\tConsole.WriteLine(\"ConvertAll Task\");\n\t\tsw.Start();\n\t\tsum=0;\n\t\tvar Taskss=Array.ConvertAll(new object[cores],n=>Task.Run(()=>{\n\t\t\tint esum=0;\n\t\t\tfor(int i=0;i<maxsum;i++){\n\t\t\t\tesum++;\n\t\t\t}\n\t\t\tsum+=esum;\n\t\t}));\n\t\tTask.WaitAll(Taskss);\n\t\tsw.Stop();\n\t\tConsole.WriteLine($\"time: {sw.ElapsedMilliseconds}ms\");\n\t\tConsole.WriteLine(\"{0}\",sum);\n\n\t\tsw.Reset();\n\n\t\tConsole.WriteLine(\"Parallel.For\");\n\t\tsw.Start();\n\t\tsum=0;\n\t\tParallel.For(0,cores,(n)=>{\n\t\t\tint esum=0;\n\t\t\tfor(int i=0;i<maxsum;i++){\n\t\t\t\tesum++;\n\t\t\t}\n\t\t\tsum+=esum;\n\t\t});\n\t\tsw.Stop();\n\t\tConsole.WriteLine($\"time: {sw.ElapsedMilliseconds}ms\");\n\t\tConsole.WriteLine(\"{0}\",sum);\n\t}\n}\n```\n\n### VisualBasic.NET\n```vbnet:\nOption Strict On\nImports System.Console\nImports System.Diagnostics\nImports System.Threading.Tasks\n\nModule Program\n\tDim sw As New StopWatch\n\tConst cores As Integer=4\n\tDim maxsum As Integer=2000000000\n\n\tSub Main\n\t\tmaxsum\\=cores\n\n\t\tWriteLine(\"For\")\n\t\tsw.Start()\n\t\tDim sum As Integer=0\n\t\tFor n As Integer=0 To cores-1\n\t\t\tDim esum As Integer=0\n\t\t\tFor i As Integer=0 To maxsum-1\n\t\t\t\tesum+=1\n\t\t\tNext\n\t\t\tsum+=esum\n\t\tNext\n\t\tsw.Stop()\n\t\tWriteLine($\"time: {sw.ElapsedMilliseconds}ms\")\n\t\tWriteLine(\"{0}\",sum)\n\n\t\tsw.Reset()\n\n\t\tWriteLine(\"CovertAll Task\")\n\t\tsw.Start()\n\t\tsum=0\n\t\tDim Taskes=Array.ConvertAll(New Object(cores-1){},Function(n)Task.Run(Sub()\n\t\t\tDim esum As Integer=0\n\t\t\tFor i As Integer=0 To maxsum-1\n\t\t\t\tesum+=1\n\t\t\tNext\n\t\t\tsum+=esum\n\t\tEnd Sub))\n\t\tTask.WaitAll(Taskes)\n\t\tsw.Stop()\n\t\tWriteLine($\"time: {sw.ElapsedMilliseconds}ms\")\n\t\tWriteLine(\"{0}\",sum)\n\n\t\tsw.Reset()\n\n\t\tWriteLine(\"Parallel.For\")\n\t\tsw.Start()\n\t\tsum=0\n\t\tParallel.For(0,cores,Sub(n)\n\t\t\tDim esum As Integer=0\n\t\t\tFor i As Integer=0 To maxsum-1\n\t\t\t\tesum+=1\n\t\t\tNext\n\t\t\tsum+=esum\n\t\tEnd Sub)\n\t\tsw.Stop()\n\t\tWriteLine($\"time: {sw.ElapsedMilliseconds}ms\")\n\t\tWriteLine(\"{0}\",sum)\n\tEnd Sub\nEnd Module\n```\n\n### Node.js(JavaScript)\n```js:\n\"use strict\";\nvar cluster=require(\"cluster\");\n\nconst cores=4;\nvar maxsum=2000000000;\n\nfunction main(){\n\tmaxsum/=cores;\n\n\tconsole.log(\"for\");\n\tconsole.time(\"time\");\n\tvar sum=0\n\tfor(var n=0;n<cores;n=0|n+1){\n\t\tvar esum=0;\n\t\tfor(var i=0;i<maxsum;i=0|i+1){\n\t\t\tesum=0|esum+1;\n\t\t}\n\t\tsum=0|sum+esum;\n\t}\n\tconsole.timeEnd(\"time\");\n\tconsole.log(\"%d\",sum);\n\n\tconsole.log(\"map Promise\");\n\tconsole.time(\"time\");\n\tsum=0;\n\tvar Promises=new Array(cores).fill().map(n=>new Promise(resolve=>{\n\t\tvar esum=0\n\t\tfor(var i=0;i<maxsum;i=0|i+1){\n\t\t\tesum=0|esum+1;\n\t\t}\n\t\tsum=0|sum+esum;\n\t\tresolve();\n\t}));\n\tPromise.all(Promises).then(()=>{\n\t\tconsole.timeEnd(\"time\");\n\t\tconsole.log(\"%d\",sum);\n\n\t\tconsole.log(\"map cluster\");\n\t\tconsole.time(\"time\");\n\t\tsum=0;\n\t\tvar clusters=Array(cores).fill().map(n=>new Promise(resolve=>{\n\t\t\tcluster.setupMaster({args:[maxsum]});\n\t\t\tcluster.fork().once(\"message\",esum=>{\n\t\t\t\tsum=0|sum+esum;\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}));\n\t\tPromise.all(clusters).then(()=>{\n\t\t\tconsole.timeEnd(\"time\");\n\t\t\tconsole.log(\"%d\",sum);\n\t\t});\n\t});\n}\n\nif(cluster.isWorker){\n\tmaxsum=parseInt(process.argv[2]);\n\tvar esum=0;\n\tfor(var i=0;i<maxsum;i=0|i+1){\n\t\tesum=0|esum+1;\n\t}\n\tprocess.send(esum);\n\tcluster.worker.kill();\n\tprocess.exit();\n}\n\nmain();\n```\n\n### HSP\n```objc++:\n#packopt name \"timeHsp\"\n#runtime \"hsp3cl\"\n#uselib \"Kernel32\"\n#cfunc global GetTickCount \"GetTickCount\"\n#include \"mist.hsp\"\n\n#const global cores 4\nmaxsum=2000000000\n\n#module Program\n\t#deffunc main\n\t\tmaxsum@/=100\n\t\tmaxsum@/=cores\n\n\t\tmes \"repeat\"\n\t\tsw=GetTickCount()\n\t\tsum=0\n\t\trepeat cores\n\t\t\tesum=0\n\t\t\trepeat maxsum@\n\t\t\t\tesum+=100\n\t\t\tloop\n\t\t\tsum+=esum\n\t\tloop\n\t\tmes \"time: \"+(GetTickCount()-sw)+\"ms\"\n\t\tmes sum\n\n\t\tmes \"repert for\"\n\t\tsw=GetTickCount()\n\t\tsum=0\n\t\trepeat cores\n\t\t\tesum=0\n\t\t\tfor i,0,maxsum@\n\t\t\t\tesum+=100\n\t\t\tnext\n\t\t\tsum+=esum\n\t\tloop\n\t\tmes \"time: \"+(GetTickCount()-sw)+\"ms\"\n\t\tmes sum\n\n\t\tmes \"repert mstThread\"\n\t\tsw=GetTickCount()\n\t\tmstOpenHspLib\n\t\tsum=0\n\t\tmstBind \"sum\",sum\n\t\tmstCompile {\"\n\t\t\t#deffunc worker int maxsum,local esum\n\t\t\t\tesum=0\n\t\t\t\trepeat maxsum\n\t\t\t\t\tesum+=100\n\t\t\t\tloop\n\t\t\t\tsum+=esum\n\t\t\treturn\n\t\t\"}\n\t\tmstSetWorkerNum cores\n\t\trepeat cores\n\t\t\tmstThreadCall \"worker\",maxsum@\n\t\tloop\n\t\tmstThreadJoin\n\t\tmes \"time: \"+(GetTickCount()-sw)+\"ms\"\n\t\tmes sum\n\treturn\n#global\n\nmain\n```\n\n### Python\n```py3:\nimport time\nimport functools\nimport concurrent.futures\nfutures=concurrent.futures\n\ncores=4\nmaxsum=2000000000\n\ndef main():\n\tglobal maxsum\n\tmaxsum/=100\n\tmaxsum=int(maxsum/cores)\n\n\tprint(\"for\")\n\tsw=time.time()\n\tsum=0\n\tfor n in range(0,cores):\n\t\tesum=0\n\t\tfor i in range(0,maxsum):\n\t\t\tesum+=100\n\t\tsum+=esum\n\tprint(\"time: {0:.2f}ms\".format((time.time()-sw)*1000))\n\tprint(\"sum: {0}\".format(sum))\n\n\tprint(\"map future Thread\")\n\twith futures.ThreadPoolExecutor() as TP:\n\t\tsw=time.time()\n\t\tsum=0\n\t\tworkers=list(map(lambda n:TP.submit(worker,maxsum),range(0,cores)))\n\t\tfor esum in futures.wait(workers)[0]:\n\t\t\tsum+=esum.result()\n\t\tprint(\"time: {0:.2f}ms\".format((time.time()-sw)*1000))\n\t\tprint(\"sum: {0}\".format(sum))\n\n\tprint(\"map future Process\")\n\twith futures.ProcessPoolExecutor() as TP:\n\t\tsw=time.time()\n\t\tsum=0\n\t\tworkers=list(map(lambda n:TP.submit(worker,maxsum),range(0,cores)))\n\t\tfor esum in futures.wait(workers)[0]:\n\t\t\tsum+=esum.result()\n\t\tprint(\"time: {0:.2f}ms\".format((time.time()-sw)*1000))\n\t\tprint(\"sum: {0}\".format(sum))\n\ndef worker(maxsum):\n\tesum=0\n\tfor i in range(0,maxsum):\n\t\tesum+=100\n\treturn esum\n\nif __name__==\"__main__\":\n\tmain()\n```\n\n### Ruby\n```ruby:\nrequire \"thwait\"\nrequire \"benchmark\"\n\n@cores=4\n@maxsum=2000000000\n\ndef main()\n\tputs \"for\"\n\t@maxsum/=100\n\t@maxsum/=@cores\n\n\tsw=Benchmark.realtime do\n\t\t@sum=0\n\t\tfor n in 0..@cores-1\n\t\t\tesum=0\n\t\t\tfor i in 0..@maxsum-1\n\t\t\t\tesum+=100\n\t\t\tend\n\t\t\t@sum+=esum\n\t\tend\n\tend\n\tputs \"time: #{(sw*1000).round(2)}ms\"\n\tputs @sum\n\n\tputs \"for Thread\"\n\tsw2=Benchmark.realtime do\n\t\t@sum=0\n\t\t@threads=[]\n\t\tfor n in 0..@cores-1\n\t\t\t@threads.push(Thread.new do\n\t\t\t\tesum=0\n\t\t\t\tfor i in 0..@maxsum-1\n\t\t\t\t\tesum+=100\n\t\t\t\tend\n\t\t\t\t@sum+=esum\n\t\t\tend)\n\t\tend\n\t\tThreadsWait.all_waits(*@threads)\n\tend\n\tputs \"time: #{(sw2*1000).round(2)}ms\"\n\tputs @sum\nend\n\nmain()\n```\n\n\n\n## 5,000,000,000\u56de\u7248\n### C++\n```cpp:\n#include<iostream>\n#include<vector>\n#include<thread>\n#include<future>\n#include<omp.h>\nusing namespace std;\nusing namespace std::chrono;\n\nconst int cores=4;\nlong long maxsum=5000000000;\n\nint main(){\n\tmaxsum/=cores;\n\tlong long sum=0;\n\n\tcout<<\"for\"<<endl;\n\tauto sw0=system_clock::now();\n\tfor(int n=0;n<cores;n++){\n\t\tunsigned esum=0;\n\t\tfor(unsigned i=0;i<maxsum;i++){\n\t\t\tesum++;\n\t\t}\n\t\tsum+=esum;\n\t}\n\tauto sw=duration_cast<milliseconds>(system_clock::now()-sw0).count();\n\tcout<<\"time: \"<<sw<<\"ms\"<<endl;\n\tcout<<sum<<endl;\n\n\tcout<<\"for future\"<<endl;\n\tsw0=system_clock::now();\n\tsum=0;\n\tvector<future<void>> futures;\n\tfor(int n=0;n<cores;n++){\n\t\tfutures.push_back(async(launch::async,[&]{\n\t\t\tunsigned esum=0;\n\t\t\tfor(unsigned i=0;i<maxsum;i++){\n\t\t\t\tesum++;\n\t\t\t}\n\t\t\tsum+=esum;\n\t\t}));\n\t}\n\tfor(auto &t:futures){\n\t\tt.wait();\n\t}\n\tsw=duration_cast<milliseconds>(system_clock::now()-sw0).count();\n\tcout<<\"time: \"<<sw<<\"ms\"<<endl;\n\tcout<<sum<<endl;\n\n\tcout<<\"OpenMP parallel for\"<<endl;\n\tsw0=system_clock::now();\n\tsum=0;\n\t#pragma omp parallel for reduction(+:sum)\n\tfor(int n=0;n<cores;n++){\n\t\tunsigned esum=0;\n\t\tfor(unsigned i=0;i<maxsum;i++){\n\t\t\tesum++;\n\t\t}\n\t\tsum+=esum;\n\t}\n\tsw=duration_cast<milliseconds>(system_clock::now()-sw0).count();\n\tcout<<\"time: \"<<sw<<\"ms\"<<endl;\n\tcout<<sum<<endl;\n}\n```\n\n### D\n```d:\nimport std.stdio;\nimport std.datetime;\nimport core.thread;\nimport std.parallelism;\nimport std.range;\nimport std.array;\n\nStopWatch sw;\nimmutable int cores=4;\nlong maxsum=5000000000;\n\nvoid main(){\n\tmaxsum/=cores;\n\tlong maxsum=maxsum;\n\n\twriteln(\"for\");\n\tsw.start();\n\tlong sum=0;\n\tfor(int n=0;n<cores;n++){\n\t\tuint esum=0;\n\t\tfor(uint i=0;i<maxsum;i++){\n\t\t\tesum++;\n\t\t}\n\t\tsum+=esum;\n\t}\n\tsw.stop();\n\twriteln(\"time: \",sw.peek().to!(\"msecs\",real)(),\"ms\");\n\twritefln(\"%d\",sum);\n\n\tsw.reset();\n\n\twriteln(\"for Thread\");\n\tsw.start();\n\tsum=0;\n\tauto tg=new ThreadGroup();\n\n\tfor(int n;n<cores;n++){\n\t\tauto t=new Thread(delegate(){\n\t\t\tuint esum=0;\n\t\t\tfor(uint i=0;i<maxsum;i++){\n\t\t\t\tesum++;\n\t\t\t}\n\t\t\tsum+=esum;\n\t\t});\n\t\ttg.add(t);\n\t\tt.start();\n\t}\n\ttg.joinAll();\n\tsw.stop();\n\twriteln(\"time: \",sw.peek().to!(\"msecs\",real)(),\"ms\");\n\twritefln(\"%d\",sum);\n\n\tsw.reset();\n\twriteln(\"foreach parallel\");\n\tsw.start();\n\tsum=0;\n\tforeach(n;parallel(cores.iota.array)){\n\t\tuint esum=0;\n\t\tfor(uint i=0;i<maxsum;i++){\n\t\t\tesum++;\n\t\t}\n\t\tsum+=esum;\n\t}\n\tsw.stop();\n\twriteln(\"time: \",sw.peek().to!(\"msecs\",real)(),\"ms\");\n\twritefln(\"%d\",sum);\n}\n```\n\n### C<span>#</span>\n```csharp:\nusing System;\nusing System.Diagnostics;\nusing System.Threading.Tasks;\n\nstatic class Program{\n\tstatic Stopwatch sw=new Stopwatch();\n\tconst int cores=4;\n\tstatic long maxsum=5000000000;\n\n\tstatic void Main(){\n\t\tmaxsum/=cores;\n\n\t\tConsole.WriteLine(\"for\");\n\t\tsw.Start();\n\t\tlong sum=0;\n\t\tfor(int n=0;n<cores;n++){\n\t\t\tuint esum=0;\n\t\t\tfor(uint i=0;i<maxsum;i++){\n\t\t\t\tesum++;\n\t\t\t}\n\t\t\tsum+=esum;\n\t\t}\n\t\tsw.Stop();\n\t\tConsole.WriteLine($\"time: {sw.ElapsedMilliseconds}ms\");\n\t\tConsole.WriteLine(\"{0}\",sum);\n\n\t\tsw.Reset();\n\n\t\tConsole.WriteLine(\"ConvertAll Task\");\n\t\tsw.Start();\n\t\tsum=0;\n\t\tvar Taskss=Array.ConvertAll(new object[cores],n=>Task.Run(()=>{\n\t\t\tuint esum=0;\n\t\t\tfor(uint i=0;i<maxsum;i++){\n\t\t\t\tesum++;\n\t\t\t}\n\t\t\tsum+=esum;\n\t\t}));\n\t\tTask.WaitAll(Taskss);\n\t\tsw.Stop();\n\t\tConsole.WriteLine($\"time: {sw.ElapsedMilliseconds}ms\");\n\t\tConsole.WriteLine(\"{0}\",sum);\n\n\t\tsw.Reset();\n\n\t\tConsole.WriteLine(\"Parallel.For\");\n\t\tsw.Start();\n\t\tsum=0;\n\t\tParallel.For(0,cores,(n)=>{\n\t\t\tuint esum=0;\n\t\t\tfor(uint i=0;i<maxsum;i++){\n\t\t\t\tesum++;\n\t\t\t}\n\t\t\tsum+=esum;\n\t\t});\n\t\tsw.Stop();\n\t\tConsole.WriteLine($\"time: {sw.ElapsedMilliseconds}ms\");\n\t\tConsole.WriteLine(\"{0}\",sum);\n\t}\n}\n```\n\n### VisualBasic.NET\n```vbnet:\nOption Strict On\nImports System.Console\nImports System.Diagnostics\nImports System.Threading.Tasks\n\nModule Program\n\tDim sw As New StopWatch\n\tConst cores As Integer=4\n\tDim maxsum As Long=5000000000\n\n\tSub Main\n\t\tmaxsum\\=cores\n\n\t\tWriteLine(\"For\")\n\t\tsw.Start()\n\t\tDim sum As Long=0\n\t\tFor n As Integer=0 To cores-1\n\t\t\tDim esum As UInteger=0\n\t\t\tFor i As UInteger=0 To CUInt(maxsum-1)\n\t\t\t\tesum+=CUInt(1)\n\t\t\tNext\n\t\t\tsum+=esum\n\t\tNext\n\t\tsw.Stop()\n\t\tWriteLine($\"time: {sw.ElapsedMilliseconds}ms\")\n\t\tWriteLine(\"{0}\",sum)\n\n\t\tsw.Reset()\n\n\t\tWriteLine(\"CovertAll Task\")\n\t\tsw.Start()\n\t\tsum=0\n\t\tDim Taskes=Array.ConvertAll(New Object(cores-1){},Function(n)Task.Run(Sub()\n\t\t\tDim esum As UInteger=0\n\t\t\tFor i As UInteger=0 To CUInt(maxsum-1)\n\t\t\t\tesum+=CUInt(1)\n\t\t\tNext\n\t\t\tsum+=esum\n\t\tEnd Sub))\n\t\tTask.WaitAll(Taskes)\n\t\tsw.Stop()\n\t\tWriteLine($\"time: {sw.ElapsedMilliseconds}ms\")\n\t\tWriteLine(\"{0}\",sum)\n\n\t\tsw.Reset()\n\n\t\tWriteLine(\"Parallel.For\")\n\t\tsw.Start()\n\t\tsum=0\n\t\tParallel.For(0,cores,Sub(n)\n\t\t\tDim esum As UInteger=0\n\t\t\tFor i As UInteger=0 To CUInt(maxsum-1)\n\t\t\t\tesum+=CUInt(1)\n\t\t\tNext\n\t\t\tsum+=esum\n\t\tEnd Sub)\n\t\tsw.Stop()\n\t\tWriteLine($\"time: {sw.ElapsedMilliseconds}ms\")\n\t\tWriteLine(\"{0}\",sum)\n\tEnd Sub\nEnd Module\n```\n\n### Node.js(JavaScript)\n```js:\n\"use strict\";\nvar cluster=require(\"cluster\");\n\nconst cores=4;\nvar maxsum=5000000000;\n\nfunction main(){\n\tmaxsum/=cores;\n\n\tconsole.log(\"for\");\n\tconsole.time(\"time\");\n\tvar sum=0\n\tfor(var n=0;n<cores;n++){\n\t\tvar esum=0;\n\t\tfor(var i=0;i<maxsum;i++){\n\t\t\tesum++;\n\t\t}\n\t\tsum+=esum;\n\t}\n\tconsole.timeEnd(\"time\");\n\tconsole.log(\"%d\",sum);\n\n\tconsole.log(\"map Promise\");\n\tconsole.time(\"time\");\n\tsum=0;\n\tvar Promises=new Array(cores).fill().map(n=>new Promise(resolve=>{\n\t\tvar esum=0\n\t\tfor(var i=0;i<maxsum;i++){\n\t\t\tesum++;\n\t\t}\n\t\tsum+=esum;\n\t\tresolve();\n\t}));\n\tPromise.all(Promises).then(()=>{\n\t\tconsole.timeEnd(\"time\");\n\t\tconsole.log(\"%d\",sum);\n\n\t\tconsole.log(\"map cluster\");\n\t\tconsole.time(\"time\");\n\t\tsum=0;\n\t\tvar clusters=Array(cores).fill().map(n=>new Promise(resolve=>{\n\t\t\tcluster.setupMaster({args:[maxsum]});\n\t\t\tcluster.fork().once(\"message\",esum=>{\n\t\t\t\tsum+=esum;\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}));\n\t\tPromise.all(clusters).then(()=>{\n\t\t\tconsole.timeEnd(\"time\");\n\t\t\tconsole.log(\"%d\",sum);\n\t\t});\n\t});\n}\n\nif(cluster.isWorker){\n\tmaxsum=parseInt(process.argv[2]);\n\tvar esum=0\n\tfor(var i=0;i<maxsum;i++){\n\t\tesum++;\n\t}\n\tprocess.send(esum);\n\tcluster.worker.kill();\n\tprocess.exit();\n}\n\nmain();\n```\n\n### HSP\n```objc++:\n#packopt name \"timeHsp\"\n#runtime \"hsp3cl\"\n#uselib \"Kernel32\"\n#cfunc global GetTickCount \"GetTickCount\"\n#include \"mist.hsp\"\n\n#const global cores 4\nmaxsum=5000000000.0\n\n#module Program\n\t#deffunc main\n\t\tmaxsum@/=100\n\t\tmaxsum@/=cores\n\n\t\tmes \"repeat\"\n\t\tsw=GetTickCount()\n\t\tsum=0.0\n\t\trepeat cores\n\t\t\tesum=0.0\n\t\t\trepeat maxsum@\n\t\t\t\tesum+=100\n\t\t\tloop\n\t\t\tsum+=esum\n\t\tloop\n\t\tmes \"time: \"+(GetTickCount()-sw)+\"ms\"\n\t\tmes strf(\"%.0f\",sum)\n\n\t\tmes \"repert for\"\n\t\tsw=GetTickCount()\n\t\tsum=0.0\n\t\trepeat cores\n\t\t\tesum=0.0\n\t\t\tfor i,0,maxsum@\n\t\t\t\tesum+=100\n\t\t\tnext\n\t\t\tsum+=esum\n\t\tloop\n\t\tmes \"time: \"+(GetTickCount()-sw)+\"ms\"\n\t\tmes strf(\"%.0f\",sum)\n\n\t\tmes \"repert mstThread\"\n\t\tsw=GetTickCount()\n\t\tmstOpenHspLib\n\t\tsum=0.0\n\t\tmstBind \"sum\",sum\n\t\tmstCompile {\"\n\t\t\t#deffunc worker int maxsum,local esum\n\t\t\t\tesum=0.0\n\t\t\t\trepeat maxsum\n\t\t\t\t\tesum+=100\n\t\t\t\tloop\n\t\t\t\tsum+=esum\n\t\t\treturn\n\t\t\"}\n\t\tmstSetWorkerNum cores\n\t\trepeat cores\n\t\t\tmstThreadCall \"worker\",maxsum@\n\t\tloop\n\t\tmstThreadJoin\n\t\tmes \"time: \"+(GetTickCount()-sw)+\"ms\"\n\t\tmes strf(\"%.0f\",sum)\n\treturn\n#global\n\nmain\n```\n\n### Python\n```py3:\nimport time\nimport functools\nimport concurrent.futures\nfutures=concurrent.futures\n\ncores=4\nmaxsum=5000000000\n\ndef main():\n\tglobal maxsum\n\tmaxsum/=100\n\tmaxsum=int(maxsum/cores)\n\n\tprint(\"for\")\n\tsw=time.time()\n\tsum=0\n\tfor n in range(0,cores):\n\t\tesum=0\n\t\tfor i in range(0,maxsum):\n\t\t\tesum+=100\n\t\tsum+=esum\n\tprint(\"time: {0:.2f}ms\".format((time.time()-sw)*1000))\n\tprint(\"sum: {0}\".format(sum))\n\n\tprint(\"map future Thread\")\n\twith futures.ThreadPoolExecutor() as TP:\n\t\tsw=time.time()\n\t\tsum=0\n\t\tworkers=list(map(lambda n:TP.submit(worker,maxsum),range(0,cores)))\n\t\tfor esum in futures.wait(workers)[0]:\n\t\t\tsum+=esum.result()\n\t\tprint(\"time: {0:.2f}ms\".format((time.time()-sw)*1000))\n\t\tprint(\"sum: {0}\".format(sum))\n\n\tprint(\"map future Process\")\n\twith futures.ProcessPoolExecutor() as TP:\n\t\tsw=time.time()\n\t\tsum=0\n\t\tworkers=list(map(lambda n:TP.submit(worker,maxsum),range(0,cores)))\n\t\tfor esum in futures.wait(workers)[0]:\n\t\t\tsum+=esum.result()\n\t\tprint(\"time: {0:.2f}ms\".format((time.time()-sw)*1000))\n\t\tprint(\"sum: {0}\".format(sum))\n\ndef worker(maxsum):\n\tesum=0\n\tfor i in range(0,maxsum):\n\t\tesum+=100\n\treturn esum\n\nif __name__==\"__main__\":\n\tmain()\n```\n\n### Ruby\n```ruby:\nrequire \"thwait\"\nrequire \"benchmark\"\n\n@cores=4\n@maxsum=5000000000\n\ndef main()\n\tputs \"for\"\n\t@maxsum/=100\n\t@maxsum/=@cores\n\n\tsw=Benchmark.realtime do\n\t\t@sum=0\n\t\tfor n in 0..@cores-1\n\t\t\tesum=0\n\t\t\tfor i in 0..@maxsum-1\n\t\t\t\tesum+=100\n\t\t\tend\n\t\t\t@sum+=esum\n\t\tend\n\tend\n\tputs \"time: #{(sw*1000).round(2)}ms\"\n\tputs @sum\n\n\tputs \"for Thread\"\n\tsw2=Benchmark.realtime do\n\t\t@sum=0\n\t\t@threads=[]\n\t\tfor n in 0..@cores-1\n\t\t\t@threads.push(Thread.new do\n\t\t\t\tesum=0\n\t\t\t\tfor i in 0..@maxsum-1\n\t\t\t\t\tesum+=100\n\t\t\t\tend\n\t\t\t\t@sum+=esum\n\t\t\tend)\n\t\tend\n\t\tThreadsWait.all_waits(*@threads)\n\tend\n\tputs \"time: #{(sw2*1000).round(2)}ms\"\n\tputs @sum\nend\n\nmain()\n```\n"}