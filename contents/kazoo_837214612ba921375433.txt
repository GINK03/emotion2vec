{"context": " More than 1 year has passed since last update.\n\n\u524d\u63d0\n\u300e\u30de\u30eb\u30c1\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306e\u305f\u3081\u306eOpenGL ES\u5165\u9580 \u57fa\u790e\u7de8\u2015Android/iOS\u5bfe\u5fdc\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u300f\n\u306e\u629c\u7c8b\u30e1\u30e2\u3067\u3059\u300212\u7ae0\u306e\u5185\u5bb9\u3002\n\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u306f\u65ad\u7247\u306e\u307f\u306a\u306e\u3067\u3001\u672c\u66f8\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\n\u30b9\u30d7\u30e9\u30a4\u30c8\n\u3082\u3068\u3082\u3068\u306f2D\u30b2\u30fc\u30e0\u6a5f\u3067\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b\u4ed5\u7d44\u307f\u3084\u753b\u50cf\u305d\u306e\u3082\u306e\u306e\u3053\u3068\u3002\n\u6587\u8108\u306b\u3088\u3063\u3066\u5909\u308f\u308b\u304c\u3001\u3053\u3053\u3067\u306e Sprite \u306f2\u6b21\u5143\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u5168\u822c\u306e\u3053\u3068\u3002\n\n\u30b9\u30d7\u30e9\u30a4\u30c8\u306e\u5ea7\u6a19\u7cfb\nglViewport \u3067\u4f7f\u7528\u3059\u308b\u30a6\u30a3\u30f3\u30c9\u30a6\u5ea7\u6a19\u7cfb\u306f\u5de6\u4e0b\u539f\u70b9\u3002\n\u672c\u66f8\u3067\u306f\u4fbf\u5b9c\u4e0a\u3001\u300c\u5de6\u4e0a\u3092\u539f\u70b9\u3068\u3057\u3066\u3001\u6574\u6570\u306e\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u793a\u3055\u308c\u308b\u5ea7\u6a19\u7cfb\u300d\u3092 \u30b9\u30d7\u30e9\u30a4\u30c8\u5ea7\u6a19\u7cfb \u3068\u547c\u3076\u3002\n\n\u30b9\u30d7\u30e9\u30a4\u30c8\u63cf\u753b\u306e\u524d\u63d0\u6761\u4ef6\n\n\u30b9\u30d7\u30e9\u30a4\u30c8\u5ea7\u6a19\u7cfb\u306e\u4efb\u610f\u306e\u4f4d\u7f6e\u306b\u3001\u4efb\u610f\u306e\u5927\u304d\u3055\u3067\u753b\u50cf\u63cf\u753b\u3067\u304d\u308b\u3053\u3068\n\u753b\u50cf\u5185\u306e\u4efb\u610f\u306e\u4f4d\u7f6e\u3092\u5207\u308a\u51fa\u3057\u3066\u63cf\u753b\u3067\u304d\u308b\u3053\u3068\n\n\n\u4efb\u610f\u306e\u5ea7\u6a19\u306b\u56db\u89d2\u5f62\u3092\u63cf\u753b\u3059\u308b\n\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u306e\u4efb\u610f\u4f4d\u7f6e\u3078\u63cf\u753b\u3067\u304d\u308c\u3070\u3001\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30b5\u30a4\u30ba\uff08Android \u306e dpi \u3084\u89e3\u50cf\u5ea6\u3001iOS \u306e contentScaleFactor\uff09\u306b\u5408\u308f\u305b\u3066\u30b9\u30d7\u30e9\u30a4\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u5bb9\u6613\u306b\u3001\u76f4\u611f\u7684\u306b\u306a\u308b\u3002\n\u30d4\u30af\u30bb\u30eb\u6570\u304c\u540c\u4e00\u306b\u3001\u3059\u306a\u308f\u3061\u3001\u89e3\u50cf\u5ea6\u306e\u4f4e\u3044\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3067\u306f\u5927\u304d\u304f\u3001\u89e3\u50cf\u5ea6\u306e\u9ad8\u3044\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3067\u306f\u5c0f\u3055\u304f\u898b\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u30b5\u30f3\u30d7\u30eb\uff08sample_rendering_pixel_quad.c\uff09\uff1a\n/**\n * \u30a2\u30d7\u30ea\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3092\u884c\u3046\n * \u6bce\u79d260\u56de\u524d\u5f8c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n */\nvoid sample_RenderingPixelQuad_rendering( GLApplication *app) {\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    Extension_RenderingPixelQuad *extension = (Extension_RenderingPixelQuad*) app->extension;\n\n    glClearColor(0.0f, 1.0f, 1.0f, 1.0f);\n    glClear(GL_COLOR_BUFFER_BIT);\n\n    // attr_pos\u3092\u6709\u52b9\u306b\u3059\u308b\n    glEnableVertexAttribArray(extension->attr_pos);\n\n// \u3053\u306e\u30d6\u30ed\u30c3\u30af\u306f\u30ab\u30ea\u30f3\u30b0\u3092\u542b\u3081\u3066\u6b63\u3057\u3044\u9806\u756a\u3067\u9802\u70b9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\n#if 0   /* \u30ab\u30ea\u30f3\u30b0\u30c1\u30a7\u30c3\u30af */\n    {\n        glEnable(GL_CULL_FACE);\n        glCullFace(GL_BACK);\n    }\n#endif  /* \u30ab\u30ea\u30f3\u30b0\u30c1\u30a7\u30c3\u30af */\n\n    {\n        // TODO \u89e3\u8aac\n        // \u56db\u89d2\u5f62\u306eXYWH\u3092\u6307\u5b9a\u3059\u308b\n        const GLint pixel_x = 50;\n        const GLint pixel_y = 100;\n        const GLint pixel_width = 200;\n        const GLint pixel_height = 300;\n\n        GLfloat VERTEX_LEFT = ((GLfloat) pixel_x / (GLfloat) app->surface_width) * 2.0f - 1.0f;\n        GLfloat VERTEX_RIGHT = ((GLfloat) (pixel_x + pixel_width) / (GLfloat) app->surface_width) * 2.0f - 1.0f;\n\n        GLfloat VERTEX_TOP = (((GLfloat) pixel_y / (GLfloat) app->surface_height) * 2.0f - 1.0f) * -1.0f;\n        GLfloat VERTEX_BOTTOM = (((GLfloat) (pixel_y + pixel_height) / (GLfloat) app->surface_height) * 2.0f - 1.0f) * -1.0f;\n\n        // \u5de6\u4e0a\u3078\u56db\u89d2\u5f62\u63cf\u753b\n        const GLfloat position[] = {\n        //\n        // v1(left top)\n                VERTEX_LEFT, VERTEX_TOP,\n                // v2(left bottom)\n                VERTEX_LEFT, VERTEX_BOTTOM,\n                // v3(right top)\n                VERTEX_RIGHT, VERTEX_TOP,\n                // v4(right bottom)\n                VERTEX_RIGHT, VERTEX_BOTTOM, };\n\n        glVertexAttribPointer(extension->attr_pos, 2, GL_FLOAT, GL_FALSE, 0, (GLvoid*) position);\n        glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);\n    }\n    {\n        // TODO \u89e3\u8aac\n        // \u56db\u89d2\u5f62\u3092\u53f3\u4e0b\u306b\u8868\u793a\u3059\u308b\n        const GLint pixel_width = 150;\n        const GLint pixel_height = 100;\n        const GLint pixel_x = app->surface_width - pixel_width - 1; // \u306f\u307f\u51fa\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u3001\uff11\u30d4\u30af\u30bb\u30eb\u6a2a\u306b\u305a\u3089\u3059\n        const GLint pixel_y = app->surface_height - pixel_height - 1; // \u306f\u307f\u51fa\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u3001\uff11\u30d4\u30af\u30bb\u30eb\u6a2a\u306b\u305a\u3089\u3059\n\n        GLfloat VERTEX_LEFT = ((GLfloat) pixel_x / (GLfloat) app->surface_width) * 2.0f - 1.0f;\n        GLfloat VERTEX_RIGHT = ((GLfloat) (pixel_x + pixel_width) / (GLfloat) app->surface_width) * 2.0f - 1.0f;\n\n        GLfloat VERTEX_TOP = (((GLfloat) pixel_y / (GLfloat) app->surface_height) * 2.0f - 1.0f) * -1.0f;\n        GLfloat VERTEX_BOTTOM = (((GLfloat) (pixel_y + pixel_height) / (GLfloat) app->surface_height) * 2.0f - 1.0f) * -1.0f;\n\n        // \u53f3\u4e0b\u3078\u56db\u89d2\u5f62\u63cf\u753b\n        const GLfloat position[] = {\n        //\n        // v0(left top)\n                VERTEX_LEFT, VERTEX_TOP,\n                // v1(left bottom)\n                VERTEX_LEFT, VERTEX_BOTTOM,\n                // v2(right top)\n                VERTEX_RIGHT, VERTEX_TOP,\n                // v3(right bottom)\n                VERTEX_RIGHT, VERTEX_BOTTOM, };\n\n        glVertexAttribPointer(extension->attr_pos, 2, GL_FLOAT, GL_FALSE, 0, (GLvoid*) position);\n        glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);\n    }\n\n    // \u30d0\u30c3\u30af\u30d0\u30c3\u30d5\u30a1\u3092\u30d5\u30ed\u30f3\u30c8\u30d0\u30c3\u30d5\u30a1\u3078\u8ee2\u9001\u3059\u308b\u3002\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3054\u3068\u306b\u5185\u90e8\u306e\u5b9f\u88c5\u304c\u7570\u306a\u308b\u3002\n    ES20_postFrontBuffer(app);\n}\n\n\n\u4ee5\u4e0b\u3067\u56db\u89d2\u5f62\u306e\u63cf\u753b\u5148\u3092\u793a\u3057\uff08\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u306a\u306e\u3067 GLint\uff09\n        const GLint pixel_x = 50;\n        const GLint pixel_y = 100;\n        const GLint pixel_width = 200;\n        const GLint pixel_height = 300;\n\n\u305d\u308c\u3092 OpenGL ES \u3067\u63cf\u753b\u3092\u884c\u3046\u305f\u3081\u306b\u6b63\u898f\u5316\u30c7\u30d0\u30a4\u30b9\u5ea7\u6a19\u7cfb\u306b\u5909\u63db\u3059\u308b\n\uff08LEFT, RIGHT \u306f x \u5ea7\u6a19\u3001TOP, BOTTOM \u306f y \u5ea7\u6a19\uff09\n        GLfloat VERTEX_LEFT = ((GLfloat) pixel_x / (GLfloat) app->surface_width) * 2.0f - 1.0f;\n        GLfloat VERTEX_RIGHT = ((GLfloat) (pixel_x + pixel_width) / (GLfloat) app->surface_width) * 2.0f - 1.0f;\n\n        GLfloat VERTEX_TOP = (((GLfloat) pixel_y / (GLfloat) app->surface_height) * 2.0f - 1.0f) * -1.0f;\n        GLfloat VERTEX_BOTTOM = (((GLfloat) (pixel_y + pixel_height) / (GLfloat) app->surface_height) * 2.0f - 1.0f) * -1.0f;\n\n\n\u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30c8\u30e9\u30b9\u3092\u63cf\u753b\n\u4efb\u610f\u306e\u5ea7\u6a19\u3078\u30b9\u30d7\u30e9\u30a4\u30c8\u63cf\u753b\u304c\u3067\u304d\u308c\u3070\u3001\u3042\u3068\u306f\u30c6\u30af\u30b9\u30c1\u30e3\u4ed8\u304d\u3067\u63cf\u753b\u3059\u308b\u3060\u3051\u3067\u826f\u3044\u304c\u3001\u300c\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u305d\u306e\u307e\u307e\u63cf\u753b\u3059\u308b\u300d\u3068\u3044\u3046 OpenGL \u306e\u5229\u7528\u6cd5\u306f\u5c11\u306a\u3044\u3001\u3042\u308b\u3044\u306f\u63a8\u5968\u3055\u308c\u306a\u3044\u3002\nOpenGL ES \u304c\u63a8\u5968\u3059\u308b\u306e\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u89e3\u50cf\u5ea6\u306f 2^n \u30d4\u30af\u30bb\u30eb\u306e\u6b63\u65b9\u5f62\u3060\u304c\u3001\u6b86\u3069\u306e\u5834\u5408\u306f\u4efb\u610f\u306e\u30d4\u30af\u30bb\u30eb\u6570\u306e\u9577\u65b9\u5f62or\u6b63\u65b9\u5f62\u3092\u63cf\u753b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u305d\u3053\u3067\u3001\u8907\u6570\u306e\u753b\u50cf\u30921\u679a\u306e\u5927\u304d\u306a POT \u30c6\u30af\u30b9\u30c1\u30e3\u306b\u53ce\u3081\u308b\u3053\u3068\u306b\u3088\u308a\u3001GPU\u4e0a\u306e\u5236\u9650\u3082\u306a\u304f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u30e6\u30cb\u30c3\u30c8\u5207\u308a\u66ff\u3048\u3084\u30d0\u30a4\u30f3\u30c9\u306e\u5207\u308a\u66ff\u3048\u3092\u884c\u3046\u5fc5\u8981\u3082\u306a\u304f\u306a\u308b\uff08\u7279\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d0\u30a4\u30f3\u30c9\u306f GPU \u8ca0\u8377\u304c\u5927\u304d\u3044\uff09\u3002\u3053\u306e \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30c8\u30e9\u30b9(Texture Atlas\uff09 \u5316\u3068\u547c\u3076\u3002\n\u3053\u3093\u306a\u304b\u3093\u3058\u3067\nvoid sample_RenderingPixelQuadPixelUv_rendering(GLApplication *app) {\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    Extension_RenderingPixelQuadPixelUv *extension = (Extension_RenderingPixelQuadPixelUv*) app->extension;\n\n    glClearColor(0.0f, 1.0f, 1.0f, 1.0f);\n    glClear(GL_COLOR_BUFFER_BIT);\n\n    // attr_pos\u3092\u6709\u52b9\u306b\u3059\u308b\n    glEnableVertexAttribArray(extension->attr_pos);\n    glEnableVertexAttribArray(extension->attr_uv);\n\n    {\n        // \u30c7\u30fc\u30bf\u30c6\u30fc\u30d6\u30eb\u3092\u7528\u610f\u3059\u308b\n        struct AtlasTable {\n            /**\n             * \u753b\u50cf\u5185\u306eX\u5ea7\u6a19\n             */\n            int x;\n            /**\n             * \u753b\u50cf\u5185\u306eY\u5ea7\u6a19\n             */\n            int y;\n            /**\n             * \u5143\u753b\u50cf\u306e\u5e45\n             */\n            int width;\n            /**\n             * \u5143\u753b\u50cf\u306e\u9ad8\u3055\n             */\n            int height;\n        } imagetable[] = {\n        // \u30a2\u30c8\u30e9\u30b9\u5316\u3055\u308c\u305f\u753b\u50cf\u306e\u30c7\u30fc\u30bf\u30c6\u30fc\u30d6\u30eb\n        //   x, y, width, height\n                { 513, 1, 458, 402 }, // \u9e7f\u306e\u753b\u50cf\n                { 301, 513, 128, 128 },//\n                { 1003, 61, 16, 16 }, //\n                { 513, 403, 256, 256 }, //\n                { 1, 513, 300, 400 }, //\n                { 971, 61, 32, 32 }, //\n                { 1, 913, 64, 64 }, //\n                { 1003, 77, 8, 8 }, //\n                { 1, 1, 512, 512 }, //\n                { 971, 1, 50, 60 }, //\n                };\n\n        struct AtlasTable image = imagetable[3]; // [0]\u301c[9]\u3067\u5909\u66f4\u53ef\u80fd\n\n        // \u56db\u89d2\u5f62\u306eXYWH\u3092\u6307\u5b9a\u3059\u308b\n        const GLint pixel_x = 0;\n        const GLint pixel_y = 0;\n        const GLint pixel_width = image.width;\n        const GLint pixel_height = image.height;\n\n        // \u9802\u70b9\u4f4d\u7f6e\u3092\u8a08\u7b97\u3059\u308b\n        GLfloat VERTEX_LEFT = ((GLfloat) pixel_x / (GLfloat) app->surface_width) * 2.0f - 1.0f;\n        GLfloat VERTEX_RIGHT = ((GLfloat) (pixel_x + pixel_width) / (GLfloat) app->surface_width) * 2.0f - 1.0f;\n        GLfloat VERTEX_TOP = (((GLfloat) pixel_y / (GLfloat) app->surface_height) * 2.0f - 1.0f) * -1.0f;\n        GLfloat VERTEX_BOTTOM = (((GLfloat) (pixel_y + pixel_height) / (GLfloat) app->surface_height) * 2.0f - 1.0f) * -1.0f;\n\n        // UV\u4f4d\u7f6e\u3092\u8a08\u7b97\u3059\u308b\n        GLfloat UV_LEFT = (GLfloat) image.x / (GLfloat) extension->texture->width;\n        GLfloat UV_TOP = (GLfloat) image.y / (GLfloat) extension->texture->height;\n        GLfloat UV_RIGHT = (GLfloat) (image.x + image.width) / (GLfloat) extension->texture->width;\n        GLfloat UV_BOTTOM = (GLfloat) (image.y + image.height) / (GLfloat) extension->texture->height;\n\n        // \u9802\u70b9\u4f4d\u7f6e\n        const GLfloat position[] = {\n        //\n        // v0(left top)\n                VERTEX_LEFT, VERTEX_TOP,\n                // v1(left bottom)\n                VERTEX_LEFT, VERTEX_BOTTOM,\n                // v2(right top)\n                VERTEX_RIGHT, VERTEX_TOP,\n                // v3(right bottom)\n                VERTEX_RIGHT, VERTEX_BOTTOM, };\n\n        // \u6307\u5b9a\u3057\u305fUV\u5ea7\u6a19\u306b\u5909\u63db\u3059\u308b\n        const GLfloat uv[] = {\n        // triangle 0\n        // v0(left top)\n                UV_LEFT, UV_TOP,\n                // v1(left bottom)\n                UV_LEFT, UV_BOTTOM,\n                // v2(right top)\n                UV_RIGHT, UV_TOP,\n                // v3(right bottom)\n                UV_RIGHT, UV_BOTTOM, };\n\n        glVertexAttribPointer(extension->attr_pos, 2, GL_FLOAT, GL_FALSE, 0, (GLvoid*) position);\n        glVertexAttribPointer(extension->attr_uv, 2, GL_FLOAT, GL_FALSE, 0, (GLvoid*) uv);\n\n        glBindTexture(GL_TEXTURE_2D, extension->texture->id);\n        glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);\n    }\n\n    // \u30d0\u30c3\u30af\u30d0\u30c3\u30d5\u30a1\u3092\u30d5\u30ed\u30f3\u30c8\u30d0\u30c3\u30d5\u30a1\u3078\u8ee2\u9001\u3059\u308b\u3002\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3054\u3068\u306b\u5185\u90e8\u306e\u5b9f\u88c5\u304c\u7570\u306a\u308b\u3002\n    ES20_postFrontBuffer(app);\n}\n\n\nUV\u5ea7\u6a19\u306e\u5bfe\u5fdc\u4ed8\u3051\u306f\u5148\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u540c\u3058\u304f\u3001\u4efb\u610f\u306e\u30d4\u30af\u30bb\u30eb\u5ea7\u6a19\u3092\u5e45\u3042\u308b\u3044\u306f\u9ad8\u3055\u3067\u5272\u3063\u3066\u3084\u308c\u3070\u3088\u3044\u3002\n\nX\u5ea7\u6a19\n\u30c6\u30af\u30b9\u30c1\u30e3U\u5ea7\u6a19 = X\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\uff0f\u753b\u50cf\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09\nY\u5ea7\u6a19\n\u30c6\u30af\u30b9\u30c1\u30e3V\u5ea7\u6a19 = Y\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\uff0f\u753b\u50cf\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\n\n\n\u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30c8\u30e9\u30b9\u306e\u4f5c\u6210\nhttp://www.codeandweb.com/texturepacker\n\u3053\u308c\u304c\u4fbf\u5229\u3089\u3057\u3044\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30c8\u30e9\u30b9\u4f5c\u6210\u3092\u652f\u63f4\u3059\u308b\u30c4\u30fc\u30eb\u306f\u4ed6\u306b\u3082\u305f\u304f\u3055\u3093\u3042\u308b\u3002\n\n## \u524d\u63d0\n\n\u300e<a href=\"http://www.amazon.co.jp/gp/product/4877833013/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4877833013&linkCode=as2&tag=tinynoises-22\">\u30de\u30eb\u30c1\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306e\u305f\u3081\u306eOpenGL ES\u5165\u9580 \u57fa\u790e\u7de8\u2015Android/iOS\u5bfe\u5fdc\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0</a>\u300f\n\n\u306e\u629c\u7c8b\u30e1\u30e2\u3067\u3059\u300212\u7ae0\u306e\u5185\u5bb9\u3002\n\n\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u306f\u65ad\u7247\u306e\u307f\u306a\u306e\u3067\u3001\u672c\u66f8\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\n\n# \u30b9\u30d7\u30e9\u30a4\u30c8\n\u3082\u3068\u3082\u3068\u306f2D\u30b2\u30fc\u30e0\u6a5f\u3067\u753b\u50cf\u3092\u63cf\u753b\u3059\u308b\u4ed5\u7d44\u307f\u3084\u753b\u50cf\u305d\u306e\u3082\u306e\u306e\u3053\u3068\u3002\n\u6587\u8108\u306b\u3088\u3063\u3066\u5909\u308f\u308b\u304c\u3001\u3053\u3053\u3067\u306e Sprite \u306f2\u6b21\u5143\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u5168\u822c\u306e\u3053\u3068\u3002\n\n## \u30b9\u30d7\u30e9\u30a4\u30c8\u306e\u5ea7\u6a19\u7cfb\nglViewport \u3067\u4f7f\u7528\u3059\u308b\u30a6\u30a3\u30f3\u30c9\u30a6\u5ea7\u6a19\u7cfb\u306f\u5de6\u4e0b\u539f\u70b9\u3002\n\u672c\u66f8\u3067\u306f\u4fbf\u5b9c\u4e0a\u3001\u300c\u5de6\u4e0a\u3092\u539f\u70b9\u3068\u3057\u3066\u3001\u6574\u6570\u306e\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u793a\u3055\u308c\u308b\u5ea7\u6a19\u7cfb\u300d\u3092 **\u30b9\u30d7\u30e9\u30a4\u30c8\u5ea7\u6a19\u7cfb** \u3068\u547c\u3076\u3002\n\n## \u30b9\u30d7\u30e9\u30a4\u30c8\u63cf\u753b\u306e\u524d\u63d0\u6761\u4ef6\n+ \u30b9\u30d7\u30e9\u30a4\u30c8\u5ea7\u6a19\u7cfb\u306e\u4efb\u610f\u306e\u4f4d\u7f6e\u306b\u3001\u4efb\u610f\u306e\u5927\u304d\u3055\u3067\u753b\u50cf\u63cf\u753b\u3067\u304d\u308b\u3053\u3068\n+ \u753b\u50cf\u5185\u306e\u4efb\u610f\u306e\u4f4d\u7f6e\u3092\u5207\u308a\u51fa\u3057\u3066\u63cf\u753b\u3067\u304d\u308b\u3053\u3068\n\n## \u4efb\u610f\u306e\u5ea7\u6a19\u306b\u56db\u89d2\u5f62\u3092\u63cf\u753b\u3059\u308b\n\n\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u306e\u4efb\u610f\u4f4d\u7f6e\u3078\u63cf\u753b\u3067\u304d\u308c\u3070\u3001\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30b5\u30a4\u30ba\uff08Android \u306e dpi \u3084\u89e3\u50cf\u5ea6\u3001iOS \u306e contentScaleFactor\uff09\u306b\u5408\u308f\u305b\u3066\u30b9\u30d7\u30e9\u30a4\u30c8\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u306f\u5bb9\u6613\u306b\u3001\u76f4\u611f\u7684\u306b\u306a\u308b\u3002\n\n\u30d4\u30af\u30bb\u30eb\u6570\u304c\u540c\u4e00\u306b\u3001\u3059\u306a\u308f\u3061\u3001\u89e3\u50cf\u5ea6\u306e\u4f4e\u3044\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3067\u306f\u5927\u304d\u304f\u3001\u89e3\u50cf\u5ea6\u306e\u9ad8\u3044\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u3067\u306f\u5c0f\u3055\u304f\u898b\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\u30b5\u30f3\u30d7\u30eb\uff08sample_rendering_pixel_quad.c\uff09\uff1a\n\n```\u63cf\u753b\u90e8\n/**\n * \u30a2\u30d7\u30ea\u306e\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3092\u884c\u3046\n * \u6bce\u79d260\u56de\u524d\u5f8c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n */\nvoid sample_RenderingPixelQuad_rendering( GLApplication *app) {\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    Extension_RenderingPixelQuad *extension = (Extension_RenderingPixelQuad*) app->extension;\n\n    glClearColor(0.0f, 1.0f, 1.0f, 1.0f);\n    glClear(GL_COLOR_BUFFER_BIT);\n\n    // attr_pos\u3092\u6709\u52b9\u306b\u3059\u308b\n    glEnableVertexAttribArray(extension->attr_pos);\n\n// \u3053\u306e\u30d6\u30ed\u30c3\u30af\u306f\u30ab\u30ea\u30f3\u30b0\u3092\u542b\u3081\u3066\u6b63\u3057\u3044\u9806\u756a\u3067\u9802\u70b9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\n#if 0   /* \u30ab\u30ea\u30f3\u30b0\u30c1\u30a7\u30c3\u30af */\n    {\n        glEnable(GL_CULL_FACE);\n        glCullFace(GL_BACK);\n    }\n#endif  /* \u30ab\u30ea\u30f3\u30b0\u30c1\u30a7\u30c3\u30af */\n\n    {\n        // TODO \u89e3\u8aac\n        // \u56db\u89d2\u5f62\u306eXYWH\u3092\u6307\u5b9a\u3059\u308b\n        const GLint pixel_x = 50;\n        const GLint pixel_y = 100;\n        const GLint pixel_width = 200;\n        const GLint pixel_height = 300;\n\n        GLfloat VERTEX_LEFT = ((GLfloat) pixel_x / (GLfloat) app->surface_width) * 2.0f - 1.0f;\n        GLfloat VERTEX_RIGHT = ((GLfloat) (pixel_x + pixel_width) / (GLfloat) app->surface_width) * 2.0f - 1.0f;\n\n        GLfloat VERTEX_TOP = (((GLfloat) pixel_y / (GLfloat) app->surface_height) * 2.0f - 1.0f) * -1.0f;\n        GLfloat VERTEX_BOTTOM = (((GLfloat) (pixel_y + pixel_height) / (GLfloat) app->surface_height) * 2.0f - 1.0f) * -1.0f;\n\n        // \u5de6\u4e0a\u3078\u56db\u89d2\u5f62\u63cf\u753b\n        const GLfloat position[] = {\n        //\n        // v1(left top)\n                VERTEX_LEFT, VERTEX_TOP,\n                // v2(left bottom)\n                VERTEX_LEFT, VERTEX_BOTTOM,\n                // v3(right top)\n                VERTEX_RIGHT, VERTEX_TOP,\n                // v4(right bottom)\n                VERTEX_RIGHT, VERTEX_BOTTOM, };\n\n        glVertexAttribPointer(extension->attr_pos, 2, GL_FLOAT, GL_FALSE, 0, (GLvoid*) position);\n        glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);\n    }\n    {\n        // TODO \u89e3\u8aac\n        // \u56db\u89d2\u5f62\u3092\u53f3\u4e0b\u306b\u8868\u793a\u3059\u308b\n        const GLint pixel_width = 150;\n        const GLint pixel_height = 100;\n        const GLint pixel_x = app->surface_width - pixel_width - 1; // \u306f\u307f\u51fa\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u3001\uff11\u30d4\u30af\u30bb\u30eb\u6a2a\u306b\u305a\u3089\u3059\n        const GLint pixel_y = app->surface_height - pixel_height - 1; // \u306f\u307f\u51fa\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u3001\uff11\u30d4\u30af\u30bb\u30eb\u6a2a\u306b\u305a\u3089\u3059\n\n        GLfloat VERTEX_LEFT = ((GLfloat) pixel_x / (GLfloat) app->surface_width) * 2.0f - 1.0f;\n        GLfloat VERTEX_RIGHT = ((GLfloat) (pixel_x + pixel_width) / (GLfloat) app->surface_width) * 2.0f - 1.0f;\n\n        GLfloat VERTEX_TOP = (((GLfloat) pixel_y / (GLfloat) app->surface_height) * 2.0f - 1.0f) * -1.0f;\n        GLfloat VERTEX_BOTTOM = (((GLfloat) (pixel_y + pixel_height) / (GLfloat) app->surface_height) * 2.0f - 1.0f) * -1.0f;\n\n        // \u53f3\u4e0b\u3078\u56db\u89d2\u5f62\u63cf\u753b\n        const GLfloat position[] = {\n        //\n        // v0(left top)\n                VERTEX_LEFT, VERTEX_TOP,\n                // v1(left bottom)\n                VERTEX_LEFT, VERTEX_BOTTOM,\n                // v2(right top)\n                VERTEX_RIGHT, VERTEX_TOP,\n                // v3(right bottom)\n                VERTEX_RIGHT, VERTEX_BOTTOM, };\n\n        glVertexAttribPointer(extension->attr_pos, 2, GL_FLOAT, GL_FALSE, 0, (GLvoid*) position);\n        glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);\n    }\n\n    // \u30d0\u30c3\u30af\u30d0\u30c3\u30d5\u30a1\u3092\u30d5\u30ed\u30f3\u30c8\u30d0\u30c3\u30d5\u30a1\u3078\u8ee2\u9001\u3059\u308b\u3002\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3054\u3068\u306b\u5185\u90e8\u306e\u5b9f\u88c5\u304c\u7570\u306a\u308b\u3002\n    ES20_postFrontBuffer(app);\n}\n\n```\n\n\u4ee5\u4e0b\u3067\u56db\u89d2\u5f62\u306e\u63cf\u753b\u5148\u3092\u793a\u3057\uff08\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u306a\u306e\u3067 GLint\uff09\n\n```\n        const GLint pixel_x = 50;\n        const GLint pixel_y = 100;\n        const GLint pixel_width = 200;\n        const GLint pixel_height = 300;\n```\n\n\u305d\u308c\u3092 OpenGL ES \u3067\u63cf\u753b\u3092\u884c\u3046\u305f\u3081\u306b\u6b63\u898f\u5316\u30c7\u30d0\u30a4\u30b9\u5ea7\u6a19\u7cfb\u306b\u5909\u63db\u3059\u308b\n\uff08LEFT, RIGHT \u306f x \u5ea7\u6a19\u3001TOP, BOTTOM \u306f y \u5ea7\u6a19\uff09\n\n```\n        GLfloat VERTEX_LEFT = ((GLfloat) pixel_x / (GLfloat) app->surface_width) * 2.0f - 1.0f;\n        GLfloat VERTEX_RIGHT = ((GLfloat) (pixel_x + pixel_width) / (GLfloat) app->surface_width) * 2.0f - 1.0f;\n\n        GLfloat VERTEX_TOP = (((GLfloat) pixel_y / (GLfloat) app->surface_height) * 2.0f - 1.0f) * -1.0f;\n        GLfloat VERTEX_BOTTOM = (((GLfloat) (pixel_y + pixel_height) / (GLfloat) app->surface_height) * 2.0f - 1.0f) * -1.0f;\n```\n\n## \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30c8\u30e9\u30b9\u3092\u63cf\u753b\n\u4efb\u610f\u306e\u5ea7\u6a19\u3078\u30b9\u30d7\u30e9\u30a4\u30c8\u63cf\u753b\u304c\u3067\u304d\u308c\u3070\u3001\u3042\u3068\u306f\u30c6\u30af\u30b9\u30c1\u30e3\u4ed8\u304d\u3067\u63cf\u753b\u3059\u308b\u3060\u3051\u3067\u826f\u3044\u304c\u3001\u300c\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u305d\u306e\u307e\u307e\u63cf\u753b\u3059\u308b\u300d\u3068\u3044\u3046 OpenGL \u306e\u5229\u7528\u6cd5\u306f\u5c11\u306a\u3044\u3001\u3042\u308b\u3044\u306f\u63a8\u5968\u3055\u308c\u306a\u3044\u3002\n\nOpenGL ES \u304c\u63a8\u5968\u3059\u308b\u306e\u306f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u89e3\u50cf\u5ea6\u306f 2^n \u30d4\u30af\u30bb\u30eb\u306e\u6b63\u65b9\u5f62\u3060\u304c\u3001\u6b86\u3069\u306e\u5834\u5408\u306f\u4efb\u610f\u306e\u30d4\u30af\u30bb\u30eb\u6570\u306e\u9577\u65b9\u5f62or\u6b63\u65b9\u5f62\u3092\u63cf\u753b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u305d\u3053\u3067\u3001\u8907\u6570\u306e\u753b\u50cf\u30921\u679a\u306e\u5927\u304d\u306a POT \u30c6\u30af\u30b9\u30c1\u30e3\u306b\u53ce\u3081\u308b\u3053\u3068\u306b\u3088\u308a\u3001GPU\u4e0a\u306e\u5236\u9650\u3082\u306a\u304f\u3001\u30c6\u30af\u30b9\u30c1\u30e3\u30e6\u30cb\u30c3\u30c8\u5207\u308a\u66ff\u3048\u3084\u30d0\u30a4\u30f3\u30c9\u306e\u5207\u308a\u66ff\u3048\u3092\u884c\u3046\u5fc5\u8981\u3082\u306a\u304f\u306a\u308b\uff08\u7279\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d0\u30a4\u30f3\u30c9\u306f GPU \u8ca0\u8377\u304c\u5927\u304d\u3044\uff09\u3002\u3053\u306e **\u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30c8\u30e9\u30b9(Texture Atlas\uff09** \u5316\u3068\u547c\u3076\u3002\n\n\u3053\u3093\u306a\u304b\u3093\u3058\u3067\n\n```rendering\u90e8\nvoid sample_RenderingPixelQuadPixelUv_rendering(GLApplication *app) {\n    // \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u7528\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    Extension_RenderingPixelQuadPixelUv *extension = (Extension_RenderingPixelQuadPixelUv*) app->extension;\n\n    glClearColor(0.0f, 1.0f, 1.0f, 1.0f);\n    glClear(GL_COLOR_BUFFER_BIT);\n\n    // attr_pos\u3092\u6709\u52b9\u306b\u3059\u308b\n    glEnableVertexAttribArray(extension->attr_pos);\n    glEnableVertexAttribArray(extension->attr_uv);\n\n    {\n        // \u30c7\u30fc\u30bf\u30c6\u30fc\u30d6\u30eb\u3092\u7528\u610f\u3059\u308b\n        struct AtlasTable {\n            /**\n             * \u753b\u50cf\u5185\u306eX\u5ea7\u6a19\n             */\n            int x;\n            /**\n             * \u753b\u50cf\u5185\u306eY\u5ea7\u6a19\n             */\n            int y;\n            /**\n             * \u5143\u753b\u50cf\u306e\u5e45\n             */\n            int width;\n            /**\n             * \u5143\u753b\u50cf\u306e\u9ad8\u3055\n             */\n            int height;\n        } imagetable[] = {\n        // \u30a2\u30c8\u30e9\u30b9\u5316\u3055\u308c\u305f\u753b\u50cf\u306e\u30c7\u30fc\u30bf\u30c6\u30fc\u30d6\u30eb\n        //   x, y, width, height\n                { 513, 1, 458, 402 }, // \u9e7f\u306e\u753b\u50cf\n                { 301, 513, 128, 128 },//\n                { 1003, 61, 16, 16 }, //\n                { 513, 403, 256, 256 }, //\n                { 1, 513, 300, 400 }, //\n                { 971, 61, 32, 32 }, //\n                { 1, 913, 64, 64 }, //\n                { 1003, 77, 8, 8 }, //\n                { 1, 1, 512, 512 }, //\n                { 971, 1, 50, 60 }, //\n                };\n\n        struct AtlasTable image = imagetable[3]; // [0]\u301c[9]\u3067\u5909\u66f4\u53ef\u80fd\n\n        // \u56db\u89d2\u5f62\u306eXYWH\u3092\u6307\u5b9a\u3059\u308b\n        const GLint pixel_x = 0;\n        const GLint pixel_y = 0;\n        const GLint pixel_width = image.width;\n        const GLint pixel_height = image.height;\n\n        // \u9802\u70b9\u4f4d\u7f6e\u3092\u8a08\u7b97\u3059\u308b\n        GLfloat VERTEX_LEFT = ((GLfloat) pixel_x / (GLfloat) app->surface_width) * 2.0f - 1.0f;\n        GLfloat VERTEX_RIGHT = ((GLfloat) (pixel_x + pixel_width) / (GLfloat) app->surface_width) * 2.0f - 1.0f;\n        GLfloat VERTEX_TOP = (((GLfloat) pixel_y / (GLfloat) app->surface_height) * 2.0f - 1.0f) * -1.0f;\n        GLfloat VERTEX_BOTTOM = (((GLfloat) (pixel_y + pixel_height) / (GLfloat) app->surface_height) * 2.0f - 1.0f) * -1.0f;\n\n        // UV\u4f4d\u7f6e\u3092\u8a08\u7b97\u3059\u308b\n        GLfloat UV_LEFT = (GLfloat) image.x / (GLfloat) extension->texture->width;\n        GLfloat UV_TOP = (GLfloat) image.y / (GLfloat) extension->texture->height;\n        GLfloat UV_RIGHT = (GLfloat) (image.x + image.width) / (GLfloat) extension->texture->width;\n        GLfloat UV_BOTTOM = (GLfloat) (image.y + image.height) / (GLfloat) extension->texture->height;\n\n        // \u9802\u70b9\u4f4d\u7f6e\n        const GLfloat position[] = {\n        //\n        // v0(left top)\n                VERTEX_LEFT, VERTEX_TOP,\n                // v1(left bottom)\n                VERTEX_LEFT, VERTEX_BOTTOM,\n                // v2(right top)\n                VERTEX_RIGHT, VERTEX_TOP,\n                // v3(right bottom)\n                VERTEX_RIGHT, VERTEX_BOTTOM, };\n\n        // \u6307\u5b9a\u3057\u305fUV\u5ea7\u6a19\u306b\u5909\u63db\u3059\u308b\n        const GLfloat uv[] = {\n        // triangle 0\n        // v0(left top)\n                UV_LEFT, UV_TOP,\n                // v1(left bottom)\n                UV_LEFT, UV_BOTTOM,\n                // v2(right top)\n                UV_RIGHT, UV_TOP,\n                // v3(right bottom)\n                UV_RIGHT, UV_BOTTOM, };\n\n        glVertexAttribPointer(extension->attr_pos, 2, GL_FLOAT, GL_FALSE, 0, (GLvoid*) position);\n        glVertexAttribPointer(extension->attr_uv, 2, GL_FLOAT, GL_FALSE, 0, (GLvoid*) uv);\n\n        glBindTexture(GL_TEXTURE_2D, extension->texture->id);\n        glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);\n    }\n\n    // \u30d0\u30c3\u30af\u30d0\u30c3\u30d5\u30a1\u3092\u30d5\u30ed\u30f3\u30c8\u30d0\u30c3\u30d5\u30a1\u3078\u8ee2\u9001\u3059\u308b\u3002\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3054\u3068\u306b\u5185\u90e8\u306e\u5b9f\u88c5\u304c\u7570\u306a\u308b\u3002\n    ES20_postFrontBuffer(app);\n}\n\n```\n\nUV\u5ea7\u6a19\u306e\u5bfe\u5fdc\u4ed8\u3051\u306f\u5148\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u540c\u3058\u304f\u3001\u4efb\u610f\u306e\u30d4\u30af\u30bb\u30eb\u5ea7\u6a19\u3092\u5e45\u3042\u308b\u3044\u306f\u9ad8\u3055\u3067\u5272\u3063\u3066\u3084\u308c\u3070\u3088\u3044\u3002\n\n- X\u5ea7\u6a19  \n\u30c6\u30af\u30b9\u30c1\u30e3U\u5ea7\u6a19 = X\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\uff0f\u753b\u50cf\u306e\u5e45\uff08\u30d4\u30af\u30bb\u30eb\uff09\n- Y\u5ea7\u6a19  \n\u30c6\u30af\u30b9\u30c1\u30e3V\u5ea7\u6a19 = Y\u5ea7\u6a19\uff08\u30d4\u30af\u30bb\u30eb\uff09\uff0f\u753b\u50cf\u306e\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\uff09\n\n### \u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30c8\u30e9\u30b9\u306e\u4f5c\u6210\nhttp://www.codeandweb.com/texturepacker\n\n\u3053\u308c\u304c\u4fbf\u5229\u3089\u3057\u3044\u3002\u30c6\u30af\u30b9\u30c1\u30e3\u30a2\u30c8\u30e9\u30b9\u4f5c\u6210\u3092\u652f\u63f4\u3059\u308b\u30c4\u30fc\u30eb\u306f\u4ed6\u306b\u3082\u305f\u304f\u3055\u3093\u3042\u308b\u3002\n", "tags": ["study", "memo"]}