{"tags": ["Swift", "swift3", "iOS"], "context": "\n\n\u306f\u3058\u3081\u306b\n\u30a2\u30d7\u30ea\u306e\u5165\u529b\u30c7\u30fc\u30bf\u3092if\u6587\u3068And\u6761\u4ef6\u3067\u6570\u73e0\u3064\u306a\u304e\u3067\u5224\u5b9a\u3057\u3066\u3044\u304f\u3068\u30ab\u30aa\u30b9\u306b\u306a\u308a\u307e\u3059\u3088\u306d\u3002\n\u3084\u306f\u308a\u3053\u3053\u306f\u3001\u6b63\u898f\u8868\u73fe\u306e\u51fa\u756a\u3067\u3059\u306d\u3002\n\u305f\u3060\u3057\u3001Swift\u306f\u3001\u6b63\u898f\u8868\u73fe\u304c\u6271\u3044\u3065\u3089\u3044\u305f\u3081\u3001\n\u5c11\u3057\u3060\u3051\u7c21\u5358\u306b\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nCustom Operators\u3092\u5229\u7528\u3059\u308b\n\nRegexp.swift\nimport UIKit\n\ninfix operator =~\ninfix operator !~\n\nfunc =~(lhs: String, rhs: String) -> Bool {\n    guard let regex = try? NSRegularExpression(pattern: rhs,\n                                               options: NSRegularExpression.Options()) else {\n                                                return false\n    }\n\n    return regex.numberOfMatches(in: lhs,\n                                 options: NSRegularExpression.MatchingOptions(),\n                                 range: NSRange(location: 0, length: lhs.characters.count)) > 0\n}\n\nfunc !~(lhs: String, rhs: String) -> Bool {\n    return !(lhs=~rhs)\n}\n\n\n\n\u5229\u7528\u65b9\u6cd5\n\u3088\u304f\u4f7f\u3044\u305d\u3046\u306a\u30d1\u30bf\u30fc\u30f3\u3092extension\u306b\u8ffd\u52a0\u3059\u308b\u3068\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u6b63\u898f\u8868\u73fe\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u3053\u3067\u306f\u89e6\u308c\u307e\u305b\u3093\u3002\n\nSwift+Validation.swift\nimport Foundation\n\nextension String {\n\n    func isNumeric() -> Bool{\n        return (self =~ \"(^$)|(^\\\\d*$)\")\n    }\n\n    func isNumeric(length: Int) -> Bool {\n        return (self =~ \"(^$)|(^\\\\d{\\(length)}$)\")\n    }\n\n    func isUrl() -> Bool {\n        return (self =~ \"^(https?|ftp)(:\\\\/\\\\/[-_.!~*\\\\'()a-zA-Z0-9;\\\\/?:\\\\@&=+\\\\$,%#]+)$\")\n    }\n\n    func isEmail() -> Bool {\n        return (self =~ \"^[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}$\")\n    }\n\n    func isTelNo() -> Bool {\n        return (self =~ \"^\\\\d{2,4}-\\\\d{1,4}-\\\\d{4}$\")\n    }\n\n    func isdate(format: String) -> Bool {\n        return (self =~ \"^\\\\d{4}\\(format)\\\\d{1,2}\\(format)\\\\d{1,2}$\")\n    }\n\n    func isTime() -> Bool {\n        return (self =~ \"^\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}$\")\n    }\n}\n\n\n\n\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\nimport XCTest\n@testable import ios_Validation_demo\n\nclass ios_Validation_demoTests: XCTestCase {\n\n    override func setUp() {\n        super.setUp()\n    }\n\n    override func tearDown() {\n        super.tearDown()\n    }\n\n    func testNumeric() {\n\n        XCTAssertTrue(\"123456\".isNumeric())\n        XCTAssertTrue(\"12345\".isNumeric(length: 5))\n\n        XCTAssertFalse(\"1234a\".isNumeric())\n        XCTAssertFalse(\"12345\".isNumeric(length: 4))\n    }\n\n    func testUrl() {\n\n        XCTAssertTrue(\"http://www.yahoo.co.jp\".isUrl())\n        XCTAssertTrue(\"https://www.yahoo.co.jp\".isUrl())\n\n        XCTAssertFalse(\"https//www.yahoo.co.jp\".isUrl())\n        XCTAssertFalse(\"https:www.yahoo.co.jp\".isUrl())\n    }\n\n    func testEmail() {\n\n        XCTAssertTrue(\"rec@st-ventures.jp\".isEmail())\n\n        XCTAssertFalse(\"recst-ventures.jp\".isEmail())\n        XCTAssertFalse(\"rec@\".isEmail())\n        XCTAssertFalse(\"@st-ventures.jp\".isEmail())\n    }\n\n    func testTelNo() {\n        XCTAssertTrue(\"090-1234-5678\".isTelNo())\n        XCTAssertTrue(\"03-1234-5678\".isTelNo())\n        XCTAssertTrue(\"0120-1234-5678\".isTelNo())\n\n        XCTAssertFalse(\"1-1234-5678\".isTelNo())\n        XCTAssertFalse(\"1a-1234-5678\".isTelNo())\n        XCTAssertFalse(\"03-123a-5678\".isTelNo())\n        XCTAssertFalse(\"03-1234-5a78\".isTelNo())\n        XCTAssertFalse(\"0312345678\".isTelNo())\n        XCTAssertFalse(\"03-12345678\".isTelNo())\n        XCTAssertFalse(\"031234-5678\".isTelNo())\n    }\n\n    func testDate() {\n        XCTAssertTrue(\"2016-1-1\".isdate(format:\"-\"))\n        XCTAssertTrue(\"2016-12-19\".isdate(format:\"-\"))\n        XCTAssertTrue(\"2016/12/19\".isdate(format:\"/\"))\n\n        XCTAssertFalse(\"2016/12/19\".isdate(format:\"-\"))\n        XCTAssertFalse(\"20166-12-19\".isdate(format:\"-\"))\n        XCTAssertFalse(\"2016-123-19\".isdate(format:\"-\"))\n        XCTAssertFalse(\"2016-12-191\".isdate(format:\"-\"))\n        XCTAssertFalse(\"201-12-19\".isdate(format:\"-\"))\n        XCTAssertFalse(\"201612-19\".isdate(format:\"-\"))\n        XCTAssertFalse(\"2016-1219\".isdate(format:\"-\"))\n        XCTAssertFalse(\"201a-12-19\".isdate(format:\"-\"))\n        XCTAssertFalse(\"2016-1a-19\".isdate(format:\"-\"))\n        XCTAssertFalse(\"2016-12-1a\".isdate(format:\"-\"))\n    }\n\n    func testTime() {\n        XCTAssertTrue(\"20:10:10\".isTime())\n        XCTAssertTrue(\"1:1:1\".isTime())\n\n        XCTAssertFalse(\"10-10-10\".isTime())\n        XCTAssertFalse(\"123:10:10\".isTime())\n        XCTAssertFalse(\"12:123:10\".isTime())\n        XCTAssertFalse(\"12:12:123\".isTime())\n        XCTAssertFalse(\"1010:10\".isTime())\n        XCTAssertFalse(\"10:1010\".isTime())\n        XCTAssertFalse(\"1a:10:10\".isTime())\n        XCTAssertFalse(\"10:a0:10\".isTime())\n        XCTAssertFalse(\"10:10:1a\".isTime())\n    }\n}\n\n\n\u307e\u3068\u3081\n\u5982\u4f55\u3067\u3057\u305f\u304b\uff1f\n\u3061\u3087\u3063\u3068\u3060\u3051\u697d\u306b\u306a\u308a\u307e\u3057\u305f\u306d\u3002\n\u672c\u4ef6\u306b\u3064\u3044\u3066\u3001Github\u306b\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u5408\u308f\u305b\u3066\u5fa1\u89a7\u304f\u3060\u3055\u3044\u3002\n\u4ee5\u4e0a\u3067\u3059\u3002\n# \u306f\u3058\u3081\u306b\n\u30a2\u30d7\u30ea\u306e\u5165\u529b\u30c7\u30fc\u30bf\u3092if\u6587\u3068And\u6761\u4ef6\u3067\u6570\u73e0\u3064\u306a\u304e\u3067\u5224\u5b9a\u3057\u3066\u3044\u304f\u3068\u30ab\u30aa\u30b9\u306b\u306a\u308a\u307e\u3059\u3088\u306d\u3002\n\u3084\u306f\u308a\u3053\u3053\u306f\u3001\u6b63\u898f\u8868\u73fe\u306e\u51fa\u756a\u3067\u3059\u306d\u3002\n\n\u305f\u3060\u3057\u3001Swift\u306f\u3001\u6b63\u898f\u8868\u73fe\u304c\u6271\u3044\u3065\u3089\u3044\u305f\u3081\u3001\n\u5c11\u3057\u3060\u3051\u7c21\u5358\u306b\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n## Custom Operators\u3092\u5229\u7528\u3059\u308b\n\n```swift:Regexp.swift\nimport UIKit\n\ninfix operator =~\ninfix operator !~\n\nfunc =~(lhs: String, rhs: String) -> Bool {\n    guard let regex = try? NSRegularExpression(pattern: rhs,\n                                               options: NSRegularExpression.Options()) else {\n                                                return false\n    }\n\n    return regex.numberOfMatches(in: lhs,\n                                 options: NSRegularExpression.MatchingOptions(),\n                                 range: NSRange(location: 0, length: lhs.characters.count)) > 0\n}\n\nfunc !~(lhs: String, rhs: String) -> Bool {\n    return !(lhs=~rhs)\n}\n```\n\n## \u5229\u7528\u65b9\u6cd5\n\u3088\u304f\u4f7f\u3044\u305d\u3046\u306a\u30d1\u30bf\u30fc\u30f3\u3092extension\u306b\u8ffd\u52a0\u3059\u308b\u3068\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u6b63\u898f\u8868\u73fe\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u3053\u3067\u306f\u89e6\u308c\u307e\u305b\u3093\u3002\n\n```swift:Swift+Validation.swift\nimport Foundation\n\nextension String {\n\n    func isNumeric() -> Bool{\n        return (self =~ \"(^$)|(^\\\\d*$)\")\n    }\n\n    func isNumeric(length: Int) -> Bool {\n        return (self =~ \"(^$)|(^\\\\d{\\(length)}$)\")\n    }\n\n    func isUrl() -> Bool {\n        return (self =~ \"^(https?|ftp)(:\\\\/\\\\/[-_.!~*\\\\'()a-zA-Z0-9;\\\\/?:\\\\@&=+\\\\$,%#]+)$\")\n    }\n\n    func isEmail() -> Bool {\n        return (self =~ \"^[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}$\")\n    }\n\n    func isTelNo() -> Bool {\n        return (self =~ \"^\\\\d{2,4}-\\\\d{1,4}-\\\\d{4}$\")\n    }\n\n    func isdate(format: String) -> Bool {\n        return (self =~ \"^\\\\d{4}\\(format)\\\\d{1,2}\\(format)\\\\d{1,2}$\")\n    }\n\n    func isTime() -> Bool {\n        return (self =~ \"^\\\\d{1,2}:\\\\d{1,2}:\\\\d{1,2}$\")\n    }\n}\n```\n\n## \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\n\n```swift\nimport XCTest\n@testable import ios_Validation_demo\n\nclass ios_Validation_demoTests: XCTestCase {\n    \n    override func setUp() {\n        super.setUp()\n    }\n    \n    override func tearDown() {\n        super.tearDown()\n    }\n    \n    func testNumeric() {\n\n        XCTAssertTrue(\"123456\".isNumeric())\n        XCTAssertTrue(\"12345\".isNumeric(length: 5))\n\n        XCTAssertFalse(\"1234a\".isNumeric())\n        XCTAssertFalse(\"12345\".isNumeric(length: 4))\n    }\n\n    func testUrl() {\n\n        XCTAssertTrue(\"http://www.yahoo.co.jp\".isUrl())\n        XCTAssertTrue(\"https://www.yahoo.co.jp\".isUrl())\n\n        XCTAssertFalse(\"https//www.yahoo.co.jp\".isUrl())\n        XCTAssertFalse(\"https:www.yahoo.co.jp\".isUrl())\n    }\n\n    func testEmail() {\n\n        XCTAssertTrue(\"rec@st-ventures.jp\".isEmail())\n\n        XCTAssertFalse(\"recst-ventures.jp\".isEmail())\n        XCTAssertFalse(\"rec@\".isEmail())\n        XCTAssertFalse(\"@st-ventures.jp\".isEmail())\n    }\n\n    func testTelNo() {\n        XCTAssertTrue(\"090-1234-5678\".isTelNo())\n        XCTAssertTrue(\"03-1234-5678\".isTelNo())\n        XCTAssertTrue(\"0120-1234-5678\".isTelNo())\n\n        XCTAssertFalse(\"1-1234-5678\".isTelNo())\n        XCTAssertFalse(\"1a-1234-5678\".isTelNo())\n        XCTAssertFalse(\"03-123a-5678\".isTelNo())\n        XCTAssertFalse(\"03-1234-5a78\".isTelNo())\n        XCTAssertFalse(\"0312345678\".isTelNo())\n        XCTAssertFalse(\"03-12345678\".isTelNo())\n        XCTAssertFalse(\"031234-5678\".isTelNo())\n    }\n\n    func testDate() {\n        XCTAssertTrue(\"2016-1-1\".isdate(format:\"-\"))\n        XCTAssertTrue(\"2016-12-19\".isdate(format:\"-\"))\n        XCTAssertTrue(\"2016/12/19\".isdate(format:\"/\"))\n        \n        XCTAssertFalse(\"2016/12/19\".isdate(format:\"-\"))\n        XCTAssertFalse(\"20166-12-19\".isdate(format:\"-\"))\n        XCTAssertFalse(\"2016-123-19\".isdate(format:\"-\"))\n        XCTAssertFalse(\"2016-12-191\".isdate(format:\"-\"))\n        XCTAssertFalse(\"201-12-19\".isdate(format:\"-\"))\n        XCTAssertFalse(\"201612-19\".isdate(format:\"-\"))\n        XCTAssertFalse(\"2016-1219\".isdate(format:\"-\"))\n        XCTAssertFalse(\"201a-12-19\".isdate(format:\"-\"))\n        XCTAssertFalse(\"2016-1a-19\".isdate(format:\"-\"))\n        XCTAssertFalse(\"2016-12-1a\".isdate(format:\"-\"))\n    }\n\n    func testTime() {\n        XCTAssertTrue(\"20:10:10\".isTime())\n        XCTAssertTrue(\"1:1:1\".isTime())\n\n        XCTAssertFalse(\"10-10-10\".isTime())\n        XCTAssertFalse(\"123:10:10\".isTime())\n        XCTAssertFalse(\"12:123:10\".isTime())\n        XCTAssertFalse(\"12:12:123\".isTime())\n        XCTAssertFalse(\"1010:10\".isTime())\n        XCTAssertFalse(\"10:1010\".isTime())\n        XCTAssertFalse(\"1a:10:10\".isTime())\n        XCTAssertFalse(\"10:a0:10\".isTime())\n        XCTAssertFalse(\"10:10:1a\".isTime())\n    }\n}\n```\n\n## \u307e\u3068\u3081\n\u5982\u4f55\u3067\u3057\u305f\u304b\uff1f\n\u3061\u3087\u3063\u3068\u3060\u3051\u697d\u306b\u306a\u308a\u307e\u3057\u305f\u306d\u3002\n\n\u672c\u4ef6\u306b\u3064\u3044\u3066\u3001[Github](https://github.com/stv-ekushida/ios-RegExp-demo)\u306b\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u5408\u308f\u305b\u3066\u5fa1\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\u4ee5\u4e0a\u3067\u3059\u3002\n\n"}