{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u9593\u9055\u3044\u304c\u3042\u308b\u5834\u5408\u306f\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u5b09\u3057\u3044\n\u3042\u3068\u3001\u7d20\u76f4\u306bSwift\u304bObj-C\u3067\u5b9f\u88c5\u3057\u305f\u307b\u3046\u304c\u7d76\u5bfe\u306b\u3044\u3044\n\n\u3069\u306e\u3088\u3046\u306a\u65b9\u5411\u3051\u306eTips\u304b?\n\nVerisign\u3001Let's Encrypt\u306a\u3069\u304b\u3089\u767a\u884c\u3055\u308c\u305f\u30b5\u30fc\u30d0\u8a3c\u660e\u66f8\u304a\u3088\u3073\u4e2d\u9593\u8a3c\u660e\u66f8\u3092\u6301\u3064SSL\u30b5\u30fc\u30d0\u306b\u3001 iOS\u7aef\u672b\u304b\u3089NSURLConnection\u306a\u3069\u3067\u306f\u306a\u304f\u3001OpenSSL\u306eAPI\u3092\u7528\u3044\u3066SSL\u63a5\u7d9a\u3092\u884c\u3044\u305f\u3044\n\n\u305f\u3060\u3057\u3001\u63a5\u7d9a\u5f8c\u306b\u30b5\u30fc\u30d0\u304b\u3089\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306b\u6e21\u3055\u308c\u305f\u30b5\u30fc\u30d0\u8a3c\u660e\u66f8\u304a\u3088\u3073\u4e2d\u9593\u8a3c\u660e\u66f8\u304c\u6b63\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u3001iOS\u306e\u30b7\u30b9\u30c6\u30e0\u306b\u7d44\u307f\u8fbc\u307e\u308c\u305f\u30eb\u30fc\u30c8CA\u8a3c\u660e\u66f8\u307e\u3067\u8fbf\u3063\u3066\u691c\u8a3c\u3057\u305f\u3044\n\n\u3053\u3053\u3067\u3001iOS\u306b\u65bc\u3044\u3066\u306f\u30eb\u30fc\u30c8CA\u8a3c\u660e\u66f8\u30ea\u30b9\u30c8\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u4e0d\u53ef\u80fd(\u3068\u601d\u308f\u308c\u308b)\n\u3064\u307e\u308a\u3001OpenSSL\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3001SSL_CTX_load_verify_locations\u3084SSL_CTX_set_default_verify_paths\u3068\u3044\u3063\u305fAPI\u304c\u5229\u7528\u3067\u304d\u305a\u3001Bundle\u306b\u30eb\u30fc\u30c8CA\u8a3c\u660e\u66f8\u30ea\u30b9\u30c8\u306a\u3069\u3092\u8ffd\u52a0\u3057\u3066\u304a\u304b\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044(\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u3092\u901a\u3059\u306e\u3068\u540c\u69d8\u306b)\n\n\u3053\u308c\u306f\u5acc\u3060\uff01\n\n\u3068\u3044\u3046\u65b9\u5411\u3051\n\n\u89e3\u6c7a\u65b9\u6cd5\n\nOpenSSL(C/C++)\u3067\u306e\u5b9f\u88c5\n\nSSL_set_verify\u3092\u7528\u3044\u3066\u3001SSL_VERIFY_NONE\u306b\u3057\u3066\u304a\u304f\n(\u306a\u304a\u3001verifycallback\u3092\u5229\u7528\u3059\u308b\u3001\u3068\u3044\u3046\u624b\u6bb5\u306f\u672a\u691c\u8a3c)\nSSL_Connect\u3059\u308b\nSSL_get_peer_certificate_chain\u3059\u308b\n\u3053\u308c\u306b\u3088\u308a\u3001\u30b5\u30fc\u30d0\u8a3c\u660e\u66f8(\u3068\u4e2d\u9593\u8a3c\u660e\u66f8)\u304c\u5f97\u3089\u308c\u308b\n\u5f97\u3089\u308c\u305f\u8a3c\u660e\u66f8\u306f\u3001X509\u5f62\u5f0f\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u8868\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001OpenSSL\u3067\u63d0\u4f9b\u3055\u308c\u308bAPI\u3092\u5229\u7528\u3057\u3066\u3001iOS\u3067\u53d6\u308a\u6271\u3046\u3053\u3068\u306e\u3067\u304d\u308b\u3001DER\u5f62\u5f0f\u306e\u30d0\u30a4\u30ca\u30ea\u5217\u306b\u76f4\u3059\n\n\n  unsigned char* buf = NULL; // NULL  \n  int len = i2d_X509(cert, &buf); // NULL\u3092\u4e0e\u3048\u308b\u3068\u3001\u65b0\u305f\u306bmalloc\u3057\u3066DER\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u3002\u52ff\u8ad6\u3001\u5f8c\u307b\u3069free\u5fc5\u9808\n\n\nObjective-C\u5074\u306e\u5b9f\u88c5\nCFMutableArrayRef certs = CFArrayCreateMutable(kCFAllocatorDefault, 0, NULL); // \u6700\u5927\u914d\u5217\u500b\u6570 => \u6307\u5b9a\u306a\u3057\nfor (\u30b5\u30fc\u30d0\u304b\u3089\u8fd4\u7b54\u3055\u308c\u305f\u8a3c\u660e\u66f8\u30c1\u30a7\u30fc\u30f3\u306b\u542b\u307e\u308c\u308b\u8a3c\u660e\u66f8\u306e\u500b\u6570) {\n  CFDataRef data = CFDataCreate(kCFAllocatorDefault, buf, len); // \u524d\u7bc03.\u3067\u5f97\u3089\u308c\u305fDER\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3068\u9577\u3055\n  SecCertificateRef cert = SecCertificateCreateWithData(NULL, data);\n  CFArrayAppendValue(certs, cert);\n}\nSecTrustRef trust;\nOSStatus status = SecTrustCreateWithCertificates(certs, SecPolicyreateBasicX509(), &trust);\nSecTrustResultType r = kSecTrustResultInvalid;\nstatus = SecTrustEvaluate(trust, &r);\n\n\u3053\u308c\u3067\u3001r\u306e\u8fd4\u308a\u5024\u304ckSecTrustResultProceed==1\u3082\u3057\u304f\u306fkSecTrustResultUnspecified==4\u3067\u3042\u308c\u3070\u3001\u30b5\u30fc\u30d0\u8a3c\u660e\u66f8\u691c\u8a3c\u6210\u529f1\n\u306a\u304a\u3001\u30b5\u30fc\u30d0\u304b\u3089\u6e21\u3055\u308c\u305f\u8a3c\u660e\u66f8\u306b\u4e2d\u9593CA\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u306a\u3069\u306e\u30df\u30b9\u3067\u30eb\u30fc\u30c8CA\u307e\u3067\u8fbf\u308c\u306a\u304b\u3063\u305f\u308a\u3001\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8+\u30aa\u30ec\u30aa\u30ecCA\u8a3c\u660e\u66f8(\u30b7\u30b9\u30c6\u30e0\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u8a3c\u660e\u66f8)\u304c\u30b5\u30fc\u30d0\u304b\u3089\u6e21\u3055\u308c\u305f\u5834\u5408\u306f\u3001kSecTrustResultRecoverableTrustFailure == 5\u3068\u306a\u308b  \n\n\u6700\u5f8c\u306b\n\u3053\u306e\u8fba\u308a\u3092\u5b9f\u88c5\u3057\u305f\u30b3\u30fc\u30c9\u306f\u3001\nhttps://github.com/linear-rpc/linear-objc/blob/master/src/LinearSSLClient.mm#L89\n\u306b\u3042\u308b\u306e\u3067\u3001\u8208\u5473\u304c\u3042\u308c\u3070\u3054\u53c2\u7167\u3092\n\n\n\n\n\nhttps://developer.apple.com/library/mac/qa/qa1360/_index.html  The semantics behind receiving a kSecTrustResultUnspecified (4) error from Security APIs is that the certificate is indeed valid.  However, the user has not explicitly set the trust settings for the certificate via Keychain Access.\u00a0\u21a9\n\n\n\n\n# \u306f\u3058\u3081\u306b\n\u9593\u9055\u3044\u304c\u3042\u308b\u5834\u5408\u306f\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u5b09\u3057\u3044\n\u3042\u3068\u3001\u7d20\u76f4\u306bSwift\u304bObj-C\u3067\u5b9f\u88c5\u3057\u305f\u307b\u3046\u304c\u7d76\u5bfe\u306b\u3044\u3044\n\n# \u3069\u306e\u3088\u3046\u306a\u65b9\u5411\u3051\u306eTips\u304b?\n1. Verisign\u3001Let's Encrypt\u306a\u3069\u304b\u3089\u767a\u884c\u3055\u308c\u305f\u30b5\u30fc\u30d0\u8a3c\u660e\u66f8\u304a\u3088\u3073\u4e2d\u9593\u8a3c\u660e\u66f8\u3092\u6301\u3064SSL\u30b5\u30fc\u30d0\u306b\u3001 **iOS\u7aef\u672b\u304b\u3089NSURLConnection\u306a\u3069\u3067\u306f\u306a\u304f\u3001OpenSSL\u306eAPI\u3092\u7528\u3044\u3066SSL\u63a5\u7d9a\u3092\u884c\u3044\u305f\u3044**\n2. \u305f\u3060\u3057\u3001**\u63a5\u7d9a\u5f8c\u306b\u30b5\u30fc\u30d0\u304b\u3089\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306b\u6e21\u3055\u308c\u305f\u30b5\u30fc\u30d0\u8a3c\u660e\u66f8\u304a\u3088\u3073\u4e2d\u9593\u8a3c\u660e\u66f8\u304c\u6b63\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u3001iOS\u306e\u30b7\u30b9\u30c6\u30e0\u306b\u7d44\u307f\u8fbc\u307e\u308c\u305f\u30eb\u30fc\u30c8CA\u8a3c\u660e\u66f8\u307e\u3067\u8fbf\u3063\u3066\u691c\u8a3c\u3057\u305f\u3044**\n3. \u3053\u3053\u3067\u3001iOS\u306b\u65bc\u3044\u3066\u306f\u30eb\u30fc\u30c8CA\u8a3c\u660e\u66f8\u30ea\u30b9\u30c8\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u4e0d\u53ef\u80fd(\u3068\u601d\u308f\u308c\u308b)\n4. \u3064\u307e\u308a\u3001OpenSSL\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3001SSL_CTX_load_verify_locations\u3084SSL_CTX_set_default_verify_paths\u3068\u3044\u3063\u305fAPI\u304c\u5229\u7528\u3067\u304d\u305a\u3001Bundle\u306b\u30eb\u30fc\u30c8CA\u8a3c\u660e\u66f8\u30ea\u30b9\u30c8\u306a\u3069\u3092\u8ffd\u52a0\u3057\u3066\u304a\u304b\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044(\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u3092\u901a\u3059\u306e\u3068\u540c\u69d8\u306b)  \n5. \u3053\u308c\u306f\u5acc\u3060\uff01\n\n\u3068\u3044\u3046\u65b9\u5411\u3051\n\n# \u89e3\u6c7a\u65b9\u6cd5\n## OpenSSL(C/C++)\u3067\u306e\u5b9f\u88c5\n1. SSL_set_verify\u3092\u7528\u3044\u3066\u3001SSL_VERIFY_NONE\u306b\u3057\u3066\u304a\u304f\n(\u306a\u304a\u3001verifycallback\u3092\u5229\u7528\u3059\u308b\u3001\u3068\u3044\u3046\u624b\u6bb5\u306f\u672a\u691c\u8a3c)\n2. SSL_Connect\u3059\u308b\n3. SSL_get_peer_certificate_chain\u3059\u308b  \n\u3053\u308c\u306b\u3088\u308a\u3001\u30b5\u30fc\u30d0\u8a3c\u660e\u66f8(\u3068\u4e2d\u9593\u8a3c\u660e\u66f8)\u304c\u5f97\u3089\u308c\u308b  \n\u5f97\u3089\u308c\u305f\u8a3c\u660e\u66f8\u306f\u3001X509\u5f62\u5f0f\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u8868\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001OpenSSL\u3067\u63d0\u4f9b\u3055\u308c\u308bAPI\u3092\u5229\u7528\u3057\u3066\u3001iOS\u3067\u53d6\u308a\u6271\u3046\u3053\u3068\u306e\u3067\u304d\u308b\u3001DER\u5f62\u5f0f\u306e\u30d0\u30a4\u30ca\u30ea\u5217\u306b\u76f4\u3059  \n\n```\n  unsigned char* buf = NULL; // NULL  \n  int len = i2d_X509(cert, &buf); // NULL\u3092\u4e0e\u3048\u308b\u3068\u3001\u65b0\u305f\u306bmalloc\u3057\u3066DER\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u3002\u52ff\u8ad6\u3001\u5f8c\u307b\u3069free\u5fc5\u9808\n```\n## Objective-C\u5074\u306e\u5b9f\u88c5\n```\nCFMutableArrayRef certs = CFArrayCreateMutable(kCFAllocatorDefault, 0, NULL); // \u6700\u5927\u914d\u5217\u500b\u6570 => \u6307\u5b9a\u306a\u3057\nfor (\u30b5\u30fc\u30d0\u304b\u3089\u8fd4\u7b54\u3055\u308c\u305f\u8a3c\u660e\u66f8\u30c1\u30a7\u30fc\u30f3\u306b\u542b\u307e\u308c\u308b\u8a3c\u660e\u66f8\u306e\u500b\u6570) {\n  CFDataRef data = CFDataCreate(kCFAllocatorDefault, buf, len); // \u524d\u7bc03.\u3067\u5f97\u3089\u308c\u305fDER\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3068\u9577\u3055\n  SecCertificateRef cert = SecCertificateCreateWithData(NULL, data);\n  CFArrayAppendValue(certs, cert);\n}\nSecTrustRef trust;\nOSStatus status = SecTrustCreateWithCertificates(certs, SecPolicyreateBasicX509(), &trust);\nSecTrustResultType r = kSecTrustResultInvalid;\nstatus = SecTrustEvaluate(trust, &r);\n```\n\u3053\u308c\u3067\u3001r\u306e\u8fd4\u308a\u5024\u304ckSecTrustResultProceed\b==1\u3082\u3057\u304f\u306fkSecTrustResultUnspecified==4\u3067\u3042\u308c\u3070\u3001\u30b5\u30fc\u30d0\u8a3c\u660e\u66f8\u691c\u8a3c\u6210\u529f[^\u6ce81]\n\u306a\u304a\u3001\u30b5\u30fc\u30d0\u304b\u3089\u6e21\u3055\u308c\u305f\u8a3c\u660e\u66f8\u306b\u4e2d\u9593CA\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u306a\u3069\u306e\u30df\u30b9\u3067\u30eb\u30fc\u30c8CA\u307e\u3067\u8fbf\u308c\u306a\u304b\u3063\u305f\u308a\u3001\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8+\u30aa\u30ec\u30aa\u30ecCA\u8a3c\u660e\u66f8(\u30b7\u30b9\u30c6\u30e0\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u8a3c\u660e\u66f8)\u304c\u30b5\u30fc\u30d0\u304b\u3089\u6e21\u3055\u308c\u305f\u5834\u5408\u306f\u3001kSecTrustResultRecoverableTrustFailure == 5\u3068\u306a\u308b  \n\n# \u6700\u5f8c\u306b\n\u3053\u306e\u8fba\u308a\u3092\u5b9f\u88c5\u3057\u305f\u30b3\u30fc\u30c9\u306f\u3001\nhttps://github.com/linear-rpc/linear-objc/blob/master/src/LinearSSLClient.mm#L89\n\u306b\u3042\u308b\u306e\u3067\u3001\u8208\u5473\u304c\u3042\u308c\u3070\u3054\u53c2\u7167\u3092\n\n[^\u6ce81]: > https://developer.apple.com/library/mac/qa/qa1360/_index.html<br>  The semantics behind receiving a kSecTrustResultUnspecified (4) error from Security APIs is that the certificate is indeed valid.  However, the user has not explicitly set the trust settings for the certificate via Keychain Access.\n", "tags": ["Objective-C", "openssl"]}