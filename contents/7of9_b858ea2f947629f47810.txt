{"tags": ["cppBuilder", "UI", "TForm"], "context": "\n\u52d5\u4f5c\u78ba\u8a8d\nC++ Builder XE4\n\n\n4\u3064\u306eTForm\u304c\u3042\u308b\u30a2\u30d7\u30ea\u3002\n\u305d\u308c\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u914d\u7f6e\u306b\u3057\u305f\u3044\u3002\n\nForm1: \u5de6\u4e0a\u306b\u914d\u7f6e. \u30b5\u30a4\u30ba H1 x W2\nForm2: \u5de6\u4e2d\u306b\u914d\u7f6e. \u30b5\u30a4\u30ba H1 x W2\nForm3: \u5de6\u4e0b\u306b\u914d\u7f6e. \u30b5\u30a4\u30ba H1 x W2\nForm4: \u53f3\u5074\u306b\u914d\u7f6e. \u30b5\u30a4\u30ba H3 x W4\n\n\nUnit1.cpp\n//---------------------------------------------------------------------------\n\n#include <vcl.h>\n#pragma hdrstop\n\n#include \"Unit1.h\"\n#include \"Unit2.h\"\n#include \"Unit3.h\"\n#include \"Unit4.h\"\n#include <algorithm> // for std::max()\n//---------------------------------------------------------------------------\n#pragma package(smart_init)\n#pragma resource \"*.dfm\"\nTForm1 *Form1;\n//---------------------------------------------------------------------------\n__fastcall TForm1::TForm1(TComponent* Owner)\n    : TForm(Owner)\n{\n}\n//---------------------------------------------------------------------------\nvoid __fastcall TForm1::Button1Click(TObject *Sender)\n{\n    static const int kNumForms = 4;\n\n    // Form\n    int xpos[kNumForms] = {0,0,0,2};\n    int xwid[kNumForms] = {2,2,2,4};\n    int ypos[kNumForms] = {0,1,2,0};\n    int yhei[kNumForms] = {1,1,1,3};\n\n    // Form width and height\n    int frmWid = 0;\n    int frmHei = 0;\n\n    // 1. Find total width and height\n    for(int idx=0; idx<kNumForms; idx++) {\n        int wid = xpos[idx] + xwid[idx];\n        int hei = ypos[idx] + yhei[idx];\n        frmWid = std::max(frmWid, wid);\n        frmHei = std::max(frmHei, hei);\n    }\n\n    // 2. calculate divisions for (x,y)\n    int xdiv = Screen->Monitors[0]->Width / frmWid;\n    int ydiv = Screen->Monitors[0]->Height / frmHei;\n\n// for debug\n//  xdiv = 1280 / frmWid;\n//  ydiv = 768 / frmHei;\n\n    TForm *frmPtrs[] = {Form1, Form2, Form3, Form4};\n\n    for(int idx=0; idx<kNumForms; idx++) {\n        frmPtrs[idx]->Left = xpos[idx] * xdiv;\n        frmPtrs[idx]->Top  = ypos[idx] * ydiv;\n        frmPtrs[idx]->Width = xwid[idx] * xdiv;\n        frmPtrs[idx]->Height = yhei[idx] * ydiv;\n    }\n\n    // 3. show (Form1 is already shown)\n    Form2->Show();\n    Form3->Show();\n    Form4->Show();\n}\n//---------------------------------------------------------------------------\n\n\n\n\nC++ Builder XE4\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u3001\u3082\u3063\u3068\u7c21\u5358\u306a\u5b9f\u88c5\uff08\u30c7\u30b6\u30a4\u30f3\uff09\u304c\u3042\u308b\u306e\u304b\u306f\u4e0d\u660e\n\u30bf\u30b9\u30af\u30d0\u30fc\u306e\u30b5\u30a4\u30ba\u7a0b\u5ea6\u306f\u8003\u616e\u3057\u305f\u65b9\u304c\u3044\u3044\u304b\u3082\n\n\nhttp://qiita.com/7of9/items/7a70fdc2c4c157bf025b\n\n\n\n\nv0.2 > Taskbar\u306e\u9ad8\u3055\u3092\u8003\u616e\n\nUnit1.cpp\n//---------------------------------------------------------------------------\n\n#include <vcl.h>\n#pragma hdrstop\n\n#include \"Unit1.h\"\n#include \"Unit2.h\"\n#include \"Unit3.h\"\n#include \"Unit4.h\"\n#include <algorithm> // for std::max()\n//---------------------------------------------------------------------------\n#pragma package(smart_init)\n#pragma resource \"*.dfm\"\nTForm1 *Form1;\n//---------------------------------------------------------------------------\n__fastcall TForm1::TForm1(TComponent* Owner)\n    : TForm(Owner)\n{\n}\n//---------------------------------------------------------------------------\nvoid __fastcall TForm1::Button1Click(TObject *Sender)\n{\n    static const int kNumForms = 4;\n    static const int kHeightTaskBar = 40;\n\n    // Form\n    int xpos[kNumForms] = {0,0,0,2};\n    int xwid[kNumForms] = {2,2,2,4};\n    int ypos[kNumForms] = {0,1,2,0};\n    int yhei[kNumForms] = {1,1,1,3};\n\n    // Form width and height\n    int frmWid = 0;\n    int frmHei = 0;\n\n    // 1. Find total width and height\n    for(int idx=0; idx<kNumForms; idx++) {\n        int wid = xpos[idx] + xwid[idx];\n        int hei = ypos[idx] + yhei[idx];\n        frmWid = std::max(frmWid, wid);\n        frmHei = std::max(frmHei, hei);\n    }\n\n    // 2. calculate divisions for (x,y)\n    int xdiv = Screen->Monitors[0]->Width / frmWid;\n    int ydiv = (Screen->Monitors[0]->Height - kHeightTaskBar) / frmHei;\n\n// for debug\n//  xdiv = 1280 / frmWid;\n//  ydiv = 768 / frmHei;\n\n    TForm *frmPtrs[] = {Form1, Form2, Form3, Form4};\n\n    for(int idx=0; idx<kNumForms; idx++) {\n        frmPtrs[idx]->Left = xpos[idx] * xdiv;\n        frmPtrs[idx]->Top  = ypos[idx] * ydiv;\n        frmPtrs[idx]->Width = xwid[idx] * xdiv;\n        frmPtrs[idx]->Height = yhei[idx] * ydiv;\n    }\n\n    // 3. show (Form1 is already shown)\n    Form2->Show();\n    Form3->Show();\n    Form4->Show();\n}\n//---------------------------------------------------------------------------\n\n\n```txt:\u52d5\u4f5c\u78ba\u8a8d\nC++ Builder XE4\n```\n\n4\u3064\u306eTForm\u304c\u3042\u308b\u30a2\u30d7\u30ea\u3002\n\n\u305d\u308c\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u914d\u7f6e\u306b\u3057\u305f\u3044\u3002\n\n- Form1: \u5de6\u4e0a\u306b\u914d\u7f6e. \u30b5\u30a4\u30ba H1 x W2\n- Form2: \u5de6\u4e2d\u306b\u914d\u7f6e. \u30b5\u30a4\u30ba H1 x W2\n- Form3: \u5de6\u4e0b\u306b\u914d\u7f6e. \u30b5\u30a4\u30ba H1 x W2\n- Form4: \u53f3\u5074\u306b\u914d\u7f6e. \u30b5\u30a4\u30ba H3 x W4\n\n```Unit1.cpp\n//---------------------------------------------------------------------------\n\n#include <vcl.h>\n#pragma hdrstop\n\n#include \"Unit1.h\"\n#include \"Unit2.h\"\n#include \"Unit3.h\"\n#include \"Unit4.h\"\n#include <algorithm> // for std::max()\n//---------------------------------------------------------------------------\n#pragma package(smart_init)\n#pragma resource \"*.dfm\"\nTForm1 *Form1;\n//---------------------------------------------------------------------------\n__fastcall TForm1::TForm1(TComponent* Owner)\n\t: TForm(Owner)\n{\n}\n//---------------------------------------------------------------------------\nvoid __fastcall TForm1::Button1Click(TObject *Sender)\n{\n\tstatic const int kNumForms = 4;\n\n\t// Form\n\tint xpos[kNumForms] = {0,0,0,2};\n\tint xwid[kNumForms] = {2,2,2,4};\n\tint ypos[kNumForms] = {0,1,2,0};\n\tint yhei[kNumForms] = {1,1,1,3};\n\n\t// Form width and height\n\tint frmWid = 0;\n\tint frmHei = 0;\n\n\t// 1. Find total width and height\n\tfor(int idx=0; idx<kNumForms; idx++) {\n\t\tint wid = xpos[idx] + xwid[idx];\n\t\tint hei = ypos[idx] + yhei[idx];\n\t\tfrmWid = std::max(frmWid, wid);\n\t\tfrmHei = std::max(frmHei, hei);\n\t}\n\n\t// 2. calculate divisions for (x,y)\n\tint xdiv = Screen->Monitors[0]->Width / frmWid;\n\tint ydiv = Screen->Monitors[0]->Height / frmHei;\n\n// for debug\n//\txdiv = 1280 / frmWid;\n//\tydiv = 768 / frmHei;\n\n\tTForm *frmPtrs[] = {Form1, Form2, Form3, Form4};\n\n\tfor(int idx=0; idx<kNumForms; idx++) {\n\t\tfrmPtrs[idx]->Left = xpos[idx] * xdiv;\n\t\tfrmPtrs[idx]->Top  = ypos[idx] * ydiv;\n\t\tfrmPtrs[idx]->Width = xwid[idx] * xdiv;\n\t\tfrmPtrs[idx]->Height = yhei[idx] * ydiv;\n\t}\n\n\t// 3. show (Form1 is already shown)\n\tForm2->Show();\n\tForm3->Show();\n\tForm4->Show();\n}\n//---------------------------------------------------------------------------\n```\n\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/9085cc8a-5173-4eeb-3789-24f653b42a11.png)\n\n- C++ Builder XE4\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u3001\u3082\u3063\u3068\u7c21\u5358\u306a\u5b9f\u88c5\uff08\u30c7\u30b6\u30a4\u30f3\uff09\u304c\u3042\u308b\u306e\u304b\u306f\u4e0d\u660e\n- \u30bf\u30b9\u30af\u30d0\u30fc\u306e\u30b5\u30a4\u30ba\u7a0b\u5ea6\u306f\u8003\u616e\u3057\u305f\u65b9\u304c\u3044\u3044\u304b\u3082\n  - http://qiita.com/7of9/items/7a70fdc2c4c157bf025b\n\n\n### v0.2 > Taskbar\u306e\u9ad8\u3055\u3092\u8003\u616e\n\n```Unit1.cpp\n//---------------------------------------------------------------------------\n\n#include <vcl.h>\n#pragma hdrstop\n\n#include \"Unit1.h\"\n#include \"Unit2.h\"\n#include \"Unit3.h\"\n#include \"Unit4.h\"\n#include <algorithm> // for std::max()\n//---------------------------------------------------------------------------\n#pragma package(smart_init)\n#pragma resource \"*.dfm\"\nTForm1 *Form1;\n//---------------------------------------------------------------------------\n__fastcall TForm1::TForm1(TComponent* Owner)\n\t: TForm(Owner)\n{\n}\n//---------------------------------------------------------------------------\nvoid __fastcall TForm1::Button1Click(TObject *Sender)\n{\n\tstatic const int kNumForms = 4;\n\tstatic const int kHeightTaskBar = 40;\n\n\t// Form\n\tint xpos[kNumForms] = {0,0,0,2};\n\tint xwid[kNumForms] = {2,2,2,4};\n\tint ypos[kNumForms] = {0,1,2,0};\n\tint yhei[kNumForms] = {1,1,1,3};\n\n\t// Form width and height\n\tint frmWid = 0;\n\tint frmHei = 0;\n\n\t// 1. Find total width and height\n\tfor(int idx=0; idx<kNumForms; idx++) {\n\t\tint wid = xpos[idx] + xwid[idx];\n\t\tint hei = ypos[idx] + yhei[idx];\n\t\tfrmWid = std::max(frmWid, wid);\n\t\tfrmHei = std::max(frmHei, hei);\n\t}\n\n\t// 2. calculate divisions for (x,y)\n\tint xdiv = Screen->Monitors[0]->Width / frmWid;\n\tint ydiv = (Screen->Monitors[0]->Height - kHeightTaskBar) / frmHei;\n\n// for debug\n//\txdiv = 1280 / frmWid;\n//\tydiv = 768 / frmHei;\n\n\tTForm *frmPtrs[] = {Form1, Form2, Form3, Form4};\n\n\tfor(int idx=0; idx<kNumForms; idx++) {\n\t\tfrmPtrs[idx]->Left = xpos[idx] * xdiv;\n\t\tfrmPtrs[idx]->Top  = ypos[idx] * ydiv;\n\t\tfrmPtrs[idx]->Width = xwid[idx] * xdiv;\n\t\tfrmPtrs[idx]->Height = yhei[idx] * ydiv;\n\t}\n\n\t// 3. show (Form1 is already shown)\n\tForm2->Show();\n\tForm3->Show();\n\tForm4->Show();\n}\n//---------------------------------------------------------------------------\n```\n"}