{"context": "2016\u5e74\u306b\u4f5c\u6210\u3057\u305f\u4ee5\u4e0b\u306eOSS\u306b\u3064\u3044\u3066\u3001\u305d\u308c\u305e\u308c\u6982\u8981\u3068\u4f8b\u793a\n\nCLI\u30c4\u30fc\u30eb x 2\nPython\u30e9\u30a4\u30d6\u30e9\u30ea x 10\n\n\nCLI\u30c4\u30fc\u30eb\n\nsqlitebiter\n\nCSV/Excel/HTML/JSON/LTSV/Markdown/TSV/Google Sheets  \u3092SQLite\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306b\u5909\u63db\u3059\u308b\u30c4\u30fc\u30eb\u3002\n\u6307\u5b9a\u3057\u305fURL\u304b\u3089\u5909\u63db\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\nfrom-file\n$ ls\nsample_data.csv  sample_data.xlsx  sample_data_multi.json  sample_data_single.json\n$ sqlitebiter file * -o sample.sqlite\n[INFO] convert 'sample_data.csv' to 'sample_data' table\n[INFO] convert 'sample_data.xlsx' to 'samplesheet1' table\n[INFO] convert 'sample_data.xlsx' to 'samplesheet3' table\n[INFO] convert 'sample_data_multi.json' to 'sample_data_multi_table_b' table\n[INFO] convert 'sample_data_multi.json' to 'sample_data_multi_table_a' table\n[INFO] convert 'sample_data_single.json' to 'sample_data_single_json3' table\n$ ls sample.sqlite\nsample.sqlite\n\n\n\nfrom-URL\n$ sqlitebiter -v url \"https://en.wikipedia.org/wiki/Comparison_of_firewalls\"\n[INFO] convert 'https://en.wikipedia.org/wiki/Comparison_of_firewalls' to 'Comparison_of_firewalls_Wikipedia_html1 (Firewall TEXT, License TEXT, CostUsageLimits TEXT, OS TEXT)' table\n[INFO] convert 'https://en.wikipedia.org/wiki/Comparison_of_firewalls' to 'Comparison_of_firewalls_Wikipedia_html2 (Firewall TEXT, License TEXT, Cost TEXT, OS TEXT)' table\n[INFO] convert 'https://en.wikipedia.org/wiki/Comparison_of_firewalls' to 'Comparison_of_firewalls_Wikipedia_html3 (CanTarget TEXT, Changingdefaultpolicytoacceptrejectbyissuingasinglerule TEXT, IPdestinationaddresses TEXT, IPsourceaddresses TEXT, TCPUDPdestinationports TEXT, TCPUDPsourceports TEXT, EthernetMACdestinationaddress TEXT, EthernetMACsourceaddress TEXT, Inboundfirewallingress TEXT, Outboundfirewallegress TEXT)' table\n[INFO] convert 'https://en.wikipedia.org/wiki/Comparison_of_firewalls' to 'Comparison_of_firewalls_Wikipedia_html4 (Can TEXT, [workatOSILayer4statefulfirewall] TEXT, [workatOSILayer7applicationinspection] TEXT, ChangeTTLTransparenttotraceroute TEXT, ConfigureREJECTwithanswer TEXT, DMZdemilitarizedzoneallowsforsingleseveralhostsnottobefirewalled TEXT, Filteraccordingtotimeofday TEXT, RedirectTCPUDPportsportforwarding TEXT, RedirectIPaddressesforwarding TEXT, FilteraccordingtoUserAuthorization TEXT, TrafficratelimitQoS TEXT, Tarpit TEXT, Log TEXT)' table\n[INFO] convert 'https://en.wikipedia.org/wiki/Comparison_of_firewalls' to 'Comparison_of_firewalls_Wikipedia_html5 (Features TEXT, ConfigurationGUItextorbothmodes TEXT, [RemoteAccessWebHTTPTelnetSSHRDPSerialCOMRS232] TEXT, Changeruleswithoutrequiringrestart TEXT, Abilitytocentrallymanageallfirewallstogether TEXT)' table\n[INFO] convert 'https://en.wikipedia.org/wiki/Comparison_of_firewalls' to 'Comparison_of_firewalls_Wikipedia_html6 (Features TEXT, Modularitysupportsthirdpartymodulestoextendfunctionality TEXT, [IPS : Intrusion prevention system] TEXT, OpenSourceLicense TEXT, [supports IPv6 ?] TEXT, ClassHomeProfessional TEXT, OperatingSystemsonwhichitruns TEXT)' table\n[INFO] convert 'https://en.wikipedia.org/wiki/Comparison_of_firewalls' to 'Comparison_of_firewalls_Wikipedia_html7 (Can TEXT, [NAT44staticdynamicwoportsPAT] TEXT, [NAT64NPTv6] TEXT, IDSIntrusionDetectionSystem TEXT, VPNVirtualPrivateNetwork TEXT, AVAntiVirus TEXT, Sniffer TEXT, Profileselection TEXT)' table\n\n\n\nRepository: https://github.com/thombashi/sqlitebiter\n\n\n\ntcconfig\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5e2f\u57df\u5236\u5fa1\u30b3\u30de\u30f3\u30c9\u3067\u3042\u308btc\u306e\u30e9\u30c3\u30d1\u30fc\u30c4\u30fc\u30eb\u3002tc\u306e\u8a2d\u5b9a\u7528\u66f8\u5f0f\u3092\u3059\u3050\u5fd8\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u4f5c\u3063\u305f\u3082\u306e\u3002\n\u4ee5\u4e0b3\u7a2e\u306e\u30b3\u30de\u30f3\u30c9\u304c\u542b\u307e\u308c\u308b\u3002\n\n\ntcset: tc\u30d5\u30a3\u30eb\u30bf\u8a2d\u5b9a\n\ntcdel: tc\u30d5\u30a3\u30eb\u30bf\u524a\u9664\n\ntcshow: \u73fe\u5728\u306etc\u8a2d\u5b9a\u306e\u8868\u793a\n\ntcset\u306f\u6d41\u5165\u51fa\u4e21\u65b9\u306e\u30d1\u30b1\u30c3\u30c8\u306b\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3067\u304d\u308b\u3002\n\ntcconfig-example\n# tcset --device eth0 --delay 10 --delay-distro 2  --loss 0.01 --rate 0.25M --network 192.168.0.10 --port 8080\n# tcset --device eth0 --delay 1 --loss 0.02 --rate 500K --direction incoming\n# tcshow --device eth0\n{\n    \"eth0\": {\n        \"outgoing\": {\n            \"network=192.168.0.10/32, port=8080\": {\n                \"delay\": \"10.0\",\n                \"loss\": \"0.01\",\n                \"rate\": \"250K\",\n                \"delay-distro\": \"2.0\"\n            },\n            \"network=0.0.0.0/0\": {}\n        },\n        \"incoming\": {\n            \"network=0.0.0.0/0\": {\n                \"delay\": \"1.0\",\n                \"loss\": \"0.02\",\n                \"rate\": \"500K\"\n            }\n        }\n    }\n}\n\n\n\nRepository: https://github.com/thombashi/tcconfig\n\n\n\nPython\u30e9\u30a4\u30d6\u30e9\u30ea\n\npytablewriter\n\n\u8868\u3092\u66f8\u304f\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u6587\u5b57\u5bfe\u5fdc\u3002\n\u30b5\u30dd\u30fc\u30c8\u30d5\u30a9\u30fc\u30de\u30c3\u30c8:CSV/HTML/JavaScript/JSON/LTSV/Markdown/MediaWiki/Excel/Pandas/Python/reStructuredText/TOML/TSV.\n\n-example\nimport io\nimport pytablewriter\n\nwriter = pytablewriter.MarkdownTableWriter()\nwriter.table_name = u\"\u751f\u6210\u306b\u95a2\u3059\u308b\u30d1\u30bf\u30fc\u30f3\".encode(\"utf_8\")\nwriter.header_list = [u\"\u30d1\u30bf\u30fc\u30f3\u540d\".encode(\"utf_8\"), \"\u6982\u8981\", \"GoF\", \"Code Complete[1]\"]\nwriter.value_matrix = [\n    [\"Abstract Factory\", u\"\u95a2\u9023\u3059\u308b\u4e00\u9023\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u3001\u9069\u5207\u306b\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u3002\".encode(\"utf_8\"), \"Yes\", \"Yes\"],\n    [\"Builder\", \"\u8907\u5408\u5316\u3055\u308c\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u904e\u7a0b\u3092\u96a0\u853d\u3059\u308b\u3002\", \"Yes\", \"No\"],\n    [\"Factory Method\", \"\u5b9f\u969b\u306b\u751f\u6210\u3055\u308c\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u3002\", \"Yes\", \"Yes\"],\n    [\"Prototype\", \"\u540c\u69d8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u539f\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8907\u88fd\u3059\u308b\u3002\", \"Yes\", \"No\"],\n    [\"Singleton\", \"\u3042\u308b\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u5358\u4e00\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u3002\", \"Yes\", \"Yes\"],\n]\n\nwith io.open(\"multibyte_table_output.txt\", \"w\", encoding=\"utf-8\") as f:\n    writer.stream = f\n    writer.write_table()\n\n\n\nmultibyte_table_output.txt\n# \u751f\u6210\u306b\u95a2\u3059\u308b\u30d1\u30bf\u30fc\u30f3\n   \u30d1\u30bf\u30fc\u30f3\u540d   |                                    \u6982\u8981                                    |GoF|Code Complete[1]\n----------------|----------------------------------------------------------------------------|---|----------------\nAbstract Factory|\u95a2\u9023\u3059\u308b\u4e00\u9023\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u3001\u9069\u5207\u306b\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u3002    |Yes|Yes             \nBuilder         |\u8907\u5408\u5316\u3055\u308c\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u904e\u7a0b\u3092\u96a0\u853d\u3059\u308b\u3002                              |Yes|No              \nFactory Method  |\u5b9f\u969b\u306b\u751f\u6210\u3055\u308c\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u3002|Yes|Yes             \nPrototype       |\u540c\u69d8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u539f\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8907\u88fd\u3059\u308b\u3002          |Yes|No              \nSingleton       |\u3042\u308b\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u5358\u4e00\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u3002                |Yes|Yes             \n\n\n\u63cf\u753b\u3059\u308b\u3068\u2193\u306e\u3088\u3046\u306b:\n\n\n\n\u30d1\u30bf\u30fc\u30f3\u540d\n\u6982\u8981\nGoF\nCode Complete[1]\n\n\n\n\nAbstract Factory\n\u95a2\u9023\u3059\u308b\u4e00\u9023\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u3001\u9069\u5207\u306b\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u3002\nYes\nYes\n\n\nBuilder\n\u8907\u5408\u5316\u3055\u308c\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u904e\u7a0b\u3092\u96a0\u853d\u3059\u308b\u3002\nYes\nNo\n\n\nFactory Method\n\u5b9f\u969b\u306b\u751f\u6210\u3055\u308c\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u3002\nYes\nYes\n\n\nPrototype\n\u540c\u69d8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u539f\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8907\u88fd\u3059\u308b\u3002\nYes\nNo\n\n\nSingleton\n\u3042\u308b\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u5358\u4e00\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u3002\nYes\nYes\n\n\n\n\nRepository: https://github.com/thombashi/pytablewriter\n\n\n\nSimpleSQLite\n\nPython built-in\u306esqlite3\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30e9\u30c3\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\nSQLite\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u4f5c\u6210\u3092\u7c21\u6613\u5316\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3002\n\u8a73\u3057\u304f\u306f\u2192SQLite\u306e\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210/\u30c7\u30fc\u30bf\u633f\u5165\u3092\u7c21\u6613\u5316\u3059\u308bPython\u30e9\u30a4\u30d6\u30e9\u30eaSimpleSQLite\u3092\u4f5c\u3063\u305f\n\nRepository: https://github.com/thombashi/SimpleSQLite\n\n\n\nDateTimeRange\n\n\u6642\u9593\u306e\u7bc4\u56f2\u3092\u6271\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\u590f\u6642\u9593\u5bfe\u5fdc\u6709\u308a\u3002\n\u8a73\u3057\u304f\u306f\u2192\u6642\u9593\u7bc4\u56f2\u3092\u6271\u3046Python\u30e9\u30a4\u30d6\u30e9\u30eaDateTimeRange\u3092\u4f5c\u3063\u305f\n\nRepository: https://github.com/thombashi/DateTimeRange\n\n\n\nDataProperty\n\n\u578b\u60c5\u5831\u3001\u6587\u5b57\u5217\u3068\u3057\u3066\u306e\u9577\u3055\u7b49\u306e\u5c5e\u6027\u60c5\u5831\u3092\u62bd\u51fa\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n\u30c7\u30fc\u30bf\u5358\u4f53\u304b\u3001\u30c7\u30fc\u30bf\u914d\u5217\u3092\u5bfe\u8c61\u3068\u3067\u304d\u308b\u3002\n\u30c7\u30fc\u30bf\u884c\u5217\u304b\u3089\u5404\u5217\u306e\u60c5\u5831\u3092\u62bd\u51fa\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\u30c7\u30fc\u30bf\u5358\u4f53\u304b\u3089\u5c5e\u6027\u60c5\u5831\u3092\u62bd\u51fa\u3059\u308b\u4f8b\n>>> from dataproperty import DataProperty\n>>> DataProperty(-1.1)\ndata=-1.1, typename=FLOAT, align=right, str_len=4, ascii_char_width=4, integer_digits=1, decimal_places=1, additional_format_len=1\n\n\n\n\u30c7\u30fc\u30bf\u884c\u5217\u304b\u3089\u5404\u5217\u306e\u5c5e\u6027\u60c5\u5831\u3092\u62bd\u51fa\u3059\u308b\u4f8b\nimport sys\nimport datetime\nfrom dataproperty import DataPropertyExtractor, Typecode\n\ndef display_col_dp(dp_list, attr_name):\n    \"\"\"show a value assocciated with an attribute for each\n    DataProperty instance in the dp_list\"\"\"\n\n    print()\n    print(\"---------- {:s} ----------\".format(attr_name))\n    print([getattr(dp, attr_name) for dp in dp_list])\n\ndef main():\n    # sample data definitions\n    dt = datetime.datetime(2017, 1, 1, 0, 0, 0)\n    inf = float(\"inf\")\n    nan = float(\"nan\")\n    data_matrix = [\n        [1, 1.1,  \"aa\",   1,   1,     True,   inf,   nan,   dt],\n        [2, 2.2,  \"bbb\",  2.2, 2.2,   False,  \"inf\", \"nan\", dt],\n        [3, 3.33, \"cccc\", -3,  \"ccc\", \"true\", inf,\n            \"NAN\", \"2017-01-01T01:23:45+0900\"],\n    ]\n\n    # extract property for each column from a matrix\n    dp_extractor = DataPropertyExtractor()\n    dp_extractor.header_list = [\n        \"int\", \"float\", \"str\", \"num\", \"mix\", \"bool\", \"inf\", \"nan\", \"time\"]\n    dp_extractor.data_matrix = data_matrix\n    col_dp_list = dp_extractor.to_col_dataproperty_list()\n\n    print(\"---------- typename ----------\")\n    print([Typecode.get_typename(dp.typecode) for dp in col_dp_list])\n\n    display_col_dp(col_dp_list, \"align\")\n    display_col_dp(col_dp_list, \"ascii_char_width\")\n    display_col_dp(col_dp_list, \"decimal_places\")\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n\n\n\noutput\n---------- typename ----------\n['INTEGER', 'FLOAT', 'STRING', 'FLOAT', 'STRING', 'BOOL', 'INFINITY', 'NAN', 'STRING']\n\n---------- align ----------\n[right, right, left, right, left, left, left, left, left]\n\n---------- ascii_char_width ----------\n[3, 5, 4, 4, 3, 5, 8, 3, 24]\n\n---------- decimal_places ----------\n[0, 2, nan, 1, 1, nan, nan, nan, nan]\n\n\n\nRepository: https://github.com/thombashi/DataProperty\n\n\n\npingparsing\n\nping\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u7d50\u679c\u3092\u30d1\u30fc\u30b9\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\nping\u5b9f\u884c\u3082\u3067\u304d\u308b\u3002\n\ninput\n>ping google.com -n 10 > ping_win.txt\n\n>type ping_win.txt\n\nPinging google.com [216.58.196.238] with 32 bytes of data:\nReply from 216.58.196.238: bytes=32 time=87ms TTL=51\nReply from 216.58.196.238: bytes=32 time=97ms TTL=51\nReply from 216.58.196.238: bytes=32 time=56ms TTL=51\nReply from 216.58.196.238: bytes=32 time=95ms TTL=51\nReply from 216.58.196.238: bytes=32 time=194ms TTL=51\nReply from 216.58.196.238: bytes=32 time=98ms TTL=51\nReply from 216.58.196.238: bytes=32 time=93ms TTL=51\nReply from 216.58.196.238: bytes=32 time=96ms TTL=51\nReply from 216.58.196.238: bytes=32 time=96ms TTL=51\nReply from 216.58.196.238: bytes=32 time=165ms TTL=51\n\nPing statistics for 216.58.196.238:\n    Packets: Sent = 10, Received = 10, Lost = 0 (0% loss),\nApproximate round trip times in milli-seconds:\n    Minimum = 56ms, Maximum = 194ms, Average = 107ms\n\n\n\u2191\u306e\u3088\u3046\u306aping\u306e\u5b9f\u884c\u7d50\u679c\u3092\u30d1\u30fc\u30b9\u3059\u308b\u3002\n\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u305f \u30b5\u30f3\u30d7\u30eb \u306e\u5b9f\u884c\u7d50\u679c\u304c\u2193\n\noutput\nparse_sample.py -f ping_win.txt\n# properties ---\npacket_transmit: 10\npacket_receive: 10\npacket_loss: 0.0\nrtt_min: 56.0\nrtt_avg: 107.0\nrtt_max: 194.0\nrtt_mdev: None\n\n# asdict ---\n{\n    \"packet_loss\": 0.0,\n    \"packet_transmit\": 10,\n    \"rtt_min\": 56.0,\n    \"rtt_avg\": 107.0,\n    \"packet_receive\": 10,\n    \"rtt_max\": 194.0,\n    \"rtt_mdev\": null\n}\n\n\n\nRepository: https://github.com/thombashi/pingparsing\n\n\n\npathvalidate\n\n\u30d5\u30a1\u30a4\u30eb\u540d\u7b49\u306e\u6587\u5b57\u5217\u306evalidate\u3001\u7121\u52b9\u306a\u6587\u5b57\u306e\u7f6e\u63db\u3092\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n\nWindows/Linux\u4e21\u65b9\u3067\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3057\u3066\u6709\u52b9\u306a\u6587\u5b57\u5217\u306b\u7f6e\u63db\u3059\u308b\u4f8b\nimport pathvalidate\n\nfilename = \"_a*b:c<d>e%f/(g)h+i_0.txt\"\nprint(pathvalidate.sanitize_filename(filename))\n\n\n_abcde%f(g)h+i_0.txt\n\n\nRepository: https://github.com/thombashi/pathvalidate\n\n\n\nmbstrdecoder\n\n\u6587\u5b57\u5217\u3092Unicode\u306b\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n\u3053\u308c\u306b\u3088\u3063\u3066Unicode\u3067\u60a9\u307e\u3055\u308c\u308b\u3053\u3068\u304c\u6e1b\u3063\u305f\u3002\nfrom mbstrdecoder import MultiByteStrDecoder\n\nencoded_multibyte_text = u\"\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u6587\u5b57\".encode(\"utf-8\")\n\n# \u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u6587\u5b57\u5217\u3001Unicode\u6587\u5b57\u5217\u3069\u3061\u3089\u3067\u3082\u5229\u7528\u53ef\u3002\ndecoder = MultiByteStrDecoder(encoded_multibyte_text)\n\nprint(encoded_multibyte_text)\nprint(decoder.unicode_str)\nprint(decoder.codec)\n\n\noutput\nb'\\xe3\\x83\\x9e\\xe3\\x83\\xab\\xe3\\x83\\x81\\xe3\\x83\\x90\\xe3\\x82\\xa4\\xe3\\x83\\x88\\xe6\\x96\\x87\\xe5\\xad\\x97'\n\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u6587\u5b57\nutf_8\n\n\n\nRepository: https://github.com/thombashi/mbstrdecoder\n\n\n\npytablereader\n\nCSV/Excel/HTML/JSON/LTSV/Markdown/TSV\u306e\u30c6\u30ad\u30b9\u30c8/\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n\nRepository: https://github.com/thombashi/pytablereader\n\n\n\nsqliteschema\n\nSQLite\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u30b9\u30ad\u30fc\u30de\u3092\u53d6\u5f97\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n\nsqliteschema-example\nimport sys\nimport simplesqlite\nimport sqliteschema\n\ndef make_database():\n    db_path = \"example.sqlite\"\n    con = simplesqlite.SimpleSQLite(db_path, \"w\")\n\n    con.create_table_from_data_matrix(\n        table_name=\"sampletable0\",\n        attr_name_list=[\"attr_a\", \"attr_b\"],\n        data_matrix=[[1, 2], [3, 4]])\n\n    con.create_table_from_data_matrix(\n        table_name=\"sampletable1\",\n        attr_name_list=[\"foo\", \"bar\", \"hoge\"],\n        data_matrix=[\n            [1, 2.2, \"aa\"],\n            [3, 4.4, \"bb\"],\n        ],\n        index_attr_list=(\"foo\", \"hoge\"))\n\n    con.create_table(\n        \"constraints\",\n        [\n            \"primarykey_id INTEGER PRIMARY KEY\",\n            \"notnull_value REAL NOT NULL\",\n            \"unique_value INTEGER UNIQUE\",\n        ]\n    )\n\n    return db_path\n\ndef main():\n    db_path = make_database()\n    extractor = sqliteschema.SqliteSchemaExtractor(db_path)\n    print(extractor.dumps())\n\n    return 0\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n\n\n\noutput\n.. table:: sampletable0\n\n    +--------------+---------+-----------+--------+------+-----+\n    |Attribute name|Data type|Primary key|Not NULL|Unique|Index|\n    +==============+=========+===========+========+======+=====+\n    |attr_a        |INTEGER  |           |        |      |     |\n    +--------------+---------+-----------+--------+------+-----+\n    |attr_b        |INTEGER  |           |        |      |     |\n    +--------------+---------+-----------+--------+------+-----+\n\n.. table:: sampletable1\n\n    +--------------+---------+-----------+--------+------+-----+\n    |Attribute name|Data type|Primary key|Not NULL|Unique|Index|\n    +==============+=========+===========+========+======+=====+\n    |foo           |INTEGER  |           |        |      |X    |\n    +--------------+---------+-----------+--------+------+-----+\n    |bar           |REAL     |           |        |      |     |\n    +--------------+---------+-----------+--------+------+-----+\n    |hoge          |TEXT     |           |        |      |X    |\n    +--------------+---------+-----------+--------+------+-----+\n\n.. table:: constraints\n\n    +--------------+---------+-----------+--------+------+-----+\n    |Attribute name|Data type|Primary key|Not NULL|Unique|Index|\n    +==============+=========+===========+========+======+=====+\n    |primarykey_id |INTEGER  |X          |        |      |     |\n    +--------------+---------+-----------+--------+------+-----+\n    |notnull_value |REAL     |           |X       |      |     |\n    +--------------+---------+-----------+--------+------+-----+\n    |unique_value  |INTEGER  |           |        |X     |     |\n    +--------------+---------+-----------+--------+------+-----+\n\n\n\nRepository: https://github.com/thombashi/sqliteschema\n\n\n\nsubprocrunner\n\nsubprocess\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30e9\u30c3\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n\nsubprocrunner-example\nfrom subprocrunner import SubprocessRunner\n\nrunner = SubprocessRunner(\"echo test\")\nprint(\"return code: {:d}\".format(runner.run()))\nprint(\"stdout: {}\".format(runner.stdout))\n\n\n\noutput\nreturn code: 0\nstdout: test\n\n\n\nRepository: https://github.com/thombashi/subprocrunner\n\n\n2016\u5e74\u306b\u4f5c\u6210\u3057\u305f\u4ee5\u4e0b\u306eOSS\u306b\u3064\u3044\u3066\u3001\u305d\u308c\u305e\u308c\u6982\u8981\u3068\u4f8b\u793a\n\n- CLI\u30c4\u30fc\u30eb x 2\n- Python\u30e9\u30a4\u30d6\u30e9\u30ea x 10\n\n\n# CLI\u30c4\u30fc\u30eb\n## [sqlitebiter](https://github.com/thombashi/sqlitebiter)\n`CSV`/`Excel`/`HTML`/`JSON`/`LTSV`/`Markdown`/`TSV`/`Google Sheets`  \u3092`SQLite`\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306b\u5909\u63db\u3059\u308b\u30c4\u30fc\u30eb\u3002\n\u6307\u5b9a\u3057\u305fURL\u304b\u3089\u5909\u63db\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n```bash:from-file\n$ ls\nsample_data.csv  sample_data.xlsx  sample_data_multi.json  sample_data_single.json\n$ sqlitebiter file * -o sample.sqlite\n[INFO] convert 'sample_data.csv' to 'sample_data' table\n[INFO] convert 'sample_data.xlsx' to 'samplesheet1' table\n[INFO] convert 'sample_data.xlsx' to 'samplesheet3' table\n[INFO] convert 'sample_data_multi.json' to 'sample_data_multi_table_b' table\n[INFO] convert 'sample_data_multi.json' to 'sample_data_multi_table_a' table\n[INFO] convert 'sample_data_single.json' to 'sample_data_single_json3' table\n$ ls sample.sqlite\nsample.sqlite\n```\n\n```bash:from-URL\n$ sqlitebiter -v url \"https://en.wikipedia.org/wiki/Comparison_of_firewalls\"\n[INFO] convert 'https://en.wikipedia.org/wiki/Comparison_of_firewalls' to 'Comparison_of_firewalls_Wikipedia_html1 (Firewall TEXT, License TEXT, CostUsageLimits TEXT, OS TEXT)' table\n[INFO] convert 'https://en.wikipedia.org/wiki/Comparison_of_firewalls' to 'Comparison_of_firewalls_Wikipedia_html2 (Firewall TEXT, License TEXT, Cost TEXT, OS TEXT)' table\n[INFO] convert 'https://en.wikipedia.org/wiki/Comparison_of_firewalls' to 'Comparison_of_firewalls_Wikipedia_html3 (CanTarget TEXT, Changingdefaultpolicytoacceptrejectbyissuingasinglerule TEXT, IPdestinationaddresses TEXT, IPsourceaddresses TEXT, TCPUDPdestinationports TEXT, TCPUDPsourceports TEXT, EthernetMACdestinationaddress TEXT, EthernetMACsourceaddress TEXT, Inboundfirewallingress TEXT, Outboundfirewallegress TEXT)' table\n[INFO] convert 'https://en.wikipedia.org/wiki/Comparison_of_firewalls' to 'Comparison_of_firewalls_Wikipedia_html4 (Can TEXT, [workatOSILayer4statefulfirewall] TEXT, [workatOSILayer7applicationinspection] TEXT, ChangeTTLTransparenttotraceroute TEXT, ConfigureREJECTwithanswer TEXT, DMZdemilitarizedzoneallowsforsingleseveralhostsnottobefirewalled TEXT, Filteraccordingtotimeofday TEXT, RedirectTCPUDPportsportforwarding TEXT, RedirectIPaddressesforwarding TEXT, FilteraccordingtoUserAuthorization TEXT, TrafficratelimitQoS TEXT, Tarpit TEXT, Log TEXT)' table\n[INFO] convert 'https://en.wikipedia.org/wiki/Comparison_of_firewalls' to 'Comparison_of_firewalls_Wikipedia_html5 (Features TEXT, ConfigurationGUItextorbothmodes TEXT, [RemoteAccessWebHTTPTelnetSSHRDPSerialCOMRS232] TEXT, Changeruleswithoutrequiringrestart TEXT, Abilitytocentrallymanageallfirewallstogether TEXT)' table\n[INFO] convert 'https://en.wikipedia.org/wiki/Comparison_of_firewalls' to 'Comparison_of_firewalls_Wikipedia_html6 (Features TEXT, Modularitysupportsthirdpartymodulestoextendfunctionality TEXT, [IPS : Intrusion prevention system] TEXT, OpenSourceLicense TEXT, [supports IPv6 ?] TEXT, ClassHomeProfessional TEXT, OperatingSystemsonwhichitruns TEXT)' table\n[INFO] convert 'https://en.wikipedia.org/wiki/Comparison_of_firewalls' to 'Comparison_of_firewalls_Wikipedia_html7 (Can TEXT, [NAT44staticdynamicwoportsPAT] TEXT, [NAT64NPTv6] TEXT, IDSIntrusionDetectionSystem TEXT, VPNVirtualPrivateNetwork TEXT, AVAntiVirus TEXT, Sniffer TEXT, Profileselection TEXT)' table\n```\n\n- Repository: https://github.com/thombashi/sqlitebiter\n\n\n## [tcconfig](https://github.com/thombashi/tcconfig)\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5e2f\u57df\u5236\u5fa1\u30b3\u30de\u30f3\u30c9\u3067\u3042\u308b`tc`\u306e\u30e9\u30c3\u30d1\u30fc\u30c4\u30fc\u30eb\u3002`tc`\u306e\u8a2d\u5b9a\u7528\u66f8\u5f0f\u3092\u3059\u3050\u5fd8\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u4f5c\u3063\u305f\u3082\u306e\u3002\n\u4ee5\u4e0b3\u7a2e\u306e\u30b3\u30de\u30f3\u30c9\u304c\u542b\u307e\u308c\u308b\u3002\n\n- `tcset`: `tc`\u30d5\u30a3\u30eb\u30bf\u8a2d\u5b9a\n- `tcdel`: `tc`\u30d5\u30a3\u30eb\u30bf\u524a\u9664\n- `tcshow`: \u73fe\u5728\u306e`tc`\u8a2d\u5b9a\u306e\u8868\u793a\n\n`tcset`\u306f\u6d41\u5165\u51fa\u4e21\u65b9\u306e\u30d1\u30b1\u30c3\u30c8\u306b\u30d5\u30a3\u30eb\u30bf\u3092\u8a2d\u5b9a\u3067\u304d\u308b\u3002\n\n```bash:tcconfig-example\n# tcset --device eth0 --delay 10 --delay-distro 2  --loss 0.01 --rate 0.25M --network 192.168.0.10 --port 8080\n# tcset --device eth0 --delay 1 --loss 0.02 --rate 500K --direction incoming\n# tcshow --device eth0\n{\n    \"eth0\": {\n        \"outgoing\": {\n            \"network=192.168.0.10/32, port=8080\": {\n                \"delay\": \"10.0\",\n                \"loss\": \"0.01\",\n                \"rate\": \"250K\",\n                \"delay-distro\": \"2.0\"\n            },\n            \"network=0.0.0.0/0\": {}\n        },\n        \"incoming\": {\n            \"network=0.0.0.0/0\": {\n                \"delay\": \"1.0\",\n                \"loss\": \"0.02\",\n                \"rate\": \"500K\"\n            }\n        }\n    }\n}\n```\n\n- Repository: https://github.com/thombashi/tcconfig\n\n\n# Python\u30e9\u30a4\u30d6\u30e9\u30ea\n## [pytablewriter](https://github.com/thombashi/pytablewriter)\n\u8868\u3092\u66f8\u304f\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u6587\u5b57\u5bfe\u5fdc\u3002\n\n\u30b5\u30dd\u30fc\u30c8\u30d5\u30a9\u30fc\u30de\u30c3\u30c8:`CSV`/`HTML`/`JavaScript`/`JSON`/`LTSV`/`Markdown`/`MediaWiki`/`Excel`/`Pandas`/`Python`/`reStructuredText`/`TOML`/`TSV`.\n\n```python:-example\nimport io\nimport pytablewriter\n\nwriter = pytablewriter.MarkdownTableWriter()\nwriter.table_name = u\"\u751f\u6210\u306b\u95a2\u3059\u308b\u30d1\u30bf\u30fc\u30f3\".encode(\"utf_8\")\nwriter.header_list = [u\"\u30d1\u30bf\u30fc\u30f3\u540d\".encode(\"utf_8\"), \"\u6982\u8981\", \"GoF\", \"Code Complete[1]\"]\nwriter.value_matrix = [\n    [\"Abstract Factory\", u\"\u95a2\u9023\u3059\u308b\u4e00\u9023\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u3001\u9069\u5207\u306b\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u3002\".encode(\"utf_8\"), \"Yes\", \"Yes\"],\n    [\"Builder\", \"\u8907\u5408\u5316\u3055\u308c\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u904e\u7a0b\u3092\u96a0\u853d\u3059\u308b\u3002\", \"Yes\", \"No\"],\n    [\"Factory Method\", \"\u5b9f\u969b\u306b\u751f\u6210\u3055\u308c\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u3002\", \"Yes\", \"Yes\"],\n    [\"Prototype\", \"\u540c\u69d8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u539f\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8907\u88fd\u3059\u308b\u3002\", \"Yes\", \"No\"],\n    [\"Singleton\", \"\u3042\u308b\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u5358\u4e00\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u3002\", \"Yes\", \"Yes\"],\n]\n\nwith io.open(\"multibyte_table_output.txt\", \"w\", encoding=\"utf-8\") as f:\n    writer.stream = f\n    writer.write_table()\n```\n\n```:multibyte_table_output.txt\n# \u751f\u6210\u306b\u95a2\u3059\u308b\u30d1\u30bf\u30fc\u30f3\n   \u30d1\u30bf\u30fc\u30f3\u540d   |                                    \u6982\u8981                                    |GoF|Code Complete[1]\n----------------|----------------------------------------------------------------------------|---|----------------\nAbstract Factory|\u95a2\u9023\u3059\u308b\u4e00\u9023\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u3001\u9069\u5207\u306b\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u3002    |Yes|Yes             \nBuilder         |\u8907\u5408\u5316\u3055\u308c\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u904e\u7a0b\u3092\u96a0\u853d\u3059\u308b\u3002                              |Yes|No              \nFactory Method  |\u5b9f\u969b\u306b\u751f\u6210\u3055\u308c\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u3002|Yes|Yes             \nPrototype       |\u540c\u69d8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u539f\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8907\u88fd\u3059\u308b\u3002          |Yes|No              \nSingleton       |\u3042\u308b\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u5358\u4e00\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u3002                |Yes|Yes             \n```\n\n\u63cf\u753b\u3059\u308b\u3068\u2193\u306e\u3088\u3046\u306b:\n\n   \u30d1\u30bf\u30fc\u30f3\u540d   |                                    \u6982\u8981                                    |GoF|Code Complete[1]\n----------------|----------------------------------------------------------------------------|---|----------------\nAbstract Factory|\u95a2\u9023\u3059\u308b\u4e00\u9023\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u3001\u9069\u5207\u306b\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u3002    |Yes|Yes             \nBuilder         |\u8907\u5408\u5316\u3055\u308c\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u904e\u7a0b\u3092\u96a0\u853d\u3059\u308b\u3002                              |Yes|No              \nFactory Method  |\u5b9f\u969b\u306b\u751f\u6210\u3055\u308c\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u3002|Yes|Yes             \nPrototype       |\u540c\u69d8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u539f\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8907\u88fd\u3059\u308b\u3002          |Yes|No              \nSingleton       |\u3042\u308b\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u5358\u4e00\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u3002                |Yes|Yes          \n\n- Repository: https://github.com/thombashi/pytablewriter\n\n\n\n## [SimpleSQLite](https://github.com/thombashi/SimpleSQLite)\nPython built-in\u306e`sqlite3`\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30e9\u30c3\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\nSQLite\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u4f5c\u6210\u3092\u7c21\u6613\u5316\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3002\n\u8a73\u3057\u304f\u306f\u2192[SQLite\u306e\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210/\u30c7\u30fc\u30bf\u633f\u5165\u3092\u7c21\u6613\u5316\u3059\u308bPython\u30e9\u30a4\u30d6\u30e9\u30eaSimpleSQLite\u3092\u4f5c\u3063\u305f](http://qiita.com/vmmhypervisor/items/99c7cdae78af338bd232)\n\n- Repository: https://github.com/thombashi/SimpleSQLite\n\n\n## [DateTimeRange](https://github.com/thombashi/DateTimeRange)\n\u6642\u9593\u306e\u7bc4\u56f2\u3092\u6271\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\u590f\u6642\u9593\u5bfe\u5fdc\u6709\u308a\u3002\n\u8a73\u3057\u304f\u306f\u2192[\u6642\u9593\u7bc4\u56f2\u3092\u6271\u3046Python\u30e9\u30a4\u30d6\u30e9\u30eaDateTimeRange\u3092\u4f5c\u3063\u305f](http://qiita.com/vmmhypervisor/items/8af938391ecce5713ced)\n\n- Repository: https://github.com/thombashi/DateTimeRange\n\n\n## [DataProperty](https://github.com/thombashi/DataProperty)\n\u578b\u60c5\u5831\u3001\u6587\u5b57\u5217\u3068\u3057\u3066\u306e\u9577\u3055\u7b49\u306e\u5c5e\u6027\u60c5\u5831\u3092\u62bd\u51fa\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n\u30c7\u30fc\u30bf\u5358\u4f53\u304b\u3001\u30c7\u30fc\u30bf\u914d\u5217\u3092\u5bfe\u8c61\u3068\u3067\u304d\u308b\u3002\n\u30c7\u30fc\u30bf\u884c\u5217\u304b\u3089\u5404\u5217\u306e\u60c5\u5831\u3092\u62bd\u51fa\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n```pycon:\u30c7\u30fc\u30bf\u5358\u4f53\u304b\u3089\u5c5e\u6027\u60c5\u5831\u3092\u62bd\u51fa\u3059\u308b\u4f8b\n>>> from dataproperty import DataProperty\n>>> DataProperty(-1.1)\ndata=-1.1, typename=FLOAT, align=right, str_len=4, ascii_char_width=4, integer_digits=1, decimal_places=1, additional_format_len=1\n```\n\n```python:\u30c7\u30fc\u30bf\u884c\u5217\u304b\u3089\u5404\u5217\u306e\u5c5e\u6027\u60c5\u5831\u3092\u62bd\u51fa\u3059\u308b\u4f8b\nimport sys\nimport datetime\nfrom dataproperty import DataPropertyExtractor, Typecode\n\ndef display_col_dp(dp_list, attr_name):\n    \"\"\"show a value assocciated with an attribute for each\n    DataProperty instance in the dp_list\"\"\"\n\n    print()\n    print(\"---------- {:s} ----------\".format(attr_name))\n    print([getattr(dp, attr_name) for dp in dp_list])\n\ndef main():\n    # sample data definitions\n    dt = datetime.datetime(2017, 1, 1, 0, 0, 0)\n    inf = float(\"inf\")\n    nan = float(\"nan\")\n    data_matrix = [\n        [1, 1.1,  \"aa\",   1,   1,     True,   inf,   nan,   dt],\n        [2, 2.2,  \"bbb\",  2.2, 2.2,   False,  \"inf\", \"nan\", dt],\n        [3, 3.33, \"cccc\", -3,  \"ccc\", \"true\", inf,\n            \"NAN\", \"2017-01-01T01:23:45+0900\"],\n    ]\n\n    # extract property for each column from a matrix\n    dp_extractor = DataPropertyExtractor()\n    dp_extractor.header_list = [\n        \"int\", \"float\", \"str\", \"num\", \"mix\", \"bool\", \"inf\", \"nan\", \"time\"]\n    dp_extractor.data_matrix = data_matrix\n    col_dp_list = dp_extractor.to_col_dataproperty_list()\n\n    print(\"---------- typename ----------\")\n    print([Typecode.get_typename(dp.typecode) for dp in col_dp_list])\n\n    display_col_dp(col_dp_list, \"align\")\n    display_col_dp(col_dp_list, \"ascii_char_width\")\n    display_col_dp(col_dp_list, \"decimal_places\")\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n```\n\n```bash:output\n---------- typename ----------\n['INTEGER', 'FLOAT', 'STRING', 'FLOAT', 'STRING', 'BOOL', 'INFINITY', 'NAN', 'STRING']\n\n---------- align ----------\n[right, right, left, right, left, left, left, left, left]\n\n---------- ascii_char_width ----------\n[3, 5, 4, 4, 3, 5, 8, 3, 24]\n\n---------- decimal_places ----------\n[0, 2, nan, 1, 1, nan, nan, nan, nan]\n```\n\n- Repository: https://github.com/thombashi/DataProperty\n\n\n\n## [pingparsing](https://github.com/thombashi/pingparsing)\n`ping`\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u7d50\u679c\u3092\u30d1\u30fc\u30b9\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n`ping`\u5b9f\u884c\u3082\u3067\u304d\u308b\u3002\n\n```bash:input\n>ping google.com -n 10 > ping_win.txt\n\n>type ping_win.txt\n\nPinging google.com [216.58.196.238] with 32 bytes of data:\nReply from 216.58.196.238: bytes=32 time=87ms TTL=51\nReply from 216.58.196.238: bytes=32 time=97ms TTL=51\nReply from 216.58.196.238: bytes=32 time=56ms TTL=51\nReply from 216.58.196.238: bytes=32 time=95ms TTL=51\nReply from 216.58.196.238: bytes=32 time=194ms TTL=51\nReply from 216.58.196.238: bytes=32 time=98ms TTL=51\nReply from 216.58.196.238: bytes=32 time=93ms TTL=51\nReply from 216.58.196.238: bytes=32 time=96ms TTL=51\nReply from 216.58.196.238: bytes=32 time=96ms TTL=51\nReply from 216.58.196.238: bytes=32 time=165ms TTL=51\n\nPing statistics for 216.58.196.238:\n    Packets: Sent = 10, Received = 10, Lost = 0 (0% loss),\nApproximate round trip times in milli-seconds:\n    Minimum = 56ms, Maximum = 194ms, Average = 107ms\n```\n\n\u2191\u306e\u3088\u3046\u306a`ping`\u306e\u5b9f\u884c\u7d50\u679c\u3092\u30d1\u30fc\u30b9\u3059\u308b\u3002\n\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u305f [\u30b5\u30f3\u30d7\u30eb](https://github.com/thombashi/pingparsing/blob/master/examples/parse_sample.py) \u306e\u5b9f\u884c\u7d50\u679c\u304c\u2193\n\n```bash:output\nparse_sample.py -f ping_win.txt\n# properties ---\npacket_transmit: 10\npacket_receive: 10\npacket_loss: 0.0\nrtt_min: 56.0\nrtt_avg: 107.0\nrtt_max: 194.0\nrtt_mdev: None\n\n# asdict ---\n{\n    \"packet_loss\": 0.0,\n    \"packet_transmit\": 10,\n    \"rtt_min\": 56.0,\n    \"rtt_avg\": 107.0,\n    \"packet_receive\": 10,\n    \"rtt_max\": 194.0,\n    \"rtt_mdev\": null\n}\n```\n\n- Repository: https://github.com/thombashi/pingparsing\n\n\n## [pathvalidate](https://github.com/thombashi/pathvalidate)\n\u30d5\u30a1\u30a4\u30eb\u540d\u7b49\u306e\u6587\u5b57\u5217\u306evalidate\u3001\u7121\u52b9\u306a\u6587\u5b57\u306e\u7f6e\u63db\u3092\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n\n```python:Windows/Linux\u4e21\u65b9\u3067\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3057\u3066\u6709\u52b9\u306a\u6587\u5b57\u5217\u306b\u7f6e\u63db\u3059\u308b\u4f8b\nimport pathvalidate\n\nfilename = \"_a*b:c<d>e%f/(g)h+i_0.txt\"\nprint(pathvalidate.sanitize_filename(filename))\n```\n\n```output\n_abcde%f(g)h+i_0.txt\n```\n\n- Repository: https://github.com/thombashi/pathvalidate\n\n\n## [mbstrdecoder](https://github.com/thombashi/mbstrdecoder)\n\u6587\u5b57\u5217\u3092Unicode\u306b\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n\u3053\u308c\u306b\u3088\u3063\u3066Unicode\u3067\u60a9\u307e\u3055\u308c\u308b\u3053\u3068\u304c\u6e1b\u3063\u305f\u3002\n\n```python\nfrom mbstrdecoder import MultiByteStrDecoder\n\nencoded_multibyte_text = u\"\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u6587\u5b57\".encode(\"utf-8\")\n\n# \u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u6587\u5b57\u5217\u3001Unicode\u6587\u5b57\u5217\u3069\u3061\u3089\u3067\u3082\u5229\u7528\u53ef\u3002\ndecoder = MultiByteStrDecoder(encoded_multibyte_text)\n\nprint(encoded_multibyte_text)\nprint(decoder.unicode_str)\nprint(decoder.codec)\n```\n\n```bash:output\nb'\\xe3\\x83\\x9e\\xe3\\x83\\xab\\xe3\\x83\\x81\\xe3\\x83\\x90\\xe3\\x82\\xa4\\xe3\\x83\\x88\\xe6\\x96\\x87\\xe5\\xad\\x97'\n\u30de\u30eb\u30c1\u30d0\u30a4\u30c8\u6587\u5b57\nutf_8\n```\n\n- Repository: https://github.com/thombashi/mbstrdecoder\n\n\n## [pytablereader](https://github.com/thombashi/pytablereader)\n`CSV`/`Excel`/`HTML`/`JSON`/`LTSV`/`Markdown`/`TSV`\u306e\u30c6\u30ad\u30b9\u30c8/\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n\n- Repository: https://github.com/thombashi/pytablereader\n\n\n## [sqliteschema](https://github.com/thombashi/sqliteschema)\nSQLite\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u30b9\u30ad\u30fc\u30de\u3092\u53d6\u5f97\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n\n```python:sqliteschema-example\nimport sys\nimport simplesqlite\nimport sqliteschema\n\ndef make_database():\n    db_path = \"example.sqlite\"\n    con = simplesqlite.SimpleSQLite(db_path, \"w\")\n\n    con.create_table_from_data_matrix(\n        table_name=\"sampletable0\",\n        attr_name_list=[\"attr_a\", \"attr_b\"],\n        data_matrix=[[1, 2], [3, 4]])\n\n    con.create_table_from_data_matrix(\n        table_name=\"sampletable1\",\n        attr_name_list=[\"foo\", \"bar\", \"hoge\"],\n        data_matrix=[\n            [1, 2.2, \"aa\"],\n            [3, 4.4, \"bb\"],\n        ],\n        index_attr_list=(\"foo\", \"hoge\"))\n\n    con.create_table(\n        \"constraints\",\n        [\n            \"primarykey_id INTEGER PRIMARY KEY\",\n            \"notnull_value REAL NOT NULL\",\n            \"unique_value INTEGER UNIQUE\",\n        ]\n    )\n\n    return db_path\n\ndef main():\n    db_path = make_database()\n    extractor = sqliteschema.SqliteSchemaExtractor(db_path)\n    print(extractor.dumps())\n\n    return 0\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n```\n\n```bash:output\n.. table:: sampletable0\n\n    +--------------+---------+-----------+--------+------+-----+\n    |Attribute name|Data type|Primary key|Not NULL|Unique|Index|\n    +==============+=========+===========+========+======+=====+\n    |attr_a        |INTEGER  |           |        |      |     |\n    +--------------+---------+-----------+--------+------+-----+\n    |attr_b        |INTEGER  |           |        |      |     |\n    +--------------+---------+-----------+--------+------+-----+\n\n.. table:: sampletable1\n\n    +--------------+---------+-----------+--------+------+-----+\n    |Attribute name|Data type|Primary key|Not NULL|Unique|Index|\n    +==============+=========+===========+========+======+=====+\n    |foo           |INTEGER  |           |        |      |X    |\n    +--------------+---------+-----------+--------+------+-----+\n    |bar           |REAL     |           |        |      |     |\n    +--------------+---------+-----------+--------+------+-----+\n    |hoge          |TEXT     |           |        |      |X    |\n    +--------------+---------+-----------+--------+------+-----+\n\n.. table:: constraints\n\n    +--------------+---------+-----------+--------+------+-----+\n    |Attribute name|Data type|Primary key|Not NULL|Unique|Index|\n    +==============+=========+===========+========+======+=====+\n    |primarykey_id |INTEGER  |X          |        |      |     |\n    +--------------+---------+-----------+--------+------+-----+\n    |notnull_value |REAL     |           |X       |      |     |\n    +--------------+---------+-----------+--------+------+-----+\n    |unique_value  |INTEGER  |           |        |X     |     |\n    +--------------+---------+-----------+--------+------+-----+\n```\n\n- Repository: https://github.com/thombashi/sqliteschema\n\n\n## [subprocrunner](https://github.com/thombashi/subprocrunner)\n`subprocess`\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30e9\u30c3\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n\n```python:subprocrunner-example\nfrom subprocrunner import SubprocessRunner\n\nrunner = SubprocessRunner(\"echo test\")\nprint(\"return code: {:d}\".format(runner.run()))\nprint(\"stdout: {}\".format(runner.stdout))\n```\n\n```bash:output\nreturn code: 0\nstdout: test\n```\n\n- Repository: https://github.com/thombashi/subprocrunner\n\n", "tags": ["Python", "OSS", "tool", "library", "sqlite"]}