{"tags": ["Julia0.3.7, 0.4.0-dev"], "context": " More than 1 year has passed since last update.\n\n\u524d\u7f6e\u304d\uff1a\u30c8\u30d4\u30c3\u30af\n\nJulia \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5b9f\u88c5\u4f8b\u306e\u7d39\u4ecb\n\u95a2\u6570\u5b9a\u7fa9\u306e\u30c6\u30af\u30cb\u30c3\u30af\uff1a\u5f15\u6570\u306e\u6307\u5b9a\u306e\u4ed5\u65b9\n\u95a2\u6570\u5b9a\u7fa9\u306e\u30c6\u30af\u30cb\u30c3\u30af\uff1a\u6761\u4ef6\u5206\u5c90\u30d5\u30ed\u30fc\u3092\u6975\u529b\u7701\u3044\u305f\u5ba3\u8a00\u7684\u306a\u5b9a\u7fa9\n\n\nJulia \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\nJulia \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u3001start(), done(), next() \u306e3\u3064\u306e\u95a2\u6570\u3092 multi-dispatch \u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u65b0\u3057\u304f\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u30591\u3002\n\u4f8b\uff08takewhile()\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f2\uff09\uff1a\nimmutable TakeWhile{I}\n    cond::Function\n    xs::I\nend\n\ntakewhile(cond, xs) = TakeWhile(cond, xs)\n\nBase.eltype(it::TakeWhile) = eltype(it.xs)\nBase.start(it::TakeWhile) = start(it.xs)\nBase.next(it::TakeWhile, state) = next(it.xs, state)\nfunction Base.done(it::TakeWhile, state)\n    i, _ = next(it, state)\n    !it.cond(i) || done(it.xs, state)\nend\n\n# println(collect(takewhile(x -> x*x < 25, 1:10)))\n# => [1, 2, 3, 4]\n\n\u3053\u308c\u306f\u3001\u300c\u65b0\u3057\u3044\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u305d\u306e\u578b\u306b\u5408\u3046\u95a2\u6570\u306e\u591a\u91cd\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3092\u5b9a\u7fa9\uff08\u2252\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\uff09\u3059\u308b\u300d\u3068\u3044\u3046\u65b9\u6cd5\u3067\u3042\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u4eca\u3072\u3068\u3064\u3057\u3063\u304f\u308a\u3053\u306a\u3044\u611f\u304c\u3057\u307e\u3059\u3002\n\u305d\u306e\u7406\u7531\u306f\u304a\u305d\u3089\u304f\u3001\u4ee5\u4e0b\u306e2\u70b9\uff1a\n\n\uff08\u4e0a\u8a18\u306e\u3088\u3046\u306b\uff09\u305f\u3060\u30d5\u30a3\u30eb\u30bf\u30fc\u3068\u304b\u5909\u63db\u3057\u305f\u3044\u6642\u3067\u3082\u3001\u65b0\u3057\u3044\u578b\u3092\u4f5c\u3063\u3066\u9069\u7528\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u65b0\u3057\u3044\u578b\u3092\u4f5c\u308b\u305f\u3073\u306b\u591a\u91cd\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u306e\u5b9a\u7fa9\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff08\u7701\u7565\u3084\u5171\u901a\u5316\u304c\u3067\u304d\u306a\u30443\uff09\u3002\n\n\u305d\u3053\u3067\u3001\u6c4e\u7528\u7684\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\u578b\u3092\u4f5c\u3063\u3066\u3001\u5e38\u306b\u305d\u306e\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3001\u7169\u96d1\u306a\u95a2\u6570\u591a\u91cd\u5b9a\u7fa9\u3092\u7701\u7565\u3067\u304d\u3066\u826f\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3001\u3068\u8003\u3048\u307e\u3057\u305f\u3002\n\u3067\u3001\u4f5c\u3063\u3066\u307f\u305f\u3089\u3001\u5404\u7a2e\u30a4\u30c6\u30ec\u30fc\u30bf\uff08\u30d5\u30a3\u30eb\u30bf\u30fc\u7cfb\u3001\u5909\u63db\u7cfb\u542b\u3080\uff09\u304c\u5ba3\u8a00\u7684\u306b\u7c21\u6f54\u306b\u66f8\u3051\u308b\u3057\u3001\u3064\u3044\u3067\u306b\u7121\u9650\u30ea\u30b9\u30c8\uff08\u30b9\u30c8\u30ea\u30fc\u30e0\uff09\u7684\u306a\u30e2\u30ce\u3082\u7c21\u5358\u306b\u5b9a\u7fa9\u3067\u304d\u305f\u308a\u3068\u3001\u3051\u3063\u3053\u3046\u826f\u3055\u3052\u3060\u3063\u305f\u306e\u3067\u3001\u52c9\u5f37\u6210\u679c\u306e\u4e00\u3064\u3068\u3057\u3066\u3053\u3053\u306b\u6652\u3057\u3066\u307f\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b v\"0.3.7\" \u304a\u3088\u3073 v\"0.4.0-dev+4145\" \u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u3067\u3059\u3002\n\n\u6c4e\u7528\u30a4\u30c6\u30ec\u30fc\u30bf\u578b GPIterator\n\n\u672c\u984c\u3002\u307e\u305a\u306f\u672c\u4f53\u30b3\u30fc\u30c9\u3002\n\nGPIterator.jl\n# GPIterator.jl\n\n# ===== GPIterator Basics =====\n\n# === Type Definitions ===\nabstract AbstractIterator\n\nimmutable EmptyIterator <: AbstractIterator\nend\n\nimmutable GPIterator{T} <: AbstractIterator\n    first::T\n    rest::Function  # No arguments, Must return ::AbstractIterator\nend\n\n# === Iteration Definitions ===\nBase.start(it::AbstractIterator) = it\nBase.rest(::AbstractIterator, xs::AbstractIterator) = xs  # for VERSION \u2265 v\"0.4.0-dev\"\n\nBase.eltype(::EmptyIterator) = Any\nBase.done(::AbstractIterator, ::EmptyIterator) = true\nBase.next(::AbstractIterator, xs::EmptyIterator) = (nothing, xs)\n\nBase.eltype{T}(::GPIterator{T}) = T\nBase.done(::AbstractIterator, ::GPIterator) = false\nBase.next(::AbstractIterator, xs::GPIterator) = (xs.first, xs.rest())\n\n# === Outer Constructors ===\nemptyiterator() = EmptyIterator()\n\ngpiterator(it::AbstractIterator) = it\ngpiterator(n::Number) = GPIterator(n, emptyiterator)\ngpiterator(it) = gpiterator(it, start(it))\nfunction gpiterator(it, state)\n    done(it, state) && return EmptyIterator()\n    val, next_state = next(it, state)\n    GPIterator(val, ()->gpiterator(it, next_state))\nend\n\n# ===== Utilities =====\n\n# `take(n, it)` iterates first n-items of original iterator `it`\ntake(::Integer, xs::EmptyIterator) = xs\nfunction take(n::Integer, xs::GPIterator)\n    n < 1 ? EmptyIterator() : GPIterator(xs.first, ()->take(n - 1, xs.rest()))\nend\n\n# `takewhile(pred, it)` iterates items while satisfying the pred.\ntakewhile(::Function, xs::EmptyIterator) = xs\nfunction takewhile(pred::Function, xs::GPIterator)\n    pred(xs.first) ? GPIterator(xs.first, ()->takewhile(pred, xs.rest())) : EmptyIterator()\nend\n\n# `drop(n, it)` iterates after n-items of original iterator `it`\ndrop(::Integer, xs::EmptyIterator) = xs\nfunction drop(n::Integer, xs::GPIterator)\n    n < 1 ? xs : drop(n - 1, xs.rest())\nend\n\n# `dropwhile(pred, it)` iterates items from NOT-satisfied element.\ndropwhile(::Function, xs::EmptyIterator) = xs\nfunction dropwhile(pred::Function, xs::GPIterator)\n    pred(xs.first) ? dropwhile(pred, xs.rest()) : xs\nend\n\n# multi-dispatch definition (\u2252overload) Base.map()\nBase.map(::Function, xs::EmptyIterator) = xs\nfunction Base.map(fn::Function, xs::GPIterator)\n    GPIterator(fn(xs.first), ()->map(fn, xs.rest()))\nend\n\n# multi-dispatch definition (\u2252overload) Base.filter()\nBase.filter(::Function, xs::EmptyIterator) = xs\nfunction Base.filter(pred::Function, xs::GPIterator)\n    pred(xs.first) ? GPIterator(xs.first, ()->filter(pred, xs.rest())) : filter(pred, xs.rest())\nend\n\n\n\u30dd\u30a4\u30f3\u30c8\u89e3\u8aac\uff1a\n\n5\u301c14\u884c\u76ee\u3002\u578b\u306e\u5b9a\u7fa9\u3002\u65b0\u3057\u304f\u5b9a\u7fa9\u3057\u305f\u578b\uff08\u62bd\u8c61\u578b\u542b\u3080\uff09\u306f\u5168\u90e8\u30673\u3064\uff1a\n\n\n\nAbstractIterator \u2026EmptyIterator \u304a\u3088\u3073 GPIterator \u306e\u5171\u901a\u306e super type\n\nEmptyIterator \u2026\u4f55\u3082\u5217\u6319\u3059\u308b\u30e2\u30ce\u304c\u306a\u3044\u3053\u3068\u3092\u8868\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u578b\n\nGPIterator \u2026\u6700\u521d\u306e\u8981\u7d20\u3068\u30012\u3064\u3081\u4ee5\u964d\u306e\u8981\u7d20\u3092\u8868\u3059 AbstractIterator \u3092\u8fd4\u3059\u95a2\u6570\u304b\u3089\u306a\u308b composit type\u3002\u3061\u306a\u307f\u306b \"GP\" \u306f \"general-purpose\" \u306e\u7565\u3067\u3059\u3002\n\n\n16\u301c26\u884c\u76ee\u3002\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5b9a\u7fa9\u3002\n\n\n\nstart(it) \u306f\u3001\u305d\u308c\u81ea\u8eab it \u3092\u8fd4\u3059\u3060\u3051\u3002\n\ndone(it, xs) \u306f\u3001xs\uff08\u72b6\u614b\u3092\u8868\u3059\u5f15\u6570\uff09\u304c EmptyIterator \u306a\u3089\u3070 true\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070 false\u3002\n\nnext(it, xs) \u306f\u3001\u5024\u3068\u3057\u3066 xs\uff08<:GPIterator\uff09\u306e\u6700\u521d\u306e\u8981\u7d20\u3092\u3001\u6b21\u306e\u72b6\u614b\u3068\u3057\u3066 xs \u306e\u300c\u6b8b\u308a\u306e\u8981\u7d20\u3092\u8868\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u95a2\u6570\u300d\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\uff08<:AbstractIterator\uff09\u3092\u8fd4\u3059\u3002\n\u3053\u308c\u306b\u3088\u308a\u3001\u300cnext() \u3059\u308b\u305f\u3073\u306b\u6b21\u306e\u5024\u3092\u9806\u6b21\u7b97\u51fa\u3057\u3001EmptyIterator \u304c\u73fe\u308c\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\u300d\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067\u5217\u6319\u3092\u3057\u307e\u3059\u3002\n\u3042\u3068\u3053\u306e\u4ed5\u7d44\u307f\u306e\u304a\u304b\u3052\u3067\u3001\u7121\u9650\u5217\u6319\uff08\u30b9\u30c8\u30ea\u30fc\u30e0\uff09\u5bfe\u5fdc\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3042\u3068\u524d\u7bc0\u3067\u8aac\u660e\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u300124\u884c\u76ee\u306e eltype() \u95a2\u6570\u306f\u3001\u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u5217\u6319\u3059\u308b\u5024\u306e\u578b\u3092\u8fd4\u3059\u3082\u306e\u3002\u3053\u308c\u3092\u9069\u5207\u306b\u591a\u91cd\u5b9a\u7fa9\u3059\u308b\u3068\u3001\u4f8b\u3048\u3070collect()\u95a2\u6570\u3092\u4f7f\u7528\u3057\u305f\u3068\u304d\u306b\u306f\u305d\u306e\u578b\uff08=:T\uff09\u306e\u914d\u5217 Array{T} \u3092\u8fd4\u5374\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u306a\u304a eltype() \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u306f\u623b\u308a\u5024\u306f Any\u3001\u3064\u307e\u308a\u300c\u3069\u3093\u306a\u578b\u3067\u3082OK\uff08\u3069\u3093\u306a\u578b\u304c\u5217\u6319\u3055\u308c\u308b\u304b\u5206\u304b\u3089\u306a\u3044\uff09\u300d\u3068\u3044\u3046\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002\n[\u95a2\u6570\u5b9a\u7fa9] \u4f8b\u3048\u3070 20\u884c\u76ee\uff08Base.eltype(::EmptyIterator) = Any\uff09\u3002\u95a2\u6570\u5ba3\u8a00\u6642\u306b\u300c\u305d\u306e\u5f15\u6570\u306e\u578b\u304c\u91cd\u8981\u3067\u3042\u3063\u3066\u4eee\u5f15\u6570\u305d\u306e\u3082\u306e\u306f\u4e0d\u8981\u300d\u306a\u5834\u5408\u306b\u306f\u3001\u5f15\u6570\u540d\u3092\u7701\u7565\u3057\u3066::\u00ab\u578b\u00bb\u3068\u3060\u3051\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u7684\u306a\u6587\u6cd5\u597d\u304d\u3002\u7121\u99c4\u3082\u7701\u3051\u308b\u3057\u95a2\u6570\u5b9a\u7fa9\u3092\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u3059\u308b\u4e00\u52a9\u306b\u306a\u3063\u3066\u3044\u308b\u3057\u3002\u3053\u306e\u30b3\u30fc\u30c9\u5185\u3067\u3082\u591a\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n[\u95a2\u6570\u5b9a\u7fa9] 24\u884c\u76ee\uff08Base.eltype{T}(::GPIterator{T}) = T\uff09\u3002\u2191\u3068\u540c\u69d8\u300c\u305d\u306e\u5f15\u6570\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3092\u53d6\u5f97\u3057\u305f\u3044\u300d\u5834\u5408\u306b\u306f\u3001\u3053\u3093\u306a\u66f8\u304d\u65b9\u304c\u3067\u304d\u307e\u3059\u3002\u95a2\u6570\u5ba3\u8a00\u90e8\u306b\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a18\u8ff0\u3057\u3001\u4eee\u5f15\u6570\u306e\u578b\u306b\u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3002\n\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u7684\u306a\u6587\u6cd5\u597d\u304d\u3002\u7121\u99c4\u3082\u7701\u3051\u308b\u3057\u95a2\u6570\u5b9a\u7fa9\u3092\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u3059\u308b\u4e00\u52a9\u306b\u306a\u3063\u3066\u3044\u308b\u3057\u3002\n\n\n28\u301c38\u884c\u76ee\u3002\u5916\u90e8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5b9a\u7fa9\u3002\u4e3b\u306b\u300c\uff08\u4ed6\u306e\uff09\u30a4\u30c6\u30ec\u30fc\u30bf\u304b\u3089 GPIterator \u3092\u751f\u6210\u3059\u308b\u30e2\u30ce\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n32\u884c\u76ee\u3002Julia \u3067\u306f Number \u3082 iterable\u3067\u3001\u300c\u305d\u306e\u6570\u50241\u3064\u3060\u3051\u3092\u5217\u6319\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u300d\u3068\u3057\u3066\u52d5\u4f5c\uff08for i=1; print(i); end\u3068\u3059\u308b\u3068\u300c1\u300d\u3068\u3060\u3051\u8868\u793a\uff09\u3059\u308b\u306e\u3067\u3001\u305d\u308c\u306b\u5408\u308f\u305b\u3066\u300c\u6570\u5024\u304c\u6e21\u3055\u308c\u305f\u3089\u3001\u6700\u521d\u306e\u8981\u7d20\u3092\u305d\u306e\u6570\u5024\u30012\u3064\u3081\u4ee5\u964d\u306e\u8981\u7d20\u306f\u306a\u3057\uff08EmptyIterator\u3092\u8fd4\u3059\uff09\u300d\u3068\u3044\u3046\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\u4e00\u756a\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u300134\u301c38\u884c\u76ee\u3002\n\u3053\u306e\u3088\u3046\u306b\u4ed6\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304b\u3089 GPIterator \u3092\u518d\u5e30\u7684\u306b\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f GPIterator \u4ee5\u5916\u306e\u5168\u3066\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u3001GPIterator \u306b\u5909\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u300c\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u8a00\u3048\u3070 GPIterator\uff08<:AbstractIterator\uff09\u300d\u3068\u3057\u3066\u578b\u3092\u7d71\u4e00\uff08\u4e00\u672c\u5316\uff09\u3067\u304d\u307e\u3059\uff01\n\n\n40\u884c\u76ee\u4ee5\u964d\u3002\u3088\u304f\u3042\u308b\u95a2\u6570\u7fa4\uff08take, takewhile, drop, dropwhile, map, filter\uff09\u3092\uff08\u591a\u91cd\uff09\u5b9a\u7fa9\u3002\n\n\n\u3044\u305a\u308c\u3082\u623b\u308a\u5024\u306f <:AbstractIterator\u3002\u578b\u3092\u7d71\u4e00\uff01\n\u5916\u90e8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf gpiterator() \u306e\u5b9a\u7fa9\u3068\u540c\u69d8\u3001\u518d\u5e30\u7684\u5b9a\u7fa9\u3060\u3051\u3067\u76ee\u7684\u306e\u51e6\u7406\u304c\u5b9f\u88c5\u51fa\u6765\u3066\u3044\u308b\u3053\u3068\u306b\u3082\u6ce8\u76ee\u3002\n\n\n\n\n\u4f7f\u7528\u4f8b\n\nGPIteratorSample.jl\n# GPIteratorSample.jl\n\ninclude(\"./GPIterator.jl\")\n\n# ===== ADDITIONAL DEFINITIONS =====\n\n# from(2) := 2:3:4:...\nfrom{T<:Integer}(s::T) = steps(s, one(T))\n\n# steps(1, 2) := 1:3:5:...\nsteps{T<:Integer}(s::T, t::T) = GPIterator(s, ()->steps(s + t, t))\n\n# Natural Numbers\nnats() = from(1)\n\n# Odd Numbers (> 0)\nodds() = steps(1, 2)\n\n# Fibonacci Sequence\nfibs() = fibs(one(BigInt), one(BigInt))\nfibs{T<:Integer}(a::T, b::T) = GPIterator(a, ()->fibs(b, a + b))\n\n# println(typeof(fibs()))\n# # => GPIterator{BigInt}\n\n# ===== EXAMPLES =====\n\n# `gpiterator` and `filter` sample : odd-primes under 100\nprintln(collect(filter(isprime, gpiterator(1:2:100))))\n# => [3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\n# `filter` and `take` sample : first 10 odd-primes\nprintln(collect(take(10, filter(isprime, odds()))))\n# => [3,5,7,11,13,17,19,23,29,31]\n\n# `map` sample : FizzBuzz\nfunction fizzbuzz()\n    map(nats()) do n\n        n % 15 == 0 && return \"FIZZBUZZ\"\n        n % 5 == 0  && return \"Buzz\"\n        n % 3 == 0  && return \"Fizz\"\n        n\n    end\nend\n\n# println(collect(take(20, fizzbuzz())))  # @> ERROR: `convert` has no method matching convert(::Type{Int64}, ::ASCIIString)\nprintln(collect(Any, take(20, fizzbuzz())))\n# => Any[1,2,\"Fizz\",4,\"Buzz\",\"Fizz\",7,8,\"Fizz\",\"Buzz\",11,\"Fizz\",13,14,\"FIZZBUZZ\",16,17,\"Fizz\",19,\"Buzz\"]\nprintln(collect(Union(Int, ASCIIString), take(20, fizzbuzz())))\n# => Union(ASCIIString,Int64)[1,2,\"Fizz\",4,\"Buzz\",\"Fizz\",7,8,\"Fizz\",\"Buzz\",11,\"Fizz\",13,14,\"FIZZBUZZ\",16,17,\"Fizz\",19,\"Buzz\"]\n\n# `takewhile` sample : fibs under 100\nfibsU100 = takewhile(n->n<100, fibs())\nprintln(typeof(fibsU100))\n# => GPIterator{BigInt}\nprintln(eltype(fibsU100))\n# => BigInt\nfor i = fibsU100\n    println(i)\nend\n# => 1\n# => 1\n# => 2\n# => 3\n# => 5\n# => 8\n# => 13\n# => 21\n# => 34\n# => 55\n# => 89\n\n# others : Collatz Sequence\nfunction collatz(n::Integer)\n    n < 2 && return gpiterator(n)\n    GPIterator(n, ()->collatz(isodd(n) ? 3n + 1 : div(n, 2)))\nend\n\nprintln(collect(collatz(3)))\n# => [3,10,5,16,8,4,2,1]\nprintln(collect(collatz(27)))\n# => [27,82,41,124,62,31,94,47,142,71,214,107,322,161,484,242,121,364,182,91,274,137,412,206,103,310,155,466,233,700,350,175,526,263,790,395,1186,593,1780,890,445,1336,668,334,167,502,251,754,377,1132,566,283,850,425,1276,638,319,958,479,1438,719,2158,1079,3238,1619,4858,2429,7288,3644,1822,911,2734,1367,4102,2051,6154,3077,9232,4616,2308,1154,577,1732,866,433,1300,650,325,976,488,244,122,61,184,92,46,23,70,35,106,53,160,80,40,20,10,5,16,8,4,2,1]\n\n\n\u898b\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3060\u3044\u305f\u3044\u3069\u3093\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u304b\u306f\u5206\u304b\u3063\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u30dd\u30a4\u30f3\u30c8\u629c\u7c8b\u3057\u3066\u7c21\u5358\u306b\u89e3\u8aac\u3002\n\n5\u301c24\u884c\u76ee\u3002\u7121\u9650\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u3044\u304f\u3064\u304b\u5b9a\u7fa9\u3002\n[\u95a2\u6570\u5b9a\u7fa9] 21\u884c\u76ee\u88dc\u8db3\u3002\u3053\u306e\u5ba3\u8a00\u306e\u4ed5\u65b9\u306f fibs(a::Integer, b::Integer) \u3068\u66f8\u3044\u3066\u3082\u826f\u3044\u306e\u3067\u306f\uff1f\u3000\u3068\u601d\u308f\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3067\u3082\u610f\u5473\u304c\u5909\u308f\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3057\u307e\u3046\u3068\u300ca\u3082b\u3082 Integer \u306e subtype\uff08\u3060\u304b\u3089\u3001\u6574\u6570\u578b\u3001\u3067\u306f\u3042\u308b\u3093\u3060\u3051\u3069\u540c\u3058\u6574\u6570\u578b\u3068\u306f\u9650\u3089\u306a\u3044\u3002a\u304cInt32\u3067b\u304cBigInt\u3067\u3082OK\uff09\u300d\u3068\u3044\u3046\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u308c\u306b\u5bfe\u3057\u3066\u3053\u306e\u5ba3\u8a00\u65b9\u6cd5 fibs{T<:Integer}(a::T, b::T) \u306f\u3001\u300ca\u3082b\u3082\u3001\u3042\u308bInteger\u306e subtype\u3067\u540c\u3058\u578b\uff08a\u304cInt64\u306a\u3089b\u3082Int64\uff09\u300d\u3068\u3044\u3046\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002\n\u3088\u3063\u3066\u4f8b\u3048\u3070 fibs(1, BigInt(1)) \u3068\u66f8\u304f\u3068\u300cInt64\uff08\u3082\u3057\u304f\u306fInt32\uff09\u3068BigInt\u3092\u5f15\u6570\u306b\u53d6\u308b\u30e1\u30bd\u30c3\u30c9 fibs \u306f\u3042\u308a\u307e\u305b\u3093\u300d\u3068\u3044\u3046\u65e8\u306e\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\u2191\u3088\u308a\u89aa\u5207\u306a\u8a2d\u8a08\u306b\u3059\u308b\u306a\u3089\u3070\u3001\u3082\u3046\u4e00\u3064 fibs(a::Integer,b::Integer) = fibs(promote(a, b)...) \u3068\u3044\u3046\u591a\u91cd\u5b9a\u7fa9\u3092\u3057\u3066\u300c\u5f15\u6570\u306e\u578b\u304c\u7570\u306a\u3063\u3066\u3044\u305f\u3089 promote() \u95a2\u6570\u3092\u4f7f\u3063\u3066\uff08\u5927\u304d\u3044\u65b9\u306e\uff09\u578b\u306b\u5408\u308f\u305b\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u3092\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u7701\u7565\u3057\u307e\u3057\u305f\u3002\n\n\n29,33\u884c\u76ee\u3002\u5947\u7d20\u6570\u3092\u3044\u304f\u3064\u304b\u5217\u6319\u3059\u308b\u30b5\u30f3\u30d7\u30eb4\u3002\nisprime() \u306f\u7d20\u6570\u5224\u5b9a\u3092\u3059\u308b Julia \u6a19\u6e96\u306e\u95a2\u6570\u3067\u3059\u3002\n36\u301c50\u884c\u76ee\u3002\u3088\u304f\u3042\u308b FizzBuzz \u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u30b5\u30f3\u30d7\u30eb\u3002\n\u6ce8\u610f\u70b9\u3068\u3057\u3066\u306f\u300146\u884c\u76ee\u3002map()\u306e\u5834\u5408\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u304c\u5217\u6319\u8981\u7d20\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u5834\u5408\u3001\u5148\u307b\u3069\u8aac\u660e\u3057\u305f eltype() \u306e\u591a\u91cd\u5b9a\u7fa9\u306e\u305b\u3044\u3067\u9006\u306b collect() \u95a2\u6570\u3067\u5909\u63db\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\u306e\u3067\u300147\u884c\u76ee\u306e\u3088\u3046\u306b\u660e\u793a\u7684\u306b Any \u3092\u6307\u5b9a\u3057\u3066\u3069\u3093\u306a\u578b\u3067\u3082\u53d7\u3051\u4ed8\u3051\u308b\u3088\u3046\u306b\u3059\u308b\u304b\u300149\u884c\u76ee\u306e\u3088\u3046\u306b\u300c\u5217\u6319\u3055\u308c\u3046\u308b\u578b\u3092\u5168\u3066\u7db2\u7f85\u3057\u305f Union \u578b\u300d\u3092\u6307\u5b9a\u3057\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u306a\u304a\u3053\u306e\u5236\u9650\u306f\u3001for\u6587\u3067\u5217\u6319\u3059\u308b\u4e0a\u3067\u306f\u554f\u984c\u3042\u308a\u307e\u305b\u3093\uff08\u52d5\u7684\u578b\u4ed8\u306a\u306e\u3067\uff095\u3002\n52\u301c71\u884c\u76ee\u3002takewhile\u3068\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u30b5\u30f3\u30d7\u30eb\u3002\u8a73\u7d30\u7565\u3002\n\u3053\u308c\u3068\u540c\u69d8\u306b\u300c\u30ea\u30e5\u30ab\u6570\u5217\u300d\u300c\u30c8\u30ea\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u300d\u300c\u30da\u30e9\u30f3\u6570\u5217\u300d\u7b49\u3082\u7c21\u5358\u306b\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u306d\u3002\n73\u301c82\u884c\u76ee\u3002\u304a\u307e\u3051\uff1a\u300c\u30b3\u30e9\u30c3\u30c4\u306e\u6570\u5217\u300d\uff08\u53c2\u7167\uff1aWikipedia:\u30b3\u30e9\u30c3\u30c4\u306e\u554f\u984c\uff09\u306e\u30b5\u30f3\u30d7\u30eb\u3002\n\n\u3053\u306e\u307b\u304b\u306b\u3001\u3088\u304f\u3042\u308b\u4f8b\u3068\u3057\u3066\u3001zip(it1, it2, \u2026)\u3001repeat(el[,n])\uff08el\u3092\u7121\u9650\u306b\uff08\u3082\u3057\u304f\u306fn\u56de\uff09\u7e70\u308a\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\uff09\u3001cycle(it)\uff08\u30a4\u30c6\u30ec\u30fc\u30bf it \u306e\u5217\u6319\u3092\u7121\u9650\u306b\u7e70\u308a\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\uff09\u3001chain(it1, it2, \u2026)\uff08\u8907\u6570\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9023\u7d50\u3057\u3066\u5217\u6319\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\uff09\u7b49\u3082\u3001GPIterator \u3092\u5229\u7528\u3057\u3066\u66f8\u3051\u307e\u3059\u3002\n\n\u8003\u5bdf\u30fb\u5c55\u671b\n\u898b\u3066\u3044\u305f\u3060\u3044\u3066\u5206\u304b\u308b\u901a\u308a\u3001GPIterator \u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u751f\u6210\u3059\u308b\u3068\u304d\u3001\u7b2c2\u5f15\u6570\u306f\u3060\u3044\u305f\u3044\u30e9\u30e0\u30c0\u5f0f\u3092\u5229\u7528\u3057\u305f\u30af\u30ed\u30fc\u30b8\u30e3\u306b\u306a\u308a\u307e\u3059\u3002\u307b\u307c\u6bce\u56de ()->\u301c \u3068\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\u306a\u3093\u304b\u3053\u308c\u304c\u3082\u3063\u305f\u3044\u306a\u3044\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u3001\u30de\u30af\u30ed\u304b\u4f55\u304b\u3092\u4f7f\u3063\u3066\u3082\u3046\u5c11\u3057\u30b7\u30f3\u30d7\u30eb\u306a\u66f8\u5f0f\u3067\u5b9a\u7fa9\u3067\u304d\u306a\u3044\u304b\u306a\u30fc\u3001\u3068\u5c11\u3057\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b Julia \u304c\u6a19\u6e96\u3067\u3053\u306e\u30b7\u30b9\u30c6\u30e0\u3092\u63a1\u7528\u305b\u305a\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306f3\u3064\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u7d44\u5408\u305b\u3067\u5b9f\u73fe\u3059\u308b\u3068\u3044\u3046\u4ed5\u69d8\u306b\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u304a\u305d\u3089\u304f\u4e00\u756a\u306e\u7406\u7531\u306f\u300c\u52b9\u7387\u300d\u3002\n\u3053\u306e GPIterator \u3082\u3042\u308b\u7a0b\u5ea6\u52b9\u7387\u3088\u304f\u52d5\u4f5c\u3059\u308b\u3088\u3046\u5b9f\u9a13\u3092\u7e70\u308a\u8fd4\u3057\u3066\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3051\u308c\u3069\u3001\u6c4e\u7528\u6027\u3092\u6301\u305f\u305b\u3066\u3044\u308b\u304c\u6545\u306b\u3069\u3046\u3057\u3066\u3082\u52b9\u7387\u3092\u72a0\u7272\u306b\u3057\u3066\u3044\u308b\u90e8\u5206\u306f\u3042\u308a\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u30b3\u30fc\u30c9\u4f8b\u306f\u6319\u3052\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001repeat()\u3068\u304bzip()\u3068\u304b\u3092\u8003\u3048\u305f\u3068\u304d\u3001GPIterator \u306e\u4ed5\u7d44\u307f\u306b\u7d44\u307f\u8fbc\u3080\u3088\u308a\u306f\u72ec\u81ea\u306e\u578b\u3092\u4f5c\u3063\u3066\u305d\u308c\u306b\u7279\u5316\u3057\u305f start()/done()/next() \u95a2\u6570\u306e\u591a\u91cd\u5b9a\u7fa9\u3092\u3057\u305f\u65b9\u304c\u9ad8\u52b9\u7387\u306a\u306e\u306f\u76ee\u306b\u898b\u3048\u3066\u3044\u307e\u3059\u3002\n\u305d\u308c\u3067\u3082\u3053\u306e GPIterator \u304c\u6709\u7528\u306a\u4f8b\u304c\u3082\u3063\u3068\u898b\u3064\u304b\u308c\u3070\u3001\u3082\u3063\u3068\u304d\u3061\u3093\u3068\u4f53\u7cfb\u5316\u30fb\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3057\u3066\u5927\u3005\u7684\u306b\u63d0\u6848\u3057\u3066\u307f\u3088\u3046\u304b\u306a\u30fc\u3001\u3068\u76ee\u8ad6\u898b\u4e2d6\u3002\n\n\u53c2\u8003\n\nJulia Documentation\uff08 v0.3.x / v0.4.x\u4ee5\u964d \uff09\n\nLazy.jl\uff08\u9045\u5ef6\u30ea\u30b9\u30c8\u3001\u304a\u3088\u3073\u305d\u308c\u306b\u95a2\u9023\u3057\u305f\u5404\u7a2e\u95a2\u6570\u30fb\u30de\u30af\u30ed\u3092\u63d0\u4f9b\u3059\u308b Julia \u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3002Pkg.add(\"Lazy\") \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u53ef\u80fd\u3002GPIterator \u3092\u69cb\u7bc9\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u30bd\u30fc\u30b9\u3092\u5c11\u3057\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u3061\u306a\u307f\u306b\u30d0\u30b0\u304c\u3042\u308a\u30d7\u30eb\u30ea\u30af\u9001\u3063\u305f\u3051\u308c\u3069\u306a\u304b\u306a\u304b\u76f4\u3057\u3066\u3082\u3089\u3048\u306a\u3044\u2026\uff09\n\nLazySequence.jl\uff08\u2191\u3068\u540c\u69d8\u306e\uff08\u3088\u308a\u5c11\u3057\u8efd\u3044\uff09\u30d1\u30c3\u30b1\u30fc\u30b8\u30022\u5e74\u8fd1\u304f\u66f4\u65b0\u3055\u308c\u3066\u3044\u306a\u3044\u2026\uff09\n\n\n\n\n\nhttp://docs.julialang.org/en/release-0.3/stdlib/collections/#iteration, \u3082\u3057\u304f\u306f http://docs.julialang.org/en/latest/stdlib/collections/#iteration \u53c2\u7167\u00a0\u21a9\n\n\n\u3053\u306e\u5b9f\u88c5\u306b\u306f\u554f\u984c\u304c\u3042\u308b\uff08next()\u3059\u308b\u305f\u3073\u306b\u5185\u90e8\u72b6\u614b\u304c\u5909\u66f4\u3055\u308c\u3066\u3057\u307e\u3046\u30a4\u30c6\u30ec\u30fc\u30bf\uff08\u4f8b\uff1aTask\uff09\u3060\u3068\u671f\u5f85\u901a\u308a\u306e\u52d5\u4f5c\u3092\u3057\u306a\u3044\uff09\u306e\u3067\u3059\u304c\u3001\u307e\u3041\u3060\u3044\u305f\u3044\u3053\u3093\u306a\u611f\u3058\u3068\u3044\u3046\u30b5\u30f3\u30d7\u30eb\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u307e\u308a\u6df1\u5165\u308a\u305b\u305a\u306b\u3069\u3046\u304b\u4e00\u3064\u3002\u00a0\u21a9\n\n\nUnion\u578b\u3092\u4f7f\u3063\u3066\u5f15\u6570\u304c\u8907\u6570\u306e\u578b\u306b\u5bfe\u5fdc\u3059\u308b\u3088\u3046\u95a2\u6570\u3092\u591a\u91cd\u5b9a\u7fa9\u3059\u308c\u3070\u3001\u51e6\u7406\u306e\u5171\u901a\u5316\u306f\u3067\u304d\u306a\u3044\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u3042\u3068\u304b\u3089\u8ffd\u52a0\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u7d50\u5c40\u554f\u984c\u3068\u306a\u308a\u307e\u3059\u3002\u00a0\u21a9\n\n\n\u3053\u306e\u3042\u305f\u308a\u304f\u3089\u3044\u306a\u3089\u3001GPIterator \u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u3084\u308a\u305f\u3044\u3053\u3068\u306f\u5272\u3068\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u5b9f\u73fe\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3051\u308c\u3069\u3001\u307e\u3041\u3053\u308c\u3082\u30b5\u30f3\u30d7\u30eb\u3068\u8a00\u3046\u3053\u3068\u3067\u3002\u00a0\u21a9\n\n\n\u3068\u306f\u3044\u3048\u5b9f\u969b\u306b\u306f\u3001\u304d\u3061\u3093\u3068\u3057\u305f\u8a2d\u8a08\u3092\u3057\u3066\u8fd4\u3055\u308c\u308b\u5024\u306e\u578b\u304c\u4e00\u5b9a\u3068\u306a\u308b\u3088\u3046\u306b\u3059\u3079\u304d\u306a\u3093\u3067\u3059\u3051\u308c\u3069\u3002\u00a0\u21a9\n\n\n\u305d\u308c\u3088\u308a\u305d\u308d\u305d\u308d Julia \u3092\u3082\u3063\u3068\u5b9f\u7528\u7684\u306b\u4f7f\u3046\u3053\u3068\uff08\uff1d\u6570\u5024\u8a08\u7b97\u3068\u304b\u6a5f\u68b0\u5b66\u7fd2\u3068\u304b\uff09\u3092\u59cb\u3081\u306a\u3044\u3068\u2026\u3002\u304a\u4ed5\u4e8b\uff08\u672c\u696d\uff09\u7684\u306b\u2026\u3002\u00a0\u21a9\n\n\n\n## \u524d\u7f6e\u304d\uff1a\u30c8\u30d4\u30c3\u30af\n\n+ Julia \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5b9f\u88c5\u4f8b\u306e\u7d39\u4ecb\n+ \u95a2\u6570\u5b9a\u7fa9\u306e\u30c6\u30af\u30cb\u30c3\u30af\uff1a\u5f15\u6570\u306e\u6307\u5b9a\u306e\u4ed5\u65b9\n+ \u95a2\u6570\u5b9a\u7fa9\u306e\u30c6\u30af\u30cb\u30c3\u30af\uff1a\u6761\u4ef6\u5206\u5c90\u30d5\u30ed\u30fc\u3092\u6975\u529b\u7701\u3044\u305f\u5ba3\u8a00\u7684\u306a\u5b9a\u7fa9\n\n## Julia \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\nJulia \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u3001`start()`, `done()`, `next()` \u306e3\u3064\u306e\u95a2\u6570\u3092 multi-dispatch \u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u65b0\u3057\u304f\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059[^1]\u3002\n\u4f8b\uff08`takewhile()`\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f[^2]\uff09\uff1a\n\n```jl\nimmutable TakeWhile{I}\n    cond::Function\n    xs::I\nend\n\ntakewhile(cond, xs) = TakeWhile(cond, xs)\n\nBase.eltype(it::TakeWhile) = eltype(it.xs)\nBase.start(it::TakeWhile) = start(it.xs)\nBase.next(it::TakeWhile, state) = next(it.xs, state)\nfunction Base.done(it::TakeWhile, state)\n    i, _ = next(it, state)\n    !it.cond(i) || done(it.xs, state)\nend\n\n# println(collect(takewhile(x -> x*x < 25, 1:10)))\n# => [1, 2, 3, 4]\n```\n\n\u3053\u308c\u306f\u3001\u300c\u65b0\u3057\u3044\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u305d\u306e\u578b\u306b\u5408\u3046\u95a2\u6570\u306e\u591a\u91cd\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3092\u5b9a\u7fa9\uff08\u2252\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\uff09\u3059\u308b\u300d\u3068\u3044\u3046\u65b9\u6cd5\u3067\u3042\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u4eca\u3072\u3068\u3064\u3057\u3063\u304f\u308a\u3053\u306a\u3044\u611f\u304c\u3057\u307e\u3059\u3002\n\u305d\u306e\u7406\u7531\u306f\u304a\u305d\u3089\u304f\u3001\u4ee5\u4e0b\u306e2\u70b9\uff1a\n\n1. \uff08\u4e0a\u8a18\u306e\u3088\u3046\u306b\uff09\u305f\u3060\u30d5\u30a3\u30eb\u30bf\u30fc\u3068\u304b\u5909\u63db\u3057\u305f\u3044\u6642\u3067\u3082\u3001\u65b0\u3057\u3044\u578b\u3092\u4f5c\u3063\u3066\u9069\u7528\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n2. \u65b0\u3057\u3044\u578b\u3092\u4f5c\u308b\u305f\u3073\u306b\u591a\u91cd\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u306e\u5b9a\u7fa9\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff08\u7701\u7565\u3084\u5171\u901a\u5316\u304c\u3067\u304d\u306a\u3044[^3]\uff09\u3002\n\n\u305d\u3053\u3067\u3001\u6c4e\u7528\u7684\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\u578b\u3092\u4f5c\u3063\u3066\u3001\u5e38\u306b\u305d\u306e\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3001\u7169\u96d1\u306a\u95a2\u6570\u591a\u91cd\u5b9a\u7fa9\u3092\u7701\u7565\u3067\u304d\u3066\u826f\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3001\u3068\u8003\u3048\u307e\u3057\u305f\u3002\n\u3067\u3001\u4f5c\u3063\u3066\u307f\u305f\u3089\u3001\u5404\u7a2e\u30a4\u30c6\u30ec\u30fc\u30bf\uff08\u30d5\u30a3\u30eb\u30bf\u30fc\u7cfb\u3001\u5909\u63db\u7cfb\u542b\u3080\uff09\u304c\u5ba3\u8a00\u7684\u306b\u7c21\u6f54\u306b\u66f8\u3051\u308b\u3057\u3001\u3064\u3044\u3067\u306b\u7121\u9650\u30ea\u30b9\u30c8\uff08\u30b9\u30c8\u30ea\u30fc\u30e0\uff09\u7684\u306a\u30e2\u30ce\u3082\u7c21\u5358\u306b\u5b9a\u7fa9\u3067\u304d\u305f\u308a\u3068\u3001\u3051\u3063\u3053\u3046\u826f\u3055\u3052\u3060\u3063\u305f\u306e\u3067\u3001\u52c9\u5f37\u6210\u679c\u306e\u4e00\u3064\u3068\u3057\u3066\u3053\u3053\u306b\u6652\u3057\u3066\u307f\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b `v\"0.3.7\"` \u304a\u3088\u3073 `v\"0.4.0-dev+4145\"` \u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u3067\u3059\u3002\n\n## \u6c4e\u7528\u30a4\u30c6\u30ec\u30fc\u30bf\u578b `GPIterator`\n\n\u672c\u984c\u3002\u307e\u305a\u306f\u672c\u4f53\u30b3\u30fc\u30c9\u3002\n\n```jl:GPIterator.jl\n# GPIterator.jl\n\n# ===== GPIterator Basics =====\n\n# === Type Definitions ===\nabstract AbstractIterator\n\nimmutable EmptyIterator <: AbstractIterator\nend\n\nimmutable GPIterator{T} <: AbstractIterator\n    first::T\n    rest::Function  # No arguments, Must return ::AbstractIterator\nend\n\n# === Iteration Definitions ===\nBase.start(it::AbstractIterator) = it\nBase.rest(::AbstractIterator, xs::AbstractIterator) = xs  # for VERSION \u2265 v\"0.4.0-dev\"\n\nBase.eltype(::EmptyIterator) = Any\nBase.done(::AbstractIterator, ::EmptyIterator) = true\nBase.next(::AbstractIterator, xs::EmptyIterator) = (nothing, xs)\n\nBase.eltype{T}(::GPIterator{T}) = T\nBase.done(::AbstractIterator, ::GPIterator) = false\nBase.next(::AbstractIterator, xs::GPIterator) = (xs.first, xs.rest())\n\n# === Outer Constructors ===\nemptyiterator() = EmptyIterator()\n\ngpiterator(it::AbstractIterator) = it\ngpiterator(n::Number) = GPIterator(n, emptyiterator)\ngpiterator(it) = gpiterator(it, start(it))\nfunction gpiterator(it, state)\n    done(it, state) && return EmptyIterator()\n    val, next_state = next(it, state)\n    GPIterator(val, ()->gpiterator(it, next_state))\nend\n\n# ===== Utilities =====\n\n# `take(n, it)` iterates first n-items of original iterator `it`\ntake(::Integer, xs::EmptyIterator) = xs\nfunction take(n::Integer, xs::GPIterator)\n    n < 1 ? EmptyIterator() : GPIterator(xs.first, ()->take(n - 1, xs.rest()))\nend\n\n# `takewhile(pred, it)` iterates items while satisfying the pred.\ntakewhile(::Function, xs::EmptyIterator) = xs\nfunction takewhile(pred::Function, xs::GPIterator)\n    pred(xs.first) ? GPIterator(xs.first, ()->takewhile(pred, xs.rest())) : EmptyIterator()\nend\n\n# `drop(n, it)` iterates after n-items of original iterator `it`\ndrop(::Integer, xs::EmptyIterator) = xs\nfunction drop(n::Integer, xs::GPIterator)\n    n < 1 ? xs : drop(n - 1, xs.rest())\nend\n\n# `dropwhile(pred, it)` iterates items from NOT-satisfied element.\ndropwhile(::Function, xs::EmptyIterator) = xs\nfunction dropwhile(pred::Function, xs::GPIterator)\n    pred(xs.first) ? dropwhile(pred, xs.rest()) : xs\nend\n\n# multi-dispatch definition (\u2252overload) Base.map()\nBase.map(::Function, xs::EmptyIterator) = xs\nfunction Base.map(fn::Function, xs::GPIterator)\n    GPIterator(fn(xs.first), ()->map(fn, xs.rest()))\nend\n\n# multi-dispatch definition (\u2252overload) Base.filter()\nBase.filter(::Function, xs::EmptyIterator) = xs\nfunction Base.filter(pred::Function, xs::GPIterator)\n    pred(xs.first) ? GPIterator(xs.first, ()->filter(pred, xs.rest())) : filter(pred, xs.rest())\nend\n```\n\n\u30dd\u30a4\u30f3\u30c8\u89e3\u8aac\uff1a\n\n+ 5\u301c14\u884c\u76ee\u3002\u578b\u306e\u5b9a\u7fa9\u3002\u65b0\u3057\u304f\u5b9a\u7fa9\u3057\u305f\u578b\uff08\u62bd\u8c61\u578b\u542b\u3080\uff09\u306f\u5168\u90e8\u30673\u3064\uff1a\n  + `AbstractIterator` \u2026`EmptyIterator` \u304a\u3088\u3073 `GPIterator` \u306e\u5171\u901a\u306e super type\n  + `EmptyIterator` \u2026\u4f55\u3082\u5217\u6319\u3059\u308b\u30e2\u30ce\u304c\u306a\u3044\u3053\u3068\u3092\u8868\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u578b\n  + `GPIterator` \u2026\u6700\u521d\u306e\u8981\u7d20\u3068\u30012\u3064\u3081\u4ee5\u964d\u306e\u8981\u7d20\u3092\u8868\u3059 `AbstractIterator` \u3092\u8fd4\u3059\u95a2\u6570\u304b\u3089\u306a\u308b composit type\u3002\u3061\u306a\u307f\u306b \"GP\" \u306f \"general-purpose\" \u306e\u7565\u3067\u3059\u3002\n+ 16\u301c26\u884c\u76ee\u3002\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5b9a\u7fa9\u3002\n  + `start(it)` \u306f\u3001\u305d\u308c\u81ea\u8eab `it` \u3092\u8fd4\u3059\u3060\u3051\u3002\n  + `done(it, xs)` \u306f\u3001`xs`\uff08\u72b6\u614b\u3092\u8868\u3059\u5f15\u6570\uff09\u304c `EmptyIterator` \u306a\u3089\u3070 `true`\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070 `false`\u3002\n  + `next(it, xs)` \u306f\u3001\u5024\u3068\u3057\u3066 `xs`\uff08`<:GPIterator`\uff09\u306e\u6700\u521d\u306e\u8981\u7d20\u3092\u3001\u6b21\u306e\u72b6\u614b\u3068\u3057\u3066 `xs` \u306e\u300c\u6b8b\u308a\u306e\u8981\u7d20\u3092\u8868\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u95a2\u6570\u300d\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\uff08`<:AbstractIterator`\uff09\u3092\u8fd4\u3059\u3002\n  + \u3053\u308c\u306b\u3088\u308a\u3001\u300c`next()` \u3059\u308b\u305f\u3073\u306b\u6b21\u306e\u5024\u3092\u9806\u6b21\u7b97\u51fa\u3057\u3001`EmptyIterator` \u304c\u73fe\u308c\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\u300d\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067\u5217\u6319\u3092\u3057\u307e\u3059\u3002  \n    \u3042\u3068\u3053\u306e\u4ed5\u7d44\u307f\u306e\u304a\u304b\u3052\u3067\u3001\u7121\u9650\u5217\u6319\uff08\u30b9\u30c8\u30ea\u30fc\u30e0\uff09\u5bfe\u5fdc\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n  + \u3042\u3068\u524d\u7bc0\u3067\u8aac\u660e\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u300124\u884c\u76ee\u306e `eltype()` \u95a2\u6570\u306f\u3001\u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u5217\u6319\u3059\u308b\u5024\u306e\u578b\u3092\u8fd4\u3059\u3082\u306e\u3002\u3053\u308c\u3092\u9069\u5207\u306b\u591a\u91cd\u5b9a\u7fa9\u3059\u308b\u3068\u3001\u4f8b\u3048\u3070`collect()`\u95a2\u6570\u3092\u4f7f\u7528\u3057\u305f\u3068\u304d\u306b\u306f\u305d\u306e\u578b\uff08=:`T`\uff09\u306e\u914d\u5217 `Array{T}` \u3092\u8fd4\u5374\u3057\u3066\u304f\u308c\u307e\u3059\u3002  \n    \u306a\u304a `eltype()` \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u306f\u623b\u308a\u5024\u306f `Any`\u3001\u3064\u307e\u308a\u300c\u3069\u3093\u306a\u578b\u3067\u3082OK\uff08\u3069\u3093\u306a\u578b\u304c\u5217\u6319\u3055\u308c\u308b\u304b\u5206\u304b\u3089\u306a\u3044\uff09\u300d\u3068\u3044\u3046\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002\n  + \\[\u95a2\u6570\u5b9a\u7fa9] \u4f8b\u3048\u3070 20\u884c\u76ee\uff08`Base.eltype(::EmptyIterator) = Any`\uff09\u3002\u95a2\u6570\u5ba3\u8a00\u6642\u306b\u300c\u305d\u306e\u5f15\u6570\u306e\u578b\u304c\u91cd\u8981\u3067\u3042\u3063\u3066\u4eee\u5f15\u6570\u305d\u306e\u3082\u306e\u306f\u4e0d\u8981\u300d\u306a\u5834\u5408\u306b\u306f\u3001\u5f15\u6570\u540d\u3092\u7701\u7565\u3057\u3066`::\u00ab\u578b\u00bb`\u3068\u3060\u3051\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002  \n    \u3053\u306e\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u7684\u306a\u6587\u6cd5\u597d\u304d\u3002\u7121\u99c4\u3082\u7701\u3051\u308b\u3057\u95a2\u6570\u5b9a\u7fa9\u3092\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u3059\u308b\u4e00\u52a9\u306b\u306a\u3063\u3066\u3044\u308b\u3057\u3002\u3053\u306e\u30b3\u30fc\u30c9\u5185\u3067\u3082\u591a\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n  + \\[\u95a2\u6570\u5b9a\u7fa9] 24\u884c\u76ee\uff08`Base.eltype{T}(::GPIterator{T}) = T`\uff09\u3002\u2191\u3068\u540c\u69d8\u300c\u305d\u306e\u5f15\u6570\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3092\u53d6\u5f97\u3057\u305f\u3044\u300d\u5834\u5408\u306b\u306f\u3001\u3053\u3093\u306a\u66f8\u304d\u65b9\u304c\u3067\u304d\u307e\u3059\u3002\u95a2\u6570\u5ba3\u8a00\u90e8\u306b\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a18\u8ff0\u3057\u3001\u4eee\u5f15\u6570\u306e\u578b\u306b\u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3002  \n    \u3053\u306e\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u7684\u306a\u6587\u6cd5\u597d\u304d\u3002\u7121\u99c4\u3082\u7701\u3051\u308b\u3057\u95a2\u6570\u5b9a\u7fa9\u3092\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u3059\u308b\u4e00\u52a9\u306b\u306a\u3063\u3066\u3044\u308b\u3057\u3002\n+ 28\u301c38\u884c\u76ee\u3002\u5916\u90e8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5b9a\u7fa9\u3002\u4e3b\u306b\u300c\uff08\u4ed6\u306e\uff09\u30a4\u30c6\u30ec\u30fc\u30bf\u304b\u3089 `GPIterator` \u3092\u751f\u6210\u3059\u308b\u30e2\u30ce\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n  + 32\u884c\u76ee\u3002Julia \u3067\u306f `Number` \u3082 iterable\u3067\u3001\u300c\u305d\u306e\u6570\u50241\u3064\u3060\u3051\u3092\u5217\u6319\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u300d\u3068\u3057\u3066\u52d5\u4f5c\uff08`for i=1; print(i); end`\u3068\u3059\u308b\u3068\u300c1\u300d\u3068\u3060\u3051\u8868\u793a\uff09\u3059\u308b\u306e\u3067\u3001\u305d\u308c\u306b\u5408\u308f\u305b\u3066\u300c\u6570\u5024\u304c\u6e21\u3055\u308c\u305f\u3089\u3001\u6700\u521d\u306e\u8981\u7d20\u3092\u305d\u306e\u6570\u5024\u30012\u3064\u3081\u4ee5\u964d\u306e\u8981\u7d20\u306f\u306a\u3057\uff08`EmptyIterator`\u3092\u8fd4\u3059\uff09\u300d\u3068\u3044\u3046\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n  + \u4e00\u756a\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u300134\u301c38\u884c\u76ee\u3002  \n    \u3053\u306e\u3088\u3046\u306b\u4ed6\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304b\u3089 `GPIterator` \u3092\u518d\u5e30\u7684\u306b\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002  \n    \u307e\u305f `GPIterator` \u4ee5\u5916\u306e\u5168\u3066\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u3001`GPIterator` \u306b\u5909\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u300c\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u8a00\u3048\u3070 `GPIterator`\uff08`<:AbstractIterator`\uff09\u300d\u3068\u3057\u3066\u578b\u3092\u7d71\u4e00\uff08\u4e00\u672c\u5316\uff09\u3067\u304d\u307e\u3059\uff01\n+ 40\u884c\u76ee\u4ee5\u964d\u3002\u3088\u304f\u3042\u308b\u95a2\u6570\u7fa4\uff08`take`, `takewhile`, `drop`, `dropwhile`, `map`, `filter`\uff09\u3092\uff08\u591a\u91cd\uff09\u5b9a\u7fa9\u3002\n  + \u3044\u305a\u308c\u3082\u623b\u308a\u5024\u306f `<:AbstractIterator`\u3002\u578b\u3092\u7d71\u4e00\uff01  \n    \u5916\u90e8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf `gpiterator()` \u306e\u5b9a\u7fa9\u3068\u540c\u69d8\u3001\u518d\u5e30\u7684\u5b9a\u7fa9\u3060\u3051\u3067\u76ee\u7684\u306e\u51e6\u7406\u304c\u5b9f\u88c5\u51fa\u6765\u3066\u3044\u308b\u3053\u3068\u306b\u3082\u6ce8\u76ee\u3002\n\n### \u4f7f\u7528\u4f8b\n\n```jl:GPIteratorSample.jl\n# GPIteratorSample.jl\n\ninclude(\"./GPIterator.jl\")\n\n# ===== ADDITIONAL DEFINITIONS =====\n\n# from(2) := 2:3:4:...\nfrom{T<:Integer}(s::T) = steps(s, one(T))\n\n# steps(1, 2) := 1:3:5:...\nsteps{T<:Integer}(s::T, t::T) = GPIterator(s, ()->steps(s + t, t))\n\n# Natural Numbers\nnats() = from(1)\n\n# Odd Numbers (> 0)\nodds() = steps(1, 2)\n\n# Fibonacci Sequence\nfibs() = fibs(one(BigInt), one(BigInt))\nfibs{T<:Integer}(a::T, b::T) = GPIterator(a, ()->fibs(b, a + b))\n\n# println(typeof(fibs()))\n# # => GPIterator{BigInt}\n\n# ===== EXAMPLES =====\n\n# `gpiterator` and `filter` sample : odd-primes under 100\nprintln(collect(filter(isprime, gpiterator(1:2:100))))\n# => [3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\n# `filter` and `take` sample : first 10 odd-primes\nprintln(collect(take(10, filter(isprime, odds()))))\n# => [3,5,7,11,13,17,19,23,29,31]\n\n# `map` sample : FizzBuzz\nfunction fizzbuzz()\n    map(nats()) do n\n        n % 15 == 0 && return \"FIZZBUZZ\"\n        n % 5 == 0  && return \"Buzz\"\n        n % 3 == 0  && return \"Fizz\"\n        n\n    end\nend\n\n# println(collect(take(20, fizzbuzz())))  # @> ERROR: `convert` has no method matching convert(::Type{Int64}, ::ASCIIString)\nprintln(collect(Any, take(20, fizzbuzz())))\n# => Any[1,2,\"Fizz\",4,\"Buzz\",\"Fizz\",7,8,\"Fizz\",\"Buzz\",11,\"Fizz\",13,14,\"FIZZBUZZ\",16,17,\"Fizz\",19,\"Buzz\"]\nprintln(collect(Union(Int, ASCIIString), take(20, fizzbuzz())))\n# => Union(ASCIIString,Int64)[1,2,\"Fizz\",4,\"Buzz\",\"Fizz\",7,8,\"Fizz\",\"Buzz\",11,\"Fizz\",13,14,\"FIZZBUZZ\",16,17,\"Fizz\",19,\"Buzz\"]\n\n# `takewhile` sample : fibs under 100\nfibsU100 = takewhile(n->n<100, fibs())\nprintln(typeof(fibsU100))\n# => GPIterator{BigInt}\nprintln(eltype(fibsU100))\n# => BigInt\nfor i = fibsU100\n    println(i)\nend\n# => 1\n# => 1\n# => 2\n# => 3\n# => 5\n# => 8\n# => 13\n# => 21\n# => 34\n# => 55\n# => 89\n\n# others : Collatz Sequence\nfunction collatz(n::Integer)\n    n < 2 && return gpiterator(n)\n    GPIterator(n, ()->collatz(isodd(n) ? 3n + 1 : div(n, 2)))\nend\n\nprintln(collect(collatz(3)))\n# => [3,10,5,16,8,4,2,1]\nprintln(collect(collatz(27)))\n# => [27,82,41,124,62,31,94,47,142,71,214,107,322,161,484,242,121,364,182,91,274,137,412,206,103,310,155,466,233,700,350,175,526,263,790,395,1186,593,1780,890,445,1336,668,334,167,502,251,754,377,1132,566,283,850,425,1276,638,319,958,479,1438,719,2158,1079,3238,1619,4858,2429,7288,3644,1822,911,2734,1367,4102,2051,6154,3077,9232,4616,2308,1154,577,1732,866,433,1300,650,325,976,488,244,122,61,184,92,46,23,70,35,106,53,160,80,40,20,10,5,16,8,4,2,1]\n```\n\n\u898b\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3060\u3044\u305f\u3044\u3069\u3093\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u304b\u306f\u5206\u304b\u3063\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u30dd\u30a4\u30f3\u30c8\u629c\u7c8b\u3057\u3066\u7c21\u5358\u306b\u89e3\u8aac\u3002\n\n+ 5\u301c24\u884c\u76ee\u3002\u7121\u9650\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u3044\u304f\u3064\u304b\u5b9a\u7fa9\u3002\n+ \\[\u95a2\u6570\u5b9a\u7fa9] 21\u884c\u76ee\u88dc\u8db3\u3002\u3053\u306e\u5ba3\u8a00\u306e\u4ed5\u65b9\u306f `fibs(a::Integer, b::Integer)` \u3068\u66f8\u3044\u3066\u3082\u826f\u3044\u306e\u3067\u306f\uff1f\u3000\u3068\u601d\u308f\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3067\u3082\u610f\u5473\u304c\u5909\u308f\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3057\u307e\u3046\u3068\u300c`a`\u3082`b`\u3082 `Integer` \u306e subtype\uff08\u3060\u304b\u3089\u3001\u6574\u6570\u578b\u3001\u3067\u306f\u3042\u308b\u3093\u3060\u3051\u3069\u540c\u3058\u6574\u6570\u578b\u3068\u306f\u9650\u3089\u306a\u3044\u3002`a`\u304c`Int32`\u3067`b`\u304c`BigInt`\u3067\u3082OK\uff09\u300d\u3068\u3044\u3046\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002  \n  \u305d\u308c\u306b\u5bfe\u3057\u3066\u3053\u306e\u5ba3\u8a00\u65b9\u6cd5 `fibs{T<:Integer}(a::T, b::T)` \u306f\u3001\u300c`a`\u3082`b`\u3082\u3001\u3042\u308b`Integer`\u306e subtype\u3067\u540c\u3058\u578b\uff08`a`\u304c`Int64`\u306a\u3089`b`\u3082`Int64`\uff09\u300d\u3068\u3044\u3046\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002  \n  \u3088\u3063\u3066\u4f8b\u3048\u3070 `fibs(1, BigInt(1))` \u3068\u66f8\u304f\u3068\u300c`Int64`\uff08\u3082\u3057\u304f\u306f`Int32`\uff09\u3068`BigInt`\u3092\u5f15\u6570\u306b\u53d6\u308b\u30e1\u30bd\u30c3\u30c9 `fibs` \u306f\u3042\u308a\u307e\u305b\u3093\u300d\u3068\u3044\u3046\u65e8\u306e\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n  + \u2191\u3088\u308a\u89aa\u5207\u306a\u8a2d\u8a08\u306b\u3059\u308b\u306a\u3089\u3070\u3001\u3082\u3046\u4e00\u3064 `fibs(a::Integer,b::Integer) = fibs(promote(a, b)...)` \u3068\u3044\u3046\u591a\u91cd\u5b9a\u7fa9\u3092\u3057\u3066\u300c\u5f15\u6570\u306e\u578b\u304c\u7570\u306a\u3063\u3066\u3044\u305f\u3089 `promote()` \u95a2\u6570\u3092\u4f7f\u3063\u3066\uff08\u5927\u304d\u3044\u65b9\u306e\uff09\u578b\u306b\u5408\u308f\u305b\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u3092\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u7701\u7565\u3057\u307e\u3057\u305f\u3002\n+ 29,33\u884c\u76ee\u3002\u5947\u7d20\u6570\u3092\u3044\u304f\u3064\u304b\u5217\u6319\u3059\u308b\u30b5\u30f3\u30d7\u30eb[^4]\u3002  \n  `isprime()` \u306f\u7d20\u6570\u5224\u5b9a\u3092\u3059\u308b Julia \u6a19\u6e96\u306e\u95a2\u6570\u3067\u3059\u3002\n+ 36\u301c50\u884c\u76ee\u3002\u3088\u304f\u3042\u308b FizzBuzz \u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u30b5\u30f3\u30d7\u30eb\u3002  \n  \u6ce8\u610f\u70b9\u3068\u3057\u3066\u306f\u300146\u884c\u76ee\u3002`map()`\u306e\u5834\u5408\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u304c\u5217\u6319\u8981\u7d20\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u5834\u5408\u3001\u5148\u307b\u3069\u8aac\u660e\u3057\u305f `eltype()` \u306e\u591a\u91cd\u5b9a\u7fa9\u306e\u305b\u3044\u3067\u9006\u306b `collect()` \u95a2\u6570\u3067\u5909\u63db\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002  \n  \u306e\u3067\u300147\u884c\u76ee\u306e\u3088\u3046\u306b\u660e\u793a\u7684\u306b `Any` \u3092\u6307\u5b9a\u3057\u3066\u3069\u3093\u306a\u578b\u3067\u3082\u53d7\u3051\u4ed8\u3051\u308b\u3088\u3046\u306b\u3059\u308b\u304b\u300149\u884c\u76ee\u306e\u3088\u3046\u306b\u300c\u5217\u6319\u3055\u308c\u3046\u308b\u578b\u3092\u5168\u3066\u7db2\u7f85\u3057\u305f `Union` \u578b\u300d\u3092\u6307\u5b9a\u3057\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002  \n  \u306a\u304a\u3053\u306e\u5236\u9650\u306f\u3001`for`\u6587\u3067\u5217\u6319\u3059\u308b\u4e0a\u3067\u306f\u554f\u984c\u3042\u308a\u307e\u305b\u3093\uff08\u52d5\u7684\u578b\u4ed8\u306a\u306e\u3067\uff09[^5]\u3002\n+ 52\u301c71\u884c\u76ee\u3002`takewhile`\u3068\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u30b5\u30f3\u30d7\u30eb\u3002\u8a73\u7d30\u7565\u3002  \n  \u3053\u308c\u3068\u540c\u69d8\u306b\u300c\u30ea\u30e5\u30ab\u6570\u5217\u300d\u300c\u30c8\u30ea\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u300d\u300c\u30da\u30e9\u30f3\u6570\u5217\u300d\u7b49\u3082\u7c21\u5358\u306b\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u306d\u3002\n+ 73\u301c82\u884c\u76ee\u3002\u304a\u307e\u3051\uff1a\u300c\u30b3\u30e9\u30c3\u30c4\u306e\u6570\u5217\u300d\uff08\u53c2\u7167\uff1a[Wikipedia:\u30b3\u30e9\u30c3\u30c4\u306e\u554f\u984c](http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%A9%E3%83%83%E3%83%84%E3%81%AE%E5%95%8F%E9%A1%8C \"\u30b3\u30e9\u30c3\u30c4\u306e\u554f\u984c - Wikipedia\")\uff09\u306e\u30b5\u30f3\u30d7\u30eb\u3002\n\n\u3053\u306e\u307b\u304b\u306b\u3001\u3088\u304f\u3042\u308b\u4f8b\u3068\u3057\u3066\u3001`zip(it1, it2, \u2026)`\u3001`repeat(el[,n])`\uff08`el`\u3092\u7121\u9650\u306b\uff08\u3082\u3057\u304f\u306f`n`\u56de\uff09\u7e70\u308a\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\uff09\u3001`cycle(it)`\uff08\u30a4\u30c6\u30ec\u30fc\u30bf `it` \u306e\u5217\u6319\u3092\u7121\u9650\u306b\u7e70\u308a\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\uff09\u3001`chain(it1, it2, \u2026)`\uff08\u8907\u6570\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9023\u7d50\u3057\u3066\u5217\u6319\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\uff09\u7b49\u3082\u3001`GPIterator` \u3092\u5229\u7528\u3057\u3066\u66f8\u3051\u307e\u3059\u3002\n\n## \u8003\u5bdf\u30fb\u5c55\u671b\n\n\u898b\u3066\u3044\u305f\u3060\u3044\u3066\u5206\u304b\u308b\u901a\u308a\u3001`GPIterator` \u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u751f\u6210\u3059\u308b\u3068\u304d\u3001\u7b2c2\u5f15\u6570\u306f\u3060\u3044\u305f\u3044\u30e9\u30e0\u30c0\u5f0f\u3092\u5229\u7528\u3057\u305f\u30af\u30ed\u30fc\u30b8\u30e3\u306b\u306a\u308a\u307e\u3059\u3002\u307b\u307c\u6bce\u56de `()->\u301c` \u3068\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\u306a\u3093\u304b\u3053\u308c\u304c\u3082\u3063\u305f\u3044\u306a\u3044\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u3001\u30de\u30af\u30ed\u304b\u4f55\u304b\u3092\u4f7f\u3063\u3066\u3082\u3046\u5c11\u3057\u30b7\u30f3\u30d7\u30eb\u306a\u66f8\u5f0f\u3067\u5b9a\u7fa9\u3067\u304d\u306a\u3044\u304b\u306a\u30fc\u3001\u3068\u5c11\u3057\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b Julia \u304c\u6a19\u6e96\u3067\u3053\u306e\u30b7\u30b9\u30c6\u30e0\u3092\u63a1\u7528\u305b\u305a\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306f3\u3064\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u7d44\u5408\u305b\u3067\u5b9f\u73fe\u3059\u308b\u3068\u3044\u3046\u4ed5\u69d8\u306b\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u304a\u305d\u3089\u304f\u4e00\u756a\u306e\u7406\u7531\u306f\u300c\u52b9\u7387\u300d\u3002\n\u3053\u306e `GPIterator` \u3082\u3042\u308b\u7a0b\u5ea6\u52b9\u7387\u3088\u304f\u52d5\u4f5c\u3059\u308b\u3088\u3046\u5b9f\u9a13\u3092\u7e70\u308a\u8fd4\u3057\u3066\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3051\u308c\u3069\u3001\u6c4e\u7528\u6027\u3092\u6301\u305f\u305b\u3066\u3044\u308b\u304c\u6545\u306b\u3069\u3046\u3057\u3066\u3082\u52b9\u7387\u3092\u72a0\u7272\u306b\u3057\u3066\u3044\u308b\u90e8\u5206\u306f\u3042\u308a\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u30b3\u30fc\u30c9\u4f8b\u306f\u6319\u3052\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001`repeat()`\u3068\u304b`zip()`\u3068\u304b\u3092\u8003\u3048\u305f\u3068\u304d\u3001`GPIterator` \u306e\u4ed5\u7d44\u307f\u306b\u7d44\u307f\u8fbc\u3080\u3088\u308a\u306f\u72ec\u81ea\u306e\u578b\u3092\u4f5c\u3063\u3066\u305d\u308c\u306b\u7279\u5316\u3057\u305f `start()`/`done()`/`next()` \u95a2\u6570\u306e\u591a\u91cd\u5b9a\u7fa9\u3092\u3057\u305f\u65b9\u304c\u9ad8\u52b9\u7387\u306a\u306e\u306f\u76ee\u306b\u898b\u3048\u3066\u3044\u307e\u3059\u3002\n\n\u305d\u308c\u3067\u3082\u3053\u306e `GPIterator` \u304c\u6709\u7528\u306a\u4f8b\u304c\u3082\u3063\u3068\u898b\u3064\u304b\u308c\u3070\u3001\u3082\u3063\u3068\u304d\u3061\u3093\u3068\u4f53\u7cfb\u5316\u30fb\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3057\u3066\u5927\u3005\u7684\u306b\u63d0\u6848\u3057\u3066\u307f\u3088\u3046\u304b\u306a\u30fc\u3001\u3068\u76ee\u8ad6\u898b\u4e2d[^6]\u3002\n\n## \u53c2\u8003\n\n+ Julia Documentation\uff08 [v0.3.x](http://docs.julialang.org/en/release-0.3/) / [v0.4.x\u4ee5\u964d](http://docs.julialang.org/en/latest/) \uff09\n+ [Lazy.jl](https://github.com/one-more-minute/Lazy.jl \"one-more-minute/Lazy.jl\")\uff08\u9045\u5ef6\u30ea\u30b9\u30c8\u3001\u304a\u3088\u3073\u305d\u308c\u306b\u95a2\u9023\u3057\u305f\u5404\u7a2e\u95a2\u6570\u30fb\u30de\u30af\u30ed\u3092\u63d0\u4f9b\u3059\u308b Julia \u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3002`Pkg.add(\"Lazy\")` \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u53ef\u80fd\u3002`GPIterator` \u3092\u69cb\u7bc9\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u30bd\u30fc\u30b9\u3092\u5c11\u3057\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u3061\u306a\u307f\u306b\u30d0\u30b0\u304c\u3042\u308a\u30d7\u30eb\u30ea\u30af\u9001\u3063\u305f\u3051\u308c\u3069\u306a\u304b\u306a\u304b\u76f4\u3057\u3066\u3082\u3089\u3048\u306a\u3044\u2026\uff09\n+ [LazySequence.jl](https://github.com/dcjones/LazySequences.jl \"dcjones/LazySequences.jl\")\uff08\u2191\u3068\u540c\u69d8\u306e\uff08\u3088\u308a\u5c11\u3057\u8efd\u3044\uff09\u30d1\u30c3\u30b1\u30fc\u30b8\u30022\u5e74\u8fd1\u304f\u66f4\u65b0\u3055\u308c\u3066\u3044\u306a\u3044\u2026\uff09\n\n\n[^1]: http://docs.julialang.org/en/release-0.3/stdlib/collections/#iteration, \u3082\u3057\u304f\u306f http://docs.julialang.org/en/latest/stdlib/collections/#iteration \u53c2\u7167\n[^2]: \u3053\u306e\u5b9f\u88c5\u306b\u306f\u554f\u984c\u304c\u3042\u308b\uff08`next()`\u3059\u308b\u305f\u3073\u306b\u5185\u90e8\u72b6\u614b\u304c\u5909\u66f4\u3055\u308c\u3066\u3057\u307e\u3046\u30a4\u30c6\u30ec\u30fc\u30bf\uff08\u4f8b\uff1a`Task`\uff09\u3060\u3068\u671f\u5f85\u901a\u308a\u306e\u52d5\u4f5c\u3092\u3057\u306a\u3044\uff09\u306e\u3067\u3059\u304c\u3001\u307e\u3041\u3060\u3044\u305f\u3044\u3053\u3093\u306a\u611f\u3058\u3068\u3044\u3046\u30b5\u30f3\u30d7\u30eb\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u307e\u308a\u6df1\u5165\u308a\u305b\u305a\u306b\u3069\u3046\u304b\u4e00\u3064\u3002\n[^3]: `Union`\u578b\u3092\u4f7f\u3063\u3066\u5f15\u6570\u304c\u8907\u6570\u306e\u578b\u306b\u5bfe\u5fdc\u3059\u308b\u3088\u3046\u95a2\u6570\u3092\u591a\u91cd\u5b9a\u7fa9\u3059\u308c\u3070\u3001\u51e6\u7406\u306e\u5171\u901a\u5316\u306f\u3067\u304d\u306a\u3044\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u3042\u3068\u304b\u3089\u8ffd\u52a0\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u7d50\u5c40\u554f\u984c\u3068\u306a\u308a\u307e\u3059\u3002\n[^4]: \u3053\u306e\u3042\u305f\u308a\u304f\u3089\u3044\u306a\u3089\u3001`GPIterator` \u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u3084\u308a\u305f\u3044\u3053\u3068\u306f\u5272\u3068\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u5b9f\u73fe\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3051\u308c\u3069\u3001\u307e\u3041\u3053\u308c\u3082\u30b5\u30f3\u30d7\u30eb\u3068\u8a00\u3046\u3053\u3068\u3067\u3002\n[^5]: \u3068\u306f\u3044\u3048\u5b9f\u969b\u306b\u306f\u3001\u304d\u3061\u3093\u3068\u3057\u305f\u8a2d\u8a08\u3092\u3057\u3066\u8fd4\u3055\u308c\u308b\u5024\u306e\u578b\u304c\u4e00\u5b9a\u3068\u306a\u308b\u3088\u3046\u306b\u3059\u3079\u304d\u306a\u3093\u3067\u3059\u3051\u308c\u3069\u3002\n[^6]: \u305d\u308c\u3088\u308a\u305d\u308d\u305d\u308d Julia \u3092\u3082\u3063\u3068\u5b9f\u7528\u7684\u306b\u4f7f\u3046\u3053\u3068\uff08\uff1d\u6570\u5024\u8a08\u7b97\u3068\u304b\u6a5f\u68b0\u5b66\u7fd2\u3068\u304b\uff09\u3092\u59cb\u3081\u306a\u3044\u3068\u2026\u3002\u304a\u4ed5\u4e8b\uff08\u672c\u696d\uff09\u7684\u306b\u2026\u3002\n"}