{"context": "\n\n\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u3068\u306f\n\u591a\u30af\u30e9\u30b9\u5206\u985e\u7528\u3002\u30b9\u30d1\u30e0\u30e1\u30fc\u30eb\u306e\u5206\u985e\u3068\u304b\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u304c\u6709\u540d\u3002\n\n\u30d9\u30a4\u30ba\u306e\u5b9a\u7406\u3092\u4f7f\u3063\u305f\u30af\u30e9\u30b9\u306b\u5c5e\u3059\u308b\u78ba\u7387\u7b97\u51fa\ny\u3092\u76ee\u7684\u5909\u6570\u3001x(x1x1x_{1}\u301cxnxnx_{n})\u3092\u8aac\u660e\u5909\u6570\u3068\u3059\u308b\u3068\u3001\u30d9\u30a4\u30ba\u306e\u5b9a\u7406\u3092\u4f7f\u3046\u3068\u3001\u4e0e\u3048\u3089\u308c\u305f\u30b5\u30f3\u30d7\u30eb\u304c\u3069\u306e\u30af\u30e9\u30b9\u306b\u5c5e\u3059\u308b\u304b\u306e\u78ba\u7387\u3092\u4ee5\u4e0b\u3067\u8a08\u7b97\u3067\u304d\u308b\u3002\nP(y | x_{1},\u30fb\u30fb\u30fbx_{n}) = \\frac{P(y) * P(x_{1},\u30fb\u30fb\u30fbx_{n} | y)} {P(x_{1},\u30fb\u30fb\u30fbx_{n})}\nP(y|x1,\u30fb\u30fb\u30fbxn)=P(y)\u2217P(x1,\u30fb\u30fb\u30fbxn|y)P(x1,\u30fb\u30fb\u30fbxn)P(y|x1,\u30fb\u30fb\u30fbxn)=P(y)\u2217P(x1,\u30fb\u30fb\u30fbxn|y)P(x1,\u30fb\u30fb\u30fbxn){P(y | x_{1},\u30fb\u30fb\u30fbx_{n}) = \\frac{P(y) * P(x_{1},\u30fb\u30fb\u30fbx_{n} | y)} {P(x_{1},\u30fb\u30fb\u30fbx_{n})}\n}\n\u3061\u306a\u307f\u306b\u3001\u300c\u30ca\u30a4\u30fc\u30d6\u300d\u3068\u306f\u8aac\u660e\u5909\u6570\u304c\u4e92\u3044\u306b\u72ec\u7acb\u3067\u3042\u308b\u3068\u3044\u3046\u4eee\u5b9a\u3092\u3059\u308b\u3053\u3068\u304b\u3089\u6765\u3066\u308b\u3002\u8aac\u660e\u5909\u6570\u304c\u4e92\u3044\u306b\u72ec\u7acb\u3068\u306f\u4ee5\u4e0b\u3092\u610f\u5473\u3059\u308b\u3002\nP(x_{i} | y, x_{1},\u30fb\u30fb\u30fb,x_{i+1},\u30fb\u30fb\u30fb,x_{n}) = P(x_{i} | y)\nP(xi|y,x1,\u30fb\u30fb\u30fb,xi+1,\u30fb\u30fb\u30fb,xn)=P(xi|y)P(xi|y,x1,\u30fb\u30fb\u30fb,xi+1,\u30fb\u30fb\u30fb,xn)=P(xi|y){P(x_{i} | y, x_{1},\u30fb\u30fb\u30fb,x_{i+1},\u30fb\u30fb\u30fb,x_{n}) = P(x_{i} | y)\n}\n\u300cy\u304c\u8d77\u304d\u305f\u6642\u306exix_{i}\u306f\u3001\u4ed6\u306ex\u306e\u72b6\u614b\u306b\u5f71\u97ff\u3055\u308c\u307e\u305b\u3093\u3088\u300d\u3063\u3066\u3053\u3068\u3002\n\u306a\u3093\u3067\u3053\u3093\u306a\u3053\u3068\u3092\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u30d9\u30a4\u30ba\u306e\u5b9a\u7fa9\u306e\u53f3\u8fba\u306e\u5206\u5b50\u306e\u5f0f\u304c\u7c21\u5358\u306b\u306a\u308b\u304b\u3089\u3002\n\u72ec\u7acb\u6027\u3092\u4eee\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001P(x1,\u30fb\u30fb\u30fbxn|y)=\u220fni=1(xi|y)P(x_{1},\u30fb\u30fb\u30fbx_{n} | y) = \\prod_{i=1}^n (x_{i} | y)\u3068\u66f8\u3051\u308b\u306e\u3067\u3001\n\u6700\u7d42\u7684\u306a\u30d9\u30a4\u30ba\u306e\u5b9a\u7406\u306e\u5f0f\u304c\u4ee5\u4e0b\u3068\u306a\u308b\u3002\nP(y | x_{1},\u30fb\u30fb\u30fbx_{n}) = \\frac{P(y) * \\prod_{i=1}^n (x_{i} | y)} {P(x_{1},\u30fb\u30fb\u30fbx_{n})}\nP(y|x1,\u30fb\u30fb\u30fbxn)=P(y)\u2217\u220fni=1(xi|y)P(x1,\u30fb\u30fb\u30fbxn){P(y | x_{1},\u30fb\u30fb\u30fbx_{n}) = \\frac{P(y) * \\prod_{i=1}^n (x_{i} | y)} {P(x_{1},\u30fb\u30fb\u30fbx_{n})}\n}\n\u3053\u306e\u6642\u306e\u5206\u6bcd\u306eP(x1,\u30fb\u30fb\u30fbxn)P(x_{1},\u30fb\u30fb\u30fbx_{n})\u306f\u56fa\u5b9a\u5024\u306b\u306a\u308b\u306e\u3067\u3001\u30af\u30e9\u30b9\u306b\u5c5e\u3059\u308b\u78ba\u7387\u306e\u7b97\u51fa\u306b\u306f\u8003\u3048\u306a\u304f\u3066\u3082OK\u306a\u306e\u3067\u7121\u8996\u3057\u3061\u3083\u3048\u308b\u3002\nP(y | x_{1},\u30fb\u30fb\u30fbx_{n}) \\propto P(y) * \\prod_{i=1}^n (x_{i} | y) \\\\\nP(y|x1,\u30fb\u30fb\u30fbxn)\u221dP(y)\u2217n\u220fi=1(xi|y){P(y | x_{1},\u30fb\u30fb\u30fbx_{n}) \\propto P(y) * \\prod_{i=1}^n (x_{i} | y) \\\\\n}\n\uff08\u221d\\propto\u306f\u6bd4\u4f8b\u3059\u308b\u3063\u3066\u610f\u5473\u306e\u8a18\u53f7\u3067\u3059\u3002\uff09\n\u3053\u308c\u3067\u3001\u5404\u30af\u30e9\u30b9\u306b\u5206\u985e\u3055\u308c\u308b\u78ba\u7387\u304c\u51fa\u308b\u306e\u3067\u3001\u305d\u308c\u304c\u4e00\u756a\u9ad8\u3044\u78ba\u7387\u3060\u3063\u305f\u30af\u30e9\u30b9\u3068\u5224\u5225\u3059\u308c\u3070\u30af\u30e9\u30b9\u306e\u63a8\u5b9a\u304c\u53ef\u80fd\u3002\n\\hat{y} = {\\arg \\max}_{y} P(y) * \\prod_{i=1}^n (x_{i} | y)\n\u02c6y=argmaxyP(y)\u2217n\u220fi=1(xi|y){\\hat{y} = {\\arg \\max}_{y} P(y) * \\prod_{i=1}^n (x_{i} | y)\n}\n\nGaussian Naive Bayes(\u30ac\u30a6\u30b7\u30a2\u30f3\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba)\n\u8aac\u660e\u5909\u6570\u304c\u9023\u7d9a\u5024\u306e\u5834\u5408\u3001\u3053\u308c\u304c\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u3068\u4eee\u5b9a\u3059\u308b\u624b\u6cd5\u3092\u3001\u7279\u306bGaussian Naive Bayes\u3068\u547c\u3076\u3002\n\u305d\u306e\u6642\u306e\u30af\u30e9\u30b9\u306b\u5c5e\u3059\u308b\u78ba\u7387\u306f\u3001\u4ee5\u4e0b\u3067\u8868\u305b\u308b\u3002\np(x = v | c) = \\frac{1}{\\sqrt{2 * \\pi * \\sigma_c^{2}}} * \\mathrm{e}^{-\\frac{(v - \\mu_{c})^{2}}{2 * \\sigma_c^{2}}}\np(x=v|c)=1\u221a2\u2217\u03c0\u2217\u03c32c\u2217e\u2212(v\u2212\u03bcc)22\u2217\u03c32c{p(x = v | c) = \\frac{1}{\\sqrt{2 * \\pi * \\sigma_c^{2}}} * \\mathrm{e}^{-\\frac{(v - \\mu_{c})^{2}}{2 * \\sigma_c^{2}}}\n}\n\n\u3084\u3063\u3066\u307f\u308b\uff08sklearn\uff09\niris\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u3063\u3066\u3001\u30ac\u30a6\u30b7\u30a2\u30f3\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u3092\u3084\u3063\u3066\u307f\u308b\u3002\n\ndo_gaussian_naive_bayes.py\nfrom sklearn import datasets                           # \u30c7\u30fc\u30bf\u30ed\u30fc\u30c9\u7528\nfrom sklearn.cross_validation import train_test_split  # \u5b66\u7fd2/\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u4f5c\u6210\u7528\nfrom sklearn import metrics                            # \u7cbe\u5ea6\u8a55\u4fa1\u7528\nfrom sklearn.naive_bayes import GaussianNB             # \u30ac\u30a6\u30b7\u30a2\u30f3\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u5b9f\u884c\u7528\n\n# \u30c7\u30fc\u30bf\u7528\u610f\niris = datasets.load_iris()\nX = iris.data\nY = iris.target\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state=0)\n\n# \u30ac\u30a6\u30b7\u30a2\u30f3\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u5b9f\u884c\nmodel = GaussianNB()              # \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\nmodel.fit(X_train, Y_train)       # \u30e2\u30c7\u30eb\u4f5c\u6210\u5b9f\u884c\n\n# \u4e88\u6e2c\u5b9f\u884c\npredicted = model.predict(X_test) # \u4e88\u6e2c\u5b9f\u884c\nmetrics.accuracy_score(Y_test, predicted) # \u7cbe\u5ea6\u8a08\u7b97\n> 1.0\n\n\n\u7cbe\u5ea6100%\u3060\u3063\u305f\u3002\n## \u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u3068\u306f\n\u591a\u30af\u30e9\u30b9\u5206\u985e\u7528\u3002\u30b9\u30d1\u30e0\u30e1\u30fc\u30eb\u306e\u5206\u985e\u3068\u304b\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u304c\u6709\u540d\u3002\n\n### \u30d9\u30a4\u30ba\u306e\u5b9a\u7406\u3092\u4f7f\u3063\u305f\u30af\u30e9\u30b9\u306b\u5c5e\u3059\u308b\u78ba\u7387\u7b97\u51fa\n\ny\u3092\u76ee\u7684\u5909\u6570\u3001x($x_{1}$\u301c$x_{n}$)\u3092\u8aac\u660e\u5909\u6570\u3068\u3059\u308b\u3068\u3001[\u30d9\u30a4\u30ba\u306e\u5b9a\u7406](http://qiita.com/yshi12/items/1a31a7cb8d0e0a18484b)\u3092\u4f7f\u3046\u3068\u3001\u4e0e\u3048\u3089\u308c\u305f\u30b5\u30f3\u30d7\u30eb\u304c\u3069\u306e\u30af\u30e9\u30b9\u306b\u5c5e\u3059\u308b\u304b\u306e\u78ba\u7387\u3092\u4ee5\u4e0b\u3067\u8a08\u7b97\u3067\u304d\u308b\u3002\n\n```math\nP(y | x_{1},\u30fb\u30fb\u30fbx_{n}) = \\frac{P(y) * P(x_{1},\u30fb\u30fb\u30fbx_{n} | y)} {P(x_{1},\u30fb\u30fb\u30fbx_{n})}\n```\n\n\u3061\u306a\u307f\u306b\u3001\u300c\u30ca\u30a4\u30fc\u30d6\u300d\u3068\u306f\u8aac\u660e\u5909\u6570\u304c\u4e92\u3044\u306b\u72ec\u7acb\u3067\u3042\u308b\u3068\u3044\u3046\u4eee\u5b9a\u3092\u3059\u308b\u3053\u3068\u304b\u3089\u6765\u3066\u308b\u3002\u8aac\u660e\u5909\u6570\u304c\u4e92\u3044\u306b\u72ec\u7acb\u3068\u306f\u4ee5\u4e0b\u3092\u610f\u5473\u3059\u308b\u3002\n\n```math\nP(x_{i} | y, x_{1},\u30fb\u30fb\u30fb,x_{i+1},\u30fb\u30fb\u30fb,x_{n}) = P(x_{i} | y)\n```\n\n\u300cy\u304c\u8d77\u304d\u305f\u6642\u306e$x_{i}$\u306f\u3001\u4ed6\u306ex\u306e\u72b6\u614b\u306b\u5f71\u97ff\u3055\u308c\u307e\u305b\u3093\u3088\u300d\u3063\u3066\u3053\u3068\u3002\n\u306a\u3093\u3067\u3053\u3093\u306a\u3053\u3068\u3092\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u30d9\u30a4\u30ba\u306e\u5b9a\u7fa9\u306e\u53f3\u8fba\u306e\u5206\u5b50\u306e\u5f0f\u304c\u7c21\u5358\u306b\u306a\u308b\u304b\u3089\u3002\n\n\u72ec\u7acb\u6027\u3092\u4eee\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001$P(x_{1},\u30fb\u30fb\u30fbx_{n} | y) = \\prod_{i=1}^n (x_{i} | y)$\u3068\u66f8\u3051\u308b\u306e\u3067\u3001\n\n\u6700\u7d42\u7684\u306a\u30d9\u30a4\u30ba\u306e\u5b9a\u7406\u306e\u5f0f\u304c\u4ee5\u4e0b\u3068\u306a\u308b\u3002\n\n```math\nP(y | x_{1},\u30fb\u30fb\u30fbx_{n}) = \\frac{P(y) * \\prod_{i=1}^n (x_{i} | y)} {P(x_{1},\u30fb\u30fb\u30fbx_{n})}\n```\n\n\u3053\u306e\u6642\u306e\u5206\u6bcd\u306e$P(x_{1},\u30fb\u30fb\u30fbx_{n})$\u306f\u56fa\u5b9a\u5024\u306b\u306a\u308b\u306e\u3067\u3001\u30af\u30e9\u30b9\u306b\u5c5e\u3059\u308b\u78ba\u7387\u306e\u7b97\u51fa\u306b\u306f\u8003\u3048\u306a\u304f\u3066\u3082OK\u306a\u306e\u3067\u7121\u8996\u3057\u3061\u3083\u3048\u308b\u3002\n\n```math\nP(y | x_{1},\u30fb\u30fb\u30fbx_{n}) \\propto P(y) * \\prod_{i=1}^n (x_{i} | y) \\\\\n```\n\uff08$\\propto$\u306f\u6bd4\u4f8b\u3059\u308b\u3063\u3066\u610f\u5473\u306e\u8a18\u53f7\u3067\u3059\u3002\uff09\n\n\u3053\u308c\u3067\u3001\u5404\u30af\u30e9\u30b9\u306b\u5206\u985e\u3055\u308c\u308b\u78ba\u7387\u304c\u51fa\u308b\u306e\u3067\u3001\u305d\u308c\u304c\u4e00\u756a\u9ad8\u3044\u78ba\u7387\u3060\u3063\u305f\u30af\u30e9\u30b9\u3068\u5224\u5225\u3059\u308c\u3070\u30af\u30e9\u30b9\u306e\u63a8\u5b9a\u304c\u53ef\u80fd\u3002\n\n```math\n\\hat{y} = {\\arg \\max}_{y} P(y) * \\prod_{i=1}^n (x_{i} | y)\n```\n\n### Gaussian Naive Bayes(\u30ac\u30a6\u30b7\u30a2\u30f3\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba)\n\u8aac\u660e\u5909\u6570\u304c\u9023\u7d9a\u5024\u306e\u5834\u5408\u3001\u3053\u308c\u304c\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u3068\u4eee\u5b9a\u3059\u308b\u624b\u6cd5\u3092\u3001\u7279\u306bGaussian Naive Bayes\u3068\u547c\u3076\u3002\n\n\u305d\u306e\u6642\u306e\u30af\u30e9\u30b9\u306b\u5c5e\u3059\u308b\u78ba\u7387\u306f\u3001\u4ee5\u4e0b\u3067\u8868\u305b\u308b\u3002\n\n```math\np(x = v | c) = \\frac{1}{\\sqrt{2 * \\pi * \\sigma_c^{2}}} * \\mathrm{e}^{-\\frac{(v - \\mu_{c})^{2}}{2 * \\sigma_c^{2}}}\n```\n\n## \u3084\u3063\u3066\u307f\u308b\uff08sklearn\uff09\niris\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u3063\u3066\u3001\u30ac\u30a6\u30b7\u30a2\u30f3\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u3092\u3084\u3063\u3066\u307f\u308b\u3002\n\n```{do_gaussian_naive_bayes.py}\nfrom sklearn import datasets                           # \u30c7\u30fc\u30bf\u30ed\u30fc\u30c9\u7528\nfrom sklearn.cross_validation import train_test_split  # \u5b66\u7fd2/\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u4f5c\u6210\u7528\nfrom sklearn import metrics                            # \u7cbe\u5ea6\u8a55\u4fa1\u7528\nfrom sklearn.naive_bayes import GaussianNB             # \u30ac\u30a6\u30b7\u30a2\u30f3\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u5b9f\u884c\u7528\n\n# \u30c7\u30fc\u30bf\u7528\u610f\niris = datasets.load_iris()\nX = iris.data\nY = iris.target\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state=0)\n\n# \u30ac\u30a6\u30b7\u30a2\u30f3\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u5b9f\u884c\nmodel = GaussianNB()              # \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\nmodel.fit(X_train, Y_train)       # \u30e2\u30c7\u30eb\u4f5c\u6210\u5b9f\u884c\n\n# \u4e88\u6e2c\u5b9f\u884c\npredicted = model.predict(X_test) # \u4e88\u6e2c\u5b9f\u884c\nmetrics.accuracy_score(Y_test, predicted) # \u7cbe\u5ea6\u8a08\u7b97\n> 1.0\n```\n\n\u7cbe\u5ea6100%\u3060\u3063\u305f\u3002\n", "tags": ["Python", "sklearn"]}