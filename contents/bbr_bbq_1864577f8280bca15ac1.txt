{"context": " More than 1 year has passed since last update.\u524d\u56de\u306f\u30d5\u30eb\u30b9\u30af\u30e9\u30c3\u30c1\u3067\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3092\u5b9f\u88c5\u3057\u3001CAPTCHA\u753b\u50cf\u306e\u8a8d\u8b58\u3092\u8a66\u307f\u305f\u3002\n\u4eca\u56de\u306f\u300cChainer\u300d\u3092\u4f7f\u3063\u3066\u540c\u3058\u3053\u3068\u3092\u3084\u3063\u3066\u307f\u308b\u3002\n\u306a\u304a\u3001\u300cscikit-neuralnetwork\u300d\u3067\u3082\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3092\u5b9f\u88c5\u3067\u304d\u308b\u304c\u3001\u3053\u306e\u691c\u8a3c\u306f\u307e\u305f\u306e\u6a5f\u4f1a\u3068\u3059\u308b\u3002\n\n\u30a2\u30b8\u30a7\u30f3\u30c0\n0.\u5b9f\u88c5\u30b3\u30fc\u30c9\n1.\u3084\u3063\u3066\u307f\u308b\n2.\u307e\u3068\u3081\n3.\u53c2\u8003\u6587\u732e\n\n0.\u5b9f\u88c5\u30b3\u30fc\u30c9\n\u4ee5\u4e0b1\u3064\u306epython\u30b3\u30fc\u30c9\u306e\u307f\u4f7f\u7528\u3002\n\u524d\u56de\u3068\u6bd4\u3079\u3066\u975e\u5e38\u306b\u30b3\u30fc\u30c9\u91cf\u304c\u5c11\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u3002\n\nmlp.py\n#!/usr/bin/env python\n#coding:utf-8\nimport os\nimport gzip, pickle\nimport pylab\nimport numpy as np\nfrom chainer import Variable, FunctionSet, optimizers\nimport chainer.functions as F\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9\ndef train_data_read(file_path):\n        # \u5b66\u7fd2\u30c7\u30fc\u30bf(MNIST\u306e\u624b\u66f8\u304d\u6587\u5b57)\u306e\u30ed\u30fc\u30c9\n        f = gzip.open(file_path, 'rb')\n        train, valid, test = pickle.load(f)\n        f.close()\n\n        return (train[0], train[1], train[0].shape[0])\n\n# \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3)\u306e\u51e6\u7406\ndef forward(x_data, y_data, train=True):\n    x = Variable(x_data)\n    t = Variable(y_data)\n\n    # \u6d3b\u6027\u5316\u95a2\u6570\u306b\u6b63\u898f\u5316\u7dda\u5f62\u95a2\u6570(ReLU)\u3092\u4f7f\u7528\n    # \u6c4e\u5316\u6027\u80fd\u5411\u4e0a\u306e\u305f\u3081\u306b\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3092\u4f7f\u7528\n    h1 = F.dropout(F.relu(model.l1(x)),  train=train)\n    h2 = F.dropout(F.relu(model.l2(h1)), train=train)\n    y = model.l3(h2)\n\n    # \u8aa4\u5dee\u95a2\u6570\u306b\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u3092\u4f7f\u7528\n    return F.softmax_cross_entropy(y, t)\n\n# \u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\ndef predict(x_test):\n    x = Variable(x_test)\n\n    # \u6d3b\u6027\u5316\u95a2\u6570\u306b\u6b63\u898f\u5316\u7dda\u5f62\u95a2\u6570(ReLU)\u3092\u4f7f\u7528\n    # \u6c4e\u5316\u6027\u80fd\u5411\u4e0a\u306e\u305f\u3081\u306b\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3092\u4f7f\u7528\n    h1 = F.dropout(F.relu(model.l1(x)))\n    h2 = F.dropout(F.relu(model.l2(h1)))\n    y = model.l3(h2)\n\n    return np.argmax(y.data)\n\nif __name__ == \"__main__\":\n    # \u8b58\u5225\u5bfe\u8c61\u306eCAPTCHA\u753b\u50cf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u5b9a\u7fa9\n    captcha_path = 'C:\\MNIST\\captcha\\captcha0'\n\n    # \u8a13\u7df4\u7528\u30c7\u30fc\u30bf(MNIST)\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u5b9a\u7fa9\n    train_data_path = os.path.join('C:\\\\MNIST', 'mnist.pkl.gz')\n\n    # \u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u5b9a\u7fa9(\u7d50\u679c\u8868\u793a\u7528)\n    answerLabel = [0, 1, 4, 6, 7, 9]\n\n    # \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf(CAPTCHA\u753b\u50cf)\u306e\u53d6\u5f97\n    # \u753b\u50cf\u30c7\u30fc\u30bf\u3092784\u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\n    # RGB\u6bce\u306e\u914d\u5217\u304b\u3089R\u8981\u7d20\u306e\u307f\u3092\u62bd\u51fa(\u6b21\u5143\u524a\u6e1b)\n    img_captcha = []\n    analize_data = []\n    captcha_files = os.listdir(captcha_path)\n    for file in captcha_files:\n        img_captcha = pylab.imread(os.path.join(captcha_path,file))\n        img_captcha_r = img_captcha[:, :, 0]\n        #img_captcha_r = img_captcha[:, :]\n        img_captcha_Array = np.asarray(img_captcha_r)\n        d_captcha = img_captcha_Array.shape[0] * img_captcha_Array.shape[1]\n        img_captcha_wide = img_captcha_Array.reshape(1, d_captcha)\n        analize_data.append(img_captcha_wide)\n\n    # \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\n    x_train, y_train, length = train_data_read(train_data_path)\n    x_train = x_train.astype(np.float32)\n    y_train = y_train.astype(np.int32)\n\n    # \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u69cb\u7bc9\n    # \u5165\u529b\u5c64\uff1d784(28*28)\u3001\u4e2d\u9593\u5c64\uff1d300\u3001\u51fa\u529b\u5c64\uff1d10(0\uff5e9)\n    model = FunctionSet(l1=F.Linear(784, 300),\n                        l2=F.Linear(300, 300),\n                        l3=F.Linear(300, 10))\n\n    # \u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5(SGD)\u3067\u5b66\u7fd2\u3059\u308b\u969b\u306e\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\n    # 10\uff5e100\u7a0b\u5ea6\u3068\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u304c\u3001\u6700\u3082\u7d50\u679c\u304c\u826f\u304b\u3063\u305f100\u3068\u3057\u305f\u3002\n    batchsize = 100\n\n    # \u5b66\u7fd2\u306e\u7e70\u308a\u8fd4\u3057\u56de\u6570\n    # 5\u56de\u306e\u5b66\u7fd2\u3067\u7cbe\u5ea6\u304c95%\u3092\u8d85\u3048\u305f\u305f\u3081\u30015\u56de\u3068\u3057\u305f\u3002\n    learning_loop = 5\n\n    # SGD\u306e\u8a2d\u5b9a\n    optimizer = optimizers.Adam()\n    optimizer.setup(model.collect_parameters())\n\n    # \u5b66\u7fd2\n    N = 50000\n    for epoch in range(1, learning_loop+1):\n\n        # \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u9806\u756a\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u3059\u308b\n        perm = np.random.permutation(N)\n\n        # 0\u301cN\u307e\u3067\u306e\u30c7\u30fc\u30bf\u3092\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u306b\u533a\u5207\u3063\u3066\u5b66\u7fd2\u3059\u308b\n        for i in range(0, N, batchsize):\n            x_batch = x_train[perm[i:i+batchsize]]\n            y_batch = y_train[perm[i:i+batchsize]]\n\n            # \u91cd\u307f\u306e\u521d\u671f\u5316\n            optimizer.zero_grads()\n\n            # \u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u3055\u305b\u3066\u8aa4\u5dee\u3092\u7b97\u51fa\n            error = forward(x_batch, y_batch)\n\n            # \u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3067\u52fe\u914d\u3092\u7b97\u51fa\n            error.backward()\n\n            # \u91cd\u307f\u3092\u66f4\u65b0\n            optimizer.update()\n\n    # CAPTCHA\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\n    ok = 0\n    for i in range(len(analize_data)):\n        # \u8a8d\u8b58\u5bfe\u8c61\u30c7\u30fc\u30bf\u30921\u500b\u305a\u3064\u8aad\u307f\u8fbc\u3080\n        x = analize_data[i].astype(np.float32)\n\n        # \u8a8d\u8b58\u5bfe\u8c61\u306e\u6b63\u89e3\u30c7\u30fc\u30bf\u30921\u500b\u305a\u3064\u8aad\u307f\u8fbc\u3080\n        y = answerLabel[i]\n\n        # CAPTCHA\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\n        answer = predict(x)\n\n        # \u4e88\u6e2c\u5024\u3068\u6b63\u89e3\u30c7\u30fc\u30bf\u3092\u6a19\u6e96\u51fa\u529b\u3059\u308b\n        print(\"No.{0:d} : predict => {1:d} , answer = > {2:d}\".format(i, answer, int(y)))\n\n        # \u4e88\u6e2c\u5024\u3068\u6b63\u89e3\u30c7\u30fc\u30bf\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u5834\u5408\u3001ok(\u6b63\u89e3)\u30921\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\n        if int(y) == answer:\n            ok += 1\n\n    # ok(\u6b63\u89e3)\u306e\u6570\u3068\u8a8d\u8b58\u5bfe\u8c61\u30c7\u30fc\u30bf\u6570\u3092\u57fa\u306b\u6b63\u89e3\u7387\u3092\u6a19\u6e96\u51fa\u529b\u3059\u308b\n    print(\"{0:05d} / {1:05d} = {2:3.2f}%\".format(ok, len(analize_data), 100*ok/len(analize_data)))\n\n\n\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u3084\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3001\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5(SGD)\u3084\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u306a\u3069\u306e\u30c6\u30af\u30cb\u30c3\u30af\u304c\u975e\u5e38\u306b\u7c21\u6613\u306a\u30b3\u30fc\u30c9\u3067\u5b9f\u73fe\u3067\u304d\u308b\u3002\n\u306a\u3093\u3066\u7d20\u6674\u3089\u3057\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3093\u3060\uff01\n\n1.\u3084\u3063\u3066\u307f\u308b\n\u65e9\u901f\u3053\u308c\u3092\u4f7f\u3063\u3066CAPTCHA\u306e\u8a8d\u8b58\u3092\u884c\u3063\u3066\u307f\u308b\u3002\n\u5148\u305a\u306f1\u756a\u76ee\u306e\u3053\u308c\u304b\u3089\u3002\n\n\n1\u756a\u76ee\u306e\u4e88\u6e2c\u7d50\u679c\nNo.0 : predict => 0 , answer = > 0\nNo.1 : predict => 1 , answer = > 1\nNo.2 : predict => 4 , answer = > 4\nNo.3 : predict => 6 , answer = > 6\nNo.4 : predict => 7 , answer = > 7\nNo.5 : predict => 9 , answer = > 9\n00006 / 00006 = 100.00%\n\n\n\u6b63\u89e3\u7387\u306f100%\u3002\n\u3053\u308c\u306f\u524d\u56de\u3068\u5909\u308f\u308a\u306a\u3044\u3002\n\u6b21\u306f2\u756a\u76ee\u306e\u3053\u308c\u3060\u3002\n\n\n2\u756a\u76ee\u306e\u4e88\u6e2c\u7d50\u679c\nNo.0 : predict => 0 , answer = > 0\nNo.1 : predict => 1 , answer = > 1\nNo.2 : predict => 6 , answer = > 4\nNo.3 : predict => 8 , answer = > 6\nNo.4 : predict => 8 , answer = > 7\nNo.5 : predict => 9 , answer = > 9\n00003 / 00006 = 50.00%\n\n\n\u6b63\u89e3\u7387\u306f50%\u3002\n\u524d\u56de\u306f33.33%\u3060\u3063\u305f\u306e\u3067\u3001\u6539\u5584\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\n2.\u307e\u3068\u3081\nChainer\u3092\u4f7f\u7528\u3057\u3066\u6570\u5b57\u753b\u50cf\u306e\u8a8d\u8b58\u3092\u3084\u3063\u3066\u307f\u305f\u3002\n\u524d\u56de\u3088\u308a\u6b63\u89e3\u7387\u304c\u6539\u5584\u3055\u308c\u3066\u3044\u308b\u3002\n\u5b66\u7fd2\u56de\u6570\u3092\u5897\u3084\u305b\u3070\u66f4\u306b\u6b63\u89e3\u7387\u306f\u4e0a\u304c\u308b\u3068\u601d\u308f\u308c\u308b\u304c\u3001\u524d\u56de\u3082\u66f8\u3044\u305f\u3088\u3046\u306b\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5de5\u592b\u3057\u306a\u3044\u3053\u3068\u306b\u306f\u6839\u672c\u89e3\u6c7a\u306b\u306f\u306a\u3089\u306a\u3044\u3002\n\u3080\u3057\u308d\u4eca\u56de\u306e\u691c\u8a3c\u3067\u7279\u7b46\u3059\u3079\u304d\u306f\u3001\u975e\u5e38\u306b\u7c21\u6613\u306a\u30b3\u30fc\u30c9\u3067\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u304c\u5b9f\u88c5\u3067\u304d\u3001\u3057\u304b\u3082\u6b63\u89e3\u7387\u304c\u6539\u5584\u3067\u304d\u305f\u3053\u3068\u3060\u308d\u3046\u3002\n\u4eca\u5f8c\u3001Chainer\u3084Deap\u3092\u4f7f\u7528\u3057\u3066Neuroevolution\u3092\u5b9f\u88c5\u3057\u3001Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u81ea\u52d5\u30af\u30ed\u30fc\u30e9\u30fc\u306e\u958b\u767a\u3092\u8a66\u307f\u308b\u3002\n\n3.\u53c2\u8003\u6587\u732e\n\n\u6df1\u5c64\u5b66\u7fd2\n\u3010\u6a5f\u68b0\u5b66\u7fd2\u3011\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0 \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afChainer\u3092\u8a66\u3057\u306a\u304c\u3089\u89e3\u8aac\u3057\u3066\u307f\u308b\u3002\nChainer Official Document\n\n\u4ee5\u4e0a\n[\u524d\u56de](http://qiita.com/bbr_bbq/items/09e3e2ff5adce99b3f7d)\u306f\u30d5\u30eb\u30b9\u30af\u30e9\u30c3\u30c1\u3067\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3092\u5b9f\u88c5\u3057\u3001CAPTCHA\u753b\u50cf\u306e\u8a8d\u8b58\u3092\u8a66\u307f\u305f\u3002\n\u4eca\u56de\u306f\u300c[Chainer](http://chainer.org/)\u300d\u3092\u4f7f\u3063\u3066\u540c\u3058\u3053\u3068\u3092\u3084\u3063\u3066\u307f\u308b\u3002\n\n\u306a\u304a\u3001\u300c[scikit-neuralnetwork](http://scikit-neuralnetwork.readthedocs.org/en/latest/)\u300d\u3067\u3082\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3092\u5b9f\u88c5\u3067\u304d\u308b\u304c\u3001\u3053\u306e\u691c\u8a3c\u306f\u307e\u305f\u306e\u6a5f\u4f1a\u3068\u3059\u308b\u3002\n\n#\u30a2\u30b8\u30a7\u30f3\u30c0\n0.\u5b9f\u88c5\u30b3\u30fc\u30c9\n1.\u3084\u3063\u3066\u307f\u308b\n2.\u307e\u3068\u3081\n3.\u53c2\u8003\u6587\u732e\n\n#0.\u5b9f\u88c5\u30b3\u30fc\u30c9\n\u4ee5\u4e0b1\u3064\u306epython\u30b3\u30fc\u30c9\u306e\u307f\u4f7f\u7528\u3002\n\u524d\u56de\u3068\u6bd4\u3079\u3066\u975e\u5e38\u306b\u30b3\u30fc\u30c9\u91cf\u304c\u5c11\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u3002\n\n```lang:mlp.py\n#!/usr/bin/env python\n#coding:utf-8\nimport os\nimport gzip, pickle\nimport pylab\nimport numpy as np\nfrom chainer import Variable, FunctionSet, optimizers\nimport chainer.functions as F\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9\ndef train_data_read(file_path):\n        # \u5b66\u7fd2\u30c7\u30fc\u30bf(MNIST\u306e\u624b\u66f8\u304d\u6587\u5b57)\u306e\u30ed\u30fc\u30c9\n        f = gzip.open(file_path, 'rb')\n        train, valid, test = pickle.load(f)\n        f.close()\n\n        return (train[0], train[1], train[0].shape[0])\n\n# \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3)\u306e\u51e6\u7406\ndef forward(x_data, y_data, train=True):\n    x = Variable(x_data)\n    t = Variable(y_data)\n\n    # \u6d3b\u6027\u5316\u95a2\u6570\u306b\u6b63\u898f\u5316\u7dda\u5f62\u95a2\u6570(ReLU)\u3092\u4f7f\u7528\n    # \u6c4e\u5316\u6027\u80fd\u5411\u4e0a\u306e\u305f\u3081\u306b\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3092\u4f7f\u7528\n    h1 = F.dropout(F.relu(model.l1(x)),  train=train)\n    h2 = F.dropout(F.relu(model.l2(h1)), train=train)\n    y = model.l3(h2)\n\n    # \u8aa4\u5dee\u95a2\u6570\u306b\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u3092\u4f7f\u7528\n    return F.softmax_cross_entropy(y, t)\n\n# \u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\ndef predict(x_test):\n    x = Variable(x_test)\n\n    # \u6d3b\u6027\u5316\u95a2\u6570\u306b\u6b63\u898f\u5316\u7dda\u5f62\u95a2\u6570(ReLU)\u3092\u4f7f\u7528\n    # \u6c4e\u5316\u6027\u80fd\u5411\u4e0a\u306e\u305f\u3081\u306b\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3092\u4f7f\u7528\n    h1 = F.dropout(F.relu(model.l1(x)))\n    h2 = F.dropout(F.relu(model.l2(h1)))\n    y = model.l3(h2)\n\n    return np.argmax(y.data)\n\nif __name__ == \"__main__\":\n    # \u8b58\u5225\u5bfe\u8c61\u306eCAPTCHA\u753b\u50cf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u5b9a\u7fa9\n    captcha_path = 'C:\\MNIST\\captcha\\captcha0'\n\n    # \u8a13\u7df4\u7528\u30c7\u30fc\u30bf(MNIST)\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u5b9a\u7fa9\n    train_data_path = os.path.join('C:\\\\MNIST', 'mnist.pkl.gz')\n\n    # \u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u5b9a\u7fa9(\u7d50\u679c\u8868\u793a\u7528)\n    answerLabel = [0, 1, 4, 6, 7, 9]\n\n    # \u4e88\u6e2c\u5bfe\u8c61\u30c7\u30fc\u30bf(CAPTCHA\u753b\u50cf)\u306e\u53d6\u5f97\n    # \u753b\u50cf\u30c7\u30fc\u30bf\u3092784\u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\n    # RGB\u6bce\u306e\u914d\u5217\u304b\u3089R\u8981\u7d20\u306e\u307f\u3092\u62bd\u51fa(\u6b21\u5143\u524a\u6e1b)\n    img_captcha = []\n    analize_data = []\n    captcha_files = os.listdir(captcha_path)\n    for file in captcha_files:\n        img_captcha = pylab.imread(os.path.join(captcha_path,file))\n        img_captcha_r = img_captcha[:, :, 0]\n        #img_captcha_r = img_captcha[:, :]\n        img_captcha_Array = np.asarray(img_captcha_r)\n        d_captcha = img_captcha_Array.shape[0] * img_captcha_Array.shape[1]\n        img_captcha_wide = img_captcha_Array.reshape(1, d_captcha)\n        analize_data.append(img_captcha_wide)\n\n    # \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\n    x_train, y_train, length = train_data_read(train_data_path)\n    x_train = x_train.astype(np.float32)\n    y_train = y_train.astype(np.int32)\n\n    # \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u69cb\u7bc9\n    # \u5165\u529b\u5c64\uff1d784(28*28)\u3001\u4e2d\u9593\u5c64\uff1d300\u3001\u51fa\u529b\u5c64\uff1d10(0\uff5e9)\n    model = FunctionSet(l1=F.Linear(784, 300),\n                        l2=F.Linear(300, 300),\n                        l3=F.Linear(300, 10))\n\n    # \u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5(SGD)\u3067\u5b66\u7fd2\u3059\u308b\u969b\u306e\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\n    # 10\uff5e100\u7a0b\u5ea6\u3068\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u304c\u3001\u6700\u3082\u7d50\u679c\u304c\u826f\u304b\u3063\u305f100\u3068\u3057\u305f\u3002\n    batchsize = 100\n\n    # \u5b66\u7fd2\u306e\u7e70\u308a\u8fd4\u3057\u56de\u6570\n    # 5\u56de\u306e\u5b66\u7fd2\u3067\u7cbe\u5ea6\u304c95%\u3092\u8d85\u3048\u305f\u305f\u3081\u30015\u56de\u3068\u3057\u305f\u3002\n    learning_loop = 5\n\n    # SGD\u306e\u8a2d\u5b9a\n    optimizer = optimizers.Adam()\n    optimizer.setup(model.collect_parameters())\n\n    # \u5b66\u7fd2\n    N = 50000\n    for epoch in range(1, learning_loop+1):\n\n        # \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u9806\u756a\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u3059\u308b\n        perm = np.random.permutation(N)\n\n        # 0\u301cN\u307e\u3067\u306e\u30c7\u30fc\u30bf\u3092\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u306b\u533a\u5207\u3063\u3066\u5b66\u7fd2\u3059\u308b\n        for i in range(0, N, batchsize):\n            x_batch = x_train[perm[i:i+batchsize]]\n            y_batch = y_train[perm[i:i+batchsize]]\n\n            # \u91cd\u307f\u306e\u521d\u671f\u5316\n            optimizer.zero_grads()\n\n            # \u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u3055\u305b\u3066\u8aa4\u5dee\u3092\u7b97\u51fa\n            error = forward(x_batch, y_batch)\n\n            # \u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3067\u52fe\u914d\u3092\u7b97\u51fa\n            error.backward()\n\n            # \u91cd\u307f\u3092\u66f4\u65b0\n            optimizer.update()\n\n    # CAPTCHA\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\n    ok = 0\n    for i in range(len(analize_data)):\n        # \u8a8d\u8b58\u5bfe\u8c61\u30c7\u30fc\u30bf\u30921\u500b\u305a\u3064\u8aad\u307f\u8fbc\u3080\n        x = analize_data[i].astype(np.float32)\n\n        # \u8a8d\u8b58\u5bfe\u8c61\u306e\u6b63\u89e3\u30c7\u30fc\u30bf\u30921\u500b\u305a\u3064\u8aad\u307f\u8fbc\u3080\n        y = answerLabel[i]\n\n        # CAPTCHA\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\n        answer = predict(x)\n\n        # \u4e88\u6e2c\u5024\u3068\u6b63\u89e3\u30c7\u30fc\u30bf\u3092\u6a19\u6e96\u51fa\u529b\u3059\u308b\n        print(\"No.{0:d} : predict => {1:d} , answer = > {2:d}\".format(i, answer, int(y)))\n\n        # \u4e88\u6e2c\u5024\u3068\u6b63\u89e3\u30c7\u30fc\u30bf\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u5834\u5408\u3001ok(\u6b63\u89e3)\u30921\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\n        if int(y) == answer:\n            ok += 1\n\n    # ok(\u6b63\u89e3)\u306e\u6570\u3068\u8a8d\u8b58\u5bfe\u8c61\u30c7\u30fc\u30bf\u6570\u3092\u57fa\u306b\u6b63\u89e3\u7387\u3092\u6a19\u6e96\u51fa\u529b\u3059\u308b\n    print(\"{0:05d} / {1:05d} = {2:3.2f}%\".format(ok, len(analize_data), 100*ok/len(analize_data)))\n```\n\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u3084\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u3001\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5(SGD)\u3084\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u306a\u3069\u306e\u30c6\u30af\u30cb\u30c3\u30af\u304c\u975e\u5e38\u306b\u7c21\u6613\u306a\u30b3\u30fc\u30c9\u3067\u5b9f\u73fe\u3067\u304d\u308b\u3002\n\n\u306a\u3093\u3066\u7d20\u6674\u3089\u3057\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3093\u3060\uff01\n\n#1.\u3084\u3063\u3066\u307f\u308b\n\u65e9\u901f\u3053\u308c\u3092\u4f7f\u3063\u3066CAPTCHA\u306e\u8a8d\u8b58\u3092\u884c\u3063\u3066\u307f\u308b\u3002\n\n\u5148\u305a\u306f1\u756a\u76ee\u306e\u3053\u308c\u304b\u3089\u3002\n![captcha0_neg.png](https://qiita-image-store.s3.amazonaws.com/0/76953/8c1b73dd-28b9-5e20-fc6c-8a09b2d561c5.png)\n\n```lang:1\u756a\u76ee\u306e\u4e88\u6e2c\u7d50\u679c\nNo.0 : predict => 0 , answer = > 0\nNo.1 : predict => 1 , answer = > 1\nNo.2 : predict => 4 , answer = > 4\nNo.3 : predict => 6 , answer = > 6\nNo.4 : predict => 7 , answer = > 7\nNo.5 : predict => 9 , answer = > 9\n00006 / 00006 = 100.00%\n```\n\u6b63\u89e3\u7387\u306f100%\u3002\n\u3053\u308c\u306f\u524d\u56de\u3068\u5909\u308f\u308a\u306a\u3044\u3002\n\n\u6b21\u306f2\u756a\u76ee\u306e\u3053\u308c\u3060\u3002\n![captcha1_neg.png](https://qiita-image-store.s3.amazonaws.com/0/76953/deca717f-5da8-ee6f-388f-14805075d6e8.png)\n\n```lang:2\u756a\u76ee\u306e\u4e88\u6e2c\u7d50\u679c\nNo.0 : predict => 0 , answer = > 0\nNo.1 : predict => 1 , answer = > 1\nNo.2 : predict => 6 , answer = > 4\nNo.3 : predict => 8 , answer = > 6\nNo.4 : predict => 8 , answer = > 7\nNo.5 : predict => 9 , answer = > 9\n00003 / 00006 = 50.00%\n```\n\u6b63\u89e3\u7387\u306f50%\u3002\n\u524d\u56de\u306f33.33%\u3060\u3063\u305f\u306e\u3067\u3001\u6539\u5584\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\n#2.\u307e\u3068\u3081\nChainer\u3092\u4f7f\u7528\u3057\u3066\u6570\u5b57\u753b\u50cf\u306e\u8a8d\u8b58\u3092\u3084\u3063\u3066\u307f\u305f\u3002\n\u524d\u56de\u3088\u308a\u6b63\u89e3\u7387\u304c\u6539\u5584\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u5b66\u7fd2\u56de\u6570\u3092\u5897\u3084\u305b\u3070\u66f4\u306b\u6b63\u89e3\u7387\u306f\u4e0a\u304c\u308b\u3068\u601d\u308f\u308c\u308b\u304c\u3001\u524d\u56de\u3082\u66f8\u3044\u305f\u3088\u3046\u306b\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5de5\u592b\u3057\u306a\u3044\u3053\u3068\u306b\u306f\u6839\u672c\u89e3\u6c7a\u306b\u306f\u306a\u3089\u306a\u3044\u3002\n\n\u3080\u3057\u308d\u4eca\u56de\u306e\u691c\u8a3c\u3067\u7279\u7b46\u3059\u3079\u304d\u306f\u3001\u975e\u5e38\u306b\u7c21\u6613\u306a\u30b3\u30fc\u30c9\u3067\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u304c\u5b9f\u88c5\u3067\u304d\u3001\u3057\u304b\u3082\u6b63\u89e3\u7387\u304c\u6539\u5584\u3067\u304d\u305f\u3053\u3068\u3060\u308d\u3046\u3002\n\n\u4eca\u5f8c\u3001Chainer\u3084Deap\u3092\u4f7f\u7528\u3057\u3066[Neuroevolution](https://ja.wikipedia.org/wiki/Neuroevolution)\u3092\u5b9f\u88c5\u3057\u3001Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u81ea\u52d5\u30af\u30ed\u30fc\u30e9\u30fc\u306e\u958b\u767a\u3092\u8a66\u307f\u308b\u3002\n\n#3.\u53c2\u8003\u6587\u732e\n1. [\u6df1\u5c64\u5b66\u7fd2](http://bookclub.kodansha.co.jp/product?isbn=9784061529021)\n2. [\u3010\u6a5f\u68b0\u5b66\u7fd2\u3011\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0 \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afChainer\u3092\u8a66\u3057\u306a\u304c\u3089\u89e3\u8aac\u3057\u3066\u307f\u308b\u3002](http://qiita.com/kenmatsu4/items/7b8d24d4c5144a686412)\n3. [Chainer Official Document](http://docs.chainer.org/en/latest/)\n\n\u4ee5\u4e0a\n", "tags": ["\u6a5f\u68b0\u5b66\u7fd2", "\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3", "Python", "\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af", "Chainer"]}