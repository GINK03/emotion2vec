{"tags": ["DirectX11", "DirectXTK"], "context": " More than 1 year has passed since last update.\u898b\u4e8b\u306b\u30cf\u30de\u3063\u305f\u306e\u3067\u30e1\u30e2\n\u8ffd\u3005\u8a18\uff1a\n\u6df1\u5ea6\u30c6\u30b9\u30c8\u95a2\u4fc2\u306a\u3057\u306b\u3001\u56f3\u5f62\u4f5c\u6210\u6642\u306b\u3082\u5de6\u624b\u5ea7\u6a19\u7cfb\u3067\u3042\u308b\u6307\u5b9a\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f.\n\u8ffd\u8a18:\n\u3057\u307e\u3063\u305f. \u30e9\u30a4\u30bb\u30f3\u30b9\u660e\u8a18\u3059\u308b\u306e\u5fd8\u308c\u3066\u3044\u305f.\n\u3053\u306e\u8a18\u4e8b\u306b\u63b2\u8f09\u3057\u3066\u3044\u308b\u30b3\u30fc\u30c9\u304a\u3088\u3073\u5b9f\u884c\u7d50\u679c\u306b\u95a2\u3057\u3066\nDXTK\u306b\u306fMS-PL\u3001\n\u30d5\u30a9\u30f3\u30c8\u306b\u306fIPA\u30d5\u30a9\u30f3\u30c8\u30e9\u30a4\u30bb\u30f3\u30b9v1.0\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059.\n\nDirectX Tool Kit \u3068\u306f\n\nhttp://go.microsoft.com/fwlink/?LinkId=248929\nProject Description\nThe DirectX Tool Kit (aka DirectXTK) is a collection of helper classes for writing DirectX 11.x code in C++.\n\n\u8981\u3059\u308b\u306bDirectX11\u4e16\u4ee3\u306eC++\u7528\u30b2\u30fc\u30e0\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af.\nMS\u516c\u5f0f\u304cD3DX\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u3063\u3066\u306d \u3068\u30a2\u30ca\u30a6\u30f3\u30b9\u3057\u3066\u3044\u307e\u3059.\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/ee663275(v=vs.85).aspx\n\n\u30b5\u30f3\u30d7\u30eb\u66f8\u3044\u3066\u307f\u305f\nDirectXTK\u306e\u30b5\u30f3\u30d7\u30eb\u306bWin32 Simple Sample \u3068\u3084\u3089\u304c\u3042\u308b\u306e\u3067\u3001\u8997\u3044\u3066\u307f\u308b\nhttp://directxtk.codeplex.com/wikipage?title=Samples&referringTitle=Documentation\n\u3063\u3066\u304a\u3044\u3001\u5168\u7136\u30b7\u30f3\u30d7\u30eb\u3058\u3083\u306d\u30fc\u3060\u308d\uff01\n\u307e\u3041\u30b2\u30fc\u30e0\u306e\u3072\u306a\u5f62\u3063\u3066\u3053\u3093\u306a\u3082\u3093\u3060\u3088\u306d\u3001\u3046\u3093(\u00b4\u30fb\u03c9\u30fb\uff40)\n\u3067\u3082\u3001\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067DirectXTK\u306e\u8272\u3005\u306a\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u3044\u308b\u304b\u3068\u601d\u3063\u305f\u3089\u3001\u307b\u3093\u306e\u3061\u3087\u3063\u3068\u3060\u3051\u3057\u304b\u89e6\u3063\u3066\u3044\u306a\u304b\u3063\u305f.\n\u3061\u3087\u3063\u3068\u30ac\u30c3\u30ab\u30ea...\n\u4ed5\u65b9\u304c\u306a\u3044\u306e\u3067\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u898b\u306a\u304c\u3089\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\nsample_scene.cpp\n//--------------------------------------------------------------------------------------\n/// @file    sample_scene.h\n/// @brief   \u30b5\u30f3\u30d7\u30eb\u30b7\u30fc\u30f3.\n//--------------------------------------------------------------------------------------\n#pragma once\n#if !defined(SAMPLE_SCENE_H)\n#define SAMPLE_SCENE_H\n\n#include \"StdAfx.h\"\n#include \"scene/renderable_scene.h\"\n\nnamespace DirectX {\n    class GeometricPrimitive;\n    class SpriteBatch;\n    class SpriteFont;\n}\n\n//--------------------------------------------------\n/// @brief   \u30b5\u30f3\u30d7\u30eb\u30b7\u30fc\u30f3.\n//--------------------------------------------------\nclass sample_scene final : public renderable_scene {\npublic:\n    /// @brief \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf.\n    sample_scene(d3d_device_ptr device, d3d_context_ptr context);\n\n    /// @brief \u30c7\u30b9\u30c8\u30e9\u30af\u30bf.\n    virtual ~sample_scene();\n\n    /// @brief \u521d\u671f\u5316\u51e6\u7406.\n    virtual void initialize() override;\n\n    /// @brief \u7d42\u4e86\u51e6\u7406.\n    virtual void finalize() override;\n\n    /// @brief \u66f4\u65b0\u51e6\u7406.\n    virtual void update() override;\n\n    /// @brief \u63cf\u753b\u51e6\u7406.\n    virtual void render() override;\n\nprivate:\n    std::unique_ptr<DirectX::GeometricPrimitive>    m_tea_pod;\n    std::unique_ptr<DirectX::GeometricPrimitive>    m_torus;\n    std::unique_ptr<DirectX::SpriteBatch>           m_sprite_batch;\n    std::unique_ptr<DirectX::SpriteFont>            m_sprite_font;\n};\n\n#endif // !defined(SAMPLE_SCENE_H)\n\n\n\n\nsample_scene.cpp\n//--------------------------------------------------------------------------------------\n/// @file   base/win32_application.cpp\n/// @brief  \u30b5\u30f3\u30d7\u30eb\u30b7\u30fc\u30f3.\n/// DXTK\u3092\u4f7f\u3063\u3066\u8272\u3005\u63cf\u753b\u3059\u308b.\\n\n/// \u30b7\u30a7\u30fc\u30c0\u306f\u3001DXTK\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u3082\u306e\u3092\u5229\u7528\u3057\u3066\u3044\u308b.\n//--------------------------------------------------------------------------------------\n#include \"StdAfx.h\"\n#include \"scene/sample/sample_scene.h\"\n\n//--------------------------------------------------\nnamespace {\n    using namespace DirectX;\n    using namespace DirectX::SimpleMath;\n\n    // ---------------\n    // \u884c\u5217\u8a08\u7b97(\u9762\u5012\u306a\u306e\u3067\u56fa\u5b9a\u5024).\n    // ---------------\n\n    // \u30b7\u30a7\u30a4\u30d7\u306e\u4f4d\u7f6e.\n    //   \u30c6\u30a3\u30fc\u30dd\u30c3\u30c9\uff1a \u53f3\u3092\u5411\u304b\u305b\u3066\u3001\u5de6\u5074\u624b\u524d\u306b.\n    //   \u30c8\u30fc\u30e9\u30b9    \uff1a Y\u8ef8/Z\u8ef8\u5468\u308a\u306b45\u00b0\u3060\u3051\u56de\u8ee2\u3057\u3001\u53f3\u5965\u306e\u65b9\u5411\u306b.\n    const Matrix teapod_matrix =\n        Matrix::CreateWorld(Vector3(-1.0F, 0.0F, -1.0F), Vector3(1.0F, 0.0F, 0.0F), Vector3(0.0F, 1.0F, 0.0F));\n\n    const Matrix torus_matrix =\n        Matrix::CreateFromYawPitchRoll(0.0F, XM_PIDIV4, XM_PIDIV4) *\n        Matrix::CreateTranslation(1.0F, 0.0F, 1.0F);\n\n    // \u30d3\u30e5\u30fc\u884c\u5217(\u30ab\u30e1\u30e9\u306e\u5236\u5fa1).\n    // NOTE: \u203b\u6ce8\u610f1\n    const Vector3   eye     = Vector3(0.0F, 3.0F, -6.0F);\n    const Vector3   target  = Vector3(0.0F, 0.0F, 0.0F);\n    const Vector3   up      = Vector3(0.0F, 1.0F, 0.0F);\n    const Matrix    view    = Matrix::CreateLookAt(eye, target, up);\n\n    // \u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u884c\u5217(\u6295\u5f71\u306e\u5236\u5fa1).\n    // NOTE: \u203b\u6ce8\u610f2\n    const Matrix projection = Matrix::CreatePerspectiveFieldOfView(XM_PIDIV4, 480.0F / 640.0F, 0.01f, 100.0f);\n\n    // ---------------\n    // \u30c6\u30ad\u30b9\u30c8\u63cf\u753b\u7528.\n    // ---------------\n    const wchar_t* font_name = L\"../data/font/ipa_gothic_16.spritefont_test\";\n    const wchar_t* text      = L\"Hello, world!\";\n    const Vector2  text_pos  = Vecotr2(100.0F, 100.0F);\n}\n\n\nsample_scene::sample_scene(d3d_device_ptr device, d3d_context_ptr context)\n    : renderable_scene(device, context)\n    , m_tea_pod()\n    , m_torus()\n    , m_sprite_batch()\n    , m_sprite_font()\n{}\n\n\nsample_scene::~sample_scene() {\n}\n\n\nvoid sample_scene::initialize() {\n    ASSERT(m_d3d_device_context);\n\n    // \u30b7\u30a7\u30a4\u30d7\u306e\u69cb\u7bc9.\n    m_tea_pod = GeometricPrimitive::CreateTeapot(m_d3d_device_context.Get());\n    m_torus   = GeometricPrimitive::CreateTorus(m_d3d_device_context.Get());\n\n    // \u30d5\u30a9\u30f3\u30c8\u306e\u69cb\u7bc9.\n    m_sprite_batch = std::make_unique<SpriteBatch>(m_d3d_device_context.Get());\n    m_sprite_font  = std::make_unique<SpriteFont>(m_d3d_device.Get(), font_name);\n}\n\n\nvoid sample_scene::finalize() {\n    m_tea_pod.reset();\n    m_torus.reset();\n    m_sprite_batch.reset();\n    m_sprite_font.reset();\n}\n\n\nvoid sample_scene::update() {\n    // FIXME: \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306e\u5236\u5fa1\u304c\u5fc5\u8981.\n}\n\n\nvoid sample_scene::render() {\n\n    // \u30b7\u30a7\u30a4\u30d7\u306e\u63cf\u753b.\n    m_tea_pod->Draw(teapod_matrix, view, projection, Colors::Goldenrod);\n    m_torus->Draw(torus_matrix, view, projection, Colors::Gray, nullptr, true);\n\n    // \u30b9\u30d7\u30e9\u30a4\u30c8\u30fb\u30d5\u30a9\u30f3\u30c8\u306e\u63cf\u753b.\n    m_sprite_batch->Begin();\n    m_sprite_font->DrawString(\n        m_sprite_batch.get(), text, text_pos, Colors::Black);\n    m_sprite_batch->End();\n}\n\n\n\n\n\u524d\u63d0\uff1aDirectX\u306e\u521d\u671f\u5316\u3084\u3001Window\u4f5c\u308b\u904e\u7a0b\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u30eb\u30fc\u30d7\u306a\u3069\u306f\u81ea\u5206\u3067\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044.\n\u8272\u3005\u7c97\u304c\u76ee\u7acb\u3061\u307e\u3059\u304c\u3001DXTK\u306e\u4f7f\u3044\u65b9\u3068\u3044\u3046\u89b3\u70b9\u3067\u306f\u672c\u7b4b\u3067\u306f\u306a\u3044\u306e\u3067\u30ac\u30f3\u7121\u8996.\nd3d_device_ptr \u3084 d3d_context_ptr \u306f\u3001Microsoft::WRL::ComPtr \u306e\u5225\u540d.\n\n\n\u74b0\u5883\u3084\u304a\u597d\u307f\u306b\u5408\u308f\u305b\u3066\u3001\u8aad\u307f\u66ff\u3048\u3066\u304f\u3060\u3055\u3044.\n\n\n\u30d5\u30a9\u30f3\u30c8\u306f\u3001\u524d\u3082\u3063\u3066\u3001\u30b9\u30d7\u30e9\u30a4\u30c8\u30d5\u30a9\u30f3\u30c8\u5f62\u5f0f\u306b\u30b3\u30f3\u30d0\u30fc\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059.\n\n\u3067\u3001\u3053\u308c\u3067\u5b9f\u884c\u3057\u3066\u307f\u305f\u7d50\u679c\u304c\u3053\u3061\u3089.\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u30bf\u30a4\u30c8\u30eb\u56de\u53ce.\n\u4f55\u3082\u8003\u3048\u305a\u5de6\u624b\u5ea7\u6a19\u3092\u60f3\u5b9a\u3057\u305f\u5411\u304d\u3067\u66f8\u3044\u3066\u307f\u305f\u3089\u3001\n\u30ab\u30e1\u30e9\u304cZ\u8ef8\u3067\u6b63\u53cd\u5bfe\u306e\u4f4d\u7f6e\u306b\u306a\u308a\u3001\n(\u53f3\u624b\u5ea7\u6a19\u7cfb\u3092\u3001180\u5ea6Y\u8ef8\u56de\u8ee2\u3057\u305f\u72b6\u614b\u3068\u306a\u308a)\n\u7d50\u679cX\u8ef8\u304c\u9006\u65b9\u5411\u306b...\n\n\u305d\u3082\u305d\u3082\u306a\u3093\u3067\u53f3\u624b\u5ea7\u6a19\u7cfb\uff1f\n\u3061\u3083\u3093\u3068\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3057\u305f.\n\u5c11\u3057\u9577\u3081\u306e\u5f15\u7528\u3067\u3059.\nhttp://directxtk.codeplex.com/wikipage?title=SimpleMath&referringTitle=DirectXTK\n\nCoordinate Systems\nBecause SimpleMath Is intended to look a lot like like XNA Game Studio's math library, it uses right-handed coordinates by convention for the following Matrix methods:\n\nCreatePerspectiveFieldOfView\nCreatePerspective\nCreatePerspectiveOffCenter\nCreateOrthographic\nCreateOrthographicOffCenter\nCreateLookAt\n\nIf you want to use left-handed coordinates, use the DirectXMath methods directly. For example\n// Here's a RH example\nVector3 eye, target, up;\n...\nMatrix mView = Matrix::CreateLookAt( eye, target, up );\n\n// Here' is a LH example of same thing which relies on\n// Vector3 and Matrix conversion operators\nVector3 eye, target, up;\n...\nMatrix mView = XMMatrixLookAtLH( eye, target, up ); \n\nWith the methods Matrix::CreateBillboard and Matrix::CreateConstrainedBillboard the handedness is inherent in the default vectors for cameraForward, and objectForward which are right-handed. You can make them behave left-handed by providing appropriate vectors.\nVector3 objectPosition, cameraPosition, rotateAxis;\n\nMatrix mView = Matrix::CreateBillboard( objectPosition, cameraPosition, Vector3::Up, Vector3::Backward );\n\nMatrix mView = Matrix::CreateConstrainedBillboard( objectPosition, cameraPosition, rotateAxis, Vector3::Backward, Vector3::Backward );\n\n\n\u8981\u3059\u308b\u306b\u3001 DirectXTK\u306e\u6570\u5b66\u95a2\u6570\u306f\u3001XNA\u98a8(\u53f3\u624b\u5ea7\u6a19\u7cfb)\u306b\u4f7f\u3048\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u305f\u305f\u3081\u3001\n\u30c7\u30d5\u30a9\u30eb\u30c8\u304c\u53f3\u624b\u5ea7\u6a19\u7cfb\u306b\u306a\u3063\u3066\u3044\u308b\u3068.\n\u306a\u306e\u3067\u5de6\u624b\u5ea7\u6a19\u7cfb\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u3001XMMatrix\uff5e\u306a\u308a\u3001\u300c\u524d\u65b9\u300d\u306e\u5411\u304d\u3092\u300c\u5f8c\u65b9\u300d\u306b\u5909\u3048\u308d\u3068\u306e\u3053\u3068.\n\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3042\u304f\u307e\u3067DirectX\u4e0a\u3067\u52d5\u304f\u3082\u306e\u3060\u3057\u3001\n\u5de6\u624b\u5ea7\u6a19\u7cfb\u4f7f\u3048\u305f\u65b9\u304c\u81ea\u7136\u304b\u306a\u3041\u3001\u3068\u8003\u3048\u3001\u30b5\u30f3\u30d7\u30eb\u3082\u4fee\u6b63.\n\nsample_scene.cpp\n// ...\n\n    // \u30d3\u30e5\u30fc\u884c\u5217(\u30ab\u30e1\u30e9\u306e\u5236\u5fa1).\n    //   SimpleMath::Matrix::CreateLookAt() \u306f\u53f3\u624b\u5ea7\u6a19\u7cfb\u306e\u305f\u3081\u3001\u6ce8\u610f.\n    const Vector3   eye     = Vector3(0.0F, 3.0F, -6.0F);\n    const Vector3   target  = Vector3(0.0F, 0.0F, 0.0F);\n    const Vector3   up      = Vector3(0.0F, 1.0F, 0.0F);\n    const Matrix    view    = XMMatrixLookAtLH(eye, target, up);\n\n    // \u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u884c\u5217(\u6295\u5f71\u306e\u5236\u5fa1).\n    //   SimpleMath::Matrix::CreatePerspectiveFieldOfView() \u306f\u53f3\u624b\u5ea7\u6a19\u7cfb\u306e\u305f\u3081\u3001\u6ce8\u610f.\n    const Matrix projection = XMMatrixPerspectiveFovLH(XM_PIDIV4, 480.0F / 640.0F, 0.01f, 100.0f);\n\n// ...\n\nvoid sample_scene::initialize() {\n    ASSERT(m_d3d_device_context);\n\n    // \u30b7\u30a7\u30a4\u30d7\u306e\u69cb\u7bc9.\n    m_tea_pod = GeometricPrimitive::CreateTeapot(m_d3d_device_context.Get(), 1.0F, 8, false);\n    m_torus   = GeometricPrimitive::CreateTorus(m_d3d_device_context.Get(), 1.0F, 0.3F, 32, false);\n// ...\n\n\n\n\n\u7121\u4e8b\u3001\u610f\u56f3\u3057\u305f\u65b9\u5411\u3092\u5411\u3044\u3066\u304f\u308c\u308b\u3088\u3046\u306b.\n\u305f\u3060\u3057\u3001\u6df1\u5ea6\u30c6\u30b9\u30c8\u304c\u3046\u307e\u304f\u52d5\u4f5c\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u3001\u4fee\u6b63\u304c\u5fc5\u8981\u305d\u3046\u3067\u3059\u306d.\n\u6df1\u5ea6\u30c6\u30b9\u30c8\u304c\u304a\u304b\u3057\u3044\u554f\u984c\u306f\u3001\u57fa\u672c\u56f3\u5f62\u4f5c\u6210\u6642\u306b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u53f3\u624b\u5ea7\u6a19\u7cfb\u3092\u7121\u52b9\u306b\u3057\u307e\u3057\u305f.\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u9060\u3059\u304e\u3066\u3081\u3093\u3069\u304f\u305b\u3047.\n\u3068\u3044\u3046\u304a\u8a71\u3067\u3057\u305f.\n\n\u307e\u3068\u3081\nDirectXTK\u306f\u601d\u3063\u305f\u4ee5\u4e0a\u306b\u7c21\u5358\u306a\u306e\u3067\u3001\nDirectX9.0c\u304b\u3089\u672a\u3060\u79fb\u884c\u3067\u304d\u306a\u3044\u4eba\u3082\u3001\u4e57\u308a\u63db\u3048\u3066\u307f\u308b\u306b\u306f\u3044\u3044\u304b\u3082.\n\n\u203b\u305f\u3060\u3057\n\n\nDirectX\u3067\u52d5\u304b\u3059\u524d\u63d0\u306a\u306e\u306b\u3001XNA\u306e\u7f6e\u304d\u63db\u3048\u3092\u72d9\u3063\u3066\u3044\u308b\u305f\u3081\u304b\u3001\u6240\u3005\u3081\u3093\u3069\u304f\u3055\u304f\u611f\u3058\u308b\n\n\n\u8ae6\u3081\u3066\u53f3\u624b\u5ea7\u6a19\u7cfb\u4f7f\u3063\u305f\u307b\u3046\u304c\u697d\u304b\u3082\u3057\u308c\u306d\u3047\n\n\n\u4f8b\u5916\u3092\u3068\u3053\u308d\u304b\u307e\u308f\u305a\u6295\u3052\u3066\u304f\u308b\n\n\n\u3057\u304b\u3082\u3001\u3069\u3053\u3067\u4f8b\u5916\u6295\u3052\u308b\u304b\u5206\u304b\u3089\u3093\n\n\n\u305d\u3082\u305d\u3082API\u4e00\u89a7\u304c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068\u3057\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u306f\u3069\u3046\u3044\u3046\u3053\u3068\u3060\u3088...\n\n\n\n\u306a\u3093\u3066\u4e0d\u6e80\u70b9\u3082\u611f\u3058\u3066\u3044\u308b\u306e\u3067\u3001\u60a9\u307e\u3057\u3044\u3068\u3053\u308d.\n\u82f1\u8a9e\u529b\u9ad8\u3081\u3066\u3001\u516c\u5f0f\u306e Discussion \u306b\u6587\u53e5\u66f8\u304d\u8fbc\u307f\u305f\u3044\u306a\u3041.\n\u898b\u4e8b\u306b\u30cf\u30de\u3063\u305f\u306e\u3067\u30e1\u30e2\n\n\u8ffd\u3005\u8a18\uff1a\n\u6df1\u5ea6\u30c6\u30b9\u30c8\u95a2\u4fc2\u306a\u3057\u306b\u3001\u56f3\u5f62\u4f5c\u6210\u6642\u306b\u3082\u5de6\u624b\u5ea7\u6a19\u7cfb\u3067\u3042\u308b\u6307\u5b9a\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f.\n\n\u8ffd\u8a18:\n\u3057\u307e\u3063\u305f. \u30e9\u30a4\u30bb\u30f3\u30b9\u660e\u8a18\u3059\u308b\u306e\u5fd8\u308c\u3066\u3044\u305f.\n\n\u3053\u306e\u8a18\u4e8b\u306b\u63b2\u8f09\u3057\u3066\u3044\u308b\u30b3\u30fc\u30c9\u304a\u3088\u3073\u5b9f\u884c\u7d50\u679c\u306b\u95a2\u3057\u3066\n[DXTK\u306b\u306fMS-PL](http://directxtk.codeplex.com/license)\u3001\n[\u30d5\u30a9\u30f3\u30c8\u306b\u306fIPA\u30d5\u30a9\u30f3\u30c8\u30e9\u30a4\u30bb\u30f3\u30b9v1.0](http://ipafont.ipa.go.jp/ipa_font_license_v1.html)\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059.\n\n## DirectX Tool Kit \u3068\u306f\n>http://go.microsoft.com/fwlink/?LinkId=248929\n>**Project Description**\n>The DirectX Tool Kit (aka DirectXTK) is a collection of helper classes for writing DirectX 11.x code in C++.\n\n**\u8981\u3059\u308b\u306bDirectX11\u4e16\u4ee3\u306eC++\u7528\u30b2\u30fc\u30e0\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af.**\n\nMS\u516c\u5f0f\u304cD3DX\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u3063\u3066\u306d \u3068\u30a2\u30ca\u30a6\u30f3\u30b9\u3057\u3066\u3044\u307e\u3059.\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/ee663275(v=vs.85).aspx\n\n## \u30b5\u30f3\u30d7\u30eb\u66f8\u3044\u3066\u307f\u305f\nDirectXTK\u306e\u30b5\u30f3\u30d7\u30eb\u306bWin32 Simple Sample \u3068\u3084\u3089\u304c\u3042\u308b\u306e\u3067\u3001\u8997\u3044\u3066\u307f\u308b\nhttp://directxtk.codeplex.com/wikipage?title=Samples&referringTitle=Documentation\n\n~~\u3063\u3066\u304a\u3044\u3001\u5168\u7136\u30b7\u30f3\u30d7\u30eb\u3058\u3083\u306d\u30fc\u3060\u308d\uff01~~\n\u307e\u3041\u30b2\u30fc\u30e0\u306e\u3072\u306a\u5f62\u3063\u3066\u3053\u3093\u306a\u3082\u3093\u3060\u3088\u306d\u3001\u3046\u3093(\u00b4\u30fb\u03c9\u30fb\uff40)\n\n\u3067\u3082\u3001\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067DirectXTK\u306e\u8272\u3005\u306a\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u3044\u308b\u304b\u3068\u601d\u3063\u305f\u3089\u3001\u307b\u3093\u306e\u3061\u3087\u3063\u3068\u3060\u3051\u3057\u304b\u89e6\u3063\u3066\u3044\u306a\u304b\u3063\u305f.\n\u3061\u3087\u3063\u3068\u30ac\u30c3\u30ab\u30ea...\n\n\u4ed5\u65b9\u304c\u306a\u3044\u306e\u3067\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u898b\u306a\u304c\u3089\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n```cpp:sample_scene.cpp\n//--------------------------------------------------------------------------------------\n/// @file    sample_scene.h\n/// @brief   \u30b5\u30f3\u30d7\u30eb\u30b7\u30fc\u30f3.\n//--------------------------------------------------------------------------------------\n#pragma once\n#if !defined(SAMPLE_SCENE_H)\n#define SAMPLE_SCENE_H\n\n#include \"StdAfx.h\"\n#include \"scene/renderable_scene.h\"\n\nnamespace DirectX {\n    class GeometricPrimitive;\n    class SpriteBatch;\n    class SpriteFont;\n}\n\n//--------------------------------------------------\n/// @brief   \u30b5\u30f3\u30d7\u30eb\u30b7\u30fc\u30f3.\n//--------------------------------------------------\nclass sample_scene final : public renderable_scene {\npublic:\n    /// @brief \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf.\n    sample_scene(d3d_device_ptr device, d3d_context_ptr context);\n\n    /// @brief \u30c7\u30b9\u30c8\u30e9\u30af\u30bf.\n    virtual ~sample_scene();\n\n    /// @brief \u521d\u671f\u5316\u51e6\u7406.\n    virtual void initialize() override;\n\n    /// @brief \u7d42\u4e86\u51e6\u7406.\n    virtual void finalize() override;\n\n    /// @brief \u66f4\u65b0\u51e6\u7406.\n    virtual void update() override;\n\n    /// @brief \u63cf\u753b\u51e6\u7406.\n    virtual void render() override;\n\nprivate:\n    std::unique_ptr<DirectX::GeometricPrimitive>    m_tea_pod;\n    std::unique_ptr<DirectX::GeometricPrimitive>    m_torus;\n    std::unique_ptr<DirectX::SpriteBatch>           m_sprite_batch;\n    std::unique_ptr<DirectX::SpriteFont>            m_sprite_font;\n};\n\n#endif // !defined(SAMPLE_SCENE_H)\n\n```\n```cpp:sample_scene.cpp\n//--------------------------------------------------------------------------------------\n/// @file   base/win32_application.cpp\n/// @brief  \u30b5\u30f3\u30d7\u30eb\u30b7\u30fc\u30f3.\n/// DXTK\u3092\u4f7f\u3063\u3066\u8272\u3005\u63cf\u753b\u3059\u308b.\\n\n/// \u30b7\u30a7\u30fc\u30c0\u306f\u3001DXTK\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u3082\u306e\u3092\u5229\u7528\u3057\u3066\u3044\u308b.\n//--------------------------------------------------------------------------------------\n#include \"StdAfx.h\"\n#include \"scene/sample/sample_scene.h\"\n\n//--------------------------------------------------\nnamespace {\n    using namespace DirectX;\n    using namespace DirectX::SimpleMath;\n\n    // ---------------\n    // \u884c\u5217\u8a08\u7b97(\u9762\u5012\u306a\u306e\u3067\u56fa\u5b9a\u5024).\n    // ---------------\n\n    // \u30b7\u30a7\u30a4\u30d7\u306e\u4f4d\u7f6e.\n    //   \u30c6\u30a3\u30fc\u30dd\u30c3\u30c9\uff1a \u53f3\u3092\u5411\u304b\u305b\u3066\u3001\u5de6\u5074\u624b\u524d\u306b.\n    //   \u30c8\u30fc\u30e9\u30b9    \uff1a Y\u8ef8/Z\u8ef8\u5468\u308a\u306b45\u00b0\u3060\u3051\u56de\u8ee2\u3057\u3001\u53f3\u5965\u306e\u65b9\u5411\u306b.\n    const Matrix teapod_matrix =\n        Matrix::CreateWorld(Vector3(-1.0F, 0.0F, -1.0F), Vector3(1.0F, 0.0F, 0.0F), Vector3(0.0F, 1.0F, 0.0F));\n\n    const Matrix torus_matrix =\n        Matrix::CreateFromYawPitchRoll(0.0F, XM_PIDIV4, XM_PIDIV4) *\n        Matrix::CreateTranslation(1.0F, 0.0F, 1.0F);\n\n    // \u30d3\u30e5\u30fc\u884c\u5217(\u30ab\u30e1\u30e9\u306e\u5236\u5fa1).\n    // NOTE: \u203b\u6ce8\u610f1\n    const Vector3   eye     = Vector3(0.0F, 3.0F, -6.0F);\n    const Vector3   target  = Vector3(0.0F, 0.0F, 0.0F);\n    const Vector3   up      = Vector3(0.0F, 1.0F, 0.0F);\n    const Matrix    view    = Matrix::CreateLookAt(eye, target, up);\n\n    // \u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u884c\u5217(\u6295\u5f71\u306e\u5236\u5fa1).\n    // NOTE: \u203b\u6ce8\u610f2\n    const Matrix projection = Matrix::CreatePerspectiveFieldOfView(XM_PIDIV4, 480.0F / 640.0F, 0.01f, 100.0f);\n\n    // ---------------\n    // \u30c6\u30ad\u30b9\u30c8\u63cf\u753b\u7528.\n    // ---------------\n    const wchar_t* font_name = L\"../data/font/ipa_gothic_16.spritefont_test\";\n    const wchar_t* text      = L\"Hello, world!\";\n    const Vector2  text_pos  = Vecotr2(100.0F, 100.0F);\n}\n\n\nsample_scene::sample_scene(d3d_device_ptr device, d3d_context_ptr context)\n    : renderable_scene(device, context)\n    , m_tea_pod()\n    , m_torus()\n    , m_sprite_batch()\n    , m_sprite_font()\n{}\n\n\nsample_scene::~sample_scene() {\n}\n\n\nvoid sample_scene::initialize() {\n    ASSERT(m_d3d_device_context);\n\n    // \u30b7\u30a7\u30a4\u30d7\u306e\u69cb\u7bc9.\n    m_tea_pod = GeometricPrimitive::CreateTeapot(m_d3d_device_context.Get());\n    m_torus   = GeometricPrimitive::CreateTorus(m_d3d_device_context.Get());\n\n    // \u30d5\u30a9\u30f3\u30c8\u306e\u69cb\u7bc9.\n    m_sprite_batch = std::make_unique<SpriteBatch>(m_d3d_device_context.Get());\n    m_sprite_font  = std::make_unique<SpriteFont>(m_d3d_device.Get(), font_name);\n}\n\n\nvoid sample_scene::finalize() {\n    m_tea_pod.reset();\n    m_torus.reset();\n    m_sprite_batch.reset();\n    m_sprite_font.reset();\n}\n\n\nvoid sample_scene::update() {\n    // FIXME: \u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\u306e\u5236\u5fa1\u304c\u5fc5\u8981.\n}\n\n\nvoid sample_scene::render() {\n\n    // \u30b7\u30a7\u30a4\u30d7\u306e\u63cf\u753b.\n    m_tea_pod->Draw(teapod_matrix, view, projection, Colors::Goldenrod);\n    m_torus->Draw(torus_matrix, view, projection, Colors::Gray, nullptr, true);\n\n    // \u30b9\u30d7\u30e9\u30a4\u30c8\u30fb\u30d5\u30a9\u30f3\u30c8\u306e\u63cf\u753b.\n    m_sprite_batch->Begin();\n    m_sprite_font->DrawString(\n        m_sprite_batch.get(), text, text_pos, Colors::Black);\n    m_sprite_batch->End();\n}\n\n```\n* \u524d\u63d0\uff1aDirectX\u306e\u521d\u671f\u5316\u3084\u3001Window\u4f5c\u308b\u904e\u7a0b\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u30eb\u30fc\u30d7\u306a\u3069\u306f\u81ea\u5206\u3067\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044.\n* \u8272\u3005\u7c97\u304c\u76ee\u7acb\u3061\u307e\u3059\u304c\u3001DXTK\u306e\u4f7f\u3044\u65b9\u3068\u3044\u3046\u89b3\u70b9\u3067\u306f\u672c\u7b4b\u3067\u306f\u306a\u3044\u306e\u3067\u30ac\u30f3\u7121\u8996.\n* d3d_device_ptr \u3084 d3d_context_ptr \u306f\u3001Microsoft::WRL::ComPtr<T> \u306e\u5225\u540d.\n    * \u74b0\u5883\u3084\u304a\u597d\u307f\u306b\u5408\u308f\u305b\u3066\u3001\u8aad\u307f\u66ff\u3048\u3066\u304f\u3060\u3055\u3044.\n* \u30d5\u30a9\u30f3\u30c8\u306f\u3001\u524d\u3082\u3063\u3066\u3001\u30b9\u30d7\u30e9\u30a4\u30c8\u30d5\u30a9\u30f3\u30c8\u5f62\u5f0f\u306b\u30b3\u30f3\u30d0\u30fc\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059.\n\n\u3067\u3001\u3053\u308c\u3067\u5b9f\u884c\u3057\u3066\u307f\u305f\u7d50\u679c\u304c\u3053\u3061\u3089.\n![render-rh.png](https://qiita-image-store.s3.amazonaws.com/0/49330/9a3f9d6d-a043-3485-ed26-f8dac20779a7.png)\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u30bf\u30a4\u30c8\u30eb\u56de\u53ce.\n\n\u4f55\u3082\u8003\u3048\u305a\u5de6\u624b\u5ea7\u6a19\u3092\u60f3\u5b9a\u3057\u305f\u5411\u304d\u3067\u66f8\u3044\u3066\u307f\u305f\u3089\u3001\n\u30ab\u30e1\u30e9\u304cZ\u8ef8\u3067\u6b63\u53cd\u5bfe\u306e\u4f4d\u7f6e\u306b\u306a\u308a\u3001\n(\u53f3\u624b\u5ea7\u6a19\u7cfb\u3092\u3001180\u5ea6Y\u8ef8\u56de\u8ee2\u3057\u305f\u72b6\u614b\u3068\u306a\u308a)\n\u7d50\u679cX\u8ef8\u304c\u9006\u65b9\u5411\u306b...\n\n## \u305d\u3082\u305d\u3082\u306a\u3093\u3067\u53f3\u624b\u5ea7\u6a19\u7cfb\uff1f\n\u3061\u3083\u3093\u3068\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3057\u305f.\n\u5c11\u3057\u9577\u3081\u306e\u5f15\u7528\u3067\u3059.\nhttp://directxtk.codeplex.com/wikipage?title=SimpleMath&referringTitle=DirectXTK\n\n>**Coordinate Systems**\n>\n>Because SimpleMath Is intended to look a lot like like XNA Game Studio's math library, it uses right-handed coordinates by convention for the following Matrix methods:\n>\n>* CreatePerspectiveFieldOfView\n>* CreatePerspective\n>* CreatePerspectiveOffCenter\n>* CreateOrthographic\n>* CreateOrthographicOffCenter\n>* CreateLookAt\n>\n>If you want to use left-handed coordinates, use the DirectXMath methods directly. For example\n>\n>```cpp\n>// Here's a RH example\n>Vector3 eye, target, up;\n>...\n>Matrix mView = Matrix::CreateLookAt( eye, target, up );\n>\n>// Here' is a LH example of same thing which relies on\n>// Vector3 and Matrix conversion operators\n>Vector3 eye, target, up;\n>...\n>Matrix mView = XMMatrixLookAtLH( eye, target, up ); \n>```\n>\n>With the methods Matrix::CreateBillboard and Matrix::CreateConstrainedBillboard the handedness is inherent in the default vectors for cameraForward, and objectForward which are right-handed. You can make them behave left-handed by providing appropriate vectors.\n>\n>```cpp\n>Vector3 objectPosition, cameraPosition, rotateAxis;\n>\n>Matrix mView = Matrix::CreateBillboard( objectPosition, cameraPosition, Vector3::Up, Vector3::Backward );\n>\n>Matrix mView = Matrix::CreateConstrainedBillboard( objectPosition, cameraPosition, rotateAxis, Vector3::Backward, Vector3::Backward );\n>```\n\n\u8981\u3059\u308b\u306b\u3001 **DirectXTK\u306e\u6570\u5b66\u95a2\u6570\u306f\u3001XNA\u98a8(\u53f3\u624b\u5ea7\u6a19\u7cfb)\u306b\u4f7f\u3048\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u305f\u305f\u3081\u3001**\n\u30c7\u30d5\u30a9\u30eb\u30c8\u304c\u53f3\u624b\u5ea7\u6a19\u7cfb\u306b\u306a\u3063\u3066\u3044\u308b\u3068.\n\u306a\u306e\u3067\u5de6\u624b\u5ea7\u6a19\u7cfb\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u3001XMMatrix\uff5e\u306a\u308a\u3001\u300c\u524d\u65b9\u300d\u306e\u5411\u304d\u3092\u300c\u5f8c\u65b9\u300d\u306b\u5909\u3048\u308d\u3068\u306e\u3053\u3068.\n\n\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3042\u304f\u307e\u3067DirectX\u4e0a\u3067\u52d5\u304f\u3082\u306e\u3060\u3057\u3001\n\u5de6\u624b\u5ea7\u6a19\u7cfb\u4f7f\u3048\u305f\u65b9\u304c\u81ea\u7136\u304b\u306a\u3041\u3001\u3068\u8003\u3048\u3001\u30b5\u30f3\u30d7\u30eb\u3082\u4fee\u6b63.\n\n```cpp:sample_scene.cpp\n// ...\n\n    // \u30d3\u30e5\u30fc\u884c\u5217(\u30ab\u30e1\u30e9\u306e\u5236\u5fa1).\n    //   SimpleMath::Matrix::CreateLookAt() \u306f\u53f3\u624b\u5ea7\u6a19\u7cfb\u306e\u305f\u3081\u3001\u6ce8\u610f.\n    const Vector3   eye     = Vector3(0.0F, 3.0F, -6.0F);\n    const Vector3   target  = Vector3(0.0F, 0.0F, 0.0F);\n    const Vector3   up      = Vector3(0.0F, 1.0F, 0.0F);\n    const Matrix    view    = XMMatrixLookAtLH(eye, target, up);\n\n    // \u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u884c\u5217(\u6295\u5f71\u306e\u5236\u5fa1).\n    //   SimpleMath::Matrix::CreatePerspectiveFieldOfView() \u306f\u53f3\u624b\u5ea7\u6a19\u7cfb\u306e\u305f\u3081\u3001\u6ce8\u610f.\n    const Matrix projection = XMMatrixPerspectiveFovLH(XM_PIDIV4, 480.0F / 640.0F, 0.01f, 100.0f);\n\n// ...\n\nvoid sample_scene::initialize() {\n    ASSERT(m_d3d_device_context);\n\n    // \u30b7\u30a7\u30a4\u30d7\u306e\u69cb\u7bc9.\n    m_tea_pod = GeometricPrimitive::CreateTeapot(m_d3d_device_context.Get(), 1.0F, 8, false);\n    m_torus   = GeometricPrimitive::CreateTorus(m_d3d_device_context.Get(), 1.0F, 0.3F, 32, false);\n// ...\n\n```\n![render-lh.png](https://qiita-image-store.s3.amazonaws.com/0/49330/bf8e5101-d6bb-3cbe-fead-8e62884cc5da.png)\n\n\u7121\u4e8b\u3001\u610f\u56f3\u3057\u305f\u65b9\u5411\u3092\u5411\u3044\u3066\u304f\u308c\u308b\u3088\u3046\u306b.\n\n~~\u305f\u3060\u3057\u3001\u6df1\u5ea6\u30c6\u30b9\u30c8\u304c\u3046\u307e\u304f\u52d5\u4f5c\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u3001\u4fee\u6b63\u304c\u5fc5\u8981\u305d\u3046\u3067\u3059\u306d.~~\n\u6df1\u5ea6\u30c6\u30b9\u30c8\u304c\u304a\u304b\u3057\u3044\u554f\u984c\u306f\u3001\u57fa\u672c\u56f3\u5f62\u4f5c\u6210\u6642\u306b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u53f3\u624b\u5ea7\u6a19\u7cfb\u3092\u7121\u52b9\u306b\u3057\u307e\u3057\u305f.\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u9060\u3059\u304e\u3066\u3081\u3093\u3069\u304f\u305b\u3047.\n\n\u3068\u3044\u3046\u304a\u8a71\u3067\u3057\u305f.\n\n##\u307e\u3068\u3081\nDirectXTK\u306f\u601d\u3063\u305f\u4ee5\u4e0a\u306b\u7c21\u5358\u306a\u306e\u3067\u3001\nDirectX9.0c\u304b\u3089\u672a\u3060\u79fb\u884c\u3067\u304d\u306a\u3044\u4eba\u3082\u3001\u4e57\u308a\u63db\u3048\u3066\u307f\u308b\u306b\u306f\u3044\u3044\u304b\u3082.\n\n* \u203b\u305f\u3060\u3057\n    * DirectX\u3067\u52d5\u304b\u3059\u524d\u63d0\u306a\u306e\u306b\u3001XNA\u306e\u7f6e\u304d\u63db\u3048\u3092\u72d9\u3063\u3066\u3044\u308b\u305f\u3081\u304b\u3001\u6240\u3005\u3081\u3093\u3069\u304f\u3055\u304f\u611f\u3058\u308b\n        * \u8ae6\u3081\u3066\u53f3\u624b\u5ea7\u6a19\u7cfb\u4f7f\u3063\u305f\u307b\u3046\u304c\u697d\u304b\u3082\u3057\u308c\u306d\u3047\n    * \u4f8b\u5916\u3092\u3068\u3053\u308d\u304b\u307e\u308f\u305a\u6295\u3052\u3066\u304f\u308b\n        * \u3057\u304b\u3082\u3001\u3069\u3053\u3067\u4f8b\u5916\u6295\u3052\u308b\u304b\u5206\u304b\u3089\u3093\n    * \u305d\u3082\u305d\u3082API\u4e00\u89a7\u304c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068\u3057\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u306f\u3069\u3046\u3044\u3046\u3053\u3068\u3060\u3088...\n\n\u306a\u3093\u3066\u4e0d\u6e80\u70b9\u3082\u611f\u3058\u3066\u3044\u308b\u306e\u3067\u3001\u60a9\u307e\u3057\u3044\u3068\u3053\u308d.\n\u82f1\u8a9e\u529b\u9ad8\u3081\u3066\u3001\u516c\u5f0f\u306e Discussion \u306b\u6587\u53e5\u66f8\u304d\u8fbc\u307f\u305f\u3044\u306a\u3041.\n\n"}