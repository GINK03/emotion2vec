{"context": "http://scikit-learn.org/0.18/modules/pipeline.html \u3092google\u7ffb\u8a33\u3057\u305f\n\u30e6\u30fc\u30b6\u30fc\u30ac\u30a4\u30c9\u76ee\u6b21\n\n\n4.1.1. \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\uff1a\u9023\u9396\u63a8\u5b9a\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3 \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u8907\u6570\u306e\u63a8\u5b9a\u5668\u30921\u3064\u306b\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u7279\u5fb4\u9078\u629e\u3001\u6b63\u898f\u5316\u3001\u5206\u985e\u306a\u3069\u3001\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u30b9\u30c6\u30c3\u30d7\u306f\u56fa\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u305f\u3081\u3001\u4fbf\u5229\u3067\u3059\u3002\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f\u3053\u3053\u30672\u3064\u306e\u76ee\u7684\u3092\u679c\u305f\u3057\u307e\u3059\u3002\n\n\n\u5229\u4fbf\u6027\uff1a\u63a8\u5b9a\u5668\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u5168\u4f53\u306b\u5408\u308f\u305b\u308b\u305f\u3081\u306b\u306f\u3001fit \u3092\u547c\u3073\u51fa\u3057\u3066\u30c7\u30fc\u30bf\u3092\u4e00\u5ea6 predict \u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u30b8\u30e7\u30a4\u30f3\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9078\u629e \uff1a\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u5185\u306e\u3059\u3079\u3066\u306e\u63a8\u5b9a\u5668\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4e00\u5ea6\u306b\u30b0\u30ea\u30c3\u30c9\u3067\u691c\u7d22\u3067\u304d\u307e\u3059\u3002\n\n\u6700\u5f8c\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u9664\u304f\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u3059\u3079\u3066\u306e\u63a8\u5b9a\u5668\u306f\u3001\u5909\u63db\u5668\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\uff08transform\u30e1\u30bd\u30c3\u30c9\u304c\u5fc5\u8981\u3067\u3059\uff09\u3002 \u6700\u5f8c\u306e\u63a8\u5b9a\u5668\u306f\u3001\u4efb\u610f\u306e\u30bf\u30a4\u30d7\uff08\u5909\u63db\u5668\u3001\u5206\u985e\u5668\u306a\u3069\uff09\u3067\u3042\u3063\u3066\u3088\u3044\u3002\n\n4.1.1.1. \u4f7f\u7528\u6cd5\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f (key, value) \u306e\u30da\u30a2\u306e\u30ea\u30b9\u30c8\u3092\u4f7f\u7528\u3057\u3066\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002key \u306f\u3053\u306e\u30b9\u30c6\u30c3\u30d7\u306b\u4ed8\u3051\u308b\u540d\u524d\u306e\u6587\u5b57\u5217\u3067\u3001value \u306f\u63a8\u5b9a\u5668\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002\n>>> from sklearn.pipeline import Pipeline\n>>> from sklearn.svm import SVC\n>>> from sklearn.decomposition import PCA\n>>> estimators = [('reduce_dim', PCA()), ('clf', SVC())]\n>>> pipe = Pipeline(estimators)\n>>> pipe \nPipeline(steps=[('reduce_dim', PCA(copy=True, iterated_power='auto',\nn_components=None, random_state=None, svd_solver='auto', tol=0.0,\nwhiten=False)), ('clf', SVC(C=1.0, cache_size=200, class_weight=None,\ncoef0=0.0, decision_function_shape=None, degree=3, gamma='auto',\nkernel='rbf', max_iter=-1, probability=False, random_state=None,\nshrinking=True, tol=0.001, verbose=False))])\n\n\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570 make_pipeline \u306f\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u7701\u7565\u5f62\u3067\u3059\u3002\u8907\u6570\u306e\u63a8\u5b9a\u5668\u3092\u5f15\u6570\u306b\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u8fd4\u307e\u3059\u3002\u540d\u524d\u306f\u81ea\u52d5\u7684\u306b\u6c7a\u307e\u308a\u307e\u3059\uff1a\n>>> from sklearn.pipeline import make_pipeline\n>>> from sklearn.naive_bayes import MultinomialNB\n>>> from sklearn.preprocessing import Binarizer\n>>> make_pipeline(Binarizer(), MultinomialNB()) \nPipeline(steps=[('binarizer', Binarizer(copy=True, threshold=0.0)),\n                ('multinomialnb', MultinomialNB(alpha=1.0,\n                                                class_prior=None,\n                                                fit_prior=True))])\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u4e2d\u306e\u63a8\u5b9a\u5668\u306f\u3001 steps \u5c5e\u6027\u306b\u30ea\u30b9\u30c8\u3068\u3057\u3066\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n>>> pipe.steps[0]\n('reduce_dim', PCA(copy=True, iterated_power='auto', n_components=None, random_state=None,\n  svd_solver='auto', tol=0.0, whiten=False))\n\n\u3042\u3068 dict \u3068\u3057\u3066 named_steps \u306b\u3082\uff1a\n>>> pipe.named_steps['reduce_dim']\nPCA(copy=True, iterated_power='auto', n_components=None, random_state=None,\n  svd_solver='auto', tol=0.0, whiten=False)\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u63a8\u5b9a\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001<estimator>__<parameter> \u69cb\u6587\u3092\u4f7f\u7528\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\n>>> pipe.set_params(clf__C=10) \nPipeline(steps=[('reduce_dim', PCA(copy=True, iterated_power='auto',\n    n_components=None, random_state=None, svd_solver='auto', tol=0.0,\n    whiten=False)), ('clf', SVC(C=10, cache_size=200, class_weight=None,\n    coef0=0.0, decision_function_shape=None, degree=3, gamma='auto',\n    kernel='rbf', max_iter=-1, probability=False, random_state=None,\n    shrinking=True, tol=0.001, verbose=False))])\n\n\u3053\u308c\u306f\u3001\u30b0\u30ea\u30c3\u30c9\u691c\u7d22\u3092\u884c\u3046\u5834\u5408\u306b\u7279\u306b\u91cd\u8981\u3067\u3059\u3002\n>>> from sklearn.model_selection import GridSearchCV\n>>> params = dict(reduce_dim__n_components=[2, 5, 10],\n...               clf__C=[0.1, 10, 100])\n>>> grid_search = GridSearchCV(pipe, param_grid=params)\n\n\u500b\u3005\u306e\u30b9\u30c6\u30c3\u30d7\u3082\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u7f6e\u304d\u63db\u3048\u3089\u308c\u3001\u975e\u6700\u7d42\u30b9\u30c6\u30c3\u30d7\u306f\u7121\u8996\u3055\u308c\u3001None\u306b\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002\n>>>\n>>> from sklearn.linear_model import LogisticRegression\n>>> params = dict(reduce_dim=[None, PCA(5), PCA(10)],\n...               clf=[SVC(), LogisticRegression()],\n...               clf__C=[0.1, 10, 100])\n>>> grid_search = GridSearchCV(pipe, param_grid=params)\n\n\n\u4f8b\uff1a\n\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3ANOVA SVM\n\u30c6\u30ad\u30b9\u30c8\u306e\u7279\u5fb4\u62bd\u51fa\u3068\u8a55\u4fa1\u306e\u305f\u3081\u306e\u30b5\u30f3\u30d7\u30eb\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u5316\uff1aPCA\u3068\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u9023\u9396\nRBF\u30ab\u30fc\u30cd\u30eb\u306e\u660e\u793a\u7684\u306a\u30d5\u30a3\u30fc\u30c1\u30e3\u30de\u30c3\u30d7\u8fd1\u4f3c\nSVM-Anova\uff1a\u5358\u5909\u91cf\u7279\u5fb4\u9078\u629e\u3092\u4f34\u3046SVM\n\n\n\u53c2\u7167\uff1a\n\n\n\u63a8\u5b9a\u5668\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n\n\n\n\n4.1.1.2. \u30ce\u30fc\u30c8\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u4e0a\u3067 fit \u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u306f\u3001\u5404\u63a8\u5b9a\u5668\u306b\u9806\u756a\u306b fit \u3092\u547c\u3073\u51fa\u3057\u3001\u5165\u529b\u3092\u5909\u63db\u3057\u3066\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u306b\u6e21\u3059\u306e\u3068\u540c\u3058\u3067\u3059\u3002 \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u4e2d\u306e\u6700\u5f8c\u306e\u63a8\u5b9a\u5668\u304c\u6709\u3059\u308b\u3059\u3079\u3066\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u6709\u3059\u308b\u3002\u3059\u306a\u308f\u3061\u3001\u6700\u5f8c\u306e\u63a8\u5b9a\u5668\u304c\u5206\u985e\u5668\u3067\u3042\u308b\u5834\u5408\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f\u5206\u985e\u5668\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u5f97\u308b\u3002 \u6700\u5f8c\u306e\u63a8\u5b9a\u5668\u304c\u5909\u63db\u5668\u3067\u3042\u308c\u3070\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3082\u540c\u69d8\u3067\u3059\u3002\n\n4.1.2. FeatureUnion\uff1a\u8907\u5408\u30d5\u30a3\u30fc\u30c1\u30e3\u30b9\u30da\u30fc\u30b9\nFeatureUnion \u306f\u3001\u3044\u304f\u3064\u304b\u306e\u5909\u63db\u5668\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3001\u305d\u308c\u3089\u306e\u51fa\u529b\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u65b0\u3057\u3044\u5909\u63db\u5668\u306b\u7d50\u5408\u3057\u307e\u3059\u3002 FeatureUnion\u306f\u5909\u63db\u5668\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u308a\u307e\u3059\u3002 \u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u4e2d\u306f\u3001\u3053\u308c\u3089\u306e\u305d\u308c\u305e\u308c\u304c\u30c7\u30fc\u30bf\u306b\u500b\u5225\u306b\u30d5\u30a3\u30c3\u30c8\u3057\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b\u3001\u5909\u63db\u306f\u4e26\u5217\u306b\u9069\u7528\u3055\u308c\u3001\u305d\u308c\u3089\u304c\u51fa\u529b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30d9\u30af\u30c8\u30eb\u306f\u3001\u30a8\u30f3\u30c9\u30c4\u30fc\u30a8\u30f3\u30c9\u3067\u9023\u7d50\u3055\u308c\u3066\u5927\u304d\u306a\u30d9\u30af\u30c8\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\nFeatureUnion\u306f\u3001Pipeline\u3068\u540c\u3058\u76ee\u7684\u3092\u679c\u305f\u3057\u307e\u3059 - \u5229\u4fbf\u6027\u3068\u5171\u540c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u63a8\u5b9a\u3068\u691c\u8a3c\u3002\nFeatureUnion\u3068\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u8907\u96d1\u306a\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\uff08FeatureUnion\u306f2\u3064\u306e\u5909\u63db\u304c\u540c\u3058\u30d5\u30a3\u30fc\u30c1\u30e3\u3092\u751f\u6210\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u65b9\u6cd5\u304c\u306a\u304f\u3001\u30d5\u30a3\u30fc\u30c1\u30e3\u30bb\u30c3\u30c8\u304c\u3070\u3089\u3070\u3089\u306b\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u306b\u306e\u307f\u30e6\u30cb\u30aa\u30f3\u3092\u751f\u6210\u3057\u3001\u30b3\u30fc\u30eb\u5143\u306e\u8cac\u4efb\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\uff09\u3002\n\n4.1.2.1. \u4f7f\u7528\u6cd5\nFeatureUnion\u306f (key, value) \u306e\u30da\u30a2\u306e\u30ea\u30b9\u30c8\u3092\u4f7f\u7528\u3057\u3066\u69cb\u7bc9\u3055\u308c\u307e\u3059\u3002\u3053\u3053\u3067\u3001key \u306f\u5909\u63db\u306b\u4e0e\u3048\u308b\u540d\u524d\u3067\u3059\uff08\u4efb\u610f\u306e\u6587\u5b57\u5217\u3001\u8b58\u5225\u5b50\u3068\u3057\u3066\u306e\u307f\u6a5f\u80fd\u3057\u307e\u3059\uff09\u3002value \u306f\u63a8\u5b9a\u5668\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\n>>> from sklearn.pipeline import FeatureUnion\n>>> from sklearn.decomposition import PCA\n>>> from sklearn.decomposition import KernelPCA\n>>> estimators = [('linear_pca', PCA()), ('kernel_pca', KernelPCA())]\n>>> combined = FeatureUnion(estimators)\n>>> combined \nFeatureUnion(n_jobs=1, transformer_list=[('linear_pca', PCA(copy=True,\n    iterated_power='auto', n_components=None, random_state=None,\n    svd_solver='auto', tol=0.0, whiten=False)), ('kernel_pca',\n    KernelPCA(alpha=1.0, coef0=1, copy_X=True, degree=3,\n    eigen_solver='auto', fit_inverse_transform=False, gamma=None,\n    kernel='linear', kernel_params=None, max_iter=None, n_components=None,\n    n_jobs=1, random_state=None, remove_zero_eig=False, tol=0))],\n    transformer_weights=None)\n\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3068\u540c\u69d8\u3001\u30d5\u30a3\u30fc\u30c1\u30e3\u30e6\u30cb\u30aa\u30f3\u306b\u306f\u3001\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u660e\u793a\u7684\u306a\u547d\u540d\u3092\u5fc5\u8981\u3068\u3057\u306a\u3044\u3001make_union \u3068\u3044\u3046\u7c21\u6f54\u306a\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u3042\u308a\u307e\u3059\u3002\n>>> combined.set_params(kernel_pca=None) \nFeatureUnion(n_jobs=1, transformer_list=[('linear_pca', PCA(copy=True,\n      iterated_power='auto', n_components=None, random_state=None,\n      svd_solver='auto', tol=0.0, whiten=False)), ('kernel_pca', None)],\n    transformer_weights=None)\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3068\u540c\u69d8\u306b\u3001\u500b\u3005\u306e\u30b9\u30c6\u30c3\u30d7\u306f set_params \u3092\u4f7f\u7528\u3057\u3066\u7f6e\u304d\u63db\u3048\u3089\u308c\u3001 None \u306b\u8a2d\u5b9a\u3055\u308c\u308b\u3068\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n\n\u4f8b\uff1a\n\n\n\u8907\u6570\u306e\u7279\u5fb4\u62bd\u51fa\u6cd5\u3092\u9023\u7d50\u3059\u308b\n\u7570\u7a2e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u6301\u3064\u6a5f\u80fd\u7d71\u5408\n\n\n\n\u00a92010 - 2016\u3001scikit-learn developers\uff08BSD\u30e9\u30a4\u30bb\u30f3\u30b9\uff09\u3002\nhttp://scikit-learn.org/0.18/modules/pipeline.html \u3092google\u7ffb\u8a33\u3057\u305f\n[\u30e6\u30fc\u30b6\u30fc\u30ac\u30a4\u30c9\u76ee\u6b21](http://qiita.com/nazoking@github/items/267f2371757516f8c168)\n\n----\n\n\n## 4.1.1. \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\uff1a\u9023\u9396\u63a8\u5b9a\n\n[\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3](http://scikit-learn.org/0.18/modules/generated/sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline) \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u8907\u6570\u306e\u63a8\u5b9a\u5668\u30921\u3064\u306b\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u7279\u5fb4\u9078\u629e\u3001\u6b63\u898f\u5316\u3001\u5206\u985e\u306a\u3069\u3001\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u30b9\u30c6\u30c3\u30d7\u306f\u56fa\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u305f\u3081\u3001\u4fbf\u5229\u3067\u3059\u3002\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f\u3053\u3053\u30672\u3064\u306e\u76ee\u7684\u3092\u679c\u305f\u3057\u307e\u3059\u3002\n\n  - **\u5229\u4fbf\u6027**\uff1a\u63a8\u5b9a\u5668\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u5168\u4f53\u306b\u5408\u308f\u305b\u308b\u305f\u3081\u306b\u306f\u3001`fit` \u3092\u547c\u3073\u51fa\u3057\u3066\u30c7\u30fc\u30bf\u3092\u4e00\u5ea6 `predict` \u3059\u308b\u3060\u3051\u3067\u3059\u3002\n  - **\u30b8\u30e7\u30a4\u30f3\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9078\u629e** \uff1a\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u5185\u306e\u3059\u3079\u3066\u306e\u63a8\u5b9a\u5668\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4e00\u5ea6\u306b[\u30b0\u30ea\u30c3\u30c9\u3067\u691c\u7d22](http://scikit-learn.org/0.18/modules/grid_search.html#grid-search)\u3067\u304d\u307e\u3059\u3002\n\n\u6700\u5f8c\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u9664\u304f\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u3059\u3079\u3066\u306e\u63a8\u5b9a\u5668\u306f\u3001\u5909\u63db\u5668\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\uff08`transform`\u30e1\u30bd\u30c3\u30c9\u304c\u5fc5\u8981\u3067\u3059\uff09\u3002 \u6700\u5f8c\u306e\u63a8\u5b9a\u5668\u306f\u3001\u4efb\u610f\u306e\u30bf\u30a4\u30d7\uff08\u5909\u63db\u5668\u3001\u5206\u985e\u5668\u306a\u3069\uff09\u3067\u3042\u3063\u3066\u3088\u3044\u3002\n\n\n## 4.1.1.1. \u4f7f\u7528\u6cd5\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f `(key, value)` \u306e\u30da\u30a2\u306e\u30ea\u30b9\u30c8\u3092\u4f7f\u7528\u3057\u3066\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002`key` \u306f\u3053\u306e\u30b9\u30c6\u30c3\u30d7\u306b\u4ed8\u3051\u308b\u540d\u524d\u306e\u6587\u5b57\u5217\u3067\u3001`value` \u306f\u63a8\u5b9a\u5668\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\u3002\n\n```python\n>>> from sklearn.pipeline import Pipeline\n>>> from sklearn.svm import SVC\n>>> from sklearn.decomposition import PCA\n>>> estimators = [('reduce_dim', PCA()), ('clf', SVC())]\n>>> pipe = Pipeline(estimators)\n>>> pipe \nPipeline(steps=[('reduce_dim', PCA(copy=True, iterated_power='auto',\nn_components=None, random_state=None, svd_solver='auto', tol=0.0,\nwhiten=False)), ('clf', SVC(C=1.0, cache_size=200, class_weight=None,\ncoef0=0.0, decision_function_shape=None, degree=3, gamma='auto',\nkernel='rbf', max_iter=-1, probability=False, random_state=None,\nshrinking=True, tol=0.001, verbose=False))])\n```\n\n\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570 [make_pipeline](http://scikit-learn.org/0.18/modules/generated/sklearn.pipeline.make_pipeline.html#sklearn.pipeline.make_pipeline) \u306f\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u7701\u7565\u5f62\u3067\u3059\u3002\u8907\u6570\u306e\u63a8\u5b9a\u5668\u3092\u5f15\u6570\u306b\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u8fd4\u307e\u3059\u3002\u540d\u524d\u306f\u81ea\u52d5\u7684\u306b\u6c7a\u307e\u308a\u307e\u3059\uff1a\n\n```python\n>>> from sklearn.pipeline import make_pipeline\n>>> from sklearn.naive_bayes import MultinomialNB\n>>> from sklearn.preprocessing import Binarizer\n>>> make_pipeline(Binarizer(), MultinomialNB()) \nPipeline(steps=[('binarizer', Binarizer(copy=True, threshold=0.0)),\n                ('multinomialnb', MultinomialNB(alpha=1.0,\n                                                class_prior=None,\n                                                fit_prior=True))])\n```\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u4e2d\u306e\u63a8\u5b9a\u5668\u306f\u3001 `steps` \u5c5e\u6027\u306b\u30ea\u30b9\u30c8\u3068\u3057\u3066\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```python\n>>> pipe.steps[0]\n('reduce_dim', PCA(copy=True, iterated_power='auto', n_components=None, random_state=None,\n  svd_solver='auto', tol=0.0, whiten=False))\n```\n\n\u3042\u3068 `dict` \u3068\u3057\u3066 `named_steps` \u306b\u3082\uff1a\n\n\n```python\n>>> pipe.named_steps['reduce_dim']\nPCA(copy=True, iterated_power='auto', n_components=None, random_state=None,\n  svd_solver='auto', tol=0.0, whiten=False)\n```\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u63a8\u5b9a\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001`<estimator>__<parameter>` \u69cb\u6587\u3092\u4f7f\u7528\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\n\n```python\n>>> pipe.set_params(clf__C=10) \nPipeline(steps=[('reduce_dim', PCA(copy=True, iterated_power='auto',\n    n_components=None, random_state=None, svd_solver='auto', tol=0.0,\n    whiten=False)), ('clf', SVC(C=10, cache_size=200, class_weight=None,\n    coef0=0.0, decision_function_shape=None, degree=3, gamma='auto',\n    kernel='rbf', max_iter=-1, probability=False, random_state=None,\n    shrinking=True, tol=0.001, verbose=False))])\n```\n\n\u3053\u308c\u306f\u3001\u30b0\u30ea\u30c3\u30c9\u691c\u7d22\u3092\u884c\u3046\u5834\u5408\u306b\u7279\u306b\u91cd\u8981\u3067\u3059\u3002\n\n```python\n>>> from sklearn.model_selection import GridSearchCV\n>>> params = dict(reduce_dim__n_components=[2, 5, 10],\n...               clf__C=[0.1, 10, 100])\n>>> grid_search = GridSearchCV(pipe, param_grid=params)\n```\n\n\u500b\u3005\u306e\u30b9\u30c6\u30c3\u30d7\u3082\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u7f6e\u304d\u63db\u3048\u3089\u308c\u3001\u975e\u6700\u7d42\u30b9\u30c6\u30c3\u30d7\u306f\u7121\u8996\u3055\u308c\u3001`None`\u306b\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002\n\n```python\n>>>\n>>> from sklearn.linear_model import LogisticRegression\n>>> params = dict(reduce_dim=[None, PCA(5), PCA(10)],\n...               clf=[SVC(), LogisticRegression()],\n...               clf__C=[0.1, 10, 100])\n>>> grid_search = GridSearchCV(pipe, param_grid=params)\n```\n\n  - \u4f8b\uff1a\n    - [\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3ANOVA SVM](http://scikit-learn.org/0.18/auto_examples/feature_selection/feature_selection_pipeline.html#sphx-glr-auto-examples-feature-selection-feature-selection-pipeline-py)\n    - [\u30c6\u30ad\u30b9\u30c8\u306e\u7279\u5fb4\u62bd\u51fa\u3068\u8a55\u4fa1\u306e\u305f\u3081\u306e\u30b5\u30f3\u30d7\u30eb\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3](http://scikit-learn.org/0.18/auto_examples/model_selection/grid_search_text_feature_extraction.html#sphx-glr-auto-examples-model-selection-grid-search-text-feature-extraction-py)\n    - [\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u5316\uff1aPCA\u3068\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u9023\u9396](http://scikit-learn.org/0.18/auto_examples/plot_digits_pipe.html#sphx-glr-auto-examples-plot-digits-pipe-py)\n    - [RBF\u30ab\u30fc\u30cd\u30eb\u306e\u660e\u793a\u7684\u306a\u30d5\u30a3\u30fc\u30c1\u30e3\u30de\u30c3\u30d7\u8fd1\u4f3c](http://scikit-learn.org/0.18/auto_examples/plot_kernel_approximation.html#sphx-glr-auto-examples-plot-kernel-approximation-py)\n    - [SVM-Anova\uff1a\u5358\u5909\u91cf\u7279\u5fb4\u9078\u629e\u3092\u4f34\u3046SVM](http://scikit-learn.org/0.18/auto_examples/svm/plot_svm_anova.html#sphx-glr-auto-examples-svm-plot-svm-anova-py)\n  - \u53c2\u7167\uff1a\n    - [\u63a8\u5b9a\u5668\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0](http://qiita.com/nazoking@github/items/09a4c63614797a6bd705)\n\n\n### 4.1.1.2. \u30ce\u30fc\u30c8\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u4e0a\u3067 `fit` \u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u306f\u3001\u5404\u63a8\u5b9a\u5668\u306b\u9806\u756a\u306b `fit` \u3092\u547c\u3073\u51fa\u3057\u3001\u5165\u529b\u3092\u5909\u63db\u3057\u3066\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u306b\u6e21\u3059\u306e\u3068\u540c\u3058\u3067\u3059\u3002 \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u4e2d\u306e\u6700\u5f8c\u306e\u63a8\u5b9a\u5668\u304c\u6709\u3059\u308b\u3059\u3079\u3066\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u6709\u3059\u308b\u3002\u3059\u306a\u308f\u3061\u3001\u6700\u5f8c\u306e\u63a8\u5b9a\u5668\u304c\u5206\u985e\u5668\u3067\u3042\u308b\u5834\u5408\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f\u5206\u985e\u5668\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u5f97\u308b\u3002 \u6700\u5f8c\u306e\u63a8\u5b9a\u5668\u304c\u5909\u63db\u5668\u3067\u3042\u308c\u3070\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3082\u540c\u69d8\u3067\u3059\u3002\n\n## 4.1.2. FeatureUnion\uff1a\u8907\u5408\u30d5\u30a3\u30fc\u30c1\u30e3\u30b9\u30da\u30fc\u30b9\n\n[FeatureUnion](http://scikit-learn.org/0.18/modules/generated/sklearn.pipeline.FeatureUnion.html#sklearn.pipeline.FeatureUnion) \u306f\u3001\u3044\u304f\u3064\u304b\u306e\u5909\u63db\u5668\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3001\u305d\u308c\u3089\u306e\u51fa\u529b\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u65b0\u3057\u3044\u5909\u63db\u5668\u306b\u7d50\u5408\u3057\u307e\u3059\u3002 FeatureUnion\u306f\u5909\u63db\u5668\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u308a\u307e\u3059\u3002 \u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u4e2d\u306f\u3001\u3053\u308c\u3089\u306e\u305d\u308c\u305e\u308c\u304c\u30c7\u30fc\u30bf\u306b\u500b\u5225\u306b\u30d5\u30a3\u30c3\u30c8\u3057\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b\u3001\u5909\u63db\u306f\u4e26\u5217\u306b\u9069\u7528\u3055\u308c\u3001\u305d\u308c\u3089\u304c\u51fa\u529b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30d9\u30af\u30c8\u30eb\u306f\u3001\u30a8\u30f3\u30c9\u30c4\u30fc\u30a8\u30f3\u30c9\u3067\u9023\u7d50\u3055\u308c\u3066\u5927\u304d\u306a\u30d9\u30af\u30c8\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\nFeatureUnion\u306f\u3001Pipeline\u3068\u540c\u3058\u76ee\u7684\u3092\u679c\u305f\u3057\u307e\u3059 - \u5229\u4fbf\u6027\u3068\u5171\u540c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u63a8\u5b9a\u3068\u691c\u8a3c\u3002\nFeatureUnion\u3068\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u8907\u96d1\u306a\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\uff08FeatureUnion\u306f2\u3064\u306e\u5909\u63db\u304c\u540c\u3058\u30d5\u30a3\u30fc\u30c1\u30e3\u3092\u751f\u6210\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u65b9\u6cd5\u304c\u306a\u304f\u3001\u30d5\u30a3\u30fc\u30c1\u30e3\u30bb\u30c3\u30c8\u304c\u3070\u3089\u3070\u3089\u306b\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u306b\u306e\u307f\u30e6\u30cb\u30aa\u30f3\u3092\u751f\u6210\u3057\u3001\u30b3\u30fc\u30eb\u5143\u306e\u8cac\u4efb\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\uff09\u3002\n\n### 4.1.2.1. \u4f7f\u7528\u6cd5\n\nFeatureUnion\u306f `(key, value)` \u306e\u30da\u30a2\u306e\u30ea\u30b9\u30c8\u3092\u4f7f\u7528\u3057\u3066\u69cb\u7bc9\u3055\u308c\u307e\u3059\u3002\u3053\u3053\u3067\u3001`key` \u306f\u5909\u63db\u306b\u4e0e\u3048\u308b\u540d\u524d\u3067\u3059\uff08\u4efb\u610f\u306e\u6587\u5b57\u5217\u3001\u8b58\u5225\u5b50\u3068\u3057\u3066\u306e\u307f\u6a5f\u80fd\u3057\u307e\u3059\uff09\u3002`value` \u306f\u63a8\u5b9a\u5668\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\n\n\n```python\n>>> from sklearn.pipeline import FeatureUnion\n>>> from sklearn.decomposition import PCA\n>>> from sklearn.decomposition import KernelPCA\n>>> estimators = [('linear_pca', PCA()), ('kernel_pca', KernelPCA())]\n>>> combined = FeatureUnion(estimators)\n>>> combined \nFeatureUnion(n_jobs=1, transformer_list=[('linear_pca', PCA(copy=True,\n    iterated_power='auto', n_components=None, random_state=None,\n    svd_solver='auto', tol=0.0, whiten=False)), ('kernel_pca',\n    KernelPCA(alpha=1.0, coef0=1, copy_X=True, degree=3,\n    eigen_solver='auto', fit_inverse_transform=False, gamma=None,\n    kernel='linear', kernel_params=None, max_iter=None, n_components=None,\n    n_jobs=1, random_state=None, remove_zero_eig=False, tol=0))],\n    transformer_weights=None)\n\n```\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3068\u540c\u69d8\u3001\u30d5\u30a3\u30fc\u30c1\u30e3\u30e6\u30cb\u30aa\u30f3\u306b\u306f\u3001\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u660e\u793a\u7684\u306a\u547d\u540d\u3092\u5fc5\u8981\u3068\u3057\u306a\u3044\u3001[make_union](http://scikit-learn.org/0.18/modules/generated/sklearn.pipeline.make_union.html#sklearn.pipeline.make_union) \u3068\u3044\u3046\u7c21\u6f54\u306a\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n```python\n>>> combined.set_params(kernel_pca=None) \nFeatureUnion(n_jobs=1, transformer_list=[('linear_pca', PCA(copy=True,\n      iterated_power='auto', n_components=None, random_state=None,\n      svd_solver='auto', tol=0.0, whiten=False)), ('kernel_pca', None)],\n    transformer_weights=None)\n```\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3068\u540c\u69d8\u306b\u3001\u500b\u3005\u306e\u30b9\u30c6\u30c3\u30d7\u306f `set_params` \u3092\u4f7f\u7528\u3057\u3066\u7f6e\u304d\u63db\u3048\u3089\u308c\u3001 `None` \u306b\u8a2d\u5b9a\u3055\u308c\u308b\u3068\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n\n  - \u4f8b\uff1a\n    - [\u8907\u6570\u306e\u7279\u5fb4\u62bd\u51fa\u6cd5\u3092\u9023\u7d50\u3059\u308b](http://scikit-learn.org/0.18/auto_examples/feature_stacker.html#sphx-glr-auto-examples-feature-stacker-py)\n    - [\u7570\u7a2e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u6301\u3064\u6a5f\u80fd\u7d71\u5408](http://scikit-learn.org/0.18/auto_examples/hetero_feature_union.html#sphx-glr-auto-examples-hetero-feature-union-py)\n\n\u00a92010 - 2016\u3001scikit-learn developers\uff08BSD\u30e9\u30a4\u30bb\u30f3\u30b9\uff09\u3002\n\n", "tags": ["scikit-learn", "\u6a5f\u68b0\u5b66\u7fd2", "MachineLearning", "Python"]}