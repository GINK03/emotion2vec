{"context": "Clojure\u306edoto\u30de\u30af\u30ed\u3092CommonLisp\u306b\u79fb\u690d\u3057\u3066\u307f\u305f\u3002\n\u5b9f\u88c5\n(defmacro doto (x &rest forms)\n  (let ((gx (gensym)))\n    `(let ((,gx ,x))\n      ,@(mapcar (lambda (f)\n                  (if (listp f)\n                    `(,(first f) ,gx ,@(rest f))\n                    `(,f ,gx)))\n                forms)\n      ,gx)))\n\n\u4f7f\u3063\u3066\u307f\u308b\n(defclass foo () ())\n\n(defmethod baz ((this foo) x y)\n  (print (+ x y)))\n\n(doto (make-instance 'foo) (baz 1 2) (baz 2 3)) \n; 3 \n; 5\n\n\nClojure\u306edoto\u30de\u30af\u30ed\u3092CommonLisp\u306b\u79fb\u690d\u3057\u3066\u307f\u305f\u3002\n\n\u5b9f\u88c5\n\n```cl\n(defmacro doto (x &rest forms)\n  (let ((gx (gensym)))\n    `(let ((,gx ,x))\n      ,@(mapcar (lambda (f)\n                  (if (listp f)\n                    `(,(first f) ,gx ,@(rest f))\n                    `(,f ,gx)))\n                forms)\n      ,gx)))\n```\n\n\u4f7f\u3063\u3066\u307f\u308b\n\n```cl\n(defclass foo () ())\n                                                                                \n(defmethod baz ((this foo) x y)\n  (print (+ x y)))\n\n(doto (make-instance 'foo) (baz 1 2) (baz 2 3)) \n; 3 \n; 5\n```\n", "tags": ["Clojure", "CommonLisp"]}