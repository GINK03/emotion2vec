{"context": " More than 1 year has passed since last update.Android\u306eJUnit\u3092\u66f8\u3044\u3066\u3066\u3001Fragment\u304c\u753b\u9762\u306b\u5b8c\u5168\u306b\u8868\u793a\u3055\u308c\u3066\u3001onResume\u304c\u547c\u3070\u308c\u308b\u307e\u3067\u5f85\u3061\u305f\u3044\u3068\u304d\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u7528\u306e\u30b3\u30fc\u30c9\u3002\nEspresso\u3067 onView(withId(R.id.xxxx)).perform(click()); \u3092\u547c\u3076\u3068\u3001\u305f\u307e\u306b\u2193\u306e\u30a8\u30e9\u30fc\u304c\u3067\u3066\u305f\u306e\u3067\u3053\u306e\u5bfe\u5fdc\u3002\nandroid.support.test.espresso.base.DefaultFailureHandler$AssertionFailedWithCauseError: 'is displayed on the screen to the user' doesn't match the selected view.\nExpected: is displayed on the screen to the user\nGot: \"ListView{id=123456789, res-name=layout_xxxxxxx, visibility=GONE, width=0, height=0, has-focus=false, has-focusable=false, has-window-focus=true, is-clickable=false, is-enabled=true, is-focused=false, is-focusable=false, is-layout-requested=true, is-selected=false, root-is-layout-requested=false, has-input-connection=false, x=0.0, y=0.0, child-count=2}\"\n\n    /** Fragment\u304c\u753b\u9762\u4e0a\u306b\u8868\u793a\u3055\u308c\u3066onResume\u304c\u547c\u3070\u308c\u308b\u307e\u3067\u5f85\u3064 */\n    private void waitForOnResume(final Fragment fragment, int timeout) throws Throwable {\n        waitForTrue(this, new TestUtils.BooleanFunc() {\n            @Override\n            public boolean run() {\n                Rect g = new Rect();\n                Rect r = new Rect();\n                fragment.getActivity().findViewById(android.R.id.content).getGlobalVisibleRect(g);\n                View view = fragment.getView();\n                if (view != null) {\n                    view.getGlobalVisibleRect(r);\n                    return g.contains(r) && fragment.isResumed();\n                } else {\n                    return false;\n                }\n            }\n        }, timeout);\n    }\n\n    /** UI\u30b9\u30ec\u30c3\u30c9\u4e0a\u3067true\u306b\u306a\u308b\u307e\u3067\u5f85\u3064 */\n    public static void waitForTrue(InstrumentationTestCase testCase, final BooleanFunc func, int timeout) throws Throwable {\n        long l = SystemClock.elapsedRealtime();\n        do {\n            final AtomicBoolean flag = new AtomicBoolean();\n            testCase.runTestOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    flag.set(func.run());\n                }\n            });\n            if (flag.get()) {\n                break;\n            }\n            SystemClock.sleep(20);\n        } while (SystemClock.elapsedRealtime() - l < timeout);\n    }\n\n    public interface BooleanFunc {\n        public boolean run();\n    }\n\nAndroid\u306eJUnit\u3092\u66f8\u3044\u3066\u3066\u3001Fragment\u304c\u753b\u9762\u306b\u5b8c\u5168\u306b\u8868\u793a\u3055\u308c\u3066\u3001onResume\u304c\u547c\u3070\u308c\u308b\u307e\u3067\u5f85\u3061\u305f\u3044\u3068\u304d\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u7528\u306e\u30b3\u30fc\u30c9\u3002\nEspresso\u3067 onView(withId(R.id.xxxx)).perform(click()); \u3092\u547c\u3076\u3068\u3001\u305f\u307e\u306b\u2193\u306e\u30a8\u30e9\u30fc\u304c\u3067\u3066\u305f\u306e\u3067\u3053\u306e\u5bfe\u5fdc\u3002\n\n```\nandroid.support.test.espresso.base.DefaultFailureHandler$AssertionFailedWithCauseError: 'is displayed on the screen to the user' doesn't match the selected view.\nExpected: is displayed on the screen to the user\nGot: \"ListView{id=123456789, res-name=layout_xxxxxxx, visibility=GONE, width=0, height=0, has-focus=false, has-focusable=false, has-window-focus=true, is-clickable=false, is-enabled=true, is-focused=false, is-focusable=false, is-layout-requested=true, is-selected=false, root-is-layout-requested=false, has-input-connection=false, x=0.0, y=0.0, child-count=2}\"\n```\n\n```java\n    /** Fragment\u304c\u753b\u9762\u4e0a\u306b\u8868\u793a\u3055\u308c\u3066onResume\u304c\u547c\u3070\u308c\u308b\u307e\u3067\u5f85\u3064 */\n    private void waitForOnResume(final Fragment fragment, int timeout) throws Throwable {\n        waitForTrue(this, new TestUtils.BooleanFunc() {\n            @Override\n            public boolean run() {\n                Rect g = new Rect();\n                Rect r = new Rect();\n                fragment.getActivity().findViewById(android.R.id.content).getGlobalVisibleRect(g);\n                View view = fragment.getView();\n                if (view != null) {\n                    view.getGlobalVisibleRect(r);\n                    return g.contains(r) && fragment.isResumed();\n                } else {\n                    return false;\n                }\n            }\n        }, timeout);\n    }\n\n    /** UI\u30b9\u30ec\u30c3\u30c9\u4e0a\u3067true\u306b\u306a\u308b\u307e\u3067\u5f85\u3064 */\n    public static void waitForTrue(InstrumentationTestCase testCase, final BooleanFunc func, int timeout) throws Throwable {\n        long l = SystemClock.elapsedRealtime();\n        do {\n            final AtomicBoolean flag = new AtomicBoolean();\n            testCase.runTestOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    flag.set(func.run());\n                }\n            });\n            if (flag.get()) {\n                break;\n            }\n            SystemClock.sleep(20);\n        } while (SystemClock.elapsedRealtime() - l < timeout);\n    }\n\n    public interface BooleanFunc {\n        public boolean run();\n    }\n```\n", "tags": ["Android", "JUnit"]}