{"context": " More than 1 year has passed since last update.\u3053\u3093\u306b\u3061\u306f\u3002\n\u4eca\u65e5\u306f\u3001@alpha_kai_NET\u3055\u3093\u3082\u5831\u544a\u3055\u308c\u3066\u3044\u308bstd.net.curl\u306e\u30d7\u30ed\u30b0\u30ec\u30b9\u30e1\u30fc\u30bf\u306e\u554f\u984c\u306b\u3064\u3044\u3066\u3001\u554f\u984c\u306e\u539f\u56e0\u3068\u5bfe\u7b56\u306b\u3064\u3044\u3066\u8a71\u3057\u307e\u3059\u3002\n\u307e\u305f\u6700\u5f8c\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u3069\u3046\u304b\u3053\u306e\u8a18\u4e8b\u3092\u898b\u305f\u4eba\u3001\u5831\u544a\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\u554f\u984c\u306e\u6982\u8981\n\u6b21\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u6a19\u6e96\u51fa\u529b\u306bcurl\u306e\u9032\u6357\u72b6\u6cc1\u3092\u8868\u3059\u30d7\u30ed\u30b0\u30ec\u30b9\u30e1\u30fc\u30bf\u304c\u51fa\u529b\u3055\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nimport std.net.curl;\n\nvoid main()\n{\n    auto http = HTTP();\n    http = http.dup();      // \u3053\u3053\u3092\u6d88\u3059\u3068\u7121\u304f\u306a\u308b\n    get(\"dlang.org\", http);\n}\n\n\u3053\u306e\u3088\u3046\u306bHTTP.dup()\u306b\u3088\u308a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8907\u88fd\u3057\u305f\u5834\u5408\u3001\u30d7\u30ed\u30b0\u30ec\u30b9\u30e1\u30fc\u30bf\u304c\u8868\u793a\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001byLineAsync\u306a\u3069\u306e\u3088\u3046\u306b\u5185\u90e8\u3067.dup()\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\u306a\u305c\u304b\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u30d7\u30ed\u30b0\u30ec\u30b9\u30e1\u30fc\u30bf\u304c\u8868\u793a\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u554f\u984c\u306e\u8a73\u7d30\n\u554f\u984c\u306e\u539f\u56e0\u306fstd.net.curl.Curl.dup()\u30e1\u30bd\u30c3\u30c9\u306e\u3053\u306e\u884c\u3067\u3059\u3002\u4ee5\u4e0b\u306b.dup()\u30e1\u30bd\u30c3\u30c9\u3092\u5f15\u7528\u3055\u305b\u3066\u3082\u3089\u3044\u307e\u3059\u3002\n/**\n   Duplicate this handle.\n   The new handle will have all options set as the one it was duplicated\n   from. An exception to this is that all options that cannot be shared\n   across threads are reset thereby making it safe to use the duplicate\n   in a new thread.\n*/\nCurl dup()\n{\n    Curl copy;\n    copy.handle = curl_easy_duphandle(handle);\n    copy.stopped = false;\n\n    with (CurlOption) {\n        auto tt = TypeTuple!(file, writefunction, writeheader,\n                             headerfunction, infile,\n                             readfunction, ioctldata, ioctlfunction,\n                             seekdata, seekfunction, sockoptdata,\n                             sockoptfunction, opensocketdata,\n                             opensocketfunction, noprogress,\n                             progressdata, progressfunction,\n                             debugdata, debugfunction,\n                             interleavedata,\n                             interleavefunction, chunk_data,\n                             chunk_bgn_function, chunk_end_function,\n                             fnmatch_data, fnmatch_function,\n                             cookiejar, postfields);\n        foreach(option; tt)\n            copy.clear(option);\n    }\n\n    // The options are only supported by libcurl when it has been built\n    // against certain versions of OpenSSL - if your libcurl uses an old\n    // OpenSSL, or uses an entirely different SSL engine, attempting to\n    // clear these normally will raise an exception\n    copy.clearIfSupported(CurlOption.ssl_ctx_function);\n    copy.clearIfSupported(CurlOption.ssh_keydata);\n\n    // Enable for curl version > 7.21.7\n    static if (LIBCURL_VERSION_MAJOR >= 7 &&\n               LIBCURL_VERSION_MINOR >= 21 &&\n               LIBCURL_VERSION_PATCH >= 7)\n    {\n        copy.clear(CurlOption.closesocketdata);\n        copy.clear(CurlOption.closesocketfunction);\n    }\n\n    copy.set(CurlOption.nosignal, 1);\n\n    // copy.clear(CurlOption.ssl_ctx_data); Let ssl function be shared\n    // copy.clear(CurlOption.ssh_keyfunction); Let key function be shared\n\n    /*\n      Allow sharing of conv functions\n      copy.clear(CurlOption.conv_to_network_function);\n      copy.clear(CurlOption.conv_from_network_function);\n      copy.clear(CurlOption.conv_from_utf8_function);\n    */\n\n    return copy;\n}\n\nwith\u6587\u5185\u304c\u554f\u984c\u306e\u539f\u56e0\u3067\u3059\u3002Curl.clear(option)\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30dd\u30a4\u30f3\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3option\u306bnull\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\u3057\u304b\u3057\u3001alias tt\u306e\u30ea\u30b9\u30c8\u3092\u898b\u308b\u3068\u3001noprogress\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\nnoprogress\u306fcURL\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u308b\u9650\u308a\u30010\u304b1\u306elong\u578b\u3092\u8a2d\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u306f\u305a\u306a\u306e\u3067\u3001Curl.clear(CurlOption.noprogress)\u306f\u8aa4\u308a\u3067\u3059\u3002\n\u3053\u306e\u8aa4\u308a\u306b\u3088\u308a\u3001HTTP.dup()\u306e\u547c\u3073\u51fa\u3057\u3067Curl.dup()\u304c\u547c\u3073\u51fa\u3055\u308c\u3001Curl.clear(CurlOption.noprogress)\u306b\u3088\u308acurl_easy_setopt(curlHandle, CURLOPT_NOPROGRESS, null)\u3055\u308c\u307e\u3059\u3002null\u306f\u6574\u6570\u3067\u306f0\u3067\u3059\u304b\u3089\u3001CURLOPT_NOPROGRESS\u306b0\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3057\u307e\u3044\u3001\u7d50\u679c\u7684\u306b\u30d7\u30ed\u30b0\u30ec\u30b9\u30e1\u30fc\u30bf\u304c\u8868\u793a\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u554f\u984c\u306e\u89e3\u6c7a\u65b9\u6cd5\nalias tt\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30ea\u30b9\u30c8\u304b\u3089noprogress\u3092\u6d88\u3059\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u307e\u3059\u3002\n\u3082\u3057\u3001Phobos\u306e\u30b3\u30fc\u30c9\u306e\u6539\u5909\u3092\u5f85\u3066\u306a\u3044\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306a\u578b\u3092std.net.curl.HTTP\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u3046\u3053\u3068\u3067\u305d\u306e\u5834\u3057\u306e\u304e\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nstruct BugFixedHTTP\n{\n    static BugFixedHTTP opCall(const(char)[] url)\n    {\n        return BugFixedHTTP(HTTP(url));\n    }\n\n\n    static BugFixedHTTP opCall()\n    {\n        return BugFixedHTTP(HTTP());\n    }\n\n\n    static BugFixedHTTP opCall(HTTP http)\n    {\n        //this.http = http;\n        BugFixedHTTP bfhttp;\n        bfhttp.http = http;\n        return bfhttp;\n    }\n\n\n    BugFixedHTTP dup()\n    {\n        HTTP conn = http.dup;\n        conn.handle.set(CurlOption.noprogress, 1);\n        return BugFixedHTTP(conn);\n    }\n\n\n    string encoding() @property \n    {\n        return http.tupleof[0].charset;\n    }\n\n\n    HTTP http;\n    alias http this;\n}\n\n\n\u3055\u3044\u3054\u306b\n\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u3044\u305f\u7406\u7531\u306f\u50d5\u306b\u306f\u3053\u306e\u5185\u5bb9\u3092\u82f1\u8a9e\u3092\u7528\u3044\u3066\u8aac\u660e\u3059\u308b\u5b9f\u529b\u304c\u7121\u3044\u305f\u3081\u3067\u3059\u3002\u8a13\u7df4\u3060\u3068\u601d\u3048\u3070\u826f\u3044\u306e\u3067\u3057\u3087\u3046\u304c\u3001\u3069\u3046\u3057\u3066\u3082\u81ea\u4fe1\u304c\u306a\u3044\u306e\u3067\u3001\u8ab0\u304b\u4ee3\u308f\u308a\u306bBugzilla\u306b\u5831\u544a\u3057\u3066GitHub\u306bPull Request\u6295\u3052\u3066\u3082\u3089\u3048\u307e\u3059\u304b\uff1f\n\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\u3053\u3093\u306b\u3061\u306f\u3002\n\u4eca\u65e5\u306f\u3001[@alpha_kai_NET\u3055\u3093\u3082\u5831\u544a\u3055\u308c\u3066\u3044\u308bstd.net.curl\u306e\u30d7\u30ed\u30b0\u30ec\u30b9\u30e1\u30fc\u30bf\u306e\u554f\u984c](http://qiita.com/alpha_kai_NET/items/e96c0106cd3b79948288)\u306b\u3064\u3044\u3066\u3001\u554f\u984c\u306e\u539f\u56e0\u3068\u5bfe\u7b56\u306b\u3064\u3044\u3066\u8a71\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u6700\u5f8c\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u3069\u3046\u304b\u3053\u306e\u8a18\u4e8b\u3092\u898b\u305f\u4eba\u3001\u5831\u544a\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\n## \u554f\u984c\u306e\u6982\u8981\n\n\u6b21\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u6a19\u6e96\u51fa\u529b\u306bcurl\u306e\u9032\u6357\u72b6\u6cc1\u3092\u8868\u3059\u30d7\u30ed\u30b0\u30ec\u30b9\u30e1\u30fc\u30bf\u304c\u51fa\u529b\u3055\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n~~~~~~~~~~d\nimport std.net.curl;\n\nvoid main()\n{\n    auto http = HTTP();\n    http = http.dup();      // \u3053\u3053\u3092\u6d88\u3059\u3068\u7121\u304f\u306a\u308b\n    get(\"dlang.org\", http);\n}\n~~~~~~~~~~~\n\n\u3053\u306e\u3088\u3046\u306b`HTTP.dup()`\u306b\u3088\u308a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8907\u88fd\u3057\u305f\u5834\u5408\u3001\u30d7\u30ed\u30b0\u30ec\u30b9\u30e1\u30fc\u30bf\u304c\u8868\u793a\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u305d\u306e\u305f\u3081\u3001`byLineAsync`\u306a\u3069\u306e\u3088\u3046\u306b\u5185\u90e8\u3067`.dup()`\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\u306a\u305c\u304b\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u30d7\u30ed\u30b0\u30ec\u30b9\u30e1\u30fc\u30bf\u304c\u8868\u793a\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\n## \u554f\u984c\u306e\u8a73\u7d30\n\n\u554f\u984c\u306e\u539f\u56e0\u306f[`std.net.curl.Curl.dup()`\u30e1\u30bd\u30c3\u30c9\u306e\u3053\u306e\u884c](https://github.com/D-Programming-Language/phobos/blob/master/std/net/curl.d#L3636)\u3067\u3059\u3002\u4ee5\u4e0b\u306b`.dup()`\u30e1\u30bd\u30c3\u30c9\u3092\u5f15\u7528\u3055\u305b\u3066\u3082\u3089\u3044\u307e\u3059\u3002\n\n~~~~~~~~~~~~~~~~~d\n/**\n   Duplicate this handle.\n   The new handle will have all options set as the one it was duplicated\n   from. An exception to this is that all options that cannot be shared\n   across threads are reset thereby making it safe to use the duplicate\n   in a new thread.\n*/\nCurl dup()\n{\n    Curl copy;\n    copy.handle = curl_easy_duphandle(handle);\n    copy.stopped = false;\n\n    with (CurlOption) {\n        auto tt = TypeTuple!(file, writefunction, writeheader,\n                             headerfunction, infile,\n                             readfunction, ioctldata, ioctlfunction,\n                             seekdata, seekfunction, sockoptdata,\n                             sockoptfunction, opensocketdata,\n                             opensocketfunction, noprogress,\n                             progressdata, progressfunction,\n                             debugdata, debugfunction,\n                             interleavedata,\n                             interleavefunction, chunk_data,\n                             chunk_bgn_function, chunk_end_function,\n                             fnmatch_data, fnmatch_function,\n                             cookiejar, postfields);\n        foreach(option; tt)\n            copy.clear(option);\n    }\n\n    // The options are only supported by libcurl when it has been built\n    // against certain versions of OpenSSL - if your libcurl uses an old\n    // OpenSSL, or uses an entirely different SSL engine, attempting to\n    // clear these normally will raise an exception\n    copy.clearIfSupported(CurlOption.ssl_ctx_function);\n    copy.clearIfSupported(CurlOption.ssh_keydata);\n\n    // Enable for curl version > 7.21.7\n    static if (LIBCURL_VERSION_MAJOR >= 7 &&\n               LIBCURL_VERSION_MINOR >= 21 &&\n               LIBCURL_VERSION_PATCH >= 7)\n    {\n        copy.clear(CurlOption.closesocketdata);\n        copy.clear(CurlOption.closesocketfunction);\n    }\n\n    copy.set(CurlOption.nosignal, 1);\n\n    // copy.clear(CurlOption.ssl_ctx_data); Let ssl function be shared\n    // copy.clear(CurlOption.ssh_keyfunction); Let key function be shared\n\n    /*\n      Allow sharing of conv functions\n      copy.clear(CurlOption.conv_to_network_function);\n      copy.clear(CurlOption.conv_from_network_function);\n      copy.clear(CurlOption.conv_from_utf8_function);\n    */\n\n    return copy;\n}\n~~~~~~~~~~~~~~~~~~\n\n`with`\u6587\u5185\u304c\u554f\u984c\u306e\u539f\u56e0\u3067\u3059\u3002`Curl.clear(option)`\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30dd\u30a4\u30f3\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3`option`\u306b`null`\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\u3057\u304b\u3057\u3001`alias tt`\u306e\u30ea\u30b9\u30c8\u3092\u898b\u308b\u3068\u3001`noprogress`\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\n`noprogress`\u306f[cURL\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://curl.haxx.se/libcurl/c/CURLOPT_NOPROGRESS.html)\u3092\u898b\u308b\u9650\u308a\u3001`0`\u304b`1`\u306e`long`\u578b\u3092\u8a2d\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u306f\u305a\u306a\u306e\u3067\u3001`Curl.clear(CurlOption.noprogress)`\u306f\u8aa4\u308a\u3067\u3059\u3002\n\n\u3053\u306e\u8aa4\u308a\u306b\u3088\u308a\u3001`HTTP.dup()`\u306e\u547c\u3073\u51fa\u3057\u3067`Curl.dup()`\u304c\u547c\u3073\u51fa\u3055\u308c\u3001`Curl.clear(CurlOption.noprogress)`\u306b\u3088\u308a`curl_easy_setopt(curlHandle, CURLOPT_NOPROGRESS, null)`\u3055\u308c\u307e\u3059\u3002`null`\u306f\u6574\u6570\u3067\u306f`0`\u3067\u3059\u304b\u3089\u3001`CURLOPT_NOPROGRESS`\u306b`0`\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3057\u307e\u3044\u3001\u7d50\u679c\u7684\u306b\u30d7\u30ed\u30b0\u30ec\u30b9\u30e1\u30fc\u30bf\u304c\u8868\u793a\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\n## \u554f\u984c\u306e\u89e3\u6c7a\u65b9\u6cd5\n\n`alias tt`\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30ea\u30b9\u30c8\u304b\u3089`noprogress`\u3092\u6d88\u3059\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u307e\u3059\u3002\n\n\u3082\u3057\u3001Phobos\u306e\u30b3\u30fc\u30c9\u306e\u6539\u5909\u3092\u5f85\u3066\u306a\u3044\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306a\u578b\u3092`std.net.curl.HTTP`\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u3046\u3053\u3068\u3067\u305d\u306e\u5834\u3057\u306e\u304e\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n~~~~~~~~~~~~~~~d\nstruct BugFixedHTTP\n{\n    static BugFixedHTTP opCall(const(char)[] url)\n    {\n        return BugFixedHTTP(HTTP(url));\n    }\n\n\n    static BugFixedHTTP opCall()\n    {\n        return BugFixedHTTP(HTTP());\n    }\n\n\n    static BugFixedHTTP opCall(HTTP http)\n    {\n        //this.http = http;\n        BugFixedHTTP bfhttp;\n        bfhttp.http = http;\n        return bfhttp;\n    }\n\n\n    BugFixedHTTP dup()\n    {\n        HTTP conn = http.dup;\n        conn.handle.set(CurlOption.noprogress, 1);\n        return BugFixedHTTP(conn);\n    }\n\n\n    string encoding() @property \n    {\n        return http.tupleof[0].charset;\n    }\n\n\n    HTTP http;\n    alias http this;\n}\n~~~~~~~~~~~~~~~~\n\n\n## \u3055\u3044\u3054\u306b\n\n\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u3044\u305f\u7406\u7531\u306f\u50d5\u306b\u306f\u3053\u306e\u5185\u5bb9\u3092\u82f1\u8a9e\u3092\u7528\u3044\u3066\u8aac\u660e\u3059\u308b\u5b9f\u529b\u304c\u7121\u3044\u305f\u3081\u3067\u3059\u3002\u8a13\u7df4\u3060\u3068\u601d\u3048\u3070\u826f\u3044\u306e\u3067\u3057\u3087\u3046\u304c\u3001\u3069\u3046\u3057\u3066\u3082\u81ea\u4fe1\u304c\u306a\u3044\u306e\u3067\u3001\u8ab0\u304b\u4ee3\u308f\u308a\u306bBugzilla\u306b\u5831\u544a\u3057\u3066GitHub\u306bPull Request\u6295\u3052\u3066\u3082\u3089\u3048\u307e\u3059\u304b\uff1f\n\n\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n", "tags": ["dlang"]}