{"tags": ["Java", "C#", "C++", "OpenCV", "\u753b\u50cf\u51e6\u7406"], "context": "\n\n\u306f\u3058\u3081\u306b\n\u753b\u50cf\u51e6\u7406\u3067\u30d4\u30af\u30bb\u30eb\u3092\u64cd\u4f5c\u3059\u308b\u7df4\u7fd2\u3068\u3057\u3066\u3001\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408(\u8a73\u3057\u304f\u306fWikipedia\u3067)\u306e\u753b\u50cf\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002Java\u306f\u5168\u4f53\u50cf\u3001C#\u3068C++\u306f\u9069\u5f53\u306b\u62e1\u5927\u3057\u305f\u90e8\u5206\u306e\u753b\u50cf\u304c\u3067\u304d\u308b\u3002\n\u57fa\u672c\u7684\u306b\u306f\u3001image.setPixel(i, j, color)\u306e\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3088\u308a\u3082\u3001\u5185\u90e8\u306e\u914d\u5217\u306b\u76f4\u63a5\u66f8\u304d\u8fbc\u3080\u65b9\u304c\u901f\u3044\u3089\u3057\u3044\u3002\n\nJava\nC#\u3084C++\u304c\u30c1\u30e3\u30f3\u30cd\u30eb\u3054\u3068\u306e\u914d\u5217\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001Java\u306fARGB\u3092\u4e00\u3064\u306e32\u30d3\u30c3\u30c8\u6574\u6570\u306b\u307e\u3068\u3081\u305f\u3082\u306e\u304c\u8981\u7d20\u306b\u306a\u3063\u3066\u3044\u308b\u3002\nimport java.awt.Color;\nimport java.awt.image.BufferedImage;\nimport javax.imageio.ImageIO;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class Mandelbrot{\n    public static final int WIDTH = 1000;\n    public static final int HEIGHT = 1000;\n\n    public static void main(String[] args){\n        int[] pixels = new int[WIDTH*HEIGHT];\n        for(int i = 0; i < WIDTH; i++){\n            for(int j = 0; j < HEIGHT; j++){\n                pixels[WIDTH*j+i] = calcMandelbrot(i, j);\n            }\n        }\n        BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_ARGB);\n        image.setRGB(0, 0, WIDTH, HEIGHT, pixels, 0, WIDTH);\n        File file = new File(\"mandelbrot.png\");\n        try{\n            ImageIO.write(image, \"png\", file);\n        }catch(IOException e){\n            System.out.println(e);\n        }\n    }\n\n    // \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n    public static final double xMin = -2.1;\n    public static final double xMax = 0.5;\n    public static final double yMin = -1.3;\n    public static final double yMax = 1.3;\n    public static final int nMax = 300;\n\n    // \u70b9(i, j)\u306b\u5bfe\u3059\u308b\u8272\u3092AHSV\u3067\u8a08\u7b97\n    public static int calcMandelbrot(int i, int j){\n        final double c = xMin+i*(xMax-xMin)/WIDTH;\n        final double d = yMin+j*(yMax-yMin)/HEIGHT;\n        double x1 = 0.0, y1 = 0.0, x2, y2;\n        int n = 0;\n        for(n = 0; n < nMax; n++){\n            x2 = x1*x1-y1*y1+c;\n            y2 = 2*x1*y1+d;\n            if(x2*x2+y2*y2 > 4.0) break;\n            x1 = x2;\n            y1 = y2;\n        }\n        final float t = (float)n/nMax;\n        if(t >= 1.0f){\n            return 0xff000000; //black\n        }else{\n            return 0xff000000 | Color.HSBtoRGB(t, 0.6f, 1.0f);\n        }\n    }\n}\n\n\u7d50\u679c\uff1a\n\n\u53c2\u8003\uff1aJava\u3067\u753b\u50cf\u306e\u753b\u7d20\u3092\u64cd\u4f5c\u3059\u308b | \u306a\u3079\u308d\u3050\n\nC#\nC#\u306b\u306fHSV\u3068RGB\u3068\u306e\u5909\u63db\u304c\u306a\u3044\u3089\u3057\u3044\u306e\u3067\u3001Wikipedia\u3092\u53c2\u8003\u306b\u3057\u3066\u4f5c\u3063\u305f\u3002\nusing System;\nusing System.Drawing;\nusing System.Drawing.Imaging;\n\nnamespace Mandelbrot{\n    static class Program{\n        public const int WIDTH = 1000;\n        public const int HEIGHT = 1000;\n\n        public static void Main(string[] args){\n            Bitmap image = new Bitmap(WIDTH, HEIGHT, PixelFormat.Format32bppArgb);\n            BitmapData data = image.LockBits(\n                new Rectangle(0, 0, WIDTH, HEIGHT),\n                ImageLockMode.WriteOnly,\n                PixelFormat.Format32bppArgb);\n            byte[] buf = new byte[4*WIDTH*HEIGHT];\n            for(int i = 0; i < WIDTH; i++){\n                for(int j = 0; j < HEIGHT; j++){\n                    byte a = 0, r = 0, g = 0, b = 0;\n                    CalcMandelbrot(i, j, ref a, ref r, ref g, ref b);\n                    buf[4*(WIDTH*j+i)+3] = a;\n                    buf[4*(WIDTH*j+i)+2] = r;\n                    buf[4*(WIDTH*j+i)+1] = g;\n                    buf[4*(WIDTH*j+i)] = b;\n                }\n            }\n            System.Runtime.InteropServices.Marshal.Copy(buf, 0, data.Scan0, buf.Length);\n            image.UnlockBits(data);\n            image.Save(\"mandelbrot.png\");\n        }\n\n        // \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n        public const double xMin = -0.7406219098542647;\n        public const double xMax = -0.7406219098519411;\n        public const double yMin = 0.15805475052205210;\n        public const double yMax = 0.15805475052421664;\n        public const int nMax = 18000;\n\n        // \u70b9(i, j)\u306b\u5bfe\u3059\u308b\u8272\u3092AHSV\u3067\u8a08\u7b97\n        public static void CalcMandelbrot(int i, int j, ref byte a, ref byte r, ref byte g, ref byte b){\n            double c = xMin+i*(xMax-xMin)/WIDTH;\n            double d = yMin+j*(yMax-yMin)/HEIGHT;\n            double x1 = 0.0, y1 = 0.0, x2, y2;\n            int n = 0;\n            for(n = 0; n < nMax; n++){\n                x2 = x1*x1-y1*y1+c;\n                y2 = 2*x1*y1+d;\n                if(x2*x2+y2*y2 > 4.0) break;\n                x1 = x2;\n                y1 = y2;\n            }\n            double t = (double)n/nMax;\n            if(t >= 1.0){\n                a = 0xff;\n                r = g = b = 0; //black\n            }else{\n                ARGBfromAHSV(ref a, ref r, ref g, ref b, 1.0, 0.55, 0.3+0.3*Math.Sin(12*Math.PI*t), 0.7+0.3*Math.Cos(16*Math.PI*t));\n            }\n        }\n\n        // ARGB\u304b\u3089AHSV\u3078\u5909\u63db\n        public static void ARGBfromAHSV(ref byte aOut, ref byte r, ref byte g, ref byte b, double aIn, double h, double s, double v){\n            aOut = (byte)(255*aIn);\n            r = (byte)(255*v);\n            g = (byte)(255*v);\n            b = (byte)(255*v);\n            if (s <= 0.0) return;\n            h *= 6.0;\n            int i = (int)h;\n            double f = h-i;\n            switch(i){\n                case 0:\n                    g = (byte)(g*(1-s*(1-f)));\n                    b = (byte)(b*(1-s));\n                    break;\n                case 1:\n                    r = (byte)(r*(1-s*f));\n                    b = (byte)(b*(1-s));\n                    break;\n                case 2:\n                    r = (byte)(r*(1-s));\n                    b = (byte)(b*(1-s*(1-f)));\n                    break;\n                case 3:\n                    r = (byte)(r*(1-s));\n                    g = (byte)(g*(1-s*f));\n                    break;\n                case 4:\n                    r = (byte)(r*(1-s*(1-f)));\n                    g = (byte)(g*(1-s));\n                    break;\n                case 5:\n                    g = (byte)(g*(1-s));\n                    b = (byte)(b*(1-s*f));\n                    break;\n            }\n        }\n    }\n}\n\n\u7d50\u679c\uff1a\n\n\u53c2\u8003\uff1a[C#] \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306b\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u9ad8\u901f\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u306b\u306f (GetPixel/SetPixel vs BitmapData \u901f\u5ea6\u6bd4\u8f03)\n\nC++\nOpenCV\u3092\u4f7f\u3063\u305f\u3002\u4eca\u56de\u306f\u5168\u90e8\u4e0d\u900f\u660e\u306b\u3057\u3066\u308b\u306e\u3067\u7279\u306b\u610f\u5473\u306a\u3044\u3051\u3069\u3001OpenCV\u3067\u306falpha\u5024\u3092\u542b\u3081\u305f\u5834\u5408\u306eHSV\u3068RGB\u3068\u306e\u5909\u63db\u304c\u3067\u304d\u306a\u3044\u3089\u3057\u3044(c++ - OpenCV cv::cvtColor drops alpha channel, How to keep alpha data?)\u3002\n#include <cmath>\n#include <opencv2/opencv.hpp>\n#include <opencv2/imgproc.hpp>\n\nvoid calcMandelbrot(int i, int j, unsigned char& h, unsigned char& s, unsigned char& v);\n\nconstexpr int width = 1000;\nconstexpr int height = 1000;\n\nint main(){\n    cv::Mat image(height, width, CV_8UC3);\n    for(int i = 0; i < width; i++){\n        for(int j = 0; j < height; j++){\n            unsigned char h, s, v;\n            calcMandelbrot(i, j, h, s, v);\n            image.data[3*(width*j+i)] = h;\n            image.data[3*(width*j+i)+1] = s;\n            image.data[3*(width*j+i)+2] = v;\n        }\n    }\n    cv::cvtColor(image, image, CV_HSV2RGB);\n    cv::imwrite(\"mandelbrot.png\", image);\n    return 0;\n}\n\n// \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\nconstexpr double xMin = -1.4467108885212991;\nconstexpr double xMax = -1.4467096751794892;\nconstexpr double yMin = -1.3212921606783162e-5;\nconstexpr double yMax = -1.2078843332240347e-5;\nconstexpr int nMax = 1000;\n\n// \u70b9(i, j)\u306b\u5bfe\u3059\u308b\u8272\u3092HSV\u3067\u8a08\u7b97\n// h\u306e\u7bc4\u56f2\u306f0\u304b\u3089180\u307e\u3067\nvoid calcMandelbrot(int i, int j, unsigned char& h, unsigned char& s, unsigned char& v){\n    const double c = xMin+i*(xMax-xMin)/width;\n    const double d = yMin+j*(yMax-yMin)/height;\n    double x1 = 0.0, y1 = 0.0, x2, y2;\n    int n = 0;\n    for(n = 0; n < nMax; n++){\n        x2 = x1*x1-y1*y1+c;\n        y2 = 2*x1*y1+d;\n        if(x2*x2+y2*y2 > 4.0) break;\n        x1 = x2;\n        y1 = y2;\n    }\n    const double t = static_cast<double>(n)/nMax;\n    if(t >= 1.0){\n        h = s = v = 0; //black\n    }else{\n        h = static_cast<unsigned char>(180*0.3);\n        s = static_cast<unsigned char>(255*(0.3+0.3*sin(12*M_PI*t)));\n        v = static_cast<unsigned char>(255*(0.7+0.3*cos(16*M_PI*t)));\n    }\n}\n\n\u7d50\u679c\uff1a\n\n\u53c2\u8003\uff1a\n\u30fbLearning OpenCV 2\n\u30fb\u7dd1\u8272\u306e\u30d4\u30af\u30bb\u30eb\u3092\u6570\u3048\u308b\n#\u306f\u3058\u3081\u306b\n\u753b\u50cf\u51e6\u7406\u3067\u30d4\u30af\u30bb\u30eb\u3092\u64cd\u4f5c\u3059\u308b\u7df4\u7fd2\u3068\u3057\u3066\u3001\u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408(\u8a73\u3057\u304f\u306f[Wikipedia](https://en.wikipedia.org/wiki/Mandelbrot_set)\u3067)\u306e\u753b\u50cf\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002Java\u306f\u5168\u4f53\u50cf\u3001C#\u3068C++\u306f\u9069\u5f53\u306b\u62e1\u5927\u3057\u305f\u90e8\u5206\u306e\u753b\u50cf\u304c\u3067\u304d\u308b\u3002\n\u57fa\u672c\u7684\u306b\u306f\u3001`image.setPixel(i, j, color)`\u306e\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3088\u308a\u3082\u3001\u5185\u90e8\u306e\u914d\u5217\u306b\u76f4\u63a5\u66f8\u304d\u8fbc\u3080\u65b9\u304c\u901f\u3044\u3089\u3057\u3044\u3002\n\n#Java\nC#\u3084C++\u304c\u30c1\u30e3\u30f3\u30cd\u30eb\u3054\u3068\u306e\u914d\u5217\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001Java\u306fARGB\u3092\u4e00\u3064\u306e32\u30d3\u30c3\u30c8\u6574\u6570\u306b\u307e\u3068\u3081\u305f\u3082\u306e\u304c\u8981\u7d20\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n```java\nimport java.awt.Color;\nimport java.awt.image.BufferedImage;\nimport javax.imageio.ImageIO;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class Mandelbrot{\n    public static final int WIDTH = 1000;\n    public static final int HEIGHT = 1000;\n        \n    public static void main(String[] args){\n\t\tint[] pixels = new int[WIDTH*HEIGHT];\n\t\tfor(int i = 0; i < WIDTH; i++){\n\t\t\tfor(int j = 0; j < HEIGHT; j++){\n\t\t\t\tpixels[WIDTH*j+i] = calcMandelbrot(i, j);\n\t\t\t}\n\t\t}\n\t\tBufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_ARGB);\n\t\timage.setRGB(0, 0, WIDTH, HEIGHT, pixels, 0, WIDTH);\n\t\tFile file = new File(\"mandelbrot.png\");\n\t\ttry{\n\t\t\tImageIO.write(image, \"png\", file);\n\t\t}catch(IOException e){\n\t\t\tSystem.out.println(e);\n\t\t}\n\t}\n\t\n\t// \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n    public static final double xMin = -2.1;\n    public static final double xMax = 0.5;\n    public static final double yMin = -1.3;\n    public static final double yMax = 1.3;\n    public static final int nMax = 300;\n     \n    // \u70b9(i, j)\u306b\u5bfe\u3059\u308b\u8272\u3092AHSV\u3067\u8a08\u7b97\n\tpublic static int calcMandelbrot(int i, int j){\n\t\tfinal double c = xMin+i*(xMax-xMin)/WIDTH;\n\t\tfinal double d = yMin+j*(yMax-yMin)/HEIGHT;\n        double x1 = 0.0, y1 = 0.0, x2, y2;\n        int n = 0;\n        for(n = 0; n < nMax; n++){\n            x2 = x1*x1-y1*y1+c;\n            y2 = 2*x1*y1+d;\n            if(x2*x2+y2*y2 > 4.0) break;\n            x1 = x2;\n            y1 = y2;\n        }\n\t\tfinal float t = (float)n/nMax;\n\t\tif(t >= 1.0f){\n\t\t\treturn 0xff000000; //black\n\t\t}else{\n\t\t\treturn 0xff000000 | Color.HSBtoRGB(t, 0.6f, 1.0f);\n\t\t}\n\t}\n}\n```\n\n\u7d50\u679c\uff1a\n![mandelbrot1.png](https://qiita-image-store.s3.amazonaws.com/0/161876/1e3770bf-81a9-6e26-b881-34acec6867fb.png)\n\n\n\u53c2\u8003\uff1a[Java\u3067\u753b\u50cf\u306e\u753b\u7d20\u3092\u64cd\u4f5c\u3059\u308b | \u306a\u3079\u308d\u3050](https://www.google.co.jp/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0ahUKEwi5s-2q-4XSAhWKgrwKHYoDAugQFggaMAA&url=http%3A%2F%2Fblog.nabe-ch.net%2F%3Fp%3D532&usg=AFQjCNHl-RIE4VzT1sbyfrpzRNMPOLTUeA&sig2=ckRLdb2H-aPoCA82xN8r2g)\n\n#C# \nC#\u306b\u306fHSV\u3068RGB\u3068\u306e\u5909\u63db\u304c\u306a\u3044\u3089\u3057\u3044\u306e\u3067\u3001[Wikipedia](https://ja.wikipedia.org/wiki/HSV%E8%89%B2%E7%A9%BA%E9%96%93)\u3092\u53c2\u8003\u306b\u3057\u3066\u4f5c\u3063\u305f\u3002\n\n```csharp\nusing System;\nusing System.Drawing;\nusing System.Drawing.Imaging;\n\nnamespace Mandelbrot{\n    static class Program{\n        public const int WIDTH = 1000;\n        public const int HEIGHT = 1000;\n\n        public static void Main(string[] args){\n            Bitmap image = new Bitmap(WIDTH, HEIGHT, PixelFormat.Format32bppArgb);\n            BitmapData data = image.LockBits(\n                new Rectangle(0, 0, WIDTH, HEIGHT),\n                ImageLockMode.WriteOnly,\n                PixelFormat.Format32bppArgb);\n            byte[] buf = new byte[4*WIDTH*HEIGHT];\n            for(int i = 0; i < WIDTH; i++){\n                for(int j = 0; j < HEIGHT; j++){\n                    byte a = 0, r = 0, g = 0, b = 0;\n                    CalcMandelbrot(i, j, ref a, ref r, ref g, ref b);\n                    buf[4*(WIDTH*j+i)+3] = a;\n                    buf[4*(WIDTH*j+i)+2] = r;\n                    buf[4*(WIDTH*j+i)+1] = g;\n                    buf[4*(WIDTH*j+i)] = b;\n                }\n            }\n            System.Runtime.InteropServices.Marshal.Copy(buf, 0, data.Scan0, buf.Length);\n            image.UnlockBits(data);\n            image.Save(\"mandelbrot.png\");\n        }\n        \n        // \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n        public const double xMin = -0.7406219098542647;\n        public const double xMax = -0.7406219098519411;\n        public const double yMin = 0.15805475052205210;\n        public const double yMax = 0.15805475052421664;\n        public const int nMax = 18000;\n        \n        // \u70b9(i, j)\u306b\u5bfe\u3059\u308b\u8272\u3092AHSV\u3067\u8a08\u7b97\n        public static void CalcMandelbrot(int i, int j, ref byte a, ref byte r, ref byte g, ref byte b){\n            double c = xMin+i*(xMax-xMin)/WIDTH;\n            double d = yMin+j*(yMax-yMin)/HEIGHT;\n            double x1 = 0.0, y1 = 0.0, x2, y2;\n            int n = 0;\n            for(n = 0; n < nMax; n++){\n                x2 = x1*x1-y1*y1+c;\n                y2 = 2*x1*y1+d;\n                if(x2*x2+y2*y2 > 4.0) break;\n                x1 = x2;\n                y1 = y2;\n            }\n            double t = (double)n/nMax;\n            if(t >= 1.0){\n                a = 0xff;\n                r = g = b = 0; //black\n            }else{\n                ARGBfromAHSV(ref a, ref r, ref g, ref b, 1.0, 0.55, 0.3+0.3*Math.Sin(12*Math.PI*t), 0.7+0.3*Math.Cos(16*Math.PI*t));\n            }\n        }\n        \n        // ARGB\u304b\u3089AHSV\u3078\u5909\u63db\n        public static void ARGBfromAHSV(ref byte aOut, ref byte r, ref byte g, ref byte b, double aIn, double h, double s, double v){\n            aOut = (byte)(255*aIn);\n            r = (byte)(255*v);\n            g = (byte)(255*v);\n            b = (byte)(255*v);\n            if (s <= 0.0) return;\n            h *= 6.0;\n            int i = (int)h;\n            double f = h-i;\n            switch(i){\n                case 0:\n                    g = (byte)(g*(1-s*(1-f)));\n                    b = (byte)(b*(1-s));\n                    break;\n                case 1:\n                    r = (byte)(r*(1-s*f));\n                    b = (byte)(b*(1-s));\n                    break;\n                case 2:\n                    r = (byte)(r*(1-s));\n                    b = (byte)(b*(1-s*(1-f)));\n                    break;\n                case 3:\n                    r = (byte)(r*(1-s));\n                    g = (byte)(g*(1-s*f));\n                    break;\n                case 4:\n                    r = (byte)(r*(1-s*(1-f)));\n                    g = (byte)(g*(1-s));\n                    break;\n                case 5:\n                    g = (byte)(g*(1-s));\n                    b = (byte)(b*(1-s*f));\n                    break;\n            }\n        }\n    }\n}\n```\n\n\u7d50\u679c\uff1a\n![mandelbrot2.png](https://qiita-image-store.s3.amazonaws.com/0/161876/9db70542-7282-0afe-1cdf-da6c59ac8d86.png)\n\n\n\u53c2\u8003\uff1a[[C#] \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306b\u30d4\u30af\u30bb\u30eb\u5358\u4f4d\u3067\u9ad8\u901f\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u306b\u306f (GetPixel/SetPixel vs BitmapData \u901f\u5ea6\u6bd4\u8f03)](http://www.84kure.com/blog/2014/07/13/c-%E3%83%93%E3%83%83%E3%83%88%E3%83%9E%E3%83%83%E3%83%97%E3%81%AB%E3%83%94%E3%82%AF%E3%82%BB%E3%83%AB%E5%8D%98%E4%BD%8D%E3%81%A7%E9%AB%98%E9%80%9F%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9/)\n\n#C++\nOpenCV\u3092\u4f7f\u3063\u305f\u3002\u4eca\u56de\u306f\u5168\u90e8\u4e0d\u900f\u660e\u306b\u3057\u3066\u308b\u306e\u3067\u7279\u306b\u610f\u5473\u306a\u3044\u3051\u3069\u3001OpenCV\u3067\u306falpha\u5024\u3092\u542b\u3081\u305f\u5834\u5408\u306eHSV\u3068RGB\u3068\u306e\u5909\u63db\u304c\u3067\u304d\u306a\u3044\u3089\u3057\u3044([c++ - OpenCV cv::cvtColor drops alpha channel, How to keep alpha data?](http://stackoverflow.com/questions/20229577/opencv-cvcvtcolor-drops-alpha-channel-how-to-keep-alpha-data))\u3002\n\n```cpp\n#include <cmath>\n#include <opencv2/opencv.hpp>\n#include <opencv2/imgproc.hpp>\n\nvoid calcMandelbrot(int i, int j, unsigned char& h, unsigned char& s, unsigned char& v);\n\nconstexpr int width = 1000;\nconstexpr int height = 1000;\n\nint main(){\n\tcv::Mat image(height, width, CV_8UC3);\n\tfor(int i = 0; i < width; i++){\n\t\tfor(int j = 0; j < height; j++){\n\t\t\tunsigned char h, s, v;\n\t\t\tcalcMandelbrot(i, j, h, s, v);\n\t\t\timage.data[3*(width*j+i)] = h;\n\t\t\timage.data[3*(width*j+i)+1] = s;\n\t\t\timage.data[3*(width*j+i)+2] = v;\n\t\t}\n\t}\n\tcv::cvtColor(image, image, CV_HSV2RGB);\n\tcv::imwrite(\"mandelbrot.png\", image);\n\treturn 0;\n}\n\n// \u30de\u30f3\u30c7\u30eb\u30d6\u30ed\u96c6\u5408\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\nconstexpr double xMin = -1.4467108885212991;\nconstexpr double xMax = -1.4467096751794892;\nconstexpr double yMin = -1.3212921606783162e-5;\nconstexpr double yMax = -1.2078843332240347e-5;\nconstexpr int nMax = 1000;\n\n// \u70b9(i, j)\u306b\u5bfe\u3059\u308b\u8272\u3092HSV\u3067\u8a08\u7b97\n// h\u306e\u7bc4\u56f2\u306f0\u304b\u3089180\u307e\u3067\nvoid calcMandelbrot(int i, int j, unsigned char& h, unsigned char& s, unsigned char& v){\n\tconst double c = xMin+i*(xMax-xMin)/width;\n\tconst double d = yMin+j*(yMax-yMin)/height;\n\tdouble x1 = 0.0, y1 = 0.0, x2, y2;\n\tint n = 0;\n\tfor(n = 0; n < nMax; n++){\n\t\tx2 = x1*x1-y1*y1+c;\n\t\ty2 = 2*x1*y1+d;\n\t\tif(x2*x2+y2*y2 > 4.0) break;\n\t\tx1 = x2;\n\t\ty1 = y2;\n\t}\n\tconst double t = static_cast<double>(n)/nMax;\n\tif(t >= 1.0){\n\t\th = s = v = 0; //black\n\t}else{\n\t\th = static_cast<unsigned char>(180*0.3);\n\t\ts = static_cast<unsigned char>(255*(0.3+0.3*sin(12*M_PI*t)));\n\t\tv = static_cast<unsigned char>(255*(0.7+0.3*cos(16*M_PI*t)));\n\t}\n}\n```\n\n\u7d50\u679c\uff1a\n![mandelbrot3.png](https://qiita-image-store.s3.amazonaws.com/0/161876/cb9538fc-3d57-2ae9-ff03-7f1b81f6d04a.png)\n\n\n\u53c2\u8003\uff1a\n\u30fb[Learning OpenCV 2](http://www.wakayama-u.ac.jp/~chen/opencv/opencv2.html)\n\u30fb[\u7dd1\u8272\u306e\u30d4\u30af\u30bb\u30eb\u3092\u6570\u3048\u308b](http://www.cellstat.net/color/)\n"}