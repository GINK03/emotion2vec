{"context": " More than 1 year has passed since last update.\u3053\u3053\u306b\u3042\u308b\u306e\u306f\uff0c\u300cHaskell\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4f8b\u300d\u3067\u3059\uff0e\u7b46\u8005\u81ea\u8eab\u304c\u300c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u74b0\u5883\u306e\u4f7f\u3044\u65b9\u3092\u304a\u3055\u3089\u3044\u300d\u3057\u305f\u69d8\u5b50\u3092\u793a\u3057\u305f\u3082\u306e\u3067\u3059\uff0e\u3082\u3063\u3068\u4e0a\u624b\u3044\u4f7f\u3044\u65b9\u304c\u3042\u308b\u3088\uff0e\u3053\u3046\u3057\u305f\u65b9\u304c\u3044\u3044\u3088\uff0e\u3068\u3044\u3046\u306e\u304c\u3042\u308c\u3070\u662f\u975e\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff0e\n\u3053\u306e\u8a18\u4e8b\u306f\u307e\u3060\u672a\u5b8c\u3067\u3059\uff0eAdvent Calendar\u671f\u9593\u4e2d\u306b\u3059\u3053\u3057\u305a\u3064\u66f8\u304d\u305f\u3057\u307e\u3059\uff0e\n(12/07 \u8ffd\u8a18\uff1a\u300c\u51fa\u529b\u5148\u306e\u6307\u5b9a\uff0c\u8907\u6570\u306e\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u6307\u5b9a\uff0c\u4f8b\u5916\u5bfe\u5fdc\u300d)\n(12/04 \u8ffd\u8a18\uff1a\u300c\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u300d)\n(12/03 \u8ffd\u8a18\uff1a\u300c\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u300d\u300cstack \u3092\u4f7f\u3063\u3066\u30c6\u30b9\u30c8\u3059\u308b\u300d)\n(12/02 \u8ffd\u8a18\uff1a\u300cshiftSlice \u6700\u521d\u306e\u5b9f\u88c5\u300d\u300c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u300d)\n\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u74b0\u5883\u305d\u306e\u3082\u306e\u306e\u6e96\u5099\n\ngit\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nUbuntu 14.04 LTS (64bit)\u306e\u5834\u5408\nsudo apt-get install -y git-core\n\n\u305d\u306e\u4ed6\u306e\u74b0\u5883\u3067\u306f\u305d\u308c\u306a\u308a\u306b\uff0e\n\nstack \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u3053\u308c\u3082Ubuntu 14.04 LTS (64bit)\u306e\u5834\u5408\u306e\u307f\u793a\u3057\u307e\u3059\uff0e\nstack\u672c\u5bb6\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u305d\u306e\u307e\u307e\uff0e\necho 'deb http://download.fpcomplete.com/ubuntu/trusty stable main'|sudo tee /etc/apt/sources.list.d/fpco.list\nsudo apt-get update && sudo apt-get install stack -y\n\n\nGHC 7.10.2 \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nstack\u3092\u4f7f\u3063\u3066\uff0c\nstack update\nstack setup 7.10.2\n\n\n\u74b0\u5883\u5909\u6570\u306e\u8a2d\u5b9a\n\n.zshenv\nGHC_VERSION=ghc-7.10.2\nGHC_PATH=$HOME/.stack/programs/x86_64-linux/$GHC_VERSION/bin\nexport PATH=$HOME/.local/bin:$GHC_PATH:$PATH\n\n\n\ncabal-install\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nstack install cabal-install\n\n\nghc-mod\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nghc-mod\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u306fstack.yaml\u306eextra-deps\u306bcabal-helper\u306e\u7248\u756a0.7\u672a\u6e800.6.1.0\u4ee5\u4e0a\u3092\u6307\u5b9a\u3059\u308b\n\nstack.yaml\nflags: {}\nextra-package-dbs: []\npackages: []\nextra-deps:\n- cabal-helper-0.6.2.0\nresolver: lts-3.16\n\n\nstack\u3092\u4f7f\u3063\u3066ghc-mod\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nstack install ghc-mod\n\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\nGitHub\n\u65b0\u3057\u3044\u30ea\u30dd\u30b8\u30c8\u30ea\u4f5c\u6210\n\nRepository: haskell-programming-example\nDescription: An Haskell Programming Example with GitHub and stack\nPublic\nInitialize this repository with a README\nAdd .gitignore: Haskell\nAdd a license: BSD 3-clause \"New\" or \"Revised\" License\n[Create repository]\n\n\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30ed\u30fc\u30ab\u30eb\u306b clone \u3057\u3066\uff0c\u305d\u3053\u306b\u79fb\u52d5\uff0e\ngit clone git@github.com:nobsun/haskell-programming-example.git\ncd haskell-programming-example\n\n\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\ngit clone \u76f4\u5f8c\n  +-- .git/\n  +-- .gitignore\n  +-- LICENSE\n  +-- README.md\n\ncabal\u30d5\u30a1\u30a4\u30eb\u306e\u96db\u5f62\u3092\u4f5c\u6210\ncabal init\n\n\u3053\u306e\u6642\u70b9\u3067\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\n  +-- .git/\n  +-- .gitignore\n  +-- LICENSE\n  +-- README.md\n  +-- Setup.hs\n  +-- haskell-programming-example.cabal\n\nsrc/ \u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u30e2\u30b8\u30e5\u30fc\u30eb ShiftSlice \u3092\u7f6e\u304f\u4e88\u5b9a\nhaskell-programming-example.cabal\u3092\u7de8\u96c6\nname:                haskell-programming-example\nversion:             0.1.0.0\nsynopsis:            Shift Slice Filter\ndescription:         This project is for demonstarating a short haskell programming example.\nhomepage:            http://github.com/nobsun/haskell-programming-example/\nlicense:             BSD3\nlicense-file:        LICENSE\nauthor:              nobsun\nmaintainer:          xxxxx@xxxxxx.xxx\nbuild-type:          Simple\nextra-source-files:  README.md\ncabal-version:       >=1.10\n\nlibrary\n  exposed-modules:     ShiftSlice\n  build-depends:       base >=4.8 && <4.9\n  hs-source-dirs:      src\n  default-language:    Haskell2010\n\nsrc/ \u3092\u4f5c\u6210\nmkdir src\n\n\nstack\u521d\u671f\u5316\nstack init\n\n\u76f4\u5f8c\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\n  +-- .git/\n  +-- .gitignore\n  +-- .stack-work/\n  +-- LICENSE\n  +-- README.md\n  +-- Setup.hs\n  +-- haskell-programming-example.cabal\n  +-- stack.yaml\n\n.stack-work/ \u3068 stack.yaml\u306f\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u306e\u307f\u6709\u52b9\u306a\u306e\u3067 .gitignore \u306b\u767b\u9332\n\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8ab2\u984c\u306f\u4ee5\u4e0b\u306b\u3042\u3063\u305f\u3082\u306e\uff0e\n\n\u52dd\u624b\u306b\u304a\u984c---\u30c6\u30ad\u30b9\u30c8\u30d5\u30a3\u30eb\u30bf\n8\u3064\u306e\u8a00\u8a9e\u3067\u30c6\u30ad\u30b9\u30c8\u30d5\u30a3\u30eb\u30bf\u3092\u66f8\u304d\u6bd4\u3079\u305f\n\n8\u3064\u306e\u8a00\u8a9e\u3067\u30c6\u30ad\u30b9\u30c8\u30d5\u30a3\u30eb\u30bf\u3092\u66f8\u304d\u6bd4\u3079\u305f\u306b\u3088\u308c\u3070\uff0c\n\n\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u304b\u3089\u6307\u5b9a\u3057\u305fbyte\u6570\uff08\u307e\u305f\u306f\u6587\u5b57\u6570\uff09\u3060\u3051\u51fa\u529b\u3057\u3001\u6539\u884c\u3092\u51fa\u529b\u3057\u3001\u5148\u982d\u304b\u30891byte\uff08\u307e\u305f\u306f1\u6587\u5b57\uff09\u30b7\u30d5\u30c8\u3057\u305f\u4f4d\u7f6e\u304b\u3089\u540c\u3058\u3088\u3046\u306b\u51fa\u529b\u3057\u3001\u6539\u884c\u3092\u51fa\u529b\u3057\u3001\u518d\u3073\u30b7\u30d5\u30c8\u3057\u2015\u2015\u3068\u3044\u3046\u3053\u3068\u3092\u30d5\u30a1\u30a4\u30eb\u7d42\u7aef\u307e\u3067\u7e70\u308a\u8fd4\u3059\u30b3\u30f3\u30bd\u30fc\u30eb\u30a2\u30d7\u30ea\u3060\u3002\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u3002\n$ echo -n abcd | hcasl -n 1\na\nb\nc\nd\n$ echo -n abcd | hcasl -n 2\nab\nbc\ncd\n$ echo -n abcd | hcasl -n 3\nabc\nbcd\n\n\n\u3068\u3044\u3046\u30c6\u30ad\u30b9\u30c8\u30d5\u30a3\u30eb\u30bf\u3092\u66f8\u304f\u3068\u3044\u3046\u3082\u306e\n\nShiftSlice \u30e2\u30b8\u30e5\u30fc\u30eb\u96db\u5f62\nsrc/ShiftSlice.hs \u3092\u4f5c\u6210\uff0e\n\u5165\u51fa\u529b\u306f\u3042\u3068\u3067\u8003\u3048\u308b\u3053\u3068\u306b\u3057\u3066\uff0c\u6587\u5b57\u5217\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u3092\u8003\u3048\u308b\uff0e\n\u3068\u308a\u3042\u3048\u305a\u96db\u5f62\u3092\u3044\u308c\u3066\u304a\u304f\uff0e\nmodule ShiftSlice where\n\nshiftSlice :: Int -> String -> String\nshiftSlice n = const \"Not yet implemented.\\n\"\n\n\n\u30b3\u30de\u30f3\u30c9\u96db\u5f62\n\u5b9f\u884c\u5f62\u5f0f\u306e\u30b3\u30de\u30f3\u30c9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\uff0c\u305d\u306e\u7f6e\u304d\u5834 app/ \u3092\u4f5c\u6210\u3059\u308b\uff0e\nmkdir app\n\n\u5b9f\u884c\u5f62\u5f0f\u306e\u9805\u3092 haskell-programming-example.cabal \u306b\u8ffd\u52a0\nexecutable shift-slice\n  hs-source-dirs:      app\n  main-is:             shift-slice.hs\n  ghc-options:         -rtsopts\n  build-depends:       base\n                     , haskell-programming-example\n  default-language:    Haskell2010\n\napp/shift-slice.hs \u3092\u7de8\u96c6\uff0e\u3068\u308a\u3042\u3048\u305a\uff0cshiftSlice \u3092\u547c\u3076\u3060\u3051\uff0e\nmodule Main where\n\nimport ShiftSlice\n\nmain :: IO ()\nmain = interact (shiftSlice 3)\n\n\nbuild \u306e\u78ba\u8a8d\n\u3053\u308c\u3067\u3068\u308a\u3042\u3048\u305a build \u3067\u304d\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\uff0e\nstack build\n\nstack build \u304c\u6210\u529f\u3057\u305f\u3089\uff0c\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306f .stack-work/ \u4ee5\u4e0b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4f5c\u6210\u3055\u308c\u308b\uff0e\necho -n \"abcdefg\" | .stack-work/dist/x86_64-linux/Cabal-1.22.4.0/build/shift-slice/shift-slice\nNot yet implemented.\n\n\u3053\u308c\u3067\u6240\u5b9a\u306e\u30b3\u30de\u30f3\u30c9\u3092\u8a66\u3059\u305f\u3081\u306e\u571f\u53f0\u306f\u3067\u304d\u305f\u304b\u306a\uff0e\n\nshiftSlice \u6700\u521d\u306e\u5b9f\u88c5\n\u6587\u5b57\u5217\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u3068\u3044\u3046\u3053\u3068\u3067\u4ee5\u4e0b\u306e4\u3064\u306e\u5909\u63db\u3092\u5408\u6210\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u308b\uff0e\n(1) \u6587\u5b57\u5217\u304b\u3089\u30b7\u30d5\u30c8\u6587\u5b57\u5217\u30ea\u30b9\u30c8\u3078\u5909\u63db\n(2) \u5404\u6587\u5b57\u5217\u3092\u5148\u982dn\u6587\u5b57\u307e\u3067\u306e\u6587\u5b57\u5217\u3078\u5909\u63db\n(3) \u9577\u3055\u304cn\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\u306e\u307f\u63a1\u7528\u3057\u305f\u6587\u5b57\u5217\u30ea\u30b9\u30c8\u3078\u5909\u63db\n(4) \u5404\u6587\u5b57\u5217\u3092\u6539\u884c\u6587\u5b57\u3067\u7d42\u7aef\u3057\u3066\uff0c\u305d\u308c\u3089\u3092\u9023\u7d50\u3057\u30661\u3064\u306e\u6587\u5b57\u5217\u306b\u5909\u63db\nimport Data.List (tails)\n\nshiftSlice :: Int -> String -> String\nshiftSlice = unlines . takeWhile ((n ==) . length) . make (take n) . tails\n\nbuild \u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\uff0e\nstack build\necho -n \"abcdefg\" | .stack-work/dist/x86_64-linux/Cabal-1.22.4.0/build/shift-slice/shift-slice\nabc\nbcd\ncde\ndef\nefg\n\n\u30b3\u30de\u30f3\u30c9\u306e\u96db\u5f62\u3067\u306f\u30b9\u30e9\u30a4\u30b9\u306e\u5927\u304d\u3055\u30923\u306b\u56fa\u5b9a\u3057\u3066 shiftSlice \u3092\u547c\u3093\u3067\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\uff0e\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\nHaskell\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u7528\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30b7\u30b9\u30c6\u30e0 Haddock \u3092\u4f7f\u3046\u3053\u3068\u3092\u524d\u63d0\u306b\uff0c\u30b3\u30e1\u30f3\u30c8\u3092\u4ed8\u3051\u3066\u304a\u3053\u3046\uff0e\n-- |\n-- \u6587\u5b57\u5217\u3092\u305d\u306e\u6587\u5b57\u5217\u306e\u5404\u30b7\u30d5\u30c8\u30b9\u30e9\u30a4\u30b9\u3092\u6539\u884c\u6587\u5b57\u3067\u7d42\u7aef\u3057\u3066\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u63d0\u4f9b\u3059\u308b\uff0e\n--\n--     * \u30b9\u30e9\u30a4\u30b9\u3068\u306f\u6587\u5b57\u5217\u306e\u5148\u982d\u304b\u3089\u6307\u5b9a\u3057\u305f\u9577\u3055\u5206\u3060\u3051\u5207\u308a\u51fa\u3057\u305f\u6587\u5b57\u5217\n--     * \u30b7\u30d5\u30c8\u30b9\u30e9\u30a4\u30b9\u3068\u306f\u6587\u5b57\u5217\u30921\u6587\u5b57\u305a\u3064\u30b7\u30d5\u30c8\u3057\u306a\u304c\u3089\u751f\u6210\u3057\u305f\u30b9\u30e9\u30a4\u30b9\n\nmodule ShiftSlice where\n\nimport Data.List (tails)\n\n-- | 4\u3064\u306e\u5909\u63db\u3092\u95a2\u6570\u5408\u6210\u3059\u308b\u5b9f\u88c5\n--\n--       (1) \u6587\u5b57\u5217\u304b\u3089\u30b7\u30d5\u30c8\u6587\u5b57\u5217\u30ea\u30b9\u30c8\u3078\u5909\u63db\n--       (2) \u5404\u6587\u5b57\u5217\u3092\u5148\u982dn\u6587\u5b57\u307e\u3067\u306e\u6587\u5b57\u5217\u3078\u5909\u63db\n--       (3) \u9577\u3055\u304cn\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\u306e\u307f\u63a1\u7528\u3057\u305f\u6587\u5b57\u5217\u30ea\u30b9\u30c8\u3078\u5909\u63db\n--       (4) \u5404\u6587\u5b57\u5217\u3092\u6539\u884c\u6587\u5b57\u3067\u7d42\u7aef\u3057\u3066\uff0c\u305d\u308c\u3089\u3092\u9023\u7d50\u3057\u30661\u3064\u306e\u6587\u5b57\u5217\u306b\u5909\u63db\n\nshiftSlice :: Int -> String -> String\nshiftSlice n = unlines . takeWhile ((n ==) . length) . map (take n) . tails\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u30b9\u30bf\u30c3\u30af\u3092\u4f7f\u3063\u3066\u751f\u6210\u3059\u308b\uff0e\u751f\u6210\u3057\u305f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f Web \u30d6\u30e9\u30a6\u30b6\u3067\u8aad\u3081\u308b\uff0e\nstack haddock\ngoogle-chrome .stack-work/dist/x86_64-linux/Cabal-1.22.4.0/doc/html/haskell-programming-example/index.html\n\n\n\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\nhaddock \u306f\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306e\u8a18\u6cd5\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\uff0e\n-- | 4\u3064\u306e\u5909\u63db\u3092\u95a2\u6570\u5408\u6210\u3059\u308b\u5b9f\u88c5\n--\n--       (1) \u6587\u5b57\u5217\u304b\u3089\u30b7\u30d5\u30c8\u6587\u5b57\u5217\u30ea\u30b9\u30c8\u3078\u5909\u63db\n--       (2) \u5404\u6587\u5b57\u5217\u3092\u5148\u982dn\u6587\u5b57\u307e\u3067\u306e\u6587\u5b57\u5217\u3078\u5909\u63db\n--       (3) \u9577\u3055\u304cn\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\u306e\u307f\u63a1\u7528\u3057\u305f\u6587\u5b57\u5217\u30ea\u30b9\u30c8\u3078\u5909\u63db\n--       (4) \u5404\u6587\u5b57\u5217\u3092\u6539\u884c\u6587\u5b57\u3067\u7d42\u7aef\u3057\u3066\uff0c\u305d\u308c\u3089\u3092\u9023\u7d50\u3057\u30661\u3064\u306e\u6587\u5b57\u5217\u306b\u5909\u63db\n--\n-- >>> putStr $ shiftSlice 3 \"abcdefg\"\n-- abc\n-- bcd\n-- cde\n-- def\n-- efg\n\nshiftSlice :: Int -> String -> String\nshiftSlice n = unlines . takeWhile ((n ==) . length) . map (take n) . tails\n\ndoctest \u3092\u4f7f\u3063\u3066\uff0c>>> \u306e\u884c\u304c\u8a08\u7b97\u3055\u308c\u3066\u7d50\u679c\u304c\u305d\u308c\u4ee5\u4e0b\u306e\u8a18\u8ff0\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\uff0e\nstack install doctest\ndoctest src/ShiftSlice.hs\n\n\u3053\u308c\u3067\uff0cExamples: 1  Tried: 1  Errors: 0  Failures: 0 \u3068\u3044\u3046\u8868\u793a\u304c\u3067\u308c\u3070 OK\uff0e\n\nstack \u3092\u4f7f\u3063\u3066\u30c6\u30b9\u30c8\u3059\u308b\n\u307e\u305a haskell-programming-example.cabal \u30d5\u30a1\u30a4\u30eb\u306b\u4ee5\u4e0b\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u8ffd\u52a0\u3059\u308b\uff0e\ntest-suite doctest\n  type:                exitcode-stdio-1.0\n  hs-source-dirs:      test, src\n  main-is:             doctesting.hs\n  build-depends:       base\n                     , haskell-programming-example\n                     , doctest\n  ghc-options:         -rtsopts\n  default-language:    Haskell2010\n\n\u3064\u304e\u306b doctest \u306e\u30c6\u30b9\u30c8\u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0 test/doctesting.hs \u3092\u4f5c\u6210\u3059\u308b\uff0e\nmodule Main where\n\nimport Test.DocTest\n\nmain :: IO ()\nmain = doctest [\"src/ShiftSlice.hs\"]\n\n\u3053\u308c\u3067 stack \u3092\u4f7f\u3063\u3066\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u304c\u3067\u304d\u308b\uff0e\nstack test\n\n\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\n\u30b9\u30e9\u30a4\u30b9\u306e\u5927\u304d\u3055\u3092\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3088\u3046\uff0e\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u89e3\u6790\u306b\u306f @tanakh \u3055\u3093\u306e optparse-declative \u304c\u4f7f\u3044\u3084\u3059\u305d\u3046\uff0e\n\u4f7f\u3044\u65b9\u306f optparse-declarative: \u5ba3\u8a00\u7684\u306a\u578b\u30ec\u30d9\u30eb\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30d1\u30fc\u30b6\u30fc \u306b\u89e3\u8aac\u304c\u3042\u308b\uff0e\nhaskell-programming-example.cabal \u306e executable shift-slice\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u308b\uff0e\nexecutable shift-slice\n  hs-source-dirs:      app\n  main-is:             shift-slice.hs\n  ghc-options:         -rtsopts\n  build-depends:       base\n                     , mtl\n                     , optparse-declarative\n                     , haskell-programming-example\n  default-language:    Haskell2010\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b app/shift-slice.hs \u3092\u66f8\u304d\u63db\u3048\u308b\uff0e\n{-# LANGUAGE DataKinds #-}\nmodule Main where\n\nimport Control.Monad.Trans (liftIO)\nimport Options.Declarative\nimport ShiftSlice\n\nmain :: IO ()\nmain = run_ shift_slice\n\nshift_slice :: Flag \"n\" '[\"slice-size\"] \"NUMBER\" \"size of a slice\" (Def \"3\" Int)\n            -> Cmd \"Shift slicing\" ()\nshift_slice n = liftIO $ putStr . shiftSlice (get n) =<< getContents\n\n\u5b9f\u884c\u4f8b\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\uff0e\nstack build\necho -n abcdefghijklmn | .stack-work/dist/x86_64-linux/Cabal-1.22.4.0/build/shift-slice/shift-slice --slice-size=5\nabcde\nbcdef\ncdefg\ndefgh\nefghi\nfghij\nghijk\nhijkl\nijklm\njklmn\n\n\n\u51fa\u529b\u5148\u306e\u6307\u5b9a\uff0c\u8907\u6570\u306e\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u6307\u5b9a\uff0c\u4f8b\u5916\u5bfe\u5fdc\n\u30b3\u30de\u30f3\u30c9\u95a2\u6570\u3092\u5909\u66f4\u3057\u3066\uff0c\u51fa\u529b\u5148\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3088\u308b\u6307\u5b9a\u3068\uff0c\u8907\u6570\u306e\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u3092\u5f15\u6570\u3067\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\uff0e\n\u3055\u3089\u306b\uff0c\u5165\u51fa\u529b\u5b9f\u884c\u6642\u306e\u4f8b\u5916\u306b\u5bfe\u5fdc\u3059\u308b\u3088\u3046\u306b\u3057\u305f\uff0e\n{-# LANGUAGE DataKinds #-}\nmodule Main where\n\nimport Control.Applicative ((<$>))\nimport Control.Exception\nimport Control.Monad\nimport Control.Monad.Trans (liftIO)\nimport Data.Traversable (forM)\nimport System.IO\nimport Options.Declarative\nimport ShiftSlice (shiftSlice)\n\nmain :: IO ()\nmain = run_ shift_slices\n\nshift_slices :: Flag \"n\" '[\"slice-size\"] \"NUMBER\" \"size of a slice\" (Def \"3\" Int)\n             -> Flag \"o\" '[\"output\"] \"FILE\" \"output file\" (Def \"-\" FilePath)\n             -> Arg \"[FILEPATH]\" [FilePath]\n             -> Cmd \"Shift slicing\" ()\nshift_slices n o args = case get args of\n  [] -> liftIO $ bracket hdl hClose $ wrap (shiftSlice (get n)) stdin\n  fs -> liftIO $ bracket hdl hClose $ forM_ fs . shift_slice (get n)\n  where\n    hdl = if out == \"-\" then return stdout else openFile out WriteMode\n    out = get o\n\nshift_slice :: Int -> Handle -> FilePath -> IO ()\nshift_slice n o fp\n  = join $  either (hPutStrLn stderr . show') return\n        <$> try (withFile fp ReadMode (flip (wrap (shiftSlice n)) o))\n\nwrap :: (String -> String) -> Handle -> Handle -> IO ()\nwrap f i o\n  = join  $  either (hPutStrLn stderr . show') (hPutStr o . f)\n         <$> try (hGetContents i)\n\nshow' :: SomeException -> String\nshow' = show\n\n(to be continued)\n\u3053\u3053\u306b\u3042\u308b\u306e\u306f\uff0c\u300cHaskell\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4f8b\u300d\u3067\u3059\uff0e\u7b46\u8005\u81ea\u8eab\u304c\u300c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u74b0\u5883\u306e\u4f7f\u3044\u65b9\u3092\u304a\u3055\u3089\u3044\u300d\u3057\u305f\u69d8\u5b50\u3092\u793a\u3057\u305f\u3082\u306e\u3067\u3059\uff0e\u3082\u3063\u3068\u4e0a\u624b\u3044\u4f7f\u3044\u65b9\u304c\u3042\u308b\u3088\uff0e\u3053\u3046\u3057\u305f\u65b9\u304c\u3044\u3044\u3088\uff0e\u3068\u3044\u3046\u306e\u304c\u3042\u308c\u3070\u662f\u975e\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff0e\n\n\u3053\u306e\u8a18\u4e8b\u306f\u307e\u3060\u672a\u5b8c\u3067\u3059\uff0eAdvent Calendar\u671f\u9593\u4e2d\u306b\u3059\u3053\u3057\u305a\u3064\u66f8\u304d\u305f\u3057\u307e\u3059\uff0e\n\n(12/07 \u8ffd\u8a18\uff1a\u300c\u51fa\u529b\u5148\u306e\u6307\u5b9a\uff0c\u8907\u6570\u306e\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u6307\u5b9a\uff0c\u4f8b\u5916\u5bfe\u5fdc\u300d)\n(12/04 \u8ffd\u8a18\uff1a\u300c\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u300d)\n(12/03 \u8ffd\u8a18\uff1a\u300c\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u300d\u300cstack \u3092\u4f7f\u3063\u3066\u30c6\u30b9\u30c8\u3059\u308b\u300d)\n(12/02 \u8ffd\u8a18\uff1a\u300cshiftSlice \u6700\u521d\u306e\u5b9f\u88c5\u300d\u300c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u300d)\n\n## \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u74b0\u5883\u305d\u306e\u3082\u306e\u306e\u6e96\u5099\n\n### git\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\nUbuntu 14.04 LTS (64bit)\u306e\u5834\u5408\n\n```\nsudo apt-get install -y git-core\n```\n\n\u305d\u306e\u4ed6\u306e\u74b0\u5883\u3067\u306f\u305d\u308c\u306a\u308a\u306b\uff0e\n\n### stack \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\u3053\u308c\u3082Ubuntu 14.04 LTS (64bit)\u306e\u5834\u5408\u306e\u307f\u793a\u3057\u307e\u3059\uff0e\n[stack\u672c\u5bb6\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://docs.haskellstack.org/en/stable/install_and_upgrade.html#ubuntu)\u305d\u306e\u307e\u307e\uff0e\n\n```\necho 'deb http://download.fpcomplete.com/ubuntu/trusty stable main'|sudo tee /etc/apt/sources.list.d/fpco.list\nsudo apt-get update && sudo apt-get install stack -y\n```\n\n### GHC 7.10.2 \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nstack\u3092\u4f7f\u3063\u3066\uff0c\n\n```\nstack update\nstack setup 7.10.2\n```\n\n### \u74b0\u5883\u5909\u6570\u306e\u8a2d\u5b9a\n\n```zsh:.zshenv\nGHC_VERSION=ghc-7.10.2\nGHC_PATH=$HOME/.stack/programs/x86_64-linux/$GHC_VERSION/bin\nexport PATH=$HOME/.local/bin:$GHC_PATH:$PATH\n```\n\n### cabal-install\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```\nstack install cabal-install\n```\n\n### ghc-mod\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nghc-mod\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u306fstack.yaml\u306eextra-deps\u306bcabal-helper\u306e\u7248\u756a0.7\u672a\u6e800.6.1.0\u4ee5\u4e0a\u3092\u6307\u5b9a\u3059\u308b\n\n```yaml:stack.yaml\nflags: {}\nextra-package-dbs: []\npackages: []\nextra-deps:\n- cabal-helper-0.6.2.0\nresolver: lts-3.16\n```\n\nstack\u3092\u4f7f\u3063\u3066ghc-mod\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```\nstack install ghc-mod\n```\n\n## \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\n### GitHub\n\n\u65b0\u3057\u3044\u30ea\u30dd\u30b8\u30c8\u30ea\u4f5c\u6210\n\n- Repository: haskell-programming-example\n- Description: An Haskell Programming Example with GitHub and stack\n- Public\n- Initialize this repository with a README\n- Add .gitignore: Haskell\n- Add a license: BSD 3-clause \"New\" or \"Revised\" License\n\n- [Create repository]\n\n\n\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30ed\u30fc\u30ab\u30eb\u306b clone \u3057\u3066\uff0c\u305d\u3053\u306b\u79fb\u52d5\uff0e\n\n```\ngit clone git@github.com:nobsun/haskell-programming-example.git\ncd haskell-programming-example\n```\n\n### \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\n\ngit clone \u76f4\u5f8c\n\n```\n  +-- .git/\n  +-- .gitignore\n  +-- LICENSE\n  +-- README.md\n```\n\ncabal\u30d5\u30a1\u30a4\u30eb\u306e\u96db\u5f62\u3092\u4f5c\u6210\n\n```\ncabal init\n```\n\n\u3053\u306e\u6642\u70b9\u3067\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\n\n```\n  +-- .git/\n  +-- .gitignore\n  +-- LICENSE\n  +-- README.md\n  +-- Setup.hs\n  +-- haskell-programming-example.cabal\n```\n\nsrc/ \u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u30e2\u30b8\u30e5\u30fc\u30eb ShiftSlice \u3092\u7f6e\u304f\u4e88\u5b9a\nhaskell-programming-example.cabal\u3092\u7de8\u96c6\n\n```\nname:                haskell-programming-example\nversion:             0.1.0.0\nsynopsis:            Shift Slice Filter\ndescription:         This project is for demonstarating a short haskell programming example.\nhomepage:            http://github.com/nobsun/haskell-programming-example/\nlicense:             BSD3\nlicense-file:        LICENSE\nauthor:              nobsun\nmaintainer:          xxxxx@xxxxxx.xxx\nbuild-type:          Simple\nextra-source-files:  README.md\ncabal-version:       >=1.10\n\nlibrary\n  exposed-modules:     ShiftSlice\n  build-depends:       base >=4.8 && <4.9\n  hs-source-dirs:      src\n  default-language:    Haskell2010\n```\n\nsrc/ \u3092\u4f5c\u6210\n\n```\nmkdir src\n```\n\n### stack\u521d\u671f\u5316\n\n```\nstack init\n```\n\n\u76f4\u5f8c\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\n\n```\n  +-- .git/\n  +-- .gitignore\n  +-- .stack-work/\n  +-- LICENSE\n  +-- README.md\n  +-- Setup.hs\n  +-- haskell-programming-example.cabal\n  +-- stack.yaml\n```\n\n.stack-work/ \u3068 stack.yaml\u306f\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u306e\u307f\u6709\u52b9\u306a\u306e\u3067 .gitignore \u306b\u767b\u9332\n\n## \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8ab2\u984c\u306f\u4ee5\u4e0b\u306b\u3042\u3063\u305f\u3082\u306e\uff0e\n\n- [\u52dd\u624b\u306b\u304a\u984c---\u30c6\u30ad\u30b9\u30c8\u30d5\u30a3\u30eb\u30bf](http://blog.practical-scheme.net/shiro/20151103-gauche-example)\n- [8\u3064\u306e\u8a00\u8a9e\u3067\u30c6\u30ad\u30b9\u30c8\u30d5\u30a3\u30eb\u30bf\u3092\u66f8\u304d\u6bd4\u3079\u305f](http://d.hatena.ne.jp/eel3/20151102/1446476928)\n\n[8\u3064\u306e\u8a00\u8a9e\u3067\u30c6\u30ad\u30b9\u30c8\u30d5\u30a3\u30eb\u30bf\u3092\u66f8\u304d\u6bd4\u3079\u305f](http://d.hatena.ne.jp/eel3/20151102/1446476928)\u306b\u3088\u308c\u3070\uff0c\n\n> \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u304b\u3089\u6307\u5b9a\u3057\u305fbyte\u6570\uff08\u307e\u305f\u306f\u6587\u5b57\u6570\uff09\u3060\u3051\u51fa\u529b\u3057\u3001\u6539\u884c\u3092\u51fa\u529b\u3057\u3001\u5148\u982d\u304b\u30891byte\uff08\u307e\u305f\u306f1\u6587\u5b57\uff09\u30b7\u30d5\u30c8\u3057\u305f\u4f4d\u7f6e\u304b\u3089\u540c\u3058\u3088\u3046\u306b\u51fa\u529b\u3057\u3001\u6539\u884c\u3092\u51fa\u529b\u3057\u3001\u518d\u3073\u30b7\u30d5\u30c8\u3057\u2015\u2015\u3068\u3044\u3046\u3053\u3068\u3092\u30d5\u30a1\u30a4\u30eb\u7d42\u7aef\u307e\u3067\u7e70\u308a\u8fd4\u3059\u30b3\u30f3\u30bd\u30fc\u30eb\u30a2\u30d7\u30ea\u3060\u3002\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u3002\n>\n> ```\n> $ echo -n abcd | hcasl -n 1\n> a\n> b\n> c\n> d\n> $ echo -n abcd | hcasl -n 2\n> ab\n> bc\n> cd\n> $ echo -n abcd | hcasl -n 3\n> abc\n> bcd\n> ```\n\n\u3068\u3044\u3046\u30c6\u30ad\u30b9\u30c8\u30d5\u30a3\u30eb\u30bf\u3092\u66f8\u304f\u3068\u3044\u3046\u3082\u306e\n\n### ShiftSlice \u30e2\u30b8\u30e5\u30fc\u30eb\u96db\u5f62\n\nsrc/ShiftSlice.hs \u3092\u4f5c\u6210\uff0e\n\u5165\u51fa\u529b\u306f\u3042\u3068\u3067\u8003\u3048\u308b\u3053\u3068\u306b\u3057\u3066\uff0c\u6587\u5b57\u5217\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u3092\u8003\u3048\u308b\uff0e\n\u3068\u308a\u3042\u3048\u305a\u96db\u5f62\u3092\u3044\u308c\u3066\u304a\u304f\uff0e\n\n```haskell\nmodule ShiftSlice where\n\nshiftSlice :: Int -> String -> String\nshiftSlice n = const \"Not yet implemented.\\n\"\n````\n\n### \u30b3\u30de\u30f3\u30c9\u96db\u5f62\n\n\u5b9f\u884c\u5f62\u5f0f\u306e\u30b3\u30de\u30f3\u30c9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\uff0c\u305d\u306e\u7f6e\u304d\u5834 app/ \u3092\u4f5c\u6210\u3059\u308b\uff0e\n\n```\nmkdir app\n```\n\n\u5b9f\u884c\u5f62\u5f0f\u306e\u9805\u3092 haskell-programming-example.cabal \u306b\u8ffd\u52a0\n\n```\nexecutable shift-slice\n  hs-source-dirs:      app\n  main-is:             shift-slice.hs\n  ghc-options:         -rtsopts\n  build-depends:       base\n                     , haskell-programming-example\n  default-language:    Haskell2010\n```\n\napp/shift-slice.hs \u3092\u7de8\u96c6\uff0e\u3068\u308a\u3042\u3048\u305a\uff0cshiftSlice \u3092\u547c\u3076\u3060\u3051\uff0e\n\n```haskell\nmodule Main where\n\nimport ShiftSlice\n\nmain :: IO ()\nmain = interact (shiftSlice 3)\n```\n\n### build \u306e\u78ba\u8a8d\n\n\u3053\u308c\u3067\u3068\u308a\u3042\u3048\u305a build \u3067\u304d\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\uff0e\n\n```\nstack build\n```\n\nstack build \u304c\u6210\u529f\u3057\u305f\u3089\uff0c\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306f .stack-work/ \u4ee5\u4e0b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4f5c\u6210\u3055\u308c\u308b\uff0e\n\n```\necho -n \"abcdefg\" | .stack-work/dist/x86_64-linux/Cabal-1.22.4.0/build/shift-slice/shift-slice\nNot yet implemented.\n```\n\n\u3053\u308c\u3067\u6240\u5b9a\u306e\u30b3\u30de\u30f3\u30c9\u3092\u8a66\u3059\u305f\u3081\u306e\u571f\u53f0\u306f\u3067\u304d\u305f\u304b\u306a\uff0e\n\n### shiftSlice \u6700\u521d\u306e\u5b9f\u88c5\n\n\u6587\u5b57\u5217\u304b\u3089\u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u3068\u3044\u3046\u3053\u3068\u3067\u4ee5\u4e0b\u306e4\u3064\u306e\u5909\u63db\u3092\u5408\u6210\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u308b\uff0e\n\n(1) \u6587\u5b57\u5217\u304b\u3089\u30b7\u30d5\u30c8\u6587\u5b57\u5217\u30ea\u30b9\u30c8\u3078\u5909\u63db\n(2) \u5404\u6587\u5b57\u5217\u3092\u5148\u982dn\u6587\u5b57\u307e\u3067\u306e\u6587\u5b57\u5217\u3078\u5909\u63db\n(3) \u9577\u3055\u304cn\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\u306e\u307f\u63a1\u7528\u3057\u305f\u6587\u5b57\u5217\u30ea\u30b9\u30c8\u3078\u5909\u63db\n(4) \u5404\u6587\u5b57\u5217\u3092\u6539\u884c\u6587\u5b57\u3067\u7d42\u7aef\u3057\u3066\uff0c\u305d\u308c\u3089\u3092\u9023\u7d50\u3057\u30661\u3064\u306e\u6587\u5b57\u5217\u306b\u5909\u63db\n\n```haskell\nimport Data.List (tails)\n\nshiftSlice :: Int -> String -> String\nshiftSlice = unlines . takeWhile ((n ==) . length) . make (take n) . tails\n```\n\nbuild \u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\uff0e\n\n```\nstack build\necho -n \"abcdefg\" | .stack-work/dist/x86_64-linux/Cabal-1.22.4.0/build/shift-slice/shift-slice\nabc\nbcd\ncde\ndef\nefg\n```\n\n\u30b3\u30de\u30f3\u30c9\u306e\u96db\u5f62\u3067\u306f\u30b9\u30e9\u30a4\u30b9\u306e\u5927\u304d\u3055\u30923\u306b\u56fa\u5b9a\u3057\u3066 shiftSlice \u3092\u547c\u3093\u3067\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\uff0e\n\n### \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n\nHaskell\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u7528\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30b7\u30b9\u30c6\u30e0 Haddock \u3092\u4f7f\u3046\u3053\u3068\u3092\u524d\u63d0\u306b\uff0c\u30b3\u30e1\u30f3\u30c8\u3092\u4ed8\u3051\u3066\u304a\u3053\u3046\uff0e\n\n```haskell\n-- |\n-- \u6587\u5b57\u5217\u3092\u305d\u306e\u6587\u5b57\u5217\u306e\u5404\u30b7\u30d5\u30c8\u30b9\u30e9\u30a4\u30b9\u3092\u6539\u884c\u6587\u5b57\u3067\u7d42\u7aef\u3057\u3066\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u63d0\u4f9b\u3059\u308b\uff0e\n--\n--     * \u30b9\u30e9\u30a4\u30b9\u3068\u306f\u6587\u5b57\u5217\u306e\u5148\u982d\u304b\u3089\u6307\u5b9a\u3057\u305f\u9577\u3055\u5206\u3060\u3051\u5207\u308a\u51fa\u3057\u305f\u6587\u5b57\u5217\n--     * \u30b7\u30d5\u30c8\u30b9\u30e9\u30a4\u30b9\u3068\u306f\u6587\u5b57\u5217\u30921\u6587\u5b57\u305a\u3064\u30b7\u30d5\u30c8\u3057\u306a\u304c\u3089\u751f\u6210\u3057\u305f\u30b9\u30e9\u30a4\u30b9\n\nmodule ShiftSlice where\n\nimport Data.List (tails)\n\n-- | 4\u3064\u306e\u5909\u63db\u3092\u95a2\u6570\u5408\u6210\u3059\u308b\u5b9f\u88c5\n--\n--       (1) \u6587\u5b57\u5217\u304b\u3089\u30b7\u30d5\u30c8\u6587\u5b57\u5217\u30ea\u30b9\u30c8\u3078\u5909\u63db\n--       (2) \u5404\u6587\u5b57\u5217\u3092\u5148\u982dn\u6587\u5b57\u307e\u3067\u306e\u6587\u5b57\u5217\u3078\u5909\u63db\n--       (3) \u9577\u3055\u304cn\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\u306e\u307f\u63a1\u7528\u3057\u305f\u6587\u5b57\u5217\u30ea\u30b9\u30c8\u3078\u5909\u63db\n--       (4) \u5404\u6587\u5b57\u5217\u3092\u6539\u884c\u6587\u5b57\u3067\u7d42\u7aef\u3057\u3066\uff0c\u305d\u308c\u3089\u3092\u9023\u7d50\u3057\u30661\u3064\u306e\u6587\u5b57\u5217\u306b\u5909\u63db\n\nshiftSlice :: Int -> String -> String\nshiftSlice n = unlines . takeWhile ((n ==) . length) . map (take n) . tails\n```\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u30b9\u30bf\u30c3\u30af\u3092\u4f7f\u3063\u3066\u751f\u6210\u3059\u308b\uff0e\u751f\u6210\u3057\u305f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f Web \u30d6\u30e9\u30a6\u30b6\u3067\u8aad\u3081\u308b\uff0e\n\n```\nstack haddock\ngoogle-chrome .stack-work/dist/x86_64-linux/Cabal-1.22.4.0/doc/html/haskell-programming-example/index.html\n```\n\n### \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\n\nhaddock \u306f\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306e\u8a18\u6cd5\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\uff0e\n\n```haskell\n-- | 4\u3064\u306e\u5909\u63db\u3092\u95a2\u6570\u5408\u6210\u3059\u308b\u5b9f\u88c5\n--\n--       (1) \u6587\u5b57\u5217\u304b\u3089\u30b7\u30d5\u30c8\u6587\u5b57\u5217\u30ea\u30b9\u30c8\u3078\u5909\u63db\n--       (2) \u5404\u6587\u5b57\u5217\u3092\u5148\u982dn\u6587\u5b57\u307e\u3067\u306e\u6587\u5b57\u5217\u3078\u5909\u63db\n--       (3) \u9577\u3055\u304cn\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\u306e\u307f\u63a1\u7528\u3057\u305f\u6587\u5b57\u5217\u30ea\u30b9\u30c8\u3078\u5909\u63db\n--       (4) \u5404\u6587\u5b57\u5217\u3092\u6539\u884c\u6587\u5b57\u3067\u7d42\u7aef\u3057\u3066\uff0c\u305d\u308c\u3089\u3092\u9023\u7d50\u3057\u30661\u3064\u306e\u6587\u5b57\u5217\u306b\u5909\u63db\n--\n-- >>> putStr $ shiftSlice 3 \"abcdefg\"\n-- abc\n-- bcd\n-- cde\n-- def\n-- efg\n\nshiftSlice :: Int -> String -> String\nshiftSlice n = unlines . takeWhile ((n ==) . length) . map (take n) . tails\n```\n\ndoctest \u3092\u4f7f\u3063\u3066\uff0c``>>>`` \u306e\u884c\u304c\u8a08\u7b97\u3055\u308c\u3066\u7d50\u679c\u304c\u305d\u308c\u4ee5\u4e0b\u306e\u8a18\u8ff0\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\uff0e\n\n```\nstack install doctest\ndoctest src/ShiftSlice.hs\n```\n\n\u3053\u308c\u3067\uff0c``Examples: 1  Tried: 1  Errors: 0  Failures: 0`` \u3068\u3044\u3046\u8868\u793a\u304c\u3067\u308c\u3070 OK\uff0e\n\n### stack \u3092\u4f7f\u3063\u3066\u30c6\u30b9\u30c8\u3059\u308b\n\n\u307e\u305a ``haskell-programming-example.cabal`` \u30d5\u30a1\u30a4\u30eb\u306b\u4ee5\u4e0b\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u8ffd\u52a0\u3059\u308b\uff0e\n\n```\ntest-suite doctest\n  type:                exitcode-stdio-1.0\n  hs-source-dirs:      test, src\n  main-is:             doctesting.hs\n  build-depends:       base\n                     , haskell-programming-example\n                     , doctest\n  ghc-options:         -rtsopts\n  default-language:    Haskell2010\n```\n\n\u3064\u304e\u306b doctest \u306e\u30c6\u30b9\u30c8\u5b9f\u884c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0 ``test/doctesting.hs`` \u3092\u4f5c\u6210\u3059\u308b\uff0e\n\n```haskell\nmodule Main where\n\nimport Test.DocTest\n\nmain :: IO ()\nmain = doctest [\"src/ShiftSlice.hs\"]\n```\n\n\u3053\u308c\u3067 stack \u3092\u4f7f\u3063\u3066\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u304c\u3067\u304d\u308b\uff0e\n\n```\nstack test\n```\n\n### \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\n\n\u30b9\u30e9\u30a4\u30b9\u306e\u5927\u304d\u3055\u3092\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3088\u3046\uff0e\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u89e3\u6790\u306b\u306f @tanakh \u3055\u3093\u306e [optparse-declative](http://hackage.haskell.org/package/optparse-declarative) \u304c\u4f7f\u3044\u3084\u3059\u305d\u3046\uff0e\n\u4f7f\u3044\u65b9\u306f [optparse-declarative: \u5ba3\u8a00\u7684\u306a\u578b\u30ec\u30d9\u30eb\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30d1\u30fc\u30b6\u30fc](http://qiita.com/tanakh/items/b6ea4c65d8ed511ac98d) \u306b\u89e3\u8aac\u304c\u3042\u308b\uff0e\n\n``haskell-programming-example.cabal`` \u306e ``executable shift-slice``\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u308b\uff0e\n\n```\nexecutable shift-slice\n  hs-source-dirs:      app\n  main-is:             shift-slice.hs\n  ghc-options:         -rtsopts\n  build-depends:       base\n                     , mtl\n                     , optparse-declarative\n                     , haskell-programming-example\n  default-language:    Haskell2010\n```\n\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b ``app/shift-slice.hs`` \u3092\u66f8\u304d\u63db\u3048\u308b\uff0e\n\n```haskell\n{-# LANGUAGE DataKinds #-}\nmodule Main where\n\nimport Control.Monad.Trans (liftIO)\nimport Options.Declarative\nimport ShiftSlice\n\nmain :: IO ()\nmain = run_ shift_slice\n\nshift_slice :: Flag \"n\" '[\"slice-size\"] \"NUMBER\" \"size of a slice\" (Def \"3\" Int)\n            -> Cmd \"Shift slicing\" ()\nshift_slice n = liftIO $ putStr . shiftSlice (get n) =<< getContents\n```\n\n\u5b9f\u884c\u4f8b\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\uff0e\n\n```\nstack build\necho -n abcdefghijklmn | .stack-work/dist/x86_64-linux/Cabal-1.22.4.0/build/shift-slice/shift-slice --slice-size=5\nabcde\nbcdef\ncdefg\ndefgh\nefghi\nfghij\nghijk\nhijkl\nijklm\njklmn\n```\n\n### \u51fa\u529b\u5148\u306e\u6307\u5b9a\uff0c\u8907\u6570\u306e\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u6307\u5b9a\uff0c\u4f8b\u5916\u5bfe\u5fdc\n\n\u30b3\u30de\u30f3\u30c9\u95a2\u6570\u3092\u5909\u66f4\u3057\u3066\uff0c\u51fa\u529b\u5148\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3088\u308b\u6307\u5b9a\u3068\uff0c\u8907\u6570\u306e\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u3092\u5f15\u6570\u3067\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\uff0e\n\n\u3055\u3089\u306b\uff0c\u5165\u51fa\u529b\u5b9f\u884c\u6642\u306e\u4f8b\u5916\u306b\u5bfe\u5fdc\u3059\u308b\u3088\u3046\u306b\u3057\u305f\uff0e\n\n```haskell\n{-# LANGUAGE DataKinds #-}\nmodule Main where\n\nimport Control.Applicative ((<$>))\nimport Control.Exception\nimport Control.Monad\nimport Control.Monad.Trans (liftIO)\nimport Data.Traversable (forM)\nimport System.IO\nimport Options.Declarative\nimport ShiftSlice (shiftSlice)\n\nmain :: IO ()\nmain = run_ shift_slices\n\nshift_slices :: Flag \"n\" '[\"slice-size\"] \"NUMBER\" \"size of a slice\" (Def \"3\" Int)\n             -> Flag \"o\" '[\"output\"] \"FILE\" \"output file\" (Def \"-\" FilePath)\n             -> Arg \"[FILEPATH]\" [FilePath]\n             -> Cmd \"Shift slicing\" ()\nshift_slices n o args = case get args of\n  [] -> liftIO $ bracket hdl hClose $ wrap (shiftSlice (get n)) stdin\n  fs -> liftIO $ bracket hdl hClose $ forM_ fs . shift_slice (get n)\n  where\n    hdl = if out == \"-\" then return stdout else openFile out WriteMode\n    out = get o\n\nshift_slice :: Int -> Handle -> FilePath -> IO ()\nshift_slice n o fp\n  = join $  either (hPutStrLn stderr . show') return\n        <$> try (withFile fp ReadMode (flip (wrap (shiftSlice n)) o))\n\nwrap :: (String -> String) -> Handle -> Handle -> IO ()\nwrap f i o\n  = join  $  either (hPutStrLn stderr . show') (hPutStr o . f)\n         <$> try (hGetContents i)\n\nshow' :: SomeException -> String\nshow' = show\n```\n\n(to be continued)\n", "tags": ["Haskell", "stack"]}