{"context": "\u5b66\u3093\u3060\u3053\u3068\u307e\u3068\u3081\n\n\u5b9a\u578bImport\n\nimport_snippet.py\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nmatplotlib.style.use(\"ggplot\")\n%matplotlib inline\n\n\n\nnumpy\u3082crosstab\u6642\u306bsum\u3059\u308b\u5834\u5408\u306a\u3069\u306b\u4f7f\u3046\u306e\u3067Import\u3057\u3066\u304a\u304f\nseaborn\u307e\u3060\u4f7f\u3063\u3066\u306a\u3044 -> \u3088\u304f\u4f7f\u3046\u3088\u3046\u306b\u306a\u3063\u305f\n\n\nmatplotlib\u3067\u3069\u308c\u3060\u3051\u3081\u3093\u3069\u3046\u304b\u3092\u628a\u63e1\u3057\u305f\u4e0a\u3067\u4f7f\u3046\u65b9\u304c\u3044\u3044\n\n\n\n\nnumpy\n\none value\n\nnp.zeros\n\n\n\u914d\u5217\u78ba\u4fdd\n\n\nnp.ones\n\n\nIntercept\n\n\nnp.full\n\n\nrange\n\u5b9f\u9a13\u7528\u30c7\u30fc\u30bf, \u30e2\u30c7\u30eb\u306eplot\u306a\u3069)\n\nnp.arange\n\n\nrange\u3068\u307b\u307c\u540c\u69d8\n\n\nnp.linspace\n\n\nN\u5206\u5272\u7528\n\n\nnp.random.rand\u7cfb\n\n\n\u5404\u5206\u5e03\u306b\u5bfe\u5fdc\n\n\n\n\nmean / average\n\nmean\u306f\u3001\u7b97\u8853\u5e73\u5747\naverage\u306f\u3001\u91cd\u307f\u3092\u4ed8\u3051\u3089\u308c\u308b\n\n\nravel / flatten\n\nravel\u306f\u3001\u53c2\u7167\u3092\u7dad\u6301\nflatten\u306f\u3001copy\n\n\n.T, transpose\n\u3069\u3061\u3089\u3082\u53c2\u7167\u3092\u7dad\u6301\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3000.T\u3067\u3088\u3044\n\n\u7d50\u5408\nndarray\u306e\u7d50\u5408\n\nother\n\nnp.eye\n\n\n\u5bfe\u89d2\u884c\u5217\n\n\nnp.nansum,nanmean, etc.\n\n\nNA\u5bfe\u5fdc\npandas\u306fdefault\n\n\n\nnp.diff(x, n=2) \u306f2\u56denp.diff\u3059\u308b\u610f\u5473\n\n\n\npd.Series.diff(periods=2)\u3068\u306f\u9055\u3046\n\n\n\n\npandas\n\nDataFrame\u306erow \u3092Index\u6307\u5b9a\u3057\u3066\u524a\u9664\ndf.drop(\"All\")\ndf.pivot_table\u3084pd.crosstab\u3067\u7247\u65b9\u3060\u3051\u6b32\u3057\u3044\u3068\u304d\u306b\n\naccess cell (row/col)\n\ndf.iloc[0, \"column\"]\npython\u306eset/get\u306b\u95a2\u308f\u308bmagic method\u3067\u5bfe\u5fdc\u3057\u3066\u3044\u308b\n\n\nfilter rows\n\npandas_filter_rows.py\n(df.loc[indexer, columns]\n   .[lambda d: d.column1 == \"a\"]\n   .pipe(lambda d: d[d.column2.notnull()])\n\n\n\nfilter columns\ndf.filter([column1, column2])\n\n\u4ee3\u5165\u306eMethod\n\ndf.assign(column=series)\nmethod chain\u3068\u3057\u3066\n\u305f\u3060\u3057\u9806\u756a\u3092\u6c17\u306b\u3059\u308b\u5834\u5408\u306f\uff11\u3064\u305a\u3064 or \u6607\u9806\u306b\u554f\u984c\u304c\u306a\u3044\u5834\u5408\n\n\ngroup\u5316\u5f8c\u306eungroup(multi index -> index)\n\ngroupby(columns).sum().reset_index()\nreset_index\u524d\u63d0\u306a\u3089\u3070, groupby(columns, as_index=False)\n\n\n\ndate range\n\n\u6708\u3054\u3068\u306erange\n\npd.date_range(start_date, end_date, freq=\"MS\")\ndatetutil\u3088\u308a\u7c21\u5358\u306b\u6271\u3048\u308b\u306e\u3067\u3001\u5206\u6790\u7d61\u3080\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306a\u3089\u3044\u3044\u3068\u601d\u3046\n\u9006\u306bPython web application\u3060\u3068pandas\u306a\u3055\u305d\u3046\n\n\n\u904e\u53bbN\u65e5\n\npd.range\u306estart\u306f\u5fc5\u9808\u3067\u306f\u306a\u3044\nend\u3068periods\u3092\u6307\u5b9a\u3057\u3066\u3042\u3052\u308c\u3070\u3088\u3044\n\n\n\u7d50\u5408\n\n\u7e26\npd.concat(df_list, ingnore_index=True)\n\u6b63\u76f4\u3001\u3042\u307e\u308a\u4f7f\u308f\u306a\u3044\u3068\u601d\u3046\u3051\u3069\u30e1\u30e2\n\nappend\nDataFrame\u306b\u3057\u306a\u3044\u3068(index\u304c\u306a\u3044\u3068)index error\n\nappend_sum_of_row.py\ndf = pd.DataFrame([range(3), range(2)])\ns = df.sum()\ndf = df.append({0:0,1:2,2:2}, ignore_index=True)\ndf = df.append(s, ignore_index=True)\ndf = df.append(pd.DataFrame({'sum': s}).T)\ndf.append()\n\n\n     0  1  2\n0    0  1  2\n1    0  1  NaN\n2    0  2  2\n3    0  2  2\nsum  0  2  2\n\n\n\u6a2a\u7d50\u5408\n\npd.concat(df_list, axis=1)\n\u308f\u3056\u308f\u3056merge\u3059\u308b\u5fc5\u8981\u306a\u3044\u3068\u304d\ndummy\u4f5c\u3063\u305f\u3042\u3068\u306emerge\u306a\u3069\n\n\njoin\nby index\n\nmerge\nby column\n\nseries\n\n\u6587\u5b57\u5217\u7cfbUtility\u3092\u6271\u3046\n\nseries.str.method\nseries.dt.method \u306f0.17\u304b\u3089\nwindow function\u30820.18.1\u304b\u3089\n\n\n\u69cb\u6210\u6bd4\u7387\u3092\u898b\u308b\u6642\u306e\u5b9a\u578b\n\n\u305f\u3060\u3057\u6b63\u306e\u6570\u306b\u5bfe\u3057\u3066\ndf.div(df.sum(axis=1), 0).plot(kind=\"bar\", stacked=True)\n\n\nothers\n\n\u5909\u5316\u7387\n\n\n(nth - (n-1)th) / (n-1)th, shift\u3060\u3068\u7c21\u6f54\u306b\u8868\u305b\u305d\u3046\u3060\u304c\nseries.pct_change \u3068\u3044\u3046method\u304c\u3042\u308b\n\n\n\u81ea\u5df1\u76f8\u95a2\n\n\nseries.corr(series.shift())\n\n\nmasking\n\n\nmask\u306f\u6761\u4ef6\u306b\u5408\u3046\u3082\u306e\u3092mask\nwhere\u306f\u6761\u4ef6\u306b\u5408\u308f\u306a\u3044\u3082\u306e\u3092mask\napply\u3058\u3083\u306a\u304f\u3066\u3082\u3067\u304d\u308b\u3053\u3068\u304c\u3042\u308b\n\n\n\u4e0a\u9650\u4e0b\u9650\u306e\u8a2d\u5b9a\n\n\npd.Series(range(4)).clip(lower=1, upper=2)  == pd.Series([1,1,2,2])\n0,1,2,3 to 1,1,2,2\n\n\n\n\nmatplotlib\n\n\u8907\u6570\u30b0\u30e9\u30d5\nfigure, axes = plt.subplots(3, 2, sharex=\"col\", sharey=\"row\")\ndf.plot(ax=axes[0][0], title=\"title\")\n\n## axes: ndarray\naxes[0, 0].legend(bbox_to_anchor=(2, 2), ncol=3)\naxes[0, 1].legend_.remove()\naxes[0, 0].set_ylabel(\"y label\")\naxes[0, 0].set_ylim([0, 1])\n\nplt.tight_layout()\n\n\nsubplots\u3067\u4f5c\u6210\u3055\u308c\u305f\u8ef8\u914d\u5217\u3092\uff11\u6b21\u5143\u306b\u3059\u308b\nsubplots\u3067\u4f5c\u6210\u3055\u308c\u305f\u8ef8\u3092\u7c21\u5358\u306b\u6271\u3046\n\n\u5206\u985e\u9818\u57df\nmeshgrid\u3068contourf\u3092\u53ef\u8996\u5316\u3057\u3066\u7406\u89e3\u3057\u3066\u307f\u305f\n\n\u65e5\u672c\u8a9efont\n\n~.ipython\\profile_default \u306b\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u304a\u304f ipython profile create\n\nC:\\Windows\\Fonts \u304b\u3089\u30d5\u30a9\u30f3\u30c8\u3092\u9078\u3073\nC:\\Anaconda3\\pkgs\\matplotlib-1.4.3-np19py34_1\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf \u306b\u30b3\u30d4\u30fc\u3057\u3066\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3059\u308b\n\n\nipython_kernel_config.py\nc.InlineBackend.rc = {\n    'font.family': 'meiryo',\n}\n\n\n\nmatplotlib_font_manager.py\niimport matplotlib.font_manager as fm\n\n# \u73fe\u5728\u30d5\u30a9\u30f3\u30c8\nmatplotlib.rcParams.get('font.family')\nprop = fm.FontProperties(fname=\"ttc or ttf\")\n# \u3053\u308c\u3092plot\u6642\u306b\u6e21\u3059\uff08\u3081\u3093\u3069\u3046\n\n\n\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u306fWindows\u306e\u5834\u5408\u3046\u307e\u304f\u3044\u304b\u306a\u304b\u3063\u305f\nttc\u76f4\u63a5\u6307\u5b9a\u306e\u5834\u5408\u306f\u3046\u307e\u304f\u3044\u304f\nWindows\u306e\u5834\u5408\u3001ttc\u3092ttf\u306b\u5206\u89e3\u3057\u3066\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u3066\u6307\u5b9a\u3059\u308c\u3070\u826f\u3044\uff1f\n\n\n\u5229\u7528\u53ef\u80fd\u306a\u30d5\u30a9\u30f3\u30c8\u4e00\u89a7\n\nmatplotlib_find_system_fonts.py\nimport matplotlib.font_manager as fm\nfont_files = pd.DataFrame(fm.findSystemFonts(), columns=list(\"a\"))\nfont_files.head()\n\n\n\nmac\n\nmatplotlib_font_setting.sh\n#Font Book.app\u3067\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u898b\u3064\u3051\u3066\u4e2d\u8eab\u3092\u78ba\u8a8d\u3059\u308b\n#Go2ShellHelper.app\u3068\u304b\u3042\u308b\u3068\u4fbf\u5229\nfind `pyenv prefix` -name matplotlib\ncd \u4e0a\u8a18\u3067\u898b\u3064\u3051\u305fmatplotlib\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea/mpl-data/\ncp matplotlibrc ~/.matplotlib #\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u3057\u3066Copy\n#font.family : \u65e5\u672c\u8a9e\u53ef\u80fd\u30d5\u30a9\u30f3\u30c8\u540d\u3068\u4fee\u6b63\ncp font_file.ttf matplotlib\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea/mpl-data/fonts/\n\n\n\u5b66\u3093\u3060\u3053\u3068\u307e\u3068\u3081\n\n## \u5b9a\u578bImport\n```py3:import_snippet.py\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nmatplotlib.style.use(\"ggplot\")\n%matplotlib inline\n```\n\n- numpy\u3082crosstab\u6642\u306bsum\u3059\u308b\u5834\u5408\u306a\u3069\u306b\u4f7f\u3046\u306e\u3067Import\u3057\u3066\u304a\u304f\n- seaborn\u307e\u3060\u4f7f\u3063\u3066\u306a\u3044 -> \u3088\u304f\u4f7f\u3046\u3088\u3046\u306b\u306a\u3063\u305f\n    - matplotlib\u3067\u3069\u308c\u3060\u3051\u3081\u3093\u3069\u3046\u304b\u3092\u628a\u63e1\u3057\u305f\u4e0a\u3067\u4f7f\u3046\u65b9\u304c\u3044\u3044\n\n## numpy\n### one value\n- np.zeros\n    - \u914d\u5217\u78ba\u4fdd\n- np.ones\n    - Intercept\n- np.full\n\n### range\n\u5b9f\u9a13\u7528\u30c7\u30fc\u30bf, \u30e2\u30c7\u30eb\u306eplot\u306a\u3069)\n\n- np.arange\n    - range\u3068\u307b\u307c\u540c\u69d8\n- np.linspace\n    - N\u5206\u5272\u7528\n- np.random.rand\u7cfb\n    - \u5404\u5206\u5e03\u306b\u5bfe\u5fdc\n\n### mean / average\n- mean\u306f\u3001\u7b97\u8853\u5e73\u5747\n- average\u306f\u3001\u91cd\u307f\u3092\u4ed8\u3051\u3089\u308c\u308b\n\n### ravel / flatten\n- ravel\u306f\u3001\u53c2\u7167\u3092\u7dad\u6301\n- flatten\u306f\u3001copy\n\n### .T, transpose\n\u3069\u3061\u3089\u3082\u53c2\u7167\u3092\u7dad\u6301\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3000.T\u3067\u3088\u3044\n\n### \u7d50\u5408\n[ndarray\u306e\u7d50\u5408](http://qiita.com/ksomemo/items/2f0ce6a88e619db0beef)\n\n### other\n- np.eye\n    - \u5bfe\u89d2\u884c\u5217\n- np.nansum,nanmean, etc.\n    - NA\u5bfe\u5fdc\n    - pandas\u306fdefault\n- `np.diff(x, n=2)` \u306f2\u56denp.diff\u3059\u308b\u610f\u5473\n    - `pd.Series.diff(periods=2)`\u3068\u306f\u9055\u3046\n\n## pandas\n### DataFrame\u306erow \u3092Index\u6307\u5b9a\u3057\u3066\u524a\u9664\n`df.drop(\"All\")`\n\ndf.pivot_table\u3084pd.crosstab\u3067\u7247\u65b9\u3060\u3051\u6b32\u3057\u3044\u3068\u304d\u306b\n\n### access cell (row/col)\n- df.iloc[0, \"column\"]\n- python\u306eset/get\u306b\u95a2\u308f\u308bmagic method\u3067\u5bfe\u5fdc\u3057\u3066\u3044\u308b\n\n### filter rows\n```py3:pandas_filter_rows.py\n(df.loc[indexer, columns]\n   .[lambda d: d.column1 == \"a\"]\n   .pipe(lambda d: d[d.column2.notnull()])\n```\n\n### filter columns\ndf.filter([column1, column2])\n\n### \u4ee3\u5165\u306eMethod\n- df.assign(column=series)\n- method chain\u3068\u3057\u3066\n- \u305f\u3060\u3057\u9806\u756a\u3092\u6c17\u306b\u3059\u308b\u5834\u5408\u306f\uff11\u3064\u305a\u3064 or \u6607\u9806\u306b\u554f\u984c\u304c\u306a\u3044\u5834\u5408\n\n### group\u5316\u5f8c\u306eungroup(multi index -> index)\n- `groupby(columns).sum().reset_index()`\n- reset_index\u524d\u63d0\u306a\u3089\u3070, `groupby(columns, as_index=False)`\n\n### date range\n#### \u6708\u3054\u3068\u306erange\n- `pd.date_range(start_date, end_date, freq=\"MS\")`\n- datetutil\u3088\u308a\u7c21\u5358\u306b\u6271\u3048\u308b\u306e\u3067\u3001\u5206\u6790\u7d61\u3080\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306a\u3089\u3044\u3044\u3068\u601d\u3046\n- \u9006\u306bPython web application\u3060\u3068pandas\u306a\u3055\u305d\u3046\n\n#### \u904e\u53bbN\u65e5\n- pd.range\u306estart\u306f\u5fc5\u9808\u3067\u306f\u306a\u3044\n- end\u3068periods\u3092\u6307\u5b9a\u3057\u3066\u3042\u3052\u308c\u3070\u3088\u3044\n\n### \u7d50\u5408\n#### \u7e26\n`pd.concat(df_list, ingnore_index=True)`\n\n\u6b63\u76f4\u3001\u3042\u307e\u308a\u4f7f\u308f\u306a\u3044\u3068\u601d\u3046\u3051\u3069\u30e1\u30e2\n\n##### append\nDataFrame\u306b\u3057\u306a\u3044\u3068(index\u304c\u306a\u3044\u3068)index error\n\n```py3:append_sum_of_row.py\ndf = pd.DataFrame([range(3), range(2)])\ns = df.sum()\ndf = df.append({0:0,1:2,2:2}, ignore_index=True)\ndf = df.append(s, ignore_index=True)\ndf = df.append(pd.DataFrame({'sum': s}).T)\ndf.append()\n```\n\n<pre>\n     0  1  2\n0    0  1  2\n1    0  1  NaN\n2    0  2  2\n3    0  2  2\nsum  0  2  2\n</pre>\n\n#### \u6a2a\u7d50\u5408\n- `pd.concat(df_list, axis=1)`\n- \u308f\u3056\u308f\u3056merge\u3059\u308b\u5fc5\u8981\u306a\u3044\u3068\u304d\n- dummy\u4f5c\u3063\u305f\u3042\u3068\u306emerge\u306a\u3069\n\n#### join\nby index\n\n#### merge\nby column\n\n### series\n#### \u6587\u5b57\u5217\u7cfbUtility\u3092\u6271\u3046\n- series.str.method\n- series.dt.method \u306f0.17\u304b\u3089\n- window function\u30820.18.1\u304b\u3089\n\n### \u69cb\u6210\u6bd4\u7387\u3092\u898b\u308b\u6642\u306e\u5b9a\u578b\n- \u305f\u3060\u3057\u6b63\u306e\u6570\u306b\u5bfe\u3057\u3066\n- df.div(df.sum(axis=1), 0).plot(kind=\"bar\", stacked=True)\n\n### others\n- \u5909\u5316\u7387\n    - (nth - (n-1)th) / (n-1)th, shift\u3060\u3068\u7c21\u6f54\u306b\u8868\u305b\u305d\u3046\u3060\u304c\n    - series.pct_change \u3068\u3044\u3046method\u304c\u3042\u308b\n- \u81ea\u5df1\u76f8\u95a2\n    - series.corr(series.shift())\n- masking\n    - mask\u306f\u6761\u4ef6\u306b\u5408\u3046\u3082\u306e\u3092mask\n    - where\u306f\u6761\u4ef6\u306b\u5408\u308f\u306a\u3044\u3082\u306e\u3092mask\n    - apply\u3058\u3083\u306a\u304f\u3066\u3082\u3067\u304d\u308b\u3053\u3068\u304c\u3042\u308b\n- \u4e0a\u9650\u4e0b\u9650\u306e\u8a2d\u5b9a\n    - `pd.Series(range(4)).clip(lower=1, upper=2)  == pd.Series([1,1,2,2])`\n    - 0,1,2,3 to 1,1,2,2\n\n## matplotlib\n### \u8907\u6570\u30b0\u30e9\u30d5\n```\nfigure, axes = plt.subplots(3, 2, sharex=\"col\", sharey=\"row\")\ndf.plot(ax=axes[0][0], title=\"title\")\n\n## axes: ndarray\naxes[0, 0].legend(bbox_to_anchor=(2, 2), ncol=3)\naxes[0, 1].legend_.remove()\naxes[0, 0].set_ylabel(\"y label\")\naxes[0, 0].set_ylim([0, 1])\n\nplt.tight_layout()\n```\n\n### subplots\u3067\u4f5c\u6210\u3055\u308c\u305f\u8ef8\u914d\u5217\u3092\uff11\u6b21\u5143\u306b\u3059\u308b\n[subplots\u3067\u4f5c\u6210\u3055\u308c\u305f\u8ef8\u3092\u7c21\u5358\u306b\u6271\u3046](http://qiita.com/ksomemo/items/38b6e9f8f3ff52a029b8)\n\n### \u5206\u985e\u9818\u57df\n[meshgrid\u3068contourf\u3092\u53ef\u8996\u5316\u3057\u3066\u7406\u89e3\u3057\u3066\u307f\u305f](http://qiita.com/ksomemo/items/81c88378a1dffa5cbea7)\n\n\n### \u65e5\u672c\u8a9efont\n1. ~\\.ipython\\profile_default \u306b\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u304a\u304f `ipython profile create`\n1. C:\\Windows\\Fonts \u304b\u3089\u30d5\u30a9\u30f3\u30c8\u3092\u9078\u3073\n1. C:\\Anaconda3\\pkgs\\matplotlib-1.4.3-np19py34_1\\Lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf \u306b\u30b3\u30d4\u30fc\u3057\u3066\n1. \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3059\u308b\n\n```py3:ipython_kernel_config.py\nc.InlineBackend.rc = {\n    'font.family': 'meiryo',\n}\n```\n\n```py3:matplotlib_font_manager.py\niimport matplotlib.font_manager as fm\n\n# \u73fe\u5728\u30d5\u30a9\u30f3\u30c8\nmatplotlib.rcParams.get('font.family')\nprop = fm.FontProperties(fname=\"ttc or ttf\")\n# \u3053\u308c\u3092plot\u6642\u306b\u6e21\u3059\uff08\u3081\u3093\u3069\u3046\n```\n\n- \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u306fWindows\u306e\u5834\u5408\u3046\u307e\u304f\u3044\u304b\u306a\u304b\u3063\u305f\n- ttc\u76f4\u63a5\u6307\u5b9a\u306e\u5834\u5408\u306f\u3046\u307e\u304f\u3044\u304f\n- Windows\u306e\u5834\u5408\u3001ttc\u3092ttf\u306b\u5206\u89e3\u3057\u3066\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u3066\u6307\u5b9a\u3059\u308c\u3070\u826f\u3044\uff1f\n\n## \u5229\u7528\u53ef\u80fd\u306a\u30d5\u30a9\u30f3\u30c8\u4e00\u89a7\n```py3:matplotlib_find_system_fonts.py\nimport matplotlib.font_manager as fm\nfont_files = pd.DataFrame(fm.findSystemFonts(), columns=list(\"a\"))\nfont_files.head()\n```\n\n### mac\n```bash:matplotlib_font_setting.sh\n#Font Book.app\u3067\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u898b\u3064\u3051\u3066\u4e2d\u8eab\u3092\u78ba\u8a8d\u3059\u308b\n#Go2ShellHelper.app\u3068\u304b\u3042\u308b\u3068\u4fbf\u5229\nfind `pyenv prefix` -name matplotlib\ncd \u4e0a\u8a18\u3067\u898b\u3064\u3051\u305fmatplotlib\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea/mpl-data/\ncp matplotlibrc ~/.matplotlib #\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u3057\u3066Copy\n#font.family : \u65e5\u672c\u8a9e\u53ef\u80fd\u30d5\u30a9\u30f3\u30c8\u540d\u3068\u4fee\u6b63\ncp font_file.ttf matplotlib\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea/mpl-data/fonts/\n```\n", "tags": ["memo"]}