{"context": "\n\n\u306f\u3058\u3081\u306b\niOS9\u4ee5\u4e0a\u306e\u307f\u306e\u30b5\u30dd\u30fc\u30c8\u3067\u3059\u304c\u3001\nCollectionViewCell\u3092\u7c21\u5358\u306b\u79fb\u52d5\u3067\u304d\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u3053\u3068\u3092\u6700\u8fd1\u77e5\u308a\u307e\u3057\u305f\u306e\u3067\u3001\n\u5171\u6709\u3057\u307e\u3059\u3002\uff08\u9045\uff09\n\n\u52d5\u4f5c\u30a4\u30e1\u30fc\u30b8\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u307e\u305a\u306f\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5fa1\u89a7\u304f\u3060\u3055\u3044\u3002\nCollectionView\u306e\u5b9f\u88c5\u81ea\u4f53\u306f\u3001\u7279\u5225\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\u30ed\u30f3\u30b0\u30bf\u30c3\u30d7\u306e\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u90e8\u5206\u306b\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nViewController.swift\nimport UIKit\n\nclass ViewController: UIViewController {\n\n    @IBOutlet weak var collectionView: UICollectionView!\n    private var numbers = [Int]()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        numbers = loadTestData()\n        addEventListner()\n    }\n\n    //\u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u3067\u3059\n    private func loadTestData() -> [Int]{\n\n        for i in 1...100 {\n            numbers.append(i)\n        }\n        return numbers\n    }\n\n    private func addEventListner() {\n        let longPressGesture = UILongPressGestureRecognizer(target: self,\n                                                            action: #selector(self.handleLongGesture(_:)))\n        collectionView.addGestureRecognizer(longPressGesture)\n    }\n\n    //\u3053\u3053\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\n    func handleLongGesture(gesture: UILongPressGestureRecognizer) {\n\n        switch(gesture.state) {\n\n        case UIGestureRecognizerState.Began:\n            guard let selectedIndexPath = collectionView.indexPathForItemAtPoint(gesture.locationInView(collectionView)) else {\n                break\n            }\n            collectionView.beginInteractiveMovementForItemAtIndexPath(selectedIndexPath)\n\n        case UIGestureRecognizerState.Changed:\n            collectionView.updateInteractiveMovementTargetPosition(gesture.locationInView(gesture.view!))\n\n        case UIGestureRecognizerState.Ended:\n            collectionView.endInteractiveMovement()\n\n        default:\n            collectionView.cancelInteractiveMovement()\n        }\n    }\n}\n\nextension ViewController: UICollectionViewDataSource {\n\n    func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return numbers.count\n    }\n\n    func collectionView(collectionView: UICollectionView,\n                        cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {\n\n        let cell = collectionView.dequeueReusableCellWithReuseIdentifier(LabelCollectionViewCell.reuseIdentifier,\n                                                                         forIndexPath: indexPath) as! LabelCollectionViewCell\n        cell.number = numbers[indexPath.item]\n        return cell\n    }\n\n    func collectionView(collectionView: UICollectionView,\n                        moveItemAtIndexPath sourceIndexPath: NSIndexPath,\n                        toIndexPath destinationIndexPath: NSIndexPath) {\n\n        let tempNumber = numbers.removeAtIndex(sourceIndexPath.item)\n        numbers.insert(tempNumber, atIndex: destinationIndexPath.item)\n    }\n}\n\n\nUILabel\u3060\u3051\u306eCollectionViewCell\u3067\u3059\u3002\n\nLabelCollectionViewCell.swift\nimport UIKit\n\nprotocol ReusableView: class {}\n\nextension ReusableView where Self: UIView {\n    static var reuseIdentifier: String {\n        return String(self)\n    }\n}\n\nclass LabelCollectionViewCell: UICollectionViewCell {\n\n    @IBOutlet weak var numberLabel: UILabel!\n    var number = 0 {\n\n        didSet {\n            numberLabel.text = \"\\(number)\"\n        }\n    }\n}\n\nextension LabelCollectionViewCell: ReusableView {}\n\n\n\n\n\n\u3061\u3087\u3063\u3068\u89e3\u8aac\n\u30c9\u30e9\u30c3\u30b0&\u30c9\u30ed\u30c3\u30d7\u306e\u6a5f\u80fd\u306f\u3001\u30ed\u30f3\u30b0\u30bf\u30c3\u30d7\u306e\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u3068\u9023\u52d5\u3057\u3066\u3001\n\u4e0b\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3060\u3051\u3067\u3059\u3002\n\n\n\n\u30e1\u30bd\u30c3\u30c9\u540d\n\u8aac\u660e\n\n\n\n\nbeginInteractiveMovementForItemAtIndexPath(indexPath: NSIndexPath)\n\u79fb\u52d5\u958b\u59cb\n\n\nupdateInteractiveMovementTargetPosition(targetPosition: CGPoint)\n\u79fb\u52d5\u4e2d\n\n\nendInteractiveMovement()\n\u79fb\u52d5\u7d42\u4e86\n\n\ncancelInteractiveMovement()\n\u79fb\u52d5\u306e\u53d6\u308a\u6d88\u3057\n\n\n\n\n\u307e\u3068\u3081\niOS10\u306e\u6b63\u5f0f\u30ea\u30ea\u30fc\u30b9\u9593\u8fd1\u3067\u3059\u304c\u3001\niOS9\u3067\u3082\u77e5\u3089\u306a\u3044\u6a5f\u80fd\u304c\u307e\u3060\u307e\u3060\u3042\u308b\u3088\u3046\u3067\u3059\u3002\niOS8\u307e\u3067\u306f\u3001\u30c9\u30e9\u30c3\u30b0&\u30c9\u30ed\u30c3\u30d7\u306e\u5b9f\u88c5\u306f\u5927\u5909\u3067\u3057\u305f\u304c\u3001\niOS9\u3067\u306f\u7c21\u5358\u306b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u305f\u3088\u3046\u3067\u3059\u3002\uff08\u9045 2\u56de\u76ee\uff09\niPhone\u6a19\u6e96\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u3088\u3046\u306a\u5b9f\u88c5\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u935b\u932c\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n# \u306f\u3058\u3081\u306b\niOS9\u4ee5\u4e0a\u306e\u307f\u306e\u30b5\u30dd\u30fc\u30c8\u3067\u3059\u304c\u3001\nCollectionViewCell\u3092\u7c21\u5358\u306b\u79fb\u52d5\u3067\u304d\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u3053\u3068\u3092\u6700\u8fd1\u77e5\u308a\u307e\u3057\u305f\u306e\u3067\u3001\n\u5171\u6709\u3057\u307e\u3059\u3002\uff08\u9045\uff09\n\n## \u52d5\u4f5c\u30a4\u30e1\u30fc\u30b8\n![output.gif](https://qiita-image-store.s3.amazonaws.com/0/56176/028ac75f-dbea-d0ab-1751-2b2be9b84223.gif \"output.gif\")\n\n## \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u307e\u305a\u306f\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5fa1\u89a7\u304f\u3060\u3055\u3044\u3002\nCollectionView\u306e\u5b9f\u88c5\u81ea\u4f53\u306f\u3001\u7279\u5225\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\u30ed\u30f3\u30b0\u30bf\u30c3\u30d7\u306e\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u90e8\u5206\u306b\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```:ViewController.swift\nimport UIKit\n\nclass ViewController: UIViewController {\n\n    @IBOutlet weak var collectionView: UICollectionView!\n    private var numbers = [Int]()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        numbers = loadTestData()\n        addEventListner()\n    }\n\n    //\u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u3067\u3059\n    private func loadTestData() -> [Int]{\n\n        for i in 1...100 {\n            numbers.append(i)\n        }\n        return numbers\n    }\n\n    private func addEventListner() {\n        let longPressGesture = UILongPressGestureRecognizer(target: self,\n                                                            action: #selector(self.handleLongGesture(_:)))\n        collectionView.addGestureRecognizer(longPressGesture)\n    }\n\n    //\u3053\u3053\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\n    func handleLongGesture(gesture: UILongPressGestureRecognizer) {\n\n        switch(gesture.state) {\n\n        case UIGestureRecognizerState.Began:\n            guard let selectedIndexPath = collectionView.indexPathForItemAtPoint(gesture.locationInView(collectionView)) else {\n                break\n            }\n            collectionView.beginInteractiveMovementForItemAtIndexPath(selectedIndexPath)\n\n        case UIGestureRecognizerState.Changed:\n            collectionView.updateInteractiveMovementTargetPosition(gesture.locationInView(gesture.view!))\n\n        case UIGestureRecognizerState.Ended:\n            collectionView.endInteractiveMovement()\n\n        default:\n            collectionView.cancelInteractiveMovement()\n        }\n    }\n}\n\nextension ViewController: UICollectionViewDataSource {\n\n    func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return numbers.count\n    }\n\n    func collectionView(collectionView: UICollectionView,\n                        cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {\n\n        let cell = collectionView.dequeueReusableCellWithReuseIdentifier(LabelCollectionViewCell.reuseIdentifier,\n                                                                         forIndexPath: indexPath) as! LabelCollectionViewCell\n        cell.number = numbers[indexPath.item]\n        return cell\n    }\n\n    func collectionView(collectionView: UICollectionView,\n                        moveItemAtIndexPath sourceIndexPath: NSIndexPath,\n                        toIndexPath destinationIndexPath: NSIndexPath) {\n\n        let tempNumber = numbers.removeAtIndex(sourceIndexPath.item)\n        numbers.insert(tempNumber, atIndex: destinationIndexPath.item)\n    }\n}\n```\n\nUILabel\u3060\u3051\u306eCollectionViewCell\u3067\u3059\u3002\n\n```:LabelCollectionViewCell.swift\nimport UIKit\n\nprotocol ReusableView: class {}\n\nextension ReusableView where Self: UIView {\n    static var reuseIdentifier: String {\n        return String(self)\n    }\n}\n\nclass LabelCollectionViewCell: UICollectionViewCell {\n\n    @IBOutlet weak var numberLabel: UILabel!\n    var number = 0 {\n\n        didSet {\n            numberLabel.text = \"\\(number)\"\n        }\n    }\n}\n\nextension LabelCollectionViewCell: ReusableView {}\n\n\n```\n\n### \u3061\u3087\u3063\u3068\u89e3\u8aac\n\u30c9\u30e9\u30c3\u30b0&\u30c9\u30ed\u30c3\u30d7\u306e\u6a5f\u80fd\u306f\u3001\u30ed\u30f3\u30b0\u30bf\u30c3\u30d7\u306e\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u3068\u9023\u52d5\u3057\u3066\u3001\n\u4e0b\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3060\u3051\u3067\u3059\u3002\n\n| \u30e1\u30bd\u30c3\u30c9\u540d| \u8aac\u660e |\n|---|---|\n| beginInteractiveMovementForItemAtIndexPath(indexPath: NSIndexPath) | \u79fb\u52d5\u958b\u59cb |  \n| updateInteractiveMovementTargetPosition(targetPosition: CGPoint) | \u79fb\u52d5\u4e2d |\n| endInteractiveMovement() | \u79fb\u52d5\u7d42\u4e86|\n| cancelInteractiveMovement() | \u79fb\u52d5\u306e\u53d6\u308a\u6d88\u3057 |\n\n# \u307e\u3068\u3081\niOS10\u306e\u6b63\u5f0f\u30ea\u30ea\u30fc\u30b9\u9593\u8fd1\u3067\u3059\u304c\u3001\niOS9\u3067\u3082\u77e5\u3089\u306a\u3044\u6a5f\u80fd\u304c\u307e\u3060\u307e\u3060\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\niOS8\u307e\u3067\u306f\u3001\u30c9\u30e9\u30c3\u30b0&\u30c9\u30ed\u30c3\u30d7\u306e\u5b9f\u88c5\u306f\u5927\u5909\u3067\u3057\u305f\u304c\u3001\niOS9\u3067\u306f\u7c21\u5358\u306b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u305f\u3088\u3046\u3067\u3059\u3002\uff08\u9045 2\u56de\u76ee\uff09\n\niPhone\u6a19\u6e96\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u3088\u3046\u306a\u5b9f\u88c5\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u935b\u932c\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n", "tags": ["iOS", "Swift", "UIKit"]}