{"context": "\n\nExtreme Learning Machine (ELM) \u3068\u306f?\nELM\u306f\u7279\u6b8a\u306a\u5f62\u5f0f\u306e\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3067\u3059\u3002\u96a0\u308c\u5c64\u30921\u5c64\u6301\u3061\u307e\u3059\u304c\u3001\u96a0\u308c\u5c64\u306e\u91cd\u307f\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u6c7a\u5b9a\u3057\u3001\u51fa\u529b\u5c64\u306e\u91cd\u307f\u3092\u64ec\u4f3c\u9006\u884c\u5217\u3092\u4f7f\u3063\u3066\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u30a4\u30e1\u30fc\u30b8\u7684\u306b\u306f\u3001\u96a0\u308c\u5c64\u306f\u30e9\u30f3\u30c0\u30e0\u306a\u7279\u5fb4\u62bd\u51fa\u5668\u3092\u591a\u6570\u4f5c\u3063\u3066\u3001\u51fa\u529b\u5c64\u3067\u7279\u5fb4\u9078\u629e\u3092\u3057\u3066\u3084\u308b\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u3059\u3002\nELM\u306f\u6b21\u306e\u3088\u3046\u306a\u7279\u6027\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u89e3\u3044\u3066\u3044\u308b\u306e\u306f\u5358\u306a\u308b\u64ec\u4f3c\u9006\u884c\u5217\u306a\u306e\u3067\u3001\u9ad8\u901f\u306b\u89e3\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\u51f8\u306a\u554f\u984c\uff08\u5c40\u6240\u89e3\u304c\u306a\u3044\uff09\n\u4efb\u610f\u306e\u95a2\u6570\u3092\u8fd1\u4f3c\u53ef\u80fd\uff08\u666e\u901a\u306e\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3068\u540c\u3058)\n\u4efb\u610f\u306eactivation\u304c\u4f7f\u7528\u53ef\u80fd\uff08\u5fae\u5206\u3067\u304d\u308b\u5fc5\u8981\u306a\u3057\uff09\n\n\n\u5b9f\u88c5\nimport numpy as np\n\n\nclass ExtremeLearningMachine(object):\n    def __init__(self, n_unit, activation=None):\n        self._activation = self._sig if activation is None else activation\n        self._n_unit = n_unit\n\n    @staticmethod\n    def _sig(x):\n        return 1. / (1 + np.exp(-x))\n\n    @staticmethod\n    def _add_bias(x):\n        return np.hstack((x, np.ones((x.shape[0], 1))))\n\n    def fit(self, X, y):\n        self.W0 = np.random.random((X.shape[1], self._n_unit))\n        z = self._add_bias(self._activation(X.dot(self.W0)))\n        self.W1 = np.linalg.lstsq(z, y)[0]\n\n    def transform(self, X):\n        if not hasattr(self, 'W0'):\n            raise UnboundLocalError('must fit before transform')\n        z = self._add_bias(self._activation(X.dot(self.W0)))\n        return z.dot(self.W1)\n\n    def fit_transform(self, X, y):\n        self.W0 = np.random.random((X.shape[1], self._n_unit))\n        z = self._add_bias(self._activation(X.dot(self.W0)))\n        self.W1 = np.linalg.lstsq(z, y)[0]\n        return z.dot(self.W1)\n\n\n\u30c6\u30b9\u30c8\n\u3068\u308a\u3042\u3048\u305airis\u3067\u8a66\u3057\u3066\u307f\u308b\u3002\n\n\u65b9\u6cd5\nfrom sklearn import datasets\n\niris = datasets.load_iris()\nind = np.random.permutation(len(iris.data))\n\ny = np.zeros((len(iris.target), 3))\ny[np.arange(len(y)), iris.target] = 1\n\nacc_train = []\nacc_test = []\nN = [5, 10, 15, 20, 30, 40, 80, 160]\nfor n in N:\n    elm = ExtremeLearningMachine(n)\n    elm.fit(iris.data[ind[:100]], y[ind[:100]])\n    acc_train.append(np.average(np.argmax(elm.transform(iris.data[ind[:100]]), axis=1) == iris.target[ind[:100]]))\n    acc_test.append(np.average(np.argmax(elm.transform(iris.data[ind[100:]]), axis=1) == iris.target[ind[100:]]))\nplt.plot(N, acc_train, c='red', label='train')\nplt.plot(N, acc_test, c='blue', label='test')\nplt.legend(loc=1)\nplt.savefig(\"result.png\")\n\n\n\u7d50\u679c\n\n\n\u7d50\u8ad6\n\n\u3044\u3058\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5c11\u306a\u3044\u306e\u3067\u666e\u901a\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3088\u308a\u3082\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u697d\u305d\u3046\n\u6c4e\u5316\u6027\u80fd\u304c\u9ad8\u3044\u3068\u304b\u5143\u8ad6\u6587\u306b\u304b\u3044\u3066\u3042\u3063\u305f\u304c\u3001\u666e\u901a\u306b\u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3059\u308b\u3002\nfit\u3082transform\u3082\u3081\u3061\u3083\u304f\u3061\u3083\u9ad8\u901f\u306a\u306e\u3067\u3001\u3044\u308d\u3044\u308d\u3068\u7528\u9014\u304c\u3042\u308a\u305d\u3046\u3002\n\n## Extreme Learning Machine (ELM) \u3068\u306f?\n\nELM\u306f\u7279\u6b8a\u306a\u5f62\u5f0f\u306e\u30d5\u30a3\u30fc\u30c9\u30d5\u30a9\u30ef\u30fc\u30c9\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3067\u3059\u3002\u96a0\u308c\u5c64\u30921\u5c64\u6301\u3061\u307e\u3059\u304c\u3001\u96a0\u308c\u5c64\u306e\u91cd\u307f\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u6c7a\u5b9a\u3057\u3001\u51fa\u529b\u5c64\u306e\u91cd\u307f\u3092\u64ec\u4f3c\u9006\u884c\u5217\u3092\u4f7f\u3063\u3066\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u30a4\u30e1\u30fc\u30b8\u7684\u306b\u306f\u3001\u96a0\u308c\u5c64\u306f\u30e9\u30f3\u30c0\u30e0\u306a\u7279\u5fb4\u62bd\u51fa\u5668\u3092\u591a\u6570\u4f5c\u3063\u3066\u3001\u51fa\u529b\u5c64\u3067\u7279\u5fb4\u9078\u629e\u3092\u3057\u3066\u3084\u308b\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u3059\u3002\n\nELM\u306f\u6b21\u306e\u3088\u3046\u306a\u7279\u6027\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n* \u89e3\u3044\u3066\u3044\u308b\u306e\u306f\u5358\u306a\u308b\u64ec\u4f3c\u9006\u884c\u5217\u306a\u306e\u3067\u3001\u9ad8\u901f\u306b\u89e3\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n* \u51f8\u306a\u554f\u984c\uff08\u5c40\u6240\u89e3\u304c\u306a\u3044\uff09\n* \u4efb\u610f\u306e\u95a2\u6570\u3092\u8fd1\u4f3c\u53ef\u80fd\uff08\u666e\u901a\u306e\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3068\u540c\u3058)\n* \u4efb\u610f\u306eactivation\u304c\u4f7f\u7528\u53ef\u80fd\uff08\u5fae\u5206\u3067\u304d\u308b\u5fc5\u8981\u306a\u3057\uff09\n\n## \u5b9f\u88c5\n\n```python\nimport numpy as np\n\n\nclass ExtremeLearningMachine(object):\n    def __init__(self, n_unit, activation=None):\n        self._activation = self._sig if activation is None else activation\n        self._n_unit = n_unit\n\n    @staticmethod\n    def _sig(x):\n        return 1. / (1 + np.exp(-x))\n\n    @staticmethod\n    def _add_bias(x):\n        return np.hstack((x, np.ones((x.shape[0], 1))))\n\n    def fit(self, X, y):\n        self.W0 = np.random.random((X.shape[1], self._n_unit))\n        z = self._add_bias(self._activation(X.dot(self.W0)))\n        self.W1 = np.linalg.lstsq(z, y)[0]\n\n    def transform(self, X):\n        if not hasattr(self, 'W0'):\n            raise UnboundLocalError('must fit before transform')\n        z = self._add_bias(self._activation(X.dot(self.W0)))\n        return z.dot(self.W1)\n\n    def fit_transform(self, X, y):\n        self.W0 = np.random.random((X.shape[1], self._n_unit))\n        z = self._add_bias(self._activation(X.dot(self.W0)))\n        self.W1 = np.linalg.lstsq(z, y)[0]\n        return z.dot(self.W1)\n```\n\n## \u30c6\u30b9\u30c8\n\n\u3068\u308a\u3042\u3048\u305airis\u3067\u8a66\u3057\u3066\u307f\u308b\u3002\n\n### \u65b9\u6cd5\n\n```python\nfrom sklearn import datasets\n\niris = datasets.load_iris()\nind = np.random.permutation(len(iris.data))\n\ny = np.zeros((len(iris.target), 3))\ny[np.arange(len(y)), iris.target] = 1\n\nacc_train = []\nacc_test = []\nN = [5, 10, 15, 20, 30, 40, 80, 160]\nfor n in N:\n    elm = ExtremeLearningMachine(n)\n    elm.fit(iris.data[ind[:100]], y[ind[:100]])\n    acc_train.append(np.average(np.argmax(elm.transform(iris.data[ind[:100]]), axis=1) == iris.target[ind[:100]]))\n    acc_test.append(np.average(np.argmax(elm.transform(iris.data[ind[100:]]), axis=1) == iris.target[ind[100:]]))\nplt.plot(N, acc_train, c='red', label='train')\nplt.plot(N, acc_test, c='blue', label='test')\nplt.legend(loc=1)\nplt.savefig(\"result.png\")\n```\n\n### \u7d50\u679c\n\n![result.png](https://qiita-image-store.s3.amazonaws.com/0/152362/66ebcd00-9351-7465-1be9-d01260344506.png)\n\n### \u7d50\u8ad6\n\n* \u3044\u3058\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5c11\u306a\u3044\u306e\u3067\u666e\u901a\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3088\u308a\u3082\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u697d\u305d\u3046\n* \u6c4e\u5316\u6027\u80fd\u304c\u9ad8\u3044\u3068\u304b\u5143\u8ad6\u6587\u306b\u304b\u3044\u3066\u3042\u3063\u305f\u304c\u3001\u666e\u901a\u306b\u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3059\u308b\u3002\n* fit\u3082transform\u3082\u3081\u3061\u3083\u304f\u3061\u3083\u9ad8\u901f\u306a\u306e\u3067\u3001\u3044\u308d\u3044\u308d\u3068\u7528\u9014\u304c\u3042\u308a\u305d\u3046\u3002\n", "tags": ["Python", "MachineLearning", "scikit-learn"]}