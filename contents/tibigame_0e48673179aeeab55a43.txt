{"context": "\n\n\u53ef\u8996\u5316\u306f\u5927\u4e8b\n\u7d50\u679c\u304c\u95a2\u6570\u3067\u6c42\u307e\u3063\u3066\u3082\u3069\u3046\u3044\u3046\u3082\u306e\u304b\u306f\u76f4\u611f\u7684\u306b\u308f\u304b\u3089\u306a\u3044\u3053\u3068\u304c\u591a\u3044\u3002\n\u305d\u3053\u3067\u30b0\u30e9\u30d5\u3092\u63cf\u304f\u3053\u3068\u304c\u5206\u6790\u30fb\u601d\u8003\u306e\u305f\u3081\u306e\u7b2c\u4e00\u6b69\u306b\u306a\u308b\u3002\nmatplotlib\u306e\u65e5\u672c\u8a9e\u30e1\u30e2\u306f\u3053\u3053\u304c\u8a73\u3057\u3044\u3002\nsympy\u306eplot\u306f\u3053\u3053\u3002\n\u516c\u5f0f\u3068\u304b\u3082\u898b\u306a\u304c\u3089\u56db\u82e6\u516b\u82e6\u3002\n\nimport\nimport sympy as sym\nsym.init_printing()\nPi = sym.S.Pi # \u5186\u5468\u7387\nE = sym.S.Exp1 # \u81ea\u7136\u5bfe\u6570\u306e\u5e95\nI = sym.S.ImaginaryUnit # \u865a\u6570\u5358\u4f4d\n\n# \u4f7f\u7528\u3059\u308b\u5909\u6570\u306e\u5b9a\u7fa9(\u5c0f\u6587\u5b571\u6587\u5b57\u306f\u5168\u3066\u30b7\u30f3\u30dc\u30eb\u3068\u3059\u308b)\n(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) = sym.symbols('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\n\n\u8272\u3092\u9811\u5f35\u308b\n\u8272\u306e\u30ea\u30b9\u30c8\u306fL*a*b*\u8272\u7a7a\u9593\u3067\u8f1d\u5ea6\u4e00\u5b9a\u306e\u74b0\u306b\u306a\u308b\u3088\u3046\u306b\u3001\u5225\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4e8b\u524d\u751f\u6210\u3057\u305f\u3002\n\u8272\u306e\u9bae\u3084\u304b\u3055\u3088\u308a\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u306b\u5b89\u5168\u30de\u30fc\u30b8\u30f3\u3092\u6301\u305f\u305b\u305f\u8a2d\u8a08\u3067\u3001\u8272\u5f31\u306f\u672a\u8003\u616e\u3002\n\u5404\u30ea\u30b9\u30c8\u306f37\u500b\u306eHEX\u6587\u5b57\u5217\u304b\u3089\u306a\u308b\u3002\n37\u3068\u3044\u3046\u6570\u5b57\u306f1\u5468\u306e360\u5ea6\u309210\u5ea6\u305a\u3064\u9032\u3080\u6570\u3067\u3042\u308b36\u306b\u6700\u3082\u8fd1\u3044\u7d20\u6570\u3068\u3044\u3046\u3053\u3068\u3067\u9078\u629e\u3057\u305f\u3002\n(37\u3060\u30681\u5f53\u305f\u308a9.73\u5ea6\u9032\u3080\u3002)\n\u7d20\u6570\u3060\u304b\u3089\u521d\u671f\u8272\u3068\u30b9\u30c6\u30c3\u30d7\u6570\u3092\u3069\u306e\u3088\u3046\u306b\u9078\u3093\u3067\u3082(\u539f\u59cb\u6839\u3067\u306a\u3044\u3068\u30c0\u30e1\u3067\u3059)37\u8272\u3092\u5fc5\u305a1\u8272\u305a\u3064\u901a\u308b\u5de1\u56de\u7fa4\u3068\u306a\u308b\u3002\n\u3053\u308c\u306b\u3088\u308a\u7d04\u30b9\u30c6\u30c3\u30d7\u6570*10\u5ea6\u307b\u3069\u4f4d\u76f8\u304c\u9032\u3080\u3068\u3044\u3046\u76f4\u611f\u4e0a\u306e\u4e00\u81f4\u3068\u3001\n\u3067\u304d\u308b\u9650\u308a\u540c\u3058\u8272\u304c\u51fa\u305a\u306b\u9577\u5468\u671f\u306b\u306a\u308b\u3053\u3068\u3092\u4e21\u7acb\u3055\u305b\u305f\u3002\ndef generator_p(start): # \u5f15\u6570\u304c\u6307\u5b9a\u3055\u308c\u308c\u3070\u305d\u306e\u8272\u3092\u305d\u3046\u3067\u306a\u3044\u3068\u304d\u306f\u9806\u756a\u306b\u8272\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\n    prime = 37 # \u30ea\u30b9\u30c8\u306e\u6570 (\u7d20\u6570\u306a\u306e\u3067primitive\u306b\u4f55\u3092\u6307\u5b9a\u3057\u3066\u3082\u5fc5\u305a\u6700\u5927\u5468\u671f\u306b\u306a\u308b)\n    primitive = 8 # \u751f\u6210\u5143 (1\u30b9\u30c6\u30c3\u30d7\u5f53\u305f\u308a\u8272\u76f8\u304cprimitive * 37/360\u5ea6\u9032\u3080)\n    g0 = start # \u958b\u59cb\u5143 (\u5b9f\u969b\u306b\u8fd4\u3055\u308c\u308b\u306e\u306f g0 * primitive)\n    while True:\n        val = yield g0\n        if val: # \u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\u306b\u5f15\u6570\u304c\u6e21\u3055\u308c\u308b\u3068\u305d\u308c\u3092\u958b\u59cb\u5143\u3068\u3057\u3066\u30ea\u30bb\u30c3\u30c8\u3059\u308b\n            g0 = val\n        g0 += primitive\n        if g0 >= prime: # \u5270\u4f59\u3092\u53d6\u308b\n            g0 -= prime\ngen_hexnum = generator_p(0) # \u5f15\u6570\u306b\u521d\u671f\u8272\u3092\u5165\u308c\u308b\ngen_hexnum.__next__() # \u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\u306e\u521d\u671f\u5316\n\ndef hexNum(num, type): # \u8272\u306e\u30ea\u30b9\u30c8\n    # \u57fa\u672c\u8272(\u767d\u80cc\u666f\u3067\u6c4e\u7528\u7684\u306b\u4f7f\u3048\u308b\u843d\u3061\u7740\u3044\u305f\u8272)\n    color_basic = ['#9c1954', '#9e1a46', '#9d1e38', '#9a252a', '#962d1c', '#8f350d', '#873c00',\n                   '#7d4300', '#734900', '#674f00', '#5b5300', '#4d5700', '#3e5b00', '#2b5d00',\n                   '#0f6009', '#00611c', '#00632b', '#00643a', '#006449', '#006558', '#006567',\n                   '#006575', '#006482', '#00648e', '#006298', '#0060a0', '#005ea6', '#005baa',\n                   '#0056aa', '#0051a9', '#2f4ca4', '#50459d', '#673d94', '#78358a', '#862d7d', '#902470', '#981e62']\n    # \u5f69\u5ea6\u306e\u9ad8\u3044\u8272(\u76ee\u7acb\u3064\u304c\u591a\u7528\u306f\u3057\u306a\u3044\u307b\u3046\u304c\u3088\u3044\u3002)\n    color_vivid = ['#ffadc7', '#ffadbc', '#ffaeb2', '#ffb0a8', '#ffb29e', '#ffb596', '#f9b88f',\n                   '#f1bc8a', '#e9bf86', '#dfc385', '#d5c685', '#caca87', '#becd8b', '#b2cf90',\n                   '#a6d298', '#99d4a0', '#8dd5aa', '#80d7b4', '#74d7bf', '#6ad8ca', '#61d8d5',\n                   '#5bd7e0', '#59d6e9', '#5dd5f2', '#65d3f9', '#71d1ff', '#7fceff', '#8ecbff',\n                   '#9ec8ff', '#afc4ff', '#bec1ff', '#cdbdfd', '#dab9f7', '#e6b6ef', '#f0b3e6', '#f9b0dc', '#ffaed2']\n    # \u8584\u3044\u8272(\u767d\u80cc\u666f\u3067\u306f\u4f7f\u308f\u306a\u3044\u3002\u9ed2\u80cc\u666f\u3067\u4f7f\u3046\u3053\u3068\u3092\u60f3\u5b9a\u3002)\n    color_thin = ['#ffc3d5', '#ffc3cd', '#ffc3c5', '#ffc4be', '#ffc6b7', '#ffc8b1', '#fbcaac',\n                  '#f5cca9', '#efcfa6', '#e8d2a5', '#e0d4a5', '#d8d7a6', '#cfd9a9', '#c6dbad',\n                  '#bdddb3', '#b5deb9', '#ace0c0', '#a5e0c7', '#9ee1cf', '#98e1d7', '#94e1df',\n                  '#92e1e6', '#92e0ed', '#94dff4', '#99def9', '#9fdcfd', '#a7daff', '#b1d8ff',\n                  '#bbd5ff', '#c5d3ff', '#cfd0ff', '#dacdfc', '#e3cbf7', '#ecc8f2', '#f3c6eb', '#f9c5e4', '#fec4dc']\n\n    if (type == 'thin'):\n        hex_list = color_thin\n    elif (type == 'vivid'):\n        hex_list = color_vivid\n    else:\n        hex_list = color_basic\n    if num is not None:\n        gen_hexnum.send(num)\n    return hex_list[gen_hexnum.__next__()]\n\n\n2\u6b21\u5143\u30b0\u30e9\u30d5plot\u95a2\u6570\u306e\u4f5c\u6210\uff1a1\u5909\u6570\u967d\u95a2\u6570\ndef plot(func, xrange, ylim=None, xlog=None, ylog=None, cn=None, ct='basic', close=None, figs=None, simbol=x):\n    if figs:\n        plt.figure(figsize=figs)\n    X = np.arange(xrange[0], xrange[1], xrange[2])\n    if hasattr(func, \"subs\"): # sympy\n        Y = [func.subs([(simbol, K)]) for K in X]\n    else: # scipy\n        Y = [func(K) for K in X]\n    if ylim:\n        plt.ylim(ylim)\n    if xlog:\n        plt.xscale('log')\n    else:\n        plt.xscale('linear')\n    if ylog:\n        plt.yscale('log')\n    else:\n        plt.yscale('linear')\n    plt.plot(X, Y, color=hexNum(cn, ct))\n    if close:\n        plt.show()\n        plt.close()\n\n\u7d20\u306ematplotlib.plot\u306f\u3084\u3084\u3053\u3057\u3044\u306e\u3067\u3088\u304f\u4f7f\u3046\u5f15\u6570\u3060\u3051\u3092\u30e9\u30c3\u30d7\u3057\u305f\u95a2\u6570\u3092\u4f5c\u3063\u305f\u3002\n\u95a2\u6570\u3068\u5e45\u3001\u8272\u7a0b\u5ea6\u3092\u4e0e\u3048\u305f\u3089\u5f8c\u306f\u3088\u3057\u306a\u306b\u3057\u3066\u304f\u308c\u3068\u3044\u3046\u3050\u3089\u3044\u306e\u65b9\u304c\u4f7f\u3044\u3084\u3059\u3044\u3002\nF = sym.sin(x)/x\nG = sym.cos(x)/x\nplot(F, (-10, 10, 0.1), cn=0, figs=(10, 6))\nplot(G, (-10, 10, 0.1))\nplot(F+0.2, (-10, 10, 0.1))\nplot(F+0.4, (-10, 10, 0.1))\nplot(F+0.6, (-10, 10, 0.1))\nplot(F+0.8, (-10, 10, 0.1))\nplot(F+1.0, (-10, 10, 0.1))\ndef A(x):\n    return np.sin(x)/x\nplot(A, (-10, 10, 0.1))\nplot(lambda X: (X/9.0)**2, (-10, 10, 0.1), (-0.5, 1.5), close=True)\n\n\nsympy\u3092\u5feb\u9069\u306b\u4f7f\u3046\u306b\u306f\u5c0f\u6587\u5b57\u306f\u5168\u3066\u30b7\u30f3\u30dc\u30eb\u306b\u3057\u305f\u3044\u306e\u3067\u3001\n\u95a2\u6570\u540d\u3084\u30eb\u30fc\u30d7\u5909\u6570\u306f\u610f\u8b58\u7684\u306b\u5927\u6587\u5b57\u306b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\ncolor\u306b\u3088\u308b\u8272\u5206\u3051\u52b9\u679c\u3001hasattr\u306b\u3088\u308bsympy\u3068numpy\u95a2\u6570\u306e\u81ea\u52d5\u5224\u5b9a\u3001\nclose\u5f15\u6570\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u307e\u3068\u3081\u3066\u6700\u5f8c\u3060\u3051\u306b\u66f8\u3051\u3070\u826f\u304f\u306a\u3063\u305f\u3002\n\u304b\u306a\u308a\u76f4\u611f\u7684\u306b\u30d7\u30ed\u30c3\u30c8\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u6e80\u8db3\u306e\u3044\u304f\u51fa\u6765\u3002\n\u305f\u3060\u30b0\u30e9\u30d5\u3092\u898b\u308b\u3068$\\frac{\\cos(x)}{x}$\u306e\u6975\u304c\u5909\u3002\n$-\\infty\\longrightarrow\\infty$\u306e\u9014\u4e2d\u306e\u7dda\u304c\u63cf\u5199\u3055\u308c\u3066\u3044\u308b\u96f0\u56f2\u6c17\u3060\u304c\n\u89e3\u6c7a\u7b56\u3042\u308b\u306e\u304b\u306a\u3002\n\n2\u6b21\u5143\u30b0\u30e9\u30d5plot\u95a2\u6570\u306e\u4f5c\u6210\uff1a\u5a92\u4ecb\u5909\u6570\u8868\u793a\ndef plotp(func, t_range=(-4, 4, 100), axis=[-4, 4, -4, 4],\n          xlog=None, ylog=None, cn=None, ct='basic', close=None, figs=None, simbol=t):\n    if figs:\n        plt.figure(figsize=figs)\n    X, Y = func\n    t_ndarray = np.linspace(t_range[0], t_range[1], t_range[2]) # ndarray\n    if hasattr(X, \"subs\"): # sympy\n        Xp = np.array([float(sym.N(X.subs([(simbol, T)]))) for T in t_ndarray])\n        Yp = np.array([float(sym.N(Y.subs([(simbol, T)]))) for T in t_ndarray])\n    else: # scipy\n        Xp = [X(K) for K in t_ndarray]\n        Yp = [Y(K) for K in t_ndarray]\n    plt.axis(axis)\n    if xlog:\n        plt.xscale('log')\n    else:\n        plt.xscale('linear')\n    if ylog:\n        plt.yscale('log')\n    else:\n        plt.yscale('linear')\n    plt.plot(Xp, Yp, color=hexNum(cn, ct))\n    if close:\n        plt.show()\n        plt.close()\n\nplot()\u3068\u306e\u9055\u3044\u306fFunc\u304c2\u95a2\u6570\u306e\u30ea\u30b9\u30c8\u3067\u6e21\u3055\u308c\u3001x, y\u306e\u9818\u57df\u3092\u6307\u5b9a\u3059\u308baxis\u304c\u52a0\u308f\u3063\u3066\u3044\u308b\u3002\n\u30b7\u30f3\u30dc\u30eb\u306f\u6163\u4f8b\u304b\u3089t\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u3068\u3057\u305f\u3002\n\u307e\u305ft\u306e\u30ec\u30f3\u30b8\u306e3\u3064\u76ee\u3068\u3057\u3066\u523b\u307f\u5e45\u3067\u306f\u306a\u304f\u5206\u5272\u6570\u3067\u6307\u5b9a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\nX = t**2 * sym.sin(t)\nY = t**2 * sym.cos(t)\nplotp([X, Y], (-4 * np.pi, 4 * np.pi, 400), [-100, 100, -100, 100], figs=(6, 6), close=True)\nplotp([lambda T: T * np.sin(T), lambda T: T * np.cos(T)], (-4 * np.pi, 4 * np.pi, 400), [-12, 12, -10, 10],\ncn=14, figs=(6, 6), close=True)\n\n\n\nsympy, scipy\u306e\u4e21\u65b9\u3067\u3046\u307e\u304f\u3044\u3063\u305f\u3002\n\n2\u6b21\u5143\u30b0\u30e9\u30d5plot\u95a2\u6570\u306e\u4f5c\u6210\uff1a2\u5909\u6570\u9670\u95a2\u6570\n$F(x, y)=0$\u306e\u5f62\u5f0f\u3067\u8868\u73fe\u3055\u308c\u308b\u95a2\u6570\u3067\u3042\u308b\u3002\n\u9670\u95a2\u6570\u3092\u76f4\u63a5\u6271\u3046\u306e\u306f\u96e3\u3057\u305d\u3046\u3002\n\u306a\u306e\u3067sympy\u306eplot_implicit\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u3002\nF = x**3 + y**2 -1\nsym.plot_implicit(F, (x, -2, 2), (y, -2, 2), line_color=hexNum(2, 'basic'))\n\n\n\u3053\u308c\u306f\u6955\u5186\u66f2\u7dda\u306e\u5f0f\u3067\u3042\u308b\u3002\n\u8272\u306f\u4f7f\u3048\u308b\u307f\u305f\u3044\u3060\u3051\u3069\u8584\u3044\u3002\nF = x**3 - 2 * x + y**2 > 0\nsym.plot_implicit(F, (x, -2, 2), (y, -2, 2), line_color=hexNum(2, 'thin'))\n\n\n\u4e0d\u7b49\u5f0f\u304c\u4f7f\u3048\u308b\u306e\u304c\u5229\u70b9\u3002\n\n3\u6b21\u5143\u30b0\u30e9\u30d5plot\u95a2\u6570\u306e\u4f5c\u6210\uff1a2\u5909\u6570\u967d\u95a2\u6570\n$z=f(x, y)$\u306e\u5f62\u306e\u95a2\u6570\u3067\u3042\u308b\u3002\nfrom matplotlib import cm\n\ndef plot3D(func, xrange=(-2, 2, 0.1), yrange=(-2, 2, 0.1), ptype='plot', simbol=[x, y]):\n    fig = plt.figure()\n    ax = Axes3D(fig)\n    if ptype == 'plot':\n        ax.plot(func[0], func[1], func[2])\n        plt.show()\n        plt.close()\n        return\n    X = np.arange(xrange[0], xrange[1], xrange[2])\n    Y = np.arange(yrange[0], yrange[1], yrange[2])\n    Xmesh, Ymesh = np.meshgrid(X, Y)\n    if hasattr(func, \"subs\"): # sympy\n        Z = np.array([np.array([float(sym.N(func.subs([(simbol[0], K), (simbol[1], L)]))) for K in X]) for L in Y])\n    else: # scipy\n        Z = func(Xmesh, Ymesh)\n\n    if ptype == 'surface':\n         ax.plot_surface(Xmesh, Ymesh, Z, cmap=cm.bwr)\n    elif ptype == 'wireframe':\n        ax.plot_wireframe(Xmesh,Ymesh, Z)\n    elif ptype == 'contour':\n        ax.contour3D(X, Y, Z)\n    plt.show()\n    plt.close()\n\nplot3D(lambda T, U: T * U * np.sin(T), (-4, 4, 0.25), (-4, 4, 0.25), 'surface')\n\nplot3D((x ** 2 - 3 - y ** 2), (-4, 4, 0.25), (-4, 4, 0.25), 'surface')\nplot3D((x ** 2 - 3 - y ** 2), (-4, 4, 0.25), (-4, 4, 0.25), 'wireframe')\nplot3D((x ** 2 - 3 - y ** 2), (-4, 4, 0.25), (-4, 4, 0.25), 'contour')\n\n\n\n3\u6b21\u5143\u306f\u8f1d\u5ea6\u5dee\u3092\u51fa\u3057\u3066\u6d6e\u304d\u6c88\u307f\u3092\u898b\u305f\u65b9\u304c\u826f\u3044\u304b\u3089\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30e9\u30fc\u3092\u63a1\u7528\u3002\n\u66f2\u7387\u304c\u8ca0\u306e\u5b87\u5b99\u306e\u56f3\u3067\u3088\u304f\u51fa\u3066\u304f\u308b\u99ac\u306e\u978d\u306e\u95a2\u6570\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u307f\u305f\u3002\n\n3\u6b21\u5143\u30b0\u30e9\u30d5plot\u95a2\u6570\u306e\u4f5c\u6210\uff1a\u5a92\u4ecb\u5909\u6570\u8868\u793a\ndef plotp3(func, simbol=[t], rangeL=[(-4, 4, 100)]):\n    X, Y, Z = func\n    t1 = simbol[0]\n    if len(simbol) >= 2:\n        u1 = simbol[1]\n    t_rangeL = rangeL[0]\n    t_ndarray = np.linspace(t_rangeL[0], t_rangeL[1], t_rangeL[2]) # ndarray\n\n    if len(rangeL) >= 2:\n        u_rangeL = rangeL[1]\n        u_ndarray = np.linspace(u_rangeL[0], u_rangeL[1], u_rangeL[2]) # ndarray\n    if len(rangeL) == 1:\n        Xp = np.array([float(sym.N(X.subs([(t1, T)]))) for T in t_ndarray])\n        Yp = np.array([float(sym.N(Y.subs([(t1, T)]))) for T in t_ndarray])\n        Zp = np.array([float(sym.N(Z.subs([(t1, T)]))) for T in t_ndarray])\n    else:\n        Xp = np.array([float(sym.N(X.subs([(t1, T), (u1, U)]))) for T in t_ndarray for U in u_ndarray])\n        Yp = np.array([float(sym.N(Y.subs([(t1, T), (u1, U)]))) for T in t_ndarray for U in u_ndarray])\n        Zp = np.array([float(sym.N(Z.subs([(t1, T), (u1, U)]))) for T in t_ndarray for U in u_ndarray])\n\n    fig = plt.figure()\n    ax = Axes3D(fig)\n    ax.plot(Xp, Yp, Zp)\n    plt.show()\n    plt.close()\n\nX = 2*sym.cos(t)\nY = 5*sym.sin(t)\nZ = t\nplotp3([X, Y, Z], [t], [(-5 * np.pi, 5 * np.pi, 200)])\n\nX = (5+2*sym.cos(t))*sym.cos(u)\nY = (5+2*sym.sin(u))*sym.sin(u)\nZ = 2*sym.sin(t)-u/sym.oo\nplotp3([X, Y, Z], [t, u], [(-np.pi, np.pi, 40), (-np.pi, np.pi, 40)])\n\n\n\u3053\u306e\u8fba\u304b\u3089\u75b2\u308c\u3066\u304d\u305f\u3002\n3\u6b21\u5143\u306fsympy\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u3067\u3044\u3044\u3088\u3002\nX = 2*sym.cos(t)\nY = 5*sym.sin(t)\nZ = t\nsym.plotting.plot3d_parametric_line(X, Y, Z, (t, -5*np.pi, 5*np.pi))\n\nX = (5+2*sym.cos(t))*sym.cos(u)\nY = (5+2*sym.sin(u))*sym.sin(u)\nZ = 2*sym.sin(t)-u/sym.oo\nsym.plotting.plot3d_parametric_surface(X, Y, Z, (t, -np.pi, np.pi), (u, -np.pi, np.pi))\n\n\n# \u53ef\u8996\u5316\u306f\u5927\u4e8b\n\n\u7d50\u679c\u304c\u95a2\u6570\u3067\u6c42\u307e\u3063\u3066\u3082\u3069\u3046\u3044\u3046\u3082\u306e\u304b\u306f\u76f4\u611f\u7684\u306b\u308f\u304b\u3089\u306a\u3044\u3053\u3068\u304c\u591a\u3044\u3002\n\u305d\u3053\u3067\u30b0\u30e9\u30d5\u3092\u63cf\u304f\u3053\u3068\u304c\u5206\u6790\u30fb\u601d\u8003\u306e\u305f\u3081\u306e\u7b2c\u4e00\u6b69\u306b\u306a\u308b\u3002\nmatplotlib\u306e\u65e5\u672c\u8a9e\u30e1\u30e2\u306f[\u3053\u3053](http://seesaawiki.jp/met-python/d/matplotlib)\u304c\u8a73\u3057\u3044\u3002\nsympy\u306eplot\u306f[\u3053\u3053](https://showa-yojyo.github.io/notebook/python-sympy/plotting.html)\u3002\n[\u516c\u5f0f](http://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html)\u3068\u304b\u3082\u898b\u306a\u304c\u3089\u56db\u82e6\u516b\u82e6\u3002\n\n\n### import\n\n```py3\nimport sympy as sym\nsym.init_printing()\nPi = sym.S.Pi # \u5186\u5468\u7387\nE = sym.S.Exp1 # \u81ea\u7136\u5bfe\u6570\u306e\u5e95\nI = sym.S.ImaginaryUnit # \u865a\u6570\u5358\u4f4d\n\n# \u4f7f\u7528\u3059\u308b\u5909\u6570\u306e\u5b9a\u7fa9(\u5c0f\u6587\u5b571\u6587\u5b57\u306f\u5168\u3066\u30b7\u30f3\u30dc\u30eb\u3068\u3059\u308b)\n(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) = sym.symbols('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom mpl_toolkits.mplot3d import Axes3D\n```\n\n### \u8272\u3092\u9811\u5f35\u308b\n\n\u8272\u306e\u30ea\u30b9\u30c8\u306fL*a*b*\u8272\u7a7a\u9593\u3067\u8f1d\u5ea6\u4e00\u5b9a\u306e\u74b0\u306b\u306a\u308b\u3088\u3046\u306b\u3001\u5225\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4e8b\u524d\u751f\u6210\u3057\u305f\u3002\n\u8272\u306e\u9bae\u3084\u304b\u3055\u3088\u308a\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u306b\u5b89\u5168\u30de\u30fc\u30b8\u30f3\u3092\u6301\u305f\u305b\u305f\u8a2d\u8a08\u3067\u3001\u8272\u5f31\u306f\u672a\u8003\u616e\u3002\n\u5404\u30ea\u30b9\u30c8\u306f37\u500b\u306eHEX\u6587\u5b57\u5217\u304b\u3089\u306a\u308b\u3002\n37\u3068\u3044\u3046\u6570\u5b57\u306f1\u5468\u306e360\u5ea6\u309210\u5ea6\u305a\u3064\u9032\u3080\u6570\u3067\u3042\u308b36\u306b\u6700\u3082\u8fd1\u3044\u7d20\u6570\u3068\u3044\u3046\u3053\u3068\u3067\u9078\u629e\u3057\u305f\u3002\n(37\u3060\u30681\u5f53\u305f\u308a9.73\u5ea6\u9032\u3080\u3002)\n\u7d20\u6570\u3060\u304b\u3089\u521d\u671f\u8272\u3068\u30b9\u30c6\u30c3\u30d7\u6570\u3092\u3069\u306e\u3088\u3046\u306b\u9078\u3093\u3067\u3082(\u539f\u59cb\u6839\u3067\u306a\u3044\u3068\u30c0\u30e1\u3067\u3059)37\u8272\u3092\u5fc5\u305a1\u8272\u305a\u3064\u901a\u308b**\u5de1\u56de\u7fa4**\u3068\u306a\u308b\u3002\n\u3053\u308c\u306b\u3088\u308a\u7d04\u30b9\u30c6\u30c3\u30d7\u6570*10\u5ea6\u307b\u3069\u4f4d\u76f8\u304c\u9032\u3080\u3068\u3044\u3046\u76f4\u611f\u4e0a\u306e\u4e00\u81f4\u3068\u3001\n\u3067\u304d\u308b\u9650\u308a\u540c\u3058\u8272\u304c\u51fa\u305a\u306b\u9577\u5468\u671f\u306b\u306a\u308b\u3053\u3068\u3092\u4e21\u7acb\u3055\u305b\u305f\u3002\n\n```py3\ndef generator_p(start): # \u5f15\u6570\u304c\u6307\u5b9a\u3055\u308c\u308c\u3070\u305d\u306e\u8272\u3092\u305d\u3046\u3067\u306a\u3044\u3068\u304d\u306f\u9806\u756a\u306b\u8272\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\n    prime = 37 # \u30ea\u30b9\u30c8\u306e\u6570 (\u7d20\u6570\u306a\u306e\u3067primitive\u306b\u4f55\u3092\u6307\u5b9a\u3057\u3066\u3082\u5fc5\u305a\u6700\u5927\u5468\u671f\u306b\u306a\u308b)\n    primitive = 8 # \u751f\u6210\u5143 (1\u30b9\u30c6\u30c3\u30d7\u5f53\u305f\u308a\u8272\u76f8\u304cprimitive * 37/360\u5ea6\u9032\u3080)\n    g0 = start # \u958b\u59cb\u5143 (\u5b9f\u969b\u306b\u8fd4\u3055\u308c\u308b\u306e\u306f g0 * primitive)\n    while True:\n        val = yield g0\n        if val: # \u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\u306b\u5f15\u6570\u304c\u6e21\u3055\u308c\u308b\u3068\u305d\u308c\u3092\u958b\u59cb\u5143\u3068\u3057\u3066\u30ea\u30bb\u30c3\u30c8\u3059\u308b\n            g0 = val\n        g0 += primitive\n        if g0 >= prime: # \u5270\u4f59\u3092\u53d6\u308b\n            g0 -= prime\ngen_hexnum = generator_p(0) # \u5f15\u6570\u306b\u521d\u671f\u8272\u3092\u5165\u308c\u308b\ngen_hexnum.__next__() # \u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\u306e\u521d\u671f\u5316\n\ndef hexNum(num, type): # \u8272\u306e\u30ea\u30b9\u30c8\n    # \u57fa\u672c\u8272(\u767d\u80cc\u666f\u3067\u6c4e\u7528\u7684\u306b\u4f7f\u3048\u308b\u843d\u3061\u7740\u3044\u305f\u8272)\n    color_basic = ['#9c1954', '#9e1a46', '#9d1e38', '#9a252a', '#962d1c', '#8f350d', '#873c00',\n                   '#7d4300', '#734900', '#674f00', '#5b5300', '#4d5700', '#3e5b00', '#2b5d00',\n                   '#0f6009', '#00611c', '#00632b', '#00643a', '#006449', '#006558', '#006567',\n                   '#006575', '#006482', '#00648e', '#006298', '#0060a0', '#005ea6', '#005baa',\n                   '#0056aa', '#0051a9', '#2f4ca4', '#50459d', '#673d94', '#78358a', '#862d7d', '#902470', '#981e62']\n    # \u5f69\u5ea6\u306e\u9ad8\u3044\u8272(\u76ee\u7acb\u3064\u304c\u591a\u7528\u306f\u3057\u306a\u3044\u307b\u3046\u304c\u3088\u3044\u3002)\n    color_vivid = ['#ffadc7', '#ffadbc', '#ffaeb2', '#ffb0a8', '#ffb29e', '#ffb596', '#f9b88f',\n                   '#f1bc8a', '#e9bf86', '#dfc385', '#d5c685', '#caca87', '#becd8b', '#b2cf90',\n                   '#a6d298', '#99d4a0', '#8dd5aa', '#80d7b4', '#74d7bf', '#6ad8ca', '#61d8d5',\n                   '#5bd7e0', '#59d6e9', '#5dd5f2', '#65d3f9', '#71d1ff', '#7fceff', '#8ecbff',\n                   '#9ec8ff', '#afc4ff', '#bec1ff', '#cdbdfd', '#dab9f7', '#e6b6ef', '#f0b3e6', '#f9b0dc', '#ffaed2']\n    # \u8584\u3044\u8272(\u767d\u80cc\u666f\u3067\u306f\u4f7f\u308f\u306a\u3044\u3002\u9ed2\u80cc\u666f\u3067\u4f7f\u3046\u3053\u3068\u3092\u60f3\u5b9a\u3002)\n    color_thin = ['#ffc3d5', '#ffc3cd', '#ffc3c5', '#ffc4be', '#ffc6b7', '#ffc8b1', '#fbcaac',\n                  '#f5cca9', '#efcfa6', '#e8d2a5', '#e0d4a5', '#d8d7a6', '#cfd9a9', '#c6dbad',\n                  '#bdddb3', '#b5deb9', '#ace0c0', '#a5e0c7', '#9ee1cf', '#98e1d7', '#94e1df',\n                  '#92e1e6', '#92e0ed', '#94dff4', '#99def9', '#9fdcfd', '#a7daff', '#b1d8ff',\n                  '#bbd5ff', '#c5d3ff', '#cfd0ff', '#dacdfc', '#e3cbf7', '#ecc8f2', '#f3c6eb', '#f9c5e4', '#fec4dc']\n\n    if (type == 'thin'):\n        hex_list = color_thin\n    elif (type == 'vivid'):\n        hex_list = color_vivid\n    else:\n        hex_list = color_basic\n    if num is not None:\n        gen_hexnum.send(num)\n    return hex_list[gen_hexnum.__next__()]\n```\n\n## 2\u6b21\u5143\u30b0\u30e9\u30d5plot\u95a2\u6570\u306e\u4f5c\u6210\uff1a1\u5909\u6570\u967d\u95a2\u6570\n```py3\ndef plot(func, xrange, ylim=None, xlog=None, ylog=None, cn=None, ct='basic', close=None, figs=None, simbol=x):\n    if figs:\n        plt.figure(figsize=figs)\n    X = np.arange(xrange[0], xrange[1], xrange[2])\n    if hasattr(func, \"subs\"): # sympy\n        Y = [func.subs([(simbol, K)]) for K in X]\n    else: # scipy\n        Y = [func(K) for K in X]\n    if ylim:\n        plt.ylim(ylim)\n    if xlog:\n        plt.xscale('log')\n    else:\n        plt.xscale('linear')\n    if ylog:\n        plt.yscale('log')\n    else:\n        plt.yscale('linear')\n    plt.plot(X, Y, color=hexNum(cn, ct))\n    if close:\n        plt.show()\n        plt.close()\n```\n\u7d20\u306ematplotlib.plot\u306f\u3084\u3084\u3053\u3057\u3044\u306e\u3067\u3088\u304f\u4f7f\u3046\u5f15\u6570\u3060\u3051\u3092\u30e9\u30c3\u30d7\u3057\u305f\u95a2\u6570\u3092\u4f5c\u3063\u305f\u3002\n\u95a2\u6570\u3068\u5e45\u3001\u8272\u7a0b\u5ea6\u3092\u4e0e\u3048\u305f\u3089\u5f8c\u306f\u3088\u3057\u306a\u306b\u3057\u3066\u304f\u308c\u3068\u3044\u3046\u3050\u3089\u3044\u306e\u65b9\u304c\u4f7f\u3044\u3084\u3059\u3044\u3002\n\n```py3\nF = sym.sin(x)/x\nG = sym.cos(x)/x\nplot(F, (-10, 10, 0.1), cn=0, figs=(10, 6))\nplot(G, (-10, 10, 0.1))\nplot(F+0.2, (-10, 10, 0.1))\nplot(F+0.4, (-10, 10, 0.1))\nplot(F+0.6, (-10, 10, 0.1))\nplot(F+0.8, (-10, 10, 0.1))\nplot(F+1.0, (-10, 10, 0.1))\ndef A(x):\n    return np.sin(x)/x\nplot(A, (-10, 10, 0.1))\nplot(lambda X: (X/9.0)**2, (-10, 10, 0.1), (-0.5, 1.5), close=True)\n```\n![hiki.png](https://qiita-image-store.s3.amazonaws.com/0/133885/0d429dd5-8f89-04f8-7bd6-28e04ee019cf.png)\nsympy\u3092\u5feb\u9069\u306b\u4f7f\u3046\u306b\u306f\u5c0f\u6587\u5b57\u306f\u5168\u3066\u30b7\u30f3\u30dc\u30eb\u306b\u3057\u305f\u3044\u306e\u3067\u3001\n\u95a2\u6570\u540d\u3084\u30eb\u30fc\u30d7\u5909\u6570\u306f\u610f\u8b58\u7684\u306b\u5927\u6587\u5b57\u306b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\ncolor\u306b\u3088\u308b\u8272\u5206\u3051\u52b9\u679c\u3001hasattr\u306b\u3088\u308bsympy\u3068numpy\u95a2\u6570\u306e\u81ea\u52d5\u5224\u5b9a\u3001\nclose\u5f15\u6570\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u307e\u3068\u3081\u3066\u6700\u5f8c\u3060\u3051\u306b\u66f8\u3051\u3070\u826f\u304f\u306a\u3063\u305f\u3002\n\u304b\u306a\u308a\u76f4\u611f\u7684\u306b\u30d7\u30ed\u30c3\u30c8\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u6e80\u8db3\u306e\u3044\u304f\u51fa\u6765\u3002\n\u305f\u3060\u30b0\u30e9\u30d5\u3092\u898b\u308b\u3068$\\frac{\\cos(x)}{x}$\u306e\u6975\u304c\u5909\u3002\n$-\\infty\\longrightarrow\\infty$\u306e\u9014\u4e2d\u306e\u7dda\u304c\u63cf\u5199\u3055\u308c\u3066\u3044\u308b\u96f0\u56f2\u6c17\u3060\u304c\n\u89e3\u6c7a\u7b56\u3042\u308b\u306e\u304b\u306a\u3002\n\n## 2\u6b21\u5143\u30b0\u30e9\u30d5plot\u95a2\u6570\u306e\u4f5c\u6210\uff1a\u5a92\u4ecb\u5909\u6570\u8868\u793a\n\n```py3\ndef plotp(func, t_range=(-4, 4, 100), axis=[-4, 4, -4, 4],\n          xlog=None, ylog=None, cn=None, ct='basic', close=None, figs=None, simbol=t):\n    if figs:\n        plt.figure(figsize=figs)\n    X, Y = func\n    t_ndarray = np.linspace(t_range[0], t_range[1], t_range[2]) # ndarray\n    if hasattr(X, \"subs\"): # sympy\n        Xp = np.array([float(sym.N(X.subs([(simbol, T)]))) for T in t_ndarray])\n        Yp = np.array([float(sym.N(Y.subs([(simbol, T)]))) for T in t_ndarray])\n    else: # scipy\n        Xp = [X(K) for K in t_ndarray]\n        Yp = [Y(K) for K in t_ndarray]\n    plt.axis(axis)\n    if xlog:\n        plt.xscale('log')\n    else:\n        plt.xscale('linear')\n    if ylog:\n        plt.yscale('log')\n    else:\n        plt.yscale('linear')\n    plt.plot(Xp, Yp, color=hexNum(cn, ct))\n    if close:\n        plt.show()\n        plt.close()\n```\nplot()\u3068\u306e\u9055\u3044\u306fFunc\u304c2\u95a2\u6570\u306e\u30ea\u30b9\u30c8\u3067\u6e21\u3055\u308c\u3001x, y\u306e\u9818\u57df\u3092\u6307\u5b9a\u3059\u308baxis\u304c\u52a0\u308f\u3063\u3066\u3044\u308b\u3002\n\u30b7\u30f3\u30dc\u30eb\u306f\u6163\u4f8b\u304b\u3089t\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u3068\u3057\u305f\u3002\n\u307e\u305ft\u306e\u30ec\u30f3\u30b8\u306e3\u3064\u76ee\u3068\u3057\u3066\u523b\u307f\u5e45\u3067\u306f\u306a\u304f\u5206\u5272\u6570\u3067\u6307\u5b9a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\n```py3\nX = t**2 * sym.sin(t)\nY = t**2 * sym.cos(t)\nplotp([X, Y], (-4 * np.pi, 4 * np.pi, 400), [-100, 100, -100, 100], figs=(6, 6), close=True)\nplotp([lambda T: T * np.sin(T), lambda T: T * np.cos(T)], (-4 * np.pi, 4 * np.pi, 400), [-12, 12, -10, 10],\ncn=14, figs=(6, 6), close=True)\n```\n![hiki2.png](https://qiita-image-store.s3.amazonaws.com/0/133885/0d450dc5-36d2-b17d-0fc7-99b19727ce27.png)\n![hiki3.png](https://qiita-image-store.s3.amazonaws.com/0/133885/7266eedd-3df6-031f-4cf1-afe7c5f9c49b.png)\n\nsympy, scipy\u306e\u4e21\u65b9\u3067\u3046\u307e\u304f\u3044\u3063\u305f\u3002\n\n## 2\u6b21\u5143\u30b0\u30e9\u30d5plot\u95a2\u6570\u306e\u4f5c\u6210\uff1a2\u5909\u6570\u9670\u95a2\u6570\n\n$F(x, y)=0$\u306e\u5f62\u5f0f\u3067\u8868\u73fe\u3055\u308c\u308b\u95a2\u6570\u3067\u3042\u308b\u3002\n\u9670\u95a2\u6570\u3092\u76f4\u63a5\u6271\u3046\u306e\u306f\u96e3\u3057\u305d\u3046\u3002\n\u306a\u306e\u3067sympy\u306eplot_implicit\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u3002\n\n```py3\nF = x**3 + y**2 -1\nsym.plot_implicit(F, (x, -2, 2), (y, -2, 2), line_color=hexNum(2, 'basic'))\n```\n![hiki4.png](https://qiita-image-store.s3.amazonaws.com/0/133885/7db41fb2-d8b4-b98d-e179-1d3930edba0b.png)\n\u3053\u308c\u306f\u6955\u5186\u66f2\u7dda\u306e\u5f0f\u3067\u3042\u308b\u3002\n\u8272\u306f\u4f7f\u3048\u308b\u307f\u305f\u3044\u3060\u3051\u3069\u8584\u3044\u3002\n\n```py3\nF = x**3 - 2 * x + y**2 > 0\nsym.plot_implicit(F, (x, -2, 2), (y, -2, 2), line_color=hexNum(2, 'thin'))\n```\n![hiki5.png](https://qiita-image-store.s3.amazonaws.com/0/133885/6012d5ed-501b-3bc0-bd06-db0fdaea088c.png)\n\n\u4e0d\u7b49\u5f0f\u304c\u4f7f\u3048\u308b\u306e\u304c\u5229\u70b9\u3002\n\n## 3\u6b21\u5143\u30b0\u30e9\u30d5plot\u95a2\u6570\u306e\u4f5c\u6210\uff1a2\u5909\u6570\u967d\u95a2\u6570\n\n$z=f(x, y)$\u306e\u5f62\u306e\u95a2\u6570\u3067\u3042\u308b\u3002\n\n```py3\nfrom matplotlib import cm\n\ndef plot3D(func, xrange=(-2, 2, 0.1), yrange=(-2, 2, 0.1), ptype='plot', simbol=[x, y]):\n    fig = plt.figure()\n    ax = Axes3D(fig)\n    if ptype == 'plot':\n        ax.plot(func[0], func[1], func[2])\n        plt.show()\n        plt.close()\n        return\n    X = np.arange(xrange[0], xrange[1], xrange[2])\n    Y = np.arange(yrange[0], yrange[1], yrange[2])\n    Xmesh, Ymesh = np.meshgrid(X, Y)\n    if hasattr(func, \"subs\"): # sympy\n        Z = np.array([np.array([float(sym.N(func.subs([(simbol[0], K), (simbol[1], L)]))) for K in X]) for L in Y])\n    else: # scipy\n        Z = func(Xmesh, Ymesh)\n\n    if ptype == 'surface':\n         ax.plot_surface(Xmesh, Ymesh, Z, cmap=cm.bwr)\n    elif ptype == 'wireframe':\n        ax.plot_wireframe(Xmesh,Ymesh, Z)\n    elif ptype == 'contour':\n        ax.contour3D(X, Y, Z)\n    plt.show()\n    plt.close()\n```\n\n```py3\nplot3D(lambda T, U: T * U * np.sin(T), (-4, 4, 0.25), (-4, 4, 0.25), 'surface')\n\nplot3D((x ** 2 - 3 - y ** 2), (-4, 4, 0.25), (-4, 4, 0.25), 'surface')\nplot3D((x ** 2 - 3 - y ** 2), (-4, 4, 0.25), (-4, 4, 0.25), 'wireframe')\nplot3D((x ** 2 - 3 - y ** 2), (-4, 4, 0.25), (-4, 4, 0.25), 'contour')\n```\n![hiki6.png](https://qiita-image-store.s3.amazonaws.com/0/133885/4132457c-96a9-3ac0-c539-ed158c8df005.png)\n![hiki7.png](https://qiita-image-store.s3.amazonaws.com/0/133885/564cf8ef-8307-b273-210b-16a4b607fcb5.png)\n\n3\u6b21\u5143\u306f\u8f1d\u5ea6\u5dee\u3092\u51fa\u3057\u3066\u6d6e\u304d\u6c88\u307f\u3092\u898b\u305f\u65b9\u304c\u826f\u3044\u304b\u3089\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ab\u30e9\u30fc\u3092\u63a1\u7528\u3002\n\u66f2\u7387\u304c\u8ca0\u306e\u5b87\u5b99\u306e\u56f3\u3067\u3088\u304f\u51fa\u3066\u304f\u308b\u99ac\u306e\u978d\u306e\u95a2\u6570\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u307f\u305f\u3002\n\n## 3\u6b21\u5143\u30b0\u30e9\u30d5plot\u95a2\u6570\u306e\u4f5c\u6210\uff1a\u5a92\u4ecb\u5909\u6570\u8868\u793a\n\n```py3\ndef plotp3(func, simbol=[t], rangeL=[(-4, 4, 100)]):\n    X, Y, Z = func\n    t1 = simbol[0]\n    if len(simbol) >= 2:\n        u1 = simbol[1]\n    t_rangeL = rangeL[0]\n    t_ndarray = np.linspace(t_rangeL[0], t_rangeL[1], t_rangeL[2]) # ndarray\n    \n    if len(rangeL) >= 2:\n        u_rangeL = rangeL[1]\n        u_ndarray = np.linspace(u_rangeL[0], u_rangeL[1], u_rangeL[2]) # ndarray\n    if len(rangeL) == 1:\n        Xp = np.array([float(sym.N(X.subs([(t1, T)]))) for T in t_ndarray])\n        Yp = np.array([float(sym.N(Y.subs([(t1, T)]))) for T in t_ndarray])\n        Zp = np.array([float(sym.N(Z.subs([(t1, T)]))) for T in t_ndarray])\n    else:\n        Xp = np.array([float(sym.N(X.subs([(t1, T), (u1, U)]))) for T in t_ndarray for U in u_ndarray])\n        Yp = np.array([float(sym.N(Y.subs([(t1, T), (u1, U)]))) for T in t_ndarray for U in u_ndarray])\n        Zp = np.array([float(sym.N(Z.subs([(t1, T), (u1, U)]))) for T in t_ndarray for U in u_ndarray])\n\n    fig = plt.figure()\n    ax = Axes3D(fig)\n    ax.plot(Xp, Yp, Zp)\n    plt.show()\n    plt.close()\n```\n\n```py3\nX = 2*sym.cos(t)\nY = 5*sym.sin(t)\nZ = t\nplotp3([X, Y, Z], [t], [(-5 * np.pi, 5 * np.pi, 200)])\n\nX = (5+2*sym.cos(t))*sym.cos(u)\nY = (5+2*sym.sin(u))*sym.sin(u)\nZ = 2*sym.sin(t)-u/sym.oo\nplotp3([X, Y, Z], [t, u], [(-np.pi, np.pi, 40), (-np.pi, np.pi, 40)])\n```\n![hiki8.png](https://qiita-image-store.s3.amazonaws.com/0/133885/2b34c122-206b-bd76-07e7-de715ca955ef.png)\n\n\u3053\u306e\u8fba\u304b\u3089\u75b2\u308c\u3066\u304d\u305f\u3002\n3\u6b21\u5143\u306fsympy\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u3067\u3044\u3044\u3088\u3002\n\n```py3\nX = 2*sym.cos(t)\nY = 5*sym.sin(t)\nZ = t\nsym.plotting.plot3d_parametric_line(X, Y, Z, (t, -5*np.pi, 5*np.pi))\n\nX = (5+2*sym.cos(t))*sym.cos(u)\nY = (5+2*sym.sin(u))*sym.sin(u)\nZ = 2*sym.sin(t)-u/sym.oo\nsym.plotting.plot3d_parametric_surface(X, Y, Z, (t, -np.pi, np.pi), (u, -np.pi, np.pi))\n```\n![hiki9.png](https://qiita-image-store.s3.amazonaws.com/0/133885/2966e861-fce4-c590-9899-0fa123f183a2.png)\n\n\n\n\n", "tags": ["Python", "sympy", "\u6570\u5b66", "matplotlib", "scipy"]}