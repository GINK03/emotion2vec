{"context": "\u6570\u5b66\u30bf\u30b0\u4ed8\u3044\u3066\u308b\u3051\u3069\u7b97\u6570\u3002\n\n\u9023\u9664\u6cd5\n\u5c0f\u5b664\u5e74\u751f\u3067\u6700\u5927\u516c\u7d04\u6570\u30fb\u6700\u5c0f\u516c\u500d\u6570\u3092\u7fd2\u3046\u306e\u3060\u304c\u3001\u305d\u306e\u969b\u306e\u300c\u3084\u308a\u304b\u305f\u300d\u306b\u9023\u9664\u6cd5\uff08\u3059\u3060\u308c\u7b97\u3068\u3082\uff09\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u3068\u77e5\u3063\u305f\u3002\n\n\u3084\u308a\u304b\u305f\n\n\n\u6700\u5927\u516c\u7d04\u6570\uff08GCD\uff09\n\u6574\u6570\u306e\u7d44\u306b\u5171\u901a\u3059\u308b\u7d04\u6570\u304c\u3042\u308b\u5834\u5408\u306b\u7d04\u3057\u3066\u3044\u304d\u3001\u9664\u6570\u3092\u3059\u3079\u3066\u4e57\u7b97\u3057\u3066\u6c42\u3081\u308b\n\n\u6700\u5c0f\u516c\u500d\u6570\uff08LCM\uff09\n\u6574\u6570\u306e\u7d44\u306b2\u3064\u4ee5\u4e0a\u5171\u901a\u3059\u308b\u7d04\u6570\u304c\u3042\u308b\u5834\u5408\u306b\u7d04\u3057\u3066\u3044\u304d\u3001\u9664\u6570\u3068\u3042\u307e\u308a\u3092\u3059\u3079\u3066\u4e57\u7b97\u3057\u3066\u6c42\u3081\u308b\n\n\u3088\u304f\u3042\u308bGCD\u3001LCM\n\u3082\u3061\u308d\u3093\u3001\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5\u3067\u7c21\u5358\u306b\u3067\u304d\u308b\u3002\u6574\u6570\u306e\u7d44\u304c2\u500b\u3088\u308a\u591a\u3044\u5834\u5408\u3067\u3082 $gcd(a,b,c) = gcd(gcd(a,b),c)$ \u3067\u89e3\u3051\u308b\u3002\npublic int GCD(int a, int b) {\n   if (b==0) return a;\n   return GCD(b,a%b);\n}\n\npublic int LCM(int a, int b) {\n    return a * b / GCD(a, b);\n}\n\n\n\u518d\u5b9f\u88c5\u3057\u3066\u307f\u308b\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u5a18\u304c Scratch \u3067\u518d\u73fe\u53ef\u80fd\u306a\u3053\u3068\u304c\u76ee\u7684\u306a\u306e\u3067\u3001\u3072\u3068\u307e\u305a Java \u3067\u7d20\u7d44\u307f\u3057\u3066\u307f\u308b\u3002\n\u30bd\u30fc\u30b9\n\n\u6574\u6570\u306e\u7d44\u3092\u7d20\u6570\u3067\u7d04\u3057\u3066\u307f\u308b\n\nGCD\u3068LCM\u306e\u3068\u304d\u3067\u306f\u7d04\u3059\u308b\u3084\u308a\u65b9\u304c\u7570\u306a\u308b\u306e\u3067\u3001Predicate \u3092\u5165\u308c\u66ff\u3048\u3066\u3044\u308b\u3002Java \u3067\u3082\u95a2\u6570\u3092\u6e21\u305b\u308b\u306d\uff01\nInteger primeFactory(List<Integer> intList) {\n    Predicate<Integer> op = mode.equals(Mode.GCD) ? factoryAll(intList) : factoryMulti(intList);\n    return primeList.stream().filter(op).findFirst().orElse(1);\n}\n\nstatic Predicate<Integer> factoryAll(List<Integer> intList) {\n    return i -> intList.stream().allMatch(isDivisable(i));\n}\n\nstatic Predicate<Integer> factoryMulti(List<Integer> intList) {\n    return i -> intList.stream().filter(isDivisable(i)).count() > 1;\n}\n\n\n\u7d04\u305b\u305f\u3089\u6b21\u306e\u6bb5\u306b\u79fb\u308b\n\n\u5143\u306e\u6574\u6570\u306e\u7d44\u3092\u7d04\u6570\u3067\u5272\u3063\u305f\u3001\u65b0\u3057\u3044\u6574\u6570\u306e\u7d44\u3092\u751f\u6210\u3059\u308b\u3002UnaryOperator \u3067\u5358\u9805\u6f14\u7b97\u3092\u6e21\u3057\u3066\u3044\u308b\u3002LCM\u306e\u305f\u3081\u5272\u308a\u5207\u308c\u306a\u3044\u5834\u5408\u306f\u5143\u306e\u6574\u6570\u3092\u8fd4\u3059\u3002\nstatic List<Integer> divideList(Integer divisor, List<Integer> intList) {\n    return intList.stream().map(divide(divisor)).collect(Collectors.toList());\n}\n\nstatic UnaryOperator<Integer> divide(Integer divisor) {\n    return i -> (i % divisor) == 0 ? i / divisor : i;\n}\n\n\n\u6700\u7d42\u7684\u306b\u5bfe\u8c61\u3092\u3059\u3079\u3066\u4e57\u7b97\u3059\u308b\n\nInteger getGCD() {\n    return reduceDivisor();\n}\nInteger getLCM() {\n    return getLastValue().stream().reduce(1, (x, y) -> x * y) * reduceDivisor();\n}\nInteger reduceDivisor() {\n    return stack.stream().map(p -> p.getKey()).reduce(1, (x, y) -> x * y);\n}\n\n\n\u3042\u3068\u304c\u304d\n\u30b9\u30c6\u30c3\u30d7\u4e09\u3064\u3060\u3051\u3069 Scratch \u3067\u7d44\u3080\u306e\u306f\u3057\u3093\u3069\u305d\u3046\u306a\u306e\u3067\u4fdd\u7559\u4e2d\u3002\u7d20\u6570\u5c0e\u51fa\u306f\u3044\u305a\u308c\u3002\n\u6570\u5b66\u30bf\u30b0\u4ed8\u3044\u3066\u308b\u3051\u3069\u7b97\u6570\u3002\n\n# \u9023\u9664\u6cd5\n\u5c0f\u5b664\u5e74\u751f\u3067\u6700\u5927\u516c\u7d04\u6570\u30fb\u6700\u5c0f\u516c\u500d\u6570\u3092\u7fd2\u3046\u306e\u3060\u304c\u3001\u305d\u306e\u969b\u306e\u300c\u3084\u308a\u304b\u305f\u300d\u306b\u9023\u9664\u6cd5\uff08\u3059\u3060\u308c\u7b97\u3068\u3082\uff09\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u3068\u77e5\u3063\u305f\u3002\n\n## \u3084\u308a\u304b\u305f\n![20170124_001.png](https://qiita-image-store.s3.amazonaws.com/0/43992/17cc0f5a-c03a-2d1f-a5bf-5564905eefb7.png)\n\n### \u6700\u5927\u516c\u7d04\u6570\uff08GCD\uff09\n\u6574\u6570\u306e\u7d44\u306b\u5171\u901a\u3059\u308b\u7d04\u6570\u304c\u3042\u308b\u5834\u5408\u306b\u7d04\u3057\u3066\u3044\u304d\u3001\u9664\u6570\u3092\u3059\u3079\u3066\u4e57\u7b97\u3057\u3066\u6c42\u3081\u308b\n### \u6700\u5c0f\u516c\u500d\u6570\uff08LCM\uff09\n\u6574\u6570\u306e\u7d44\u306b2\u3064\u4ee5\u4e0a\u5171\u901a\u3059\u308b\u7d04\u6570\u304c\u3042\u308b\u5834\u5408\u306b\u7d04\u3057\u3066\u3044\u304d\u3001\u9664\u6570\u3068\u3042\u307e\u308a\u3092\u3059\u3079\u3066\u4e57\u7b97\u3057\u3066\u6c42\u3081\u308b\n\n## \u3088\u304f\u3042\u308bGCD\u3001LCM\n\u3082\u3061\u308d\u3093\u3001\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5\u3067\u7c21\u5358\u306b\u3067\u304d\u308b\u3002\u6574\u6570\u306e\u7d44\u304c2\u500b\u3088\u308a\u591a\u3044\u5834\u5408\u3067\u3082 $gcd(a,b,c) = gcd(gcd(a,b),c)$ \u3067\u89e3\u3051\u308b\u3002\n\n```java\npublic int GCD(int a, int b) {\n   if (b==0) return a;\n   return GCD(b,a%b);\n}\n\npublic int LCM(int a, int b) {\n    return a * b / GCD(a, b);\n}\n```\n\n## \u518d\u5b9f\u88c5\u3057\u3066\u307f\u308b\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u5a18\u304c Scratch \u3067\u518d\u73fe\u53ef\u80fd\u306a\u3053\u3068\u304c\u76ee\u7684\u306a\u306e\u3067\u3001\u3072\u3068\u307e\u305a Java \u3067\u7d20\u7d44\u307f\u3057\u3066\u307f\u308b\u3002\n[\u30bd\u30fc\u30b9](https://github.com/ueno-t/factorization-for-elementary)\n\n - \u6574\u6570\u306e\u7d44\u3092\u7d20\u6570\u3067\u7d04\u3057\u3066\u307f\u308b\n\nGCD\u3068LCM\u306e\u3068\u304d\u3067\u306f\u7d04\u3059\u308b\u3084\u308a\u65b9\u304c\u7570\u306a\u308b\u306e\u3067\u3001Predicate \u3092\u5165\u308c\u66ff\u3048\u3066\u3044\u308b\u3002Java \u3067\u3082\u95a2\u6570\u3092\u6e21\u305b\u308b\u306d\uff01\n\n```java\nInteger primeFactory(List<Integer> intList) {\n\tPredicate<Integer> op = mode.equals(Mode.GCD) ? factoryAll(intList) : factoryMulti(intList);\n\treturn primeList.stream().filter(op).findFirst().orElse(1);\n}\n\nstatic Predicate<Integer> factoryAll(List<Integer> intList) {\n\treturn i -> intList.stream().allMatch(isDivisable(i));\n}\n\nstatic Predicate<Integer> factoryMulti(List<Integer> intList) {\n\treturn i -> intList.stream().filter(isDivisable(i)).count() > 1;\n}\n```\n\n - \u7d04\u305b\u305f\u3089\u6b21\u306e\u6bb5\u306b\u79fb\u308b\n\n\u5143\u306e\u6574\u6570\u306e\u7d44\u3092\u7d04\u6570\u3067\u5272\u3063\u305f\u3001\u65b0\u3057\u3044\u6574\u6570\u306e\u7d44\u3092\u751f\u6210\u3059\u308b\u3002UnaryOperator \u3067\u5358\u9805\u6f14\u7b97\u3092\u6e21\u3057\u3066\u3044\u308b\u3002LCM\u306e\u305f\u3081\u5272\u308a\u5207\u308c\u306a\u3044\u5834\u5408\u306f\u5143\u306e\u6574\u6570\u3092\u8fd4\u3059\u3002\n\n```java\nstatic List<Integer> divideList(Integer divisor, List<Integer> intList) {\n\treturn intList.stream().map(divide(divisor)).collect(Collectors.toList());\n}\n\nstatic UnaryOperator<Integer> divide(Integer divisor) {\n\treturn i -> (i % divisor) == 0 ? i / divisor : i;\n}\n```\n\n - \u6700\u7d42\u7684\u306b\u5bfe\u8c61\u3092\u3059\u3079\u3066\u4e57\u7b97\u3059\u308b\n\n```java\nInteger getGCD() {\n\treturn reduceDivisor();\n}\nInteger getLCM() {\n\treturn getLastValue().stream().reduce(1, (x, y) -> x * y) * reduceDivisor();\n}\nInteger reduceDivisor() {\n\treturn stack.stream().map(p -> p.getKey()).reduce(1, (x, y) -> x * y);\n}\n```\n\n## \u3042\u3068\u304c\u304d\n\u30b9\u30c6\u30c3\u30d7\u4e09\u3064\u3060\u3051\u3069 Scratch \u3067\u7d44\u3080\u306e\u306f\u3057\u3093\u3069\u305d\u3046\u306a\u306e\u3067\u4fdd\u7559\u4e2d\u3002\u7d20\u6570\u5c0e\u51fa\u306f\u3044\u305a\u308c\u3002\n", "tags": ["Java", "\u6570\u5b66"]}