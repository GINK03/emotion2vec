{"context": "IoT\u3068\u3084\u3089\u304c\u5927\u30d6\u30fc\u30e0\u3067\u3059\u304c\u3001\u305d\u306e\u4e00\u65b9\u3067\u982d\u3092\u62b1\u3048\u305f\u304f\u306a\u308b\u3088\u3046\u306a\u8106\u5f31\u6027\u6e80\u8f09\u306eTLS\u30b9\u30bf\u30c3\u30af\u3092\u642d\u8f09\u3057\u305f\u88fd\u54c1\u304c\u6642\u6298\u307f\u3089\u308c\u307e\u3059\u3002\u307f\u306a\u3055\u3093TLS\u30b9\u30bf\u30c3\u30af\u306e\u30c6\u30b9\u30c8\u3061\u3083\u3093\u3068\u3084\u3063\u3066\u307e\u3059\u304b\u3002\nTLS\u30b9\u30bf\u30c3\u30af\u306e\u30c6\u30b9\u30c8\u3092\u3084\u308b\u3068\u306a\u308b\u3068\u3001\u305d\u3053\u3067\u4f7f\u3046\u30b9\u30bf\u30d6\u3068\u304b\u30e2\u30c3\u30af\u3068\u304b\u30c0\u30d6\u30eb\u3068\u304b\u30c9\u30e9\u30a4\u30d0\u3068\u304b\u547c\u3070\u308c\u308b\u30e2\u30ed\u30e2\u30ed\u306e\u3042\u308c\u3084\u305d\u308c\u3084\u3092\u4f5c\u3063\u3066\u3044\u304f\u308f\u3051\u3067\u3059\u304c\u3001\u305d\u306e\u305f\u3081\u306bTLS\u30b9\u30bf\u30c3\u30af\u3092\u4e00\u304b\u3089\u66f8\u304f\u306e\u306f\u3061\u3087\u3063\u3068\u975e\u73fe\u5b9f\u7684\u306a\u306e\u3067\u3001\u4f55\u3089\u304b\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5165\u624b\u3057\u3066\u305d\u3053\u304b\u3089\u624b\u3092\u52a0\u3048\u3066\u3044\u304f\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u3057\u304b\u308b\u306bOpenSSL\u306f\u3001\u9ad8\u6a5f\u80fd\u3067\u3059\u3051\u3069\u6539\u9020\u6bcd\u4f53\u3068\u3059\u308b\u306b\u306f\u6577\u5c45\u304c\u9ad8\u3044\u3067\u3059\u3088\u306d\u3002\u3057\u304b\u3057OpenJDK\u306eJSSE\u306a\u3089\u3001\u6a5f\u80fd\u6027\u306f\u3068\u3082\u304b\u304f\u3001\u6539\u9020\u6bcd\u4f53\u3068\u3057\u3066\u306e\u6271\u3044\u3084\u3059\u3055\u306f\u305d\u308c\u306a\u308a\u306b\u60aa\u304f\u306a\u3044\u3068\u3044\u3046\u5370\u8c61\u3067\u3059\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u304f\u308c\u3050\u308c\u3082\u60aa\u7528\u53b3\u7981\u3067\u30ec\u30c3\u30c4\u30b4\u30fc\uff01\n\n\u5b9f\u884c\u74b0\u5883\u3068\u65b9\u91dd\nOracleJDK/OpenJDK\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092extend\u3057\u3066\u6a5f\u80fd\u8ffd\u52a0\u3067\u304d\u308c\u3070\u3044\u3044\u3093\u3067\u3059\u3051\u3069\u305d\u308c\u306f\u9650\u754c\u304c\u3042\u308b\u306e\u3067\u3001OpenJDK8u\u306eJSSE\u30bd\u30fc\u30b9\u3092\u624b\u306b\u5165\u308c\u3066\u3001\u305d\u308c\u3092\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u91cd\u8907\u3057\u306a\u3044\u3088\u3046\u306b\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u3092\u66f8\u304d\u63db\u3048\u3066\u4f7f\u3044\u307e\u3059\u3002\u4eca\u56de\u4f7f\u3063\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\nWindows x64\u7248Java SE Development Kit 8u102\n\nOpenJDK8u http://hg.openjdk.java.net/jdk8/jdk8 \u3092\u898b\u3066\u9069\u5f53\u306a\u30ea\u30d3\u30b8\u30e7\u30f3\u3092\u4f7f\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\u672c\u7a3f\u57f7\u7b46\u6642\u306e\u6700\u65b0\u7248 5beaee665e14 \u3067\u3059\u3002\n\nOracle JDK\u4e0a\u3067\u3001OpenJDK\u306eJSSE\u90e8\u5206\u3060\u3051\u3092\u5207\u308a\u51fa\u3057\u3066\u304d\u305f\u3082\u306e\u3092\u52d5\u304b\u3057\u307e\u3059\u3002\u305d\u308c\u672c\u5f53\u306b\u5927\u4e08\u592b\u306a\u306e\u304b\u3068\u3044\u3046\u8a71\u3067\u3059\u304c\u3001\u610f\u5916\u3068\u5927\u4f53\u307e\u3042\u307e\u3042\u304a\u304a\u3080\u306d\u305d\u3053\u305d\u3053\u305d\u308c\u306a\u308a\u306b\u52d5\u304f\u3068\u8a00\u3063\u3066\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u306d\u3001\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3059\uff08\u6c57\uff09\u3002\n\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nwget -q -O- http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/archive/5beaee665e14.tar.bz2/src/share/classes/sun/security/ssl/ | tar xjvf -\n\n\u3053\u308c\u3067\u5c55\u958b\u3055\u308c\u307e\u3059\u3002\nOpenJDK\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u306fMercurial\u306a\u306e\u3067\u3001hg\u30b3\u30de\u30f3\u30c9\u3092\u99c6\u4f7f\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u4f7f\u3046\u306e\u306fsrc/share/classes/sun/security/ssl/\u306e\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u3067\u3059\u304b\u3089\u3001\u3053\u308c\u3067\u5341\u5206\u3067\u3059\u3002\n\n\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u306e\u66f8\u304d\u63db\u3048\n\u30aa\u30ea\u30b8\u30ca\u30eb\u306fsun.security.ssl\u3067\u3059\u304c\u3001\u3053\u306e\u307e\u307e\u3067\u306fOracle JDK\u306e\u30aa\u30ea\u30b8\u30ca\u30eb\u7248\u3068\u91cd\u8907\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u66f8\u304d\u63db\u3048\u3092\u884c\u3044\u307e\u3059\u3002\u4eca\u56de\u306fcom.example.ssltester\u3068\u3044\u3046\u540d\u524d\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u3053\u306e\u3042\u305f\u308a\u306f\u304a\u597d\u307f\u3067\u9069\u5b9c\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nmkdir -p src/com/example/ssltester/krb5\nfor i in `find jdk-5beaee665e14/ -type f -print`\ndo\nj=`echo $i | sed s,jdk-5beaee665e14/src/share/classes/sun/security/ssl/,src/com/example/ssltester/,`\nsed -e 's/sun\\.security\\.ssl/com.example.ssltester/' < $i > $j\ndone\n\n\n\u30a8\u30e9\u30fc\u306e\u4fee\u6b63\n\u4e00\u7b87\u6240\u3001\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u3001\u3053\u3053\u306f\u5b89\u76f4\u306b\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3067\u5bfe\u5fdc\u3057\u307e\u3059\u3002\ndiff --git a/src/com/example/ssltester/SunJSSE.java b/src/com/example/ssltester/SunJSSE.java\nindex f7883a4..59d8a3d 100644\n--- a/src/com/example/ssltester/SunJSSE.java\n+++ b/src/com/example/ssltester/SunJSSE.java\n@@ -231,9 +231,9 @@ public abstract class SunJSSE extends java.security.Provider {\n     }\n\n     private void subclassCheck() {\n-        if (getClass() != com.sun.net.ssl.internal.ssl.Provider.class) {\n-            throw new AssertionError(\"Illegal subclass: \" + getClass());\n-        }\n+//        if (getClass() != com.sun.net.ssl.internal.ssl.Provider.class) {\n+//            throw new AssertionError(\"Illegal subclass: \" + getClass());\n+//        }\n     }\n\n     @Override\n\n\u3053\u308c\u4ee5\u5916\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u5834\u5408\u306f\u3001OracleJDK\u3068OpenJDK\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u898b\u76f4\u3057\u3066\u307f\u3066\u4e0b\u3055\u3044\u3002JSSE\u306e\u5185\u90e8\u4ed5\u69d8\u306f\u6848\u5916\u983b\u7e41\u306b\u5909\u66f4\u3055\u308c\u307e\u3059\u306e\u3067\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u9055\u3046\u3068\u52d5\u304b\u306a\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\n\u30bd\u30fc\u30b9\u306e\u5c55\u958b\u304c\u5b8c\u4e86\u3057\u305f\u306e\u3067\u3001\u65e9\u901f\u52d5\u304b\u3057\u3066\u307f\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u306f\uff12\u7a2e\u985e\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u3057\u3066\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3057\u306b\u884c\u304f\u3082\u306e\u3068\u3001\u30b5\u30fc\u30d0\u3068\u3057\u3066listen\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\nhttps://localhost/\u306b\u3064\u306a\u3050\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\u30dd\u30fc\u30c8\u306f\u6a19\u6e96\u306e443\u3067\u3059\u3002\nimport com.example.ssltester.*;\nimport java.io.*;\nimport java.net.*;\nimport java.security.*;\nimport java.security.cert.*;\nimport javax.net.ssl.*;\n\npublic class TestClient {\n\n    public static void main(String[] args) throws KeyManagementException, UnknownHostException, IOException, NoSuchAlgorithmException {\n        System.setProperty(\"javax.net.debug\", \"ssl\");\n\n        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\", new SunJSSE() {});\n        ctx.init(null, tm, null);\n\n        URL url = new URL(\"https://localhost/\");\n        HttpsURLConnection conn = (HttpsURLConnection)url.openConnection();\n        conn.setSSLSocketFactory(ctx.getSocketFactory());\n\n        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n\n        while (true) {\n            String l = in.readLine();\n            if (l == null) {\n                break;\n            }\n            System.out.println(l);\n        }\n\n        in.close();\n    }\n\n    private static  final TrustManager[] tm = {\n            new X509ExtendedTrustManager() {\n                @Override\n                public void checkClientTrusted(X509Certificate[] arg0, String arg1)\n                        throws CertificateException {\n                }\n\n                @Override\n                public void checkServerTrusted(X509Certificate[] arg0, String arg1)\n                        throws CertificateException {\n                }\n\n                @Override\n                public X509Certificate[] getAcceptedIssuers() {\n                    return null;\n                }\n\n                @Override\n                public void checkClientTrusted(X509Certificate[] arg0, String arg1, Socket arg2)\n                        throws CertificateException {\n                }\n\n                @Override\n                public void checkClientTrusted(X509Certificate[] arg0, String arg1, SSLEngine arg2)\n                        throws CertificateException {\n                }\n\n                @Override\n                public void checkServerTrusted(X509Certificate[] arg0, String arg1, Socket arg2)\n                        throws CertificateException {\n                }\n\n                @Override\n                public void checkServerTrusted(X509Certificate[] arg0, String arg1, SSLEngine arg2)\n                        throws CertificateException {\n                }\n            }\n    };\n\n}\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u3067System.setProperty(\"javax.net.debug\", \"ssl\");\u3067\u30c7\u30d0\u30c3\u30b0\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5927\u91cf\u306b\u51fa\u3066\u304d\u307e\u3059\u306e\u3067\u3001\u9b31\u9676\u3057\u3051\u308c\u3070\u5916\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nTrustManager[]\u3092\u5909\u6570tm\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u52d5\u4f5c\u30c6\u30b9\u30c8\u306b\u7528\u610f\u3057\u305f\u30b5\u30fc\u30d0\u304c\u81ea\u5df1\u7f72\u540d\u8a3c\u660e\u66f8\u3092\u4f7f\u3063\u3066\u3044\u308b\u95a2\u4fc2\u3067\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306eTrustManager\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u3068\u8a3c\u660e\u66f8\u691c\u8a3c\u306b\u5931\u6557\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u8a3c\u660e\u66f8\u691c\u8a3c\u3092\u6b62\u3081\u308b\u51e6\u7406\u3092\u3053\u3053\u306b\u5165\u308c\u305f\u3082\u306e\u3067\u3059\u3002\u305d\u308c\u3067\u306f\u56f0\u308b\uff01\u3068\u3044\u3046\u5834\u5408\u306f\u3001ctx.init\u306e\u3068\u3053\u308d\u3092ctx.init(null, null, null);\u306b\u5909\u66f4\u3059\u308c\u3070\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306eTrustManager\u304c\u9078\u629e\u3055\u308c\u3066\u8a3c\u660e\u66f8\u691c\u8a3c\u304c\u6b63\u3057\u304f\u884c\u308f\u308c\u307e\u3059\u3002\n\n\u30b5\u30fc\u30d0\u306e\u30b5\u30f3\u30d7\u30eb\n\u30dd\u30fc\u30c88443\u3067\u5f85\u6a5f\u3059\u308b\u30b5\u30fc\u30d0\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002https://localhost:8443/\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u3001Hi, there!\u3068\u3044\u3046\u7d20\u3063\u6c17\u306a\u3044\u5fdc\u7b54\u3092\u8fd4\u3057\u307e\u3059\u3002\nimport com.example.ssltester.*;\nimport com.sun.net.httpserver.*;\nimport java.io.*;\nimport java.net.*;\nimport java.security.*;\nimport java.security.cert.*;\nimport javax.net.ssl.*;\n\npublic class TestServer {\n\n    private final static String KEYFILE = \"cert.p12\";\n    private final static char[] KEYPASSWORD = \"testtest\".toCharArray();\n\n    public static void main(String[] args)\n            throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException,\n            IOException, CertificateException, UnrecoverableKeyException {\n\n        System.setProperty(\"javax.net.debug\", \"ssl\");\n\n        KeyStore ks = KeyStore.getInstance(\"pkcs12\");\n        ks.load(new FileInputStream(KEYFILE), KEYPASSWORD);\n\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n        kmf.init(ks, KEYPASSWORD);\n\n        SSLContext ctx = SSLContext.getInstance(\"TLS\", new SunJSSE() {});\n        ctx.init(kmf.getKeyManagers(), null, null);\n\n        HttpsServer svr = HttpsServer.create(new InetSocketAddress(8443), 0);\n\n        svr.setHttpsConfigurator(new HttpsConfigurator(ctx));\n\n        svr.createContext(\"/\", new HttpHandler() {\n            @Override\n            public void handle(HttpExchange arg0) throws IOException {\n                String str = \"Hi there!\";\n                arg0.sendResponseHeaders(200, str.length());\n                OutputStream os = arg0.getResponseBody();\n                os.write(str.getBytes());\n                os.flush();\n                os.close();\n            }\n\n        });\n\n        svr.start();\n    }\n\n}\n\n\u30b5\u30fc\u30d0\u79d8\u5bc6\u9375\u3068\u8a3c\u660e\u66f8\u306f\u3001PKCS#12\u5f62\u5f0f\u306ecert.p12\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u53ce\u9332\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u3042\u305f\u308a\u306f\u5229\u7528\u8005\u5404\u4f4d\u306b\u3066\u9069\u5b9c\u4fee\u6b63\u3057\u3066\u4e0b\u3055\u3044\u3002\n\nQ&A\n\n\u3067\u3001\u3053\u3053\u304b\u3089\u4f55\u3092\u3059\u308c\u3070\u3044\u3044\u306e\u304b\nJSSE\u3092\u9811\u5f35\u3063\u3066\u89e3\u8aad\u3057\u3066\u7406\u89e3\u3057\u3066\u4e0b\u3055\u3044\u3002\u8a73\u7d30\u306f\u3053\u3053\u3067\u306f\u8ff0\u3079\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u306a\u308a\u306b\u6839\u6027\u304c\u5fc5\u8981\u3067\u3059\u3002\u3057\u304b\u3057\u6839\u6027\u3092\u3082\u3063\u3066\u3059\u308c\u3070\u3001\u666e\u901a\u306e\u624b\u6bb5\u3067\u306f\u3067\u304d\u306a\u3044\uff08\u4e0d\u6b63\u306a\uff09TLS\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\u3092\u3044\u308d\u3044\u308d\u30c6\u30b9\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u624b\u59cb\u3081\u306b\u3001java.security\u30d5\u30a1\u30a4\u30eb\u306ejdk.tls.disabledAlgorithms\u3084jdk.certpath.disabledAlgorithms\u306e\u6307\u5b9a\u3092\u5168\u90e8\u7121\u8996\u3059\u308b\u6539\u9020\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u3066\u307f\u3066\u306f\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\u3002\u3053\u308c\u3092\u3084\u308b\u3068\u3001\u305d\u306e\u5f8c\u306e\u4f5c\u696d\u304c\u697d\u306b\u306a\u308a\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u3001\u672c\u756a\u74b0\u5883\u306b\u6295\u5165\u3059\u308b\u30b3\u30fc\u30c9\u3067\u305d\u3093\u306a\u3053\u3068\u3084\u3063\u3061\u3083\u30c0\u30e1\u3067\u3059\u3088\uff01\u3042\u304f\u307e\u3067\u30c6\u30b9\u30c8\u306e\u4e2d\u3067\u306e\u8a71\u3067\u3059\u3002\n\nOpenJDK8u JSSE\u306e\u6a5f\u80fd\u306f\u5341\u5206\u306a\u306e\u304b\n\u56f0\u3063\u305f\u3053\u3068\u306bALPN\u62e1\u5f35\u304c\u306a\u3044\u306e\u3067\u3059\u3002OpenJDK9\u306b\u306f\u3042\u308b\u306e\u3067\u3001\u5fc5\u8981\u306a\u3089\u624b\u3092\u51fa\u3057\u3066\u307f\u308b\u306e\u3082\u4e00\u8208\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u62e1\u5f35\u306e\u7a2e\u985e\u304c\u5c11\u306a\u3044\u306e\u306f\u4e0d\u6e80\u3067\u3059\u304c\u3001\u81f4\u3057\u65b9\u306a\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\u4ee5\u4e0a\uff01\u304f\u308c\u3050\u308c\u3082\u60aa\u7528\u53b3\u7981\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u5e78\u904b\u3092\u7948\u308b\u3002\n\n\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\n\u300cJava Secure Socket Extension (JSSE)\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30fb\u30ac\u30a4\u30c9\u300d\nhttps://docs.oracle.com/javase/jp/8/docs/technotes/guides/security/jsse/JSSERefGuide.html\n\u300c\u4e0a\u7d1aJSSE\u958b\u767a\u8005\u306e\u305f\u3081\u306e\u30ab\u30b9\u30bf\u30e0SSL\u300d\nhttps://www.ibm.com/developerworks/jp/java/library/j-customssl/\n\u4e0d\u8096\u79c1 (2016)\n\u300cSSL/TLS\uff08SSL3.0\uff5eTLS1.2\uff09\u306e\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u3092\u5fa9\u7fd2\u3059\u308b\u300d\nhttp://qiita.com/n-i-e/items/41673fd16d7bd1189a29\nIoT\u3068\u3084\u3089\u304c\u5927\u30d6\u30fc\u30e0\u3067\u3059\u304c\u3001\u305d\u306e\u4e00\u65b9\u3067\u982d\u3092\u62b1\u3048\u305f\u304f\u306a\u308b\u3088\u3046\u306a\u8106\u5f31\u6027\u6e80\u8f09\u306eTLS\u30b9\u30bf\u30c3\u30af\u3092\u642d\u8f09\u3057\u305f\u88fd\u54c1\u304c\u6642\u6298\u307f\u3089\u308c\u307e\u3059\u3002\u307f\u306a\u3055\u3093TLS\u30b9\u30bf\u30c3\u30af\u306e\u30c6\u30b9\u30c8\u3061\u3083\u3093\u3068\u3084\u3063\u3066\u307e\u3059\u304b\u3002\n\nTLS\u30b9\u30bf\u30c3\u30af\u306e\u30c6\u30b9\u30c8\u3092\u3084\u308b\u3068\u306a\u308b\u3068\u3001\u305d\u3053\u3067\u4f7f\u3046\u30b9\u30bf\u30d6\u3068\u304b\u30e2\u30c3\u30af\u3068\u304b\u30c0\u30d6\u30eb\u3068\u304b\u30c9\u30e9\u30a4\u30d0\u3068\u304b\u547c\u3070\u308c\u308b\u30e2\u30ed\u30e2\u30ed\u306e\u3042\u308c\u3084\u305d\u308c\u3084\u3092\u4f5c\u3063\u3066\u3044\u304f\u308f\u3051\u3067\u3059\u304c\u3001\u305d\u306e\u305f\u3081\u306bTLS\u30b9\u30bf\u30c3\u30af\u3092\u4e00\u304b\u3089\u66f8\u304f\u306e\u306f\u3061\u3087\u3063\u3068\u975e\u73fe\u5b9f\u7684\u306a\u306e\u3067\u3001\u4f55\u3089\u304b\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5165\u624b\u3057\u3066\u305d\u3053\u304b\u3089\u624b\u3092\u52a0\u3048\u3066\u3044\u304f\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u3057\u304b\u308b\u306bOpenSSL\u306f\u3001\u9ad8\u6a5f\u80fd\u3067\u3059\u3051\u3069\u6539\u9020\u6bcd\u4f53\u3068\u3059\u308b\u306b\u306f\u6577\u5c45\u304c\u9ad8\u3044\u3067\u3059\u3088\u306d\u3002\u3057\u304b\u3057OpenJDK\u306eJSSE\u306a\u3089\u3001\u6a5f\u80fd\u6027\u306f\u3068\u3082\u304b\u304f\u3001\u6539\u9020\u6bcd\u4f53\u3068\u3057\u3066\u306e\u6271\u3044\u3084\u3059\u3055\u306f\u305d\u308c\u306a\u308a\u306b\u60aa\u304f\u306a\u3044\u3068\u3044\u3046\u5370\u8c61\u3067\u3059\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u304f\u308c\u3050\u308c\u3082__\u60aa\u7528\u53b3\u7981__\u3067\u30ec\u30c3\u30c4\u30b4\u30fc\uff01\n\n#\u5b9f\u884c\u74b0\u5883\u3068\u65b9\u91dd\n\nOracleJDK/OpenJDK\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092extend\u3057\u3066\u6a5f\u80fd\u8ffd\u52a0\u3067\u304d\u308c\u3070\u3044\u3044\u3093\u3067\u3059\u3051\u3069\u305d\u308c\u306f\u9650\u754c\u304c\u3042\u308b\u306e\u3067\u3001OpenJDK8u\u306eJSSE\u30bd\u30fc\u30b9\u3092\u624b\u306b\u5165\u308c\u3066\u3001\u305d\u308c\u3092\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u91cd\u8907\u3057\u306a\u3044\u3088\u3046\u306b\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u3092\u66f8\u304d\u63db\u3048\u3066\u4f7f\u3044\u307e\u3059\u3002\u4eca\u56de\u4f7f\u3063\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\n- Windows x64\u7248[Java SE Development Kit 8u102](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n- OpenJDK8u http://hg.openjdk.java.net/jdk8/jdk8 \u3092\u898b\u3066\u9069\u5f53\u306a\u30ea\u30d3\u30b8\u30e7\u30f3\u3092\u4f7f\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\u672c\u7a3f\u57f7\u7b46\u6642\u306e\u6700\u65b0\u7248 [5beaee665e14](http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/5beaee665e14) \u3067\u3059\u3002\n\nOracle JDK\u4e0a\u3067\u3001OpenJDK\u306eJSSE\u90e8\u5206\u3060\u3051\u3092\u5207\u308a\u51fa\u3057\u3066\u304d\u305f\u3082\u306e\u3092\u52d5\u304b\u3057\u307e\u3059\u3002\u305d\u308c\u672c\u5f53\u306b\u5927\u4e08\u592b\u306a\u306e\u304b\u3068\u3044\u3046\u8a71\u3067\u3059\u304c\u3001\u610f\u5916\u3068\u5927\u4f53\u307e\u3042\u307e\u3042\u304a\u304a\u3080\u306d\u305d\u3053\u305d\u3053\u305d\u308c\u306a\u308a\u306b\u52d5\u304f\u3068\u8a00\u3063\u3066\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u306d\u3001\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3059\uff08\u6c57\uff09\u3002\n\n#\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\n```bash\nwget -q -O- http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/archive/5beaee665e14.tar.bz2/src/share/classes/sun/security/ssl/ | tar xjvf -\n```\n\n\u3053\u308c\u3067\u5c55\u958b\u3055\u308c\u307e\u3059\u3002\nOpenJDK\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u306fMercurial\u306a\u306e\u3067\u3001``hg``\u30b3\u30de\u30f3\u30c9\u3092\u99c6\u4f7f\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u4f7f\u3046\u306e\u306f``src/share/classes/sun/security/ssl/``\u306e\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u3067\u3059\u304b\u3089\u3001\u3053\u308c\u3067\u5341\u5206\u3067\u3059\u3002\n\n#\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u306e\u66f8\u304d\u63db\u3048\n\n\u30aa\u30ea\u30b8\u30ca\u30eb\u306f``sun.security.ssl``\u3067\u3059\u304c\u3001\u3053\u306e\u307e\u307e\u3067\u306fOracle JDK\u306e\u30aa\u30ea\u30b8\u30ca\u30eb\u7248\u3068\u91cd\u8907\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u66f8\u304d\u63db\u3048\u3092\u884c\u3044\u307e\u3059\u3002\u4eca\u56de\u306f``com.example.ssltester``\u3068\u3044\u3046\u540d\u524d\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u3053\u306e\u3042\u305f\u308a\u306f\u304a\u597d\u307f\u3067\u9069\u5b9c\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```bash\nmkdir -p src/com/example/ssltester/krb5\nfor i in `find jdk-5beaee665e14/ -type f -print`\ndo\nj=`echo $i | sed s,jdk-5beaee665e14/src/share/classes/sun/security/ssl/,src/com/example/ssltester/,`\nsed -e 's/sun\\.security\\.ssl/com.example.ssltester/' < $i > $j\ndone\n```\n\n#\u30a8\u30e9\u30fc\u306e\u4fee\u6b63\n\n\u4e00\u7b87\u6240\u3001\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u3001\u3053\u3053\u306f\u5b89\u76f4\u306b\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3067\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\n```diff\ndiff --git a/src/com/example/ssltester/SunJSSE.java b/src/com/example/ssltester/SunJSSE.java\nindex f7883a4..59d8a3d 100644\n--- a/src/com/example/ssltester/SunJSSE.java\n+++ b/src/com/example/ssltester/SunJSSE.java\n@@ -231,9 +231,9 @@ public abstract class SunJSSE extends java.security.Provider {\n     }\n\n     private void subclassCheck() {\n-        if (getClass() != com.sun.net.ssl.internal.ssl.Provider.class) {\n-            throw new AssertionError(\"Illegal subclass: \" + getClass());\n-        }\n+//        if (getClass() != com.sun.net.ssl.internal.ssl.Provider.class) {\n+//            throw new AssertionError(\"Illegal subclass: \" + getClass());\n+//        }\n     }\n\n     @Override\n```\n\n\u3053\u308c\u4ee5\u5916\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u5834\u5408\u306f\u3001OracleJDK\u3068OpenJDK\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u898b\u76f4\u3057\u3066\u307f\u3066\u4e0b\u3055\u3044\u3002JSSE\u306e\u5185\u90e8\u4ed5\u69d8\u306f\u6848\u5916\u983b\u7e41\u306b\u5909\u66f4\u3055\u308c\u307e\u3059\u306e\u3067\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u9055\u3046\u3068\u52d5\u304b\u306a\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\n#\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\n\n\u30bd\u30fc\u30b9\u306e\u5c55\u958b\u304c\u5b8c\u4e86\u3057\u305f\u306e\u3067\u3001\u65e9\u901f\u52d5\u304b\u3057\u3066\u307f\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u306f\uff12\u7a2e\u985e\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u3057\u3066\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3057\u306b\u884c\u304f\u3082\u306e\u3068\u3001\u30b5\u30fc\u30d0\u3068\u3057\u3066listen\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\n##\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\n\n``https://localhost/``\u306b\u3064\u306a\u3050\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\u30dd\u30fc\u30c8\u306f\u6a19\u6e96\u306e443\u3067\u3059\u3002\n\n```java\nimport com.example.ssltester.*;\nimport java.io.*;\nimport java.net.*;\nimport java.security.*;\nimport java.security.cert.*;\nimport javax.net.ssl.*;\n\npublic class TestClient {\n\n\tpublic static void main(String[] args) throws KeyManagementException, UnknownHostException, IOException, NoSuchAlgorithmException {\n\t\tSystem.setProperty(\"javax.net.debug\", \"ssl\");\n\n\t\tSSLContext ctx = SSLContext.getInstance(\"TLSv1.2\", new SunJSSE() {});\n\t\tctx.init(null, tm, null);\n\n\t\tURL url = new URL(\"https://localhost/\");\n\t\tHttpsURLConnection conn = (HttpsURLConnection)url.openConnection();\n\t\tconn.setSSLSocketFactory(ctx.getSocketFactory());\n\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n\n\t\twhile (true) {\n\t\t\tString l = in.readLine();\n\t\t\tif (l == null) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tSystem.out.println(l);\n\t\t}\n\n\t\tin.close();\n\t}\n\n\tprivate static  final TrustManager[] tm = {\n\t\t\tnew X509ExtendedTrustManager() {\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] arg0, String arg1)\n\t\t\t\t\t\tthrows CertificateException {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] arg0, String arg1)\n\t\t\t\t\t\tthrows CertificateException {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic X509Certificate[] getAcceptedIssuers() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] arg0, String arg1, Socket arg2)\n\t\t\t\t\t\tthrows CertificateException {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void checkClientTrusted(X509Certificate[] arg0, String arg1, SSLEngine arg2)\n\t\t\t\t\t\tthrows CertificateException {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] arg0, String arg1, Socket arg2)\n\t\t\t\t\t\tthrows CertificateException {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void checkServerTrusted(X509Certificate[] arg0, String arg1, SSLEngine arg2)\n\t\t\t\t\t\tthrows CertificateException {\n\t\t\t\t}\n\t\t\t}\n\t};\n\n}\n```\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u3067``System.setProperty(\"javax.net.debug\", \"ssl\");``\u3067\u30c7\u30d0\u30c3\u30b0\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5927\u91cf\u306b\u51fa\u3066\u304d\u307e\u3059\u306e\u3067\u3001\u9b31\u9676\u3057\u3051\u308c\u3070\u5916\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n``TrustManager[]``\u3092\u5909\u6570``tm``\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u52d5\u4f5c\u30c6\u30b9\u30c8\u306b\u7528\u610f\u3057\u305f\u30b5\u30fc\u30d0\u304c\u81ea\u5df1\u7f72\u540d\u8a3c\u660e\u66f8\u3092\u4f7f\u3063\u3066\u3044\u308b\u95a2\u4fc2\u3067\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e``TrustManager``\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u3068\u8a3c\u660e\u66f8\u691c\u8a3c\u306b\u5931\u6557\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u8a3c\u660e\u66f8\u691c\u8a3c\u3092\u6b62\u3081\u308b\u51e6\u7406\u3092\u3053\u3053\u306b\u5165\u308c\u305f\u3082\u306e\u3067\u3059\u3002\u305d\u308c\u3067\u306f\u56f0\u308b\uff01\u3068\u3044\u3046\u5834\u5408\u306f\u3001``ctx.init``\u306e\u3068\u3053\u308d\u3092``ctx.init(null, null, null);``\u306b\u5909\u66f4\u3059\u308c\u3070\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e``TrustManager``\u304c\u9078\u629e\u3055\u308c\u3066\u8a3c\u660e\u66f8\u691c\u8a3c\u304c\u6b63\u3057\u304f\u884c\u308f\u308c\u307e\u3059\u3002\n\n##\u30b5\u30fc\u30d0\u306e\u30b5\u30f3\u30d7\u30eb\n\n\u30dd\u30fc\u30c88443\u3067\u5f85\u6a5f\u3059\u308b\u30b5\u30fc\u30d0\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002``https://localhost:8443/``\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u3001``Hi, there!``\u3068\u3044\u3046\u7d20\u3063\u6c17\u306a\u3044\u5fdc\u7b54\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```java\nimport com.example.ssltester.*;\nimport com.sun.net.httpserver.*;\nimport java.io.*;\nimport java.net.*;\nimport java.security.*;\nimport java.security.cert.*;\nimport javax.net.ssl.*;\n\npublic class TestServer {\n\n\tprivate final static String KEYFILE = \"cert.p12\";\n\tprivate final static char[] KEYPASSWORD = \"testtest\".toCharArray();\n\n\tpublic static void main(String[] args)\n\t\t\tthrows KeyStoreException, NoSuchAlgorithmException, KeyManagementException,\n\t\t\tIOException, CertificateException, UnrecoverableKeyException {\n\n\t\tSystem.setProperty(\"javax.net.debug\", \"ssl\");\n\n\t\tKeyStore ks = KeyStore.getInstance(\"pkcs12\");\n\t\tks.load(new FileInputStream(KEYFILE), KEYPASSWORD);\n\n\t\tKeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n\t\tkmf.init(ks, KEYPASSWORD);\n\n\t\tSSLContext ctx = SSLContext.getInstance(\"TLS\", new SunJSSE() {});\n\t\tctx.init(kmf.getKeyManagers(), null, null);\n\n\t\tHttpsServer svr = HttpsServer.create(new InetSocketAddress(8443), 0);\n\n\t\tsvr.setHttpsConfigurator(new HttpsConfigurator(ctx));\n\n\t\tsvr.createContext(\"/\", new HttpHandler() {\n\t\t\t@Override\n\t\t\tpublic void handle(HttpExchange arg0) throws IOException {\n\t\t\t\tString str = \"Hi there!\";\n\t\t\t\targ0.sendResponseHeaders(200, str.length());\n\t\t\t\tOutputStream os = arg0.getResponseBody();\n\t\t\t\tos.write(str.getBytes());\n\t\t\t\tos.flush();\n\t\t\t\tos.close();\n\t\t\t}\n\n\t\t});\n\n\t\tsvr.start();\n\t}\n\n}\n```\n\n\u30b5\u30fc\u30d0\u79d8\u5bc6\u9375\u3068\u8a3c\u660e\u66f8\u306f\u3001PKCS#12\u5f62\u5f0f\u306e``cert.p12``\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u53ce\u9332\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u3042\u305f\u308a\u306f\u5229\u7528\u8005\u5404\u4f4d\u306b\u3066\u9069\u5b9c\u4fee\u6b63\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n#Q&A\n\n##\u3067\u3001\u3053\u3053\u304b\u3089\u4f55\u3092\u3059\u308c\u3070\u3044\u3044\u306e\u304b\n\nJSSE\u3092\u9811\u5f35\u3063\u3066\u89e3\u8aad\u3057\u3066\u7406\u89e3\u3057\u3066\u4e0b\u3055\u3044\u3002\u8a73\u7d30\u306f\u3053\u3053\u3067\u306f\u8ff0\u3079\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u306a\u308a\u306b\u6839\u6027\u304c\u5fc5\u8981\u3067\u3059\u3002\u3057\u304b\u3057\u6839\u6027\u3092\u3082\u3063\u3066\u3059\u308c\u3070\u3001\u666e\u901a\u306e\u624b\u6bb5\u3067\u306f\u3067\u304d\u306a\u3044\uff08\u4e0d\u6b63\u306a\uff09TLS\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\u3092\u3044\u308d\u3044\u308d\u30c6\u30b9\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u624b\u59cb\u3081\u306b\u3001``java.security``\u30d5\u30a1\u30a4\u30eb\u306e``jdk.tls.disabledAlgorithms``\u3084``jdk.certpath.disabledAlgorithms``\u306e\u6307\u5b9a\u3092\u5168\u90e8\u7121\u8996\u3059\u308b\u6539\u9020\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u3066\u307f\u3066\u306f\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\u3002\u3053\u308c\u3092\u3084\u308b\u3068\u3001\u305d\u306e\u5f8c\u306e\u4f5c\u696d\u304c\u697d\u306b\u306a\u308a\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u3001\u672c\u756a\u74b0\u5883\u306b\u6295\u5165\u3059\u308b\u30b3\u30fc\u30c9\u3067\u305d\u3093\u306a\u3053\u3068\u3084\u3063\u3061\u3083\u30c0\u30e1\u3067\u3059\u3088\uff01\u3042\u304f\u307e\u3067\u30c6\u30b9\u30c8\u306e\u4e2d\u3067\u306e\u8a71\u3067\u3059\u3002\n\n##OpenJDK8u JSSE\u306e\u6a5f\u80fd\u306f\u5341\u5206\u306a\u306e\u304b\n\n\u56f0\u3063\u305f\u3053\u3068\u306bALPN\u62e1\u5f35\u304c\u306a\u3044\u306e\u3067\u3059\u3002OpenJDK9\u306b\u306f\u3042\u308b\u306e\u3067\u3001\u5fc5\u8981\u306a\u3089\u624b\u3092\u51fa\u3057\u3066\u307f\u308b\u306e\u3082\u4e00\u8208\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u62e1\u5f35\u306e\u7a2e\u985e\u304c\u5c11\u306a\u3044\u306e\u306f\u4e0d\u6e80\u3067\u3059\u304c\u3001\u81f4\u3057\u65b9\u306a\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\n\u4ee5\u4e0a\uff01\u304f\u308c\u3050\u308c\u3082__\u60aa\u7528\u53b3\u7981__\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u5e78\u904b\u3092\u7948\u308b\u3002\n\n#\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\n\n\u300cJava Secure Socket Extension (JSSE)\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30fb\u30ac\u30a4\u30c9\u300d\nhttps://docs.oracle.com/javase/jp/8/docs/technotes/guides/security/jsse/JSSERefGuide.html\n\n\u300c\u4e0a\u7d1aJSSE\u958b\u767a\u8005\u306e\u305f\u3081\u306e\u30ab\u30b9\u30bf\u30e0SSL\u300d\nhttps://www.ibm.com/developerworks/jp/java/library/j-customssl/\n\n\u4e0d\u8096\u79c1 (2016)\n\u300cSSL/TLS\uff08SSL3.0\uff5eTLS1.2\uff09\u306e\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u3092\u5fa9\u7fd2\u3059\u308b\u300d\nhttp://qiita.com/n-i-e/items/41673fd16d7bd1189a29\n", "tags": ["SSL", "TLS", "Java"]}