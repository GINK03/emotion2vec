{"context": "(Processing Advent Calendar 2016 2\uff15\u65e5\u76ee)\n\n\u6982\u8981\nProcessing\u3067GPU\u3092\u5229\u7528\u3057\u305f\u9ad8\u901f\u6f14\u7b97\u3092\u884c\u3046\u3002\n\n\u80cc\u666f\nProcessing\u3092\u5229\u7528\u3057\u3066\u30b9\u30b1\u30c3\u30c1\u3092\u4f5c\u3063\u305f\u3082\u306e\u306e\u3001\u3042\u307e\u308a\u306b\u3082\u901f\u5ea6\u304c\u9045\u304f\u3066\u5b9f\u7528\u306b\u8010\u3048\u3089\u308c\u306a\u304b\u3063\u305f\u3068\u304d\u3042\u308a\u307e\u305b\u3093\u304b\u3002\nProcessing\u306e\u6a19\u6e96\u6a5f\u80fd\u3092\u5229\u7528\u3059\u308b\u306e\u3067\u3042\u308c\u3070\u3001GLSL\u3092\u5229\u7528\u3057\u3066Shader\u3092\u66f8\u304f\u3053\u3068\u3067\u63cf\u753b\u6f14\u7b97\u3092\u9ad8\u901f\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001Shader\u8a00\u8a9e\u306f\u96e3\u3057\u304f\u3059\u3067\u306b\u4f5c\u3063\u3066\u3057\u307e\u3063\u305f\u30b9\u30b1\u30c3\u30c1\u3092\u79fb\u690d\u3059\u308b\u306e\u306f\u96e3\u6613\u5ea6\u304c\u9ad8\u3059\u304e\u308b\u308f\u3051\u3067\u3002\n\u305d\u3053\u3067GPU\u306e\u4e26\u5217\u6f14\u7b97\u3092\u5229\u7528\u3057\u3064\u3064\u3082\u3001Processing\u3089\u3057\u3055\u3092\u306a\u308b\u3079\u304f\u5d29\u3055\u305a\u306b\u3067\u304d\u306a\u3044\u304b\u3068\u304a\u3082\u3044\u3001\nJava\u304b\u3089GPGPU(OpenCL)\u3092\u547c\u3073\u51fa\u3059\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308baparapi\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u53c2\u8003\u30ea\u30f3\u30af\n\u30fbAparapi\n\u30fbaparapi GitHub \u30ec\u30dd\u30b8\u30c8\u30ea\n\n\u5b9f\u884c\u65b9\u6cd5\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\naparapi\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\naparapip5\n\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305faparapip5-master.zip\u3092\u89e3\u51cd\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306a\u968e\u5c64\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nprocessing\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\nprocessing\u306e\u30e6\u30fc\u30b6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u958b\u304d\u3001\u6b21\u306e\u968e\u5c64\u306b\u306a\u308b\u3088\u3046\u306b\u914d\u7f6e\u3057\u307e\u3059\u3002\n\nprocessing\u3092\u8d77\u52d5\u3057\u76f4\u3059\u3068\u30ed\u30fc\u30c9\u3055\u308c\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u306baparapi\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3082aparapi\u304c\u767b\u9332\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\n\n\u5185\u5bb9\n\n\u521d\u671f\u72b6\u614b\u3067\u306f\u5229\u7528\u53ef\u80fd\u3067\u3042\u308c\u3070OpenCL\uff08GPU\u3092\u5229\u7528\u3057\u305f\u5b9f\u88c5\uff09\u3067\u52d5\u304d\u307e\u3059\u3001\n\u30af\u30ea\u30c3\u30af\u3059\u308b\u305f\u3073\u306bProcessing\u6a19\u6e96\u306e\u52d5\u304d\u3068OpenCL\u3092\u5229\u7528\u3057\u305f\u52d5\u304d\u304c\u5207\u308a\u66ff\u308f\u308a\u307e\u3059\u3002\n\u52d5\u304b\u3057\u305f\u52d5\u753b\u306fvimeo\u306b\u3066\u516c\u958b\u3057\u3066\u304a\u308a\u307e\u3059\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\np5advent2016.pde\nimport com.amd.aparapi.*;\n\nKernelP5 kernel;\n\nlong generations = 0;\nlong start = System.currentTimeMillis();\n\npublic void setup() {\n  size(1280, 768);\n  frameRate(240);\n  background(0);\n\n  fill(255);\n  loadPixels();\n\n  kernel = new KernelP5(width, height, pixels);\n  //lifeKernel.setExecutionMode(Kernel.EXECUTION_MODE.CPU);\n  updatePixels();\n}\npublic void draw() {\n  //background(0);\n  kernel.nextGeneration();\n  updatePixels();\n\n  fill(0);\n  rect(0, 0, 100, 20);\n  fill(255);\n  text(frameRate, 10, 10);\n  println(this.kernel.getExecutionMode());\n}\n\npublic void mouseMoved() {\n  kernel.mx = mouseX;\n  kernel.my = mouseY;\n}\n\nboolean GPUUsageflag = true;\npublic void mousePressed() {\n  if (GPUUsageflag==true) {\n    kernel.setExecutionMode(Kernel.EXECUTION_MODE.JTP);\n  } else {\n    kernel.setExecutionMode(Kernel.EXECUTION_MODE.GPU);\n  }\n  GPUUsageflag = !GPUUsageflag;\n  println(GPUUsageflag);\n}\n\n\n\nKernelP5.pde\npublic class KernelP5 extends Kernel {\n\n  private int[] imageData;\n  private final Range range;\n  private final int width;\n  private final int height;\n  private float time;\n  private float timed;\n\n  public int mx = 0;\n  public int my = 0;\n\n  public KernelP5(int _width, int _height, int[] pixels) {\n    width = _width;\n    height = _height;\n    imageData = pixels;\n    range = Range.create(width * height);\n    println(getExecutionMode());\n\n    setExplicit(true); \n    clear();\n  }\n\n  public void setImage(int[] pixels) {\n    imageData = pixels;\n  }\n\n  @Override\n    public void run() {\n    int gid = getGlobalId();\n\n    int tx = gid % width;\n    int ty = gid / width;\n    int red = 0;\n    int green = 0;\n    int blue = 0;\n    for (int i = 0; i < 12; i++) {  \n      float xx = cos(toRadians(i * 30) + (time)) * my + width / 2;\n      float yy = sin(toRadians(i * 30) + (time)) * my + height / 2;\n      float dx = tx - xx;\n      float dy = ty - yy;\n\n      float dx2 = dx * dx;\n      float dy2 = dy * dy;\n\n      float dist = sqrt(dx2 + dy2);\n\n      if (dist > 512) {\n        continue;\n      } else {\n        dist = (512 - dist) / 2;\n      }\n      float r = 0;\n      r = abs(sin((mx / 500.0) * toRadians(dist * 5) + -time * 3) * dist);\n      if (i % 3 == 0) {\n        red += r;\n      } else if (i % 3 == 1) {\n        green += r;\n      } else {\n        blue += r;\n      }\n    }\n\n    red = min(red, 255);\n    green = min(green, 255);\n    blue = min(blue, 255);\n    imageData[gid] = 0xEE000000 + (red << 16) + (green << 8) + (blue);\n  }\n\n  public void nextGeneration() {\n    time -= abs(sin(toRadians(timed))) * 0.01;\n    timed += 1;\n    execute(range);\n  }\n\n  public int[] getImageData() {\n    return imageData;\n  }\n}\n\n\n\n\u89e3\u8aac\naparapi\u3092\u5229\u7528\u3057\u305f\u5b9f\u88c5\u306fKernel\u306e\u7121\u540d\u30af\u30e9\u30b9\u3092\u4f5c\u308b\u65b9\u6cd5\u3068\n\ntest.pde\n        final float inA[] = new float[]{1.0f, 2.0f, 3.0f, 4.0f};\n        final float inB[] = new float[]{0.1f, 0.2f, 0.3f, 0.4f};\n        final float result[] = new float[inA.length];\n\n        Kernel kernel = new Kernel() {\n            @Override\n            public void run() {\n                int i = getGlobalId();\n                result[i] = inA[i] + inB[i];\n            }\n        };\n\n        Range range = Range.create(result.length);\n        kernel.execute(range);\n\n\nKernel\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u4f5c\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\ntest2.pde\npublic class FFTKernel extends Kernel {\n    final float inA[] = new float[]{1.0f, 2.0f, 3.0f, 4.0f};\n    final float inB[] = new float[]{0.1f, 0.2f, 0.3f, 0.4f};\n    final float result[] = new float[inA.length];\n\n    @Override\n    public void run() {\n        int i = getGlobalId();\n        result[i] = inA[i] + inB[i];\n    }\n}\n\n\nrun()\u306e\u4e2d\u306e\u5b9f\u88c5\u304c\u5b9f\u884c\u6642\u306bGPU\uff08OpenCL\uff09\u3092\u5229\u7528\u3059\u308b\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002\n([Processing Advent Calendar 2016](http://qiita.com/advent-calendar/2016/processing) 2\uff15\u65e5\u76ee)\n\n#\u6982\u8981\n\nProcessing\u3067GPU\u3092\u5229\u7528\u3057\u305f\u9ad8\u901f\u6f14\u7b97\u3092\u884c\u3046\u3002\n\n\n#\u80cc\u666f\n\nProcessing\u3092\u5229\u7528\u3057\u3066\u30b9\u30b1\u30c3\u30c1\u3092\u4f5c\u3063\u305f\u3082\u306e\u306e\u3001\u3042\u307e\u308a\u306b\u3082\u901f\u5ea6\u304c\u9045\u304f\u3066\u5b9f\u7528\u306b\u8010\u3048\u3089\u308c\u306a\u304b\u3063\u305f\u3068\u304d\u3042\u308a\u307e\u305b\u3093\u304b\u3002\nProcessing\u306e\u6a19\u6e96\u6a5f\u80fd\u3092\u5229\u7528\u3059\u308b\u306e\u3067\u3042\u308c\u3070\u3001GLSL\u3092\u5229\u7528\u3057\u3066Shader\u3092\u66f8\u304f\u3053\u3068\u3067\u63cf\u753b\u6f14\u7b97\u3092\u9ad8\u901f\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001Shader\u8a00\u8a9e\u306f\u96e3\u3057\u304f\u3059\u3067\u306b\u4f5c\u3063\u3066\u3057\u307e\u3063\u305f\u30b9\u30b1\u30c3\u30c1\u3092\u79fb\u690d\u3059\u308b\u306e\u306f\u96e3\u6613\u5ea6\u304c\u9ad8\u3059\u304e\u308b\u308f\u3051\u3067\u3002\n\n\u305d\u3053\u3067GPU\u306e\u4e26\u5217\u6f14\u7b97\u3092\u5229\u7528\u3057\u3064\u3064\u3082\u3001Processing\u3089\u3057\u3055\u3092\u306a\u308b\u3079\u304f\u5d29\u3055\u305a\u306b\u3067\u304d\u306a\u3044\u304b\u3068\u304a\u3082\u3044\u3001\nJava\u304b\u3089GPGPU(OpenCL)\u3092\u547c\u3073\u51fa\u3059\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308baparapi\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n\n \n#\u53c2\u8003\u30ea\u30f3\u30af\n\n\u30fb[Aparapi](http://aparapi.com/)\n\u30fb[aparapi GitHub \u30ec\u30dd\u30b8\u30c8\u30ea](https://github.com/aparapi/aparapi)\n\n#\u5b9f\u884c\u65b9\u6cd5\n##\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\naparapi\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\n[aparapip5](https://github.com/edumo/aparapip5)\n<img width=\"1013\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-24 22.53.52.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/6967/96791dfd-2edb-e067-0af6-17f572ccf21c.png\">\n\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305faparapip5-master.zip\u3092\u89e3\u51cd\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306a\u968e\u5c64\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n<img width=\"425\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-24 22.58.38.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/6967/72683fb2-3fbd-35e1-5a67-dc02baa3b6bc.png\">\n\nprocessing\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\nprocessing\u306e\u30e6\u30fc\u30b6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u958b\u304d\u3001\u6b21\u306e\u968e\u5c64\u306b\u306a\u308b\u3088\u3046\u306b\u914d\u7f6e\u3057\u307e\u3059\u3002\n\n<img width=\"328\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-24 23.03.05.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/6967/d9264626-169e-913c-8bfa-9a185a702c46.png\">\n\nprocessing\u3092\u8d77\u52d5\u3057\u76f4\u3059\u3068\u30ed\u30fc\u30c9\u3055\u308c\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u306baparapi\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n<img width=\"254\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-24 23.07.39.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/6967/df8c9f27-ed64-5ebc-15eb-2f9e82f206f0.png\">\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3082aparapi\u304c\u767b\u9332\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n<img width=\"420\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-24 23.11.09.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/6967/15a36919-c91d-ee92-a90f-01e093dc0f17.png\">\n\n#\u30d7\u30ed\u30b0\u30e9\u30e0\n##\u5185\u5bb9\n\n<img width=\"831\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-24 23.20.42.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/6967/3dccca0b-f3e7-30f0-ca6f-59c2b1f3e756.png\">\n\n\u521d\u671f\u72b6\u614b\u3067\u306f\u5229\u7528\u53ef\u80fd\u3067\u3042\u308c\u3070OpenCL\uff08GPU\u3092\u5229\u7528\u3057\u305f\u5b9f\u88c5\uff09\u3067\u52d5\u304d\u307e\u3059\u3001\n\u30af\u30ea\u30c3\u30af\u3059\u308b\u305f\u3073\u306bProcessing\u6a19\u6e96\u306e\u52d5\u304d\u3068OpenCL\u3092\u5229\u7528\u3057\u305f\u52d5\u304d\u304c\u5207\u308a\u66ff\u308f\u308a\u307e\u3059\u3002\n\n\n<p><a href=\"https://vimeo.com/196957044\">\u52d5\u304b\u3057\u305f\u52d5\u753b\u306fvimeo\u306b\u3066\u516c\u958b\u3057\u3066\u304a\u308a\u307e\u3059</a></p>\n\n##\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n```java:p5advent2016.pde\nimport com.amd.aparapi.*;\n\nKernelP5 kernel;\n\nlong generations = 0;\nlong start = System.currentTimeMillis();\n\npublic void setup() {\n  size(1280, 768);\n  frameRate(240);\n  background(0);\n\n  fill(255);\n  loadPixels();\n\n  kernel = new KernelP5(width, height, pixels);\n  //lifeKernel.setExecutionMode(Kernel.EXECUTION_MODE.CPU);\n  updatePixels();\n}\npublic void draw() {\n  //background(0);\n  kernel.nextGeneration();\n  updatePixels();\n\n  fill(0);\n  rect(0, 0, 100, 20);\n  fill(255);\n  text(frameRate, 10, 10);\n  println(this.kernel.getExecutionMode());\n}\n\npublic void mouseMoved() {\n  kernel.mx = mouseX;\n  kernel.my = mouseY;\n}\n\nboolean GPUUsageflag = true;\npublic void mousePressed() {\n  if (GPUUsageflag==true) {\n    kernel.setExecutionMode(Kernel.EXECUTION_MODE.JTP);\n  } else {\n    kernel.setExecutionMode(Kernel.EXECUTION_MODE.GPU);\n  }\n  GPUUsageflag = !GPUUsageflag;\n  println(GPUUsageflag);\n}\n```\n\n```java:KernelP5.pde\npublic class KernelP5 extends Kernel {\n\n  private int[] imageData;\n  private final Range range;\n  private final int width;\n  private final int height;\n  private float time;\n  private float timed;\n\n  public int mx = 0;\n  public int my = 0;\n\n  public KernelP5(int _width, int _height, int[] pixels) {\n    width = _width;\n    height = _height;\n    imageData = pixels;\n    range = Range.create(width * height);\n    println(getExecutionMode());\n\n    setExplicit(true); \n    clear();\n  }\n\n  public void setImage(int[] pixels) {\n    imageData = pixels;\n  }\n\n  @Override\n    public void run() {\n    int gid = getGlobalId();\n\n    int tx = gid % width;\n    int ty = gid / width;\n    int red = 0;\n    int green = 0;\n    int blue = 0;\n    for (int i = 0; i < 12; i++) {  \n      float xx = cos(toRadians(i * 30) + (time)) * my + width / 2;\n      float yy = sin(toRadians(i * 30) + (time)) * my + height / 2;\n      float dx = tx - xx;\n      float dy = ty - yy;\n\n      float dx2 = dx * dx;\n      float dy2 = dy * dy;\n\n      float dist = sqrt(dx2 + dy2);\n\n      if (dist > 512) {\n        continue;\n      } else {\n        dist = (512 - dist) / 2;\n      }\n      float r = 0;\n      r = abs(sin((mx / 500.0) * toRadians(dist * 5) + -time * 3) * dist);\n      if (i % 3 == 0) {\n        red += r;\n      } else if (i % 3 == 1) {\n        green += r;\n      } else {\n        blue += r;\n      }\n    }\n\n    red = min(red, 255);\n    green = min(green, 255);\n    blue = min(blue, 255);\n    imageData[gid] = 0xEE000000 + (red << 16) + (green << 8) + (blue);\n  }\n\n  public void nextGeneration() {\n    time -= abs(sin(toRadians(timed))) * 0.01;\n    timed += 1;\n    execute(range);\n  }\n\n  public int[] getImageData() {\n    return imageData;\n  }\n}\n```\n\n##\u89e3\u8aac\naparapi\u3092\u5229\u7528\u3057\u305f\u5b9f\u88c5\u306fKernel\u306e\u7121\u540d\u30af\u30e9\u30b9\u3092\u4f5c\u308b\u65b9\u6cd5\u3068\n\n```java:test.pde\n        final float inA[] = new float[]{1.0f, 2.0f, 3.0f, 4.0f};\n        final float inB[] = new float[]{0.1f, 0.2f, 0.3f, 0.4f};\n        final float result[] = new float[inA.length];\n         \n        Kernel kernel = new Kernel() {\n            @Override\n            public void run() {\n                int i = getGlobalId();\n                result[i] = inA[i] + inB[i];\n            }\n        };\n \n        Range range = Range.create(result.length);\n        kernel.execute(range);\n```\n\nKernel\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u4f5c\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\n```java:test2.pde\npublic class FFTKernel extends Kernel {\n    final float inA[] = new float[]{1.0f, 2.0f, 3.0f, 4.0f};\n    final float inB[] = new float[]{0.1f, 0.2f, 0.3f, 0.4f};\n    final float result[] = new float[inA.length];\n\n    @Override\n    public void run() {\n        int i = getGlobalId();\n        result[i] = inA[i] + inB[i];\n    }\n}\n```\n\nrun()\u306e\u4e2d\u306e\u5b9f\u88c5\u304c\u5b9f\u884c\u6642\u306bGPU\uff08OpenCL\uff09\u3092\u5229\u7528\u3059\u308b\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002\n", "tags": ["processing", "aparapi", "GPGPU"]}