{"context": " More than 1 year has passed since last update.\u4e00\u5f0f\u3092 https://github.com/ken200/OwinAuthWithNancy \u306b\u914d\u7f6e\u3057\u3066\u3044\u307e\u3059\u3002\n\u8a8d\u8a3c\u95a2\u4fc2\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f UserManager.cs \u306b\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u300c\u72ec\u81ea\u8a8d\u8a3c\u300d\u4ed5\u69d8\n\n\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3068\u3057\u3066\u306f\u3001\u300c\u30e6\u30fc\u30b6\u30fc\u540d\u300d\u306e\u307f\u4f7f\u7528\u3059\u308b\u3002\u5f8c\u8ff0\u3059\u308b\u304c\u3001\u30e6\u30fc\u30b6\u30fcID\u3082\u6301\u3064\u5fc5\u8981\u3042\u308a\u3002\u3057\u304b\u3057\u3001\u4f7f\u308f\u306a\u3044\u306e\u3067\u9069\u5f53\u306a\u5024\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u308b\u3002\n\u30d1\u30b9\u30ef\u30fc\u30c9\u30c1\u30a7\u30c3\u30af\u306f\u884c\u308f\u306a\u3044\u3002\n\u30e6\u30fc\u30b6\u30fc\u540d\u304c\u975e\u7ba1\u7406\u8005\u7684\u306a\u540d\u79f0(\"admin\",\"root\"\u4ee5\u5916)\u306e\u5834\u5408\u306b\u30ed\u30b0\u30a4\u30f3\u8a31\u53ef\u3059\u308b\u3002\n\n\n\u53c2\u7167\u3057\u305fWeb\u30da\u30fc\u30b8\nhttp://okazuki.hatenablog.com/entry/2013/11/10/190811\n\u4e00\u822c\u7684\u306a\u72ec\u81ea\u8a8d\u8a3c\u306b\u3064\u3044\u3066\u77e5\u308a\u305f\u3044\u3002\u307e\u305f\u306f\u3001\u4f7f\u7528\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304c ASP.NET MVC \u306e\u5834\u5408\u306f\u3001\u3053\u3061\u3089\u3092\u53c2\u7167\u3057\u305f\u307b\u3046\u304c\u65ad\u7136\u3088\u3044\u3067\u3059\u3002\n\u72ec\u81ea\u8a8d\u8a3c\u3067\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u30c1\u30a7\u30c3\u30af\u95a2\u4fc2\u3067\u5c11\u3057\u306f\u307e\u3063\u305f\u30dd\u30a4\u30f3\u30c8\u306b\u3064\u3044\u3066\u3082\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u5fc5\u8981\u30d1\u30c3\u30b1\u30fc\u30b8\n\nMicrosoft.AspNet.Identity.Core\n\nASP.NET Identity\u306e\u30b3\u30a2\u30d1\u30c3\u30b1\u30fc\u30b8\u3002\n(\u4f59\u8ac7\u3067\u3059\u304c\u3001MS\u88fdWeb\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f Microsoft.AspNet.* \u3068\u3044\u3046\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u306b\u306a\u308a\u307e\u3059\u3002)\n\n\u69cb\u6210\u7269\n\nMicrosoft.AspNet.Identity.IUser\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u5b9f\u88c5\u30af\u30e9\u30b9\n\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u8868\u3059\u3002\u30e6\u30fc\u30b6\u30fcID\u3068\u30e6\u30fc\u30b6\u30fc\u540d\u304c\u5fc5\u9808\u9805\u76ee\u3002\n\u4eca\u56de\u306fID\u304c\u4e0d\u8981\u306e\u305f\u3081\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u3059\u308b\u5ea6\u306bGUID\u3092\u5272\u308a\u4ed8\u3051\u3066\u3044\u308b\u304c\u3001\u3075\u3064\u3046\u306f\u3053\u3093\u306a\u3053\u3068\u3057\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002\npublic class MyUser : IUser\n{\n    public string Id { get; set; }\n\n    public string UserName { get; set; }\n\n    public MyUser()\n    {\n        Id = Guid.NewGuid().ToString();\n    }\n}\n\n\nMicrosoft.AspNet.Identity.IUserStore\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u5b9f\u88c5\u30af\u30e9\u30b9\n\u30e6\u30fc\u30b6\u30fc\u30b9\u30c8\u30a2\u3092\u8868\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u3067\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u306e\u767b\u9332\u30fb\u524a\u9664\u30fb\u66f4\u65b0\u3001\u53c2\u7167\u3092\u884c\u3046\u3002\n\u30d1\u30b9\u30ef\u30fc\u30c9\u60c5\u5831\u3082\u7ba1\u7406\u3059\u308b\u5834\u5408\u306f\u3001IUserPasswordStore\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e\u5b9f\u88c5\u3082\u884c\u3046\u5fc5\u8981\u3042\u308a\u3002\npublic class MyUserStore : IUserStore<MyUser>\n{\n    public MyUserStore(){}\n\n    public Task CreateAsync(MyUser user)\n    {\n        //\u4f55\u3082\u3057\u306a\u3044\n        return Task.Delay(0);\n    }\n\n    public Task DeleteAsync(MyUser user)\n    {\n        //\u4f55\u3082\u3057\u306a\u3044\n        return Task.Delay(0);\n    }\n\n    public Task<MyUser> FindByIdAsync(string userId)\n    {\n        //\u4eca\u56de\u3001\u30e6\u30fc\u30b6\u30fcID\u306f\u5229\u7528\u3057\u306a\u3044\u306e\u3067\u3001\u547c\u3073\u51fa\u3055\u308c\u305f\u3089Exception\u5410\u304f\n        throw new NotSupportedException(\"UserId is not supported\");\n    }\n\n    private bool ExistUser(string userName)\n    {\n        if (userName.ToLower() == \"admin\" || userName.ToLower() == \"root\")\n            return false;\n        return true;\n    }\n\n    public Task<MyUser> FindByNameAsync(string userName)\n    {\n        //spec:\u300c\u7ba1\u7406\u8005\u3063\u307d\u3044\u540d\u524d(admin\u307e\u305f\u306froot)\u300d\u306f\u5f3e\u304f\n        return Task.Run<MyUser>(() =>\n        {\n            return !ExistUser(userName) ? new MyUser() { UserName = userName } : null;\n        });\n    }\n\n    public Task UpdateAsync(MyUser user)\n    {\n        //\u4f55\u3082\u3057\u306a\u3044\n        return Task.Delay(0);\n    }\n\n    public void Dispose()\n    {\n\n    }\n}\n\n\nMicrosoft.AspNet.Identity.UserManager\u30af\u30e9\u30b9\nIUserStore\u5b9f\u88c5\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u30e6\u30fc\u30b6\u30fc\u7ba1\u7406\u3092\u884c\u3046\u30af\u30e9\u30b9\u3002\u4eca\u56de\u306f\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5185\u5305\u3059\u308b\u30d5\u30a1\u30b6\u30fc\u30c9\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u305f\u3002\nCreateAsync()\u3067System.Security.Claims.ClaimsIdentity\u30af\u30e9\u30b9\u3092\u53d6\u5f97\u3057\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u8a8d\u8a3c\u767b\u9332\u51e6\u7406\u304c\u884c\u308f\u308c\u308b\u3002\npublic class MyUserManager\n{\n    private UserManager<MyUser> _uMng;\n\n    public MyUserManager(UserManager<MyUser> uMng)\n    {\n        this._uMng = uMng;\n    }\n\n    public MyUserManager()\n        : this(new UserManager<MyUser>(new MyUserStore())) { }\n\n\n    public async Task<ClaimsIdentity> CreateAsync(string username)\n    {\n        var user = new MyUser() { UserName = username };\n        var activeUser = await _uMng.FindByNameAsync(user.UserName);\n\n        if (activeUser == null)\n        {\n            return await _uMng.CreateIdentityAsync(user, DefaultAuthenticationTypes.ApplicationCookie);\n        }\n        else\n        {\n            return null;\n        }\n    }\n}\n\n\u4e00\u5f0f\u3092 https://github.com/ken200/OwinAuthWithNancy \u306b\u914d\u7f6e\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u8a8d\u8a3c\u95a2\u4fc2\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f UserManager.cs \u306b\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n## \u300c\u72ec\u81ea\u8a8d\u8a3c\u300d\u4ed5\u69d8\n\n+ \u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3068\u3057\u3066\u306f\u3001\u300c\u30e6\u30fc\u30b6\u30fc\u540d\u300d\u306e\u307f\u4f7f\u7528\u3059\u308b\u3002\u5f8c\u8ff0\u3059\u308b\u304c\u3001\u30e6\u30fc\u30b6\u30fcID\u3082\u6301\u3064\u5fc5\u8981\u3042\u308a\u3002\u3057\u304b\u3057\u3001\u4f7f\u308f\u306a\u3044\u306e\u3067\u9069\u5f53\u306a\u5024\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u308b\u3002\n\n+ \u30d1\u30b9\u30ef\u30fc\u30c9\u30c1\u30a7\u30c3\u30af\u306f\u884c\u308f\u306a\u3044\u3002\n\n+ \u30e6\u30fc\u30b6\u30fc\u540d\u304c\u975e\u7ba1\u7406\u8005\u7684\u306a\u540d\u79f0(\"admin\",\"root\"\u4ee5\u5916)\u306e\u5834\u5408\u306b\u30ed\u30b0\u30a4\u30f3\u8a31\u53ef\u3059\u308b\u3002\n\n\n## \u53c2\u7167\u3057\u305fWeb\u30da\u30fc\u30b8\n\nhttp://okazuki.hatenablog.com/entry/2013/11/10/190811\n\n\u4e00\u822c\u7684\u306a\u72ec\u81ea\u8a8d\u8a3c\u306b\u3064\u3044\u3066\u77e5\u308a\u305f\u3044\u3002\u307e\u305f\u306f\u3001\u4f7f\u7528\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304c ASP.NET MVC \u306e\u5834\u5408\u306f\u3001\u3053\u3061\u3089\u3092\u53c2\u7167\u3057\u305f\u307b\u3046\u304c\u65ad\u7136\u3088\u3044\u3067\u3059\u3002\n\n\u72ec\u81ea\u8a8d\u8a3c\u3067\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u30c1\u30a7\u30c3\u30af\u95a2\u4fc2\u3067\u5c11\u3057\u306f\u307e\u3063\u305f\u30dd\u30a4\u30f3\u30c8\u306b\u3064\u3044\u3066\u3082\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\n## \u5fc5\u8981\u30d1\u30c3\u30b1\u30fc\u30b8\n\n+ Microsoft.AspNet.Identity.Core\n\nASP.NET Identity\u306e\u30b3\u30a2\u30d1\u30c3\u30b1\u30fc\u30b8\u3002\n\n(\u4f59\u8ac7\u3067\u3059\u304c\u3001MS\u88fdWeb\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f Microsoft.AspNet.* \u3068\u3044\u3046\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u306b\u306a\u308a\u307e\u3059\u3002)\n\n\n## \u69cb\u6210\u7269\n\n### Microsoft.AspNet.Identity.IUser\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u5b9f\u88c5\u30af\u30e9\u30b9\n\n\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u8868\u3059\u3002\u30e6\u30fc\u30b6\u30fcID\u3068\u30e6\u30fc\u30b6\u30fc\u540d\u304c\u5fc5\u9808\u9805\u76ee\u3002\n\n\u4eca\u56de\u306fID\u304c\u4e0d\u8981\u306e\u305f\u3081\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u3059\u308b\u5ea6\u306bGUID\u3092\u5272\u308a\u4ed8\u3051\u3066\u3044\u308b\u304c\u3001\u3075\u3064\u3046\u306f\u3053\u3093\u306a\u3053\u3068\u3057\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002\n\n```csharp\npublic class MyUser : IUser\n{\n    public string Id { get; set; }\n\n    public string UserName { get; set; }\n\n    public MyUser()\n    {\n        Id = Guid.NewGuid().ToString();\n    }\n}\n```\n\n### Microsoft.AspNet.Identity.IUserStore<T>\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u5b9f\u88c5\u30af\u30e9\u30b9\n\n\u30e6\u30fc\u30b6\u30fc\u30b9\u30c8\u30a2\u3092\u8868\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u3067\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u306e\u767b\u9332\u30fb\u524a\u9664\u30fb\u66f4\u65b0\u3001\u53c2\u7167\u3092\u884c\u3046\u3002\n\n\u30d1\u30b9\u30ef\u30fc\u30c9\u60c5\u5831\u3082\u7ba1\u7406\u3059\u308b\u5834\u5408\u306f\u3001IUserPasswordStore<T>\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e\u5b9f\u88c5\u3082\u884c\u3046\u5fc5\u8981\u3042\u308a\u3002\n\n```csharp\npublic class MyUserStore : IUserStore<MyUser>\n{\n    public MyUserStore(){}\n\n    public Task CreateAsync(MyUser user)\n    {\n    \t//\u4f55\u3082\u3057\u306a\u3044\n        return Task.Delay(0);\n    }\n\n    public Task DeleteAsync(MyUser user)\n    {\n    \t//\u4f55\u3082\u3057\u306a\u3044\n        return Task.Delay(0);\n    }\n\n    public Task<MyUser> FindByIdAsync(string userId)\n    {\n    \t//\u4eca\u56de\u3001\u30e6\u30fc\u30b6\u30fcID\u306f\u5229\u7528\u3057\u306a\u3044\u306e\u3067\u3001\u547c\u3073\u51fa\u3055\u308c\u305f\u3089Exception\u5410\u304f\n        throw new NotSupportedException(\"UserId is not supported\");\n    }\n\n    private bool ExistUser(string userName)\n    {\n        if (userName.ToLower() == \"admin\" || userName.ToLower() == \"root\")\n            return false;\n        return true;\n    }\n\n    public Task<MyUser> FindByNameAsync(string userName)\n    {\n    \t//spec:\u300c\u7ba1\u7406\u8005\u3063\u307d\u3044\u540d\u524d(admin\u307e\u305f\u306froot)\u300d\u306f\u5f3e\u304f\n        return Task.Run<MyUser>(() =>\n        {\n            return !ExistUser(userName) ? new MyUser() { UserName = userName } : null;\n        });\n    }\n\n    public Task UpdateAsync(MyUser user)\n    {\n    \t//\u4f55\u3082\u3057\u306a\u3044\n        return Task.Delay(0);\n    }\n\n    public void Dispose()\n    {\n\n    }\n}\n```\n\n### Microsoft.AspNet.Identity.UserManager<T>\u30af\u30e9\u30b9\n\nIUserStore<T>\u5b9f\u88c5\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u30e6\u30fc\u30b6\u30fc\u7ba1\u7406\u3092\u884c\u3046\u30af\u30e9\u30b9\u3002\u4eca\u56de\u306f\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5185\u5305\u3059\u308b\u30d5\u30a1\u30b6\u30fc\u30c9\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u305f\u3002\n\nCreateAsync()\u3067System.Security.Claims.ClaimsIdentity\u30af\u30e9\u30b9\u3092\u53d6\u5f97\u3057\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u8a8d\u8a3c\u767b\u9332\u51e6\u7406\u304c\u884c\u308f\u308c\u308b\u3002\n\n```csharp\npublic class MyUserManager\n{\n    private UserManager<MyUser> _uMng;\n\n    public MyUserManager(UserManager<MyUser> uMng)\n    {\n        this._uMng = uMng;\n    }\n\n    public MyUserManager()\n        : this(new UserManager<MyUser>(new MyUserStore())) { }\n\n\n    public async Task<ClaimsIdentity> CreateAsync(string username)\n    {\n        var user = new MyUser() { UserName = username };\n        var activeUser = await _uMng.FindByNameAsync(user.UserName);\n\n        if (activeUser == null)\n        {\n            return await _uMng.CreateIdentityAsync(user, DefaultAuthenticationTypes.ApplicationCookie);\n        }\n        else\n        {\n            return null;\n        }\n    }\n}\n```\n", "tags": ["ASP.NET"]}