{"context": " More than 1 year has passed since last update.\n\nReadOly \u53ef\u80fd\u306aCombobox\nEnabled \u3092 False \u306b\u3059\u308b\u3068\u30b0\u30ec\u30fc\u30a2\u30a6\u30c8\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u3001ReadOnly \u53ef\u80fd\u306b\u3057\u307e\u3057\u305f\u3002\n\u3044\u308d\u3044\u308d\u4f59\u8a08\u306a\u3053\u3068\u3057\u3066\u307e\u3059\u304c\u3001\u3053\u308c\u3067\u5bfe\u5fdc\u3057\u307e\u3057\u305f\u3002\n\nReadOnlyCombobox.vb\nImports System.Windows.Forms\nImports System.Drawing\nImports System.ComponentModel\nImports System.Security.Permissions\n\n    ''' <summary>\n    ''' \u30b3\u30f3\u30dc\u30dc\u30c3\u30af\u30b9\n    ''' </summary>\n    ''' <remarks>\n    ''' 2014/11/17 ReadOnly \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n    ''' </remarks>\n    Public Class ComboBox\n        Inherits Windows.Forms.ComboBox\n\n        Protected _readOnly As Boolean\n        Protected _inputBackColor As System.Drawing.Color\n        Protected _unInputBackColor As System.Drawing.Color = Color.White\n        Protected _unInputForeColor As System.Drawing.Color = Color.Black\n        Protected _hasSetUnInputBackColor As Boolean = True\n        Protected _unenabledBackColor As System.Drawing.Color = System.Drawing.SystemColors.Control\n        Protected _inputForeColor As System.Drawing.Color = System.Drawing.Color.Black\n        Protected _imeMode As Windows.Forms.ImeMode\n        Protected _error As Boolean  '\u30a8\u30e9\u30fc\u30d5\u30e9\u30b0\n        Protected _components As System.ComponentModel.IContainer\n        Protected _keyPressHandled As Boolean\n\n        Protected _readOnlyBackColor As System.Drawing.Color = Me.BackColor\n        Protected _readOnlyForeColor As System.Drawing.Color = Me.ForeColor\n        Protected _notReadOnlyBackColor As System.Drawing.Color = Me.BackColor\n        Protected _notReadOnlyForeColor As System.Drawing.Color = Me.ForeColor\n\n        Protected _unenabledForeColor As System.Drawing.Color = Nothing\n\n        ''' <summary>\n        ''' Enabled\u30d7\u30ed\u30d1\u30c6\u30a3\u304cFalse\u306e\u3068\u304d\u306b\u8868\u793a\u3055\u308c\u308bForeColor\n        ''' </summary>\n        ''' <value></value>\n        ''' <returns></returns>\n        ''' <remarks></remarks>\n        <System.ComponentModel.Description(\"Enabled\u30d7\u30ed\u30d1\u30c6\u30a3\u304cFalse\u306e\u6642\u306b\u8868\u793a\u3055\u308c\u308b\u6587\u5b57\u8272\u3067\u3059\u3002\")> _\n        Public Property UnenabledForeColor() As System.Drawing.Color\n            Get\n                Return Me._unenabledForeColor\n            End Get\n            Set(ByVal value As System.Drawing.Color)\n                Me._unenabledForeColor = value\n            End Set\n        End Property\n\n        Protected _errorBackColor As System.Drawing.Color = Drawing.Color.Red\n        ''' <summary>\n        ''' \u5165\u529b\u30a8\u30e9\u30fc\u6642\u306e\u80cc\u666f\u8272\n        ''' </summary>\n        ''' <value></value>\n        ''' <returns></returns>\n        ''' <remarks></remarks>\n        <System.ComponentModel.Description(\"\u5165\u529b\u30a8\u30e9\u30fc\u6642\u306b\u8868\u793a\u3055\u308c\u308b\u80cc\u666f\u8272\u3067\u3059\u3002\")> _\n        Public Property ErrorBackColor() As System.Drawing.Color Implements IControl.ErrorBackColor\n            Get\n                If Me._errorBackColor = Nothing Then\n                    Return Me.BackColor\n                End If\n                Return Me._errorBackColor\n            End Get\n            Set(ByVal aValue As System.Drawing.Color)\n                Me._errorBackColor = aValue\n            End Set\n        End Property\n\n        Protected _errorForeColor As System.Drawing.Color = Drawing.Color.White\n        ''' <summary>\n        ''' \u5165\u529b\u30a8\u30e9\u30fc\u6642\u306e\u6587\u5b57\u8272\n        ''' </summary>\n        ''' <value></value>\n        ''' <returns></returns>\n        ''' <remarks></remarks>\n        <System.ComponentModel.Description(\"\u5165\u529b\u30a8\u30e9\u30fc\u6642\u306b\u8868\u793a\u3055\u308c\u308b\u6587\u5b57\u8272\u3067\u3059\u3002\")> _\n        Public Property ErrorForeColor() As System.Drawing.Color Implements IControl.ErrorForeColor\n            Get\n                If Me._errorForeColor = Nothing Then\n                    Return Me.ForeColor\n                End If\n                Return Me._errorForeColor\n            End Get\n            Set(ByVal aValue As System.Drawing.Color)\n                Me._errorForeColor = aValue\n            End Set\n        End Property\n\n        <System.ComponentModel.Description(\"\u6587\u5b57\u5217\u3092\u5909\u66f4\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\")> _\n        Public Property [ReadOnly] As Boolean\n            Get\n                Return Me._readOnly\n            End Get\n            Set(value As Boolean)\n\n                If value = Me._readOnly Then Return\n\n                Me._readOnly = value\n\n                If value Then\n                    Me.ContextMenu = New System.Windows.Forms.ContextMenu\n                    Me.BackColor = _readOnlyBackColor\n                    Me.ForeColor = _readOnlyForeColor\n                    Me.SetStyle(ControlStyles.UserMouse, True)\n                Else\n                    Me.ContextMenu = Nothing\n                    Me.BackColor = _notReadOnlyBackColor\n                    Me.ForeColor = _notReadOnlyForeColor\n                    Me.SetStyle(ControlStyles.UserMouse, False)\n                End If\n\n            End Set\n        End Property\n\n        <System.ComponentModel.Description(\"ReadOnly\u30d7\u30ed\u30d1\u30c6\u30a3\u304cTrue\u306e\u6642\u306b\u8868\u793a\u3055\u308c\u308b\u80cc\u666f\u8272\u3067\u3059\u3002\")> _\n        Public Property ReadOnlyBackColor() As System.Drawing.Color\n            Get\n                Return Me._readOnlyBackColor\n            End Get\n            Set(ByVal value As System.Drawing.Color)\n                Me._readOnlyBackColor = value\n            End Set\n        End Property\n\n        <System.ComponentModel.Description(\"ReadOnly\u30d7\u30ed\u30d1\u30c6\u30a3\u304cTrue\u306e\u6642\u306b\u8868\u793a\u3055\u308c\u308b\u6587\u5b57\u8272\u3067\u3059\u3002\")> _\n        Public Property ReadOnlyForeColor() As System.Drawing.Color\n            Get\n                Return Me._readOnlyForeColor\n            End Get\n            Set(ByVal value As System.Drawing.Color)\n                Me._readOnlyForeColor = value\n            End Set\n        End Property\n\n        <System.ComponentModel.Description(\"ReadOnly\u30d7\u30ed\u30d1\u30c6\u30a3\u304cFalse\u306e\u6642\u306b\u8868\u793a\u3055\u308c\u308b\u80cc\u666f\u8272\u3067\u3059\u3002\")> _\n        Public Property NotReadOnlyBackColor() As System.Drawing.Color\n            Get\n                Return Me._notReadOnlyBackColor\n            End Get\n            Set(ByVal value As System.Drawing.Color)\n                Me._notReadOnlyBackColor = value\n            End Set\n        End Property\n\n        <System.ComponentModel.Description(\"ReadOnly\u30d7\u30ed\u30d1\u30c6\u30a3\u304cFalse\u306e\u6642\u306b\u8868\u793a\u3055\u308c\u308b\u6587\u5b57\u8272\u3067\u3059\u3002\")> _\n        Public Property NotReadOnlyForeColor() As System.Drawing.Color\n            Get\n                Return Me._notReadOnlyForeColor\n            End Get\n            Set(ByVal value As System.Drawing.Color)\n                Me._notReadOnlyForeColor = value\n            End Set\n        End Property\n\n        ''' <summary>\n        ''' \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n        ''' </summary>\n        ''' <remarks></remarks>\n        Public Sub New()\n\n            InitializeComponent()\n            Me._imeMode = Me.ImeMode\n            Me._components = New System.ComponentModel.Container\n        End Sub\n\n        ''' <summary>\n        ''' \u80cc\u666f\u8272\u306e\u5909\u66f4(\u5165\u529b\u6642)\n        ''' </summary>\n        ''' <value></value>\n        ''' <returns></returns>\n        ''' <remarks></remarks>\n        Public Property InputBackColor() As System.Drawing.Color\n            Get\n                Return Me._inputBackColor\n            End Get\n            Set(ByVal aValue As System.Drawing.Color)\n                Me._inputBackColor = aValue\n            End Set\n        End Property\n\n        ''' <summary>\n        ''' \u80cc\u666f\u8272\u306e\u5909\u66f4(\u672a\u5165\u529b\u6642)\n        ''' </summary>\n        ''' <value></value>\n        ''' <returns></returns>\n        ''' <remarks></remarks>\n        Public Property unInputBackColor() As System.Drawing.Color\n            Get\n                Return Me._unInputBackColor\n            End Get\n            Set(ByVal aValue As System.Drawing.Color)\n                Me._unInputBackColor = aValue\n            End Set\n        End Property\n\n        ''' <summary>\n        ''' \u6587\u5b57\u8272\u306e\u5909\u66f4(\u5165\u529b\u6642)\n        ''' </summary>\n        ''' <value></value>\n        ''' <returns></returns>\n        ''' <remarks></remarks>\n        Public Property InputForeColor() As System.Drawing.Color\n            Get\n                Return Me._inputForeColor\n            End Get\n            Set(ByVal aValue As System.Drawing.Color)\n                Me._inputForeColor = aValue\n            End Set\n        End Property\n\n        ''' <summary>\n        ''' \u6587\u5b57\u8272\u306e\u5909\u66f4(\u672a\u5165\u529b\u6642)\n        ''' </summary>\n        ''' <value></value>\n        ''' <returns></returns>\n        ''' <remarks></remarks>\n        Public Property unInputForeColor() As System.Drawing.Color\n            Get\n                Return Me._unInputForeColor\n            End Get\n            Set(ByVal aValue As System.Drawing.Color)\n                Me._unInputForeColor = aValue\n            End Set\n        End Property\n\n        ''' <summary>\n        ''' \u30b3\u30f3\u30dc\u30dc\u30c3\u30af\u30b9\u306e\u30ad\u30fc\u30c0\u30a6\u30f3\u6642\u51e6\u7406\n        ''' </summary>\n        ''' <param name=\"e\"></param>\n        ''' <remarks></remarks>\n        Protected Overrides Sub OnKeyDown(ByVal e As System.Windows.Forms.KeyEventArgs)\n\n            If Not Me.ReadOnly Then\n                Return\n            End If\n\n            If e.KeyCode = Keys.Delete Then\n                e.Handled = True\n                Return\n            End If\n\n            If e.KeyCode = Keys.Back Then\n                Me._keyPressHandled = True\n                Return\n            End If\n\n            If e.Control Then\n                Select Case e.KeyCode\n                    Case Keys.V, Keys.X\n                        Me._keyPressHandled = True\n                        Return\n                End Select\n            End If\n\n            If e.KeyCode = Keys.Up OrElse e.KeyCode = Keys.PageUp OrElse e.KeyCode = Keys.Down OrElse e.KeyCode = Keys.PageDown Then\n                e.Handled = True\n                Return\n            End If\n\n            Me._keyPressHandled = False\n\n        End Sub\n\n        ''' <summary>\n        ''' \u30b3\u30f3\u30dc\u30dc\u30c3\u30af\u30b9\u306e\u30d5\u30a9\u30fc\u30ab\u30b9\u53d6\u5f97\u6642\u51e6\u7406\n        ''' </summary>\n        ''' <param name=\"e\"></param>\n        ''' <remarks></remarks>\n        Protected Overrides Sub OnEnter(ByVal e As System.EventArgs)\n            MyBase.OnEnter(e)\n\n            Me.ImeMode = Me._imeMode\n        End Sub\n\n        ''' <summary>\n        ''' \u30b3\u30f3\u30dc\u30dc\u30c3\u30af\u30b9\u306e\u5024\u5909\u66f4\u6642\u306e\u51e6\u7406\n        ''' </summary>\n        ''' <param name=\"e\"></param>\n        ''' <remarks></remarks>\n        Protected Overrides Sub OnSelectedValueChanged(ByVal e As System.EventArgs)\n            MyBase.OnSelectedValueChanged(e)\n\n            '\u8272\u8a2d\u5b9a\n            Me.SetColor()\n        End Sub\n\n        ''' <summary>\n        ''' \u9078\u629e\u5024\u3092\u53d6\u5f97\n        ''' </summary>\n        ''' <remarks></remarks>\n        Protected Overloads Function GetStringSelectedValue() As String\n            If Me.SelectedValue Is Nothing Then\n                Return String.Empty\n            End If\n            Return Me.SelectedValue.ToString\n        End Function\n\n        ''' <summary>\n        ''' \u8272\u8a2d\u5b9a\n        ''' </summary>\n        ''' <remarks></remarks>\n        Private Sub SetColor()\n\n            If Me._error Then\n                Return\n            End If\n\n            If Me.ReadOnly Then\n                Me.BackColor = _readOnlyBackColor\n                Me.ForeColor = _readOnlyForeColor\n            Else\n                Me.BackColor = _notReadOnlyBackColor\n                Me.ForeColor = _notReadOnlyForeColor\n            End If\n\n        End Sub\n\n        ''' <summary>\n        ''' \u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u5909\u66f4\u6642\u306e\u80cc\u666f\u8272\u8a2d\u5b9a\n        ''' </summary>\n        ''' <param name=\"e\"></param>\n        ''' <remarks></remarks>\n        Protected Overrides Sub OnEnabledChanged(ByVal e As System.EventArgs)\n\n            MyBase.OnEnabledChanged(e)\n\n            Me.SetColor()\n\n        End Sub\n\n        Protected Overrides Sub Dispose(disposing As Boolean)\n            If disposing Then\n                If Not Me._components Is Nothing Then\n                    Me._components.Dispose()\n                End If\n            End If\n            MyBase.Dispose(disposing)\n        End Sub\n\n\n\n        Protected Overrides Sub OnKeyPress(ByVal e As System.Windows.Forms.KeyPressEventArgs)\n\n            If Not Me.ReadOnly Then\n                If ToUpper Then\n                    Dim keyAscii As Integer = AscW(e.KeyChar)\n\n                    '\u5909\u63db\u3057\u305f\uff77\uff70\uff7a\uff70\uff84\uff9e\u3092\uff77\uff70\uff72\uff8d\uff9e\uff9d\uff84\u306b\u8fd4\u3059\n                    e.KeyChar = ChrW(AscW(Char.ToUpper(ChrW(keyAscii))))\n                    If keyAscii = 0 Then\n                        e.Handled = True\n                    End If\n                End If\n                Me._keyPressHandled = False\n                Return\n            End If\n\n            If Me._keyPressHandled Then\n                e.Handled = True\n                Me._keyPressHandled = False\n                Return\n            End If\n\n            If Not Char.IsControl(e.KeyChar) Then\n                e.Handled = True\n            End If\n\n            Me._keyPressHandled = False\n\n\n        End Sub\n\n        ''' <summary>\n        ''' \n        ''' </summary>\n        ''' <param name=\"e\"></param>\n        ''' <remarks></remarks>\n        Protected Overrides Sub OnTextChanged(ByVal e As System.EventArgs)\n            MyBase.OnTextChanged(e)\n\n                '\u9805\u76ee\u5168\u524a\u9664\u306e\u5834\u5408\u3001\u524d\u56de\u9078\u629e\u3057\u3066\u3044\u305f\u5185\u5bb9\u304c\u6b8b\u308b\u4e0d\u5177\u5408\u306e\u51e6\u7f6e\n                If String.IsNullOrEmpty(Me.Text) Then\n                    If TypeOf Me.DataSource Is DataTable Then\n                        Dim dt As DataTable = DirectCast(Me.DataSource, DataTable)\n                        Dim rows As DataRow() = dt.Select(Me.DisplayMember + \"=''\")\n\n                        If 0 < rows.Length Then\n                            Me.SelectedValue = rows(0)(Me.ValueMember)\n                        Else\n                            Me.SelectedIndex = -1\n                        End If\n                    End If\n                End If\n\n        End Sub\n\n        <SecurityPermission(SecurityAction.Demand, _\n            Flags:=SecurityPermissionFlag.UnmanagedCode)> _\n        Protected Overrides Function ProcessCmdKey(ByRef msg As Message, keyData As Keys) As Boolean\n\n            If ((keyData And Keys.Control) = Keys.Control AndAlso _\n                (keyData And Keys.KeyCode) = Keys.V) OrElse _\n                ((keyData And Keys.Shift) = Keys.Shift AndAlso _\n                 (keyData And Keys.KeyCode) = Keys.Insert) Then\n                If Me.ReadOnly Then\n                    Return True\n                Else\n                    Return MyBase.ProcessCmdKey(msg, keyData)\n                End If\n            Else\n                Return MyBase.ProcessCmdKey(msg, keyData)\n            End If\n\n        End Function\n\n    End Class\n\n\n\n\nReadOnlyCombobox.Designer.vb\n    <Global.Microsoft.VisualBasic.CompilerServices.DesignerGenerated()> _\n    Partial Class ComboBox\n        Inherits System.Windows.Forms.ComboBox\n\n        '\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb \u30c7\u30b6\u30a4\u30ca\u3067\u5fc5\u8981\u3067\u3059\u3002\n        Private components As System.ComponentModel.IContainer\n\n        ' \u30e1\u30e2: \u4ee5\u4e0b\u306e\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8 \u30c7\u30b6\u30a4\u30ca\u3067\u5fc5\u8981\u3067\u3059\u3002\n        ' \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8 \u30c7\u30b6\u30a4\u30ca\u3092\u4f7f\u3063\u3066\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\n        ' \u30b3\u30fc\u30c9 \u30a8\u30c7\u30a3\u30bf\u3092\u4f7f\u3063\u3066\u5909\u66f4\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\n        <System.Diagnostics.DebuggerStepThrough()> _\n        Private Sub InitializeComponent()\n            components = New System.ComponentModel.Container()\n        End Sub\n\n    End Class\n\n\n\n# ReadOly \u53ef\u80fd\u306aCombobox\n\nEnabled \u3092 False \u306b\u3059\u308b\u3068\u30b0\u30ec\u30fc\u30a2\u30a6\u30c8\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u3001ReadOnly \u53ef\u80fd\u306b\u3057\u307e\u3057\u305f\u3002\n\u3044\u308d\u3044\u308d\u4f59\u8a08\u306a\u3053\u3068\u3057\u3066\u307e\u3059\u304c\u3001\u3053\u308c\u3067\u5bfe\u5fdc\u3057\u307e\u3057\u305f\u3002\n\n```lang:ReadOnlyCombobox.vb\nImports System.Windows.Forms\nImports System.Drawing\nImports System.ComponentModel\nImports System.Security.Permissions\n\n    ''' <summary>\n    ''' \u30b3\u30f3\u30dc\u30dc\u30c3\u30af\u30b9\n    ''' </summary>\n    ''' <remarks>\n    ''' 2014/11/17 ReadOnly \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n    ''' </remarks>\n    Public Class ComboBox\n        Inherits Windows.Forms.ComboBox\n        \n        Protected _readOnly As Boolean\n        Protected _inputBackColor As System.Drawing.Color\n        Protected _unInputBackColor As System.Drawing.Color = Color.White\n        Protected _unInputForeColor As System.Drawing.Color = Color.Black\n        Protected _hasSetUnInputBackColor As Boolean = True\n        Protected _unenabledBackColor As System.Drawing.Color = System.Drawing.SystemColors.Control\n        Protected _inputForeColor As System.Drawing.Color = System.Drawing.Color.Black\n        Protected _imeMode As Windows.Forms.ImeMode\n        Protected _error As Boolean  '\u30a8\u30e9\u30fc\u30d5\u30e9\u30b0\n        Protected _components As System.ComponentModel.IContainer\n        Protected _keyPressHandled As Boolean\n\n        Protected _readOnlyBackColor As System.Drawing.Color = Me.BackColor\n        Protected _readOnlyForeColor As System.Drawing.Color = Me.ForeColor\n        Protected _notReadOnlyBackColor As System.Drawing.Color = Me.BackColor\n        Protected _notReadOnlyForeColor As System.Drawing.Color = Me.ForeColor\n\n        Protected _unenabledForeColor As System.Drawing.Color = Nothing\n\n        ''' <summary>\n        ''' Enabled\u30d7\u30ed\u30d1\u30c6\u30a3\u304cFalse\u306e\u3068\u304d\u306b\u8868\u793a\u3055\u308c\u308bForeColor\n        ''' </summary>\n        ''' <value></value>\n        ''' <returns></returns>\n        ''' <remarks></remarks>\n        <System.ComponentModel.Description(\"Enabled\u30d7\u30ed\u30d1\u30c6\u30a3\u304cFalse\u306e\u6642\u306b\u8868\u793a\u3055\u308c\u308b\u6587\u5b57\u8272\u3067\u3059\u3002\")> _\n        Public Property UnenabledForeColor() As System.Drawing.Color\n            Get\n                Return Me._unenabledForeColor\n            End Get\n            Set(ByVal value As System.Drawing.Color)\n                Me._unenabledForeColor = value\n            End Set\n        End Property\n\n        Protected _errorBackColor As System.Drawing.Color = Drawing.Color.Red\n        ''' <summary>\n        ''' \u5165\u529b\u30a8\u30e9\u30fc\u6642\u306e\u80cc\u666f\u8272\n        ''' </summary>\n        ''' <value></value>\n        ''' <returns></returns>\n        ''' <remarks></remarks>\n        <System.ComponentModel.Description(\"\u5165\u529b\u30a8\u30e9\u30fc\u6642\u306b\u8868\u793a\u3055\u308c\u308b\u80cc\u666f\u8272\u3067\u3059\u3002\")> _\n        Public Property ErrorBackColor() As System.Drawing.Color Implements IControl.ErrorBackColor\n            Get\n                If Me._errorBackColor = Nothing Then\n                    Return Me.BackColor\n                End If\n                Return Me._errorBackColor\n            End Get\n            Set(ByVal aValue As System.Drawing.Color)\n                Me._errorBackColor = aValue\n            End Set\n        End Property\n\n        Protected _errorForeColor As System.Drawing.Color = Drawing.Color.White\n        ''' <summary>\n        ''' \u5165\u529b\u30a8\u30e9\u30fc\u6642\u306e\u6587\u5b57\u8272\n        ''' </summary>\n        ''' <value></value>\n        ''' <returns></returns>\n        ''' <remarks></remarks>\n        <System.ComponentModel.Description(\"\u5165\u529b\u30a8\u30e9\u30fc\u6642\u306b\u8868\u793a\u3055\u308c\u308b\u6587\u5b57\u8272\u3067\u3059\u3002\")> _\n        Public Property ErrorForeColor() As System.Drawing.Color Implements IControl.ErrorForeColor\n            Get\n                If Me._errorForeColor = Nothing Then\n                    Return Me.ForeColor\n                End If\n                Return Me._errorForeColor\n            End Get\n            Set(ByVal aValue As System.Drawing.Color)\n                Me._errorForeColor = aValue\n            End Set\n        End Property\n\n        <System.ComponentModel.Description(\"\u6587\u5b57\u5217\u3092\u5909\u66f4\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\")> _\n        Public Property [ReadOnly] As Boolean\n            Get\n                Return Me._readOnly\n            End Get\n            Set(value As Boolean)\n\n                If value = Me._readOnly Then Return\n\n                Me._readOnly = value\n\n                If value Then\n                    Me.ContextMenu = New System.Windows.Forms.ContextMenu\n                    Me.BackColor = _readOnlyBackColor\n                    Me.ForeColor = _readOnlyForeColor\n                    Me.SetStyle(ControlStyles.UserMouse, True)\n                Else\n                    Me.ContextMenu = Nothing\n                    Me.BackColor = _notReadOnlyBackColor\n                    Me.ForeColor = _notReadOnlyForeColor\n                    Me.SetStyle(ControlStyles.UserMouse, False)\n                End If\n\n            End Set\n        End Property\n\n        <System.ComponentModel.Description(\"ReadOnly\u30d7\u30ed\u30d1\u30c6\u30a3\u304cTrue\u306e\u6642\u306b\u8868\u793a\u3055\u308c\u308b\u80cc\u666f\u8272\u3067\u3059\u3002\")> _\n        Public Property ReadOnlyBackColor() As System.Drawing.Color\n            Get\n                Return Me._readOnlyBackColor\n            End Get\n            Set(ByVal value As System.Drawing.Color)\n                Me._readOnlyBackColor = value\n            End Set\n        End Property\n\n        <System.ComponentModel.Description(\"ReadOnly\u30d7\u30ed\u30d1\u30c6\u30a3\u304cTrue\u306e\u6642\u306b\u8868\u793a\u3055\u308c\u308b\u6587\u5b57\u8272\u3067\u3059\u3002\")> _\n        Public Property ReadOnlyForeColor() As System.Drawing.Color\n            Get\n                Return Me._readOnlyForeColor\n            End Get\n            Set(ByVal value As System.Drawing.Color)\n                Me._readOnlyForeColor = value\n            End Set\n        End Property\n\n        <System.ComponentModel.Description(\"ReadOnly\u30d7\u30ed\u30d1\u30c6\u30a3\u304cFalse\u306e\u6642\u306b\u8868\u793a\u3055\u308c\u308b\u80cc\u666f\u8272\u3067\u3059\u3002\")> _\n        Public Property NotReadOnlyBackColor() As System.Drawing.Color\n            Get\n                Return Me._notReadOnlyBackColor\n            End Get\n            Set(ByVal value As System.Drawing.Color)\n                Me._notReadOnlyBackColor = value\n            End Set\n        End Property\n\n        <System.ComponentModel.Description(\"ReadOnly\u30d7\u30ed\u30d1\u30c6\u30a3\u304cFalse\u306e\u6642\u306b\u8868\u793a\u3055\u308c\u308b\u6587\u5b57\u8272\u3067\u3059\u3002\")> _\n        Public Property NotReadOnlyForeColor() As System.Drawing.Color\n            Get\n                Return Me._notReadOnlyForeColor\n            End Get\n            Set(ByVal value As System.Drawing.Color)\n                Me._notReadOnlyForeColor = value\n            End Set\n        End Property\n\n        ''' <summary>\n        ''' \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n        ''' </summary>\n        ''' <remarks></remarks>\n        Public Sub New()\n\n            InitializeComponent()\n            Me._imeMode = Me.ImeMode\n            Me._components = New System.ComponentModel.Container\n        End Sub\n\n        ''' <summary>\n        ''' \u80cc\u666f\u8272\u306e\u5909\u66f4(\u5165\u529b\u6642)\n        ''' </summary>\n        ''' <value></value>\n        ''' <returns></returns>\n        ''' <remarks></remarks>\n        Public Property InputBackColor() As System.Drawing.Color\n            Get\n                Return Me._inputBackColor\n            End Get\n            Set(ByVal aValue As System.Drawing.Color)\n                Me._inputBackColor = aValue\n            End Set\n        End Property\n\n        ''' <summary>\n        ''' \u80cc\u666f\u8272\u306e\u5909\u66f4(\u672a\u5165\u529b\u6642)\n        ''' </summary>\n        ''' <value></value>\n        ''' <returns></returns>\n        ''' <remarks></remarks>\n        Public Property unInputBackColor() As System.Drawing.Color\n            Get\n                Return Me._unInputBackColor\n            End Get\n            Set(ByVal aValue As System.Drawing.Color)\n                Me._unInputBackColor = aValue\n            End Set\n        End Property\n\n        ''' <summary>\n        ''' \u6587\u5b57\u8272\u306e\u5909\u66f4(\u5165\u529b\u6642)\n        ''' </summary>\n        ''' <value></value>\n        ''' <returns></returns>\n        ''' <remarks></remarks>\n        Public Property InputForeColor() As System.Drawing.Color\n            Get\n                Return Me._inputForeColor\n            End Get\n            Set(ByVal aValue As System.Drawing.Color)\n                Me._inputForeColor = aValue\n            End Set\n        End Property\n\n        ''' <summary>\n        ''' \u6587\u5b57\u8272\u306e\u5909\u66f4(\u672a\u5165\u529b\u6642)\n        ''' </summary>\n        ''' <value></value>\n        ''' <returns></returns>\n        ''' <remarks></remarks>\n        Public Property unInputForeColor() As System.Drawing.Color\n            Get\n                Return Me._unInputForeColor\n            End Get\n            Set(ByVal aValue As System.Drawing.Color)\n                Me._unInputForeColor = aValue\n            End Set\n        End Property\n\n        ''' <summary>\n        ''' \u30b3\u30f3\u30dc\u30dc\u30c3\u30af\u30b9\u306e\u30ad\u30fc\u30c0\u30a6\u30f3\u6642\u51e6\u7406\n        ''' </summary>\n        ''' <param name=\"e\"></param>\n        ''' <remarks></remarks>\n        Protected Overrides Sub OnKeyDown(ByVal e As System.Windows.Forms.KeyEventArgs)\n\n            If Not Me.ReadOnly Then\n                Return\n            End If\n\n            If e.KeyCode = Keys.Delete Then\n                e.Handled = True\n                Return\n            End If\n\n            If e.KeyCode = Keys.Back Then\n                Me._keyPressHandled = True\n                Return\n            End If\n\n            If e.Control Then\n                Select Case e.KeyCode\n                    Case Keys.V, Keys.X\n                        Me._keyPressHandled = True\n                        Return\n                End Select\n            End If\n\n            If e.KeyCode = Keys.Up OrElse e.KeyCode = Keys.PageUp OrElse e.KeyCode = Keys.Down OrElse e.KeyCode = Keys.PageDown Then\n                e.Handled = True\n                Return\n            End If\n\n            Me._keyPressHandled = False\n\n        End Sub\n\n        ''' <summary>\n        ''' \u30b3\u30f3\u30dc\u30dc\u30c3\u30af\u30b9\u306e\u30d5\u30a9\u30fc\u30ab\u30b9\u53d6\u5f97\u6642\u51e6\u7406\n        ''' </summary>\n        ''' <param name=\"e\"></param>\n        ''' <remarks></remarks>\n        Protected Overrides Sub OnEnter(ByVal e As System.EventArgs)\n            MyBase.OnEnter(e)\n\n            Me.ImeMode = Me._imeMode\n        End Sub\n\n        ''' <summary>\n        ''' \u30b3\u30f3\u30dc\u30dc\u30c3\u30af\u30b9\u306e\u5024\u5909\u66f4\u6642\u306e\u51e6\u7406\n        ''' </summary>\n        ''' <param name=\"e\"></param>\n        ''' <remarks></remarks>\n        Protected Overrides Sub OnSelectedValueChanged(ByVal e As System.EventArgs)\n            MyBase.OnSelectedValueChanged(e)\n\n            '\u8272\u8a2d\u5b9a\n            Me.SetColor()\n        End Sub\n\n        ''' <summary>\n        ''' \u9078\u629e\u5024\u3092\u53d6\u5f97\n        ''' </summary>\n        ''' <remarks></remarks>\n        Protected Overloads Function GetStringSelectedValue() As String\n            If Me.SelectedValue Is Nothing Then\n                Return String.Empty\n            End If\n            Return Me.SelectedValue.ToString\n        End Function\n\n        ''' <summary>\n        ''' \u8272\u8a2d\u5b9a\n        ''' </summary>\n        ''' <remarks></remarks>\n        Private Sub SetColor()\n\n            If Me._error Then\n                Return\n            End If\n\n            If Me.ReadOnly Then\n                Me.BackColor = _readOnlyBackColor\n                Me.ForeColor = _readOnlyForeColor\n            Else\n                Me.BackColor = _notReadOnlyBackColor\n                Me.ForeColor = _notReadOnlyForeColor\n            End If\n\n        End Sub\n\n        ''' <summary>\n        ''' \u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u5909\u66f4\u6642\u306e\u80cc\u666f\u8272\u8a2d\u5b9a\n        ''' </summary>\n        ''' <param name=\"e\"></param>\n        ''' <remarks></remarks>\n        Protected Overrides Sub OnEnabledChanged(ByVal e As System.EventArgs)\n\n            MyBase.OnEnabledChanged(e)\n\n            Me.SetColor()\n\n        End Sub\n\n        Protected Overrides Sub Dispose(disposing As Boolean)\n            If disposing Then\n                If Not Me._components Is Nothing Then\n                    Me._components.Dispose()\n                End If\n            End If\n            MyBase.Dispose(disposing)\n        End Sub\n\n\n\n        Protected Overrides Sub OnKeyPress(ByVal e As System.Windows.Forms.KeyPressEventArgs)\n\n            If Not Me.ReadOnly Then\n                If ToUpper Then\n                    Dim keyAscii As Integer = AscW(e.KeyChar)\n\n                    '\u5909\u63db\u3057\u305f\uff77\uff70\uff7a\uff70\uff84\uff9e\u3092\uff77\uff70\uff72\uff8d\uff9e\uff9d\uff84\u306b\u8fd4\u3059\n                    e.KeyChar = ChrW(AscW(Char.ToUpper(ChrW(keyAscii))))\n                    If keyAscii = 0 Then\n                        e.Handled = True\n                    End If\n                End If\n                Me._keyPressHandled = False\n                Return\n            End If\n\n            If Me._keyPressHandled Then\n                e.Handled = True\n                Me._keyPressHandled = False\n                Return\n            End If\n\n            If Not Char.IsControl(e.KeyChar) Then\n                e.Handled = True\n            End If\n\n            Me._keyPressHandled = False\n\n\n        End Sub\n\n        ''' <summary>\n        ''' \n        ''' </summary>\n        ''' <param name=\"e\"></param>\n        ''' <remarks></remarks>\n        Protected Overrides Sub OnTextChanged(ByVal e As System.EventArgs)\n            MyBase.OnTextChanged(e)\n\n                '\u9805\u76ee\u5168\u524a\u9664\u306e\u5834\u5408\u3001\u524d\u56de\u9078\u629e\u3057\u3066\u3044\u305f\u5185\u5bb9\u304c\u6b8b\u308b\u4e0d\u5177\u5408\u306e\u51e6\u7f6e\n                If String.IsNullOrEmpty(Me.Text) Then\n                    If TypeOf Me.DataSource Is DataTable Then\n                        Dim dt As DataTable = DirectCast(Me.DataSource, DataTable)\n                        Dim rows As DataRow() = dt.Select(Me.DisplayMember + \"=''\")\n\n                        If 0 < rows.Length Then\n                            Me.SelectedValue = rows(0)(Me.ValueMember)\n                        Else\n                            Me.SelectedIndex = -1\n                        End If\n                    End If\n                End If\n \n        End Sub\n\n        <SecurityPermission(SecurityAction.Demand, _\n            Flags:=SecurityPermissionFlag.UnmanagedCode)> _\n        Protected Overrides Function ProcessCmdKey(ByRef msg As Message, keyData As Keys) As Boolean\n\n            If ((keyData And Keys.Control) = Keys.Control AndAlso _\n                (keyData And Keys.KeyCode) = Keys.V) OrElse _\n                ((keyData And Keys.Shift) = Keys.Shift AndAlso _\n                 (keyData And Keys.KeyCode) = Keys.Insert) Then\n                If Me.ReadOnly Then\n                    Return True\n                Else\n                    Return MyBase.ProcessCmdKey(msg, keyData)\n                End If\n            Else\n                Return MyBase.ProcessCmdKey(msg, keyData)\n            End If\n\n        End Function\n\n    End Class\n\n```\n\n```lang:ReadOnlyCombobox.Designer.vb\n    <Global.Microsoft.VisualBasic.CompilerServices.DesignerGenerated()> _\n    Partial Class ComboBox\n        Inherits System.Windows.Forms.ComboBox\n\n        '\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb \u30c7\u30b6\u30a4\u30ca\u3067\u5fc5\u8981\u3067\u3059\u3002\n        Private components As System.ComponentModel.IContainer\n\n        ' \u30e1\u30e2: \u4ee5\u4e0b\u306e\u30d7\u30ed\u30b7\u30fc\u30b8\u30e3\u306f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8 \u30c7\u30b6\u30a4\u30ca\u3067\u5fc5\u8981\u3067\u3059\u3002\n        ' \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8 \u30c7\u30b6\u30a4\u30ca\u3092\u4f7f\u3063\u3066\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\n        ' \u30b3\u30fc\u30c9 \u30a8\u30c7\u30a3\u30bf\u3092\u4f7f\u3063\u3066\u5909\u66f4\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\n        <System.Diagnostics.DebuggerStepThrough()> _\n        Private Sub InitializeComponent()\n            components = New System.ComponentModel.Container()\n        End Sub\n\n    End Class\n\n```\n", "tags": ["VB.Net", "UserControl"]}