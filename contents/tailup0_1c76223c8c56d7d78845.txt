{"context": " More than 1 year has passed since last update.\n\nLaravel\u30d0\u30fc\u30b8\u30e7\u30f3\n5.2.7\n\n\u4fee\u6b63\u7b87\u6240\n\u30e6\u30fc\u30b6\u30c6\u30fc\u30d6\u30eb\u540d\u5909\u66f4\n. users\u2192users2\n\u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30bb\u30c3\u30c8\u30c6\u30fc\u30d6\u30eb\u540d\u5909\u66f4\n. password_resets\u2192password_resets2\n\u8a8d\u8a3c\u30ab\u30e9\u30e0\u540d\u5909\u66f4\n. email\u2192email2\n\napp/Http/Controllers/Auth/AuthController.php\n.......\n\nprotected $username = 'email2';\n\n.......\n\nprotected function validator(array $data)\n{\n    return Validator::make($data, [\n        'email2' => 'required|email|max:255|unique:users',\n        'name' => 'required|max:255',\n        'password' => 'required|confirmed|min:6',\n    ]);\n}\n\nprotected function create(array $data)\n{\n    return User::create([\n        'email2' => $data['email2'],\n        'name' => $data['name'],\n        'password' => bcrypt($data['password']),\n    ]);\n}\n\n.......\n\n\napp/User.php\n.......\n\nprotected $table = 'users2';\n\n.......\n\nprotected $fillable = [\n    'email2',\n    'name',\n    'password',\n];\n\n.......\n\n\nvendor/laravel/framework/src/Illuminate/Auth/Passwords/CanResetPassword.php\n.......\n\npublic function getEmailForPasswordReset()\n{\n    return $this->email2;\n}\n\n.......\n\n\nvendor/laravel/framework/src/Illuminate/Auth/Passwords/DatabaseTokenRepository.php\n.......\n\nprotected function deleteExisting(CanResetPasswordContract $user)\n{\n    return $this->getTable()->where('email2', $user->getEmailForPasswordReset())->delete();\n}\n\n.......\n\nprotected function getPayload($email, $token)\n{\n    return ['email2' => $email, 'token' => $token, 'created_at' => new Carbon];\n}\n\n.......\n\npublic function exists(CanResetPasswordContract $user, $token)\n{\n    $email = $user->getEmailForPasswordReset();\n\n    $token = (array) $this->getTable()->where('email2', $email)->where('token', $token)->first();\n\n    return $token && ! $this->tokenExpired($token);\n}\n\n.......\n\n\nvendor/laravel/framework/src/Illuminate/Foundation/Auth/ResetsPasswords.php\n.......\n\npublic function sendResetLinkEmail(Request $request)\n{\n$this->validate($request, ['email2' => 'required|email']);\n\n    $response = Password::sendResetLink($request->only('email2'), function (Message $message) {\n        $message->subject($this->getEmailSubject());\n    });\n\n    switch ($response) {\n        case Password::RESET_LINK_SENT:\n            return $this->getSendResetLinkEmailSuccessResponse($response);\n\n        case Password::INVALID_USER:\n        default:\n            return $this->getSendResetLinkEmailFailureResponse($response);\n    }\n}\n\n.......\n\npublic function reset(Request $request)\n{\n    $this->validate($request, [\n        'token' => 'required',\n        'email2' => 'required|email',\n        'password' => 'required|confirmed|min:6',\n    ]);\n\n    $credentials = $request->only(\n        'email2', 'password', 'password_confirmation', 'token'\n    );\n\n    $response = Password::reset($credentials, function ($user, $password) {\n        $this->resetPassword($user, $password);\n    });\n\n    switch ($response) {\n        case Password::PASSWORD_RESET:\n            return $this->getResetSuccessResponse($response);\n\n        default:\n            return $this->getResetFailureResponse($request, $response);\n    }\n}\n\n.......\n\nprotected function getResetFailureResponse(Request $request, $response)\n{\n    return redirect()->back()\n        ->withInput($request->only('email2'))\n        ->withErrors(['email2' => trans($response)]);\n}\n\n.......\n\n\nconfig/auth.php\n.......\n\n'passwords' => [\n    'users' => [\n        'provider' => 'users',\n        'email' => 'auth.emails.password',\n        'table' => 'password_resets2',\n        'expire' => 60,\n    ],\n],\n\n.......\n\n# Laravel\u30d0\u30fc\u30b8\u30e7\u30f3\n5.2.7\n\n# \u4fee\u6b63\u7b87\u6240\n\u30e6\u30fc\u30b6\u30c6\u30fc\u30d6\u30eb\u540d\u5909\u66f4\n. users\u2192users2\n\n\u30d1\u30b9\u30ef\u30fc\u30c9\u30ea\u30bb\u30c3\u30c8\u30c6\u30fc\u30d6\u30eb\u540d\u5909\u66f4\n. password_resets\u2192password_resets2\n\n\u8a8d\u8a3c\u30ab\u30e9\u30e0\u540d\u5909\u66f4\n. email\u2192email2\n\n### app/Http/Controllers/Auth/AuthController.php\n    .......\n    \n    protected $username = 'email2';\n    \n    .......\n    \n    protected function validator(array $data)\n    {\n        return Validator::make($data, [\n            'email2' => 'required|email|max:255|unique:users',\n            'name' => 'required|max:255',\n            'password' => 'required|confirmed|min:6',\n        ]);\n    }\n\n    protected function create(array $data)\n    {\n        return User::create([\n            'email2' => $data['email2'],\n            'name' => $data['name'],\n            'password' => bcrypt($data['password']),\n        ]);\n    }\n    \n    .......\n    \n\n\n### app/User.php\n\n    .......\n    \n    protected $table = 'users2';\n    \n    .......\n    \n    protected $fillable = [\n        'email2',\n        'name',\n        'password',\n    ];\n    \n    .......\n\n\n### vendor/laravel/framework/src/Illuminate/Auth/Passwords/CanResetPassword.php\n\n    .......\n    \n    public function getEmailForPasswordReset()\n    {\n        return $this->email2;\n    }\n\n    .......\n    \n### vendor/laravel/framework/src/Illuminate/Auth/Passwords/DatabaseTokenRepository.php\n\n    .......\n    \n    protected function deleteExisting(CanResetPasswordContract $user)\n    {\n        return $this->getTable()->where('email2', $user->getEmailForPasswordReset())->delete();\n    }\n\n    .......\n    \n    protected function getPayload($email, $token)\n    {\n        return ['email2' => $email, 'token' => $token, 'created_at' => new Carbon];\n    }\n    \n    .......\n    \n    public function exists(CanResetPasswordContract $user, $token)\n    {\n        $email = $user->getEmailForPasswordReset();\n\n        $token = (array) $this->getTable()->where('email2', $email)->where('token', $token)->first();\n\n        return $token && ! $this->tokenExpired($token);\n    }\n\n    .......\n    \n\n### vendor/laravel/framework/src/Illuminate/Foundation/Auth/ResetsPasswords.php\n\n\n    .......\n    \n    public function sendResetLinkEmail(Request $request)\n    {\n    $this->validate($request, ['email2' => 'required|email']);\n\n        $response = Password::sendResetLink($request->only('email2'), function (Message $message) {\n            $message->subject($this->getEmailSubject());\n        });\n\n        switch ($response) {\n            case Password::RESET_LINK_SENT:\n                return $this->getSendResetLinkEmailSuccessResponse($response);\n\n            case Password::INVALID_USER:\n            default:\n                return $this->getSendResetLinkEmailFailureResponse($response);\n        }\n    }\n\n    .......\n    \n    public function reset(Request $request)\n    {\n        $this->validate($request, [\n            'token' => 'required',\n            'email2' => 'required|email',\n            'password' => 'required|confirmed|min:6',\n        ]);\n\n        $credentials = $request->only(\n            'email2', 'password', 'password_confirmation', 'token'\n        );\n\n        $response = Password::reset($credentials, function ($user, $password) {\n            $this->resetPassword($user, $password);\n        });\n\n        switch ($response) {\n            case Password::PASSWORD_RESET:\n                return $this->getResetSuccessResponse($response);\n\n            default:\n                return $this->getResetFailureResponse($request, $response);\n        }\n    }\n\n    .......\n    \n    protected function getResetFailureResponse(Request $request, $response)\n    {\n        return redirect()->back()\n            ->withInput($request->only('email2'))\n            ->withErrors(['email2' => trans($response)]);\n    }\n\n    .......\n\n### config/auth.php\n\n    .......\n    \n    'passwords' => [\n        'users' => [\n            'provider' => 'users',\n            'email' => 'auth.emails.password',\n            'table' => 'password_resets2',\n            'expire' => 60,\n        ],\n    ],\n    \n    .......\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "tags": ["laravel", "laravel5", "auth", "PHP"]}