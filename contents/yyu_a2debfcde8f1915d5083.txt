{"context": " More than 1 year has passed since last update.Dead-Simple Dependency Injection in Scala\u3068\u3044\u3046\u767a\u8868\u3067\u3001Dependency Injection\uff08\u4f9d\u5b58\u306e\u6ce8\u5165\uff09\u3092Reader\u30e2\u30ca\u30c9\u306a\u3069\u3092\u7528\u3044\u3066\u884c\u3046\u3068\u3044\u3046\u6280\u8853\u304c\u3042\u3063\u305f\u3002\u4e0b\u8a18\u304c\u305d\u306e\u767a\u8868\u3067\u3042\u308b\u3002\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u307e\u305a\u3001Dependency Injection\u306b\u3064\u3044\u3066\u306e\u8aac\u660e\u3068\u3001Reader\u30e2\u30ca\u30c9\u306b\u3064\u3044\u3066\u306e\u8aac\u660e\u3092\u884c\u3044\u3001\u6b21\u306bReader\u30e2\u30ca\u30c9\u3092\u4f7f\u3063\u305fDependency Injection\u306b\u3064\u3044\u3066\u8ff0\u3079\u3066\u3001Free\u30e2\u30ca\u30c9\u3092\u7528\u3044\u3066\u5c0f\u3055\u306aDSL\u3092\u4f5c\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u7d39\u4ecb\u3059\u308b\u3002\n\u3053\u306e\u8a18\u4e8b\u306f\u30e2\u30ca\u30c9\u3084Dependency Injection\u306a\u3069\u306b\u95a2\u3059\u308b\u524d\u63d0\u77e5\u8b58\u304c\u306a\u304f\u3066\u3082\u3042\u308b\u7a0b\u5ea6\u8aad\u3081\u308b\u3088\u3046\u306b\u610f\u56f3\u3057\u3066\u3044\u308b\u304c\u3001Scala\u306e\u6587\u6cd5\u7684\u306a\u77e5\u8b58\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u3002\u307e\u305f\u3001\u3082\u3057\u8aac\u660e\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u70b9\u3084\u6587\u7ae0\u306e\u610f\u56f3\u304c\u5206\u304b\u308a\u306b\u304f\u3044\u90e8\u5206\u304c\u3042\u308c\u3070\u3001\u6c17\u8efd\u306b\u30b3\u30e1\u30f3\u30c8\u306a\u3069\u3067\u6307\u6458\u3057\u3066\u6b32\u3057\u3044\u3002\n\n\u6ce8\u610f\uff1a\n\u8a18\u4e8b\u306e\u4e2d\u306b\u3042\u308b\u30b3\u30fc\u30c9\u306f\u8aad\u307f\u3084\u3059\u3055\u306e\u305f\u3081\u306bimport\u306a\u3069\u3092\u7701\u7565\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u306e\u307e\u307e\u3067\u306f\u52d5\u304b\u306a\u3044\u3002\u52d5\u304b\u3057\u305f\u3044\u65b9\u306fGithub\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f7f\u3046\u3068\u3088\u3044\u3002\n\n\nReader\u30e2\u30ca\u30c9\u3068Dependency Injection\n\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046\u306bTwitter\u304b\u3089\u60c5\u5831\u3092\u53d6\u3063\u3066\u304d\u305f\u308a\u3001\u30c4\u30a4\u30fc\u30c8\u3092\u6295\u7a3f\u3059\u308b\u95a2\u6570\u304c\u3042\u308b\u3068\u3059\u308b\u3002\n\nTwitterRepository.scala\nobject TwitterRepository {\n  val config = new NingAsyncHttpClientConfigBuilder(DefaultWSClientConfig()).build()\n  val builder = new AsyncHttpClientConfig.Builder(config)\n  val client = new NingWSClient(builder.build)\n\n  val key   = ConsumerKey(\n    \"key\",\n    \"secret\"\n  )\n  val token = RequestToken(\n    \"token\",\n    \"secret\"\n  )\n\n  def fetchUserByScreenName(screenName: String): Future[WSResponse] =\n    client.url(\"https://api.twitter.com/1.1/users/show.json\")\n      .withQueryString(\"screen_name\" -> screenName)\n      .sign(OAuthCalculator(key, token))\n      .get()\n\n  def updateStatus(status: String): Future[WSResponse] =\n    client.url(\"https://api.twitter.com/1.1/statuses/update.json\")\n      .sign(OAuthCalculator(key, token))\n      .post(Map(\"status\" -> Seq(status)))\n}\n\n\n\u3053\u308c\u3067\u52d5\u304d\u306f\u3059\u308b\u304c\u3001\u5916\u90e8\u3068\u901a\u4fe1\u3059\u308b\u90e8\u5206\uff08client\uff09\u3084Twitter\u306e\u9375\uff08key\uff09\u3084\u30c8\u30fc\u30af\u30f3\uff08token\uff09\u304c\u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u5225\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u306b\u5dee\u3057\u63db\u3048\u305f\u308a\u3001\u30c6\u30b9\u30c8\u3059\u308b\u969b\u306b\u4e0d\u4fbf\u306a\u3053\u3068\u306b\u306a\u308b\u3002\n\u305d\u3053\u3067Reader\u30e2\u30ca\u30c9\u3092\u4f7f\u3063\u3066\u5916\u304b\u3089\u4f9d\u5b58\u3092\u6ce8\u5165\u3057\u3088\u3046\u3068\u3044\u3046\u306e\u304cDead-Simple Dependency Injection in Scala\u306a\u3069\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u624b\u6cd5\u3067\u3042\u308b\u3002\n\nReader\u30e2\u30ca\u30c9\n\u307e\u305a\u3001Reader\u30e2\u30ca\u30c9 Reader\u3092\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b1\u3002\n\nReader.scala\ncase class Reader[E, A](g: E => A) {\n  def apply(e: E) = g(e)\n  def run: E => A = apply\n  def map[B](f: A => B): Reader[E, B] = Reader(e => f(g(e)))\n  def flatMap[B](f: A => Reader[E, B]): Reader[E, B] = Reader(e => f(g(e))(e))\n}\n\nobject Reader {\n  def pure[E, A](a: A): Reader[E, A] = Reader(e => a)\n  def ask[E]: Reader[E, E] = Reader(identity)\n  def local[E, A](f: E => E, c: Reader[E, A]): Reader[E, A] = Reader(e => c(f(e)))\n  def reader[E, A](f: E => A): Reader[E, A] = Reader(f)\n}\n\n\nReader\u306b\u3064\u3044\u3066\u5168\u3066\u3092\u8aac\u660e\u3059\u308b\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u76f4\u611f\u7684\u306a\u3053\u3068\u3060\u3051\u3092\u8aac\u660e\u3059\u308b\u3002\u307e\u305a\u3001Reader\u306emap\u3068flatMap\u306b\u6ce8\u76ee\u3059\u308b\u3068\u3001\u4eca\u306eReader\u304c\u6301\u3063\u3066\u3044\u308b\u95a2\u6570g\u306be\u3092\u4e0e\u3048\u3066\u5b9f\u884c\u3057\u3001\u305d\u308c\u3092\u4f7f\u3063\u3066f\u3092\u5b9f\u884c\u3059\u308b\u3068\u3044\u3046\u64cd\u4f5c\u3092\u3059\u308b\u95a2\u6570\u3092\u6301\u3064\u65b0\u3057\u3044Reader\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u3002\u305f\u3060\u3057\u3001map\u3084flatMap\u306e\u969b\u306b\u306ff\u3068g\u3092\u7d44\u5408\u305b\u308b\u3060\u3051\u3067\u3001\u5b9f\u969b\u306b\u5b9f\u884c\u3059\u308b\u306e\u306fapply\u3082\u3057\u304f\u306frun2\u3092\u7528\u3044\u3066\u5f15\u6570e\u306b\u5024\u3092\u6295\u5165\u3057\u305f\u6642\u306b\u521d\u3081\u3066\u5168\u3066\u306e\u8a08\u7b97\u304c\u5b9f\u884c\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\u6b21\u306b\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8Reader\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3082\u306e\u306b\u3064\u3044\u3066\u8aac\u660e\u3059\u308b\u3002\n\npure\n\u4efb\u610f\u306e\u5024\u3092Reader\u306b\u3059\u308b\nask\n\u74b0\u5883e\u3092\u53d6\u5f97\u3059\u308b\nlocal\n\u74b0\u5883e\u3092\u66f8\u304d\u63db\u3048\u308b\nreader\n\u95a2\u6570\u3092Reader\u306b\u3059\u308b\n\n\u3053\u308c\u3089\u306e\u8aac\u660e\u306f\u4eca\u306f\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u5f8c\u3067\u5b9f\u969b\u306b\u4f7f\u3046\u969b\u306b\u5177\u4f53\u7684\u306a\u4f8b\u3068\u3057\u3066\u8868\u308f\u308c\u308b\u306e\u3067\u5fc3\u914d\u306a\u3044\u3002\n\nReader\u30e2\u30ca\u30c9 vs \u95a2\u6570\n\u4e00\u898b\u3059\u308b\u3068Reader\u30e2\u30ca\u30c9\u306f\u95a2\u6570\uff08\u30e9\u30e0\u30c0\u5f0f\uff09\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3088\u3046\u306b\u601d\u3048\u308b\u3002\u3057\u304b\u3057\u3001\u5927\u304d\u306a\u9055\u3044\u3068\u3057\u3066\u3001Reader\u30e2\u30ca\u30c9\u306f\u81ea\u8eab\u304c\u6301\u3064\u95a2\u6570\u306b\u5171\u901a\u306e\u74b0\u5883\u3068\u3044\u3046\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3067\u3082\u306a\u304f\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3067\u3082\u306a\u3044\u7b2c\u4e09\u306e\u5834\u6240\u3092\u63d0\u4f9b\u3059\u308b3\u3002\u95a2\u6570\u306e\u4e2d\u304b\u3089\u4f55\u304b\u60c5\u5831\u3092\u53c2\u7167\u3057\u305f\u3044\u5834\u5408\u3001\u901a\u5e38\u306f\u6b21\u306e\u4e8c\u629e\u306b\u306a\u308b\u3002\n\n\u5f15\u6570\u3067\u6e21\u3059\n\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u304b\u3089\u8aad\u307f\u51fa\u3059\n\n\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3092\u7528\u3044\u308b\u3053\u3068\u304c\u4e0d\u5473\u3044\u3068\u3044\u3046\u306e\u306f\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u308b\u304c\u3001\u304b\u3068\u3044\u3063\u3066\u5f15\u6570\u3092\u4f7f\u3046\u30a2\u30d7\u30ed\u30fc\u30c1\u3082\u3001\u6b21\u306e\u3088\u3046\u306b\u95a2\u6570\u304c\u3044\u304f\u3064\u3082\u9023\u306a\u3063\u305f\u72b6\u6cc1\u3092\u8003\u3048\u308b\u3068\u554f\u984c\u304c\u6d6e\u304d\u5f6b\u308a\u306b\u306a\u308b\u3002\ndef main(args: Array[String]) = {\n  ???\n  level1(args[0])\n}\n\ndef level1(d: String) = {\n  ???  // \u3053\u3053\u3067\u306f d \u3092\u4f7f\u308f\u306a\u3044\n  level2(d)\n}\n\ndef level2(d: String) = {\n  ???  // \u3053\u3053\u3067\u306f d \u3092\u4f7f\u308f\u306a\u3044\n  need_arg(d)\n}\n\ndef need_arg(d: String) =\n  ??? // d \u3092\u5fc5\u8981\u3068\u3059\u308b\n\n\u3053\u306e\u3088\u3046\u306b\u3042\u308b\u95a2\u6570\u304c\u4f9d\u5b58\u3057\u3066\u308b\u95a2\u6570\u306e\u4f9d\u5b58\u3092\u308f\u3056\u308f\u3056\u660e\u793a\u7684\u306b\u5f15\u6570\u3067\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001\u5f15\u6570\u304c\u5897\u3048\u3066\u6df7\u4e71\u3057\u305f\u308a\u3001\u30b3\u30fc\u30c9\u306e\u898b\u901a\u3057\u304c\u60aa\u304f\u306a\u3063\u305f\u308a\u3059\u308b\u3002\u307e\u305f\u3001\u4f9d\u5b58\u304c\u5897\u3048\u305f\u969b\u306b\u95a2\u4fc2\u3059\u308b\u95a2\u6570\u306e\u5f15\u6570\u3092\u5168\u3066\u5897\u3084\u3059\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u4e00\u65b9\u3067\u3001Reader\u30e2\u30ca\u30c9\u306f\u5171\u901a\u306b\u4f7f\u3046\u60c5\u5831\u3092\u5f15\u6570\u3067\u3082\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3067\u3082\u306a\u3044\u7b2c\u4e09\u306e\u5834\u6240\uff08\u74b0\u5883\uff09\u306b\u5165\u308c\u308b\u3053\u3068\u3067\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u5f15\u6570\u3067\u4e00\u9577\u4e00\u77ed\u3060\u3068\u601d\u308f\u308c\u3066\u3044\u305f\u554f\u984c\u3092\u30b9\u30de\u30fc\u30c8\u306b\u89e3\u6c7a\u3059\u308b\u3002\n\nDependency Injection\n\u5177\u4f53\u7684\u306a\u4f8b\u3067\u3001 Reader\u30e2\u30ca\u30c9\u3092\u7528\u3044\u305fDependency Injection\u304c\u3069\u306e\u3088\u3046\u306b\u884c\u308f\u308c\u308b\u306e\u3060\u308d\u3046\u304b\u3002\n\u307e\u305a\u3001\u4f9d\u5b58\u3092\u6301\u3064\u3053\u3068\u3092\u8868\u3059\u30c8\u30ec\u30a4\u30c8\u3092\u7528\u610f\u3059\u308b\u3002\n\nUseWSClient.scala\ntrait UseWSClient {\n  val client: WSClient\n}\n\n\n\nUseOAuthCred.scala\ntrait UseOAuthCred {\n  val cred: OAuthCalculator\n}\n\n\nTwitterRepository\u3092\u6539\u9020\u3057\u3066\u3001Reader\u30e2\u30ca\u30c9\u3092\u8fd4\u3059\u3088\u3046\u306b\u3059\u308b\u3002\u307e\u305f\u3001\u74b0\u5883\u3068\u3057\u3066\u5148\u7a0b\u5b9a\u7fa9\u3057\u305f\u30c8\u30ec\u30a4\u30c8UseWSClient\u3068UseOAuthCred\u3092with\u3067\u7d50\u5408\u3057\u305f\u3082\u306e\u3092\u7528\u3044\u308b\u3002\n\nTwitterRepositoryDI.scala\nobject TwitterRepositoryDI {\n  def fetchUserByScreenName(screenName: String): Reader[UseWSClient with UseOAuthCred, Future[WSResponse]] =\n    reader(env =>\n      env.client.url(\"https://api.twitter.com/1.1/users/show.json\")\n        .withQueryString(\"screen_name\" -> screenName)\n        .sign(env.cred)\n        .get())\n\n  def updateStatus(status: String): Reader[UseWSClient with UseOAuthCred, Future[WSResponse]] =\n    reader(env =>\n      env.client.url(\"https://api.twitter.com/1.1/statuses/update.json\")\n        .sign(env.cred)\n        .post(Map(\"status\" -> Seq(status))))\n\n}\n\n\n\u305d\u3057\u3066\u3001\u4f9d\u5b58\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f\u5834\u6240\u3092\u4f5c\u308b\u3002\n\nDefaultEnvironment.scala\nobject DefaultEnvironment {\n  val config  = new NingAsyncHttpClientConfigBuilder(DefaultWSClientConfig()).build()\n  val builder = new AsyncHttpClientConfig.Builder(config)\n  val c       = new NingWSClient(builder.build)\n\n  val defaultEnvironment = new UseWSClient with UseOAuthCred {\n    val client = c\n    val cred = OAuthCalculator(\n      ConsumerKey(\n        \"key\",\n        \"secret\"\n      ),\n      RequestToken(\n        \"token\",\n        \"secret\"\n      )\n    )\n  }\n}\n\n\n\u6700\u7d42\u7684\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9f\u884c\u3059\u308b\u3002\nfetchUserByScreenName(\"_yyu_\").run(DefaultEnvironment.defaultEnvironment)\n\n\u3053\u306e\u3088\u3046\u306b\u3001Reader\u30e2\u30ca\u30c9\u306e\u74b0\u5883\u3068\u3057\u3066\u4f9d\u5b58\u3092\u6ce8\u5165\u3067\u304d\u308b\u3046\u3048\u3001\u3053\u308c\u3089\u306eReader\u3092\u5408\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b4\u3002\n(for {\n  _ <- fetchUserByScreenName(\"_yyu_\")\n  _ <- updateStatus(\"good\")\n} yield () ).run(DefaultEnvironment.defaultEnvironment)\n\n\n\u4f9d\u5b58\u306e\u9078\u629e\n\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046Future[Boolean]\u3092\u8fd4\u3059\u3088\u3046\u306a\u4f8b\u3068\u3001\u305d\u306e\u7d50\u679c\u306b\u5fdc\u3058\u3066\u3069\u306e\u4f9d\u5b58\u3092\u4f7f\u3046\u306e\u304b\u3092\u9078\u629e\u3057\u3066\u6ce8\u5165\u3059\u308b\u4f8b\u3092\u8003\u3048\u3066\u307f\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\u307e\u305a\u306f\u6b21\u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u7528\u610f\u3059\u308b\u3002\n\nTwitterRepositoryDI.scala\ndef existUserWithScreenName(screenName: String): Reader[UseWSClient with UseOAuthCred, Future[Boolean]] =\n  reader(env =>\n    for {\n      res <- env.client.url(\"https://api.twitter.com/1.1/users/show.json\")\n               .withQueryString(\"screen_name\" -> screenName)\n               .sign(env.cred)\n               .get()\n    } yield res.status == 200\n  )\n\n\n\u3053\u306e\u95a2\u6570\u306fscreenName\u3092\u6301\u3064\u30e6\u30fc\u30b6\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u3067\u3042\u308b\u3002\n\u6b21\u306bdefaultEnvironment\u3068\u306f\u5225\u306e\u4f9d\u5b58\u3092\u7528\u610f\u3059\u308b\u3002\n\nDefaultEnvironment.scala\nval adminEnvironment = new UseWSClient with UseOAuthCred {\n  val client = c\n  val cred = OAuthCalculator(\n    ConsumerKey(\n      \"key\",\n      \"secret\"\n    ),\n    RequestToken(\n      \"token\",\n      \"secret\"\n    )\n  )\n}\n\n\n\u305d\u3057\u3066\u3001\u74b0\u5883\u3092\u5909\u66f4\u3057\u3066Reader\u30e2\u30ca\u30c9\u3092\u5b9f\u884c\u3059\u308blocal\u3092\u4f7f\u3063\u3066\u6b21\u306e\u3088\u3046\u306b\u3059\u308b\u3002\n(for {\n   fb <- existUserWithScreenName(\"_yyu_\")\n   _  <- local(\n           (e: UseWSClient with UseOAuthCred) =>\n             if (Await.result(fb, Duration.Inf))\n               DefaultEnvironment.adminEnvironment\n             else\n               e,\n           updateStatus(\"test\")\n         )\n} yield () ).run(DefaultEnvironment.defaultEnvironment)\n\n\u3053\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001\u201c_yyu_\u201d\u3068\u3044\u3046\u30e6\u30fc\u30b6\u30fc\u304c\u5b58\u5728\u3059\u308c\u3070\u74b0\u5883\u3092adminEnvironment\u3078\u5909\u66f4\u3057\u3066\u304b\u3089updateStatus\u3092\u5b9f\u884c\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u3070\u901a\u5e38\u306e\u74b0\u5883\u3067\u5b9f\u884c\u3059\u308b\u3002\n\u3053\u306e\u3088\u3046\u306b\u3001\u3053\u306e\u65b9\u6cd5\u3067\u306f\u4f9d\u5b58\u3092\u5b9f\u884c\u6642\u306e\u5024\u306b\u3088\u3063\u3066\u5207\u308a\u63db\u3048\u308b\u3068\u3044\u3063\u305f\u67d4\u8edf\u306a\u51e6\u7406\u304c\u3067\u304d\u308b\u3002\n\nDSL\u3068Free\u30e2\u30ca\u30c9\n\u8a08\u7b97\u3092\u5408\u6210\u3057\u305f\u308a\u3057\u3064\u3064\u3001\u4f9d\u5b58\u3092\u6ce8\u5165\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\u3053\u308c\u3092\u4f7f\u3063\u3066Twitter\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306e\u30df\u30cb\u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9e\uff08DSL\uff09\u3092\u4f5c\u308d\u3046\u3068\u3044\u3046\u306e\u304c\u3001Dead-Simple Dependency Injection in Scala\u306e\u5f8c\u534a\u30d1\u30fc\u30c8\u306b\u306a\u308b\u3002\n\n\u5c0f\u3055\u306aDSL\n\u3053\u306eTwitter\u306e\u4f8b\u3067\u306f\u6b21\u306e\u3088\u3046\u306b\u3001\u300c\u6b21\u306e\u8a08\u7b97\u300d\u3092\u6301\u3066\u308b\u3088\u3046\u306a\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u3068\u30c8\u30ec\u30a4\u30c8\u3092\u7528\u610f\u3059\u308b\u3002\n\nTwitter.scala\nsealed trait Twitter[A]\n\ncase class Fetch[A](screenName: String, next: WSResponse => A) extends Twitter[A]\ncase class Update[A](status: String, next: A) extends Twitter[A]\n\n\n\u6b21\u306e\u8a08\u7b97\u306f\u578bA\u306enext\u3067\u3042\u308b\u3002\u4f8b\u3048\u3070\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u3001\u53d6\u5f97\u3067\u304d\u305f\u5834\u5408\u306f\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u3068\u3044\u3046\u51e6\u7406\u3092\u3053\u306e\u3088\u3046\u306b\u66f8\u304d\u305f\u3044\u3002\nFetch(\n  \"_yyu_\",\n  (fws: Future[WSResponse]) => {\n    val ws = Await.result(fws, Duration.Inf)\n    if (ws.status == 200)\n      Update(\"exist\", ())\n    else\n      Update(\"not exist\", ())\n  }\n)\n\n\u3042\u3068\u306f\u5404\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u51e6\u7406\u3092\u66f8\u3051\u3070\u3088\u3044\u3088\u3046\u306b\u601d\u3048\u308b\u3002\ndef twitter_interpreter[A](a: Twitter[A]) = a match {\n  case Fetch(user, next) =>\n    for {\n      res <- fetchUserByScreenName(user)\n    } yield twitter_interpreter(next(res))\n\n  case Update(status, next) =>\n    for {\n      _ <- updateStatus(status)\n    } yield twitter_interpreter(next)\n}\n\n\u3057\u304b\u3057\u3001\u5b9f\u306f\u3053\u308c\u306f\u4e0a\u624b\u304f\u3044\u304b\u306a\u3044\u3002\u306a\u305c\u306a\u3089Fetch\u3084Update\u306e\u6301\u3064next\u306e\u578b\u306fA\u3067\u3042\u3063\u3066Twitter[A]\u3067\u306f\u306a\u3044\u3002\u3067\u306fA\u3092Twitter[A]\u306b\u3059\u308c\u3070\u52d5\u304f\u304b\u3068\u3044\u3046\u3068\u3001\u305d\u3046\u3067\u3082\u306a\u3044\u3002\u3082\u3057next\u304cTwitter[A]\u3060\u3068\u3059\u308b\u3068\u3001Fetch\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3002\ncase class Fetch[A](screenName: String, next: WSResponse => Twitter[A]) extends Twitter[Twitter[A]]\n\n\u3053\u306e\u3088\u3046\u306bFetch\u306e\u578b\u304cTwitter[Twitter[A]]\u3068\u306a\u308a\u3001Twitter\u304c\u4e8c\u91cd\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u5927\u5909\u6271\u3044\u3065\u3089\u3044\u3002\n\u305d\u3053\u3067\u3001Dead-Simple Dependency Injection in Scala\u3067\u306fFree\u30e2\u30ca\u30c9\u3092\u4f7f\u3063\u3066\u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u3002\n\n\u30d5\u30a1\u30f3\u30af\u30bf\u30fc\u3068Free\u30e2\u30ca\u30c9\u3068\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30fc\nFree\u30e2\u30ca\u30c9\u306fTwitter[Twitter[A]]\u306e\u3088\u3046\u306a\u69cb\u9020\u3092Free[Twitter, A]\u3068\u3044\u3046Free\u30e2\u30ca\u30c9\u3078\u843d\u3059\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u4e00\u3064\u3067\u3042\u308b\u3002\u3053\u308c\u306f\u3001\u4f8b\u3048\u3070Twitter[Twitter[Twitter[Twitter[A]]]]\u306e\u3088\u3046\u306b\u3069\u308c\u3060\u3051\u30cd\u30b9\u30c8\u3057\u3066\u3044\u305f\u3068\u3057\u3066\u3082\u5168\u3066\u304cFree[Twitter, A]\u306b\u306a\u308b5\u3002\n\u3053\u306e\u3088\u3046\u306b\u4fbf\u5229\u306aFree\u30e2\u30ca\u30c9\u3060\u304c\u3001\u3053\u306e\u52b9\u80fd\u3092\u5f97\u308b\u305f\u3081\u306bFree\u30e2\u30ca\u30c9\u306f\u300cTwitter\u304c\u30d5\u30a1\u30f3\u30af\u30bf\u30fc\u3067\u3042\u308b\u300d\u3068\u3044\u3046\u6027\u8cea\u3092\u8981\u6c42\u3059\u308b\u3002\n\n\u30d5\u30a1\u30f3\u30af\u30bf\u30fc\n\u3042\u308b\u578bF\u304c\u30d5\u30a1\u30f3\u30af\u30bf\u30fc\u3067\u3042\u308b\u3068\u306f\u3001Twitter\u306f\u6b21\u306e\u3088\u3046\u306a\u578b\u3092\u6301\u3064\u95a2\u6570map\u3092\u5b9a\u7fa9\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\nFunctor.scala\ntrait Functor[F[_]] {\n  def map[A, B](a: F[A])(f: A => B): F[B]\n}\n\n\n\u3055\u3089\u306b\u3001\u95a2\u6570map\u306f\u6b21\u306e\u30d5\u30a1\u30f3\u30af\u30bf\u30fc\u5247\u306b\u5247\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\n\nmap\u306ef\u306bx => x\u3092\u5165\u308c\u3066\u751f\u6210\u3055\u308c\u305f\u3082\u306e\u304c\u3001\u5143\u306e\u5024\u3068\u7b49\u3057\u3044\n\n\nassert( t.map(x => x) == t )\n\n\n\u9069\u5f53\u306a\u95a2\u6570g\u3068h\u306b\u3064\u3044\u3066\u3001g\u3068h\u306e\u5408\u6210\u95a2\u6570\uff08x => g(h(x))\uff09\u3067map\u3057\u305f\u5024\u3068\u3001h\u3067map\u3057\u305f\u5024\u3092g\u3067map\u3057\u305f\u5024\u304c\u7b49\u3057\u3044\n\n\nassert( t.map(x => g(h(x))) == t.map(h).map(g) )\n\n\n\n\u3053\u306e\u3088\u3046\u306a\u5236\u7d04\u3092\u6301\u3064map\u3092Fetch\u3084Update\u306b\u5bfe\u3057\u3066\u3069\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308c\u3070\u3044\u3044\u3060\u308d\u3046\u304b\u3002\u5c11\u3005\u5929\u4e0b\u308a\u7684\u3060\u304c\u3001\u6b21\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u3088\u3044\u3002\nimplicit val twitterFunctor = new Functor[Twitter] {\n  def map[A, B](a: Twitter[A])(f: A => B) = a match {\n    case Fetch(screenName, next) => Fetch(screenName, x => f(next(x)))\n    case Update(status, next)    => Update(status, f(next))\n  }\n}\n\n\nFree\u30e2\u30ca\u30c9\nFree\u30e2\u30ca\u30c9Free\u3092\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\u3002\n\nFree.scala\ncase class Done[F[_]: Functor, A](a: A) extends Free[F, A]\ncase class More[F[_]: Functor, A](k: F[Free[F, A]]) extends Free[F, A]\n\nclass Free[F[_], A](implicit F: Functor[F]) {\n  def flatMap[B](f: A => Free[F, B]): Free[F, B] = this match {\n    case Done(a) => f(a)\n    case More(k) => More[F, B](F.map(k)(_ flatMap f))\n  }\n\n  def map[B](f: A => B): Free[F, B] =\n    flatMap(x => Done(f(x)))\n}\n\n\n\u305d\u3057\u3066\u3001DSL\u3092\u6b21\u306e\u3088\u3046\u306b\u4fee\u6b63\u3059\u308b\u3002\ndef fetch[A](screenName: String, f: WSResponse => Free[Twitter, A]): Free[Twitter, A] =\n  More(Fetch(screenName, f))\n\ndef update(status: String): Free[Twitter, Unit] =\n  More(Update(status, Done()))\n\n\u305d\u3057\u3066\u3001\u4f8b\u3048\u3070\u201c_yyu_\u201d\u3068\u3044\u3046\u30e6\u30fc\u30b6\u30fc\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u3001\u53d6\u5f97\u3067\u304d\u305f\u5834\u5408\u306f\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u3068\u3044\u3046\u51e6\u7406\u3092\u6b21\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3002\nfetch(\n  \"_yyu_\",\n  res =>\n    if (res.status == 200)\n      update(\"exist\")\n    else\n      update(\"not exist\")\n)\n\nDSL\u306e\u7d44\u307f\u7acb\u3066\u304c\u5b8c\u4e86\u3057\u305f\u306e\u3067\u3001\u6b21\u306f\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30fc\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30fc\nFree\u30e2\u30ca\u30c9\u3092\u4f7f\u3063\u305f\u3068\u3057\u3066\u3082\u3001\u666e\u901a\u306e\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30fc\u3068\u7279\u306b\u9055\u3044\u306f\u306a\u3044\u3002\n\nTwitterInterpreter.scala\ndef runTwitter[A](dsl: Free[Twitter, A], env: UseWSClient with UseOAuthCred): Unit = dsl match {\n  case Done(a) => ()\n  case More(Fetch(screenName, f)) =>\n    for {\n      fws <- fetchUserByScreenName(screenName).run(env)\n    } yield runTwitter(f(fws), env)\n  case More(Update(status, next)) =>\n    for {\n      _ <- updateStatus(status).run(env)\n    } yield runTwitter(next, env)\n}\n\n\n\u3055\u304d\u307b\u3069\u4f5c\u3063\u305fDSL\u3092\u6b21\u306e\u3088\u3046\u306b\u5b9f\u884c\u3059\u308b\u3002\nval dsl = fetch(\n  \"_yyu_\",\n  res =>\n    if (res.status == 200)\n      update(\"exist\")\n    else\n      update(\"not exist\")\n)\n\nrunTwitter(dsl, DefaultEnvironment.defaultEnvironment)\n\n\n\u307e\u3068\u3081\nReader\u30e2\u30ca\u30c9\u3068Free\u30e2\u30ca\u30c9\u3092\u4f7f\u3063\u3066\u4f9d\u5b58\u3092\u6ce8\u5165\u3059\u308bDSL\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u304c\u3001\u3053\u308c\u306b\u306fExpression Problem\u3068\u3044\u3046\u89e3\u6c7a\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u8ab2\u984c\u304c\u6b8b\u3063\u3066\u3044\u308b\u3002\u6b21\u306e\u6a5f\u4f1a\u306b\u306fExpression Problem\u306e\u89e3\u6c7a\u6cd5\u3068\u3057\u3066\u3001Inject\u3068Tagless Final\u306e\u4e8c\u3064\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3002\n8/5 \u8ffd\u8a18\uff1a\n\u6b21\u56de\u4f5c\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u2192 Free\u30e2\u30ca\u30c9\u3068Tagless Final\u306b\u3088\u308bDependency Injection\u306e\u305f\u3081\u306eDSL\n\n\n\n\n\u3053\u306eReader\u306f\u5358\u7d14\u5316\u306e\u305f\u3081\u5171\u5909\u3084\u53cd\u5909\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7701\u7565\u3057\u3066\u3044\u308b\u3002\u00a0\u21a9\n\n\n\u3053\u306erun\u306fapply\u3068\u5168\u304f\u540c\u3058\u3060\u304c\u3001Reader\u30e2\u30ca\u30c9\u306b\u74b0\u5883\u3092\u5165\u308c\u3066\u5b9f\u884c\u3059\u308b\u969b\u306b\u306frun\u3068\u3044\u3046\u3088\u3046\u306a\u540d\u524d\u306e\u95a2\u6570\u304c\u7528\u3044\u3089\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3001\u4eca\u56de\u306f\u6163\u7fd2\u3092\u5f15\u304d\u7d99\u3044\u3067\u3053\u3061\u3089\u306e\u30e1\u30bd\u30c3\u30c9\u3082\u7528\u610f\u3057\u305f\u3002run\u3082apply\u3082\u540c\u3058\u610f\u5473\u3067\u3042\u308b\u3002\u00a0\u21a9\n\n\n\u901a\u5e38\u300c\u74b0\u5883\u300d\u3068\u3044\u3046\u8a00\u8449\u306f\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3082\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3082\u542b\u3093\u3060\u3082\u306e\u3092\u6307\u3059\u3068\u601d\u3046\u304c\u3001\u3053\u306e\u8a18\u4e8b\u3067\u306fReader\u30e2\u30ca\u30c9\u304c\u63d0\u4f9b\u3059\u308b\u74b0\u5883\u3068\u3044\u3046\u610f\u5473\u3067\u306e\u307f\u3053\u306e\u8a00\u8449\u3092\u4f7f\u3046\u3053\u3068\u306b\u3059\u308b\u3002\u00a0\u21a9\n\n\n\u4eca\u56de\u306e\u4f8b\u3067\u306f\u5408\u6210\u3059\u308b\u610f\u5473\u306f\u5168\u304f\u306a\u3044\u304c\u2026\u2026\u3002\u00a0\u21a9\n\n\nThe Perfect Insider\u00a0\u21a9\n\n\n\n[Dead-Simple Dependency Injection in Scala](https://speakerdeck.com/marakana/dead-simple-dependency-injection-in-scala)\u3068\u3044\u3046\u767a\u8868\u3067\u3001Dependency Injection\uff08\u4f9d\u5b58\u306e\u6ce8\u5165\uff09\u3092[Reader\u30e2\u30ca\u30c9](http://itpro.nikkeibp.co.jp/article/COLUMN/20090303/325807/)\u306a\u3069\u3092\u7528\u3044\u3066\u884c\u3046\u3068\u3044\u3046\u6280\u8853\u304c\u3042\u3063\u305f\u3002\u4e0b\u8a18\u304c\u305d\u306e\u767a\u8868\u3067\u3042\u308b\u3002\n\n[![](http://img.youtube.com/vi/ZasXwtTRkio/0.jpg)](https://www.youtube.com/watch?v=ZasXwtTRkio)\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u307e\u305a\u3001Dependency Injection\u306b\u3064\u3044\u3066\u306e\u8aac\u660e\u3068\u3001Reader\u30e2\u30ca\u30c9\u306b\u3064\u3044\u3066\u306e\u8aac\u660e\u3092\u884c\u3044\u3001\u6b21\u306bReader\u30e2\u30ca\u30c9\u3092\u4f7f\u3063\u305fDependency Injection\u306b\u3064\u3044\u3066\u8ff0\u3079\u3066\u3001[Free\u30e2\u30ca\u30c9](http://d.hatena.ne.jp/fumiexcel/20121111/1352614885)\u3092\u7528\u3044\u3066\u5c0f\u3055\u306a[DSL](https://ja.wikipedia.org/wiki/%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E5%9B%BA%E6%9C%89%E8%A8%80%E8%AA%9E)\u3092\u4f5c\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u7d39\u4ecb\u3059\u308b\u3002\n\u3053\u306e\u8a18\u4e8b\u306f\u30e2\u30ca\u30c9\u3084Dependency Injection\u306a\u3069\u306b\u95a2\u3059\u308b\u524d\u63d0\u77e5\u8b58\u304c\u306a\u304f\u3066\u3082\u3042\u308b\u7a0b\u5ea6\u8aad\u3081\u308b\u3088\u3046\u306b\u610f\u56f3\u3057\u3066\u3044\u308b\u304c\u3001Scala\u306e\u6587\u6cd5\u7684\u306a\u77e5\u8b58\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u3002\u307e\u305f\u3001\u3082\u3057\u8aac\u660e\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u70b9\u3084\u6587\u7ae0\u306e\u610f\u56f3\u304c\u5206\u304b\u308a\u306b\u304f\u3044\u90e8\u5206\u304c\u3042\u308c\u3070\u3001\u6c17\u8efd\u306b\u30b3\u30e1\u30f3\u30c8\u306a\u3069\u3067\u6307\u6458\u3057\u3066\u6b32\u3057\u3044\u3002\n\n> \u6ce8\u610f\uff1a\n> \u8a18\u4e8b\u306e\u4e2d\u306b\u3042\u308b\u30b3\u30fc\u30c9\u306f\u8aad\u307f\u3084\u3059\u3055\u306e\u305f\u3081\u306b`import`\u306a\u3069\u3092\u7701\u7565\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u306e\u307e\u307e\u3067\u306f\u52d5\u304b\u306a\u3044\u3002\u52d5\u304b\u3057\u305f\u3044\u65b9\u306f[Github\u306e\u30ea\u30dd\u30b8\u30c8\u30ea](https://github.com/yoshimuraYuu/DIwithTaglessFinal)\u3092\u4f7f\u3046\u3068\u3088\u3044\u3002\n\n# Reader\u30e2\u30ca\u30c9\u3068Dependency Injection\n\n\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046\u306bTwitter\u304b\u3089\u60c5\u5831\u3092\u53d6\u3063\u3066\u304d\u305f\u308a\u3001\u30c4\u30a4\u30fc\u30c8\u3092\u6295\u7a3f\u3059\u308b\u95a2\u6570\u304c\u3042\u308b\u3068\u3059\u308b\u3002\n\n```scala:TwitterRepository.scala\nobject TwitterRepository {\n  val config = new NingAsyncHttpClientConfigBuilder(DefaultWSClientConfig()).build()\n  val builder = new AsyncHttpClientConfig.Builder(config)\n  val client = new NingWSClient(builder.build)\n\n  val key   = ConsumerKey(\n    \"key\",\n    \"secret\"\n  )\n  val token = RequestToken(\n    \"token\",\n    \"secret\"\n  )\n\n  def fetchUserByScreenName(screenName: String): Future[WSResponse] =\n    client.url(\"https://api.twitter.com/1.1/users/show.json\")\n      .withQueryString(\"screen_name\" -> screenName)\n      .sign(OAuthCalculator(key, token))\n      .get()\n\n  def updateStatus(status: String): Future[WSResponse] =\n    client.url(\"https://api.twitter.com/1.1/statuses/update.json\")\n      .sign(OAuthCalculator(key, token))\n      .post(Map(\"status\" -> Seq(status)))\n}\n```\n\n\u3053\u308c\u3067\u52d5\u304d\u306f\u3059\u308b\u304c\u3001\u5916\u90e8\u3068\u901a\u4fe1\u3059\u308b\u90e8\u5206\uff08`client`\uff09\u3084Twitter\u306e\u9375\uff08`key`\uff09\u3084\u30c8\u30fc\u30af\u30f3\uff08`token`\uff09\u304c\u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u5225\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u306b\u5dee\u3057\u63db\u3048\u305f\u308a\u3001\u30c6\u30b9\u30c8\u3059\u308b\u969b\u306b\u4e0d\u4fbf\u306a\u3053\u3068\u306b\u306a\u308b\u3002\n\u305d\u3053\u3067**Reader\u30e2\u30ca\u30c9**\u3092\u4f7f\u3063\u3066\u5916\u304b\u3089\u4f9d\u5b58\u3092\u6ce8\u5165\u3057\u3088\u3046\u3068\u3044\u3046\u306e\u304cDead-Simple Dependency Injection in Scala\u306a\u3069\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u624b\u6cd5\u3067\u3042\u308b\u3002\n\n## Reader\u30e2\u30ca\u30c9\n\n\u307e\u305a\u3001Reader\u30e2\u30ca\u30c9 `Reader`\u3092\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b[^covariance]\u3002\n\n[^covariance]: \u3053\u306e`Reader`\u306f\u5358\u7d14\u5316\u306e\u305f\u3081\u5171\u5909\u3084\u53cd\u5909\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7701\u7565\u3057\u3066\u3044\u308b\u3002\n\n```scala:Reader.scala\ncase class Reader[E, A](g: E => A) {\n  def apply(e: E) = g(e)\n  def run: E => A = apply\n  def map[B](f: A => B): Reader[E, B] = Reader(e => f(g(e)))\n  def flatMap[B](f: A => Reader[E, B]): Reader[E, B] = Reader(e => f(g(e))(e))\n}\n\nobject Reader {\n  def pure[E, A](a: A): Reader[E, A] = Reader(e => a)\n  def ask[E]: Reader[E, E] = Reader(identity)\n  def local[E, A](f: E => E, c: Reader[E, A]): Reader[E, A] = Reader(e => c(f(e)))\n  def reader[E, A](f: E => A): Reader[E, A] = Reader(f)\n}\n```\n\n`Reader`\u306b\u3064\u3044\u3066\u5168\u3066\u3092\u8aac\u660e\u3059\u308b\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u76f4\u611f\u7684\u306a\u3053\u3068\u3060\u3051\u3092\u8aac\u660e\u3059\u308b\u3002\u307e\u305a\u3001`Reader`\u306e`map`\u3068`flatMap`\u306b\u6ce8\u76ee\u3059\u308b\u3068\u3001\u4eca\u306e`Reader`\u304c\u6301\u3063\u3066\u3044\u308b\u95a2\u6570`g`\u306b`e`\u3092\u4e0e\u3048\u3066\u5b9f\u884c\u3057\u3001\u305d\u308c\u3092\u4f7f\u3063\u3066`f`\u3092\u5b9f\u884c\u3059\u308b\u3068\u3044\u3046\u64cd\u4f5c\u3092\u3059\u308b\u95a2\u6570\u3092\u6301\u3064\u65b0\u3057\u3044`Reader`\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u3002\u305f\u3060\u3057\u3001`map`\u3084`flatMap`\u306e\u969b\u306b\u306f`f`\u3068`g`\u3092\u7d44\u5408\u305b\u308b\u3060\u3051\u3067\u3001\u5b9f\u969b\u306b\u5b9f\u884c\u3059\u308b\u306e\u306f`apply`\u3082\u3057\u304f\u306f`run`[^why_run]\u3092\u7528\u3044\u3066\u5f15\u6570`e`\u306b\u5024\u3092\u6295\u5165\u3057\u305f\u6642\u306b\u521d\u3081\u3066\u5168\u3066\u306e\u8a08\u7b97\u304c\u5b9f\u884c\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\u6b21\u306b[\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8](http://www.ne.jp/asahi/hishidama/home/tech/scala/object.html#h_companion_object)`Reader`\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3082\u306e\u306b\u3064\u3044\u3066\u8aac\u660e\u3059\u308b\u3002\n\n[^why_run]: \u3053\u306e`run`\u306f`apply`\u3068\u5168\u304f\u540c\u3058\u3060\u304c\u3001Reader\u30e2\u30ca\u30c9\u306b\u74b0\u5883\u3092\u5165\u308c\u3066\u5b9f\u884c\u3059\u308b\u969b\u306b\u306f`run`\u3068\u3044\u3046\u3088\u3046\u306a\u540d\u524d\u306e\u95a2\u6570\u304c\u7528\u3044\u3089\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3001\u4eca\u56de\u306f\u6163\u7fd2\u3092\u5f15\u304d\u7d99\u3044\u3067\u3053\u3061\u3089\u306e\u30e1\u30bd\u30c3\u30c9\u3082\u7528\u610f\u3057\u305f\u3002`run`\u3082`apply`\u3082\u540c\u3058\u610f\u5473\u3067\u3042\u308b\u3002\n\n<dl>\n  <dt><code>pure</code></dt>\n  <dd>\u4efb\u610f\u306e\u5024\u3092<code>Reader</code>\u306b\u3059\u308b</dd>\n  <dt><code>ask</code></dt>\n  <dd>\u74b0\u5883<code>e</code>\u3092\u53d6\u5f97\u3059\u308b</dd>\n  <dt><code>local</code></dt>\n  <dd>\u74b0\u5883<code>e</code>\u3092\u66f8\u304d\u63db\u3048\u308b</dd>\n  <dt><code>reader</code></dt>\n  <dd>\u95a2\u6570\u3092<code>Reader</code>\u306b\u3059\u308b</dd>\n</dl>\n\n\u3053\u308c\u3089\u306e\u8aac\u660e\u306f\u4eca\u306f\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u5f8c\u3067\u5b9f\u969b\u306b\u4f7f\u3046\u969b\u306b\u5177\u4f53\u7684\u306a\u4f8b\u3068\u3057\u3066\u8868\u308f\u308c\u308b\u306e\u3067\u5fc3\u914d\u306a\u3044\u3002\n\n## Reader\u30e2\u30ca\u30c9 vs \u95a2\u6570\n\n\u4e00\u898b\u3059\u308b\u3068Reader\u30e2\u30ca\u30c9\u306f\u95a2\u6570\uff08\u30e9\u30e0\u30c0\u5f0f\uff09\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3088\u3046\u306b\u601d\u3048\u308b\u3002\u3057\u304b\u3057\u3001\u5927\u304d\u306a\u9055\u3044\u3068\u3057\u3066\u3001Reader\u30e2\u30ca\u30c9\u306f\u81ea\u8eab\u304c\u6301\u3064\u95a2\u6570\u306b\u5171\u901a\u306e**\u74b0\u5883**\u3068\u3044\u3046\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3067\u3082\u306a\u304f\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3067\u3082\u306a\u3044\u7b2c\u4e09\u306e\u5834\u6240\u3092\u63d0\u4f9b\u3059\u308b[^environment]\u3002\u95a2\u6570\u306e\u4e2d\u304b\u3089\u4f55\u304b\u60c5\u5831\u3092\u53c2\u7167\u3057\u305f\u3044\u5834\u5408\u3001\u901a\u5e38\u306f\u6b21\u306e\u4e8c\u629e\u306b\u306a\u308b\u3002\n\n- \u5f15\u6570\u3067\u6e21\u3059\n- \u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u304b\u3089\u8aad\u307f\u51fa\u3059\n\n\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3092\u7528\u3044\u308b\u3053\u3068\u304c\u4e0d\u5473\u3044\u3068\u3044\u3046\u306e\u306f\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u308b\u304c\u3001\u304b\u3068\u3044\u3063\u3066\u5f15\u6570\u3092\u4f7f\u3046\u30a2\u30d7\u30ed\u30fc\u30c1\u3082\u3001\u6b21\u306e\u3088\u3046\u306b\u95a2\u6570\u304c\u3044\u304f\u3064\u3082\u9023\u306a\u3063\u305f\u72b6\u6cc1\u3092\u8003\u3048\u308b\u3068\u554f\u984c\u304c\u6d6e\u304d\u5f6b\u308a\u306b\u306a\u308b\u3002\n\n```scala\ndef main(args: Array[String]) = {\n  ???\n  level1(args[0])\n}\n\ndef level1(d: String) = {\n  ???  // \u3053\u3053\u3067\u306f d \u3092\u4f7f\u308f\u306a\u3044\n  level2(d)\n}\n\ndef level2(d: String) = {\n  ???  // \u3053\u3053\u3067\u306f d \u3092\u4f7f\u308f\u306a\u3044\n  need_arg(d)\n}\n\ndef need_arg(d: String) =\n  ??? // d \u3092\u5fc5\u8981\u3068\u3059\u308b\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3042\u308b\u95a2\u6570\u304c\u4f9d\u5b58\u3057\u3066\u308b\u95a2\u6570\u306e\u4f9d\u5b58\u3092\u308f\u3056\u308f\u3056\u660e\u793a\u7684\u306b\u5f15\u6570\u3067\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001\u5f15\u6570\u304c\u5897\u3048\u3066\u6df7\u4e71\u3057\u305f\u308a\u3001\u30b3\u30fc\u30c9\u306e\u898b\u901a\u3057\u304c\u60aa\u304f\u306a\u3063\u305f\u308a\u3059\u308b\u3002\u307e\u305f\u3001\u4f9d\u5b58\u304c\u5897\u3048\u305f\u969b\u306b\u95a2\u4fc2\u3059\u308b\u95a2\u6570\u306e\u5f15\u6570\u3092\u5168\u3066\u5897\u3084\u3059\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u4e00\u65b9\u3067\u3001Reader\u30e2\u30ca\u30c9\u306f\u5171\u901a\u306b\u4f7f\u3046\u60c5\u5831\u3092\u5f15\u6570\u3067\u3082\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3067\u3082\u306a\u3044\u7b2c\u4e09\u306e\u5834\u6240\uff08\u74b0\u5883\uff09\u306b\u5165\u308c\u308b\u3053\u3068\u3067\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u5f15\u6570\u3067\u4e00\u9577\u4e00\u77ed\u3060\u3068\u601d\u308f\u308c\u3066\u3044\u305f\u554f\u984c\u3092\u30b9\u30de\u30fc\u30c8\u306b\u89e3\u6c7a\u3059\u308b\u3002\n\n[^environment]: \u901a\u5e38\u300c\u74b0\u5883\u300d\u3068\u3044\u3046\u8a00\u8449\u306f\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3082\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3082\u542b\u3093\u3060\u3082\u306e\u3092\u6307\u3059\u3068\u601d\u3046\u304c\u3001\u3053\u306e\u8a18\u4e8b\u3067\u306fReader\u30e2\u30ca\u30c9\u304c\u63d0\u4f9b\u3059\u308b\u74b0\u5883\u3068\u3044\u3046\u610f\u5473\u3067\u306e\u307f\u3053\u306e\u8a00\u8449\u3092\u4f7f\u3046\u3053\u3068\u306b\u3059\u308b\u3002\n\n## Dependency Injection\n\n\u5177\u4f53\u7684\u306a\u4f8b\u3067\u3001 Reader\u30e2\u30ca\u30c9\u3092\u7528\u3044\u305fDependency Injection\u304c\u3069\u306e\u3088\u3046\u306b\u884c\u308f\u308c\u308b\u306e\u3060\u308d\u3046\u304b\u3002\n\n\u307e\u305a\u3001\u4f9d\u5b58\u3092\u6301\u3064\u3053\u3068\u3092\u8868\u3059\u30c8\u30ec\u30a4\u30c8\u3092\u7528\u610f\u3059\u308b\u3002\n\n```scala:UseWSClient.scala\ntrait UseWSClient {\n  val client: WSClient\n}\n```\n\n```scala:UseOAuthCred.scala\ntrait UseOAuthCred {\n  val cred: OAuthCalculator\n}\n```\n\n`TwitterRepository`\u3092\u6539\u9020\u3057\u3066\u3001Reader\u30e2\u30ca\u30c9\u3092\u8fd4\u3059\u3088\u3046\u306b\u3059\u308b\u3002\u307e\u305f\u3001\u74b0\u5883\u3068\u3057\u3066\u5148\u7a0b\u5b9a\u7fa9\u3057\u305f\u30c8\u30ec\u30a4\u30c8`UseWSClient`\u3068`UseOAuthCred`\u3092`with`\u3067\u7d50\u5408\u3057\u305f\u3082\u306e\u3092\u7528\u3044\u308b\u3002\n\n```scala:TwitterRepositoryDI.scala\nobject TwitterRepositoryDI {\n  def fetchUserByScreenName(screenName: String): Reader[UseWSClient with UseOAuthCred, Future[WSResponse]] =\n    reader(env =>\n      env.client.url(\"https://api.twitter.com/1.1/users/show.json\")\n        .withQueryString(\"screen_name\" -> screenName)\n        .sign(env.cred)\n        .get())\n\n  def updateStatus(status: String): Reader[UseWSClient with UseOAuthCred, Future[WSResponse]] =\n    reader(env =>\n      env.client.url(\"https://api.twitter.com/1.1/statuses/update.json\")\n        .sign(env.cred)\n        .post(Map(\"status\" -> Seq(status))))\n\n}\n```\n\n\u305d\u3057\u3066\u3001\u4f9d\u5b58\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f\u5834\u6240\u3092\u4f5c\u308b\u3002\n\n```scala:DefaultEnvironment.scala\nobject DefaultEnvironment {\n  val config  = new NingAsyncHttpClientConfigBuilder(DefaultWSClientConfig()).build()\n  val builder = new AsyncHttpClientConfig.Builder(config)\n  val c       = new NingWSClient(builder.build)\n\n  val defaultEnvironment = new UseWSClient with UseOAuthCred {\n    val client = c\n    val cred = OAuthCalculator(\n      ConsumerKey(\n        \"key\",\n        \"secret\"\n      ),\n      RequestToken(\n        \"token\",\n        \"secret\"\n      )\n    )\n  }\n}\n```\n\n\u6700\u7d42\u7684\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9f\u884c\u3059\u308b\u3002\n\n```scala\nfetchUserByScreenName(\"_yyu_\").run(DefaultEnvironment.defaultEnvironment)\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3001Reader\u30e2\u30ca\u30c9\u306e\u74b0\u5883\u3068\u3057\u3066\u4f9d\u5b58\u3092\u6ce8\u5165\u3067\u304d\u308b\u3046\u3048\u3001\u3053\u308c\u3089\u306eReader\u3092\u5408\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b[^why_compose]\u3002\n\n```scala\n(for {\n  _ <- fetchUserByScreenName(\"_yyu_\")\n  _ <- updateStatus(\"good\")\n} yield () ).run(DefaultEnvironment.defaultEnvironment)\n```\n\n[^why_compose]: \u4eca\u56de\u306e\u4f8b\u3067\u306f\u5408\u6210\u3059\u308b\u610f\u5473\u306f\u5168\u304f\u306a\u3044\u304c\u2026\u2026\u3002\n\n## \u4f9d\u5b58\u306e\u9078\u629e\n\n\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046`Future[Boolean]`\u3092\u8fd4\u3059\u3088\u3046\u306a\u4f8b\u3068\u3001\u305d\u306e\u7d50\u679c\u306b\u5fdc\u3058\u3066\u3069\u306e\u4f9d\u5b58\u3092\u4f7f\u3046\u306e\u304b\u3092\u9078\u629e\u3057\u3066\u6ce8\u5165\u3059\u308b\u4f8b\u3092\u8003\u3048\u3066\u307f\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\u307e\u305a\u306f\u6b21\u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u7528\u610f\u3059\u308b\u3002\n\n```scala:TwitterRepositoryDI.scala\ndef existUserWithScreenName(screenName: String): Reader[UseWSClient with UseOAuthCred, Future[Boolean]] =\n  reader(env =>\n    for {\n      res <- env.client.url(\"https://api.twitter.com/1.1/users/show.json\")\n               .withQueryString(\"screen_name\" -> screenName)\n               .sign(env.cred)\n               .get()\n    } yield res.status == 200\n  )\n```\n\n\u3053\u306e\u95a2\u6570\u306f`screenName`\u3092\u6301\u3064\u30e6\u30fc\u30b6\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u3067\u3042\u308b\u3002\n\n\u6b21\u306b`defaultEnvironment`\u3068\u306f\u5225\u306e\u4f9d\u5b58\u3092\u7528\u610f\u3059\u308b\u3002\n\n```scala:DefaultEnvironment.scala\nval adminEnvironment = new UseWSClient with UseOAuthCred {\n  val client = c\n  val cred = OAuthCalculator(\n    ConsumerKey(\n      \"key\",\n      \"secret\"\n    ),\n    RequestToken(\n      \"token\",\n      \"secret\"\n    )\n  )\n}\n```\n\n\u305d\u3057\u3066\u3001\u74b0\u5883\u3092\u5909\u66f4\u3057\u3066Reader\u30e2\u30ca\u30c9\u3092\u5b9f\u884c\u3059\u308b`local`\u3092\u4f7f\u3063\u3066\u6b21\u306e\u3088\u3046\u306b\u3059\u308b\u3002\n\n```scala\n(for {\n   fb <- existUserWithScreenName(\"_yyu_\")\n   _  <- local(\n           (e: UseWSClient with UseOAuthCred) =>\n             if (Await.result(fb, Duration.Inf))\n               DefaultEnvironment.adminEnvironment\n             else\n               e,\n           updateStatus(\"test\")\n         )\n} yield () ).run(DefaultEnvironment.defaultEnvironment)\n```\n\n\u3053\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001\u201c\\_yyu\\_\u201d\u3068\u3044\u3046\u30e6\u30fc\u30b6\u30fc\u304c\u5b58\u5728\u3059\u308c\u3070\u74b0\u5883\u3092`adminEnvironment`\u3078\u5909\u66f4\u3057\u3066\u304b\u3089`updateStatus`\u3092\u5b9f\u884c\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u3070\u901a\u5e38\u306e\u74b0\u5883\u3067\u5b9f\u884c\u3059\u308b\u3002\n\u3053\u306e\u3088\u3046\u306b\u3001\u3053\u306e\u65b9\u6cd5\u3067\u306f\u4f9d\u5b58\u3092\u5b9f\u884c\u6642\u306e\u5024\u306b\u3088\u3063\u3066\u5207\u308a\u63db\u3048\u308b\u3068\u3044\u3063\u305f\u67d4\u8edf\u306a\u51e6\u7406\u304c\u3067\u304d\u308b\u3002\n\n# DSL\u3068Free\u30e2\u30ca\u30c9\n\n\u8a08\u7b97\u3092\u5408\u6210\u3057\u305f\u308a\u3057\u3064\u3064\u3001\u4f9d\u5b58\u3092\u6ce8\u5165\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\u3053\u308c\u3092\u4f7f\u3063\u3066Twitter\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306e\u30df\u30cb\u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9e\uff08DSL\uff09\u3092\u4f5c\u308d\u3046\u3068\u3044\u3046\u306e\u304c\u3001Dead-Simple Dependency Injection in Scala\u306e\u5f8c\u534a\u30d1\u30fc\u30c8\u306b\u306a\u308b\u3002\n\n## \u5c0f\u3055\u306aDSL\n\n\u3053\u306eTwitter\u306e\u4f8b\u3067\u306f\u6b21\u306e\u3088\u3046\u306b\u3001\u300c\u6b21\u306e\u8a08\u7b97\u300d\u3092\u6301\u3066\u308b\u3088\u3046\u306a\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u3068\u30c8\u30ec\u30a4\u30c8\u3092\u7528\u610f\u3059\u308b\u3002\n\n```scala:Twitter.scala\nsealed trait Twitter[A]\n\ncase class Fetch[A](screenName: String, next: WSResponse => A) extends Twitter[A]\ncase class Update[A](status: String, next: A) extends Twitter[A]\n```\n\n\u6b21\u306e\u8a08\u7b97\u306f\u578b`A`\u306e`next`\u3067\u3042\u308b\u3002\u4f8b\u3048\u3070\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u3001\u53d6\u5f97\u3067\u304d\u305f\u5834\u5408\u306f\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u3068\u3044\u3046\u51e6\u7406\u3092\u3053\u306e\u3088\u3046\u306b\u66f8\u304d\u305f\u3044\u3002\n\n```scala\nFetch(\n  \"_yyu_\",\n  (fws: Future[WSResponse]) => {\n    val ws = Await.result(fws, Duration.Inf)\n    if (ws.status == 200)\n      Update(\"exist\", ())\n    else\n      Update(\"not exist\", ())\n  }\n)\n```\n\n\u3042\u3068\u306f\u5404\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u51e6\u7406\u3092\u66f8\u3051\u3070\u3088\u3044\u3088\u3046\u306b\u601d\u3048\u308b\u3002\n\n```scala\ndef twitter_interpreter[A](a: Twitter[A]) = a match {\n  case Fetch(user, next) =>\n    for {\n      res <- fetchUserByScreenName(user)\n    } yield twitter_interpreter(next(res))\n\n  case Update(status, next) =>\n    for {\n      _ <- updateStatus(status)\n    } yield twitter_interpreter(next)\n}\n```\n\n\u3057\u304b\u3057\u3001\u5b9f\u306f\u3053\u308c\u306f\u4e0a\u624b\u304f\u3044\u304b\u306a\u3044\u3002\u306a\u305c\u306a\u3089`Fetch`\u3084`Update`\u306e\u6301\u3064`next`\u306e\u578b\u306f`A`\u3067\u3042\u3063\u3066`Twitter[A]`\u3067\u306f\u306a\u3044\u3002\u3067\u306f`A`\u3092`Twitter[A]`\u306b\u3059\u308c\u3070\u52d5\u304f\u304b\u3068\u3044\u3046\u3068\u3001\u305d\u3046\u3067\u3082\u306a\u3044\u3002\u3082\u3057`next`\u304c`Twitter[A]`\u3060\u3068\u3059\u308b\u3068\u3001`Fetch`\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```scala\ncase class Fetch[A](screenName: String, next: WSResponse => Twitter[A]) extends Twitter[Twitter[A]]\n```\n\n\u3053\u306e\u3088\u3046\u306b`Fetch`\u306e\u578b\u304c`Twitter[Twitter[A]]`\u3068\u306a\u308a\u3001`Twitter`\u304c\u4e8c\u91cd\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u5927\u5909\u6271\u3044\u3065\u3089\u3044\u3002\n\u305d\u3053\u3067\u3001Dead-Simple Dependency Injection in Scala\u3067\u306f**Free\u30e2\u30ca\u30c9**\u3092\u4f7f\u3063\u3066\u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u3002\n\n## \u30d5\u30a1\u30f3\u30af\u30bf\u30fc\u3068Free\u30e2\u30ca\u30c9\u3068\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30fc\n\nFree\u30e2\u30ca\u30c9\u306f`Twitter[Twitter[A]]`\u306e\u3088\u3046\u306a\u69cb\u9020\u3092`Free[Twitter, A]`\u3068\u3044\u3046Free\u30e2\u30ca\u30c9\u3078\u843d\u3059\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u4e00\u3064\u3067\u3042\u308b\u3002\u3053\u308c\u306f\u3001\u4f8b\u3048\u3070`Twitter[Twitter[Twitter[Twitter[A]]]]`\u306e\u3088\u3046\u306b\u3069\u308c\u3060\u3051\u30cd\u30b9\u30c8\u3057\u3066\u3044\u305f\u3068\u3057\u3066\u3082\u5168\u3066\u304c`Free[Twitter, A]`\u306b\u306a\u308b[^the_perfect_insider]\u3002\n\u3053\u306e\u3088\u3046\u306b\u4fbf\u5229\u306aFree\u30e2\u30ca\u30c9\u3060\u304c\u3001\u3053\u306e\u52b9\u80fd\u3092\u5f97\u308b\u305f\u3081\u306bFree\u30e2\u30ca\u30c9\u306f\u300c`Twitter`\u304c**\u30d5\u30a1\u30f3\u30af\u30bf\u30fc**\u3067\u3042\u308b\u300d\u3068\u3044\u3046\u6027\u8cea\u3092\u8981\u6c42\u3059\u308b\u3002\n\n[^the_perfect_insider]: [The Perfect Insider](http://www.amazon.co.jp/dp/4062639246)\n\n### \u30d5\u30a1\u30f3\u30af\u30bf\u30fc\n\n\u3042\u308b\u578b`F`\u304c\u30d5\u30a1\u30f3\u30af\u30bf\u30fc\u3067\u3042\u308b\u3068\u306f\u3001`Twitter`\u306f\u6b21\u306e\u3088\u3046\u306a\u578b\u3092\u6301\u3064\u95a2\u6570`map`\u3092\u5b9a\u7fa9\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\n```scala:Functor.scala\ntrait Functor[F[_]] {\n  def map[A, B](a: F[A])(f: A => B): F[B]\n}\n```\n\n\u3055\u3089\u306b\u3001\u95a2\u6570`map`\u306f\u6b21\u306e**\u30d5\u30a1\u30f3\u30af\u30bf\u30fc\u5247**\u306b\u5247\u3063\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\n1. `map`\u306e`f`\u306b`x => x`\u3092\u5165\u308c\u3066\u751f\u6210\u3055\u308c\u305f\u3082\u306e\u304c\u3001\u5143\u306e\u5024\u3068\u7b49\u3057\u3044\n    - `assert( t.map(x => x) == t )`\n2. \u9069\u5f53\u306a\u95a2\u6570`g`\u3068`h`\u306b\u3064\u3044\u3066\u3001`g`\u3068`h`\u306e\u5408\u6210\u95a2\u6570\uff08`x => g(h(x))`\uff09\u3067`map`\u3057\u305f\u5024\u3068\u3001`h`\u3067`map`\u3057\u305f\u5024\u3092`g`\u3067`map`\u3057\u305f\u5024\u304c\u7b49\u3057\u3044\n    - `assert( t.map(x => g(h(x))) == t.map(h).map(g) )`\n\n\u3053\u306e\u3088\u3046\u306a\u5236\u7d04\u3092\u6301\u3064`map`\u3092`Fetch`\u3084`Update`\u306b\u5bfe\u3057\u3066\u3069\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308c\u3070\u3044\u3044\u3060\u308d\u3046\u304b\u3002\u5c11\u3005\u5929\u4e0b\u308a\u7684\u3060\u304c\u3001\u6b21\u306e\u3088\u3046\u306b\u3059\u308c\u3070\u3088\u3044\u3002\n\n```scala\nimplicit val twitterFunctor = new Functor[Twitter] {\n  def map[A, B](a: Twitter[A])(f: A => B) = a match {\n    case Fetch(screenName, next) => Fetch(screenName, x => f(next(x)))\n    case Update(status, next)    => Update(status, f(next))\n  }\n}\n```\n\n### Free\u30e2\u30ca\u30c9\n\nFree\u30e2\u30ca\u30c9`Free`\u3092\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\u3002\n\n```scala:Free.scala\ncase class Done[F[_]: Functor, A](a: A) extends Free[F, A]\ncase class More[F[_]: Functor, A](k: F[Free[F, A]]) extends Free[F, A]\n\nclass Free[F[_], A](implicit F: Functor[F]) {\n  def flatMap[B](f: A => Free[F, B]): Free[F, B] = this match {\n    case Done(a) => f(a)\n    case More(k) => More[F, B](F.map(k)(_ flatMap f))\n  }\n\n  def map[B](f: A => B): Free[F, B] =\n    flatMap(x => Done(f(x)))\n}\n```\n\n\u305d\u3057\u3066\u3001DSL\u3092\u6b21\u306e\u3088\u3046\u306b\u4fee\u6b63\u3059\u308b\u3002\n\n```scala\ndef fetch[A](screenName: String, f: WSResponse => Free[Twitter, A]): Free[Twitter, A] =\n  More(Fetch(screenName, f))\n\ndef update(status: String): Free[Twitter, Unit] =\n  More(Update(status, Done()))\n```\n\n\u305d\u3057\u3066\u3001\u4f8b\u3048\u3070\u201c\\_yyu\\_\u201d\u3068\u3044\u3046\u30e6\u30fc\u30b6\u30fc\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u3001\u53d6\u5f97\u3067\u304d\u305f\u5834\u5408\u306f\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u3068\u3044\u3046\u51e6\u7406\u3092\u6b21\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3002\n\n```scala\nfetch(\n  \"_yyu_\",\n  res =>\n    if (res.status == 200)\n      update(\"exist\")\n    else\n      update(\"not exist\")\n)\n```\n\nDSL\u306e\u7d44\u307f\u7acb\u3066\u304c\u5b8c\u4e86\u3057\u305f\u306e\u3067\u3001\u6b21\u306f\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b**\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30fc**\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n### \u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30fc\n\nFree\u30e2\u30ca\u30c9\u3092\u4f7f\u3063\u305f\u3068\u3057\u3066\u3082\u3001\u666e\u901a\u306e\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30fc\u3068\u7279\u306b\u9055\u3044\u306f\u306a\u3044\u3002\n\n```scala:TwitterInterpreter.scala\ndef runTwitter[A](dsl: Free[Twitter, A], env: UseWSClient with UseOAuthCred): Unit = dsl match {\n  case Done(a) => ()\n  case More(Fetch(screenName, f)) =>\n    for {\n      fws <- fetchUserByScreenName(screenName).run(env)\n    } yield runTwitter(f(fws), env)\n  case More(Update(status, next)) =>\n    for {\n      _ <- updateStatus(status).run(env)\n    } yield runTwitter(next, env)\n}\n```\n\n\u3055\u304d\u307b\u3069\u4f5c\u3063\u305fDSL\u3092\u6b21\u306e\u3088\u3046\u306b\u5b9f\u884c\u3059\u308b\u3002\n\n```scala\nval dsl = fetch(\n  \"_yyu_\",\n  res =>\n    if (res.status == 200)\n      update(\"exist\")\n    else\n      update(\"not exist\")\n)\n\nrunTwitter(dsl, DefaultEnvironment.defaultEnvironment)\n```\n\n# \u307e\u3068\u3081\n\nReader\u30e2\u30ca\u30c9\u3068Free\u30e2\u30ca\u30c9\u3092\u4f7f\u3063\u3066\u4f9d\u5b58\u3092\u6ce8\u5165\u3059\u308bDSL\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u304c\u3001\u3053\u308c\u306b\u306f**Expression Problem**\u3068\u3044\u3046\u89e3\u6c7a\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u8ab2\u984c\u304c\u6b8b\u3063\u3066\u3044\u308b\u3002\u6b21\u306e\u6a5f\u4f1a\u306b\u306fExpression Problem\u306e\u89e3\u6c7a\u6cd5\u3068\u3057\u3066\u3001**Inject**\u3068**Tagless Final**\u306e\u4e8c\u3064\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3002\n\n8/5 \u8ffd\u8a18\uff1a\n\u6b21\u56de\u4f5c\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u2192 [Free\u30e2\u30ca\u30c9\u3068Tagless Final\u306b\u3088\u308bDependency Injection\u306e\u305f\u3081\u306eDSL](http://qiita.com/yyu/items/377513f17fec536b562e)\n", "tags": ["Scala", "DependencyInjection", "\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0", "FunctionalProgramming"]}