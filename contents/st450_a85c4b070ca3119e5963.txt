{"tags": ["C#", "SQLServer", "\u975e\u540c\u671f\u51e6\u7406"], "context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u4eca\u307e\u3067\u306e\u7d4c\u904e\u304b\u3089SqlBulkCopy\u3092\u4f7f\u3044\u540c\u6642\u306b\u8907\u6570\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u51fa\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u3002\n\u30b5\u30f3\u30d7\u30eb\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3002\n\nC#\u3067 Bulk Insert \u306e\u30b5\u30f3\u30d7\u30eb\nIEnumerable \u304b\u3089 IDataReader \u3078\u5909\u63db\nDataReader \u304b\u3089\u30af\u30e9\u30b9\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u30b5\u30f3\u30d7\u30eb\nTPL Dataflow\u306e\u30b5\u30f3\u30d7\u30eb\n\n\u3053\u308c\u3067\u3001\uff11\u3064\u306e\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u5206\u89e3\u3057\u3066\u30c7\u30fc\u30bf\u5206\u6790\u3057\u3084\u3059\u3044\u3088\u3046\u306bDWH\u3092\u69cb\u7bc9\u304c\u3067\u304d\u308b\u3002\nSSIS\u306f\u4fbf\u5229\u3067\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u7c21\u5358\u306b\u3067\u304d\u4e26\u5217\u3067\u51e6\u7406\u3067\u304d\u308b\u304c\u3001\u8907\u96d1\u306a\u51e6\u7406\u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306b\u51e6\u7406\u304c\u8907\u96d1\u306b\u306a\u308b\u3002\n\u305d\u306e\u70b9\u3001\u901a\u5e38\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u308c\u3070\u4e0b\u8a18\u306e\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308b\u3002\n\n\u5171\u901a\u51e6\u7406\u3092Class Library\u306b\u3067\u304d\u308b\n\u30c6\u30b9\u30c8\u304c\u3067\u304d\u308b\n\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u3067\u304d\u308b\n\u30ed\u30b0\u306b\u51fa\u529b\u3067\u304d\u308b\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u30af\u30e9\u30b9\u306eDataReaderExtensions \u3068EnumerableDataReader\u306f\u300cIEnumerable \u304b\u3089 IDataReader \u3078\u5909\u63db\u300d\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n\u30b5\u30f3\u30d7\u30eb\u306f\u5165\u9662\u65e5\u3001\u9000\u9662\u65e5\u306e\u60c5\u5831\u3092\u57fa\u306b\u3001\u65e5\u5225\u306b\u5c55\u958b\u3057\u3066\u3044\u308b\u3002\n\u30b5\u30f3\u30d7\u30eb\u306f\u7c21\u7d20\u5316\u306e\u305f\u3081\u3001\u8a3a\u7642\u79d1\u3001\u75c5\u68df\u306a\u3069\u7701\u7565\u3057\u3066\u3044\u308b\u304c\u3001\u65e5\u5225\u306b\u5c55\u958b\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u305d\u306e\u65e5\u306b\u3044\u305f\u75c5\u68df\u3001\u8a3a\u7642\u79d1\u3092\u53c2\u7167\u3067\u304d\u308b\u3002\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Reflection;\nusing System.Threading.Tasks;\nusing System.Threading.Tasks.Dataflow;\nusing System.Threading;\nusing SampleTPL.Properties;\n\nnamespace SampleTPL\n{\n    static class DataReaderExtensions ...\n\n    internal class EnumerableDataReader<TSource> : IDataReader ...\n\n    class Program\n    {\n\n        class DataReaderEnumerable<TSource>\n        {\n            private readonly string _sql;\n            private readonly string _connectString;\n            private readonly List<PropertyInfo> listProp = new List<PropertyInfo>();\n\n            public DataReaderEnumerable(string sql, string connectString)\n            {\n                _sql = sql;\n                _connectString = connectString;\n                foreach (var prop in typeof(TSource).GetProperties())\n                {\n                    listProp.Add(prop);\n                }\n            }\n\n            public IEnumerable<TSource> AsEnumerable()\n            {\n                using (var conn = new SqlConnection(_connectString))\n                {\n                    conn.Open();\n                    var cmd = new SqlCommand(_sql, conn);\n                    using (var rd = cmd.ExecuteReader())\n                    {\n                        while (rd.Read())\n                        {\n                            TSource cls = Activator.CreateInstance<TSource>();\n                            foreach (var fld in listProp)\n                                fld.SetValue(cls, rd[fld.Name]);\n                            yield return cls;\n                        }\n                    }\n                }\n            }\n        }\n\n        class OutBuffer<T>\n        {\n            private BufferBlock<T> buf = new BufferBlock<T>();\n            private bool isEnd = false;\n            private int cntPost = 0;\n\n            public int Count { get { return cntPost; } }\n\n            public void Post(T val)\n            {\n                buf.Post(val);\n                cntPost++;\n                if (buf.Count > 10000)\n                {\n                    Thread.Sleep(10);\n                }\n            }\n\n            public void Complite()\n            {\n                isEnd = true;\n            }\n\n            public IEnumerable<T> AsEnumerable()\n            {\n                var tsLimit = new TimeSpan(0, 0, 0, 0, 500);\n                while (!isEnd || buf.Count > 0)\n                {\n                    T val;\n                    try\n                    {\n                        val = buf.Receive(tsLimit);\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(\"msg:{0} time:{1}\", \n                            ex.Message,\u3000DateTime.Now);\n                        continue;\n                    }\n                    yield return val;\n                }\n            }\n        }\n\n        class \u5165\u9662\u5c65\u6b74Base\n        {\n            public string \u60a3\u8005\u756a\u53f7 { get; set; }\n            public string \u5165\u9662\u65e5 { get; set; }\n            public string \u9000\u9662\u65e5 { get; set; }\n        }\n\n        class \u5165\u9662\u5358\u4f4d\n        {\n            public int \u5165\u9662\u5358\u4f4dID { get; set; }\n            public string \u60a3\u8005\u756a\u53f7 { get; set; }\n            public string \u5165\u9662\u65e5 { get; set; }\n            public string \u9000\u9662\u65e5 { get; set; }\n        }\n\n        class \u5165\u9662\u65e5\u5225\n        {\n            public int \u5165\u9662\u65e5\u5225ID { get; set; }\n            public int \u5165\u9662\u5358\u4f4dID { get; set; }\n            public string \u60a3\u8005\u756a\u53f7 { get; set; }\n            public string \u65e5\u4ed8 { get; set; }\n            public byte \u65b0\u5165\u9662\u4ef6\u6570 { get; set; }\n            public byte \u5ef6\u4ef6\u6570 { get; set; }\n            public byte \u9000\u9662\u4ef6\u6570 { get; set; }\n        }\n\n        static void Main(string[] args)\n        {\n            string con = Settings.Default.SQLConnectionString;\n\n            Console.WriteLine(\"\u51fa\u529b\u958b\u59cb Time:{0}\", DateTime.Now);\n\n            var buf1 = new OutBuffer<\u5165\u9662\u5358\u4f4d>();\n            var buf2 = new OutBuffer<\u5165\u9662\u65e5\u5225>();\n\n            var reader = Task.Run(() =>\n            {\n                int id = 1;\n                int idDay = 1;\n                string sql = \"select * from \u5165\u9662\u5c65\u6b74Base\";\n                var rd = new DataReaderEnumerable<\u5165\u9662\u5c65\u6b74Base>(sql, con);\n                foreach (var row in rd.AsEnumerable())\n                {\n                    buf1.Post(new \u5165\u9662\u5358\u4f4d { \n                        \u5165\u9662\u5358\u4f4dID = id,\n                        \u60a3\u8005\u756a\u53f7 = row.\u60a3\u8005\u756a\u53f7,\n                        \u5165\u9662\u65e5 = row.\u5165\u9662\u65e5,\n                        \u9000\u9662\u65e5 = row.\u9000\u9662\u65e5\n                    });\n                    var start = DateTime.ParseExact(row.\u5165\u9662\u65e5, \"yyyyMMdd\", null);\n                    // \u9000\u9662\u65e5\u304c99999999\u306f\u5165\u9662\u4e2d\u3068\u3057\u3066\u3001\u73fe\u5728\u306e\u65e5\u4ed8\u3092\u30bb\u30c3\u30c8\n                    var end = row.\u9000\u9662\u65e5 == \"99999999\" ?\n                        DateTime.Now.Date :\n                        DateTime.ParseExact(row.\u9000\u9662\u65e5, \"yyyyMMdd\", null);\n                    for (var cur = start; cur <= end; cur = cur.AddDays(1) )\n                    {\n                        buf2.Post(new \u5165\u9662\u65e5\u5225\n                        {\n                            \u5165\u9662\u65e5\u5225ID = idDay,\n                            \u5165\u9662\u5358\u4f4dID = id,\n                            \u60a3\u8005\u756a\u53f7 = row.\u60a3\u8005\u756a\u53f7,\n                            \u65e5\u4ed8 = cur.ToString(\"yyyyMMdd\"),\n                            \u65b0\u5165\u9662\u4ef6\u6570 = (byte)(start == cur ? 1 : 0),\n                            \u5ef6\u4ef6\u6570 = 1,\n                            \u9000\u9662\u4ef6\u6570 = (byte)(end == cur ? 1 : 0),\n                        });\n                        idDay++;\n                    }\n                    id++;\n                }\n                buf1.Complite();\n                buf2.Complite();\n                Console.WriteLine(\"\u8aad\u307f\u8fbc\u307f\u7d42\u4e86 Time:{0}\", DateTime.Now);\n            });\n\n            var writer1 = Task.Run(() =>\n            {\n                using (var bc = new SqlBulkCopy(con))\n                {\n                    bc.DestinationTableName = \"dbo.\u5165\u9662\u5358\u4f4d\";\n                    bc.BulkCopyTimeout = 10000;\n                    bc.WriteToServer(buf1.AsEnumerable().AsDataReader());\n                }\n                Console.WriteLine(\"BulkCopy End \u5165\u9662\u5358\u4f4d\");\n            });\n\n            var writer2 = Task.Run(() =>\n            {\n                using (var bc = new SqlBulkCopy(con))\n                {\n                    bc.DestinationTableName = \"dbo.\u5165\u9662\u65e5\u5225\";\n                    bc.BulkCopyTimeout = 10000;\n                    bc.WriteToServer(buf2.AsEnumerable().AsDataReader());\n                }\n                Console.WriteLine(\"BulkCopy End \u5165\u9662\u65e5\u5225\");\n            });\n\n            Task.WaitAll(reader, writer1, writer2);\n\n            Console.WriteLine(\"\u51fa\u529b\u7d42\u4e86 Time:{0}\", DateTime.Now);\n            Console.WriteLine(\"\u5165\u9662\u5358\u4f4d \u4ef6\u6570:{0}\", buf1.Count);\n            Console.WriteLine(\"\u5165\u9662\u65e5\u5225 \u4ef6\u6570:{0}\", buf2.Count);\n            Console.ReadKey();\n\n        }\n    }\n}\n\n\n\n\u7d50\u679c\n\n\n\n\u30c6\u30fc\u30d6\u30eb\n\u4ef6\u6570\n\n\n\n\n\u5165\u9662\u5c65\u6b74Base\n12,452\n\n\n\u5165\u9662\u5358\u4f4d\n12,452\n\n\n\u5165\u9662\u65e5\u5225\n365,768\n\n\n\n\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u304d\u3044\u3066\u3044\u308b\u72b6\u614b\u30673\u79d2\u3067\u5b8c\u4e86\u3002\n#\u306f\u3058\u3081\u306b\n\u4eca\u307e\u3067\u306e\u7d4c\u904e\u304b\u3089SqlBulkCopy\u3092\u4f7f\u3044\u540c\u6642\u306b\u8907\u6570\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u51fa\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u3002\n\u30b5\u30f3\u30d7\u30eb\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3002\n\n* [C#\u3067 Bulk Insert \u306e\u30b5\u30f3\u30d7\u30eb](http://qiita.com/st450/items/e8453c4a53d1e80b8111)\n* [IEnumerable \u304b\u3089 IDataReader \u3078\u5909\u63db](http://qiita.com/st450/items/831d90990658e023a679)\n* [DataReader \u304b\u3089\u30af\u30e9\u30b9\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u30b5\u30f3\u30d7\u30eb](http://qiita.com/st450/items/d52bede1cc97e48fd2f0)\n* [TPL Dataflow\u306e\u30b5\u30f3\u30d7\u30eb](http://qiita.com/st450/items/7ff6a7fc18213175d215)\n\n\u3053\u308c\u3067\u3001\uff11\u3064\u306e\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u5206\u89e3\u3057\u3066\u30c7\u30fc\u30bf\u5206\u6790\u3057\u3084\u3059\u3044\u3088\u3046\u306bDWH\u3092\u69cb\u7bc9\u304c\u3067\u304d\u308b\u3002\nSSIS\u306f\u4fbf\u5229\u3067\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u7c21\u5358\u306b\u3067\u304d\u4e26\u5217\u3067\u51e6\u7406\u3067\u304d\u308b\u304c\u3001\u8907\u96d1\u306a\u51e6\u7406\u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306b\u51e6\u7406\u304c\u8907\u96d1\u306b\u306a\u308b\u3002\n\u305d\u306e\u70b9\u3001\u901a\u5e38\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u308c\u3070\u4e0b\u8a18\u306e\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308b\u3002\n\n* \u5171\u901a\u51e6\u7406\u3092Class Library\u306b\u3067\u304d\u308b\n* \u30c6\u30b9\u30c8\u304c\u3067\u304d\u308b\n* \u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406\u3067\u304d\u308b\n* \u30ed\u30b0\u306b\u51fa\u529b\u3067\u304d\u308b\n\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u30af\u30e9\u30b9\u306eDataReaderExtensions \u3068EnumerableDataReader\u306f\u300cIEnumerable \u304b\u3089 IDataReader \u3078\u5909\u63db\u300d\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n\u30b5\u30f3\u30d7\u30eb\u306f\u5165\u9662\u65e5\u3001\u9000\u9662\u65e5\u306e\u60c5\u5831\u3092\u57fa\u306b\u3001\u65e5\u5225\u306b\u5c55\u958b\u3057\u3066\u3044\u308b\u3002\n\u30b5\u30f3\u30d7\u30eb\u306f\u7c21\u7d20\u5316\u306e\u305f\u3081\u3001\u8a3a\u7642\u79d1\u3001\u75c5\u68df\u306a\u3069\u7701\u7565\u3057\u3066\u3044\u308b\u304c\u3001\u65e5\u5225\u306b\u5c55\u958b\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u305d\u306e\u65e5\u306b\u3044\u305f\u75c5\u68df\u3001\u8a3a\u7642\u79d1\u3092\u53c2\u7167\u3067\u304d\u308b\u3002\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Reflection;\nusing System.Threading.Tasks;\nusing System.Threading.Tasks.Dataflow;\nusing System.Threading;\nusing SampleTPL.Properties;\n\nnamespace SampleTPL\n{\n    static class DataReaderExtensions ...\n\n    internal class EnumerableDataReader<TSource> : IDataReader ...\n\n    class Program\n    {\n\n        class DataReaderEnumerable<TSource>\n        {\n            private readonly string _sql;\n            private readonly string _connectString;\n            private readonly List<PropertyInfo> listProp = new List<PropertyInfo>();\n\n            public DataReaderEnumerable(string sql, string connectString)\n            {\n                _sql = sql;\n                _connectString = connectString;\n                foreach (var prop in typeof(TSource).GetProperties())\n                {\n                    listProp.Add(prop);\n                }\n            }\n\n            public IEnumerable<TSource> AsEnumerable()\n            {\n                using (var conn = new SqlConnection(_connectString))\n                {\n                    conn.Open();\n                    var cmd = new SqlCommand(_sql, conn);\n                    using (var rd = cmd.ExecuteReader())\n                    {\n                        while (rd.Read())\n                        {\n                            TSource cls = Activator.CreateInstance<TSource>();\n                            foreach (var fld in listProp)\n                                fld.SetValue(cls, rd[fld.Name]);\n                            yield return cls;\n                        }\n                    }\n                }\n            }\n        }\n\n        class OutBuffer<T>\n        {\n            private BufferBlock<T> buf = new BufferBlock<T>();\n            private bool isEnd = false;\n            private int cntPost = 0;\n\n            public int Count { get { return cntPost; } }\n\n            public void Post(T val)\n            {\n                buf.Post(val);\n                cntPost++;\n                if (buf.Count > 10000)\n                {\n                    Thread.Sleep(10);\n                }\n            }\n\n            public void Complite()\n            {\n                isEnd = true;\n            }\n\n            public IEnumerable<T> AsEnumerable()\n            {\n                var tsLimit = new TimeSpan(0, 0, 0, 0, 500);\n                while (!isEnd || buf.Count > 0)\n                {\n                    T val;\n                    try\n                    {\n                        val = buf.Receive(tsLimit);\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(\"msg:{0} time:{1}\", \n                            ex.Message,\u3000DateTime.Now);\n                        continue;\n                    }\n                    yield return val;\n                }\n            }\n        }\n\n        class \u5165\u9662\u5c65\u6b74Base\n        {\n            public string \u60a3\u8005\u756a\u53f7 { get; set; }\n            public string \u5165\u9662\u65e5 { get; set; }\n            public string \u9000\u9662\u65e5 { get; set; }\n        }\n\n        class \u5165\u9662\u5358\u4f4d\n        {\n            public int \u5165\u9662\u5358\u4f4dID { get; set; }\n            public string \u60a3\u8005\u756a\u53f7 { get; set; }\n            public string \u5165\u9662\u65e5 { get; set; }\n            public string \u9000\u9662\u65e5 { get; set; }\n        }\n\n        class \u5165\u9662\u65e5\u5225\n        {\n            public int \u5165\u9662\u65e5\u5225ID { get; set; }\n            public int \u5165\u9662\u5358\u4f4dID { get; set; }\n            public string \u60a3\u8005\u756a\u53f7 { get; set; }\n            public string \u65e5\u4ed8 { get; set; }\n            public byte \u65b0\u5165\u9662\u4ef6\u6570 { get; set; }\n            public byte \u5ef6\u4ef6\u6570 { get; set; }\n            public byte \u9000\u9662\u4ef6\u6570 { get; set; }\n        }\n\n        static void Main(string[] args)\n        {\n            string con = Settings.Default.SQLConnectionString;\n\n            Console.WriteLine(\"\u51fa\u529b\u958b\u59cb Time:{0}\", DateTime.Now);\n\n            var buf1 = new OutBuffer<\u5165\u9662\u5358\u4f4d>();\n            var buf2 = new OutBuffer<\u5165\u9662\u65e5\u5225>();\n\n            var reader = Task.Run(() =>\n            {\n                int id = 1;\n                int idDay = 1;\n                string sql = \"select * from \u5165\u9662\u5c65\u6b74Base\";\n                var rd = new DataReaderEnumerable<\u5165\u9662\u5c65\u6b74Base>(sql, con);\n                foreach (var row in rd.AsEnumerable())\n                {\n                    buf1.Post(new \u5165\u9662\u5358\u4f4d { \n                        \u5165\u9662\u5358\u4f4dID = id,\n                        \u60a3\u8005\u756a\u53f7 = row.\u60a3\u8005\u756a\u53f7,\n                        \u5165\u9662\u65e5 = row.\u5165\u9662\u65e5,\n                        \u9000\u9662\u65e5 = row.\u9000\u9662\u65e5\n                    });\n                    var start = DateTime.ParseExact(row.\u5165\u9662\u65e5, \"yyyyMMdd\", null);\n                    // \u9000\u9662\u65e5\u304c99999999\u306f\u5165\u9662\u4e2d\u3068\u3057\u3066\u3001\u73fe\u5728\u306e\u65e5\u4ed8\u3092\u30bb\u30c3\u30c8\n                    var end = row.\u9000\u9662\u65e5 == \"99999999\" ?\n                        DateTime.Now.Date :\n                        DateTime.ParseExact(row.\u9000\u9662\u65e5, \"yyyyMMdd\", null);\n                    for (var cur = start; cur <= end; cur = cur.AddDays(1) )\n                    {\n                        buf2.Post(new \u5165\u9662\u65e5\u5225\n                        {\n                            \u5165\u9662\u65e5\u5225ID = idDay,\n                            \u5165\u9662\u5358\u4f4dID = id,\n                            \u60a3\u8005\u756a\u53f7 = row.\u60a3\u8005\u756a\u53f7,\n                            \u65e5\u4ed8 = cur.ToString(\"yyyyMMdd\"),\n                            \u65b0\u5165\u9662\u4ef6\u6570 = (byte)(start == cur ? 1 : 0),\n                            \u5ef6\u4ef6\u6570 = 1,\n                            \u9000\u9662\u4ef6\u6570 = (byte)(end == cur ? 1 : 0),\n                        });\n                        idDay++;\n                    }\n                    id++;\n                }\n                buf1.Complite();\n                buf2.Complite();\n                Console.WriteLine(\"\u8aad\u307f\u8fbc\u307f\u7d42\u4e86 Time:{0}\", DateTime.Now);\n            });\n\n            var writer1 = Task.Run(() =>\n            {\n                using (var bc = new SqlBulkCopy(con))\n                {\n                    bc.DestinationTableName = \"dbo.\u5165\u9662\u5358\u4f4d\";\n                    bc.BulkCopyTimeout = 10000;\n                    bc.WriteToServer(buf1.AsEnumerable().AsDataReader());\n                }\n                Console.WriteLine(\"BulkCopy End \u5165\u9662\u5358\u4f4d\");\n            });\n            \n            var writer2 = Task.Run(() =>\n            {\n                using (var bc = new SqlBulkCopy(con))\n                {\n                    bc.DestinationTableName = \"dbo.\u5165\u9662\u65e5\u5225\";\n                    bc.BulkCopyTimeout = 10000;\n                    bc.WriteToServer(buf2.AsEnumerable().AsDataReader());\n                }\n                Console.WriteLine(\"BulkCopy End \u5165\u9662\u65e5\u5225\");\n            });\n            \n            Task.WaitAll(reader, writer1, writer2);\n\n            Console.WriteLine(\"\u51fa\u529b\u7d42\u4e86 Time:{0}\", DateTime.Now);\n            Console.WriteLine(\"\u5165\u9662\u5358\u4f4d \u4ef6\u6570:{0}\", buf1.Count);\n            Console.WriteLine(\"\u5165\u9662\u65e5\u5225 \u4ef6\u6570:{0}\", buf2.Count);\n            Console.ReadKey();\n\n        }\n    }\n}\n\n```\n#\u7d50\u679c\n\n| \u30c6\u30fc\u30d6\u30eb | \u4ef6\u6570|\n|:--------|---------:|\n| \u5165\u9662\u5c65\u6b74Base| 12,452 |\n| \u5165\u9662\u5358\u4f4d| 12,452 |\n| \u5165\u9662\u65e5\u5225 | 365,768 |  \n\n\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u304d\u3044\u3066\u3044\u308b\u72b6\u614b\u30673\u79d2\u3067\u5b8c\u4e86\u3002\n"}