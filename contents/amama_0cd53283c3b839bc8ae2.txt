{"context": " More than 1 year has passed since last update.\n\n3\u65e5\u76ee\n\n1.4\nSKI\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3068BCKW\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u4f5c\u308b.\u3061\u3087\u3063\u3068\u9055\u3046\u3051\u3069\u307e\u3042\u554f\u984c\u7121\u3044\u3060\u308d\u3046.\n\u30bf\u30d7\u30eb\u306f\u69cb\u9020\u4f53\u306b\u3059\u308b.\nvoid*\u306f\u53b3\u3057\u3044\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3051\u3069\u3053\u306e\u307e\u307e\u884c\u304f.\u3053\u306e\u9078\u629e\u304c\u9593\u9055\u3063\u3066\u3044\u307e\u305b\u3093\u3088\u3046\u306b.\npreludeDefs :: CoreProgram\npreludeDefs\n  = [ (\"I\", [\"x\"], EVar \"x\"),\n      (\"K\", [\"x\",\"y\"], EVar \"x\"),\n      (\"K1\",[\"x\",\"y\"], EVar \"y\"),\n      (\"S\", [\"f\",\"g\",\"x\"], EAp (EAp (EVar \"f\") (EVar \"x\"))\n      (EAp (EVar \"g\") (EVar \"x\"))),\n      (\"compose\", [\"f\",\"g\",\"x\"], EAp (EVar \"f\")\n      (EAp (EVar \"g\") (EVar \"x\"))),\n      (\"twice\", [\"f\"], EAp (EAp (EVar \"compose\") (EVar \"f\")) (EVar \"f\")) ]\n\n\u3053\u308c\u3092\n\u3053\u3046\u3057\u3066\ntypedef struct {\n    Name name;\n    alignas(8) void *arg;\n    alignas(8) Expr *expr;\n} ScDefn;\n\ntypedef ScDefn * Program;\n\n#define mkExprp(t, car, cdr) &(Expr){t, (void *)(car), (void *)(cdr)}\n#define EVAR(var) mkExprp(EVar, (var), NULL)\n#define ENUM(num) mkExprp(ENum, (num), NULL)\n#define ECONSTR(con, str) mkExprp(EConstr, (con), (str))\n#define EAP(a, p) mkExprp(EAp, (a), (p))\n#define ELET(le, t) mkExprp(ELet, (le), (t))\n#define ELETREC(let, rec) mkExprp(ELetrec, (let), (rec))\n#define ECASE(ca, se) mkExprp(ECase, (ca), (se))\n#define ELAM(la, m) mkExprp(ELam, (la), (m))\nProgram preludeDefs = (ScDefn[]){\n    {\"I\", (void*)((Name[]){\"x\"}), EVAR(\"x\")},\n    {\"K\", (void*)((Name[]){\"x\", \"y\"}), EVAR(\"x\")},\n    {\"S\", (void*)((Name[]){\"x\", \"y\", \"z\"}), EAP(EAP(EVAR(\"x\"), EVAR(\"z\")), EAP(EVAR(\"y\"), EVAR(\"z\")))},\n    {\"B\", (void*)((Name[]){\"x\", \"y\", \"z\"}), EAP(EVAR(\"x\"), EAP(EVAR(\"y\"), EVAR(\"z\")))},\n    {\"C\", (void*)((Name[]){\"x\", \"y\", \"z\"}), EAP(EAP(EVAR(\"x\"), EVAR(\"z\")), EVAR(\"y\"))},\n    {\"W\", (void*)((Name[]){\"x\", \"y\"}), EAP(EAP(EVAR(\"x\"), EVAR(\"y\")), EVAR(\"y\"))},\n};\n\n\u3053\u3046\u3058\u3083(\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u5f8c)\nProgram preludeDefs = (ScDefn[]){\n {\"I\", (void*)((Name[]){\"x\"}), &(Expr){EVar, (void *)((\"x\")), (void *)(((void *)0))}},\n {\"K\", (void*)((Name[]){\"x\", \"y\"}), &(Expr){EVar, (void *)((\"x\")), (void *)(((void *)0))}},\n {\"S\", (void*)((Name[]){\"x\", \"y\", \"z\"}), &(Expr){EAp, (void *)((&(Expr){EAp, (void *)((&(Expr){EVar, (void *)((\"x\")), (void *)(((void *)0))})), (void *)((&(Expr){EVar, (void *)((\"z\")), (void *)(((void *)0))}))})), (void *)((&(Expr){EAp, (void *)((&(Expr){EVar, (void *)((\"y\")), (void *)(((void *)0))})), (void *)((&(Expr){EVar, (void *)((\"z\")), (void *)(((void *)0))}))}))}},\n {\"B\", (void*)((Name[]){\"x\", \"y\", \"z\"}), &(Expr){EAp, (void *)((&(Expr){EVar, (void *)((\"x\")), (void *)(((void *)0))})), (void *)((&(Expr){EAp, (void *)((&(Expr){EVar, (void *)((\"y\")), (void *)(((void *)0))})), (void *)((&(Expr){EVar, (void *)((\"z\")), (void *)(((void *)0))}))}))}},\n {\"C\", (void*)((Name[]){\"x\", \"y\", \"z\"}), &(Expr){EAp, (void *)((&(Expr){EAp, (void *)((&(Expr){EVar, (void *)((\"x\")), (void *)(((void *)0))})), (void *)((&(Expr){EVar, (void *)((\"z\")), (void *)(((void *)0))}))})), (void *)((&(Expr){EVar, (void *)((\"y\")), (void *)(((void *)0))}))}},\n {\"W\", (void*)((Name[]){\"x\", \"y\"}), &(Expr){EAp, (void *)((&(Expr){EAp, (void *)((&(Expr){EVar, (void *)((\"x\")), (void *)(((void *)0))})), (void *)((&(Expr){EVar, (void *)((\"y\")), (void *)(((void *)0))}))})), (void *)((&(Expr){EVar, (void *)((\"y\")), (void *)(((void *)0))}))}},\n};\n\n(\u30ab\u30c3\u30b3(\u591a(\u3059)\u304e(\u30ef\u30ed\u30bf)))\nMiranda\u306f\u7dda\u5f62\u30ea\u30b9\u30c8\u4f7f\u3063\u3066\u3044\u308b\u304b\u3089append\u306e\u30b3\u30b9\u30c8\u304c\u8981\u7d20\u306e2\u4e57\u306b\u6bd4\u4f8b\u3059\u308b\u3068\u304b\u30a2\u30db\u306a\u3053\u3068\u8a00\u3044\u51fa\u3057\u3066\u62bd\u8c61\u30c7\u30fc\u30bf\u578b,abstract data type\u3092\u4f5c\u308a\u51fa\u3057\u305f.\n23\u30da\u30fc\u30b8\u306824\u30da\u30fc\u30b8\u306e\u9593\u306b\nM> abstype iseq with\nM>       iNil     :: iseq                  || The empty iseq\nM>       iStr     :: [char] -> iseq        || Turn a string into an iseq\nM>       iAppend  :: iseq -> iseq -> iseq  || Append two iseqs\nM>       iNewline :: iseq                  || New line with indentation\nM>       iIndent  :: iseq -> iseq          || Indent an iseq\nM>       iDisplay :: iseq -> [char]        || Turn an iseq into a string\n\n\u304c\u5165\u308b?\niseq\u578b\u3092\u4f5c\u3063\u3066\u308b\u3051\u3069,\u5b9f\u88c5\u304c\u308f\u304b\u308b\u307e\u3067pprint\u3084\u305d\u306e\u4e2d\u8eab\u3092\u5b9f\u88c5\u3067\u304d\u306a\u3044\u306e\u304c\u8f9b\u3044.\nM1-2> iseqRep ::= INil\nM1-2>             | IStr [char]\nM1-2>             | IAppend iseqRep iseqRep\n\n\u304c\u6b63\u3057\u30441.5.3\u306e\u3059\u3050\u4e0b\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3060\u3068\u601d\u3046.\n\u3080\u3057\u308d\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u30b3\u30fc\u30c9\u306f\u5168\u90e8GH(glasgow haskell)\u7528?\u3067M(Miranda)\u7528\u3067\u306f\u306a\u3044?\n\u3088\u3063\u3066\u7d50\u69cb\u672c\u6587\u4e2d\u306b\u9593\u9055\u3044\u304c\u3042\u308b?\n1.5.3\u307e\u3067\u8aad\u3093\u3060.\u5b9f\u88c5\u306f1.4\u307e\u3067.\u5b9f\u88c5\u306e\u78ba\u8a8d\u306f\u3057\u3066\u306a\u3044\n# 3\u65e5\u76ee\n\n## 1.4\n\nSKI\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3068BCKW\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u4f5c\u308b.\u3061\u3087\u3063\u3068\u9055\u3046\u3051\u3069\u307e\u3042\u554f\u984c\u7121\u3044\u3060\u308d\u3046.\n\u30bf\u30d7\u30eb\u306f\u69cb\u9020\u4f53\u306b\u3059\u308b.\nvoid*\u306f\u53b3\u3057\u3044\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3051\u3069\u3053\u306e\u307e\u307e\u884c\u304f.\u3053\u306e\u9078\u629e\u304c\u9593\u9055\u3063\u3066\u3044\u307e\u305b\u3093\u3088\u3046\u306b.\n\n```\npreludeDefs :: CoreProgram\npreludeDefs\n  = [ (\"I\", [\"x\"], EVar \"x\"),\n      (\"K\", [\"x\",\"y\"], EVar \"x\"),\n      (\"K1\",[\"x\",\"y\"], EVar \"y\"),\n      (\"S\", [\"f\",\"g\",\"x\"], EAp (EAp (EVar \"f\") (EVar \"x\"))\n      (EAp (EVar \"g\") (EVar \"x\"))),\n      (\"compose\", [\"f\",\"g\",\"x\"], EAp (EVar \"f\")\n      (EAp (EVar \"g\") (EVar \"x\"))),\n      (\"twice\", [\"f\"], EAp (EAp (EVar \"compose\") (EVar \"f\")) (EVar \"f\")) ]\n```\n\n\u3053\u308c\u3092\n\n\u3053\u3046\u3057\u3066\n\n```c\ntypedef struct {\n\tName name;\n\talignas(8) void *arg;\n\talignas(8) Expr *expr;\n} ScDefn;\n\ntypedef ScDefn * Program;\n\n#define mkExprp(t, car, cdr) &(Expr){t, (void *)(car), (void *)(cdr)}\n#define EVAR(var) mkExprp(EVar, (var), NULL)\n#define ENUM(num) mkExprp(ENum, (num), NULL)\n#define ECONSTR(con, str) mkExprp(EConstr, (con), (str))\n#define EAP(a, p) mkExprp(EAp, (a), (p))\n#define ELET(le, t) mkExprp(ELet, (le), (t))\n#define ELETREC(let, rec) mkExprp(ELetrec, (let), (rec))\n#define ECASE(ca, se) mkExprp(ECase, (ca), (se))\n#define ELAM(la, m) mkExprp(ELam, (la), (m))\nProgram preludeDefs = (ScDefn[]){\n\t{\"I\", (void*)((Name[]){\"x\"}), EVAR(\"x\")},\n\t{\"K\", (void*)((Name[]){\"x\", \"y\"}), EVAR(\"x\")},\n\t{\"S\", (void*)((Name[]){\"x\", \"y\", \"z\"}), EAP(EAP(EVAR(\"x\"), EVAR(\"z\")), EAP(EVAR(\"y\"), EVAR(\"z\")))},\n\t{\"B\", (void*)((Name[]){\"x\", \"y\", \"z\"}), EAP(EVAR(\"x\"), EAP(EVAR(\"y\"), EVAR(\"z\")))},\n\t{\"C\", (void*)((Name[]){\"x\", \"y\", \"z\"}), EAP(EAP(EVAR(\"x\"), EVAR(\"z\")), EVAR(\"y\"))},\n\t{\"W\", (void*)((Name[]){\"x\", \"y\"}), EAP(EAP(EVAR(\"x\"), EVAR(\"y\")), EVAR(\"y\"))},\n};\n```\n\u3053\u3046\u3058\u3083(\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u5f8c)\n\n```c\nProgram preludeDefs = (ScDefn[]){\n {\"I\", (void*)((Name[]){\"x\"}), &(Expr){EVar, (void *)((\"x\")), (void *)(((void *)0))}},\n {\"K\", (void*)((Name[]){\"x\", \"y\"}), &(Expr){EVar, (void *)((\"x\")), (void *)(((void *)0))}},\n {\"S\", (void*)((Name[]){\"x\", \"y\", \"z\"}), &(Expr){EAp, (void *)((&(Expr){EAp, (void *)((&(Expr){EVar, (void *)((\"x\")), (void *)(((void *)0))})), (void *)((&(Expr){EVar, (void *)((\"z\")), (void *)(((void *)0))}))})), (void *)((&(Expr){EAp, (void *)((&(Expr){EVar, (void *)((\"y\")), (void *)(((void *)0))})), (void *)((&(Expr){EVar, (void *)((\"z\")), (void *)(((void *)0))}))}))}},\n {\"B\", (void*)((Name[]){\"x\", \"y\", \"z\"}), &(Expr){EAp, (void *)((&(Expr){EVar, (void *)((\"x\")), (void *)(((void *)0))})), (void *)((&(Expr){EAp, (void *)((&(Expr){EVar, (void *)((\"y\")), (void *)(((void *)0))})), (void *)((&(Expr){EVar, (void *)((\"z\")), (void *)(((void *)0))}))}))}},\n {\"C\", (void*)((Name[]){\"x\", \"y\", \"z\"}), &(Expr){EAp, (void *)((&(Expr){EAp, (void *)((&(Expr){EVar, (void *)((\"x\")), (void *)(((void *)0))})), (void *)((&(Expr){EVar, (void *)((\"z\")), (void *)(((void *)0))}))})), (void *)((&(Expr){EVar, (void *)((\"y\")), (void *)(((void *)0))}))}},\n {\"W\", (void*)((Name[]){\"x\", \"y\"}), &(Expr){EAp, (void *)((&(Expr){EAp, (void *)((&(Expr){EVar, (void *)((\"x\")), (void *)(((void *)0))})), (void *)((&(Expr){EVar, (void *)((\"y\")), (void *)(((void *)0))}))})), (void *)((&(Expr){EVar, (void *)((\"y\")), (void *)(((void *)0))}))}},\n};\n```\n\n(\u30ab\u30c3\u30b3(\u591a(\u3059)\u304e(\u30ef\u30ed\u30bf)))\n\nMiranda\u306f\u7dda\u5f62\u30ea\u30b9\u30c8\u4f7f\u3063\u3066\u3044\u308b\u304b\u3089append\u306e\u30b3\u30b9\u30c8\u304c\u8981\u7d20\u306e2\u4e57\u306b\u6bd4\u4f8b\u3059\u308b\u3068\u304b\u30a2\u30db\u306a\u3053\u3068\u8a00\u3044\u51fa\u3057\u3066\u62bd\u8c61\u30c7\u30fc\u30bf\u578b,_abstract data type_\u3092\u4f5c\u308a\u51fa\u3057\u305f.\n23\u30da\u30fc\u30b8\u306824\u30da\u30fc\u30b8\u306e\u9593\u306b\n\n```\nM> abstype iseq with\nM>       iNil     :: iseq                  || The empty iseq\nM>       iStr     :: [char] -> iseq        || Turn a string into an iseq\nM>       iAppend  :: iseq -> iseq -> iseq  || Append two iseqs\nM>       iNewline :: iseq                  || New line with indentation\nM>       iIndent  :: iseq -> iseq          || Indent an iseq\nM>       iDisplay :: iseq -> [char]        || Turn an iseq into a string\n```\n\n\u304c\u5165\u308b?\niseq\u578b\u3092\u4f5c\u3063\u3066\u308b\u3051\u3069,\u5b9f\u88c5\u304c\u308f\u304b\u308b\u307e\u3067pprint\u3084\u305d\u306e\u4e2d\u8eab\u3092\u5b9f\u88c5\u3067\u304d\u306a\u3044\u306e\u304c\u8f9b\u3044.\n\n```\nM1-2> iseqRep ::= INil\nM1-2>             | IStr [char]\nM1-2>             | IAppend iseqRep iseqRep\n```\n\n\u304c\u6b63\u3057\u30441.5.3\u306e\u3059\u3050\u4e0b\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3060\u3068\u601d\u3046.\n\u3080\u3057\u308d\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u30b3\u30fc\u30c9\u306f\u5168\u90e8GH(glasgow haskell)\u7528?\u3067M(Miranda)\u7528\u3067\u306f\u306a\u3044?\n\u3088\u3063\u3066\u7d50\u69cb\u672c\u6587\u4e2d\u306b\u9593\u9055\u3044\u304c\u3042\u308b?\n\n**1.5.3\u307e\u3067\u8aad\u3093\u3060.\u5b9f\u88c5\u306f1.4\u307e\u3067.\u5b9f\u88c5\u306e\u78ba\u8a8d\u306f\u3057\u3066\u306a\u3044**\n", "tags": ["\u30a4\u30f3\u30d7\u30ea\u30e1\u30f3\u30c6\u30a3\u30f3\u30b0\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30ca\u30eb\u30e9\u30f3\u30b2\u30fc\u30b8\u30ba"]}