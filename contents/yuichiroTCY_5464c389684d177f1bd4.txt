{"context": " More than 1 year has passed since last update.AXI\u30d0\u30b9\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u6301\u3063\u305fIP\u306e\u30c6\u30b9\u30c8\u7528\u306b\u7c21\u5358\u306aBFM (Bus Functional Model)\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u3053\u3061\u3089\u3067\u3059\uff1ahttps://gist.github.com/yuichiroTCY/e9391121cf9d47a69533\n\u73fe\u5728\u3001Xilinx AXI DataMover \u3092\u7d44\u307f\u8fbc\u3093\u3060IP\u306e\u30c6\u30b9\u30c8\u306b\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u4eca\u306e\u3068\u3053\u308d\u5fc5\u8981\u5341\u5206\u3067\u3059\u3002\n\u3076\u3063\u3061\u3083\u3051AXI\u306e\u4ed5\u69d8\u66f8\u306f\u8aad\u3093\u3067\u3044\u307e\u305b\u3093\u3002AXI DataMover\u306e\u52d5\u4f5c\u306b\u5408\u308f\u305b\u3066\u66f8\u3044\u305f\u3060\u3051\u3067\u3059\u3002\n\nQueue\nRead\u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u3059\u304c\u3001araddr,arvalid,arready\u3067\u8aad\u307f\u51fa\u3057\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u5b9a\u3057\u305f\u3042\u3068\u3001\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u30c7\u30fc\u30bf\u3092Slave\u304c\u51fa\u529b\u3057\u7d42\u308f\u308b\u524d\u306b\u3001\u6b21\u306earaddr\u304c\u5165\u529b\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u8aad\u307f\u51fa\u3057\u30a2\u30c9\u30ec\u30b9\u306f\u30ad\u30e5\u30fc\u306b\u8caf\u3081\u3066\u304a\u304b\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u307f\u305f\u3044\u3067\u3059\u3002\nDataMover\u3092\u4f7f\u3063\u3066\u3044\u3066\u3053\u308c\u306b\u30cf\u30de\u308a\u3001\u5bfe\u5fdc\u3057\u305f\u304f\u3066\u3001Read\u30c1\u30e3\u30f3\u30cd\u30eb\u306eBFM\u3092\u66f8\u304d\u307e\u3057\u305f\u3002Write\u30c1\u30e3\u30f3\u30cd\u30eb\u306f\u304a\u307e\u3051\u3067\u3059\u3002\n\n\u3064\u304b\u3044\u304b\u305f\n\nRead channel\n// Bus parameters\nparameter integer C_M_AXI_DATA_WIDTH = 32;\nparameter integer C_M_AXI_ADDR_WIDTH = 32;\nlocalparam BYTE_PER_WORD = C_M_AXI_DATA_WIDTH / 8;\n\n// Instantiate BFM\nwire [C_M_AXI_ADDR_WIDTH-1 : 0] raddr;\nwire rnext;\naxi_simple_read_bfm #(\n    .C_M_AXI_ID_WIDTH(C_M_AXI_ID_WIDTH),\n    .C_M_AXI_DATA_WIDTH(C_M_AXI_DATA_WIDTH)\n) axi_simple_read_bfm_inst (\n    .m_axi_aclk(m_axi_aclk),\n    .m_axi_aresetn(m_axi_aresetn),\n    .m_axi_arvalid(m_axi_arvalid),\n    .m_axi_arready(m_axi_arready),\n    .m_axi_araddr(m_axi_araddr),\n    .m_axi_arlen(m_axi_arlen),\n    .m_axi_rready(m_axi_rready),\n    .m_axi_rvalid(m_axi_rvalid),\n    .m_axi_rlast(m_axi_rlast),\n    .m_axi_rid(m_axi_rid),\n    .m_axi_rresp(m_axi_rresp),\n    .raddr(raddr),\n    .rnext(rnext)\n);\n\n// Test data buffer parameters\nparameter BUF_LEN = 128;\nparameter BFM_ADDR_BASE = 32'h10000000;\nparameter BFM_ADDR_HIGH = BFM_ADDR_HIGH + BUF_LEN * C_M_AXI_DATA_WIDTH / BYTE_PER_WORD;\n\n// Test data buffer\nreg [C_M_AXI_DATA_WIDTH - 1 : 0] mem [0 : BUF_LEN-1];\ninitial\n    $readmemh(\"some_data.txt\", mem, 0, BUF_LEN-1);\n\n// Reading buffer\nwire [C_M_AXI_ADDR_WIDTH - 1:0] mem_addr = (raddr - BFM_ADDR_BASE) / BYTE_PER_WORD;\nwire rnext_mem = rnext && (BFM_ADDR_BASE <= raddr) && (raddr <= BFM_ADDR_HIGH);\nassign m_axi_rdata = rnext_mem ? mem[mem_addr] : 0;\n\nmem\u3068\u3044\u3046\u30d0\u30c3\u30d5\u30a1\u3092\u7528\u610f\u3057\u3066\u3001AXI\u30d0\u30b9\u7d4c\u7531\u3067\u305d\u308c\u3092\u8aad\u307f\u51fa\u3059\u3088\u3046\u306a\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u306e\u30b3\u30fc\u30c9\u30b9\u30cb\u30da\u30c3\u30c8\u3067\u3059\u3002\n\uff08\u5b9f\u969b\u306b\u79c1\u304c\u4f7f\u3063\u3066\u3044\u308b\u30b3\u30fc\u30c9\u304b\u3089\u4e00\u90e8\u3092\u5207\u308a\u53d6\u3063\u3066\u6574\u7406\u3057\u305f\u3082\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u30b3\u30fc\u30c9\u81ea\u4f53\u306f\u52d5\u304f\u304b\u30c6\u30b9\u30c8\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u96f0\u56f2\u6c17\u3060\u3051\u63b4\u3093\u3067\u304f\u3060\u3055\u3044\uff09\nAXI\u30d0\u30b9\u306e\u4fe1\u53f7\u306e\u3046\u3061\u5fc5\u8981\u306a\u3082\u306e\u3092axi_simple_read_bfm\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5165\u529b\u3057\u307e\u3059\u3002\naxi_simple_read_bfm\u30e2\u30b8\u30e5\u30fc\u30eb\u304b\u3089\u306fraddr\u3068rnext\u306e\u4fe1\u53f7\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\nraddr\u306f\u30a2\u30c9\u30ec\u30b9\u3001rnext\u306f\u8aad\u307f\u51fa\u3057\u30a4\u30cd\u30fc\u30d6\u30eb\u3067\u3059\u3002rnext\u304c\u30a2\u30b5\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u3001m_axi_rdata\u306b\u8aad\u307f\u51fa\u3057\u305f\u3044\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3057\u307e\u3059\u3002\n\u672c\u6765AXI\u30d0\u30b9\u306fready\u4fe1\u53f7\u3068valid\u4fe1\u53f7\u3092\u6301\u3061\u3001read\u30b9\u30ec\u30fc\u30d6\u5074\u306fvalid\u4fe1\u53f7\u3092\u64cd\u4f5c\u3059\u308b\u3053\u3068\u3067\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u64cd\u4f5c\u304c\u3067\u304d\u307e\u3059\u304c\u3001\n\u3053\u306eBFM\u306f\u4e21\u4fe1\u53f7\u3092\u52dd\u624b\u306b\u64cd\u4f5c\u3057\u3001\u305d\u308c\u306b\u5408\u308f\u305b\u3066rnext\u3082\u554f\u7b54\u7121\u7528\u3067\u30a2\u30b5\u30fc\u30c8\u3059\u308b\u306e\u3067\u3001\u30e6\u30fc\u30b6\u30fc\u306f\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u64cd\u4f5c\u3059\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306f\u66f8\u3051\u307e\u305b\u3093\u3002\n\u30c7\u30fc\u30bf\u3092\u30e1\u30e2\u30ea\u306b\u8aad\u3093\u3067\u304a\u3044\u3066\u30a2\u30c9\u30ec\u30b9\u306b\u5fdc\u3058\u3066\u8aad\u307f\u3060\u3059\u3001\u3068\u3044\u3046\u64cd\u4f5c\u304c\u3067\u304d\u308c\u3070\u5341\u5206\u3060\u3063\u305f\u306e\u3067\u3001\u7c21\u5358\u306e\u305f\u3081\u3053\u306e\u3088\u3046\u306a\u4ed5\u69d8\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nWrite channel\n// AXI BFM for Write channel\nparameter BFM_WRITE_ADDR_BASE = 32'h18000000;\nparameter BFM_WRITE_ADDR_HIGH = BFM_WRITE_ADDR_BASE + RESULT_MEM_LEN * BYTE_PER_WORD;\n\nwire [C_M_AXI_ADDR_WIDTH-1:0] waddr;\nwire wnext;\naxi_simple_write_bfm #(\n    .C_M_AXI_ID_WIDTH(C_M_AXI_ID_WIDTH)\n) axi_simple_write_bfm_inst (\n    .m_axi_aclk(m_axi_aclk),\n    .m_axi_aresetn(m_axi_aresetn),\n    .m_axi_awready(m_axi_awready),\n    .m_axi_awlen(m_axi_awlen),\n    .m_axi_awvalid(m_axi_awvalid),\n    .m_axi_awaddr(m_axi_awaddr),\n    .m_axi_wready(m_axi_wready),\n    .m_axi_wvalid(m_axi_wvalid),\n    .m_axi_wlast(m_axi_wlast),\n    .m_axi_bid(m_axi_bid),\n    .m_axi_bresp(m_axi_bresp),\n    .m_axi_bvalid(m_axi_bvalid),\n    .m_axi_bready(m_axi_bready),\n    .waddr(waddr),\n    .wnext(wnext)\n);\n\n\n// \u51fa\u529b\u30d0\u30c3\u30d5\u30a1\ninteger omem_i;\nreg [C_M_AXI_DATA_WIDTH-1:0] output_mem [0:RESULT_MEM_LEN-1];\ninitial\n    for (omem_i=0; omem_i<RESULT_MEM_LEN; omem_i=omem_i+1)\n        output_mem[omem_i] = {C_M_AXI_DATA_WIDTH{1'b0}};\n\nwire wnext_output = wnext && (BFM_WRITE_ADDR_BASE <= waddr) && (waddr <= BFM_WRITE_ADDR_HIGH);\nwire [C_M_AXI_ADDR_WIDTH-1 : 0] output_mem_addr = (waddr - BFM_WRITE_ADDR_BASE)/BYTE_PER_WORD;\nalways @( posedge m_axi_aclk ) begin\n    if ( wnext_output )\n        output_mem[output_mem_addr] <= m_axi_wdata;\nend\n\n\u3053\u3061\u3089\u306fWrite\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u30a2\u30c9\u30ec\u30b9\u306b\u5fdc\u3058\u3066\u30d0\u30c3\u30d5\u30a1\u306b\u8caf\u3081\u308b\u3001\u3068\u3044\u3046\u52d5\u4f5c\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u8caf\u3081\u305f\u30c7\u30fc\u30bf\u306f\u3042\u3068\u3067\u30c1\u30a7\u30c3\u30af\u3059\u308b\u306a\u3069\u3057\u3066\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\n\u3044\u3044\u308f\u3051\nFPGA\u6b74\u534a\u5e74\u304f\u3089\u3044\u306e\u7d20\u4eba\u304c\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u306a\u306e\u3067\u3001\u6307\u6458\u70b9\u306a\u3069\u3042\u308c\u3070\u304a\u9858\u3044\u3057\u307e\u3059\u3002\nAXI\u30d0\u30b9\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u6301\u3063\u305fIP\u306e\u30c6\u30b9\u30c8\u7528\u306b\u7c21\u5358\u306aBFM (Bus Functional Model)\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\n\u3053\u3061\u3089\u3067\u3059\uff1ahttps://gist.github.com/yuichiroTCY/e9391121cf9d47a69533\n\n\u73fe\u5728\u3001Xilinx AXI DataMover \u3092\u7d44\u307f\u8fbc\u3093\u3060IP\u306e\u30c6\u30b9\u30c8\u306b\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u4eca\u306e\u3068\u3053\u308d\u5fc5\u8981\u5341\u5206\u3067\u3059\u3002\n\u3076\u3063\u3061\u3083\u3051AXI\u306e\u4ed5\u69d8\u66f8\u306f\u8aad\u3093\u3067\u3044\u307e\u305b\u3093\u3002AXI DataMover\u306e\u52d5\u4f5c\u306b\u5408\u308f\u305b\u3066\u66f8\u3044\u305f\u3060\u3051\u3067\u3059\u3002\n\n# Queue\nRead\u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u3059\u304c\u3001`araddr`,`arvalid`,`arready`\u3067\u8aad\u307f\u51fa\u3057\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u5b9a\u3057\u305f\u3042\u3068\u3001\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u30c7\u30fc\u30bf\u3092Slave\u304c\u51fa\u529b\u3057\u7d42\u308f\u308b\u524d\u306b\u3001\u6b21\u306e`araddr`\u304c\u5165\u529b\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\n![axi_read.png](https://qiita-image-store.s3.amazonaws.com/0/65141/f3cfc925-1a09-c2f7-8802-bad4fd029dc8.png)\n\n\u8aad\u307f\u51fa\u3057\u30a2\u30c9\u30ec\u30b9\u306f\u30ad\u30e5\u30fc\u306b\u8caf\u3081\u3066\u304a\u304b\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u307f\u305f\u3044\u3067\u3059\u3002\nDataMover\u3092\u4f7f\u3063\u3066\u3044\u3066\u3053\u308c\u306b\u30cf\u30de\u308a\u3001\u5bfe\u5fdc\u3057\u305f\u304f\u3066\u3001Read\u30c1\u30e3\u30f3\u30cd\u30eb\u306eBFM\u3092\u66f8\u304d\u307e\u3057\u305f\u3002Write\u30c1\u30e3\u30f3\u30cd\u30eb\u306f\u304a\u307e\u3051\u3067\u3059\u3002\n\n# \u3064\u304b\u3044\u304b\u305f\n\n## Read channel\n```verilog\n// Bus parameters\nparameter integer C_M_AXI_DATA_WIDTH = 32;\nparameter integer C_M_AXI_ADDR_WIDTH = 32;\nlocalparam BYTE_PER_WORD = C_M_AXI_DATA_WIDTH / 8;\n\n// Instantiate BFM\nwire [C_M_AXI_ADDR_WIDTH-1 : 0] raddr;\nwire rnext;\naxi_simple_read_bfm #(\n\t.C_M_AXI_ID_WIDTH(C_M_AXI_ID_WIDTH),\n\t.C_M_AXI_DATA_WIDTH(C_M_AXI_DATA_WIDTH)\n) axi_simple_read_bfm_inst (\n\t.m_axi_aclk(m_axi_aclk),\n\t.m_axi_aresetn(m_axi_aresetn),\n\t.m_axi_arvalid(m_axi_arvalid),\n\t.m_axi_arready(m_axi_arready),\n\t.m_axi_araddr(m_axi_araddr),\n\t.m_axi_arlen(m_axi_arlen),\n\t.m_axi_rready(m_axi_rready),\n\t.m_axi_rvalid(m_axi_rvalid),\n\t.m_axi_rlast(m_axi_rlast),\n\t.m_axi_rid(m_axi_rid),\n\t.m_axi_rresp(m_axi_rresp),\n\t.raddr(raddr),\n\t.rnext(rnext)\n);\n\n// Test data buffer parameters\nparameter BUF_LEN = 128;\nparameter BFM_ADDR_BASE = 32'h10000000;\nparameter BFM_ADDR_HIGH = BFM_ADDR_HIGH + BUF_LEN * C_M_AXI_DATA_WIDTH / BYTE_PER_WORD;\n\n// Test data buffer\nreg [C_M_AXI_DATA_WIDTH - 1 : 0] mem [0 : BUF_LEN-1];\ninitial\n\t$readmemh(\"some_data.txt\", mem, 0, BUF_LEN-1);\n\n// Reading buffer\nwire [C_M_AXI_ADDR_WIDTH - 1:0] mem_addr = (raddr - BFM_ADDR_BASE) / BYTE_PER_WORD;\nwire rnext_mem = rnext && (BFM_ADDR_BASE <= raddr) && (raddr <= BFM_ADDR_HIGH);\nassign m_axi_rdata = rnext_mem ? mem[mem_addr] : 0;\n```\n\n`mem`\u3068\u3044\u3046\u30d0\u30c3\u30d5\u30a1\u3092\u7528\u610f\u3057\u3066\u3001AXI\u30d0\u30b9\u7d4c\u7531\u3067\u305d\u308c\u3092\u8aad\u307f\u51fa\u3059\u3088\u3046\u306a\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u306e\u30b3\u30fc\u30c9\u30b9\u30cb\u30da\u30c3\u30c8\u3067\u3059\u3002\n\uff08\u5b9f\u969b\u306b\u79c1\u304c\u4f7f\u3063\u3066\u3044\u308b\u30b3\u30fc\u30c9\u304b\u3089\u4e00\u90e8\u3092\u5207\u308a\u53d6\u3063\u3066\u6574\u7406\u3057\u305f\u3082\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u30b3\u30fc\u30c9\u81ea\u4f53\u306f\u52d5\u304f\u304b\u30c6\u30b9\u30c8\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u96f0\u56f2\u6c17\u3060\u3051\u63b4\u3093\u3067\u304f\u3060\u3055\u3044\uff09\n\nAXI\u30d0\u30b9\u306e\u4fe1\u53f7\u306e\u3046\u3061\u5fc5\u8981\u306a\u3082\u306e\u3092`axi_simple_read_bfm`\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5165\u529b\u3057\u307e\u3059\u3002\n`axi_simple_read_bfm`\u30e2\u30b8\u30e5\u30fc\u30eb\u304b\u3089\u306f`raddr`\u3068`rnext`\u306e\u4fe1\u53f7\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n`raddr`\u306f\u30a2\u30c9\u30ec\u30b9\u3001`rnext`\u306f\u8aad\u307f\u51fa\u3057\u30a4\u30cd\u30fc\u30d6\u30eb\u3067\u3059\u3002`rnext`\u304c\u30a2\u30b5\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u3001`m_axi_rdata`\u306b\u8aad\u307f\u51fa\u3057\u305f\u3044\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3057\u307e\u3059\u3002\n\u672c\u6765AXI\u30d0\u30b9\u306fready\u4fe1\u53f7\u3068valid\u4fe1\u53f7\u3092\u6301\u3061\u3001read\u30b9\u30ec\u30fc\u30d6\u5074\u306fvalid\u4fe1\u53f7\u3092\u64cd\u4f5c\u3059\u308b\u3053\u3068\u3067\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u64cd\u4f5c\u304c\u3067\u304d\u307e\u3059\u304c\u3001\n\u3053\u306eBFM\u306f\u4e21\u4fe1\u53f7\u3092\u52dd\u624b\u306b\u64cd\u4f5c\u3057\u3001\u305d\u308c\u306b\u5408\u308f\u305b\u3066`rnext`\u3082\u554f\u7b54\u7121\u7528\u3067\u30a2\u30b5\u30fc\u30c8\u3059\u308b\u306e\u3067\u3001\u30e6\u30fc\u30b6\u30fc\u306f\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u64cd\u4f5c\u3059\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306f\u66f8\u3051\u307e\u305b\u3093\u3002\n\u30c7\u30fc\u30bf\u3092\u30e1\u30e2\u30ea\u306b\u8aad\u3093\u3067\u304a\u3044\u3066\u30a2\u30c9\u30ec\u30b9\u306b\u5fdc\u3058\u3066\u8aad\u307f\u3060\u3059\u3001\u3068\u3044\u3046\u64cd\u4f5c\u304c\u3067\u304d\u308c\u3070\u5341\u5206\u3060\u3063\u305f\u306e\u3067\u3001\u7c21\u5358\u306e\u305f\u3081\u3053\u306e\u3088\u3046\u306a\u4ed5\u69d8\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n## Write channel\n```verilog\n// AXI BFM for Write channel\nparameter BFM_WRITE_ADDR_BASE = 32'h18000000;\nparameter BFM_WRITE_ADDR_HIGH = BFM_WRITE_ADDR_BASE + RESULT_MEM_LEN * BYTE_PER_WORD;\n\nwire [C_M_AXI_ADDR_WIDTH-1:0] waddr;\nwire wnext;\naxi_simple_write_bfm #(\n\t.C_M_AXI_ID_WIDTH(C_M_AXI_ID_WIDTH)\n) axi_simple_write_bfm_inst (\n\t.m_axi_aclk(m_axi_aclk),\n\t.m_axi_aresetn(m_axi_aresetn),\n\t.m_axi_awready(m_axi_awready),\n\t.m_axi_awlen(m_axi_awlen),\n\t.m_axi_awvalid(m_axi_awvalid),\n\t.m_axi_awaddr(m_axi_awaddr),\n\t.m_axi_wready(m_axi_wready),\n\t.m_axi_wvalid(m_axi_wvalid),\n\t.m_axi_wlast(m_axi_wlast),\n\t.m_axi_bid(m_axi_bid),\n\t.m_axi_bresp(m_axi_bresp),\n\t.m_axi_bvalid(m_axi_bvalid),\n\t.m_axi_bready(m_axi_bready),\n\t.waddr(waddr),\n\t.wnext(wnext)\n);\n\n\n// \u51fa\u529b\u30d0\u30c3\u30d5\u30a1\ninteger omem_i;\nreg [C_M_AXI_DATA_WIDTH-1:0] output_mem [0:RESULT_MEM_LEN-1];\ninitial\n\tfor (omem_i=0; omem_i<RESULT_MEM_LEN; omem_i=omem_i+1)\n\t\toutput_mem[omem_i] = {C_M_AXI_DATA_WIDTH{1'b0}};\n\nwire wnext_output = wnext && (BFM_WRITE_ADDR_BASE <= waddr) && (waddr <= BFM_WRITE_ADDR_HIGH);\nwire [C_M_AXI_ADDR_WIDTH-1 : 0] output_mem_addr = (waddr - BFM_WRITE_ADDR_BASE)/BYTE_PER_WORD;\nalways @( posedge m_axi_aclk ) begin\n\tif ( wnext_output )\n\t\toutput_mem[output_mem_addr] <= m_axi_wdata;\nend\n```\n\n\u3053\u3061\u3089\u306fWrite\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u30a2\u30c9\u30ec\u30b9\u306b\u5fdc\u3058\u3066\u30d0\u30c3\u30d5\u30a1\u306b\u8caf\u3081\u308b\u3001\u3068\u3044\u3046\u52d5\u4f5c\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u8caf\u3081\u305f\u30c7\u30fc\u30bf\u306f\u3042\u3068\u3067\u30c1\u30a7\u30c3\u30af\u3059\u308b\u306a\u3069\u3057\u3066\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\n# \u3044\u3044\u308f\u3051\nFPGA\u6b74\u534a\u5e74\u304f\u3089\u3044\u306e\u7d20\u4eba\u304c\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u306a\u306e\u3067\u3001\u6307\u6458\u70b9\u306a\u3069\u3042\u308c\u3070\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n", "tags": ["AXI4", "FPGA", "Verilog"]}