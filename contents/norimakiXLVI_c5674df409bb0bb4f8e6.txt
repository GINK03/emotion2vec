{"context": "\u524d\u56de\u3001\u6dfb\u4ed8\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8ffd\u52a0\u3057\u3066 Command \u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u65b9\u6cd5\u3092\u8a66\u3057\u307e\u3057\u305f\u3002\nXamarin.Forms \u3067\u30a4\u30d9\u30f3\u30c8\u306b Command \u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b\n\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u4e8b\u306f\u3067\u304d\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u65b9\u6cd5\u306f\u30a4\u30d9\u30f3\u30c8\u7a2e\u985e\u6bce\u306b\u6dfb\u4ed8\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u6c4e\u7528\u7684\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u305d\u306e\u305f\u3081\u3001\u4eca\u56de\u306f Command \u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u305f\u3081\u306e Behavior \u3092\u4f5c\u6210\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4f5c\u6210\u3057\u305f Behavior \u306e\u30bd\u30fc\u30b9\n\u4f5c\u6210\u3057\u305f EventToCommand Behavior \u306e\u30bd\u30fc\u30b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\n\nEventToCommand.cs\nusing System;\nusing System.Reflection;\nusing System.Windows.Input;\nusing Xamarin.Forms;\n\nnamespace XFEventToCommandBehavior\n{\n    public class EventToCommand : Behavior<VisualElement>\n    {\n        public static readonly BindableProperty EventNameProperty =\n            BindableProperty.Create(\n                \"EventName\",\n                typeof(string),\n                typeof(EventToCommand),\n                \"\",\n                propertyChanged: OnEventNameChanged);\n\n        public string EventName\n        {\n            get { return (string)GetValue(EventNameProperty); }\n            set { SetValue(EventNameProperty, value); }\n        }\n\n        public static readonly BindableProperty CommandProperty =\n            BindableProperty.Create(\n                \"Command\",\n                typeof(ICommand),\n                typeof(EventToCommand),\n                null);\n\n        public ICommand Command\n        {\n            get { return (ICommand)GetValue(CommandProperty); }\n            set { SetValue(CommandProperty, value); }\n        }\n\n        public static readonly BindableProperty ConverterProperty =\n            BindableProperty.Create(\n                \"Converter\",\n                typeof(IValueConverter),\n                typeof(EventToCommand),\n                null);\n\n        public IValueConverter Converter\n        {\n            get { return (IValueConverter)GetValue(ConverterProperty); }\n            set { SetValue(ConverterProperty, value); }\n        }\n\n        private Delegate eventHandler;\n\n        private VisualElement associatedObject;\n\n        private static void OnEventNameChanged(\n            BindableObject bindable, object oldValue, object newValue)\n        {\n            var behavior = bindable as EventToCommand;\n            if (behavior.associatedObject == null)\n            {\n                return;\n            }\n\n            var oldEventName = oldValue as string;\n            var newEventName = newValue as string;\n\n            behavior.DeregisterEvent(oldEventName);\n            behavior.RegisterEvent(newEventName);\n        }\n\n        protected override void OnAttachedTo(VisualElement bindable)\n        {\n            base.OnAttachedTo(bindable);\n\n            associatedObject = bindable;\n\n            if (bindable.BindingContext != null)\n            {\n                BindingContext = bindable.BindingContext;\n            }\n            bindable.BindingContextChanged += OnBindingContextChanged;\n\n            RegisterEvent(EventName);\n        }\n\n        protected override void OnDetachingFrom(VisualElement bindable)\n        {\n            DeregisterEvent(EventName);\n\n            bindable.BindingContextChanged -= OnBindingContextChanged;\n\n            associatedObject = null;\n\n            base.OnDetachingFrom(bindable);\n        }\n\n        protected override void OnBindingContextChanged()\n        {\n            base.OnBindingContextChanged();\n\n            BindingContext = associatedObject.BindingContext;\n        }\n\n        private void OnBindingContextChanged(object sender, EventArgs e)\n        {\n            OnBindingContextChanged();\n        }\n\n        private void RegisterEvent(string name)\n        {\n            var eventInfo = associatedObject.GetType().GetRuntimeEvent(name);\n            if (eventInfo == null)\n            {\n                return;\n            }\n\n            var methodInfo = typeof(EventToCommand).GetTypeInfo().GetDeclaredMethod(\"OnEvent\");\n            eventHandler = methodInfo.CreateDelegate(eventInfo.EventHandlerType, this);\n            eventInfo.AddEventHandler(associatedObject, eventHandler);\n        }\n\n        private void DeregisterEvent(string name)\n        {\n            if (eventHandler == null)\n            {\n                return;\n            }\n\n            var eventInfo = associatedObject.GetType().GetRuntimeEvent(name);\n            if (eventInfo == null)\n            {\n                return;\n            }\n\n            eventInfo.RemoveEventHandler(associatedObject, eventHandler);\n            eventHandler = null;\n        }\n\n        private void OnEvent(object sender, object eventArgs)\n        {\n            if (Command != null)\n            {\n                object param = eventArgs;\n\n                if (Converter != null)\n                {\n                    param = Converter.Convert(eventArgs, typeof(object), null, null);\n                }\n\n                if (Command.CanExecute(param))\n                {\n                    Command.Execute(param);\n                }\n            }\n        }\n    }\n}\n\n\n\n\u4f5c\u6210\u3057\u305f Behavior \u306e\u8aac\u660e\n\u4f5c\u6210\u3057\u305f Behavior \u3092\u3044\u304f\u3064\u304b\u306b\u308f\u3051\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u6dfb\u4ed8\u30d7\u30ed\u30d1\u30c6\u30a3\n\u4ee5\u4e0b\u306e\u4e09\u7a2e\u985e\u306e\u6dfb\u4ed8\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\npublic static readonly BindableProperty EventNameProperty =\n    BindableProperty.Create(\n        \"EventName\",\n        typeof(string),\n        typeof(EventToCommand),\n        \"\",\n        propertyChanged: OnEventNameChanged);\n\npublic static readonly BindableProperty CommandProperty =\n    BindableProperty.Create(\n        \"Command\",\n        typeof(ICommand),\n        typeof(EventToCommand),\n        null);\n\npublic static readonly BindableProperty ConverterProperty =\n    BindableProperty.Create(\n        \"Converter\",\n        typeof(IValueConverter),\n        typeof(EventToCommand),\n        null);\n\n\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u7528\u9014\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nEventName\n\n\n\u5bfe\u8c61\u306e\u30a4\u30d9\u30f3\u30c8\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\nCommand\n\n\n\u30a4\u30d9\u30f3\u30c8\u767a\u751f\u6642\u306b\u547c\u3073\u51fa\u3059\u30b3\u30de\u30f3\u30c9\uff08ICommand\uff09\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\nConverter\n\n\n\u30a4\u30d9\u30f3\u30c8\u5f15\u6570\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306e\u30b3\u30f3\u30d0\u30fc\u30bf\uff08IValueConverter\uff09\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u7701\u7565\u3057\u305f\u5834\u5408\u306f\u3001\u767a\u751f\u3057\u305f\u30a4\u30d9\u30f3\u30c8\u306e\u30a4\u30d9\u30f3\u30c8\u5f15\u6570\u3092\u305d\u306e\u307e\u307e\u30b3\u30de\u30f3\u30c9\u306b\u6e21\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001\u30a4\u30d9\u30f3\u30c8\u5f15\u6570\u3092\u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u5909\u63db\u3057\u3066\u304b\u3089\u30b3\u30de\u30f3\u30c9\u306b\u6e21\u3057\u307e\u3059\u3002\n\n\n\n\n\u30a2\u30bf\u30c3\u30c1\u304a\u3088\u3073\u30a4\u30d9\u30f3\u30c8\u540d\u5909\u66f4\nBehavior \u304c VisualElement \u306b\u30a2\u30bf\u30c3\u30c1\u3055\u308c\u305f\u5834\u5408\u306e\u51e6\u7406\u3068\u30a4\u30d9\u30f3\u30c8\u540d\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408\u306e\u51e6\u7406\u3067\u3059\u3002\nprivate static void OnEventNameChanged(\n    BindableObject bindable, object oldValue, object newValue)\n{\n    var behavior = bindable as EventToCommand;\n    if (behavior.associatedObject == null)\n    {\n        return;\n    }\n\n    var oldEventName = oldValue as string;\n    var newEventName = newValue as string;\n\n    behavior.DeregisterEvent(oldEventName);\n    behavior.RegisterEvent(newEventName);\n}\n\nprotected override void OnAttachedTo(VisualElement bindable)\n{\n    base.OnAttachedTo(bindable);\n\n    associatedObject = bindable;\n\n    if (bindable.BindingContext != null)\n    {\n        BindingContext = bindable.BindingContext;\n    }\n    bindable.BindingContextChanged += OnBindingContextChanged;\n\n    RegisterEvent(EventName);\n}\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\nOnAttachedTo\uff08\u30a2\u30bf\u30c3\u30c1\uff09\n\n\n\u5bfe\u8c61 VisualElement \u306e\u4fdd\u5b58\u3001BindingContext \u306e\u4f1d\u642c\u3001\u30a4\u30d9\u30f3\u30c8\u767b\u9332\u7b49\u3092\u884c\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306e\u30a4\u30d9\u30f3\u30c8\u767b\u9332\u51e6\u7406\uff08RegisterEvent\uff09\u306e\u8a73\u7d30\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\n\nOnEventNameChanged\uff08\u30a4\u30d9\u30f3\u30c8\u540d\u5909\u66f4\uff09\n\n\n\u30a4\u30d9\u30f3\u30c8\u540d\u5909\u66f4\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3067\u3059\u3002\n\u5bfe\u8c61 VisualElement \u304c\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\uff08OnAttachedTo \u5b9f\u884c\u6e08\u307f\uff09\u5834\u5408\u306f\u3001\u30a4\u30d9\u30f3\u30c8\u767b\u9332\u3092\u89e3\u9664\u3057\u3066\u304b\u3089\u767b\u9332\u3057\u76f4\u3057\u307e\u3059\u3002\n\n\n\n\n\u30a4\u30d9\u30f3\u30c8\u767b\u9332\n\u30a2\u30bf\u30c3\u30c1\u307e\u305f\u306f\u30a4\u30d9\u30f3\u30c8\u540d\u5909\u66f4\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u3001\u30a4\u30d9\u30f3\u30c8\u540d\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u6307\u5b9a\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u306e\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\u3057\u307e\u3059\u3002\nprivate void RegisterEvent(string name)\n{\n    var eventInfo = associatedObject.GetType().GetRuntimeEvent(name);\n    if (eventInfo == null)\n    {\n        return;\n    }\n\n    var methodInfo = typeof(EventToCommand).GetTypeInfo().GetDeclaredMethod(\"OnEvent\");\n    eventHandler = methodInfo.CreateDelegate(eventInfo.EventHandlerType, this);\n    eventInfo.AddEventHandler(associatedObject, eventHandler);\n}\n\n\n\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\n\u6307\u5b9a\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3067\u3059\u3002\nprivate void OnEvent(object sender, object eventArgs)\n{\n    if (Command != null)\n    {\n        object param = eventArgs;\n\n        if (Converter != null)\n        {\n            param = Converter.Convert(eventArgs, typeof(object), null, null);\n        }\n\n        if (Command.CanExecute(param))\n        {\n            Command.Execute(param);\n        }\n    }\n}\n\nConverter \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u30a4\u30d9\u30f3\u30c8\u5f15\u6570\u3092\u5909\u63db\u3057\u3066\u304b\u3089\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n\u4f5c\u6210\u3057\u305f Behavior \u306e\u4f7f\u3044\u65b9\n\u4f5c\u6210\u3057\u305f Behavior \u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u30da\u30fc\u30b8\u306e xaml \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\n\nMainPage.xaml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:vm=\"clr-namespace:XFEventToCommandBehavior.Sample.ViewModels;assembly=XFEventToCommandBehavior.Sample\"\n             xmlns:vw=\"clr-namespace:XFEventToCommandBehavior.Sample.Views;assembly=XFEventToCommandBehavior.Sample\"\n             xmlns:b=\"clr-namespace:XFEventToCommandBehavior;assembly=XFEventToCommandBehavior\"\n             x:Class=\"XFEventToCommandBehavior.Sample.Views.MainPage\">\n\n  <ContentPage.BindingContext>\n    <vm:MainPageViewModel />\n  </ContentPage.BindingContext>\n\n  <ContentPage.Resources>\n    <ResourceDictionary>\n      <vw:NavigationConverter x:Key=\"NavConverter\" />\n    </ResourceDictionary>\n  </ContentPage.Resources>\n\n  <ContentPage.Behaviors>\n    <b:EventToCommand EventName=\"Appearing\" Command=\"{Binding Loaded}\" />\n  </ContentPage.Behaviors>\n\n  <StackLayout>\n    <Label Text=\"{Binding Message.Value}\" FontSize=\"24\" HorizontalOptions=\"Center\" />\n    <WebView Source=\"{Binding Url.Value}\" VerticalOptions=\"FillAndExpand\" HorizontalOptions=\"Fill\" >\n      <WebView.Behaviors>\n        <b:EventToCommand EventName=\"Navigating\" Command=\"{Binding Navigating}\" Converter=\"{StaticResource NavConverter}\" />\n        <b:EventToCommand EventName=\"Navigated\" Command=\"{Binding Navigated}\" Converter=\"{StaticResource NavConverter}\" />\n      </WebView.Behaviors>\n    </WebView>\n  </StackLayout>\n\n</ContentPage>\n\n\n\n\u5358\u7d14\u306a\u30b3\u30de\u30f3\u30c9\u547c\u3073\u51fa\u3057\n\u5358\u7d14\u306b\u30a4\u30d9\u30f3\u30c8\u767a\u751f\u6642\u306b\u30b3\u30de\u30f3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u7b87\u6240\u304c\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u3059\u3002\n<ContentPage.Behaviors>\n  <b:EventToCommand EventName=\"Appearing\" Command=\"{Binding Loaded}\" />\n</ContentPage.Behaviors>\n\n\u5bfe\u8c61 VisualElement\uff08\u3053\u306e\u5834\u5408\u306f ContentPage\uff09\u306e Behaviors \u5185\u306b\u3001\u4f5c\u6210\u3057\u305f EventToCommand \u3092\u5b9a\u7fa9\u3057\u3001\u30a4\u30d9\u30f3\u30c8\u540d\u3068\u30b3\u30de\u30f3\u30c9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u5834\u5408\u306f ContentPage \u306e Appearing \u30a4\u30d9\u30f3\u30c8\u767a\u751f\u6642\u306b\u30d0\u30a4\u30f3\u30c9\u3057\u305f\u30b3\u30de\u30f3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\n\u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u4ecb\u3057\u305f\u30b3\u30de\u30f3\u30c9\u547c\u3073\u51fa\u3057\n\u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u3066\u30a4\u30d9\u30f3\u30c8\u5f15\u6570\u3092\u5909\u63db\u3057\u3066\u304b\u3089\u30b3\u30de\u30f3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u7b87\u6240\u304c\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u3059\u3002\n<WebView Source=\"{Binding Url.Value}\" VerticalOptions=\"FillAndExpand\" HorizontalOptions=\"Fill\" >\n  <WebView.Behaviors>\n    <b:EventToCommand EventName=\"Navigating\" Command=\"{Binding Navigating}\" Converter=\"{StaticResource NavConverter}\" />\n    <b:EventToCommand EventName=\"Navigated\" Command=\"{Binding Navigated}\" Converter=\"{StaticResource NavConverter}\" />\n  </WebView.Behaviors>\n</WebView>\n\n\u4e0a\u8a18\u306e\u5834\u5408\u306f WebView \u306e Navigating \u304a\u3088\u3073 Navigated \u30a4\u30d9\u30f3\u30c8\u767a\u751f\u6642\u306b\u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30a4\u30d9\u30f3\u30c8\u5f15\u6570\u3092\u5909\u63db\u3057\u3066\u304b\u3089\u30d0\u30a4\u30f3\u30c9\u3057\u305f\u30b3\u30de\u30f3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\uff08NavConverter \u306f\u30a4\u30d9\u30f3\u30c8\u5f15\u6570\u304b\u3089 Url \u3092\u53d6\u308a\u51fa\u3057\u3066\u6587\u5b57\u5217\u3068\u3057\u3066\u8fd4\u3059\u30b3\u30f3\u30d0\u30fc\u30bf\uff09\u3002\n\u203b\n\u306a\u304a\u3001Android \u3067\u52d5\u4f5c\u3055\u305b\u305f\u5834\u5408\u3001\u901a\u5e38\u306e\u30da\u30fc\u30b8\u79fb\u52d5\u3067\u306f Navigating \u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u307e\u305b\u3093\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff08Windows \u7cfb\u306f\u767a\u751f\u3059\u308b\u3002iOS \u306f\u672a\u5b9f\u65bd\u306a\u305f\u3081\u4e0d\u660e\uff09\u3002\n\u305f\u3060\u3057\u3001\u79fb\u52d5\u5148\u30da\u30fc\u30b8\u3067\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u308c\u305f\u5834\u5408\u306f Android \u3067\u3082 Navigating \u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\u4f5c\u6210\u3057\u305f Behavior \u304a\u3088\u3073 Behavior \u3092\u4f7f\u7528\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092 GitHub \u306b\u3042\u3052\u3066\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/norimakiXLVI/XFEventToCommandBehavior\n\u4eca\u56de\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u306e\u78ba\u8a8d\u306f Xamarin.Forms v2.2.0.31 \u3067\u884c\u3044\u307e\u3057\u305f\u3002\n\n\u6ce8\u610f\u4e8b\u9805\nGitHub \u306b\u3042\u3052\u305f Behavior \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\uff08XFEventToCommandBehavior\uff09\u306b\u306f Library \u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u30af\u30e9\u30b9\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092 xaml \u306e\u307f\u3067\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u3001Page \u8868\u793a\u6642\u306b FileNotFoundException \u304c\u767a\u751f\u3059\u308b\u554f\u984c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\uff08cs \u5074\u3067\u3082\u4f7f\u7528\u3059\u308b\u4e8b\u3067\u554f\u984c\u304c\u767a\u751f\u3057\u306a\u304f\u306a\u308a\u307e\u3059\uff09\u3002\n\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f App \u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\npublic App()\n{\n    MainPage = new Views.MainPage();\n    XFEventToCommandBehavior.Library.Init();\n}\n\n\u203b\n\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f Behavior \u3092\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u53c2\u7167\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\u306e\u3067\u5b9f\u969b\u306b\u306f\u3053\u306e\u547c\u3073\u51fa\u3057\u306f\u4e0d\u8981\u3067\u3059\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u53c2\u7167\u3059\u308b\u5834\u5408\u306e\u4f8b\u3068\u3057\u3066\u8a18\u8f09\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u524d\u56de\u3001\u6dfb\u4ed8\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8ffd\u52a0\u3057\u3066 Command \u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u65b9\u6cd5\u3092\u8a66\u3057\u307e\u3057\u305f\u3002\n[Xamarin.Forms \u3067\u30a4\u30d9\u30f3\u30c8\u306b Command \u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b](http://qiita.com/norimakiXLVI/items/36b6e6157f4b3af8283c)\n\n\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u4e8b\u306f\u3067\u304d\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u65b9\u6cd5\u306f\u30a4\u30d9\u30f3\u30c8\u7a2e\u985e\u6bce\u306b\u6dfb\u4ed8\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u6c4e\u7528\u7684\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u305d\u306e\u305f\u3081\u3001\u4eca\u56de\u306f Command \u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u305f\u3081\u306e Behavior \u3092\u4f5c\u6210\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u4f5c\u6210\u3057\u305f Behavior \u306e\u30bd\u30fc\u30b9\n\u4f5c\u6210\u3057\u305f EventToCommand Behavior \u306e\u30bd\u30fc\u30b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\n\n```csharp:EventToCommand.cs\nusing System;\nusing System.Reflection;\nusing System.Windows.Input;\nusing Xamarin.Forms;\n\nnamespace XFEventToCommandBehavior\n{\n\tpublic class EventToCommand : Behavior<VisualElement>\n\t{\n\t\tpublic static readonly BindableProperty EventNameProperty =\n\t\t\tBindableProperty.Create(\n\t\t\t\t\"EventName\",\n\t\t\t\ttypeof(string),\n\t\t\t\ttypeof(EventToCommand),\n\t\t\t\t\"\",\n\t\t\t\tpropertyChanged: OnEventNameChanged);\n\n\t\tpublic string EventName\n\t\t{\n\t\t\tget { return (string)GetValue(EventNameProperty); }\n\t\t\tset { SetValue(EventNameProperty, value); }\n\t\t}\n\n\t\tpublic static readonly BindableProperty CommandProperty =\n\t\t\tBindableProperty.Create(\n\t\t\t\t\"Command\",\n\t\t\t\ttypeof(ICommand),\n\t\t\t\ttypeof(EventToCommand),\n\t\t\t\tnull);\n\n\t\tpublic ICommand Command\n\t\t{\n\t\t\tget { return (ICommand)GetValue(CommandProperty); }\n\t\t\tset { SetValue(CommandProperty, value); }\n\t\t}\n\n\t\tpublic static readonly BindableProperty ConverterProperty =\n\t\t\tBindableProperty.Create(\n\t\t\t\t\"Converter\",\n\t\t\t\ttypeof(IValueConverter),\n\t\t\t\ttypeof(EventToCommand),\n\t\t\t\tnull);\n\n\t\tpublic IValueConverter Converter\n\t\t{\n\t\t\tget { return (IValueConverter)GetValue(ConverterProperty); }\n\t\t\tset { SetValue(ConverterProperty, value); }\n\t\t}\n\n\t\tprivate Delegate eventHandler;\n\n\t\tprivate VisualElement associatedObject;\n\n\t\tprivate static void OnEventNameChanged(\n\t\t\tBindableObject bindable, object oldValue, object newValue)\n\t\t{\n\t\t\tvar behavior = bindable as EventToCommand;\n\t\t\tif (behavior.associatedObject == null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar oldEventName = oldValue as string;\n\t\t\tvar newEventName = newValue as string;\n\n\t\t\tbehavior.DeregisterEvent(oldEventName);\n\t\t\tbehavior.RegisterEvent(newEventName);\n\t\t}\n\n\t\tprotected override void OnAttachedTo(VisualElement bindable)\n\t\t{\n\t\t\tbase.OnAttachedTo(bindable);\n\n\t\t\tassociatedObject = bindable;\n\n\t\t\tif (bindable.BindingContext != null)\n\t\t\t{\n\t\t\t\tBindingContext = bindable.BindingContext;\n\t\t\t}\n\t\t\tbindable.BindingContextChanged += OnBindingContextChanged;\n\n\t\t\tRegisterEvent(EventName);\n\t\t}\n\n\t\tprotected override void OnDetachingFrom(VisualElement bindable)\n\t\t{\n\t\t\tDeregisterEvent(EventName);\n\n\t\t\tbindable.BindingContextChanged -= OnBindingContextChanged;\n\n\t\t\tassociatedObject = null;\n\n\t\t\tbase.OnDetachingFrom(bindable);\n\t\t}\n\n\t\tprotected override void OnBindingContextChanged()\n\t\t{\n\t\t\tbase.OnBindingContextChanged();\n\n\t\t\tBindingContext = associatedObject.BindingContext;\n\t\t}\n\n\t\tprivate void OnBindingContextChanged(object sender, EventArgs e)\n\t\t{\n\t\t\tOnBindingContextChanged();\n\t\t}\n\n\t\tprivate void RegisterEvent(string name)\n\t\t{\n\t\t\tvar eventInfo = associatedObject.GetType().GetRuntimeEvent(name);\n\t\t\tif (eventInfo == null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar methodInfo = typeof(EventToCommand).GetTypeInfo().GetDeclaredMethod(\"OnEvent\");\n\t\t\teventHandler = methodInfo.CreateDelegate(eventInfo.EventHandlerType, this);\n\t\t\teventInfo.AddEventHandler(associatedObject, eventHandler);\n\t\t}\n\n\t\tprivate void DeregisterEvent(string name)\n\t\t{\n\t\t\tif (eventHandler == null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar eventInfo = associatedObject.GetType().GetRuntimeEvent(name);\n\t\t\tif (eventInfo == null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teventInfo.RemoveEventHandler(associatedObject, eventHandler);\n\t\t\teventHandler = null;\n\t\t}\n\n\t\tprivate void OnEvent(object sender, object eventArgs)\n\t\t{\n\t\t\tif (Command != null)\n\t\t\t{\n\t\t\t\tobject param = eventArgs;\n\n\t\t\t\tif (Converter != null)\n\t\t\t\t{\n\t\t\t\t\tparam = Converter.Convert(eventArgs, typeof(object), null, null);\n\t\t\t\t}\n\n\t\t\t\tif (Command.CanExecute(param))\n\t\t\t\t{\n\t\t\t\t\tCommand.Execute(param);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n# \u4f5c\u6210\u3057\u305f Behavior \u306e\u8aac\u660e\n\u4f5c\u6210\u3057\u305f Behavior \u3092\u3044\u304f\u3064\u304b\u306b\u308f\u3051\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\n## \u6dfb\u4ed8\u30d7\u30ed\u30d1\u30c6\u30a3\n\u4ee5\u4e0b\u306e\u4e09\u7a2e\u985e\u306e\u6dfb\u4ed8\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\n```csharp\npublic static readonly BindableProperty EventNameProperty =\n\tBindableProperty.Create(\n\t\t\"EventName\",\n\t\ttypeof(string),\n\t\ttypeof(EventToCommand),\n\t\t\"\",\n\t\tpropertyChanged: OnEventNameChanged);\n\npublic static readonly BindableProperty CommandProperty =\n\tBindableProperty.Create(\n\t\t\"Command\",\n\t\ttypeof(ICommand),\n\t\ttypeof(EventToCommand),\n\t\tnull);\n\npublic static readonly BindableProperty ConverterProperty =\n\tBindableProperty.Create(\n\t\t\"Converter\",\n\t\ttypeof(IValueConverter),\n\t\ttypeof(EventToCommand),\n\t\tnull);\n```\n\n\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u7528\u9014\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n* EventName\n    * \u5bfe\u8c61\u306e\u30a4\u30d9\u30f3\u30c8\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n* Command\n    * \u30a4\u30d9\u30f3\u30c8\u767a\u751f\u6642\u306b\u547c\u3073\u51fa\u3059\u30b3\u30de\u30f3\u30c9\uff08ICommand\uff09\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n* Converter\n    * \u30a4\u30d9\u30f3\u30c8\u5f15\u6570\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306e\u30b3\u30f3\u30d0\u30fc\u30bf\uff08IValueConverter\uff09\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n    * \u7701\u7565\u3057\u305f\u5834\u5408\u306f\u3001\u767a\u751f\u3057\u305f\u30a4\u30d9\u30f3\u30c8\u306e\u30a4\u30d9\u30f3\u30c8\u5f15\u6570\u3092\u305d\u306e\u307e\u307e\u30b3\u30de\u30f3\u30c9\u306b\u6e21\u3057\u307e\u3059\u3002\n    * \u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001\u30a4\u30d9\u30f3\u30c8\u5f15\u6570\u3092\u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u5909\u63db\u3057\u3066\u304b\u3089\u30b3\u30de\u30f3\u30c9\u306b\u6e21\u3057\u307e\u3059\u3002\n\n## \u30a2\u30bf\u30c3\u30c1\u304a\u3088\u3073\u30a4\u30d9\u30f3\u30c8\u540d\u5909\u66f4\nBehavior \u304c VisualElement \u306b\u30a2\u30bf\u30c3\u30c1\u3055\u308c\u305f\u5834\u5408\u306e\u51e6\u7406\u3068\u30a4\u30d9\u30f3\u30c8\u540d\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408\u306e\u51e6\u7406\u3067\u3059\u3002\n\n```csharp\nprivate static void OnEventNameChanged(\n\tBindableObject bindable, object oldValue, object newValue)\n{\n\tvar behavior = bindable as EventToCommand;\n\tif (behavior.associatedObject == null)\n\t{\n\t\treturn;\n\t}\n\n\tvar oldEventName = oldValue as string;\n\tvar newEventName = newValue as string;\n\n\tbehavior.DeregisterEvent(oldEventName);\n\tbehavior.RegisterEvent(newEventName);\n}\n\nprotected override void OnAttachedTo(VisualElement bindable)\n{\n\tbase.OnAttachedTo(bindable);\n\n\tassociatedObject = bindable;\n\n\tif (bindable.BindingContext != null)\n\t{\n\t\tBindingContext = bindable.BindingContext;\n\t}\n\tbindable.BindingContextChanged += OnBindingContextChanged;\n\n\tRegisterEvent(EventName);\n}\n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\n* OnAttachedTo\uff08\u30a2\u30bf\u30c3\u30c1\uff09\n    * \u5bfe\u8c61 VisualElement \u306e\u4fdd\u5b58\u3001BindingContext \u306e\u4f1d\u642c\u3001\u30a4\u30d9\u30f3\u30c8\u767b\u9332\u7b49\u3092\u884c\u3044\u307e\u3059\u3002\n    \u5b9f\u969b\u306e\u30a4\u30d9\u30f3\u30c8\u767b\u9332\u51e6\u7406\uff08RegisterEvent\uff09\u306e\u8a73\u7d30\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n* OnEventNameChanged\uff08\u30a4\u30d9\u30f3\u30c8\u540d\u5909\u66f4\uff09\n    * \u30a4\u30d9\u30f3\u30c8\u540d\u5909\u66f4\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3067\u3059\u3002\n    * \u5bfe\u8c61 VisualElement \u304c\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\uff08OnAttachedTo \u5b9f\u884c\u6e08\u307f\uff09\u5834\u5408\u306f\u3001\u30a4\u30d9\u30f3\u30c8\u767b\u9332\u3092\u89e3\u9664\u3057\u3066\u304b\u3089\u767b\u9332\u3057\u76f4\u3057\u307e\u3059\u3002\n\n## \u30a4\u30d9\u30f3\u30c8\u767b\u9332\n\u30a2\u30bf\u30c3\u30c1\u307e\u305f\u306f\u30a4\u30d9\u30f3\u30c8\u540d\u5909\u66f4\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u3001\u30a4\u30d9\u30f3\u30c8\u540d\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u6307\u5b9a\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u306e\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\n```csharp\nprivate void RegisterEvent(string name)\n{\n\tvar eventInfo = associatedObject.GetType().GetRuntimeEvent(name);\n\tif (eventInfo == null)\n\t{\n\t\treturn;\n\t}\n\n\tvar methodInfo = typeof(EventToCommand).GetTypeInfo().GetDeclaredMethod(\"OnEvent\");\n\teventHandler = methodInfo.CreateDelegate(eventInfo.EventHandlerType, this);\n\teventInfo.AddEventHandler(associatedObject, eventHandler);\n}\n```\n\n## \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\n\u6307\u5b9a\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3067\u3059\u3002\n\n```csharp\nprivate void OnEvent(object sender, object eventArgs)\n{\n\tif (Command != null)\n\t{\n\t\tobject param = eventArgs;\n\n\t\tif (Converter != null)\n\t\t{\n\t\t\tparam = Converter.Convert(eventArgs, typeof(object), null, null);\n\t\t}\n\n\t\tif (Command.CanExecute(param))\n\t\t{\n\t\t\tCommand.Execute(param);\n\t\t}\n\t}\n}\n```\n\nConverter \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u30a4\u30d9\u30f3\u30c8\u5f15\u6570\u3092\u5909\u63db\u3057\u3066\u304b\u3089\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n# \u4f5c\u6210\u3057\u305f Behavior \u306e\u4f7f\u3044\u65b9\n\u4f5c\u6210\u3057\u305f Behavior \u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u30da\u30fc\u30b8\u306e xaml \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\n\n```xml:MainPage.xaml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:vm=\"clr-namespace:XFEventToCommandBehavior.Sample.ViewModels;assembly=XFEventToCommandBehavior.Sample\"\n             xmlns:vw=\"clr-namespace:XFEventToCommandBehavior.Sample.Views;assembly=XFEventToCommandBehavior.Sample\"\n             xmlns:b=\"clr-namespace:XFEventToCommandBehavior;assembly=XFEventToCommandBehavior\"\n             x:Class=\"XFEventToCommandBehavior.Sample.Views.MainPage\">\n\n  <ContentPage.BindingContext>\n    <vm:MainPageViewModel />\n  </ContentPage.BindingContext>\n\n  <ContentPage.Resources>\n    <ResourceDictionary>\n      <vw:NavigationConverter x:Key=\"NavConverter\" />\n    </ResourceDictionary>\n  </ContentPage.Resources>\n\n  <ContentPage.Behaviors>\n    <b:EventToCommand EventName=\"Appearing\" Command=\"{Binding Loaded}\" />\n  </ContentPage.Behaviors>\n\n  <StackLayout>\n    <Label Text=\"{Binding Message.Value}\" FontSize=\"24\" HorizontalOptions=\"Center\" />\n    <WebView Source=\"{Binding Url.Value}\" VerticalOptions=\"FillAndExpand\" HorizontalOptions=\"Fill\" >\n      <WebView.Behaviors>\n        <b:EventToCommand EventName=\"Navigating\" Command=\"{Binding Navigating}\" Converter=\"{StaticResource NavConverter}\" />\n        <b:EventToCommand EventName=\"Navigated\" Command=\"{Binding Navigated}\" Converter=\"{StaticResource NavConverter}\" />\n      </WebView.Behaviors>\n    </WebView>\n  </StackLayout>\n\n</ContentPage>\n```\n\n## \u5358\u7d14\u306a\u30b3\u30de\u30f3\u30c9\u547c\u3073\u51fa\u3057\n\u5358\u7d14\u306b\u30a4\u30d9\u30f3\u30c8\u767a\u751f\u6642\u306b\u30b3\u30de\u30f3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u7b87\u6240\u304c\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u3059\u3002\n\n```xml\n<ContentPage.Behaviors>\n  <b:EventToCommand EventName=\"Appearing\" Command=\"{Binding Loaded}\" />\n</ContentPage.Behaviors>\n```\n\n\u5bfe\u8c61 VisualElement\uff08\u3053\u306e\u5834\u5408\u306f ContentPage\uff09\u306e Behaviors \u5185\u306b\u3001\u4f5c\u6210\u3057\u305f EventToCommand \u3092\u5b9a\u7fa9\u3057\u3001\u30a4\u30d9\u30f3\u30c8\u540d\u3068\u30b3\u30de\u30f3\u30c9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u5834\u5408\u306f ContentPage \u306e Appearing \u30a4\u30d9\u30f3\u30c8\u767a\u751f\u6642\u306b\u30d0\u30a4\u30f3\u30c9\u3057\u305f\u30b3\u30de\u30f3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\n## \u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u4ecb\u3057\u305f\u30b3\u30de\u30f3\u30c9\u547c\u3073\u51fa\u3057\n\u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u3066\u30a4\u30d9\u30f3\u30c8\u5f15\u6570\u3092\u5909\u63db\u3057\u3066\u304b\u3089\u30b3\u30de\u30f3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u7b87\u6240\u304c\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u3059\u3002\n\n```xml\n<WebView Source=\"{Binding Url.Value}\" VerticalOptions=\"FillAndExpand\" HorizontalOptions=\"Fill\" >\n  <WebView.Behaviors>\n    <b:EventToCommand EventName=\"Navigating\" Command=\"{Binding Navigating}\" Converter=\"{StaticResource NavConverter}\" />\n    <b:EventToCommand EventName=\"Navigated\" Command=\"{Binding Navigated}\" Converter=\"{StaticResource NavConverter}\" />\n  </WebView.Behaviors>\n</WebView>\n```\n\n\u4e0a\u8a18\u306e\u5834\u5408\u306f WebView \u306e Navigating \u304a\u3088\u3073 Navigated \u30a4\u30d9\u30f3\u30c8\u767a\u751f\u6642\u306b\u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30a4\u30d9\u30f3\u30c8\u5f15\u6570\u3092\u5909\u63db\u3057\u3066\u304b\u3089\u30d0\u30a4\u30f3\u30c9\u3057\u305f\u30b3\u30de\u30f3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\uff08NavConverter \u306f\u30a4\u30d9\u30f3\u30c8\u5f15\u6570\u304b\u3089 Url \u3092\u53d6\u308a\u51fa\u3057\u3066\u6587\u5b57\u5217\u3068\u3057\u3066\u8fd4\u3059\u30b3\u30f3\u30d0\u30fc\u30bf\uff09\u3002\n\n\u203b\n\u306a\u304a\u3001Android \u3067\u52d5\u4f5c\u3055\u305b\u305f\u5834\u5408\u3001\u901a\u5e38\u306e\u30da\u30fc\u30b8\u79fb\u52d5\u3067\u306f Navigating \u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u307e\u305b\u3093\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff08Windows \u7cfb\u306f\u767a\u751f\u3059\u308b\u3002iOS \u306f\u672a\u5b9f\u65bd\u306a\u305f\u3081\u4e0d\u660e\uff09\u3002\n\u305f\u3060\u3057\u3001\u79fb\u52d5\u5148\u30da\u30fc\u30b8\u3067\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u308c\u305f\u5834\u5408\u306f Android \u3067\u3082 Navigating \u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\n# \u307e\u3068\u3081\n\u4f5c\u6210\u3057\u305f Behavior \u304a\u3088\u3073 Behavior \u3092\u4f7f\u7528\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092 GitHub \u306b\u3042\u3052\u3066\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/norimakiXLVI/XFEventToCommandBehavior\n\n\u4eca\u56de\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u306e\u78ba\u8a8d\u306f Xamarin.Forms v2.2.0.31 \u3067\u884c\u3044\u307e\u3057\u305f\u3002\n\n## \u6ce8\u610f\u4e8b\u9805\nGitHub \u306b\u3042\u3052\u305f Behavior \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\uff08XFEventToCommandBehavior\uff09\u306b\u306f Library \u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3053\u306e\u30af\u30e9\u30b9\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092 xaml \u306e\u307f\u3067\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u3001Page \u8868\u793a\u6642\u306b FileNotFoundException \u304c\u767a\u751f\u3059\u308b\u554f\u984c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\uff08cs \u5074\u3067\u3082\u4f7f\u7528\u3059\u308b\u4e8b\u3067\u554f\u984c\u304c\u767a\u751f\u3057\u306a\u304f\u306a\u308a\u307e\u3059\uff09\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f App \u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\n```csharp\npublic App()\n{\n\tMainPage = new Views.MainPage();\n\tXFEventToCommandBehavior.Library.Init();\n}\n```\n\n\u203b\n\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f Behavior \u3092\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u53c2\u7167\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\u306e\u3067\u5b9f\u969b\u306b\u306f\u3053\u306e\u547c\u3073\u51fa\u3057\u306f\u4e0d\u8981\u3067\u3059\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u53c2\u7167\u3059\u308b\u5834\u5408\u306e\u4f8b\u3068\u3057\u3066\u8a18\u8f09\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n", "tags": ["Xamarin", "Xamarin.Forms"]}