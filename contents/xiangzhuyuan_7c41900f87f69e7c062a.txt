{"context": "http://redux.js.org/docs/api/\n\u5bf9\u4e8eRedux \u672c\u8eab,\u5b83\u53ea\u6709\u5f88\u5c0f\u7684\u4e00\u4e2a API. Redux \u5b9a\u4e49\u4e86\u4e00\u4e2a\u7cfb\u5217\u7684\u7ea6\u5b9a, \u5e2e\u52a9\u4f60\u6765\u5b9e\u73b0(reducer)\u548c\u63d0\u4f9b\u4e00\u4e9b\u5e2e\u52a9\u7c7b\u51fd\u6570\u6765\u7ed1\u5b9a\u8fd9\u4e9b\u7ea6\u5b9a.  \u8fd9\u91cc\u8bf4\u8bf4 redux \u8003\u8651\u7684 state. \u4f60\u53ef\u4ee5\u901a\u8fc7 react-redux \u7ed1\u5b9a\u7684 UI.\n\n\u9876\u5c42Exports\n\ncreateStore(reducer, [preloadedState])\n\n\nCreates a Redux store that holds the complete state tree of your app.\nThere should only be a single store in your app.\n\n\nimport { createStore } from 'redux'\n\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return state.concat([ action.text ])\n    default:\n      return state\n  }\n}\n\nlet store = createStore(todos, [ 'Use Redux' ])\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'Read the docs'\n})\n\nconsole.log(store.getState())\n// [ 'Use Redux', 'Read the docs' ]\n\n\n\ncreateStore(reducer, [preloadedState], [enhancer])\n\nCreates a Redux store that holds the complete state tree of your app.\nThere should only be a single store in your app.\n\nArguments\n\n\nreducer (Function): A reducing function that returns the next state tree, given the current state tree and an action to handle.\npreloadedState: The initial state. You may optionally specify it to hydrate the state from the server in universal apps, or to restore a previously serialized user session. If you produced reducer with combineReducers, this must be a plain object with the same shape as the keys passed to it. Otherwise, you are free to pass anything that your reducer can understand. \u521d\u59cb\u5316\u7684\u72b6\u6001,\nenhancer: The store enhancer. You may optionally specify it to enhance the store with third-party capabilities such as middleware, time travel, persistence, etc. The only store enhancer that ships with Redux is applyMiddleware(). store \u7684\u52a0\u5f3a\u5668, \u4f60\u53ef\u4ee5\u60f3\u8981\u901a\u8fc7\u5b83\u6765\u52a0\u5f3a store, \u901a\u8fc7\u4f7f\u7528\u7b2c\u4e09\u65b9\u7684\u517c\u5bb9\u4e2d\u95f4\u4ef6,\u5982\u65f6\u95f4\u65c5\u884c,\u6301\u4e45\u5316\u7b49.redux \u53ea\u63d0\u4f9b\u4e00\u4e2a\u52a0\u5f3a store \u7684\u65b9\u5f0f\u5c31\u662f applyMiddleware.\n\n\n\ncombineReducers(reducers)\n\n\u968f\u7740\u7a0b\u5e8f\u7684\u53d8\u5927,\u9700\u8981\u5206\u51fa\u5f88\u591a\u7684 reducer \u6765\u5206\u7247\u7ba1\u7406 redux app \u662f state. \u8fd9\u4e2acombineReducers()\u5e2e\u52a9\u51fd\u6570\u4f1a\u5c06\u4e0d\u540c\u503c\u6536\u96c6\u5230\u4e00\u4e2a\u5730\u65b9\u901a\u8fc7createStore. \u7ed3\u679c\u7684 reducer \u4f1a\u628a\u6240\u6709\u7684\u5b50 reducer \u7684\u7ed3\u679c\u6c47\u4e00\u8d77\u7136\u540e\u628a\u653e\u5728\u4e00\u4e2a state \u91cc.\n\napplyMiddleware(...middlewares)\n\nMiddleware is the suggested way to extend Redux with custom functionality. Middleware lets you wrap the store's dispatch method for fun and profit. The key feature of middleware is that it is composable. Multiple middleware can be combined together, where each middleware requires no knowledge of what comes before or after it in the chain.\n\n\nbindActionCreators(actionCreators, dispatch)\ncompose(...functions)\n\n\nComposes functions from right to left. This is a functional programming utility, and is included in Redux as a convenience.\n\n\nStore \u63a5\u53e3\u65b9\u6cd5\n\nStore\n\n\u4fdd\u7559\u5f53\u524d redux app \u7684\u6574\u4e2a\u72b6\u6001\n\n\ngetState()\n\n\n\u8fd4\u56de\u5f53\u524d\u6700\u65b0\u7684\u72b6\u6001\u6811, \u76f8\u5f53\u4e8e reducer \u6700\u540e\u8fd4\u56de\u7684\u7ed3\u679c.\n\n\ndispatch(action)\n\n\n\u89e6\u53d1\u4e00\u4e2a\u52a8\u4f5c, \u8fd9\u4e5f\u5c06\u662f\u552f\u4e00\u4e00\u5904\u53ef\u4ee5\u4fee\u6539\u5f53\u7136 redux app \u7684\u72b6\u6001.\n\n\nsubscribe(listener)\n\n\n\u5b83\u5c06\u4f1a\u8ffd\u52a0\u4e00\u4e2a\u4fee\u6539\u76d1\u542c,\u5982\u679c\u4efb\u4f55\u4e00\u4e2a\u52a8\u4f5c\u88ab\u5206\u53d1dispatch, \u90a3\u4e48\u90fd\u5c06\u4f1a\u89e6\u53d1\u5b83. \u5305\u62ec\u72b6\u6001\u6811\u91cc\u7684\u4efb\u4f55\u90e8\u5206\u88ab\u4fee\u6539.\u800c\u4e14\u5728 callback \u91cc\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528getState() \u65b9\u6cd5\u6765\u53d6\u5230\u5f53\u524d\u6700\u65b0\u7684 state \u72b6\u6001.\n\n\nreplaceReducer(nextReducer)\n\n\nReplaces the reducer currently used by the store to calculate the state.\n\n\n\u4f7f\u7528\u65b9\u6cd5\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u65b9\u5f0f\u6765\u4f7f\u7528:\n//es6\n\nimport { createStore } from 'redux'\n\n//ES5 CommonJS\nvar createStore = require('redux').createStore\n\n\n//ES5 UMD_build\nvar createStore = Redux.createStore\n\n\n\n\nhttp://redux.js.org/docs/api/\n\n\u5bf9\u4e8e`Redux` \u672c\u8eab,\u5b83\u53ea\u6709\u5f88\u5c0f\u7684\u4e00\u4e2a API. Redux \u5b9a\u4e49\u4e86\u4e00\u4e2a\u7cfb\u5217\u7684\u7ea6\u5b9a, \u5e2e\u52a9\u4f60\u6765\u5b9e\u73b0(reducer)\u548c\u63d0\u4f9b\u4e00\u4e9b\u5e2e\u52a9\u7c7b\u51fd\u6570\u6765\u7ed1\u5b9a\u8fd9\u4e9b\u7ea6\u5b9a.  \u8fd9\u91cc\u8bf4\u8bf4 redux \u8003\u8651\u7684 state. \u4f60\u53ef\u4ee5\u901a\u8fc7 react-redux \u7ed1\u5b9a\u7684 UI.\n\n##\u9876\u5c42Exports\n\n- createStore(reducer, [preloadedState])\n\n>Creates a Redux store that holds the complete state tree of your app.\n>There should only be a single store in your app.\n\n```js\n\nimport { createStore } from 'redux'\n\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return state.concat([ action.text ])\n    default:\n      return state\n  }\n}\n\nlet store = createStore(todos, [ 'Use Redux' ])\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  text: 'Read the docs'\n})\n\nconsole.log(store.getState())\n// [ 'Use Redux', 'Read the docs' ]\n```\n\n\n---\n\n> createStore(reducer, [preloadedState], [enhancer])\n\nCreates a Redux store that holds the complete state tree of your app.\n\nThere should only be a single store in your app.\n\n>Arguments\n\n- reducer (Function): A reducing function that returns the next state tree, given the current state tree and an action to handle.\n\n- [preloadedState] (any): The initial state. You may optionally specify it to hydrate the state from the server in universal apps, or to restore a previously serialized user session. If you produced reducer with combineReducers, this must be a plain object with the same shape as the keys passed to it. Otherwise, you are free to pass anything that your reducer can understand. \u521d\u59cb\u5316\u7684\u72b6\u6001,\n\n- [enhancer] (Function): The store enhancer. You may optionally specify it to enhance the store with third-party capabilities such as middleware, time travel, persistence, etc. The only store enhancer that ships with Redux is applyMiddleware(). store \u7684\u52a0\u5f3a\u5668, \u4f60\u53ef\u4ee5\u60f3\u8981\u901a\u8fc7\u5b83\u6765\u52a0\u5f3a store, \u901a\u8fc7\u4f7f\u7528\u7b2c\u4e09\u65b9\u7684\u517c\u5bb9\u4e2d\u95f4\u4ef6,\u5982\u65f6\u95f4\u65c5\u884c,\u6301\u4e45\u5316\u7b49.redux \u53ea\u63d0\u4f9b\u4e00\u4e2a\u52a0\u5f3a store \u7684\u65b9\u5f0f\u5c31\u662f applyMiddleware.\n\n\n---\n\n\n\n\n\n\n- combineReducers(reducers)\n\n\u968f\u7740\u7a0b\u5e8f\u7684\u53d8\u5927,\u9700\u8981\u5206\u51fa\u5f88\u591a\u7684 reducer \u6765\u5206\u7247\u7ba1\u7406 redux app \u662f state. \u8fd9\u4e2a` combineReducers()`\u5e2e\u52a9\u51fd\u6570\u4f1a\u5c06\u4e0d\u540c\u503c\u6536\u96c6\u5230\u4e00\u4e2a\u5730\u65b9\u901a\u8fc7` createStore`. \u7ed3\u679c\u7684 reducer \u4f1a\u628a\u6240\u6709\u7684\u5b50 reducer \u7684\u7ed3\u679c\u6c47\u4e00\u8d77\u7136\u540e\u628a\u653e\u5728\u4e00\u4e2a state \u91cc.\n\n\n- applyMiddleware(...middlewares)\n\nMiddleware is the suggested way to extend Redux with custom functionality. Middleware lets you wrap the store's dispatch method for fun and profit. The key feature of middleware is that it is composable. Multiple middleware can be combined together, where each middleware requires no knowledge of what comes before or after it in the chain.\n\n\n```js\n```\n\n\n\n- bindActionCreators(actionCreators, dispatch)\n\n\n\n- compose(...functions)\n\n>Composes functions from right to left. This is a functional programming utility, and is included in Redux as a convenience.\n\n\n\n##Store \u63a5\u53e3\u65b9\u6cd5\n\n###Store\n\n> \u4fdd\u7559\u5f53\u524d redux app \u7684\u6574\u4e2a\u72b6\u6001\n\n- getState()\n\n>\u8fd4\u56de\u5f53\u524d\u6700\u65b0\u7684\u72b6\u6001\u6811, \u76f8\u5f53\u4e8e reducer \u6700\u540e\u8fd4\u56de\u7684\u7ed3\u679c.\n\n- dispatch(action)\n\n> \u89e6\u53d1\u4e00\u4e2a\u52a8\u4f5c, \u8fd9\u4e5f\u5c06\u662f\u552f\u4e00\u4e00\u5904\u53ef\u4ee5\u4fee\u6539\u5f53\u7136 redux app \u7684\u72b6\u6001.\n\n- subscribe(listener)\n\n>\u5b83\u5c06\u4f1a\u8ffd\u52a0\u4e00\u4e2a\u4fee\u6539\u76d1\u542c,\u5982\u679c\u4efb\u4f55\u4e00\u4e2a\u52a8\u4f5c\u88ab\u5206\u53d1` dispatch`, \u90a3\u4e48\u90fd\u5c06\u4f1a\u89e6\u53d1\u5b83. \u5305\u62ec\u72b6\u6001\u6811\u91cc\u7684\u4efb\u4f55\u90e8\u5206\u88ab\u4fee\u6539.\u800c\u4e14\u5728 callback \u91cc\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528` getState()` \u65b9\u6cd5\u6765\u53d6\u5230\u5f53\u524d\u6700\u65b0\u7684 state \u72b6\u6001.\n\n\n- replaceReducer(nextReducer)\n\n>Replaces the reducer currently used by the store to calculate the state.\n\n\n\n## \u4f7f\u7528\u65b9\u6cd5\n \n\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u65b9\u5f0f\u6765\u4f7f\u7528:\n\n```js\n//es6\n\nimport { createStore } from 'redux'\n```\n\n```js\n//ES5 CommonJS\nvar createStore = require('redux').createStore\n\n```\n\n```js\n//ES5 UMD_build\nvar createStore = Redux.createStore\n\n```\n", "tags": ["redux"]}