{"context": " More than 1 year has passed since last update.Quicklisp\u3067proxy authentication\u3092\u4f7f\u3046\u305f\u3081\u3001Base64\u3078\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u6a5f\u80fd\u3092\u4f5c\u308a\u307e\u3059\u3002\nBase64\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u624b\u9806\u306fWikipedia\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nhttp://ja.wikipedia.org/wiki/Base64\n\n\u5143\u30c7\u30fc\u30bf\nABCDEFG\n   \u2192 bit\u3092\u30ea\u30b9\u30c8\u3067\u8868\u73fe\u3059\u308b\u3002\n(defun to-bit (num)\n  (loop for x from 7 downto 0 collect (ldb (byte 1 x) num)))\n\n(to-bit 65)\n=> (0 1 0 0 0 0 0 1)\n\n\n(defun string-to-bit (str)\n  (map 'list #'to-bit (map 'list #'char-code str)))\n\n(string-to-bit \"ABCDEFG\")\n=> ((0 1 0 0 0 0 0 1) (0 1 0 0 0 0 1 0) (0 1 0 0 0 0 1 1) (0 1 0 0 0 1 0 0) (0 1 0 0 0 1 0 1) (0 1 0 0 0 1 1 0) (0 1 0 0 0 1 1 1))\n\n\n(defun flatten (x)\n  (labels ((rec (x acc)\n             (cond ((null x) acc)\n                   ((atom x) (cons x acc))\n                   (t (rec (car x) (rec (cdr x) acc))))))\n    (rec x nil)))\n\n(flatten (string-to-bit \"ABCDEFG\"))\n=> (0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 0 0 0 0 1 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 1 0 0 1 0 0 0 1 1 1)\n\n\u203bflatten\u306fOnLisp\u304b\u3089\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n6\u30d3\u30c3\u30c8\u305a\u3064\u306b\u5206\u5272\n\u307e\u305a\u306f\u30ea\u30b9\u30c8\u3092\u6307\u5b9a\u3055\u308c\u305f\u9577\u3055\u3067\u5206\u5272\u3059\u308b\u95a2\u6570\u3002\u591a\u5024\u3092\u4f7f\u3046\u3002\n(defun take-list (list num)\n  (labels ((take-n (list num acc)\n             (if (or (<= num 0)\n                     (null list))\n                 (values (nreverse acc) list)\n                 (take-n (cdr list) (- num 1) (cons (car list) acc)))))\n    (take-n list num '())))\n\n(take-list '(1 2 3 4 5) 3)\n=> (1 2 3)\n   (4 5)\n\n(take-list '(1 2 3 4 5) 6)\n=> (1 2 3 4 5)\n   NIL\n\n\u4e0a\u8a18\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001\u6307\u5b9a\u3055\u308c\u305f\u9577\u3055\u3067\u30ea\u30b9\u30c8\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\u3002\n(defun split (list num)\n  (labels ((split (list acc)\n             (multiple-value-bind (six rest)\n                 (take-list list num)\n               (if (null rest)\n                   (nreverse (cons six acc))\n                   (split rest (cons six acc))))))\n    (split list '())))\n\n(split (flatten (string-to-bit \"ABCDEFG\")) 6)\n=> ((0 1 0 0 0 0) (0 1 0 1 0 0) (0 0 1 0 0 1) (0 0 0 0 1 1) (0 1 0 0 0 1) (0 0 0 1 0 0) (0 1 0 1 0 1) (0 0 0 1 1 0) (0 1 0 0 0 1) (1 1))\n\n\n\u3042\u307e\u308a\u3092\u88dc\u3046\n\u30ea\u30b9\u30c8\u304c\u6307\u5b9a\u3055\u308c\u305f\u9577\u3055\u672a\u6e80\u306e\u5834\u5408\u3001\u8a70\u3081\u7269\u3092\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n(defun rpad (list padsize &key (pad 0))\n  (labels ((right-padding (list padsize acc)\n             (if (null list)\n                 (nreverse acc)\n                 (let ((item (car list)))\n                   (if (< (length item) padsize)\n                       (right-padding (cdr list) padsize (cons\n                                                           (append\n                                                             item\n                                                             (make-list\n                                                               (- padsize (length item))\n                                                               :initial-element pad))\n                                                           acc))\n                       (right-padding (cdr list) padsize (cons item acc)))))))\n    (right-padding list padsize '())))\n\n(rpad '((1 2) (3 4) (5)) 2)\n=> ((1 2) (3 4) (5 0))\n(rpad '((1 2) (3 4) (5)) 2 :pad \"a\")\n=> ((1 2) (3 4) (5 \"a\"))\n\n(rpad (split (flatten (string-to-bit \"ABCDEFG\")) 6) 6)\n=> ((0 1 0 0 0 0) (0 1 0 1 0 0) (0 0 1 0 0 1) (0 0 0 0 1 1) (0 1 0 0 0 1) (0 0 0 1 0 0) (0 1 0 1 0 1) (0 0 0 1 1 0) (0 1 0 0 0 1) (1 1 0 0 0 0))\n\nrpad\u306f\u5f8c\u306b=\u3092\u8ffd\u52a0\u3059\u308b\u306e\u306b\u3082\u4f7f\u3046\u306e\u3067\u3001key\u3067pad\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5909\u63db\u8868\u306b\u3088\u308a\u30014\u6587\u5b57\u305a\u3064\u5909\u63db\n\u307e\u305a\u306f\u30ea\u30b9\u30c8\u3067\u8868\u73fe\u3057\u305f\u30d0\u30a4\u30ca\u30ea\u3092\u5b9f\u969b\u306e\u5024\u306b\u623b\u3057\u307e\u3059\u3002\n(defun bit-to-num (list)\n  (let ((ms (length list)))\n    (loop for x in list\n          for y downfrom (1- ms)\n          sum (ash x y))))\n\n(bit-to-num '(0 0 0 1))\n=> 1\n(bit-to-num '(1 0 0 1))\n=> 9\n(bit-to-num '(1 1 0 1 1 0))\n=> 54\n\n\u5024\u304b\u3089\u8a72\u5f53\u3059\u308b\u6587\u5b57\u3092\u62bd\u51fa\u3057\u307e\u3059\u30020\u304cA\u30011\u304cB\u30fb\u30fb\u30fb\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089aref\u3067\u53d6\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n(map 'list #'bit-to-num (rpad (split (flatten (string-to-bit \"ABCDEFG\")) 6) 6))\n=> (16 20 9 3 17 4 21 6 17 48)\n(map 'list #'(lambda (x)\n               (aref \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\" x))\n           (map 'list #'bit-to-num (rpad (split (flatten (string-to-bit \"ABCDEFG\")) 6) 6)))\n=> (#\\Q #\\U #\\J #\\D #\\R #\\E #\\V #\\G #\\R #\\w)\n\n4\u6587\u5b57\u305a\u3064\u306b\u307e\u3068\u3081\u307e\u3059\u3002\n(split\n  (map 'list #'(lambda (x)\n                 (aref \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\" x))\n             (map 'list #'bit-to-num (rpad (split (flatten (string-to-bit \"ABCDEFG\")) 6) 6)))\n  4)\n=> ((#\\Q #\\U #\\J #\\D) (#\\R #\\E #\\V #\\G) (#\\R #\\w))\n\n\n2\u6587\u5b57\u4f59\u308b\u306e\u3067\u30012\u6587\u5b57\u5206 = \u8a18\u53f7\u3092\u8ffd\u52a0\u3057\u30664\u6587\u5b57\u306b\u3059\u308b\n\u5148\u307b\u3069\u306erpad\u3092\u4f7f\u3044\u307e\u3059\u3002\n(rpad\n  (split\n    (map 'list #'(lambda (x)\n                   (aref \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\" x))\n               (map 'list #'bit-to-num (rpad (split (flatten (string-to-bit \"ABCDEFG\")) 6) 6)))\n    4)\n  4 :pad #\\=)\n=> ((#\\Q #\\U #\\J #\\D) (#\\R #\\E #\\V #\\G) (#\\R #\\w #\\= #\\=))\n\n\nBase64\u6587\u5b57\u5217\n\n```cl:\n(format nil \"~{~{~A~}~}\"\n  (rpad\n    (split\n      (map 'list #'(lambda (x)\n                     (aref \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\" x))\n                 (map 'list #'bit-to-num (rpad (split (flatten (string-to-bit \"ABCDEFG\")) 6) 6)))\n      4)\n    4 :pad #\\=))\n=> \"QUJDREVGRw==\"\n\n\n\u307e\u3068\u3081\n(defvar *BASE64TBL* \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\")\n\n(defun to-bit (num)\n  \"convert 1 octet to binary(0/1) list\"\n  (loop for x from 7 downto 0 collect (ldb (byte 1 x) num)))\n\n(defun string-to-bit (str)\n  \"convert string to binary(0/1) list\"\n  (map 'list #'to-bit (map 'list #'char-code str)))\n\n(defun flatten (x)\n  \"flatten list\"\n  (labels ((rec (x acc)\n             (cond ((null x) acc)\n                   ((atom x) (cons x acc))\n                   (t (rec (car x) (rec (cdr x) acc))))))\n    (rec x nil)))\n\n(defun take-list (list num)\n  \"return taken from list(first arguments) passed as the num(second argument) and rest of the list\"\n  (labels ((take-n (list num acc)\n             (if (or (<= num 0)\n                     (null list))\n                 (values (nreverse acc) list)\n                 (take-n (cdr list) (- num 1) (cons (car list) acc)))))\n    (take-n list num '())))\n\n(defun split (list num)\n  \"split list. each list has num(second arguments) items.\"\n  (labels ((split (list acc)\n             (multiple-value-bind (six rest)\n                 (take-list list num)\n               (if (null rest)\n                   (nreverse (cons six acc))\n                   (split rest (cons six acc))))))\n    (split list '())))\n\n(defun rpad (list padsize &key (pad 0))\n  \"if each list's length less than padsize(second arguments), padding pad(default 0) on right side.\"\n  (labels ((right-padding (list padsize acc)\n             (if (null list)\n                 (nreverse acc)\n                 (let ((item (car list)))\n                   (if (< (length item) padsize)\n                       (right-padding (cdr list) padsize (cons\n                                                           (append\n                                                             item\n                                                             (make-list\n                                                               (- padsize (length item))\n                                                               :initial-element pad))\n                                                           acc))\n                       (right-padding (cdr list) padsize (cons item acc)))))))\n    (right-padding list padsize '())))\n\n(defun bit-to-num (list)\n  \"convert binary(0/1) list to number\"\n  (let ((ms (length list)))\n    (loop for x in list\n          for y downfrom (1- ms)\n          sum (ash x y))))\n\n(defun base64-enc (str)\n  \"create base64 encoded string from argument\"\n  (format nil \"~{~{~A~}~}\"\n    (rpad\n      (split\n        (map 'list #'(lambda (x)\n                       (aref *BASE64TBL* x))\n              (map 'list #'bit-to-num\n                   (rpad\n                     (split\n                       (flatten\n                         (string-to-bit str))\n                       6)\n                     6)))\n        4)\n    4 :pad #\\=)))\n\n(defun make-basic-authentication (user password)\n  \"create basic authentication string\"\n  (base64-enc (format nil \"~A:~A\" user password)))\n\n\u306a\u3093\u3068\u306a\u304fScheme\u3063\u307d\u3044\u66f8\u304d\u65b9\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u6b21\u306f\u3053\u308c\u3092Quicklisp\u306b\u7d44\u307f\u8fbc\u307f\u307e\u3059\u3002\nQuicklisp\u3067proxy authentication\u3092\u4f7f\u3046\u305f\u3081\u3001Base64\u3078\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u6a5f\u80fd\u3092\u4f5c\u308a\u307e\u3059\u3002\nBase64\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u624b\u9806\u306fWikipedia\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nhttp://ja.wikipedia.org/wiki/Base64\n\n\n## \u5143\u30c7\u30fc\u30bf\n   ABCDEFG\n   \u2192 bit\u3092\u30ea\u30b9\u30c8\u3067\u8868\u73fe\u3059\u308b\u3002\n\n```cl:\n(defun to-bit (num)\n  (loop for x from 7 downto 0 collect (ldb (byte 1 x) num)))\n\n(to-bit 65)\n=> (0 1 0 0 0 0 0 1)\n\n\n(defun string-to-bit (str)\n  (map 'list #'to-bit (map 'list #'char-code str)))\n\n(string-to-bit \"ABCDEFG\")\n=> ((0 1 0 0 0 0 0 1) (0 1 0 0 0 0 1 0) (0 1 0 0 0 0 1 1) (0 1 0 0 0 1 0 0) (0 1 0 0 0 1 0 1) (0 1 0 0 0 1 1 0) (0 1 0 0 0 1 1 1))\n\n\n(defun flatten (x)\n  (labels ((rec (x acc)\n             (cond ((null x) acc)\n                   ((atom x) (cons x acc))\n                   (t (rec (car x) (rec (cdr x) acc))))))\n    (rec x nil)))\n\n(flatten (string-to-bit \"ABCDEFG\"))\n=> (0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 0 0 0 0 1 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 1 0 0 1 0 0 0 1 1 1)\n```\n\n\u203b```flatten```\u306fOnLisp\u304b\u3089\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n\n## 6\u30d3\u30c3\u30c8\u305a\u3064\u306b\u5206\u5272\n\u307e\u305a\u306f\u30ea\u30b9\u30c8\u3092\u6307\u5b9a\u3055\u308c\u305f\u9577\u3055\u3067\u5206\u5272\u3059\u308b\u95a2\u6570\u3002\u591a\u5024\u3092\u4f7f\u3046\u3002\n\n```cl:\n(defun take-list (list num)\n  (labels ((take-n (list num acc)\n             (if (or (<= num 0)\n                     (null list))\n                 (values (nreverse acc) list)\n                 (take-n (cdr list) (- num 1) (cons (car list) acc)))))\n    (take-n list num '())))\n\n(take-list '(1 2 3 4 5) 3)\n=> (1 2 3)\n   (4 5)\n\n(take-list '(1 2 3 4 5) 6)\n=> (1 2 3 4 5)\n   NIL\n```\n\n\u4e0a\u8a18\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001\u6307\u5b9a\u3055\u308c\u305f\u9577\u3055\u3067\u30ea\u30b9\u30c8\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\u3002\n\n```cl:\n(defun split (list num)\n  (labels ((split (list acc)\n             (multiple-value-bind (six rest)\n                 (take-list list num)\n               (if (null rest)\n                   (nreverse (cons six acc))\n                   (split rest (cons six acc))))))\n    (split list '())))\n\n(split (flatten (string-to-bit \"ABCDEFG\")) 6)\n=> ((0 1 0 0 0 0) (0 1 0 1 0 0) (0 0 1 0 0 1) (0 0 0 0 1 1) (0 1 0 0 0 1) (0 0 0 1 0 0) (0 1 0 1 0 1) (0 0 0 1 1 0) (0 1 0 0 0 1) (1 1))\n```\n\n## \u3042\u307e\u308a\u3092\u88dc\u3046\n\u30ea\u30b9\u30c8\u304c\u6307\u5b9a\u3055\u308c\u305f\u9577\u3055\u672a\u6e80\u306e\u5834\u5408\u3001\u8a70\u3081\u7269\u3092\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n```cl:\n(defun rpad (list padsize &key (pad 0))\n  (labels ((right-padding (list padsize acc)\n             (if (null list)\n                 (nreverse acc)\n                 (let ((item (car list)))\n                   (if (< (length item) padsize)\n                       (right-padding (cdr list) padsize (cons\n                                                           (append\n                                                             item\n                                                             (make-list\n                                                               (- padsize (length item))\n                                                               :initial-element pad))\n                                                           acc))\n                       (right-padding (cdr list) padsize (cons item acc)))))))\n    (right-padding list padsize '())))\n\n(rpad '((1 2) (3 4) (5)) 2)\n=> ((1 2) (3 4) (5 0))\n(rpad '((1 2) (3 4) (5)) 2 :pad \"a\")\n=> ((1 2) (3 4) (5 \"a\"))\n\n(rpad (split (flatten (string-to-bit \"ABCDEFG\")) 6) 6)\n=> ((0 1 0 0 0 0) (0 1 0 1 0 0) (0 0 1 0 0 1) (0 0 0 0 1 1) (0 1 0 0 0 1) (0 0 0 1 0 0) (0 1 0 1 0 1) (0 0 0 1 1 0) (0 1 0 0 0 1) (1 1 0 0 0 0))\n```\n\nrpad\u306f\u5f8c\u306b=\u3092\u8ffd\u52a0\u3059\u308b\u306e\u306b\u3082\u4f7f\u3046\u306e\u3067\u3001key\u3067pad\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n## \u5909\u63db\u8868\u306b\u3088\u308a\u30014\u6587\u5b57\u305a\u3064\u5909\u63db\n\u307e\u305a\u306f\u30ea\u30b9\u30c8\u3067\u8868\u73fe\u3057\u305f\u30d0\u30a4\u30ca\u30ea\u3092\u5b9f\u969b\u306e\u5024\u306b\u623b\u3057\u307e\u3059\u3002\n\n```cl:\n(defun bit-to-num (list)\n  (let ((ms (length list)))\n    (loop for x in list\n          for y downfrom (1- ms)\n          sum (ash x y))))\n\n(bit-to-num '(0 0 0 1))\n=> 1\n(bit-to-num '(1 0 0 1))\n=> 9\n(bit-to-num '(1 1 0 1 1 0))\n=> 54\n```\n\n\u5024\u304b\u3089\u8a72\u5f53\u3059\u308b\u6587\u5b57\u3092\u62bd\u51fa\u3057\u307e\u3059\u30020\u304cA\u30011\u304cB\u30fb\u30fb\u30fb\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089```aref```\u3067\u53d6\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n```cl:\n(map 'list #'bit-to-num (rpad (split (flatten (string-to-bit \"ABCDEFG\")) 6) 6))\n=> (16 20 9 3 17 4 21 6 17 48)\n(map 'list #'(lambda (x)\n               (aref \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\" x))\n           (map 'list #'bit-to-num (rpad (split (flatten (string-to-bit \"ABCDEFG\")) 6) 6)))\n=> (#\\Q #\\U #\\J #\\D #\\R #\\E #\\V #\\G #\\R #\\w)\n```\n\n4\u6587\u5b57\u305a\u3064\u306b\u307e\u3068\u3081\u307e\u3059\u3002\n\n```cl:\n(split\n  (map 'list #'(lambda (x)\n                 (aref \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\" x))\n             (map 'list #'bit-to-num (rpad (split (flatten (string-to-bit \"ABCDEFG\")) 6) 6)))\n  4)\n=> ((#\\Q #\\U #\\J #\\D) (#\\R #\\E #\\V #\\G) (#\\R #\\w))\n```\n\n\n## 2\u6587\u5b57\u4f59\u308b\u306e\u3067\u30012\u6587\u5b57\u5206 = \u8a18\u53f7\u3092\u8ffd\u52a0\u3057\u30664\u6587\u5b57\u306b\u3059\u308b\n\u5148\u307b\u3069\u306erpad\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```cl:\n(rpad\n  (split\n    (map 'list #'(lambda (x)\n                   (aref \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\" x))\n               (map 'list #'bit-to-num (rpad (split (flatten (string-to-bit \"ABCDEFG\")) 6) 6)))\n    4)\n  4 :pad #\\=)\n=> ((#\\Q #\\U #\\J #\\D) (#\\R #\\E #\\V #\\G) (#\\R #\\w #\\= #\\=))\n```\n\n## Base64\u6587\u5b57\u5217\n```format```\u3067\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u3092\u6587\u5b57\u5217\u306b\u3057\u307e\u3059\u3002\n\n```cl:\n(format nil \"~{~{~A~}~}\"\n  (rpad\n    (split\n      (map 'list #'(lambda (x)\n                     (aref \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\" x))\n                 (map 'list #'bit-to-num (rpad (split (flatten (string-to-bit \"ABCDEFG\")) 6) 6)))\n      4)\n    4 :pad #\\=))\n=> \"QUJDREVGRw==\"\n```\n\n## \u307e\u3068\u3081\n\n```cl:\n(defvar *BASE64TBL* \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\")\n\n(defun to-bit (num)\n  \"convert 1 octet to binary(0/1) list\"\n  (loop for x from 7 downto 0 collect (ldb (byte 1 x) num)))\n\n(defun string-to-bit (str)\n  \"convert string to binary(0/1) list\"\n  (map 'list #'to-bit (map 'list #'char-code str)))\n\n(defun flatten (x)\n  \"flatten list\"\n  (labels ((rec (x acc)\n             (cond ((null x) acc)\n                   ((atom x) (cons x acc))\n                   (t (rec (car x) (rec (cdr x) acc))))))\n    (rec x nil)))\n\n(defun take-list (list num)\n  \"return taken from list(first arguments) passed as the num(second argument) and rest of the list\"\n  (labels ((take-n (list num acc)\n             (if (or (<= num 0)\n                     (null list))\n                 (values (nreverse acc) list)\n                 (take-n (cdr list) (- num 1) (cons (car list) acc)))))\n    (take-n list num '())))\n\n(defun split (list num)\n  \"split list. each list has num(second arguments) items.\"\n  (labels ((split (list acc)\n             (multiple-value-bind (six rest)\n                 (take-list list num)\n               (if (null rest)\n                   (nreverse (cons six acc))\n                   (split rest (cons six acc))))))\n    (split list '())))\n\n(defun rpad (list padsize &key (pad 0))\n  \"if each list's length less than padsize(second arguments), padding pad(default 0) on right side.\"\n  (labels ((right-padding (list padsize acc)\n             (if (null list)\n                 (nreverse acc)\n                 (let ((item (car list)))\n                   (if (< (length item) padsize)\n                       (right-padding (cdr list) padsize (cons\n                                                           (append\n                                                             item\n                                                             (make-list\n                                                               (- padsize (length item))\n                                                               :initial-element pad))\n                                                           acc))\n                       (right-padding (cdr list) padsize (cons item acc)))))))\n    (right-padding list padsize '())))\n\n(defun bit-to-num (list)\n  \"convert binary(0/1) list to number\"\n  (let ((ms (length list)))\n    (loop for x in list\n          for y downfrom (1- ms)\n          sum (ash x y))))\n\n(defun base64-enc (str)\n  \"create base64 encoded string from argument\"\n  (format nil \"~{~{~A~}~}\"\n    (rpad\n      (split\n        (map 'list #'(lambda (x)\n                       (aref *BASE64TBL* x))\n              (map 'list #'bit-to-num\n                   (rpad\n                     (split\n                       (flatten\n                         (string-to-bit str))\n                       6)\n                     6)))\n        4)\n    4 :pad #\\=)))\n\n(defun make-basic-authentication (user password)\n  \"create basic authentication string\"\n  (base64-enc (format nil \"~A:~A\" user password)))\n```\n\n\u306a\u3093\u3068\u306a\u304fScheme\u3063\u307d\u3044\u66f8\u304d\u65b9\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u6b21\u306f\u3053\u308c\u3092Quicklisp\u306b\u7d44\u307f\u8fbc\u307f\u307e\u3059\u3002\n", "tags": ["CommonLisp", "common-lisp"]}