{"tags": ["Swift", "\u30e2\u30ca\u30c9"], "context": " More than 1 year has passed since last update.\u8ffd\u8a18\n@autoclosure \u306f\u547c\u3073\u51fa\u3059\u305f\u3073\u306b\u8a55\u4fa1\u3055\u308c\u3066\u3057\u307e\u3046\u3089\u3057\u3044\u306e\u3067\u3001Box \u3092\u4f7f\u3046\u5f62\u306b\u4fee\u6b63\uff08 yad \u3055\u3093\u3001\u3054\u6307\u6458\u6709\u96e3\u3046\u3054\u3056\u3044\u307e\u3057\u305f\uff09\nhttps://github.com/amo12937/amo.Either/tree/v1.1.0\ngit clone -b v1.1.0 git@github.com:amo12937/amo.Either.git\n\n\n\u300c2\u3064\u306e\u578b\u306e\u3069\u3061\u3089\u304b\u300d\u3092\u8868\u3059\u30e2\u30ca\u30c9\u3092\u4f5c\u3063\u305f\u3002\nhttps://github.com/amo12937/amo.Either/tree/v1.0.0\n\n\u4f7f\u3044\u65b9\n\n\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\n\ngit clone -b v1.0.0 git@github.com:amo12937/amo.Either.git\n\n\nxcode \u3067\u30d3\u30eb\u30c9\nProducts/Either.framework \u3092\u4f7f\u3044\u305f\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3078\u30b3\u30d4\u30fc\n\n\n\u4ed5\u69d8\u517c\u30c6\u30b9\u30c8\n\n2\u3064\u306e\u578b\u306e\u3069\u3061\u3089\u304b\u3092\u4fdd\u6301\u3067\u304d\u308b\n\nEitherTests.swift\n    func test_2\u3064\u306e\u578b\u306e\u3069\u3061\u3089\u304b\u3092\u4fdd\u6301\u3067\u304d\u308b() {\n        let n = 1\n        let u = Either<Int, String>.Left(n)\n        XCTAssertEqual(n, u.left()!)\n        XCTAssertTrue(u.right() == nil)\n\n        let s = \"hoge\"\n        let v = Either<Int, String>.Right(s)\n        XCTAssertTrue(v.left() == nil)\n        XCTAssertEqual(s, v.right()!)\n    }\n\n\n\ncoproduct\u306f\u8fd4\u308a\u5024\u304c\u540c\u3058\u578b\u306e2\u3064\u306e\u95a2\u6570\u304b\u3089Either\u578b\u3092\u5f15\u6570\u3068\u3059\u308b\u95a2\u6570\u3092\u8fd4\u3059\n\nEitherTests.swift\n    func test_coproduct\u306f\u8fd4\u308a\u5024\u304c\u540c\u3058\u578b\u306e2\u3064\u306e\u95a2\u6570\u304b\u3089Either\u578b\u3092\u5f15\u6570\u3068\u3059\u308b\u95a2\u6570\u3092\u8fd4\u3059() {\n        var f_count = 0\n        func f(b: Bool) -> String {\n            f_count++\n            return \"\\(b)\"\n        }\n\n        var g_count = 0\n        func g(n: Int) -> String {\n            g_count++\n            return \"\\(n)\"\n        }\n\n        let u = Either.coproduct(f, g)\n\n        let x = Either<Bool, Int>.bind(true)\n        let y = Either<Bool, Int>.bind(1)\n\n        XCTAssertEqual(0, f_count)\n        XCTAssertEqual(\"true\", u(x))\n        XCTAssertEqual(1, f_count)\n\n        XCTAssertEqual(0, g_count)\n        XCTAssertEqual(\"1\", u(y))\n        XCTAssertEqual(1, g_count)\n    }\n\n\n\nbind\u306fEither\u306econstructor\u3068\u540c\u3058\u50cd\u304d\u3092\u3059\u308b\n\nEitherTests.swift\n    func test_bind\u306fEither\u306econstructor\u3068\u540c\u3058\u50cd\u304d\u3092\u3059\u308b() {\n        let n = 1\n        let u = Either<Int, String>.bind(n)\n        XCTAssertEqual(n, u.left()!)\n        XCTAssertTrue(u.right() == nil)\n\n        let s = \"hoge\"\n        let v = Either<Int, String>.bind(s)\n        XCTAssertTrue(v.left() == nil)\n        XCTAssertEqual(s, v.right()!)\n    }\n\n\n\nbindFunc\u306f\u95a2\u6570\u3092bind\u3059\u308b\n\nEitherTests.swift\n    func test_bindFunc\u306f\u95a2\u6570\u3092bind\u3059\u308b() {\n        let l = [\"a\", \"b\", \"c\"]\n\n        let f = {(a: [String]) -> Int in a.count}\n        let u = Either<Int, String>.bindFunc(f)\n        XCTAssertEqual(3, u(l).left()!)\n        XCTAssertTrue(u(l).right() == nil)\n\n        let g = {(a: [String]) -> String in \"\".join(a)}\n        let v = Either<Int, String>.bindFunc(g)\n        XCTAssertTrue(v(l).left() == nil)\n        XCTAssertEqual(\"abc\", v(l).right()!)\n    }\n\n\n\u8ffd\u8a18\n\n`@autoclosure` \u306f\u547c\u3073\u51fa\u3059\u305f\u3073\u306b\u8a55\u4fa1\u3055\u308c\u3066\u3057\u307e\u3046\u3089\u3057\u3044\u306e\u3067\u3001Box<T> \u3092\u4f7f\u3046\u5f62\u306b\u4fee\u6b63\uff08 yad \u3055\u3093\u3001\u3054\u6307\u6458\u6709\u96e3\u3046\u3054\u3056\u3044\u307e\u3057\u305f\uff09\nhttps://github.com/amo12937/amo.Either/tree/v1.1.0\n\n```\ngit clone -b v1.1.0 git@github.com:amo12937/amo.Either.git\n```\n\n------------------------------------\n\u300c2\u3064\u306e\u578b\u306e\u3069\u3061\u3089\u304b\u300d\u3092\u8868\u3059\u30e2\u30ca\u30c9\u3092\u4f5c\u3063\u305f\u3002\n\nhttps://github.com/amo12937/amo.Either/tree/v1.0.0\n\n# \u4f7f\u3044\u65b9\n- \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30af\u30ed\u30fc\u30f3\n\n```\ngit clone -b v1.0.0 git@github.com:amo12937/amo.Either.git\n```\n\n- xcode \u3067\u30d3\u30eb\u30c9\n- Products/Either.framework \u3092\u4f7f\u3044\u305f\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3078\u30b3\u30d4\u30fc\n\n# \u4ed5\u69d8\u517c\u30c6\u30b9\u30c8\n## 2\u3064\u306e\u578b\u306e\u3069\u3061\u3089\u304b\u3092\u4fdd\u6301\u3067\u304d\u308b\n```swift:EitherTests.swift\n    func test_2\u3064\u306e\u578b\u306e\u3069\u3061\u3089\u304b\u3092\u4fdd\u6301\u3067\u304d\u308b() {\n        let n = 1\n        let u = Either<Int, String>.Left(n)\n        XCTAssertEqual(n, u.left()!)\n        XCTAssertTrue(u.right() == nil)\n        \n        let s = \"hoge\"\n        let v = Either<Int, String>.Right(s)\n        XCTAssertTrue(v.left() == nil)\n        XCTAssertEqual(s, v.right()!)\n    }\n```\n\n## coproduct\u306f\u8fd4\u308a\u5024\u304c\u540c\u3058\u578b\u306e2\u3064\u306e\u95a2\u6570\u304b\u3089Either\u578b\u3092\u5f15\u6570\u3068\u3059\u308b\u95a2\u6570\u3092\u8fd4\u3059\n```swift:EitherTests.swift\n    func test_coproduct\u306f\u8fd4\u308a\u5024\u304c\u540c\u3058\u578b\u306e2\u3064\u306e\u95a2\u6570\u304b\u3089Either\u578b\u3092\u5f15\u6570\u3068\u3059\u308b\u95a2\u6570\u3092\u8fd4\u3059() {\n        var f_count = 0\n        func f(b: Bool) -> String {\n            f_count++\n            return \"\\(b)\"\n        }\n        \n        var g_count = 0\n        func g(n: Int) -> String {\n            g_count++\n            return \"\\(n)\"\n        }\n        \n        let u = Either.coproduct(f, g)\n        \n        let x = Either<Bool, Int>.bind(true)\n        let y = Either<Bool, Int>.bind(1)\n        \n        XCTAssertEqual(0, f_count)\n        XCTAssertEqual(\"true\", u(x))\n        XCTAssertEqual(1, f_count)\n        \n        XCTAssertEqual(0, g_count)\n        XCTAssertEqual(\"1\", u(y))\n        XCTAssertEqual(1, g_count)\n    }\n```\n    \n## bind\u306fEither\u306econstructor\u3068\u540c\u3058\u50cd\u304d\u3092\u3059\u308b\n```swift:EitherTests.swift\n    func test_bind\u306fEither\u306econstructor\u3068\u540c\u3058\u50cd\u304d\u3092\u3059\u308b() {\n        let n = 1\n        let u = Either<Int, String>.bind(n)\n        XCTAssertEqual(n, u.left()!)\n        XCTAssertTrue(u.right() == nil)\n        \n        let s = \"hoge\"\n        let v = Either<Int, String>.bind(s)\n        XCTAssertTrue(v.left() == nil)\n        XCTAssertEqual(s, v.right()!)\n    }\n```\n    \n## bindFunc\u306f\u95a2\u6570\u3092bind\u3059\u308b\n```swift:EitherTests.swift\n    func test_bindFunc\u306f\u95a2\u6570\u3092bind\u3059\u308b() {\n        let l = [\"a\", \"b\", \"c\"]\n\n        let f = {(a: [String]) -> Int in a.count}\n        let u = Either<Int, String>.bindFunc(f)\n        XCTAssertEqual(3, u(l).left()!)\n        XCTAssertTrue(u(l).right() == nil)\n        \n        let g = {(a: [String]) -> String in \"\".join(a)}\n        let v = Either<Int, String>.bindFunc(g)\n        XCTAssertTrue(v(l).left() == nil)\n        XCTAssertEqual(\"abc\", v(l).right()!)\n    }\n```\n"}