{"context": " More than 1 year has passed since last update.\u3053\u3093\u306b\u3061\u306f\u3002AdventCalendar\u3068\u3044\u3046\u3082\u306e\u306b\u521d\u3081\u3066\u53c2\u52a0\u3057\u307e\u3059\u3002\n12\u67084\u65e5\u5206\u306e\u8a18\u4e8b\u3067\u3059\u3002\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\nhttp://miyatin.me/\n\u3053\u3061\u3089\u3067\u3082\u516c\u958b\u3057\u3066\u307e\u3059\u3002\nUnity\u306e\u30dc\u30bf\u30f3\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u900f\u660e\u306e\u90e8\u5206\u3067\u3082\u30bf\u30c3\u30d7\u3067\u304d\u3061\u3083\u3046\u306e\u3067\uff0c\u305d\u308c\u3092\u89e3\u6c7a\u3057\u305f\u30dc\u30bf\u30f3\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306a\u3093\u3068\u304b\u9811\u5f35\u308c\u306a\u3044\u304b\n\u30af\u30ea\u30c3\u30af\u3057\u305f\u3068\u3053\u308d\u306e\u900f\u660e\u5ea6\u3092\u3068\u308b\u3002\u3053\u308c\u304f\u3089\u3044\u3067\u304d\u308b\u3067\u3057\u3087\uff1f\u3068\u601d\u3063\u3066\u3084\u3063\u3066\u307f\u308b\u3068\uff0c\u3053\u308c\u306f\u7c21\u5358\u306b\u3067\u304d\u305f\u3002\nimage = GetComponent<Image>();\nvar alpha = image.sprite.texture.GetPixel(0, 0).a;\n\n\u300c\u306a\u3093\u3060\uff0c\u3081\u3063\u3061\u3083\u7c21\u5358\u3084\u3093\u300d\u3068\u601d\u3063\u305f\u3093\u3067\u3059\u304c\uff0c\u3044\u3056iOS\u30d3\u30eb\u30c9\u3057\u3066\u307f\u308b\u3068\u30a8\u30c7\u30a3\u30bf\u3067\u306f\u3046\u307e\u304f\u52d5\u4f5c\u3057\u3066\u3044\u305f\u306e\u306b\uff0c\u5b9f\u6a5f\u3067\u306f\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u30fb\u30fb\u3002\n\u4ed6\u306b\u3082\u60a9\u3093\u3067\u308b\u65b9\u306f\u3044\u3089\u3063\u3057\u3083\u308b\u3088\u3046\u3067\u3002\nhttp://forum.unity3d.com/threads/help-why-does-getpixels-not-work-for-ios.153902/\n\u3053\u308c\u306e\u539f\u56e0\u306fTexture\u306e\u8a2d\u5b9a\u3067\u3059\u3002\u666e\u901a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3042\u308c\u3070Read/Write Enabled\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u3042\u308a\uff0c\u305d\u308c\u306b\u30c1\u30a7\u30c3\u30af\u3092\u5165\u308c\u308b\u3068iOS\u3067\u3082\u8aad\u307f\u8fbc\u3081\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u304c\uff0cuGUI\u3067\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u3069\u3046\u3057\u305f\u3082\u306e\u304b\u30fb\u30fb\u3002\n\n\u72ec\u81ea\u3067\u306a\u3093\u3068\u304b\u3059\u308b\u3057\u304b\u306a\u3044\n\u3082\u3057\u304b\u3057\u305f\u3089\uff0c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3082\u3063\u3068\u9811\u5f35\u308c\u3070\u306a\u3093\u3068\u304b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3057\u304b\u3057\uff0c\u50d5\u306eUnity\u529b\u3067\u306f\u3069\u3046\u306b\u3082\u306a\u3089\u306a\u304b\u3063\u305f\u306e\u3067\uff0c\u4eca\u304b\u3089\u7d39\u4ecb\u3059\u308b\u65b9\u6cd5\u3067\u89e3\u6c7a\u3057\u307e\u3057\u305f\u3002\n\n\u305d\u3082\u305d\u3082\u6b32\u3057\u3044\u306e\u306f\u900f\u660e\u5ea6\u3060\u3051\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u8aad\u3081\u308b\u3088\u3046\u306b\u3057\u3066\u3082\u3053\u3061\u3089\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\uff0c\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u306f\u500d\u306b\u306a\u308a\u307e\u3059\u3002Unity\u3067\u30b2\u30fc\u30e0\u958b\u767a\u3059\u308b\u969b\u306f\u30e2\u30d0\u30a4\u30eb\u5411\u3051\u304c\u307b\u3068\u3093\u3069\u3060\u3068\u601d\u3044\u307e\u3059\u306e\u3067\uff0c\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u304c\u500d\u306b\u306a\u308b\u306e\u306f\u5c11\u3057\u80c3\u304c\u75db\u304f\u306a\u308a\u307e\u3059\u306d\u3002\n\n\u72ec\u81ea\u306ealpha\u5024\u30de\u30c3\u30d7\u306e\u4ed5\u7d44\u307f\u3092\u3064\u304f\u308b\n\u50d5\u306f\u3068\u308a\u3042\u3048\u305a\uff0c\u3069\u3053\u304b\u3057\u3089\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u753b\u50cf\u306e\u60c5\u5831\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u5024\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u3002Unity\u306eResources.Load\u3067\u306f\u30d0\u30a4\u30c8\u5024\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nvar bytes = Resources.Load<TextAsset>(\"binary\").bytes\n\n\u3053\u308c\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u4ee5\u524d\uff0c\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u7b49\u306e\u51e6\u7406\u3092\u66f8\u3044\u3066\u3044\u308b\u6642\u306bPlain Text\u3068\u30d0\u30a4\u30ca\u30ea\u3067\u306f\u8aad\u307f\u8fbc\u307f\u901f\u5ea6\u51e6\u7406\u901f\u5ea6\u304c\u5168\u7136\u9055\u3046\u3068\u3044\u3046\u77e5\u898b\u306f\u3042\u3063\u305f\u306e\u3067\u30d0\u30a4\u30ca\u30ea\u306b\u3059\u308b\u4fa1\u5024\u306f\u3042\u308a\u3068\u601d\u3063\u305f\u306e\u3067\u3002\n\n\u753b\u50cf\u304b\u3089alpha\u5024\u3092\u8aad\u307f\u8fbc\u3093\u3067\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304f\u306e\u5dfb\n\u3055\u3066\uff0c\u4fdd\u5b58\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u3059\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30bf\u30a4\u30df\u30f3\u30b0\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n1. \u30a8\u30c7\u30a3\u30bf\u30e1\u30cb\u30e5\u30fc\u306b\u30d5\u30a1\u30a4\u30eb\u751f\u6210\u30e1\u30cb\u30e5\u30fc\u3092\u4f5c\u6210\u3057\uff0c\u305d\u308c\u3092\u4f7f\u3046\u3053\u3068\u3067\u751f\u6210\u3059\u308b\n2. \u30b9\u30d7\u30e9\u30a4\u30c8\u30d1\u30c3\u30ad\u30f3\u30b0\u3092\u6539\u9020\u3059\u308b\n3. \u30d5\u30a1\u30a4\u30eb\u8ffd\u52a0\u30fb\u5909\u66f4\u6642\u306b\u51e6\u7406\u3059\u308b\n\u50d5\u304c\u4f5c\u3063\u3066\u3044\u308b\u30b2\u30fc\u30e0\u3067\u306fUnity\u306e\u30b9\u30d7\u30e9\u30a4\u30c8\u30d1\u30c3\u30ad\u30f3\u30b0\u3092\u4f7f\u3044\u307e\u304f\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u305d\u3053\u306b\u30d5\u30c3\u30af\u3055\u305b\u308b\u306e\u304c\u4e00\u756a\u3044\u3044\u304b\u306a\u3068\u601d\u3063\u305f\u306e\u3067\uff0c\u305d\u308c\u3092\u63a1\u7528\u3057\u307e\u3057\u305f\u3002\n\u3067\u3082\uff0c\u3088\u304f\u3088\u304f\u8003\u3048\u308b\u3068\u30d5\u30a1\u30a4\u30eb\u304c\u8ffd\u52a0\u30fb\u5909\u66f4\u3055\u308c\u305f\u6642\u306b\u306a\u306b\u304b\u51e6\u7406\u304c\u66f8\u3051\u308b\u306e\u3067\u3042\u308c\u3070\u305d\u3053\u3067\u3082\u3044\u3044\u3067\u3059\u306d\u3002\nhttp://tsubakit1.hateblo.jp/entry/20140615/1402844126\n\u3053\u3061\u3089\u3092\u53c2\u7167\u3059\u308b\u9650\u308a\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\nAlphaMapCreater.cs\n#if UNITY_EDITOR\n\nusing System.IO;\nusing UnityEngine;\nusing UnityEditor;\n\npublic static class AlphaMapCreater\n{\n    public static void Create(Texture2D texture)\n    {\n        var map = texture.GetRawTextureData();\n        using (Stream stream = File.OpenWrite(\"Assets/Resources/AlphaMap/\" + texture.name + \".bytes\")) {\n            using (var writer = new BinaryWriter(stream)) {\n                writer.Write((uint)texture.width);\n                writer.Write((uint)texture.height);\n                for (var i = 0; i < map.Length; i += 4 * 8)\n                {\n                    int j = i + 4, k = i + 8, l = i + 12, m = i + 16, n = i + 20, o = i + 24, p = i + 28;\n                    byte b = (byte)(\n                        128 * Bit(map, p) +\n                        64  * Bit(map, o) +\n                        32  * Bit(map, n) +\n                        16  * Bit(map, m) +\n                        8   * Bit(map, l) +\n                        4   * Bit(map, k) +\n                        2   * Bit(map, j) +\n                        1   * Bit(map, i));\n                    writer.Write(b);\n                }\n            }\n        }\n    }\n\n    private static int Bit(byte[] map, int x)\n    {\n        if (map.Length <= x)\n            return 0;\n        return map[x] > 1? 1 : 0;\n    }\n\n}\n\n#endif\n\n\n\u50d5\u306e\u4e0b\u624b\u304f\u305d\u306a\u30b3\u30fc\u30c9\u3067\u306a\u306b\u3084\u3063\u3066\u308b\u304b\u308f\u304b\u3063\u305f\u4eba\u304c\u3044\u305f\u3089\u3059\u3054\u3044\u3067\u3059\u306d\u30fb\u30fb\u3002\n\n\u30a2\u30eb\u30d5\u30a1\u5024\u3055\u3048\u3044\u3089\u306a\u3044\n\u50d5\u304c\u3084\u308a\u305f\u3044\u306e\u306f\u30a2\u30eb\u30d5\u30a1\u5024\u3092\u3068\u308b\u3053\u3068\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30dc\u30bf\u30f3\u304c\u62bc\u305b\u308b\u304b\u3069\u3046\u304b\u3092\u4fdd\u5b58\u3057\u305f\u3044\u306e\u3067\u3059\u3002(\u305d\u3046\u8003\u3048\u308b\u3068AlphaMap\u3068\u3044\u3046\u547d\u540d\u306f\u304a\u304b\u3057\u3044\u3067\u3059\u304c)\n\u3064\u307e\u308a\uff0c\u62bc\u305b\u308b = 1, \u62bc\u305b\u306a\u3044 = 0\u306e\u60c5\u5831\u3060\u3051\u3067\u3044\u3044\u306e\u3067\u3059\u3002\u305d\u3057\u3066\uff0c\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3084\u30e1\u30e2\u30ea\u306b\u5c55\u958b\u3059\u308b\u30b5\u30a4\u30ba\u306f\u6975\u529b\u6291\u3048\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\n0\u304b1\u3068\u3044\u3046\u3053\u3068\u306f2\u9032\u6570\u3060\u306a\uff1f\uff08\u5f53\u7136\uff09\n\u3053\u306e\u8fba\u304b\u3089\u5c02\u9580\u7684\u306a\u77e5\u8b58\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u3059\u3044\u307e\u305b\u3093\u3002\n2\u9032\u6570\u3067\u3044\u3044\u306e\u306f\u308f\u304b\u308b\u306e\u3067\u3059\u304c\uff0c\u6b8b\u5ff5\u306a\u304c\u3089\u30e1\u30e2\u30ea\u306e\u6700\u5c0f\u5358\u4f4d\u306f1byte = 8bit = 2\u9032\u6570\u304c8\u500b\u3067\u3059\u306d\u3002\n\u4f8b\u3048\u3070\n00110100\n\n\u3053\u308c\u3067\u3059\u306d\u3002\u3064\u307e\u308a\uff0c\u753b\u50cf\u306e8\u30d4\u30af\u30bb\u30eb\u5206\u306e\u62bc\u305b\u308b\u304b\u62bc\u305b\u306a\u3044\u304b\u306e\u60c5\u5831\u3092\u4fdd\u5b58\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u304a\u305d\u3089\u304f\uff0c\u53ef\u80fd\u306a\u9650\u308a\u6700\u5c0f\u306a\u65b9\u6cd5\u3067\u3059\u3002\nvar map = texture.GetRawTextureData();\n\n\u3053\u308c\u306b\u3088\u3063\u3066\uff0c\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d4\u30af\u30bb\u30eb\u306e\u60c5\u5831\u30921\u6b21\u5143\u914d\u5217\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u5185\u5bb9\u306f\uff0c\u5de6\u4e0a\u306e\u30d4\u30af\u30bb\u30eb\u304b\u3089\u53f3\u4e0b\u306e\u6700\u5f8c\u306e\u30d4\u30af\u30bb\u30eb\u307e\u3067\u306eRGBA\u304c1\u3064\u305a\u3064\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u914d\u5217\u3067\u3059\u3002\nmap = new []{r0, g0, b0, a0, r1, g1, b1, a1, ... , rn, gn, bn, an};\n\n\u6b32\u3057\u3044\u60c5\u5831\u306f4\u306e\u500d\u6570\u306e\u5834\u6240\u306b\u3042\u308a\u307e\u3059\u306d\u3002\u305d\u3057\u3066\uff0c\u305d\u308c\u30928\u500b\u533a\u5207\u308a\u30671byte\u306b\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nfor (var i = 0; i < map.Length; i += 4 * 8)\n{\n    int j = i + 4, k = i + 8, l = i + 12, m = i + 16, n = i + 20, o = i + 24, p = i + 28;\n    byte b = (byte)(\n        128 * Bit(map, p) +\n        64  * Bit(map, o) +\n        32  * Bit(map, n) +\n        16  * Bit(map, m) +\n        8   * Bit(map, l) +\n        4   * Bit(map, k) +\n        2   * Bit(map, j) +\n        1   * Bit(map, i));\n    writer.Write(b);\n}\n\nprivate static int Bit(byte[] map, int x)\n{\n    if (map.Length <= x)\n        return 0;\n    return map[x] > 1? 1 : 0;\n}\n\n\u3053\u308c\u304c\u305d\u306e\u51e6\u7406\u3067\u3059\u3002Bit\u95a2\u6570\u306f\u3061\u3087\u3063\u3068\u3053\u306e\u51e6\u7406\u3092\u898b\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u3060\u3051\u306b\u4f5c\u3063\u305f\u3082\u306e\u3067\u3059\u3002\n\u4ee5\u4e0a\u306b\u3088\u308a\uff0cAssets/Resources/AlphaMap\u4ee5\u4e0b\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3059\u308b\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u30b9\u30d7\u30e9\u30a4\u30c8\u30d1\u30c3\u30ab\u30fc\u3092\u6539\u9020\u3057\u3066\u30d1\u30c3\u30ad\u30f3\u30b0\u6642\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u3089\u305b\u308b\nUnity\u3067\u306f\u30b9\u30d7\u30e9\u30a4\u30c8\u306e\u30d1\u30c3\u30ad\u30f3\u30b0\u30dd\u30ea\u30b7\u30fc\u3092\u81ea\u5206\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002\u79c1\u306f\u3053\u308c\u3092\u5fdc\u7528\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u3002\nhttp://docs.unity3d.com/ja/current/Manual/SpritePacker.html\nUnity\u306e\u30b5\u30a4\u30c8\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u30d1\u30c3\u30ad\u30f3\u30b0\u30dd\u30ea\u30b7\u30fc\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u79c1\u306f\u305d\u308c\u3092\u5143\u306b\u4f5c\u308a\u307e\u3057\u305f\u3002\n\nReadablePackingPolicy.cs\n\u2028#if UNITY_EDITOR\n\nusing System;\nusing System.Linq;\nusing UnityEngine;\nusing UnityEditor;\nusing UnityEditor.Sprites;\nusing System.Collections.Generic;\n\nclass ReadablePackingPolicy : UnityEditor.Sprites.IPackerPolicy\n{\n    protected class Entry\n    {\n        public Sprite            sprite;\n        public AtlasSettings     settings;\n        public string            atlasName;\n        public SpritePackingMode packingMode;\n        public int               anisoLevel;\n    }\n\n    private const uint kDefaultPaddingPower = 2; // Good for base and two mip levels.\n\n    public virtual int GetVersion() { return 1; }\n\n    protected virtual string TagPrefix { get { return \"[TIGHT]\"; } }\n    protected virtual bool AllowTightWhenTagged { get { return true; } }\n\n    public void OnGroupAtlases(BuildTarget target, PackerJob job, int[] textureImporterInstanceIDs)\n    {\n        var entries = new List<Entry>();\n\n        foreach (int instanceID in textureImporterInstanceIDs)\n        {\n            var ti = EditorUtility.InstanceIDToObject(instanceID) as TextureImporter;\n            TextureFormat textureFormat;\n            ColorSpace colorSpace;\n            int compressionQuality;\n            if (ti == null)\n                continue;\n            ti.ReadTextureImportInstructions(target, out textureFormat, out colorSpace, out compressionQuality);\n\n            var tis = new TextureImporterSettings();\n            ti.ReadTextureSettings(tis);\n            ti.isReadable = true;\n            tis.readable = true;\n\n            Sprite[] sprites = AssetDatabase.LoadAllAssetRepresentationsAtPath(ti.assetPath).Select(x => x as Sprite).Where(x => x != null).ToArray();\n\n            foreach (Sprite sprite in sprites)\n            {\n                var entry = new Entry();\n                entry.sprite = sprite;\n                entry.settings.format = textureFormat;\n                entry.settings.colorSpace = colorSpace;\n                entry.settings.compressionQuality = compressionQuality;\n                entry.settings.filterMode = Enum.IsDefined(typeof(FilterMode), ti.filterMode) ? ti.filterMode : FilterMode.Bilinear;\n                entry.settings.maxWidth = 2048;\n                entry.settings.maxHeight = 2048;\n                entry.settings.generateMipMaps = ti.mipmapEnabled;\n                if (ti.mipmapEnabled)\n                    entry.settings.paddingPower = kDefaultPaddingPower;\n                entry.atlasName = ParseAtlasName(ti.spritePackingTag);\n                entry.packingMode = GetPackingMode(ti.spritePackingTag, tis.spriteMeshType);\n                entry.anisoLevel = ti.anisoLevel;\n\n                entries.Add(entry);\n            }\n\n            Resources.UnloadAsset(ti);\n\n            foreach (var sprite in sprites)\n            {\n                var m_tex = sprite.texture;\n                AlphaMapCreater.Create(m_tex);\n            }\n        }\n\n        // First split sprites into groups based on atlas name\n        var atlasGroups =\n            from e in entries\n            group e by e.atlasName;\n        foreach (var atlasGroup in atlasGroups)\n        {\n            int page = 0;\n            // Then split those groups into smaller groups based on texture settings\n            var settingsGroups =\n                from t in atlasGroup\n                group t by t.settings;\n            foreach (var settingsGroup in settingsGroups)\n            {\n                string atlasName = atlasGroup.Key;\n                if (settingsGroups.Count() > 1)\n                    atlasName += string.Format(\" (Group {0})\", page);\n\n                AtlasSettings settings = settingsGroup.Key;\n                settings.anisoLevel = 1;\n\n                // Use the highest aniso level from all entries in this atlas\n                if (settings.generateMipMaps)\n                    foreach (Entry entry in settingsGroup)\n                        if (entry.anisoLevel > settings.anisoLevel)\n                            settings.anisoLevel = entry.anisoLevel;\n\n                job.AddAtlas(atlasName, settings);\n\n                foreach (Entry entry in settingsGroup)\n                {\n                    job.AssignToAtlas(atlasName, entry.sprite, entry.packingMode, SpritePackingRotation.None);\n                }\n\n                ++page;\n            }\n\n        }\n    }\n\n    protected bool IsTagPrefixed(string packingTag)\n    {\n        packingTag = packingTag.Trim();\n        if (packingTag.Length < TagPrefix.Length)\n            return false;\n        return (packingTag.Substring(0, TagPrefix.Length) == TagPrefix);\n    }\n\n    private string ParseAtlasName(string packingTag)\n    {\n        string name = packingTag.Trim();\n        if (IsTagPrefixed(name))\n            name = name.Substring(TagPrefix.Length).Trim();\n        return (name.Length == 0) ? \"(unnamed)\" : name;\n    }\n\n    private SpritePackingMode GetPackingMode(string packingTag, SpriteMeshType meshType)\n    {\n        if (meshType == SpriteMeshType.Tight)\n            if (IsTagPrefixed(packingTag) == AllowTightWhenTagged)\n                return SpritePackingMode.Tight;\n        return SpritePackingMode.Rectangle;\n    }\n}\n\n#endif\n\n\n\u9577\u3044\u30b3\u30fc\u30c9\u30da\u30bf\u30da\u30bf\u8cbc\u308a\u4ed8\u3051\u3066\u3059\u3044\u307e\u305b\u3093\u30fb\u30fb\u30fb\u3002\n\u6ce8\u76ee\u7b87\u6240\u306f\u3053\u3061\u3089\u3067\u3059\u3002\n\nforeach (var sprite in sprites)\n{\n    var m_tex = sprite.texture;\n    AlphaMapCreater.Create(m_tex);\n}\n\n\u5148\u307b\u3069\u4f5c\u3063\u305fAlphaMapCreater.Create\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u6e21\u3059\u3060\u3051\u3067\u3059\u3002\n\nUnity\u306e\u8a2d\u5b9a\u3092\u8272\u3005\n\u8a00\u308f\u305a\u3082\u304c\u306a\u3067\u3059\u304c\uff0c\u307e\u305a\u753b\u50cf\u306e\u8a2d\u5b9a\u304b\u3089\u3002\n\nPacking Tag\u3092\u9069\u5f53\u306b\u8a2d\u5b9a\u3057\u306a\u3044\u3068\uff0c\u30d1\u30c3\u30ad\u30f3\u30b0\u3055\u308c\u306a\u3044\u6c17\u304c\u3059\u308b\u306e\u3067\u6ce8\u610f\u3067\u3059\u3002\n\u307e\u305fResources\u30d5\u30a9\u30eb\u30c0\u306b\u5165\u3063\u3066\u3044\u308b\u753b\u50cf\u306f\u30d1\u30c3\u30ad\u30f3\u30b0\u3055\u308c\u306a\u3044\u306e\u3067\u3053\u308c\u3082\u6ce8\u610f\u3067\u3059\uff01\uff01\n\n\u30e1\u30cb\u30e5\u30fc\u306eWindow > Sprite Packer\u3067Sprite Packer\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u958b\u3044\u3066\u53f3\u3089\u3078\u3093\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\u305d\u3057\u3066\uff0cPack\u3068\u304bRepack\u3068\u304bUnity\u518d\u8d77\u52d5\u3068\u304b\u518d\u751f\u3068\u304b\u3057\u3066\u308b\u3068\u6b21\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n(Pack\u3067\u4f5c\u6210\u3055\u308c\u308b\u306f\u305a\u306a\u306e\u3067\u3059\u304c\uff0c\u306a\u3093\u3067\u304b\u8272\u3005\u3057\u306a\u3044\u3068\u4f5c\u6210\u3055\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u30fb\u30fb\u3002\u3044\u3064\u304b\u3089\u30fb\u30fb\u3002)\n\nAssets/Resources/AlphaMap/button.bytes\n...\n0000 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000 00fc ffff\nffff ffff ffff ff00 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000 00ff ffff\nffff ffff ffff ff03 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000 80ff ffff\n...\n\n\n\u306a\u306b\u3084\u3089\u305d\u308c\u3063\u307d\u3044\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n\u62bc\u305b\u308b\u5834\u6240\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u3092\u3059\u308b\n\u3044\u3088\u3044\u3088\u5224\u5b9a\u307e\u3067\u3084\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\nAlphaMap.cs\nusing System.IO;\nusing UnityEngine;\nusing System;\nusing System.Collections.Generic;\n\npublic class AlphaMap\n{\n    private readonly byte[] bytes;\n    private readonly Sprite sprite;\n    private readonly uint width;\n    private readonly uint height;\n    private static Dictionary<string, AlphaMap> cache;\n    private AlphaMap(Sprite sprite)\n    {\n        this.sprite = sprite;\n        var alphaBytes = Resources.Load<TextAsset>(\"AlphaMap/\" + sprite.name).bytes;\n        width  = BitConverter.ToUInt32(alphaBytes, 0);\n        height = BitConverter.ToUInt32(alphaBytes, 4);\n        bytes = new byte[alphaBytes.Length - 8];\n        Array.Copy(alphaBytes, 8, bytes, 0, bytes.Length);\n    }\n\n    static public AlphaMap Load(Sprite sprite)\n    {\n        cache = cache ?? new Dictionary<string, AlphaMap>();\n\n        if (cache.ContainsKey(sprite.name))\n            return cache[sprite.name];\n\n        var map = new AlphaMap(sprite);\n        cache.Add(sprite.name, map);\n        return map;\n    }\n\n    public bool IsFlag(int x, int y)\n    {\n        var index = (int)(x + y * width) / 8;\n        var flag  = 1 << (int)((x + y * width) % 8);\n        try\n        {\n            return bytes[index] > (bytes[index] ^ flag);\n        }\n        catch\n        {\n            return false;\n        }\n    }\n}\n\n\n\u3053\u3061\u3089\u306f\u5b9f\u88c5\u306e\u901a\u308a\u3067\u3059\u3002IsFlag\u30e1\u30bd\u30c3\u30c9\u304c\u5b9f\u969b\u306b\u5224\u5b9a\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\u30d3\u30c3\u30c8\u6f14\u7b97\u306b\u306a\u308b\u306e\u3067\u89e3\u8aac\u3092\u3002\n\u3055\u304d\u307b\u3069\u306e\u89e3\u8aac\u306e\u3088\u3046\u306b\uff0c8\u30d4\u30af\u30bb\u30eb\u306e\u30c7\u30fc\u30bf\u304c1byte\u306b\u306f\u5165\u3063\u3066\u3044\u307e\u3059\u3002\u306a\u306e\u3067\uff0c\u4e0e\u3048\u3089\u308c\u305f2\u6b21\u5143\u5ea7\u6a19\u3092\u5ea7\u6a19\u3092\u3042\u3089\u304b\u3058\u3081\u53d6\u5f97\u3057\u3066\u3042\u308bwidth\u3092\u4f5c\u3063\u30661\u6b21\u5143\u306b\u3057\u307e\u3059\u3002\nvar index = (int)(x + y * width) / 8;\n\n\u3055\u3089\u306b\uff0c8\u500b\u306e\u8981\u7d20\u306e\u4e2d\u306e\u4f55\u500b\u76ee\u306e\u8981\u7d20\u304b\u3092\u5f97\u308b\u305f\u3081\u306b\n(x + y * width) % 8\n\n\u3053\u306e\u8a08\u7b97\u3092\u3057\u307e\u3059\u3002\n\u3053\u308c\u3092\u4f7f\u3063\u3066\uff0c\u5bfe\u8c61\u306e\u6841\u3060\u30511\u306b\u306a\u3063\u3066\u3044\u308b2\u9032\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\nvar flag  = 1 << (int)((x + y * width) % 8);\n\n\u4f8b\u3048\u3070\uff0c8\u500b\u4e2d\u306e6\u500b\u76ee\u3060\u3063\u305f\u5834\u5408\u306f00100000\u3068\u3044\u30462\u9032\u6570\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u3057\u3066\uff0c\u5b9f\u969b\u306b\u305d\u306e\u30d4\u30af\u30bb\u30eb\u304c\u900f\u660e\u304b\u4e0d\u900f\u660e\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\nreturn bytes[index] > (bytes[index] ^ flag);\n\n\u3053\u308c\u306f\u4e45\u3057\u3076\u308a\u306b\u8aad\u3093\u3067\uff0c\u4e00\u77ac\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u3067\u3059\u306d\uff0c\u30cf\u30a4\u3002\n\u3064\u307e\u308a\uff0c\u3053\u308c\u306f\u5bfe\u8c61\u306e\u30d3\u30c3\u30c8\u304c1\u3060\u3063\u305f\u3089\u5168\u4f53\u306e\u5024\u304c\u5143\u306e\u5024\u3088\u308a\u5c0f\u3055\u304f\u306a\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u4f8b\u3048\u3070\n11011000\u306b\u5bfe\u3057\u306600010000\u3092XOR\u3059\u308b\u306811001000\u3068\u306a\u3063\u3066\uff0c\u5143\u306e\u5024\u3088\u308a\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002\n11011000\u306b\u5bfe\u3057\u306600100000\u3092XOR\u3059\u308b\u306811111000\u3068\u306a\u3063\u3066\uff0c\u5143\u306e\u5024\u3088\u308a\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u6027\u8cea\u3092\u4f7f\u3063\u305f\u5224\u5b9a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3042\u3068\u306f\u3053\u308c\u3089\u3092\u5229\u7528\u3057\u305f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u3064\u304f\u308b\u3060\u3051\n\nImageButton.cs\nusing UnityEngine;\nusing UnityEngine.UI;\n\n[RequireComponent(typeof(Image))]\npublic class ImageButton : Button, ICanvasRaycastFilter\n{\n    private Canvas canvas;\n    private int? canvasWidth;\n    private int? canvasHeight;\n\n    private Image image;\n    private AlphaMap alphaMap;\n\n    void Start()\n    {\n        image = GetComponent<Image>();\n        CanvasScaler scaler;\n        Transform p = transform;\n        do {\n            p = p.parent;\n            scaler = p.GetComponent<CanvasScaler>();\n        } while(scaler == null);\n\n        canvas = scaler.GetComponent<Canvas>();\n        canvasWidth = (int)scaler.referenceResolution.x;\n        canvasHeight = (int)scaler.referenceResolution.y;\n\n        alphaMap = AlphaMap.Load(image.sprite);\n    }\n\n    public bool IsRaycastLocationValid(Vector2 sp, Camera c)\n    {\n        var point = new Vector2 (\n                        sp.x / Screen.width * canvasWidth.Value,\n                        sp.y / Screen.height * canvasHeight.Value\n                    );\n\n        var screenPoint = new Vector2 (\n                              transform.position.x / canvas.transform.localScale.x,\n                              transform.position.y / canvas.transform.localScale.y\n                          );\n\n        var areaPosition =\n            point - new Vector2 (\n                screenPoint.x - image.rectTransform.pivot.x * image.rectTransform.sizeDelta.x,\n                screenPoint.y - image.rectTransform.pivot.y * image.rectTransform.sizeDelta.y\n            );\n\n        return alphaMap.IsFlag((int)areaPosition.x, (int)areaPosition.y);\n    }\n}\n\n\nICanvasRaycastFilter\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3068\uff0c\u30af\u30ea\u30c3\u30af\u5224\u5b9a\u304c\u5165\u3063\u305f\u304b\u3069\u3046\u304b\u3092\u5236\u5fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u8a73\u3057\u304f\u306f\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u304c\u30aa\u30b9\u30b9\u30e1\u3067\u3059\u3002\nhttp://tsubakit1.hateblo.jp/entry/2015/01/30/213000\n(\u30c6\u30e9\u30b7\u30e5\u30fc\u30eb\u30d6\u30ed\u30b0\u306b\u304a\u4e16\u8a71\u306b\u306a\u308a\u307e\u304f\u3063\u3066\u307e\u3059\u30fb\u30fb\u3002\u3059\u3044\u307e\u305b\u3093\u3002)\n\u73fe\u5728\u306fCanvasScaler\u304cScale With Screen Size\u306e\u8a2d\u5b9a\u306b\u306a\u3063\u3066\u306a\u3044\u3068\u3046\u307e\u304f\u4f5c\u7528\u3057\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u898b\u3066\u308f\u304b\u308b\u3088\u3046\u306b\uff0c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u30dd\u30b8\u30b7\u30e7\u30f3\u3092\u9811\u5f35\u3063\u3066\u753b\u50cf\u306e\u4e2d\u3067\u306e\u30dd\u30b8\u30b7\u30e7\u30f3\u306b\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u3057\u3066\uff0cAlphaMap\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u8a66\u3057\u3066\u307f\u308b\nGameObject\u3092Canvas\u4ee5\u4e0b\u306b\u4f5c\u3063\u3066\u3055\u304d\u307b\u3069\u4f5c\u3063\u305fImageButton\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u4ed8\u4e0e\u3057\u3066\u518d\u751f\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u308f\u3051\u308f\u304b\u3089\u3093\u753b\u50cf\u4f7f\u3063\u3066\u307e\u3059\u304c\uff0c\u3069\u3046\u3084\u3089\u3046\u307e\u304f\u52d5\u3044\u3066\u307e\u3059\u306d\u3002\n\n\u7d42\u308f\u308a\u306e\u3053\u3068\u3070\nUnity\u306f\u3068\u3066\u3082\u30b2\u30fc\u30e0\u304c\u7c21\u5358\u306b\u4f5c\u308c\u307e\u3059\u304c\uff0c\u3053\u3046\u3044\u3046\u3068\u304d\u306b\u3057\u3093\u3069\u3044\u601d\u3044\u3092\u3057\u307e\u3059\u3002\u3057\u304b\u3057\uff0cC#\u697d\u3057\u3044\u306e\u3067\u7279\u306b\u554f\u984c\u306a\u3044\u3067\u3059\u306d\u30fb\u30fb\u3002\n\u3053\u308c\u3089\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGithub\u306b\u30a2\u30c3\u30d7\u3057\u3066\u304a\u304d\u307e\u3059\u306e\u3067\uff0c\u308f\u304b\u3089\u306a\u3044\u70b9\u304c\u3042\u308c\u3070\u662f\u975e\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u3068\u3066\u3082\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\uff0c\u95b2\u89a7\u3057\u3066\u304f\u3060\u3055\u308a\u8aa0\u306b\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\nhttps://github.com/tagia0212/ImageButton\n\u6b21\u306fhecomi\u3055\u3093\u3067\u3059\uff01\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\u3053\u3093\u306b\u3061\u306f\u3002AdventCalendar\u3068\u3044\u3046\u3082\u306e\u306b\u521d\u3081\u3066\u53c2\u52a0\u3057\u307e\u3059\u3002\n12\u67084\u65e5\u5206\u306e\u8a18\u4e8b\u3067\u3059\u3002\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\nhttp://miyatin.me/\n\u3053\u3061\u3089\u3067\u3082\u516c\u958b\u3057\u3066\u307e\u3059\u3002\n\nUnity\u306e\u30dc\u30bf\u30f3\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u900f\u660e\u306e\u90e8\u5206\u3067\u3082\u30bf\u30c3\u30d7\u3067\u304d\u3061\u3083\u3046\u306e\u3067\uff0c\u305d\u308c\u3092\u89e3\u6c7a\u3057\u305f\u30dc\u30bf\u30f3\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306a\u3093\u3068\u304b\u9811\u5f35\u308c\u306a\u3044\u304b\n\u30af\u30ea\u30c3\u30af\u3057\u305f\u3068\u3053\u308d\u306e\u900f\u660e\u5ea6\u3092\u3068\u308b\u3002\u3053\u308c\u304f\u3089\u3044\u3067\u304d\u308b\u3067\u3057\u3087\uff1f\u3068\u601d\u3063\u3066\u3084\u3063\u3066\u307f\u308b\u3068\uff0c\u3053\u308c\u306f\u7c21\u5358\u306b\u3067\u304d\u305f\u3002\n\n```csharp\nimage = GetComponent<Image>();\nvar alpha = image.sprite.texture.GetPixel(0, 0).a;\n```\n\n\u300c\u306a\u3093\u3060\uff0c\u3081\u3063\u3061\u3083\u7c21\u5358\u3084\u3093\u300d\u3068\u601d\u3063\u305f\u3093\u3067\u3059\u304c\uff0c\u3044\u3056iOS\u30d3\u30eb\u30c9\u3057\u3066\u307f\u308b\u3068\u30a8\u30c7\u30a3\u30bf\u3067\u306f\u3046\u307e\u304f\u52d5\u4f5c\u3057\u3066\u3044\u305f\u306e\u306b\uff0c\u5b9f\u6a5f\u3067\u306f\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u30fb\u30fb\u3002\n\u4ed6\u306b\u3082\u60a9\u3093\u3067\u308b\u65b9\u306f\u3044\u3089\u3063\u3057\u3083\u308b\u3088\u3046\u3067\u3002\nhttp://forum.unity3d.com/threads/help-why-does-getpixels-not-work-for-ios.153902/\n\n\u3053\u308c\u306e\u539f\u56e0\u306fTexture\u306e\u8a2d\u5b9a\u3067\u3059\u3002\u666e\u901a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3067\u3042\u308c\u3070`Read/Write Enabled`\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u3042\u308a\uff0c\u305d\u308c\u306b\u30c1\u30a7\u30c3\u30af\u3092\u5165\u308c\u308b\u3068iOS\u3067\u3082\u8aad\u307f\u8fbc\u3081\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u304c\uff0cuGUI\u3067\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u3069\u3046\u3057\u305f\u3082\u306e\u304b\u30fb\u30fb\u3002\n\n## \u72ec\u81ea\u3067\u306a\u3093\u3068\u304b\u3059\u308b\u3057\u304b\u306a\u3044\n\n\u3082\u3057\u304b\u3057\u305f\u3089\uff0c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3082\u3063\u3068\u9811\u5f35\u308c\u3070\u306a\u3093\u3068\u304b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3057\u304b\u3057\uff0c\u50d5\u306eUnity\u529b\u3067\u306f\u3069\u3046\u306b\u3082\u306a\u3089\u306a\u304b\u3063\u305f\u306e\u3067\uff0c\u4eca\u304b\u3089\u7d39\u4ecb\u3059\u308b\u65b9\u6cd5\u3067\u89e3\u6c7a\u3057\u307e\u3057\u305f\u3002\n\n### \u305d\u3082\u305d\u3082\u6b32\u3057\u3044\u306e\u306f\u900f\u660e\u5ea6\u3060\u3051\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u8aad\u3081\u308b\u3088\u3046\u306b\u3057\u3066\u3082[\u3053\u3061\u3089](http://tsubakit1.hateblo.jp/entry/20120517/1337258627)\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\uff0c\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u306f\u500d\u306b\u306a\u308a\u307e\u3059\u3002Unity\u3067\u30b2\u30fc\u30e0\u958b\u767a\u3059\u308b\u969b\u306f\u30e2\u30d0\u30a4\u30eb\u5411\u3051\u304c\u307b\u3068\u3093\u3069\u3060\u3068\u601d\u3044\u307e\u3059\u306e\u3067\uff0c\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u304c\u500d\u306b\u306a\u308b\u306e\u306f\u5c11\u3057\u80c3\u304c\u75db\u304f\u306a\u308a\u307e\u3059\u306d\u3002\n\n### \u72ec\u81ea\u306ealpha\u5024\u30de\u30c3\u30d7\u306e\u4ed5\u7d44\u307f\u3092\u3064\u304f\u308b\n\u50d5\u306f\u3068\u308a\u3042\u3048\u305a\uff0c\u3069\u3053\u304b\u3057\u3089\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u753b\u50cf\u306e\u60c5\u5831\u304b\u3089\u30a2\u30eb\u30d5\u30a1\u5024\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u3002Unity\u306e`Resources.Load`\u3067\u306f\u30d0\u30a4\u30c8\u5024\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```\nvar bytes = Resources.Load<TextAsset>(\"binary\").bytes\n```\n\n\u3053\u308c\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u4ee5\u524d\uff0c\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u7b49\u306e\u51e6\u7406\u3092\u66f8\u3044\u3066\u3044\u308b\u6642\u306bPlain Text\u3068\u30d0\u30a4\u30ca\u30ea\u3067\u306f\u8aad\u307f\u8fbc\u307f\u901f\u5ea6\u51e6\u7406\u901f\u5ea6\u304c\u5168\u7136\u9055\u3046\u3068\u3044\u3046\u77e5\u898b\u306f\u3042\u3063\u305f\u306e\u3067\u30d0\u30a4\u30ca\u30ea\u306b\u3059\u308b\u4fa1\u5024\u306f\u3042\u308a\u3068\u601d\u3063\u305f\u306e\u3067\u3002\n\n## \u753b\u50cf\u304b\u3089alpha\u5024\u3092\u8aad\u307f\u8fbc\u3093\u3067\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304f\u306e\u5dfb\n\n\u3055\u3066\uff0c\u4fdd\u5b58\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u3059\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30bf\u30a4\u30df\u30f3\u30b0\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n1. \u30a8\u30c7\u30a3\u30bf\u30e1\u30cb\u30e5\u30fc\u306b\u30d5\u30a1\u30a4\u30eb\u751f\u6210\u30e1\u30cb\u30e5\u30fc\u3092\u4f5c\u6210\u3057\uff0c\u305d\u308c\u3092\u4f7f\u3046\u3053\u3068\u3067\u751f\u6210\u3059\u308b\n2. \u30b9\u30d7\u30e9\u30a4\u30c8\u30d1\u30c3\u30ad\u30f3\u30b0\u3092\u6539\u9020\u3059\u308b\n3. \u30d5\u30a1\u30a4\u30eb\u8ffd\u52a0\u30fb\u5909\u66f4\u6642\u306b\u51e6\u7406\u3059\u308b\n\n\u50d5\u304c\u4f5c\u3063\u3066\u3044\u308b\u30b2\u30fc\u30e0\u3067\u306fUnity\u306e\u30b9\u30d7\u30e9\u30a4\u30c8\u30d1\u30c3\u30ad\u30f3\u30b0\u3092\u4f7f\u3044\u307e\u304f\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u305d\u3053\u306b\u30d5\u30c3\u30af\u3055\u305b\u308b\u306e\u304c\u4e00\u756a\u3044\u3044\u304b\u306a\u3068\u601d\u3063\u305f\u306e\u3067\uff0c\u305d\u308c\u3092\u63a1\u7528\u3057\u307e\u3057\u305f\u3002\n\u3067\u3082\uff0c\u3088\u304f\u3088\u304f\u8003\u3048\u308b\u3068\u30d5\u30a1\u30a4\u30eb\u304c\u8ffd\u52a0\u30fb\u5909\u66f4\u3055\u308c\u305f\u6642\u306b\u306a\u306b\u304b\u51e6\u7406\u304c\u66f8\u3051\u308b\u306e\u3067\u3042\u308c\u3070\u305d\u3053\u3067\u3082\u3044\u3044\u3067\u3059\u306d\u3002\nhttp://tsubakit1.hateblo.jp/entry/20140615/1402844126\n\u3053\u3061\u3089\u3092\u53c2\u7167\u3059\u308b\u9650\u308a\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\n```AlphaMapCreater.cs\n#if UNITY_EDITOR\n\nusing System.IO;\nusing UnityEngine;\nusing UnityEditor;\n\npublic static class AlphaMapCreater\n{\n    public static void Create(Texture2D texture)\n    {\n        var map = texture.GetRawTextureData();\n        using (Stream stream = File.OpenWrite(\"Assets/Resources/AlphaMap/\" + texture.name + \".bytes\")) {\n            using (var writer = new BinaryWriter(stream)) {\n                writer.Write((uint)texture.width);\n                writer.Write((uint)texture.height);\n                for (var i = 0; i < map.Length; i += 4 * 8)\n                {\n                    int j = i + 4, k = i + 8, l = i + 12, m = i + 16, n = i + 20, o = i + 24, p = i + 28;\n                    byte b = (byte)(\n                        128 * Bit(map, p) +\n                        64  * Bit(map, o) +\n                        32  * Bit(map, n) +\n                        16  * Bit(map, m) +\n                        8   * Bit(map, l) +\n                        4   * Bit(map, k) +\n                        2   * Bit(map, j) +\n                        1   * Bit(map, i));\n                    writer.Write(b);\n                }\n            }\n        }\n    }\n\n    private static int Bit(byte[] map, int x)\n    {\n        if (map.Length <= x)\n            return 0;\n        return map[x] > 1? 1 : 0;\n    }\n\n}\n\n#endif\n```\n\n\u50d5\u306e\u4e0b\u624b\u304f\u305d\u306a\u30b3\u30fc\u30c9\u3067\u306a\u306b\u3084\u3063\u3066\u308b\u304b\u308f\u304b\u3063\u305f\u4eba\u304c\u3044\u305f\u3089\u3059\u3054\u3044\u3067\u3059\u306d\u30fb\u30fb\u3002\n\n### \u30a2\u30eb\u30d5\u30a1\u5024\u3055\u3048\u3044\u3089\u306a\u3044\n\n\u50d5\u304c\u3084\u308a\u305f\u3044\u306e\u306f\u30a2\u30eb\u30d5\u30a1\u5024\u3092\u3068\u308b\u3053\u3068\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30dc\u30bf\u30f3\u304c\u62bc\u305b\u308b\u304b\u3069\u3046\u304b\u3092\u4fdd\u5b58\u3057\u305f\u3044\u306e\u3067\u3059\u3002(\u305d\u3046\u8003\u3048\u308b\u3068AlphaMap\u3068\u3044\u3046\u547d\u540d\u306f\u304a\u304b\u3057\u3044\u3067\u3059\u304c)\n\n\u3064\u307e\u308a\uff0c\u62bc\u305b\u308b = 1, \u62bc\u305b\u306a\u3044 = 0\u306e\u60c5\u5831\u3060\u3051\u3067\u3044\u3044\u306e\u3067\u3059\u3002\u305d\u3057\u3066\uff0c\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3084\u30e1\u30e2\u30ea\u306b\u5c55\u958b\u3059\u308b\u30b5\u30a4\u30ba\u306f\u6975\u529b\u6291\u3048\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\n### 0\u304b1\u3068\u3044\u3046\u3053\u3068\u306f2\u9032\u6570\u3060\u306a\uff1f\uff08\u5f53\u7136\uff09\n\u3053\u306e\u8fba\u304b\u3089\u5c02\u9580\u7684\u306a\u77e5\u8b58\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u3059\u3044\u307e\u305b\u3093\u3002\n2\u9032\u6570\u3067\u3044\u3044\u306e\u306f\u308f\u304b\u308b\u306e\u3067\u3059\u304c\uff0c\u6b8b\u5ff5\u306a\u304c\u3089\u30e1\u30e2\u30ea\u306e\u6700\u5c0f\u5358\u4f4d\u306f1byte = 8bit = 2\u9032\u6570\u304c8\u500b\u3067\u3059\u306d\u3002\n\u4f8b\u3048\u3070\n\n```\n00110100\n```\n\n\u3053\u308c\u3067\u3059\u306d\u3002\u3064\u307e\u308a\uff0c\u753b\u50cf\u306e8\u30d4\u30af\u30bb\u30eb\u5206\u306e\u62bc\u305b\u308b\u304b\u62bc\u305b\u306a\u3044\u304b\u306e\u60c5\u5831\u3092\u4fdd\u5b58\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u304a\u305d\u3089\u304f\uff0c\u53ef\u80fd\u306a\u9650\u308a\u6700\u5c0f\u306a\u65b9\u6cd5\u3067\u3059\u3002\n\n```csharp\nvar map = texture.GetRawTextureData();\n```\n\n\u3053\u308c\u306b\u3088\u3063\u3066\uff0c\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u30d4\u30af\u30bb\u30eb\u306e\u60c5\u5831\u30921\u6b21\u5143\u914d\u5217\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u5185\u5bb9\u306f\uff0c\u5de6\u4e0a\u306e\u30d4\u30af\u30bb\u30eb\u304b\u3089\u53f3\u4e0b\u306e\u6700\u5f8c\u306e\u30d4\u30af\u30bb\u30eb\u307e\u3067\u306eRGBA\u304c1\u3064\u305a\u3064\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u914d\u5217\u3067\u3059\u3002\n\n```csharp\nmap = new []{r0, g0, b0, a0, r1, g1, b1, a1, ... , rn, gn, bn, an};\n```\n\n\u6b32\u3057\u3044\u60c5\u5831\u306f4\u306e\u500d\u6570\u306e\u5834\u6240\u306b\u3042\u308a\u307e\u3059\u306d\u3002\u305d\u3057\u3066\uff0c\u305d\u308c\u30928\u500b\u533a\u5207\u308a\u30671byte\u306b\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n```csharp\nfor (var i = 0; i < map.Length; i += 4 * 8)\n{\n    int j = i + 4, k = i + 8, l = i + 12, m = i + 16, n = i + 20, o = i + 24, p = i + 28;\n    byte b = (byte)(\n        128 * Bit(map, p) +\n        64  * Bit(map, o) +\n        32  * Bit(map, n) +\n        16  * Bit(map, m) +\n        8   * Bit(map, l) +\n        4   * Bit(map, k) +\n        2   * Bit(map, j) +\n        1   * Bit(map, i));\n    writer.Write(b);\n}\n\nprivate static int Bit(byte[] map, int x)\n{\n    if (map.Length <= x)\n        return 0;\n    return map[x] > 1? 1 : 0;\n}\n```\n\n\u3053\u308c\u304c\u305d\u306e\u51e6\u7406\u3067\u3059\u3002Bit\u95a2\u6570\u306f\u3061\u3087\u3063\u3068\u3053\u306e\u51e6\u7406\u3092\u898b\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u3060\u3051\u306b\u4f5c\u3063\u305f\u3082\u306e\u3067\u3059\u3002\n\u4ee5\u4e0a\u306b\u3088\u308a\uff0cAssets/Resources/AlphaMap\u4ee5\u4e0b\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3059\u308b\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n### \u30b9\u30d7\u30e9\u30a4\u30c8\u30d1\u30c3\u30ab\u30fc\u3092\u6539\u9020\u3057\u3066\u30d1\u30c3\u30ad\u30f3\u30b0\u6642\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u3089\u305b\u308b\n\nUnity\u3067\u306f\u30b9\u30d7\u30e9\u30a4\u30c8\u306e\u30d1\u30c3\u30ad\u30f3\u30b0\u30dd\u30ea\u30b7\u30fc\u3092\u81ea\u5206\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002\u79c1\u306f\u3053\u308c\u3092\u5fdc\u7528\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\nhttp://docs.unity3d.com/ja/current/Manual/SpritePacker.html\n\nUnity\u306e\u30b5\u30a4\u30c8\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u30d1\u30c3\u30ad\u30f3\u30b0\u30dd\u30ea\u30b7\u30fc\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u79c1\u306f\u305d\u308c\u3092\u5143\u306b\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n```ReadablePackingPolicy.cs\n\u2028#if UNITY_EDITOR\n\nusing System;\nusing System.Linq;\nusing UnityEngine;\nusing UnityEditor;\nusing UnityEditor.Sprites;\nusing System.Collections.Generic;\n\nclass ReadablePackingPolicy : UnityEditor.Sprites.IPackerPolicy\n{\n    protected class Entry\n    {\n        public Sprite            sprite;\n        public AtlasSettings     settings;\n        public string            atlasName;\n        public SpritePackingMode packingMode;\n        public int               anisoLevel;\n    }\n\n    private const uint kDefaultPaddingPower = 2; // Good for base and two mip levels.\n\n    public virtual int GetVersion() { return 1; }\n\n    protected virtual string TagPrefix { get { return \"[TIGHT]\"; } }\n    protected virtual bool AllowTightWhenTagged { get { return true; } }\n\n    public void OnGroupAtlases(BuildTarget target, PackerJob job, int[] textureImporterInstanceIDs)\n    {\n        var entries = new List<Entry>();\n\n        foreach (int instanceID in textureImporterInstanceIDs)\n        {\n            var ti = EditorUtility.InstanceIDToObject(instanceID) as TextureImporter;\n            TextureFormat textureFormat;\n            ColorSpace colorSpace;\n            int compressionQuality;\n            if (ti == null)\n                continue;\n            ti.ReadTextureImportInstructions(target, out textureFormat, out colorSpace, out compressionQuality);\n\n            var tis = new TextureImporterSettings();\n            ti.ReadTextureSettings(tis);\n            ti.isReadable = true;\n            tis.readable = true;\n\n            Sprite[] sprites = AssetDatabase.LoadAllAssetRepresentationsAtPath(ti.assetPath).Select(x => x as Sprite).Where(x => x != null).ToArray();\n\n            foreach (Sprite sprite in sprites)\n            {\n                var entry = new Entry();\n                entry.sprite = sprite;\n                entry.settings.format = textureFormat;\n                entry.settings.colorSpace = colorSpace;\n                entry.settings.compressionQuality = compressionQuality;\n                entry.settings.filterMode = Enum.IsDefined(typeof(FilterMode), ti.filterMode) ? ti.filterMode : FilterMode.Bilinear;\n                entry.settings.maxWidth = 2048;\n                entry.settings.maxHeight = 2048;\n                entry.settings.generateMipMaps = ti.mipmapEnabled;\n                if (ti.mipmapEnabled)\n                    entry.settings.paddingPower = kDefaultPaddingPower;\n                entry.atlasName = ParseAtlasName(ti.spritePackingTag);\n                entry.packingMode = GetPackingMode(ti.spritePackingTag, tis.spriteMeshType);\n                entry.anisoLevel = ti.anisoLevel;\n\n                entries.Add(entry);\n            }\n\n            Resources.UnloadAsset(ti);\n\n            foreach (var sprite in sprites)\n            {\n                var m_tex = sprite.texture;\n                AlphaMapCreater.Create(m_tex);\n            }\n        }\n\n        // First split sprites into groups based on atlas name\n        var atlasGroups =\n            from e in entries\n            group e by e.atlasName;\n        foreach (var atlasGroup in atlasGroups)\n        {\n            int page = 0;\n            // Then split those groups into smaller groups based on texture settings\n            var settingsGroups =\n                from t in atlasGroup\n                group t by t.settings;\n            foreach (var settingsGroup in settingsGroups)\n            {\n                string atlasName = atlasGroup.Key;\n                if (settingsGroups.Count() > 1)\n                    atlasName += string.Format(\" (Group {0})\", page);\n\n                AtlasSettings settings = settingsGroup.Key;\n                settings.anisoLevel = 1;\n\n                // Use the highest aniso level from all entries in this atlas\n                if (settings.generateMipMaps)\n                    foreach (Entry entry in settingsGroup)\n                        if (entry.anisoLevel > settings.anisoLevel)\n                            settings.anisoLevel = entry.anisoLevel;\n\n                job.AddAtlas(atlasName, settings);\n\n                foreach (Entry entry in settingsGroup)\n                {\n                    job.AssignToAtlas(atlasName, entry.sprite, entry.packingMode, SpritePackingRotation.None);\n                }\n\n                ++page;\n            }\n\n        }\n    }\n\n    protected bool IsTagPrefixed(string packingTag)\n    {\n        packingTag = packingTag.Trim();\n        if (packingTag.Length < TagPrefix.Length)\n            return false;\n        return (packingTag.Substring(0, TagPrefix.Length) == TagPrefix);\n    }\n\n    private string ParseAtlasName(string packingTag)\n    {\n        string name = packingTag.Trim();\n        if (IsTagPrefixed(name))\n            name = name.Substring(TagPrefix.Length).Trim();\n        return (name.Length == 0) ? \"(unnamed)\" : name;\n    }\n\n    private SpritePackingMode GetPackingMode(string packingTag, SpriteMeshType meshType)\n    {\n        if (meshType == SpriteMeshType.Tight)\n            if (IsTagPrefixed(packingTag) == AllowTightWhenTagged)\n                return SpritePackingMode.Tight;\n        return SpritePackingMode.Rectangle;\n    }\n}\n\n#endif\n```\n\n\u9577\u3044\u30b3\u30fc\u30c9\u30da\u30bf\u30da\u30bf\u8cbc\u308a\u4ed8\u3051\u3066\u3059\u3044\u307e\u305b\u3093\u30fb\u30fb\u30fb\u3002\n\u6ce8\u76ee\u7b87\u6240\u306f\u3053\u3061\u3089\u3067\u3059\u3002\n\n```csharp\n\nforeach (var sprite in sprites)\n{\n    var m_tex = sprite.texture;\n    AlphaMapCreater.Create(m_tex);\n}\n```\n\n\u5148\u307b\u3069\u4f5c\u3063\u305f`AlphaMapCreater.Create`\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u6e21\u3059\u3060\u3051\u3067\u3059\u3002\n\n### Unity\u306e\u8a2d\u5b9a\u3092\u8272\u3005\n\u8a00\u308f\u305a\u3082\u304c\u306a\u3067\u3059\u304c\uff0c\u307e\u305a\u753b\u50cf\u306e\u8a2d\u5b9a\u304b\u3089\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-12-03 0.08.45.png](https://qiita-image-store.s3.amazonaws.com/0/68827/c3a7ff67-57e4-3a36-fad8-16ac9fa39dd4.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-12-03 0.08.45.png\")\n\nPacking Tag\u3092\u9069\u5f53\u306b\u8a2d\u5b9a\u3057\u306a\u3044\u3068\uff0c\u30d1\u30c3\u30ad\u30f3\u30b0\u3055\u308c\u306a\u3044\u6c17\u304c\u3059\u308b\u306e\u3067\u6ce8\u610f\u3067\u3059\u3002\n\u307e\u305fResources\u30d5\u30a9\u30eb\u30c0\u306b\u5165\u3063\u3066\u3044\u308b\u753b\u50cf\u306f\u30d1\u30c3\u30ad\u30f3\u30b0\u3055\u308c\u306a\u3044\u306e\u3067\u3053\u308c\u3082\u6ce8\u610f\u3067\u3059\uff01\uff01\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-12-03 0.05.10.png](https://qiita-image-store.s3.amazonaws.com/0/68827/8160c055-d8b9-ba1d-94f1-b75ad621018a.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-12-03 0.05.10.png\")\n\u30e1\u30cb\u30e5\u30fc\u306e`Window > Sprite Packer`\u3067Sprite Packer\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u958b\u3044\u3066\u53f3\u3089\u3078\u3093\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\u305d\u3057\u3066\uff0cPack\u3068\u304bRepack\u3068\u304bUnity\u518d\u8d77\u52d5\u3068\u304b\u518d\u751f\u3068\u304b\u3057\u3066\u308b\u3068\u6b21\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n(Pack\u3067\u4f5c\u6210\u3055\u308c\u308b\u306f\u305a\u306a\u306e\u3067\u3059\u304c\uff0c\u306a\u3093\u3067\u304b\u8272\u3005\u3057\u306a\u3044\u3068\u4f5c\u6210\u3055\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u30fb\u30fb\u3002\u3044\u3064\u304b\u3089\u30fb\u30fb\u3002)\n\n```Assets/Resources/AlphaMap/button.bytes\n...\n0000 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000 00fc ffff\nffff ffff ffff ff00 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000 00ff ffff\nffff ffff ffff ff03 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000 80ff ffff\n...\n```\n\u306a\u306b\u3084\u3089\u305d\u308c\u3063\u307d\u3044\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n## \u62bc\u305b\u308b\u5834\u6240\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u3092\u3059\u308b\n\n\u3044\u3088\u3044\u3088\u5224\u5b9a\u307e\u3067\u3084\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\n```AlphaMap.cs\nusing System.IO;\nusing UnityEngine;\nusing System;\nusing System.Collections.Generic;\n\npublic class AlphaMap\n{\n    private readonly byte[] bytes;\n    private readonly Sprite sprite;\n    private readonly uint width;\n    private readonly uint height;\n    private static Dictionary<string, AlphaMap> cache;\n    private AlphaMap(Sprite sprite)\n    {\n        this.sprite = sprite;\n        var alphaBytes = Resources.Load<TextAsset>(\"AlphaMap/\" + sprite.name).bytes;\n        width  = BitConverter.ToUInt32(alphaBytes, 0);\n        height = BitConverter.ToUInt32(alphaBytes, 4);\n        bytes = new byte[alphaBytes.Length - 8];\n        Array.Copy(alphaBytes, 8, bytes, 0, bytes.Length);\n    }\n\n    static public AlphaMap Load(Sprite sprite)\n    {\n        cache = cache ?? new Dictionary<string, AlphaMap>();\n\n        if (cache.ContainsKey(sprite.name))\n            return cache[sprite.name];\n\n        var map = new AlphaMap(sprite);\n        cache.Add(sprite.name, map);\n        return map;\n    }\n\n    public bool IsFlag(int x, int y)\n    {\n        var index = (int)(x + y * width) / 8;\n        var flag  = 1 << (int)((x + y * width) % 8);\n        try\n        {\n            return bytes[index] > (bytes[index] ^ flag);\n        }\n        catch\n        {\n            return false;\n        }\n    }\n}\n```\n\n\u3053\u3061\u3089\u306f\u5b9f\u88c5\u306e\u901a\u308a\u3067\u3059\u3002`IsFlag`\u30e1\u30bd\u30c3\u30c9\u304c\u5b9f\u969b\u306b\u5224\u5b9a\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\u30d3\u30c3\u30c8\u6f14\u7b97\u306b\u306a\u308b\u306e\u3067\u89e3\u8aac\u3092\u3002\n\n\u3055\u304d\u307b\u3069\u306e\u89e3\u8aac\u306e\u3088\u3046\u306b\uff0c8\u30d4\u30af\u30bb\u30eb\u306e\u30c7\u30fc\u30bf\u304c1byte\u306b\u306f\u5165\u3063\u3066\u3044\u307e\u3059\u3002\u306a\u306e\u3067\uff0c\u4e0e\u3048\u3089\u308c\u305f2\u6b21\u5143\u5ea7\u6a19\u3092\u5ea7\u6a19\u3092\u3042\u3089\u304b\u3058\u3081\u53d6\u5f97\u3057\u3066\u3042\u308bwidth\u3092\u4f5c\u3063\u30661\u6b21\u5143\u306b\u3057\u307e\u3059\u3002\n\n```csharp\nvar index = (int)(x + y * width) / 8;\n```\n\n\u3055\u3089\u306b\uff0c8\u500b\u306e\u8981\u7d20\u306e\u4e2d\u306e\u4f55\u500b\u76ee\u306e\u8981\u7d20\u304b\u3092\u5f97\u308b\u305f\u3081\u306b\n\n```csharp\n(x + y * width) % 8\n```\n\n\u3053\u306e\u8a08\u7b97\u3092\u3057\u307e\u3059\u3002\n\u3053\u308c\u3092\u4f7f\u3063\u3066\uff0c\u5bfe\u8c61\u306e\u6841\u3060\u30511\u306b\u306a\u3063\u3066\u3044\u308b2\u9032\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```csharp\nvar flag  = 1 << (int)((x + y * width) % 8);\n```\n\u4f8b\u3048\u3070\uff0c8\u500b\u4e2d\u306e6\u500b\u76ee\u3060\u3063\u305f\u5834\u5408\u306f`00100000`\u3068\u3044\u30462\u9032\u6570\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u305d\u3057\u3066\uff0c\u5b9f\u969b\u306b\u305d\u306e\u30d4\u30af\u30bb\u30eb\u304c\u900f\u660e\u304b\u4e0d\u900f\u660e\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\n\n```csharp\nreturn bytes[index] > (bytes[index] ^ flag);\n```\n\n\u3053\u308c\u306f\u4e45\u3057\u3076\u308a\u306b\u8aad\u3093\u3067\uff0c\u4e00\u77ac\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u3067\u3059\u306d\uff0c\u30cf\u30a4\u3002\n\u3064\u307e\u308a\uff0c\u3053\u308c\u306f\u5bfe\u8c61\u306e\u30d3\u30c3\u30c8\u304c1\u3060\u3063\u305f\u3089\u5168\u4f53\u306e\u5024\u304c\u5143\u306e\u5024\u3088\u308a\u5c0f\u3055\u304f\u306a\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u4f8b\u3048\u3070\n11011000\u306b\u5bfe\u3057\u306600010000\u3092XOR\u3059\u308b\u306811001000\u3068\u306a\u3063\u3066\uff0c\u5143\u306e\u5024\u3088\u308a\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002\n11011000\u306b\u5bfe\u3057\u306600100000\u3092XOR\u3059\u308b\u306811111000\u3068\u306a\u3063\u3066\uff0c\u5143\u306e\u5024\u3088\u308a\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u6027\u8cea\u3092\u4f7f\u3063\u305f\u5224\u5b9a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u3042\u3068\u306f\u3053\u308c\u3089\u3092\u5229\u7528\u3057\u305f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u3064\u304f\u308b\u3060\u3051\n\n```ImageButton.cs\nusing UnityEngine;\nusing UnityEngine.UI;\n\n[RequireComponent(typeof(Image))]\npublic class ImageButton : Button, ICanvasRaycastFilter\n{\n    private Canvas canvas;\n    private int? canvasWidth;\n    private int? canvasHeight;\n\n    private Image image;\n    private AlphaMap alphaMap;\n\n    void Start()\n    {\n        image = GetComponent<Image>();\n        CanvasScaler scaler;\n        Transform p = transform;\n        do {\n            p = p.parent;\n            scaler = p.GetComponent<CanvasScaler>();\n        } while(scaler == null);\n\n        canvas = scaler.GetComponent<Canvas>();\n        canvasWidth = (int)scaler.referenceResolution.x;\n        canvasHeight = (int)scaler.referenceResolution.y;\n\n        alphaMap = AlphaMap.Load(image.sprite);\n    }\n\n    public bool IsRaycastLocationValid(Vector2 sp, Camera c)\n    {\n        var point = new Vector2 (\n                        sp.x / Screen.width * canvasWidth.Value,\n                        sp.y / Screen.height * canvasHeight.Value\n                    );\n\n        var screenPoint = new Vector2 (\n                              transform.position.x / canvas.transform.localScale.x,\n                              transform.position.y / canvas.transform.localScale.y\n                          );\n\n        var areaPosition =\n            point - new Vector2 (\n                screenPoint.x - image.rectTransform.pivot.x * image.rectTransform.sizeDelta.x,\n                screenPoint.y - image.rectTransform.pivot.y * image.rectTransform.sizeDelta.y\n            );\n\n        return alphaMap.IsFlag((int)areaPosition.x, (int)areaPosition.y);\n    }\n}\n```\n\n`ICanvasRaycastFilter`\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3068\uff0c\u30af\u30ea\u30c3\u30af\u5224\u5b9a\u304c\u5165\u3063\u305f\u304b\u3069\u3046\u304b\u3092\u5236\u5fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u8a73\u3057\u304f\u306f\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u304c\u30aa\u30b9\u30b9\u30e1\u3067\u3059\u3002\nhttp://tsubakit1.hateblo.jp/entry/2015/01/30/213000\n(\u30c6\u30e9\u30b7\u30e5\u30fc\u30eb\u30d6\u30ed\u30b0\u306b\u304a\u4e16\u8a71\u306b\u306a\u308a\u307e\u304f\u3063\u3066\u307e\u3059\u30fb\u30fb\u3002\u3059\u3044\u307e\u305b\u3093\u3002)\n\n\u73fe\u5728\u306fCanvasScaler\u304cScale With Screen Size\u306e\u8a2d\u5b9a\u306b\u306a\u3063\u3066\u306a\u3044\u3068\u3046\u307e\u304f\u4f5c\u7528\u3057\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u898b\u3066\u308f\u304b\u308b\u3088\u3046\u306b\uff0c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u30dd\u30b8\u30b7\u30e7\u30f3\u3092\u9811\u5f35\u3063\u3066\u753b\u50cf\u306e\u4e2d\u3067\u306e\u30dd\u30b8\u30b7\u30e7\u30f3\u306b\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u3057\u3066\uff0cAlphaMap\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u8a66\u3057\u3066\u307f\u308b\nGameObject\u3092Canvas\u4ee5\u4e0b\u306b\u4f5c\u3063\u3066\u3055\u304d\u307b\u3069\u4f5c\u3063\u305fImageButton\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u4ed8\u4e0e\u3057\u3066\u518d\u751f\u3057\u3066\u307f\u307e\u3059\u3002\n\n![image_button.gif](https://qiita-image-store.s3.amazonaws.com/0/68827/684804e4-89a6-06bf-bccc-2a25a5d3b685.gif \"image_button.gif\")\n\n\u308f\u3051\u308f\u304b\u3089\u3093\u753b\u50cf\u4f7f\u3063\u3066\u307e\u3059\u304c\uff0c\u3069\u3046\u3084\u3089\u3046\u307e\u304f\u52d5\u3044\u3066\u307e\u3059\u306d\u3002\n\n## \u7d42\u308f\u308a\u306e\u3053\u3068\u3070\nUnity\u306f\u3068\u3066\u3082\u30b2\u30fc\u30e0\u304c\u7c21\u5358\u306b\u4f5c\u308c\u307e\u3059\u304c\uff0c\u3053\u3046\u3044\u3046\u3068\u304d\u306b\u3057\u3093\u3069\u3044\u601d\u3044\u3092\u3057\u307e\u3059\u3002\u3057\u304b\u3057\uff0cC#\u697d\u3057\u3044\u306e\u3067\u7279\u306b\u554f\u984c\u306a\u3044\u3067\u3059\u306d\u30fb\u30fb\u3002\n\n\u3053\u308c\u3089\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fGithub\u306b\u30a2\u30c3\u30d7\u3057\u3066\u304a\u304d\u307e\u3059\u306e\u3067\uff0c\u308f\u304b\u3089\u306a\u3044\u70b9\u304c\u3042\u308c\u3070\u662f\u975e\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u3068\u3066\u3082\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\uff0c\u95b2\u89a7\u3057\u3066\u304f\u3060\u3055\u308a\u8aa0\u306b\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\nhttps://github.com/tagia0212/ImageButton\n\n\u6b21\u306f[hecomi](http://qiita.com/hecomi)\u3055\u3093\u3067\u3059\uff01\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n", "tags": ["Unity", "C#", "uGUI"]}