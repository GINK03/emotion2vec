{"tags": ["Python", "fluentd"], "context": " More than 1 year has passed since last update.exec_filter Output Plugin (out_ecec_filter)\u306f\u8981\u3059\u308b\u306b\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3092\u4efb\u610f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u304b\u307e\u305b\u3089\u308c\u308b\u3002\u4f8b\u3048\u3070\u6b21\u306e\u51e6\u7406\u306b\u4e0d\u8981\u306a\u30ec\u30b3\u30fc\u30c9\u3092\u843d\u3057\u305f\u308a\u3001\u30a8\u30e9\u30fc\u3068\u3057\u3066\u3069\u3053\u304b\u306b\u4fdd\u5b58\u3057\u305f\u308a\u3002\u3053\u3053\u3067Python\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u307f\u308b\u3002\n\n\u8a2d\u5b9a\n\u6b21\u306e\u901a\u308a\u306b\u3057\u3066\u307f\u305f\u3002\n<match hoge>\n  type       exec_filter\n  command    /path/to/python -m myapp.fluent_stream_filter\n\n  time_key   time\n  in_format  json\n  out_format msgpack\n\n  buffer_type file\n  buffer_path /path/to/buffer\n  buffer_chunk_limit 8m\n  buffer_queue_limit 64\n  flush_interval 10s\n\n  tag        fuga\n</match>\n\ncommand\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\u5b9f\u884c\u3057\u3066\u3044\u308b\u306e\u306f\u3001import\u304c\u4e0a\u624b\u304f\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3002\u3053\u308c\u306a\u3089PYTHONPATH\u6307\u5b9a\u306f\u4e0d\u8981\u3002\n\u30d5\u30a1\u30a4\u30eb\u30d0\u30c3\u30d5\u30a1\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u306f\u3001\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3057\u305f\u6642\u306bfluend\u306e\u518d\u8d77\u52d5\u304c\u5fc5\u8981\u306a\u305f\u3081\u3002exec_filter Output\u30d7\u30e9\u30b0\u30a4\u30f3\u306fexec Output\u30d7\u30e9\u30b0\u30a4\u30f3\u3068\u9055\u3044\u3001\u6307\u5b9a\u3057\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u8d77\u52d5\u5f8c\u306b\u6a19\u6e96\u5165\u529b\u306e\u5165\u529b\u5f85\u3061\u3068\u306a\u308b\u3002\n\n\u30b9\u30af\u30ea\u30d7\u30c8\nexec_filter Output Plugin\u306e\u8981\u6c42\u3068\u3057\u3066\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u6a19\u6e96\u5165\u529b\u3092\u53d7\u3051\u3068\u308a\u3001\u6a19\u6e96\u51fa\u529b\u306b\u7d50\u679c\u3092\u5410\u304b\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3002\n\nfluent_stream_filter.py\n# coding=utf-8\n\"\"\"\nfluentd\u306eout_exec_filter\u3067\u547c\u3070\u308c\u308b\u30b3\u30fc\u30c9\n\n\u6a19\u6e96\u5165\u529b\u304b\u30891\u884c\u305a\u3064\u51e6\u7406\u3092\u884c\u306a\u3044\u3001\u7d50\u679c\u3092\u6a19\u6e96\u51fa\u529b\u306b\u5410\u304f\n\"\"\"\nimport json\nimport logging\nimport logging.config\nimport sys\nimport traceback\n\nimport msgpack\n\nlogging.config.fileConfig('/path/to/logging.conf')\nlogger = logging.getLogger('fluent-exec')\nlogger.propagate = False\n\ndef main():\n    stdin = sys.stdin\n    output(convert(validate(parse(readline(stdin)))))\n\ndef readline(stdin):\n    for line in stdin:\n        yield line\n\ndef parse(lines):\n    for line in lines:\n        yield json.loads(line)\n\ndef validate(rows):\n    \"\"\" \u30a8\u30e9\u30fc\u30c7\u30fc\u30bf\u306e\u9664\u53bb \"\"\"\n    for row in rows:\n        try:\n             # \u306a\u3093\u3089\u304b\u306e\u691c\u67fb\n        except Exception, e:\n            logger.warn(e)\n            logger.warn(row)\n            continue\n        yield row\n\ndef convert(rows):\n    \"\"\" \u306a\u3093\u3089\u304b\u306e\u5909\u63db\u51e6\u7406 \"\"\"\n    for row in rows:\n        # do something\n        yield row\n\ndef output(rows):\n    \"\"\" \u6a19\u6e96\u51fa\u529b\u306b\u5410\u304d\u51fa\u3059 \"\"\"\n    for row in rows:\n        sys.stdout.write(msgpack.packb(row))\n\nif __name__ == '__main__':\n    logger.info('Start main')\n    try:\n        main()\n    except Exception, e:\n        logger.error(traceback.format_exc())\n        raise e\n    logger.info('End main')\n\n\nlogging.getLogger\u306b\u306f__name__\u3092\u6e21\u3059\u306e\u304c\u5e38\u5957\u3060\u304c\u3001\u3053\u3053\u3067\u306f\u30b9\u30af\u30ea\u30d7\u30c8\u8d77\u52d5\u3055\u308c\u308b\u305f\u3081\u5185\u5bb9\u306f '__main__' \u3067\u3042\u308b\u3001\u306a\u306e\u3067\u6587\u5b57\u5217\u3067\u30ed\u30ac\u30fc\u306e\u540d\u524d\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u3002\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\u6a19\u6e96\u5165\u529b\u3092\u6271\u3046\u30e1\u30bd\u30c3\u30c9\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u3067stdio\u3092\u53d7\u3051\u3068\u308b\u3088\u3046\u306b\u3059\u308b\u3068\u826f\u3044\u304b\u3082\u3002\u30c6\u30b9\u30c8\u3067\u6a19\u6e96\u5165\u529b\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u65b9\u6cd5\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067StringIO\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6e21\u3057\u3066\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304c\u8aad\u3081\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n# coding=utf-8\nimport types\nfrom StringIO import StringIO\n\nfrom nose.tools import ok_, eq_\n\nfrom myapp import fluent_stream_filter\n\n\nclass TestAll(object):\n    def test_readline(self):\n        \"\"\" readline\u306e\u30c6\u30b9\u30c8\u3001sys.stdin\u306e\u4ee3\u308a\u306bStringIO\u3092\u6e21\u3059 \"\"\"\n        stdin = StringIO()\n        stdin.write(open('/path/to/test_data.log').read())\n        stdin.seek(0)\n\n        stream = fluent_stream_filter.readline(stdin)\n        ok_(isinstance(stream, types.GeneratorType))\n        eq_(stream.next(), u'{1\u884c\u76ee\u306e\u5185\u5bb9}')\n\n    def test_parse(self):\n        \"\"\" parse \u306e\u30c6\u30b9\u30c8 \"\"\"\n        stream = fluent_stream_filter.parse(iter(['{...}', '{...}']))\n        ok_(isinstance(stream, types.GeneratorType))\n        eq_(stream.next(), {...})\n        eq_(stream.next(), {...})\n\n    # (\u7565)\n\n\n\u30ed\u30b0\u51fa\u529b\u3067\u306e\u6ce8\u610f\n\u6a19\u6e96\u51fa\u529b\u306b\u51e6\u7406\u7d50\u679c\u4ee5\u5916\u306e\u3001\u4f8b\u3048\u3070\u30ed\u30b0\u3092\u5410\u304d\u51fa\u3057\u3066\u3057\u307e\u3046\u3068\u3001\u5f53\u7136MessagePack\u3084JSON\u3068\u3057\u3066\u30d1\u30fc\u30b9\u3067\u304d\u306a\u3044\u306e\u3067fluentd\u5074\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002root\u30ed\u30ac\u30fc\u306bConsoleHandler\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u305f\u308a\u3057\u3066\u610f\u56f3\u305b\u305a\u6a19\u6e96\u51fa\u529b\u306b\u30ed\u30b0\u3092\u5410\u3044\u3066\u3057\u307e\u3046\u4e8b\u6545\u3092\u9632\u3050\u305f\u3081\u306b\nlogger.propagate = False\n\n\u3057\u3066\u304a\u304f\u3068\u5b89\u5168\n\n[exec_filter Output Plugin](http://docs.fluentd.org/ja/articles/out_exec_filter) (out_ecec_filter)\u306f\u8981\u3059\u308b\u306b\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3092\u4efb\u610f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u304b\u307e\u305b\u3089\u308c\u308b\u3002\u4f8b\u3048\u3070\u6b21\u306e\u51e6\u7406\u306b\u4e0d\u8981\u306a\u30ec\u30b3\u30fc\u30c9\u3092\u843d\u3057\u305f\u308a\u3001\u30a8\u30e9\u30fc\u3068\u3057\u3066\u3069\u3053\u304b\u306b\u4fdd\u5b58\u3057\u305f\u308a\u3002\u3053\u3053\u3067Python\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u307f\u308b\u3002\n\n## \u8a2d\u5b9a\n\n\u6b21\u306e\u901a\u308a\u306b\u3057\u3066\u307f\u305f\u3002\n\n```\n<match hoge>\n  type       exec_filter\n  command    /path/to/python -m myapp.fluent_stream_filter\n\n  time_key   time\n  in_format  json\n  out_format msgpack\n\n  buffer_type file\n  buffer_path /path/to/buffer\n  buffer_chunk_limit 8m\n  buffer_queue_limit 64\n  flush_interval 10s\n\n  tag        fuga\n</match>\n```\n\n`command`\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\u5b9f\u884c\u3057\u3066\u3044\u308b\u306e\u306f\u3001import\u304c\u4e0a\u624b\u304f\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u3002\u3053\u308c\u306a\u3089PYTHONPATH\u6307\u5b9a\u306f\u4e0d\u8981\u3002\n\n\u30d5\u30a1\u30a4\u30eb\u30d0\u30c3\u30d5\u30a1\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u306f\u3001\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3057\u305f\u6642\u306bfluend\u306e\u518d\u8d77\u52d5\u304c\u5fc5\u8981\u306a\u305f\u3081\u3002exec_filter Output\u30d7\u30e9\u30b0\u30a4\u30f3\u306fexec Output\u30d7\u30e9\u30b0\u30a4\u30f3\u3068\u9055\u3044\u3001\u6307\u5b9a\u3057\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u8d77\u52d5\u5f8c\u306b\u6a19\u6e96\u5165\u529b\u306e\u5165\u529b\u5f85\u3061\u3068\u306a\u308b\u3002\n\n## \u30b9\u30af\u30ea\u30d7\u30c8\n\nexec_filter Output Plugin\u306e\u8981\u6c42\u3068\u3057\u3066\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u6a19\u6e96\u5165\u529b\u3092\u53d7\u3051\u3068\u308a\u3001\u6a19\u6e96\u51fa\u529b\u306b\u7d50\u679c\u3092\u5410\u304b\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3002\n\n```python:fluent_stream_filter.py\n# coding=utf-8\n\"\"\"\nfluentd\u306eout_exec_filter\u3067\u547c\u3070\u308c\u308b\u30b3\u30fc\u30c9\n\n\u6a19\u6e96\u5165\u529b\u304b\u30891\u884c\u305a\u3064\u51e6\u7406\u3092\u884c\u306a\u3044\u3001\u7d50\u679c\u3092\u6a19\u6e96\u51fa\u529b\u306b\u5410\u304f\n\"\"\"\nimport json\nimport logging\nimport logging.config\nimport sys\nimport traceback\n\nimport msgpack\n\nlogging.config.fileConfig('/path/to/logging.conf')\nlogger = logging.getLogger('fluent-exec')\nlogger.propagate = False\n\ndef main():\n    stdin = sys.stdin\n    output(convert(validate(parse(readline(stdin)))))\n\ndef readline(stdin):\n    for line in stdin:\n        yield line\n\ndef parse(lines):\n    for line in lines:\n        yield json.loads(line)\n\ndef validate(rows):\n    \"\"\" \u30a8\u30e9\u30fc\u30c7\u30fc\u30bf\u306e\u9664\u53bb \"\"\"\n    for row in rows:\n        try:\n\t\t     # \u306a\u3093\u3089\u304b\u306e\u691c\u67fb\n        except Exception, e:\n            logger.warn(e)\n            logger.warn(row)\n            continue\n        yield row\n\ndef convert(rows):\n    \"\"\" \u306a\u3093\u3089\u304b\u306e\u5909\u63db\u51e6\u7406 \"\"\"\n    for row in rows:\n        # do something\n        yield row\n\ndef output(rows):\n\t\"\"\" \u6a19\u6e96\u51fa\u529b\u306b\u5410\u304d\u51fa\u3059 \"\"\"\n    for row in rows:\n        sys.stdout.write(msgpack.packb(row))\n\nif __name__ == '__main__':\n    logger.info('Start main')\n    try:\n        main()\n    except Exception, e:\n        logger.error(traceback.format_exc())\n        raise e\n    logger.info('End main')\n```\n\nlogging.getLogger\u306b\u306f`__name__`\u3092\u6e21\u3059\u306e\u304c\u5e38\u5957\u3060\u304c\u3001\u3053\u3053\u3067\u306f\u30b9\u30af\u30ea\u30d7\u30c8\u8d77\u52d5\u3055\u308c\u308b\u305f\u3081\u5185\u5bb9\u306f `'__main__'` \u3067\u3042\u308b\u3001\u306a\u306e\u3067\u6587\u5b57\u5217\u3067\u30ed\u30ac\u30fc\u306e\u540d\u524d\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u3002\n\n## \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\n\u6a19\u6e96\u5165\u529b\u3092\u6271\u3046\u30e1\u30bd\u30c3\u30c9\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u3067stdio\u3092\u53d7\u3051\u3068\u308b\u3088\u3046\u306b\u3059\u308b\u3068\u826f\u3044\u304b\u3082\u3002\u30c6\u30b9\u30c8\u3067\u6a19\u6e96\u5165\u529b\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u65b9\u6cd5\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067StringIO\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6e21\u3057\u3066\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304c\u8aad\u3081\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\n```\n# coding=utf-8\nimport types\nfrom StringIO import StringIO\n\nfrom nose.tools import ok_, eq_\n\nfrom myapp import fluent_stream_filter\n\n\nclass TestAll(object):\n    def test_readline(self):\n        \"\"\" readline\u306e\u30c6\u30b9\u30c8\u3001sys.stdin\u306e\u4ee3\u308a\u306bStringIO\u3092\u6e21\u3059 \"\"\"\n        stdin = StringIO()\n        stdin.write(open('/path/to/test_data.log').read())\n        stdin.seek(0)\n\n        stream = fluent_stream_filter.readline(stdin)\n        ok_(isinstance(stream, types.GeneratorType))\n        eq_(stream.next(), u'{1\u884c\u76ee\u306e\u5185\u5bb9}')\n\n    def test_parse(self):\n        \"\"\" parse \u306e\u30c6\u30b9\u30c8 \"\"\"\n        stream = fluent_stream_filter.parse(iter(['{...}', '{...}']))\n        ok_(isinstance(stream, types.GeneratorType))\n        eq_(stream.next(), {...})\n        eq_(stream.next(), {...})\n\n    # (\u7565)\n```\n\n## \u30ed\u30b0\u51fa\u529b\u3067\u306e\u6ce8\u610f\n\n\u6a19\u6e96\u51fa\u529b\u306b\u51e6\u7406\u7d50\u679c\u4ee5\u5916\u306e\u3001\u4f8b\u3048\u3070\u30ed\u30b0\u3092\u5410\u304d\u51fa\u3057\u3066\u3057\u307e\u3046\u3068\u3001\u5f53\u7136MessagePack\u3084JSON\u3068\u3057\u3066\u30d1\u30fc\u30b9\u3067\u304d\u306a\u3044\u306e\u3067fluentd\u5074\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002root\u30ed\u30ac\u30fc\u306bConsoleHandler\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u305f\u308a\u3057\u3066\u610f\u56f3\u305b\u305a\u6a19\u6e96\u51fa\u529b\u306b\u30ed\u30b0\u3092\u5410\u3044\u3066\u3057\u307e\u3046\u4e8b\u6545\u3092\u9632\u3050\u305f\u3081\u306b\n\n```\nlogger.propagate = False\n```\n\n\u3057\u3066\u304a\u304f\u3068\u5b89\u5168\n"}