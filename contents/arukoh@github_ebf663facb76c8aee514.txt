{"context": " More than 1 year has passed since last update.\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\u666e\u901a\u306bLTSV\u5bfe\u5fdc\u3059\u308b\u306a\u3089gem\u3092\u4f7f\u3046\u306e\u304c\u7c21\u5358\u3002\n\nltsv-logger\nlogger-ltsv\n\n\u305f\u3060\u3057\u3001\u305d\u306e\u307e\u307eActiveSupport::TaggedLogging\u306e\u30bf\u30b0\u57cb\u3081\u8fbc\u307f\u306b\u5bfe\u5fdc\u3059\u308b\u3068\u3001message preffix\u3068\u3057\u3066\u51fa\u529b\u3055\u308c\u3066\u3057\u307e\u3046\u3002\n\"[0294a134-a338-11e3-90bc-52540092ec69] hoge\"\n\n\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3001\u30ea\u30af\u30a8\u30b9\u30c8ID\u7b49\u306e\u30bf\u30b0\u57cb\u3081\u8fbc\u307f\u3082LTSV\u5f62\u5f0f\u3067\u51fa\u529b\u53ef\u80fd\u306b\u3057\u3066\u307f\u308b\u3002\n\"uuid:0294a134-a338-11e3-90bc-52540092ec69[TAB]message:hoge\"\n\n\n\u5bfe\u5fdc\n\nformatter.rb\nmodule LTSV\n  class Formatter < ::Logger::Formatter\n    def call(severity, time, progname, msg)\n      return \"\" if msg.blank?\n      raws = []\n      raws << \"pid:#{$$}\"\n      raws << \"severity:#{severity}\"\n      raws << \"time:#{format_datetime(time)}\"\n      raws << \"progname:#{progname}\" if progname\n      case msg\n      when Hash\n        key = \"severity\"\n        message = msg.stringify_keys\n        if message.has_key?(key)\n          index = raws.find_index { |v| v =~ /^#{key}:(.*)/ }\n          raws[index].gsub!($1, message[key])\n          message.delete(key)\n        end \n        raws = msg.inject(raws) { |h, (k, v)| h << \"#{k}:#{v}\"; h }\n      else\n        raws << \"message:#{msg2str(msg)}\"\n      end\n      \"#{raws.join(\"\\t\")}\\n\"\n    end\n\n    private\n\n    def format_datetime(time)\n      if @datetime_format.nil?\n        time.strftime(\"%Y-%m-%dT%H:%M:%S.\") << \"%06d\" % time.usec\n      else\n        super\n      end\n    end\n  end\nend\n\n\n\nlogger.rb\nrequire 'logger'\n\nmodule LTSV\n  class Logger < ::Logger\n    def initialize(*args)\n      super\n      @formatter = LTSV::Formatter.new\n    end\n\n    def add_ext(severity, message = nil, progname = nil, tags_hash)\n      self.add(severity, msg2hash(message, tags_hash), progname)\n    end\n\n    private\n\n    def msg2hash(msg, tags_hash)\n      return nil if msg.blank?\n      hash = tags_hash.clone\n      case msg\n      when ::Exception\n        hash[\"message\"] = \"#{msg.message} (#{msg.class})\"\n        msg.backtrace.each_with_index {|trace, i| hash[\"trace#{i}\"] = trace }\n      when ::Hash\n        hash.merge!(msg)\n      when ::String\n        hash[\"message\"] = msg\n      else\n        hash[\"message\"] = msg.inspect\n      end\n      hash\n    end\n  end\nend\n\n\n\ntagged_logging.rb\nmodule LTSV\n  class TaggedLogging < ActiveSupport::TaggedLogging\n    class << self\n      # for Rails.configuration.log_tags\n      def log_tags\n        tags.values\n      end\n\n      # for Me\n      def log_tag_keys\n        tags.keys\n      end\n\n      private\n      def tags\n        {\n          request_id: :uuid,\n          session:    lambda {|req| req.cookies[\"_#{APP_NAME}_session\"]}\n        }\n      end\n    end\n\n    # Override\n    def add(severity, message = nil, progname = nil, &block)\n      if message.nil?\n        if block_given?\n          message = block.call\n        else\n          message = progname\n          progname = nil #No instance variable for this like Logger\n        end\n      end\n      if @logger.respond_to?(:add_ext)\n        @logger.add_ext(severity, message, progname, tags_hash)\n      else\n        @logger.add(severity, \"#{tags_text}#{message}\", progname)\n      end\n    end\n\n    private\n    def tags_hash\n      hash = {}\n      self.class.log_tag_keys.each_with_index do |tag, i|\n        if tag == :session\n          next if current_tags[i].blank?\n          session_base64, digest = URI.decode(current_tags[i]).split(\"--\")\n          hash.merge!(Marshal.load(Base64.decode64(session_base64)))\n        else\n          hash[tag.to_s] = current_tags[i]\n        end\n      end\n      hash\n    end\n  end\nend\n\n\n##\u3084\u308a\u305f\u3044\u3053\u3068\n\n\u666e\u901a\u306bLTSV\u5bfe\u5fdc\u3059\u308b\u306a\u3089gem\u3092\u4f7f\u3046\u306e\u304c\u7c21\u5358\u3002\n\n* [ltsv-logger](https://rubygems.org/gems/ltsv-logger)\n* [logger-ltsv](https://rubygems.org/gems/logger-ltsv)\n\n\u305f\u3060\u3057\u3001\u305d\u306e\u307e\u307e[ActiveSupport::TaggedLogging](http://api.rubyonrails.org/classes/ActiveSupport/TaggedLogging.html)\u306e\u30bf\u30b0\u57cb\u3081\u8fbc\u307f\u306b\u5bfe\u5fdc\u3059\u308b\u3068\u3001message preffix\u3068\u3057\u3066\u51fa\u529b\u3055\u308c\u3066\u3057\u307e\u3046\u3002\n\n```\u3000\u4f8b\uff1a\u30ea\u30af\u30a8\u30b9\u30c8ID\u3092\u51fa\u529b\u3057\u305f\u5834\u5408\n\"[0294a134-a338-11e3-90bc-52540092ec69] hoge\"\n```\n\n\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3001\u30ea\u30af\u30a8\u30b9\u30c8ID\u7b49\u306e\u30bf\u30b0\u57cb\u3081\u8fbc\u307f\u3082LTSV\u5f62\u5f0f\u3067\u51fa\u529b\u53ef\u80fd\u306b\u3057\u3066\u307f\u308b\u3002\n\n```\n\"uuid:0294a134-a338-11e3-90bc-52540092ec69[TAB]message:hoge\"\n```\n\n## \u5bfe\u5fdc\n\n```rb:formatter.rb\nmodule LTSV\n  class Formatter < ::Logger::Formatter\n    def call(severity, time, progname, msg)\n      return \"\" if msg.blank?\n      raws = []\n      raws << \"pid:#{$$}\"\n      raws << \"severity:#{severity}\"\n      raws << \"time:#{format_datetime(time)}\"\n      raws << \"progname:#{progname}\" if progname\n      case msg\n      when Hash\n        key = \"severity\"\n        message = msg.stringify_keys\n        if message.has_key?(key)\n          index = raws.find_index { |v| v =~ /^#{key}:(.*)/ }\n          raws[index].gsub!($1, message[key])\n          message.delete(key)\n        end \n        raws = msg.inject(raws) { |h, (k, v)| h << \"#{k}:#{v}\"; h }\n      else\n        raws << \"message:#{msg2str(msg)}\"\n      end\n      \"#{raws.join(\"\\t\")}\\n\"\n    end\n\n    private\n\n    def format_datetime(time)\n      if @datetime_format.nil?\n        time.strftime(\"%Y-%m-%dT%H:%M:%S.\") << \"%06d\" % time.usec\n      else\n        super\n      end\n    end\n  end\nend\n```\n\n```rb:logger.rb \nrequire 'logger'\n\nmodule LTSV\n  class Logger < ::Logger\n    def initialize(*args)\n      super\n      @formatter = LTSV::Formatter.new\n    end\n\n    def add_ext(severity, message = nil, progname = nil, tags_hash)\n      self.add(severity, msg2hash(message, tags_hash), progname)\n    end\n\n    private\n\n    def msg2hash(msg, tags_hash)\n      return nil if msg.blank?\n      hash = tags_hash.clone\n      case msg\n      when ::Exception\n        hash[\"message\"] = \"#{msg.message} (#{msg.class})\"\n        msg.backtrace.each_with_index {|trace, i| hash[\"trace#{i}\"] = trace }\n      when ::Hash\n        hash.merge!(msg)\n      when ::String\n        hash[\"message\"] = msg\n      else\n        hash[\"message\"] = msg.inspect\n      end\n      hash\n    end\n  end\nend\n```\n\n```rb:tagged_logging.rb \nmodule LTSV\n  class TaggedLogging < ActiveSupport::TaggedLogging\n    class << self\n      # for Rails.configuration.log_tags\n      def log_tags\n        tags.values\n      end\n\n      # for Me\n      def log_tag_keys\n        tags.keys\n      end\n\n      private\n      def tags\n        {\n          request_id: :uuid,\n          session:    lambda {|req| req.cookies[\"_#{APP_NAME}_session\"]}\n        }\n      end\n    end\n\n    # Override\n    def add(severity, message = nil, progname = nil, &block)\n      if message.nil?\n        if block_given?\n          message = block.call\n        else\n          message = progname\n          progname = nil #No instance variable for this like Logger\n        end\n      end\n      if @logger.respond_to?(:add_ext)\n        @logger.add_ext(severity, message, progname, tags_hash)\n      else\n        @logger.add(severity, \"#{tags_text}#{message}\", progname)\n      end\n    end\n\n    private\n    def tags_hash\n      hash = {}\n      self.class.log_tag_keys.each_with_index do |tag, i|\n        if tag == :session\n          next if current_tags[i].blank?\n          session_base64, digest = URI.decode(current_tags[i]).split(\"--\")\n          hash.merge!(Marshal.load(Base64.decode64(session_base64)))\n        else\n          hash[tag.to_s] = current_tags[i]\n        end\n      end\n      hash\n    end\n  end\nend\n```", "tags": ["Ruby", "Rails", "LTSV"]}