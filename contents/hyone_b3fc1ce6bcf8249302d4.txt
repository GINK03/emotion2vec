{"context": " More than 1 year has passed since last update.\u3053\u308c\u307e\u3067\u306f\u3001\u3042\u308b\u30ec\u30b3\u30fc\u30c9\u578b\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306f\u3001\u30b9\u30b3\u30fc\u30d7\u5185\u3067\u30e6\u30cb\u30fc\u30af\u306a\u3082\u306e\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u304b\u3063\u305f\u3051\u3069\u3001OCaml 4.01.0 \u304b\u3089\u306f\u3001\u7570\u306a\u308b\u578b\u3067\u540c\u4e00\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3088\u3046\u3060\u3002\n\nIt is now possible to have several variant constructors or record fields of the same name in scope, and type information will be used to disambiguate which one is used -- instead of always using the last one.\n(* $ ocaml -w +41 # warning 41, disabled by default,\n                   # warns when the last-in-scope is used without type information *)\n# type t = A | B;;\n# type u = A;;\n# let x : t = A;;\nval x : t = A\n# let y = A;;\nWarning 41: A belongs to several types: u t\nThe first one was selected. Please disambiguate if this is wrong.\nval y : u = A\n\nThis slightly controversial feature can be tweaked in various ways through an extensive set of warning (40, 41, 42): by converting some of them as errors, you can disable it completely or control its applicability. See http://www.lexifi.com/blog/type-based-selection-label-and-constructors for a more detailed description of the feature.\n\nFrom [Caml-announce] OCaml release 4.01.0\n\u5b9f\u969b\u306b\u8a66\u3057\u3066\u307f\u308b\u3002\n(*    OCaml version 4.01.0      *)\n\n(* \u540c\u4e00\u540d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u3001\u7570\u306a\u308b\u4e8c\u3064\u306e\u30ec\u30b3\u30fc\u30c9\u578b\u3092\u5b9a\u7fa9 *)\n# type student = { name : string; id : int };;\ntype student = { name : string; id : int; }\n# type foo = { name : string };;\ntype foo = { name : string; }\n\n(* \u554f\u984c\u306a\u304f foo \u578b\u3082 student \u578b\u3082\u4f5c\u6210\u3067\u304d\u3066\u3044\u308b *)\n# { name = \"Harou\" };;\n- : foo = {name = \"Harou\"}\n# { name = \"Test\"; id = 22 };;\n- : student = {name = \"Test\"; id = 22}\n\n(* \u540c\u3058\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u6301\u3063\u305f\u5834\u5408\u306f\u65e2\u5b58\u306e\u578b\u304c\u4e0a\u66f8\u304d\u3055\u308c\u3066\u3057\u307e\u3046\u3088\u3046\u3060 *)\n# type hoge = { name : string; id : string };;\ntype hoge = { name : string; id : string; }\n# { name = \"Test\"; id = 22 };;\nCharacters 22-24:\n  { name = \"Test\"; id = 22 };;\n                        ^^\nError: This expression has type int but an expression was expected of type string\n\n# type student = { name : string; id : int };;\ntype student = { name : string; id : int; }\n# type hoge = { name : string; id : int };;\ntype hoge = { name : string; id : int; }\n# { name = \"Test\"; id = 22 };;\n- : hoge = {name = \"Test\"; id = 22}\n\n\n\u3053\u308c\u307e\u3067\u306f\u3001\u3042\u308b\u30ec\u30b3\u30fc\u30c9\u578b\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306f\u3001\u30b9\u30b3\u30fc\u30d7\u5185\u3067\u30e6\u30cb\u30fc\u30af\u306a\u3082\u306e\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u304b\u3063\u305f\u3051\u3069\u3001OCaml 4.01.0 \u304b\u3089\u306f\u3001\u7570\u306a\u308b\u578b\u3067\u540c\u4e00\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3088\u3046\u3060\u3002\n\n> It is now possible to have several variant constructors or record fields of the same name in scope, and type information will be used to disambiguate which one is used -- instead of always using the last one.\n\n> ```ocaml\n(* $ ocaml -w +41 # warning 41, disabled by default,\n                   # warns when the last-in-scope is used without type information *)\n# type t = A | B;;\n# type u = A;;\n# let x : t = A;;\nval x : t = A\n# let y = A;;\nWarning 41: A belongs to several types: u t\nThe first one was selected. Please disambiguate if this is wrong.\nval y : u = A\n```\nThis slightly controversial feature can be tweaked in various ways through an extensive set of warning (40, 41, 42): by converting some of them as errors, you can disable it completely or control its applicability. See http://www.lexifi.com/blog/type-based-selection-label-and-constructors for a more detailed description of the feature.\n\nFrom [[Caml-announce] OCaml release 4.01.0](http://yquem.inria.fr/pipermail/caml-announce/2013-September/000006.html)\n\n\u5b9f\u969b\u306b\u8a66\u3057\u3066\u307f\u308b\u3002\n\n```ocaml\n(*    OCaml version 4.01.0      *)\n\n(* \u540c\u4e00\u540d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u3001\u7570\u306a\u308b\u4e8c\u3064\u306e\u30ec\u30b3\u30fc\u30c9\u578b\u3092\u5b9a\u7fa9 *)\n# type student = { name : string; id : int };;\ntype student = { name : string; id : int; }\n# type foo = { name : string };;\ntype foo = { name : string; }\n\n(* \u554f\u984c\u306a\u304f foo \u578b\u3082 student \u578b\u3082\u4f5c\u6210\u3067\u304d\u3066\u3044\u308b *)\n# { name = \"Harou\" };;\n- : foo = {name = \"Harou\"}\n# { name = \"Test\"; id = 22 };;\n- : student = {name = \"Test\"; id = 22}\n\n(* \u540c\u3058\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u6301\u3063\u305f\u5834\u5408\u306f\u65e2\u5b58\u306e\u578b\u304c\u4e0a\u66f8\u304d\u3055\u308c\u3066\u3057\u307e\u3046\u3088\u3046\u3060 *)\n# type hoge = { name : string; id : string };;\ntype hoge = { name : string; id : string; }\n# { name = \"Test\"; id = 22 };;\nCharacters 22-24:\n  { name = \"Test\"; id = 22 };;\n                        ^^\nError: This expression has type int but an expression was expected of type string\n\n# type student = { name : string; id : int };;\ntype student = { name : string; id : int; }\n# type hoge = { name : string; id : int };;\ntype hoge = { name : string; id : int; }\n# { name = \"Test\"; id = 22 };;\n- : hoge = {name = \"Test\"; id = 22}\n```\n", "tags": ["OCaml"]}