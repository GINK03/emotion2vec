{"context": "\n\u30cf\u30f3\u30ba\u30e9\u30dc\u3055\u3093\u306e\u30d6\u30ed\u30b0\u306bslack\u306b\u901a\u77e5\u3059\u308b\u8a18\u4e8b\u304c\u51fa\u3066\u305f\u306e\u3067mattermost\u7248\u3092\u4f5c\u3063\u3066\u307f\u305f\n\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fc\u30b0\u30eb\u30fc\u30d7\u304c\u5909\u66f4\u3055\u308c\u305f\u3089Slack\u306b\u901a\u77e5\u3059\u308b\n\n\n\u4ed5\u7d44\u307f\u306f\u4e0a\u8a18\u306e\u3082\u306e\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3001\nCloudTrail\u304c\u691c\u77e5\u3057\u305f\u30a4\u30d9\u30f3\u30c8\u30ed\u30b0\u3092CloudWatchLogs\u306b\u5410\u3044\u3066\n\u305d\u306e\u30ed\u30b0\u3092\u30c8\u30ea\u30ac\u30fc\u306bLambda Function\u3092\u5b9f\u884c\u3057\u3066mattermost\u306bwebhook\u3057\u307e\u3059\u3002\n\n\u624b\u9806\n\nCloudTrail\u306e\u8a2d\u5b9a\n\nTrails\u304b\u3089\u4efb\u610f\u306etrail\u3092\u9078\u629e\u3059\u308b\nCloudWatch Logs\u30bb\u30af\u30b7\u30e7\u30f3\u306eConfigure\u3092\u30af\u30ea\u30c3\u30af\nLog Group\u3092\u4f5c\u6210(Continue)\nLog Group\u3068Log Stream\u3092\u4f5c\u6210\u3057\u3066\u3088\u3044\u304b\u7684\u306a\u3053\u3068\u3092\u805e\u304b\u308c\u308b\u306e\u3067Allow\u3092\u30af\u30ea\u30c3\u30af\n\n\nwebhook\u7528\u306eURL\u306e\u53d6\u5f97\n\n\u30b5\u30a4\u30c9\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u7dcf\u5408\u6a5f\u80fd>>\u5185\u5411\u304d\u306e\u30a6\u30a7\u30d6\u30d5\u30c3\u30af>>\u5185\u5411\u304d\u306e\u30a6\u30a7\u30d6\u30d5\u30c3\u30af\u3092\u8ffd\u52a0\u3059\u308b\u3092\u30af\u30ea\u30c3\u30af\n\u8868\u793a\u540d\u3068\u8aac\u660e\u3092\u5165\u529b\u3057\u3001\u901a\u77e5\u3057\u305f\u3044\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u9078\u629e\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\u3002\nURL\u304c\u8868\u793a\u3055\u308c\u308b\u306e\u3067\u8a18\u9332\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\nLambda Function\u306e\u4f5c\u6210\n\n\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f5c\u6210\n$ mkdir lambda-work\n$ cd lambda-work\n\n\nrequests\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u4eca\u56de\u306fpython\u306e\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u306erequests\u3092\u4f7f\u7528\u3057\u305f\u306e\u3067\u305d\u308c\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\n$ pip install requests -t .\n\nmattermost-echo.py\u306e\u4f5c\u6210\nLambda\u30cf\u30f3\u30c9\u30e9\u30fc\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n\nmattermost-echo.py\n# -*- coding: utf-8 -*-\nfrom __future__ import print_function\n\nimport base64\nimport zlib\nimport json\nimport time\nimport boto3\nimport requests\nimport sys\nimport logging\nfrom ast import literal_eval\n\nprint('Loading function')\nurl = 'https://chat.infra.active-ssa.com/hooks/d1snbwu8wi8g38g7ssu5wj7wtw'\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\ndef lambda_handler(event, context):\n    print(event)\n    logger.info(event)\n    data = zlib.decompress(base64.b64decode(event['awslogs']['data']), 16+zlib.MAX_WBITS)\n    data_dict = literal_eval(data)\n    data_list = (data_dict['logEvents'])\n    print(data_list)\n\n    for log in data_list:\n        print(json.loads(json.dumps(log['message'])))\n        log_json = json.loads(log['message'])\n        name = str(log_json['eventName'])\n        user = str(log_json['userIdentity']['userName'])\n        region = str(log_json['awsRegion'])\n        aws_account_id = str(log_json['recipientAccountId'])\n        if 'ipPermissions' in log_json['requestParameters']:\n            target_group = str(log_json['requestParameters']['groupId'])\n            changes = json.loads(json.dumps(log_json['requestParameters']['ipPermissions']['items'], indent=2))\n        else:\n            target_group = str(log_json['responseElements']['groupId'])\n            changes = None\n\n        attache = []\n\n        if not changes is None:\n            for rule in changes:\n                fromport = str(rule['fromPort'])\n                if rule['ipRanges']:\n                  ipranges = str(rule['ipRanges']['items'][0]['cidrIp'])\n                else:\n                  ipranges = None\n\n                if rule['groups']:\n                    groups = str(rule['groups']['items'][0]['groupId'])\n                else:\n                    groups = None\n\n                toport = str(rule['toPort'])\n                protocol = str(rule['ipProtocol'])\n\n                if rule['ipv6Ranges']:\n                    ipv6ranges = json.loads(json.dumps(rule['ipv6Ranges']))\n                else:\n                    ipv6ranges = None\n\n                property = \"|%(protocol)s|%(fromport)s|%(toport)s|%(ipranges)s|%(groups)s|%(ipv6ranges)s|\" % locals ()\n                attache.append(property)\n\n        columns = ''\n        for obj in attache:\n            columns = columns + obj + \"\\n\"\n\n        if name == 'AuthorizeSecurityGroupIngress' or name == 'AuthorizeSecurityGroupEgress':\n            message = '\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u306e\u30eb\u30fc\u30eb\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002'\n        elif name == 'RevokeSecurityGroupIngress' or name == 'RevokeSecurityGroupEgress':\n            message = '\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u306e\u30eb\u30fc\u30eb\u304c\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u3002'\n        elif name == 'CreateSecurityGroup':\n            message = '\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u304c\u4f5c\u6210\u3055\u308c\u307e\u3057\u305f\u3002'\n        elif name == 'DeleteSecurityGroup':\n            message = '\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u304c\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u3002'\n\n        payload = {\n            'icon_url': 'http://recipe.kc-cloud.jp/wp-content/uploads/2014/04/cloudtrail%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3.png',\n            'username': 'Changes Security Group',\n            'text': \"\\n\\\n- *Permission changes*\\n\\\n\\n\\\n---\\n\\\n|protocol    |from port   |to port   |ip ranges   |groups    |ipv6 ranges   |\\n\\\n|:-----------|:-----------|:---------|:-----------|:---------|:-------------|\\n\\\n%(columns)s\\n\\\n---\\n\\\n:warning: %(message)s\\n\\\n```\\n\\\nAWSAccountID : %(aws_account_id)s\\n\\\nRegion       : %(region)s\\n\\\nTargetGroup  : %(target_group)s\\n\\\nEventName    : %(name)s\\n\\\nUserName     : %(user)s\\n\\\n```\" % locals ()\n        }\n\n        headers = {'content-type': 'application/json'}\n        session = requests.Session()\n        session.mount('http://', requests.adapters.HTTPAdapter(max_retries=2))\n        session.mount('https://', requests.adapters.HTTPAdapter(max_retries=2))\n        try:\n            resp = session.post(url,\n                                data=json.dumps(payload, ensure_ascii=False),\n                                headers=headers,\n                                timeout=30)\n            logger.info(resp)\n        except Exception as e:\n            logger.error(e)\n            time.sleep(30)\n            resp = session.post(url,\n                                data=json.dumps(payload, ensure_ascii=False),\n                                headers=headers,\n                                timeout=30)\n            logger.info(resp)\n\n    return str(resp)\n\n\n\nURL\u7b49\u306f\u4efb\u610f\u306b\u8abf\u6574\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u307b\u3068\u3093\u3069\u521d\u3081\u3066\u66f8\u304fpython\u30b3\u30fc\u30c9\u306a\u306e\u3067\u3054\u5bb9\u8d66\u304f\u3060\u3055\u3044(rubyist)\nand \u9593\u9055\u3044\u304c\u3042\u308c\u3070\u3054\u6307\u6458\u304f\u3060\u3055\u3044\u3002\n\u3053\u308c\u3089\u3092zip\u306b\u304b\u305f\u3081\u3066\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u307e\u3059\n$ zip -r mattermost-echo.zip *\n\"mattermost-echo\"\u3068\u3044\u3046\u540d\u524d\u306eLambda Function\u4f5c\u6210\u3057\u307e\u3059\u3002\nUpload a ZIP file\u3092\u9078\u629e\u3057\u3066\u3001mattermost-echo.zip\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\nHandler\u306fmattermost-echo.lambda_handler\u3068\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nTimeout\u306f1min\u306b\u3057\u307e\u3057\u305f\u3002(\u3068\u308a\u3042\u3048\u305a)\n\u305d\u306e\u307e\u307eSave\u3002\n\n\u3000\u30c8\u30ea\u30ac\u30fc\u306e\u8a2d\u5b9a\n\nCloudWatchLogs\u306e\u753b\u9762\u3092\u958b\u304f\n\u5148\u7a0b\u4f5c\u6210\u3057\u305fLog Group\u306e\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u9078\u629e\u3059\u308b\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306a\u3089CloudTrail/DefaultLogGroup)\nStream to AWS Lambda\u3092\u30af\u30ea\u30c3\u30af\nmattermost-echo\u3092\u9078\u629e\n\u30ed\u30b0\u5f62\u5f0f\u3092\u9078\u629e\u3057\u307e\u3059\u3002AWS CloudTrail\u3092\u9078\u629e\nfilter pattern\u3092\u805e\u304b\u308c\u308b\u306e\u3067\u4e0b\u8a18\u3092\u5165\u529b\u3057\u3066Next\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u5f8c\u3001Start Streaming\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002\n\n{ ($.eventName = \"CreateSecurityGroup\") || ($.eventName = \"DeleteSecurityGroup\") || ($.eventName = \"AuthorizeSecurityGroupIngress\") || ($.eventName = \"RevokeSecurityGroupIngress\")}\n\n\u3053\u306e\u6642\u70b9\u3067\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u306b\u5909\u66f4\u304c\u3042\u308c\u3070\u901a\u77e5\u3055\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nCloudTrail\u306e\u4fdd\u5b58\u9593\u9694\u304c5\u5206\u306e\u305f\u3081\u82e5\u5e72\u30e9\u30b0\u304c\u3042\u308b\u306e\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u5341\u5206\u3067\u3059\u3002\n\u304b\u306a\u308a\u4e00\u90e8\u5206\u3067\u3059\u304c\u3001\u3053\u3093\u306a\u611f\u3058\u306e\u901a\u77e5\u304c\u6765\u307e\u3059\u3002\n\n\u4ed6\u306b\u3082\u30a2\u30ab\u30a6\u30f3\u30c8ID\u3084\u5909\u66f4\u64cd\u4f5c\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u540d\u7b49\u3082\u51fa\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nmattermost\u306e\u30c6\u30fc\u30d6\u30eb\u8868\u793a\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067slack\u306e\u4eba\u306fslack\u306e\u8a18\u6cd5\u3067text\u3092\u6574\u5f62\u3057\u3066\u3042\u3052\u308b\u3068\u7dba\u9e97\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3044\u3064\u306e\u307e\u306b\u304bSG\u306e\u30eb\u30fc\u30eb\u304c\u5909\u308f\u3063\u3066\u308b\uff01\uff1f\u3063\u3066\u3044\u3046\u74b0\u5883\u4e0b\u306e\u4eba\u306f\u662f\u975e\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4ee5\u4e0a!!\n- \u30cf\u30f3\u30ba\u30e9\u30dc\u3055\u3093\u306e\u30d6\u30ed\u30b0\u306bslack\u306b\u901a\u77e5\u3059\u308b\u8a18\u4e8b\u304c\u51fa\u3066\u305f\u306e\u3067mattermost\u7248\u3092\u4f5c\u3063\u3066\u307f\u305f  \n[\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fc\u30b0\u30eb\u30fc\u30d7\u304c\u5909\u66f4\u3055\u308c\u305f\u3089Slack\u306b\u901a\u77e5\u3059\u308b](https://www.hands-lab.com/tech/entry/2102.html)  \n\n\u4ed5\u7d44\u307f\u306f\u4e0a\u8a18\u306e\u3082\u306e\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3001\nCloudTrail\u304c\u691c\u77e5\u3057\u305f\u30a4\u30d9\u30f3\u30c8\u30ed\u30b0\u3092CloudWatchLogs\u306b\u5410\u3044\u3066\n\u305d\u306e\u30ed\u30b0\u3092\u30c8\u30ea\u30ac\u30fc\u306bLambda Function\u3092\u5b9f\u884c\u3057\u3066mattermost\u306bwebhook\u3057\u307e\u3059\u3002\n\n# \u624b\u9806\n## CloudTrail\u306e\u8a2d\u5b9a\n1. Trails\u304b\u3089\u4efb\u610f\u306etrail\u3092\u9078\u629e\u3059\u308b\n2. CloudWatch Logs\u30bb\u30af\u30b7\u30e7\u30f3\u306eConfigure\u3092\u30af\u30ea\u30c3\u30af\n3. Log Group\u3092\u4f5c\u6210(Continue)\n4. Log Group\u3068Log Stream\u3092\u4f5c\u6210\u3057\u3066\u3088\u3044\u304b\u7684\u306a\u3053\u3068\u3092\u805e\u304b\u308c\u308b\u306e\u3067Allow\u3092\u30af\u30ea\u30c3\u30af\n\n## webhook\u7528\u306eURL\u306e\u53d6\u5f97\n1. \u30b5\u30a4\u30c9\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u7dcf\u5408\u6a5f\u80fd>>\u5185\u5411\u304d\u306e\u30a6\u30a7\u30d6\u30d5\u30c3\u30af>>\u5185\u5411\u304d\u306e\u30a6\u30a7\u30d6\u30d5\u30c3\u30af\u3092\u8ffd\u52a0\u3059\u308b\u3092\u30af\u30ea\u30c3\u30af\n2. \u8868\u793a\u540d\u3068\u8aac\u660e\u3092\u5165\u529b\u3057\u3001\u901a\u77e5\u3057\u305f\u3044\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u9078\u629e\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\u3002\n3. URL\u304c\u8868\u793a\u3055\u308c\u308b\u306e\u3067\u8a18\u9332\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n## Lambda Function\u306e\u4f5c\u6210\n### \u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f5c\u6210\n```\n$ mkdir lambda-work\n$ cd lambda-work\n```\n### requests\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u4eca\u56de\u306fpython\u306e\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u306erequests\u3092\u4f7f\u7528\u3057\u305f\u306e\u3067\u305d\u308c\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\n`$ pip install requests -t .`\n### mattermost-echo.py\u306e\u4f5c\u6210\nLambda\u30cf\u30f3\u30c9\u30e9\u30fc\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n\n```````python:mattermost-echo.py\n# -*- coding: utf-8 -*-\nfrom __future__ import print_function\n\nimport base64\nimport zlib\nimport json\nimport time\nimport boto3\nimport requests\nimport sys\nimport logging\nfrom ast import literal_eval\n\nprint('Loading function')\nurl = 'https://chat.infra.active-ssa.com/hooks/d1snbwu8wi8g38g7ssu5wj7wtw'\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\ndef lambda_handler(event, context):\n    print(event)\n    logger.info(event)\n    data = zlib.decompress(base64.b64decode(event['awslogs']['data']), 16+zlib.MAX_WBITS)\n    data_dict = literal_eval(data)\n    data_list = (data_dict['logEvents'])\n    print(data_list)\n\n    for log in data_list:\n        print(json.loads(json.dumps(log['message'])))\n        log_json = json.loads(log['message'])\n        name = str(log_json['eventName'])\n        user = str(log_json['userIdentity']['userName'])\n        region = str(log_json['awsRegion'])\n        aws_account_id = str(log_json['recipientAccountId'])\n        if 'ipPermissions' in log_json['requestParameters']:\n            target_group = str(log_json['requestParameters']['groupId'])\n            changes = json.loads(json.dumps(log_json['requestParameters']['ipPermissions']['items'], indent=2))\n        else:\n            target_group = str(log_json['responseElements']['groupId'])\n            changes = None\n\n        attache = []\n\n        if not changes is None:\n            for rule in changes:\n                fromport = str(rule['fromPort'])\n                if rule['ipRanges']:\n                  ipranges = str(rule['ipRanges']['items'][0]['cidrIp'])\n                else:\n                  ipranges = None\n\n                if rule['groups']:\n                    groups = str(rule['groups']['items'][0]['groupId'])\n                else:\n                    groups = None\n\n                toport = str(rule['toPort'])\n                protocol = str(rule['ipProtocol'])\n\n                if rule['ipv6Ranges']:\n                    ipv6ranges = json.loads(json.dumps(rule['ipv6Ranges']))\n                else:\n                    ipv6ranges = None\n\n                property = \"|%(protocol)s|%(fromport)s|%(toport)s|%(ipranges)s|%(groups)s|%(ipv6ranges)s|\" % locals ()\n                attache.append(property)\n\n        columns = ''\n        for obj in attache:\n            columns = columns + obj + \"\\n\"\n\n        if name == 'AuthorizeSecurityGroupIngress' or name == 'AuthorizeSecurityGroupEgress':\n            message = '\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u306e\u30eb\u30fc\u30eb\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002'\n        elif name == 'RevokeSecurityGroupIngress' or name == 'RevokeSecurityGroupEgress':\n            message = '\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u306e\u30eb\u30fc\u30eb\u304c\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u3002'\n        elif name == 'CreateSecurityGroup':\n            message = '\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u304c\u4f5c\u6210\u3055\u308c\u307e\u3057\u305f\u3002'\n        elif name == 'DeleteSecurityGroup':\n            message = '\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u304c\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u3002'\n\n        payload = {\n            'icon_url': 'http://recipe.kc-cloud.jp/wp-content/uploads/2014/04/cloudtrail%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3.png',\n            'username': 'Changes Security Group',\n            'text': \"\\n\\\n- *Permission changes*\\n\\\n\\n\\\n---\\n\\\n|protocol    |from port   |to port   |ip ranges   |groups    |ipv6 ranges   |\\n\\\n|:-----------|:-----------|:---------|:-----------|:---------|:-------------|\\n\\\n%(columns)s\\n\\\n---\\n\\\n:warning: %(message)s\\n\\\n```\\n\\\nAWSAccountID : %(aws_account_id)s\\n\\\nRegion       : %(region)s\\n\\\nTargetGroup  : %(target_group)s\\n\\\nEventName    : %(name)s\\n\\\nUserName     : %(user)s\\n\\\n```\" % locals ()\n        }\n\n        headers = {'content-type': 'application/json'}\n        session = requests.Session()\n        session.mount('http://', requests.adapters.HTTPAdapter(max_retries=2))\n        session.mount('https://', requests.adapters.HTTPAdapter(max_retries=2))\n        try:\n            resp = session.post(url,\n                                data=json.dumps(payload, ensure_ascii=False),\n                                headers=headers,\n                                timeout=30)\n            logger.info(resp)\n        except Exception as e:\n            logger.error(e)\n            time.sleep(30)\n            resp = session.post(url,\n                                data=json.dumps(payload, ensure_ascii=False),\n                                headers=headers,\n                                timeout=30)\n            logger.info(resp)\n\n    return str(resp)\n\n```````\nURL\u7b49\u306f\u4efb\u610f\u306b\u8abf\u6574\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u307b\u3068\u3093\u3069\u521d\u3081\u3066\u66f8\u304fpython\u30b3\u30fc\u30c9\u306a\u306e\u3067\u3054\u5bb9\u8d66\u304f\u3060\u3055\u3044(rubyist)\nand \u9593\u9055\u3044\u304c\u3042\u308c\u3070\u3054\u6307\u6458\u304f\u3060\u3055\u3044\u3002\n\n\u3053\u308c\u3089\u3092zip\u306b\u304b\u305f\u3081\u3066\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u307e\u3059\n`$ zip -r mattermost-echo.zip *`\n\"mattermost-echo\"\u3068\u3044\u3046\u540d\u524d\u306eLambda Function\u4f5c\u6210\u3057\u307e\u3059\u3002\nUpload a ZIP file\u3092\u9078\u629e\u3057\u3066\u3001mattermost-echo.zip\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\nHandler\u306f`mattermost-echo.lambda_handler`\u3068\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nTimeout\u306f1min\u306b\u3057\u307e\u3057\u305f\u3002(\u3068\u308a\u3042\u3048\u305a)\n\u305d\u306e\u307e\u307eSave\u3002\n\n###\u3000\u30c8\u30ea\u30ac\u30fc\u306e\u8a2d\u5b9a\n1. CloudWatchLogs\u306e\u753b\u9762\u3092\u958b\u304f\n2. \u5148\u7a0b\u4f5c\u6210\u3057\u305fLog Group\u306e\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u9078\u629e\u3059\u308b\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306a\u3089CloudTrail/DefaultLogGroup)\n3. Stream to AWS Lambda\u3092\u30af\u30ea\u30c3\u30af\n4. mattermost-echo\u3092\u9078\u629e\n5. \u30ed\u30b0\u5f62\u5f0f\u3092\u9078\u629e\u3057\u307e\u3059\u3002AWS CloudTrail\u3092\u9078\u629e\n6. filter pattern\u3092\u805e\u304b\u308c\u308b\u306e\u3067\u4e0b\u8a18\u3092\u5165\u529b\u3057\u3066Next\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u5f8c\u3001Start Streaming\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002\n\n```\n{ ($.eventName = \"CreateSecurityGroup\") || ($.eventName = \"DeleteSecurityGroup\") || ($.eventName = \"AuthorizeSecurityGroupIngress\") || ($.eventName = \"RevokeSecurityGroupIngress\")}\n```\n\u3053\u306e\u6642\u70b9\u3067\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u306b\u5909\u66f4\u304c\u3042\u308c\u3070\u901a\u77e5\u3055\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nCloudTrail\u306e\u4fdd\u5b58\u9593\u9694\u304c5\u5206\u306e\u305f\u3081\u82e5\u5e72\u30e9\u30b0\u304c\u3042\u308b\u306e\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u5341\u5206\u3067\u3059\u3002\n\u304b\u306a\u308a\u4e00\u90e8\u5206\u3067\u3059\u304c\u3001\u3053\u3093\u306a\u611f\u3058\u306e\u901a\u77e5\u304c\u6765\u307e\u3059\u3002\n<img width=\"724\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-24 20.15.19.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/129135/7cb3ea85-649e-798c-9e33-d54c1efcd8f6.png\">\n\u4ed6\u306b\u3082\u30a2\u30ab\u30a6\u30f3\u30c8ID\u3084\u5909\u66f4\u64cd\u4f5c\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u540d\u7b49\u3082\u51fa\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nmattermost\u306e\u30c6\u30fc\u30d6\u30eb\u8868\u793a\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067slack\u306e\u4eba\u306fslack\u306e\u8a18\u6cd5\u3067text\u3092\u6574\u5f62\u3057\u3066\u3042\u3052\u308b\u3068\u7dba\u9e97\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n- \u3044\u3064\u306e\u307e\u306b\u304bSG\u306e\u30eb\u30fc\u30eb\u304c\u5909\u308f\u3063\u3066\u308b\uff01\uff1f\u3063\u3066\u3044\u3046\u74b0\u5883\u4e0b\u306e\u4eba\u306f\u662f\u975e\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4ee5\u4e0a!!\n", "tags": ["AWS", "python2.7", "Mattermost", "lambda"]}