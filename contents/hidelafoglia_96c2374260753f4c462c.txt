{"context": "\n\u8907\u6570\u8a00\u8a9e\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u8ffd\u52a0\u3067\u306f\u306a\u304f\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30e2\u30c7\u30eb\u3067\u4fdd\u6301\u3055\u305b\u308b\n\n\nsettings.py\n\n\u6301\u3061\u305f\u3044\u8a00\u8a9e\u4e00\u89a7\u3092\u8a2d\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n\nOTHER_LANGUAGE_CODES = ['en', ]\n\n\nmodels.py\n\n\u56fd\u969b\u30c7\u30fc\u30bf\u3092\u6301\u3061\u305f\u3044\u30e2\u30c7\u30eb\u3068\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u4e00\u89a7\u3092\u6307\u5b9a\u3057\u3066\u52d5\u7684\u306b\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\n\nI18N_LANG_CHOICES = tuple(\n    ln for ln in settings.LANGUAGES if ln[0] in settings.OTHER_LANGUAGE_CODES)\n\n\ndef i18n(cls, *field_names):\n    postfix = _('Translation')\n    meta = type(\n        'Meta', (object, ),\n        dict(\n            verbose_name=\"{} {}\".format(cls._meta.verbose_name,  postfix),\n            verbose_name_plural=\"{} {}\".format(cls._meta.verbose_name_plural, postfix),\n            unique_together=(('original', 'lang',),),\n        )\n    )\n    fields = dict(                                                                  \n        (name, cls._meta.get_field(name).clone()) for name in field_names)          \n\n    fields['__module__'] = cls.__module__                                           \n    fields['Meta'] = meta                                                           \n    fields['original'] = models.ForeignKey(                                         \n        cls, verbose_name=cls._meta.verbose_name)                                   \n    fields['lang'] = models.CharField(                                              \n        _('Language'), choices=I18N_LANG_CHOICES, max_length=10)                    \n\n\n    return type(cls._meta.object_name + \"Trans\", (models.Model,), fields)\n\n\n\n\u4f8b\nclass Community(models.Model):\n    area = models.CharField(\n        _('Community Area'), max_length=10, null=True, default=None, blank=True,)\n    name = models.CharField( _('Community Name'), max_length=50,)\n    ...\n\nCommunityTrans = i18n(Community, 'area', 'name')\n\n\nadmin.py\n\n\u30a4\u30f3\u30e9\u30a4\u30f3\u3067\u7de8\u96c6\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n\nfrom django.utils.safestring import mark_safe as _S\nfrom django import template\n\ndef _T(src, **ctx):\n    return _S(template.Template(src).render(template.Context(ctx)))\n\ndef _CHANGE(instance):\n    url = 'admin:{0}_change'.format(instance._meta.db_table)\n    return _T('''<a href=\"{% url u o.id %}\">{{o}}</a>''', u=url, o=instance)\n\nclass TransAdmin(admin.ModelAdmin):\n    raw_id_fields = ('original', )\n\n    def original_link(self, obj):\n        return _CHANGE(obj.original)\n\n    original_link.short_description = _('Original Model')\n    original_link.allow_tags = True\n\nclass CommunityTransAdmin(TransAdmin):\n    pass\n\nclass CommunityTransAdminInline(admin.StackedInline):\n    model = models.CommunityTrans\n    extra = 0\n\nclass CommunityAdmin(admin.ModelAdmin):\n    inlines = [CommunityTransAdminInline, ]\n    ...\n\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30bf\u30b0\n\n\u6307\u5b9a\u3057\u305f\u30e2\u30c7\u30eb\u306b Trans \u30e2\u30c7\u30eb\u304c\u3042\u3063\u305f\u3089\u3001\u73fe\u5728\u306e\u8a00\u8a9e\u3067\u63a2\u3059\n\u898b\u3064\u304b\u3063\u305f\u3089 \u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u8fd4\u3059\n\u306a\u304b\u3063\u305f\u3089\u5143\u306e\u30e2\u30c7\u30eb\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u8fd4\u3059\n\nfrom django import template\nfrom django.utils import translation\nregister = template.Library()\n\n\n@register.simple_tag\ndef trans_field(instance, field_name):\n    lang = translation.get_language()\n    name = instance._meta.object_name + \"Trans\"\n    rels = [\n        r for r in instance._meta.get_all_related_objects()\n        if r.related_model._meta.object_name == name]\n    if rels and lang:\n        instance = rels[0].related_model.objects.filter(\n            original=instance, lang=lang).first() or instance\n    res = getattr(instance, field_name, None)\n    return res or ''\n\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\n<a href=\"{{ community.get_absolute_url }}\">{% trans_field community 'name' %}</a>\n\n\n- \u8907\u6570\u8a00\u8a9e\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u8ffd\u52a0\u3067\u306f\u306a\u304f\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30e2\u30c7\u30eb\u3067\u4fdd\u6301\u3055\u305b\u308b\n\n## settings.py\n\n- \u6301\u3061\u305f\u3044\u8a00\u8a9e\u4e00\u89a7\u3092\u8a2d\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n\n~~~py\nOTHER_LANGUAGE_CODES = ['en', ]\n~~~\n\n\n## models.py\n\n- \u56fd\u969b\u30c7\u30fc\u30bf\u3092\u6301\u3061\u305f\u3044\u30e2\u30c7\u30eb\u3068\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u4e00\u89a7\u3092\u6307\u5b9a\u3057\u3066\u52d5\u7684\u306b\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\n\n~~~py\nI18N_LANG_CHOICES = tuple(\n    ln for ln in settings.LANGUAGES if ln[0] in settings.OTHER_LANGUAGE_CODES)\n\n\ndef i18n(cls, *field_names):\n    postfix = _('Translation')\n    meta = type(\n        'Meta', (object, ),\n        dict(\n            verbose_name=\"{} {}\".format(cls._meta.verbose_name,  postfix),\n            verbose_name_plural=\"{} {}\".format(cls._meta.verbose_name_plural, postfix),\n            unique_together=(('original', 'lang',),),\n        )\n    )\n    fields = dict(                                                                  \n        (name, cls._meta.get_field(name).clone()) for name in field_names)          \n                                                                                    \n    fields['__module__'] = cls.__module__                                           \n    fields['Meta'] = meta                                                           \n    fields['original'] = models.ForeignKey(                                         \n        cls, verbose_name=cls._meta.verbose_name)                                   \n    fields['lang'] = models.CharField(                                              \n        _('Language'), choices=I18N_LANG_CHOICES, max_length=10)                    \n\n\n    return type(cls._meta.object_name + \"Trans\", (models.Model,), fields)\n\n~~~\n\n\n### \u4f8b\n\n~~~py\nclass Community(models.Model):\n    area = models.CharField(\n        _('Community Area'), max_length=10, null=True, default=None, blank=True,)\n    name = models.CharField( _('Community Name'), max_length=50,)\n    ...\n~~~\n\n~~~py\nCommunityTrans = i18n(Community, 'area', 'name')\n~~~\n\n## admin.py\n\n- \u30a4\u30f3\u30e9\u30a4\u30f3\u3067\u7de8\u96c6\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n\n~~~py\nfrom django.utils.safestring import mark_safe as _S\nfrom django import template\n\ndef _T(src, **ctx):\n    return _S(template.Template(src).render(template.Context(ctx)))\n\ndef _CHANGE(instance):\n    url = 'admin:{0}_change'.format(instance._meta.db_table)\n    return _T('''<a href=\"{% url u o.id %}\">{{o}}</a>''', u=url, o=instance)\n\nclass TransAdmin(admin.ModelAdmin):\n    raw_id_fields = ('original', )\n\n    def original_link(self, obj):\n        return _CHANGE(obj.original)\n\n    original_link.short_description = _('Original Model')\n    original_link.allow_tags = True\n~~~\n\n~~~py\nclass CommunityTransAdmin(TransAdmin):\n    pass\n\nclass CommunityTransAdminInline(admin.StackedInline):\n    model = models.CommunityTrans\n    extra = 0\n\nclass CommunityAdmin(admin.ModelAdmin):\n    inlines = [CommunityTransAdminInline, ]\n    ...\n~~~\n\n## \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30bf\u30b0\n\n- \u6307\u5b9a\u3057\u305f\u30e2\u30c7\u30eb\u306b Trans \u30e2\u30c7\u30eb\u304c\u3042\u3063\u305f\u3089\u3001\u73fe\u5728\u306e\u8a00\u8a9e\u3067\u63a2\u3059\n- \u898b\u3064\u304b\u3063\u305f\u3089 \u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u8fd4\u3059\n- \u306a\u304b\u3063\u305f\u3089\u5143\u306e\u30e2\u30c7\u30eb\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u8fd4\u3059\n\n~~~py\nfrom django import template\nfrom django.utils import translation\nregister = template.Library()\n\n\n@register.simple_tag\ndef trans_field(instance, field_name):\n    lang = translation.get_language()\n    name = instance._meta.object_name + \"Trans\"\n    rels = [\n        r for r in instance._meta.get_all_related_objects()\n        if r.related_model._meta.object_name == name]\n    if rels and lang:\n        instance = rels[0].related_model.objects.filter(\n            original=instance, lang=lang).first() or instance\n    res = getattr(instance, field_name, None)\n    return res or ''\n~~~\n\n## \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\n~~~html\n\n<a href=\"{{ community.get_absolute_url }}\">{% trans_field community 'name' %}</a>\n~~~\n", "tags": ["Django", "I18n"]}