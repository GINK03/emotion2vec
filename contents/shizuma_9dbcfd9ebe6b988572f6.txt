{"context": "\u30aa\u30f3\u30e9\u30a4\u30f3\u4e0a\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u3001API\u3092\u5229\u7528\u3057\u305f\u308a\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u3092\u3057\u305f\u308a\u3057\u3066\u3001CSV\u306b\u66f8\u304d\u51fa\u3059\u3053\u3068\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u6a5f\u4f1a\u304c\u3061\u3087\u3053\u3061\u3087\u3053\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u969b\u4ee5\u524d\u306b\u6295\u7a3f\u3057\u305f\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3057\u305f\u308a\u3057\u3066\u66f8\u304f\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u8907\u6570\u306e\u8a18\u4e8b\u306b\u6563\u3089\u3070\u3063\u3066\u3044\u305f\u306e\u3067\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u500b\u4eba\u7684\u306b\u3001\u3053\u3046\u3044\u3046\u5834\u5408Python\u304bRuby\u3092\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3053\u306e\u8a00\u8a9e\u306b\u3064\u3044\u3066\u500b\u4eba\u7684\u306a\u30a2\u30d7\u30ed\u30fc\u30c1\u65b9\u6cd5\u3092\u66f8\u304d\u307e\u3059\u3002\n\n\u904e\u53bb\u8a18\u4e8b\npython \u304a\u5929\u6c17api\u304b\u3089\u8fd1\u65e5\u306e\u5929\u6c17\u3092\u53d6\u5f97\u3059\u308b\nLDA\u306b\u3088\u308b\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb with gensim ~ Qiita\u306e\u30bf\u30b0\u304b\u3089\u30e6\u30fc\u30b6\u30fc\u306e\u55dc\u597d\u3092\u8003\u3048\u308b ~\nRails \u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u624b\u6cd5 Mechanize\u306e\u4f7f\u3044\u65b9\nRuby CSV\u3092\u6271\u3046\u305f\u3081\u306e\u30e1\u30e2\n\n\u6982\u8981\n\u3053\u306e\u8a18\u4e8b\u306f\u57fa\u672c\u7684\u306b\u306f\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\u8aac\u660e\u3059\u308b\u3053\u3068\u306f\n\nPython\u3067requests\u3068BeautifulSoup\u3092\u7528\u3044\u3066\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u3092\u884c\u3044\u3001CSV\u306b\u3059\u308b\u3002\nRuby\u3067Mechanize\u3092\u7528\u3044\u3066\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u3092\u884c\u3044\u3001CSV\u306b\u3059\u308b\u3002\n\n\u3067\u3059\u3002\n\nPython\n\nAPI\u306e\u5229\u7528\n\nurllib2\n\u4ee5\u524d\u66f8\u3044\u305f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3067\u306f\u4e0b\u306e\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306burllib2\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\u3002\npython \u304a\u5929\u6c17api\u304b\u3089\u8fd1\u65e5\u306e\u5929\u6c17\u3092\u53d6\u5f97\u3059\u308b\n\u5f53\u6642Python2\u3092\u4f7f\u3063\u3066\u3044\u305f\u306e\u3067\u3001Python2\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002Python3\u3067\u306furllib2\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5909\u66f4\u304c\u3042\u3063\u305f\u3088\u3046\u3067\u3059\n\nurllib2 \u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001Python 3 \u3067 urllib.request, urllib.error \u306b\u5206\u5272\u3055\u308c\u307e\u3057\u305f\u3002 2to3 \u30c4\u30fc\u30eb\u304c\u81ea\u52d5\u7684\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306eimport\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002 (http://docs.python.jp/2/library/urllib2.html)\n\nimport urllib2, sys\nimport json\n\ntry: citycode = sys.argv[1]\nexcept: citycode = '460010' #\u30c7\u30d5\u30a9\u30eb\u30c8\u5730\u57df\nresp = urllib2.urlopen('http://weather.livedoor.com/forecast/webservice/json/v1?city=%s'%citycode).read()\n\n# \u8aad\u307f\u8fbc\u3093\u3060JSON\u30c7\u30fc\u30bf\u3092\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u578b\u306b\u5909\u63db\nresp = json.loads(resp)\nprint '**************************'\nprint resp['title']\nprint '**************************'\nprint resp['description']['text']\n\nfor forecast in resp['forecasts']:\n    print '**************************'\n    print forecast['dateLabel']+'('+forecast['date']+')'\n    print forecast['telop']\nprint '**************************'\n\n\nrequests\n\u73fe\u5728\u306fPython3\u3067requests\u3092\u4f7f\u3046\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u66f8\u304d\u76f4\u3057\u3066\u307f\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\nimport requests, sys\n\ntry: citycode = sys.argv[1]\nexcept: citycode = '460010' #\u30c7\u30d5\u30a9\u30eb\u30c8\u5730\u57df\nresp = requests.get('http://weather.livedoor.com/forecast/webservice/json/v1?city=%s'%citycode)\n\nresp = resp.json()\nprint('**************************')\nprint(resp['title'])\nprint('**************************')\nprint(resp['description']['text'])\n\nfor forecast in resp['forecasts']:\n    print('**************************')\n    print(forecast['dateLabel']+'('+forecast['date']+')')\n    print(forecast['telop'])\nprint('**************************')\n\n\u8a73\u3057\u3044\u5185\u5bb9\u306fDocument\u3067\u78ba\u8a8d\u51fa\u6765\u307e\u3059\u3002Requests\u306e\u3053\u306eDocument\u306f\u304b\u306a\u308a\u4e01\u5be7\u306b\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u5b09\u3057\u3044\u3067\u3059\u3002\nRequests: \u4eba\u9593\u306e\u305f\u3081\u306eHTTP\n\u3056\u3063\u3068\u4f7f\u3044\u65b9\u3092\u78ba\u8a8d\u3057\u305f\u3044\u65b9\u306f\u4e0b\u8a18\u8a18\u4e8b\u3092\u898b\u3066\u307f\u308b\u3068\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nRequests \u306e\u4f7f\u3044\u65b9 (Python Library)\n\u304c\u53c2\u8003\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\n\u3053\u3053\u3067\u3082requests\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u8fbc\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u4e0b\u8a18\u306e\u30b3\u30fc\u30c9\u306fwikipedia\u306e\u65e5\u672c\u4eba\u4ff3\u512a\u30fb\u5973\u512a\u306e\u540d\u524d\u3092\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\u53d6\u5f97\u3057\u305fHTML\u306e\u30d1\u30fc\u30b5\u30fc\u3068\u3057\u3066\u306fBeautifulSoup\u3092\u4f7f\u3044\u307e\u3059\u3002XML\u3067\u3082\u4f7f\u3048\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001Python\u306e\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u306frequests\u3068BeautifulSoup\u3067\u884c\u3044\u307e\u3059\u3002\nBeautifulSoup\u306fselect\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066CSS\u30bb\u30ec\u30af\u30bf\u3067\u9078\u629e\u3059\u308b\u65b9\u6cd5\u304c\u3084\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nimport requests\nfrom bs4 import BeautifulSoup\nimport csv\nimport time\n\nbase_url = 'https://en.wikipedia.org/wiki/'\n\nurl_list = ['List_of_Japanese_actors', 'List_of_Japanese_actresses']\n\nfor i in range(len(url_list)):\n    target_url = base_url + url_list[i]\n    target_html = requests.get(target_url).text\n    soup = BeautifulSoup(target_html, 'html.parser')\n    names = soup.select('#mw-content-text > h2 + ul > li > a')\n\n\n    for k, name in enumerate(names):\n        print(name.get_text())\n\n    time.sleep(1) \n    print('scraping page: ' + str(i + 1))\n\n\u8a73\u3057\u3044\u60c5\u5831\u306f\nBeautiful Soup Documentation\n\u3056\u3063\u304f\u308a\u307f\u305f\u3044\u65b9\u306f\nPython\u3068Beautiful Soup\u3067\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\n\nCSV\u51fa\u529b\n\u3055\u3066\u3001\u4e0a\u8a18\u306e\u65e5\u672c\u4eba\u4ff3\u512a\u30fb\u5973\u512a\u540d\u3092CSV\u306b\u66f8\u304d\u51fa\u3057\u3066\u307f\u307e\u3059\u3002\ncsv\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u51fa\u6765\u307e\u3059\u3002\nimport requests\nfrom bs4 import BeautifulSoup\nimport csv\nimport time\n\nbase_url = 'https://en.wikipedia.org/wiki/'\n\nurl_list = ['List_of_Japanese_actors', 'List_of_Japanese_actresses']\n\nall_names = []\n\nfor i in range(len(url_list)):\n    target_url = base_url + url_list[i]\n    target_html = requests.get(target_url).text\n    soup = BeautifulSoup(target_html, 'html.parser')\n    names = soup.select('#mw-content-text > h2 + ul > li > a')\n\n\n    for k, name in enumerate(names):\n        all_names.append(name.get_text())\n\n    time.sleep(1) \n    print('scraping page: ' + str(i + 1))\n\nf = open('all_names.csv', 'w') \nwriter = csv.writer(f, lineterminator='\\n')\nwriter.writerow(['name'])\nfor name in all_names:\n    writer.writerow([name])\n\nf.close()\n\n\nall_names.csv\nname\nHiroshi Abe\nAbe Tsuyoshi\nOsamu Adachi\nJin Akanishi\n...\n\n\ncsv\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u3044\u65b9\u306f\u4e0b\u8a18\u306e\u8a18\u4e8b\u304c\u3059\u3063\u304d\u308a\u3068\u307e\u3068\u3081\u3066\u3042\u308a\u307e\u3059\u3002\nPython\u3067CSV\u306e\u8aad\u307f\u66f8\u304d\n\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3067\u3082\u304a\u3059\u3059\u3081\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001CSV\u306e\u8aad\u307f\u8fbc\u307f\u306b\u95a2\u3057\u3066\u306fopen\u3092\u4f7f\u3046\u306e\u3082\u60aa\u304f\u306a\u3044\u3067\u3059\u304c\u3001\u305d\u306e\u5f8c\u306e\u89e3\u6790\u3082\u8003\u3048\u3066pandas\u3092\u4f7f\u3046\u3053\u3068\u304c\u7d50\u69cb\u591a\u3044\u306e\u3067\u304a\u3059\u3059\u3081\u3067\u3059\u3002\nimport csv\n\nwith open('all_name.csv', 'r') as f:\n  reader = csv.reader(f)\n  header = next(reader)\n\n  for row in reader:\n    print row\n\nimport pandas as pd\ndf = pd.read_csv('all_name.csv')\n\n\nRuby\n\nAPI\u306e\u5229\u7528\nRuby\u3067\u306fMechanize\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n'Mechanize`\u3067\u53d7\u3051\u53d6\u3063\u305fJSON\u3092\u30d1\u30fc\u30b9\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002\n\u4e0a\u8a18\u306ePython\u306e\u304a\u5929\u6c17API\u306e\u5229\u7528\u3068\u540c\u3058\u3053\u3068\u3092\u4ee5\u4e0b\u3067\u3084\u3063\u3066\u3044\u307e\u3059\u3002\nrequire 'mechanize'\nrequire 'json'\n\ncitycode = '460010'\nagent = Mechanize.new\npage = agent.get(\"http://weather.livedoor.com/forecast/webservice/json/v1?city=#{citycode}\")\ndata = JSON.parse(page.body)\n\nputs '**************************'\nputs data['title']\nputs '**************************'\nputs data['description']['text']\n\ndata['forecasts'].each do |forecast|\n  puts '**************************'\n  puts \"#{forecast['dataLabel']}(#{forecast['date']})\"\n  puts forecast['telop']\nend\nputs '**************************'\n\n\u304a\u307e\u3051\u3067\u3059\u304c\u3001httparty\u7b49\u3082\u4f7f\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\njnunemaker/httparty\n\u305f\u3060\u3057\u3001Mechanize\u3067\u5341\u5206\u3067\u3057\u3087\u3046\u3002\n\n\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u53ca\u3073CSV\n\u57fa\u672c\u7684\u306b\u4e0b\u8a18\u8a18\u4e8b\u3067\u4e8b\u8db3\u308a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nRails \u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u624b\u6cd5 Mechanize\u306e\u4f7f\u3044\u65b9\n\u4ee5\u4e0b\u306e\u3088\u3046\u306bget\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057search\u30e1\u30bd\u30c3\u30c9\u3067\u8a72\u5f53\u3059\u308b\u7b87\u6240\u3092\u629c\u304d\u51fa\u3057\u3001inner_text\u3084get_attribute\u3067\u30c6\u30ad\u30b9\u30c8\u3084\u5c5e\u6027\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\nrequire 'mechanize'\n\nagent = Mechanize.new\npage = agent.get(\"http://qiita.com\")\nelements = page.search('li a')\n\nelements.each do |ele|\n  puts ele.inner_text\n  puts ele.get_attribute(:href)\nend\n\n\u4eca\u56de\u306f\u4e0a\u8a18\u8a18\u4e8b\u5185\u3067\u306f\u3084\u3063\u3066\u3044\u306a\u3044post\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u305f\u30c7\u30fc\u30bf\u53d6\u5f97\u3092\u5177\u4f53\u7684\u306a\u5229\u7528\u4f8b\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\nThe Oracle of Bacon\u3068\u3044\u3046\u30b5\u30a4\u30c8\u306f\u4ff3\u512a\u306e\u540d\u524d\u3092\u5165\u529b\u3059\u308b\u3068\u300c\u30d9\u30fc\u30b3\u30f3\u6570\u300d\u3068\u3044\u3046\u3082\u306e\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u30b5\u30a4\u30c8\u3067\u3059\u3002\n\u672c\u8a18\u4e8b\u306e\u5185\u5bb9\u3068\u306f\u305d\u308c\u307e\u3059\u304c\u3001\u300c\u30d9\u30fc\u30b3\u30f3\u6570\u300d\u3068\u306f\u305d\u306e\u4ff3\u512a\u306e\u5171\u6f14\u8005\u3092\u8fbf\u3063\u3066\u3044\u304d\u3001\u4f55\u56de\u305f\u3069\u308b\u3068\u30b1\u30f4\u30a3\u30f3\u30fb\u30d9\u30fc\u30b3\u30f3\u3068\u3044\u3046\u4ff3\u512a\u306b\u305f\u3069\u308a\u7740\u304f\u304b\u3092\u8868\u3059\u3082\u306e\u3067\u3059\u3002\u516d\u6b21\u306e\u9694\u305f\u308a\u3092\u8003\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u9762\u767d\u3044\u3067\u3059\u30022011\u5e74\u6642\u70b9\u3067\u4e16\u754c\u4e2d\u306eFacebook\u30e6\u30fc\u30b6\u30fc\u306e\u3046\u3061\u4efb\u610f\u306e2\u4eba\u3092\u9694\u3066\u308b\u4eba\u306e\u6570\u306f\u5e73\u57474.74\u4eba\u3067\u3042\u308b\u3068\u8a00\u308f\u308c\u3066\u304a\u308a\u4e16\u754c\u306f\u610f\u5916\u3068\u5c0f\u3055\u3044\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u4e0a\u8a18\u306epython\u306e\u30b3\u30fc\u30c9\u3067\u65e5\u672c\u4eba\u306e\u4ff3\u512a\u30fb\u5973\u512a\u540d\u3092\u53d6\u5f97\u3057\u3066CSV\u306b\u3057\u305f\u306e\u3067\u305d\u306e\u305d\u308c\u305e\u308c\u306b\u5bfe\u3057\u3066\u30d9\u30fc\u30b3\u30f3\u6570\u3092\u53d6\u5f97\u3057CSV\u306b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u4ff3\u512a\u30fb\u5973\u512a\u306eCSV\u306f\u4ee5\u4e0b\u306e\u3082\u306e\u3002\n\nall_names.csv\nname\nHiroshi Abe\nAbe Tsuyoshi\nOsamu Adachi\nJin Akanishi\n...\n\n\n\u4ee5\u4e0b\u304c\u30b3\u30fc\u30c9\u3067\u3059\u3002Mechanize\u306epost\u306e\u4f7f\u3044\u65b9\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\n\u307e\u305f\u3001\u53d6\u5f97\u3057\u305f\u3044\u300c\u30d9\u30fc\u30b3\u30f3\u6570\u300d\u304cHTML\u304b\u3089\u5358\u7d14\u306b\u306f\u53d6\u308c\u306a\u304b\u3063\u305f\u306e\u3067\uff08\u30bf\u30b0\u304c\u3064\u3044\u3066\u3044\u306a\u3044\u30c6\u30ad\u30b9\u30c8\u3060\u3063\u305f\uff09\u3001\u6b63\u898f\u8868\u73fe\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\u53c2\u8003: Ruby \u6b63\u898f\u8868\u73fe\u306e\u4f7f\u3044\u65b9\nCSV\u306e\u6271\u3044\u306fRuby CSV\u3092\u6271\u3046\u305f\u3081\u306e\u30e1\u30e2\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\u3002File.open\u3068\u540c\u3058\u3088\u3046\u306bCSV.open\u304c\u4f7f\u3048\u308b\u306e\u3067\u3053\u3053\u3067\u306f\u3053\u3061\u3089\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\nrequire 'mechanize'\nrequire 'csv'\nrequire 'kconv'\n\ndef get_bacon_num_to(person)\n\n  agent = Mechanize.new\n  page = agent.post('http://oracleofbacon.org/movielinks.php',  { a: 'Kevin Bacon', b: person })\n  main_text = page.at('#main').inner_text.toutf8\n  match_result = main_text.match(/has a Bacon number of ([0-9]+)/)\n\n  bacon_number = 0\n\n  if match_result.nil?\n    puts \"#{person}: Not found.\"\n  else\n    bacon_number = main_text.match(/has a Bacon number of ([0-9]+)/)[1]\n    puts \"#{person}: #{bacon_number}\"\n  end\n\n  return bacon_number\n\nend\n\npeople = CSV.read('all_names.csv', headers: true)\n\nCSV.open(\"result.csv\", 'w') do |file|\n  people.each do |person|\n    num = get_bacon_num_to(person['name'])\n    file << [person['name'], num]\n    sleep(1)\n  end\n\nend\n\n\n\u7d42\u308f\u308a\u306b\n\u624b\u6cd5\u3068\u3057\u3066\u306f\u8272\u3005\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u7d39\u4ecb\u3057\u305f\u9053\u5177\u3067\u591a\u304f\u306e\u3053\u3068\u306f\u5bfe\u5fdc\u51fa\u6765\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u662f\u975e\u3001\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff01\n\u30aa\u30f3\u30e9\u30a4\u30f3\u4e0a\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u3001API\u3092\u5229\u7528\u3057\u305f\u308a\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u3092\u3057\u305f\u308a\u3057\u3066\u3001CSV\u306b\u66f8\u304d\u51fa\u3059\u3053\u3068\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u6a5f\u4f1a\u304c\u3061\u3087\u3053\u3061\u3087\u3053\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u969b\u4ee5\u524d\u306b\u6295\u7a3f\u3057\u305f\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3057\u305f\u308a\u3057\u3066\u66f8\u304f\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u8907\u6570\u306e\u8a18\u4e8b\u306b\u6563\u3089\u3070\u3063\u3066\u3044\u305f\u306e\u3067\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u500b\u4eba\u7684\u306b\u3001\u3053\u3046\u3044\u3046\u5834\u5408Python\u304bRuby\u3092\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3053\u306e\u8a00\u8a9e\u306b\u3064\u3044\u3066\u500b\u4eba\u7684\u306a\u30a2\u30d7\u30ed\u30fc\u30c1\u65b9\u6cd5\u3092\u66f8\u304d\u307e\u3059\u3002\n\n# \u904e\u53bb\u8a18\u4e8b\n[python \u304a\u5929\u6c17api\u304b\u3089\u8fd1\u65e5\u306e\u5929\u6c17\u3092\u53d6\u5f97\u3059\u308b](http://qiita.com/shizuma/items/ad04e08ab31ba436d34e)\n[LDA\u306b\u3088\u308b\u30c8\u30d4\u30c3\u30af\u30e2\u30c7\u30eb with gensim ~ Qiita\u306e\u30bf\u30b0\u304b\u3089\u30e6\u30fc\u30b6\u30fc\u306e\u55dc\u597d\u3092\u8003\u3048\u308b ~](http://qiita.com/shizuma/items/44c016812552ba8a8b88)\n[Rails \u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u624b\u6cd5 Mechanize\u306e\u4f7f\u3044\u65b9](http://qiita.com/shizuma/items/d04facaa732f606f00ff)\n[Ruby CSV\u3092\u6271\u3046\u305f\u3081\u306e\u30e1\u30e2](http://qiita.com/shizuma/items/7719172eb5e8c29a7d6e)\n\n# \u6982\u8981\n\n\u3053\u306e\u8a18\u4e8b\u306f\u57fa\u672c\u7684\u306b\u306f\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\u8aac\u660e\u3059\u308b\u3053\u3068\u306f\n\n- Python\u3067`requests`\u3068`BeautifulSoup`\u3092\u7528\u3044\u3066\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u3092\u884c\u3044\u3001CSV\u306b\u3059\u308b\u3002\n- Ruby\u3067`Mechanize`\u3092\u7528\u3044\u3066\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u3092\u884c\u3044\u3001CSV\u306b\u3059\u308b\u3002\n\n\u3067\u3059\u3002\n\n# Python\n\n## API\u306e\u5229\u7528\n\n### urllib2\n\n\u4ee5\u524d\u66f8\u3044\u305f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3067\u306f\u4e0b\u306e\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306b`urllib2`\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\u3002\n[python \u304a\u5929\u6c17api\u304b\u3089\u8fd1\u65e5\u306e\u5929\u6c17\u3092\u53d6\u5f97\u3059\u308b](http://qiita.com/shizuma/items/ad04e08ab31ba436d34e)\n\n\u5f53\u6642Python2\u3092\u4f7f\u3063\u3066\u3044\u305f\u306e\u3067\u3001Python2\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002Python3\u3067\u306f`urllib2`\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5909\u66f4\u304c\u3042\u3063\u305f\u3088\u3046\u3067\u3059\n\n\n> urllib2 \u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001Python 3 \u3067 urllib.request, urllib.error \u306b\u5206\u5272\u3055\u308c\u307e\u3057\u305f\u3002 2to3 \u30c4\u30fc\u30eb\u304c\u81ea\u52d5\u7684\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306eimport\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002 (http://docs.python.jp/2/library/urllib2.html)\n\n```python\nimport urllib2, sys\nimport json\n\ntry: citycode = sys.argv[1]\nexcept: citycode = '460010' #\u30c7\u30d5\u30a9\u30eb\u30c8\u5730\u57df\nresp = urllib2.urlopen('http://weather.livedoor.com/forecast/webservice/json/v1?city=%s'%citycode).read()\n\n# \u8aad\u307f\u8fbc\u3093\u3060JSON\u30c7\u30fc\u30bf\u3092\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u578b\u306b\u5909\u63db\nresp = json.loads(resp)\nprint '**************************'\nprint resp['title']\nprint '**************************'\nprint resp['description']['text']\n\nfor forecast in resp['forecasts']:\n    print '**************************'\n    print forecast['dateLabel']+'('+forecast['date']+')'\n    print forecast['telop']\nprint '**************************'\n```\n\n### requests\n\n\u73fe\u5728\u306fPython3\u3067`requests`\u3092\u4f7f\u3046\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u66f8\u304d\u76f4\u3057\u3066\u307f\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\n```python\nimport requests, sys\n\ntry: citycode = sys.argv[1]\nexcept: citycode = '460010' #\u30c7\u30d5\u30a9\u30eb\u30c8\u5730\u57df\nresp = requests.get('http://weather.livedoor.com/forecast/webservice/json/v1?city=%s'%citycode)\n\nresp = resp.json()\nprint('**************************')\nprint(resp['title'])\nprint('**************************')\nprint(resp['description']['text'])\n\nfor forecast in resp['forecasts']:\n    print('**************************')\n    print(forecast['dateLabel']+'('+forecast['date']+')')\n    print(forecast['telop'])\nprint('**************************')\n```\n\n\u8a73\u3057\u3044\u5185\u5bb9\u306fDocument\u3067\u78ba\u8a8d\u51fa\u6765\u307e\u3059\u3002Requests\u306e\u3053\u306eDocument\u306f\u304b\u306a\u308a\u4e01\u5be7\u306b\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u5b09\u3057\u3044\u3067\u3059\u3002\n[Requests: \u4eba\u9593\u306e\u305f\u3081\u306eHTTP](http://requests-docs-ja.readthedocs.io/en/latest/)\n\n\u3056\u3063\u3068\u4f7f\u3044\u65b9\u3092\u78ba\u8a8d\u3057\u305f\u3044\u65b9\u306f\u4e0b\u8a18\u8a18\u4e8b\u3092\u898b\u3066\u307f\u308b\u3068\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n[Requests \u306e\u4f7f\u3044\u65b9 (Python Library)](http://qiita.com/sqrtxx/items/49beaa3795925e7de666)\n\u304c\u53c2\u8003\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\n\n\u3053\u3053\u3067\u3082`requests`\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u8fbc\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u4e0b\u8a18\u306e\u30b3\u30fc\u30c9\u306fwikipedia\u306e\u65e5\u672c\u4eba\u4ff3\u512a\u30fb\u5973\u512a\u306e\u540d\u524d\u3092\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\u53d6\u5f97\u3057\u305fHTML\u306e\u30d1\u30fc\u30b5\u30fc\u3068\u3057\u3066\u306f`BeautifulSoup`\u3092\u4f7f\u3044\u307e\u3059\u3002XML\u3067\u3082\u4f7f\u3048\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002\n\n\u3064\u307e\u308a\u3001Python\u306e\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u306f`requests`\u3068`BeautifulSoup`\u3067\u884c\u3044\u307e\u3059\u3002\n\n`BeautifulSoup`\u306f`select`\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066CSS\u30bb\u30ec\u30af\u30bf\u3067\u9078\u629e\u3059\u308b\u65b9\u6cd5\u304c\u3084\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport csv\nimport time\n\nbase_url = 'https://en.wikipedia.org/wiki/'\n\nurl_list = ['List_of_Japanese_actors', 'List_of_Japanese_actresses']\n\nfor i in range(len(url_list)):\n    target_url = base_url + url_list[i]\n    target_html = requests.get(target_url).text\n    soup = BeautifulSoup(target_html, 'html.parser')\n    names = soup.select('#mw-content-text > h2 + ul > li > a')\n\n\n    for k, name in enumerate(names):\n        print(name.get_text())\n\n    time.sleep(1) \n    print('scraping page: ' + str(i + 1))\n```\n\n\u8a73\u3057\u3044\u60c5\u5831\u306f\n[Beautiful Soup Documentation](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)\n\u3056\u3063\u304f\u308a\u307f\u305f\u3044\u65b9\u306f\n[Python\u3068Beautiful Soup\u3067\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0](http://qiita.com/itkr/items/513318a9b5b92bd56185)\n\n## CSV\u51fa\u529b\n\u3055\u3066\u3001\u4e0a\u8a18\u306e\u65e5\u672c\u4eba\u4ff3\u512a\u30fb\u5973\u512a\u540d\u3092CSV\u306b\u66f8\u304d\u51fa\u3057\u3066\u307f\u307e\u3059\u3002\n\n`csv`\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u51fa\u6765\u307e\u3059\u3002\n\n```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport csv\nimport time\n\nbase_url = 'https://en.wikipedia.org/wiki/'\n\nurl_list = ['List_of_Japanese_actors', 'List_of_Japanese_actresses']\n\nall_names = []\n\nfor i in range(len(url_list)):\n    target_url = base_url + url_list[i]\n    target_html = requests.get(target_url).text\n    soup = BeautifulSoup(target_html, 'html.parser')\n    names = soup.select('#mw-content-text > h2 + ul > li > a')\n\n\n    for k, name in enumerate(names):\n        all_names.append(name.get_text())\n\n    time.sleep(1) \n    print('scraping page: ' + str(i + 1))\n\nf = open('all_names.csv', 'w') \nwriter = csv.writer(f, lineterminator='\\n')\nwriter.writerow(['name'])\nfor name in all_names:\n    writer.writerow([name])\n\nf.close()\n```\n\n```all_names.csv\nname\nHiroshi Abe\nAbe Tsuyoshi\nOsamu Adachi\nJin Akanishi\n...\n```\n\n`csv`\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u3044\u65b9\u306f\u4e0b\u8a18\u306e\u8a18\u4e8b\u304c\u3059\u3063\u304d\u308a\u3068\u307e\u3068\u3081\u3066\u3042\u308a\u307e\u3059\u3002\n[Python\u3067CSV\u306e\u8aad\u307f\u66f8\u304d](http://qiita.com/okadate/items/c36f4eb9506b358fb608)\n\n\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3067\u3082\u304a\u3059\u3059\u3081\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001CSV\u306e\u8aad\u307f\u8fbc\u307f\u306b\u95a2\u3057\u3066\u306f`open`\u3092\u4f7f\u3046\u306e\u3082\u60aa\u304f\u306a\u3044\u3067\u3059\u304c\u3001\u305d\u306e\u5f8c\u306e\u89e3\u6790\u3082\u8003\u3048\u3066`pandas`\u3092\u4f7f\u3046\u3053\u3068\u304c\u7d50\u69cb\u591a\u3044\u306e\u3067\u304a\u3059\u3059\u3081\u3067\u3059\u3002\n\n```python\nimport csv\n\nwith open('all_name.csv', 'r') as f:\n  reader = csv.reader(f)\n  header = next(reader)\n\n  for row in reader:\n    print row\n```\n\n```python\nimport pandas as pd\ndf = pd.read_csv('all_name.csv')\n```\n\n# Ruby\n\n## API\u306e\u5229\u7528\n\nRuby\u3067\u306f`Mechanize`\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n'Mechanize`\u3067\u53d7\u3051\u53d6\u3063\u305fJSON\u3092\u30d1\u30fc\u30b9\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002\n\u4e0a\u8a18\u306ePython\u306e\u304a\u5929\u6c17API\u306e\u5229\u7528\u3068\u540c\u3058\u3053\u3068\u3092\u4ee5\u4e0b\u3067\u3084\u3063\u3066\u3044\u307e\u3059\u3002\n\n```rb\nrequire 'mechanize'\nrequire 'json'\n\ncitycode = '460010'\nagent = Mechanize.new\npage = agent.get(\"http://weather.livedoor.com/forecast/webservice/json/v1?city=#{citycode}\")\ndata = JSON.parse(page.body)\n\nputs '**************************'\nputs data['title']\nputs '**************************'\nputs data['description']['text']\n\ndata['forecasts'].each do |forecast|\n  puts '**************************'\n  puts \"#{forecast['dataLabel']}(#{forecast['date']})\"\n  puts forecast['telop']\nend\nputs '**************************'\n```\n\n\u304a\u307e\u3051\u3067\u3059\u304c\u3001httparty\u7b49\u3082\u4f7f\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n[jnunemaker/httparty](https://github.com/jnunemaker/httparty)\n\u305f\u3060\u3057\u3001`Mechanize`\u3067\u5341\u5206\u3067\u3057\u3087\u3046\u3002\n\n## \u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u53ca\u3073CSV\n\n\u57fa\u672c\u7684\u306b\u4e0b\u8a18\u8a18\u4e8b\u3067\u4e8b\u8db3\u308a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n[Rails \u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u624b\u6cd5 Mechanize\u306e\u4f7f\u3044\u65b9](http://qiita.com/shizuma/items/d04facaa732f606f00ff)\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b`get`\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057`search`\u30e1\u30bd\u30c3\u30c9\u3067\u8a72\u5f53\u3059\u308b\u7b87\u6240\u3092\u629c\u304d\u51fa\u3057\u3001`inner_text`\u3084`get_attribute`\u3067\u30c6\u30ad\u30b9\u30c8\u3084\u5c5e\u6027\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\n\n```rb\nrequire 'mechanize'\n\nagent = Mechanize.new\npage = agent.get(\"http://qiita.com\")\nelements = page.search('li a')\n\nelements.each do |ele|\n  puts ele.inner_text\n  puts ele.get_attribute(:href)\nend\n```\n\n\u4eca\u56de\u306f\u4e0a\u8a18\u8a18\u4e8b\u5185\u3067\u306f\u3084\u3063\u3066\u3044\u306a\u3044post\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u305f\u30c7\u30fc\u30bf\u53d6\u5f97\u3092\u5177\u4f53\u7684\u306a\u5229\u7528\u4f8b\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n[The Oracle of Bacon](http://oracleofbacon.org/)\u3068\u3044\u3046\u30b5\u30a4\u30c8\u306f\u4ff3\u512a\u306e\u540d\u524d\u3092\u5165\u529b\u3059\u308b\u3068\u300c\u30d9\u30fc\u30b3\u30f3\u6570\u300d\u3068\u3044\u3046\u3082\u306e\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u30b5\u30a4\u30c8\u3067\u3059\u3002\n\u672c\u8a18\u4e8b\u306e\u5185\u5bb9\u3068\u306f\u305d\u308c\u307e\u3059\u304c\u3001\u300c\u30d9\u30fc\u30b3\u30f3\u6570\u300d\u3068\u306f\u305d\u306e\u4ff3\u512a\u306e\u5171\u6f14\u8005\u3092\u8fbf\u3063\u3066\u3044\u304d\u3001\u4f55\u56de\u305f\u3069\u308b\u3068\u30b1\u30f4\u30a3\u30f3\u30fb\u30d9\u30fc\u30b3\u30f3\u3068\u3044\u3046\u4ff3\u512a\u306b\u305f\u3069\u308a\u7740\u304f\u304b\u3092\u8868\u3059\u3082\u306e\u3067\u3059\u3002[\u516d\u6b21\u306e\u9694\u305f\u308a](https://ja.wikipedia.org/wiki/%E5%85%AD%E6%AC%A1%E3%81%AE%E9%9A%94%E3%81%9F%E3%82%8A)\u3092\u8003\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u9762\u767d\u3044\u3067\u3059\u30022011\u5e74\u6642\u70b9\u3067`\u4e16\u754c\u4e2d\u306eFacebook\u30e6\u30fc\u30b6\u30fc\u306e\u3046\u3061\u4efb\u610f\u306e2\u4eba\u3092\u9694\u3066\u308b\u4eba\u306e\u6570\u306f\u5e73\u57474.74\u4eba\u3067\u3042\u308b`\u3068\u8a00\u308f\u308c\u3066\u304a\u308a\u4e16\u754c\u306f\u610f\u5916\u3068\u5c0f\u3055\u3044\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u306f\u3001\u4e0a\u8a18\u306epython\u306e\u30b3\u30fc\u30c9\u3067\u65e5\u672c\u4eba\u306e\u4ff3\u512a\u30fb\u5973\u512a\u540d\u3092\u53d6\u5f97\u3057\u3066CSV\u306b\u3057\u305f\u306e\u3067\u305d\u306e\u305d\u308c\u305e\u308c\u306b\u5bfe\u3057\u3066\u30d9\u30fc\u30b3\u30f3\u6570\u3092\u53d6\u5f97\u3057CSV\u306b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4ff3\u512a\u30fb\u5973\u512a\u306eCSV\u306f\u4ee5\u4e0b\u306e\u3082\u306e\u3002\n\n```all_names.csv\nname\nHiroshi Abe\nAbe Tsuyoshi\nOsamu Adachi\nJin Akanishi\n...\n```\n\n\u4ee5\u4e0b\u304c\u30b3\u30fc\u30c9\u3067\u3059\u3002`Mechanize`\u306e`post`\u306e\u4f7f\u3044\u65b9\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\n\u307e\u305f\u3001\u53d6\u5f97\u3057\u305f\u3044\u300c\u30d9\u30fc\u30b3\u30f3\u6570\u300d\u304cHTML\u304b\u3089\u5358\u7d14\u306b\u306f\u53d6\u308c\u306a\u304b\u3063\u305f\u306e\u3067\uff08\u30bf\u30b0\u304c\u3064\u3044\u3066\u3044\u306a\u3044\u30c6\u30ad\u30b9\u30c8\u3060\u3063\u305f\uff09\u3001\u6b63\u898f\u8868\u73fe\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\u53c2\u8003: [Ruby \u6b63\u898f\u8868\u73fe\u306e\u4f7f\u3044\u65b9](http://qiita.com/shizuma/items/4279104026964f1efca6)\n\nCSV\u306e\u6271\u3044\u306f[Ruby CSV\u3092\u6271\u3046\u305f\u3081\u306e\u30e1\u30e2](http://qiita.com/shizuma/items/7719172eb5e8c29a7d6e)\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\u3002`File.open`\u3068\u540c\u3058\u3088\u3046\u306b`CSV.open`\u304c\u4f7f\u3048\u308b\u306e\u3067\u3053\u3053\u3067\u306f\u3053\u3061\u3089\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\n\n```rb\nrequire 'mechanize'\nrequire 'csv'\nrequire 'kconv'\n\ndef get_bacon_num_to(person)\n\n  agent = Mechanize.new\n  page = agent.post('http://oracleofbacon.org/movielinks.php',  { a: 'Kevin Bacon', b: person })\n  main_text = page.at('#main').inner_text.toutf8\n  match_result = main_text.match(/has a Bacon number of ([0-9]+)/)\n\n  bacon_number = 0\n\n  if match_result.nil?\n    puts \"#{person}: Not found.\"\n  else\n    bacon_number = main_text.match(/has a Bacon number of ([0-9]+)/)[1]\n    puts \"#{person}: #{bacon_number}\"\n  end\n\n  return bacon_number\n\nend\n\npeople = CSV.read('all_names.csv', headers: true)\n\nCSV.open(\"result.csv\", 'w') do |file|\n  people.each do |person|\n    num = get_bacon_num_to(person['name'])\n    file << [person['name'], num]\n    sleep(1)\n  end\n\nend\n```\n\n# \u7d42\u308f\u308a\u306b\n\n\u624b\u6cd5\u3068\u3057\u3066\u306f\u8272\u3005\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u7d39\u4ecb\u3057\u305f\u9053\u5177\u3067\u591a\u304f\u306e\u3053\u3068\u306f\u5bfe\u5fdc\u51fa\u6765\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u662f\u975e\u3001\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff01\n", "tags": ["Python", "Ruby", "CSV", "\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0", "Mechanize"]}