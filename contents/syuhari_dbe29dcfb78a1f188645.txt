{"tags": ["cocos2d-x"], "context": " More than 1 year has passed since last update.\u7269\u7406\u30a8\u30f3\u30b8\u30f3\u3092\u4f7f\u7528\u3057\u306a\u3044\u5834\u5408\u3001\u30b3\u30ea\u30b8\u30e7\u30f3\u5224\u5b9a\uff08\u5f53\u305f\u308a\u5224\u5b9a\uff09\u306f\u30b9\u30d7\u30e9\u30a4\u30c8\u306e\u77e9\u5f62\u3067\u884c\u3046\u3053\u3068\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u308c\u3092\u900f\u904e\u753b\u50cf\u306e\u900f\u904e\u90e8\u5206\u3092\u5f53\u305f\u308a\u5224\u5b9a\u306b\u542b\u3081\u306a\u3044\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\nHelloWorld::areSpritesColliding \u30e1\u30bd\u30c3\u30c9\u3067\u306f\u3001\u6307\u5b9a\u3057\u305f2\u3064\u306e\u30b9\u30d7\u30e9\u30a4\u30c8\u304c\u900f\u904e\u90e8\u5206\u3092\u9664\u3044\u3066\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u3001true \u3092\u8fd4\u3057\u307e\u3059\u3002\u30b9\u30d7\u30e9\u30a4\u30c8\u540c\u58eb\u306e\u5f53\u305f\u308a\u5224\u5b9a\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\nHelloWorld::collideAtPoint\u3000\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u3001\u6307\u5b9a\u3057\u305f\u30b9\u30d7\u30e9\u30a4\u30c8\u3068\u6307\u5b9a\u3057\u305f\u5ea7\u6a19\u304c\u900f\u904e\u3057\u3066\u3044\u306a\u3044\u30d4\u30af\u30bb\u30eb\u306a\u3089 true \u3092\u8fd4\u3057\u307e\u3059\u3002\u30bf\u30c3\u30d7\u3057\u305f\u5834\u6240\u306b\u753b\u50cf\u304c\u3042\u308b\uff08\u900f\u904e\u3055\u308c\u3066\u3044\u306a\u3044\uff09\u304b\u5224\u5b9a\u3059\u308b\u5834\u5408\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\nCCLayer \u30af\u30e9\u30b9\u3067\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5c11\u3057\u6539\u826f\u3057\u3066 CCSpirte \u3092\u62e1\u5f35\u3057\u305f\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3066\u3001\u4f7f\u7528\u3059\u308b\u3068\u3088\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\nhttps://gist.github.com/syuhari/6442522\n\nHelloWorld.cpp\nbool HelloWorld::areSpritesColliding(cocos2d::CCSprite *spr1, cocos2d::CCSprite *spr2, bool pp) {\n    bool isColliding = false;\n    CCRect intersection;\n    CCRect r1 = spr1->boundingBox();\n    CCRect r2 = spr2->boundingBox();\n\n    // Look for simple bounding box collision\n    if (r1.intersectsRect(r2)) {\n        // If we're not checking for pixel perfect collisions, return true\n        if (!pp) {\n            return true;\n        }\n        CCLOG(\"Bounding Box Collision\");\n\n        float tempX;\n        float tempY;\n        float tempWidth;\n        float tempHeight;\n\n        if (r1.getMaxX() > r2.getMinX()) {\n            tempX = r2.getMinX();\n            tempWidth = r1.getMaxX() - r2.getMinX();\n        } else {\n            tempX = r1.getMinX();\n            tempWidth = r2.getMaxX() - r1.getMinX();\n        }\n\n        if (r1.getMinY() < r2.getMaxY()) {\n            tempY = r1.getMinY();\n            tempHeight = r2.getMaxY() - r1.getMinY();\n        } else {\n            tempY = r2.getMinY();\n            tempHeight = r1.getMaxY() - r2.getMinY();\n        }\n\n        intersection = CCRectMake(tempX * CC_CONTENT_SCALE_FACTOR(), tempY  * CC_CONTENT_SCALE_FACTOR(), tempWidth * CC_CONTENT_SCALE_FACTOR(), tempHeight * CC_CONTENT_SCALE_FACTOR());\n\n        unsigned int x = intersection.origin.x;\n        unsigned int y = intersection.origin.y;\n        unsigned int w = intersection.size.width;\n        unsigned int h = intersection.size.height;\n\n        unsigned int numPixels = w * h;\n\n        if (numPixels<=0) return false;\n\n        // Draw into the RenderTexture\n        CCSize size = CCDirector::sharedDirector()->getWinSize();\n        CCRenderTexture *rt = CCRenderTexture::create(size.width, size.height, kCCTexture2DPixelFormat_RGBA8888);\n        rt->beginWithClear(0, 0, 0, 0);\n\n        // Render both sprites: first one in RED and second one in GREEN\n        glColorMask(1, 0, 0, 1);\n        spr1->visit();\n        glColorMask(0, 1, 0, 1);\n        spr2->visit();\n        glColorMask(1, 1, 1, 1);\n\n        // Get color values of intersection area\n        ccColor4B *buffer = (ccColor4B *)malloc( sizeof(ccColor4B) * numPixels );\n        glReadPixels(x, y, w, h, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n        rt->end();\n\n        // Read buffer\n        unsigned int step = 1;\n        for(unsigned int i=0; i<numPixels; i+=step) {\n            ccColor4B color = buffer[i];\n            CCLOG(\"Pixel color: %d, %d, %d\", color.r, color.g, color.b);\n            if (color.r > 0 && color.g > 0) {\n                isColliding = true;\n                CCLOG(\"Colliding\");\n                break;\n            }\n        }\n\n        // Free buffer memory\n        free(buffer);\n    }\n\n    return isColliding;\n}\n\nbool HelloWorld::collideAtPoint(cocos2d::CCSprite* pSprite, cocos2d::CCPoint point) {\n    bool bCollision = false;\n\n    int searchWidth = 1;\n    int searchHeight = 1;\n\n    unsigned int numPixels = searchWidth * searchHeight;\n\n    CCSize size = CCDirector::sharedDirector()->getWinSize();\n    CCRenderTexture *rt = CCRenderTexture::create(size.width, size.height, kCCTexture2DPixelFormat_RGBA8888);\n    rt->beginWithClear(0, 0, 0, 0);\n\n    // Render both sprites: first one in RED and second one in GREEN\n    glColorMask(1, 0, 0, 1);\n    pSprite->visit();\n    glColorMask(1, 1, 1, 1);\n\n    // Get color values of intersection area\n    ccColor4B *buffer = (ccColor4B *)malloc( sizeof(ccColor4B) * numPixels );\n    glReadPixels(point.x, point.y, searchWidth, searchHeight, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n\n    unsigned int step = 1;\n    for(unsigned int i=0; i<numPixels; i+=step) {\n        ccColor4B color = buffer[i];\n        //CCLog(\"Pixel color: %d, %d, %d\", color.r, color.g, color.b);\n        if (color.r > 0) {\n            bCollision = true;\n            CCLOG(\"Colliding\");\n            break;\n        }\n    }\n\n    rt->end();\n\n    return bCollision;\n\n}\n\n\n\u7269\u7406\u30a8\u30f3\u30b8\u30f3\u3092\u4f7f\u7528\u3057\u306a\u3044\u5834\u5408\u3001\u30b3\u30ea\u30b8\u30e7\u30f3\u5224\u5b9a\uff08\u5f53\u305f\u308a\u5224\u5b9a\uff09\u306f\u30b9\u30d7\u30e9\u30a4\u30c8\u306e\u77e9\u5f62\u3067\u884c\u3046\u3053\u3068\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u308c\u3092\u900f\u904e\u753b\u50cf\u306e\u900f\u904e\u90e8\u5206\u3092\u5f53\u305f\u308a\u5224\u5b9a\u306b\u542b\u3081\u306a\u3044\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nHelloWorld::areSpritesColliding \u30e1\u30bd\u30c3\u30c9\u3067\u306f\u3001\u6307\u5b9a\u3057\u305f2\u3064\u306e\u30b9\u30d7\u30e9\u30a4\u30c8\u304c\u900f\u904e\u90e8\u5206\u3092\u9664\u3044\u3066\u91cd\u306a\u3063\u3066\u3044\u308c\u3070\u3001true \u3092\u8fd4\u3057\u307e\u3059\u3002\u30b9\u30d7\u30e9\u30a4\u30c8\u540c\u58eb\u306e\u5f53\u305f\u308a\u5224\u5b9a\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\nHelloWorld::collideAtPoint\u3000\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u3001\u6307\u5b9a\u3057\u305f\u30b9\u30d7\u30e9\u30a4\u30c8\u3068\u6307\u5b9a\u3057\u305f\u5ea7\u6a19\u304c\u900f\u904e\u3057\u3066\u3044\u306a\u3044\u30d4\u30af\u30bb\u30eb\u306a\u3089 true \u3092\u8fd4\u3057\u307e\u3059\u3002\u30bf\u30c3\u30d7\u3057\u305f\u5834\u6240\u306b\u753b\u50cf\u304c\u3042\u308b\uff08\u900f\u904e\u3055\u308c\u3066\u3044\u306a\u3044\uff09\u304b\u5224\u5b9a\u3059\u308b\u5834\u5408\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\nCCLayer \u30af\u30e9\u30b9\u3067\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5c11\u3057\u6539\u826f\u3057\u3066 CCSpirte \u3092\u62e1\u5f35\u3057\u305f\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3066\u3001\u4f7f\u7528\u3059\u308b\u3068\u3088\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\nhttps://gist.github.com/syuhari/6442522\n\n```HelloWorld.cpp\nbool HelloWorld::areSpritesColliding(cocos2d::CCSprite *spr1, cocos2d::CCSprite *spr2, bool pp) {\n    bool isColliding = false;\n    CCRect intersection;\n    CCRect r1 = spr1->boundingBox();\n    CCRect r2 = spr2->boundingBox();\n\n    // Look for simple bounding box collision\n    if (r1.intersectsRect(r2)) {\n        // If we're not checking for pixel perfect collisions, return true\n        if (!pp) {\n            return true;\n        }\n        CCLOG(\"Bounding Box Collision\");\n        \n        float tempX;\n        float tempY;\n        float tempWidth;\n        float tempHeight;\n        \n        if (r1.getMaxX() > r2.getMinX()) {\n            tempX = r2.getMinX();\n            tempWidth = r1.getMaxX() - r2.getMinX();\n        } else {\n            tempX = r1.getMinX();\n            tempWidth = r2.getMaxX() - r1.getMinX();\n        }\n        \n        if (r1.getMinY() < r2.getMaxY()) {\n            tempY = r1.getMinY();\n            tempHeight = r2.getMaxY() - r1.getMinY();\n        } else {\n            tempY = r2.getMinY();\n            tempHeight = r1.getMaxY() - r2.getMinY();\n        }\n        \n        intersection = CCRectMake(tempX * CC_CONTENT_SCALE_FACTOR(), tempY  * CC_CONTENT_SCALE_FACTOR(), tempWidth * CC_CONTENT_SCALE_FACTOR(), tempHeight * CC_CONTENT_SCALE_FACTOR());\n        \n        unsigned int x = intersection.origin.x;\n        unsigned int y = intersection.origin.y;\n        unsigned int w = intersection.size.width;\n        unsigned int h = intersection.size.height;\n        \n        unsigned int numPixels = w * h;\n        \n        if (numPixels<=0) return false;\n        \n        // Draw into the RenderTexture\n        CCSize size = CCDirector::sharedDirector()->getWinSize();\n        CCRenderTexture *rt = CCRenderTexture::create(size.width, size.height, kCCTexture2DPixelFormat_RGBA8888);\n        rt->beginWithClear(0, 0, 0, 0);\n        \n        // Render both sprites: first one in RED and second one in GREEN\n        glColorMask(1, 0, 0, 1);\n        spr1->visit();\n        glColorMask(0, 1, 0, 1);\n        spr2->visit();\n        glColorMask(1, 1, 1, 1);\n        \n        // Get color values of intersection area\n        ccColor4B *buffer = (ccColor4B *)malloc( sizeof(ccColor4B) * numPixels );\n        glReadPixels(x, y, w, h, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n        \n        rt->end();\n        \n        // Read buffer\n        unsigned int step = 1;\n        for(unsigned int i=0; i<numPixels; i+=step) {\n            ccColor4B color = buffer[i];\n            CCLOG(\"Pixel color: %d, %d, %d\", color.r, color.g, color.b);\n            if (color.r > 0 && color.g > 0) {\n                isColliding = true;\n                CCLOG(\"Colliding\");\n                break;\n            }\n        }\n        \n        // Free buffer memory\n        free(buffer);\n    }\n    \n    return isColliding;\n}\n\nbool HelloWorld::collideAtPoint(cocos2d::CCSprite* pSprite, cocos2d::CCPoint point) {\n    bool bCollision = false;\n    \n    int searchWidth = 1;\n    int searchHeight = 1;\n    \n    unsigned int numPixels = searchWidth * searchHeight;\n    \n    CCSize size = CCDirector::sharedDirector()->getWinSize();\n    CCRenderTexture *rt = CCRenderTexture::create(size.width, size.height, kCCTexture2DPixelFormat_RGBA8888);\n    rt->beginWithClear(0, 0, 0, 0);\n    \n    // Render both sprites: first one in RED and second one in GREEN\n    glColorMask(1, 0, 0, 1);\n    pSprite->visit();\n    glColorMask(1, 1, 1, 1);\n    \n    // Get color values of intersection area\n    ccColor4B *buffer = (ccColor4B *)malloc( sizeof(ccColor4B) * numPixels );\n    glReadPixels(point.x, point.y, searchWidth, searchHeight, GL_RGBA, GL_UNSIGNED_BYTE, buffer);\n    \n    unsigned int step = 1;\n    for(unsigned int i=0; i<numPixels; i+=step) {\n        ccColor4B color = buffer[i];\n        //CCLog(\"Pixel color: %d, %d, %d\", color.r, color.g, color.b);\n        if (color.r > 0) {\n            bCollision = true;\n            CCLOG(\"Colliding\");\n            break;\n        }\n    }\n    \n    rt->end();\n    \n    return bCollision;\n    \n}\n```"}