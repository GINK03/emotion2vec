{"tags": ["Haskell", "\u6570\u5b66", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"], "context": "\u6709\u9650\u4f53\u3092\u304b\u3058\u308b\u4e2d\u51fa\u3066\u304d\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092Haskell \u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304a\u3088\u3073pseudo code \u306f\u4ee5\u4e0b\u306ewikipedia \u304b\u3089\nExtended Euclidean algorithm\n\u3053\u3053\u3067\u306f\u57fa\u672c\u7684\u306a\u96c6\u5408\u8ad6\u3068\u4ee3\u6570\u69cb\u9020\u306e\u77e5\u8b58\u3092\u4eee\u5b9a\u3057\u3066\u307e\u3059\u3002\n\n\u74b0$Z_n$\n\u6574\u6570\u5168\u4f53$\\mathbb{Z}$ \u306f\u74b0\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u66f4\u306b\u3042\u308b\u81ea\u7136\u6570$n$ \u3092\u53d6\u3063\u3066\u304d\u3066\n\\mathbb{Z}/n\\mathbb{Z}\n\n\u306a\u308b\u5546\u96c6\u5408\u3092\u8003\u3048\u3066\u3082\u3053\u308c\u307e\u305f\u74b0\u306b\u306a\u308a\u307e\u3059\u3002\n\u5e73\u305f\u304f\u8a00\u3046\u3068\u6574\u6570\u5168\u4f53\u3092$n$ \u3067\u5272\u3063\u305f\u4f59\u308a\u3067\u540c\u5024\u985e\u3092\u4f5c\u3063\u3066\u305d\u306e\u540c\u5024\u95a2\u4fc2\u3067\u5272\u3063\u305f\u3082\u306e\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d\u3002\n\\{0, \\cdots, (n-1)\\}\n\n\u306a\u308b\u6709\u9650\u96c6\u5408\u3068\u8003\u3048\u3066\u3082\u3088\u3057\u3001\u6f14\u7b97\u306f\u5168\u90e8\n\\mod n\n\n\u3067\u8003\u3048\u308c\u3070\u826f\u3044\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u4f53\n\u3053\u3053\u3067$p$ \u3092\u7d20\u6570\u3068\u3059\u308b\u3068\n\\mathbb{Z}/p\\mathbb{Z}\n\n\u304c\u4f53\u306b\u306a\u308b\u3053\u3068\u304c\u793a\u305b\u307e\u3059\u3002\n\u4f53\u3068\u3044\u3046\u306e\u306f\u3001\u74b0\u306e\u3046\u3061\u3001\u96f6\u3067\u306a\u3044\u5143\u304c\u639b\u3051\u7b97\u306b\u5bfe\u3059\u308b\u9006\u6570\u3092\u6301\u3064\u3088\u3046\u306a\u3082\u306e\u306e\u3053\u3068\u3067\u3059\u3002\n\u3053\u3053\u3067$p$ \u304c\u7d20\u6570\u306a\u3053\u3068\u3092\u601d\u3044\u51fa\u3059\u3068\u3001\n\\{0, \\cdots, (p-1)\\}\n\n\u306e\u5185$p$ \u3068\u4e92\u3044\u306b\u7d20\u3067\u306a\u3044\u306e\u306f0\u3060\u3051\u3067\u3001\u305d\u308c\u4ee5\u5916\u306f\u6700\u5927\u516c\u7d04\u6570\u304c1 \u3068\u306a\u308b\u3053\u3068\u304b\u3089\u5206\u304b\u308a\u307e\u3059\u3002\n\n\u62e1\u5f35\u3055\u308c\u305f\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5\n\u3053\u3053\u3067\u529b\u3092\u767a\u63ee\u3059\u308b\u306e\u304c\u30bf\u30a4\u30c8\u30eb\u306b\u3082\u306a\u3063\u305f\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5\u306e\u62e1\u5f35\u7248\u3067\u3059\u3001\u666e\u901a\u306e\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5\u306f\u6700\u5927\u516c\u7d04\u6570\u3092\u6c42\u3081\u308b\u3060\u3051\u3067\u3059\u304c\u3001\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3060\u3068\u7a4d\u306b\u5bfe\u3059\u308b\u9006\u5143\u306e\u5019\u88dc\u3082\u8a08\u7b97\u3067\u304d\u308b\u306e\u3067\u5b09\u3057\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\npseudo code\n\u4ee5\u4e0bwiki\u304b\u3089\u30b3\u30d4\u30da\u3067\u3059\u3002\n\nfunction extended_gcd(a, b)\n    s := 0;    old_s := 1\n    t := 1;    old_t := 0\n    r := b;    old_r := a\n    while r \u2260 0\n        quotient := old_r div r\n        (old_r, r) := (r, old_r - quotient * r)\n        (old_s, s) := (s, old_s - quotient * s)\n        (old_t, t) := (t, old_t - quotient * t)\n    output \"B\u00e9zout coefficients:\", (old_s, old_t)\n    output \"greatest common divisor:\", old_r\n    output \"quotients by the gcd:\", (t, s)\n\n\n\u6574\u6570a,b \u306b\u5bfe\u3057\u3066\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u305d\u308c\u3089\u306e\u6700\u5927\u516c\u7d04\u6570\u3068\u4ee5\u4e0b\u306e\u7b49\u53f7\u304c\u6210\u308a\u7acb\u3064\u4e8c\u6574\u6570x,y \u3092\u8fd4\u3057\u307e\u3059\uff1a\n\n\\gcd(a,b) = a*x + b*y\n\n\n\u5f93\u3063\u3066\u4f8b\u3048\u3070\n\\gcd(a,p) = a*x + b*p\n\n\u3092\u8003\u3048\u3066\u307f\u308b\u3068\u3001\u3082\u3057a \u3068p \u304c\u4e92\u3044\u306b\u7d20\u3060\u3068\n1 = a*x + b*p\n\n\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u53f3\u8fba\u306f$\\mod p$ \u3067\u306f$a*x (\\mod p)$ \u3068\u306a\u308a\u3053\u306ex\u3001\u6b63\u78ba\u306b\u306f$x (\\mod p)$ \u304ca \u306e\u9006\u6570\u3068\u306a\u308b\u308f\u3051\u3067\u3059\u3002\n\nHaskell \u3067\u306e\u5b9f\u88c5\n\u306a\u308b\u307b\u3069\u3001\u9045\u5ef6\u30ea\u30b9\u30c8\u3092\u4f7f\u3048\u305d\u3046\u3068\u307e\u305a\u3042\u305f\u308a\u304c\u4ed8\u304d\u307e\u3059\u3001\u3059\u306a\u308f\u3061\u4f8b\u3048\u3070\u30ea\u30b9\u30c8r \u306f\u6700\u521d\u306e\u8981\u7d20\uff12\u3064\u304c\u5165\u529b\u306ea \u3068b \u3067\u3042\u3068\u306f\u76f8\u4e92\u306b\u518d\u5e30\u7684\u306b\u3064\u3051\u3066\u3044\u3063\u305f\u3089\u826f\u3044\u3068\u3044\u3046\u8a33\u3067\u3059\u3002\n\u30a2\u30a4\u30c7\u30a3\u30a2\u3068\u3057\u3066\u306f\u4e00\u500b\u305a\u3089\u3057\u305f\u30ea\u30b9\u30c8\u3092tail \u3067\u4f5c\u3063\u3066zipWith \u3067\u5fc5\u8981\u306a\u6f14\u7b97\u3092\u631f\u3093\u3067\u304f\u3063\u3064\u3051\u3066\u3044\u3063\u305f\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\n\u7d42\u4e86\u6761\u4ef6\u3092\u3069\u3046\u3057\u3088\u3046\u304b\u306a\u3068\u8ff7\u3063\u305f\u306e\u3067\u3001\u7d20\u6734\u306a\u9ad8\u968e\u95a2\u6570\u3092\u4e00\u3064\u5b9a\u7fa9\u3057\u3066\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u3093\u306a\u3044\u3044\u52a0\u6e1b\u3067\u66f8\u304d\u4e0b\u3057\u305f\u3060\u3051\u306e\u30b3\u30fc\u30c9\u3067\u3082\u52d5\u304f\u306e\u306f\u3046\u308c\u3057\u3044\u3067\u3059\u306d\u3002\n\nFfield.lhs\n> module Ffield where\n\n> import Data.Ratio ((%))\n\n> coprime :: Integral a => a -> a -> Bool\n> coprime a b = (gcd a b) == 1\n\nConsider a finite ring\n  Z_n := [0..(n-1)]\n\n> haveInverse :: Integral a => a -> [Bool]\n> haveInverse n = map (coprime n) [0..(n-1)]\n\nIf any non-zero element has its multiplication inverse, then the ring is a field:\n\n> isField :: Integral a => a -> Bool\n> isField n = and $ tail $ haveInverse n\n\nIf p is prime, then Z_p is a field:\n\n  zip [2..] $ map isField [2..13]\n  [(2,True),(3,True),(4,False),(5,True),(6,False),(7,True),(8,False),(9,False),(10,False),(11,True),(12,False),(13,True)]\n\nHere we would like to implement the extended Euclidean algorithm.\nSee the algorithm, examples, and pseudo code at:\n\n  https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n\n\n> exGCD' :: Integral c => c -> c -> ([c], [c], [c], [c])\n> exGCD' a b = (q, r, s, t)\n>   where\n>     q = zipWith quot r (tail r)\n>     r = takeBefore (==0) r'\n>     r' = a:b: (zipWith (-) r' (zipWith (*) q (tail r')))\n>     s  = 1:0: (zipWith (-) s (zipWith (*) q (tail s)))\n>     t  = 0:1: (zipWith (-) t (zipWith (*) q (tail t)))\n>\n> takeBefore :: (a -> Bool) -> [a] -> [a]\n> takeBefore _ [] = []\n> takeBefore p (l:ls)\n>   | p l       = []\n>   | otherwise = l : (takeBefore p ls)\n\nThis example is from wikipedia:\n\n  *Ffield> exGCD' 240 46\n  ([5,4,1,1,2],[240,46,10,6,4,2],[1,0,1,-4,5,-9,23],[0,1,-5,21,-26,47,-120])\n  *Ffield> gcd 240 46\n  2\n  *Ffield> 240*(-9) + 46*(47)\n  2\n\n> -- a*x + b*y = gcd a b\n> exGcd a b = (g, x, y)\n>   where\n>     (_,r,s,t) = exGCD' a b\n>     g = last r\n>     x = last . init $ s\n>     y = last . init $ t\n\n  *Ffield> exGcd 46 240\n  (2,47,-9)\n  *Ffield> 46*47 + 240*(-9)\n  2\n  *Ffield> gcd 46 240\n  2\n\n\n\n\n\u89e3\u8aac\ncoprime\u306f\u4e92\u3044\u306b\u7d20\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u3001\u7d44\u307f\u8fbc\u307f\u306egcd \u3092\u4f7f\u3063\u3066\u307e\u3059\u3002\nhaveInverse \u306f\u5546\u74b0$\\mathbb{Z}/n\\mathbb{Z}$\u3092\u30ea\u30b9\u30c8[0..(n-1)]\u3067\u4e0e\u3048\u3066\u3001\u305d\u308c\u3089\u306e\u5143\u304cn \u3068\u4e92\u3044\u306b\u7d20\u304b\u3069\u3046\u304b\u3067\u9006\u5143\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\nisField \u306f$\\mathbb{Z}/n\\mathbb{Z}$ \u306en \u3092\u53d6\u3063\u3066\u3001\u305d\u306e\u5546\u74b0\u304c\u4f53\u306b\u306a\u308b\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u3067\u3059\u3001\u7d20\u6734\u306b0 \u4ee5\u5916\u304cn \u3068\u4e92\u3044\u306b\u7d20\u304b\u3069\u3046\u304b\u3092\u898b\u3066\u3044\u307e\u3059\u3002\n\u30e1\u30a4\u30f3\u306e\u524d\u306b\u88dc\u52a9\u95a2\u6570\u3068\u3057\u3066exGCD'\u3092\u4f5c\u308a\u307e\u3057\u305f\u3001\u3053\u308c\u306f\u62e1\u5f35\u7248\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u6cbf\u3063\u3066\u30ea\u30b9\u30c8\u305f\u3061\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\n\u8fd4\u308a\u5024\u306e\u30ea\u30b9\u30c8\u306b$\\gcd$ \u3068\u6b32\u3057\u3044\u4e8c\u6574\u6570\u3082\u5165\u3063\u3066\u308b\u5bf8\u6cd5\u3067\u3059\u3002\nwhere \u306e\u4e2d\u3067\u3059\u304c\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u306e\u6642\u3068\u540c\u69d8\u306b\u4e00\u3064\u305a\u3089\u3057\u3066zipWith \u3067\u6f14\u7b97\u3068\u307e\u3068\u3081\u308b\u3092\u30d0\u30ab\u306e\u4e00\u3064\u899a\u3048\u306e\u3088\u3046\u306b\u591a\u7528\u3057\u307e\u3059\u3002\n\u3042\u3068\u306f\u7d42\u4e86\u5224\u5b9a\u306e\u305f\u3081\u306e\u9ad8\u968e\u95a2\u6570`takeBefore \u3068\u9045\u5ef6\u30ea\u30b9\u30c8r', s,t\u3067\u3059\u3002\n\n\u554f\u984c\u70b9\n\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u306f\u52d5\u304d\u307e\u3059\u304c\u3084\u3084\u4e0d\u6e80\u304c\u6b8b\u308a\u307e\u3059\u3002\n\u5f37Haskeller \u306e\u7686\u69d8\uff08\u51f6\u3067\u3082\u72c2\u3067\u3082\u3053\u306e\u969b\u69cb\u3044\u307e\u305b\u3093\uff09\u3082\u3057\u3088\u308d\u3057\u3051\u308c\u3070\u304a\u529b\u3092\u8cb8\u3057\u3066\u304f\u3060\u3055\u3044\u3001\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\u4f3c\u305f\u30d1\u30bf\u30fc\u30f3\u3067\u4f5c\u3089\u308c\u308b\u9045\u5ef6\u30ea\u30b9\u30c8\n\u6700\u521d\u306b\u601d\u3044\u3064\u3044\u305f\u306e\u306f\u9ad8\u968e\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u4f7f\u3044\u307e\u308f\u305b\u306a\u3044\u304b\u306a\uff1f\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u305f\u3002\n\n> exGCD2 :: Integral c => c -> c -> ([c], [c], [c], [c])\n> exGCD2 a b = (q, r, s, t)\n>   where\n>     q = zipWith quot r (tail r)\n>     r = takeBefore (==0) r'\n>     r' = steps r' q a b\n>     s = steps s q 1 0\n>     t = steps t q 0 1\n>\n> -- The follwoing higher order function does NOT work.\n> steps :: Integral a => [a] -> [a] -> a -> a -> [a]\n> steps rr@(_:rs) qs a b = a:b: (zipWith (-) rr $ zipWith (*) qs rs)\n\n\n\u4e00\u898b\u826f\u3055\u305d\u3046\u3067\u3059\u3057\u3001ghci \u306b\u8aad\u307e\u305b\u3066\u3082\u4f55\u3082\u6587\u53e5\u3092\u8a00\u308f\u308c\u306a\u3044\u306e\u3067\u578b\u3082\u5408\u3063\u3066\u307e\u3059\u304c\u3001\u8d70\u3089\u305b\u308b\u3068\u30eb\u30fc\u30d7\u306b\u306a\u308a\u307e\u3059\u3068\u6012\u3089\u308c\u307e\u3059\u3002\n*Ffield> exGCD2 13 7\n(*** Exception: <<loop>>\n*Ffield> exGCD' 13 7\n([1,1,6],[13,7,6,1],[1,0,1,-1,7],[0,1,-1,2,-13])\n\n\u6050\u3089\u304f\u3053\u306e\u9ad8\u968e\u95a2\u6570\u306e\u5f15\u6570\u306b\u7d50\u679c\u3068\u3057\u3066\u8fd4\u3057\u305f\u3044\u30ea\u30b9\u30c8\u81ea\u8eab\u304c\u3042\u3066\u304c\u308f\u308c\u3066\u308b\u305b\u3044\u3067\u3001\u5fc5\u305a\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u547c\u3070\u308c\u305f\u6bb5\u968e\u3067\u306f\u307e\u3060\u4e2d\u8eab\u304c\u6c7a\u307e\u3063\u3066\u306a\u3044\u306e\u3067\u3001\u3001\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u304b\uff1f\n\nfold \u3067\u66f8\u304d\u76f4\u305b\u305d\u3046\u306a\u9ad8\u968e\u95a2\u6570takeBefore\n\u6700\u521dtakeUntil \u3068\u3044\u3046\u540d\u524d\u3067\u3057\u305f\u304c\u3069\u3063\u3061\u304c\u826f\u304b\u3063\u305f\u306e\u3067\u3057\u3087\u3046\uff1f\n\u3055\u3066\u304a\u304d\u3001\u306a\u3093\u3068\u306a\u304ffilter \u306b\u4f3c\u3066\u308b\u6c17\u304c\u3059\u308b\u306e\u3067\u7573\u307f\u8fbc\u3081\u305d\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\n\u9ad8\u968e\u95a2\u6570\u3092\u4f7f\u3063\u305f\u8ffd\u8a18\n\u56f0\u3063\u305f\u3068\u304d\u306efold(r) \u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u8aad\u3093\u3067\u305d\u306e\u307e\u307e\u66f8\u304d\u76f4\u3057\u3066\u307f\u307e\u3057\u305f\u3001\u57fa\u672c\u7684\u306bif then else \u3092\u66f8\u304d\u305f\u304f\u306f\u306a\u3044\u306e\u3067\u540c\u3058\u69cb\u9020\u3092\u305d\u306e\u307e\u307e\u6301\u3063\u3066\u304d\u307e\u3057\u305f\u304c\u53f3\u304b\u3089\u7573\u307f\u8fbc\u3093\u3067\u308b\u3053\u3068\u3092\u660e\u793a\u3067\u304d\u308b\u306e\u3067\u3053\u3061\u3089\u306e\u65b9\u304c\u6c17\u5206\u304c\u697d\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n> takeUntil :: (a -> Bool) -> [a] -> [a]\n> takeUntil p = foldr func []\n>   where\n>     func x xs \n>       | p x = []\n>       | otherwise = x : xs\n\n\n\u5b89\u5168\u3068\u306f\u8a00\u3048\u306a\u3093\u304b\u3044\u3084\u306alast \u3068\u304b\n\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3067\u306a\u3093\u3068\u304b\u53d6\u308a\u51fa\u305b\u306a\u3044\u304b\u306a\uff1f\u3068\u3082\u8003\u3048\u307e\u3057\u305f\u304c\u3001\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u653e\u7f6e\u3057\u3066\u307e\u3059\u3002\n\u3053\u3053\u3067\u5b89\u5168\u3068\u3044\u3046\u306e\u306f\u521d\u671f\u5024\u304c\u5fc5\u305a\u4e8c\u3064\u5165\u3063\u3066\u308b\u306e\u3067\u3001\u3053\u306e\u64cd\u4f5c\u306f\u5fc5\u305a\u4f55\u304b\u306e\u8981\u7d20\u306b\u30d2\u30c3\u30c8\u3059\u308b\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n\u4f8b$Z_{11}$\n\u7d20\u657011 \u3092\u4f7f\u3063\u3066\u3061\u3087\u3063\u3068\u5b9f\u9a13\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u3053\u3053\u3067\u4f7f\u3063\u305f\u306e\u306f\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\n\n> exGCD' :: Integral n => n -> n -> ([n], [n], [n], [n])\n> exGCD' a b = (qs, rs, ss, ts)\n>   where\n>     qs = zipWith quot rs (tail rs)\n> --    rs = takeBefore (==0) r'\n>     rs = takeUntil (==0) r'\n>     r' = steps a b\n>     ss = steps 1 0\n>     ts = steps 0 1\n>     steps a b = rr\n>       where rr@(_:rs) = a:b: zipWith (-) rr (zipWith (*) qs rs)\n>         \n> takeUntil :: (a -> Bool) -> [a] -> [a]\n> takeUntil p = foldr func []\n>   where\n>     func x xs \n>       | p x = []\n>       | otherwise = x : xs\n\n\n\u3055\u3066\u4ee5\u4e0b\u304c\u5b9f\u9a13\u3067\u3059\u3001\u307e\u305a\u306f$Z_{11}$ \u304c\u4f53\u306b\u306a\u308b\u304b\u3069\u3046\u304b\u3001\u3059\u306a\u308f\u3061\u7d20\u6570\u304b\u3069\u3046\u304b\u3067\u3059\u3002\n\u305d\u306e\u3042\u3068\u5c11\u3005\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30fc\u306e\u4e0a\u3067\u3044\u3058\u3063\u3066\u307f\u3066\u3001\u975e\u96f6\u5143\u306e\u9006\u5143\u3092\u8fd4\u3059\u3088\u3046\u306a\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\nExample Z_{11}\n\n  *Ffield> isField 11\n  True\n  *Ffield> map (exGcd 11) [0..10]\n  [(11,1,0),(1,0,1),(1,1,-5),(1,-1,4),(1,-1,3),(1,1,-2),(1,-1,2),(1,2,-3),(1,3,-4),(1,-4,5),(1,1,-1)]\n\n  *Ffield> map ((`mod` 11) . (\\(_,_,x)->x) . exGcd 11) [1..10] \n  [1,6,4,3,9,2,8,7,5,10]\n  *Ffield> zip [1..10] it\n  [(1,1),(2,6),(3,4),(4,3),(5,9),(6,2),(7,8),(8,7),(9,5),(10,10)]\n\n> inverses :: Int -> Maybe [(Int, Int)]\n> inverses n\n>   | isField n = Just lst\n>   | otherwise = Nothing\n>   where\n>     lst' = map ((`mod` n) . (\\(_,_,c)->c) . exGcd n) [1..(n-1)]\n>     lst = zip [1..] lst'\n\n  *Ffield> inverses 11\n  Just [(1,1),(2,6),(3,4),(4,3),(5,9),(6,2),(7,8),(8,7),(9,5),(10,10)]\n\n\u6709\u9650\u4f53\u3092\u304b\u3058\u308b\u4e2d\u51fa\u3066\u304d\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092Haskell \u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304a\u3088\u3073pseudo code \u306f\u4ee5\u4e0b\u306ewikipedia \u304b\u3089\n[Extended Euclidean algorithm](https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm)\n\n\u3053\u3053\u3067\u306f\u57fa\u672c\u7684\u306a\u96c6\u5408\u8ad6\u3068\u4ee3\u6570\u69cb\u9020\u306e\u77e5\u8b58\u3092\u4eee\u5b9a\u3057\u3066\u307e\u3059\u3002\n\n# \u74b0$Z_n$\n\u6574\u6570\u5168\u4f53$\\mathbb{Z}$ \u306f\u74b0\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u66f4\u306b\u3042\u308b\u81ea\u7136\u6570$n$ \u3092\u53d6\u3063\u3066\u304d\u3066\n\n```math\n\\mathbb{Z}/n\\mathbb{Z}\n```\n\n\u306a\u308b\u5546\u96c6\u5408\u3092\u8003\u3048\u3066\u3082\u3053\u308c\u307e\u305f\u74b0\u306b\u306a\u308a\u307e\u3059\u3002\n\u5e73\u305f\u304f\u8a00\u3046\u3068\u6574\u6570\u5168\u4f53\u3092$n$ \u3067\u5272\u3063\u305f\u4f59\u308a\u3067\u540c\u5024\u985e\u3092\u4f5c\u3063\u3066\u305d\u306e\u540c\u5024\u95a2\u4fc2\u3067\u5272\u3063\u305f\u3082\u306e\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d\u3002\n\n```math\n\\{0, \\cdots, (n-1)\\}\n```\n\n\u306a\u308b\u6709\u9650\u96c6\u5408\u3068\u8003\u3048\u3066\u3082\u3088\u3057\u3001\u6f14\u7b97\u306f\u5168\u90e8\n\n```math\n\\mod n\n```\n\n\u3067\u8003\u3048\u308c\u3070\u826f\u3044\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n# \u4f53\n\u3053\u3053\u3067$p$ \u3092\u7d20\u6570\u3068\u3059\u308b\u3068\n\n```math\n\\mathbb{Z}/p\\mathbb{Z}\n```\n\n\u304c\u4f53\u306b\u306a\u308b\u3053\u3068\u304c\u793a\u305b\u307e\u3059\u3002\n\u4f53\u3068\u3044\u3046\u306e\u306f\u3001\u74b0\u306e\u3046\u3061\u3001\u96f6\u3067\u306a\u3044\u5143\u304c\u639b\u3051\u7b97\u306b\u5bfe\u3059\u308b\u9006\u6570\u3092\u6301\u3064\u3088\u3046\u306a\u3082\u306e\u306e\u3053\u3068\u3067\u3059\u3002\n\u3053\u3053\u3067$p$ \u304c\u7d20\u6570\u306a\u3053\u3068\u3092\u601d\u3044\u51fa\u3059\u3068\u3001\n\n```math\n\\{0, \\cdots, (p-1)\\}\n```\n\n\u306e\u5185$p$ \u3068\u4e92\u3044\u306b\u7d20\u3067\u306a\u3044\u306e\u306f0\u3060\u3051\u3067\u3001\u305d\u308c\u4ee5\u5916\u306f\u6700\u5927\u516c\u7d04\u6570\u304c1 \u3068\u306a\u308b\u3053\u3068\u304b\u3089\u5206\u304b\u308a\u307e\u3059\u3002\n\n# \u62e1\u5f35\u3055\u308c\u305f\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5\n\u3053\u3053\u3067\u529b\u3092\u767a\u63ee\u3059\u308b\u306e\u304c\u30bf\u30a4\u30c8\u30eb\u306b\u3082\u306a\u3063\u305f\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5\u306e\u62e1\u5f35\u7248\u3067\u3059\u3001\u666e\u901a\u306e\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5\u306f\u6700\u5927\u516c\u7d04\u6570\u3092\u6c42\u3081\u308b\u3060\u3051\u3067\u3059\u304c\u3001\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3060\u3068\u7a4d\u306b\u5bfe\u3059\u308b\u9006\u5143\u306e\u5019\u88dc\u3082\u8a08\u7b97\u3067\u304d\u308b\u306e\u3067\u5b09\u3057\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\n## pseudo code\n\u4ee5\u4e0b[wiki](https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Pseudocode)\u304b\u3089\u30b3\u30d4\u30da\u3067\u3059\u3002\n\n> ```\n> function extended_gcd(a, b)\n>     s := 0;    old_s := 1\n>     t := 1;    old_t := 0\n>     r := b;    old_r := a\n>     while r \u2260 0\n>         quotient := old_r div r\n>         (old_r, r) := (r, old_r - quotient * r)\n>         (old_s, s) := (s, old_s - quotient * s)\n>         (old_t, t) := (t, old_t - quotient * t)\n>     output \"B\u00e9zout coefficients:\", (old_s, old_t)\n>     output \"greatest common divisor:\", old_r\n>     output \"quotients by the gcd:\", (t, s)\n>```\n\n\u6574\u6570a,b \u306b\u5bfe\u3057\u3066\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u305d\u308c\u3089\u306e\u6700\u5927\u516c\u7d04\u6570\u3068\u4ee5\u4e0b\u306e\u7b49\u53f7\u304c\u6210\u308a\u7acb\u3064\u4e8c\u6574\u6570x,y \u3092\u8fd4\u3057\u307e\u3059\uff1a\n\n```math\n\n\\gcd(a,b) = a*x + b*y\n\n```\n\n\u5f93\u3063\u3066\u4f8b\u3048\u3070\n\n```math\n\\gcd(a,p) = a*x + b*p\n```\n\n\u3092\u8003\u3048\u3066\u307f\u308b\u3068\u3001\u3082\u3057a \u3068p \u304c\u4e92\u3044\u306b\u7d20\u3060\u3068\n\n```math\n1 = a*x + b*p\n```\n\n\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u53f3\u8fba\u306f$\\mod p$ \u3067\u306f$a*x (\\mod p)$ \u3068\u306a\u308a\u3053\u306ex\u3001\u6b63\u78ba\u306b\u306f$x (\\mod p)$ \u304ca \u306e\u9006\u6570\u3068\u306a\u308b\u308f\u3051\u3067\u3059\u3002\n\n## Haskell \u3067\u306e\u5b9f\u88c5\n\u306a\u308b\u307b\u3069\u3001\u9045\u5ef6\u30ea\u30b9\u30c8\u3092\u4f7f\u3048\u305d\u3046\u3068\u307e\u305a\u3042\u305f\u308a\u304c\u4ed8\u304d\u307e\u3059\u3001\u3059\u306a\u308f\u3061\u4f8b\u3048\u3070\u30ea\u30b9\u30c8r \u306f\u6700\u521d\u306e\u8981\u7d20\uff12\u3064\u304c\u5165\u529b\u306ea \u3068b \u3067\u3042\u3068\u306f\u76f8\u4e92\u306b\u518d\u5e30\u7684\u306b\u3064\u3051\u3066\u3044\u3063\u305f\u3089\u826f\u3044\u3068\u3044\u3046\u8a33\u3067\u3059\u3002\n\u30a2\u30a4\u30c7\u30a3\u30a2\u3068\u3057\u3066\u306f\u4e00\u500b\u305a\u3089\u3057\u305f\u30ea\u30b9\u30c8\u3092tail \u3067\u4f5c\u3063\u3066zipWith \u3067\u5fc5\u8981\u306a\u6f14\u7b97\u3092\u631f\u3093\u3067\u304f\u3063\u3064\u3051\u3066\u3044\u3063\u305f\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\n\u7d42\u4e86\u6761\u4ef6\u3092\u3069\u3046\u3057\u3088\u3046\u304b\u306a\u3068\u8ff7\u3063\u305f\u306e\u3067\u3001\u7d20\u6734\u306a\u9ad8\u968e\u95a2\u6570\u3092\u4e00\u3064\u5b9a\u7fa9\u3057\u3066\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u3093\u306a\u3044\u3044\u52a0\u6e1b\u3067\u66f8\u304d\u4e0b\u3057\u305f\u3060\u3051\u306e\u30b3\u30fc\u30c9\u3067\u3082\u52d5\u304f\u306e\u306f\u3046\u308c\u3057\u3044\u3067\u3059\u306d\u3002\n\n```Ffield.lhs\n> module Ffield where\n\n> import Data.Ratio ((%))\n\n> coprime :: Integral a => a -> a -> Bool\n> coprime a b = (gcd a b) == 1\n\nConsider a finite ring\n  Z_n := [0..(n-1)]\n\n> haveInverse :: Integral a => a -> [Bool]\n> haveInverse n = map (coprime n) [0..(n-1)]\n\nIf any non-zero element has its multiplication inverse, then the ring is a field:\n\n> isField :: Integral a => a -> Bool\n> isField n = and $ tail $ haveInverse n\n\nIf p is prime, then Z_p is a field:\n\n  zip [2..] $ map isField [2..13]\n  [(2,True),(3,True),(4,False),(5,True),(6,False),(7,True),(8,False),(9,False),(10,False),(11,True),(12,False),(13,True)]\n\nHere we would like to implement the extended Euclidean algorithm.\nSee the algorithm, examples, and pseudo code at:\n\n  https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n\n\n> exGCD' :: Integral c => c -> c -> ([c], [c], [c], [c])\n> exGCD' a b = (q, r, s, t)\n>   where\n>     q = zipWith quot r (tail r)\n>     r = takeBefore (==0) r'\n>     r' = a:b: (zipWith (-) r' (zipWith (*) q (tail r')))\n>     s  = 1:0: (zipWith (-) s (zipWith (*) q (tail s)))\n>     t  = 0:1: (zipWith (-) t (zipWith (*) q (tail t)))\n>\n> takeBefore :: (a -> Bool) -> [a] -> [a]\n> takeBefore _ [] = []\n> takeBefore p (l:ls)\n>   | p l       = []\n>   | otherwise = l : (takeBefore p ls)\n\nThis example is from wikipedia:\n\n  *Ffield> exGCD' 240 46\n  ([5,4,1,1,2],[240,46,10,6,4,2],[1,0,1,-4,5,-9,23],[0,1,-5,21,-26,47,-120])\n  *Ffield> gcd 240 46\n  2\n  *Ffield> 240*(-9) + 46*(47)\n  2\n\n> -- a*x + b*y = gcd a b\n> exGcd a b = (g, x, y)\n>   where\n>     (_,r,s,t) = exGCD' a b\n>     g = last r\n>     x = last . init $ s\n>     y = last . init $ t\n\n  *Ffield> exGcd 46 240\n  (2,47,-9)\n  *Ffield> 46*47 + 240*(-9)\n  2\n  *Ffield> gcd 46 240\n  2\n\n```\n\n## \u89e3\u8aac\n\n`coprime `\u306f\u4e92\u3044\u306b\u7d20\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u3001\u7d44\u307f\u8fbc\u307f\u306e`gcd` \u3092\u4f7f\u3063\u3066\u307e\u3059\u3002\n`haveInverse` \u306f\u5546\u74b0$\\mathbb{Z}/n\\mathbb{Z}$\u3092\u30ea\u30b9\u30c8`[0..(n-1)]`\u3067\u4e0e\u3048\u3066\u3001\u305d\u308c\u3089\u306e\u5143\u304cn \u3068\u4e92\u3044\u306b\u7d20\u304b\u3069\u3046\u304b\u3067\u9006\u5143\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\n`isField ` \u306f$\\mathbb{Z}/n\\mathbb{Z}$ \u306en \u3092\u53d6\u3063\u3066\u3001\u305d\u306e\u5546\u74b0\u304c\u4f53\u306b\u306a\u308b\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u3067\u3059\u3001\u7d20\u6734\u306b0 \u4ee5\u5916\u304cn \u3068\u4e92\u3044\u306b\u7d20\u304b\u3069\u3046\u304b\u3092\u898b\u3066\u3044\u307e\u3059\u3002\n\n\u30e1\u30a4\u30f3\u306e\u524d\u306b\u88dc\u52a9\u95a2\u6570\u3068\u3057\u3066`exGCD'`\u3092\u4f5c\u308a\u307e\u3057\u305f\u3001\u3053\u308c\u306f\u62e1\u5f35\u7248\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u6cbf\u3063\u3066\u30ea\u30b9\u30c8\u305f\u3061\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\n\u8fd4\u308a\u5024\u306e\u30ea\u30b9\u30c8\u306b$\\gcd$ \u3068\u6b32\u3057\u3044\u4e8c\u6574\u6570\u3082\u5165\u3063\u3066\u308b\u5bf8\u6cd5\u3067\u3059\u3002\n`where` \u306e\u4e2d\u3067\u3059\u304c\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u306e\u6642\u3068\u540c\u69d8\u306b\u4e00\u3064\u305a\u3089\u3057\u3066zipWith \u3067\u6f14\u7b97\u3068\u307e\u3068\u3081\u308b\u3092\u30d0\u30ab\u306e\u4e00\u3064\u899a\u3048\u306e\u3088\u3046\u306b\u591a\u7528\u3057\u307e\u3059\u3002\n\u3042\u3068\u306f\u7d42\u4e86\u5224\u5b9a\u306e\u305f\u3081\u306e\u9ad8\u968e\u95a2\u6570``takeBefore` \u3068\u9045\u5ef6\u30ea\u30b9\u30c8`r', s,t`\u3067\u3059\u3002\n\n# \u554f\u984c\u70b9\n\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u306f\u52d5\u304d\u307e\u3059\u304c\u3084\u3084\u4e0d\u6e80\u304c\u6b8b\u308a\u307e\u3059\u3002\n\u5f37Haskeller \u306e\u7686\u69d8\uff08\u51f6\u3067\u3082\u72c2\u3067\u3082\u3053\u306e\u969b\u69cb\u3044\u307e\u305b\u3093\uff09\u3082\u3057\u3088\u308d\u3057\u3051\u308c\u3070\u304a\u529b\u3092\u8cb8\u3057\u3066\u304f\u3060\u3055\u3044\u3001\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n## \u4f3c\u305f\u30d1\u30bf\u30fc\u30f3\u3067\u4f5c\u3089\u308c\u308b\u9045\u5ef6\u30ea\u30b9\u30c8\n\u6700\u521d\u306b\u601d\u3044\u3064\u3044\u305f\u306e\u306f\u9ad8\u968e\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u4f7f\u3044\u307e\u308f\u305b\u306a\u3044\u304b\u306a\uff1f\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u305f\u3002\n\n```lhs\n\n> exGCD2 :: Integral c => c -> c -> ([c], [c], [c], [c])\n> exGCD2 a b = (q, r, s, t)\n>   where\n>     q = zipWith quot r (tail r)\n>     r = takeBefore (==0) r'\n>     r' = steps r' q a b\n>     s = steps s q 1 0\n>     t = steps t q 0 1\n>\n> -- The follwoing higher order function does NOT work.\n> steps :: Integral a => [a] -> [a] -> a -> a -> [a]\n> steps rr@(_:rs) qs a b = a:b: (zipWith (-) rr $ zipWith (*) qs rs)\n\n```\n\n\u4e00\u898b\u826f\u3055\u305d\u3046\u3067\u3059\u3057\u3001ghci \u306b\u8aad\u307e\u305b\u3066\u3082\u4f55\u3082\u6587\u53e5\u3092\u8a00\u308f\u308c\u306a\u3044\u306e\u3067\u578b\u3082\u5408\u3063\u3066\u307e\u3059\u304c\u3001\u8d70\u3089\u305b\u308b\u3068\u30eb\u30fc\u30d7\u306b\u306a\u308a\u307e\u3059\u3068\u6012\u3089\u308c\u307e\u3059\u3002\n\n```\n*Ffield> exGCD2 13 7\n(*** Exception: <<loop>>\n*Ffield> exGCD' 13 7\n([1,1,6],[13,7,6,1],[1,0,1,-1,7],[0,1,-1,2,-13])\n```\n\n\u6050\u3089\u304f\u3053\u306e\u9ad8\u968e\u95a2\u6570\u306e\u5f15\u6570\u306b\u7d50\u679c\u3068\u3057\u3066\u8fd4\u3057\u305f\u3044\u30ea\u30b9\u30c8\u81ea\u8eab\u304c\u3042\u3066\u304c\u308f\u308c\u3066\u308b\u305b\u3044\u3067\u3001\u5fc5\u305a\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u547c\u3070\u308c\u305f\u6bb5\u968e\u3067\u306f\u307e\u3060\u4e2d\u8eab\u304c\u6c7a\u307e\u3063\u3066\u306a\u3044\u306e\u3067\u3001\u3001\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\n\n## fold \u3067\u66f8\u304d\u76f4\u305b\u305d\u3046\u306a\u9ad8\u968e\u95a2\u6570takeBefore\n\u6700\u521dtakeUntil \u3068\u3044\u3046\u540d\u524d\u3067\u3057\u305f\u304c\u3069\u3063\u3061\u304c\u826f\u304b\u3063\u305f\u306e\u3067\u3057\u3087\u3046\uff1f\n\u3055\u3066\u304a\u304d\u3001\u306a\u3093\u3068\u306a\u304ffilter \u306b\u4f3c\u3066\u308b\u6c17\u304c\u3059\u308b\u306e\u3067\u7573\u307f\u8fbc\u3081\u305d\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\n### \u9ad8\u968e\u95a2\u6570\u3092\u4f7f\u3063\u305f\u8ffd\u8a18\n\u56f0\u3063\u305f\u3068\u304d\u306e[fold(r) \u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb](http://www.cs.nott.ac.uk/~pszgmh/fold.pdf)\u3092\u8aad\u3093\u3067\u305d\u306e\u307e\u307e\u66f8\u304d\u76f4\u3057\u3066\u307f\u307e\u3057\u305f\u3001\u57fa\u672c\u7684\u306bif then else \u3092\u66f8\u304d\u305f\u304f\u306f\u306a\u3044\u306e\u3067\u540c\u3058\u69cb\u9020\u3092\u305d\u306e\u307e\u307e\u6301\u3063\u3066\u304d\u307e\u3057\u305f\u304c\u53f3\u304b\u3089\u7573\u307f\u8fbc\u3093\u3067\u308b\u3053\u3068\u3092\u660e\u793a\u3067\u304d\u308b\u306e\u3067\u3053\u3061\u3089\u306e\u65b9\u304c\u6c17\u5206\u304c\u697d\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\n```lhs\n> takeUntil :: (a -> Bool) -> [a] -> [a]\n> takeUntil p = foldr func []\n>   where\n>     func x xs \n>       | p x = []\n>       | otherwise = x : xs\n```\n\n## \u5b89\u5168\u3068\u306f\u8a00\u3048\u306a\u3093\u304b\u3044\u3084\u306alast \u3068\u304b\n\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3067\u306a\u3093\u3068\u304b\u53d6\u308a\u51fa\u305b\u306a\u3044\u304b\u306a\uff1f\u3068\u3082\u8003\u3048\u307e\u3057\u305f\u304c\u3001\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u653e\u7f6e\u3057\u3066\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u5b89\u5168\u3068\u3044\u3046\u306e\u306f\u521d\u671f\u5024\u304c\u5fc5\u305a\u4e8c\u3064\u5165\u3063\u3066\u308b\u306e\u3067\u3001\u3053\u306e\u64cd\u4f5c\u306f\u5fc5\u305a\u4f55\u304b\u306e\u8981\u7d20\u306b\u30d2\u30c3\u30c8\u3059\u308b\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n\n# \u4f8b$Z_{11}$\n\u7d20\u657011 \u3092\u4f7f\u3063\u3066\u3061\u3087\u3063\u3068\u5b9f\u9a13\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u3053\u3053\u3067\u4f7f\u3063\u305f\u306e\u306f\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\n\n```lhs\n\n> exGCD' :: Integral n => n -> n -> ([n], [n], [n], [n])\n> exGCD' a b = (qs, rs, ss, ts)\n>   where\n>     qs = zipWith quot rs (tail rs)\n> --    rs = takeBefore (==0) r'\n>     rs = takeUntil (==0) r'\n>     r' = steps a b\n>     ss = steps 1 0\n>     ts = steps 0 1\n>     steps a b = rr\n>       where rr@(_:rs) = a:b: zipWith (-) rr (zipWith (*) qs rs)\n>         \n> takeUntil :: (a -> Bool) -> [a] -> [a]\n> takeUntil p = foldr func []\n>   where\n>     func x xs \n>       | p x = []\n>       | otherwise = x : xs\n\n```\n\n\u3055\u3066\u4ee5\u4e0b\u304c\u5b9f\u9a13\u3067\u3059\u3001\u307e\u305a\u306f$Z_{11}$ \u304c\u4f53\u306b\u306a\u308b\u304b\u3069\u3046\u304b\u3001\u3059\u306a\u308f\u3061\u7d20\u6570\u304b\u3069\u3046\u304b\u3067\u3059\u3002\n\u305d\u306e\u3042\u3068\u5c11\u3005\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30fc\u306e\u4e0a\u3067\u3044\u3058\u3063\u3066\u307f\u3066\u3001\u975e\u96f6\u5143\u306e\u9006\u5143\u3092\u8fd4\u3059\u3088\u3046\u306a\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\n```lhs\n\nExample Z_{11}\n\n  *Ffield> isField 11\n  True\n  *Ffield> map (exGcd 11) [0..10]\n  [(11,1,0),(1,0,1),(1,1,-5),(1,-1,4),(1,-1,3),(1,1,-2),(1,-1,2),(1,2,-3),(1,3,-4),(1,-4,5),(1,1,-1)]\n\n  *Ffield> map ((`mod` 11) . (\\(_,_,x)->x) . exGcd 11) [1..10] \n  [1,6,4,3,9,2,8,7,5,10]\n  *Ffield> zip [1..10] it\n  [(1,1),(2,6),(3,4),(4,3),(5,9),(6,2),(7,8),(8,7),(9,5),(10,10)]\n\n> inverses :: Int -> Maybe [(Int, Int)]\n> inverses n\n>   | isField n = Just lst\n>   | otherwise = Nothing\n>   where\n>     lst' = map ((`mod` n) . (\\(_,_,c)->c) . exGcd n) [1..(n-1)]\n>     lst = zip [1..] lst'\n\n  *Ffield> inverses 11\n  Just [(1,1),(2,6),(3,4),(4,3),(5,9),(6,2),(7,8),(8,7),(9,5),(10,10)]\n```\n"}