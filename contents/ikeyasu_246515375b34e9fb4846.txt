{"context": "\u3053\u306e\u8a18\u4e8b\u306fACCESS Advent Calendar 2016 23\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u3067\u3059\u304c\u3001ACCESS\u3068\u306e\u95a2\u4fc2\u306f\u7279\u306b\u306a\u304f\u3001\u79c1\u306e\u8da3\u5473\u306e\u7bc4\u56f2\u306e\u8a71\u3067\u3059 :)\nChainer\u3067\u3001\u30b3\u30fc\u30c9\u3092\u3056\u3063\u3068\u66f8\u3044\u305f\u5f8c\u3001GPU\u5bfe\u5fdc\u306b\u3057\u305f\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u306f\u826f\u304f\u3042\u308a\u307e\u3059\u3088\u306d\uff08\u591a\u5206\uff09\n\u305d\u3053\u3067\u3001GPU\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u30b3\u30fc\u30c9\u3092GPU\u5bfe\u5fdc\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\u77e5\u8b58\u304c\u307b\u307c\u7121\u3044\u72b6\u6cc1\u304b\u3089\u66f8\u304d\u59cb\u3081\u305f\u306e\u3067\u3001\u308f\u305f\u3057\u306e\u4f5c\u696d\u30e1\u30e2\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u4f55\u304b\u53c2\u8003\u307e\u3067\u306b\u3002\n\n\u3068\u308a\u3042\u3048\u305a cuda.cupy\n\u5143\u306e\u30b3\u30fc\u30c9\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3042\u308b\u3068\u3057\u307e\u3059\u3002\uff08\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3001\u306f\u3058\u3081\u3066\u306e\u6df1\u5c64\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 \u304b\u3089\u306e\u5f15\u7528\u3067\u3059\u3002\u3068\u3066\u3082\u5206\u304b\u308a\u3084\u3059\u3044\u672c\u306a\u306e\u3067\u30aa\u30b9\u30b9\u30e1\u3067\u3059\uff01\uff09\nimport numpy as np\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer import Variable, optimizers, Chain\n\n\nclass Model(Chain):\n    def __init__(self):\n        super(Model, self).__init__(\n            l1=L.Linear(2, 1),\n        )\n\n    def __call__(self, x):\n        h = F.sigmoid(self.l1(x))\n        return h\n\n\nmodel = Model()\noptimizer = optimizers.MomentumSGD(lr=0.01, momentum=0.9)\noptimizer.setup(model)\n\nx = Variable(np.array([[0, 0], [0, 1], [1, 0], [1, 1]], dtype=np.float32))\nt = Variable(np.array([[0], [1], [1], [1]], dtype=np.float32))\n\nfor i in range(0, 3000):\n    optimizer.zero_grads()\n    y = model(x)\n    loss = F.mean_squared_error(y, t)\n    loss.backward()\n    optimizer.update()\n\n    print(\"loss: \", loss.data)\n\nprint(y.data)\n\n\n\u3053\u308c\u3092\u3001GPU\u5bfe\u5fdc\u3057\u3066\u307f\u307e\u3059\u3002\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer import Variable, optimizers, Chain, cuda\n\n\nclass Model(Chain):\n    def __init__(self):\n        super(Model, self).__init__(\n            l1=L.Linear(2, 1),\n        )\n\n    def __call__(self, x):\n        h = F.sigmoid(self.l1(x))\n        return h\n\n\nmodel = Model()\noptimizer = optimizers.MomentumSGD(lr=0.01, momentum=0.9)\noptimizer.setup(model)\n\ngpu_device = 0\ncuda.get_device(gpu_device).use()\nmodel.to_gpu(gpu_device)\nxp = cuda.cupy\n\nx = Variable(xp.array([[0, 0], [0, 1], [1, 0], [1, 1]], dtype=xp.float32))\nt = Variable(xp.array([[0], [1], [1], [1]], dtype=xp.float32))\n\nfor i in range(0, 3000):\n    optimizer.zero_grads()\n    y = model(x)\n    loss = F.mean_squared_error(y, t)\n    loss.backward()\n    optimizer.update()\n\n    print(\"loss: \", loss.data)\n\nprint(y.data)\n\n\u3088\u3046\u306f\u3001np \u3092 cuda.cupy \u306b\u7f6e\u304d\u63db\u3048\u308b\u3060\u3051\u3002\n\u3042\u3068\u306f\u3001\u4ee5\u4e0b\u306e\u5c11\u3057\u306e\u304a\u307e\u3058\u306a\u3044\u3092\u66f8\u304f\u3060\u3051\u3067\u3059\u3002\ngpu_device = 0\ncuda.get_device(gpu_device).use()\nmodel.to_gpu(gpu_device)\nxp = cuda.cupy\n\n\n\u7c21\u5358\uff01\u306a\u306e\u304b\uff1f\n\u7c21\u5358\uff01\u3067\u3053\u306e\u8a18\u4e8b\u3092\u7d42\u308f\u308a\u3068\u3057\u305f\u3044\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u304c\u7c21\u5358\u306a\u306e\u306f\u3001GPU\u5074\u306b\u9001\u3063\u305f\u884c\u5217\u3092\u3053\u3061\u3089\u306b\u623b\u3059\u5fc5\u8981\u304c\u7121\u3044\u305f\u3081\u3067\u3059\u3002\u3064\u307e\u308a\u3001to_gpu \u306f\u3042\u308a\u307e\u3059\u304c\u3001to_cpu \u306f\u3053\u3053\u3067\u306f\u4f7f\u3063\u3066\u5c45\u307e\u305b\u3093\u3002\n\u3068\u3044\u3063\u3066\u3082\u3001\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u306e\u6a5f\u68b0\u5b66\u7fd2\u3067\u3042\u308c\u3070\u3001\u5b66\u7fd2\u6642\u306f\u3001to_gpu \u3060\u3051\u3067\u6e08\u3080\u4e8b\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002to_cpu \u304c\u5fc5\u8981\u306a\u306e\u306f\u3001\u5b66\u7fd2\u3057\u305f\u7d50\u679c\u3092\u3068\u3063\u3066\u304d\u3066\u3001\u6b21\u306e\u5b66\u7fd2\u306b\u751f\u304b\u3059\u6a5f\u68b0\u5b66\u7fd2\u3001\u3001\u5f37\u5316\u5b66\u7fd2\u306e Experimental Pool \u3068\u304bAuto encoder\u3068\u304b\u3067\u3057\u3087\u3046\u304b\u3002\uff08\u3053\u306e\u3042\u305f\u308a\u52c9\u5f37\u4e2d\u3067\u3042\u307e\u308a\u81ea\u4fe1\u3042\u308a\u307e\u305b\u3093\u3002\u3002\uff09\n\n\u5f37\u5316\u5b66\u7fd2\u3092GPU\u5316\n\u3068\u3044\u308f\u3051\u3067\u3001\u5f37\u5316\u5b66\u7fd2\u3092gpu\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\u306a\u308b\u3079\u304f\u30b7\u30f3\u30d7\u30eb\u306a\u3082\u306e\u304c\u826f\u3044\u306e\u3067\u3001\u3053\u3061\u3089\u3092\u4f7f\u308f\u305b\u3066\u3082\u3089\u3044\u307e\u3057\u305f\u3002 \nhttps://github.com/dsanno/deep-learning-study/blob/master/src/open_ai_gym/train.py\n\n\u3068\u308a\u3042\u3048\u305a\u3001np->xp\n\u307e\u305a\u3001\u5358\u7d14\u306b np -> xp \u3057\u3066\u307f\u307e\u3059\u3002\nhttps://gist.github.com/ikeyasu/8c973ebde7cbd65301052d2226d8060a/646740c8d5afb811e815c4259205734053aac2b9\n\u3053\u3093\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\nTraceback (most recent call last):\n  File \"train.py\", line 208, in <module>\n    main()\n  File \"train.py\", line 196, in main\n    update(agent, target_agent, optimizer, ex_pool, batch_size)\n  File \"train.py\", line 122, in update\n    indices = xp.random.permutation(available_size)[:batch_size]\nAttributeError: 'module' object has no attribute 'permutation'\n\ncupy \u306f\u3001permutation \u3092\u6301\u3063\u3066\u306a\u3044\u3088\u3046\u3067\u3059\u3002\ncupy\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u3066\u3082\u3001\u78ba\u304b\u306b\u3042\u308a\u307e\u305b\u3093\u3002\n\u3053\u308c\u306f\u3001GPU\u5074\u3067\u3084\u3089\u306a\u304f\u3066\u3082\u3044\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u7d20\u76f4\u306b\u3001np\u3067\u66f8\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n    indices = np.random.permutation(available_size)[:batch_size]\n\n\ndtype\u304c\u5fc5\u8981\uff1f\n\u6b21\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\uff08\u30bf\u30a4\u30df\u30f3\u30b0\u6b21\u7b2c\u3067\u5225\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3053\u3068\u3082\u3042\u308b\u69d8\u3067\u3059\uff09\nTraceback (most recent call last):\n  File \"train.py\", line 208, in <module>\n    main()\n  File \"train.py\", line 196, in main\n    update(agent, target_agent, optimizer, ex_pool, batch_size)\n  File \"train.py\", line 125, in update\n    state = xp.asarray(state)\n  File \"/usr/local/lib/python2.7/site-packages/cupy/creation/from_data.py\", line 47, in asarray\n    return cupy.array(a, dtype=dtype, copy=False)\n  File \"/usr/local/lib/python2.7/site-packages/cupy/creation/from_data.py\", line 27, in array\n    return core.array(obj, dtype, copy, ndmin)\n  File \"cupy/core/core.pyx\", line 1538, in cupy.core.core.array (cupy/core/core.cpp:53535)\n  File \"cupy/core/core.pyx\", line 1554, in cupy.core.core.array (cupy/core/core.cpp:53160)\nValueError: Unsupported dtype object\n\n\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u7b87\u6240\u306b\u3001dtype\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u6307\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n    state = xp.asarray(state, dtype=xp.float32)\n    action = xp.asarray(action, dtype=xp.int32)\n    reward = xp.asarray(reward, dtype=xp.float32)\n    next_state = xp.asarray(next_state, dtype=xp.float32)\n    has_next = xp.asarray(has_next, dtype=xp.float32)\n\n\nAdvanced indexing\n\u6b21\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\nTraceback (most recent call last):\n  File \"train.py\", line 208, in <module>\n    main()\n  File \"train.py\", line 196, in main\n    update(agent, target_agent, optimizer, ex_pool, batch_size)\n  File \"train.py\", line 133, in update\n    y = reward + agent.gamma * has_next * target_agent(next_state).data[(six.moves.range(len(next_action))), next_action]\n  File \"cupy/core/core.pyx\", line 1027, in cupy.core.core.ndarray.__getitem__ (cupy/core/core.cpp:22884)\nValueError: Advanced indexing is not supported\n\nAdvaned indexing\u304c\u672a\u30b5\u30dd\u30fc\u30c8\u306e\u3088\u3046\u3067\u3059\u3002\n\u3053\u308c\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306e\u90e8\u5206\u3067\u3059\u3002\n    y = reward + agent.gamma * has_next * target_agent(next_state).data[(six.moves.range(len(next_action))), next_action]\n\ntarget_agent(next_state).data[(six.moves.range(len(next_action))), next_action] \u304c\u554f\u984c\u306a\u306e\u3067\u3059\u3002Advanced indexing\u306e\u6307\u5b9a\u3067\u5206\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001for\u3092\u4f7f\u3063\u305f\u66f8\u304d\u65b9\u306b\u5909\u3048\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n[a[i][next_action[i]] for i in six.moves.range(len(next_action))]\n\n\u3053\u308c\u3092 CuPy \u306b\u3084\u3089\u305b\u308b\u306e\u306f\u96e3\u3057\u3044\u305f\u3081\u3001CUDA\u306e\u30b3\u30fc\u30c9\u3092\u76f4\u63a5\u66f8\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\nchainer.cuda.elementwise\u3092\u4f7f\u3063\u3066GPU\u3067\u51e6\u7406\u3092\u884c\u3046\nhttp://qiita.com/dsanno/items/a68d5aaae0a542c0f388\n\u540c\u3058\u51e6\u7406\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u3002\n    target_data = cuda.elementwise(\n        'raw T x, S t',\n        'T y',\n        'int ind[] = {i, t}; y = x[ind];',\n        'action_select_fwd',\n    )(target_data, next_action)\n\n\u3053\u3053\u307e\u3067\u306e\u4fee\u6b63\u3067\u3001\u4e00\u901a\u308a\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nhttps://gist.github.com/ikeyasu/8c973ebde7cbd65301052d2226d8060a/c4bf41abd590e0c6ee2b5d74c1296aefcbfceef5\n\u4e00\u3064\u76ee\u304b\u3089\u306e\u5dee\u5206\u306f\u4ee5\u4e0b\u3067\u898b\u308c\u307e\u3059\u3002\nhttps://gist.github.com/ikeyasu/8c973ebde7cbd65301052d2226d8060a/revisions#diff-e44f4a60e89e820dde9bb27afa634965\n\n\u9045\u3044\uff01\uff01\n\u3055\u3066\u3001\u3053\u308c\u3067\u52d5\u304b\u3057\u3066\u307f\u308b\u3068\u3001\u304b\u306a\u308a\u9045\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u3053\u308c\u306f\u3001\u3053\u306e\u3042\u305f\u308a\u3067\u3001CPU\u4e0a\u306eArray\u304b\u3089GPU\u3078\u306e\u30b3\u30d4\u30fc\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\nxp.take\u3092\u4f7f\u3046\u3088\u3046\u306b\u5909\u3048\u307e\u3059\u3002ExperimentalPool\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n    def take(self, indices):\n        if self.pos < self.size:\n            offset = 0\n        else:\n            offset = self.pos % self.size - self.size\n        indices += offset\n        return (xp.take(self.states, indices, axis=0), xp.take(self.actions, indices, axis=0),\n                xp.take(self.rewards, indices, axis=0), xp.take(self.states, indices + 1, axis=0),\n                xp.take(self.nexts, indices, axis=0))\n\n\u5168\u4f53\u306f\u3053\u3061\u3089\u3067\u3059\u3002\nhttps://gist.github.com/ikeyasu/8c973ebde7cbd65301052d2226d8060a/86d6dabae832a9023d5274528028f33b5e09ddfc\n\u5dee\u5206\u306f\u3053\u3061\u3089\nhttps://gist.github.com/ikeyasu/8c973ebde7cbd65301052d2226d8060a/revisions#diff-e44f4a60e89e820dde9bb27afa634965\n\n\u307e\u3060\u9045\u3044\u3088\uff01\n\u3053\u308c\u3067\u5c11\u3057\u65e9\u304f\u306a\u3063\u305f\u3088\u3046\u3067\u3059\u304c\u3001CPU\u3068\u6bd4\u8f03\u3057\u3066\u3001\u7279\u306b\u65e9\u304f\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u3082\u3068\u3082\u3068\u8a08\u7b97\u91cf\u304c\u591a\u304f\u306a\u3044\u30b5\u30f3\u30d7\u30eb\u306a\u306e\u3067\u3001GPU\u306e\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306e\u65b9\u304c\u591a\u3044\u306e\u304b\u3082\n\u30c7\u30fc\u30bf\u91cf\u306f\u5c11\u306a\u304f\u3066\u3082\u3001CPU\u3068GPU\u3092\u884c\u304d\u6765\u3059\u308b\u3068\u3053\u308d\u304c\u6b8b\u3063\u3066\u3044\u308b\u306e\u3067\u305d\u3053\u304c\u60aa\u3044\u306e\u304b\uff1f\nGPU\u306e\u6027\u80fd\u304c\u60aa\u3044\u306e\u304b\uff1f\n\n\u7b49\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u304c\u3001\u305d\u3082\u305d\u3082\u8a08\u7b97\u91cf\u304c\u5c11\u306a\u3044\u306e\u3067\u3001\u8a08\u7b97\u91cf\u304c\u5927\u304d\u3044\u30b5\u30f3\u30d7\u30eb\u3067\u6b21\u306f\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\uff08\u5b9f\u306f\u3001\u65e2\u306bCNN\u3092\u4f7f\u3063\u305f\u5f37\u5316\u5b66\u7fd2\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u8a66\u3057\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u307e\u3060\u65e9\u304f\u306a\u3063\u3066\u304a\u3089\u305a\u3001Advent Calendar\u306b\u9593\u306b\u5408\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3002\uff09\n\n\u6b21\u306f\n@pankona \u3055\u3093\u3067\u3059\u3002\uff08\u660e\u65e5\u306f\u3082\u3046\u3001\u30af\u30ea\u30b9\u30de\u30b9\u30a4\u30d6\u3067\u3059\u306d\uff09\n\u3053\u306e\u8a18\u4e8b\u306f[ACCESS Advent Calendar 2016](http://qiita.com/advent-calendar/2016/access) 23\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u3067\u3059\u304c\u3001ACCESS\u3068\u306e\u95a2\u4fc2\u306f\u7279\u306b\u306a\u304f\u3001\u79c1\u306e\u8da3\u5473\u306e\u7bc4\u56f2\u306e\u8a71\u3067\u3059 :)\n\nChainer\u3067\u3001\u30b3\u30fc\u30c9\u3092\u3056\u3063\u3068\u66f8\u3044\u305f\u5f8c\u3001GPU\u5bfe\u5fdc\u306b\u3057\u305f\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u306f\u826f\u304f\u3042\u308a\u307e\u3059\u3088\u306d\uff08\u591a\u5206\uff09\n\u305d\u3053\u3067\u3001GPU\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u30b3\u30fc\u30c9\u3092GPU\u5bfe\u5fdc\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u77e5\u8b58\u304c\u307b\u307c\u7121\u3044\u72b6\u6cc1\u304b\u3089\u66f8\u304d\u59cb\u3081\u305f\u306e\u3067\u3001\u308f\u305f\u3057\u306e\u4f5c\u696d\u30e1\u30e2\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u4f55\u304b\u53c2\u8003\u307e\u3067\u306b\u3002\n\n\u3068\u308a\u3042\u3048\u305a cuda.cupy\n================\n\n\u5143\u306e\u30b3\u30fc\u30c9\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3042\u308b\u3068\u3057\u307e\u3059\u3002\uff08\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3001[\u306f\u3058\u3081\u3066\u306e\u6df1\u5c64\u5b66\u7fd2\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0](https://www.amazon.co.jp/dp/4774185345) \u304b\u3089\u306e\u5f15\u7528\u3067\u3059\u3002\u3068\u3066\u3082\u5206\u304b\u308a\u3084\u3059\u3044\u672c\u306a\u306e\u3067\u30aa\u30b9\u30b9\u30e1\u3067\u3059\uff01\uff09\n\n```python\nimport numpy as np\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer import Variable, optimizers, Chain\n\n\nclass Model(Chain):\n    def __init__(self):\n        super(Model, self).__init__(\n            l1=L.Linear(2, 1),\n        )\n\n    def __call__(self, x):\n        h = F.sigmoid(self.l1(x))\n        return h\n\n\nmodel = Model()\noptimizer = optimizers.MomentumSGD(lr=0.01, momentum=0.9)\noptimizer.setup(model)\n\nx = Variable(np.array([[0, 0], [0, 1], [1, 0], [1, 1]], dtype=np.float32))\nt = Variable(np.array([[0], [1], [1], [1]], dtype=np.float32))\n\nfor i in range(0, 3000):\n    optimizer.zero_grads()\n    y = model(x)\n    loss = F.mean_squared_error(y, t)\n    loss.backward()\n    optimizer.update()\n\n    print(\"loss: \", loss.data)\n\nprint(y.data)\n\n```\n\n\u3053\u308c\u3092\u3001GPU\u5bfe\u5fdc\u3057\u3066\u307f\u307e\u3059\u3002\n\n\n```python\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer import Variable, optimizers, Chain, cuda\n\n\nclass Model(Chain):\n    def __init__(self):\n        super(Model, self).__init__(\n            l1=L.Linear(2, 1),\n        )\n\n    def __call__(self, x):\n        h = F.sigmoid(self.l1(x))\n        return h\n\n\nmodel = Model()\noptimizer = optimizers.MomentumSGD(lr=0.01, momentum=0.9)\noptimizer.setup(model)\n\ngpu_device = 0\ncuda.get_device(gpu_device).use()\nmodel.to_gpu(gpu_device)\nxp = cuda.cupy\n\nx = Variable(xp.array([[0, 0], [0, 1], [1, 0], [1, 1]], dtype=xp.float32))\nt = Variable(xp.array([[0], [1], [1], [1]], dtype=xp.float32))\n\nfor i in range(0, 3000):\n    optimizer.zero_grads()\n    y = model(x)\n    loss = F.mean_squared_error(y, t)\n    loss.backward()\n    optimizer.update()\n\n    print(\"loss: \", loss.data)\n\nprint(y.data)\n```\n\n\u3088\u3046\u306f\u3001np \u3092 cuda.cupy \u306b\u7f6e\u304d\u63db\u3048\u308b\u3060\u3051\u3002\n\u3042\u3068\u306f\u3001\u4ee5\u4e0b\u306e\u5c11\u3057\u306e\u304a\u307e\u3058\u306a\u3044\u3092\u66f8\u304f\u3060\u3051\u3067\u3059\u3002\n\n```python\ngpu_device = 0\ncuda.get_device(gpu_device).use()\nmodel.to_gpu(gpu_device)\nxp = cuda.cupy\n```\n\n\u7c21\u5358\uff01\u306a\u306e\u304b\uff1f\n==========\n\n\u7c21\u5358\uff01\u3067\u3053\u306e\u8a18\u4e8b\u3092\u7d42\u308f\u308a\u3068\u3057\u305f\u3044\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u304c\u7c21\u5358\u306a\u306e\u306f\u3001GPU\u5074\u306b\u9001\u3063\u305f\u884c\u5217\u3092\u3053\u3061\u3089\u306b\u623b\u3059\u5fc5\u8981\u304c\u7121\u3044\u305f\u3081\u3067\u3059\u3002\u3064\u307e\u308a\u3001to_gpu \u306f\u3042\u308a\u307e\u3059\u304c\u3001to_cpu \u306f\u3053\u3053\u3067\u306f\u4f7f\u3063\u3066\u5c45\u307e\u305b\u3093\u3002\n\n\u3068\u3044\u3063\u3066\u3082\u3001\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u306e\u6a5f\u68b0\u5b66\u7fd2\u3067\u3042\u308c\u3070\u3001\u5b66\u7fd2\u6642\u306f\u3001to_gpu \u3060\u3051\u3067\u6e08\u3080\u4e8b\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002to_cpu \u304c\u5fc5\u8981\u306a\u306e\u306f\u3001\u5b66\u7fd2\u3057\u305f\u7d50\u679c\u3092\u3068\u3063\u3066\u304d\u3066\u3001\u6b21\u306e\u5b66\u7fd2\u306b\u751f\u304b\u3059\u6a5f\u68b0\u5b66\u7fd2\u3001\u3001\u5f37\u5316\u5b66\u7fd2\u306e Experimental Pool \u3068\u304bAuto encoder\u3068\u304b\u3067\u3057\u3087\u3046\u304b\u3002\uff08\u3053\u306e\u3042\u305f\u308a\u52c9\u5f37\u4e2d\u3067\u3042\u307e\u308a\u81ea\u4fe1\u3042\u308a\u307e\u305b\u3093\u3002\u3002\uff09\n\n\u5f37\u5316\u5b66\u7fd2\u3092GPU\u5316\n==============\n\n\u3068\u3044\u308f\u3051\u3067\u3001\u5f37\u5316\u5b66\u7fd2\u3092gpu\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\u306a\u308b\u3079\u304f\u30b7\u30f3\u30d7\u30eb\u306a\u3082\u306e\u304c\u826f\u3044\u306e\u3067\u3001\u3053\u3061\u3089\u3092\u4f7f\u308f\u305b\u3066\u3082\u3089\u3044\u307e\u3057\u305f\u3002 \n\nhttps://github.com/dsanno/deep-learning-study/blob/master/src/open_ai_gym/train.py\n\n\u3068\u308a\u3042\u3048\u305a\u3001np->xp\n--------------\n\n\u307e\u305a\u3001\u5358\u7d14\u306b np -> xp \u3057\u3066\u307f\u307e\u3059\u3002\n\nhttps://gist.github.com/ikeyasu/8c973ebde7cbd65301052d2226d8060a/646740c8d5afb811e815c4259205734053aac2b9\n\n\u3053\u3093\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\n\n```\nTraceback (most recent call last):\n  File \"train.py\", line 208, in <module>\n    main()\n  File \"train.py\", line 196, in main\n    update(agent, target_agent, optimizer, ex_pool, batch_size)\n  File \"train.py\", line 122, in update\n    indices = xp.random.permutation(available_size)[:batch_size]\nAttributeError: 'module' object has no attribute 'permutation'\n```\n\ncupy \u306f\u3001[permutation](https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.permutation.html) \u3092\u6301\u3063\u3066\u306a\u3044\u3088\u3046\u3067\u3059\u3002\ncupy\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u3066\u3082\u3001[\u78ba\u304b\u306b\u3042\u308a\u307e\u305b\u3093](http://docs.chainer.org/en/stable/cupy-reference/random.html)\u3002\n\u3053\u308c\u306f\u3001GPU\u5074\u3067\u3084\u3089\u306a\u304f\u3066\u3082\u3044\u3044\u51e6\u7406\u306a\u306e\u3067\u3001\u7d20\u76f4\u306b\u3001np\u3067\u66f8\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n```\n    indices = np.random.permutation(available_size)[:batch_size]\n```\n\ndtype\u304c\u5fc5\u8981\uff1f\n-----------\n\n\u6b21\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\uff08\u30bf\u30a4\u30df\u30f3\u30b0\u6b21\u7b2c\u3067\u5225\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3053\u3068\u3082\u3042\u308b\u69d8\u3067\u3059\uff09\n\n```\nTraceback (most recent call last):\n  File \"train.py\", line 208, in <module>\n    main()\n  File \"train.py\", line 196, in main\n    update(agent, target_agent, optimizer, ex_pool, batch_size)\n  File \"train.py\", line 125, in update\n    state = xp.asarray(state)\n  File \"/usr/local/lib/python2.7/site-packages/cupy/creation/from_data.py\", line 47, in asarray\n    return cupy.array(a, dtype=dtype, copy=False)\n  File \"/usr/local/lib/python2.7/site-packages/cupy/creation/from_data.py\", line 27, in array\n    return core.array(obj, dtype, copy, ndmin)\n  File \"cupy/core/core.pyx\", line 1538, in cupy.core.core.array (cupy/core/core.cpp:53535)\n  File \"cupy/core/core.pyx\", line 1554, in cupy.core.core.array (cupy/core/core.cpp:53160)\nValueError: Unsupported dtype object\n```\n\n\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u7b87\u6240\u306b\u3001dtype\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u6307\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```python\n    state = xp.asarray(state, dtype=xp.float32)\n    action = xp.asarray(action, dtype=xp.int32)\n    reward = xp.asarray(reward, dtype=xp.float32)\n    next_state = xp.asarray(next_state, dtype=xp.float32)\n    has_next = xp.asarray(has_next, dtype=xp.float32)\n```\n\nAdvanced indexing\n----------------\n\n\u6b21\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\n\n```\nTraceback (most recent call last):\n  File \"train.py\", line 208, in <module>\n    main()\n  File \"train.py\", line 196, in main\n    update(agent, target_agent, optimizer, ex_pool, batch_size)\n  File \"train.py\", line 133, in update\n    y = reward + agent.gamma * has_next * target_agent(next_state).data[(six.moves.range(len(next_action))), next_action]\n  File \"cupy/core/core.pyx\", line 1027, in cupy.core.core.ndarray.__getitem__ (cupy/core/core.cpp:22884)\nValueError: Advanced indexing is not supported\n```\n\n[Advaned indexing](https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#advanced-indexing)\u304c\u672a\u30b5\u30dd\u30fc\u30c8\u306e\u3088\u3046\u3067\u3059\u3002\n\n\u3053\u308c\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306e\u90e8\u5206\u3067\u3059\u3002\n\n```python\n    y = reward + agent.gamma * has_next * target_agent(next_state).data[(six.moves.range(len(next_action))), next_action]\n```\n\n`target_agent(next_state).data[(six.moves.range(len(next_action))), next_action]` \u304c\u554f\u984c\u306a\u306e\u3067\u3059\u3002Advanced indexing\u306e\u6307\u5b9a\u3067\u5206\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001for\u3092\u4f7f\u3063\u305f\u66f8\u304d\u65b9\u306b\u5909\u3048\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\n```python\n[a[i][next_action[i]] for i in six.moves.range(len(next_action))]\n```\n\n\u3053\u308c\u3092 CuPy \u306b\u3084\u3089\u305b\u308b\u306e\u306f\u96e3\u3057\u3044\u305f\u3081\u3001CUDA\u306e\u30b3\u30fc\u30c9\u3092\u76f4\u63a5\u66f8\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\nchainer.cuda.elementwise\u3092\u4f7f\u3063\u3066GPU\u3067\u51e6\u7406\u3092\u884c\u3046\nhttp://qiita.com/dsanno/items/a68d5aaae0a542c0f388\n\n\u540c\u3058\u51e6\u7406\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u3002\n\n```python\n    target_data = cuda.elementwise(\n        'raw T x, S t',\n        'T y',\n        'int ind[] = {i, t}; y = x[ind];',\n        'action_select_fwd',\n    )(target_data, next_action)\n```\n\n\u3053\u3053\u307e\u3067\u306e\u4fee\u6b63\u3067\u3001\u4e00\u901a\u308a\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nhttps://gist.github.com/ikeyasu/8c973ebde7cbd65301052d2226d8060a/c4bf41abd590e0c6ee2b5d74c1296aefcbfceef5\n\n\u4e00\u3064\u76ee\u304b\u3089\u306e\u5dee\u5206\u306f\u4ee5\u4e0b\u3067\u898b\u308c\u307e\u3059\u3002\n\nhttps://gist.github.com/ikeyasu/8c973ebde7cbd65301052d2226d8060a/revisions#diff-e44f4a60e89e820dde9bb27afa634965\n\n\u9045\u3044\uff01\uff01\n=====\n\n\u3055\u3066\u3001\u3053\u308c\u3067\u52d5\u304b\u3057\u3066\u307f\u308b\u3068\u3001\u304b\u306a\u308a\u9045\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u3053\u308c\u306f\u3001[\u3053\u306e\u3042\u305f\u308a](https://gist.github.com/ikeyasu/8c973ebde7cbd65301052d2226d8060a/c4bf41abd590e0c6ee2b5d74c1296aefcbfceef5#file-train-py-L122)\u3067\u3001CPU\u4e0a\u306eArray\u304b\u3089GPU\u3078\u306e\u30b3\u30d4\u30fc\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\nxp.take\u3092\u4f7f\u3046\u3088\u3046\u306b\u5909\u3048\u307e\u3059\u3002ExperimentalPool\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```python\n    def take(self, indices):\n        if self.pos < self.size:\n            offset = 0\n        else:\n            offset = self.pos % self.size - self.size\n        indices += offset\n        return (xp.take(self.states, indices, axis=0), xp.take(self.actions, indices, axis=0),\n                xp.take(self.rewards, indices, axis=0), xp.take(self.states, indices + 1, axis=0),\n                xp.take(self.nexts, indices, axis=0))\n```\n\n\u5168\u4f53\u306f\u3053\u3061\u3089\u3067\u3059\u3002\nhttps://gist.github.com/ikeyasu/8c973ebde7cbd65301052d2226d8060a/86d6dabae832a9023d5274528028f33b5e09ddfc\n\n\u5dee\u5206\u306f\u3053\u3061\u3089\nhttps://gist.github.com/ikeyasu/8c973ebde7cbd65301052d2226d8060a/revisions#diff-e44f4a60e89e820dde9bb27afa634965\n\n\u307e\u3060\u9045\u3044\u3088\uff01\n=========\n\n\u3053\u308c\u3067\u5c11\u3057\u65e9\u304f\u306a\u3063\u305f\u3088\u3046\u3067\u3059\u304c\u3001CPU\u3068\u6bd4\u8f03\u3057\u3066\u3001\u7279\u306b\u65e9\u304f\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n* \u3082\u3068\u3082\u3068\u8a08\u7b97\u91cf\u304c\u591a\u304f\u306a\u3044\u30b5\u30f3\u30d7\u30eb\u306a\u306e\u3067\u3001GPU\u306e\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306e\u65b9\u304c\u591a\u3044\u306e\u304b\u3082\n* \u30c7\u30fc\u30bf\u91cf\u306f\u5c11\u306a\u304f\u3066\u3082\u3001CPU\u3068GPU\u3092\u884c\u304d\u6765\u3059\u308b\u3068\u3053\u308d\u304c\u6b8b\u3063\u3066\u3044\u308b\u306e\u3067\u305d\u3053\u304c\u60aa\u3044\u306e\u304b\uff1f\n* GPU\u306e\u6027\u80fd\u304c\u60aa\u3044\u306e\u304b\uff1f\n\n\u7b49\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u304c\u3001\u305d\u3082\u305d\u3082\u8a08\u7b97\u91cf\u304c\u5c11\u306a\u3044\u306e\u3067\u3001\u8a08\u7b97\u91cf\u304c\u5927\u304d\u3044\u30b5\u30f3\u30d7\u30eb\u3067\u6b21\u306f\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\uff08\u5b9f\u306f\u3001\u65e2\u306bCNN\u3092\u4f7f\u3063\u305f\u5f37\u5316\u5b66\u7fd2\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u8a66\u3057\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u307e\u3060\u65e9\u304f\u306a\u3063\u3066\u304a\u3089\u305a\u3001Advent Calendar\u306b\u9593\u306b\u5408\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3002\uff09\n\n\u6b21\u306f\n===\n\n@pankona \u3055\u3093\u3067\u3059\u3002\uff08\u660e\u65e5\u306f\u3082\u3046\u3001\u30af\u30ea\u30b9\u30de\u30b9\u30a4\u30d6\u3067\u3059\u306d\uff09\n", "tags": ["Chainer"]}