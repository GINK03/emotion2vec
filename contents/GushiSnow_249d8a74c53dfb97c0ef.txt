{"context": " More than 1 year has passed since last update.\n\n\u306a\u305c\u3084\u308b\u304b\nChainer1.5\u304b\u3089\u9ad8\u901f\u5316\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u9ad8\u901f\u5316\u306e\u4e00\u56e0\u3068\u3057\u3066cython\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u6319\u3052\u3089\u308c\u3066\u3044\u305f\u306e\u3067\u3001example\u3092cython\u3067\u66f8\u304d\u63db\u3048\u305f\u3089\u3001\u3069\u308c\u3060\u3051\u65e9\u304f\u306a\u308b\u306e\u304b\u5358\u7d14\u306a\u7591\u554f\u304c\u6e67\u3044\u305f\u306e\u3067\u3001\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\nPC\u306e\u30b9\u30da\u30c3\u30af\nOS:OS X Yosemite\nCPU: 2.7GHz Intel Core i5\nMemory:8GHz DDR3 \n\n\u6761\u4ef6\nexample\u306eMnist\u3092\u4f7f\u7528\n\u5b66\u7fd2\u56de\u6570\uff1a20\u56de\n\u30c7\u30fc\u30bf\u306f\u4e88\u3081\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u305f\u72b6\u614b\n\n\u53ef\u8996\u5316\n\u30d7\u30ed\u30d5\u30a1\u30a4\u30e9\u306b\u3088\u308b\u53ef\u8996\u5316\npycallgraph\u3092\u4f7f\u7528\nhttp://pycallgraph.slowchop.com\ngraphivz\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nhttp://www.graphviz.org/Download_macos.php\nX11\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb(Yosemite\u306e\u5834\u5408)\nhttp://www.xquartz.org/\nfailed with error code 256\u304c\u51fa\u305f\u5834\u5408\nhttps://github.com/gak/pycallgraph/issues/100\npycallgraph\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\n python pycallgraph graphviz -- ./\u30d5\u30a1\u30a4\u30eb\u540d.py\n\n\n\u3084\u308d\u3046\u3068\u601d\u3046\u3053\u3068\n\uff11\uff1a\u901a\u5e38\u51e6\u7406\u306e\u53ef\u8996\u5316\u3001\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\n\uff12\uff1a\u5358\u7d14\u306acython\u5316\n\uff13\uff1acdef\u306b\u3088\u308b\u9759\u7684\u306a\u578b\u8a2d\u5b9a\n\uff14\uff1a\u5916\u90e8\u30e2\u30b8\u30e5\u30fc\u30eb\u306ecython\u5316\n\n\u521d\u671f\u306e\u72b6\u614b\n\n\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3068\u3069\u306e\u90e8\u5206\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u304b\u3092\u628a\u63e1\u3067\u304d\u307e\u3059\u3002\ntrain_mnist.Train_Mnist.train\n951\u79d2\u304b\u304b\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\u901a\u5e38\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u7d50\u679c\u304c\u4e0b\u8a18\u3067\u3059\u3002\nncalls: \u547c\u3073\u51fa\u3057\u56de\u6570\ntottime: \u3053\u306e\u95a2\u6570\u304c\u6d88\u8cbb\u3057\u305f\u6642\u9593\u306e\u5408\u8a08\npercall: tottime \u3092 ncalls \u3067\u5272\u3063\u305f\u5024 \ncumtime: \u4e0b\u4f4d\u306e\u95a2\u6570\u3092\u542b\u3080\u3053\u306e\u95a2\u6570\u306e (\u5b9f\u884c\u958b\u59cb\u304b\u3089\u7d42\u4e86\u307e\u3067\u306e) \u6d88\u8cbb\u6642\u9593\u306e\u5408\u8a08\u3002\u3053\u306e\u9805\u76ee\u306f\u518d\u5e30\u7684\u306a\u95a2\u6570\u306b\u304a\u3044\u3066\u3082\u6b63\u78ba\u306b\u8a08\u6e2c\u3055\u308c\u307e\u3059\u3002 \npercall: cumtime \u3092\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306a\u547c\u3073\u51fa\u3057\u56de\u6570\u3067\u5272\u3063\u305f\u5024\n\u4eca\u56de\u306fcython\u306e\u90fd\u5408\u4e0a\u3001\u30b3\u30fc\u30c9\u3092\u5909\u3048\u3066\u3044\u308b\u306e\u3067\u4e0a\u8a18\u306e\u51e6\u7406\u6642\u9593\u3068\u7570\u306a\u308a\u307e\u3059\u3002\u672c\u5f53\u306fcython\u3067pycallgraph\u3092\u4f7f\u7528\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u7b46\u8005\u306e\u77e5\u8b58\u4e0d\u8db3\u3067\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u4f7f\u7528\u65b9\u6cd5\u77e5\u3063\u3066\u3044\u308b\u4eba\u3044\u305f\u3089\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff08\u901a\u5e38\u306e\u4f7f\u7528\u65b9\u6cd5\u3060\u3068cython\u90e8\u5206\u306e\u51e6\u7406\u304c\u8f09\u308a\u307e\u305b\u3093\uff09\n755.154\u79d2\u3067\u7d42\u4e86\u3057\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u884c\u65b9\u6cd5\npython -m cProfile\n\nProfile.prof\n\n         37494628 function calls (35068627 primitive calls) in 755.154 seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    72000  448.089    0.006  448.651    0.006 adam.py:27(update_one_cpu)\n   114000  187.057    0.002  187.057    0.002 {method 'dot' of 'numpy.ndarray' objects}\n   216000   31.576    0.000   31.576    0.000 {method 'fill' of 'numpy.ndarray' objects}\n    12000   23.122    0.002  163.601    0.014 variable.py:216(backward)\n\n2:8\u306e\u6cd5\u5247\u306b\u57fa\u3065\u3044\u3066\u3001\u3082\u3063\u3068\u3082\u51e6\u7406\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u90e8\u5206\u306b\u7740\u76ee\u3057\u307e\u3059\u3002\nadam.py\u304c\u307b\u307c\u5927\u534a\u306e\u51e6\u7406\u6642\u9593\u3092\u3068\u3063\u3066\u304a\u308a\u3001numpy\u306e\u884c\u5217\u6f14\u7b97\u304c\u7d9a\u3044\u3066\u51e6\u7406\u6642\u9593\u3092\u5272\u3044\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\ncython\ncython\u306b\u304a\u3044\u3066\u3082\u30b0\u30e9\u30d5\u5316\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u7b46\u8005\u306e\u77e5\u8b58\u304c\u8db3\u308a\u305a\u3001cython\u306e\u51e6\u7406\u90e8\u5206\u3060\u3051\u30b0\u30e9\u30d5\u5316\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u3057\u307e\u3057\u305f\u3002\n\u7d50\u679c\u306f800\u79d2\u3068\u9006\u306b\u9045\u304f\u306a\u3063\u3066\u3044\u307e\u3059\nProfile.prof\n\n         37466504 function calls (35040503 primitive calls) in 800.453 seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    72000  473.638    0.007  474.181    0.007 adam.py:27(update_one_cpu)\n   114000  199.589    0.002  199.589    0.002 {method 'dot' of 'numpy.ndarray' objects}\n   216000   33.706    0.000   33.706    0.000 {method 'fill' of 'numpy.ndarray' objects}\n    12000   24.754    0.002  173.816    0.014 variable.py:216(backward)\n    28000    9.944    0.000   10.392    0.000 \n\nadam.py\u3068variable.py\u306e\u51e6\u7406\u90e8\u5206\u304ccython\u5316\u3059\u308b\u524d\u3088\u308a\u9045\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\ncython\u306b\u3088\u308a\u5909\u63db\u3057\u305fc\u8a00\u8a9e\u3068python\u306e\u5916\u90e8\u51e6\u7406\u306e\u9023\u643a\u3067\u9045\u304f\u306a\u3063\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\ncdef\ncdef\u3092\u7528\u3044\u3066\u3001\u4e88\u3081\u9759\u7684\u306a\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u65e9\u304f\u306a\u308b\u3060\u308d\u3046\u3068\u898b\u8fbc\u3093\u3067cdef\u306e\u5b9a\u7fa9\u3092\u3057\u307e\u3057\u305f\u3002\n\n\u4e8b\u524d\u6e96\u5099\n\u305d\u306e\u307e\u307emac\u4e0a\u3067\u4f7f\u7528\u3059\u308b\u3068\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u306e\u3067\u8af8\u6240\u306e\u5bfe\u5fdc\u3092\u3057\u307e\u3057\u305f\u3002\ncimport \u306e\u4f7f\u7528\u3092\u8a66\u307f\u308b\u3068\u4e0b\u8a18\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3002\n/Users/smap2/.pyxbld/temp.macosx-10.10-x86_64-3.4/pyrex/train_mnist_c2.c:242:10: fatal error: 'numpy/arrayobject.h' file not found\n\n\u4e0b\u8a18\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\n/usr/local/include/\n\n\u4e0b\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3067\u63a2\u3057\u305f\u30d8\u30c3\u30c0\u30fc\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u30b3\u30d4\u30fc\u307e\u305f\u306f\u30d1\u30b9\u3092\u901a\u3059\nfind / -name arrayobject.h -print 2> /dev/null\n\n776\u79d2\u3068\u306a\u308a\u307e\u3057\u305f\u3002\nProfile.prof\n\n         37466756 function calls (35040748 primitive calls) in 776.901 seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    72000  458.284    0.006  458.812    0.006 adam.py:27(update_one_cpu)\n   114000  194.834    0.002  194.834    0.002 {method 'dot' of 'numpy.ndarray' objects}\n   216000   33.120    0.000   33.120    0.000 {method 'fill' of 'numpy.ndarray' objects}\n    12000   24.025    0.002  168.772    0.014 variable.py:216(backward)\n\n\u5358\u7d14\u306acython\u5316\u3088\u308a\u306f\u6539\u5584\u3057\u3066\u3044\u307e\u3059\u304c\u3001adam.py\u3068variable.py\u306b\u3042\u307e\u308a\u5909\u5316\u304c\u306a\u3044\u305f\u3081\u3001\u4f59\u8a08\u306aC\u8a00\u8a9e\u3068Python\u8a00\u8a9e\u306e\u5909\u63db\u51e6\u7406\u306e\u305f\u3081\u7d50\u679c\u7684\u306bpython\u51e6\u7406\u3088\u308a\u9045\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nadam.py\u306ecython\u5316\n\u3082\u3063\u3068\u3082\u51e6\u7406\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u90e8\u5206\u3092adam.py\u3092cython\u5316\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u9ad8\u901f\u5316\u3067\u304d\u306a\u3044\u304b\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u7d50\u679c\u3068\u3057\u306630\u79d2\u307b\u3069\u65e9\u304f\u306a\u308b\u52b9\u679c\u3092\u898b\u305b\u307e\u3057\u305f\u3002\nProfile.prof\n\n         37250749 function calls (34824741 primitive calls) in 727.414 seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    72000  430.495    0.006  430.537    0.006 optimizer.py:388(update_one)\n   114000  180.775    0.002  180.775    0.002 {method 'dot' of 'numpy.ndarray' objects}\n   216000   30.647    0.000   30.647    0.000 {method 'fill' of 'numpy.ndarray' objects}\n    12000   21.766    0.002  157.230    0.013 variable.py:216(backward)\n\nadam.py\u3092\u5185\u5305\u3057\u3066\u3044\u308boptimizer.py\u306e\u51e6\u7406\u6642\u9593\u304cpython\u6642\u3088\u308a20\u79d2\u307b\u3069\u65e9\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u304c\u52b9\u3044\u3066\u65e9\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u7dcf\u62ec\n\u5358\u7d14\u306bcython\u5316\u3057\u3066\u9ad8\u901f\u5316\u3092\u8a66\u307f\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u3057\u3066\u3001\u672c\u5f53\u306b\u52b9\u679c\u304c\u3042\u308b\u6240\u3060\u3051cython\u5316\u3059\u308b\u3068\u52b9\u679c\u304c\u51fa\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\u306a\u3093\u3068\u306a\u304f\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u4eee\u8aac\u3001\u53ef\u8996\u5316\u3001\u691c\u8a3c\u306e\u30b5\u30a4\u30af\u30eb\u304c\u91cd\u8981\u3068\u3044\u3046\u3053\u3068\u304c\u4f53\u9a13\u3067\u304d\u305f\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\u3067\u3057\u305f\u3002\n\u5b9f\u884c\u306b\u8a66\u3057\u305f\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306b\u8f09\u305b\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/SnowMasaya/chainer_cython_study\n\n\u53c2\u8003\nChainer: a neural network framework\nhttps://github.com/pfnet/chainer\n#\u306a\u305c\u3084\u308b\u304b\n\nChainer1.5\u304b\u3089\u9ad8\u901f\u5316\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u9ad8\u901f\u5316\u306e\u4e00\u56e0\u3068\u3057\u3066cython\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u6319\u3052\u3089\u308c\u3066\u3044\u305f\u306e\u3067\u3001example\u3092cython\u3067\u66f8\u304d\u63db\u3048\u305f\u3089\u3001\u3069\u308c\u3060\u3051\u65e9\u304f\u306a\u308b\u306e\u304b\u5358\u7d14\u306a\u7591\u554f\u304c\u6e67\u3044\u305f\u306e\u3067\u3001\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n##PC\u306e\u30b9\u30da\u30c3\u30af\nOS:OS X Yosemite\nCPU: 2.7GHz Intel Core i5\nMemory:8GHz DDR3 \n\n##\u6761\u4ef6\nexample\u306eMnist\u3092\u4f7f\u7528\n\u5b66\u7fd2\u56de\u6570\uff1a20\u56de\n\u30c7\u30fc\u30bf\u306f\u4e88\u3081\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u305f\u72b6\u614b\n\n##\u53ef\u8996\u5316\n\u30d7\u30ed\u30d5\u30a1\u30a4\u30e9\u306b\u3088\u308b\u53ef\u8996\u5316\n\npycallgraph\u3092\u4f7f\u7528\nhttp://pycallgraph.slowchop.com\ngraphivz\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nhttp://www.graphviz.org/Download_macos.php\nX11\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb(Yosemite\u306e\u5834\u5408)\nhttp://www.xquartz.org/\n`failed with error code 256`\u304c\u51fa\u305f\u5834\u5408\nhttps://github.com/gak/pycallgraph/issues/100\n\npycallgraph\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\n\n```\n python pycallgraph graphviz -- ./\u30d5\u30a1\u30a4\u30eb\u540d.py\n```\n\n#\u3084\u308d\u3046\u3068\u601d\u3046\u3053\u3068\n\n\uff11\uff1a\u901a\u5e38\u51e6\u7406\u306e\u53ef\u8996\u5316\u3001\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\n\uff12\uff1a\u5358\u7d14\u306acython\u5316\n\uff13\uff1acdef\u306b\u3088\u308b\u9759\u7684\u306a\u578b\u8a2d\u5b9a\n\uff14\uff1a\u5916\u90e8\u30e2\u30b8\u30e5\u30fc\u30eb\u306ecython\u5316\n\n#\u521d\u671f\u306e\u72b6\u614b\n\n![basic.png](https://qiita-image-store.s3.amazonaws.com/0/10496/04a9c62b-1d68-8fd0-b4ef-05af84a1cc7f.png)\n\n\n\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30bc\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3068\u3069\u306e\u90e8\u5206\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u304b\u3092\u628a\u63e1\u3067\u304d\u307e\u3059\u3002\ntrain_mnist.Train_Mnist.train\n951\u79d2\u304b\u304b\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n\u901a\u5e38\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u7d50\u679c\u304c\u4e0b\u8a18\u3067\u3059\u3002\n\nncalls: \u547c\u3073\u51fa\u3057\u56de\u6570\ntottime: \u3053\u306e\u95a2\u6570\u304c\u6d88\u8cbb\u3057\u305f\u6642\u9593\u306e\u5408\u8a08\npercall: tottime \u3092 ncalls \u3067\u5272\u3063\u305f\u5024 \ncumtime: \u4e0b\u4f4d\u306e\u95a2\u6570\u3092\u542b\u3080\u3053\u306e\u95a2\u6570\u306e (\u5b9f\u884c\u958b\u59cb\u304b\u3089\u7d42\u4e86\u307e\u3067\u306e) \u6d88\u8cbb\u6642\u9593\u306e\u5408\u8a08\u3002\u3053\u306e\u9805\u76ee\u306f\u518d\u5e30\u7684\u306a\u95a2\u6570\u306b\u304a\u3044\u3066\u3082\u6b63\u78ba\u306b\u8a08\u6e2c\u3055\u308c\u307e\u3059\u3002 \npercall: cumtime \u3092\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306a\u547c\u3073\u51fa\u3057\u56de\u6570\u3067\u5272\u3063\u305f\u5024\n\n\u4eca\u56de\u306fcython\u306e\u90fd\u5408\u4e0a\u3001\u30b3\u30fc\u30c9\u3092\u5909\u3048\u3066\u3044\u308b\u306e\u3067\u4e0a\u8a18\u306e\u51e6\u7406\u6642\u9593\u3068\u7570\u306a\u308a\u307e\u3059\u3002\u672c\u5f53\u306fcython\u3067pycallgraph\u3092\u4f7f\u7528\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u7b46\u8005\u306e\u77e5\u8b58\u4e0d\u8db3\u3067\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u4f7f\u7528\u65b9\u6cd5\u77e5\u3063\u3066\u3044\u308b\u4eba\u3044\u305f\u3089\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff08\u901a\u5e38\u306e\u4f7f\u7528\u65b9\u6cd5\u3060\u3068cython\u90e8\u5206\u306e\u51e6\u7406\u304c\u8f09\u308a\u307e\u305b\u3093\uff09\n\n755.154\u79d2\u3067\u7d42\u4e86\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5b9f\u884c\u65b9\u6cd5\n\n```\npython -m cProfile\n```\n\n```\nProfile.prof\n\n         37494628 function calls (35068627 primitive calls) in 755.154 seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    72000  448.089    0.006  448.651    0.006 adam.py:27(update_one_cpu)\n   114000  187.057    0.002  187.057    0.002 {method 'dot' of 'numpy.ndarray' objects}\n   216000   31.576    0.000   31.576    0.000 {method 'fill' of 'numpy.ndarray' objects}\n    12000   23.122    0.002  163.601    0.014 variable.py:216(backward)\n```\n\n2:8\u306e\u6cd5\u5247\u306b\u57fa\u3065\u3044\u3066\u3001\u3082\u3063\u3068\u3082\u51e6\u7406\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u90e8\u5206\u306b\u7740\u76ee\u3057\u307e\u3059\u3002\nadam.py\u304c\u307b\u307c\u5927\u534a\u306e\u51e6\u7406\u6642\u9593\u3092\u3068\u3063\u3066\u304a\u308a\u3001numpy\u306e\u884c\u5217\u6f14\u7b97\u304c\u7d9a\u3044\u3066\u51e6\u7406\u6642\u9593\u3092\u5272\u3044\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n#cython\n\ncython\u306b\u304a\u3044\u3066\u3082\u30b0\u30e9\u30d5\u5316\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u7b46\u8005\u306e\u77e5\u8b58\u304c\u8db3\u308a\u305a\u3001cython\u306e\u51e6\u7406\u90e8\u5206\u3060\u3051\u30b0\u30e9\u30d5\u5316\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u3057\u307e\u3057\u305f\u3002\n\n\u7d50\u679c\u306f800\u79d2\u3068\u9006\u306b\u9045\u304f\u306a\u3063\u3066\u3044\u307e\u3059\n\n\n```\nProfile.prof\n\n         37466504 function calls (35040503 primitive calls) in 800.453 seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    72000  473.638    0.007  474.181    0.007 adam.py:27(update_one_cpu)\n   114000  199.589    0.002  199.589    0.002 {method 'dot' of 'numpy.ndarray' objects}\n   216000   33.706    0.000   33.706    0.000 {method 'fill' of 'numpy.ndarray' objects}\n    12000   24.754    0.002  173.816    0.014 variable.py:216(backward)\n    28000    9.944    0.000   10.392    0.000 \n```\n\nadam.py\u3068variable.py\u306e\u51e6\u7406\u90e8\u5206\u304ccython\u5316\u3059\u308b\u524d\u3088\u308a\u9045\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\ncython\u306b\u3088\u308a\u5909\u63db\u3057\u305fc\u8a00\u8a9e\u3068python\u306e\u5916\u90e8\u51e6\u7406\u306e\u9023\u643a\u3067\u9045\u304f\u306a\u3063\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\n#cdef\n\ncdef\u3092\u7528\u3044\u3066\u3001\u4e88\u3081\u9759\u7684\u306a\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u65e9\u304f\u306a\u308b\u3060\u308d\u3046\u3068\u898b\u8fbc\u3093\u3067cdef\u306e\u5b9a\u7fa9\u3092\u3057\u307e\u3057\u305f\u3002\n\n##\u4e8b\u524d\u6e96\u5099\n\n\u305d\u306e\u307e\u307emac\u4e0a\u3067\u4f7f\u7528\u3059\u308b\u3068\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u306e\u3067\u8af8\u6240\u306e\u5bfe\u5fdc\u3092\u3057\u307e\u3057\u305f\u3002\n\ncimport \u306e\u4f7f\u7528\u3092\u8a66\u307f\u308b\u3068\u4e0b\u8a18\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3002\n\n```\n/Users/smap2/.pyxbld/temp.macosx-10.10-x86_64-3.4/pyrex/train_mnist_c2.c:242:10: fatal error: 'numpy/arrayobject.h' file not found\n```\n\n\u4e0b\u8a18\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\n\n```\n/usr/local/include/\n```\n\n\u4e0b\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3067\u63a2\u3057\u305f\u30d8\u30c3\u30c0\u30fc\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u30b3\u30d4\u30fc\u307e\u305f\u306f\u30d1\u30b9\u3092\u901a\u3059\n\n```\nfind / -name arrayobject.h -print 2> /dev/null\n```\n\n776\u79d2\u3068\u306a\u308a\u307e\u3057\u305f\u3002\n\n```\nProfile.prof\n\n         37466756 function calls (35040748 primitive calls) in 776.901 seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    72000  458.284    0.006  458.812    0.006 adam.py:27(update_one_cpu)\n   114000  194.834    0.002  194.834    0.002 {method 'dot' of 'numpy.ndarray' objects}\n   216000   33.120    0.000   33.120    0.000 {method 'fill' of 'numpy.ndarray' objects}\n    12000   24.025    0.002  168.772    0.014 variable.py:216(backward)\n```\n\n\u5358\u7d14\u306acython\u5316\u3088\u308a\u306f\u6539\u5584\u3057\u3066\u3044\u307e\u3059\u304c\u3001adam.py\u3068variable.py\u306b\u3042\u307e\u308a\u5909\u5316\u304c\u306a\u3044\u305f\u3081\u3001\u4f59\u8a08\u306aC\u8a00\u8a9e\u3068Python\u8a00\u8a9e\u306e\u5909\u63db\u51e6\u7406\u306e\u305f\u3081\u7d50\u679c\u7684\u306bpython\u51e6\u7406\u3088\u308a\u9045\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n#adam.py\u306ecython\u5316\n\n\u3082\u3063\u3068\u3082\u51e6\u7406\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u90e8\u5206\u3092adam.py\u3092cython\u5316\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u9ad8\u901f\u5316\u3067\u304d\u306a\u3044\u304b\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u7d50\u679c\u3068\u3057\u306630\u79d2\u307b\u3069\u65e9\u304f\u306a\u308b\u52b9\u679c\u3092\u898b\u305b\u307e\u3057\u305f\u3002\n\n```\nProfile.prof\n\n         37250749 function calls (34824741 primitive calls) in 727.414 seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    72000  430.495    0.006  430.537    0.006 optimizer.py:388(update_one)\n   114000  180.775    0.002  180.775    0.002 {method 'dot' of 'numpy.ndarray' objects}\n   216000   30.647    0.000   30.647    0.000 {method 'fill' of 'numpy.ndarray' objects}\n    12000   21.766    0.002  157.230    0.013 variable.py:216(backward)\n```\n\nadam.py\u3092\u5185\u5305\u3057\u3066\u3044\u308boptimizer.py\u306e\u51e6\u7406\u6642\u9593\u304cpython\u6642\u3088\u308a20\u79d2\u307b\u3069\u65e9\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u304c\u52b9\u3044\u3066\u65e9\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n#\u7dcf\u62ec\n\n\u5358\u7d14\u306bcython\u5316\u3057\u3066\u9ad8\u901f\u5316\u3092\u8a66\u307f\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u3057\u3066\u3001\u672c\u5f53\u306b\u52b9\u679c\u304c\u3042\u308b\u6240\u3060\u3051cython\u5316\u3059\u308b\u3068\u52b9\u679c\u304c\u51fa\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\u306a\u3093\u3068\u306a\u304f\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u4eee\u8aac\u3001\u53ef\u8996\u5316\u3001\u691c\u8a3c\u306e\u30b5\u30a4\u30af\u30eb\u304c\u91cd\u8981\u3068\u3044\u3046\u3053\u3068\u304c\u4f53\u9a13\u3067\u304d\u305f\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\u3067\u3057\u305f\u3002\n\n\u5b9f\u884c\u306b\u8a66\u3057\u305f\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306b\u8f09\u305b\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/SnowMasaya/chainer_cython_study\n\n#\u53c2\u8003\nChainer: a neural network framework\nhttps://github.com/pfnet/chainer\n", "tags": ["Python", "Chainer", "Cython", "C", "\u9ad8\u901f\u5316"]}