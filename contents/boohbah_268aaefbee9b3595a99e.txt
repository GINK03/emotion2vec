{"tags": ["Kotlin", "Android"], "context": "\u3053\u306e\u8a18\u4e8b\u306f\u3001Kotlin Advent Calendar 2016 21\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\nAndroid\u306b\u306fIcePick\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u3001\u3053\u308c\u306f @State \u3068\u3044\u3046\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u4ed8\u52a0\u3059\u308b\u3053\u3068\u3067Android\u306eActivity\u3084Fragment\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u5fa9\u5143\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f7f\u3044\u307e\u3059\u3002\nclass ExampleActivity extends Activity {\n    @State String username; // This will be automatically saved and restored\n\n    @Override public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Icepick.restoreInstanceState(this, savedInstanceState);\n    }\n\n    @Override public void onSaveInstanceState(Bundle outState) {\n      super.onSaveInstanceState(outState);\n      Icepick.saveInstanceState(this, outState);\n    }\n}\n\n\u3057\u304b\u3057\u3001\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306fKotlin\u3067\u4f5c\u3089\u308c\u305fActivity/Fragment\u3067\u306f\u305d\u306e\u307e\u307e\u3067\u306f\u6b63\u3057\u304f\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002\n\u5b9f\u306f\u4fdd\u5b58\u3057\u305f\u3044\u30d5\u30a3\u30fc\u30eb\u30c9\u306b @JvmField \u3092\u3064\u3051\u308b\u3053\u3068\u3067IcePick\u3067\u3082\u4f7f\u3048\u308b\u306e\u3067\u3059\u304c\u3001@JvmField \u3092\u3064\u3051\u308b\u3068setter/getter\u3067\u306f\u306a\u3044\u305d\u306e\u307e\u307e\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u516c\u958b\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u304f\u306a\u308b\u3001\u3068\u3044\u3046\u6c17\u6301\u3061\u60aa\u3055\u304c\u3042\u308a\u307e\u3059\u3002\n\nPikkel\n\u305d\u3053\u3067\u3001Kotlin\u3067\u3082IcePick\u306e\u3088\u3046\u306b\u7c21\u5358\u306b\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5909\u6570\u3092\u4fdd\u5b58/\u7834\u68c4\u3067\u304d\u308b\u3088\u3046\u306bPikkel\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\nJitPack\u7d4c\u7531\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\nrepositories {\n  maven { url \"https://jitpack.io\" }\n}\n\ndependencies {\n  compile 'com.github.yamamotoj:pikkel:0.3.3'\n}\n\n\n\u5229\u7528\u65b9\u6cd5\n\u5229\u7528\u65b9\u6cd5\u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306e\u901a\u308a\u3067\u3059\u3002\nclass MainActivity : AppCompatActivity(), Pikkel by PikkelDelegate() { // Implement Pikkel interface with PikkelDelegate class delegation.\n\n    var data by state<String?>(null) // This will be automatically saved and restored\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        restoreInstanceState(savedInstanceState) // Saved states are restored here by Pikkel\n    }\n\n    override fun onSaveInstanceState(outState: Bundle?) {\n        super.onSaveInstanceState(outState)\n        saveInstanceState(outState) // Save states here by Pikkel\n    }\n}\n\n\n\u307e\u305a\u3001\u5229\u7528\u3057\u305f\u3044Activity/Fragment\u3067 Pikkel by PikkelDelegate() \u3068Pikkel\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3068\u305d\u306edelegate\u30af\u30e9\u30b9\u3092 class delegation\u3092\u7528\u3044\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u6b21\u306b\u4fdd\u5b58\u3057\u305f\u3044\u30d7\u30ed\u30d1\u30c6\u30a3\u3092 by state(\u521d\u671f\u5024) \u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u3042\u3068\u306f saveInstanceState() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u4fdd\u5b58\u3001 restoreInstanceState() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u5fa9\u5143\u3067\u3059\u3002\n\n\u3053\u308c\u3060\u3051\u3067\u3001IcePick\u3068\u540c\u3058\u3088\u3046\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306e\u4fdd\u5b58/\u5fa9\u5143\u3092\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\u3057\u304b\u3082IcePick\u3068\u3061\u304c\u3063\u3066\u4fdd\u5b58\u3059\u308b\u5909\u6570\u3092 private \u306b\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\n\u5b9f\u88c5\u3092\u307f\u3066\u307f\u308b\nPikkel\u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002import\u90e8\u3092\u9664\u304f\u3068\u7d0450\u884c\u3061\u3087\u3063\u3068\u3067\u3059\u3002\ninterface Pikkel {\n    val pikkelBundle: Bundle\n    fun restoreInstanceState(savedInstanceState: Bundle?) {\n        savedInstanceState ?: return\n        pikkelBundle.putAll(savedInstanceState)\n        pikkelBundle.keySet().filter { !it.startsWith(\"pikkel:\") }.forEach { pikkelBundle.remove(it) }\n    }\n\n    fun saveInstanceState(outState: Bundle?) {\n        outState ?: return\n        outState.putAll(pikkelBundle)\n    }\n\n    fun <T> state(initial: T): ReadWriteProperty<Pikkel, T> = State(initial)\n\n    private class State<T>(private val initial: T) : ReadWriteProperty<Pikkel, T> {\n\n        override fun getValue(thisRef: Pikkel, property: KProperty<*>): T {\n            val key = \"pikkel:\" + property.name\n            if (!thisRef.pikkelBundle.containsKey(key)) {\n                return initial\n            } else {\n                @Suppress(\"UNCHECKED_CAST\")\n                return thisRef.pikkelBundle.get(key) as T\n            }\n        }\n\n        override fun setValue(thisRef: Pikkel, property: KProperty<*>, value: T) {\n            val key = \"pikkel:\" + property.name\n            when (value) {\n                is Bundle -> thisRef.pikkelBundle.putBundle(key, value)\n                is Int -> thisRef.pikkelBundle.putInt(key, value)\n                is Byte -> thisRef.pikkelBundle.putByte(key, value)\n                is ByteArray -> thisRef.pikkelBundle.putByteArray(key, value)\n                is Boolean -> thisRef.pikkelBundle.putBoolean(key, value)\n                is BooleanArray -> thisRef.pikkelBundle.putBooleanArray(key, value)\n                is Char -> thisRef.pikkelBundle.putChar(key, value)\n                is CharArray -> thisRef.pikkelBundle.putCharArray(key, value)\n                is Float -> thisRef.pikkelBundle.putFloat(key, value)\n                is FloatArray -> thisRef.pikkelBundle.putFloatArray(key, value)\n                is Parcelable -> thisRef.pikkelBundle.putParcelable(key, value)\n                is Short -> thisRef.pikkelBundle.putShort(key, value)\n                is ShortArray -> thisRef.pikkelBundle.putShortArray(key, value)\n                is String -> thisRef.pikkelBundle.putString(key, value)\n                is CharSequence -> thisRef.pikkelBundle.putCharSequence(key, value)\n                is Serializable -> thisRef.pikkelBundle.putSerializable(key, value)\n                null -> thisRef.pikkelBundle.putString(key, null)\n                else -> throw IllegalArgumentException()\n            }\n        }\n    }\n}\n\nclass PikkelDelegate() : Pikkel {\n    override val pikkelBundle: Bundle = Bundle()\n}\n\n\n\n\u30dd\u30a4\u30f3\u30c81: Pikkel\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3068PikkelDelegate\u30af\u30e9\u30b9\nPikkel \u306fPikkel\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3068\u305d\u308c\u3092\u5b9f\u88c5\u3059\u308bPikkelDelegate\u30af\u30e9\u30b9\u3067\u69cb\u6210\u3055\u308c\u3066\u304a\u308a\u3001\u5229\u7528\u3059\u308bActivity/Fragment\u3067\u306f Pikkel by PikkelDelegate() \u3068\u3044\u3046\u5f62\u3067\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306fKotlin\u306e class delegation \u3068\u3044\u3046\u6a5f\u80fd\u3067\u3053\u308c\u306b\u3088\u308a\u5229\u7528\u3059\u308b\u5074\u3067\u306f\u4f59\u8a08\u306a\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3059\u308b\u3053\u3068\u306a\u304f\u3001Pikkel\u306e\u5b9f\u88c5\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u307e\u305f\u3001\u4f7f\u7528\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u3059\u3079\u3066Pikkel\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u306e\u307f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u305d\u308c\u4ee5\u5916\u306e\u30af\u30e9\u30b9\u304b\u3089\u306f\u53c2\u7167\u3055\u308c\u308b\u5fc3\u914d\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u30dd\u30a4\u30f3\u30c82: Delegated Property\n\u4fdd\u5b58\u3059\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u6307\u5b9a\u3059\u308b by state() \u306fKotlin\u306e delegated property \u3068\u3044\u3046\u6a5f\u80fd\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u5909\u6570\u306e\u5ba3\u8a00\u6642\u306b ReadWriteProperty \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3057\u305f\u30af\u30e9\u30b9\u3092\u8fd4\u3059\u3053\u3068\u3067\u305d\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5024\u304c set/get \u3055\u308c\u305f\u3068\u304d\u306e\u51e6\u7406\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3001\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002 Pikkel\u3067\u306f by state() \u3067\u6307\u5b9a\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u8a2d\u5b9a\u3055\u308c\u308b\u3068\u304d\u306bPikkelDelegate\u304c\u6301\u3064 Bundle \u306b\u5024\u3092\u30bb\u30c3\u30c8\u3057\u3001 saveInstanceState() restoreInstanceState() \u3067\u4fdd\u5b58/\u5fa9\u5143\u3059\u308b\u3053\u3068\u3067IcePick\u3068\u540c\u7b49\u306e\u51e6\u7406\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5236\u9650\u4e8b\u9805\n\u4fdd\u5b58\u6642\u306b\u5024\u306e\u578b\u3092\u898b\u3066\u3001Bundle\u306b\u4fdd\u5b58\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u578b\u304c\u542b\u307e\u308c\u305f\u5909\u6570\u306e\u578b\u3092\u7279\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u3057\u305f\u304c\u3063\u3066Bundle\u306b\u5b58\u5728\u3057\u3066\u3044\u308b putSparseParcelableArray()\u3084 putStringArrayList() \u306b\u5bfe\u5fdc\u3059\u308b\u5024\u3092\u4fdd\u5b58\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u305b\u3093\u3002\n\n\u304a\u308f\u308a\u306b\n\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u5f0a\u793e\u3067\u30ea\u30ea\u30fc\u30b9\u3057\u3066\u3044\u308b\u30a2\u30d7\u30eaEight\u3067\u3082\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u305c\u3072\u4f7f\u7528\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u3093\u306a\u306b\u5c11\u306a\u3044\u884c\u6570\u3067\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u4f5c\u308c\u3061\u3083\u3046Kotlin\u30b5\u30a4\u30b3\u30fc\u3067\u3059\uff01\nPikkel:\nhttps://github.com/yamamotoj/Pikkel\n\u3053\u306e\u8a18\u4e8b\u306f\u3001[Kotlin Advent Calendar 2016](http://qiita.com/advent-calendar/2016/kotlin) 21\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\nAndroid\u306b\u306fIcePick\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u3001\u3053\u308c\u306f `@State` \u3068\u3044\u3046\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u4ed8\u52a0\u3059\u308b\u3053\u3068\u3067Android\u306eActivity\u3084Fragment\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4fdd\u5b58\u5fa9\u5143\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n```java\nclass ExampleActivity extends Activity {\n    @State String username; // This will be automatically saved and restored\n\n    @Override public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Icepick.restoreInstanceState(this, savedInstanceState);\n    }\n\n    @Override public void onSaveInstanceState(Bundle outState) {\n      super.onSaveInstanceState(outState);\n      Icepick.saveInstanceState(this, outState);\n    }\n}\n```\n\n\n\u3057\u304b\u3057\u3001\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306fKotlin\u3067\u4f5c\u3089\u308c\u305fActivity/Fragment\u3067\u306f\u305d\u306e\u307e\u307e\u3067\u306f\u6b63\u3057\u304f\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002\n\u5b9f\u306f\u4fdd\u5b58\u3057\u305f\u3044\u30d5\u30a3\u30fc\u30eb\u30c9\u306b `@JvmField` \u3092\u3064\u3051\u308b\u3053\u3068\u3067IcePick\u3067\u3082\u4f7f\u3048\u308b\u306e\u3067\u3059\u304c\u3001`@JvmField` \u3092\u3064\u3051\u308b\u3068setter/getter\u3067\u306f\u306a\u3044\u305d\u306e\u307e\u307e\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u516c\u958b\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u304f\u306a\u308b\u3001\u3068\u3044\u3046\u6c17\u6301\u3061\u60aa\u3055\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n# Pikkel\n\n\u305d\u3053\u3067\u3001Kotlin\u3067\u3082IcePick\u306e\u3088\u3046\u306b\u7c21\u5358\u306b\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5909\u6570\u3092\u4fdd\u5b58/\u7834\u68c4\u3067\u304d\u308b\u3088\u3046\u306b[Pikkel](https://github.com/yamamotoj/Pikkel)\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n## \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\n\nJitPack\u7d4c\u7531\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```gradle\nrepositories {\n  maven { url \"https://jitpack.io\" }\n}\n```\n\n```gradle\ndependencies {\n  compile 'com.github.yamamotoj:pikkel:0.3.3'\n}\n```\n\n## \u5229\u7528\u65b9\u6cd5\n\n\u5229\u7528\u65b9\u6cd5\u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306e\u901a\u308a\u3067\u3059\u3002\n\n```kotlin\nclass MainActivity : AppCompatActivity(), Pikkel by PikkelDelegate() { // Implement Pikkel interface with PikkelDelegate class delegation.\n\n    var data by state<String?>(null) // This will be automatically saved and restored\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        restoreInstanceState(savedInstanceState) // Saved states are restored here by Pikkel\n    }\n\n    override fun onSaveInstanceState(outState: Bundle?) {\n        super.onSaveInstanceState(outState)\n        saveInstanceState(outState) // Save states here by Pikkel\n    }\n}\n```\n\n- \u307e\u305a\u3001\u5229\u7528\u3057\u305f\u3044Activity/Fragment\u3067 `Pikkel by PikkelDelegate()` \u3068Pikkel\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3068\u305d\u306edelegate\u30af\u30e9\u30b9\u3092 class delegation\u3092\u7528\u3044\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002\n- \u6b21\u306b\u4fdd\u5b58\u3057\u305f\u3044\u30d7\u30ed\u30d1\u30c6\u30a3\u3092 `by state(\u521d\u671f\u5024)` \u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n- \u3042\u3068\u306f `saveInstanceState()` \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u4fdd\u5b58\u3001 `restoreInstanceState()` \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u5fa9\u5143\u3067\u3059\u3002\n\n\u3053\u308c\u3060\u3051\u3067\u3001IcePick\u3068\u540c\u3058\u3088\u3046\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306e\u4fdd\u5b58/\u5fa9\u5143\u3092\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\u3057\u304b\u3082IcePick\u3068\u3061\u304c\u3063\u3066\u4fdd\u5b58\u3059\u308b\u5909\u6570\u3092 `private` \u306b\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\n# \u5b9f\u88c5\u3092\u307f\u3066\u307f\u308b\n\nPikkel\u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002import\u90e8\u3092\u9664\u304f\u3068\u7d0450\u884c\u3061\u3087\u3063\u3068\u3067\u3059\u3002\n\n```kotlin\ninterface Pikkel {\n    val pikkelBundle: Bundle\n    fun restoreInstanceState(savedInstanceState: Bundle?) {\n        savedInstanceState ?: return\n        pikkelBundle.putAll(savedInstanceState)\n        pikkelBundle.keySet().filter { !it.startsWith(\"pikkel:\") }.forEach { pikkelBundle.remove(it) }\n    }\n\n    fun saveInstanceState(outState: Bundle?) {\n        outState ?: return\n        outState.putAll(pikkelBundle)\n    }\n\n    fun <T> state(initial: T): ReadWriteProperty<Pikkel, T> = State(initial)\n\n    private class State<T>(private val initial: T) : ReadWriteProperty<Pikkel, T> {\n\n        override fun getValue(thisRef: Pikkel, property: KProperty<*>): T {\n            val key = \"pikkel:\" + property.name\n            if (!thisRef.pikkelBundle.containsKey(key)) {\n                return initial\n            } else {\n                @Suppress(\"UNCHECKED_CAST\")\n                return thisRef.pikkelBundle.get(key) as T\n            }\n        }\n\n        override fun setValue(thisRef: Pikkel, property: KProperty<*>, value: T) {\n            val key = \"pikkel:\" + property.name\n            when (value) {\n                is Bundle -> thisRef.pikkelBundle.putBundle(key, value)\n                is Int -> thisRef.pikkelBundle.putInt(key, value)\n                is Byte -> thisRef.pikkelBundle.putByte(key, value)\n                is ByteArray -> thisRef.pikkelBundle.putByteArray(key, value)\n                is Boolean -> thisRef.pikkelBundle.putBoolean(key, value)\n                is BooleanArray -> thisRef.pikkelBundle.putBooleanArray(key, value)\n                is Char -> thisRef.pikkelBundle.putChar(key, value)\n                is CharArray -> thisRef.pikkelBundle.putCharArray(key, value)\n                is Float -> thisRef.pikkelBundle.putFloat(key, value)\n                is FloatArray -> thisRef.pikkelBundle.putFloatArray(key, value)\n                is Parcelable -> thisRef.pikkelBundle.putParcelable(key, value)\n                is Short -> thisRef.pikkelBundle.putShort(key, value)\n                is ShortArray -> thisRef.pikkelBundle.putShortArray(key, value)\n                is String -> thisRef.pikkelBundle.putString(key, value)\n                is CharSequence -> thisRef.pikkelBundle.putCharSequence(key, value)\n                is Serializable -> thisRef.pikkelBundle.putSerializable(key, value)\n                null -> thisRef.pikkelBundle.putString(key, null)\n                else -> throw IllegalArgumentException()\n            }\n        }\n    }\n}\n\nclass PikkelDelegate() : Pikkel {\n    override val pikkelBundle: Bundle = Bundle()\n}\n\n```\n\n## \u30dd\u30a4\u30f3\u30c81: Pikkel\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3068PikkelDelegate\u30af\u30e9\u30b9\n\n`Pikkel` \u306fPikkel\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3068\u305d\u308c\u3092\u5b9f\u88c5\u3059\u308bPikkelDelegate\u30af\u30e9\u30b9\u3067\u69cb\u6210\u3055\u308c\u3066\u304a\u308a\u3001\u5229\u7528\u3059\u308bActivity/Fragment\u3067\u306f `Pikkel by PikkelDelegate()` \u3068\u3044\u3046\u5f62\u3067\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306fKotlin\u306e `class delegation` \u3068\u3044\u3046\u6a5f\u80fd\u3067\u3053\u308c\u306b\u3088\u308a\u5229\u7528\u3059\u308b\u5074\u3067\u306f\u4f59\u8a08\u306a\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3059\u308b\u3053\u3068\u306a\u304f\u3001Pikkel\u306e\u5b9f\u88c5\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u307e\u305f\u3001\u4f7f\u7528\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u3059\u3079\u3066Pikkel\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u306e\u307f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u305d\u308c\u4ee5\u5916\u306e\u30af\u30e9\u30b9\u304b\u3089\u306f\u53c2\u7167\u3055\u308c\u308b\u5fc3\u914d\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n## \u30dd\u30a4\u30f3\u30c82: Delegated Property\n\n\u4fdd\u5b58\u3059\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u6307\u5b9a\u3059\u308b `by state()` \u306fKotlin\u306e `delegated property` \u3068\u3044\u3046\u6a5f\u80fd\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u5909\u6570\u306e\u5ba3\u8a00\u6642\u306b `ReadWriteProperty` \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3057\u305f\u30af\u30e9\u30b9\u3092\u8fd4\u3059\u3053\u3068\u3067\u305d\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5024\u304c `set/get` \u3055\u308c\u305f\u3068\u304d\u306e\u51e6\u7406\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3001\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002 Pikkel\u3067\u306f `by state()` \u3067\u6307\u5b9a\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u8a2d\u5b9a\u3055\u308c\u308b\u3068\u304d\u306bPikkelDelegate\u304c\u6301\u3064 `Bundle` \u306b\u5024\u3092\u30bb\u30c3\u30c8\u3057\u3001 `saveInstanceState()` `restoreInstanceState()` \u3067\u4fdd\u5b58/\u5fa9\u5143\u3059\u308b\u3053\u3068\u3067IcePick\u3068\u540c\u7b49\u306e\u51e6\u7406\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u5236\u9650\u4e8b\u9805\n\u4fdd\u5b58\u6642\u306b\u5024\u306e\u578b\u3092\u898b\u3066\u3001Bundle\u306b\u4fdd\u5b58\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u578b\u304c\u542b\u307e\u308c\u305f\u5909\u6570\u306e\u578b\u3092\u7279\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u3057\u305f\u304c\u3063\u3066Bundle\u306b\u5b58\u5728\u3057\u3066\u3044\u308b `putSparseParcelableArray()`\u3084 `putStringArrayList()` \u306b\u5bfe\u5fdc\u3059\u308b\u5024\u3092\u4fdd\u5b58\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u305b\u3093\u3002\n\n\n# \u304a\u308f\u308a\u306b\n\n\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u5f0a\u793e\u3067\u30ea\u30ea\u30fc\u30b9\u3057\u3066\u3044\u308b\u30a2\u30d7\u30ea[Eight](https://8card.net/)\u3067\u3082\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u305c\u3072\u4f7f\u7528\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u3093\u306a\u306b\u5c11\u306a\u3044\u884c\u6570\u3067\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u4f5c\u308c\u3061\u3083\u3046Kotlin\u30b5\u30a4\u30b3\u30fc\u3067\u3059\uff01\n\nPikkel:\nhttps://github.com/yamamotoj/Pikkel\n\n\n\n\n\n"}