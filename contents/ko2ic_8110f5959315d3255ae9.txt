{"context": " More than 1 year has passed since last update.\u305d\u306e1\u3068\u305d\u306e2\u306e\u7d9a\u304d\u306b\u306a\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u4ee5\u4e0b\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\nhibernate\u3067\u306eDB\u30a2\u30af\u30bb\u30b9\u306e\u5b9f\u88c5\njdbi\u3067\u306eDB\u30a2\u30af\u30bb\u30b9\n\n\nhibernate\u3067\u306eDB\u30a2\u30af\u30bb\u30b9\u306e\u5b9f\u88c5\n\nmaven\u8a2d\u5b9a\nDropwizard\u3067\u306fhibernate\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\npom.xml\n    <dependency>\n      <groupId>io.dropwizard</groupId>\n      <artifactId>dropwizard-hibernate</artifactId>\n      <version>${dropwizard.version}</version>\n    </dependency>\n\n\n\nEntity\n\u307e\u305a\u306f\u3088\u304f\u3042\u308bPOJO\u306aentity\u3092\u4f5c\u6210\n\nPerson.java\n@Entity\n@Table(name = \"people\")\n@NamedQueries({ @NamedQuery(name = \"com.github.ko2ic.core.Person.findAll\", query = \"SELECT p FROM Person p\")})\npublic class Person {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private long id;\n\n    @Column(name = \"fullName\", nullable = false)\n    private String fullName;\n\n    @Column(name = \"jobTitle\", nullable = false)\n    private String jobTitle;\n\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public String getFullName() {\n        return fullName;\n    }\n\n    public void setFullName(String fullName) {\n        this.fullName = fullName;\n    }\n\n    public String getJobTitle() {\n        return jobTitle;\n    }\n\n    public void setJobTitle(String jobTitle) {\n        this.jobTitle = jobTitle;\n    }\n}\n\n\n\nDao\nio.dropwizard.hibernate.AbstractDAO\u3092\u7d99\u627f\u3057\u3066\u4f5c\u308a\u307e\u3059\u3002\n\nPersonDAO.java\npublic class PersonDAO extends AbstractDAO<Person> {\n    public PersonDAO(SessionFactory factory) {\n        super(factory);\n    }\n\n    public Optional<Person> findById(Long id) {\n        return Optional.fromNullable(get(id));\n    }\n\n    public Person create(Person person) {\n        return persist(person);\n    }\n\n    public List<Person> findAll() {\n        return list(namedQuery(\"com.github.ko2ic.core.Person.findAll\"));\n    }\n}\n\n\n\nResource\u30af\u30e9\u30b9\n@UnitOfWork\u3092\u8a18\u8ff0\u3059\u308b\u3068\u305d\u3053\u304c\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5883\u754c\u306b\u306a\u308a\u307e\u3059\u3002\n\nPeopleResource.java\n@Path(\"/people\")\n@Produces(MediaType.APPLICATION_JSON)\npublic class PeopleResource {\n\n    private final PersonDAO peopleDAO;\n\n    public PeopleResource(PersonDAO peopleDAO) {\n        this.peopleDAO = peopleDAO;\n    }\n\n    @POST\n    @UnitOfWork\n    public Person createPerson(Person person) {\n        return peopleDAO.create(person);\n    }\n\n    @GET\n    @UnitOfWork\n    public List<Person> listPeople() {\n        return peopleDAO.findAll();\n    }\n\n    @GET\n    @UnitOfWork\n    @Path(\"/{personId}\")\n    public Person getPerson(@PathParam(\"personId\") LongParam personId) {\n        final Optional<Person> person = peopleDAO.findById(personId.get());\n        if (!person.isPresent()) {\n            throw new NotFoundException(\"{status:notfound}\");\n        }\n        return person.get();\n    }\n}\n\n\n\nApplication\u30af\u30e9\u30b9\n\u30d5\u30a3\u30fc\u30eb\u30c9\u3067Dropwizard\u306eabstract\u306aHibernateBundle\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u3001\u767b\u9332\u3057\u307e\u3059\u3002\n\nHelloWorldApplication.java\n\n    private final HibernateBundle<HelloWorldConfiguration> hibernateBundle = new HibernateBundle<HelloWorldConfiguration>(\n            Person.class) {\n        @Override\n        public DataSourceFactory getDataSourceFactory(\n                HelloWorldConfiguration configuration) {\n            return configuration.getDataSourceFactory();\n        }\n    };\n\n    @Override\n    public void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n        \u30fb\u30fb\u30fb\n        bootstrap.addBundle(hibernateBundle);\n        \u30fb\u30fb\u30fb\n    }\n\n    @Override\n    public void run(HelloWorldConfiguration configuration,\n            Environment environment) throws ClassNotFoundException {\n       \u30fb\u30fb\u30fb\n        final PersonDAO dao = new PersonDAO(hibernateBundle.getSessionFactory());\n        environment.jersey().register(new PeopleResource(dao));\n       \u30fb\u30fb\u30fb\n    }\n\n\n\u74b0\u5883\u8a2d\u5b9a\u306bdatabase\u95a2\u9023\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nexample.yml\ndatabase:\n\n  # the name of your JDBC driver\n  driverClass: org.h2.Driver\n\n  # the username\n  user: sa\n\n  # the password\n  password: sa\n\n  # the JDBC URL\n  url: jdbc:h2:target/example\n\n  # any properties specific to your JDBC driver:\n  properties:\n    charSet: UTF-8\n    hibernate.dialect: org.hibernate.dialect.H2Dialect\n\n  # the maximum amount of time to wait on an empty pool before throwing an exception\n  maxWaitForConnection: 1s\n\n  # the SQL query to run when validating a connection's liveness\n  validationQuery: \"/* MyApplication Health Check */ SELECT 1\"\n\n  # the minimum number of connections to keep open\n  minSize: 8\n\n  # the maximum number of connections to keep open\n  maxSize: 32\n\n  # whether or not idle connections should be validated\n  checkConnectionWhileIdle: false\n\n\n\n\u30b9\u30ad\u30fc\u30de\u4f5c\u6210\n\u307e\u305a\u306f\u3001Dropwizard(Java)\u3067rails\u306e\u3088\u3046\u306bDB\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u3059\u308b\u3067\u66f8\u3044\u305f\u3088\u3046\u306bliquibase\u3067\u4f5c\u6210\u3057\u307e\u3059\u3002\nliquibase\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u306f\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nmigration.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog\n         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd\">\n    <changeSet id=\"1\" author=\"ko2ic\">\n        <createTable tableName=\"people\">\n            <column name=\"id\" type=\"bigint\" autoIncrement=\"true\">\n                <constraints primaryKey=\"true\" nullable=\"false\" />\n            </column>\n            <column name=\"fullName\" type=\"varchar(255)\">\n                <constraints nullable=\"false\" />\n            </column>\n            <column name=\"jobTitle\" type=\"varchar(255)\" />\n        </createTable>\n    </changeSet>\n</databaseChangeLog>\n\n\nmvn package\u3057\u3066\u3001\u30b9\u30ad\u30fc\u30de\u3092\u4f5c\u308a\u307e\u3059\u3002\n$ java -jar target/spike-dropwizard-1.0-SNAPSHOT.jar  db migrate example.yml\n\n\n\u52d5\u4f5c\u78ba\u8a8d\n\u8d77\u52d5\u3059\u308b\u3068\u5148\u307b\u3069\u306e\u30ea\u30bd\u30fc\u30b9\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u30fb\u30fb\u30fb\n    GET     /people (com.github.ko2ic.resources.PeopleResource)\n    GET     /people/{personId} (com.github.ko2ic.resources.PeopleResource)\n    POST    /people (com.github.ko2ic.resources.PeopleResource)\n\u30fb\u30fb\u30fb\n\n\n\u307e\u305a\u306f\u3001post\u3067\u30c7\u30fc\u30bf\u30922\u4ef6\u767b\u9332\u3057\u3066\u307f\u307e\u3059\u3002\n$ curl -H \"Content-Type: application/json\" -X POST -d '{\"fullName\":\"Coda Hale\", \"jobTitle\" : \"Chief Wizard\" }' http://localhost:8080/people\n{\"id\":1,\"fullName\":\"Coda Hale\",\"jobTitle\":\"Chief Wizard\"}\n\n$ curl -H \"Content-Type: application/json\" -X POST -d '{\"fullName\":\"ko2ic\", \"jobTitle\" : \"hoge\" }' http://localhost:8080/people\n{\"id\":2,\"fullName\":\"ko2ic\",\"jobTitle\":\"hoge\"}\n\n\u691c\u7d22\u3057\u3066\u307f\u307e\u3059\u3002\n$ curl http://localhost:8080/people\n[{\"id\":1,\"fullName\":\"Coda Hale\",\"jobTitle\":\"Chief Wizard\"},{\"id\":2,\"fullName\":\"ko2ic\",\"jobTitle\":\"hoge\"}]\n\n$ curl http://localhost:8080/people/2\n{\"id\":2,\"fullName\":\"ko2ic\",\"jobTitle\":\"hoge\"}\n\n$ curl http://localhost:8080/people/3\n{status:notfound}\n\n\u3061\u3083\u3093\u3068\u60f3\u5b9a\u901a\u308a\u306eJSON\u304c\u8fd4\u3063\u3066\u304d\u3066\u3044\u307e\u3059\u3002\n\nHealth Check\nhibernate\u306e\u5834\u5408\u306f\u3001bundle\u3092\u767b\u9332\u3059\u308b\u51e6\u7406\u306e\u5185\u90e8\u3067Health Check\u306e\u767b\u9332\u3082\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002(\u540d\u524d\u306fhibernate)\n\u306a\u306e\u3067\u3001\u74b0\u5883\u8a2d\u5b9a\u3067validationQuery\u306b\u8a18\u8ff0\u3057\u3066\u304a\u304f\u3060\u3051\u3067\u3001Health Check\u304c\u884c\u308f\u308c\u307e\u3059\u3002\ndeadlocks\u306b\u3064\u3044\u3066\u306f\u3001\u305d\u306e1\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n$ curl http://localhost:8081/healthcheck\n{\"deadlocks\":{\"healthy\":true},\"hibernate\":{\"healthy\":true}}\n\n\njdbi\u3067\u306eDB\u30a2\u30af\u30bb\u30b9\n\nmaven\u8a2d\u5b9a\nDropwizard\u3067\u306fjdbi\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\npom.xml\n    <dependency>\n      <groupId>io.dropwizard</groupId>\n      <artifactId>dropwizard-jdbi</artifactId>\n      <version>${dropwizard.version}</version>\n    </dependency>\n\n\n\nEntity\nhibernate\u3068\u540c\u3058\u3082\u306e\u3092\u4f7f\u3046\u306e\u3067\u7701\u7565\u3002(jdbi\u306e\u5834\u5408\u306fJPA\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306f\u3044\u3089\u306a\u3044)\n\nResultSetMapper\nJDBI\u306e\u5834\u5408\u306f\u3001resultset\u3068\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002(String\u578b\u306a\u3069\u3092\u8fd4\u3059\u5834\u5408\u306f\u3082\u3061\u308d\u3093\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093)\npublic class PersonJdbiMapper implements ResultSetMapper<Person> {\n\n    @Override\n    public Person map(int index, ResultSet r, StatementContext ctx)\n            throws SQLException {\n        Person person = new Person();\n        person.setId(r.getInt(\"id\"));\n        person.setFullName(r.getString(\"fullName\"));\n        person.setJobTitle(r.getString(\"jobTitle\"));\n        return person;\n    }\n}\n\n\nDao\nJDBI\u306f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3060\u3051\u306b\u306a\u308a\u307e\u3059\u3002\n\nPersonJdbiDAO.java\npublic interface PersonJdbiDAO {\n\n    @SqlQuery(\"select id, fullName, jobTitle from people where id = :id\")\n    @Mapper(PersonJdbiMapper.class)\n    public Person findById(@Bind(\"id\") Long id);\n\n    @SqlQuery(\"select id, fullName, jobTitle from people\")\n    @Mapper(PersonJdbiMapper.class)\n    public List<Person> findAll();\n}\n\n\n\nResource\u30af\u30e9\u30b9\n\nPeopleJdbiResource.java\n@Path(\"/people/jndi\")\n@Produces(MediaType.APPLICATION_JSON)\npublic class PeopleJdbiResource {\n\n    private final PersonJdbiDAO peopleDAO;\n\n    public PeopleJdbiResource(PersonJdbiDAO peopleDAO) {\n        this.peopleDAO = peopleDAO;\n    }\n\n    @GET\n    @UnitOfWork\n    public List<Person> listPeople() {\n        return peopleDAO.findAll();\n    }\n\n    @GET\n    @UnitOfWork\n    @Path(\"/{personId}\")\n    public Person getPerson(@PathParam(\"personId\") LongParam personId) {\n        final Person person = peopleDAO.findById(personId.get());\n        if (person == null) {\n            throw new NotFoundException(\"{status:notfound}\");\n        }\n        return person;\n    }\n}\n\n\n\nApplication\u30af\u30e9\u30b9\nDBIFactory#build\u306e\u7b2c\u4e09\u5f15\u6570\u304chealth check\u6642\u306e\u540d\u524d\u306b\u306a\u308a\u307e\u3059\u3002\n    @Override\n    public void run(HelloWorldConfiguration configuration,\n            Environment environment) throws ClassNotFoundException {\n        final PersonDAO dao = new PersonDAO(hibernateBundle.getSessionFac\n       \u30fb\u30fb\u30fb\n        final DBIFactory factory = new DBIFactory();\n        final DBI jdbi = factory.build(environment,\n                configuration.getDataSourceFactory(), \"jdbi\");\n        PersonJdbiDAO jdbiDao = jdbi.onDemand(PersonJdbiDAO.class);\n        environment.jersey().register(new PeopleJdbiResource(jdbiDao));\n       \u30fb\u30fb\u30fb\n    }\n\n\n\u52d5\u4f5c\u78ba\u8a8d\nhibernate\u3068\u540c\u3058\u7d50\u679c\u304c\u8fd4\u3063\u3066\u304f\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n$ curl http://localhost:8080/people/jndi\n[{\"id\":1,\"fullName\":\"Coda Hale\",\"jobTitle\":\"Chief Wizard\"},{\"id\":2,\"fullName\":\"ko2ic\",\"jobTitle\":\"hoge\"}]\n\n$ curl http://localhost:8080/people/jndi/1\n{\"id\":1,\"fullName\":\"Coda Hale\",\"jobTitle\":\"Chief Wizard\"}\n\n\nHealth Check\njdbi\u306e\u5834\u5408\u3082\u3001bundle\u3092\u767b\u9332\u3059\u308b\u51e6\u7406\u306e\u5185\u90e8\u3067Health Check\u306e\u767b\u9332\u3082\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002(\u540d\u524d\u306fDBI\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u6642\u306b\u30e6\u30fc\u30b6\u304c\u4efb\u610f\u306e\u5024\u3092\u3064\u3051\u307e\u3059)\n\u306a\u306e\u3067\u3001\u74b0\u5883\u8a2d\u5b9a\u3067validationQuery\u306b\u8a18\u8ff0\u3057\u3066\u304a\u304f\u3060\u3051\u3067\u3001Health Check\u304c\u884c\u308f\u308c\u307e\u3059\u3002\n$ curl http://localhost:8081/healthcheck\n{\"deadlocks\":{\"healthy\":true},\"hibernate\":{\"healthy\":true},\"jdbi\":{\"healthy\":true}}\n\n\n\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nDropwizard with jdbi\u3067\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\n\n\n\u307e\u3068\u3081\n3\u56de\u306b\u6e21\u3063\u3066Dropwizard\u306e\u57fa\u672c\u3068\u601d\u308f\u308c\u308b\u3053\u3068\u3092\u52c9\u5f37\u304c\u3066\u3089\u3001\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nDropwizard\u306b\u3064\u3044\u3066\u8208\u5473\u3092\u6301\u305f\u308c\u305f\u65b9\u306f\u3001\u50d5\u306e\u8a18\u4e8b\u3088\u308a\u3082\u516c\u5f0f\u30b5\u30a4\u30c8\u3092\u8aad\u3093\u3060\u65b9\u304c\u3059\u3050\u306b\u7406\u89e3\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u81ea\u5206\u306e\u611f\u89e6\u3067\u306f\u3001\u7c21\u5358\u306aREST\u30a2\u30d7\u30ea\u3067\u3042\u308c\u3070\u3001\u7c21\u5358\u306b\u4f5c\u308c\u305d\u3046\u3060\u306a\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u9006\u306b\u5927\u898f\u6a21\u306a\u30a2\u30d7\u30ea\u3084\u753b\u9762\u306e\u3042\u308b\u30a2\u30d7\u30ea\u306e\u5834\u5408\u306b\u3001\u3069\u3046\u306a\u308b\u304b\u306f\u3001\u307e\u3060\u611f\u89e6\u3059\u3089\u63b4\u3081\u3066\u3044\u307e\u305b\u3093\u3002\n\uff08Spring Boot\u306a\u3089\u3001\u3069\u3046\u306a\u306e\u304b\u3082\u8a66\u3057\u305f\u3044\u3067\u3059\u3002\uff09\n\u6700\u5f8c\u306b\u300c\u3044\u307e\u3059\u3050\u63a1\u7528\u3059\u3079\u304d\u30fb\u30fb\u30fb\u300d\u3068\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u81ea\u5206\u306f\u5b9f\u969b\u306b\u4ed5\u4e8b\u3067\u4f7f\u3048\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u300c\u3044\u307e\u3059\u3050\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u63a1\u7528\u3057\u3066\u307b\u3057\u3044\u300d\u3057\u3001\u300c\u3082\u3063\u3068\u6709\u540d\u306b\u306a\u3063\u3066\u5e83\u307e\u308c\u3070\u5b9f\u969b\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3082\u5229\u7528\u3067\u304d\u308b\u304b\u3082\u300d\u3068\u601d\u3063\u3066\u8a18\u8ff0\u3057\u307e\u3057\u305f\u3002\n\u9762\u767d\u3044\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3060\u3068\u601d\u3046\u306e\u3067\u3001\u305c\u3072\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n[\u305d\u306e1](http://qiita.com/ko2ic/items/cfe5b2f4593b705f9463)\u3068[\u305d\u306e2](http://qiita.com/ko2ic/items/069c5f75823fd8964bfa)\u306e\u7d9a\u304d\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u4ee5\u4e0b\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n* hibernate\u3067\u306eDB\u30a2\u30af\u30bb\u30b9\u306e\u5b9f\u88c5\n* jdbi\u3067\u306eDB\u30a2\u30af\u30bb\u30b9\n\n# hibernate\u3067\u306eDB\u30a2\u30af\u30bb\u30b9\u306e\u5b9f\u88c5\n\n## maven\u8a2d\u5b9a\n\nDropwizard\u3067\u306fhibernate\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```pom.xml\n    <dependency>\n      <groupId>io.dropwizard</groupId>\n      <artifactId>dropwizard-hibernate</artifactId>\n      <version>${dropwizard.version}</version>\n    </dependency>\n```\n\n## Entity\n\n\u307e\u305a\u306f\u3088\u304f\u3042\u308bPOJO\u306aentity\u3092\u4f5c\u6210\n\n```Person.java\n@Entity\n@Table(name = \"people\")\n@NamedQueries({ @NamedQuery(name = \"com.github.ko2ic.core.Person.findAll\", query = \"SELECT p FROM Person p\")})\npublic class Person {\n\t@Id\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\n\tprivate long id;\n\n\t@Column(name = \"fullName\", nullable = false)\n\tprivate String fullName;\n\n\t@Column(name = \"jobTitle\", nullable = false)\n\tprivate String jobTitle;\n\n\tpublic long getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(long id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic String getFullName() {\n\t\treturn fullName;\n\t}\n\n\tpublic void setFullName(String fullName) {\n\t\tthis.fullName = fullName;\n\t}\n\n\tpublic String getJobTitle() {\n\t\treturn jobTitle;\n\t}\n\n\tpublic void setJobTitle(String jobTitle) {\n\t\tthis.jobTitle = jobTitle;\n\t}\n}\n```\n\n## Dao\n\nio.dropwizard.hibernate.AbstractDAO\u3092\u7d99\u627f\u3057\u3066\u4f5c\u308a\u307e\u3059\u3002\n\n```PersonDAO.java\npublic class PersonDAO extends AbstractDAO<Person> {\n\tpublic PersonDAO(SessionFactory factory) {\n\t\tsuper(factory);\n\t}\n\n\tpublic Optional<Person> findById(Long id) {\n\t\treturn Optional.fromNullable(get(id));\n\t}\n\n\tpublic Person create(Person person) {\n\t\treturn persist(person);\n\t}\n\n\tpublic List<Person> findAll() {\n\t\treturn list(namedQuery(\"com.github.ko2ic.core.Person.findAll\"));\n\t}\n}\n```\n\n## Resource\u30af\u30e9\u30b9\n\n@UnitOfWork\u3092\u8a18\u8ff0\u3059\u308b\u3068\u305d\u3053\u304c\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5883\u754c\u306b\u306a\u308a\u307e\u3059\u3002\n\n```PeopleResource.java\n@Path(\"/people\")\n@Produces(MediaType.APPLICATION_JSON)\npublic class PeopleResource {\n\n\tprivate final PersonDAO peopleDAO;\n\n\tpublic PeopleResource(PersonDAO peopleDAO) {\n\t\tthis.peopleDAO = peopleDAO;\n\t}\n\n\t@POST\n\t@UnitOfWork\n\tpublic Person createPerson(Person person) {\n\t\treturn peopleDAO.create(person);\n\t}\n\n\t@GET\n\t@UnitOfWork\n\tpublic List<Person> listPeople() {\n\t\treturn peopleDAO.findAll();\n\t}\n\n\t@GET\n\t@UnitOfWork\n\t@Path(\"/{personId}\")\n\tpublic Person getPerson(@PathParam(\"personId\") LongParam personId) {\n\t\tfinal Optional<Person> person = peopleDAO.findById(personId.get());\n\t\tif (!person.isPresent()) {\n\t\t\tthrow new NotFoundException(\"{status:notfound}\");\n\t\t}\n\t\treturn person.get();\n\t}\n}\n```\n\n## Application\u30af\u30e9\u30b9\n\n\u30d5\u30a3\u30fc\u30eb\u30c9\u3067Dropwizard\u306eabstract\u306aHibernateBundle\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u3001\u767b\u9332\u3057\u307e\u3059\u3002\n\n```HelloWorldApplication.java\n\n\tprivate final HibernateBundle<HelloWorldConfiguration> hibernateBundle = new HibernateBundle<HelloWorldConfiguration>(\n\t\t\tPerson.class) {\n\t\t@Override\n\t\tpublic DataSourceFactory getDataSourceFactory(\n\t\t\t\tHelloWorldConfiguration configuration) {\n\t\t\treturn configuration.getDataSourceFactory();\n\t\t}\n\t};\n\n\t@Override\n\tpublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n\t\t\u30fb\u30fb\u30fb\n\t\tbootstrap.addBundle(hibernateBundle);\n\t    \u30fb\u30fb\u30fb\n\t}\n\n\t@Override\n\tpublic void run(HelloWorldConfiguration configuration,\n\t\t\tEnvironment environment) throws ClassNotFoundException {\n       \u30fb\u30fb\u30fb\n\t\tfinal PersonDAO dao = new PersonDAO(hibernateBundle.getSessionFactory());\n\t\tenvironment.jersey().register(new PeopleResource(dao));\n       \u30fb\u30fb\u30fb\n\t}\n```\n\n\u74b0\u5883\u8a2d\u5b9a\u306bdatabase\u95a2\u9023\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```example.yml\ndatabase:\n\n  # the name of your JDBC driver\n  driverClass: org.h2.Driver\n\n  # the username\n  user: sa\n\n  # the password\n  password: sa\n\n  # the JDBC URL\n  url: jdbc:h2:target/example\n\n  # any properties specific to your JDBC driver:\n  properties:\n    charSet: UTF-8\n    hibernate.dialect: org.hibernate.dialect.H2Dialect\n\n  # the maximum amount of time to wait on an empty pool before throwing an exception\n  maxWaitForConnection: 1s\n\n  # the SQL query to run when validating a connection's liveness\n  validationQuery: \"/* MyApplication Health Check */ SELECT 1\"\n\n  # the minimum number of connections to keep open\n  minSize: 8\n\n  # the maximum number of connections to keep open\n  maxSize: 32\n\n  # whether or not idle connections should be validated\n  checkConnectionWhileIdle: false\n```\n\n## \u30b9\u30ad\u30fc\u30de\u4f5c\u6210\n\n\u307e\u305a\u306f\u3001[Dropwizard(Java)\u3067rails\u306e\u3088\u3046\u306bDB\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u3059\u308b]()\u3067\u66f8\u3044\u305f\u3088\u3046\u306bliquibase\u3067\u4f5c\u6210\u3057\u307e\u3059\u3002\nliquibase\u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u306f\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```migration.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog\n         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd\">\n\t<changeSet id=\"1\" author=\"ko2ic\">\n\t\t<createTable tableName=\"people\">\n\t\t\t<column name=\"id\" type=\"bigint\" autoIncrement=\"true\">\n\t\t\t\t<constraints primaryKey=\"true\" nullable=\"false\" />\n\t\t\t</column>\n\t\t\t<column name=\"fullName\" type=\"varchar(255)\">\n\t\t\t\t<constraints nullable=\"false\" />\n\t\t\t</column>\n\t\t\t<column name=\"jobTitle\" type=\"varchar(255)\" />\n\t\t</createTable>\n\t</changeSet>\n</databaseChangeLog>\n```\n\n```mvn package```\u3057\u3066\u3001\u30b9\u30ad\u30fc\u30de\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```\n$ java -jar target/spike-dropwizard-1.0-SNAPSHOT.jar  db migrate example.yml\n```\n\n## \u52d5\u4f5c\u78ba\u8a8d\n\n\u8d77\u52d5\u3059\u308b\u3068\u5148\u307b\u3069\u306e\u30ea\u30bd\u30fc\u30b9\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```\n\u30fb\u30fb\u30fb\n    GET     /people (com.github.ko2ic.resources.PeopleResource)\n    GET     /people/{personId} (com.github.ko2ic.resources.PeopleResource)\n    POST    /people (com.github.ko2ic.resources.PeopleResource)\n\u30fb\u30fb\u30fb\n\n```\n\n\u307e\u305a\u306f\u3001post\u3067\u30c7\u30fc\u30bf\u30922\u4ef6\u767b\u9332\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n$ curl -H \"Content-Type: application/json\" -X POST -d '{\"fullName\":\"Coda Hale\", \"jobTitle\" : \"Chief Wizard\" }' http://localhost:8080/people\n{\"id\":1,\"fullName\":\"Coda Hale\",\"jobTitle\":\"Chief Wizard\"}\n\n$ curl -H \"Content-Type: application/json\" -X POST -d '{\"fullName\":\"ko2ic\", \"jobTitle\" : \"hoge\" }' http://localhost:8080/people\n{\"id\":2,\"fullName\":\"ko2ic\",\"jobTitle\":\"hoge\"}\n```\n\n\u691c\u7d22\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n$ curl http://localhost:8080/people\n[{\"id\":1,\"fullName\":\"Coda Hale\",\"jobTitle\":\"Chief Wizard\"},{\"id\":2,\"fullName\":\"ko2ic\",\"jobTitle\":\"hoge\"}]\n\n$ curl http://localhost:8080/people/2\n{\"id\":2,\"fullName\":\"ko2ic\",\"jobTitle\":\"hoge\"}\n\n$ curl http://localhost:8080/people/3\n{status:notfound}\n```\n\n\u3061\u3083\u3093\u3068\u60f3\u5b9a\u901a\u308a\u306eJSON\u304c\u8fd4\u3063\u3066\u304d\u3066\u3044\u307e\u3059\u3002\n\n## Health Check\n\nhibernate\u306e\u5834\u5408\u306f\u3001bundle\u3092\u767b\u9332\u3059\u308b\u51e6\u7406\u306e\u5185\u90e8\u3067Health Check\u306e\u767b\u9332\u3082\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002(\u540d\u524d\u306fhibernate)\n\u306a\u306e\u3067\u3001\u74b0\u5883\u8a2d\u5b9a\u3067```validationQuery```\u306b\u8a18\u8ff0\u3057\u3066\u304a\u304f\u3060\u3051\u3067\u3001Health Check\u304c\u884c\u308f\u308c\u307e\u3059\u3002\ndeadlocks\u306b\u3064\u3044\u3066\u306f\u3001[\u305d\u306e1](http://qiita.com/ko2ic/items/cfe5b2f4593b705f9463#1-10)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```\n$ curl http://localhost:8081/healthcheck\n{\"deadlocks\":{\"healthy\":true},\"hibernate\":{\"healthy\":true}}\n```\n\n# jdbi\u3067\u306eDB\u30a2\u30af\u30bb\u30b9\n\n## maven\u8a2d\u5b9a\n\nDropwizard\u3067\u306fjdbi\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```pom.xml\n    <dependency>\n      <groupId>io.dropwizard</groupId>\n      <artifactId>dropwizard-jdbi</artifactId>\n      <version>${dropwizard.version}</version>\n    </dependency>\n```\n\n## Entity\n\nhibernate\u3068\u540c\u3058\u3082\u306e\u3092\u4f7f\u3046\u306e\u3067\u7701\u7565\u3002(jdbi\u306e\u5834\u5408\u306fJPA\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306f\u3044\u3089\u306a\u3044)\n\n## ResultSetMapper\n\nJDBI\u306e\u5834\u5408\u306f\u3001resultset\u3068\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002(String\u578b\u306a\u3069\u3092\u8fd4\u3059\u5834\u5408\u306f\u3082\u3061\u308d\u3093\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093)\n\n```\npublic class PersonJdbiMapper implements ResultSetMapper<Person> {\n\n\t@Override\n\tpublic Person map(int index, ResultSet r, StatementContext ctx)\n\t\t\tthrows SQLException {\n\t\tPerson person = new Person();\n\t\tperson.setId(r.getInt(\"id\"));\n\t\tperson.setFullName(r.getString(\"fullName\"));\n\t\tperson.setJobTitle(r.getString(\"jobTitle\"));\n\t\treturn person;\n\t}\n}\n```\n\n## Dao\n\nJDBI\u306f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3060\u3051\u306b\u306a\u308a\u307e\u3059\u3002\n\n```PersonJdbiDAO.java\npublic interface PersonJdbiDAO {\n\n\t@SqlQuery(\"select id, fullName, jobTitle from people where id = :id\")\n\t@Mapper(PersonJdbiMapper.class)\n\tpublic Person findById(@Bind(\"id\") Long id);\n\n\t@SqlQuery(\"select id, fullName, jobTitle from people\")\n\t@Mapper(PersonJdbiMapper.class)\n\tpublic List<Person> findAll();\n}\n```\n\n## Resource\u30af\u30e9\u30b9\n\n```PeopleJdbiResource.java\n@Path(\"/people/jndi\")\n@Produces(MediaType.APPLICATION_JSON)\npublic class PeopleJdbiResource {\n\n\tprivate final PersonJdbiDAO peopleDAO;\n\n\tpublic PeopleJdbiResource(PersonJdbiDAO peopleDAO) {\n\t\tthis.peopleDAO = peopleDAO;\n\t}\n\n\t@GET\n\t@UnitOfWork\n\tpublic List<Person> listPeople() {\n\t\treturn peopleDAO.findAll();\n\t}\n\n\t@GET\n\t@UnitOfWork\n\t@Path(\"/{personId}\")\n\tpublic Person getPerson(@PathParam(\"personId\") LongParam personId) {\n\t\tfinal Person person = peopleDAO.findById(personId.get());\n\t\tif (person == null) {\n\t\t\tthrow new NotFoundException(\"{status:notfound}\");\n\t\t}\n\t\treturn person;\n\t}\n}\n```\n\n## Application\u30af\u30e9\u30b9\n\nDBIFactory#build\u306e\u7b2c\u4e09\u5f15\u6570\u304chealth check\u6642\u306e\u540d\u524d\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\n\t@Override\n\tpublic void run(HelloWorldConfiguration configuration,\n\t\t\tEnvironment environment) throws ClassNotFoundException {\n\t\tfinal PersonDAO dao = new PersonDAO(hibernateBundle.getSessionFac\n       \u30fb\u30fb\u30fb\n\t\tfinal DBIFactory factory = new DBIFactory();\n\t\tfinal DBI jdbi = factory.build(environment,\n\t\t\t\tconfiguration.getDataSourceFactory(), \"jdbi\");\n\t\tPersonJdbiDAO jdbiDao = jdbi.onDemand(PersonJdbiDAO.class);\n\t\tenvironment.jersey().register(new PeopleJdbiResource(jdbiDao));\n       \u30fb\u30fb\u30fb\n    }\n```\n\n## \u52d5\u4f5c\u78ba\u8a8d\n\nhibernate\u3068\u540c\u3058\u7d50\u679c\u304c\u8fd4\u3063\u3066\u304f\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n```\n$ curl http://localhost:8080/people/jndi\n[{\"id\":1,\"fullName\":\"Coda Hale\",\"jobTitle\":\"Chief Wizard\"},{\"id\":2,\"fullName\":\"ko2ic\",\"jobTitle\":\"hoge\"}]\n\n$ curl http://localhost:8080/people/jndi/1\n{\"id\":1,\"fullName\":\"Coda Hale\",\"jobTitle\":\"Chief Wizard\"}\n```\n\n## Health Check\n\njdbi\u306e\u5834\u5408\u3082\u3001bundle\u3092\u767b\u9332\u3059\u308b\u51e6\u7406\u306e\u5185\u90e8\u3067Health Check\u306e\u767b\u9332\u3082\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002(\u540d\u524d\u306fDBI\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u6642\u306b\u30e6\u30fc\u30b6\u304c\u4efb\u610f\u306e\u5024\u3092\u3064\u3051\u307e\u3059)\n\u306a\u306e\u3067\u3001\u74b0\u5883\u8a2d\u5b9a\u3067```validationQuery```\u306b\u8a18\u8ff0\u3057\u3066\u304a\u304f\u3060\u3051\u3067\u3001Health Check\u304c\u884c\u308f\u308c\u307e\u3059\u3002\n\n```\n$ curl http://localhost:8081/healthcheck\n{\"deadlocks\":{\"healthy\":true},\"hibernate\":{\"healthy\":true},\"jdbi\":{\"healthy\":true}}\n```\n\n## \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\n\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n* [Dropwizard with jdbi\u3067\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3](http://qiita.com/ko2ic/items/526ae7b99d1781bb1a05)\n\n# \u307e\u3068\u3081\n\n3\u56de\u306b\u6e21\u3063\u3066Dropwizard\u306e\u57fa\u672c\u3068\u601d\u308f\u308c\u308b\u3053\u3068\u3092\u52c9\u5f37\u304c\u3066\u3089\u3001\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nDropwizard\u306b\u3064\u3044\u3066\u8208\u5473\u3092\u6301\u305f\u308c\u305f\u65b9\u306f\u3001\u50d5\u306e\u8a18\u4e8b\u3088\u308a\u3082[\u516c\u5f0f\u30b5\u30a4\u30c8](https://dropwizard.github.io/dropwizard/index.html)\u3092\u8aad\u3093\u3060\u65b9\u304c\u3059\u3050\u306b\u7406\u89e3\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u81ea\u5206\u306e\u611f\u89e6\u3067\u306f\u3001\u7c21\u5358\u306aREST\u30a2\u30d7\u30ea\u3067\u3042\u308c\u3070\u3001\u7c21\u5358\u306b\u4f5c\u308c\u305d\u3046\u3060\u306a\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u9006\u306b\u5927\u898f\u6a21\u306a\u30a2\u30d7\u30ea\u3084\u753b\u9762\u306e\u3042\u308b\u30a2\u30d7\u30ea\u306e\u5834\u5408\u306b\u3001\u3069\u3046\u306a\u308b\u304b\u306f\u3001\u307e\u3060\u611f\u89e6\u3059\u3089\u63b4\u3081\u3066\u3044\u307e\u305b\u3093\u3002\n\uff08Spring Boot\u306a\u3089\u3001\u3069\u3046\u306a\u306e\u304b\u3082\u8a66\u3057\u305f\u3044\u3067\u3059\u3002\uff09\n\n\u6700\u5f8c\u306b\u300c\u3044\u307e\u3059\u3050\u63a1\u7528\u3059\u3079\u304d\u30fb\u30fb\u30fb\u300d\u3068\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u81ea\u5206\u306f\u5b9f\u969b\u306b\u4ed5\u4e8b\u3067\u4f7f\u3048\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u300c\u3044\u307e\u3059\u3050\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u63a1\u7528\u3057\u3066\u307b\u3057\u3044\u300d\u3057\u3001\u300c\u3082\u3063\u3068\u6709\u540d\u306b\u306a\u3063\u3066\u5e83\u307e\u308c\u3070\u5b9f\u969b\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3082\u5229\u7528\u3067\u304d\u308b\u304b\u3082\u300d\u3068\u601d\u3063\u3066\u8a18\u8ff0\u3057\u307e\u3057\u305f\u3002\n\n\u9762\u767d\u3044\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3060\u3068\u601d\u3046\u306e\u3067\u3001\u305c\u3072\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n", "tags": ["Java", "dropwizard"]}