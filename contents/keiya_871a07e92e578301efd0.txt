{"context": " More than 1 year has passed since last update.\u30c9\u30ed\u30fc\u30f3 X5SW \u306eFPV Camera\u306f\u516c\u5f0fiPhone/Android\u30a2\u30d7\u30ea\u304b\u3089\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u5de5\u592b\u3059\u308b\u3068PC\u304b\u3089\u3082\u95b2\u89a7\u3067\u304d\u307e\u3059\u3002\u305d\u306e\u65b9\u6cd5\u306f\n\nPC\u3067\u30c9\u30ed\u30fc\u30f3\u306bWiFi\u63a5\u7d9a\n\nhttp://192.168.1.1/request_av.cgi \u306b\u30a2\u30af\u30bb\u30b9\n\nvar id=40463458; \u306e\u90e8\u5206\u306e\u6570\u5b57\u3092\u8a18\u61b6\u3059\u308b\u3002\n\nhttp://192.168.1.1/Videostream.cgi?User=admin&pwd=&id=40463458 \u5148\u307b\u3069\u8a18\u61b6\u3057\u305fID\u3068\u540c\u3058ID\u3092URL\u306b\u5165\u308c\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\n\n\nMotionJPEG\u3067\u964d\u3063\u3066\u304f\u308b\u3002Firefox\u3067\u306f\u76f4\u306b\u898b\u308c\u305f\u3002Chrome\u3067\u306f\u305f\u3060\u306ejpeg\u3068\u3055\u308c\u308b\u3089\u3057\u304f\u7121\u7406\u3060\u3063\u305f\u3002\n\n\nDigest\u8a8d\u8a3c\u3092\u6c42\u3081\u3089\u308c\u305f\u3068\u304d\u306f\u30e6\u30fc\u30b6\u30fc\u540d admin \u3067\u30d1\u30b9\u30ef\u30fc\u30c9\u306f\u7a7a\u767d\n\n\n\u8868\u793a\u3059\u308b\n\u3053\u308c\u3092\u624b\u52d5\u3067\u3084\u308b\u306e\u306f\u9762\u5012\u306a\u306e\u3067\u3001JSONP(\u3082\u3069\u304d)\u3068iframe\u3067Same origin policy\u3092\u56de\u907f\u3057\u3064\u3064\u8868\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3002\u4ee5\u4e0b\u306eHTML\u3092\u30ed\u30fc\u30ab\u30eb\u306b\u4fdd\u5b58\u3057\u3066Firefox\u3068\u304b\u3067\u958b\u304f\u3068\u3001\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u4e2d\u7d99\u304c\u898b\u3089\u308c\u308b\u3002\n<!DOCTYPE html>\n<body onLoad=\"start()\">\n<script src=\"http://192.168.1.1/request_av.cgi\"></script>\n<script>\nfunction start(){\nconsole.log(id);\ndocument.getElementById(\"fpv\").src = \"http://192.168.1.1/Videostream.cgi?User=admin&pwd=&id=\"+id;\n}\n</script>\n<iframe src=\"\" id=\"fpv\" width=\"640\" height=\"480\" style=\"border:none;overflow:hidden;\" scrolling=\"no\"></iframe>\n</body>\n\n\n\u8907\u6570\u63a5\u7d9a\u306f\u3067\u304d\u308b\u304c\u3001\u3064\u306a\u3052\u3070\u3064\u306a\u3050\u307b\u3069\u304d\u3063\u3068\u91cd\u304f\u306a\u308b\u3002\nDigest\u8a8d\u8a3c\u3092\u6c42\u3081\u3089\u308c\u305f\u3068\u304d\u306f\u30e6\u30fc\u30b6\u30fc\u540d admin \u3067\u30d1\u30b9\u30ef\u30fc\u30c9\u306f\u7a7a\u767d\u306b\u3059\u308b\u3002\n\n\u8868\u793a\u3092\u30ea\u30ec\u30fc\u3059\u308b\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\nfrom socketserver import ThreadingMixIn\nimport threading\nimport urllib.request # high-level http client\nimport re\nimport http.client # low-level http client for continuous stream\n\nBUFSZ = 1024\nHOST=\"192.168.1.1\"\nPORT=\"80\"\nurl_reqav = \"http://{0}:{1}/request_av.cgi?User=admin&pwd=\".format(HOST,PORT)\nurl_reqvs = \"/Videostream.cgi?User=admin&pwd=&id={0}\"\nid_pat = re.compile(\"\\d+\")\n\n\n# 1\u5bfe1 \u30d6\u30e9\u30a6\u30b6 <=> \u30c9\u30ed\u30fc\u30f3\n# \u63a5\u7d9a\u306e\u4f8b\nclass Handler(BaseHTTPRequestHandler):\n\n    def do_GET(self):\n        with urllib.request.urlopen(url=url_reqav) as resp:\n            id_line = resp.readlines()[1].decode(\"utf8\")\n            self.id_num = id_pat.search(id_line).group(0)\n\n            self.send_response(200)\n            self.send_header('Content-type', 'multipart/x-mixed-replace;boundary=ipcamera')\n            self.end_headers()\n\n            buf = bytearray(BUFSZ)\n\n            con = http.client.HTTPConnection(\"{0}:{1}\".format(HOST,PORT))\n            con.request(\"GET\",url_reqvs.format(self.id_num))\n            resp = con.getresponse()\n\n            while not resp.closed:\n                buf = resp.read(BUFSZ)\n                self.wfile.write(buf)\n\nclass ThreadedHTTPServer(ThreadingMixIn, HTTPServer):\n    \"\"\"Handle requests in a separate thread.\"\"\"\n\nif __name__ == '__main__':\n    server = ThreadedHTTPServer(('localhost', 8080), Handler)\n    print ('Starting server, use <Ctrl-C> to stop')\n    server.serve_forever()\n\n\u30db\u30f3\u30c8\u306f\u4e2d\u7d99\u3064\u3044\u3067\u306b\u4fdd\u5b58\u3082\u3057\u305f\u3044\u3002\u305d\u306e\u305f\u3081\u306b\u306f\u74b0\u72b6\u30d0\u30c3\u30d5\u30a1\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u6c17\u304c\u3059\u308b\u3002\n\n\n\u8ffd\u8a18\nPython\u3092\u4f7f\u308f\u305a\u3001wget\u3068\u30aa\u30ea\u30b8\u30ca\u30eb\u306eC\u8a00\u8a9e\u88fd MJPEG \u30b9\u30d7\u30ea\u30c3\u30bf\u30fc\u3092\u4f7f\u3046\u3068\u3001VLC\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u898b\u306a\u304c\u3089\u4fdd\u5b58\u3082\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u53c2\u7167\u3002\ncc -O3 separate.c \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u3001 bash syma.sh \u3092\u5b9f\u884c\u3002\n\u30c7\u30d0\u30c3\u30b0\u4e0d\u8db3\u3067\u4e00\u5ea6\u76ee\u306f\u6620\u3089\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u9589\u3058\u3066\u518d\u5ea6\u30c8\u30e9\u30a4\u306e\u3053\u3068\u3002\nhttps://gist.github.com/keiya/cb9e2901ccc1e813c634\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_FRAME_SIZE 256*1024 // KB\n#define CONTENT_LENGTH \"Content-Length: \"\n#define PAYLOAD \"\\r\\n\"\n\nint main()\n{\n    char buf[MAX_FRAME_SIZE];\n    //size_t rs = fread(buf, MAX_FRAME_SIZE, 1, stdin);\n    // parse content-length\n    int length;\n    int seq = 0;\n    while (1) {\n        while( fgets(buf, MAX_FRAME_SIZE, stdin) != NULL )\n        {\n            char *length_start = strstr(buf,CONTENT_LENGTH);\n            if (length_start == NULL) continue;\n            char *length_end = strstr(length_start,\"\\r\\n\");\n            int tmp = *length_end;\n            *length_end = 0;\n            length_start += strlen(CONTENT_LENGTH);\n            *length_end = tmp;\n            length = atoi(length_start);\n            break;\n        }\n\n        while( fgets(buf, MAX_FRAME_SIZE, stdin) != NULL )\n        {\n            // parse body\n            char *payload = strstr(buf,PAYLOAD);\n            if (payload != buf) continue; // if not start with \"\\r\\n\"\n            break;\n        }\n        if (fread(buf,length,1,stdin) == 0) break;\n        fwrite(buf,length,1,stdout);\n\n        char fname[16];\n        snprintf(fname,15,\"%05d.jpg\",seq++);\n        FILE *out = fopen(fname,\"w\");\n        fwrite(buf,length,1,out);\n        fclose(out);\n    }\n}\n\nPARSER=\"$HOME/hgfs/Dropbox/symafpv/a.out\"\nHOST=\"http://192.168.1.1:80\"\nDATE=`date +%F_%T`\nmkdir -p $DATE\ncd $DATE\nID=`wget -q -O - \"$HOST/request_av.cgi?User=admin&pwd=\" | grep \"var id=\" | grep -o -P \"[0-9]+\"`\nwget -q -O - \"$HOST/Videostream.cgi?User=admin&pwd=&id=$ID\" | $PARSER | vlc /dev/stdin\navconv -framerate 15 -i %05d.jpg -codec copy encoded15.mov\nrm *.jpg\n\n\n\u30c9\u30ed\u30fc\u30f3 X5SW \u306eFPV Camera\u306f\u516c\u5f0fiPhone/Android\u30a2\u30d7\u30ea\u304b\u3089\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u5de5\u592b\u3059\u308b\u3068PC\u304b\u3089\u3082\u95b2\u89a7\u3067\u304d\u307e\u3059\u3002\u305d\u306e\u65b9\u6cd5\u306f\n\n* PC\u3067\u30c9\u30ed\u30fc\u30f3\u306bWiFi\u63a5\u7d9a\n* http://192.168.1.1/request_av.cgi \u306b\u30a2\u30af\u30bb\u30b9\n* `var id=40463458;` \u306e\u90e8\u5206\u306e\u6570\u5b57\u3092\u8a18\u61b6\u3059\u308b\u3002\n* http://192.168.1.1/Videostream.cgi?User=admin&pwd=&id=40463458 \u5148\u307b\u3069\u8a18\u61b6\u3057\u305fID\u3068\u540c\u3058ID\u3092URL\u306b\u5165\u308c\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\n    * MotionJPEG\u3067\u964d\u3063\u3066\u304f\u308b\u3002Firefox\u3067\u306f\u76f4\u306b\u898b\u308c\u305f\u3002Chrome\u3067\u306f\u305f\u3060\u306ejpeg\u3068\u3055\u308c\u308b\u3089\u3057\u304f\u7121\u7406\u3060\u3063\u305f\u3002\n* **Digest\u8a8d\u8a3c\u3092\u6c42\u3081\u3089\u308c\u305f\u3068\u304d\u306f\u30e6\u30fc\u30b6\u30fc\u540d `admin` \u3067\u30d1\u30b9\u30ef\u30fc\u30c9\u306f\u7a7a\u767d**\n\n# \u8868\u793a\u3059\u308b\n\u3053\u308c\u3092\u624b\u52d5\u3067\u3084\u308b\u306e\u306f\u9762\u5012\u306a\u306e\u3067\u3001JSONP(\u3082\u3069\u304d)\u3068iframe\u3067Same origin policy\u3092\u56de\u907f\u3057\u3064\u3064\u8868\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3002\u4ee5\u4e0b\u306eHTML\u3092\u30ed\u30fc\u30ab\u30eb\u306b\u4fdd\u5b58\u3057\u3066Firefox\u3068\u304b\u3067\u958b\u304f\u3068\u3001\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u4e2d\u7d99\u304c\u898b\u3089\u308c\u308b\u3002\n\n\n```html\n<!DOCTYPE html>\n<body onLoad=\"start()\">\n<script src=\"http://192.168.1.1/request_av.cgi\"></script>\n<script>\nfunction start(){\nconsole.log(id);\ndocument.getElementById(\"fpv\").src = \"http://192.168.1.1/Videostream.cgi?User=admin&pwd=&id=\"+id;\n}\n</script>\n<iframe src=\"\" id=\"fpv\" width=\"640\" height=\"480\" style=\"border:none;overflow:hidden;\" scrolling=\"no\"></iframe>\n</body>\n```\n\n![Screenshot from 2015-12-28 13:54:39.png](https://qiita-image-store.s3.amazonaws.com/0/19148/a71c12da-a2d7-5a46-132f-cb788e7bd939.png)\n\n\u8907\u6570\u63a5\u7d9a\u306f\u3067\u304d\u308b\u304c\u3001\u3064\u306a\u3052\u3070\u3064\u306a\u3050\u307b\u3069\u304d\u3063\u3068\u91cd\u304f\u306a\u308b\u3002\nDigest\u8a8d\u8a3c\u3092\u6c42\u3081\u3089\u308c\u305f\u3068\u304d\u306f\u30e6\u30fc\u30b6\u30fc\u540d `admin` \u3067\u30d1\u30b9\u30ef\u30fc\u30c9\u306f\u7a7a\u767d\u306b\u3059\u308b\u3002\n\n# \u8868\u793a\u3092\u30ea\u30ec\u30fc\u3059\u308b\n\n```py3\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\nfrom socketserver import ThreadingMixIn\nimport threading\nimport urllib.request # high-level http client\nimport re\nimport http.client # low-level http client for continuous stream\n\nBUFSZ = 1024\nHOST=\"192.168.1.1\"\nPORT=\"80\"\nurl_reqav = \"http://{0}:{1}/request_av.cgi?User=admin&pwd=\".format(HOST,PORT)\nurl_reqvs = \"/Videostream.cgi?User=admin&pwd=&id={0}\"\nid_pat = re.compile(\"\\d+\")\n\n\n# 1\u5bfe1 \u30d6\u30e9\u30a6\u30b6 <=> \u30c9\u30ed\u30fc\u30f3\n# \u63a5\u7d9a\u306e\u4f8b\nclass Handler(BaseHTTPRequestHandler):\n\n    def do_GET(self):\n        with urllib.request.urlopen(url=url_reqav) as resp:\n            id_line = resp.readlines()[1].decode(\"utf8\")\n            self.id_num = id_pat.search(id_line).group(0)\n \n            self.send_response(200)\n            self.send_header('Content-type', 'multipart/x-mixed-replace;boundary=ipcamera')\n            self.end_headers()\n\n            buf = bytearray(BUFSZ)\n\n            con = http.client.HTTPConnection(\"{0}:{1}\".format(HOST,PORT))\n            con.request(\"GET\",url_reqvs.format(self.id_num))\n            resp = con.getresponse()\n\n            while not resp.closed:\n                buf = resp.read(BUFSZ)\n                self.wfile.write(buf)\n\nclass ThreadedHTTPServer(ThreadingMixIn, HTTPServer):\n    \"\"\"Handle requests in a separate thread.\"\"\"\n\nif __name__ == '__main__':\n    server = ThreadedHTTPServer(('localhost', 8080), Handler)\n    print ('Starting server, use <Ctrl-C> to stop')\n    server.serve_forever()\n```\n\n\u30db\u30f3\u30c8\u306f\u4e2d\u7d99\u3064\u3044\u3067\u306b\u4fdd\u5b58\u3082\u3057\u305f\u3044\u3002\u305d\u306e\u305f\u3081\u306b\u306f\u74b0\u72b6\u30d0\u30c3\u30d5\u30a1\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u6c17\u304c\u3059\u308b\u3002\n\n![Screenshot from 2015-12-28 21:58:48.png](https://qiita-image-store.s3.amazonaws.com/0/19148/ea90aa9d-444d-bbaf-56d1-14432418fb28.png)\n\n\n# \u8ffd\u8a18\nPython\u3092\u4f7f\u308f\u305a\u3001wget\u3068\u30aa\u30ea\u30b8\u30ca\u30eb\u306eC\u8a00\u8a9e\u88fd MJPEG \u30b9\u30d7\u30ea\u30c3\u30bf\u30fc\u3092\u4f7f\u3046\u3068\u3001VLC\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u898b\u306a\u304c\u3089\u4fdd\u5b58\u3082\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u53c2\u7167\u3002\n`cc -O3 separate.c` \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u3001 `bash syma.sh` \u3092\u5b9f\u884c\u3002\n\u30c7\u30d0\u30c3\u30b0\u4e0d\u8db3\u3067\u4e00\u5ea6\u76ee\u306f\u6620\u3089\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u9589\u3058\u3066\u518d\u5ea6\u30c8\u30e9\u30a4\u306e\u3053\u3068\u3002\nhttps://gist.github.com/keiya/cb9e2901ccc1e813c634\n\n```c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MAX_FRAME_SIZE 256*1024 // KB\n#define CONTENT_LENGTH \"Content-Length: \"\n#define PAYLOAD \"\\r\\n\"\n\nint main()\n{\n    char buf[MAX_FRAME_SIZE];\n    //size_t rs = fread(buf, MAX_FRAME_SIZE, 1, stdin);\n    // parse content-length\n    int length;\n    int seq = 0;\n    while (1) {\n        while( fgets(buf, MAX_FRAME_SIZE, stdin) != NULL )\n        {\n            char *length_start = strstr(buf,CONTENT_LENGTH);\n            if (length_start == NULL) continue;\n            char *length_end = strstr(length_start,\"\\r\\n\");\n            int tmp = *length_end;\n            *length_end = 0;\n            length_start += strlen(CONTENT_LENGTH);\n            *length_end = tmp;\n            length = atoi(length_start);\n            break;\n        }\n\n        while( fgets(buf, MAX_FRAME_SIZE, stdin) != NULL )\n        {\n            // parse body\n            char *payload = strstr(buf,PAYLOAD);\n            if (payload != buf) continue; // if not start with \"\\r\\n\"\n            break;\n        }\n        if (fread(buf,length,1,stdin) == 0) break;\n        fwrite(buf,length,1,stdout);\n\n        char fname[16];\n        snprintf(fname,15,\"%05d.jpg\",seq++);\n        FILE *out = fopen(fname,\"w\");\n        fwrite(buf,length,1,out);\n        fclose(out);\n    }\n}\n```\n```bash\nPARSER=\"$HOME/hgfs/Dropbox/symafpv/a.out\"\nHOST=\"http://192.168.1.1:80\"\nDATE=`date +%F_%T`\nmkdir -p $DATE\ncd $DATE\nID=`wget -q -O - \"$HOST/request_av.cgi?User=admin&pwd=\" | grep \"var id=\" | grep -o -P \"[0-9]+\"`\nwget -q -O - \"$HOST/Videostream.cgi?User=admin&pwd=&id=$ID\" | $PARSER | vlc /dev/stdin\navconv -framerate 15 -i %05d.jpg -codec copy encoded15.mov\nrm *.jpg\n\n```\n", "tags": ["drone", "WiFi", "fpv"]}