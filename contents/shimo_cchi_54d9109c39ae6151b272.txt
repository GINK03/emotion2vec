{"context": "\u3053\u306e\u56de\u3067\u300cRubic\u3067GR-CITRUS\u306emruby\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u4e8b\u59cb\u3081\u300d\u306f\u6700\u5f8c\u3067\u3059\u3002\n\u4eca\u307e\u3067\u306e\u3053\u3068\u3092\u8e0f\u307e\u3048\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u9ce9\u6642\u8a08\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\u52d5\u4f5c\n\u52d5\u4f5c\u306f\u5358\u7d14\u306b\n\n\u8d77\u52d5\u6642\u3001NTP\u3067\u6642\u523b\u3092\u53d6\u5f97\nGR-CITRUS\u306e\u6642\u8a08\u3092\u8a2d\u5b9a\n\uff11\u6642\u9593\u3054\u3068\u306b\u6642\u523b\u306eMP3\u30d5\u30a1\u30a4\u30eb\u3092\u3057\u3083\u3079\u308b\n\n\u3068\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u5358\u7d14\uff01\n\n\u4eca\u56de\u4f7f\u3046\u3082\u306e\n\nGR-CITRUS\nWA-MIKAN\nMicroSD\u30ab\u30fc\u30c9\n\u5727\u96fb\u7d20\u5b50\u304b\u30b9\u30d4\u30fc\u30ab\u30fc\n\u30d6\u30ec\u30c3\u30c9\u30dc\u30fc\u30c9\n\u30d6\u30ec\u30c3\u30c9\u30dc\u30fc\u30c9\u30fb\u30b8\u30e3\u30f3\u30d1\u30fc\u30b3\u30fc\u30c9\uff08\u30aa\u30b9\uff0d\u30ef\u30cb\u30b0\u30c1\uff09\u00d7\u9069\u5f53\n\n\n\u97f3\u58f0\u96c6\u3081\n\u307e\u305a\u306f\u3001\u6642\u5831\u306e\u5143\u3068\u306a\u308b\u97f3\u58f0\u7d20\u6750\u3092\u96c6\u3081\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30d5\u30ea\u30fc\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30bd\u30d5\u30c8\u3084\u30b5\u30a4\u30c8\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u5229\u7528\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n\nTextTalk\n\nSofTalk\n\u3068\u304b\n\n\u5b66\u8853\u7814\u7a76\u76ee\u7684\u306a\u3089\u3070NICT\u306e\u6749\u6d66\u5b54\u660e\u3055\u3093\u304c\u958b\u767a\u3055\u308c\u305frospeex\u306a\u3093\u3066\u3044\u3046\u306e\u3082\u8a66\u305b\u307e\u3059\u3002\n\nrospeex\n\nK. Sugiura, Y. Shiga, H. Kawai, T. Misu and C. Hori: \"A Cloud Robotics Approach towards Dialogue-Oriented Robot Speech,\" Advanced Robotics, Vol. 29, Issue 7, pp. 449-456, 2015.\n\u6709\u6599\u306e\u3082\u306e\u306a\u3089\u3082VOICEROID\u3044\u3044\u3067\u3059\u306d\n\nVOICEROID\n\n\n\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\n\u4e0a\u8a18\u30bd\u30d5\u30c8\u3092\u4f7f\u3044\u4ee5\u4e0b\u30bb\u30ea\u30d5\u7528\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\n\n\n\n\u30d5\u30a1\u30a4\u30eb\u540d\n\u7528\u9014\n\u30bb\u30ea\u30d5\n\n\n\n\n0.mp3\uff5e23.mp3\n\u6642\u5831\u7528\u306emp3\n\u300c0\u6642\u306a\u306e\u3067\u3059\u300d\u300c15\u6642\u3067\u304a\u3084\u3064\u306e\u6642\u9593\u3067\u3059\u300d\u3068\u304b\n\n\nnow.mp3\n\u6642\u5831\u7528\u524d\u7f6e\u304d\u7528\u306emp3\n\u300c\u73fe\u5728\u306e\u6642\u523b\u306f\u300d\u3068\u304b\n\n\n\nWA-MIKAN\u306eSD\u30ab\u30fc\u30c9\u76f4\u4e0b\u306b\u4ee5\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u30b9\u30d4\u30fc\u30ab\u30fc\u3082\u3057\u304f\u306f\u5727\u96fb\u7d20\u5b50\u3068\u3064\u306a\u3052\u308b\n\u7b2c2\u56de\u306e\u6642\u3068\u540c\u3058\u3088\u3046\u306b\u3001GR\uff0dCITRUS\u3068\u5727\u96fb\u7d20\u5b50\uff08\u307e\u305f\u306f\u30b9\u30d4\u30fc\u30ab\u30fc\uff09\u3092\u63a5\u7d9a\u3057\u307e\u3059\u3002\n\n\n\nCITRUS\u306e\u7aef\u5b50\u756a\u53f7\n\u63a5\u7d9a\u5148\n\n\n\n\n0\n\u5727\u96fb\u7d20\u5b50\u307e\u305f\u306f\u30b9\u30d4\u30fc\u30ab\u30fc\u306e\uff0b\n\n\nGND\n\u5727\u96fb\u7d20\u5b50\u307e\u305f\u306f\u30b9\u30d4\u30fc\u30ab\u30fc\u306e\u2015\n\n\n\n\nRubic\u306b\u66f8\u304d\u8fbc\u307f\nRuby\u4f7f\u3044\u3058\u3083\u306a\u3044\u306e\u3067\u306b\u308f\u304b\u3067\u3059\u304c\u4e00\u5fdc\u30af\u30e9\u30b9\u3063\u307d\u304f\u66f8\u304d\u307e\u3057\u305f\u3002\n\nmruby-time\u4f7f\u7528\u7248\nmrbgems\u306emruby-time\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u306a\u3044\u5834\u5408\u306f\u7b2c4\u56de\u306e\u8a18\u4e8b\u306b\u5f93\u3063\u3066mruby-time\u3092\u5165\u308c\u308b\u304b\u3001\u307e\u305f\u306f\u6b21\u9805\u306emruby-time\u3092\u4f7f\u7528\u3057\u306a\u3044\u7248\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\nmain.rb\n#!mruby\nSSID=\"\u3042\u306a\u305f\u306eSSID\"\nPASS=\"\u3042\u306a\u305f\u306ePASS\"\nclass Cts_ntp\n @@NTP_PACKET_SIZE = 48\n @@timeZone = 9 #Tokyo\n @@pollIntv = 150   # poll every this many ms\n @@maxPoll = 15     # poll up to this many times\n @@timeServer=\"129.6.15.28\"  #time.nist.gov\n#@@timeServer=\"132.163.4.101\" #time-a.timefreq.bldrdoc.gov\n @@sendport = 123\n @@localport = 8788\n\n def initialize(params)\n   @wifi          = params[:wifi] || WiFi\n   @wifiport      = params[:wifiport] || 1\n   @timeserver    = params[:timeserver] || @@timeServer\n   @sendport      = params[:sendport] || @@sendport \n   @localport     = params[:localport] || @@localport\n end\n def wifi\n  @wifi\n end\n def wifiport\n  @wifiport\n end\n def timeserver\n  @timeserver\n end\n def localport\n  @localport\n end\n def sendport\n  @sendport\n end\n\n def sendPacket\n  packetBuffer = Array.new(@@NTP_PACKET_SIZE , 0)\n  packetBuffer[0] = 0b11100011   # LI, Version, Mode , 0xE3\n  packetBuffer[1] = 0     # Stratum, or type of clock\n  packetBuffer[2] = 6     # Polling Interval\n  packetBuffer[3] = 0xEC  # Peer Clock Precision\n  packetBuffer[12]  = 49\n  packetBuffer[13]  = 0x4E\n  packetBuffer[14]  = 49\n  packetBuffer[15]  = 52  \n  binary = packetBuffer[0].chr\n  for num in 1..@@NTP_PACKET_SIZE-1 do\n      binary += packetBuffer[num].chr\n  end\n  @wifi.udpOpen(@wifiport, @timeserver, @sendport, @localport)\n  @wifi.send(@wifiport,binary)\n end\n\n def receivePacket\n  @array = @wifi.recv(@wifiport)\n  @@maxPoll.times do\n    delay(@@pollIntv)\n    if (@array[0] != nil) then\n        if (@array[0] >= 0) then\n            if (@array.length == @@NTP_PACKET_SIZE) then\n                break\n            end  \n        end\n    end\n    @array = @wifi.recv(@wifiport) \n  end\n\n  if @array.length != @@NTP_PACKET_SIZE then\n    \"receive error\"\n  else\n    time = @array[40]\n    for i in 1..3 do\n     time = time << 8 | @array[40+i]\n    end\n    @unixTime = time - 2208988800\n    @unixTimeJST = @unixTime + (@@timeZone * 60 * 60)\n    \"receive ok\"\n  end\n end\n def unixTime\n   @unixTime\n end\n def unixTimeJST\n   @unixTimeJST\n end\n def packet\n    @array\n end    \nend\n\n#Main\n\nUsb = Serial.new(0)\n\n#WiFi PART\n#ESP8266\u3092\u4e00\u5ea6\u505c\u6b62\u3055\u305b\u308b(\u30ea\u30bb\u30c3\u30c8\u3068\u540c\u3058)\npinMode(5,1)\ndigitalWrite(5,0) # LOW:Disable\ndelay 500\ndigitalWrite(5,1) # LOW:Disable\n\nif( System.useWiFi() == 0)then\n  Usb.println \"WiFi Card can't use.\"\n  System.exit() \nend\n\nUsb.println \"WiFi Ready\"\nUsb.println \"WiFi disconnect\"\nUsb.println WiFi.disconnect\nUsb.println \"WiFi Mode Setting\"\nUsb.println WiFi.setMode 3 #Station-Mode & SoftAPI-Mode\nUsb.println \"WiFi ipconfig\"\nUsb.println WiFi.ipconfig\nUsb.println \"WiFi connecting\"\ncon=WiFi.connect(SSID,PASS)\nUsb.println con\nif (con != \"WIFI CONNECTED\\r\\nWIFI GOT IP\\r\\n\\r\\nOK\\r\\n\") then\n  System.exit() \nend    \nUsb.println \"WiFi multiConnect Set\"\nUsb.println WiFi.multiConnect 1\n\n#NTP PART\nUsb.println \"Ntp new\"\nntp=Cts_ntp.new(wifi:WiFi,wifiport:1)\nUsb.println \"Send Packet\"\nntp.sendPacket\nUsb.println \"Receive Packet\"\nUsb.println ntp.receivePacket\nUsb.println ntp.packet.to_s\nUsb.println ntp.unixTimeJST.to_s\nWiFi.cClose(1)\n#UNIX TIME\nt = Time.at(ntp.unixTimeJST)\nUsb.println t.to_s\n\n#RTC PART\nUsb.println \"Rtc init\"\nUsb.println Rtc.init().to_s\nUsb.println Rtc.setTime([t.year,t.month,t.day,t.hour,t.min,t.sec]).to_s\n\n#LOOP PART\nwhile true do\n ct=Rtc.getTime()\n Usb.println ct.to_s\n if (ct[4]==0 && ct[5]==0) then\n    if( System.useMP3(3,4) == 0)then\n      Usb.println \"MP3 can't use.\"\n      System.exit() \n    end\n    f = ct[3].to_s + \".mp3\" \n    Usb.println f\n    3.times do\n        led 1\n        Usb.print MP3.play \"now.mp3\"\n        delay(10)\n        Usb.print MP3.play f\n        led 0\n        delay(100)\n    end    \n end\n delay(10)\nend\n\n\n\nmruby-time\u3092\u4f7f\u7528\u3057\u306a\u3044\u7248\n\u3053\u3061\u3089\u306fmruby-time\u3092\u4f7f\u7528\u3057\u306a\u3044\u7248\u3067\u3059\u3002\u7d20\u306eGR-CITRUS\u3067\u52d5\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n\nmain.rb\n#!mruby\nSSID=\"\u3042\u306a\u305f\u306eSSID\"\nPASS=\"\u3042\u306a\u305f\u306ePASS\"\nclass Cts_ntp\n @@NTP_PACKET_SIZE = 48\n @@timeZone = 9 #Tokyo\n @@pollIntv = 150   # poll every this many ms\n @@maxPoll = 15     # poll up to this many times\n @@timeServer=\"129.6.15.28\"  #time.nist.gov\n#@@timeServer=\"132.163.4.101\" #time-a.timefreq.bldrdoc.gov\n @@sendport = 123\n @@localport = 8788\n\n def initialize(params)\n   @wifi          = params[:wifi] || WiFi\n   @wifiport      = params[:wifiport] || 1\n   @timeserver    = params[:timeserver] || @@timeServer\n   @sendport      = params[:sendport] || @@sendport \n   @localport     = params[:localport] || @@localport\n end\n def wifi\n  @wifi\n end\n def wifiport\n  @wifiport\n end\n def timeserver\n  @timeserver\n end\n def localport\n  @localport\n end\n def sendport\n  @sendport\n end\n\n def sendPacket\n  packetBuffer = Array.new(@@NTP_PACKET_SIZE , 0)\n  packetBuffer[0] = 0b11100011   # LI, Version, Mode , 0xE3\n  packetBuffer[1] = 0     # Stratum, or type of clock\n  packetBuffer[2] = 6     # Polling Interval\n  packetBuffer[3] = 0xEC  # Peer Clock Precision\n  packetBuffer[12]  = 49\n  packetBuffer[13]  = 0x4E\n  packetBuffer[14]  = 49\n  packetBuffer[15]  = 52  \n  binary = packetBuffer[0].chr\n  for num in 1..@@NTP_PACKET_SIZE-1 do\n      binary += packetBuffer[num].chr\n  end\n  @wifi.udpOpen(@wifiport, @timeserver, @sendport, @localport)\n  @wifi.send(@wifiport,binary)\n end\n\n def receivePacket\n  @array = @wifi.recv(@wifiport)\n  @@maxPoll.times do\n    delay(@@pollIntv)\n    if (@array[0] != nil) then\n        if (@array[0] >= 0) then\n            if (@array.length == @@NTP_PACKET_SIZE) then\n                break\n            end  \n        end\n    end\n    @array = @wifi.recv(@wifiport) \n  end\n\n  if @array.length != @@NTP_PACKET_SIZE then\n    \"receive error\"\n  else\n    time = @array[40]\n    for i in 1..3 do\n     time = time << 8 | @array[40+i]\n    end\n    @unixTime = time - 2208988800\n    @unixTimeJST = @unixTime + (@@timeZone * 60 * 60)\n    \"receive ok\"\n  end\n end\n def unixTime\n   @unixTime\n end\n def unixTimeJST\n   @unixTimeJST\n end\n def packet\n    @array\n end    \nend\n\nclass Cts_time\n def IsLeapYear(year)\n  if ((year % 4)==0 && ((year % 100)!=0 || (year % 400)==0)) then\n   return true\n  else\n   return false\n  end\n end \n def initialize(unixtime)\n # \u958f\u5e74\u3067\u306a\u3044\u5e74\u306e\u5404\u6708\u306e\u65e5\u6570\n  dayofm  = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n  dayoflm = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n  monthstr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n  weekstr = [\"Sat\",\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thr\", \"Fri\"] \n  # \u65e5\u4ed8\u306e\u8a08\u7b97\n  wt   =   unixtime\n  @sec  =   wt % 60\n  wt  -=   sec\n  @min  = ( wt.div(60) ) % 60\n  wt  -=   min\n  @hour = ( wt.div(60*60)) % 24\n  wt  -=   hour\n  @day  = ( wt.div(60*60*24) ) \n  @year = 1970\n  @month = 1\n\n  while (@day>366) do\n      if IsLeapYear(@year) then\n          @day -= 366\n      else\n          @day -= 365\n      end\n      @year+=1\n  end\n\n  @day+=1 # 1 \u6708 1 \u65e5\u306f 0 \u3060\u304b\u3089\n\n  while (1) do                                 \n      if (IsLeapYear(@year)) then                # \u3082\u3057\u958f\u5e74\u306a\u3089 \n          if (@day <= dayoflm[@month-1]) then     # \u6708\u306e\u65e5\u6570\u3088\u308a day \u304c\u5c11\u306a\u3051\u308c\u3070\n              break\n          else                              #\u6708\u306e\u65e5\u6570\u3088\u308a day \u304c\u591a\u3051\u308c\u3070 \n              @day -= dayoflm[@month-1]       #\u6708\u306e\u65e5\u6570\u3092\u5f15\u304d \n              @month+=1                      #\u6708\u3092 1 \u5897\u3084\u3059\n          end\n      end\n      if (!IsLeapYear(year)) then                  #\u3082\u3057\u958f\u5e74\u3067\u306a\u3051\u308c\u3070\n          if (@day <= dayofm[@month-1]) then         #\u4ee5\u4e0b\u540c\u4e0a\n              break\n          else\n              @day -= dayofm[@month-1]\n              @month+=1\n          end\n      end\n  end\n  # Zeller's congruence\n  zC = year/100\n  zY = year%100\n  zT = -2*zC+zC/4\n  h=(@day+(26*(@month+1)/10)+zY+zY/4+zT) % 7\n  @week=weekstr[h] \n  @weekno=h\n  @today=@year.to_s + \"/\" + @month.to_s + \"/\" + @day.to_s + \" \" + @hour.to_s + \":\" + @min.to_s + \":\" + @sec.to_s + \" \" + monthstr[@month-1] +\" \"+@week\n end\n def today\n   @today  \n end     \n def sec\n   @sec.to_i\n end\n def min\n   @min.to_i\n end\n def hour\n   @hour.to_i\n end\n def day\n   @day.to_i\n end\n def month\n   @month\n end\n def year\n   @year\n end \n def week\n  @week\n end\n def weekno\n   @weekno.to_i\n end \nend\n\n#Main\n\nUsb = Serial.new(0)\n\n#WiFi PART\n#ESP8266\u3092\u4e00\u5ea6\u505c\u6b62\u3055\u305b\u308b(\u30ea\u30bb\u30c3\u30c8\u3068\u540c\u3058)\npinMode(5,1)\ndigitalWrite(5,0) # LOW:Disable\ndelay 500\ndigitalWrite(5,1) # LOW:Disable\n\nif( System.useWiFi() == 0)then\n  Usb.println \"WiFi Card can't use.\"\n  System.exit() \nend\n\nUsb.println \"WiFi Ready\"\nUsb.println \"WiFi disconnect\"\nUsb.println WiFi.disconnect\nUsb.println \"WiFi Mode Setting\"\nUsb.println WiFi.setMode 3 #Station-Mode & SoftAPI-Mode\nUsb.println \"WiFi ipconfig\"\nUsb.println WiFi.ipconfig\nUsb.println \"WiFi connecting\"\ncon=WiFi.connect(SSID,PASS)\nUsb.println con\nif (con != \"WIFI CONNECTED\\r\\nWIFI GOT IP\\r\\n\\r\\nOK\\r\\n\") then\n  System.exit() \nend    \nUsb.println \"WiFi multiConnect Set\"\nUsb.println WiFi.multiConnect 1\n\n#NTP PART\nUsb.println \"Ntp new\"\nntp=Cts_ntp.new(wifi:WiFi,wifiport:1)\nUsb.println \"Send Packet\"\nntp.sendPacket\nUsb.println \"Receive Packet\"\nUsb.println ntp.receivePacket\nUsb.println ntp.packet.to_s\nUsb.println ntp.unixTimeJST.to_s\nWiFi.cClose(1)\n#UNIX TIME\ntime=Cts_time.new(ntp.unixTimeJST)\nUsb.println time.today\n\n#RTC PART\nUsb.println \"Rtc init\"\nUsb.println Rtc.init().to_s\nUsb.println Rtc.setTime([time.year,time.month,time.day,time.hour,time.min,time.sec]).to_s\n\n#LOOP PART\nwhile true do\n ct=Rtc.getTime()\n Usb.println ct.to_s\n if (ct[4]==0 && ct[5]==0) then\n    if( System.useMP3(3,4) == 0)then\n      Usb.println \"MP3 can't use.\"\n      System.exit() \n    end\n    f = ct[3].to_s + \".mp3\" \n    Usb.println f\n    3.times do\n        led 1\n        Usb.print MP3.play \"now.mp3\"\n        delay(10)\n        Usb.print MP3.play f\n        led 0\n        delay(100)\n    end    \n end\n delay(10)\nend\n\n\n\n\u5b8c\u6210\n\nGR-Citrus\u3067\u6642\u5831\u3092\u558b\u3089\u305b\u3066\u307f\u307e\u3057\u305f\u3002\u97f3\u58f0\u306frospeex\u3092\u5229\u7528\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002#gr_citrus pic.twitter.com/oKBdvf3lRe\u2014 shimocchi (@shimo_cchi) 2016\u5e7412\u670817\u65e5\n\n\u3053\u306e\u56de\u3067\u300cRubic\u3067GR-CITRUS\u306emruby\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u4e8b\u59cb\u3081\u300d\u306f\u6700\u5f8c\u3067\u3059\u3002\n\u4eca\u307e\u3067\u306e\u3053\u3068\u3092\u8e0f\u307e\u3048\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u9ce9\u6642\u8a08\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n#\u52d5\u4f5c\n\u52d5\u4f5c\u306f\u5358\u7d14\u306b\n\n+ \u8d77\u52d5\u6642\u3001NTP\u3067\u6642\u523b\u3092\u53d6\u5f97\n+ GR-CITRUS\u306e\u6642\u8a08\u3092\u8a2d\u5b9a\n+ \uff11\u6642\u9593\u3054\u3068\u306b\u6642\u523b\u306eMP3\u30d5\u30a1\u30a4\u30eb\u3092\u3057\u3083\u3079\u308b\n\n\u3068\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u5358\u7d14\uff01\n\n#\u4eca\u56de\u4f7f\u3046\u3082\u306e\n\n+ GR-CITRUS\n+ WA-MIKAN\n+ MicroSD\u30ab\u30fc\u30c9\n+ \u5727\u96fb\u7d20\u5b50\u304b\u30b9\u30d4\u30fc\u30ab\u30fc\n+ \u30d6\u30ec\u30c3\u30c9\u30dc\u30fc\u30c9\n+ \u30d6\u30ec\u30c3\u30c9\u30dc\u30fc\u30c9\u30fb\u30b8\u30e3\u30f3\u30d1\u30fc\u30b3\u30fc\u30c9\uff08\u30aa\u30b9\uff0d\u30ef\u30cb\u30b0\u30c1\uff09\u00d7\u9069\u5f53\n\n\n#\u97f3\u58f0\u96c6\u3081\n\u307e\u305a\u306f\u3001\u6642\u5831\u306e\u5143\u3068\u306a\u308b\u97f3\u58f0\u7d20\u6750\u3092\u96c6\u3081\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30d5\u30ea\u30fc\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30bd\u30d5\u30c8\u3084\u30b5\u30a4\u30c8\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u5229\u7528\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n\n+ [TextTalk](http://choppli.123net.jp/textalk/)\n+ [SofTalk](http://www35.atwiki.jp/softalk/pages/15.html)\n\u3068\u304b\n \n\u5b66\u8853\u7814\u7a76\u76ee\u7684\u306a\u3089\u3070NICT\u306e\u6749\u6d66\u5b54\u660e\u3055\u3093\u304c\u958b\u767a\u3055\u308c\u305frospeex\u306a\u3093\u3066\u3044\u3046\u306e\u3082\u8a66\u305b\u307e\u3059\u3002\n\n+ [rospeex](http://komeisugiura.jp/software/say.html)\n\nK. Sugiura, Y. Shiga, H. Kawai, T. Misu and C. Hori: \"A Cloud Robotics Approach towards Dialogue-Oriented Robot Speech,\" Advanced Robotics, Vol. 29, Issue 7, pp. 449-456, 2015.\n\n\n\n\u6709\u6599\u306e\u3082\u306e\u306a\u3089\u3082VOICEROID\u3044\u3044\u3067\u3059\u306d\n\n+ [VOICEROID](https://www.amazon.co.jp/s/?_encoding=UTF8&camp=247&creative=7399&field-keywords=VOICEROID&linkCode=ur2&tag=amazon_product-22)\n\n##\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\n\u4e0a\u8a18\u30bd\u30d5\u30c8\u3092\u4f7f\u3044\u4ee5\u4e0b\u30bb\u30ea\u30d5\u7528\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\n\n|\u30d5\u30a1\u30a4\u30eb\u540d|\u7528\u9014|\u30bb\u30ea\u30d5|\n|:---|:---:|:---:|\n|0.mp3\uff5e23.mp3|\u6642\u5831\u7528\u306emp3|\u300c0\u6642\u306a\u306e\u3067\u3059\u300d\u300c15\u6642\u3067\u304a\u3084\u3064\u306e\u6642\u9593\u3067\u3059\u300d\u3068\u304b|\n|now.mp3|\u6642\u5831\u7528\u524d\u7f6e\u304d\u7528\u306emp3|\u300c\u73fe\u5728\u306e\u6642\u523b\u306f\u300d\u3068\u304b|\n\nWA-MIKAN\u306eSD\u30ab\u30fc\u30c9\u76f4\u4e0b\u306b\u4ee5\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n#\u30b9\u30d4\u30fc\u30ab\u30fc\u3082\u3057\u304f\u306f\u5727\u96fb\u7d20\u5b50\u3068\u3064\u306a\u3052\u308b\n\n[\u7b2c2\u56de](http://qiita.com/shimo_cchi/items/cfb16476ef42861b98b2)\u306e\u6642\u3068\u540c\u3058\u3088\u3046\u306b\u3001GR\uff0dCITRUS\u3068\u5727\u96fb\u7d20\u5b50\uff08\u307e\u305f\u306f\u30b9\u30d4\u30fc\u30ab\u30fc\uff09\u3092\u63a5\u7d9a\u3057\u307e\u3059\u3002\n\n|CITRUS\u306e\u7aef\u5b50\u756a\u53f7|\u63a5\u7d9a\u5148|\n|:---|:---:|\n|0|\u5727\u96fb\u7d20\u5b50\u307e\u305f\u306f\u30b9\u30d4\u30fc\u30ab\u30fc\u306e\uff0b|\n|GND|\u5727\u96fb\u7d20\u5b50\u307e\u305f\u306f\u30b9\u30d4\u30fc\u30ab\u30fc\u306e\u2015|\n\n#Rubic\u306b\u66f8\u304d\u8fbc\u307f\nRuby\u4f7f\u3044\u3058\u3083\u306a\u3044\u306e\u3067\u306b\u308f\u304b\u3067\u3059\u304c\u4e00\u5fdc\u30af\u30e9\u30b9\u3063\u307d\u304f\u66f8\u304d\u307e\u3057\u305f\u3002\n###mruby-time\u4f7f\u7528\u7248\nmrbgems\u306emruby-time\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u306a\u3044\u5834\u5408\u306f[\u7b2c4\u56de\u306e\u8a18\u4e8b](http://qiita.com/shimo_cchi/items/645d814995c1902a2563)\u306b\u5f93\u3063\u3066mruby-time\u3092\u5165\u308c\u308b\u304b\u3001\u307e\u305f\u306f\u6b21\u9805\u306emruby-time\u3092\u4f7f\u7528\u3057\u306a\u3044\u7248\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n```rb:main.rb\n#!mruby\nSSID=\"\u3042\u306a\u305f\u306eSSID\"\nPASS=\"\u3042\u306a\u305f\u306ePASS\"\nclass Cts_ntp\n @@NTP_PACKET_SIZE = 48\n @@timeZone = 9 #Tokyo\n @@pollIntv = 150\t# poll every this many ms\n @@maxPoll = 15\t\t# poll up to this many times\n @@timeServer=\"129.6.15.28\"  #time.nist.gov\n#@@timeServer=\"132.163.4.101\" #time-a.timefreq.bldrdoc.gov\n @@sendport = 123\n @@localport = 8788\n\n def initialize(params)\n   @wifi          = params[:wifi] || WiFi\n   @wifiport      = params[:wifiport] || 1\n   @timeserver    = params[:timeserver] || @@timeServer\n   @sendport      = params[:sendport] || @@sendport \n   @localport     = params[:localport] || @@localport\n end\n def wifi\n  @wifi\n end\n def wifiport\n  @wifiport\n end\n def timeserver\n  @timeserver\n end\n def localport\n  @localport\n end\n def sendport\n  @sendport\n end\n\n def sendPacket\n  packetBuffer = Array.new(@@NTP_PACKET_SIZE , 0)\n  packetBuffer[0] = 0b11100011   # LI, Version, Mode , 0xE3\n  packetBuffer[1] = 0     # Stratum, or type of clock\n  packetBuffer[2] = 6     # Polling Interval\n  packetBuffer[3] = 0xEC  # Peer Clock Precision\n  packetBuffer[12]  = 49\n  packetBuffer[13]  = 0x4E\n  packetBuffer[14]  = 49\n  packetBuffer[15]  = 52  \n  binary = packetBuffer[0].chr\n  for num in 1..@@NTP_PACKET_SIZE-1 do\n      binary += packetBuffer[num].chr\n  end\n  @wifi.udpOpen(@wifiport, @timeserver, @sendport, @localport)\n  @wifi.send(@wifiport,binary)\n end\n\n def receivePacket\n  @array = @wifi.recv(@wifiport)\n  @@maxPoll.times do\n    delay(@@pollIntv)\n    if (@array[0] != nil) then\n        if (@array[0] >= 0) then\n            if (@array.length == @@NTP_PACKET_SIZE) then\n                break\n            end  \n        end\n    end\n    @array = @wifi.recv(@wifiport) \n  end\n\n  if @array.length != @@NTP_PACKET_SIZE then\n    \"receive error\"\n  else\n    time = @array[40]\n    for i in 1..3 do\n     time = time << 8 | @array[40+i]\n    end\n    @unixTime = time - 2208988800\n    @unixTimeJST = @unixTime + (@@timeZone * 60 * 60)\n    \"receive ok\"\n  end\n end\n def unixTime\n   @unixTime\n end\n def unixTimeJST\n   @unixTimeJST\n end\n def packet\n    @array\n end    \nend\n\n#Main\n\nUsb = Serial.new(0)\n\n#WiFi PART\n#ESP8266\u3092\u4e00\u5ea6\u505c\u6b62\u3055\u305b\u308b(\u30ea\u30bb\u30c3\u30c8\u3068\u540c\u3058)\npinMode(5,1)\ndigitalWrite(5,0) # LOW:Disable\ndelay 500\ndigitalWrite(5,1) # LOW:Disable\n\nif( System.useWiFi() == 0)then\n  Usb.println \"WiFi Card can't use.\"\n  System.exit() \nend\n\nUsb.println \"WiFi Ready\"\nUsb.println \"WiFi disconnect\"\nUsb.println WiFi.disconnect\nUsb.println \"WiFi Mode Setting\"\nUsb.println WiFi.setMode 3 #Station-Mode & SoftAPI-Mode\nUsb.println \"WiFi ipconfig\"\nUsb.println WiFi.ipconfig\nUsb.println \"WiFi connecting\"\ncon=WiFi.connect(SSID,PASS)\nUsb.println con\nif (con != \"WIFI CONNECTED\\r\\nWIFI GOT IP\\r\\n\\r\\nOK\\r\\n\") then\n  System.exit() \nend    \nUsb.println \"WiFi multiConnect Set\"\nUsb.println WiFi.multiConnect 1\n\n#NTP PART\nUsb.println \"Ntp new\"\nntp=Cts_ntp.new(wifi:WiFi,wifiport:1)\nUsb.println \"Send Packet\"\nntp.sendPacket\nUsb.println \"Receive Packet\"\nUsb.println ntp.receivePacket\nUsb.println ntp.packet.to_s\nUsb.println ntp.unixTimeJST.to_s\nWiFi.cClose(1)\n#UNIX TIME\nt = Time.at(ntp.unixTimeJST)\nUsb.println t.to_s\n\n#RTC PART\nUsb.println \"Rtc init\"\nUsb.println Rtc.init().to_s\nUsb.println Rtc.setTime([t.year,t.month,t.day,t.hour,t.min,t.sec]).to_s\n\n#LOOP PART\nwhile true do\n ct=Rtc.getTime()\n Usb.println ct.to_s\n if (ct[4]==0 && ct[5]==0) then\n    if( System.useMP3(3,4) == 0)then\n      Usb.println \"MP3 can't use.\"\n      System.exit() \n    end\n    f = ct[3].to_s + \".mp3\" \n    Usb.println f\n    3.times do\n        led 1\n        Usb.print MP3.play \"now.mp3\"\n        delay(10)\n        Usb.print MP3.play f\n        led 0\n        delay(100)\n    end    \n end\n delay(10)\nend\n```\n\n###mruby-time\u3092\u4f7f\u7528\u3057\u306a\u3044\u7248\n\n\u3053\u3061\u3089\u306fmruby-time\u3092\u4f7f\u7528\u3057\u306a\u3044\u7248\u3067\u3059\u3002\u7d20\u306eGR-CITRUS\u3067\u52d5\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n\n```rb:main.rb\n#!mruby\nSSID=\"\u3042\u306a\u305f\u306eSSID\"\nPASS=\"\u3042\u306a\u305f\u306ePASS\"\nclass Cts_ntp\n @@NTP_PACKET_SIZE = 48\n @@timeZone = 9 #Tokyo\n @@pollIntv = 150\t# poll every this many ms\n @@maxPoll = 15\t\t# poll up to this many times\n @@timeServer=\"129.6.15.28\"  #time.nist.gov\n#@@timeServer=\"132.163.4.101\" #time-a.timefreq.bldrdoc.gov\n @@sendport = 123\n @@localport = 8788\n\n def initialize(params)\n   @wifi          = params[:wifi] || WiFi\n   @wifiport      = params[:wifiport] || 1\n   @timeserver    = params[:timeserver] || @@timeServer\n   @sendport      = params[:sendport] || @@sendport \n   @localport     = params[:localport] || @@localport\n end\n def wifi\n  @wifi\n end\n def wifiport\n  @wifiport\n end\n def timeserver\n  @timeserver\n end\n def localport\n  @localport\n end\n def sendport\n  @sendport\n end\n\n def sendPacket\n  packetBuffer = Array.new(@@NTP_PACKET_SIZE , 0)\n  packetBuffer[0] = 0b11100011   # LI, Version, Mode , 0xE3\n  packetBuffer[1] = 0     # Stratum, or type of clock\n  packetBuffer[2] = 6     # Polling Interval\n  packetBuffer[3] = 0xEC  # Peer Clock Precision\n  packetBuffer[12]  = 49\n  packetBuffer[13]  = 0x4E\n  packetBuffer[14]  = 49\n  packetBuffer[15]  = 52  \n  binary = packetBuffer[0].chr\n  for num in 1..@@NTP_PACKET_SIZE-1 do\n      binary += packetBuffer[num].chr\n  end\n  @wifi.udpOpen(@wifiport, @timeserver, @sendport, @localport)\n  @wifi.send(@wifiport,binary)\n end\n\n def receivePacket\n  @array = @wifi.recv(@wifiport)\n  @@maxPoll.times do\n    delay(@@pollIntv)\n    if (@array[0] != nil) then\n        if (@array[0] >= 0) then\n            if (@array.length == @@NTP_PACKET_SIZE) then\n                break\n            end  \n        end\n    end\n    @array = @wifi.recv(@wifiport) \n  end\n\n  if @array.length != @@NTP_PACKET_SIZE then\n    \"receive error\"\n  else\n    time = @array[40]\n    for i in 1..3 do\n     time = time << 8 | @array[40+i]\n    end\n    @unixTime = time - 2208988800\n    @unixTimeJST = @unixTime + (@@timeZone * 60 * 60)\n    \"receive ok\"\n  end\n end\n def unixTime\n   @unixTime\n end\n def unixTimeJST\n   @unixTimeJST\n end\n def packet\n    @array\n end    \nend\n\nclass Cts_time\n def IsLeapYear(year)\n  if ((year % 4)==0 && ((year % 100)!=0 || (year % 400)==0)) then\n   return true\n  else\n   return false\n  end\n end \n def initialize(unixtime)\n # \u958f\u5e74\u3067\u306a\u3044\u5e74\u306e\u5404\u6708\u306e\u65e5\u6570\n  dayofm  = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n  dayoflm = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n  monthstr = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n  weekstr = [\"Sat\",\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thr\", \"Fri\"] \n  # \u65e5\u4ed8\u306e\u8a08\u7b97\n  wt   =   unixtime\n  @sec  =   wt % 60\n  wt  -=   sec\n  @min  = ( wt.div(60) ) % 60\n  wt  -=   min\n  @hour = ( wt.div(60*60)) % 24\n  wt  -=   hour\n  @day  = ( wt.div(60*60*24) ) \n  @year = 1970\n  @month = 1\n\n  while (@day>366) do\n      if IsLeapYear(@year) then\n          @day -= 366\n      else\n          @day -= 365\n      end\n      @year+=1\n  end\n\n  @day+=1 # 1 \u6708 1 \u65e5\u306f 0 \u3060\u304b\u3089\n\n  while (1) do                                 \n      if (IsLeapYear(@year)) then                # \u3082\u3057\u958f\u5e74\u306a\u3089 \n          if (@day <= dayoflm[@month-1]) then     # \u6708\u306e\u65e5\u6570\u3088\u308a day \u304c\u5c11\u306a\u3051\u308c\u3070\n              break\n          else                              #\u6708\u306e\u65e5\u6570\u3088\u308a day \u304c\u591a\u3051\u308c\u3070 \n              @day -= dayoflm[@month-1]       #\u6708\u306e\u65e5\u6570\u3092\u5f15\u304d \n              @month+=1                      #\u6708\u3092 1 \u5897\u3084\u3059\n          end\n      end\n      if (!IsLeapYear(year)) then                  #\u3082\u3057\u958f\u5e74\u3067\u306a\u3051\u308c\u3070\n          if (@day <= dayofm[@month-1]) then         #\u4ee5\u4e0b\u540c\u4e0a\n              break\n          else\n              @day -= dayofm[@month-1]\n              @month+=1\n          end\n      end\n  end\n  # Zeller's congruence\n  zC = year/100\n  zY = year%100\n  zT = -2*zC+zC/4\n  h=(@day+(26*(@month+1)/10)+zY+zY/4+zT) % 7\n  @week=weekstr[h] \n  @weekno=h\n  @today=@year.to_s + \"/\" + @month.to_s + \"/\" + @day.to_s + \" \" + @hour.to_s + \":\" + @min.to_s + \":\" + @sec.to_s + \" \" + monthstr[@month-1] +\" \"+@week\n end\n def today\n   @today  \n end     \n def sec\n   @sec.to_i\n end\n def min\n   @min.to_i\n end\n def hour\n   @hour.to_i\n end\n def day\n   @day.to_i\n end\n def month\n   @month\n end\n def year\n   @year\n end \n def week\n  @week\n end\n def weekno\n   @weekno.to_i\n end \nend\n\n#Main\n\nUsb = Serial.new(0)\n\n#WiFi PART\n#ESP8266\u3092\u4e00\u5ea6\u505c\u6b62\u3055\u305b\u308b(\u30ea\u30bb\u30c3\u30c8\u3068\u540c\u3058)\npinMode(5,1)\ndigitalWrite(5,0) # LOW:Disable\ndelay 500\ndigitalWrite(5,1) # LOW:Disable\n\nif( System.useWiFi() == 0)then\n  Usb.println \"WiFi Card can't use.\"\n  System.exit() \nend\n\nUsb.println \"WiFi Ready\"\nUsb.println \"WiFi disconnect\"\nUsb.println WiFi.disconnect\nUsb.println \"WiFi Mode Setting\"\nUsb.println WiFi.setMode 3 #Station-Mode & SoftAPI-Mode\nUsb.println \"WiFi ipconfig\"\nUsb.println WiFi.ipconfig\nUsb.println \"WiFi connecting\"\ncon=WiFi.connect(SSID,PASS)\nUsb.println con\nif (con != \"WIFI CONNECTED\\r\\nWIFI GOT IP\\r\\n\\r\\nOK\\r\\n\") then\n  System.exit() \nend    \nUsb.println \"WiFi multiConnect Set\"\nUsb.println WiFi.multiConnect 1\n\n#NTP PART\nUsb.println \"Ntp new\"\nntp=Cts_ntp.new(wifi:WiFi,wifiport:1)\nUsb.println \"Send Packet\"\nntp.sendPacket\nUsb.println \"Receive Packet\"\nUsb.println ntp.receivePacket\nUsb.println ntp.packet.to_s\nUsb.println ntp.unixTimeJST.to_s\nWiFi.cClose(1)\n#UNIX TIME\ntime=Cts_time.new(ntp.unixTimeJST)\nUsb.println time.today\n\n#RTC PART\nUsb.println \"Rtc init\"\nUsb.println Rtc.init().to_s\nUsb.println Rtc.setTime([time.year,time.month,time.day,time.hour,time.min,time.sec]).to_s\n\n#LOOP PART\nwhile true do\n ct=Rtc.getTime()\n Usb.println ct.to_s\n if (ct[4]==0 && ct[5]==0) then\n    if( System.useMP3(3,4) == 0)then\n      Usb.println \"MP3 can't use.\"\n      System.exit() \n    end\n    f = ct[3].to_s + \".mp3\" \n    Usb.println f\n    3.times do\n        led 1\n        Usb.print MP3.play \"now.mp3\"\n        delay(10)\n        Usb.print MP3.play f\n        led 0\n        delay(100)\n    end    \n end\n delay(10)\nend\n```\n\n#\u5b8c\u6210\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">GR-Citrus\u3067\u6642\u5831\u3092\u558b\u3089\u305b\u3066\u307f\u307e\u3057\u305f\u3002\u97f3\u58f0\u306frospeex\u3092\u5229\u7528\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002<a href=\"https://twitter.com/hashtag/gr_citrus?src=hash\">#gr_citrus</a> <a href=\"https://t.co/oKBdvf3lRe\">pic.twitter.com/oKBdvf3lRe</a></p>&mdash; shimocchi (@shimo_cchi) <a href=\"https://twitter.com/shimo_cchi/status/809997638380597249\">2016\u5e7412\u670817\u65e5</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n \n", "tags": ["GR-CITRUS", "mruby", "WA-MIKAN", "Rubic"]}