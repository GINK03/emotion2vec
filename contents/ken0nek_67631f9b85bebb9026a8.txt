{"context": "Swift2.0\u304b\u3089\u5927\u57df\u95a2\u6570\u306eenumerate\u304c\u6d88\u3048\u3001SequenceType\u306benumerate\u304c\u5b9f\u88c5\u3055\u308c\u307e\u3057\u305f\u3002\nSwift3\u304b\u3089\u306fenumerate\u3067\u306f\u306a\u304fenumerated\u306b\u306a\u308a\u307e\u3057\u305f\n\nApple\u306eAPI\u3088\u308a\n\n    /// Returns a sequence of pairs (*n*, *x*), where *n* represents a\n    /// consecutive integer starting at zero, and *x* represents an element of\n    /// the sequence.\n    ///\n    /// This example enumerates the characters of the string \"Swift\" and prints\n    /// each character along with its place in the string.\n    ///\n    ///     for (n, c) in \"Swift\".characters.enumerated() {\n    ///         print(\"\\(n): '\\(c)'\")\n    ///     }\n    ///     // Prints \"0: 'S'\"\n    ///     // Prints \"1: 'w'\"\n    ///     // Prints \"2: 'i'\"\n    ///     // Prints \"3: 'f'\"\n    ///     // Prints \"4: 't'\"\n    ///\n    /// When enumerating a collection, the integer part of each pair is a counter\n    /// for the enumeration, not necessarily the index of the paired value.\n    /// These counters can only be used as indices in instances of zero-based,\n    /// integer-indexed collections, such as `Array` and `ContiguousArray`. For\n    /// other collections the counters may be out of range or of the wrong type\n    /// to use as an index. To iterate over the elements of a collection with its\n    /// indices, use the `zip(_:_:)` function.\n    ///\n    /// This example iterates over the indices and elements of a set, building a\n    /// list of indices of names with five or fewer letters.\n    ///\n    ///     let names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicol\u00e1s\"]\n    ///     var shorterIndices: [SetIndex<String>] = []\n    ///     for (i, name) in zip(names.indices, names) {\n    ///         if name.characters.count <= 5 {\n    ///             shorterIndices.append(i)\n    ///         }\n    ///     }\n    ///\n    /// Now that the `shorterIndices` array holds the indices of the shorter\n    /// names in the `names` set, you can use those indices to access elements in\n    /// the set.\n    ///\n    ///     for i in shorterIndices {\n    ///         print(names[i])\n    ///     }\n    ///     // Prints \"Sofia\"\n    ///     // Prints \"Mateo\"\n    ///\n    /// - Returns: A sequence of pairs enumerating the sequence.\n    public func enumerated() -> EnumeratedSequence<Array<Element>>\n}\n\n\nAPI\u306b\u3042\u308b\u3088\u3046\u306b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5b9f\u884c\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002\n\nfor (n, c) in \"Swift\".characters.enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n\n// 0: 'S'\n// 1: 'w'\n// 2: 'i'\n// 3: 'f'\n// 4: 't'\n\n[Int]\u578b\u306e\u914d\u5217\u306e\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nfor (i, ele) in [1, 2, 3, 4].enumerated() {\n    print(\"\\(i), \\(ele)\")\n}\n\n// 0, 1\n// 1, 2\n// 2, 3\n// 3, 4\n\n\n\nSwift2.0\u304b\u3089\u5927\u57df\u95a2\u6570\u306eenumerate\u304c\u6d88\u3048\u3001SequenceType\u306benumerate\u304c\u5b9f\u88c5\u3055\u308c\u307e\u3057\u305f\u3002\nSwift3\u304b\u3089\u306f`enumerate`\u3067\u306f\u306a\u304f`enumerated`\u306b\u306a\u308a\u307e\u3057\u305f\n\n```swift:Apple\u306eAPI\u3088\u308a\n\n    /// Returns a sequence of pairs (*n*, *x*), where *n* represents a\n    /// consecutive integer starting at zero, and *x* represents an element of\n    /// the sequence.\n    ///\n    /// This example enumerates the characters of the string \"Swift\" and prints\n    /// each character along with its place in the string.\n    ///\n    ///     for (n, c) in \"Swift\".characters.enumerated() {\n    ///         print(\"\\(n): '\\(c)'\")\n    ///     }\n    ///     // Prints \"0: 'S'\"\n    ///     // Prints \"1: 'w'\"\n    ///     // Prints \"2: 'i'\"\n    ///     // Prints \"3: 'f'\"\n    ///     // Prints \"4: 't'\"\n    ///\n    /// When enumerating a collection, the integer part of each pair is a counter\n    /// for the enumeration, not necessarily the index of the paired value.\n    /// These counters can only be used as indices in instances of zero-based,\n    /// integer-indexed collections, such as `Array` and `ContiguousArray`. For\n    /// other collections the counters may be out of range or of the wrong type\n    /// to use as an index. To iterate over the elements of a collection with its\n    /// indices, use the `zip(_:_:)` function.\n    ///\n    /// This example iterates over the indices and elements of a set, building a\n    /// list of indices of names with five or fewer letters.\n    ///\n    ///     let names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicol\u00e1s\"]\n    ///     var shorterIndices: [SetIndex<String>] = []\n    ///     for (i, name) in zip(names.indices, names) {\n    ///         if name.characters.count <= 5 {\n    ///             shorterIndices.append(i)\n    ///         }\n    ///     }\n    ///\n    /// Now that the `shorterIndices` array holds the indices of the shorter\n    /// names in the `names` set, you can use those indices to access elements in\n    /// the set.\n    ///\n    ///     for i in shorterIndices {\n    ///         print(names[i])\n    ///     }\n    ///     // Prints \"Sofia\"\n    ///     // Prints \"Mateo\"\n    ///\n    /// - Returns: A sequence of pairs enumerating the sequence.\n    public func enumerated() -> EnumeratedSequence<Array<Element>>\n}\n```\n\nAPI\u306b\u3042\u308b\u3088\u3046\u306b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5b9f\u884c\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002\n\n```swift\n\nfor (n, c) in \"Swift\".characters.enumerated() {\n    print(\"\\(n): '\\(c)'\")\n}\n\n// 0: 'S'\n// 1: 'w'\n// 2: 'i'\n// 3: 'f'\n// 4: 't'\n```\n\n[Int]\u578b\u306e\u914d\u5217\u306e\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```swift\n\nfor (i, ele) in [1, 2, 3, 4].enumerated() {\n    print(\"\\(i), \\(ele)\")\n}\n\n// 0, 1\n// 1, 2\n// 2, 3\n// 3, 4\n```\n", "tags": ["Swift", "Swift2.0", "Swift3.0"]}