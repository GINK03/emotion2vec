{"context": " More than 1 year has passed since last update.\n\u52d5\u4f5c\u78ba\u8a8d\nc++ Builder XE4\n\n\n\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3067\u30b3\u30de\u30f3\u30c9\u3092\u9001\u3063\u3066\u3001\u3059\u3079\u3066\u306e\u5fdc\u7b54\u3092\u53d7\u3051\u53d6\u308b\u30b5\u30f3\u30d7\u30eb\u3002\n\nsample.cpp\nstatic const unsigned short kPort = 31415;\nString cmd = L\"hello\";\n\n//---------------------------------------------------------------------------\nvoid __fastcall TForm1::Button1Click(TObject *Sender)\n{\n    unsigned short port = kPort;\n\n    IdUDPClient1->Host = L\"\";\n    IdUDPClient1->Port = port;\n    IdUDPClient1->Active = true;\n\n    while (!(IdUDPClient1->ReceiveString(50).IsEmpty()))\n            ;\n    IdUDPClient1->Broadcast(cmd, port, L\"\");\n\n    std::unique_ptr<TStringList> rcvList(new TStringList);\n    std::unique_ptr<TStringList> ipList(new TStringList);\n    String res;\n    String ipadr;\n\n    while (1) {\n        try {\n            res = IdUDPClient1->ReceiveString(ipadr, port, 200 );\n            res = res.TrimRight();\n\n            if (res.IsEmpty()) {\n                break;\n            }\n            ipList->Add(ipadr);\n            rcvList->Add(res);\n        }\n        catch (Exception &e) {\n            break;\n        }\n    }\n\n    int count = ipList->Count;\n\n    //\n    int nop=1; // for breakpoint\n}\n\n\nint nop=1;\u306e\u884c\u306b\u304a\u3044\u3066\u3001\u4ee5\u4e0b\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3002\n- ipList : \u5fdc\u7b54\u306e\u3042\u3063\u305fip\n- rcvList : \u30b3\u30de\u30f3\u30c9\u306e\u5fdc\u7b54\u6587\u5b57\nBroadCast()\u9001\u4fe1\u3057\u305f\u5f8c\u306f\u3001ReceiveString(ipadr, port, ...)\u3092\u5b9f\u884c\u3059\u308b\u3054\u3068\u306bipadr\u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u304f\u3088\u3046\u3060\u3002\n```txt:\u52d5\u4f5c\u78ba\u8a8d\nc++ Builder XE4\n```\n\n\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3067\u30b3\u30de\u30f3\u30c9\u3092\u9001\u3063\u3066\u3001\u3059\u3079\u3066\u306e\u5fdc\u7b54\u3092\u53d7\u3051\u53d6\u308b\u30b5\u30f3\u30d7\u30eb\u3002\n\n```sample.cpp\nstatic const unsigned short kPort = 31415;\nString cmd = L\"hello\";\n\n//---------------------------------------------------------------------------\nvoid __fastcall TForm1::Button1Click(TObject *Sender)\n{\n\tunsigned short port = kPort;\n\n\tIdUDPClient1->Host = L\"\";\n\tIdUDPClient1->Port = port;\n\tIdUDPClient1->Active = true;\n\n\twhile (!(IdUDPClient1->ReceiveString(50).IsEmpty()))\n\t\t\t;\n\tIdUDPClient1->Broadcast(cmd, port, L\"\");\n\n\tstd::unique_ptr<TStringList> rcvList(new TStringList);\n\tstd::unique_ptr<TStringList> ipList(new TStringList);\n\tString res;\n\tString ipadr;\n\n\twhile (1) {\n\t\ttry {\n\t\t\tres = IdUDPClient1->ReceiveString(ipadr, port, 200 );\n\t\t\tres = res.TrimRight();\n\n\t\t\tif (res.IsEmpty()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tipList->Add(ipadr);\n\t\t\trcvList->Add(res);\n\t\t}\n\t\tcatch (Exception &e) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tint count = ipList->Count;\n\n\t//\n\tint nop=1; // for breakpoint\n}\n```\n\nint nop=1;\u306e\u884c\u306b\u304a\u3044\u3066\u3001\u4ee5\u4e0b\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3002\n- ipList : \u5fdc\u7b54\u306e\u3042\u3063\u305fip\n- rcvList : \u30b3\u30de\u30f3\u30c9\u306e\u5fdc\u7b54\u6587\u5b57\n\n\nBroadCast()\u9001\u4fe1\u3057\u305f\u5f8c\u306f\u3001ReceiveString(ipadr, port, ...)\u3092\u5b9f\u884c\u3059\u308b\u3054\u3068\u306bipadr\u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u304f\u3088\u3046\u3060\u3002\n\n\n", "tags": ["cppBuilder", "indy"]}