{"context": " More than 1 year has passed since last update.\n\n\u76ee\u7684\nJava\u6a19\u6e96\u306ejava.util.zip\u306f\u6697\u53f7\u5316\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\u306a\u306e\u3067\u6697\u53f7\u5316zip\u3092\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u5225\u9014\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u8272\u3005\u8a66\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u7d50\u5c40\u306f\u4e00\u756a\u30e1\u30b8\u30e3\u30fc\u3089\u3057\u3044zip4j\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\nzip4j\n\u516c\u5f0f\u30b5\u30a4\u30c8\u306f\u3053\u3061\u3089\nMaven Repository\u306f\u3053\u3061\u3089\n\u6700\u65b0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f1.3.2\u306e\u3088\u3046\u3067\u3059\u3002\n\n\u30b3\u30fc\u30c9\n\n\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5b9a\u7fa9\n\npom.xml\n    <dependencies>\n        <dependency>\n            <groupId>net.lingala.zip4j</groupId>\n            <artifactId>zip4j</artifactId>\n            <version>1.3.2</version>\n        </dependency>\n    </dependencies>\n\n\n\n\u6697\u53f7\u5316zip\u90e8\u5206\n\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u9650\u3089\u306a\u3044\u306e\u3067\u3059\u304c\u3001zip\u30a8\u30f3\u30c8\u30ea\u3092\u4f5c\u308b\u969b\u3001\u5b9f\u969b\u306b\u5b58\u5728\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u5c5e\u6027\u3092\u53d6\u5f97\u3057\u3066\u5229\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30d0\u30a4\u30c8\u914d\u5217\u3060\u3051\u3067\u306f\u76f4\u63a5zip\u30a8\u30f3\u30c8\u30ea\u3092\u4f5c\u6210\u3067\u304d\u307e\u305b\u3093\u3002\n\u306a\u306e\u3067\u3001File\u30af\u30e9\u30b9\u306e\u533f\u540d\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u5bfe\u51e6\u3057\u307e\u3059\u3002\n\u305f\u3060\u3001\u968e\u5c64\u69cb\u9020\u3092\u3082\u3063\u305fzip\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308d\u3046\u3068\u3059\u308b\u3068\u9762\u5012\u306a\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306f\u4e00\u6642\u7684\u306b\u30ed\u30fc\u30ab\u30eb\u51fa\u529b\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u5727\u7e2e\u3057\u305f\u65b9\u304c\u697d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\nZip.java\npackage com.company;\n\nimport net.lingala.zip4j.exception.ZipException;\nimport net.lingala.zip4j.model.ZipParameters;\nimport net.lingala.zip4j.util.Zip4jConstants;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class Zip {\n\n    public byte[] encryptZip(final String fileName, final byte[] input, String password) throws IOException, ZipException {\n        ZipParameters parameters = new ZipParameters();\n        parameters.setCompressionMethod(Zip4jConstants.COMP_DEFLATE);\n        parameters.setCompressionLevel(Zip4jConstants.DEFLATE_LEVEL_NORMAL);\n        parameters.setEncryptFiles(true);\n        parameters.setEncryptionMethod(Zip4jConstants.ENC_METHOD_STANDARD);\n        parameters.setAesKeyStrength(Zip4jConstants.AES_STRENGTH_256);\n        parameters.setPassword(password);\n\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        try (net.lingala.zip4j.io.ZipOutputStream zipOutputStream = new net.lingala.zip4j.io.ZipOutputStream(byteArrayOutputStream)) {\n            File file = new File(fileName) {\n                @Override\n                public boolean exists() {return true;}\n                @Override\n                public boolean isDirectory() {return false;}\n                @Override\n                public String getAbsolutePath() {return fileName;}\n                @Override\n                public boolean isHidden() {return false;}\n                @Override\n                public long lastModified() {return System.currentTimeMillis();}\n                @Override\n                public long length() {return input.length;}\n            };\n\n            zipOutputStream.putNextEntry(file, parameters);\n            zipOutputStream.write(input);\n            zipOutputStream.closeEntry();\n            zipOutputStream.finish();\n        }\n\n        return byteArrayOutputStream.toByteArray();\n\n    }\n}\n\n\n\n\n\u547c\u3073\u51fa\u3057\n\u3042\u3068\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u6697\u53f7\u5316zip\u5727\u7e2e\u3057\u305f\u3044\u30d0\u30a4\u30c8\u914d\u5217\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6e21\u3059\u3060\u3051\u3067\u3059\n\nMain.java\n    public static void main(String[] args) {\n        Zip zip = new Zip();\n        try {\n            byte[] encrypted = zip.encryptZip(\"hoge.txt\", new byte[]{0x30, 0x30}, \"testPwd\");\n            try(FileOutputStream stream = new FileOutputStream(\".\\test.zip\")) {\n                stream.write(encrypted);\n            }\n        } catch (IOException | ZipException e) {\n            e.printStackTrace();\n        }\n    }\n\n\n\u5168\u90e8\u30aa\u30f3\u30e1\u30e2\u30ea\u3067\u51e6\u7406\u3057\u305f\u3044\u5834\u5408\u306f\u3053\u3046\u306a\u308b\u304b\u306a\u3068\u3002\n# \u76ee\u7684\nJava\u6a19\u6e96\u306ejava.util.zip\u306f\u6697\u53f7\u5316\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\u306a\u306e\u3067\u6697\u53f7\u5316zip\u3092\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u5225\u9014\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u8272\u3005\u8a66\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u7d50\u5c40\u306f\u4e00\u756a\u30e1\u30b8\u30e3\u30fc\u3089\u3057\u3044zip4j\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n# zip4j\n\u516c\u5f0f\u30b5\u30a4\u30c8\u306f[\u3053\u3061\u3089](http://www.lingala.net/zip4j/)\nMaven Repository\u306f[\u3053\u3061\u3089](http://mvnrepository.com/artifact/net.lingala.zip4j/zip4j/1.3.2)\n\u6700\u65b0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f1.3.2\u306e\u3088\u3046\u3067\u3059\u3002\n# \u30b3\u30fc\u30c9\n## \u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5b9a\u7fa9\n```xml:pom.xml\n    <dependencies>\n        <dependency>\n            <groupId>net.lingala.zip4j</groupId>\n            <artifactId>zip4j</artifactId>\n            <version>1.3.2</version>\n        </dependency>\n    </dependencies>\n```\n## \u6697\u53f7\u5316zip\u90e8\u5206\n\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u9650\u3089\u306a\u3044\u306e\u3067\u3059\u304c\u3001zip\u30a8\u30f3\u30c8\u30ea\u3092\u4f5c\u308b\u969b\u3001\u5b9f\u969b\u306b\u5b58\u5728\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u5c5e\u6027\u3092\u53d6\u5f97\u3057\u3066\u5229\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30d0\u30a4\u30c8\u914d\u5217\u3060\u3051\u3067\u306f\u76f4\u63a5zip\u30a8\u30f3\u30c8\u30ea\u3092\u4f5c\u6210\u3067\u304d\u307e\u305b\u3093\u3002\n\u306a\u306e\u3067\u3001File\u30af\u30e9\u30b9\u306e\u533f\u540d\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u5bfe\u51e6\u3057\u307e\u3059\u3002\n\u305f\u3060\u3001\u968e\u5c64\u69cb\u9020\u3092\u3082\u3063\u305fzip\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308d\u3046\u3068\u3059\u308b\u3068\u9762\u5012\u306a\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306f\u4e00\u6642\u7684\u306b\u30ed\u30fc\u30ab\u30eb\u51fa\u529b\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u5727\u7e2e\u3057\u305f\u65b9\u304c\u697d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n```java:Zip.java\npackage com.company;\n\nimport net.lingala.zip4j.exception.ZipException;\nimport net.lingala.zip4j.model.ZipParameters;\nimport net.lingala.zip4j.util.Zip4jConstants;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class Zip {\n\n    public byte[] encryptZip(final String fileName, final byte[] input, String password) throws IOException, ZipException {\n        ZipParameters parameters = new ZipParameters();\n        parameters.setCompressionMethod(Zip4jConstants.COMP_DEFLATE);\n        parameters.setCompressionLevel(Zip4jConstants.DEFLATE_LEVEL_NORMAL);\n        parameters.setEncryptFiles(true);\n        parameters.setEncryptionMethod(Zip4jConstants.ENC_METHOD_STANDARD);\n        parameters.setAesKeyStrength(Zip4jConstants.AES_STRENGTH_256);\n        parameters.setPassword(password);\n\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        try (net.lingala.zip4j.io.ZipOutputStream zipOutputStream = new net.lingala.zip4j.io.ZipOutputStream(byteArrayOutputStream)) {\n            File file = new File(fileName) {\n                @Override\n                public boolean exists() {return true;}\n                @Override\n                public boolean isDirectory() {return false;}\n                @Override\n                public String getAbsolutePath() {return fileName;}\n                @Override\n                public boolean isHidden() {return false;}\n                @Override\n                public long lastModified() {return System.currentTimeMillis();}\n                @Override\n                public long length() {return input.length;}\n            };\n\n            zipOutputStream.putNextEntry(file, parameters);\n            zipOutputStream.write(input);\n            zipOutputStream.closeEntry();\n            zipOutputStream.finish();\n        }\n\n        return byteArrayOutputStream.toByteArray();\n\n    }\n}\n\n```\n\n## \u547c\u3073\u51fa\u3057\n\u3042\u3068\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u6697\u53f7\u5316zip\u5727\u7e2e\u3057\u305f\u3044\u30d0\u30a4\u30c8\u914d\u5217\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6e21\u3059\u3060\u3051\u3067\u3059\n\n```java:Main.java\n    public static void main(String[] args) {\n        Zip zip = new Zip();\n        try {\n            byte[] encrypted = zip.encryptZip(\"hoge.txt\", new byte[]{0x30, 0x30}, \"testPwd\");\n            try(FileOutputStream stream = new FileOutputStream(\".\\test.zip\")) {\n                stream.write(encrypted);\n            }\n        } catch (IOException | ZipException e) {\n            e.printStackTrace();\n        }\n    }\n```\n\u5168\u90e8\u30aa\u30f3\u30e1\u30e2\u30ea\u3067\u51e6\u7406\u3057\u305f\u3044\u5834\u5408\u306f\u3053\u3046\u306a\u308b\u304b\u306a\u3068\u3002\n", "tags": ["Zip4j", "Java", "zip"]}