{"context": "Rust \u306e\u73fe\u6642\u70b9\u306e\u6700\u65b0\u306e\u5b89\u5b9a\u7248 1.5 \u3067\u306f\u3001panic \u304c\u8d77\u3053\u3063\u305f\u6642\u306b\u3001\u305d\u308c\u3092\u6355\u6349\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002panic \u3092\u8d77\u3053\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u306f\u30e1\u30e2\u30ea\u30fc\u3092\u89e3\u653e\u3057\u305f\u5f8c\u3001\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u30021.7 nightly \u3067\u306f panic \u3092\u6355\u6349\u3059\u308b\u4ed5\u7d44\u307f\u3068\u3057\u3066 std::panic:recover() \u304c\u975e\u5b89\u5b9a API \u3068\u3057\u3066\u8ffd\u52a0\u3055\u308c\u305f\u3002\n\u79c1\u306f Erlang VM \u304b\u3089 FFI \u7d4c\u7531\u3067 Rust \u306e\u95a2\u6570\u3092\u4f7f\u3044\u305f\u3044\u306e\u3067\u3001panic \u304c\u6355\u6349\u3067\u304d\u306a\u3044\u3068\u304b\u306a\u308a\u8f9b\u3044\u3002\u3053\u306e\u6a5f\u80fd\u3092\u8a66\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n2016\u5e744\u670810\u65e5\u8ffd\u8a18\uff1a\u3053\u306e\u6a5f\u80fd\u306f Rust 1.9 \u3067\u5b89\u5b9a\u5316\u3055\u308c\u305f\n\nstd: Stabilize APIs for the 1.9 release #32804\n\n\u5909\u66f4\u70b9\n- std::panic::recover() \u304b\u3089\u3001std::panic::catch_unwind() \u306b\u5909\u66f4\n- RecoverSafe \u3068 AssertRecoverSafe() \u304b\u3089\u3001UnwindSafe \u3068 AssertUnwindSafe() \u306b\u5909\u66f4\n- \u5909\u6570\u3060\u3051\u3067\u306a\u304f\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3092 AssertUnwindSafe \u3067\u30e9\u30c3\u30d7\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u306b\u306a\u3063\u305f\uff08\u30de\u30a4\u30ca\u30b9\u9762\u3042\u308a\uff09\n\u6700\u5f8c\u306e\u5909\u66f4\u306b\u3088\u308a\u3001\u4f8b\u3048\u3070\u3053\u3046\u66f8\u3044\u3066\u3044\u305f\u306e\u304c\u3001\n\nsrc/librustdoc/test.rs\n   let b_sess = AssertRecoverSafe(&sess);\n   let b_cstore = AssertRecoverSafe(&cstore);\n   let b_cfg = AssertRecoverSafe(cfg.clone());\n   let b_control = AssertRecoverSafe(&control);\n\n   panic::recover(|| {\n       driver::compile_input(&b_sess, &b_cstore, (*b_cfg).clone(),\n                             &input, &out,\n                             &None, None, &b_control)\n   })\n\n\n\u3053\u3046\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u3053\u306e\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u304c\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u308b\u5909\u6570\u304c\u3001\u4e00\u62ec\u3057\u3066 UnwindSafe \u306b\u30de\u30fc\u30af\u3055\u308c\u308b\u3002\n\nsrc/librustdoc/test.rs\n   let res = panic::catch_unwind(AssertUnwindSafe(|| {\n       driver::compile_input(&sess, &cstore, cfg.clone(),\n                             &input, &out,\n                             &None, None, &control)\n   }));\n\n\n\u305f\u3060\u3057\u3001API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u66f8\u304b\u308c\u3066\u3044\u308b \u3088\u3046\u306b\u3001\u3053\u306e\u4f7f\u3044\u65b9\u306b\u306f\u30de\u30a4\u30ca\u30b9\u9762\u3082\u3042\u308b\u3002\u305d\u308c\u306f\u3001\u5f8c\u65e5\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u306b\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u5909\u6570\u3092\u8ffd\u52a0\u3057\u305f\u6642\u306b\u3001\u4eee\u306b\u305d\u308c\u3092 UnwindSafe \u306b\u3059\u308b\u3079\u304d\u3067\u306a\u304b\u3063\u305f\u6642\u3067\u3082\u81ea\u52d5\u7684\u306b UnwindSafe \u3068\u307f\u306a\u3055\u308c\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u3060\u3002\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3092\u30e9\u30c3\u30d7\u3059\u308b\u304b\u3069\u3046\u304b\u306f\u3001\u3088\u304f\u8003\u3048\u3066\u304b\u3089\u6c7a\u3081\u3088\u3046\u3002\n\uff08\u8ffd\u8a18\u7d42\u308f\u308a\uff09\n\n\u74b0\u5883\n\nrustc \u30d0\u30fc\u30b8\u30e7\u30f3\uff1a1.7 nighly\uff082016\u5e741\u670819\u65e5\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304b\u3089\u30d3\u30eb\u30c9\u3057\u305f\u3082\u306e\uff09\nHost\uff1aFreeBSD 10.2-RELEASE\n\n% rustc --version --verbose\nrustc 1.7.0-dev (f6dd66e56 2016-01-19)\nbinary: rustc\ncommit-hash: f6dd66e568f705de6a35c7c7a765ad6d79c69b1e\ncommit-date: 2016-01-19\nhost: x86_64-unknown-freebsd\nrelease: 1.7.0-dev\n\n\nRust \u306f\u4f8b\u5916\u51e6\u7406\u3092\u63d0\u4f9b\u3057\u306a\u3044\nRust \u306b\u306f\u3001\u4e00\u822c\u7684\u306a\u8a00\u8a9e\u306b\u898b\u3089\u308c\u308b\u4f8b\u5916\u51e6\u7406\u306e\u4ed5\u7d44\u307f\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u30441\u3002\u552f\u4e00\u3001\u56de\u5fa9\u4e0d\u53ef\u80fd\u306a\u30a8\u30e9\u30fc\u3092\u8d77\u3053\u3059 panic!() \u304c\u3042\u308a\u3001\u3053\u308c\u3092\u8d77\u3053\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u306f\u3001\u30e1\u30e2\u30ea\u30fc\u3092\u958b\u653e\u3057\u305f\u5f8c\u306b\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u3002\u3082\u3057\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u304c panic \u3059\u308b\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53\u304c abort \u3055\u308c\u308b\u3002\n\n\u4f8b\uff1a\u660e\u793a\u7684\u306b panic \u3092\u8d77\u3053\u3059\nfn main() {\n    panic!(\"\u304a\u3063\u3068\");\n}\n\n% ./main\nthread '<main>' panicked at '\u304a\u3063\u3068', main.rs:4\n% echo $?\n101     # \u2190 \u7570\u5e38\u7d42\u4e86\uff08abort\uff09\n\n\n\u4f8b\uff1aNone \u304b\u3089\u5024\u3092\u53d6\u308a\u51fa\u305d\u3046\u3068\u3059\u308b\u3068\u3001panic \u3059\u308b\nfn main() {\n    let _: Option<i64> = None.unwrap();\n}\n\n% ./main\nthread '<main>' panicked at 'called `Option::unwrap()` on\na `None` value', src/libcore/option.rs:366\n% echo $?\n101\n\n\n\u4f8b\uff1a\uff10\u306b\u3088\u308b\u9664\u7b97\u3067 panic \u3059\u308b\nfn main() {\n    println!(\"1 \u00f7 0 = {}\", 1 / 0);\n}\n\n% ./main\nthread '<main>' panicked at 'attempted to divide by zero', main.rs:4\n% echo $?\n101\n\n\n\u4f8b\uff1a\u5b50\u30b9\u30ec\u30c3\u30c9\u304c panic \u3057\u3066\u3082\u3001\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306b\u306f\u5f71\u97ff\u306a\u3044\n\u5b50\u30b9\u30ec\u30c3\u30c9\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u305f\u6642\u306f\u3001join() \u3067 Err<_> \u304c\u8fd4\u308b\u3002\nuse std::thread;\n\nfn main() {\n     let h = thread::spawn(|| {\n           panic!(\"\u304a\u3063\u3068\");\n     });\n\n     match h.join() {\n         Ok(_)  => println!(\"\u3042\u3044\u3064\u306f\u751f\u304d\u5ef6\u3073\u305f\u3088\u3046\u3060\"),\n         Err(_) => println!(\"\u3042\u3044\u3064\u306f\u3084\u3089\u308c\u305f\u3088\u3046\u3060\"),\n     }\n}\n\n% ./main\nthread '<unnamed>' panicked at '\u304a\u3063\u3068', main.rs:7\n\u3042\u3044\u3064\u306f\u3084\u3089\u308c\u305f\u3088\u3046\u3060\n% echo $?\n0     # \u2190 \u6b63\u5e38\u7d42\u4e86\n\n\n\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u3068\u308a\u307e\u304f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\nRust \u3067\u306f\u3001\u30a8\u30e9\u30fc\u51e6\u7406\u306b\u95a2\u9023\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u3063\u305f\u3053\u3068\u306f\u3001\u4f8b\u5916\uff08exception\uff09\u3067\u306f\u306a\u304f\u3001\u623b\u308a\u5024\u3067\u793a\u3059\n\n\n\u4f8b\u3048\u3070\u3001std::io \u306b\u3042\u308b\u5927\u534a\u306e\u95a2\u6570\u306f\u3001\u623b\u308a\u5024\u3068\u3057\u3066 std::io::Result<T> \u3092\u8fd4\u3059\u3002Result \u306f\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u308b\u3053\u3068\u3092\u6697\u793a\u3059\u308b\u578b\n\u4f8b\u5916\u3092\u4f7f\u308f\u306a\u3044\u307b\u3046\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u6d41\u308c\u3092\u8ffd\u3044\u3084\u3059\u304f\u3001\u307e\u305f\u3001\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u306b\u3088\u308a\u7c21\u6f54\u306b\u66f8\u3051\u308b\n\n\n\u81f4\u547d\u7684\u306a\u554f\u984c\u304c\u8d77\u3053\u3063\u305f\u6642\u306f\u3001\u30b9\u30ec\u30c3\u30c9\u3092\u56de\u5fa9\u3055\u305b\u308b\u3088\u308a\u3082\u3001\u30af\u30e9\u30c3\u30b7\u30e5\u3055\u305b\u3066\u3001\u304d\u308c\u3044\u306a\u72b6\u614b\u304b\u3089\u518d\u30b9\u30bf\u30fc\u30c8\u3055\u305b\u308b\n\n\n\u4eee\u306b\u56de\u5fa9\u3055\u305b\u3089\u308c\u305f\u3068\u3057\u3066\u3082\u3001\u4e2d\u9014\u534a\u7aef\u306b\u58ca\u308c\u305f\u30c7\u30fc\u30bf\uff08DB\u3068\u306e\u63a5\u7d9a\u306a\u3069\u3082\u542b\u3080\uff09\u306a\u3069\u304c\u539f\u56e0\u3067\u3001\u4e88\u60f3\u5916\u306e\u632f\u308b\u821e\u3044\u3092\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u307e\u305f unsafe \u30d6\u30ed\u30c3\u30af\u304c\u3042\u308b\u5834\u5408\u3001\u305d\u306e\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u306b\u3088\u3063\u3066\u306f\u3001\u30e1\u30e2\u30ea\u30fc\u30ea\u30fc\u30af\u3059\u308b\u53ef\u80fd\u6027\u3082\u3042\u308b\n\u554f\u984c\u304c\u8d77\u3053\u3063\u305f\u6642\u306b\u30af\u30e9\u30c3\u30b7\u30e5\u3055\u305b\u308b\u624b\u6cd5\u300cLet it crash\u300d\u306f Erlang/OTP \u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u3092\u53c2\u8003\u306b\u3057\u305f\n\n\n\npanic \u306e\u3088\u3046\u306a\u4f8b\u5916\u51e6\u7406\u306f\u3001\u9759\u7684\u306a\u578b\u691c\u67fb\u3067\u691c\u51fa\u3067\u304d\u306a\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u6642\u306b\u8d77\u3053\u308b\u554f\u984c\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u3060\u3051\u306b\u4f7f\u3046\u3002\n\nRust RFC 1236 Stabilize catch panic\n\u3068\u306f\u3044\u3048\u3001\u73fe\u5b9f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u304d\u308c\u3044\u3054\u3068\u3070\u304b\u308a\u3082\u8a00\u3063\u3066\u3089\u308c\u306a\u3044\u3002\u5805\u7262\u6027\u3084\u6027\u80fd\u306e\u305f\u3081\u306b\u3001panic \u3092\u6355\u6349\u3057\u305f\u3044\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3082\u78ba\u5b9f\u306b\u3042\u308b\u3002\u3053\u308c\u306b\u5fdc\u3048\u308b\u305f\u3081\u306b\u63d0\u6848\u3055\u308c\u305f\u306e\u304c\u3001Rust \u306e RFC 1236 \u300cStabilize catch panic\u300d\uff08catch panic \u306e\u5b89\u5b9a\u5316\uff09\u3060\u3002\n\u305d\u3053\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u304c\u6319\u3052\u3089\u308c\u3066\u3044\u308b\u3002\n\nRust \u306e panic \u3067\u306f\u3001\u4ed6\u8a00\u8a9e\u95a2\u6570\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\uff08FFI\uff09\u306e\u5883\u754c\u3092\u8d85\u3048\u305f\u6642\u306e\u632f\u308b\u821e\u3044\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u3002\u3082\u3057 C \u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089 Rust \u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u305f\u6642\u306b Rust \u5074\u3067 panic \u3057\u305f\u3089\u3001\u4f55\u304c\u8d77\u3053\u308b\u306e\u304b\u306f\u76f8\u624b\u5074\u306e\u51e6\u7406\u7cfb\u306b\u4f9d\u5b58\u3059\u308b\u3002Rust \u5074\u3067 panic \u3092\u6355\u6349\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3001Rust \u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u305f\u6642\u306b\u3001\u30d7\u30ed\u30b9\u30bb\u30b9\u5168\u4f53\u304c abort \u3055\u308c\u308b\u30ea\u30b9\u30af\u3092\u56de\u907f\u3067\u304d\u308b\u3002\n\u6c4e\u7528\u7684\u306a\u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb\u306e\u5b9f\u88c5\u3067\u306f\u3001\u30bf\u30b9\u30af\u304c panic \u3057\u305f\u6642\u306b\u3001\u30b9\u30ec\u30c3\u30c9\u3092\u30af\u30e9\u30c3\u30b7\u30e5\uff08\u305d\u3057\u3066\u3001\u65b0\u898f\u30b9\u30bf\u30fc\u30c8\uff09\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001panic \u3092\u88dc\u8db3\u3059\u308b\u3053\u3068\u3092\u9078\u3076\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n\u666e\u6bb5 Erlang/OTP \u3067\u958b\u767a\u3057\u3066\u3044\u308b\u79c1\u3068\u3057\u3066\u306f\u3001\uff12\u3067\u306f\u30b9\u30ec\u30c3\u30c9\u3092\u30af\u30e9\u30c3\u30b7\u30e5\u3055\u305b\u305f\u307b\u3046\u304c\u5805\u7262\u306a\u30b7\u30b9\u30c6\u30e0\u304c\u4f5c\u308c\u308b\u3068\u8003\u3048\u308b\u3002\u3057\u304b\u3057\u3001OS \u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3046 Rust \u306e\u5834\u5408\u3001\u30b9\u30ec\u30c3\u30c9\u306e\u4f5c\u6210\u306f\u6bd4\u8f03\u7684\u91cd\u3044\u51e6\u7406\u306b\u306a\u308b\u306e\u3067\u3001\u6027\u80fd\u306e\u8981\u6c42\u306b\u3088\u3063\u3066\u306f\u3001\uff12\u306e\u3088\u3046\u306a\u9078\u629e\u3082\u30a2\u30ea\u3060\u308d\u3046\u3002\n\uff11\u306f\u500b\u4eba\u7684\u306b\u306f\u5207\u5b9f\u306a\u554f\u984c\u3060\u3002\u3068\u3044\u3046\u306e\u306f\u3001\u79c1\u306f Erlang VM \u5185\u3067 Rust \u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u4f7f\u3046\u4e88\u5b9a\u3060\u304b\u3089\u3060\u3002\u73fe\u72b6\u306f\u3001Rust \u5074\u3067 panic \u3059\u308b\u3068\u3001VM \u5168\u4f53\u304c\u30b3\u30a2\u30c0\u30f3\u30d7\u3092\u5410\u3044\u3066\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u3066\u3057\u307e\u3046\u3002\npanic \u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30d0\u30b0\u306b\u8d77\u56e0\u3059\u308b\u3082\u306e\u304c\u307b\u3068\u3093\u3069\u306a\u306e\u3067\u3001\u5341\u5206\u306b\u30ec\u30d3\u30e5\u30fc\u3055\u308c\u305f\u3001\u304a\u884c\u5100\u306e\u826f\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u306a\u3089\u3001\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u3001\u9632\u3052\u308b\u3060\u308d\u3046\u3002\u3057\u304b\u3057\u3001\u305d\u306e\u4e00\u65b9\u3067\u3001\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306a\u3069\u306e\u5b9f\u884c\u74b0\u5883\u306b\u8d77\u56e0\u3059\u308b\u3082\u306e\u3082\u5c11\u306a\u304b\u3089\u305a\u3042\u308b\u306e\u3067\u3001\u5b8c\u5168\u306b\u9632\u3050\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n\u306a\u304a\u3001\u73fe\u5728\u306e\u5b89\u5b9a\u7248\u3067\u306f RCF 1236 \u306e\u6a5f\u80fd\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\u3002\u30aa\u30f3\u30e9\u30a4\u30f3\u306e\u30de\u30cb\u30e5\u30a2\u30eb\u300cThe Rust Programming Language\u300d\u306e\u300cEffective Rust -- Foreign Function Interface\u300d\u306e\u7ae0\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a \u82e6\u3057\u3044\u5bfe\u5fdc\u6cd5\u3092\u52e7\u3081\u3066\u3044\u308b\u3002\n\n\nFFI \u3068 panic\nFFI \u3067\u306f panic! \u306b\u6c17\u3092\u914d\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002\u306a\u305c\u306a\u3089 FFI \u5883\u754c\u3092\u8d85\u3048\u305f panic! \u306e\u632f\u308b\u821e\u3044\u306f\u672a\u5b9a\u7fa9\u3060\u304b\u3089\u3067\u3059\u3002\u3082\u3057 panic \u3059\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u308b\u306a\u3089\u3001\u305d\u306e\u90e8\u5206\u306f\u5225\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u8d70\u3089\u305b\u308b\u3079\u304d\u3067\u3057\u3087\u3046\u3002\u305d\u3046\u3059\u308c\u3070\u3001panic \u304c C \u306b\u4f1d\u308f\u308b\u3053\u3068\u3092\u9632\u3052\u307e\u3059\u3002\nuse std::thread;\n\n#[no_mangle]\npub extern fn oh_no() -> i32 {\n    let h = thread::spawn(|| {\n        panic!(\"Oops!\");\n    });\n\n    match h.join() {\n        Ok(_) => 1,\n        Err(_) => 0,\n    }\n}\n\n\n\u51e6\u7406\u306e\u7c92\u5ea6\u306b\u3082\u3088\u308b\u304c\u3001\u5358\u306b panic \u3092\u88dc\u8db3\u3059\u308b\u305f\u3081\u3060\u3051\u306b\u5225\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3066\u3066\u5b9f\u884c\u3059\u308b\u306e\u306f\u3001\u591a\u304f\u306e\u5834\u5408\u3001\u8907\u96d1\u3059\u304e\u308b\u3060\u308d\u3046\u3002\u307e\u305f\u3001Rust \u3067\u306f Thread \u9593\u3067\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u969b\u306e\u5b89\u5168\u6027\u306e\u691c\u67fb\u304c\u53b3\u3057\u304f\u3001\u6e21\u305b\u306a\u3044\u30c7\u30fc\u30bf\u3082\u591a\u3044\u3002\u4f8b\u3048\u3070\u3001\u5f8c\u3067\u5b9f\u4f8b\u3092\u898b\u308b\u304c\u3001\u4ed6\u8a00\u8a9e\u304b\u3089\u6e21\u3055\u308c\u305f C \u306e\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\u306f\u3001\u30b9\u30ec\u30c3\u30c9\u5883\u754c\u3092\u8d85\u3048\u3089\u308c\u306a\u3044\u3002\n\u3061\u306a\u307f\u306b thread::spawn() \u306f\u3001\u30b9\u30ec\u30c3\u30c9\u304c\u4f5c\u308c\u306a\u304b\u3063\u305f\u6642\u306b panic \u3092\u8d77\u3053\u3059\u306e\u3067\u5b89\u5168\u3067\u306f\u306a\u3044\u3002io::Result<T> \u3092\u8fd4\u3059 thread::Builder::spawn() \u3092\u4f7f\u3046\u306e\u304c\u61f8\u547d\u3060\u308d\u3046\u3002\n\n\u4ed5\u69d8\u306e\u30dd\u30a4\u30f3\u30c8\nRFC 1236 \u306f\u3001\u9577\u304f\u3066\u6fc0\u3057\u3044\u8b70\u8ad6 \u306e\u672b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u4ed5\u69d8\u306b\u843d\u3061\u7740\u3044\u305f\u3002\u73fe\u5728\u306f unstable API \u3068\u3057\u3066 1.7 \u306b\u53d6\u308a\u8fbc\u307e\u308c\u3066\u3044\u308b\u3002\n\npanic \u3092\u8d77\u3053\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u304c\u3001\u81ea\u8eab\u3067\u305d\u308c\u3092\u88dc\u8db3\u3059\u308b\u305f\u3081\u306b std::panic::recover() \u3092\u5c0e\u5165\u3059\u308b\u3002\u5bfe\u8c61\u3068\u3059\u308b\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3068\u3057\u3066\u4e0e\u3048\u308b\u3002\n\nuse std::panic;\n\n#[no_mangle]\npub extern fn called_from_c(ptr: *const c_char, num: i32) -> i32 {\n    let result = panic::recover(|| {\n        let s = unsafe { CStr::from_ptr(ptr) };\n        println!(\"{}: {}\", s, num);\n    });\n    match result {\n        Ok(_)  => 0,\n        Err(_) => 1,\n    }\n}\n\n\npanic \u3067\u51e6\u7406\u304c\u6253\u3061\u5207\u3089\u308c\u305f\u6642\u306e\u30c7\u30fc\u30bf\u306e\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3059\u308b\u305f\u3081\u3001\u547c\u3073\u51fa\u3057\u5143\u3068\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u306e\u9593\u3067\u53d7\u3051\u6e21\u3059\u30c7\u30fc\u30bf\u306f\u3001std::panic::RecoverSafe \u30de\u30fc\u30ab\u30fc\u30fb\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u305f\u578b\u306e\u307f\u306b\u5236\u9650\u3059\u308b\n\n\n\u5909\u66f4\u4e0d\u53ef\u80fd\u306a\u5024\u3084\u3001\u305d\u306e\u53c2\u7167\u306f\u58ca\u308c\u306a\u3044\u306e\u3067 RecoverSafe \u3067\u3042\u308b\n\u5909\u66f4\u53ef\u80fd\u306a\u53c2\u7167 &mut T \u306f\u3001\u30c7\u30fc\u30bf\u304c\u4e2d\u9014\u534a\u7aef\u306b\u66f4\u65b0\u3055\u308c\u305f\u72b6\u614b\u3067 panic \u304c\u8d77\u3053\u308b\u3068\u5b89\u5168\u3067\u306f\u306a\u304f\u306a\u308b\uff08\u4f8b\uff1a\u914d\u5217\u306e\u4e00\u90e8\u306f\u66f4\u65b0\u6e08\u307f\u3067\u3001\u6b8b\u308a\u306f\u672a\u66f4\u65b0\u304b\u672a\u5b9a\u7fa9\u5024\uff09\u3002\u5f93\u3063\u3066 RecoverSafe \u3067\u306f\u306a\u304f\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u306e\u5883\u754c\u3092\u8d85\u3048\u3089\u306a\u3044\nC \u306e\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\uff08*const \u3068 *mut\uff09\u306f\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u306e\u5883\u754c\u3092\u8d85\u3048\u3089\u308c\u308b\u3002\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u3001\u305d\u3082\u305d\u3082\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3067\u306f\u5b89\u5168\u6027\u306e\u691c\u67fb\u304c\u3067\u304d\u305a unsafe \u30d6\u30ed\u30c3\u30af\u3067\u56f2\u3080\u5fc5\u8981\u304c\u3042\u308b\u3002\u305d\u306e\u305f\u3081\u3001panic \u6642\u306e\u5b89\u5168\u6027\u306e\u78ba\u8a8d\u3082\u958b\u767a\u8005\u306b\u4efb\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308b\u3002\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u306f\u3053\u308c\u3089\u306e\u578b\u3092 RecoverSafe \u3068\u307f\u306a\u3059\u3053\u3068\u3067\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3068\u306e\u53d7\u3051\u6e21\u3057\u3092\u8a31\u5bb9\u3059\u308b\n\u5909\u66f4\u53ef\u80fd\u306a\u578b\u3092 RecoverSafe \u3068\u307f\u306a\u3059\u305f\u3081\u306e\u30e9\u30c3\u30d1\u30fc std::panic::AssertRecoverSafe \u3092\u63d0\u4f9b\u3059\u308b\u3002\u3053\u308c\u3067\u30e9\u30c3\u30d7\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u5b89\u5168\u6027\u3068 panic \u6355\u6349\u5f8c\u306e\u51e6\u7f6e\u306b\u3064\u3044\u3066\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3067\u306f\u306a\u304f\u3001\u958b\u767a\u8005\u304c\u8cac\u4efb\u3092\u6301\u3064\n\n\n\n\npanic::recover() \u3092\u4e00\u822c\u7684\u306a Rust \u95a2\u6570\u3067\u8a66\u3057\u3066\u307f\u308b\npanic \u3092\u8d77\u3053\u3059\u95a2\u6570\u3092 panic::recover() \u3067\u6355\u6349\u3057\u3066\u307f\u3088\u3046\u3002\n\u306a\u304a\u3001\u3053\u306e API \u306f\u73fe\u6642\u70b9\uff082016\u5e741\u6708 Rust 1.7 nightly\uff09\u3067\u306f\u975e\u5b89\u5b9a\u3060\u3002\u4eca\u5f8c\u3001\u4e88\u544a\u306a\u3057\u306b\u5909\u66f4\u3001\u307e\u305f\u306f\u3001\u524a\u9664\u3055\u308c\u308b\u53ef\u80fd\u6027\u3082\u3042\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u307b\u3057\u3044\u3002\u307e\u305f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u306f\u3001\u975e\u5b89\u5b9a\u7248\u306e rustc \u304c\u5fc5\u9808\u3068\u306a\u308b\u3002\n\u3053\u3053\u3067\u306f\u3001\u4f8b\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7c21\u5358\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u7528\u3059\u308b\u3002\nfn remainders(number: i64, divisors: &Vec<i64>) -> Vec<i64> {\n    let mut rems = Vec::new();\n    for div in divisors.iter() {\n        rems.push(number % div);\n    }\n    rems\n}\n\n\u95a2\u6570 remainders() \u306f\u3001number: i64 \u3068 divisors: &Vec<i64> \u306e\uff12\u3064\u306e\u5f15\u6570\u3092\u53d6\u308b\u3002divisors \u306e\u5404\u8981\u7d20\u3067 number \u306e\u5270\u4f59\u3092\u53d6\u308a\u3001Vec<i64> \u578b\u3067\u7d50\u679c\u3092\u8fd4\u3059\u3002\n\u547c\u3073\u51fa\u3059\u5074\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\nfn main() {\n    let number = 13;\n    let divisors = vec![7, 3, 11, 5, 2];\n    let rems = remainders(number, &divisors);\n    println!(\"{} % {:?} = {:?}\", number, divisors, rems);\n}\n\n\u5b9f\u884c\u7d50\u679c\n% cargo run\n13 % [7, 3, 11, 5, 2] = [6, 1, 2, 3, 1]\n\n\u3082\u3057\u3001divisors \u304c 0 \u3092\u542b\u3093\u3067\u3044\u308b\u3068\u3001\u30bc\u30ed\u9664\u7b97\u306b\u3088\u308b panic \u304c\u8d77\u3053\u308a\u3001\u30d7\u30ed\u30bb\u30b9\u304c abort \u3055\u308c\u308b\u3002\n    // let divisors = vec![7, 3, 11, 5, 2];\n    let divisors = vec![7, 3, 0, 5, 2];\n\nthread '<main>' panicked at 'attempted remainder with a divisor of zero', src/libcore/ops.rs:430\nProcess didn't exit successfully: `target/debug/example` (exit code: 101)\n\n\u4eca\u56de\u306e\u3088\u3046\u306b\u30bc\u30ed\u9664\u7b97\u3067\u554f\u984c\u304c\u8d77\u304d\u308b\u3068\u4e8b\u524d\u306b\u308f\u304b\u3063\u3066\u3044\u308b\u5834\u5408\u3001Rust \u306e\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u306b\u5f93\u3046\u306a\u3089\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b Result<T, E> \u578b\u3092\u4f7f\u3046\u3079\u304d\u3060\u308d\u3046\u3002\nfn remainders(number: i64, divisors: &Vec<i64>) -> Result<Vec<i64>, String> {\n    let mut rems = Vec::new();\n    for div in divisors.iter() {\n        if *div == 0 {\n            return Err(\"attempted remainder with a divisor of zero\".to_owned());\n        }\n        rems.push(number % div);\n    }\n    Ok(rems)\n}\n\nfn main() {\n    let number = 13;\n    let divisors = vec![7, 3, 0, 5, 2];\n    match remainders(number, &divisors) {\n        Ok(rems) =>\n            println!(\"{} % {:?} = {:?}\", number, divisors, rems),\n        Err(reason) =>\n            println!(\"{} % {:?} failed because {}.\", number, divisors, reason),\n    }\n}\n\n13 % [7, 3, 0, 5, 2] failed because attempted remainder with a divisor of zero.\n\n\u305f\u3060\u3001\u4eca\u56de\u306f\u8aac\u660e\u306e\u305f\u3081\u306b\u3001\u3042\u3048\u3066 panic \u3092\u88dc\u8db3\u3059\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u53d6\u308b\u3002\n\n\u5b89\u5b9a\u7248 Rust \u3067\u306e\u65b9\u6cd5\uff1a\u5225\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3066\u308b\n\u307e\u305a\u306f\u3001\u73fe\u5728\u306e\u5b89\u5b9a\u7248\u3067\u884c\u3048\u308b\u5bfe\u7b56\u3068\u3057\u3066\u3001panic \u3092\u8d77\u3053\u3057\u305d\u3046\u306a\u95a2\u6570\u3092\u3001\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3059\u308b\u3002\njoin() \u306f\u3001\u30b9\u30ec\u30c3\u30c9\u306e\u6b63\u5e38\u7d42\u4e86\u6642\u306f Ok \u3092\u8fd4\u3057\u3001\u30af\u30e9\u30c3\u30b7\u30e5\u6642\u306f Err \u3092\u8fd4\u3059\u3002\nuse std::thread;\n\nfn remainders(number: i64, divisors: &Vec<i64>) -> Result<Vec<i64>, String> {\n    let (number_c, divisors_c) = (number.clone(), divisors.clone());\n    let h = try!(thread::Builder::new().name(\"rem\".to_owned()).spawn(move || {\n        let mut rems = Vec::new();\n        for div in divisors_c.iter() {\n            rems.push(number_c % div);\n        }\n        rems\n    }).map_err(|e| e.to_string()));\n\n    match h.join() {\n        Ok(rems) => Ok(rems),\n        Err(e)   =>\n            match e.downcast_ref::<String>() {\n                Some(as_string) => Err(as_string.to_owned()),\n                None            => Err(\"\".to_owned()),\n        }\n    }\n}\n\nfn main() {\n    let number = 13;\n    let divisors = vec![7, 3, 0, 5, 2];\n    match remainders(number, &divisors) {\n        Ok(rems) =>\n            println!(\"{} % {:?} = {:?}\", number, divisors, rems),\n        Err(reason) =>\n            println!(\"{} % {:?} failed because {}.\", number, divisors, reason),\n    }\n}\n\nthread 'rem' panicked at 'attempted remainder with a divisor of zero', src/libcore/ops.rs:430\n13 % [7, 3, 0, 5, 2] failed because attempted remainder with a divisor of zero.\n\n\u78ba\u304b\u306b\u52d5\u304f\u304c\u3001\u7121\u99c4\u306b\u30b9\u30ec\u30c3\u30c9\u3092\u8d70\u3089\u305b\u3066\u3044\u308b\u611f\u306f\u5426\u3081\u306a\u3044\u3002\n\u5f8c\u534a\u306e match \u5f0f\u306e\u3042\u305f\u308a\u306f\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u3044\u308b\u304c\u3001\u305d\u306e\u6c17\u306b\u306a\u308c\u3070\u3001\u5171\u901a\u90e8\u54c1\u3068\u3057\u3066\u5225\u95a2\u6570\u306b\u304f\u304f\u308a\u51fa\u305b\u308b\u306e\u3067\u554f\u984c\u306a\u3044\u3060\u308d\u3046\u3002\u4eca\u56de\u306f\u3053\u306e\u307e\u307e match \u5f0f\u3092\u66f8\u304d\u7d9a\u3051\u308b\u3002\n\n\u975e\u5b89\u5b9a\u7248 panic::recover() \u3092\u4f7f\u3046\n\u672c\u984c\u306e panic::recover() \u3092\u4f7f\u3063\u3066\u307f\u3088\u3046\u3002\u3053\u306e\u95a2\u6570\u306f\u3001\u6b63\u5e38\u7d42\u4e86\u6642\u306f\u5143\u306e\u623b\u308a\u5024\u3092 Ok \u3067\u30e9\u30c3\u30d7\u3057\u3001panic \u6642\u306f Err \u3092\u8fd4\u3059\u3002\n#![feature(recover, std_panic)]\nuse std::panic;\n\nfn remainders(number: i64, divisors: &Vec<i64>) -> Result<Vec<i64>, String> {\n    let result = panic::recover(move || {\n        let mut rems = Vec::new();\n        for div in divisors.iter() {\n            rems.push(number % div);\n        }\n        rems\n    });\n\n    match result {\n        Ok(rems) => Ok(rems),\n        Err(e)   =>\n            match e.downcast_ref::<String>() {\n                Some(as_string) => Err(as_string.to_owned()),\n                None            => Err(\"\".to_owned()),\n        }\n    }\n}\n\nfn main() {\n    // \u7701\u7565\uff08\u30b9\u30ec\u30c3\u30c9\u7248\u3068\u540c\u3058\uff09\n}\n\nthread '<main>' panicked at 'attempted remainder with a divisor of zero', src/libcore/ops.rs:430\n13 % [7, 3, 0, 5, 2] failed because attempted remainder with a divisor of zero.\n% echo $?\n0\n\n\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067 panicked \u3068\u8868\u793a\u3055\u308c\u305f\u304c\u3001\u305d\u306e\u5f8c\u3001\u56de\u5fa9\u3057\u3066\u7d50\u679c\u3092\u8868\u793a\u3057\u305f\u3002\u3044\u3044\u611f\u3058\u3060\u3002\n\nAssertRecoverSafe \u304c\u5fc5\u8981\u306a\u30b1\u30fc\u30b9\nremainder() \u3092\u4fee\u6b63\u3057\u3066\u3001\u6bce\u56de\u65b0\u3057\u3044 vector \u3092\u4f5c\u3063\u3066\u8fd4\u3059\u306e\u3067\u306f\u306a\u304f\u3001\u547c\u3073\u51fa\u3057\u5143\u304c\u7528\u610f\u3057\u305f vector \u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u306b\u5909\u3048\u3066\u307f\u3088\u3046\u3002\u4eca\u56de\u306f\uff11\u56de\u9650\u308a\u306e\u5b9f\u884c\u306a\u306e\u3067\u3001\u306a\u3093\u306e\u30e1\u30ea\u30c3\u30c8\u3082\u306a\u3044\u304c\u3001vector \u3092\u7e70\u308a\u8fd4\u3057\u4f7f\u3046\u30d0\u30c3\u30d5\u30a1\u30fc\u7684\u306a\u7528\u9014\u3067\u306f\u3001\u30e1\u30e2\u30ea\u5272\u308a\u5f53\u3066\u3001\u89e3\u653e\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u3092\u56de\u907f\u3067\u304d\u308b\u3002\n#![feature(recover, std_panic)]\n\nuse std::panic;\n\nfn remainders(number: i64, divisors: &Vec<i64>, mut rems: &mut Vec<i64>) -> Result<(), String> {\n    let result = panic::recover(move || {\n        for (i, div) in divisors.iter().enumerate() {\n            rems[i] = number % div;\n        }\n    });\n\n    match result {\n        Ok(_)  => Ok(()),\n        Err(e) =>\n               match e.downcast_ref::<String>() {\n                   Some(as_string) => Err(as_string.to_owned()),\n                   None            => Err(\"\".to_owned()),\n               }\n    }\n}\n\nfn main() {\n    let number = 13;\n    let divisors = vec![7, 3, 0, 5, 2];\n    let mut rems = vec![0; 5];\n    match remainders(number, &divisors, &mut rems) {\n        Ok(_) =>\n            println!(\"{} % {:?} = {:?}\", number, divisors, rems),\n        Err(reason) =>\n            println!(\"{} % {:?} failed because {}.\", number, divisors, reason),\n    }\n}\n\n% cargo run\n   Compiling example v0.1.0 (file:///...)\nsrc/main.rs:8:15: 8:29 error: the trait `std::panic::RecoverSafe` is not\n  implemented for the type `&mut collections::vec::Vec<i64>` [E0277]\nsrc/main.rs:8     let res = panic::recover(move || {\n                            ^~~~~~~~~~~~~~\nsrc/main.rs:8:15: 8:29 help: run `rustc --explain E0277` to see a detailed explanation\nsrc/main.rs:8:15: 8:29 note: the type &mut collections::vec::Vec<i64> may not\n  be safely transferred across a recover boundary\nsrc/main.rs:8:15: 8:29 note: required because of the requirements on\n  the impl of `std::panic::RecoverSafe`\n  for `[closure@src/main.rs:8:30: 12:6\n  divisors:&collections::vec::Vec<i64>, number:i64, rems:&mut collections::vec::Vec<i64>]`\nsrc/main.rs:8:15: 8:29 note: required by `std::panic::recover`\nerror: aborting due to previous error\nCould not compile `example`.\n\nTo learn more, run the command again with --verbose.\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u3002\n\u3053\u306e\u3088\u3046\u306b\u3001\u5909\u66f4\u53ef\u80fd\u306a\u53c2\u7167 &mut T \u306f RecoverSafe \u3067\u306f\u306a\u3044\u305f\u3081\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u306e\u5883\u754c\u3092\u8d85\u3048\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\u306a\u305c\u306a\u3089\u3001\u5909\u66f4\u53ef\u80fd\u306a\u53c2\u7167\u306f\u3001\u30c7\u30fc\u30bf\u304c\u4e2d\u9014\u534a\u7aef\u306b\u66f4\u65b0\u3055\u308c\u305f\u72b6\u614b\u3067 panic \u304c\u8d77\u3053\u3063\u305f\u3068\u304d\u306b\u3001\u305d\u306e\u5185\u5bb9\u304c\u5b89\u5168\u304b\u3069\u3046\u304b\u4fdd\u8a3c\u3067\u304d\u306a\u304f\u306a\u308b\u304b\u3089\u3060\u3002\u4f8b\u3048\u3070\u3001\u4eca\u56de\u306e\u3088\u3046\u306b\u914d\u5217\u306e\u8981\u7d20\u3092\u9806\u306b\u66f4\u65b0\u3057\u3066\u3044\u308b\u6700\u4e2d\u306b panic \u304c\u8d77\u304d\u308b\u3068\u3001\u4e00\u90e8\u306e\u8981\u7d20\u306f\u66f4\u65b0\u6e08\u307f\u3067\u3001\u6b8b\u308a\u306e\u8981\u7d20\u306f\u672a\u66f4\u65b0\u3067\u6b8b\u3063\u3066\u3057\u307e\u3046\u3002\n\u3067\u3082\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001panic \u3092\u88dc\u8db3\u3057\u305f\u5f8c\u306f\u3001\u305d\u306e\u4e2d\u9014\u534a\u7aef\u306b\u66f4\u65b0\u3055\u308c\u305f\u5024\u3092\u4f7f\u308f\u305a\u306b\u6368\u3066\u308b\u306e\u3060\u304b\u3089\u3001\u306a\u3093\u3089\u554f\u984c\u304c\u306a\u3044\u3002\u305d\u306e\u3053\u3068\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u306b\u6559\u3048\u3066\u3042\u3052\u3088\u3046\u3002AssertRecoverSafe \u3067\u30e9\u30c3\u30d7\u3059\u308b\u3002\n#![feature(recover, std_panic)]\n\nuse std::panic;\nuse std::panic::AssertRecoverSafe;\n\nfn remainders(number: i64, divisors: &Vec<i64>, mut rems: &mut Vec<i64>) -> Result<(), String> {\n    let mut rems = AssertRecoverSafe::new(&mut rems); // \u3053\u306e\u884c\u3092\u8ffd\u52a0\n    let result = panic::recover(move || {\n        for (i, div) in divisors.iter().enumerate() {\n            rems[i] = number % div;\n        }\n    });\n\n// \uff08\u4ee5\u4e0b\u3001\u7701\u7565\uff09\n\nthread '<main>' panicked at 'attempted remainder with a divisor of zero', src/libcore/ops.rs:430\n13 % [7, 3, 0, 5, 2] failed because \"attempted remainder with a divisor of zero\".\n\n\u3053\u308c\u3067\u3088\u3057\u3002\n\npanic::recover() \u3092 FFI \u3067\u8a66\u3057\u3066\u307f\u308b\n\u4eca\u5ea6\u306f\u5c11\u3057\u5b9f\u8df5\u7684\u306a\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3068\u3057\u3066\u3001FFI \u3092\u6271\u3046\u3002C \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u901a\u3058\u3066\u4ed6\u8a00\u8a9e\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b Rust \u95a2\u6570\u3092\u60f3\u5b9a\u3057\u3088\u3046\u3002\u6a5f\u80fd\u306f\u5148\u307b\u3069\u3068\u540c\u3058\u3060\u304c\u3001\u5f15\u6570\u306e\u53d7\u3051\u6e21\u3057\u65b9\u304c\u7570\u306a\u308b\u3002divisors \u3068 remainders \u914d\u5217\u306f\u3001\u4ed6\u8a00\u8a9e\u5074\u304c\u7528\u610f\u3057\u305f\u3082\u306e\u306b\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\uff08*const T \u3084 *mut T\uff09\u3092\u901a\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3002\nuse std::slice;\n\nextern crate libc;\nuse libc::c_int;\nuse libc::c_long;\n\n#[no_mangle]\npub extern fn remainders(number: c_long, divisors_ptr: *const c_long, len: c_int,\n                         rems_ptr: *mut c_long) -> c_int {\n    let divs_slice = unsafe { slice::from_raw_parts(divisors_ptr, len as usize) };\n    let rems_slice = unsafe { slice::from_raw_parts_mut(rems_ptr, len as usize) };\n\n    for (div_ptr, rem_ptr) in divs_slice.iter().zip(rems_slice.iter_mut()) {\n        (*rem_ptr) = number % (*div_ptr);\n    }\n    0\n}\n\n\u547c\u3073\u51fa\u3057\u5143\u3060\u304c\u3001\u308f\u3056\u308f\u3056 C \u3067\u66f8\u304f\u306e\u3082\u9762\u5012\u306a\u306e\u3067\u3001\u666e\u901a\u306e Rust \u306e main \u95a2\u6570\u3067\u4ee3\u7528\u3057\u3088\u3046\u3002\u5f15\u6570\u306e\u5f62\u5f0f\u3060\u3051 C \u306e\u6d41\u5100\u306b\u5f93\u3063\u305f\u3002\nfn main() {\n    let number: c_long        = 13;\n    let divisors: [c_long; 5] = [7, 3, 0, 5, 2];\n    let mut rems: [c_long; 5] = unsafe { std::mem::uninitialized() };\n\n    let divisors_ptr = divisors.as_ptr();\n    let rems_ptr     = rems.as_mut_ptr();\n\n    let status = remainders(number, divisors_ptr, divisors.len() as c_int, rems_ptr);\n    if status == 0 {\n        println!(\"{} % {:?} = {:?}\", number, divisors, rems);\n    } else {\n        println!(\"{} % {:?} failed.\", number, divisors);\n    }\n}\n\n\nthread '<main>' panicked at 'attempted remainder with a divisor of zero', src/main.rs:31\nProcess didn't exit successfully: `target/debug/example` (exit code: 101)\n\n\u30bc\u30ed\u9664\u7b97\u3067\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u305f\u3002\n\n\u5b89\u5b9a\u7248 Rust \u3067\u306e\u65b9\u6cd5\uff1a\u5225\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3066\u308b\u3001\u306e\u306f\u7d50\u69cb\u53b3\u3057\u3044\nuse std::slice;\nuse std::thread;\n\nextern crate libc;\nuse libc::c_int;\nuse libc::c_long;\n\n#[no_mangle]\npub extern fn remainders(number: c_long, divisors_ptr: *const c_long, len: c_int,\n                         rems_ptr: *mut c_long) -> c_int {\n    let h = thread::Builder::new().name(\"rem\".to_owned()).spawn(move || {\n        let divs_slice = unsafe { slice::from_raw_parts(divisors_ptr, len as usize) };\n        let rems_slice = unsafe { slice::from_raw_parts_mut(rems_ptr, len as usize) };\n\n        for (div_ptr, rem_ptr) in divs_slice.iter().zip(rems_slice.iter_mut()) {\n            (*rem_ptr) = number % (*div_ptr);\n        }\n        0\n    });\n\n    match h {\n        Ok(h)  => h.join().unwrap_or(1),\n        Err(_) => 1,\n    }\n}\n\nfn main() {\n    // \u5909\u66f4\u306a\u3057\u3002\u7701\u7565\n\n% cargo run\n   Compiling example v0.1.0 (file:///...)\nsrc/main.rs:11:59: 19:7 error: the trait `core::marker::Send` is not implemented\n  for the type `*const i64` [E0277]\nsrc/main.rs:11     let h = thread::Builder::new().name(\"rem\".to_owned()).spawn(move || {\n               ...\nsrc/main.rs:11:59: 19:7 help: run `rustc --explain E0277` to see a detailed explanation\nsrc/main.rs:11:59: 19:7 note: `*const i64` cannot be sent between threads safely\nsrc/main.rs:11:59: 19:7 note: required because it appears within the type\n  `[closure@src/main.rs:11:65: 19:6\n  divisors_ptr:*const i64, len:i32, rems_ptr:*mut i64, number:i64]`\nerror: aborting due to previous error\nCould not compile `example`.\n\nTo learn more, run the command again with --verbose.\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u3002\n\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\u306f\u3001\u30b9\u30ec\u30c3\u30c9\u5883\u754c\u3092\u8d85\u3048\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\u3053\u306e\u3088\u3046\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\u30b9\u30ec\u30c3\u30c9\u5883\u754c\u3092\u8d85\u3048\u308b\u305f\u3081\u306b\u306f\u3001\u578b\u304c Send + 'static \u3067\u3042\u308b\u3053\u3068\u304c\u8981\u6c42\u3055\u308c\u308b\u3002Send \u306f\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u5b89\u5168\u306b\u53d7\u3051\u6e21\u3057\u304c\u3067\u304d\u308b\u3053\u3068\u3092\u8868\u3059\u30de\u30fc\u30ab\u30fc\u30fb\u30c8\u30ec\u30a4\u30c8\u3002'static \u306f\u30c7\u30fc\u30bf\u306e\u5bff\u547d\u304c\u7279\u5b9a\u306e\u30b9\u30b3\u30fc\u30d7\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3053\u3068\u3092\u8868\u3059\u3002\n\u76f4\u3059\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u3001\u3053\u306e\u307e\u307e\u6b21\u306b\u9032\u3082\u3046\u3002\n\n\u975e\u5b89\u5b9a\u7248 panic::recover() \u3092\u4f7f\u3046\n\u4ed5\u69d8\u306e\u3068\u3053\u308d\u3067\u8aac\u660e\u3057\u305f\u3068\u304a\u308a\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\u306f RecoverSafe \u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3002\u305d\u306e\u305f\u3081\u3001panic::recover() \u306e\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u5883\u754c\u3092\u8d85\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n#![feature(recover, std_panic)]\n\nuse std::slice;\nuse std::panic;\n\nextern crate libc;\nuse libc::c_int;\nuse libc::c_long;\n\n#[no_mangle]\npub extern fn remainders(number: c_long, divisors_ptr: *const c_long, len: c_int,\n                         rems_ptr: *mut c_long) -> c_int {\n    panic::recover(move || {\n        let divs_slice = unsafe { slice::from_raw_parts(divisors_ptr, len as usize) };\n        let rems_slice = unsafe { slice::from_raw_parts_mut(rems_ptr, len as usize) };\n\n        for (div_ptr, rem_ptr) in divs_slice.iter().zip(rems_slice.iter_mut()) {\n            (*rem_ptr) = number % (*div_ptr);\n        }\n        0\n    }).unwrap_or(1)\n}\n\nfn main() {\n    // \u5909\u66f4\u306a\u3057\u3002\u7701\u7565\n\nthread '<main>' panicked at 'attempted remainder with a divisor of zero', src/main.rs:18\n13 % [7, 3, 0, 5, 2] failed.\n\n\u305f\u3060\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\u306e\u5834\u5408\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u304c\u305d\u306e\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002panic \u6642\u306e\u30c7\u30fc\u30bf\u306e\u7834\u58ca\u3084\u3001\u30e1\u30e2\u30ea\u30fc\u30ea\u30fc\u30af\u306b\u3064\u3044\u3066\u306f\u3001\u958b\u767a\u8005\u81ea\u8eab\u304c\u5bfe\u7b56\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\u4f8b\u3048\u3070\u3001\u4eca\u56de\u306e\u3088\u3046\u306b panic \u5f8c\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u308f\u305a\u306b\u7834\u68c4\u3059\u308b\u3001\u3068\u3044\u3063\u305f\u5bfe\u5fdc\u304c\u5fc5\u8981\u3060\u3002\n\npanic::recover() \u3067\u88dc\u8db3\u3067\u304d\u306a\u3044\u30b1\u30fc\u30b9\n\u5f53\u7136\u306e\u3053\u3068\u3060\u304c panic::recover() \u306f Rust \u5185\u3067\u8d77\u3053\u3057\u305f panic \u3057\u304b\u88dc\u8db3\u3067\u304d\u306a\u3044\u3002\u4e0d\u6b63\u306a\u5024\u3092\u6301\u3063\u305f\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306a\u3069\u306f\u3001OS \u304c\u30d7\u30ed\u30bb\u30b9\u3092\u5f37\u5236\u7d42\u4e86\u3059\u308b\u306e\u3067\u3001\u6355\u6349\u306f\u4e0d\u53ef\u80fd\u3060\u3002\nfn main() {\n    ...\n\n    // let rems_ptr     = rems.as_mut_ptr();\n    let rems_ptr = unsafe { std::mem::uninitialized() };\n\n% cargo run\n     Running `target/debug/example`\nAn unknown error occurred\n\nTo learn more, run the command again with --verbose.\n\n% cargo run --verbose\n     Running `target/debug/example`\nProcess didn't exit successfully: `target/debug/example` (signal: 11)\n\n\u3053\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u306f\u30d0\u30b0\u306b\u8d77\u56e0\u3059\u308b\u3082\u306e\u306a\u306e\u3067\u3001\u30d0\u30b0\u3092\u76f4\u3059\u306e\u304c\u5148\u6c7a\u3060\u3002\u306a\u304a\u3001FFI \u3092\u4f7f\u308f\u306a\u3044\u666e\u901a\u306e Rust \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\u3082 unsafe \u30d6\u30ed\u30c3\u30af\u3082\u767b\u5834\u3057\u306a\u3044\u306e\u3067\u3001\u5168\u3066\u306e panic \u3092\u88dc\u8db3\u3067\u304d\u308b\u3060\u308d\u3046\u3002\n\n\u307e\u3068\u3081\n\nRust RFC 1236 \u3067\u306f\u3001panic \u3092\u88dc\u8db3\u3059\u308b\u95a2\u6570 std::panic::recover() \u3068\u3001panic \u304b\u3089\u306e\u56de\u5fa9\u306b\u5bfe\u3057\u3066\u5b89\u5168\u306a\u3053\u3068\u3092\u8868\u3059 std::panic::RecoverSafe \u30de\u30fc\u30ab\u30fc\u30fb\u30c8\u30ec\u30a4\u30c8\u3092\u63d0\u6848\u3057\u3066\u3044\u308b\n\u3053\u306e\u6a5f\u80fd\u306f rustc 1.7 nightly \u3067\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u308b\n\u4e3b\u306b FFI \u3084\u6c4e\u7528\u7684\u306a\u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb\u3067\u306e\u5229\u7528\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\nRust \u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u3067\u306f\u3001panic \u306b\u983c\u3089\u306a\u3044\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u63a8\u5968\u3057\u3066\u3044\u308b\n\n\u500b\u4eba\u7684\u306b\u306f\u3001RFC 1236 \u306f\u3001\u30c7\u30fc\u30bf\u306e\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3057\u306a\u304c\u3089\u3082 panic \u3092\u88dc\u8db3\u3067\u304d\u308b\u3001\u5b9f\u8df5\u7684\u306a\u6a5f\u80fd\u306b\u4ed5\u4e0a\u304c\u3063\u3066\u3044\u308b\u3068\u611f\u3058\u305f\u3002\n\n\n\n\n\nRust\u306f\u4f4e\u30ec\u30d9\u30eb\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u72ec\u81ea\u306e\u4f8b\u5916\u51e6\u7406\u3092Rust\u81ea\u8eab\u3067\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3060\u3002\u00a0\u21a9\n\n\n\nRust \u306e\u73fe\u6642\u70b9\u306e\u6700\u65b0\u306e\u5b89\u5b9a\u7248 1.5 \u3067\u306f\u3001panic \u304c\u8d77\u3053\u3063\u305f\u6642\u306b\u3001\u305d\u308c\u3092\u6355\u6349\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002panic \u3092\u8d77\u3053\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u306f\u30e1\u30e2\u30ea\u30fc\u3092\u89e3\u653e\u3057\u305f\u5f8c\u3001\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u30021.7 nightly \u3067\u306f panic \u3092\u6355\u6349\u3059\u308b\u4ed5\u7d44\u307f\u3068\u3057\u3066 `std::panic:recover()` \u304c\u975e\u5b89\u5b9a API \u3068\u3057\u3066\u8ffd\u52a0\u3055\u308c\u305f\u3002\n\n\u79c1\u306f Erlang VM \u304b\u3089 FFI \u7d4c\u7531\u3067 Rust \u306e\u95a2\u6570\u3092\u4f7f\u3044\u305f\u3044\u306e\u3067\u3001panic \u304c\u6355\u6349\u3067\u304d\u306a\u3044\u3068\u304b\u306a\u308a\u8f9b\u3044\u3002\u3053\u306e\u6a5f\u80fd\u3092\u8a66\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n## 2016\u5e744\u670810\u65e5\u8ffd\u8a18\uff1a\u3053\u306e\u6a5f\u80fd\u306f Rust 1.9 \u3067\u5b89\u5b9a\u5316\u3055\u308c\u305f\n\n- [std: Stabilize APIs for the 1.9 release #32804](https://github.com/rust-lang/rust/pull/32804/files#diff-f0a475ebd45e8b84e91e006a89b8c321R115)\n\n**\u5909\u66f4\u70b9**\n- `std::panic::recover()` \u304b\u3089\u3001`std::panic::catch_unwind()` \u306b\u5909\u66f4\n- `RecoverSafe` \u3068 `AssertRecoverSafe()` \u304b\u3089\u3001`UnwindSafe` \u3068 `AssertUnwindSafe()` \u306b\u5909\u66f4\n- \u5909\u6570\u3060\u3051\u3067\u306a\u304f\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3092 `AssertUnwindSafe` \u3067\u30e9\u30c3\u30d7\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u306b\u306a\u3063\u305f\uff08\u30de\u30a4\u30ca\u30b9\u9762\u3042\u308a\uff09\n\n\u6700\u5f8c\u306e\u5909\u66f4\u306b\u3088\u308a\u3001\u4f8b\u3048\u3070\u3053\u3046\u66f8\u3044\u3066\u3044\u305f\u306e\u304c\u3001\n\n```rust:src/librustdoc/test.rs\n   let b_sess = AssertRecoverSafe(&sess);\n   let b_cstore = AssertRecoverSafe(&cstore);\n   let b_cfg = AssertRecoverSafe(cfg.clone());\n   let b_control = AssertRecoverSafe(&control);\n\n   panic::recover(|| {\n       driver::compile_input(&b_sess, &b_cstore, (*b_cfg).clone(),\n                             &input, &out,\n                             &None, None, &b_control)\n   })\n```\n\n\u3053\u3046\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u3053\u306e\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u304c\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u308b\u5909\u6570\u304c\u3001\u4e00\u62ec\u3057\u3066 `UnwindSafe` \u306b\u30de\u30fc\u30af\u3055\u308c\u308b\u3002\n\n```rust:src/librustdoc/test.rs\n   let res = panic::catch_unwind(AssertUnwindSafe(|| {\n       driver::compile_input(&sess, &cstore, cfg.clone(),\n                             &input, &out,\n                             &None, None, &control)\n   }));\n```\n\n\u305f\u3060\u3057\u3001[API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u66f8\u304b\u308c\u3066\u3044\u308b](https://github.com/rust-lang/rust/pull/32804/files#diff-f0a475ebd45e8b84e91e006a89b8c321R176) \u3088\u3046\u306b\u3001\u3053\u306e\u4f7f\u3044\u65b9\u306b\u306f\u30de\u30a4\u30ca\u30b9\u9762\u3082\u3042\u308b\u3002\u305d\u308c\u306f\u3001\u5f8c\u65e5\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u306b\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u5909\u6570\u3092\u8ffd\u52a0\u3057\u305f\u6642\u306b\u3001\u4eee\u306b\u305d\u308c\u3092 `UnwindSafe` \u306b\u3059\u308b\u3079\u304d\u3067\u306a\u304b\u3063\u305f\u6642\u3067\u3082\u81ea\u52d5\u7684\u306b `UnwindSafe` \u3068\u307f\u306a\u3055\u308c\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u3060\u3002\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3092\u30e9\u30c3\u30d7\u3059\u308b\u304b\u3069\u3046\u304b\u306f\u3001\u3088\u304f\u8003\u3048\u3066\u304b\u3089\u6c7a\u3081\u3088\u3046\u3002\n\n\uff08\u8ffd\u8a18\u7d42\u308f\u308a\uff09\n\n## \u74b0\u5883\n\n- rustc \u30d0\u30fc\u30b8\u30e7\u30f3\uff1a1.7 nighly\uff082016\u5e741\u670819\u65e5\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304b\u3089\u30d3\u30eb\u30c9\u3057\u305f\u3082\u306e\uff09\n- Host\uff1aFreeBSD 10.2-RELEASE\n\n```shell-session\n% rustc --version --verbose\nrustc 1.7.0-dev (f6dd66e56 2016-01-19)\nbinary: rustc\ncommit-hash: f6dd66e568f705de6a35c7c7a765ad6d79c69b1e\ncommit-date: 2016-01-19\nhost: x86_64-unknown-freebsd\nrelease: 1.7.0-dev\n```\n\n## Rust \u306f\u4f8b\u5916\u51e6\u7406\u3092\u63d0\u4f9b\u3057\u306a\u3044\n\nRust \u306b\u306f\u3001\u4e00\u822c\u7684\u306a\u8a00\u8a9e\u306b\u898b\u3089\u308c\u308b\u4f8b\u5916\u51e6\u7406\u306e\u4ed5\u7d44\u307f\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044[^1]\u3002\u552f\u4e00\u3001\u56de\u5fa9\u4e0d\u53ef\u80fd\u306a\u30a8\u30e9\u30fc\u3092\u8d77\u3053\u3059 `panic!()` \u304c\u3042\u308a\u3001\u3053\u308c\u3092\u8d77\u3053\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u306f\u3001\u30e1\u30e2\u30ea\u30fc\u3092\u958b\u653e\u3057\u305f\u5f8c\u306b\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u3002\u3082\u3057\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u304c panic \u3059\u308b\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53\u304c abort \u3055\u308c\u308b\u3002\n\n[^1]: Rust\u306f\u4f4e\u30ec\u30d9\u30eb\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u72ec\u81ea\u306e\u4f8b\u5916\u51e6\u7406\u3092Rust\u81ea\u8eab\u3067\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3060\u3002\n\n### \u4f8b\uff1a\u660e\u793a\u7684\u306b panic \u3092\u8d77\u3053\u3059\n\n```rust\nfn main() {\n    panic!(\"\u304a\u3063\u3068\");\n}\n```\n\n```shell-session\n% ./main\nthread '<main>' panicked at '\u304a\u3063\u3068', main.rs:4\n% echo $?\n101     # \u2190 \u7570\u5e38\u7d42\u4e86\uff08abort\uff09\n```\n\n### \u4f8b\uff1a`None` \u304b\u3089\u5024\u3092\u53d6\u308a\u51fa\u305d\u3046\u3068\u3059\u308b\u3068\u3001panic \u3059\u308b\n\n```rust\nfn main() {\n    let _: Option<i64> = None.unwrap();\n}\n```\n\n```shell-session\n% ./main\nthread '<main>' panicked at 'called `Option::unwrap()` on\na `None` value', src/libcore/option.rs:366\n% echo $?\n101\n```\n\n### \u4f8b\uff1a\uff10\u306b\u3088\u308b\u9664\u7b97\u3067 panic \u3059\u308b\n\n```rust\nfn main() {\n    println!(\"1 \u00f7 0 = {}\", 1 / 0);\n}\n```\n\n```shell-session\n% ./main\nthread '<main>' panicked at 'attempted to divide by zero', main.rs:4\n% echo $?\n101\n```\n\n### \u4f8b\uff1a\u5b50\u30b9\u30ec\u30c3\u30c9\u304c panic \u3057\u3066\u3082\u3001\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u306b\u306f\u5f71\u97ff\u306a\u3044\n\n\u5b50\u30b9\u30ec\u30c3\u30c9\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u305f\u6642\u306f\u3001`join()` \u3067 `Err<_>` \u304c\u8fd4\u308b\u3002\n\n```rust\nuse std::thread;\n\nfn main() {\n     let h = thread::spawn(|| {\n           panic!(\"\u304a\u3063\u3068\");\n     });\n\n     match h.join() {\n         Ok(_)  => println!(\"\u3042\u3044\u3064\u306f\u751f\u304d\u5ef6\u3073\u305f\u3088\u3046\u3060\"),\n         Err(_) => println!(\"\u3042\u3044\u3064\u306f\u3084\u3089\u308c\u305f\u3088\u3046\u3060\"),\n     }\n}\n```\n\n```shell-session\n% ./main\nthread '<unnamed>' panicked at '\u304a\u3063\u3068', main.rs:7\n\u3042\u3044\u3064\u306f\u3084\u3089\u308c\u305f\u3088\u3046\u3060\n% echo $?\n0     # \u2190 \u6b63\u5e38\u7d42\u4e86\n```\n\n\n## \u30a8\u30e9\u30fc\u51e6\u7406\u3092\u3068\u308a\u307e\u304f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\n\nRust \u3067\u306f\u3001\u30a8\u30e9\u30fc\u51e6\u7406\u306b\u95a2\u9023\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u308b\u3002\n\n- \u30a8\u30e9\u30fc\u304c\u8d77\u3053\u3063\u305f\u3053\u3068\u306f\u3001\u4f8b\u5916\uff08exception\uff09\u3067\u306f\u306a\u304f\u3001\u623b\u308a\u5024\u3067\u793a\u3059\n  * \u4f8b\u3048\u3070\u3001`std::io` \u306b\u3042\u308b\u5927\u534a\u306e\u95a2\u6570\u306f\u3001\u623b\u308a\u5024\u3068\u3057\u3066 `std::io::Result<T>` \u3092\u8fd4\u3059\u3002`Result` \u306f\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u308b\u3053\u3068\u3092\u6697\u793a\u3059\u308b\u578b\n  * \u4f8b\u5916\u3092\u4f7f\u308f\u306a\u3044\u307b\u3046\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u6d41\u308c\u3092\u8ffd\u3044\u3084\u3059\u304f\u3001\u307e\u305f\u3001\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u306b\u3088\u308a\u7c21\u6f54\u306b\u66f8\u3051\u308b\n- \u81f4\u547d\u7684\u306a\u554f\u984c\u304c\u8d77\u3053\u3063\u305f\u6642\u306f\u3001\u30b9\u30ec\u30c3\u30c9\u3092\u56de\u5fa9\u3055\u305b\u308b\u3088\u308a\u3082\u3001\u30af\u30e9\u30c3\u30b7\u30e5\u3055\u305b\u3066\u3001\u304d\u308c\u3044\u306a\u72b6\u614b\u304b\u3089\u518d\u30b9\u30bf\u30fc\u30c8\u3055\u305b\u308b\n  * \u4eee\u306b\u56de\u5fa9\u3055\u305b\u3089\u308c\u305f\u3068\u3057\u3066\u3082\u3001\u4e2d\u9014\u534a\u7aef\u306b\u58ca\u308c\u305f\u30c7\u30fc\u30bf\uff08DB\u3068\u306e\u63a5\u7d9a\u306a\u3069\u3082\u542b\u3080\uff09\u306a\u3069\u304c\u539f\u56e0\u3067\u3001\u4e88\u60f3\u5916\u306e\u632f\u308b\u821e\u3044\u3092\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u307e\u305f `unsafe` \u30d6\u30ed\u30c3\u30af\u304c\u3042\u308b\u5834\u5408\u3001\u305d\u306e\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u306b\u3088\u3063\u3066\u306f\u3001\u30e1\u30e2\u30ea\u30fc\u30ea\u30fc\u30af\u3059\u308b\u53ef\u80fd\u6027\u3082\u3042\u308b\n  * \u554f\u984c\u304c\u8d77\u3053\u3063\u305f\u6642\u306b\u30af\u30e9\u30c3\u30b7\u30e5\u3055\u305b\u308b\u624b\u6cd5\u300cLet it crash\u300d\u306f Erlang/OTP \u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u3092\u53c2\u8003\u306b\u3057\u305f\n\npanic \u306e\u3088\u3046\u306a\u4f8b\u5916\u51e6\u7406\u306f\u3001\u9759\u7684\u306a\u578b\u691c\u67fb\u3067\u691c\u51fa\u3067\u304d\u306a\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u6642\u306b\u8d77\u3053\u308b\u554f\u984c\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u3060\u3051\u306b\u4f7f\u3046\u3002\n\n\n## Rust RFC 1236 Stabilize catch panic\n\n\u3068\u306f\u3044\u3048\u3001\u73fe\u5b9f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u304d\u308c\u3044\u3054\u3068\u3070\u304b\u308a\u3082\u8a00\u3063\u3066\u3089\u308c\u306a\u3044\u3002\u5805\u7262\u6027\u3084\u6027\u80fd\u306e\u305f\u3081\u306b\u3001panic \u3092\u6355\u6349\u3057\u305f\u3044\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3082\u78ba\u5b9f\u306b\u3042\u308b\u3002\u3053\u308c\u306b\u5fdc\u3048\u308b\u305f\u3081\u306b\u63d0\u6848\u3055\u308c\u305f\u306e\u304c\u3001Rust \u306e [RFC 1236 \u300cStabilize catch panic\u300d](https://github.com/rust-lang/rfcs/blob/master/text/1236-stabilize-catch-panic.md)\uff08catch panic \u306e\u5b89\u5b9a\u5316\uff09\u3060\u3002\n\n\u305d\u3053\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u304c\u6319\u3052\u3089\u308c\u3066\u3044\u308b\u3002\n\n1. Rust \u306e panic \u3067\u306f\u3001\u4ed6\u8a00\u8a9e\u95a2\u6570\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\uff08FFI\uff09\u306e\u5883\u754c\u3092\u8d85\u3048\u305f\u6642\u306e\u632f\u308b\u821e\u3044\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u3002\u3082\u3057 C \u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089 Rust \u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u305f\u6642\u306b Rust \u5074\u3067 panic \u3057\u305f\u3089\u3001\u4f55\u304c\u8d77\u3053\u308b\u306e\u304b\u306f\u76f8\u624b\u5074\u306e\u51e6\u7406\u7cfb\u306b\u4f9d\u5b58\u3059\u308b\u3002Rust \u5074\u3067 panic \u3092\u6355\u6349\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3001Rust \u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u305f\u6642\u306b\u3001\u30d7\u30ed\u30b9\u30bb\u30b9\u5168\u4f53\u304c abort \u3055\u308c\u308b\u30ea\u30b9\u30af\u3092\u56de\u907f\u3067\u304d\u308b\u3002\n\n2. \u6c4e\u7528\u7684\u306a\u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb\u306e\u5b9f\u88c5\u3067\u306f\u3001\u30bf\u30b9\u30af\u304c panic \u3057\u305f\u6642\u306b\u3001\u30b9\u30ec\u30c3\u30c9\u3092\u30af\u30e9\u30c3\u30b7\u30e5\uff08\u305d\u3057\u3066\u3001\u65b0\u898f\u30b9\u30bf\u30fc\u30c8\uff09\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001panic \u3092\u88dc\u8db3\u3059\u308b\u3053\u3068\u3092\u9078\u3076\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n\u666e\u6bb5 Erlang/OTP \u3067\u958b\u767a\u3057\u3066\u3044\u308b\u79c1\u3068\u3057\u3066\u306f\u3001\uff12\u3067\u306f\u30b9\u30ec\u30c3\u30c9\u3092\u30af\u30e9\u30c3\u30b7\u30e5\u3055\u305b\u305f\u307b\u3046\u304c\u5805\u7262\u306a\u30b7\u30b9\u30c6\u30e0\u304c\u4f5c\u308c\u308b\u3068\u8003\u3048\u308b\u3002\u3057\u304b\u3057\u3001OS \u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3046 Rust \u306e\u5834\u5408\u3001\u30b9\u30ec\u30c3\u30c9\u306e\u4f5c\u6210\u306f\u6bd4\u8f03\u7684\u91cd\u3044\u51e6\u7406\u306b\u306a\u308b\u306e\u3067\u3001\u6027\u80fd\u306e\u8981\u6c42\u306b\u3088\u3063\u3066\u306f\u3001\uff12\u306e\u3088\u3046\u306a\u9078\u629e\u3082\u30a2\u30ea\u3060\u308d\u3046\u3002\n\n\uff11\u306f\u500b\u4eba\u7684\u306b\u306f\u5207\u5b9f\u306a\u554f\u984c\u3060\u3002\u3068\u3044\u3046\u306e\u306f\u3001\u79c1\u306f Erlang VM \u5185\u3067 Rust \u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u4f7f\u3046\u4e88\u5b9a\u3060\u304b\u3089\u3060\u3002\u73fe\u72b6\u306f\u3001Rust \u5074\u3067 panic \u3059\u308b\u3068\u3001VM \u5168\u4f53\u304c\u30b3\u30a2\u30c0\u30f3\u30d7\u3092\u5410\u3044\u3066\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u3066\u3057\u307e\u3046\u3002\n\npanic \u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30d0\u30b0\u306b\u8d77\u56e0\u3059\u308b\u3082\u306e\u304c\u307b\u3068\u3093\u3069\u306a\u306e\u3067\u3001\u5341\u5206\u306b\u30ec\u30d3\u30e5\u30fc\u3055\u308c\u305f\u3001\u304a\u884c\u5100\u306e\u826f\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u306a\u3089\u3001\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u3001\u9632\u3052\u308b\u3060\u308d\u3046\u3002\u3057\u304b\u3057\u3001\u305d\u306e\u4e00\u65b9\u3067\u3001\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306a\u3069\u306e\u5b9f\u884c\u74b0\u5883\u306b\u8d77\u56e0\u3059\u308b\u3082\u306e\u3082\u5c11\u306a\u304b\u3089\u305a\u3042\u308b\u306e\u3067\u3001\u5b8c\u5168\u306b\u9632\u3050\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n\n\u306a\u304a\u3001\u73fe\u5728\u306e\u5b89\u5b9a\u7248\u3067\u306f RCF 1236 \u306e\u6a5f\u80fd\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\u3002\u30aa\u30f3\u30e9\u30a4\u30f3\u306e\u30de\u30cb\u30e5\u30a2\u30eb\u300cThe Rust Programming Language\u300d\u306e\u300cEffective Rust -- Foreign Function Interface\u300d\u306e\u7ae0\u3067\u306f\u3001[\u4ee5\u4e0b\u306e\u3088\u3046\u306a](https://doc.rust-lang.org/stable/book/ffi.html#ffi-and-panics) \u82e6\u3057\u3044\u5bfe\u5fdc\u6cd5\u3092\u52e7\u3081\u3066\u3044\u308b\u3002\n\n> ### FFI \u3068 panic\n>\n> FFI \u3067\u306f `panic!` \u306b\u6c17\u3092\u914d\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002\u306a\u305c\u306a\u3089 FFI \u5883\u754c\u3092\u8d85\u3048\u305f `panic!` \u306e\u632f\u308b\u821e\u3044\u306f\u672a\u5b9a\u7fa9\u3060\u304b\u3089\u3067\u3059\u3002\u3082\u3057 panic \u3059\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u308b\u306a\u3089\u3001\u305d\u306e\u90e8\u5206\u306f\u5225\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u8d70\u3089\u305b\u308b\u3079\u304d\u3067\u3057\u3087\u3046\u3002\u305d\u3046\u3059\u308c\u3070\u3001panic \u304c C \u306b\u4f1d\u308f\u308b\u3053\u3068\u3092\u9632\u3052\u307e\u3059\u3002\n>\n> ```rust\n> use std::thread;\n>\n> #[no_mangle]\n> pub extern fn oh_no() -> i32 {\n>     let h = thread::spawn(|| {\n>         panic!(\"Oops!\");\n>     });\n>\n>     match h.join() {\n>         Ok(_) => 1,\n>         Err(_) => 0,\n>     }\n> }\n\n\u51e6\u7406\u306e\u7c92\u5ea6\u306b\u3082\u3088\u308b\u304c\u3001\u5358\u306b panic \u3092\u88dc\u8db3\u3059\u308b\u305f\u3081\u3060\u3051\u306b\u5225\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3066\u3066\u5b9f\u884c\u3059\u308b\u306e\u306f\u3001\u591a\u304f\u306e\u5834\u5408\u3001\u8907\u96d1\u3059\u304e\u308b\u3060\u308d\u3046\u3002\u307e\u305f\u3001Rust \u3067\u306f Thread \u9593\u3067\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u969b\u306e\u5b89\u5168\u6027\u306e\u691c\u67fb\u304c\u53b3\u3057\u304f\u3001\u6e21\u305b\u306a\u3044\u30c7\u30fc\u30bf\u3082\u591a\u3044\u3002\u4f8b\u3048\u3070\u3001\u5f8c\u3067\u5b9f\u4f8b\u3092\u898b\u308b\u304c\u3001\u4ed6\u8a00\u8a9e\u304b\u3089\u6e21\u3055\u308c\u305f C \u306e\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\u306f\u3001\u30b9\u30ec\u30c3\u30c9\u5883\u754c\u3092\u8d85\u3048\u3089\u308c\u306a\u3044\u3002\n\n\u3061\u306a\u307f\u306b `thread::spawn()` \u306f\u3001\u30b9\u30ec\u30c3\u30c9\u304c\u4f5c\u308c\u306a\u304b\u3063\u305f\u6642\u306b panic \u3092\u8d77\u3053\u3059\u306e\u3067\u5b89\u5168\u3067\u306f\u306a\u3044\u3002`io::Result<T>` \u3092\u8fd4\u3059 `thread::Builder::spawn()` \u3092\u4f7f\u3046\u306e\u304c\u61f8\u547d\u3060\u308d\u3046\u3002\n\n\n### \u4ed5\u69d8\u306e\u30dd\u30a4\u30f3\u30c8\n\nRFC 1236 \u306f\u3001[\u9577\u304f\u3066\u6fc0\u3057\u3044\u8b70\u8ad6](https://github.com/rust-lang/rfcs/pull/1236) \u306e\u672b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u4ed5\u69d8\u306b\u843d\u3061\u7740\u3044\u305f\u3002\u73fe\u5728\u306f unstable API \u3068\u3057\u3066 1.7 \u306b\u53d6\u308a\u8fbc\u307e\u308c\u3066\u3044\u308b\u3002\n\n- panic \u3092\u8d77\u3053\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u304c\u3001\u81ea\u8eab\u3067\u305d\u308c\u3092\u88dc\u8db3\u3059\u308b\u305f\u3081\u306b `std::panic::recover()` \u3092\u5c0e\u5165\u3059\u308b\u3002\u5bfe\u8c61\u3068\u3059\u308b\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3068\u3057\u3066\u4e0e\u3048\u308b\u3002\n\n```rust\nuse std::panic;\n\n#[no_mangle]\npub extern fn called_from_c(ptr: *const c_char, num: i32) -> i32 {\n    let result = panic::recover(|| {\n        let s = unsafe { CStr::from_ptr(ptr) };\n        println!(\"{}: {}\", s, num);\n    });\n    match result {\n        Ok(_)  => 0,\n        Err(_) => 1,\n    }\n}\n```\n\n- panic \u3067\u51e6\u7406\u304c\u6253\u3061\u5207\u3089\u308c\u305f\u6642\u306e\u30c7\u30fc\u30bf\u306e\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3059\u308b\u305f\u3081\u3001\u547c\u3073\u51fa\u3057\u5143\u3068\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u306e\u9593\u3067\u53d7\u3051\u6e21\u3059\u30c7\u30fc\u30bf\u306f\u3001`std::panic::RecoverSafe` \u30de\u30fc\u30ab\u30fc\u30fb\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u305f\u578b\u306e\u307f\u306b\u5236\u9650\u3059\u308b\n  * \u5909\u66f4\u4e0d\u53ef\u80fd\u306a\u5024\u3084\u3001\u305d\u306e\u53c2\u7167\u306f\u58ca\u308c\u306a\u3044\u306e\u3067 `RecoverSafe` \u3067\u3042\u308b\n  * \u5909\u66f4\u53ef\u80fd\u306a\u53c2\u7167 `&mut T` \u306f\u3001\u30c7\u30fc\u30bf\u304c\u4e2d\u9014\u534a\u7aef\u306b\u66f4\u65b0\u3055\u308c\u305f\u72b6\u614b\u3067 panic \u304c\u8d77\u3053\u308b\u3068\u5b89\u5168\u3067\u306f\u306a\u304f\u306a\u308b\uff08\u4f8b\uff1a\u914d\u5217\u306e\u4e00\u90e8\u306f\u66f4\u65b0\u6e08\u307f\u3067\u3001\u6b8b\u308a\u306f\u672a\u66f4\u65b0\u304b\u672a\u5b9a\u7fa9\u5024\uff09\u3002\u5f93\u3063\u3066 `RecoverSafe` \u3067\u306f\u306a\u304f\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u306e\u5883\u754c\u3092\u8d85\u3048\u3089\u306a\u3044\n  * C \u306e\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\uff08`*const` \u3068 `*mut`\uff09\u306f\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u306e\u5883\u754c\u3092\u8d85\u3048\u3089\u308c\u308b\u3002\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u3001\u305d\u3082\u305d\u3082\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3067\u306f\u5b89\u5168\u6027\u306e\u691c\u67fb\u304c\u3067\u304d\u305a `unsafe` \u30d6\u30ed\u30c3\u30af\u3067\u56f2\u3080\u5fc5\u8981\u304c\u3042\u308b\u3002\u305d\u306e\u305f\u3081\u3001panic \u6642\u306e\u5b89\u5168\u6027\u306e\u78ba\u8a8d\u3082\u958b\u767a\u8005\u306b\u4efb\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308b\u3002\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u306f\u3053\u308c\u3089\u306e\u578b\u3092 `RecoverSafe` \u3068\u307f\u306a\u3059\u3053\u3068\u3067\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3068\u306e\u53d7\u3051\u6e21\u3057\u3092\u8a31\u5bb9\u3059\u308b\n  * \u5909\u66f4\u53ef\u80fd\u306a\u578b\u3092 `RecoverSafe` \u3068\u307f\u306a\u3059\u305f\u3081\u306e\u30e9\u30c3\u30d1\u30fc `std::panic::AssertRecoverSafe` \u3092\u63d0\u4f9b\u3059\u308b\u3002\u3053\u308c\u3067\u30e9\u30c3\u30d7\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u5b89\u5168\u6027\u3068 panic \u6355\u6349\u5f8c\u306e\u51e6\u7f6e\u306b\u3064\u3044\u3066\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3067\u306f\u306a\u304f\u3001\u958b\u767a\u8005\u304c\u8cac\u4efb\u3092\u6301\u3064\n\n\n## panic::recover() \u3092\u4e00\u822c\u7684\u306a Rust \u95a2\u6570\u3067\u8a66\u3057\u3066\u307f\u308b\n\npanic \u3092\u8d77\u3053\u3059\u95a2\u6570\u3092 `panic::recover()` \u3067\u6355\u6349\u3057\u3066\u307f\u3088\u3046\u3002\n\n\u306a\u304a\u3001\u3053\u306e API \u306f\u73fe\u6642\u70b9\uff082016\u5e741\u6708 Rust 1.7 nightly\uff09\u3067\u306f\u975e\u5b89\u5b9a\u3060\u3002\u4eca\u5f8c\u3001\u4e88\u544a\u306a\u3057\u306b\u5909\u66f4\u3001\u307e\u305f\u306f\u3001\u524a\u9664\u3055\u308c\u308b\u53ef\u80fd\u6027\u3082\u3042\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u307b\u3057\u3044\u3002\u307e\u305f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u306f\u3001\u975e\u5b89\u5b9a\u7248\u306e rustc \u304c\u5fc5\u9808\u3068\u306a\u308b\u3002\n\n\u3053\u3053\u3067\u306f\u3001\u4f8b\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7c21\u5358\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f7f\u7528\u3059\u308b\u3002\n\n```rust\nfn remainders(number: i64, divisors: &Vec<i64>) -> Vec<i64> {\n    let mut rems = Vec::new();\n    for div in divisors.iter() {\n        rems.push(number % div);\n    }\n    rems\n}\n```\n\n\u95a2\u6570 `remainders()` \u306f\u3001`number: i64` \u3068 `divisors: &Vec<i64>` \u306e\uff12\u3064\u306e\u5f15\u6570\u3092\u53d6\u308b\u3002`divisors` \u306e\u5404\u8981\u7d20\u3067 `number` \u306e\u5270\u4f59\u3092\u53d6\u308a\u3001`Vec<i64>` \u578b\u3067\u7d50\u679c\u3092\u8fd4\u3059\u3002\n\n\u547c\u3073\u51fa\u3059\u5074\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n```rust\nfn main() {\n    let number = 13;\n    let divisors = vec![7, 3, 11, 5, 2];\n    let rems = remainders(number, &divisors);\n    println!(\"{} % {:?} = {:?}\", number, divisors, rems);\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\n\n```shell-session\n% cargo run\n13 % [7, 3, 11, 5, 2] = [6, 1, 2, 3, 1]\n```\n\n\u3082\u3057\u3001`divisors` \u304c `0` \u3092\u542b\u3093\u3067\u3044\u308b\u3068\u3001\u30bc\u30ed\u9664\u7b97\u306b\u3088\u308b panic \u304c\u8d77\u3053\u308a\u3001\u30d7\u30ed\u30bb\u30b9\u304c abort \u3055\u308c\u308b\u3002\n\n```rust\n    // let divisors = vec![7, 3, 11, 5, 2];\n    let divisors = vec![7, 3, 0, 5, 2];\n```\n\n```shell-session\nthread '<main>' panicked at 'attempted remainder with a divisor of zero', src/libcore/ops.rs:430\nProcess didn't exit successfully: `target/debug/example` (exit code: 101)\n```\n\n\u4eca\u56de\u306e\u3088\u3046\u306b\u30bc\u30ed\u9664\u7b97\u3067\u554f\u984c\u304c\u8d77\u304d\u308b\u3068\u4e8b\u524d\u306b\u308f\u304b\u3063\u3066\u3044\u308b\u5834\u5408\u3001Rust \u306e\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u306b\u5f93\u3046\u306a\u3089\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b `Result<T, E>` \u578b\u3092\u4f7f\u3046\u3079\u304d\u3060\u308d\u3046\u3002\n\n```rust\nfn remainders(number: i64, divisors: &Vec<i64>) -> Result<Vec<i64>, String> {\n    let mut rems = Vec::new();\n    for div in divisors.iter() {\n        if *div == 0 {\n            return Err(\"attempted remainder with a divisor of zero\".to_owned());\n        }\n        rems.push(number % div);\n    }\n    Ok(rems)\n}\n\nfn main() {\n    let number = 13;\n    let divisors = vec![7, 3, 0, 5, 2];\n    match remainders(number, &divisors) {\n        Ok(rems) =>\n            println!(\"{} % {:?} = {:?}\", number, divisors, rems),\n        Err(reason) =>\n            println!(\"{} % {:?} failed because {}.\", number, divisors, reason),\n    }\n}\n```\n\n```shell-session\n13 % [7, 3, 0, 5, 2] failed because attempted remainder with a divisor of zero.\n```\n\n\u305f\u3060\u3001\u4eca\u56de\u306f\u8aac\u660e\u306e\u305f\u3081\u306b\u3001\u3042\u3048\u3066 panic \u3092\u88dc\u8db3\u3059\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u53d6\u308b\u3002\n\n\n### \u5b89\u5b9a\u7248 Rust \u3067\u306e\u65b9\u6cd5\uff1a\u5225\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3066\u308b\n\n\u307e\u305a\u306f\u3001\u73fe\u5728\u306e\u5b89\u5b9a\u7248\u3067\u884c\u3048\u308b\u5bfe\u7b56\u3068\u3057\u3066\u3001panic \u3092\u8d77\u3053\u3057\u305d\u3046\u306a\u95a2\u6570\u3092\u3001\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3059\u308b\u3002\n\n`join()` \u306f\u3001\u30b9\u30ec\u30c3\u30c9\u306e\u6b63\u5e38\u7d42\u4e86\u6642\u306f `Ok` \u3092\u8fd4\u3057\u3001\u30af\u30e9\u30c3\u30b7\u30e5\u6642\u306f `Err` \u3092\u8fd4\u3059\u3002\n\n```rust\nuse std::thread;\n\nfn remainders(number: i64, divisors: &Vec<i64>) -> Result<Vec<i64>, String> {\n    let (number_c, divisors_c) = (number.clone(), divisors.clone());\n    let h = try!(thread::Builder::new().name(\"rem\".to_owned()).spawn(move || {\n        let mut rems = Vec::new();\n        for div in divisors_c.iter() {\n            rems.push(number_c % div);\n        }\n        rems\n    }).map_err(|e| e.to_string()));\n\n    match h.join() {\n        Ok(rems) => Ok(rems),\n        Err(e)   =>\n            match e.downcast_ref::<String>() {\n                Some(as_string) => Err(as_string.to_owned()),\n                None            => Err(\"\".to_owned()),\n        }\n    }\n}\n\nfn main() {\n    let number = 13;\n    let divisors = vec![7, 3, 0, 5, 2];\n    match remainders(number, &divisors) {\n        Ok(rems) =>\n            println!(\"{} % {:?} = {:?}\", number, divisors, rems),\n        Err(reason) =>\n            println!(\"{} % {:?} failed because {}.\", number, divisors, reason),\n    }\n}\n```\n\n```shell-session\nthread 'rem' panicked at 'attempted remainder with a divisor of zero', src/libcore/ops.rs:430\n13 % [7, 3, 0, 5, 2] failed because attempted remainder with a divisor of zero.\n```\n\n\u78ba\u304b\u306b\u52d5\u304f\u304c\u3001\u7121\u99c4\u306b\u30b9\u30ec\u30c3\u30c9\u3092\u8d70\u3089\u305b\u3066\u3044\u308b\u611f\u306f\u5426\u3081\u306a\u3044\u3002\n\n\u5f8c\u534a\u306e `match` \u5f0f\u306e\u3042\u305f\u308a\u306f\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u3044\u308b\u304c\u3001\u305d\u306e\u6c17\u306b\u306a\u308c\u3070\u3001\u5171\u901a\u90e8\u54c1\u3068\u3057\u3066\u5225\u95a2\u6570\u306b\u304f\u304f\u308a\u51fa\u305b\u308b\u306e\u3067\u554f\u984c\u306a\u3044\u3060\u308d\u3046\u3002\u4eca\u56de\u306f\u3053\u306e\u307e\u307e `match` \u5f0f\u3092\u66f8\u304d\u7d9a\u3051\u308b\u3002\n\n\n### \u975e\u5b89\u5b9a\u7248 panic::recover() \u3092\u4f7f\u3046\n\n\u672c\u984c\u306e `panic::recover()` \u3092\u4f7f\u3063\u3066\u307f\u3088\u3046\u3002\u3053\u306e\u95a2\u6570\u306f\u3001\u6b63\u5e38\u7d42\u4e86\u6642\u306f\u5143\u306e\u623b\u308a\u5024\u3092 `Ok` \u3067\u30e9\u30c3\u30d7\u3057\u3001panic \u6642\u306f `Err` \u3092\u8fd4\u3059\u3002\n\n```rust\n#![feature(recover, std_panic)]\nuse std::panic;\n\nfn remainders(number: i64, divisors: &Vec<i64>) -> Result<Vec<i64>, String> {\n    let result = panic::recover(move || {\n        let mut rems = Vec::new();\n        for div in divisors.iter() {\n            rems.push(number % div);\n        }\n        rems\n    });\n\n    match result {\n        Ok(rems) => Ok(rems),\n        Err(e)   =>\n            match e.downcast_ref::<String>() {\n                Some(as_string) => Err(as_string.to_owned()),\n                None            => Err(\"\".to_owned()),\n        }\n    }\n}\n\nfn main() {\n    // \u7701\u7565\uff08\u30b9\u30ec\u30c3\u30c9\u7248\u3068\u540c\u3058\uff09\n}\n```\n\n```shell-session\nthread '<main>' panicked at 'attempted remainder with a divisor of zero', src/libcore/ops.rs:430\n13 % [7, 3, 0, 5, 2] failed because attempted remainder with a divisor of zero.\n% echo $?\n0\n```\n\n\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067 panicked \u3068\u8868\u793a\u3055\u308c\u305f\u304c\u3001\u305d\u306e\u5f8c\u3001\u56de\u5fa9\u3057\u3066\u7d50\u679c\u3092\u8868\u793a\u3057\u305f\u3002\u3044\u3044\u611f\u3058\u3060\u3002\n\n\n### AssertRecoverSafe \u304c\u5fc5\u8981\u306a\u30b1\u30fc\u30b9\n\n`remainder()` \u3092\u4fee\u6b63\u3057\u3066\u3001\u6bce\u56de\u65b0\u3057\u3044 vector \u3092\u4f5c\u3063\u3066\u8fd4\u3059\u306e\u3067\u306f\u306a\u304f\u3001\u547c\u3073\u51fa\u3057\u5143\u304c\u7528\u610f\u3057\u305f vector \u3092\u5229\u7528\u3059\u308b\u65b9\u6cd5\u306b\u5909\u3048\u3066\u307f\u3088\u3046\u3002\u4eca\u56de\u306f\uff11\u56de\u9650\u308a\u306e\u5b9f\u884c\u306a\u306e\u3067\u3001\u306a\u3093\u306e\u30e1\u30ea\u30c3\u30c8\u3082\u306a\u3044\u304c\u3001vector \u3092\u7e70\u308a\u8fd4\u3057\u4f7f\u3046\u30d0\u30c3\u30d5\u30a1\u30fc\u7684\u306a\u7528\u9014\u3067\u306f\u3001\u30e1\u30e2\u30ea\u5272\u308a\u5f53\u3066\u3001\u89e3\u653e\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u3092\u56de\u907f\u3067\u304d\u308b\u3002\n\n```rust\n#![feature(recover, std_panic)]\n\nuse std::panic;\n\nfn remainders(number: i64, divisors: &Vec<i64>, mut rems: &mut Vec<i64>) -> Result<(), String> {\n    let result = panic::recover(move || {\n        for (i, div) in divisors.iter().enumerate() {\n            rems[i] = number % div;\n        }\n    });\n\n    match result {\n        Ok(_)  => Ok(()),\n        Err(e) =>\n               match e.downcast_ref::<String>() {\n                   Some(as_string) => Err(as_string.to_owned()),\n                   None            => Err(\"\".to_owned()),\n               }\n    }\n}\n\nfn main() {\n    let number = 13;\n    let divisors = vec![7, 3, 0, 5, 2];\n    let mut rems = vec![0; 5];\n    match remainders(number, &divisors, &mut rems) {\n        Ok(_) =>\n            println!(\"{} % {:?} = {:?}\", number, divisors, rems),\n        Err(reason) =>\n            println!(\"{} % {:?} failed because {}.\", number, divisors, reason),\n    }\n}\n```\n\n```shell-session\n% cargo run\n   Compiling example v0.1.0 (file:///...)\nsrc/main.rs:8:15: 8:29 error: the trait `std::panic::RecoverSafe` is not\n  implemented for the type `&mut collections::vec::Vec<i64>` [E0277]\nsrc/main.rs:8     let res = panic::recover(move || {\n                            ^~~~~~~~~~~~~~\nsrc/main.rs:8:15: 8:29 help: run `rustc --explain E0277` to see a detailed explanation\nsrc/main.rs:8:15: 8:29 note: the type &mut collections::vec::Vec<i64> may not\n  be safely transferred across a recover boundary\nsrc/main.rs:8:15: 8:29 note: required because of the requirements on\n  the impl of `std::panic::RecoverSafe`\n  for `[closure@src/main.rs:8:30: 12:6\n  divisors:&collections::vec::Vec<i64>, number:i64, rems:&mut collections::vec::Vec<i64>]`\nsrc/main.rs:8:15: 8:29 note: required by `std::panic::recover`\nerror: aborting due to previous error\nCould not compile `example`.\n\nTo learn more, run the command again with --verbose.\n```\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u3002\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u5909\u66f4\u53ef\u80fd\u306a\u53c2\u7167 `&mut T` \u306f `RecoverSafe` \u3067\u306f\u306a\u3044\u305f\u3081\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u306e\u5883\u754c\u3092\u8d85\u3048\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\u306a\u305c\u306a\u3089\u3001\u5909\u66f4\u53ef\u80fd\u306a\u53c2\u7167\u306f\u3001\u30c7\u30fc\u30bf\u304c\u4e2d\u9014\u534a\u7aef\u306b\u66f4\u65b0\u3055\u308c\u305f\u72b6\u614b\u3067 panic \u304c\u8d77\u3053\u3063\u305f\u3068\u304d\u306b\u3001\u305d\u306e\u5185\u5bb9\u304c\u5b89\u5168\u304b\u3069\u3046\u304b\u4fdd\u8a3c\u3067\u304d\u306a\u304f\u306a\u308b\u304b\u3089\u3060\u3002\u4f8b\u3048\u3070\u3001\u4eca\u56de\u306e\u3088\u3046\u306b\u914d\u5217\u306e\u8981\u7d20\u3092\u9806\u306b\u66f4\u65b0\u3057\u3066\u3044\u308b\u6700\u4e2d\u306b panic \u304c\u8d77\u304d\u308b\u3068\u3001\u4e00\u90e8\u306e\u8981\u7d20\u306f\u66f4\u65b0\u6e08\u307f\u3067\u3001\u6b8b\u308a\u306e\u8981\u7d20\u306f\u672a\u66f4\u65b0\u3067\u6b8b\u3063\u3066\u3057\u307e\u3046\u3002\n\n\u3067\u3082\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001panic \u3092\u88dc\u8db3\u3057\u305f\u5f8c\u306f\u3001\u305d\u306e\u4e2d\u9014\u534a\u7aef\u306b\u66f4\u65b0\u3055\u308c\u305f\u5024\u3092\u4f7f\u308f\u305a\u306b\u6368\u3066\u308b\u306e\u3060\u304b\u3089\u3001\u306a\u3093\u3089\u554f\u984c\u304c\u306a\u3044\u3002\u305d\u306e\u3053\u3068\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u306b\u6559\u3048\u3066\u3042\u3052\u3088\u3046\u3002`AssertRecoverSafe` \u3067\u30e9\u30c3\u30d7\u3059\u308b\u3002\n\n```rust\n#![feature(recover, std_panic)]\n\nuse std::panic;\nuse std::panic::AssertRecoverSafe;\n\nfn remainders(number: i64, divisors: &Vec<i64>, mut rems: &mut Vec<i64>) -> Result<(), String> {\n    let mut rems = AssertRecoverSafe::new(&mut rems); // \u3053\u306e\u884c\u3092\u8ffd\u52a0\n    let result = panic::recover(move || {\n        for (i, div) in divisors.iter().enumerate() {\n            rems[i] = number % div;\n        }\n    });\n\n// \uff08\u4ee5\u4e0b\u3001\u7701\u7565\uff09\n```\n\n```shell-session\nthread '<main>' panicked at 'attempted remainder with a divisor of zero', src/libcore/ops.rs:430\n13 % [7, 3, 0, 5, 2] failed because \"attempted remainder with a divisor of zero\".\n```\n\n\u3053\u308c\u3067\u3088\u3057\u3002\n\n\n## panic::recover() \u3092 FFI \u3067\u8a66\u3057\u3066\u307f\u308b\n\n\u4eca\u5ea6\u306f\u5c11\u3057\u5b9f\u8df5\u7684\u306a\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3068\u3057\u3066\u3001FFI \u3092\u6271\u3046\u3002C \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u901a\u3058\u3066\u4ed6\u8a00\u8a9e\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b Rust \u95a2\u6570\u3092\u60f3\u5b9a\u3057\u3088\u3046\u3002\u6a5f\u80fd\u306f\u5148\u307b\u3069\u3068\u540c\u3058\u3060\u304c\u3001\u5f15\u6570\u306e\u53d7\u3051\u6e21\u3057\u65b9\u304c\u7570\u306a\u308b\u3002`divisors` \u3068 `remainders` \u914d\u5217\u306f\u3001\u4ed6\u8a00\u8a9e\u5074\u304c\u7528\u610f\u3057\u305f\u3082\u306e\u306b\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\uff08`*const T` \u3084 `*mut T`\uff09\u3092\u901a\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3002\n\n```\nuse std::slice;\n\nextern crate libc;\nuse libc::c_int;\nuse libc::c_long;\n\n#[no_mangle]\npub extern fn remainders(number: c_long, divisors_ptr: *const c_long, len: c_int,\n                         rems_ptr: *mut c_long) -> c_int {\n    let divs_slice = unsafe { slice::from_raw_parts(divisors_ptr, len as usize) };\n    let rems_slice = unsafe { slice::from_raw_parts_mut(rems_ptr, len as usize) };\n\n    for (div_ptr, rem_ptr) in divs_slice.iter().zip(rems_slice.iter_mut()) {\n        (*rem_ptr) = number % (*div_ptr);\n    }\n    0\n}\n```\n\n\u547c\u3073\u51fa\u3057\u5143\u3060\u304c\u3001\u308f\u3056\u308f\u3056 C \u3067\u66f8\u304f\u306e\u3082\u9762\u5012\u306a\u306e\u3067\u3001\u666e\u901a\u306e Rust \u306e main \u95a2\u6570\u3067\u4ee3\u7528\u3057\u3088\u3046\u3002\u5f15\u6570\u306e\u5f62\u5f0f\u3060\u3051 C \u306e\u6d41\u5100\u306b\u5f93\u3063\u305f\u3002\n\n```rust\nfn main() {\n    let number: c_long        = 13;\n    let divisors: [c_long; 5] = [7, 3, 0, 5, 2];\n    let mut rems: [c_long; 5] = unsafe { std::mem::uninitialized() };\n\n    let divisors_ptr = divisors.as_ptr();\n    let rems_ptr     = rems.as_mut_ptr();\n\n    let status = remainders(number, divisors_ptr, divisors.len() as c_int, rems_ptr);\n    if status == 0 {\n        println!(\"{} % {:?} = {:?}\", number, divisors, rems);\n    } else {\n        println!(\"{} % {:?} failed.\", number, divisors);\n    }\n}\n\n```\n\n```shell-session\nthread '<main>' panicked at 'attempted remainder with a divisor of zero', src/main.rs:31\nProcess didn't exit successfully: `target/debug/example` (exit code: 101)\n```\n\n\u30bc\u30ed\u9664\u7b97\u3067\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u305f\u3002\n\n### \u5b89\u5b9a\u7248 Rust \u3067\u306e\u65b9\u6cd5\uff1a\u5225\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3066\u308b\u3001\u306e\u306f\u7d50\u69cb\u53b3\u3057\u3044\n\n```rust\nuse std::slice;\nuse std::thread;\n\nextern crate libc;\nuse libc::c_int;\nuse libc::c_long;\n\n#[no_mangle]\npub extern fn remainders(number: c_long, divisors_ptr: *const c_long, len: c_int,\n                         rems_ptr: *mut c_long) -> c_int {\n    let h = thread::Builder::new().name(\"rem\".to_owned()).spawn(move || {\n        let divs_slice = unsafe { slice::from_raw_parts(divisors_ptr, len as usize) };\n        let rems_slice = unsafe { slice::from_raw_parts_mut(rems_ptr, len as usize) };\n\n        for (div_ptr, rem_ptr) in divs_slice.iter().zip(rems_slice.iter_mut()) {\n            (*rem_ptr) = number % (*div_ptr);\n        }\n        0\n    });\n\n    match h {\n        Ok(h)  => h.join().unwrap_or(1),\n        Err(_) => 1,\n    }\n}\n\nfn main() {\n    // \u5909\u66f4\u306a\u3057\u3002\u7701\u7565\n```\n\n```shell-session\n% cargo run\n   Compiling example v0.1.0 (file:///...)\nsrc/main.rs:11:59: 19:7 error: the trait `core::marker::Send` is not implemented\n  for the type `*const i64` [E0277]\nsrc/main.rs:11     let h = thread::Builder::new().name(\"rem\".to_owned()).spawn(move || {\n               ...\nsrc/main.rs:11:59: 19:7 help: run `rustc --explain E0277` to see a detailed explanation\nsrc/main.rs:11:59: 19:7 note: `*const i64` cannot be sent between threads safely\nsrc/main.rs:11:59: 19:7 note: required because it appears within the type\n  `[closure@src/main.rs:11:65: 19:6\n  divisors_ptr:*const i64, len:i32, rems_ptr:*mut i64, number:i64]`\nerror: aborting due to previous error\nCould not compile `example`.\n\nTo learn more, run the command again with --verbose.\n```\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u3002\n\n\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\u306f\u3001\u30b9\u30ec\u30c3\u30c9\u5883\u754c\u3092\u8d85\u3048\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\u3053\u306e\u3088\u3046\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\u30b9\u30ec\u30c3\u30c9\u5883\u754c\u3092\u8d85\u3048\u308b\u305f\u3081\u306b\u306f\u3001\u578b\u304c `Send + 'static` \u3067\u3042\u308b\u3053\u3068\u304c\u8981\u6c42\u3055\u308c\u308b\u3002`Send` \u306f\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u5b89\u5168\u306b\u53d7\u3051\u6e21\u3057\u304c\u3067\u304d\u308b\u3053\u3068\u3092\u8868\u3059\u30de\u30fc\u30ab\u30fc\u30fb\u30c8\u30ec\u30a4\u30c8\u3002`'static` \u306f\u30c7\u30fc\u30bf\u306e\u5bff\u547d\u304c\u7279\u5b9a\u306e\u30b9\u30b3\u30fc\u30d7\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3053\u3068\u3092\u8868\u3059\u3002\n\n\u76f4\u3059\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u3001\u3053\u306e\u307e\u307e\u6b21\u306b\u9032\u3082\u3046\u3002\n\n### \u975e\u5b89\u5b9a\u7248 panic::recover() \u3092\u4f7f\u3046\n\n\u4ed5\u69d8\u306e\u3068\u3053\u308d\u3067\u8aac\u660e\u3057\u305f\u3068\u304a\u308a\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\u306f `RecoverSafe` \u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3002\u305d\u306e\u305f\u3081\u3001`panic::recover()` \u306e\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u5883\u754c\u3092\u8d85\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n```rust\n#![feature(recover, std_panic)]\n\nuse std::slice;\nuse std::panic;\n\nextern crate libc;\nuse libc::c_int;\nuse libc::c_long;\n\n#[no_mangle]\npub extern fn remainders(number: c_long, divisors_ptr: *const c_long, len: c_int,\n                         rems_ptr: *mut c_long) -> c_int {\n    panic::recover(move || {\n        let divs_slice = unsafe { slice::from_raw_parts(divisors_ptr, len as usize) };\n        let rems_slice = unsafe { slice::from_raw_parts_mut(rems_ptr, len as usize) };\n\n        for (div_ptr, rem_ptr) in divs_slice.iter().zip(rems_slice.iter_mut()) {\n            (*rem_ptr) = number % (*div_ptr);\n        }\n        0\n    }).unwrap_or(1)\n}\n\nfn main() {\n    // \u5909\u66f4\u306a\u3057\u3002\u7701\u7565\n```\n\n```shell-session\nthread '<main>' panicked at 'attempted remainder with a divisor of zero', src/main.rs:18\n13 % [7, 3, 0, 5, 2] failed.\n```\n\n\u305f\u3060\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\u306e\u5834\u5408\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u304c\u305d\u306e\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002panic \u6642\u306e\u30c7\u30fc\u30bf\u306e\u7834\u58ca\u3084\u3001\u30e1\u30e2\u30ea\u30fc\u30ea\u30fc\u30af\u306b\u3064\u3044\u3066\u306f\u3001\u958b\u767a\u8005\u81ea\u8eab\u304c\u5bfe\u7b56\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\u4f8b\u3048\u3070\u3001\u4eca\u56de\u306e\u3088\u3046\u306b panic \u5f8c\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u308f\u305a\u306b\u7834\u68c4\u3059\u308b\u3001\u3068\u3044\u3063\u305f\u5bfe\u5fdc\u304c\u5fc5\u8981\u3060\u3002\n\n\n### panic::recover() \u3067\u88dc\u8db3\u3067\u304d\u306a\u3044\u30b1\u30fc\u30b9\n\n\u5f53\u7136\u306e\u3053\u3068\u3060\u304c `panic::recover()` \u306f Rust \u5185\u3067\u8d77\u3053\u3057\u305f panic \u3057\u304b\u88dc\u8db3\u3067\u304d\u306a\u3044\u3002\u4e0d\u6b63\u306a\u5024\u3092\u6301\u3063\u305f\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306a\u3069\u306f\u3001OS \u304c\u30d7\u30ed\u30bb\u30b9\u3092\u5f37\u5236\u7d42\u4e86\u3059\u308b\u306e\u3067\u3001\u6355\u6349\u306f\u4e0d\u53ef\u80fd\u3060\u3002\n\n```rust\nfn main() {\n    ...\n\n    // let rems_ptr     = rems.as_mut_ptr();\n    let rems_ptr = unsafe { std::mem::uninitialized() };\n```\n\n```shell-sessionr\n% cargo run\n     Running `target/debug/example`\nAn unknown error occurred\n\nTo learn more, run the command again with --verbose.\n\n% cargo run --verbose\n     Running `target/debug/example`\nProcess didn't exit successfully: `target/debug/example` (signal: 11)\n```\n\n\u3053\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u306f\u30d0\u30b0\u306b\u8d77\u56e0\u3059\u308b\u3082\u306e\u306a\u306e\u3067\u3001\u30d0\u30b0\u3092\u76f4\u3059\u306e\u304c\u5148\u6c7a\u3060\u3002\u306a\u304a\u3001FFI \u3092\u4f7f\u308f\u306a\u3044\u666e\u901a\u306e Rust \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\u3082 `unsafe` \u30d6\u30ed\u30c3\u30af\u3082\u767b\u5834\u3057\u306a\u3044\u306e\u3067\u3001\u5168\u3066\u306e panic \u3092\u88dc\u8db3\u3067\u304d\u308b\u3060\u308d\u3046\u3002\n\n\n## \u307e\u3068\u3081\n\n- Rust RFC 1236 \u3067\u306f\u3001panic \u3092\u88dc\u8db3\u3059\u308b\u95a2\u6570 `std::panic::recover()` \u3068\u3001panic \u304b\u3089\u306e\u56de\u5fa9\u306b\u5bfe\u3057\u3066\u5b89\u5168\u306a\u3053\u3068\u3092\u8868\u3059 `std::panic::RecoverSafe` \u30de\u30fc\u30ab\u30fc\u30fb\u30c8\u30ec\u30a4\u30c8\u3092\u63d0\u6848\u3057\u3066\u3044\u308b\n- \u3053\u306e\u6a5f\u80fd\u306f rustc 1.7 nightly \u3067\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u308b\n- \u4e3b\u306b FFI \u3084\u6c4e\u7528\u7684\u306a\u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb\u3067\u306e\u5229\u7528\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\n- Rust \u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u3067\u306f\u3001panic \u306b\u983c\u3089\u306a\u3044\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u63a8\u5968\u3057\u3066\u3044\u308b\n\n\u500b\u4eba\u7684\u306b\u306f\u3001RFC 1236 \u306f\u3001\u30c7\u30fc\u30bf\u306e\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3057\u306a\u304c\u3089\u3082 panic \u3092\u88dc\u8db3\u3067\u304d\u308b\u3001\u5b9f\u8df5\u7684\u306a\u6a5f\u80fd\u306b\u4ed5\u4e0a\u304c\u3063\u3066\u3044\u308b\u3068\u611f\u3058\u305f\u3002\n\n* * * * *\n", "tags": ["rust"]}