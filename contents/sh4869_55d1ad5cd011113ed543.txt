{"context": "Dart 1.19\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u307e\u3057\u305f\u3002\u4eca\u56de\u306eStrong Mode\u5468\u308a\u306e\u5909\u66f4\u306a\u3069\u306f\u306a\u304b\u306a\u304b\u4fbf\u5229\u306a\u306e\u3067\u7d39\u4ecb\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u95a2\u9023\u30ea\u30f3\u30af\n\n\u958b\u767a\u30d6\u30ed\u30b0 : Dart News & Updates: Dart 1.19: Improved developer experiences\n\nCHANGELOG : sdk/CHANGELOG.md at master \u00b7 dart-lang/sdk\n\n\n\n1.19 \u5909\u66f4\u70b9\n\n\u8a00\u8a9e\u4ed5\u69d8\u306e\u5909\u66f4\n\n\u6700\u5f8c\u306e\u5f15\u6570\u3084\u30d1\u30e9\u30fc\u30e1\u30fc\u30bf\u306b\u30ab\u30f3\u30de\u3092\u3064\u3051\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\n\u95a2\u6570\u5ba3\u8a00\u306b\u304a\u3051\u308b\u6700\u5f8c\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3084\u95a2\u6570\u547c\u3073\u51fa\u3057\u306b\u304a\u3051\u308b\u6700\u5f8c\u306e\u5f15\u6570\u306e\u3042\u3068\u306btrailing comma\u3092\u3064\u3051\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u958b\u767a\u304c\u697d\u306b\u306a\u308a\u307e\u3059\u306d\u3002\nvoid main() {\n  var test = new TestClass(\n    str1:\"A\",\n    str2:\"B\",\n    str3:\"C\",\n    str4:\"D\", // \u3053\u306e\u884c\u306e\u6700\u5f8c\u306e\u30ab\u30f3\u30de\u304c\u3064\u3051\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\n   );\n  test.func2(); // ABCD\n}\n\nclass TestClass {\n  String str1,str2,str3,str4;\n\n    TestClass({\n        this.str1,\n        this.str2,\n        this.str3,\n        this.str4, // \u3053\u306e\u884c\u3082OK!\n     });\n    void func2(){\n    print(str1 + str2 + str3 + str4);\n    }\n}\n\n\u3053\u308c\u306f\u958b\u767a\u30d6\u30ed\u30b0\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u305fgif\u3092\u898b\u308b\u3068\u3055\u3089\u306b\u308f\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\u753b\u50cf\u5143: Dart News & Updates: Dart 1.19: Improved developer experiences\n\n\u95a2\u9023Issue : Allow trailing commas in parameter and argument lists. \u00b7 Issue #26644 \u00b7 dart-lang/sdk\n\n\u5468\u8fba\u30c4\u30fc\u30eb\u306e\u5909\u66f4\u70b9\n\ndartfmt\n\u4e0a\u306e\u8a00\u8a9e\u4ed5\u69d8\u306e\u5909\u66f4\u306b\u3068\u3082\u306a\u3063\u3066tralling commas\u95a2\u9023\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3057\u305f\u3002\u305d\u306e\u307b\u304b\u306b\u3082\u6539\u5584\u3055\u308c\u305f\u3088\u3046\u3067\u3059\u3002\u8a73\u3057\u304f\u306fdart_style\u30ec\u30dd\u30b8\u30c8\u30ea\u306eCHANGELOG\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nPub\n\u4e3b\u8981\u306a\u5909\u66f4\u3092\u53d6\u308a\u4e0a\u3052\u3066\u3044\u304d\u307e\u3059\u3002\u305d\u306e\u4ed6\u306fCHANGELOG\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n--no-packages-dir\u30d5\u30e9\u30b0\u304cpub get\u3001pub upgrade\u3001pub downgrade\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u3053\u306e\u30d5\u30e9\u30b0\u3092\u3064\u3051\u3066\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001pub\u306fpackages/\u3092\u305b\u305a\u3001\u307e\u305f\u3082\u3057\u3042\u308b\u5834\u5408\u3082\u524a\u9664\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u3053\u308c\u306f--no-package-symlinks\u30d5\u30e9\u30b0\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u306a\u304f\u306a\u3063\u305f\u3082\u306e\u3092\u57cb\u3081\u5408\u308f\u305b\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\nFlutter SDK\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092pubspec.yaml\u306e\u4e2d\u3067\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\npubspec.yaml\nenvironment:\n  flutter: ^0.1.2\n  sdk: >=1.19.0 <2.0.0\n\n\n\npackage\u306edependencies\u3092\u6307\u5b9a\u3059\u308b\u969b\u306b\u3001sdk\u304b\u3089\u305d\u306epackage\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3sdk\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u73fe\u5728\u306fflutter\u3060\u3051\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e0a\u306e\u5909\u66f4\u3068\u5408\u308f\u305b\u3066flutter\u95a2\u9023\u306e\u305f\u3081\u306e\u3088\u3046\u3067\u3059\u306d\u3002\n\n\npubspec.yaml\ndependencies:\n  flutter_driver:\n    sdk: flutter\n    version: ^0.0.1\n\n\n\u95a2\u9023Issue\n  * SDK dependencies \u00b7 Issue #1431 \u00b7 dart-lang/pub\n  * Flutter SDK constraint \u00b7 Issue #1432 \u00b7 dart-lang/pub\n\ndart2js\n\n\ndart2dart( = dart --output-type=dart)\u304c\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u30021.11\u304b\u3089deprecated \u3060\u3063\u305f\u306e\u3067\u305d\u3053\u307e\u3067\u5f71\u97ff\u306f\u306a\u3044\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n\nDartVM\u306b\u3064\u3044\u3066\nDartVM\u3092\u30d3\u30eb\u30c9\u3059\u308b\u305f\u3081\u306b\u3001C++11\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306eLinux\u30c7\u30a3\u30b9\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002GCC4.8\u4ee5\u4e0a\u304c\u5fc5\u8981\u3068\u306e\u3053\u3068\u3067\u3059\u3002clang\u3084XCode\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u306f\u554f\u984c\u306a\u304f\u52d5\u304f\u3053\u3068\u304c\u78ba\u8a8d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u53c2\u8003 : Building \u00b7 dart-lang/sdk Wiki\n\nStrong Mode\nAnalyzer\u306eStrong Mode\u304c\u3055\u3089\u306b\u5f37\u529b\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u8ffd\u52a0\u3055\u308c\u305f\u6a5f\u80fd\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u65b0\u6a5f\u80fd\n\nDisable implicit casts\n\u3053\u308c\u306f\u540d\u524d\u306e\u3068\u304a\u308a\u6697\u9ed9\u306e\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u8a31\u53ef\u3057\u306a\u3044\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3068\u306f\u3001\u57fa\u5e95\u30af\u30e9\u30b9\u304b\u3089\u6d3e\u751f\u30af\u30e9\u30b9\u3078\u306e\u578b\u5909\u63db\u3092\u6307\u3057\u307e\u3059\u3002\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u78ba\u8a8d\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u30441\u3002\nvoid main(){\n  Base test = new Base();\n  Sub test2 = test; // disable implicit casts\u3092\u6709\u52b9\u306b\u3059\u308b\u3068\u3053\u3053\u3067error\u306b\n  print(test2.str2); // \u3053\u3046\u3044\u3046\u30a8\u30e9\u30fc\u3092\u4e8b\u524d\u306b\u691c\u77e5\u3067\u304d\u308b\n}\n\nclass Base {\n    String str;\n}\nclass Sub extends Base {\n    String str2;\n}\n\n\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f.analysis_options\u3067\u6307\u5b9a\u3059\u308b\u304b\u3001\n\n.analysis_options\nanalyzer:\n  strong-mode:\n    implicit-casts: false\n\n\n\u3082\u3057\u304f\u306fdartanalyzer\u3067--no-implicit-casts \u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\ndartanalyzer --strong --no-implicit-casts ~.dart\n\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u3059\u3053\u3057\u30b5\u30f3\u30d7\u30eb\u304c\u308f\u304b\u308a\u3065\u3089\u304b\u3063\u305f\u306e\u3067\u3053\u3046\u3044\u3046\u5f62\u306b\u3057\u307e\u3057\u305f\u3002\n\nDisable implicit dynamic\n\u3053\u308c\u306f\u6697\u9ed9\u306edynamic\u3092\u7981\u6b62\u3059\u308b\u3082\u306e\u3067\u3059\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306e\u3063\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\nmain() {\n  var x; // \u3053\u308c\u306f\u30a8\u30e9\u30fc\n  var i = 123; // \u3053\u308c\u306fint\u3068\u63a8\u8ad6\u3067\u304d\u308b\u306e\u3067OK\n  dynamic y; // \u3053\u308c\u306fdynamic\u3067\u5ba3\u8a00\u3057\u3066\u3044\u308b\u306e\u3067OK!\n}\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\n\nThis also affects: parameters, return types, fields, creating objects with generic type, generic functions/methods, and supertypes\n\n\u3068\u3042\u308b\u3088\u3046\u306b\u3001\u3053\u308c\u306f\u591a\u304f\u306e\u5834\u6240\u3067\u4f5c\u7528\u3057\u307e\u3059\u3002\n// \u3053\u308c\u3082\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\nf(x) => x + 42;\ndynamic f(dynamic x) => x + 42; //OK!\nint f(int x) => x + 42; // okay\n\n// \u30af\u30e9\u30b9\u5185\u306e\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u3082\u4f5c\u7528\nclass C {\n  var f; // \u3053\u308c\u306f\u30a8\u30e9\u30fc\n  dynamic f; // OK!\n}\n\nmain() {\n  var x = []; // \u6697\u9ed9\u3067 List<dynamic> \u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3060\u3081\n  var y = [42]; // OK!: List<int>\n  var z = <dynamic>[]; // OK!: List<dynamic>\n\n  T genericFn<T>() => null;\n  genericFn(); // \u6697\u9ed9\u3067 genericFn<dynamic> \u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3060\u3081\n  genericFn<dynamic>(); // OK\n  int x = genericFn(); // OK:  \u6697\u9ed9\u306e genericFn<int>\u3060\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u308b\n}\n\n// \u30a8\u30e9\u30fc\nclass C extends Iterable { /* ... */ }\n// OK\nclass C extends Iterable<dynamic> { /* ... */ }\n\n\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f.analysis_options\u3067\u6307\u5b9a\u3059\u308b\u304b\u3001\n\n.analysis_options\nanalyzer:\n  strong-mode:\n    implicit-casts: false\n\n\n\u3082\u3057\u304f\u306fdartanalyzer\u3067--no-implicit-dynamic\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\ndartanalyzer --strong --no-implicit-dynamic *.dart\n\n\u4e0a2\u3064\u306e\u6a5f\u80fd\u306f\u3069\u3061\u3089\u3082\u958b\u767a\u4e2d\u306e\u3082\u306e\u3067\u3059\u3002\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u52df\u96c6\u4e2d\u3068\u306e\u3053\u3068\u3067\u3082\u3042\u308a\u307e\u3059\u3057\u3001\u4fbf\u5229\u3067\u3059\u306e\u3067\u4f7f\u3063\u3066\u307f\u3066\u306f\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\u3002\n\nBreaking Chanages\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3073\u51fa\u3059\u3068\u304d\u306e\u5909\u6570\u304b\u3089\u63a8\u8ad6\u3092\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nvar map = new Map<String, String>();\n\n// infer: Map<String, String>\nvar otherMap = new Map.from(map);\n\n\u95a2\u9023Issue : infer constructor type arguments from values \u00b7 Issue #25220 \u00b7 dart-lang/sdk\n\n\u30ed\u30fc\u30ab\u30eb\u95a2\u6570\u306e\u8fd4\u308a\u5024\u3092\u63a8\u8ad6\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nvoid main() {\n  // \u8fd4\u308a\u5024\u306fint\u3060\u3068\u63a8\u8ad6\u3057\u3066\u304f\u308c\u308b\n  f() { return 40; }\n  int y = f() + 2; // \u578b\u30c1\u30a7\u30c3\u30af\n  print(y);\n}\n\n\u95a2\u9023Issue : infer local function return types \u00b7 Issue #26414 \u00b7 dart-lang/sdk\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u306e\u30d1\u30e9\u30fc\u30e1\u30fc\u30bf\u30fc\u306b\u304a\u3051\u308btype promotion\u3092\u8a31\u53ef\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nvoid fn/*<T>*/(/*=T*/ object) {\n  if (object is String) {\n    // `object`\u306f\u3053\u306eblock\u306e\u4e2d\u3067\u306f`String`\u3068\u3057\u3066\u6271\u308f\u308c\u308b\n    print(object.substring(1));\n  }\n}\n\n\u95a2\u9023Issue : \"is\" checks aren't considered with generic-method types \u00b7 Issue #26965 \u00b7 dart-lang/sdk\n\n\nFuture.then\u306b\u95a2\u3059\u308b\u63a8\u8ad6\u304c\u8ce2\u304f\u306a\u308a\u307e\u3057\u305f\u3002.then/*<Future<SomeType>>*/\u304c\u5fc5\u8981\u306a\u304f\u306a\u308a\u305d\u3046\u3067\u3059\u3002\n\n// \u3053\u308c\u3082\u63a8\u8ad6\u3057\u3066\u304f\u308c\u308b\nFuture<List<int>> t2 = f.then((_) => [3]);\n// \u3053\u308c\u3082OK.\nFuture<int> t2 = f.then((_) => new Future.value(42));\n\n\u95a2\u9023Issue: Can strong mode inference for Future.then be improved? \u00b7 Issue #25944 \u00b7 dart-lang/sdk\n\nasync \u95a2\u6570\u306b\u95a2\u3059\u308b\u63a8\u8ad6\u3082\u8ce2\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\nvoid test() async {\n  List<int> x = await [4]; // \u3053\u308c\u306f\u4eca\u307e\u3067\u3082\u63a8\u8ad6\u3057\u3066\u304f\u308c\u3066\u3044\u305f\n  List<int> y = await new Future.value([4]); // \u4eca\u306f\u3053\u3063\u3061\u3082\u63a8\u8ad6\u3057\u3066\u304f\u308c\u308b\n}\n\n\u95a2\u9023Issue : Handle implicit future unions in downwards inference \u00b7 Issue #25322 \u00b7 dart-lang/sdk\n\nSideway casts\u304c\u7981\u6b62\u3055\u308c\u307e\u3057\u305f\u3002\n\n\u95a2\u9023Issue : Sideways casts should be disallowed \u00b7 Issue #26120 \u00b7 dart-lang/sdk\n\u3082\u308d\u3082\u308d\u306e\u5909\u66f4\u3092\u898b\u3066\u3082\u3001\u304b\u306a\u308a\u5feb\u9069\u306bStrong Mode\u306e\u6069\u6075\u3092\u3046\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u5370\u8c61\u3092\u53d7\u3051\u307e\u3059\u3002\u3088\u3044\u3002\n\n\u3042\u3068\u304c\u304d\n\u4e00\u6642\u671f\u6d88\u3048\u305f\u306a\u3069\u3068\u8a00\u308f\u308c\u3066\u3044\u305fDart\u3067\u3059\u304c\u3001\u3053\u3053\u306e\u3068\u3053\u308d\u306fFlutter\u3084Angular2\u3001Google\u306e\u65b0OS\u300cFuchsia\u300d\u3078\u306e\u63a1\u7528\u306a\u3069\u306e\u30cb\u30e5\u30fc\u30b9\u3067\u6d3b\u6c17\u3065\u3044\u3066\u3044\u307e\u3059\u3002Dart 2.0\u306e\u30ea\u30ea\u30fc\u30b9\u306a\u3069\u3082\u3075\u304f\u3081\u3066\u3001Dart Summit 2016\u307e\u3067\u3044\u308d\u3044\u308d\u306a\u52d5\u304d\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\u8208\u5473\u6df1\u3044\u3082\u306e\u304c\u3042\u3063\u305f\u3089\u307e\u3068\u3081\u3066\u884c\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\n\n\n\n\n\nDart 1.19\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u307e\u3057\u305f\u3002\u4eca\u56de\u306eStrong Mode\u5468\u308a\u306e\u5909\u66f4\u306a\u3069\u306f\u306a\u304b\u306a\u304b\u4fbf\u5229\u306a\u306e\u3067\u7d39\u4ecb\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n# \u95a2\u9023\u30ea\u30f3\u30af\n\n- \u958b\u767a\u30d6\u30ed\u30b0 : [Dart News & Updates: Dart 1.19: Improved developer experiences](http://news.dartlang.org/2016/08/dart-119-improved-developer-experiences.html)\n- CHANGELOG : [sdk/CHANGELOG.md at master \u00b7 dart-lang/sdk](https://github.com/dart-lang/sdk/blob/master/CHANGELOG.md#1190)\n\n# 1.19 \u5909\u66f4\u70b9\n\n## \u8a00\u8a9e\u4ed5\u69d8\u306e\u5909\u66f4\n\n### \u6700\u5f8c\u306e\u5f15\u6570\u3084\u30d1\u30e9\u30fc\u30e1\u30fc\u30bf\u306b\u30ab\u30f3\u30de\u3092\u3064\u3051\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\n\n\u95a2\u6570\u5ba3\u8a00\u306b\u304a\u3051\u308b\u6700\u5f8c\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3084\u95a2\u6570\u547c\u3073\u51fa\u3057\u306b\u304a\u3051\u308b\u6700\u5f8c\u306e\u5f15\u6570\u306e\u3042\u3068\u306btrailing comma\u3092\u3064\u3051\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u958b\u767a\u304c\u697d\u306b\u306a\u308a\u307e\u3059\u306d\u3002\n\n\n```dart\nvoid main() {\n  var test = new TestClass(\n    str1:\"A\",\n    str2:\"B\",\n    str3:\"C\",\n    str4:\"D\", // \u3053\u306e\u884c\u306e\u6700\u5f8c\u306e\u30ab\u30f3\u30de\u304c\u3064\u3051\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\n   );\n  test.func2(); // ABCD\n}\n\nclass TestClass {\n  String str1,str2,str3,str4;\n  \n\tTestClass({\n        this.str1,\n        this.str2,\n        this.str3,\n        this.str4, // \u3053\u306e\u884c\u3082OK!\n     });\n\tvoid func2(){\n  \tprint(str1 + str2 + str3 + str4);\n\t}\n}\n```\n\n\u3053\u308c\u306f\u958b\u767a\u30d6\u30ed\u30b0\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u305fgif\u3092\u898b\u308b\u3068\u3055\u3089\u306b\u308f\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n![img](https://2.bp.blogspot.com/-kVBJlnXby54/V8DJqaZsvwI/AAAAAAAANeU/suPDhaZcdsEvN1DuYy8669JJ-W6x1zX1wCLcB/s1600/ReorderCode.gif)\n\n> \u753b\u50cf\u5143: [Dart News & Updates: Dart 1.19: Improved developer experiences](http://news.dartlang.org/2016/08/dart-119-improved-developer-experiences.html)\n\n\u95a2\u9023Issue : [Allow trailing commas in parameter and argument lists. \u00b7 Issue #26644 \u00b7 dart-lang/sdk](https://github.com/dart-lang/sdk/issues/26644)\n\n\n## \u5468\u8fba\u30c4\u30fc\u30eb\u306e\u5909\u66f4\u70b9\n\n### dartfmt\n\n\u4e0a\u306e\u8a00\u8a9e\u4ed5\u69d8\u306e\u5909\u66f4\u306b\u3068\u3082\u306a\u3063\u3066tralling commas\u95a2\u9023\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3057\u305f\u3002\u305d\u306e\u307b\u304b\u306b\u3082\u6539\u5584\u3055\u308c\u305f\u3088\u3046\u3067\u3059\u3002\u8a73\u3057\u304f\u306f[dart_style\u30ec\u30dd\u30b8\u30c8\u30ea\u306eCHANGELOG](https://github.com/dart-lang/dart_style/blob/master/CHANGELOG.md)\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n### Pub\n\n\u4e3b\u8981\u306a\u5909\u66f4\u3092\u53d6\u308a\u4e0a\u3052\u3066\u3044\u304d\u307e\u3059\u3002\u305d\u306e\u4ed6\u306fCHANGELOG\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n- `--no-packages-dir`\u30d5\u30e9\u30b0\u304c`pub get`\u3001`pub upgrade`\u3001`pub downgrade`\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u3053\u306e\u30d5\u30e9\u30b0\u3092\u3064\u3051\u3066\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001pub\u306f`packages/`\u3092\u305b\u305a\u3001\u307e\u305f\u3082\u3057\u3042\u308b\u5834\u5408\u3082\u524a\u9664\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u3053\u308c\u306f`--no-package-symlinks`\u30d5\u30e9\u30b0\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u306a\u304f\u306a\u3063\u305f\u3082\u306e\u3092\u57cb\u3081\u5408\u308f\u305b\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n- Flutter SDK\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092pubspec.yaml\u306e\u4e2d\u3067\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n  ```yaml:pubspec.yaml\nenvironment:\n  flutter: ^0.1.2\n  sdk: >=1.19.0 <2.0.0\n```\n\n- package\u306e`dependencies`\u3092\u6307\u5b9a\u3059\u308b\u969b\u306b\u3001sdk\u304b\u3089\u305d\u306epackage\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3`sdk`\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u73fe\u5728\u306fflutter\u3060\u3051\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e0a\u306e\u5909\u66f4\u3068\u5408\u308f\u305b\u3066flutter\u95a2\u9023\u306e\u305f\u3081\u306e\u3088\u3046\u3067\u3059\u306d\u3002\n\n  ```yaml:pubspec.yaml\ndependencies:\n  flutter_driver:\n    sdk: flutter\n    version: ^0.0.1\n```\n  \u95a2\u9023Issue\n  * [SDK dependencies \u00b7 Issue #1431 \u00b7 dart-lang/pub](https://github.com/dart-lang/pub/issues/1431)\n  * [Flutter SDK constraint \u00b7 Issue #1432 \u00b7 dart-lang/pub](https://github.com/dart-lang/pub/issues/1432)\n\n\n### dart2js\n\n   - `dart2dart`( = `dart --output-type=dart`)\u304c\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u30021.11\u304b\u3089deprecated \u3060\u3063\u305f\u306e\u3067\u305d\u3053\u307e\u3067\u5f71\u97ff\u306f\u306a\u3044\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n## DartVM\u306b\u3064\u3044\u3066\n\nDartVM\u3092\u30d3\u30eb\u30c9\u3059\u308b\u305f\u3081\u306b\u3001C++11\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306eLinux\u30c7\u30a3\u30b9\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002GCC4.8\u4ee5\u4e0a\u304c\u5fc5\u8981\u3068\u306e\u3053\u3068\u3067\u3059\u3002clang\u3084XCode\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u306f\u554f\u984c\u306a\u304f\u52d5\u304f\u3053\u3068\u304c\u78ba\u8a8d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u53c2\u8003 : [Building \u00b7 dart-lang/sdk Wiki](https://github.com/dart-lang/sdk/wiki/Building)\n\n## Strong Mode\n\nAnalyzer\u306eStrong Mode\u304c\u3055\u3089\u306b\u5f37\u529b\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u8ffd\u52a0\u3055\u308c\u305f\u6a5f\u80fd\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n### \u65b0\u6a5f\u80fd\n\n#### Disable implicit casts\n\n\u3053\u308c\u306f\u540d\u524d\u306e\u3068\u304a\u308a\u6697\u9ed9\u306e\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u8a31\u53ef\u3057\u306a\u3044\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3059\u3002\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3068\u306f\u3001\u57fa\u5e95\u30af\u30e9\u30b9\u304b\u3089\u6d3e\u751f\u30af\u30e9\u30b9\u3078\u306e\u578b\u5909\u63db\u3092\u6307\u3057\u307e\u3059\u3002\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u78ba\u8a8d\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044[^1]\u3002\n\n```dart\nvoid main(){\n  Base test = new Base();\n  Sub test2 = test; // disable implicit casts\u3092\u6709\u52b9\u306b\u3059\u308b\u3068\u3053\u3053\u3067error\u306b\n  print(test2.str2); // \u3053\u3046\u3044\u3046\u30a8\u30e9\u30fc\u3092\u4e8b\u524d\u306b\u691c\u77e5\u3067\u304d\u308b\n}\n\nclass Base {\n    String str;\n}\nclass Sub extends Base {\n    String str2;\n}\n```\n\n\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f.analysis_options\u3067\u6307\u5b9a\u3059\u308b\u304b\u3001\n\n```yaml:.analysis_options\nanalyzer:\n  strong-mode:\n    implicit-casts: false\n```\n\n\u3082\u3057\u304f\u306fdartanalyzer\u3067--no-implicit-casts \u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```\ndartanalyzer --strong --no-implicit-casts ~.dart\n```\n\n[^1]:[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://github.com/dart-lang/dev_compiler/blob/master/doc/STATIC_SAFETY.md#disable-implicit-casts)\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u3059\u3053\u3057\u30b5\u30f3\u30d7\u30eb\u304c\u308f\u304b\u308a\u3065\u3089\u304b\u3063\u305f\u306e\u3067\u3053\u3046\u3044\u3046\u5f62\u306b\u3057\u307e\u3057\u305f\u3002\n\n#### Disable implicit dynamic\n\n\u3053\u308c\u306f\u6697\u9ed9\u306edynamic\u3092\u7981\u6b62\u3059\u308b\u3082\u306e\u3067\u3059\u3002[\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://github.com/dart-lang/dev_compiler/blob/master/doc/STATIC_SAFETY.md#disable-implicit-dynamic)\u306b\u306e\u3063\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\n```dart\nmain() {\n  var x; // \u3053\u308c\u306f\u30a8\u30e9\u30fc\n  var i = 123; // \u3053\u308c\u306fint\u3068\u63a8\u8ad6\u3067\u304d\u308b\u306e\u3067OK\n  dynamic y; // \u3053\u308c\u306fdynamic\u3067\u5ba3\u8a00\u3057\u3066\u3044\u308b\u306e\u3067OK!\n}\n```\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\n> This also affects: parameters, return types, fields, creating objects with generic type, generic functions/methods, and supertypes\n\n\u3068\u3042\u308b\u3088\u3046\u306b\u3001\u3053\u308c\u306f\u591a\u304f\u306e\u5834\u6240\u3067\u4f5c\u7528\u3057\u307e\u3059\u3002\n\n```dart\n// \u3053\u308c\u3082\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\nf(x) => x + 42;\ndynamic f(dynamic x) => x + 42; //OK!\nint f(int x) => x + 42; // okay\n\n// \u30af\u30e9\u30b9\u5185\u306e\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u3082\u4f5c\u7528\nclass C {\n  var f; // \u3053\u308c\u306f\u30a8\u30e9\u30fc\n  dynamic f; // OK!\n}\n\nmain() {\n  var x = []; // \u6697\u9ed9\u3067 List<dynamic> \u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3060\u3081\n  var y = [42]; // OK!: List<int>\n  var z = <dynamic>[]; // OK!: List<dynamic>\n\n  T genericFn<T>() => null;\n  genericFn(); // \u6697\u9ed9\u3067 genericFn<dynamic> \u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3060\u3081\n  genericFn<dynamic>(); // OK\n  int x = genericFn(); // OK:  \u6697\u9ed9\u306e genericFn<int>\u3060\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u308b\n}\n\n// \u30a8\u30e9\u30fc\nclass C extends Iterable { /* ... */ }\n// OK\nclass C extends Iterable<dynamic> { /* ... */ }\n```\n\n\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f.analysis_options\u3067\u6307\u5b9a\u3059\u308b\u304b\u3001\n\n```yaml:.analysis_options\nanalyzer:\n  strong-mode:\n    implicit-casts: false\n```\n \n \u3082\u3057\u304f\u306fdartanalyzer\u3067`--no-implicit-dynamic`\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```\ndartanalyzer --strong --no-implicit-dynamic *.dart\n```\n \n\n\u4e0a2\u3064\u306e\u6a5f\u80fd\u306f\u3069\u3061\u3089\u3082\u958b\u767a\u4e2d\u306e\u3082\u306e\u3067\u3059\u3002\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u52df\u96c6\u4e2d\u3068\u306e\u3053\u3068\u3067\u3082\u3042\u308a\u307e\u3059\u3057\u3001\u4fbf\u5229\u3067\u3059\u306e\u3067\u4f7f\u3063\u3066\u307f\u3066\u306f\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\u3002\n\n\n### Breaking Chanages\n\n- \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3073\u51fa\u3059\u3068\u304d\u306e\u5909\u6570\u304b\u3089\u63a8\u8ad6\u3092\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n  ```dart\nvar map = new Map<String, String>();\n  \n// infer: Map<String, String>\nvar otherMap = new Map.from(map);\n```\n \u95a2\u9023Issue : [infer constructor type arguments from values \u00b7 Issue #25220 \u00b7 dart-lang/sdk](https://github.com/dart-lang/sdk/issues/25220)\n\n- \u30ed\u30fc\u30ab\u30eb\u95a2\u6570\u306e\u8fd4\u308a\u5024\u3092\u63a8\u8ad6\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```dart\nvoid main() {\n  // \u8fd4\u308a\u5024\u306fint\u3060\u3068\u63a8\u8ad6\u3057\u3066\u304f\u308c\u308b\n  f() { return 40; }\n  int y = f() + 2; // \u578b\u30c1\u30a7\u30c3\u30af\n  print(y);\n}\n```\n\n\u95a2\u9023Issue : [infer local function return types \u00b7 Issue #26414 \u00b7 dart-lang/sdk](https://github.com/dart-lang/sdk/issues/26414)\n\n- \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u306e\u30d1\u30e9\u30fc\u30e1\u30fc\u30bf\u30fc\u306b\u304a\u3051\u308btype promotion\u3092\u8a31\u53ef\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```dart\nvoid fn/*<T>*/(/*=T*/ object) {\n  if (object is String) {\n    // `object`\u306f\u3053\u306eblock\u306e\u4e2d\u3067\u306f`String`\u3068\u3057\u3066\u6271\u308f\u308c\u308b\n    print(object.substring(1));\n  }\n}\n```\n\n\u95a2\u9023Issue : [\"is\" checks aren't considered with generic-method types \u00b7 Issue #26965 \u00b7 dart-lang/sdk](https://github.com/dart-lang/sdk/issues/26965)\n\n- `Future.then`\u306b\u95a2\u3059\u308b\u63a8\u8ad6\u304c\u8ce2\u304f\u306a\u308a\u307e\u3057\u305f\u3002`.then/*<Future<SomeType>>*/`\u304c\u5fc5\u8981\u306a\u304f\u306a\u308a\u305d\u3046\u3067\u3059\u3002\n\n```dart\n// \u3053\u308c\u3082\u63a8\u8ad6\u3057\u3066\u304f\u308c\u308b\nFuture<List<int>> t2 = f.then((_) => [3]);\n// \u3053\u308c\u3082OK.\nFuture<int> t2 = f.then((_) => new Future.value(42));\n```\n\n\u95a2\u9023Issue: [Can strong mode inference for Future.then be improved? \u00b7 Issue #25944 \u00b7 dart-lang/sdk](https://github.com/dart-lang/sdk/issues/25944)\n\n- async \u95a2\u6570\u306b\u95a2\u3059\u308b\u63a8\u8ad6\u3082\u8ce2\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n```dart\nvoid test() async {\n  List<int> x = await [4]; // \u3053\u308c\u306f\u4eca\u307e\u3067\u3082\u63a8\u8ad6\u3057\u3066\u304f\u308c\u3066\u3044\u305f\n  List<int> y = await new Future.value([4]); // \u4eca\u306f\u3053\u3063\u3061\u3082\u63a8\u8ad6\u3057\u3066\u304f\u308c\u308b\n}\n```\n\u95a2\u9023Issue : [Handle implicit future unions in downwards inference \u00b7 Issue #25322 \u00b7 dart-lang/sdk](https://github.com/dart-lang/sdk/issues/25322)\n\n- Sideway casts\u304c\u7981\u6b62\u3055\u308c\u307e\u3057\u305f\u3002\n\n\u95a2\u9023Issue : [Sideways casts should be disallowed \u00b7 Issue #26120 \u00b7 dart-lang/sdk](https://github.com/dart-lang/sdk/issues/26120)\n\n\u3082\u308d\u3082\u308d\u306e\u5909\u66f4\u3092\u898b\u3066\u3082\u3001\u304b\u306a\u308a\u5feb\u9069\u306bStrong Mode\u306e\u6069\u6075\u3092\u3046\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u5370\u8c61\u3092\u53d7\u3051\u307e\u3059\u3002\u3088\u3044\u3002\n\n# \u3042\u3068\u304c\u304d\n\n\u4e00\u6642\u671f\u6d88\u3048\u305f\u306a\u3069\u3068\u8a00\u308f\u308c\u3066\u3044\u305fDart\u3067\u3059\u304c\u3001\u3053\u3053\u306e\u3068\u3053\u308d\u306fFlutter\u3084Angular2\u3001Google\u306e\u65b0OS\u300cFuchsia\u300d\u3078\u306e\u63a1\u7528\u306a\u3069\u306e\u30cb\u30e5\u30fc\u30b9\u3067\u6d3b\u6c17\u3065\u3044\u3066\u3044\u307e\u3059\u3002Dart 2.0\u306e\u30ea\u30ea\u30fc\u30b9\u306a\u3069\u3082\u3075\u304f\u3081\u3066\u3001Dart Summit 2016\u307e\u3067\u3044\u308d\u3044\u308d\u306a\u52d5\u304d\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\u8208\u5473\u6df1\u3044\u3082\u306e\u304c\u3042\u3063\u305f\u3089\u307e\u3068\u3081\u3066\u884c\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n", "tags": ["Dart"]}