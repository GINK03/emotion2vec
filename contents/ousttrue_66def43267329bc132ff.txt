{"tags": ["C#", "ReactiveExtensions"], "context": " More than 1 year has passed since last update.\n\nReactiveCommand\u3092\u542b\u3080\u30af\u30e9\u30b9\u3092Console\u30a2\u30d7\u30ea\u304b\u3089\u52d5\u304b\u305d\u3046\u3068\u3059\u308b\nReactiveCommand\u3092\u4f7f\u3063\u305fViewModel\u3092UnitTest\u306b\u4f7f\u304a\u3046\u3068\u3059\u308b\u3068\nSystem.InvalidOperationException: SynchronizationContext.Current is null\n\n\u304c\u767a\u751f\u3057\u305f\u308a\u3059\u308b\u306e\u3060\u3051\u3069\u3001\u305d\u3053\u304b\u3089\u306f\u3058\u3081\u3066SynchronizationContext\u306e\u3064\u3044\u3066\u3044\u308d\u3044\u308d\u3068\u3002\n\n\u4f8b\u5916\u306e\u8d77\u3053\u308b\u30b3\u30fc\u30c9\n\n\u4f8b\u3048\u3070MVVM\u306aViewModel\u3092UnitTest\u3059\u308b\u5834\u5408\u3068\u304b\nusing Reactive.Bindings;\nusing System;\nusing System.Reactive.Linq;\nusing System.Windows.Input;\n\nnamespace ConsoleApplication1\n{\n    class ViewModel\n    {\n        ReactiveCommand m_command;\n        public ICommand Command\n        {\n            get\n            {\n                if(m_command== null)\n                {\n                    m_command = new ReactiveCommand();\n                    m_command.Subscribe(_ =>\n                    {\n                        Console.WriteLine(\"Command\");\n                    });\n                }\n                return m_command;\n            }\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var vm = new ViewModel();\n\n            var subscription =\n                Observable.Interval(TimeSpan.FromSeconds(2))\n                .Take(1)\n                .Subscribe(x =>\n                {\n                    vm.Command.Execute(null);\n                })\n                ;\n\n            // \u7d42\u308f\u308b\u307e\u3067\u5f85\u3063\u3066\u308b\u30fb\u30fb\u30fb\n            Console.ReadLine();\n        }\n    }\n}\n\n\n\u5b9f\u884c\u3059\u308b\u3068\n\nvm.Command.Execute(null);\n\n\u306e\u3068\u3053\u308d\u3067\n\nSystem.InvalidOperationException: SynchronizationContext.Current is null\n\n\u3068\u8a00\u308f\u308c\u307e\u3059\u3002\n\n\u3068\u308a\u3042\u3048\u305a\n                .Subscribe(x =>\n                {\n                    // \u5b89\u76f4\u306bSetSynchronizationContext\n                    SynchronizationContext.SetSynchronizationContext(new SynchronizationContext());\n\n                    vm.Command.Execute(null);\n                })\n\n\u3053\u308c\u3067\u30a8\u30e9\u30fc\u306f\u51fa\u306a\u304f\u306a\u308b\u3002\n\u3057\u304b\u3057\u3001\u3084\u308a\u305f\u3044\u306e\u306f\u3053\u308c\u3067\u306f\u306a\u3044\u3002\n\nRx\u7684\u306b\u306f\u3053\u3046\u3058\u3083\u306a\u3044\u306e\u304b\n        static void Main(string[] args)\n        {\n            // set SynchronizationContext.Current\n            SynchronizationContext.SetSynchronizationContext(new SynchronizationContext());\n\n            var vm = new ViewModel();\n\n            var subscription =\n                Observable.Interval(TimeSpan.FromSeconds(2))\n                .Take(1)\n                // SynchronizationContext.Current\u3067\u30ab\u30ec\u30f3\u30c8\u30b9\u30ec\u30c3\u30c9\u306b\u623b\u308c\u308b\uff1f\n                .ObserveOn(SynchronizationContext.Current)\n                .Subscribe(x =>\n                {\n                    vm.Command.Execute(null);\n                })\n                ;\n\n            Console.ReadLine();\n        }\n\n\n\u3057\u304b\u3057\n\nSystem.InvalidOperationException: SynchronizationContext.Current is null\n\n\u767a\u751f\u2026\u3002\u4f55\u6545\u304b\u3002\n            Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n            var subscription =\n                Observable.Interval(TimeSpan.FromSeconds(2))\n                .Take(1)\n                .Do(x =>\n                {\n                    Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n                })\n                // \n                .ObserveOn(SynchronizationContext.Current)\n                .Do(x =>\n                {\n                    Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n                })\n                .Subscribe(x =>\n                {\n                    vm.Command.Execute(null);\n                })\n                ;\n\n\u3068\u3044\u3046\u98a8\u306b\u3057\u3066\u307f\u308b\u3068\nThreadID: 8\nThreadID: 10 // Interval\nThreadID: 11 // SynchronizationContext\n\n8, 10, 8\u3068\u306a\u3063\u3066\u307b\u3057\u3044\u306e\u3067\u3059\u3051\u3069\u305d\u3046\u306f\u3044\u304b\u305a\u3002\n\u5b9f\u306f\u3001\nnew SynchronizationContext()\n\n\u306f\u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb\u306b\u6295\u3052\u308b\u5b9f\u88c5\u306a\u306e\u3067\u30ab\u30ec\u30f3\u30c8\u30b9\u30ec\u30c3\u30c9\u306b\u623b\u3057\u3066\u304f\u308c\u305f\u308a\u306f\u3057\u306a\u3044\u3002\n\u306a\u3089\u3070\u3068\nObserveOn(CurrentThreadScheduler.Instance)\n\n\u3068\u3057\u3066\u307f\u305f\u304c\nThreadID: 8\nThreadID: 10 // Interval\nThreadID: 10 // CurrentThreadScheduler\u306f\u30b9\u30ec\u30c3\u30c9\u3092\u4e57\u308a\u63db\u3048\u306a\u3044\n\n\u5b57\u7fa9\u901a\u308a\u306b\u30ab\u30ec\u30f3\u30c8\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3059\u308b\u3068\u3044\u3046\u306e\u3068\u306f\u3061\u3087\u3063\u3068\u610f\u5473\u304c\u9055\u3046\u3088\u3046\u3060\u3002\nImmediateScheduler\u3068\u306e\u5bfe\u6bd4\u304b\u3089\u8a00\u3046\u3068QueueingScheduler\u7684\u306a\u3082\u306e\u3067\u30b9\u30ec\u30c3\u30c9\u306e\u4e57\u308a\u63db\u3048\u306f\u3057\u306a\u3044\u3001\u3064\u307e\u308a\u30ab\u30ec\u30f3\u30c8\u30b9\u30ec\u30c3\u30c9\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\n\n\u30ab\u30ec\u30f3\u30c8\u30b9\u30ec\u30c3\u30c9\u306b\u4e57\u308a\u63db\u3048\u308bSynchronizationContext\u3092\u4f5c\u308a\u305f\u3044\nAwait, SynchronizationContext, and Console Apps\n\u306b\u3084\u308a\u65b9\u304c\u3042\u3063\u305f\u3002\n\u4e0a\u8a18\u306e\u8a18\u4e8b\u304b\u3089SingleThreadSynchronizationContext\u3092\u9802\u3044\u3066\u304f\u308b\u3002\n\nSingleThreadSynchronizationContext\n    /// <summary>Provides a SynchronizationContext that's single-threaded.</summary>\n    class SingleThreadSynchronizationContext : SynchronizationContext\n    {\n        /// <summary>The queue of work items.</summary>\n        private readonly BlockingCollection<KeyValuePair<SendOrPostCallback, object>> m_queue =\n            new BlockingCollection<KeyValuePair<SendOrPostCallback, object>>();\n\n        /// <summary>The processing thread.</summary>\n        private readonly Thread m_thread = Thread.CurrentThread;\n\n        /// <summary>Dispatches an asynchronous message to the synchronization context.</summary>\n        /// <param name=\"d\">The System.Threading.SendOrPostCallback delegate to call.</param>\n        /// <param name=\"state\">The object passed to the delegate.</param>\n        public override void Post(SendOrPostCallback d, object state)\n        {\n            if (d == null) throw new ArgumentNullException(\"d\");\n            m_queue.Add(new KeyValuePair<SendOrPostCallback, object>(d, state));\n        }\n\n        /// <summary>Not supported.</summary>\n        public override void Send(SendOrPostCallback d, object state)\n        {\n            throw new NotSupportedException(\"Synchronously sending is not supported.\");\n        }\n\n        /// <summary>Runs an loop to process all queued work items.</summary>\n        public void RunOnCurrentThread()\n        {\n            foreach (var workItem in m_queue.GetConsumingEnumerable())\n                workItem.Key(workItem.Value);\n        }\n\n        /// <summary>Notifies the context that no more work will arrive.</summary>\n        public void Complete() { m_queue.CompleteAdding(); }\n    }\n\n\n\u3067\u547c\u3073\u51fa\u3057\u65b9\u3092\u3053\u3063\u3061\u306b\u5408\u3046\u3088\u3046\u306b\u8abf\u6574\u3002\n        static void Main(string[] args)\n        {\n            // context\u3092\u4f5c\u3063\u3066\u30bb\u30c3\u30c8\u3059\u308b\n            var context = new SingleThreadSynchronizationContext();\n            SynchronizationContext.SetSynchronizationContext(context);\n\n            var vm = new ViewModel();\n\n            Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n            var subscription =\n                Observable.Interval(TimeSpan.FromSeconds(2))\n                .Take(1)\n                .Do(x =>\n                {\n                    Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n                })\n                // CurrentThread\u3067Observe\u3060\n                .ObserveOn(context)\n                .Do(x =>\n                {\n                    Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n                })\n                .Subscribe(x =>\n                {\n                    vm.Command.Execute(null);\n                }\n                , ex=>\n                {\n                }\n                , ()=>\n                {\n                    // \u7d42\u4e86\u901a\u77e5\n                    context.Complete();\n                })\n                ;\n\n            // \u30a8\u30f3\u30ad\u30e5\u30fc\u3055\u308c\u305f\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u6d88\u5316\u3059\u308b\n            context.RunOnCurrentThread();\n\n            Console.ReadLine();\n        }\n\n\u5b9f\u884c\u3057\u3066\u307f\u308b\u3068\nThreadID: 8\nThreadID: 10\nThreadID: 8\nCommand\n\n\u3068\u306a\u308a\u3046\u307e\u304f\u3044\u3063\u305f\u3002\n\u3082\u3046\u3061\u3087\u3063\u3068SynchronizationContext\u306e\u5b09\u3057\u3055\u304c\u3067\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u308b\u3002\n\nEventLoop\u98a8\u306b\u3057\u3066\u307f\u308b\n        static void Main(string[] args)\n        {\n            // context\u3092\u4f5c\u3063\u3066\u30bb\u30c3\u30c8\u3059\u308b\n            var context = new SingleThreadSynchronizationContext();\n            SynchronizationContext.SetSynchronizationContext(context);\n\n            // \u672c\u4f53\n            _Main(args);\n\n            Observable.Start(() =>\n            {\n                // \u30a8\u30f3\u30bf\u30fc\u3067\u505c\u6b62\u30fb\u30fb\u30fb\n                Console.ReadLine();\n            })\n            .Subscribe(x =>\n            {\n                // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7d42\u4e86\u3055\u305b\u308b\n                context.Complete();\n            });\n\n            // \u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\n            context.RunOnCurrentThread();\n        }\n\n        static void _Main(string[] args)\n        {\n            var vm = new ViewModel();\n\n            Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n            var subscription =\n                Observable.Interval(TimeSpan.FromSeconds(2))\n                .Take(1)\n                .Do(x =>\n                {\n                    Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n                })\n                // SetSynchronizationContext\u7b49\u304c\u96a0\u853d\u3055\u308c\u305f\n                .ObserveOn(SynchronizationContext.Current)\n                .Do(x =>\n                {\n                    Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n                })\n                .Subscribe(x =>\n                {\n                    vm.Command.Execute(null);\n                }\n                , ex=>\n                {\n                }\n                , ()=>\n                {\n                })\n                ;\n        }\n\n\u3053\u3053\u307e\u3067\u3084\u308b\u3068\u672c\u4f53\u3067\u306fObserveOn\u3059\u308b\u3060\u3051\u306b\u306a\u3063\u3066\u7d30\u304b\u3044\u3068\u3053\u308d\u3092\u96a0\u853d\u3067\u304d\u305f\u3002\n\u6700\u7d42\u7248\u306e\u52d5\u304f\u30b3\u30fc\u30c9\n\nScheduler(ObserveOn\u306e\u5f15\u6570)\u3068SynchronizationContext\u306f\u4f55\u306a\u306e\u304b\nScheduler(ImmediateScheduler\u4ee5\u5916)\u306f\u51e6\u7406\u3092\u30a8\u30f3\u30ad\u30e5\u30fc\u3057\u3066\u3069\u3053\u304b\u3067\u30c7\u30ad\u30e5\u30fc\u3057\u3066\u5b9f\u884c\u3059\u308b\u3002\nSynchronizaionContext\u306fasync/await\u306eawait\u306e\u7d9a\u304d\u3092\u3069\u3053\u3067\u5b9f\u884c\u3059\u308b\u306e\u304b\u3092\u8a2d\u5b9a\u3059\u308b\u306e\u306b\u4f7f\u308f\u308c\u308b\u3082\u306e\u3067\u3001\nWPF\u3084WinForm\u7b49\u306e\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3092\u5185\u5305\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u5074\u304c\u88cf\u3067\u63d0\u4f9b\u3059\u308b\u60f3\u5b9a\u306e\u3088\u3046\u3060\u3002\n\u3069\u3061\u3089\u3082\u51e6\u7406\u3092Post\u3055\u308c\u3066\u3001\u306a\u3093\u3089\u304b\u306e\u65b9\u6cd5\u3067Post\u3055\u308c\u305f\u3082\u306e\u3092\u5f8c\u3067(ImmediateScheduler\u3092\u9664\u304f)\u51e6\u7406\u3059\u308b\u3082\u306e\u3092\u62bd\u8c61\u5316\u3057\u3066\u3044\u308b\u3002\n\u3044\u308d\u3093\u306a\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u30a8\u30f3\u30ad\u30e5\u30fc(Post)\u3055\u308c\u308b\u304c\u3001\u7279\u5b9a\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u30c7\u30ad\u30e5\u30fc\u3059\u308b\u30eb\u30fc\u30d7\u304c\u50cd\u3044\u3066\u3044\u308b\u3068\u3044\u3046\u7406\u89e3\u3067\u3088\u3055\u305d\u3046\u3002\nRx\u5165\u9580 (15) - \u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u5229\u7528\n\u306bRx\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u4e00\u89a7\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u4e0b\u8a18\u306b\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u7a2e\u985e\u3068\u305d\u308c\u305e\u308c\u306b\u95a2\u3057\u3066\u306e\u30e1\u30e2\u3002\u7d30\u304b\u3044\u3068\u3053\u308d\u306f\u9593\u9055\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u6ce8\u610f\u30fb\u30fb\u30fb\n\n\n\nShceduler\nSynchronizationContext\nmemo\n\n\n\n\nControlScheduler\nWindowsFormsSynchronizationContext\nWindowsForm\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30dd\u30f3\u30d7\u306b\u4ed5\u8fbc\u307e\u308c\u305f\u30ad\u30e5\u30fc\n\n\nDispatcherScheduler\nDispatcherSynchronizationContext\nWPF\u306b\u4ed5\u8fbc\u307e\u308c\u305f\u30ad\u30e5\u30fc\n\n\nImmediateScheduler\n\n\u5f85\u305f\u305a\u306b\u3059\u3050\u306b\u5b9f\u884c\u3059\u308b\u3002\u30ad\u30e5\u30fc\u3067\u3059\u3089\u306a\u3044\n\n\nCurrentThreadScheduler\n\n\u30ad\u30e5\u30fc\u3002\u305f\u3076\u3093Rx\u3067\u4ed6\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u304c\u6307\u5b9a\u3055\u308c\u306a\u304b\u3063\u305f\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u3002Subscribe\u3059\u308b\u3068\u751f\u6210\u3055\u308c\u308b\u3002\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u306e\u306f\u7121\u610f\u5473\u306a\u306e\u3067\u306f\uff1f\n\n\nNewThreadScheduler\n\n\u65b0\u3057\u3044\u30b9\u30ec\u30c3\u30c9\u3092\u3069\u3093\u3069\u3093\u4f5c\u308b\uff1f\n\n\nEventLoopScheduler\n\n\u65b0\u3057\u3044\u30b9\u30ec\u30c3\u30c9\u3067EventLoop\u3092\u958b\u59cb\u3059\u308b\u3002ThreadPool\u306b\u5bfe\u3057\u3066\u3001\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u304c\u58f2\u308a\uff1f\n\n\nThreadPoolScheduler\n\nThreadPool\u3067\u51e6\u7406\u3059\u308b\n\n\n\nObserveOn(Thread.CurrentThread)\n\n\u3068\u304b\u3067\u304d\u305f\u3089\u4fbf\u5229\u305d\u3046\u3060\u304c\u3001\u30c7\u30ad\u30e5\u30fc\u304c\u4e0d\u5728\u306b\u306a\u308b\u306e\u3067\u7121\u7406\u3067\u3059\u306d\u3002\n#ReactiveCommand\u3092\u542b\u3080\u30af\u30e9\u30b9\u3092Console\u30a2\u30d7\u30ea\u304b\u3089\u52d5\u304b\u305d\u3046\u3068\u3059\u308b\nReactiveCommand\u3092\u4f7f\u3063\u305fViewModel\u3092UnitTest\u306b\u4f7f\u304a\u3046\u3068\u3059\u308b\u3068\n\n```\nSystem.InvalidOperationException: SynchronizationContext.Current is null\n```\n\n\u304c\u767a\u751f\u3057\u305f\u308a\u3059\u308b\u306e\u3060\u3051\u3069\u3001\u305d\u3053\u304b\u3089\u306f\u3058\u3081\u3066SynchronizationContext\u306e\u3064\u3044\u3066\u3044\u308d\u3044\u308d\u3068\u3002\n\n#\u4f8b\u5916\u306e\u8d77\u3053\u308b\u30b3\u30fc\u30c9\n\n```csharp:\u4f8b\u3048\u3070MVVM\u306aViewModel\u3092UnitTest\u3059\u308b\u5834\u5408\u3068\u304b\nusing Reactive.Bindings;\nusing System;\nusing System.Reactive.Linq;\nusing System.Windows.Input;\n\nnamespace ConsoleApplication1\n{\n    class ViewModel\n    {\n        ReactiveCommand m_command;\n        public ICommand Command\n        {\n            get\n            {\n                if(m_command== null)\n                {\n                    m_command = new ReactiveCommand();\n                    m_command.Subscribe(_ =>\n                    {\n                        Console.WriteLine(\"Command\");\n                    });\n                }\n                return m_command;\n            }\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var vm = new ViewModel();\n\n            var subscription =\n                Observable.Interval(TimeSpan.FromSeconds(2))\n                .Take(1)\n                .Subscribe(x =>\n                {\n                    vm.Command.Execute(null);\n                })\n                ;\n\n            // \u7d42\u308f\u308b\u307e\u3067\u5f85\u3063\u3066\u308b\u30fb\u30fb\u30fb\n            Console.ReadLine();\n        }\n    }\n}\n```\n\n\u5b9f\u884c\u3059\u308b\u3068\n```\nvm.Command.Execute(null);\n```\n\u306e\u3068\u3053\u308d\u3067\n```\nSystem.InvalidOperationException: SynchronizationContext.Current is null\n```\n\u3068\u8a00\u308f\u308c\u307e\u3059\u3002\n\n#\u3068\u308a\u3042\u3048\u305a\n\n```csharp\n                .Subscribe(x =>\n                {\n                    // \u5b89\u76f4\u306bSetSynchronizationContext\n                    SynchronizationContext.SetSynchronizationContext(new SynchronizationContext());\n\n                    vm.Command.Execute(null);\n                })\n```\n\n\u3053\u308c\u3067\u30a8\u30e9\u30fc\u306f\u51fa\u306a\u304f\u306a\u308b\u3002\n\u3057\u304b\u3057\u3001\u3084\u308a\u305f\u3044\u306e\u306f\u3053\u308c\u3067\u306f\u306a\u3044\u3002\n\n```csharp:Rx\u7684\u306b\u306f\u3053\u3046\u3058\u3083\u306a\u3044\u306e\u304b\n        static void Main(string[] args)\n        {\n            // set SynchronizationContext.Current\n            SynchronizationContext.SetSynchronizationContext(new SynchronizationContext());\n\n            var vm = new ViewModel();\n\n            var subscription =\n                Observable.Interval(TimeSpan.FromSeconds(2))\n                .Take(1)\n                // SynchronizationContext.Current\u3067\u30ab\u30ec\u30f3\u30c8\u30b9\u30ec\u30c3\u30c9\u306b\u623b\u308c\u308b\uff1f\n                .ObserveOn(SynchronizationContext.Current)\n                .Subscribe(x =>\n                {\n                    vm.Command.Execute(null);\n                })\n                ;\n\n            Console.ReadLine();\n        }\n```\n\n\u3057\u304b\u3057\n```\nSystem.InvalidOperationException: SynchronizationContext.Current is null\n```\n\u767a\u751f\u2026\u3002\u4f55\u6545\u304b\u3002\n\n```csharp\n            Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n            var subscription =\n                Observable.Interval(TimeSpan.FromSeconds(2))\n                .Take(1)\n                .Do(x =>\n                {\n                    Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n                })\n                // \n                .ObserveOn(SynchronizationContext.Current)\n                .Do(x =>\n                {\n                    Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n                })\n                .Subscribe(x =>\n                {\n                    vm.Command.Execute(null);\n                })\n                ;\n```\n\u3068\u3044\u3046\u98a8\u306b\u3057\u3066\u307f\u308b\u3068\n\n```\nThreadID: 8\nThreadID: 10 // Interval\nThreadID: 11 // SynchronizationContext\n```\n\n8, 10, 8\u3068\u306a\u3063\u3066\u307b\u3057\u3044\u306e\u3067\u3059\u3051\u3069\u305d\u3046\u306f\u3044\u304b\u305a\u3002\n\u5b9f\u306f\u3001\n\n```\nnew SynchronizationContext()\n```\n\n\u306f\u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb\u306b\u6295\u3052\u308b\u5b9f\u88c5\u306a\u306e\u3067\u30ab\u30ec\u30f3\u30c8\u30b9\u30ec\u30c3\u30c9\u306b\u623b\u3057\u3066\u304f\u308c\u305f\u308a\u306f\u3057\u306a\u3044\u3002\n\n\u306a\u3089\u3070\u3068\n\n```csharp\nObserveOn(CurrentThreadScheduler.Instance)\n```\n\n\u3068\u3057\u3066\u307f\u305f\u304c\n\n```\nThreadID: 8\nThreadID: 10 // Interval\nThreadID: 10 // CurrentThreadScheduler\u306f\u30b9\u30ec\u30c3\u30c9\u3092\u4e57\u308a\u63db\u3048\u306a\u3044\n```\n\n\u5b57\u7fa9\u901a\u308a\u306b\u30ab\u30ec\u30f3\u30c8\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3059\u308b\u3068\u3044\u3046\u306e\u3068\u306f\u3061\u3087\u3063\u3068\u610f\u5473\u304c\u9055\u3046\u3088\u3046\u3060\u3002\nImmediateScheduler\u3068\u306e\u5bfe\u6bd4\u304b\u3089\u8a00\u3046\u3068QueueingScheduler\u7684\u306a\u3082\u306e\u3067\u30b9\u30ec\u30c3\u30c9\u306e\u4e57\u308a\u63db\u3048\u306f\u3057\u306a\u3044\u3001\u3064\u307e\u308a\u30ab\u30ec\u30f3\u30c8\u30b9\u30ec\u30c3\u30c9\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\n\n#\u30ab\u30ec\u30f3\u30c8\u30b9\u30ec\u30c3\u30c9\u306b\u4e57\u308a\u63db\u3048\u308bSynchronizationContext\u3092\u4f5c\u308a\u305f\u3044\n[Await, SynchronizationContext, and Console Apps](http://blogs.msdn.com/b/pfxteam/archive/2012/01/20/10259049.aspx)\n\u306b\u3084\u308a\u65b9\u304c\u3042\u3063\u305f\u3002\n\n\u4e0a\u8a18\u306e\u8a18\u4e8b\u304b\u3089SingleThreadSynchronizationContext\u3092\u9802\u3044\u3066\u304f\u308b\u3002\n\n```csharp:SingleThreadSynchronizationContext\n    /// <summary>Provides a SynchronizationContext that's single-threaded.</summary>\n    class SingleThreadSynchronizationContext : SynchronizationContext\n    {\n        /// <summary>The queue of work items.</summary>\n        private readonly BlockingCollection<KeyValuePair<SendOrPostCallback, object>> m_queue =\n            new BlockingCollection<KeyValuePair<SendOrPostCallback, object>>();\n\n        /// <summary>The processing thread.</summary>\n        private readonly Thread m_thread = Thread.CurrentThread;\n\n        /// <summary>Dispatches an asynchronous message to the synchronization context.</summary>\n        /// <param name=\"d\">The System.Threading.SendOrPostCallback delegate to call.</param>\n        /// <param name=\"state\">The object passed to the delegate.</param>\n        public override void Post(SendOrPostCallback d, object state)\n        {\n            if (d == null) throw new ArgumentNullException(\"d\");\n            m_queue.Add(new KeyValuePair<SendOrPostCallback, object>(d, state));\n        }\n\n        /// <summary>Not supported.</summary>\n        public override void Send(SendOrPostCallback d, object state)\n        {\n            throw new NotSupportedException(\"Synchronously sending is not supported.\");\n        }\n\n        /// <summary>Runs an loop to process all queued work items.</summary>\n        public void RunOnCurrentThread()\n        {\n            foreach (var workItem in m_queue.GetConsumingEnumerable())\n                workItem.Key(workItem.Value);\n        }\n\n        /// <summary>Notifies the context that no more work will arrive.</summary>\n        public void Complete() { m_queue.CompleteAdding(); }\n    }\n```\n\u3067\u547c\u3073\u51fa\u3057\u65b9\u3092\u3053\u3063\u3061\u306b\u5408\u3046\u3088\u3046\u306b\u8abf\u6574\u3002\n\n```csharp\n        static void Main(string[] args)\n        {\n            // context\u3092\u4f5c\u3063\u3066\u30bb\u30c3\u30c8\u3059\u308b\n            var context = new SingleThreadSynchronizationContext();\n            SynchronizationContext.SetSynchronizationContext(context);\n\n            var vm = new ViewModel();\n\n            Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n            var subscription =\n                Observable.Interval(TimeSpan.FromSeconds(2))\n                .Take(1)\n                .Do(x =>\n                {\n                    Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n                })\n                // CurrentThread\u3067Observe\u3060\n                .ObserveOn(context)\n                .Do(x =>\n                {\n                    Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n                })\n                .Subscribe(x =>\n                {\n                    vm.Command.Execute(null);\n                }\n                , ex=>\n                {\n                }\n                , ()=>\n                {\n                    // \u7d42\u4e86\u901a\u77e5\n                    context.Complete();\n                })\n                ;\n\n            // \u30a8\u30f3\u30ad\u30e5\u30fc\u3055\u308c\u305f\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u6d88\u5316\u3059\u308b\n            context.RunOnCurrentThread();\n\n            Console.ReadLine();\n        }\n```\n\n\u5b9f\u884c\u3057\u3066\u307f\u308b\u3068\n\n```\nThreadID: 8\nThreadID: 10\nThreadID: 8\nCommand\n```\n\u3068\u306a\u308a\u3046\u307e\u304f\u3044\u3063\u305f\u3002\n\u3082\u3046\u3061\u3087\u3063\u3068SynchronizationContext\u306e\u5b09\u3057\u3055\u304c\u3067\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u308b\u3002\n\n#EventLoop\u98a8\u306b\u3057\u3066\u307f\u308b\n\n```csharp\n        static void Main(string[] args)\n        {\n            // context\u3092\u4f5c\u3063\u3066\u30bb\u30c3\u30c8\u3059\u308b\n            var context = new SingleThreadSynchronizationContext();\n            SynchronizationContext.SetSynchronizationContext(context);\n\n            // \u672c\u4f53\n            _Main(args);\n\n            Observable.Start(() =>\n            {\n                // \u30a8\u30f3\u30bf\u30fc\u3067\u505c\u6b62\u30fb\u30fb\u30fb\n                Console.ReadLine();\n            })\n            .Subscribe(x =>\n            {\n                // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7d42\u4e86\u3055\u305b\u308b\n                context.Complete();\n            });\n\n            // \u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\n            context.RunOnCurrentThread();\n        }\n\n        static void _Main(string[] args)\n        {\n            var vm = new ViewModel();\n\n            Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n            var subscription =\n                Observable.Interval(TimeSpan.FromSeconds(2))\n                .Take(1)\n                .Do(x =>\n                {\n                    Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n                })\n                // SetSynchronizationContext\u7b49\u304c\u96a0\u853d\u3055\u308c\u305f\n                .ObserveOn(SynchronizationContext.Current)\n                .Do(x =>\n                {\n                    Console.WriteLine(\"ThreadID: \" + Thread.CurrentThread.ManagedThreadId);\n                })\n                .Subscribe(x =>\n                {\n                    vm.Command.Execute(null);\n                }\n                , ex=>\n                {\n                }\n                , ()=>\n                {\n                })\n                ;\n        }\n```\n\n\u3053\u3053\u307e\u3067\u3084\u308b\u3068\u672c\u4f53\u3067\u306fObserveOn\u3059\u308b\u3060\u3051\u306b\u306a\u3063\u3066\u7d30\u304b\u3044\u3068\u3053\u308d\u3092\u96a0\u853d\u3067\u304d\u305f\u3002\n[\u6700\u7d42\u7248\u306e\u52d5\u304f\u30b3\u30fc\u30c9](https://gist.github.com/ousttrue/d1818a2ad5418c82923b)\n\n# Scheduler(ObserveOn\u306e\u5f15\u6570)\u3068SynchronizationContext\u306f\u4f55\u306a\u306e\u304b\nScheduler(ImmediateScheduler\u4ee5\u5916)\u306f\u51e6\u7406\u3092\u30a8\u30f3\u30ad\u30e5\u30fc\u3057\u3066\u3069\u3053\u304b\u3067\u30c7\u30ad\u30e5\u30fc\u3057\u3066\u5b9f\u884c\u3059\u308b\u3002\nSynchronizaionContext\u306fasync/await\u306eawait\u306e\u7d9a\u304d\u3092\u3069\u3053\u3067\u5b9f\u884c\u3059\u308b\u306e\u304b\u3092\u8a2d\u5b9a\u3059\u308b\u306e\u306b\u4f7f\u308f\u308c\u308b\u3082\u306e\u3067\u3001\nWPF\u3084WinForm\u7b49\u306e\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3092\u5185\u5305\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u5074\u304c\u88cf\u3067\u63d0\u4f9b\u3059\u308b\u60f3\u5b9a\u306e\u3088\u3046\u3060\u3002\n\u3069\u3061\u3089\u3082\u51e6\u7406\u3092Post\u3055\u308c\u3066\u3001\u306a\u3093\u3089\u304b\u306e\u65b9\u6cd5\u3067Post\u3055\u308c\u305f\u3082\u306e\u3092\u5f8c\u3067(ImmediateScheduler\u3092\u9664\u304f)\u51e6\u7406\u3059\u308b\u3082\u306e\u3092\u62bd\u8c61\u5316\u3057\u3066\u3044\u308b\u3002\n\u3044\u308d\u3093\u306a\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u30a8\u30f3\u30ad\u30e5\u30fc(Post)\u3055\u308c\u308b\u304c\u3001\u7279\u5b9a\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u30c7\u30ad\u30e5\u30fc\u3059\u308b\u30eb\u30fc\u30d7\u304c\u50cd\u3044\u3066\u3044\u308b\u3068\u3044\u3046\u7406\u89e3\u3067\u3088\u3055\u305d\u3046\u3002\n\n[Rx\u5165\u9580 (15) - \u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u5229\u7528](http://blog.xin9le.net/entry/2012/01/24/120722)\n\u306bRx\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u4e00\u89a7\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n\u4e0b\u8a18\u306b\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u7a2e\u985e\u3068\u305d\u308c\u305e\u308c\u306b\u95a2\u3057\u3066\u306e\u30e1\u30e2\u3002\u7d30\u304b\u3044\u3068\u3053\u308d\u306f\u9593\u9055\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u6ce8\u610f\u30fb\u30fb\u30fb\n\n| Shceduler            | SynchronizationContext | memo |\n|:---------------------|:-----------------------|:-----|\n|ControlScheduler      |WindowsFormsSynchronizationContext|WindowsForm\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30dd\u30f3\u30d7\u306b\u4ed5\u8fbc\u307e\u308c\u305f\u30ad\u30e5\u30fc|\n|DispatcherScheduler   |DispatcherSynchronizationContext  |WPF\u306b\u4ed5\u8fbc\u307e\u308c\u305f\u30ad\u30e5\u30fc|\n|ImmediateScheduler    | |\u5f85\u305f\u305a\u306b\u3059\u3050\u306b\u5b9f\u884c\u3059\u308b\u3002\u30ad\u30e5\u30fc\u3067\u3059\u3089\u306a\u3044|\n|CurrentThreadScheduler| |\u30ad\u30e5\u30fc\u3002\u305f\u3076\u3093Rx\u3067\u4ed6\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u304c\u6307\u5b9a\u3055\u308c\u306a\u304b\u3063\u305f\u3068\u304d\u306b\u4f7f\u308f\u308c\u308b\u3002Subscribe\u3059\u308b\u3068\u751f\u6210\u3055\u308c\u308b\u3002\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u306e\u306f\u7121\u610f\u5473\u306a\u306e\u3067\u306f\uff1f|\n|NewThreadScheduler    | |\u65b0\u3057\u3044\u30b9\u30ec\u30c3\u30c9\u3092\u3069\u3093\u3069\u3093\u4f5c\u308b\uff1f|\n|EventLoopScheduler    | |\u65b0\u3057\u3044\u30b9\u30ec\u30c3\u30c9\u3067EventLoop\u3092\u958b\u59cb\u3059\u308b\u3002ThreadPool\u306b\u5bfe\u3057\u3066\u3001\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u304c\u58f2\u308a\uff1f|\n|ThreadPoolScheduler   | |ThreadPool\u3067\u51e6\u7406\u3059\u308b|\n\n```\nObserveOn(Thread.CurrentThread)\n```\n\n\u3068\u304b\u3067\u304d\u305f\u3089\u4fbf\u5229\u305d\u3046\u3060\u304c\u3001\u30c7\u30ad\u30e5\u30fc\u304c\u4e0d\u5728\u306b\u306a\u308b\u306e\u3067\u7121\u7406\u3067\u3059\u306d\u3002\n"}