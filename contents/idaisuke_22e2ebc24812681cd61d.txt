{"context": " More than 1 year has passed since last update.Android\u7528\u306bOpenSSL\u3092\u30d3\u30eb\u30c9\u3057\u3066\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u306e\u30e1\u30e2\n\u203b \u30d1\u30b9\u306f\u305d\u308c\u305e\u308c\u81ea\u5206\u306e\u74b0\u5883\u306b\u5408\u308f\u305b\u3066\u306d\n\n\u5b9f\u884c\u3057\u305f\u74b0\u5883\n\nOS X 10.10.3\nCocos2d-x v3.6\nAndroid NDK r10d\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30af\u30ed\u30fc\u30f3\nmkdir OpenSSL\ncd OpenSSL\ngit clone -b OpenSSL_1_0_2a git://github.com/openssl/openssl.git src\n\n\nAndroid NDK Standalone Toolchain\u306e\u4f5c\u6210\n$NDK_ROOT/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=toolchain --platform=android-19\n\n\n\u30d3\u30eb\u30c9\u3059\u308b\n\narmeabi\ncd src\nexport ANDROID_DEV=$NDK_ROOT/platforms/android-19/arch-arm/usr\nCROSS_COMPILE_PREFIX=/Users/ditabashi/OpenSSL/toolchain/bin/arm-linux-androideabi-\nPREFIX=/Users/ditabashi/OpenSSL/dest/armeabi\n./Configure --prefix=$PREFIX --cross-compile-prefix=$CROSS_COMPILE_PREFIX android threads no-shared\nmake -s && make install\n\n\narmeabi-v7a\nPREFIX=/Users/ditabashi/OpenSSL/dest/armeabi-v7a\nmake clean\n./Configure --prefix=$PREFIX --cross-compile-prefix=$CROSS_COMPILE_PREFIX android-armv7 threads no-shared\nmake -s && make install\n\n\nCocos2d-x\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3059\u308b\n\n\nAndroid.mk\u306e\u4e2d\u8eab\n\nAndroid.mk\nLOCAL_PATH := $(call my-dir)\ninclude $(CLEAR_VARS)\n\nLOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/$(TARGET_ARCH_ABI)/include\n\nLOCAL_MODULE := crypto\nLOCAL_SRC_FILES := $(TARGET_ARCH_ABI)/lib/libcrypto.a\ninclude $(PREBUILT_STATIC_LIBRARY)\n\nLOCAL_MODULE := ssl\nLOCAL_SRC_FILES := $(TARGET_ARCH_ABI)/lib/libssl.a\ninclude $(PREBUILT_STATIC_LIBRARY)\n\n\n\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306eAndroid.mk\u3092\u4fee\u6b63\n\nAndroid.mk\nLOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\n$(call import-add-path,$(LOCAL_PATH)/../../cocos2d)\n$(call import-add-path,$(LOCAL_PATH)/../../cocos2d/external)\n$(call import-add-path,$(LOCAL_PATH)/../../cocos2d/cocos)\n\n# **\u3053\u308c\u3092\u8ffd\u52a0**\n$(call import-add-path,$(LOCAL_PATH)/../../Libraries)\n\nLOCAL_MODULE := cocos2dcpp_shared\n\nLOCAL_MODULE_FILENAME := libcocos2dcpp\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                   ../../Classes/AppDelegate.cpp \\\n                   ../../Classes/HelloWorldScene.cpp\n\nLOCAL_C_INCLUDES := $(LOCAL_PATH)/../../Classes\n\n# _COCOS_HEADER_ANDROID_BEGIN\n# _COCOS_HEADER_ANDROID_END\n\n\nLOCAL_STATIC_LIBRARIES := cocos2dx_static\n\n# **\u3053\u308c\u3092\u8ffd\u52a0**\nLOCAL_STATIC_LIBRARIES += crypto ssl\n\n# _COCOS_LIB_ANDROID_BEGIN\n# _COCOS_LIB_ANDROID_END\n\ninclude $(BUILD_SHARED_LIBRARY)\n\n$(call import-module,.)\n\n# _COCOS_LIB_IMPORT_ANDROID_BEGIN\n# _COCOS_LIB_IMPORT_ANDROID_END\n\n# **\u3053\u308c\u3092\u8ffd\u52a0**\n$(call import-module,OpenSSL/Android)\n\n\n\n\n\u753b\u50cf\u3092\u6697\u53f7\u5316\u3057\u3066\u307f\u308b\nopenssl enc -e -aes-128-ecb -K 61616161616161616161616161616161 -in HelloWorld.png -out HelloWorld.dat\n\n\u203b 61616161616161616161616161616161\u306f\"aaaaaaaaaaaaaaaa\"\u306e16\u9032\u6570\u8868\u73fe\n\n\u5fa9\u53f7\u3057\u3066\u8868\u793a\u3059\u308b\n\nHelloWorldScene.cpp\n#include <array>\n#include <vector>\n#include <openssl/evp.h>\n\ncocos2d::Sprite *createSpriteFromEncryptedFile(const std::string &fileName) {\n    static const std::array<unsigned char, 16> KEY = {'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n                                                      'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'};\n\n    auto fullPath = cocos2d::FileUtils::getInstance()->fullPathForFilename(fileName);\n    if (auto texture = cocos2d::Director::getInstance()->getTextureCache()->getTextureForKey(fullPath)) {\n        return cocos2d::Sprite::createWithTexture(texture);\n    }\n\n    auto data = cocos2d::FileUtils::getInstance()->getDataFromFile(fullPath);\n\n    EVP_CIPHER_CTX context;\n    EVP_DecryptInit(&context, EVP_aes_128_ecb(), KEY.data(), nullptr);\n\n    std::vector<unsigned char> buff(data.getSize());\n    int len;\n    int outLen = 0;\n    if (!EVP_DecryptUpdate(&context, buff.data(), &len, data.getBytes(), static_cast<int>(data.getSize()))) {\n        return nullptr;\n    }\n    outLen += len;\n\n    if (!EVP_DecryptFinal(&context, buff.data() + len, &len)) {\n        return nullptr;\n    }\n    outLen += len;\n\n    cocos2d::Image image;\n    image.initWithImageData(buff.data(), outLen);\n\n    auto texture = cocos2d::Director::getInstance()->getTextureCache()->addImage(&image, fullPath);\n    return cocos2d::Sprite::createWithTexture(texture);\n}\n\n\n\nHelloWorldScene.cpp\n    // add \"HelloWorld\" splash screen\"\n    auto sprite = createSpriteFromEncryptedFile(\"HelloWorld.dat\");\n    // auto sprite = Sprite::create(\"HelloWorld.png\");\n\n\n\n\u304a\u3057\u307e\u3044\n\u4ee5\u4e0a\u306e\u3053\u3068\u3092\u307e\u3068\u3081\u3066\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u3057\u3066GitHub\u306b\u7f6e\u3044\u3066\u304a\u304d\u307e\u3057\u305f\u3002\nbuild-libssl-for-android.sh\u3092\u5b9f\u884c\u3059\u308c\u3070\u540c\u3058\u74b0\u5883\u306a\u3089\u305f\u3076\u3093\u4e0a\u624b\u304f\u3044\u304f\u306f\u305a\u3002\nhttps://github.com/idaisuke/hydrogenium/tree/master/build-tools/OpenSSL\nAndroid\u7528\u306bOpenSSL\u3092\u30d3\u30eb\u30c9\u3057\u3066\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u306e\u30e1\u30e2\n\u203b \u30d1\u30b9\u306f\u305d\u308c\u305e\u308c\u81ea\u5206\u306e\u74b0\u5883\u306b\u5408\u308f\u305b\u3066\u306d\n\n######\u5b9f\u884c\u3057\u305f\u74b0\u5883\n\n+ OS X 10.10.3\n+ Cocos2d-x v3.6\n+ Android NDK r10d\n\n### \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30af\u30ed\u30fc\u30f3\n```bash\nmkdir OpenSSL\ncd OpenSSL\ngit clone -b OpenSSL_1_0_2a git://github.com/openssl/openssl.git src\n```\n\n### Android NDK Standalone Toolchain\u306e\u4f5c\u6210\n```bash\n$NDK_ROOT/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=toolchain --platform=android-19\n```\n\n### \u30d3\u30eb\u30c9\u3059\u308b\n###### armeabi\n```bash\ncd src\nexport ANDROID_DEV=$NDK_ROOT/platforms/android-19/arch-arm/usr\nCROSS_COMPILE_PREFIX=/Users/ditabashi/OpenSSL/toolchain/bin/arm-linux-androideabi-\nPREFIX=/Users/ditabashi/OpenSSL/dest/armeabi\n./Configure --prefix=$PREFIX --cross-compile-prefix=$CROSS_COMPILE_PREFIX android threads no-shared\nmake -s && make install\n```\n###### armeabi-v7a\n```bash\nPREFIX=/Users/ditabashi/OpenSSL/dest/armeabi-v7a\nmake clean\n./Configure --prefix=$PREFIX --cross-compile-prefix=$CROSS_COMPILE_PREFIX android-armv7 threads no-shared\nmake -s && make install\n```\n\n### Cocos2d-x\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3059\u308b\n![openssl_path.png](https://qiita-image-store.s3.amazonaws.com/0/67518/d8a776fd-5b14-a2ee-630e-08e0473539b2.png \"openssl_path.png\")\n\n###### Android.mk\u306e\u4e2d\u8eab\n```Android.mk\nLOCAL_PATH := $(call my-dir)\ninclude $(CLEAR_VARS)\n\nLOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/$(TARGET_ARCH_ABI)/include\n\nLOCAL_MODULE := crypto\nLOCAL_SRC_FILES := $(TARGET_ARCH_ABI)/lib/libcrypto.a\ninclude $(PREBUILT_STATIC_LIBRARY)\n\nLOCAL_MODULE := ssl\nLOCAL_SRC_FILES := $(TARGET_ARCH_ABI)/lib/libssl.a\ninclude $(PREBUILT_STATIC_LIBRARY)\n\n```\n\n### \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306eAndroid.mk\u3092\u4fee\u6b63\n```Android.mk\nLOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\n$(call import-add-path,$(LOCAL_PATH)/../../cocos2d)\n$(call import-add-path,$(LOCAL_PATH)/../../cocos2d/external)\n$(call import-add-path,$(LOCAL_PATH)/../../cocos2d/cocos)\n\n# **\u3053\u308c\u3092\u8ffd\u52a0**\n$(call import-add-path,$(LOCAL_PATH)/../../Libraries)\n\nLOCAL_MODULE := cocos2dcpp_shared\n\nLOCAL_MODULE_FILENAME := libcocos2dcpp\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                   ../../Classes/AppDelegate.cpp \\\n                   ../../Classes/HelloWorldScene.cpp\n\nLOCAL_C_INCLUDES := $(LOCAL_PATH)/../../Classes\n\n# _COCOS_HEADER_ANDROID_BEGIN\n# _COCOS_HEADER_ANDROID_END\n\n\nLOCAL_STATIC_LIBRARIES := cocos2dx_static\n\n# **\u3053\u308c\u3092\u8ffd\u52a0**\nLOCAL_STATIC_LIBRARIES += crypto ssl\n\n# _COCOS_LIB_ANDROID_BEGIN\n# _COCOS_LIB_ANDROID_END\n\ninclude $(BUILD_SHARED_LIBRARY)\n\n$(call import-module,.)\n\n# _COCOS_LIB_IMPORT_ANDROID_BEGIN\n# _COCOS_LIB_IMPORT_ANDROID_END\n\n# **\u3053\u308c\u3092\u8ffd\u52a0**\n$(call import-module,OpenSSL/Android)\n\n```\n\n### \u753b\u50cf\u3092\u6697\u53f7\u5316\u3057\u3066\u307f\u308b\n```bash\nopenssl enc -e -aes-128-ecb -K 61616161616161616161616161616161 -in HelloWorld.png -out HelloWorld.dat\n```\n\u203b 61616161616161616161616161616161\u306f\"aaaaaaaaaaaaaaaa\"\u306e16\u9032\u6570\u8868\u73fe\n\n### \u5fa9\u53f7\u3057\u3066\u8868\u793a\u3059\u308b\n```cpp:HelloWorldScene.cpp\n#include <array>\n#include <vector>\n#include <openssl/evp.h>\n\ncocos2d::Sprite *createSpriteFromEncryptedFile(const std::string &fileName) {\n    static const std::array<unsigned char, 16> KEY = {'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a',\n                                                      'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'};\n\n    auto fullPath = cocos2d::FileUtils::getInstance()->fullPathForFilename(fileName);\n    if (auto texture = cocos2d::Director::getInstance()->getTextureCache()->getTextureForKey(fullPath)) {\n        return cocos2d::Sprite::createWithTexture(texture);\n    }\n\n    auto data = cocos2d::FileUtils::getInstance()->getDataFromFile(fullPath);\n\n    EVP_CIPHER_CTX context;\n    EVP_DecryptInit(&context, EVP_aes_128_ecb(), KEY.data(), nullptr);\n\n    std::vector<unsigned char> buff(data.getSize());\n    int len;\n    int outLen = 0;\n    if (!EVP_DecryptUpdate(&context, buff.data(), &len, data.getBytes(), static_cast<int>(data.getSize()))) {\n        return nullptr;\n    }\n    outLen += len;\n\n    if (!EVP_DecryptFinal(&context, buff.data() + len, &len)) {\n        return nullptr;\n    }\n    outLen += len;\n\n    cocos2d::Image image;\n    image.initWithImageData(buff.data(), outLen);\n\n    auto texture = cocos2d::Director::getInstance()->getTextureCache()->addImage(&image, fullPath);\n    return cocos2d::Sprite::createWithTexture(texture);\n}\n```\n\n```HelloWorldScene.cpp\n    // add \"HelloWorld\" splash screen\"\n    auto sprite = createSpriteFromEncryptedFile(\"HelloWorld.dat\");\n    // auto sprite = Sprite::create(\"HelloWorld.png\");\n```\n\n### \u304a\u3057\u307e\u3044\n\u4ee5\u4e0a\u306e\u3053\u3068\u3092\u307e\u3068\u3081\u3066\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u3057\u3066GitHub\u306b\u7f6e\u3044\u3066\u304a\u304d\u307e\u3057\u305f\u3002\nbuild-libssl-for-android.sh\u3092\u5b9f\u884c\u3059\u308c\u3070\u540c\u3058\u74b0\u5883\u306a\u3089\u305f\u3076\u3093\u4e0a\u624b\u304f\u3044\u304f\u306f\u305a\u3002\nhttps://github.com/idaisuke/hydrogenium/tree/master/build-tools/OpenSSL\n", "tags": ["openssl", "cocos2d-x", "C++", "Android"]}