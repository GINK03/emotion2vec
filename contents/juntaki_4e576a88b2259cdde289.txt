{"context": "\u8a73\u89e3Linux\u30ab\u30fc\u30cd\u30eb\u306e5\u7ae0\u30ab\u30fc\u30cd\u30eb\u306e\u540c\u671f\u51e6\u7406\u306b\u95a2\u9023\u3059\u308b\u3001\u30bb\u30de\u30d5\u30a9\u306b\u3064\u3044\u3066\u8abf\u3079\u305f\u3002\n\n\u30ab\u30fc\u30cd\u30eb\u30d0\u30fc\u30b8\u30e7\u30f3\nv4.4\n\n\u30bb\u30de\u30d5\u30a9\u3068\u306f\n\u30ed\u30c3\u30af\u304c\u53d6\u308c\u306a\u3044\u5834\u5408\u306b\u3001\u4f11\u6b62\u72b6\u614b\u3067\u5b9f\u884c\u3092\u5f85\u305f\u305b\u308b\u6a5f\u80fd\u3002\u30b9\u30d4\u30f3\u30ed\u30c3\u30af\u3088\u308a\u306fCPU\u3092\u6709\u52b9\u6d3b\u7528\u51fa\u6765\u308b\u30d1\u30bf\u30fc\u30f3\u3082\u3042\u308b\u3093\u3060\u308d\u3046\u3068\u601d\u3046\u3002\n\u3044\u308d\u3044\u308d\u8abf\u3079\u305f\u5f8c\u306b\u306b\u6c17\u3065\u3044\u305f\u304c\u3001\u3053\u306e\u6a5f\u69cb\u306f\u307b\u3068\u3093\u3069\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u30fb\u30fb\u30fb\u53e4\u3044\u6a5f\u80fd\u306a\u306e\u304b\u306a\uff1f\n\n\u69cb\u9020\u4f53\n\u89e3\u653e\u3068\u53d6\u5f97\u306e\u95a2\u6570\u306f\u30b9\u30d4\u30f3\u30ed\u30c3\u30af\u3067\u4fdd\u8b77\u3055\u308c\u3066\u3044\u308b\u3002\u3044\u308d\u3093\u306a\u95a2\u6570\u304c\u30e9\u30c3\u30d7\u3057\u3066\u3044\u308b\u304c__up()\u3084__down_common()\u304c\u64cd\u4f5c\u3059\u308b\u95a2\u6570\u306e\u672c\u4f53\u306b\u306a\u308b\u3002\nwait_list\u306b\u306fstruct semaphore_waiter\u304c\u7e4b\u304c\u3063\u3066\u3044\u3066\u3001task_struct\u304c\u8fbf\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n/* Please don't access any members of this structure directly */\nstruct semaphore {\n    raw_spinlock_t      lock;\n    unsigned int        count;\n    struct list_head    wait_list;\n};\n\n\n\u521d\u671f\u5316\u8ad6\u7406\nn\u306f\u540c\u6642\u306b\u53d6\u308c\u308b\u30bb\u30de\u30d5\u30a9\u306e\u6570\u3001DEFINE_SEMAPHORE\u30de\u30af\u30ed\u3067\u30e9\u30c3\u30d7\u3055\u308c\u3066\u3044\u3066\u3001\u305d\u306e\u5834\u5408n\u306f1\u306b\u306a\u308b\u3002\n#define __SEMAPHORE_INITIALIZER(name, n)                \\\n{                                   \\\n    .lock       = __RAW_SPIN_LOCK_UNLOCKED((name).lock),    \\\n    .count      = n,                        \\\n    .wait_list  = LIST_HEAD_INIT((name).wait_list),     \\\n}\n\n\n\u30bb\u30de\u30d5\u30a9\u306e\u89e3\u653e\n__up()\u3067\u306fwait_list\u306b\u3064\u306a\u304c\u3063\u3066\u5f85\u3063\u3066\u3044\u308b\u6700\u521d\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u8d77\u5e8a\u3055\u305b\u308b\u3060\u3051\u3067\u3001\u7279\u306b\u96e3\u3057\u3044\u3053\u3068\u306f\u306a\u3044\u3002\ncount\u306f\u30bc\u30ed\u306b\u306a\u308b\u307e\u3067\u306f\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3060\u3051\u3067\u826f\u3044\u3002\u3053\u3053\u306f\u30b9\u30d4\u30f3\u30ed\u30c3\u30af\u3092\u3068\u3063\u3066\u3044\u308b\u304b\u3089\u30a2\u30c8\u30df\u30c3\u30af\u64cd\u4f5c\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n/**\n * up - release the semaphore\n * @sem: the semaphore to release\n *\n * Release the semaphore.  Unlike mutexes, up() may be called from any\n * context and even by tasks which have never called down().\n */\nvoid up(struct semaphore *sem)\n{\n    unsigned long flags;\n\n    raw_spin_lock_irqsave(&sem->lock, flags);\n    if (likely(list_empty(&sem->wait_list)))\n        sem->count++;\n    else\n        __up(sem);\n    raw_spin_unlock_irqrestore(&sem->lock, flags);\n}\nEXPORT_SYMBOL(up);\n\n\n\u30bb\u30de\u30d5\u30a9\u306e\u53d6\u5f97\ndown()\u306fdeprecated\u3067\u3001down_interruptible()\u304b\u3001down_killable()\u3092\u4f7f\u3048\u3068\u306a\u3063\u3066\u3044\u308b\u3002\u305d\u308c\u305e\u308c\u306e\u9055\u3044\u306f\u306a\u3093\u306e\u30b7\u30b0\u30ca\u30eb\u306b\u53cd\u5fdc\u3059\u308b\u304b\u3067\u3001\u5168\u90e8\u306e\u30b7\u30b0\u30ca\u30eb\u304b\u3001SIGKILL\u3060\u3051\u304b\u3092\u9078\u3079\u308b\u3002\n\u7d50\u5c40\u306e\u3068\u3053\u308d\u3001\u3069\u306e\u95a2\u6570\u3082__down_common()\u306e\u5185\u90e8\u3067\u3001\u6b21\u306efor\u30eb\u30fc\u30d7\u3067\u81ea\u5206\u304cup\u3055\u308c\u308b\u307e\u3067\u307e\u3064\u3002timeout\u304b\u6307\u5b9a\u306e\u30b7\u30b0\u30ca\u30eb\u3092\u53d7\u3051\u53d6\u3063\u305f\u5834\u5408\u306f\u3001\u30ed\u30c3\u30af\u3092\u53d6\u3089\u305a\u306b\u8fd4\u308b\u3002\n\u30b9\u30d4\u30f3\u30ed\u30c3\u30af\u306fschedule_timeout()\u306e\u524d\u3067\u89e3\u9664\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30b9\u30d4\u30f3\u30ed\u30c3\u30af\u3092\u3068\u308a\u3063\u3071\u306a\u3057\u306b\u306f\u306a\u3089\u306a\u3044\u3002\n    for (;;) {\n        if (signal_pending_state(state, task))\n            goto interrupted;\n        if (unlikely(timeout <= 0))\n            goto timed_out;\n        __set_task_state(task, state);\n        raw_spin_unlock_irq(&sem->lock);\n        timeout = schedule_timeout(timeout);\n        raw_spin_lock_irq(&sem->lock);\n        if (waiter.up)\n            return 0;\n    }\n\n\u8a73\u89e3Linux\u30ab\u30fc\u30cd\u30eb\u306e5\u7ae0\u30ab\u30fc\u30cd\u30eb\u306e\u540c\u671f\u51e6\u7406\u306b\u95a2\u9023\u3059\u308b\u3001\u30bb\u30de\u30d5\u30a9\u306b\u3064\u3044\u3066\u8abf\u3079\u305f\u3002\n\n## \u30ab\u30fc\u30cd\u30eb\u30d0\u30fc\u30b8\u30e7\u30f3\n\nv4.4\n\n## \u30bb\u30de\u30d5\u30a9\u3068\u306f\n\n\u30ed\u30c3\u30af\u304c\u53d6\u308c\u306a\u3044\u5834\u5408\u306b\u3001\u4f11\u6b62\u72b6\u614b\u3067\u5b9f\u884c\u3092\u5f85\u305f\u305b\u308b\u6a5f\u80fd\u3002\u30b9\u30d4\u30f3\u30ed\u30c3\u30af\u3088\u308a\u306fCPU\u3092\u6709\u52b9\u6d3b\u7528\u51fa\u6765\u308b\u30d1\u30bf\u30fc\u30f3\u3082\u3042\u308b\u3093\u3060\u308d\u3046\u3068\u601d\u3046\u3002\n\u3044\u308d\u3044\u308d\u8abf\u3079\u305f\u5f8c\u306b\u306b\u6c17\u3065\u3044\u305f\u304c\u3001\u3053\u306e\u6a5f\u69cb\u306f\u307b\u3068\u3093\u3069\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u30fb\u30fb\u30fb\u53e4\u3044\u6a5f\u80fd\u306a\u306e\u304b\u306a\uff1f\n\n## \u69cb\u9020\u4f53\n\n\u89e3\u653e\u3068\u53d6\u5f97\u306e\u95a2\u6570\u306f\u30b9\u30d4\u30f3\u30ed\u30c3\u30af\u3067\u4fdd\u8b77\u3055\u308c\u3066\u3044\u308b\u3002\u3044\u308d\u3093\u306a\u95a2\u6570\u304c\u30e9\u30c3\u30d7\u3057\u3066\u3044\u308b\u304c`__up()`\u3084`__down_common()`\u304c\u64cd\u4f5c\u3059\u308b\u95a2\u6570\u306e\u672c\u4f53\u306b\u306a\u308b\u3002\n`wait_list`\u306b\u306f`struct semaphore_waiter`\u304c\u7e4b\u304c\u3063\u3066\u3044\u3066\u3001`task_struct`\u304c\u8fbf\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n~~~c\n/* Please don't access any members of this structure directly */\nstruct semaphore {\n\traw_spinlock_t\t\tlock;\n\tunsigned int\t\tcount;\n\tstruct list_head\twait_list;\n};\n~~~\n\n## \u521d\u671f\u5316\u8ad6\u7406\n\nn\u306f\u540c\u6642\u306b\u53d6\u308c\u308b\u30bb\u30de\u30d5\u30a9\u306e\u6570\u3001`DEFINE_SEMAPHORE`\u30de\u30af\u30ed\u3067\u30e9\u30c3\u30d7\u3055\u308c\u3066\u3044\u3066\u3001\u305d\u306e\u5834\u5408n\u306f1\u306b\u306a\u308b\u3002\n\n~~~c\n#define __SEMAPHORE_INITIALIZER(name, n)\t\t\t\t\\\n{\t\t\t\t\t\t\t\t\t\\\n\t.lock\t\t= __RAW_SPIN_LOCK_UNLOCKED((name).lock),\t\\\n\t.count\t\t= n,\t\t\t\t\t\t\\\n\t.wait_list\t= LIST_HEAD_INIT((name).wait_list),\t\t\\\n}\n~~~\n\n## \u30bb\u30de\u30d5\u30a9\u306e\u89e3\u653e\n\n`__up()`\u3067\u306fwait_list\u306b\u3064\u306a\u304c\u3063\u3066\u5f85\u3063\u3066\u3044\u308b\u6700\u521d\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u8d77\u5e8a\u3055\u305b\u308b\u3060\u3051\u3067\u3001\u7279\u306b\u96e3\u3057\u3044\u3053\u3068\u306f\u306a\u3044\u3002\ncount\u306f\u30bc\u30ed\u306b\u306a\u308b\u307e\u3067\u306f\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3060\u3051\u3067\u826f\u3044\u3002\u3053\u3053\u306f\u30b9\u30d4\u30f3\u30ed\u30c3\u30af\u3092\u3068\u3063\u3066\u3044\u308b\u304b\u3089\u30a2\u30c8\u30df\u30c3\u30af\u64cd\u4f5c\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n~~~c\n/**\n * up - release the semaphore\n * @sem: the semaphore to release\n *\n * Release the semaphore.  Unlike mutexes, up() may be called from any\n * context and even by tasks which have never called down().\n */\nvoid up(struct semaphore *sem)\n{\n\tunsigned long flags;\n\n\traw_spin_lock_irqsave(&sem->lock, flags);\n\tif (likely(list_empty(&sem->wait_list)))\n\t\tsem->count++;\n\telse\n\t\t__up(sem);\n\traw_spin_unlock_irqrestore(&sem->lock, flags);\n}\nEXPORT_SYMBOL(up);\n~~~\n\n\n## \u30bb\u30de\u30d5\u30a9\u306e\u53d6\u5f97\n\n`down()`\u306fdeprecated\u3067\u3001`down_interruptible()`\u304b\u3001`down_killable()`\u3092\u4f7f\u3048\u3068\u306a\u3063\u3066\u3044\u308b\u3002\u305d\u308c\u305e\u308c\u306e\u9055\u3044\u306f\u306a\u3093\u306e\u30b7\u30b0\u30ca\u30eb\u306b\u53cd\u5fdc\u3059\u308b\u304b\u3067\u3001\u5168\u90e8\u306e\u30b7\u30b0\u30ca\u30eb\u304b\u3001SIGKILL\u3060\u3051\u304b\u3092\u9078\u3079\u308b\u3002\n\n\u7d50\u5c40\u306e\u3068\u3053\u308d\u3001\u3069\u306e\u95a2\u6570\u3082`__down_common()`\u306e\u5185\u90e8\u3067\u3001\u6b21\u306efor\u30eb\u30fc\u30d7\u3067\u81ea\u5206\u304cup\u3055\u308c\u308b\u307e\u3067\u307e\u3064\u3002timeout\u304b\u6307\u5b9a\u306e\u30b7\u30b0\u30ca\u30eb\u3092\u53d7\u3051\u53d6\u3063\u305f\u5834\u5408\u306f\u3001\u30ed\u30c3\u30af\u3092\u53d6\u3089\u305a\u306b\u8fd4\u308b\u3002\n\u30b9\u30d4\u30f3\u30ed\u30c3\u30af\u306f`schedule_timeout()`\u306e\u524d\u3067\u89e3\u9664\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30b9\u30d4\u30f3\u30ed\u30c3\u30af\u3092\u3068\u308a\u3063\u3071\u306a\u3057\u306b\u306f\u306a\u3089\u306a\u3044\u3002\n\n~~~c\n\tfor (;;) {\n\t\tif (signal_pending_state(state, task))\n\t\t\tgoto interrupted;\n\t\tif (unlikely(timeout <= 0))\n\t\t\tgoto timed_out;\n\t\t__set_task_state(task, state);\n\t\traw_spin_unlock_irq(&sem->lock);\n\t\ttimeout = schedule_timeout(timeout);\n\t\traw_spin_lock_irq(&sem->lock);\n\t\tif (waiter.up)\n\t\t\treturn 0;\n\t}\n~~~\n", "tags": ["Linux", "kernel"]}