{"context": " More than 1 year has passed since last update.\nyum(8)\n\nNAME\n       yum - Yellowdog Updater Modified\n\nSYNOPSIS\n       yum [options] [command] [package ...]\n\nDESCRIPTION\n       yum is an interactive, rpm based, package manager. It can automatically\n       perform system updates, including dependency analysis and obsolete pro\u2010\n       cessing  based  on \"repository\" metadata. It can also perform installa\u2010\n       tion of new packages, removal of old packages and  perform  queries  on\n       the  installed and/or available packages among many other commands/ser\u2010\n       vices (see below). yum is similar to other high level package  managers\n       like apt-get and smart.\n\n       While  there  are  some  graphical interfaces directly to the yum code,\n       more recent graphical interface development  is  happening  with  Pack\u2010\n       ageKit and the gnome-packagekit application.\n\n       command is one of:\n    * install package1 [package2] [...]\n    * update [package1] [package2] [...]\n    * update-to [package1] [package2] [...]\n    * update-minimal [package1] [package2] [...]\n    * check-update\n    * upgrade [package1] [package2] [...]\n    * upgrade-to [package1] [package2] [...]\n    * distribution-synchronization [package1] [package2] [...]\n    * remove | erase package1 [package2] [...]\n    * autoremove [package1] [...]\n    * list [...]\n    * info [...]\n    * provides | whatprovides feature1 [feature2] [...]\n    * clean [ packages | metadata | expire-cache | rpmdb | plugins | all ]\n    * makecache [fast]\n    * groups [...]\n    * search string1 [string2] [...]\n    * shell [filename]\n    * resolvedep dep1 [dep2] [...]\n       (maintained  for  legacy  reasons  only - use repoquery or yum pro\u2010\n       vides)\n    * localinstall rpmfile1 [rpmfile2] [...]\n       (maintained for legacy reasons only - use install)\n    * localupdate rpmfile1 [rpmfile2] [...]\n       (maintained for legacy reasons only - use update)\n    * reinstall package1 [package2] [...]\n    * downgrade package1 [package2] [...]\n    * deplist package1 [package2] [...]\n    * repolist [all|enabled|disabled]\n    * repoinfo [all|enabled|disabled]\n    * repository-packages <enabled-repoid> <install|remove|remove-or-rein\u2010\n       stall|remove-or-distribution-synchronization> [package2] [...]\n     * version [ all | installed | available | group-* | nogroups* | grou\u2010\n       plist | groupinfo ]\n      *   history    [info|list|packages-list|packages-info|summary|addon-\n       info|redo|undo|rollback|new|sync|stats]\n    * load-transaction [txfile]\n    * updateinfo [summary | list | info | remove-pkgs-ts | exclude-updates\n       | exclude-all | check-running-kernel]\n    * fssnapshot [summary | list | have-space | create | delete]\n    * fs [filters | refilter | refilter-cleanup | du]\n    * check\n    * help [command]\n\n       Unless the --help or -h option is given, one of the above commands must\n       be present.\n\n       Repository configuration is honored in all operations.\n\n       install\n          Is  used  to install the latest version of a package or group of\n          packages while ensuring that  all  dependencies  are  satisfied.\n          (See  Specifying package names for more information) If no pack\u2010\n          age matches the given package name(s), they are assumed to be  a\n          shell  glob  and  any  matches  are  then installed. If the name\n          starts with @^ then it is treated as an environment group (group\n          install  @^foo),  an  @  character  and  it's treated as a group\n          (plain group install).\n\n          If the name starts with a \"-\" character, then a search  is  done\n          within  the  transaction  and any matches are removed. Note that\n          Yum options use the same syntax and it may be necessary  to  use\n          \"--\" to resolve any possible conflicts.\n\n          If  the name is a file, then install works like localinstall. If\n          the name doesn't match a package, then  package  \"provides\"  are\n          searched (e.g. \"_sqlitecache.so()(64bit)\") as are filelists (Eg.\n          \"/usr/bin/yum\"). Also note that for  filelists,  wildcards  will\n          match multiple packages.\n\n          Because  install does a lot of work to make it as easy as possi\u2010\n          ble to use, there are  also  a  few  specific  install  commands\n          \"install-n\",  \"install-na\"  and \"install-nevra\". These only work\n          on package names, and do not process wildcards etc.\n\n       update If run without any packages, update will update every  currently\n          installed package.  If one or more packages or package globs are\n          specified, Yum will only  update  the  listed  packages.   While\n          updating  packages,  yum  will  ensure that all dependencies are\n          satisfied. (See Specifying package names for  more  information)\n          If  the  packages or globs specified match to packages which are\n          not currently installed  then  update  will  not  install  them.\n          update  operates  on  groups, files, provides and filelists just\n          like the \"install\" command.\n\n          If the main obsoletes configure option is true (default) or  the\n          --obsoletes  flag  is present yum will include package obsoletes\n          in its calculations - this makes it  better  for  distro-version\n          changes,  for example: upgrading from somelinux 8.0 to somelinux\n          9.\n\n          Note that \"update\" works on installed packages first,  and  only\n          if there are no matches does it look for available packages. The\n          difference is most noticeable when you do \"update foo-1-2\" which\n          will  act  exactly  as \"update foo\" if foo-1-2 is installed. You\n          can use the \"update-to\" if you'd prefer that nothing  happen  in\n          the above case.\n\n       update-to\n          This  command  works like \"update\" but always specifies the ver\u2010\n          sion of the package we want to update to.\n\n       update-minimal\n          This works like the update command, but if you have the  package\n          foo-1  installed and have foo-2 (bugfix) and foo-3 (enhancement)\n          available with updateinfo.xml then update-minimal --bugfix  will\n          update you to foo-2.\n\n       check-update\n          Implemented  so  you  could know if your machine had any updates\n          that needed to be  applied  without  running  it  interactively.\n          Returns exit value of 100 if there are packages available for an\n          update. Also returns a list of the packages  to  be  updated  in\n          list  format. Returns 0 if no packages are available for update.\n          Returns 1 if an error occurred.  Running in  verbose  mode  also\n          shows obsoletes.\n\n       upgrade\n          Is the same as the update command with the --obsoletes flag set.\n          See update for more details.\n\n       upgrade-to\n          This command works like \"upgrade\" but always specifies the  ver\u2010\n          sion of the package we want to update to.\n\n       distribution-synchronization or distro-sync\n          Synchronizes  the installed package set with the latest packages\n          available, this is done by either obsoleting, upgrading or down\u2010\n          grading  as  appropriate. This will \"normally\" do the same thing\n          as the upgrade command however  if  you  have  the  package  FOO\n          installed at version 4, and the latest available is only version\n          3, then this command will downgrade FOO to version 3.\n\n          If you give the optional argument \"full\", then the command  will\n          also  reinstall  packages  where  the  install  checksum and the\n          available checksum do not match. And remove old packages (can be\n          used to sync. rpmdb versions). The optional argument \"different\"\n          can be used to specify the default operation.\n\n          This command does not perform operations on groups, local  pack\u2010\n          ages or negative selections.\n\n       remove or erase\n          Are  used  to  remove  the specified packages from the system as\n          well as removing any packages which depend on the package  being\n          removed.   remove   operates  on  groups,  files,  provides  and\n          filelists just like the \"install\" command.(See Specifying  pack\u2010\n          age names for more information)\n\n          Note that \"yum\" is included in the protected_packages configura\u2010\n          tion, by default.  So you can't accidentally remove yum itself.\n\n          The remove_leaf_only configuration changes the behaviour of this\n          command  to  only remove packages which aren't required by some\u2010\n          thing else.\n\n          The clean_requirements_on_remove configuration changes  the  be\u2010\n          haviour  of  this  command to also remove packages that are only\n          dependencies of this package.\n\n          Because remove does a lot of work to make it as easy as possible\n          to  use,  there are also a few specific remove commands \"remove-\n          n\", \"remove-na\" and \"remove-nevra\". These only work  on  package\n          names, and do not process wildcards etc.\n\n       autoremove\n\n          With  one  or more arguments this command works like running the\n          \"remove\" command with  the  clean_requirements_on_remove  turned\n          on. However you can also specify no arguments, at which point it\n          tries to remove any packages that weren't  installed  explicitly\n          by  the  user  and  which aren't required by anything (so called\n          leaf packages).\n\n          Because autoremove does a lot of work to make it as easy as pos\u2010\n          sible  to use, there are also a few specific autoremove commands\n          \"autoremove-n\", \"autoremove-na\"  and  \"autoremove-nevra\".  These\n          only work on package names, and do not process wildcards etc.\n\n       list   Is  used  to  list various information about available packages;\n          more complete details are available in the List Options  section\n          below.\n\n       provides or whatprovides\n          Is used to find out which package provides some feature or file.\n          Just use a specific name or a file-glob-syntax wildcards to list\n          the packages available or installed that provide that feature or\n          file.\n\n       search This is used to find packages when you know something about  the\n          package but aren't sure of it's name. By default search will try\n          searching just package names and summaries, but if that  \"fails\"\n          it will then try descriptions and url.\n\n          Yum  search  orders  the results so that those packages matching\n          more terms will appear first.\n\n          You can force searching everything by specifying  \"all\"  as  the\n          first argument.\n\n       info   Is  used  to  list  a  description and summary information about\n          available packages; takes the same  arguments  as  in  the  List\n          Options section below.\n\n       clean  Is  used  to clean up various things which accumulate in the yum\n          cache directory over time.  More complete details can  be  found\n          in the Clean Options section below.\n\n       makecache\n          Is  used  to  download  and make usable all the metadata for the\n          currently enabled yum repos. If the argument \"fast\"  is  passed,\n          then  we just try to make sure the repos. are current (much like\n          \"yum clean expire-cache\").\n\n       groups A command, new in 3.4.2, that collects all the subcommands  that\n          act on groups together. Note that recent yum using distributions\n          (Fedora-19+,  RHEL-7+)  have  configured   group_command=objects\n          which changes how group commands act in some important ways.\n\n          \"group  install\"  is used to install all of the individual pack\u2010\n          ages in a group, of the specified types (this works as if  you'd\n          taken  each  of  those package names and put them on the command\n          line for a \"yum install\" command).\n           The group_package_types configuration  option  specifies  which\n          types will be installed.\n           If  you  wish  to \"reinstall\" a group so that you get a package\n          that is currently blacklisted the easiest way to  do  that  cur\u2010\n          rently  is  to install the package manually and then run \"groups\n          mark packages-sync mygroup mypackagename\" (or use yumdb  to  set\n          the group_member of the package(s)).\n\n          \"group  update\"  is  just an alias for group install, when using\n          group_command=compat. This will install packages  in  the  group\n          not  already  installed  and  upgrade  existing  packages.  With\n          group_command=simple it  will  just  upgrade  already  installed\n          packages.  With group_command=objects it will try to upgrade the\n          group object, installing any available packages not  blacklisted\n          (marked  '-' in group info) and will upgrade the installed pack\u2010\n          ages.\n\n          \"group list\" is used to list the available groups from  all  yum\n          repos.  When group_command=objects the group is installed if the\n          user explicitly installed it (or used the group  mark*  commands\n          to  mark  it  installed).  It does not need to have any packages\n          installed.  When  not  using  group_command=objects  groups  are\n          shown as \"installed\" if all mandatory packages are installed, or\n          if a group doesn't  have  any  mandatory  packages  then  it  is\n          installed  if  any  of  the  optional  or  default  package  are\n          installed (when not in  group_command=objects  mode).   You  can\n          pass optional arguments to the list/summary commands: installed,\n          available, environment, language, packages, hidden and  ids  (or\n          any  of  those prefixed by \"no\" to turn them off again).  If you\n          pass the -v option, to enable verbose mode,  then  the  groupids\n          are displayed by default (but \"yum group list ids\" is often eas\u2010\n          ier to read).\n\n          \"group remove\" is used to remove all of the packages in a group,\n          unlike  \"groupinstall\" this will remove everything regardless of\n          group_package_types. It is worth pointing out that packages  can\n          be  in  more  than one group, so \"group install X Y\" followed by\n          \"group remove Y\" does not do give you the same result as  \"group\n          install X\".\n\n          The groupremove_leaf_only configuration changes the behaviour of\n          this command to only remove packages which  aren't  required  by\n          something else.\n\n          \"group info\" is used to give the description and package list of\n          a group (and which type those packages are marked as). Note that\n          you  can  use  the  yum-filter-data and yum-list-data plugins to\n          get/use the data the other way  around  (i.e.  what  groups  own\n          packages  need  updating).  If you pass the -v option, to enable\n          verbose  mode,  then  the  package  names  are  matched  against\n          installed/available packages similar to the list command.\n\n          When  using group_command=objects, the info command will display\n          markers next to each package saying how that package relates  to\n          the group object. The meaning of these markers is:\n\n          \"-\" = Package isn't installed, and won't be installed as part of\n          the group (Eg.  \"yum group install  foo  -pkgA\"  or  \"yum  group\n          install  foo;  yum  remove pkgA\" \u2026 this will have pkgA marked as\n          '-')\n          \"+\" = Package isn't installed, but will be the next time you run\n          \"yum upgrade\" or \"yum group upgrade foo\"\n          \"  \"  = Package is installed, but wasn't installed via the group\n          (so \"group remove foo\" won't remove it).\n          \"=\" = Package is installed, and was installed via the group.\n\n          you can move an installed package into an installed group  using\n          either  \"group  mark package-sync/package-sync-forced\" or \"yumdb\n          set group_member\".\n\n          \"group summary\" is used to give a  quick  summary  of  how  many\n          groups are installed and available.\n\n          \"group mark\" and \"group unmark\" are used when groups are config\u2010\n          ured in group_command=objects mode. These  commands  then  allow\n          you  to  alter yum's idea of which groups are installed, and the\n          packages that belong to them.\n\n          \"group mark install\" mark the group as installed. When installed\n          \"yum  upgrade\" and \"yum group upgrade\" will install new packages\n          for the group (only those packages  already  installed  will  be\n          marked as members of the installed group to start with).\n\n          \"group mark remove\" the opposite of mark install.\n\n          \"group mark packages\" takes a group id (which must be installed)\n          and marks any given installed packages (which aren't members  of\n          a  group)  as  members of the group. Note that the data from the\n          repositories does not need to specify the packages as  a  member\n          of the group.\n\n          \"group  mark  packages-force\"  works  like  mark  packages,  but\n          doesn't care if the packages  are  already  members  of  another\n          group.\n\n          \"group  mark blacklist\" will blacklist all packages marked to be\n          installed for a group. After this command a \"yum group  upgrade\"\n          will not install any new packages as part of the group.\n\n          \"group mark convert-blacklist\"\n\n          \"group mark convert-whitelist\"\n\n          \"group mark convert\" converts the automatic data you get without\n          using groups as objects into groups as objects  data,  in  other\n          words  this will make \"yum --setopt=group_command=objects groups\n          list\" look as similar as possible to the current output of  \"yum\n          --setopt=group_command=simple  groups  list\". This makes it much\n          easier to convert to groups as objects without having  to  rein\u2010\n          stall.  For groups that are installed the whitelist variant will\n          mark all uninstalled packages for the group as to  be  installed\n          on  the next \"yum group upgrade\", the blacklist variant (current\n          default) will mark them all as blacklisted.\n\n          \"group unmark packages\" remove a package as a  member  from  any\n          groups.\n\n       shell  Is  used  to enter the 'yum shell', when a filename is specified\n          the contents of that file is executed in  yum  shell  mode.  See\n          yum-shell(8) for more info.\n\n       resolvedep\n          Is  used  to list packages providing the specified dependencies,\n          at most one package is listed per dependency.  This  command  is\n          maintained for legacy reasons only, use repoquery instead.\n\n       localinstall\n          Is  used  to  install  a set of local rpm files. If required the\n          enabled repositories will be used to resolve dependencies.  Note\n          that  the  install  command  will do a local install, if given a\n          filename. This command is maintained for legacy reasons only.\n\n       localupdate\n          Is used to update the system by specifying local rpm files. Only\n          the  specified  rpm  files  of which an older version is already\n          installed will be installed, the  remaining  specified  packages\n          will  be  ignored.  If required the enabled repositories will be\n          used to resolve dependencies. Note that the update command  will\n          do  a  local  update, if given a filename. This command is main\u2010\n          tained for legacy reasons only.\n\n       reinstall\n          Will reinstall the identically versioned package as is currently\n          installed.   This does not work for \"installonly\" packages, like\n          Kernels. reinstall  operates  on  groups,  files,  provides  and\n          filelists just like the \"install\" command.\n\n       downgrade\n          Will  try  and  downgrade  a  package from the version currently\n          installed to the previously highest version  (or  the  specified\n          version).   The  depsolver will not necessarily work, but if you\n          specify all the packages it should work (thus,  all  the  simple\n          cases  will  work).  Also  this  does not work for \"installonly\"\n          packages, like Kernels. downgrade  operates  on  groups,  files,\n          provides,  filelists  and rpm files just like the \"install\" com\u2010\n          mand.\n\n       swap   At it's simplest this is just a simpler way to remove one set of\n          package(s)  and install another set of package(s) without having\n          to use the \"shell\" command.  However you can  specify  different\n          commands  to  call than just remove or install, and you can list\n          multiple packages (it splits using the \"--\" marker).  Note  that\n          option parsing will remove the first \"--\" in an argument list on\n          the command line.\n\n\n          Examples:\n\n          swap foo bar\n          swap -- remove foo -- install bar\n          swap foo group install bar-grp\n          swap -- group remove foo-grp -- group install bar-grp\n\n       deplist\n          Produces a list of all dependencies and  what  packages  provide\n          those  dependencies  for the given packages. As of 3.2.30 it now\n          just shows the latest version of each package that matches (this\n          can  be changed by using --showduplicates) and it only shows the\n          newest providers (which can be changed by using --verbose).\n\n       repolist\n          Produces a list of configured repositories. The  default  is  to\n          list all enabled repositories. If you pass -v, for verbose mode,\n          or use repoinfo then more information is listed.  If  the  first\n          argument is \u00b4enabled\u00b4, \u00b4disabled\u00b4 or \u00b4all\u00b4 then the command will\n          list those types of repos.\n\n          You can pass repo id or name arguments, or  wildcards  which  to\n          match  against  both of those. However if the id or name matches\n          exactly then the repo will be listed even  if  you  are  listing\n          enabled repos. and it is disabled.\n\n          In  non-verbose  mode  the first column will start with a \u00b4*\u00b4 if\n          the repo. has metalink data and the latest metadata is not local\n          and  will  start  with  a  \u00b4!\u00b4 if the repo. has metadata that is\n          expired. For non-verbose mode the last column will also  display\n          the  number  of packages in the repo. and (if there are any user\n          specified excludes) the number of packages excluded.\n\n          One last special feature of repolist, is that if you are in non-\n          verbose mode then yum will ignore any repo errors and output the\n          information it can get (Eg. \"yum clean  all;  yum  -C  repolist\"\n          will  output something, although the package counts/etc. will be\n          zeroed out).\n\n       repoinfo\n\n          This command works exactly like repolist -v.\n\n       repository-packages\n          Treat a repo. as a collection of packages  (like  \"yum  groups\")\n          allowing the user to install or remove them as a single entity.\n\n          \"repository-packages  <repo>  list\"  - Works like the \"yum list\"\n          command, but only shows packages from the given repository.\n\n          \"repository-packages <repo> info\" - Works like  the  \"yum  info\"\n          command, but only shows packages from the given repository.\n\n          \"repository-packages  <repo> check-update\" - Works like the \"yum\n          check-update\" command, but only shows packages  from  the  given\n          repository.\n\n          \"repository-packages  <repo> install\" - Install all of the pack\u2010\n          ages in the repository,  basically  the  same  as:  yum  install\n          $(repoquery  --repoid=<repo>  -a).   Specific packages/wildcards\n          can be specified.\n\n          \"repository-packages <repo> upgrade\" - Update all of  the  pack\u2010\n          ages  in  the  repository,  basically  the  same as: yum upgrade\n          $(repoquery --repoid=<repo>  -a).   Specific  packages/wildcards\n          can be specified.\n\n          \"repository-packages  <repo>  upgrade-to\"  -  Update  all of the\n          packages in the repository, basically the same as:  yum  upgrade\n          $(repoquery --repoid=<repo> -a).  Without arguments it works the\n          same as upgrade, with arguments it just interprets them  as  the\n          versions you want to move to.\n\n          \"repository-packages  <repo>  reinstall-old\"  - ReInstall all of\n          the packages that are installed from the repository  and  avail\u2010\n          able  in  the  repository,  similar  to:  yum  reinstall $(yumdb\n          search-quiet from_repo <repo>).\n\n          \"repository-packages <repo> move-to\"  -  ReInstall  all  of  the\n          packages  that  are  available  in the repository, basically the\n          same as: yum reinstall $(repoquery --repoid=<repo> -a).\n\n          \"repository-packages <repo> reinstall\" - Tries to do  reinstall-\n          old, but if that produces no packages then tries move-to.\n\n          \"repo-pkgs  <repo>  remove\"  - Remove all of the packages in the\n          repository,   very   similar   to:   yum   remove    $(repoquery\n          --repoid=<repo> -a). However the repopkgsremove_leaf_only option\n          is obeyed.\n\n          \"repo-pkgs <repo> remove-or-reinstall\" - Works like  remove  for\n          any  package that doesn't have the exact same version in another\n          repository. For any package that does have the  exact  NEVRA  in\n          another repository then that version will be reinstalled.\n\n          \"repo-pkgs <repo> remove-or-distro-sync\" - Works like remove for\n          any package that doesn't exist in another  repository.  For  any\n          package  that  does exist it tries to work as if distro-sync was\n          called (with the repo. disabled).\n\n\n       version\n          Produces a \"version\" of the rpmdb, and of the enabled  reposito\u2010\n          ries if \"all\" is given as the first argument. You can also spec\u2010\n          ify version groups in the version-groups configuration file.  If\n          you  pass  -v, for verbose mode, more information is listed. The\n          version is calculated by taking an SHA1 hash of the packages (in\n          sorted  order), and the checksum_type/checksum_data entries from\n          the yumdb. Note that this rpmdb version is now also used signif\u2010\n          icantly within yum (esp. in yum history).\n\n          The version command will now show \"groups\" of packages as a sep\u2010\n          arate version, and so takes sub-commands:\n\n          \"version grouplist\" - List the defined version groups.\n\n          \"version groupinfo\" - Get the complete list of  packages  within\n          one or more version groups.\n\n          \"version installed\" - This is the default, only show the version\n          information for installed packages.\n\n          \"version available\" - Only  show  the  version  information  for\n          available packages.\n\n          \"version  all\"  - Show the version information for installed and\n          available packages.\n\n          \"version nogroups | nogroups-*\" - Just  show  the  main  version\n          information.\n\n          \"version  group-*\"  - Just show the grouped version information,\n          if more arguments are given then only show the  data  for  those\n          groups.\n\n\n       history\n          The history command allows the user to view what has happened in\n          past transactions (assuming the history_record config. option is\n          set).  You can use info/list/packages-list/packages-info/summary\n          to view what happened, undo/redo/rollback to act on that  infor\u2010\n          mation and new to start a new history file.\n\n          The info/list/summary commands take either a transaction id or a\n          package (with wildcards, as in Specifying  package  names),  all\n          three  can  also  be passed no arguments. list can be passed the\n          keyword \"all\" to list all the transactions.\n\n          The packages-list/packages-info commands takes a package   (with\n          wildcards,  as  in Specifying package names). And show data from\n          the point of view of that package.\n\n          The undo/redo/rollback commands take either a single transaction\n          id  or  the keyword last and an offset from the last transaction\n          (Eg. if you've done 250 transactions, \"last\" refers to  transac\u2010\n          tion  250,  and  \"last-4\"  refers to transaction 246).  The redo\n          command can also take some optional arguments before you specify\n          the  transaction. \"force-reinstall\" tells it reinstall any pack\u2010\n          ages that were  installed  in  that  transaction  (via  install,\n          upgrade  or  downgrade).   \"force-remove\"  tells  it to forcibly\n          remove any packages that were updated or downgraded.\n\n          The  undo/redo  commands  act  on  the  specified   transaction,\n          undo'ing  or  repeating  the work of that transaction. While the\n          rollback command will undo all transactions up to the  point  of\n          the  specified  transaction. For example, if you have 3 transac\u2010\n          tions, where package A; B and C  where  installed  respectively.\n          Then \"undo 1\" will try to remove package A, \"redo 1\" will try to\n          install package A (if it is not still installed), and  \"rollback\n          1\" will try to remove packages B and C. Note that after a \"roll\u2010\n          back 1\" you will have a fourth transaction, although the  ending\n          rpmdb  version (see: yum version) should be the same in transac\u2010\n          tions 1 and 4.\n\n          The addon-info command takes a transaction ID, and the packages-\n          list command takes a package (with wildcards).\n\n          The  stats  command shows some statistics about the current his\u2010\n          tory DB.\n\n          The sync commands allows you  to  change  the  rpmdb/yumdb  data\n          stored for any installed packages, to whatever is in the current\n          rpmdb/yumdb (this is mostly useful when this data was not stored\n          when the package went into the history DB).\n\n          In \"history list\" you can change the behaviour of the 2nd column\n          via the configuration option history_list_view.\n\n          In \"history list\" output the  Altered  column  also  gives  some\n          extra  information  if  there  was  something  not good with the\n          transaction (this is also shown at the end of the package column\n          in the packages-list command).\n\n          > - The rpmdb was changed, outside yum, after the transaction.\n          < - The rpmdb was changed, outside yum, before the transaction.\n          * - The transaction aborted before completion.\n          # - The transaction completed, but with a non-zero status.\n          E - The transaction completed fine, but had warning/error output\n          during the transaction.\n          P - The transaction completed fine, but problems already existed\n          in the rpmdb.\n          s  -  The  transaction  completed  fine,  but  --skip-broken was\n          enabled and had to skip some packages.\n\n\n\n       load-transaction\n          This command will re-load a saved  yum  transaction  file,  this\n          allows  you  to run a transaction on one machine and then use it\n          on another.  The two common ways to get a saved yum  transaction\n          file  are  from \"yum -q history addon-info last saved_tx\" or via\n          the automatic saves in $TMPDIR/yum_save_tx.* when a  transaction\n          is solved but not run.\n\n          Running  the  command  without an argument, or a directory as an\n          argument will try and list the possible files available to load.\n          Showing  if  the  packages  are  still  available,  if the rpmdb\n          matches the current rpmdb, how many transaction  install/removes\n          members are in the saved transaction and what the filename is.\n\n\n       updateinfo\n          This  command  has a bunch of sub-commands to act on the update\u2010\n          info in the repositories. The simplest commands are:\n\n           yum updateinfo info [all | available | installed | updates]\n           yum updateinfo list [all | available | installed | updates]\n           yum  updateinfo  [summary]  [all  |  available  |  installed  |\n          updates]\n\n          which  all display information about the available update infor\u2010\n          mation relevant to your machine (including  anything  installed,\n          if you supply \"all\").\n\n        *  all  Is  used to display information about both install and\n          available advisories.\n           * available Is used to display information about just available\n          advisories. This is the default.\n        *  installed Is used to display information about just install\n          advisories.\n           * updates This is mostly the same as \"available\"  but  it  only\n          shows advisory information for packages that can be updated to.\n\n\n          They all take as arguments:\n\n        *  <advisory>  [advisory...]   Is  used to display information\n          about one or more advisories.\n\n           * <package> [package...]  Is used to display information  about\n          one or more packages.\n\n        * bugzillas / bzs Is the subset of the updateinfo information,\n          pertaining to the bugzillas.\n\n           * cves Is the subset of the updateinfo information,  pertaining\n          to the CVEs.\n\n           * enhancement Is the subset of the updateinfo information, per\u2010\n          taining to enhancements.\n\n           * bugfix Is the subset of the updateinfo information,  pertain\u2010\n          ing to bugfixes.\n\n        *  security / sec Is the subset of the updateinfo information,\n          pertaining to security.\n\n           * severity / sev Include security  relevant  packages  of  this\n          severity.\n\n           * recommended Is the subset of the updateinfo information, per\u2010\n          taining to recommended updates.\n\n           * new-packages Is the subset  of  the  updateinfo  information,\n          pertaining  to  new  packages.  These are packages which weren't\n          available at the initial release of your distribution.\n\n          There are also three sub-commands to remove packages when  using\n          \"yum shell\", they are:\n\n           yum updateinfo remove-pkgs-ts\n\n           yum updateinfo exclude-updates\n\n           yum updateinfo exclude-all\n\n          they all take the following arguments:\n\n          *  [bzs=foo] [advisories=foo] [cves=foo] [security-severity=foo]\n          [security] [bugfix]\n\n          and finally there is a command to  manually  check  the  running\n          kernel against updateinfo data:\n\n           yum updateinfo check-running-kernel\n\n\n       fssnapshot\n          This  command  has  a few sub-commands to act on the LVM data of\n          the host, to list snapshots and the create and remove them.  The\n          simplest  commands,  to display information about the configured\n          LVM snapshotable devices, are:\n\n           yum fssnapshot [summary]\n           yum fssnapshot list\n           yum fssnapshot have-space\n\n          then you can create and delete snapshots using:\n\n           yum fssnap create\n           yum fssnap delete <device(s)>\n\n          Configuration   Options:   fssnap_automatic_pre,    fssnap_auto\u2010\n          matic_post,   fssnap_automatic_keep,   fssnap_percentage,   fss\u2010\n          nap_devices\n\n\n       fs     This command has a few sub-commands to  act  on  the  filesystem\n          data  of  the  host, mainly for removing languages/documentation\n          for minimal installs:\n\n           yum fs filters\n\n           yum fs filter languages en:es\n\n           yum fs filter documentation\n\n           yum fs refilter [package(s)]\n\n           yum fs refilter-cleanup [package(s)]\n\n           yum fs du [path]\n\n           yum fs status [path]\n\n           yum fs diff [path]\n\n\n          the first 3 being a simple interface to change yum.conf altering\n          the   tsflags  and  override_install_langs  configurations.  The\n          refilter command is an optimized way of calling \"yum  reinstall\"\n          to  reinstall  the  packages  with  the new filters applied. The\n          refilter-cleanup command is needed because rpm doesn't  actually\n          remove  the  files  on  reinstall, as it should. And the du/sta\u2010\n          tus/diff commands are included so you can easily see  the  space\n          used/saved and any other changes.\n\n\n       check  Checks  the local rpmdb and produces information on any problems\n          it finds. You can pass the check command the  arguments  \"depen\u2010\n          dencies\",  \"duplicates\", \"obsoletes\" or \"provides\", to limit the\n          checking that is performed (the  default  is  \"all\"  which  does\n          all).\n\n          The info command can also take ranges of transaction ids, of the\n          form start..end, which will then display a merged history as  if\n          all the transactions in the range had happened at once.\n          Eg.  \"history  info 1..4\" will merge the first four transactions\n          and display them as a single transaction.\n\n       help   Produces help, either for all commands or  if  given  a  command\n          name then the help for that particular command.\n\nGENERAL OPTIONS\n       Most  command  line  options can be set using the configuration file as\n       well and the descriptions indicate the necessary  configuration  option\n       to set.\n\n       -h, --help\n          Help; display a help message and then quit.\n\n       -y, --assumeyes\n          Assume  yes;  assume that the answer to any question which would\n          be asked is yes.\n          Configuration Option: assumeyes\n\n       --assumeno\n          Assume no; assume that the answer to any question which would be\n          asked  is no. This option overrides assumeyes, but is still sub\u2010\n          ject to alwaysprompt.\n          Configuration Option: assumeno\n\n       -c, --config=[config file]\n          Specifies the config file location - can take HTTP and FTP  URLs\n          and local file paths.\n\n       -q, --quiet\n          Run without output.  Note that you likely also want to use -y.\n\n       -v, --verbose\n          Run with a lot of debugging output.\n\n       -d, --debuglevel=[number]\n          Sets  the  debugging  level  to  [number] - turns up or down the\n          amount of things that are printed. Practical range: 0 - 10\n          Configuration Option: debuglevel\n\n       -e, --errorlevel=[number]\n          Sets the error level to [number] Practical range 0 - 10. 0 means\n          print only critical errors about which you must be told. 1 means\n          print all errors, even ones that are not  overly  important.  1+\n          means print more errors (if any) -e 0 is good for cron jobs.\n          Configuration Option: errorlevel\n\n       --rpmverbosity=[name]\n          Sets the debug level to [name] for rpm scriptlets. 'info' is the\n          default, other options are:  'critical',  'emergency',  'error',\n          'warn' and 'debug'.\n          Configuration Option: rpmverbosity\n\n       -R, --randomwait=[time in minutes]\n          Sets  the maximum amount of time yum will wait before performing\n          a command - it randomizes over the time.\n\n       -C, --cacheonly\n          Tells yum to run entirely from system cache - does not  download\n          or  update any headers unless it has to to perform the requested\n          action.\n\n       --version\n          Reports the yum version number and  installed  package  versions\n          for  everything  in  history_record_packages (can be added to by\n          plugins).\n\n       --showduplicates\n          Doesn't limit packages to their latest  versions  in  the  info,\n          list and search commands (will also affect plugins which use the\n          doPackageLists() API).\n\n       --installroot=root\n          Specifies an alternative  installroot,  relative  to  which  all\n          packages  will  be  installed.  Think of this like doing \"chroot\n          <root> yum\" except using --installroot allows yum to work before\n          the  chroot  is  created.   Note:  You  may also want to use the\n          option --releasever=/ when creating the installroot as otherwise\n          the  $releasever  value  is  taken  from  the  rpmdb  within the\n          installroot (and thus. will be empty, before creation).\n          Configuration Option: installroot\n\n       --enablerepo=repoidglob\n          Enables specific repositories by id or glob that have been  dis\u2010\n          abled in the configuration file using the enabled=0 option.\n          Configuration Option: enabled\n\n       --disablerepo=repoidglob\n          Disables specific repositories by id or glob.\n          Configuration Option: enabled\n\n       --obsoletes\n          This  option  only  has  affect  for an update, it enables yum\u00b4s\n          obsoletes processing logic. For more information see the  update\n          command above.\n          Configuration Option: obsoletes\n\n       -x, --exclude=package\n          Exclude  a  specific  package by name or glob from all reposito\u2010\n          ries, so yum works as if that package was never in the reposito\u2010\n          ries.   This  is  commonly  used  so a package isn't upgraded or\n          installed accidentally, but can be used to  remove  packages  in\n          any way that \"yum list\" will show packages.\n\n          Can  be disabled using --disableexcludes.  Configuration Option:\n          exclude, includepkgs\n\n       --color=[always|auto|never]\n          Display colorized output automatically, depending on the  output\n          terminal,  always  (using  ANSI  codes) or never. Note that some\n          commands (Eg. list and info) will do a little  extra  work  when\n          color is enabled.  Configuration Option: color\n\n       --disableexcludes=[all|main|repoid]\n          Disable  the excludes defined in your config files. Takes one of\n          three options:\n          all == disable all excludes\n          main == disable excludes defined in [main] in yum.conf\n          repoid == disable excludes defined for that repo\n\n       --disableincludes=[all|repoid]\n          Disable the includes defined in your config files. Takes one  of\n          two options:\n          all == disable all includes\n          repoid == disable includes defined for that repo\n\n       --disableplugin=plugin\n          Run  with  one or more plugins disabled, the argument is a comma\n          separated list of wildcards to match against plugin names.\n\n       --noplugins\n          Run with all plugins disabled.\n          Configuration Option: plugins\n\n       --nogpgcheck\n          Run with GPG signature checking disabled.\n          Configuration Option: gpgcheck\n\n       --skip-broken\n          Resolve depsolve problems by removing packages that are  causing\n          problems from the transaction.\n          Configuration Option: skip_broken\n\n       --releasever=version\n          Pretend the current release version is the given string. This is\n          very useful when combined with --installroot. You can  also  use\n          --releasever=/  to  take the releasever information from outside\n          the installroot.  Note that with the default upstream  cachedir,\n          of  /var/cache/yum,  using  this  option will corrupt your cache\n          (and you can use $releasever in your cachedir  configuration  to\n          stop this).\n\n       -t, --tolerant\n          This  option  makes  yum  go  slower,  checking  for things that\n          shouldn't be  possible  making  it  more  tolerant  of  external\n          errors.\n\n       --downloadonly\n          Don't  update, just download. This is done in the background, so\n          the yum lock is released for other operations. This can also  be\n          chosen  by typing 'd'ownloadonly at the transaction confirmation\n          prompt.\n\n       --downloaddir=directory\n          Specifies an alternate directory to store packages.\n\n       --setopt=option=value\n          Set any config option in yum config or repo files.  For  options\n          in  the  global  config just use: --setopt=option=value for repo\n          options use: --setopt=repoid.option=value\n\nLIST OPTIONS\n       The following are the ways which you can invoke yum in list mode.  Note\n       that  all list commands include information on the version of the pack\u2010\n       age.\n\n       OUTPUT\n\n\n          The format of the output of yum list is:\n\n          name.arch [epoch:]version-release  repo or @installed-from-repo\n\n\n       yum list [all | glob_exp1] [glob_exp2] [...]\n          List all available and installed packages.\n\n       yum list available [glob_exp1] [...]\n          List all packages  in  the  yum  repositories  available  to  be\n          installed.\n\n       yum list updates [glob_exp1] [...]\n          List  all  packages  with updates available in the yum reposito\u2010\n          ries.\n\n       yum list installed [glob_exp1] [...]\n          List the packages specified by args.  If an  argument  does  not\n          match  the  name  of an available package, it is assumed to be a\n          shell-style glob and any matches are printed.\n\n       yum list extras [glob_exp1] [...]\n          List the packages installed on the system that are not available\n          in any yum repository listed in the config file.\n\n       yum list distro-extras [glob_exp1] [...]\n          List  the  packages  installed on the system that are not avail\u2010\n          able, by name, in any yum repository listed in the config file.\n\n       yum list obsoletes [glob_exp1] [...]\n          List the packages installed on the system that are obsoleted  by\n          packages in any yum repository listed in the config file.\n\n       yum list recent\n          List  packages  recently  added  into  the repositories. This is\n          often not helpful, but what you may really want to use  is  \"yum\n          list-updateinfo new\" from the security yum plugin.\n\nSPECIFYING PACKAGE NAMES\n       A  package  can  be referred to for install, update, remove, list, info\n       etc with any of the following as well as globs of any of the following:\n\n          name\n          name.arch\n          name-ver\n          name-ver-rel\n          name-ver-rel.arch\n          name-epoch:ver-rel.arch\n          epoch:name-ver-rel.arch\n\n          For example: yum remove kernel-2.4.1-10.i686\n           this will remove this specific kernel-ver-rel.arch.\n\n          Or:      yum list available 'foo*'\n           will list all available packages that  match  'foo*'.  (The\n          single quotes will keep your shell from expanding the globs.)\n\nCLEAN OPTIONS\n       The following are the ways which you can invoke yum in clean mode. Note\n       that \"all files\" in the commands below means \"all  files  in  currently\n       enabled  repositories\".   If  you  want to also clean any (temporarily)\n       disabled repositories you need to use --enablerepo='*' option.\n\n\n       yum clean expire-cache\n          Eliminate the local data  saying  when  the  metadata  and  mir\u2010\n          rorlists  were  downloaded  for  each  repo. This means yum will\n          revalidate the cache for each repo. next time it is  used.  How\u2010\n          ever  if  the  cache  is  still  valid,  nothing significant was\n          deleted.\n\n\n       yum clean packages\n          Eliminate any cached packages from the system.  Note that  pack\u2010\n          ages are not automatically deleted after they are downloaded.\n\n\n       yum clean headers\n          Eliminate  all  of  the  header files, which old versions of yum\n          used for dependency resolution.\n\n\n       yum clean metadata\n          Eliminate all of the files  which  yum  uses  to  determine  the\n          remote  availability  of  packages. Using this option will force\n          yum to download all the metadata the next time it is run.\n\n\n       yum clean dbcache\n          Eliminate the sqlite cache used for faster access  to  metadata.\n          Using this option will force yum to download the sqlite metadata\n          the next time it is run, or  recreate  the  sqlite  metadata  if\n          using an older repo.\n\n\n       yum clean rpmdb\n          Eliminate any cached data from the local rpmdb.\n\n\n       yum clean plugins\n          Tell any enabled plugins to eliminate their cached data.\n\n\n       yum clean all\n          Does all of the above.\n\n\nPLUGINS\n       Yum  can  be  extended through the use of plugins. A plugin is a Python\n       \".py\" file which is installed in one of the  directories  specified  by\n       the  pluginpath option in yum.conf. For a plugin to work, the following\n       conditions must be met:\n\n       1. The plugin module file must be installed in the plugin path as  just\n       described.\n\n       2. The global plugins option in /etc/yum.conf must be set to `1'.\n\n       3.  A  configuration file for the plugin must exist in /etc/yum/plugin\u2010\n       conf.d/<plugin_name>.conf and the enabled setting in this file must set\n       to `1'. The minimal content for such a configuration file is:\n\n          [main]\n          enabled = 1\n\n       See  the  yum.conf(5)  man  page for more information on plugin related\n       configuration options.\n\n\nFILES\n       /etc/yum.conf\n       /etc/yum/version-groups.conf\n       /etc/yum.repos.d/\n       /etc/yum/pluginconf.d/\n       /var/cache/yum/\n\n\nSEE ALSO\n       pkcon (1)\n       yum.conf (5)\n       yum-updatesd (8)\n       package-cleanup (1)\n       repoquery (1)\n       yum-complete-transaction (1)\n       yumdownloader (1)\n       yum-utils (1)\n       yum-langpacks (1)\n       http://yum.baseurl.org/\n       http://yum.baseurl.org/wiki/Faq\n       yum search yum\n\n\nAUTHORS\n       See the Authors file included with this program.\n\n\nBUGS\n       There of course aren't any bugs, but if you find any, you should  first\n       consult  the  FAQ  mentioned  above  and  then  email the mailing list:\n       yum@lists.baseurl.org or filed in bugzilla.\n\n\n\nSeth Vidal                              yum(8)\n\n\n```man:yum(8)\n\nNAME\n       yum - Yellowdog Updater Modified\n\nSYNOPSIS\n       yum [options] [command] [package ...]\n\nDESCRIPTION\n       yum is an interactive, rpm based, package manager. It can automatically\n       perform system updates, including dependency analysis and obsolete pro\u2010\n       cessing\tbased  on \"repository\" metadata. It can also perform installa\u2010\n       tion of new packages, removal of old packages and  perform  queries  on\n       the  installed and/or available packages among many other commands/ser\u2010\n       vices (see below). yum is similar to other high level package  managers\n       like apt-get and smart.\n\n       While  there  are  some\tgraphical interfaces directly to the yum code,\n       more recent graphical interface development  is\thappening  with\t Pack\u2010\n       ageKit and the gnome-packagekit application.\n\n       command is one of:\n\t* install package1 [package2] [...]\n\t* update [package1] [package2] [...]\n\t* update-to [package1] [package2] [...]\n\t* update-minimal [package1] [package2] [...]\n\t* check-update\n\t* upgrade [package1] [package2] [...]\n\t* upgrade-to [package1] [package2] [...]\n\t* distribution-synchronization [package1] [package2] [...]\n\t* remove | erase package1 [package2] [...]\n\t* autoremove [package1] [...]\n\t* list [...]\n\t* info [...]\n\t* provides | whatprovides feature1 [feature2] [...]\n\t* clean [ packages | metadata | expire-cache | rpmdb | plugins | all ]\n\t* makecache [fast]\n\t* groups [...]\n\t* search string1 [string2] [...]\n\t* shell [filename]\n\t* resolvedep dep1 [dep2] [...]\n\t   (maintained\tfor  legacy  reasons  only - use repoquery or yum pro\u2010\n       vides)\n\t* localinstall rpmfile1 [rpmfile2] [...]\n\t   (maintained for legacy reasons only - use install)\n\t* localupdate rpmfile1 [rpmfile2] [...]\n\t   (maintained for legacy reasons only - use update)\n\t* reinstall package1 [package2] [...]\n\t* downgrade package1 [package2] [...]\n\t* deplist package1 [package2] [...]\n\t* repolist [all|enabled|disabled]\n\t* repoinfo [all|enabled|disabled]\n\t* repository-packages <enabled-repoid> <install|remove|remove-or-rein\u2010\n       stall|remove-or-distribution-synchronization> [package2] [...]\n\t * version [ all | installed | available | group-* | nogroups* | grou\u2010\n       plist | groupinfo ]\n\t  *   history\t [info|list|packages-list|packages-info|summary|addon-\n       info|redo|undo|rollback|new|sync|stats]\n\t* load-transaction [txfile]\n\t* updateinfo [summary | list | info | remove-pkgs-ts | exclude-updates\n       | exclude-all | check-running-kernel]\n\t* fssnapshot [summary | list | have-space | create | delete]\n\t* fs [filters | refilter | refilter-cleanup | du]\n\t* check\n\t* help [command]\n\n       Unless the --help or -h option is given, one of the above commands must\n       be present.\n\n       Repository configuration is honored in all operations.\n\n       install\n\t      Is  used\tto install the latest version of a package or group of\n\t      packages while ensuring that  all\t dependencies  are  satisfied.\n\t      (See  Specifying package names for more information) If no pack\u2010\n\t      age matches the given package name(s), they are assumed to be  a\n\t      shell  glob  and\tany  matches  are  then installed. If the name\n\t      starts with @^ then it is treated as an environment group (group\n\t      install  @^foo),\tan  @  character  and  it's treated as a group\n\t      (plain group install).\n\n\t      If the name starts with a \"-\" character, then a search  is  done\n\t      within  the  transaction\tand any matches are removed. Note that\n\t      Yum options use the same syntax and it may be necessary  to  use\n\t      \"--\" to resolve any possible conflicts.\n\n\t      If  the name is a file, then install works like localinstall. If\n\t      the name doesn't match a package, then  package  \"provides\"  are\n\t      searched (e.g. \"_sqlitecache.so()(64bit)\") as are filelists (Eg.\n\t      \"/usr/bin/yum\"). Also note that for  filelists,  wildcards  will\n\t      match multiple packages.\n\n\t      Because  install does a lot of work to make it as easy as possi\u2010\n\t      ble to use, there are  also  a  few  specific  install  commands\n\t      \"install-n\",  \"install-na\"  and \"install-nevra\". These only work\n\t      on package names, and do not process wildcards etc.\n\n       update If run without any packages, update will update every  currently\n\t      installed package.  If one or more packages or package globs are\n\t      specified, Yum will only\tupdate\tthe  listed  packages.\t While\n\t      updating\tpackages,  yum\twill  ensure that all dependencies are\n\t      satisfied. (See Specifying package names for  more  information)\n\t      If  the  packages or globs specified match to packages which are\n\t      not currently installed  then  update  will  not\tinstall\t them.\n\t      update  operates\ton  groups, files, provides and filelists just\n\t      like the \"install\" command.\n\n\t      If the main obsoletes configure option is true (default) or  the\n\t      --obsoletes  flag\t is present yum will include package obsoletes\n\t      in its calculations - this makes it  better  for\tdistro-version\n\t      changes,\tfor example: upgrading from somelinux 8.0 to somelinux\n\t      9.\n\n\t      Note that \"update\" works on installed packages first,  and  only\n\t      if there are no matches does it look for available packages. The\n\t      difference is most noticeable when you do \"update foo-1-2\" which\n\t      will  act\t exactly  as \"update foo\" if foo-1-2 is installed. You\n\t      can use the \"update-to\" if you'd prefer that nothing  happen  in\n\t      the above case.\n\n       update-to\n\t      This  command  works like \"update\" but always specifies the ver\u2010\n\t      sion of the package we want to update to.\n\n       update-minimal\n\t      This works like the update command, but if you have the  package\n\t      foo-1  installed and have foo-2 (bugfix) and foo-3 (enhancement)\n\t      available with updateinfo.xml then update-minimal --bugfix  will\n\t      update you to foo-2.\n\n       check-update\n\t      Implemented  so  you  could know if your machine had any updates\n\t      that needed to be\t applied  without  running  it\tinteractively.\n\t      Returns exit value of 100 if there are packages available for an\n\t      update. Also returns a list of the packages  to  be  updated  in\n\t      list  format. Returns 0 if no packages are available for update.\n\t      Returns 1 if an error occurred.  Running in  verbose  mode  also\n\t      shows obsoletes.\n\n       upgrade\n\t      Is the same as the update command with the --obsoletes flag set.\n\t      See update for more details.\n\n       upgrade-to\n\t      This command works like \"upgrade\" but always specifies the  ver\u2010\n\t      sion of the package we want to update to.\n\n       distribution-synchronization or distro-sync\n\t      Synchronizes  the installed package set with the latest packages\n\t      available, this is done by either obsoleting, upgrading or down\u2010\n\t      grading  as  appropriate. This will \"normally\" do the same thing\n\t      as the upgrade command however  if  you  have  the  package  FOO\n\t      installed at version 4, and the latest available is only version\n\t      3, then this command will downgrade FOO to version 3.\n\n\t      If you give the optional argument \"full\", then the command  will\n\t      also  reinstall  packages\t where\tthe  install  checksum and the\n\t      available checksum do not match. And remove old packages (can be\n\t      used to sync. rpmdb versions). The optional argument \"different\"\n\t      can be used to specify the default operation.\n\n\t      This command does not perform operations on groups, local\t pack\u2010\n\t      ages or negative selections.\n\n       remove or erase\n\t      Are  used\t to  remove  the specified packages from the system as\n\t      well as removing any packages which depend on the package\t being\n\t      removed.\t remove\t  operates  on\tgroups,\t files,\t provides  and\n\t      filelists just like the \"install\" command.(See Specifying\t pack\u2010\n\t      age names for more information)\n\n\t      Note that \"yum\" is included in the protected_packages configura\u2010\n\t      tion, by default.\t So you can't accidentally remove yum itself.\n\n\t      The remove_leaf_only configuration changes the behaviour of this\n\t      command  to  only remove packages which aren't required by some\u2010\n\t      thing else.\n\n\t      The clean_requirements_on_remove configuration changes  the  be\u2010\n\t      haviour  of  this\t command to also remove packages that are only\n\t      dependencies of this package.\n\n\t      Because remove does a lot of work to make it as easy as possible\n\t      to  use,\tthere are also a few specific remove commands \"remove-\n\t      n\", \"remove-na\" and \"remove-nevra\". These only work  on  package\n\t      names, and do not process wildcards etc.\n\n       autoremove\n\n\t      With  one\t or more arguments this command works like running the\n\t      \"remove\" command with  the  clean_requirements_on_remove\tturned\n\t      on. However you can also specify no arguments, at which point it\n\t      tries to remove any packages that weren't\t installed  explicitly\n\t      by  the  user  and  which aren't required by anything (so called\n\t      leaf packages).\n\n\t      Because autoremove does a lot of work to make it as easy as pos\u2010\n\t      sible  to use, there are also a few specific autoremove commands\n\t      \"autoremove-n\", \"autoremove-na\"  and  \"autoremove-nevra\".\t These\n\t      only work on package names, and do not process wildcards etc.\n\n       list   Is  used\tto  list various information about available packages;\n\t      more complete details are available in the List Options  section\n\t      below.\n\n       provides or whatprovides\n\t      Is used to find out which package provides some feature or file.\n\t      Just use a specific name or a file-glob-syntax wildcards to list\n\t      the packages available or installed that provide that feature or\n\t      file.\n\n       search This is used to find packages when you know something about  the\n\t      package but aren't sure of it's name. By default search will try\n\t      searching just package names and summaries, but if that  \"fails\"\n\t      it will then try descriptions and url.\n\n\t      Yum  search  orders  the results so that those packages matching\n\t      more terms will appear first.\n\n\t      You can force searching everything by specifying\t\"all\"  as  the\n\t      first argument.\n\n       info   Is  used\tto  list  a  description and summary information about\n\t      available packages; takes the same  arguments  as\t in  the  List\n\t      Options section below.\n\n       clean  Is  used\tto clean up various things which accumulate in the yum\n\t      cache directory over time.  More complete details can  be\t found\n\t      in the Clean Options section below.\n\n       makecache\n\t      Is  used\tto  download  and make usable all the metadata for the\n\t      currently enabled yum repos. If the argument \"fast\"  is  passed,\n\t      then  we just try to make sure the repos. are current (much like\n\t      \"yum clean expire-cache\").\n\n       groups A command, new in 3.4.2, that collects all the subcommands  that\n\t      act on groups together. Note that recent yum using distributions\n\t      (Fedora-19+,  RHEL-7+)  have  configured\t group_command=objects\n\t      which changes how group commands act in some important ways.\n\n\t      \"group  install\"\tis used to install all of the individual pack\u2010\n\t      ages in a group, of the specified types (this works as if\t you'd\n\t      taken  each  of  those package names and put them on the command\n\t      line for a \"yum install\" command).\n\t       The group_package_types configuration  option  specifies\t which\n\t      types will be installed.\n\t       If  you\twish  to \"reinstall\" a group so that you get a package\n\t      that is currently blacklisted the easiest way to\tdo  that  cur\u2010\n\t      rently  is  to install the package manually and then run \"groups\n\t      mark packages-sync mygroup mypackagename\" (or use yumdb  to  set\n\t      the group_member of the package(s)).\n\n\t      \"group  update\"  is  just an alias for group install, when using\n\t      group_command=compat. This will install packages\tin  the\t group\n\t      not  already  installed  and  upgrade  existing  packages.  With\n\t      group_command=simple it  will  just  upgrade  already  installed\n\t      packages.\t With group_command=objects it will try to upgrade the\n\t      group object, installing any available packages not  blacklisted\n\t      (marked  '-' in group info) and will upgrade the installed pack\u2010\n\t      ages.\n\n\t      \"group list\" is used to list the available groups from  all  yum\n\t      repos.  When group_command=objects the group is installed if the\n\t      user explicitly installed it (or used the group  mark*  commands\n\t      to  mark\tit  installed).\t It does not need to have any packages\n\t      installed.  When\tnot  using  group_command=objects  groups  are\n\t      shown as \"installed\" if all mandatory packages are installed, or\n\t      if a group doesn't  have\tany  mandatory\tpackages  then\tit  is\n\t      installed\t if  any  of  the  optional  or\t default  package  are\n\t      installed (when not in  group_command=objects  mode).   You  can\n\t      pass optional arguments to the list/summary commands: installed,\n\t      available, environment, language, packages, hidden and  ids  (or\n\t      any  of  those prefixed by \"no\" to turn them off again).\tIf you\n\t      pass the -v option, to enable verbose mode,  then\t the  groupids\n\t      are displayed by default (but \"yum group list ids\" is often eas\u2010\n\t      ier to read).\n\n\t      \"group remove\" is used to remove all of the packages in a group,\n\t      unlike  \"groupinstall\" this will remove everything regardless of\n\t      group_package_types. It is worth pointing out that packages  can\n\t      be  in  more  than one group, so \"group install X Y\" followed by\n\t      \"group remove Y\" does not do give you the same result as\t\"group\n\t      install X\".\n\n\t      The groupremove_leaf_only configuration changes the behaviour of\n\t      this command to only remove packages which  aren't  required  by\n\t      something else.\n\n\t      \"group info\" is used to give the description and package list of\n\t      a group (and which type those packages are marked as). Note that\n\t      you  can\tuse  the  yum-filter-data and yum-list-data plugins to\n\t      get/use the data the other way  around  (i.e.  what  groups  own\n\t      packages\tneed  updating).  If you pass the -v option, to enable\n\t      verbose  mode,  then  the\t package  names\t are  matched  against\n\t      installed/available packages similar to the list command.\n\n\t      When  using group_command=objects, the info command will display\n\t      markers next to each package saying how that package relates  to\n\t      the group object. The meaning of these markers is:\n\n\t      \"-\" = Package isn't installed, and won't be installed as part of\n\t      the group (Eg.  \"yum group install  foo  -pkgA\"  or  \"yum\t group\n\t      install  foo;  yum  remove pkgA\" \u2026 this will have pkgA marked as\n\t      '-')\n\t      \"+\" = Package isn't installed, but will be the next time you run\n\t      \"yum upgrade\" or \"yum group upgrade foo\"\n\t      \"\t \"  = Package is installed, but wasn't installed via the group\n\t      (so \"group remove foo\" won't remove it).\n\t      \"=\" = Package is installed, and was installed via the group.\n\n\t      you can move an installed package into an installed group\t using\n\t      either  \"group  mark package-sync/package-sync-forced\" or \"yumdb\n\t      set group_member\".\n\n\t      \"group summary\" is used to give a\t quick\tsummary\t of  how  many\n\t      groups are installed and available.\n\n\t      \"group mark\" and \"group unmark\" are used when groups are config\u2010\n\t      ured in group_command=objects mode. These\t commands  then\t allow\n\t      you  to  alter yum's idea of which groups are installed, and the\n\t      packages that belong to them.\n\n\t      \"group mark install\" mark the group as installed. When installed\n\t      \"yum  upgrade\" and \"yum group upgrade\" will install new packages\n\t      for the group (only those packages  already  installed  will  be\n\t      marked as members of the installed group to start with).\n\n\t      \"group mark remove\" the opposite of mark install.\n\n\t      \"group mark packages\" takes a group id (which must be installed)\n\t      and marks any given installed packages (which aren't members  of\n\t      a\t group)\t as  members of the group. Note that the data from the\n\t      repositories does not need to specify the packages as  a\tmember\n\t      of the group.\n\n\t      \"group  mark  packages-force\"  works  like  mark\tpackages,  but\n\t      doesn't care if the packages  are\t already  members  of  another\n\t      group.\n\n\t      \"group  mark blacklist\" will blacklist all packages marked to be\n\t      installed for a group. After this command a \"yum group  upgrade\"\n\t      will not install any new packages as part of the group.\n\n\t      \"group mark convert-blacklist\"\n\n\t      \"group mark convert-whitelist\"\n\n\t      \"group mark convert\" converts the automatic data you get without\n\t      using groups as objects into groups as objects  data,  in\t other\n\t      words  this will make \"yum --setopt=group_command=objects groups\n\t      list\" look as similar as possible to the current output of  \"yum\n\t      --setopt=group_command=simple  groups  list\". This makes it much\n\t      easier to convert to groups as objects without having  to\t rein\u2010\n\t      stall.  For groups that are installed the whitelist variant will\n\t      mark all uninstalled packages for the group as to\t be  installed\n\t      on  the next \"yum group upgrade\", the blacklist variant (current\n\t      default) will mark them all as blacklisted.\n\n\t      \"group unmark packages\" remove a package as a  member  from  any\n\t      groups.\n\n       shell  Is  used\tto enter the 'yum shell', when a filename is specified\n\t      the contents of that file is executed in\tyum  shell  mode.  See\n\t      yum-shell(8) for more info.\n\n       resolvedep\n\t      Is  used\tto list packages providing the specified dependencies,\n\t      at most one package is listed per dependency.  This  command  is\n\t      maintained for legacy reasons only, use repoquery instead.\n\n       localinstall\n\t      Is  used\tto  install  a set of local rpm files. If required the\n\t      enabled repositories will be used to resolve dependencies.  Note\n\t      that  the\t install  command  will do a local install, if given a\n\t      filename. This command is maintained for legacy reasons only.\n\n       localupdate\n\t      Is used to update the system by specifying local rpm files. Only\n\t      the  specified  rpm  files  of which an older version is already\n\t      installed will be installed, the\tremaining  specified  packages\n\t      will  be\tignored.  If required the enabled repositories will be\n\t      used to resolve dependencies. Note that the update command  will\n\t      do  a  local  update, if given a filename. This command is main\u2010\n\t      tained for legacy reasons only.\n\n       reinstall\n\t      Will reinstall the identically versioned package as is currently\n\t      installed.   This does not work for \"installonly\" packages, like\n\t      Kernels. reinstall  operates  on\tgroups,\t files,\t provides  and\n\t      filelists just like the \"install\" command.\n\n       downgrade\n\t      Will  try\t and  downgrade\t a  package from the version currently\n\t      installed to the previously highest version  (or\tthe  specified\n\t      version).\t  The  depsolver will not necessarily work, but if you\n\t      specify all the packages it should work (thus,  all  the\tsimple\n\t      cases  will  work).  Also\t this  does not work for \"installonly\"\n\t      packages, like Kernels. downgrade\t operates  on  groups,\tfiles,\n\t      provides,\t filelists  and rpm files just like the \"install\" com\u2010\n\t      mand.\n\n       swap   At it's simplest this is just a simpler way to remove one set of\n\t      package(s)  and install another set of package(s) without having\n\t      to use the \"shell\" command.  However you can  specify  different\n\t      commands\tto  call than just remove or install, and you can list\n\t      multiple packages (it splits using the \"--\" marker).  Note  that\n\t      option parsing will remove the first \"--\" in an argument list on\n\t      the command line.\n\n\n\t      Examples:\n\n\t      swap foo bar\n\t      swap -- remove foo -- install bar\n\t      swap foo group install bar-grp\n\t      swap -- group remove foo-grp -- group install bar-grp\n\n       deplist\n\t      Produces a list of all dependencies and  what  packages  provide\n\t      those  dependencies  for the given packages. As of 3.2.30 it now\n\t      just shows the latest version of each package that matches (this\n\t      can  be changed by using --showduplicates) and it only shows the\n\t      newest providers (which can be changed by using --verbose).\n\n       repolist\n\t      Produces a list of configured repositories. The  default\tis  to\n\t      list all enabled repositories. If you pass -v, for verbose mode,\n\t      or use repoinfo then more information is listed.\tIf  the\t first\n\t      argument is \u00b4enabled\u00b4, \u00b4disabled\u00b4 or \u00b4all\u00b4 then the command will\n\t      list those types of repos.\n\n\t      You can pass repo id or name arguments, or  wildcards  which  to\n\t      match  against  both of those. However if the id or name matches\n\t      exactly then the repo will be listed even\t if  you  are  listing\n\t      enabled repos. and it is disabled.\n\n\t      In  non-verbose  mode  the first column will start with a \u00b4*\u00b4 if\n\t      the repo. has metalink data and the latest metadata is not local\n\t      and  will\t start\twith  a\t \u00b4!\u00b4 if the repo. has metadata that is\n\t      expired. For non-verbose mode the last column will also  display\n\t      the  number  of packages in the repo. and (if there are any user\n\t      specified excludes) the number of packages excluded.\n\n\t      One last special feature of repolist, is that if you are in non-\n\t      verbose mode then yum will ignore any repo errors and output the\n\t      information it can get (Eg. \"yum clean  all;  yum\t -C  repolist\"\n\t      will  output something, although the package counts/etc. will be\n\t      zeroed out).\n\n       repoinfo\n\n\t      This command works exactly like repolist -v.\n\n       repository-packages\n\t      Treat a repo. as a collection of packages\t (like\t\"yum  groups\")\n\t      allowing the user to install or remove them as a single entity.\n\n\t      \"repository-packages  <repo>  list\"  - Works like the \"yum list\"\n\t      command, but only shows packages from the given repository.\n\n\t      \"repository-packages <repo> info\" - Works like  the  \"yum\t info\"\n\t      command, but only shows packages from the given repository.\n\n\t      \"repository-packages  <repo> check-update\" - Works like the \"yum\n\t      check-update\" command, but only shows packages  from  the\t given\n\t      repository.\n\n\t      \"repository-packages  <repo> install\" - Install all of the pack\u2010\n\t      ages in the repository,  basically  the  same  as:  yum  install\n\t      $(repoquery  --repoid=<repo>  -a).   Specific packages/wildcards\n\t      can be specified.\n\n\t      \"repository-packages <repo> upgrade\" - Update all of  the\t pack\u2010\n\t      ages  in\tthe  repository,  basically  the  same as: yum upgrade\n\t      $(repoquery --repoid=<repo>  -a).\t  Specific  packages/wildcards\n\t      can be specified.\n\n\t      \"repository-packages  <repo>  upgrade-to\"\t -  Update  all of the\n\t      packages in the repository, basically the same as:  yum  upgrade\n\t      $(repoquery --repoid=<repo> -a).\tWithout arguments it works the\n\t      same as upgrade, with arguments it just interprets them  as  the\n\t      versions you want to move to.\n\n\t      \"repository-packages  <repo>  reinstall-old\"  - ReInstall all of\n\t      the packages that are installed from the repository  and\tavail\u2010\n\t      able  in\tthe  repository,  similar  to:\tyum  reinstall $(yumdb\n\t      search-quiet from_repo <repo>).\n\n\t      \"repository-packages <repo> move-to\"  -  ReInstall  all  of  the\n\t      packages\tthat  are  available  in the repository, basically the\n\t      same as: yum reinstall $(repoquery --repoid=<repo> -a).\n\n\t      \"repository-packages <repo> reinstall\" - Tries to do  reinstall-\n\t      old, but if that produces no packages then tries move-to.\n\n\t      \"repo-pkgs  <repo>  remove\"  - Remove all of the packages in the\n\t      repository,   very   similar   to:   yum\t remove\t   $(repoquery\n\t      --repoid=<repo> -a). However the repopkgsremove_leaf_only option\n\t      is obeyed.\n\n\t      \"repo-pkgs <repo> remove-or-reinstall\" - Works like  remove  for\n\t      any  package that doesn't have the exact same version in another\n\t      repository. For any package that does have the  exact  NEVRA  in\n\t      another repository then that version will be reinstalled.\n\n\t      \"repo-pkgs <repo> remove-or-distro-sync\" - Works like remove for\n\t      any package that doesn't exist in another\t repository.  For  any\n\t      package  that  does exist it tries to work as if distro-sync was\n\t      called (with the repo. disabled).\n\n\n       version\n\t      Produces a \"version\" of the rpmdb, and of the enabled  reposito\u2010\n\t      ries if \"all\" is given as the first argument. You can also spec\u2010\n\t      ify version groups in the version-groups configuration file.  If\n\t      you  pass\t -v, for verbose mode, more information is listed. The\n\t      version is calculated by taking an SHA1 hash of the packages (in\n\t      sorted  order), and the checksum_type/checksum_data entries from\n\t      the yumdb. Note that this rpmdb version is now also used signif\u2010\n\t      icantly within yum (esp. in yum history).\n\n\t      The version command will now show \"groups\" of packages as a sep\u2010\n\t      arate version, and so takes sub-commands:\n\n\t      \"version grouplist\" - List the defined version groups.\n\n\t      \"version groupinfo\" - Get the complete list of  packages\twithin\n\t      one or more version groups.\n\n\t      \"version installed\" - This is the default, only show the version\n\t      information for installed packages.\n\n\t      \"version available\" - Only  show\tthe  version  information  for\n\t      available packages.\n\n\t      \"version\tall\"  - Show the version information for installed and\n\t      available packages.\n\n\t      \"version nogroups | nogroups-*\" - Just  show  the\t main  version\n\t      information.\n\n\t      \"version\tgroup-*\"  - Just show the grouped version information,\n\t      if more arguments are given then only show the  data  for\t those\n\t      groups.\n\n\n       history\n\t      The history command allows the user to view what has happened in\n\t      past transactions (assuming the history_record config. option is\n\t      set).  You can use info/list/packages-list/packages-info/summary\n\t      to view what happened, undo/redo/rollback to act on that\tinfor\u2010\n\t      mation and new to start a new history file.\n\n\t      The info/list/summary commands take either a transaction id or a\n\t      package (with wildcards, as in Specifying\t package  names),  all\n\t      three  can  also\tbe passed no arguments. list can be passed the\n\t      keyword \"all\" to list all the transactions.\n\n\t      The packages-list/packages-info commands takes a package\t (with\n\t      wildcards,  as  in Specifying package names). And show data from\n\t      the point of view of that package.\n\n\t      The undo/redo/rollback commands take either a single transaction\n\t      id  or  the keyword last and an offset from the last transaction\n\t      (Eg. if you've done 250 transactions, \"last\" refers to  transac\u2010\n\t      tion  250,  and  \"last-4\"\t refers to transaction 246).  The redo\n\t      command can also take some optional arguments before you specify\n\t      the  transaction. \"force-reinstall\" tells it reinstall any pack\u2010\n\t      ages that were  installed\t in  that  transaction\t(via  install,\n\t      upgrade  or  downgrade).\t \"force-remove\"\t tells\tit to forcibly\n\t      remove any packages that were updated or downgraded.\n\n\t      The  undo/redo  commands\tact  on\t the  specified\t  transaction,\n\t      undo'ing\tor  repeating  the work of that transaction. While the\n\t      rollback command will undo all transactions up to the  point  of\n\t      the  specified  transaction. For example, if you have 3 transac\u2010\n\t      tions, where package A; B and C  where  installed\t respectively.\n\t      Then \"undo 1\" will try to remove package A, \"redo 1\" will try to\n\t      install package A (if it is not still installed), and  \"rollback\n\t      1\" will try to remove packages B and C. Note that after a \"roll\u2010\n\t      back 1\" you will have a fourth transaction, although the\tending\n\t      rpmdb  version (see: yum version) should be the same in transac\u2010\n\t      tions 1 and 4.\n\n\t      The addon-info command takes a transaction ID, and the packages-\n\t      list command takes a package (with wildcards).\n\n\t      The  stats  command shows some statistics about the current his\u2010\n\t      tory DB.\n\n\t      The sync commands allows you  to\tchange\tthe  rpmdb/yumdb  data\n\t      stored for any installed packages, to whatever is in the current\n\t      rpmdb/yumdb (this is mostly useful when this data was not stored\n\t      when the package went into the history DB).\n\n\t      In \"history list\" you can change the behaviour of the 2nd column\n\t      via the configuration option history_list_view.\n\n\t      In \"history list\" output the  Altered  column  also  gives  some\n\t      extra  information  if  there  was  something  not good with the\n\t      transaction (this is also shown at the end of the package column\n\t      in the packages-list command).\n\n\t      > - The rpmdb was changed, outside yum, after the transaction.\n\t      < - The rpmdb was changed, outside yum, before the transaction.\n\t      * - The transaction aborted before completion.\n\t      # - The transaction completed, but with a non-zero status.\n\t      E - The transaction completed fine, but had warning/error output\n\t      during the transaction.\n\t      P - The transaction completed fine, but problems already existed\n\t      in the rpmdb.\n\t      s\t -  The\t transaction  completed\t fine,\tbut  --skip-broken was\n\t      enabled and had to skip some packages.\n\n\n\n       load-transaction\n\t      This command will re-load a saved\t yum  transaction  file,  this\n\t      allows  you  to run a transaction on one machine and then use it\n\t      on another.  The two common ways to get a saved yum  transaction\n\t      file  are\t from \"yum -q history addon-info last saved_tx\" or via\n\t      the automatic saves in $TMPDIR/yum_save_tx.* when a  transaction\n\t      is solved but not run.\n\n\t      Running  the  command  without an argument, or a directory as an\n\t      argument will try and list the possible files available to load.\n\t      Showing  if  the\tpackages  are  still  available,  if the rpmdb\n\t      matches the current rpmdb, how many transaction  install/removes\n\t      members are in the saved transaction and what the filename is.\n\n\n       updateinfo\n\t      This  command  has a bunch of sub-commands to act on the update\u2010\n\t      info in the repositories. The simplest commands are:\n\n\t       yum updateinfo info [all | available | installed | updates]\n\t       yum updateinfo list [all | available | installed | updates]\n\t       yum  updateinfo\t[summary]  [all\t |  available  |  installed  |\n\t      updates]\n\n\t      which  all display information about the available update infor\u2010\n\t      mation relevant to your machine (including  anything  installed,\n\t      if you supply \"all\").\n\n\t\t*  all\tIs  used to display information about both install and\n\t      available advisories.\n\t       * available Is used to display information about just available\n\t      advisories. This is the default.\n\t\t*  installed Is used to display information about just install\n\t      advisories.\n\t       * updates This is mostly the same as \"available\"\t but  it  only\n\t      shows advisory information for packages that can be updated to.\n\n\n\t      They all take as arguments:\n\n\t\t*  <advisory>  [advisory...]   Is  used to display information\n\t      about one or more advisories.\n\n\t       * <package> [package...]\t Is used to display information\t about\n\t      one or more packages.\n\n\t\t* bugzillas / bzs Is the subset of the updateinfo information,\n\t      pertaining to the bugzillas.\n\n\t       * cves Is the subset of the updateinfo information,  pertaining\n\t      to the CVEs.\n\n\t       * enhancement Is the subset of the updateinfo information, per\u2010\n\t      taining to enhancements.\n\n\t       * bugfix Is the subset of the updateinfo information,  pertain\u2010\n\t      ing to bugfixes.\n\n\t\t*  security / sec Is the subset of the updateinfo information,\n\t      pertaining to security.\n\n\t       * severity / sev Include security  relevant  packages  of  this\n\t      severity.\n\n\t       * recommended Is the subset of the updateinfo information, per\u2010\n\t      taining to recommended updates.\n\n\t       * new-packages Is the subset  of\t the  updateinfo  information,\n\t      pertaining  to  new  packages.  These are packages which weren't\n\t      available at the initial release of your distribution.\n\n\t      There are also three sub-commands to remove packages when\t using\n\t      \"yum shell\", they are:\n\n\t       yum updateinfo remove-pkgs-ts\n\n\t       yum updateinfo exclude-updates\n\n\t       yum updateinfo exclude-all\n\n\t      they all take the following arguments:\n\n\t      *\t [bzs=foo] [advisories=foo] [cves=foo] [security-severity=foo]\n\t      [security] [bugfix]\n\n\t      and finally there is a command to\t manually  check  the  running\n\t      kernel against updateinfo data:\n\n\t       yum updateinfo check-running-kernel\n\n\n       fssnapshot\n\t      This  command  has  a few sub-commands to act on the LVM data of\n\t      the host, to list snapshots and the create and remove them.  The\n\t      simplest\tcommands,  to display information about the configured\n\t      LVM snapshotable devices, are:\n\n\t       yum fssnapshot [summary]\n\t       yum fssnapshot list\n\t       yum fssnapshot have-space\n\n\t      then you can create and delete snapshots using:\n\n\t       yum fssnap create\n\t       yum fssnap delete <device(s)>\n\n\t      Configuration   Options:\t fssnap_automatic_pre,\t  fssnap_auto\u2010\n\t      matic_post,   fssnap_automatic_keep,   fssnap_percentage,\t  fss\u2010\n\t      nap_devices\n\n\n       fs     This command has a few sub-commands to  act  on  the  filesystem\n\t      data  of\tthe  host, mainly for removing languages/documentation\n\t      for minimal installs:\n\n\t       yum fs filters\n\n\t       yum fs filter languages en:es\n\n\t       yum fs filter documentation\n\n\t       yum fs refilter [package(s)]\n\n\t       yum fs refilter-cleanup [package(s)]\n\n\t       yum fs du [path]\n\n\t       yum fs status [path]\n\n\t       yum fs diff [path]\n\n\n\t      the first 3 being a simple interface to change yum.conf altering\n\t      the   tsflags  and  override_install_langs  configurations.  The\n\t      refilter command is an optimized way of calling \"yum  reinstall\"\n\t      to  reinstall  the  packages  with  the new filters applied. The\n\t      refilter-cleanup command is needed because rpm doesn't  actually\n\t      remove  the  files  on  reinstall, as it should. And the du/sta\u2010\n\t      tus/diff commands are included so you can easily see  the\t space\n\t      used/saved and any other changes.\n\n\n       check  Checks  the local rpmdb and produces information on any problems\n\t      it finds. You can pass the check command the  arguments  \"depen\u2010\n\t      dencies\",\t \"duplicates\", \"obsoletes\" or \"provides\", to limit the\n\t      checking that is performed (the  default\tis  \"all\"  which  does\n\t      all).\n\n\t      The info command can also take ranges of transaction ids, of the\n\t      form start..end, which will then display a merged history as  if\n\t      all the transactions in the range had happened at once.\n\t      Eg.  \"history  info 1..4\" will merge the first four transactions\n\t      and display them as a single transaction.\n\n       help   Produces help, either for all commands or\t if  given  a  command\n\t      name then the help for that particular command.\n\nGENERAL OPTIONS\n       Most  command  line  options can be set using the configuration file as\n       well and the descriptions indicate the necessary\t configuration\toption\n       to set.\n\n       -h, --help\n\t      Help; display a help message and then quit.\n\n       -y, --assumeyes\n\t      Assume  yes;  assume that the answer to any question which would\n\t      be asked is yes.\n\t      Configuration Option: assumeyes\n\n       --assumeno\n\t      Assume no; assume that the answer to any question which would be\n\t      asked  is no. This option overrides assumeyes, but is still sub\u2010\n\t      ject to alwaysprompt.\n\t      Configuration Option: assumeno\n\n       -c, --config=[config file]\n\t      Specifies the config file location - can take HTTP and FTP  URLs\n\t      and local file paths.\n\n       -q, --quiet\n\t      Run without output.  Note that you likely also want to use -y.\n\n       -v, --verbose\n\t      Run with a lot of debugging output.\n\n       -d, --debuglevel=[number]\n\t      Sets  the\t debugging  level  to  [number] - turns up or down the\n\t      amount of things that are printed. Practical range: 0 - 10\n\t      Configuration Option: debuglevel\n\n       -e, --errorlevel=[number]\n\t      Sets the error level to [number] Practical range 0 - 10. 0 means\n\t      print only critical errors about which you must be told. 1 means\n\t      print all errors, even ones that are not\toverly\timportant.  1+\n\t      means print more errors (if any) -e 0 is good for cron jobs.\n\t      Configuration Option: errorlevel\n\n       --rpmverbosity=[name]\n\t      Sets the debug level to [name] for rpm scriptlets. 'info' is the\n\t      default, other options are:  'critical',\t'emergency',  'error',\n\t      'warn' and 'debug'.\n\t      Configuration Option: rpmverbosity\n\n       -R, --randomwait=[time in minutes]\n\t      Sets  the maximum amount of time yum will wait before performing\n\t      a command - it randomizes over the time.\n\n       -C, --cacheonly\n\t      Tells yum to run entirely from system cache - does not  download\n\t      or  update any headers unless it has to to perform the requested\n\t      action.\n\n       --version\n\t      Reports the yum version number and  installed  package  versions\n\t      for  everything  in  history_record_packages (can be added to by\n\t      plugins).\n\n       --showduplicates\n\t      Doesn't limit packages to their latest  versions\tin  the\t info,\n\t      list and search commands (will also affect plugins which use the\n\t      doPackageLists() API).\n\n       --installroot=root\n\t      Specifies an alternative\tinstallroot,  relative\tto  which  all\n\t      packages\twill  be  installed.  Think of this like doing \"chroot\n\t      <root> yum\" except using --installroot allows yum to work before\n\t      the  chroot  is  created.\t  Note:\t You  may also want to use the\n\t      option --releasever=/ when creating the installroot as otherwise\n\t      the  $releasever\tvalue  is  taken  from\tthe  rpmdb  within the\n\t      installroot (and thus. will be empty, before creation).\n\t      Configuration Option: installroot\n\n       --enablerepo=repoidglob\n\t      Enables specific repositories by id or glob that have been  dis\u2010\n\t      abled in the configuration file using the enabled=0 option.\n\t      Configuration Option: enabled\n\n       --disablerepo=repoidglob\n\t      Disables specific repositories by id or glob.\n\t      Configuration Option: enabled\n\n       --obsoletes\n\t      This  option  only  has  affect  for an update, it enables yum\u00b4s\n\t      obsoletes processing logic. For more information see the\tupdate\n\t      command above.\n\t      Configuration Option: obsoletes\n\n       -x, --exclude=package\n\t      Exclude  a  specific  package by name or glob from all reposito\u2010\n\t      ries, so yum works as if that package was never in the reposito\u2010\n\t      ries.   This  is\tcommonly  used\tso a package isn't upgraded or\n\t      installed accidentally, but can be used to  remove  packages  in\n\t      any way that \"yum list\" will show packages.\n\n\t      Can  be disabled using --disableexcludes.\t Configuration Option:\n\t      exclude, includepkgs\n\n       --color=[always|auto|never]\n\t      Display colorized output automatically, depending on the\toutput\n\t      terminal,\t always\t (using\t ANSI  codes) or never. Note that some\n\t      commands (Eg. list and info) will do a little  extra  work  when\n\t      color is enabled.\t Configuration Option: color\n\n       --disableexcludes=[all|main|repoid]\n\t      Disable  the excludes defined in your config files. Takes one of\n\t      three options:\n\t      all == disable all excludes\n\t      main == disable excludes defined in [main] in yum.conf\n\t      repoid == disable excludes defined for that repo\n\n       --disableincludes=[all|repoid]\n\t      Disable the includes defined in your config files. Takes one  of\n\t      two options:\n\t      all == disable all includes\n\t      repoid == disable includes defined for that repo\n\n       --disableplugin=plugin\n\t      Run  with\t one or more plugins disabled, the argument is a comma\n\t      separated list of wildcards to match against plugin names.\n\n       --noplugins\n\t      Run with all plugins disabled.\n\t      Configuration Option: plugins\n\n       --nogpgcheck\n\t      Run with GPG signature checking disabled.\n\t      Configuration Option: gpgcheck\n\n       --skip-broken\n\t      Resolve depsolve problems by removing packages that are  causing\n\t      problems from the transaction.\n\t      Configuration Option: skip_broken\n\n       --releasever=version\n\t      Pretend the current release version is the given string. This is\n\t      very useful when combined with --installroot. You can  also  use\n\t      --releasever=/  to  take the releasever information from outside\n\t      the installroot.\tNote that with the default upstream  cachedir,\n\t      of  /var/cache/yum,  using  this\toption will corrupt your cache\n\t      (and you can use $releasever in your cachedir  configuration  to\n\t      stop this).\n\n       -t, --tolerant\n\t      This  option  makes  yum\tgo  slower,  checking  for things that\n\t      shouldn't be  possible  making  it  more\ttolerant  of  external\n\t      errors.\n\n       --downloadonly\n\t      Don't  update, just download. This is done in the background, so\n\t      the yum lock is released for other operations. This can also  be\n\t      chosen  by typing 'd'ownloadonly at the transaction confirmation\n\t      prompt.\n\n       --downloaddir=directory\n\t      Specifies an alternate directory to store packages.\n\n       --setopt=option=value\n\t      Set any config option in yum config or repo files.  For  options\n\t      in  the  global  config just use: --setopt=option=value for repo\n\t      options use: --setopt=repoid.option=value\n\nLIST OPTIONS\n       The following are the ways which you can invoke yum in list mode.  Note\n       that  all list commands include information on the version of the pack\u2010\n       age.\n\n       OUTPUT\n\n\n\t      The format of the output of yum list is:\n\n\t      name.arch [epoch:]version-release\t repo or @installed-from-repo\n\n\n       yum list [all | glob_exp1] [glob_exp2] [...]\n\t      List all available and installed packages.\n\n       yum list available [glob_exp1] [...]\n\t      List all packages\t in  the  yum  repositories  available\tto  be\n\t      installed.\n\n       yum list updates [glob_exp1] [...]\n\t      List  all\t packages  with updates available in the yum reposito\u2010\n\t      ries.\n\n       yum list installed [glob_exp1] [...]\n\t      List the packages specified by args.  If an  argument  does  not\n\t      match  the  name\tof an available package, it is assumed to be a\n\t      shell-style glob and any matches are printed.\n\n       yum list extras [glob_exp1] [...]\n\t      List the packages installed on the system that are not available\n\t      in any yum repository listed in the config file.\n\n       yum list distro-extras [glob_exp1] [...]\n\t      List  the\t packages  installed on the system that are not avail\u2010\n\t      able, by name, in any yum repository listed in the config file.\n\n       yum list obsoletes [glob_exp1] [...]\n\t      List the packages installed on the system that are obsoleted  by\n\t      packages in any yum repository listed in the config file.\n\n       yum list recent\n\t      List  packages  recently\tadded  into  the repositories. This is\n\t      often not helpful, but what you may really want to use  is  \"yum\n\t      list-updateinfo new\" from the security yum plugin.\n\nSPECIFYING PACKAGE NAMES\n       A  package  can\tbe referred to for install, update, remove, list, info\n       etc with any of the following as well as globs of any of the following:\n\n\t      name\n\t      name.arch\n\t      name-ver\n\t      name-ver-rel\n\t      name-ver-rel.arch\n\t      name-epoch:ver-rel.arch\n\t      epoch:name-ver-rel.arch\n\n\t      For example: yum remove kernel-2.4.1-10.i686\n\t\t   this will remove this specific kernel-ver-rel.arch.\n\n\t      Or:\t   yum list available 'foo*'\n\t\t   will list all available packages that  match\t 'foo*'.  (The\n\t      single quotes will keep your shell from expanding the globs.)\n\nCLEAN OPTIONS\n       The following are the ways which you can invoke yum in clean mode. Note\n       that \"all files\" in the commands below means \"all  files\t in  currently\n       enabled\trepositories\".\t If  you  want to also clean any (temporarily)\n       disabled repositories you need to use --enablerepo='*' option.\n\n\n       yum clean expire-cache\n\t      Eliminate the local data\tsaying\twhen  the  metadata  and  mir\u2010\n\t      rorlists\twere  downloaded  for  each  repo. This means yum will\n\t      revalidate the cache for each repo. next time it is  used.  How\u2010\n\t      ever  if\tthe  cache  is\tstill  valid,  nothing significant was\n\t      deleted.\n\n\n       yum clean packages\n\t      Eliminate any cached packages from the system.  Note that\t pack\u2010\n\t      ages are not automatically deleted after they are downloaded.\n\n\n       yum clean headers\n\t      Eliminate\t all  of  the  header files, which old versions of yum\n\t      used for dependency resolution.\n\n\n       yum clean metadata\n\t      Eliminate all of the files  which\t yum  uses  to\tdetermine  the\n\t      remote  availability  of\tpackages. Using this option will force\n\t      yum to download all the metadata the next time it is run.\n\n\n       yum clean dbcache\n\t      Eliminate the sqlite cache used for faster access\t to  metadata.\n\t      Using this option will force yum to download the sqlite metadata\n\t      the next time it is run, or  recreate  the  sqlite  metadata  if\n\t      using an older repo.\n\n\n       yum clean rpmdb\n\t      Eliminate any cached data from the local rpmdb.\n\n\n       yum clean plugins\n\t      Tell any enabled plugins to eliminate their cached data.\n\n\n       yum clean all\n\t      Does all of the above.\n\n\nPLUGINS\n       Yum  can\t be  extended through the use of plugins. A plugin is a Python\n       \".py\" file which is installed in one of the  directories\t specified  by\n       the  pluginpath option in yum.conf. For a plugin to work, the following\n       conditions must be met:\n\n       1. The plugin module file must be installed in the plugin path as  just\n       described.\n\n       2. The global plugins option in /etc/yum.conf must be set to `1'.\n\n       3.  A  configuration file for the plugin must exist in /etc/yum/plugin\u2010\n       conf.d/<plugin_name>.conf and the enabled setting in this file must set\n       to `1'. The minimal content for such a configuration file is:\n\n\t      [main]\n\t      enabled = 1\n\n       See  the\t yum.conf(5)  man  page for more information on plugin related\n       configuration options.\n\n\nFILES\n       /etc/yum.conf\n       /etc/yum/version-groups.conf\n       /etc/yum.repos.d/\n       /etc/yum/pluginconf.d/\n       /var/cache/yum/\n\n\nSEE ALSO\n       pkcon (1)\n       yum.conf (5)\n       yum-updatesd (8)\n       package-cleanup (1)\n       repoquery (1)\n       yum-complete-transaction (1)\n       yumdownloader (1)\n       yum-utils (1)\n       yum-langpacks (1)\n       http://yum.baseurl.org/\n       http://yum.baseurl.org/wiki/Faq\n       yum search yum\n\n\nAUTHORS\n       See the Authors file included with this program.\n\n\nBUGS\n       There of course aren't any bugs, but if you find any, you should\t first\n       consult\tthe  FAQ  mentioned  above  and\t then  email the mailing list:\n       yum@lists.baseurl.org or filed in bugzilla.\n\n\n\nSeth Vidal\t\t\t\t\t\t\t\tyum(8)\n```\n", "tags": ["Yum"]}