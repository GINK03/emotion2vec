{"context": "\n\n\u81ea\u5df1\u7d39\u4ecb\n\n@tacke_jp\n\n\u682a\u5f0f\u4f1a\u793e\u30ce\u30cf\u30ca\u3067\u30a8\u30f3\u30b8\u30cb\u30a2\u3092\u3057\u3066\u3044\u307e\u3059\n\u4eca\u306fParse.com\u7d42\u4e86\u306b\u30b5\u30fc\u30d3\u30b9\u304c\u9053\u9023\u308c\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u79fb\u884c\u4f5c\u696d\u3092\u3057\u3066\u3044\u307e\u3059\n\u8da3\u5473\u3067Haskell\u3068\u304bRust\u3068\u304b\u89e6\u3063\u3066\u3044\u307e\u3059\n\u4eca\u65e5\u306fRust\u3092\u89e6\u308a\u59cb\u3081\u3066\u8208\u5473\u3092\u6301\u3063\u305f \"Associated Type\" \u306b\u3064\u3044\u3066\u306e\u8a71\u3092\u3057\u307e\u3059\n\n\n\nAssociated Type (\u95a2\u9023\u578b) is \u4f55?\n\nTrait\u306b\u7d10\u3065\u304f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\n\n\nTrait\u3092\u5b9f\u88c5\u3059\u308b\u578b\u306b\u5bfe\u3057\u3066\u4e00\u610f\u306b\u5b9a\u307e\u308b(\u578b\u306b\u95a2\u9023\u4ed8\u304f\u578b = \"Associated\")\n\n\n\u4ed6\u306e\u8a00\u8a9e\u3060\u3068Haskell\u3084Swift\u306a\u3069\u304c\u5bfe\u5fdc\u3057\u3066\u308b \n\u6982\u5ff5\u3068\u3057\u3066\u306f Type Family (\u578b\u65cf) \u306b\u8fd1\u3044\u3089\u3057\u3044\n\n\n\u8a73\u3057\u3044\u4eba\u6559\u3048\u3066\u304f\u3060\u3055\u3044\ud83d\ude2d\n\n\n\n\n\n\u4f8b\n\u30b0\u30e9\u30d5\u3092\u8868\u73fe\u3059\u308btrait\u3092\u8003\u3048\u308b\u3002\ntrait Graph<N, E> {\n    fn has_edge(&self, &N, &N) -> bool;\n    fn edges(&self, &N) -> Vec<E>;\n}\n\n(\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3088\u308a)\n\n\u5b9f\u88c5\u4f8b\nstruct MyGraph;\nstruct Node;\nstruct Edge;\n\nimpl Graph<Node, Edge> for MyGraph {\n  fn has_edge(&self, n1: &Node, n2: &Node) -> bool {\n    true\n  }\n\n  fn edges(&self, n: &Node) -> Vec<Edge> {\n    Vec::new()\n  }\n}\n\n\n\u3053\u308c\u306b\u5bfe\u3057\u3066\u30b0\u30e9\u30d5\u306e2\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570distance\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3002\nfn distance<N, E, G: Graph<N, E>>\n  (graph: &G, start: &N, end: &N)\n  -> u32 { ... }\n\n\n\u554f\u984c\u70b9\n\n\u30b7\u30b0\u30cd\u30c1\u30e3\u306e\u8868\u73fe\u304c\u5197\u9577\u3067\u8aa4\u89e3\u3092\u62db\u304d\u3084\u3059\u3044\n\n\n\u4efb\u610f\u306eN\u3084E\u3092\u53d6\u308c\u308b\u304b\u306e\u3088\u3046\u306b\u898b\u3048\u308b\n\u5b9f\u969b\u306f impl Graph<> \u6642\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u3082\u306e\u3057\u304b\u4f7f\u3048\u306a\u3044\n\n\n\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5897\u3048\u305f\u3068\u304d\u306b\u8f9b\u3044\n\n\n\u4f8b\u3048\u3070 <A, B, C, D, E, F, G: Graph<A, B, C, D, E, F>> \ud83d\ude28\n\u3053\u308c\u3092Graph\u3092\u5f15\u6570\u3084\u623b\u308a\u5024\u3068\u3057\u3066\u4f7f\u3046\u95a2\u6570\u3054\u3068\u306b\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u306a\u308b\u3068...\n\n\n\n\n\nAssociated Type\u3092\u4f7f\u3063\u3066\u307f\u308b\ntrait Graph {\n  type N;\n  type E;\n\n  fn has_edge(&self, &Self::N, &Self::N) -> bool;\n  fn edges(&self, &Self::N) -> Vec<Self::E>;\n}\n\nimpl Graph for MyGraph {\n    type N = Node;\n    type E = Edge;\n\n    fn has_edge(&self, n1: &Node, n2: &Node) -> bool {\n        true\n    }\n\n    fn edges(&self, n: &Node) -> Vec<Edge> {\n        Vec::new()\n    }\n}\n\n\n\n\u95a2\u6570distance\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u308b\nfn distance<G: Graph>\n  (graph: &G, start: &G::N, end: &G::N)\n  -> u32 { ... }\n\n\u3059\u3063\u304d\u308a\u66f8\u3051\u305f\ud83d\ude46\n\n\u578b\u6d88\u53bb\u3059\u308b\u5834\u5408\u306f\u3053\u3046\u3059\u308b\u3002\nlet graph = MyGraph;\nlet graphs = Vec::new()\n               as Vec<Graph<<N=Node, E=Edge>>;\ngraphs.add(graph);\n\n(\u578b\u6d88\u53bb\u3059\u308b\u3068 N \u3068 E \u304c\u4e00\u610f\u306b\u5b9a\u307e\u3089\u306a\u3044\u306e\u3067\u3001\u5177\u4f53\u7684\u306b\u6307\u5b9a\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002)\n\n\n\u30e1\u30ea\u30c3\u30c8\n\n\u4f59\u5206\u306a\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5ba3\u8a00\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u53ef\u8aad\u6027\u304c\u9ad8\u3044\n\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8ffd\u52a0/\u524a\u9664\u306a\u3069\u306e\u5909\u66f4\u306b\u5f37\u3044\n\n\n\u30b7\u30b0\u30cd\u30c1\u30e3\u3092\u66f8\u304d\u76f4\u3055\u306a\u304f\u3066\u3082\u6e08\u3080\n\u30e9\u30a4\u30d6\u30e9\u30ea\u4f5c\u8005\u304cAssociated Type\u306b\u3057\u3066\u304a\u3044\u3066\u304f\u308c\u308b\u3068\u4f7f\u3044\u624b\u304c\u697d\u3067\u304d\u308b\n\n\n\n\n\n\u6ce8\u610f\u70b9\n\n\u578b\u3092\u4ee3\u5165\u3057\u306a\u304f\u3066\u826f\u304f\u306a\u308b\u8a33\u3067\u306f\u306a\u3044\n\n\n\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u3067 <G: Graph> \u3068\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7701\u7565\u3067\u304d\u308b\u304c\u88cf\u3067\u306f\u4ee3\u5165\u3055\u308c\u3066\u3044\u308b\n\nlet g: Graph \u3068\u3044\u3046\u5909\u6570\u3092\u5ba3\u8a00\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u306a\u3044\n\n\n\u578b\u306e\u8868\u73fe\u529b\u304c\u5897\u3059\u308f\u3051\u3067\u306f\u306a\u3044\n\n\n\u540c\u7b49\u306e\u8868\u73fe\u306fGenerics\u3092\u4f7f\u3063\u3066\u3082\u66f8\u3051\u308b\n\n\n\n=> \u3042\u304f\u307e\u3067\u578b\u30ec\u30d9\u30eb\u3067\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u697d\u306b\u3059\u308b\u305f\u3081\u306e\u6a5f\u80fd\n\n\n\u304a\u307e\u3051\nRust\u3067\u3053\u3046\u66f8\u304d\u305f\u3044\u3051\u3069\u66f8\u3051\u306a\u3044\u3002\ntrait Graph {\n    type N;\n    type E;\n    fn compare<G: Graph>(&self, other: G)\n      -> bool\n      where Self.N == G.N\n          , Self.E == G.E;\n}\n\n\n\nerror: equality constraints are not yet supported in where clauses (#20041) \u3068\u6012\u3089\u308c\u308b\ud83d\ude07\n\n\nGenerics\u306a\u3089fn compare<G: Graph<N, E>>(&self, other: G) -> bool;\u3053\u3046\u66f8\u3051\u308b\n\n\n\n\u3061\u306a\u307f\u306bSwift\u3060\u3068\u66f8\u3051\u308b\u3002\u305d\u306e\u3046\u3061\u5bfe\u5fdc\u3055\u308c\u308b\u3068\u826f\u3044\u306a...\n\n\n\u304a\u307e\u3051(\u305d\u306e2)\ntermoshtt \u3055\u3093\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n(\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059!)\ntrait\u3092\u4f7f\u3063\u3066\u578b\u30ec\u30d9\u30eb\u3067\u30a4\u30b3\u30fc\u30eb\u3092\u4f5c\u308b\u30b3\u30fc\u30c9\u3092\u7d39\u4ecb\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\ntrait Equal<A> {}\nimpl<A> Equal<A> for A {}\n\ntrait Graph {\n    type N;\n    type E;\n    fn compare<G: Graph>(&self, other: G) -> bool\n        where Self::N: Equal<G::N>,\n              Self::E: Equal<G::E>;\n}\n\n\n\n\u304a\u307e\u3051(\u305d\u306e3)\nblackenedgold\u3055\u3093\u306b\u3082\u30b3\u30e1\u30f3\u30c8\u9802\u304d\u307e\u3057\u305f\u3002(\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059!)\nSelf::N Self::E \u3092\u4ee3\u5165\u3057\u3066\u3057\u307e\u3048\u3070\u826f\u3044\u3093\u3067\u3059\u306d...!\ntrait Graph {\n    type N;\n    type E;\n    fn compare<G: Graph<N = Self::N, E = Self::E>>(&self, other: G)\n      -> bool;\n}\n\n\n\n\u307e\u3068\u3081\n\nGenerics\u3067\u66f8\u3044\u3066\u3044\u305f\u3068\u3053\u308d\u3092Associated Type\u3067\u66f8\u304f\u3068\u7c21\u6f54\u306b\u306a\u308b\nGenerics\u3092\u4f7f\u3046\u969b\u306e\u4fbf\u5229\u306a\u88dc\u52a9\u6a5f\u80fd\u3060\u3068\u601d\u3063\u3066\u4f7f\u3048\u3070\u826f\u3055\u305d\u3046\n\u578b\u304b\u308f\u3044\u3044\u3088\u578b\n\n\n\nReferences\n\nAssociated Types - The Rust Programming Language\nhttps://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md\n7.7. \u578b\u306e\u65cf - \u6804\u5149\u306e\u30b0\u30e9\u30b9\u30b4\u30fcHaskell\u30b3\u30f3\u30d1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u5229\u7528\u306e\u624b\u5f15\u304d\n\n# \u81ea\u5df1\u7d39\u4ecb\n* [@tacke_jp](https://twitter.com/tacke_jp)\n* [\u682a\u5f0f\u4f1a\u793e\u30ce\u30cf\u30ca](https://nohana.co.jp)\u3067\u30a8\u30f3\u30b8\u30cb\u30a2\u3092\u3057\u3066\u3044\u307e\u3059\n* \u4eca\u306f[Parse.com](https://parse.com)\u7d42\u4e86\u306b\u30b5\u30fc\u30d3\u30b9\u304c\u9053\u9023\u308c\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u79fb\u884c\u4f5c\u696d\u3092\u3057\u3066\u3044\u307e\u3059\n* \u8da3\u5473\u3067Haskell\u3068\u304bRust\u3068\u304b\u89e6\u3063\u3066\u3044\u307e\u3059\n* \u4eca\u65e5\u306fRust\u3092\u89e6\u308a\u59cb\u3081\u3066\u8208\u5473\u3092\u6301\u3063\u305f \"Associated Type\" \u306b\u3064\u3044\u3066\u306e\u8a71\u3092\u3057\u307e\u3059\n\n---\n\n# Associated Type (\u95a2\u9023\u578b) is \u4f55?\n* Trait\u306b\u7d10\u3065\u304f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\n  - Trait\u3092\u5b9f\u88c5\u3059\u308b\u578b\u306b\u5bfe\u3057\u3066\u4e00\u610f\u306b\u5b9a\u307e\u308b<br>(\u578b\u306b\u95a2\u9023\u4ed8\u304f\u578b = \"Associated\")\n* \u4ed6\u306e\u8a00\u8a9e\u3060\u3068Haskell\u3084Swift\u306a\u3069\u304c\u5bfe\u5fdc\u3057\u3066\u308b \n* \u6982\u5ff5\u3068\u3057\u3066\u306f Type Family (\u578b\u65cf) \u306b\u8fd1\u3044\u3089\u3057\u3044\n  - \u8a73\u3057\u3044\u4eba\u6559\u3048\u3066\u304f\u3060\u3055\u3044\ud83d\ude2d\n\n---\n\n# \u4f8b\n\u30b0\u30e9\u30d5\u3092\u8868\u73fe\u3059\u308btrait\u3092\u8003\u3048\u308b\u3002\n\n```rust\ntrait Graph<N, E> {\n    fn has_edge(&self, &N, &N) -> bool;\n    fn edges(&self, &N) -> Vec<E>;\n}\n```\n([\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://doc.rust-lang.org/book/associated-types.html)\u3088\u308a)\n\n---\n\n\u5b9f\u88c5\u4f8b\n\n```rust\nstruct MyGraph;\nstruct Node;\nstruct Edge;\n\nimpl Graph<Node, Edge> for MyGraph {\n  fn has_edge(&self, n1: &Node, n2: &Node) -> bool {\n    true\n  }\n\n  fn edges(&self, n: &Node) -> Vec<Edge> {\n    Vec::new()\n  }\n}\n```\n---\n\n\u3053\u308c\u306b\u5bfe\u3057\u3066\u30b0\u30e9\u30d5\u306e2\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570`distance`\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3002\n\n```rust\nfn distance<N, E, G: Graph<N, E>>\n  (graph: &G, start: &N, end: &N)\n  -> u32 { ... }\n```\n\n## \u554f\u984c\u70b9\n* \u30b7\u30b0\u30cd\u30c1\u30e3\u306e\u8868\u73fe\u304c\u5197\u9577\u3067\u8aa4\u89e3\u3092\u62db\u304d\u3084\u3059\u3044\n  - \u4efb\u610f\u306e`N`\u3084`E`\u3092\u53d6\u308c\u308b\u304b\u306e\u3088\u3046\u306b\u898b\u3048\u308b\n  - \u5b9f\u969b\u306f `impl Graph<>` \u6642\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u3082\u306e\u3057\u304b\u4f7f\u3048\u306a\u3044\n* \u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5897\u3048\u305f\u3068\u304d\u306b\u8f9b\u3044\n  - \u4f8b\u3048\u3070 `<A, B, C, D, E, F, G: Graph<A, B, C, D, E, F>>` \ud83d\ude28\n  - \u3053\u308c\u3092`Graph`\u3092\u5f15\u6570\u3084\u623b\u308a\u5024\u3068\u3057\u3066\u4f7f\u3046\u95a2\u6570\u3054\u3068\u306b\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u306a\u308b\u3068...\n\n---\n\n# Associated Type\u3092\u4f7f\u3063\u3066\u307f\u308b\n```rust\ntrait Graph {\n  type N;\n  type E;\n\n  fn has_edge(&self, &Self::N, &Self::N) -> bool;\n  fn edges(&self, &Self::N) -> Vec<Self::E>;\n}\n```\n\n```rust\nimpl Graph for MyGraph {\n    type N = Node;\n    type E = Edge;\n\n    fn has_edge(&self, n1: &Node, n2: &Node) -> bool {\n        true\n    }\n\n    fn edges(&self, n: &Node) -> Vec<Edge> {\n        Vec::new()\n    }\n}\n```\n\n---\n\n# \u95a2\u6570`distance`\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u308b\n\n```rust\nfn distance<G: Graph>\n  (graph: &G, start: &G::N, end: &G::N)\n  -> u32 { ... }\n```\n\u3059\u3063\u304d\u308a\u66f8\u3051\u305f\ud83d\ude46\n\n---\n\n\u578b\u6d88\u53bb\u3059\u308b\u5834\u5408\u306f\u3053\u3046\u3059\u308b\u3002\n\n```rust\nlet graph = MyGraph;\nlet graphs = Vec::new()\n               as Vec<Graph<<N=Node, E=Edge>>;\ngraphs.add(graph);\n```\n(\u578b\u6d88\u53bb\u3059\u308b\u3068 `N` \u3068 `E` \u304c\u4e00\u610f\u306b\u5b9a\u307e\u3089\u306a\u3044\u306e\u3067\u3001\u5177\u4f53\u7684\u306b\u6307\u5b9a\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002)\n\n---\n\n# \u30e1\u30ea\u30c3\u30c8\n* \u4f59\u5206\u306a\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5ba3\u8a00\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u53ef\u8aad\u6027\u304c\u9ad8\u3044\n* \u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8ffd\u52a0/\u524a\u9664\u306a\u3069\u306e\u5909\u66f4\u306b\u5f37\u3044\n  - \u30b7\u30b0\u30cd\u30c1\u30e3\u3092\u66f8\u304d\u76f4\u3055\u306a\u304f\u3066\u3082\u6e08\u3080\n  - \u30e9\u30a4\u30d6\u30e9\u30ea\u4f5c\u8005\u304cAssociated Type\u306b\u3057\u3066\u304a\u3044\u3066\u304f\u308c\u308b\u3068\u4f7f\u3044\u624b\u304c\u697d\u3067\u304d\u308b\n\n---\n\n# \u6ce8\u610f\u70b9\n* \u578b\u3092\u4ee3\u5165\u3057\u306a\u304f\u3066\u826f\u304f\u306a\u308b\u8a33\u3067\u306f\u306a\u3044\n  - \u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u3067 `<G: Graph>` \u3068\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7701\u7565\u3067\u304d\u308b\u304c\u88cf\u3067\u306f\u4ee3\u5165\u3055\u308c\u3066\u3044\u308b\n  - `let g: Graph` \u3068\u3044\u3046\u5909\u6570\u3092\u5ba3\u8a00\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u306a\u3044\n* \u578b\u306e\u8868\u73fe\u529b\u304c\u5897\u3059\u308f\u3051\u3067\u306f\u306a\u3044\n  - \u540c\u7b49\u306e\u8868\u73fe\u306fGenerics\u3092\u4f7f\u3063\u3066\u3082\u66f8\u3051\u308b\n\n=> \u3042\u304f\u307e\u3067\u578b\u30ec\u30d9\u30eb\u3067\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u697d\u306b\u3059\u308b\u305f\u3081\u306e\u6a5f\u80fd\n\n---\n\n# \u304a\u307e\u3051\n\nRust\u3067\u3053\u3046\u66f8\u304d\u305f\u3044\u3051\u3069\u66f8\u3051\u306a\u3044\u3002\n\n```\ntrait Graph {\n    type N;\n    type E;\n    fn compare<G: Graph>(&self, other: G)\n      -> bool\n      where Self.N == G.N\n          , Self.E == G.E;\n}\n```\n\n* `error: equality constraints are not yet supported in where clauses (#20041)` \u3068\u6012\u3089\u308c\u308b\ud83d\ude07\n  - Generics\u306a\u3089`fn compare<G: Graph<N, E>>(&self, other: G) -> bool;`\u3053\u3046\u66f8\u3051\u308b\n\n\u3061\u306a\u307f\u306bSwift\u3060\u3068\u66f8\u3051\u308b\u3002\u305d\u306e\u3046\u3061\u5bfe\u5fdc\u3055\u308c\u308b\u3068\u826f\u3044\u306a...\n\n---\n\n# \u304a\u307e\u3051(\u305d\u306e2)\n\n[termoshtt](http://qiita.com/termoshtt) \u3055\u3093\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n(\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059!)\n\ntrait\u3092\u4f7f\u3063\u3066\u578b\u30ec\u30d9\u30eb\u3067\u30a4\u30b3\u30fc\u30eb\u3092\u4f5c\u308b\u30b3\u30fc\u30c9\u3092\u7d39\u4ecb\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n```\ntrait Equal<A> {}\nimpl<A> Equal<A> for A {}\n\ntrait Graph {\n    type N;\n    type E;\n    fn compare<G: Graph>(&self, other: G) -> bool\n        where Self::N: Equal<G::N>,\n              Self::E: Equal<G::E>;\n}\n```\n\n---\n# \u304a\u307e\u3051(\u305d\u306e3)\n\n[blackenedgold](http://qiita.com/blackenedgold)\u3055\u3093\u306b\u3082\u30b3\u30e1\u30f3\u30c8\u9802\u304d\u307e\u3057\u305f\u3002(\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059!)\n`Self::N` `Self::E` \u3092\u4ee3\u5165\u3057\u3066\u3057\u307e\u3048\u3070\u826f\u3044\u3093\u3067\u3059\u306d...!\n\n```\ntrait Graph {\n    type N;\n    type E;\n    fn compare<G: Graph<N = Self::N, E = Self::E>>(&self, other: G)\n      -> bool;\n}\n```\n\n---\n\n# \u307e\u3068\u3081\n\n* Generics\u3067\u66f8\u3044\u3066\u3044\u305f\u3068\u3053\u308d\u3092Associated Type\u3067\u66f8\u304f\u3068\u7c21\u6f54\u306b\u306a\u308b\n* Generics\u3092\u4f7f\u3046\u969b\u306e\u4fbf\u5229\u306a\u88dc\u52a9\u6a5f\u80fd\u3060\u3068\u601d\u3063\u3066\u4f7f\u3048\u3070\u826f\u3055\u305d\u3046\n* \u578b\u304b\u308f\u3044\u3044\u3088\u578b\n\n---\n\n# References\n\n* [Associated Types - The Rust Programming Language](https://doc.rust-lang.org/book/associated-types.html)\n* https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md\n* [7.7. \u578b\u306e\u65cf - \u6804\u5149\u306e\u30b0\u30e9\u30b9\u30b4\u30fcHaskell\u30b3\u30f3\u30d1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u5229\u7528\u306e\u624b\u5f15\u304d](http://www.kotha.net/ghcguide_ja/7.8.2/type-families.html)\n", "tags": ["rust"]}