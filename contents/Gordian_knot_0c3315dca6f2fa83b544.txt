{"context": "\u66f2\u7dda\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3067\u306f\u30d9\u30a4\u30ba\u7684\u306b\u6271\u3063\u3066\u4e8b\u5f8c\u4e88\u6e2c\u5206\u5e03\u3092\u7b97\u51fa\u3057\u305f\u308a\u3082\u3057\u307e\u3059\u304c\u3001\u30af\u30e9\u30b9\u5206\u985e\u306b\u304a\u3044\u3066\u306f\u3042\u307e\u308a\u305d\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3084\u3089\u308c\u3066\u3044\u306a\u3044\u5370\u8c61\u304c\u3042\u308a\u3001\u4eca\u56de\u306f\u30af\u30e9\u30b9\u5206\u985e\u3067\u3088\u304f\u7528\u3044\u3089\u308c\u308b\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u3088\u308a\u30d9\u30a4\u30ba\u7684\u306b\u53d6\u308a\u6271\u3063\u3066\u4e8b\u5f8c\u4e88\u6e2c\u5206\u5e03\u3092\u8a08\u7b97\u3059\u308b\u30b3\u30fc\u30c9\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30d9\u30a4\u30ba\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n\u4e0a\u3067\u3082\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u30af\u30e9\u30b9\u5206\u985e\u306b\u304a\u3044\u3066\u4e88\u6e2c\u5206\u5e03\u3092\u7b97\u51fa\u3057\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3092\u3042\u307e\u308a\u3001\u3068\u3044\u3046\u304b\u5168\u304f\u898b\u304b\u3051\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\uff08\u305f\u3060\u898b\u3066\u304d\u305f\u30b3\u30fc\u30c9\u304c\u5c11\u306a\u3044\u3060\u3051\u304b\u3082\uff09\u3002\n\u30d9\u30a4\u30ba\u7684\u306b\u4e88\u6e2c\u5206\u5e03\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u306f\u91cd\u307f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e8b\u5f8c\u5206\u5e03\u3092\u4f7f\u3063\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3064\u3044\u3066\u7a4d\u5206\u6d88\u53bb\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\u3057\u304b\u3057\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u306f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u7528\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u89e3\u6790\u7684\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3064\u3044\u3066\u7a4d\u5206\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u30e9\u30d7\u30e9\u30b9\u8fd1\u4f3c\u3092\u7528\u3044\u3066\u8fd1\u4f3c\u7684\u306b\u4e88\u6e2c\u5206\u5e03\u3092\u6c42\u3081\u307e\u3059\u3002\n\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n\u307e\u305a2\u30af\u30e9\u30b9\u5206\u985e\u3092\u884c\u3046\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u8003\u3048\u3066\u3044\u304d\u307e\u3059\u3002$\\phi$\u3092\u3042\u308b\u70b9$x$\u306e\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3068\u3057\u3066\u3001\u305d\u306e\u70b9\u304c\u30af\u30e9\u30b9$C_1$\u306b\u5c5e\u3059\u308b\u3092\np(C_1|\\phi) = y(\\phi) = \\sigma({\\bf w}^\\intercal\\phi)\n$${p(C_1|\\phi) = y(\\phi) = \\sigma({\\bf w}^\\intercal\\phi)\n}$$\n\u3068\u8868\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001$\\sigma(\\cdot)$\u306f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570$\\sigma(x)={1\\over1+\\exp(-x)}$\u3068\u3059\u308b\u3002\u3053\u3053\u3067\u306f2\u30af\u30e9\u30b9\u5206\u985e\u3092\u8003\u3048\u3066\u3044\u308b\u306e\u3067\u3001\u30af\u30e9\u30b9$C_1$\u306b\u5c5e\u3059\u308b\u78ba\u7387\u304c\u5206\u304b\u308c\u3070\u3001\u3082\u3046\u4e00\u65b9\u306e\u30af\u30e9\u30b9$C_2$\u306b\u5c5e\u3059\u308b\u78ba\u7387\u306f$p(C_2|\\phi(x)) = 1 - p(C_1|\\phi(x))$\u3067\u4e0e\u3048\u3089\u308c\u308b\u3002\u3088\u3063\u3066\u3001\u3053\u308c\u4ee5\u964d\u306f\u30af\u30e9\u30b9$C_1$\u306b\u5c5e\u3059\u308b\u78ba\u7387\u306e\u65b9\u3060\u3051\u3092\u8003\u3048\u3066\u3044\u304f\u3002\n$\\phi_n=\\phi(x_n)$\u3001$t_n\\in\\{0,1\\}$\u3068\u3057\u3066\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8$\\{\\phi_n, t_n\\}_{n=1}^N$\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u306e\u5c24\u5ea6\u95a2\u6570\u306f\u30d9\u30eb\u30cc\u30fc\u30a4\u5206\u5e03\u3092\u30e2\u30c7\u30eb\u3068\u3057\u3066\u3001\n\\begin{align}\np({\\bf t}|{\\bf\\Phi},{\\bf w}) &= \\prod_{n=1}^N{\\rm Bern}(t_n|y_n)\\\\\n&= \\prod_{n=1}^N y_n^{t_n}(1 - y_n)^{1 - t_n}\n\\end{align}\n$${\\begin{align}\np({\\bf t}|{\\bf\\Phi},{\\bf w}) &= \\prod_{n=1}^N{\\rm Bern}(t_n|y_n)\\\\\n&= \\prod_{n=1}^N y_n^{t_n}(1 - y_n)^{1 - t_n}\n\\end{align}\n}$$\n\u3068\u306a\u308b\u3002\u305f\u3060\u3057\u3001${\\bf\\Phi}$\u306f\u6a2a\u30d9\u30af\u30c8\u30eb$\\phi^{\\rm T}$\u3092\u7e26\u306b\u4e26\u3079\u305f\u8a08\u753b\u884c\u5217\u3067\u3042\u308b\u3002\u3044\u3064\u3082\u306e\u3088\u3046\u306b\u30b3\u30b9\u30c8\u95a2\u6570\u3092\u8ca0\u306e\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u3068\u5b9a\u7fa9\u3059\u308b\u3068\u3001\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u306e\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\nE({\\bf w}) = -\\ln p({\\bf t}|{\\bf\\Phi},{\\bf w}) = -\\sum_{n=1}^N\\{t_n\\ln y_n + (1 - t_n)\\ln(1 - y_n)\\}\n$${E({\\bf w}) = -\\ln p({\\bf t}|{\\bf\\Phi},{\\bf w}) = -\\sum_{n=1}^N\\{t_n\\ln y_n + (1 - t_n)\\ln(1 - y_n)\\}\n}$$\n\u3053\u306e\u30b3\u30b9\u30c8\u95a2\u6570\u3092\u30d1\u30e9\u30e1\u30fc\u30bf${\\bf w}$\u306b\u3064\u3044\u3066\u4e00\u968e\u3001\u4e8c\u968e\u5fae\u5206\u3057\u305f\u7d50\u679c\u306f\u305d\u308c\u305e\u308c\n\\begin{align}\n\\nabla E({\\bf w}) &= \\sum_{n=1}^N (y_n - t_n) {\\bf\\phi}_n = {\\bf\\Phi}^\\intercal({\\bf y} - {\\bf t})\\\\\n{\\bf H} = \\nabla\\nabla E({\\bf w}) &= \\sum_{n=1}^N y_n(1 - y_n)\\phi_n\\phi_n^\\intercal = {\\bf\\Phi}^\\intercal{\\bf R}{\\bf\\Phi}\n\\end{align}\n$${\\begin{align}\n\\nabla E({\\bf w}) &= \\sum_{n=1}^N (y_n - t_n) {\\bf\\phi}_n = {\\bf\\Phi}^\\intercal({\\bf y} - {\\bf t})\\\\\n{\\bf H} = \\nabla\\nabla E({\\bf w}) &= \\sum_{n=1}^N y_n(1 - y_n)\\phi_n\\phi_n^\\intercal = {\\bf\\Phi}^\\intercal{\\bf R}{\\bf\\Phi}\n\\end{align}\n}$$\n\u305f\u3060\u3057\u3001\u884c\u5217${\\bf R}$\u306f\u305d\u306e\u8981\u7d20\u304c$R_{nn}=y_n(1-y_n)$\u3068\u306a\u3063\u3066\u3044\u308b\u5bfe\u89d2\u884c\u5217\u3067\u3042\u308b\u3002\u3053\u308c\u3089\u306e\u7d50\u679c\u3092\u7528\u3044\u3066\u3001\n{\\bf w}^{new} = {\\bf w}^{old} - {\\bf H}^{-1}\\nabla E({\\bf w})\n$${{\\bf w}^{new} = {\\bf w}^{old} - {\\bf H}^{-1}\\nabla E({\\bf w})\n}$$\n\u3068\u3057\u3066\u3001\u30d1\u30e9\u30e1\u30fc\u30bf${\\bf w}$\u304c\u53ce\u675f\u3059\u308b\u307e\u3067\u66f4\u65b0\u3092\u7e70\u308a\u8fd4\u3059\u3002\n\n\u30e9\u30d7\u30e9\u30b9\u8fd1\u4f3c\n\u30d1\u30e9\u30e1\u30fc\u30bf${\\bf w}$\u306b\u3064\u3044\u3066\u4e8b\u524d\u5206\u5e03$p({\\bf w})=\\mathcal{N}({\\bf w}|{\\bf 0},\\alpha^{-1}{\\bf I})$\u3092\u5c0e\u5165\u3057\u3066\u3001\u30e9\u30d7\u30e9\u30b9\u8fd1\u4f3c\u3092\u4f7f\u3046\u3053\u3068\u3067\u30ac\u30a6\u30b9\u95a2\u6570\u306e\u5f62\u306b\u306a\u3063\u3066\u3044\u308b\u8fd1\u4f3c\u7684\u306a\u4e8b\u5f8c\u5206\u5e03\u3092\u6c42\u3081\u308b\u3002\u30d9\u30a4\u30ba\u306e\u5b9a\u7406\u304b\u3089\np({\\bf w}|{\\bf t},{\\bf\\Phi}) \\propto p({\\bf t}|{\\bf\\Phi},{\\bf w})p({\\bf w})\n$${p({\\bf w}|{\\bf t},{\\bf\\Phi}) \\propto p({\\bf t}|{\\bf\\Phi},{\\bf w})p({\\bf w})\n}$$\n\u3067\u3042\u308b\u304b\u3089\u3001\u305d\u306e\u5bfe\u6570\u3092\u3068\u308b\u3068\n\\ln p({\\bf w}|{\\bf t},{\\bf\\Phi}) = -{\\alpha\\over2}{\\bf w}^\\intercal{\\bf w} + \\sum_{n=1}^N\\{t_n\\ln y_n + (1 - t_n)\\ln(1 - y_n)\\}\n$${\\ln p({\\bf w}|{\\bf t},{\\bf\\Phi}) = -{\\alpha\\over2}{\\bf w}^\\intercal{\\bf w} + \\sum_{n=1}^N\\{t_n\\ln y_n + (1 - t_n)\\ln(1 - y_n)\\}\n}$$\n\u3068\u306a\u308b\u3002\u3053\u308c\u304b\u3089\u30ac\u30a6\u30b9\u8fd1\u4f3c\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u3001\u307e\u305a\u4e0a\u306e\u5f0f\u3092${\\bf w}$\u306b\u3064\u3044\u3066\u6700\u5927\u5316\u3057\u3066\u3001\u305d\u306e\u3068\u304d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf${\\bf w}_{MAP}$\u3068\u4e8c\u968e\u5fae\u5206$S_N^{-1}$\u3092\u7528\u3044\u3066\u8fd1\u4f3c\u7684\u306a\u4e8b\u5f8c\u5206\u5e03\u306f\nq({\\bf w}) = \\mathcal{N}({\\bf w}|{\\bf w}_{MAP}, S_N)\n$${q({\\bf w}) = \\mathcal{N}({\\bf w}|{\\bf w}_{MAP}, S_N)\n}$$\n\u3068\u3057\u3066\u6c42\u3081\u3089\u308c\u308b\u3002\n\n\u4e8b\u5f8c\u4e88\u6e2c\u5206\u5e03\n\u65b0\u3057\u3044\u70b9$\\phi$\u306b\u3064\u3044\u3066\u306e\u4e8b\u5f8c\u4e88\u6e2c\u5206\u5e03\u306f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e8b\u5f8c\u5206\u5e03\u306b\u3064\u3044\u3066\u5468\u8fba\u5316\u3059\u308b\u3053\u3068\u3067\u5f97\u3089\u308c\u308b\u3002\n\\begin{align}\np(C_1|\\phi,{\\bf t},{\\bf\\Phi}) &= \\int p(C_1|\\phi,{\\bf w})p({\\bf w}|{\\bf t},{\\bf\\Phi}){\\rm d}{\\bf w}\\\\\n&\\approx \\int \\sigma({\\bf w}^\\intercal\\phi)\\mathcal{N}({\\bf w}|{\\bf w}_{MAP},S_N){\\rm d}{\\bf w}\\\\\n&\\approx \\sigma\\left({\\mu\\over\\sqrt{1 + \\pi\\sigma^2/8}}\\right)\n\\end{align}\n$${\\begin{align}\np(C_1|\\phi,{\\bf t},{\\bf\\Phi}) &= \\int p(C_1|\\phi,{\\bf w})p({\\bf w}|{\\bf t},{\\bf\\Phi}){\\rm d}{\\bf w}\\\\\n&\\approx \\int \\sigma({\\bf w}^\\intercal\\phi)\\mathcal{N}({\\bf w}|{\\bf w}_{MAP},S_N){\\rm d}{\\bf w}\\\\\n&\\approx \\sigma\\left({\\mu\\over\\sqrt{1 + \\pi\\sigma^2/8}}\\right)\n\\end{align}\n}$$\n\u305f\u3060\u3057\u3001\n\\begin{align}\n\\mu &= {\\bf w}_{MAP}^\\intercal\\phi\\\\\n\\sigma^2 &= \\phi^\\intercal S_N\\phi\n\\end{align}\n$${\\begin{align}\n\\mu &= {\\bf w}_{MAP}^\\intercal\\phi\\\\\n\\sigma^2 &= \\phi^\\intercal S_N\\phi\n\\end{align}\n}$$\n\u3068\u3059\u308b\u3002\u30d1\u30e9\u30e1\u30fc\u30bf${\\bf w}$\u306e\u4e8b\u5f8c\u5206\u5e03\u3092\u30e9\u30d7\u30e9\u30b9\u8fd1\u4f3c\u3057\u305f\u3053\u3068\u3001\u305d\u3057\u3066\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u30d7\u30ed\u30d3\u30c3\u30c8\u95a2\u6570\u3067\u8fd1\u4f3c\u3057\u305f\u3053\u3068\u3001\u3053\u306e\u4e8c\u3064\u306e\u8fd1\u4f3c\u304c\u7528\u3044\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u8a73\u3057\u3044\u5f0f\u5909\u5f62\u306fPRML\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\u5b9f\u88c5\n\n\u30d1\u30c3\u30b1\u30fc\u30b8\n\u3044\u3064\u3082\u306ematplotlib\u3001numpy\u306b\u52a0\u3048\u3066itertools\u3068\u3044\u3046Python\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u307e\u3059\u3002\nimport itertools\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n\u8a08\u753b\u884c\u5217\uff1a\u591a\u9805\u5f0f\u7279\u5fb4\n\uff12\u6b21\u5143\u306e\u70b9$(x_1,x_2)$\u3092\uff12\u6b21\u306e\u591a\u9805\u5f0f\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u3068\n\\phi(x_1,x_2) =\n\\begin{bmatrix}\n1\\\\\nx_1\\\\\nx_2\\\\\nx_1^2\\\\\nx_1x_2\\\\\nx_2^2\n\\end{bmatrix}\n$${\\phi(x_1,x_2) =\n\\begin{bmatrix}\n1\\\\\nx_1\\\\\nx_2\\\\\nx_1^2\\\\\nx_1x_2\\\\\nx_2^2\n\\end{bmatrix}\n}$$\n\u3068\u306a\u308a\u307e\u3059\u3002\u3044\u304f\u3064\u3082\u306e\uff12\u6b21\u5143\u306e\u70b9\u304b\u3089\u8a08\u753b\u884c\u5217\u306b\u5909\u63db\u3059\u308b\u30af\u30e9\u30b9\u304c\u4e0b\u306e\u3082\u306e\u3067\u3059\u3002\n\u4f8b\u3048\u3070\uff12\u6b21\u5143\u306e\u70b9$(2,5)$\u3068$(-3,1)$\u306e\uff12\u6b21\u591a\u9805\u5f0f\u7279\u5fb4\u306e\u8a08\u753b\u884c\u5217\u306f\n{\\bf\\Phi}=\n\\begin{bmatrix}\n1 & 2 & 5 & 2^2 & 2 \\times 5 & 5^2\\\\\n1 & 3 & -1 & 3^2 & 3 \\times (-1) & (-1)^2\n\\end{bmatrix}\n$${{\\bf\\Phi}=\n\\begin{bmatrix}\n1 & 2 & 5 & 2^2 & 2 \\times 5 & 5^2\\\\\n1 & 3 & -1 & 3^2 & 3 \\times (-1) & (-1)^2\n\\end{bmatrix}\n}$$\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nclass PolynomialFeatures(object):\n\n    def __init__(self, degree=2):\n        self.degree = degree\n\n    def transform(self, x):\n        x_t = x.transpose()\n        features = [np.ones(len(x))]\n        for degree in xrange(1, self.degree + 1):\n            for items in itertools.combinations_with_replacement(x_t, degree):\n                features.append(reduce(lambda x, y: x * y, items))\n        return np.array(features).transpose()\n\n\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3068\u30d9\u30a4\u30ba\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u884c\u3046\u30af\u30e9\u30b9\u3092\u5225\u3005\u306b\u5206\u3051\u308b\u5fc5\u8981\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u4e8c\u3064\u306e\u9055\u3044\u3092\u9855\u8457\u306b\u3059\u308b\u305f\u3081\u306b\u4eca\u56de\u306f\u5206\u3051\u307e\u3057\u305f\u3002\nclass LogisticRegression(object):\n\n    def __init__(self, iter_max, alpha=0):\n        self.iter_max = iter_max\n        self.alpha = alpha\n\n    def _sigmoid(self, a):\n        return np.divide(1, 1 + np.exp(-a))\n\n    def fit(self, X, t):\n        self.w = np.zeros(np.size(X, 1))\n        for i in xrange(self.iter_max):\n            w = np.copy(self.w)\n            y = self.predict_proba(X)\n            grad = X.T.dot(y - t) + self.alpha * w\n            hessian = (X.T.dot(np.diag(y * (1 - y))).dot(X)\n                       + self.alpha * np.identity(len(w)))\n            try:\n                self.w -= np.linalg.solve(hessian, grad)\n            except np.linalg.LinAlgError:\n                break\n            if np.allclose(w, self.w):\n                break\n            if i == self.iter_max - 1:\n                print \"weight parameter w may not have converged\"\n\n    def predict(self, X):\n        return (self.predict_proba(X) > 0.5).astype(np.int)\n\n    def predict_proba(self, X):\n        return self._sigmoid(X.dot(self.w))\n\n\n\n\nLogisticRegression\n\u30e1\u30bd\u30c3\u30c9\u306e\u8aac\u660e\n\n\n\n\n__init__\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u5927\u66f4\u65b0\u56de\u6570\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e8b\u524d\u5206\u5e03\u306e\u7cbe\u5ea6\u306e\u8a2d\u5b9a\n\n\n_sigmoid\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\n\n\nfit\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u63a8\u5b9a\n\n\npredict\n\u5165\u529b\u306e\u30e9\u30d9\u30eb\u3092\u4e88\u6e2c\n\n\npredict_proba\n\u5165\u529b\u304c\u30e9\u30d9\u30eb1\u3068\u306a\u308b\u78ba\u7387\u3092\u8a08\u7b97\n\n\n\n\n\u30d9\u30a4\u30ba\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u5927\u4e8b\u5f8c\u78ba\u7387\u63a8\u5b9a\u306b\u304a\u3044\u3066\u6700\u983b\u5024\u3060\u3051\u3067\u306a\u304f\u8fd1\u4f3c\u7684\u306a\u5206\u6563\u3082\u6c42\u3081\u3066\u3044\u307e\u3059\u3002\u4e0a\u306e\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u3082\u30d8\u30c3\u30bb\u884c\u5217\uff08\u8fd1\u4f3c\u7684\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7cbe\u5ea6\u884c\u5217\uff09\u3092\u6c42\u3081\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u305d\u308c\u306f\u63a8\u5b9a\u3057\u3066\u3044\u308b\u3068\u304d\u306b\u305d\u306e\u884c\u5217\u3092\u4f7f\u3063\u3066\u3044\u308b\u3060\u3051\u306a\u306e\u3067\u305d\u306e\u884c\u5217\u3092\u4f55\u3089\u304b\u306e\u5909\u6570\u306b\u4fdd\u5b58\u3057\u3066\u306f\u3044\u307e\u305b\u3093\u304c\u3001\u30d9\u30a4\u30ba\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5206\u6563\u3082\u4f7f\u3063\u3066\u4e88\u6e2c\u5206\u5e03\u3092\u8a08\u7b97\u3059\u308b\u306e\u3067\u4fdd\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u305d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5206\u6563\u884c\u5217\u3082\u3064\u304b\u3063\u3066\u4e88\u6e2c\u5206\u5e03\u3092\u8a08\u7b97\u3057\u3066\u3044\u308b\u306e\u304c\u3001predict_dist\u30e1\u30bd\u30c3\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\nclass BayesianLogisticRegression(LogisticRegression):\n\n    def __init__(self, iter_max, alpha=0.1):\n        super(BayesianLogisticRegression, self).__init__(iter_max, alpha)\n\n    def fit(self, X, t):\n        super(BayesianLogisticRegression, self).fit(X, t)\n        y = self.predict_proba(X)\n        hessian = (X.T.dot(np.diag(y * (1 - y))).dot(X)\n                   + self.alpha * np.identity(len(self.w)))\n        self.w_var = np.linalg.inv(hessian)\n\n    def predict_dist(self, X):\n        mu_a = X.dot(self.w)\n        var_a = np.sum(X.dot(self.w_var) * X, axis=1)\n        return self._sigmoid(mu_a / np.sqrt(1 + np.pi * var_a / 8))\n\n\n\n\nBayesianLogisticRegression\n\u30e1\u30bd\u30c3\u30c9\u306e\u8aac\u660e\n\n\n\n\n__init__\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u5927\u66f4\u65b0\u56de\u6570\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e8b\u524d\u5206\u5e03\u306e\u7cbe\u5ea6\u306e\u8a2d\u5b9a\n\n\nfit\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u63a8\u5b9a\n\n\npredict_dist\n\u5165\u529b\u306b\u5bfe\u3059\u308b\u4e8b\u5f8c\u4e88\u6e2c\u5206\u5e03\u306e\u8a08\u7b97\n\n\n\n\n\u30b3\u30fc\u30c9\u5168\u4f53\nimport itertools\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nclass PolynomialFeatures(object):\n\n    def __init__(self, degree=2):\n        self.degree = degree\n\n    def transform(self, x):\n        x_t = x.transpose()\n        features = [np.ones(len(x))]\n        for degree in xrange(1, self.degree + 1):\n            for items in itertools.combinations_with_replacement(x_t, degree):\n                features.append(reduce(lambda x, y: x * y, items))\n        return np.array(features).transpose()\n\n\nclass LogisticRegression(object):\n\n    def __init__(self, iter_max, alpha=0):\n        self.iter_max = iter_max\n        self.alpha = alpha\n\n    def _sigmoid(self, a):\n        return np.divide(1, 1 + np.exp(-a))\n\n    def fit(self, X, t):\n        self.w = np.zeros(np.size(X, 1))\n        for i in xrange(self.iter_max):\n            w = np.copy(self.w)\n            y = self.predict_proba(X)\n            grad = X.T.dot(y - t) + self.alpha * w\n            hessian = (X.T.dot(np.diag(y * (1 - y))).dot(X)\n                       + self.alpha * np.identity(len(w)))\n            try:\n                self.w -= np.linalg.inv(hessian).dot(grad)\n            except np.linalg.LinAlgError:\n                break\n            if np.allclose(w, self.w):\n                break\n            if i == self.iter_max - 1:\n                print \"weight parameter w may not have converged\"\n\n    def predict(self, X):\n        return (self.predict_proba(X) > 0.5).astype(np.int)\n\n    def predict_proba(self, X):\n        return self._sigmoid(X.dot(self.w))\n\n\nclass BayesianLogisticRegression(LogisticRegression):\n\n    def __init__(self, iter_max, alpha=0.1):\n        super(BayesianLogisticRegression, self).__init__(iter_max, alpha)\n\n    def fit(self, X, t):\n        super(BayesianLogisticRegression, self).fit(X, t)\n        y = self.predict_proba(X)\n        hessian = (X.T.dot(np.diag(y * (1 - y))).dot(X)\n                   + self.alpha * np.identity(len(self.w)))\n        self.w_var = np.linalg.inv(hessian)\n\n    def predict_dist(self, X):\n        mu_a = X.dot(self.w)\n        var_a = np.sum(X.dot(self.w_var) * X, axis=1)\n        return self._sigmoid(mu_a / np.sqrt(1 + np.pi * var_a / 8))\n\n\ndef create_data_set():\n    x = np.random.normal(size=50).reshape(-1, 2)\n    y = np.random.normal(size=50).reshape(-1, 2)\n    y += np.array([2., 2.])\n    return (np.concatenate([x, y]), np.concatenate([np.zeros(25), np.ones(25)]))\n\n\ndef main():\n    x, labels = create_data_set()\n    colors = ['blue', 'red']\n    plt.scatter(x[:, 0], x[:, 1], c=[colors[int(label)] for label in labels])\n\n    features = PolynomialFeatures(degree=3)\n\n    classifier = BayesianLogisticRegression(iter_max=100, alpha=0.1)\n    classifier.fit(features.transform(x), labels)\n\n    X_test, Y_test = np.meshgrid(np.linspace(-2, 4, 100), np.linspace(-2, 4, 100))\n    x_test = np.array([X_test, Y_test]).transpose(1, 2, 0).reshape(-1, 2)\n    probs = classifier.predict_proba(features.transform(x_test))\n    Probs = probs.reshape(100, 100)\n    dists = classifier.predict_dist(features.transform(x_test))\n    Dists = dists.reshape(100, 100)\n    levels = np.linspace(0, 1, 5)\n    cp = plt.contour(X_test, Y_test, Probs, levels, colors='k', linestyles='dashed')\n    plt.clabel(cp, inline=True, fontsize=10)\n    plt.contourf(X_test, Y_test, Dists, levels, alpha=0.5)\n    plt.colorbar()\n    plt.xlim(-2, 4)\n    plt.ylim(-2, 4)\n    plt.show()\n\n\nif __name__ == '__main__':\n    main()\n\n\n\u7d50\u679c\n\n\u5b66\u7fd2\u30c7\u30fc\u30bf\uff1a\u9752\uff08\u30af\u30e9\u30b9\uff10\uff09\u3001\u8d64\uff08\u30af\u30e9\u30b9\uff11\uff09\u306e\u70b9\n\n\u9ed2\u306e\u70b9\u7dda\uff1a\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u51fa\u529b\u3001\u898b\u306b\u304f\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u4e0a\u304b\u3089\u30af\u30e9\u30b9\uff11\u306b\u5c5e\u3059\u308b\u78ba\u7387\u304c0.75,0.5,0.25\u306e\u7dda\n\n\u8272\u5206\u3051\uff1a\u30d9\u30a4\u30ba\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u51fa\u529b\u3001\u305d\u308c\u305e\u308c\u30af\u30e9\u30b9\uff11\u306b\u5c5e\u3059\u308b\u78ba\u7387\u304c\n\n\n\u8d64\uff1a0.75\u301c\n\u9ec4\uff1a0.5\u301c0.75\n\u6c34\uff1a0.25\u301c0.5\n\u9752\uff1a\u301c0.25\n\n\n\n\n\u3053\u308c\u3092\u898b\u308b\u3068\u3001\u78ba\u73870.5\u306e\u7dda\uff08\u771f\u3093\u4e2d\u306e\u70b9\u7dda\u3068\u6c34\u8272\u3068\u9ec4\u8272\u306e\u5883\u754c\u7dda\uff09\u306f\u3069\u3061\u3089\u306e\u5834\u5408\u3082\u5171\u901a\u3057\u3066\u3044\u308b\u306e\u306b\u5bfe\u3057\u3066\u30010.25\u30680.75\u306e\u7dda\u306f\u30d9\u30a4\u30ba\u7684\u306b\u6271\u3063\u305f\u65b9\u306f\u3088\u308a0.5\u306e\u7dda\u304b\u3089\u96e2\u308c\u3066\u3044\u3066\u3001\u3069\u3061\u3089\u306e\u30af\u30e9\u30b9\u306b\u5c5e\u3059\u308b\u306e\u304b\u66d6\u6627\u3067\u3042\u308b\u3053\u3068\u3092\u4f1d\u3048\u3066\u3044\u307e\u3059\u3002\u3055\u3089\u306b\u3001\u56f3\u306e\u5de6\u4e0a\u306e\u30c7\u30fc\u30bf\u70b9\u304c\u5168\u7136\u306a\u3044\u3068\u3053\u308d\u3067\u306f\u4ed6\u306e\u9818\u57df\u3088\u308a\u3082\u4e88\u6e2c\u5206\u5e03\u304c\u3088\u308a\u66d6\u6627\u306b\u306a\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u305d\u308c\u306b\u5bfe\u3057\u3066\u3001\u4e2d\u5fc3\u306e\u3042\u305f\u308a\u3067\u306f\u30c7\u30fc\u30bf\u70b9\u304c\u591a\u3044\u306e\u30670.25\u304b\u30890.75\u307e\u3067\u306e\u5e45\u304c\u72ed\u304f\u306a\u3063\u3066\u3044\u308b\u3002\n\u30af\u30e9\u30b91\u306b\u5c5e\u3057\u3066\u3044\u308b\u78ba\u7387\u3092\u3069\u3061\u3089\u304b\u306e\u65b9\u6cd5\u3067\u8a08\u7b97\u3057\u305f\u5f8c\u3001\u4f55\u3089\u304b\u306e\u6c7a\u5b9a\u57fa\u6e96\u306b\u3088\u3063\u3066\u3069\u3061\u3089\u304b\u306e\u30af\u30e9\u30b9\u306b\u5272\u308a\u5f53\u3066\u308b\u306e\u3067\u3059\u304c\u3001\u6c7a\u5b9a\u57fa\u6e96\u304c\u8aa4\u5206\u985e\u6700\u5c0f\u5316\u3067\u3042\u308c\u3070\u3069\u3061\u3089\u3092\u4f7f\u3063\u3066\u3082\u5909\u308f\u308a\u307e\u305b\u3093\u3002\u306a\u305c\u306a\u3089\u78ba\u73870.5\u306e\u7dda\u304c\u5171\u901a\u3057\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u3088\u308a\u8907\u96d1\u306a\u6c7a\u5b9a\u57fa\u6e96\u3092\u7528\u3044\u308b\u5834\u5408\u306f\u30d9\u30a4\u30ba\u7684\u306a\u6271\u3044\u3092\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u7d42\u308f\u308a\u306b\n\u4eca\u56de\u306f\u30e9\u30d7\u30e9\u30b9\u8fd1\u4f3c\u3092\u5229\u7528\u3057\u3066\u30d9\u30a4\u30ba\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u884c\u3046\u624b\u6cd5\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u30d9\u30a4\u30ba\u7684\u306b\u6271\u3046\u5229\u70b9\u3068\u3057\u3066\u306f\u3001\u30c7\u30fc\u30bf\u70b9\u304c\u591a\u304f\u5b58\u5728\u3059\u308b\u9818\u57df\u3068\u305d\u3046\u3067\u306a\u3044\u3068\u3053\u308d\u3068\u3067\u7570\u306a\u308b\u6319\u52d5\u3092\u3059\u308b\u3053\u3068\u3067\u3057\u3087\u3046\u304b\u3002\n\u30e9\u30d7\u30e9\u30b9\u8fd1\u4f3c\u3092\u7528\u3044\u308b\u3082\u306e\u4ee5\u5916\u306b\u3082\u5909\u5206\u30d9\u30a4\u30ba\u3092\u3064\u304b\u3063\u3066\u4e88\u6e2c\u5206\u5e03\u3092\u5c0e\u51fa\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308b\u305d\u3046\u3067\u3059\u3002PRML\u306e\u7b2c\uff11\uff10\u7ae0\u3067\u306f\u5909\u5206\u30d9\u30a4\u30ba\u3092\u4f7f\u3063\u3066\u3001\u8d85\u30d1\u30e9\u30e1\u30fc\u30bf$\\alpha$\u306e\u63a8\u5b9a\u3082\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u3061\u3089\u3082\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u66f2\u7dda\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3067\u306f\u30d9\u30a4\u30ba\u7684\u306b\u6271\u3063\u3066\u4e8b\u5f8c\u4e88\u6e2c\u5206\u5e03\u3092\u7b97\u51fa\u3057\u305f\u308a\u3082\u3057\u307e\u3059\u304c\u3001\u30af\u30e9\u30b9\u5206\u985e\u306b\u304a\u3044\u3066\u306f\u3042\u307e\u308a\u305d\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3084\u3089\u308c\u3066\u3044\u306a\u3044\u5370\u8c61\u304c\u3042\u308a\u3001\u4eca\u56de\u306f\u30af\u30e9\u30b9\u5206\u985e\u3067\u3088\u304f\u7528\u3044\u3089\u308c\u308b\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u3088\u308a\u30d9\u30a4\u30ba\u7684\u306b\u53d6\u308a\u6271\u3063\u3066\u4e8b\u5f8c\u4e88\u6e2c\u5206\u5e03\u3092\u8a08\u7b97\u3059\u308b\u30b3\u30fc\u30c9\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u30d9\u30a4\u30ba\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n\u4e0a\u3067\u3082\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u30af\u30e9\u30b9\u5206\u985e\u306b\u304a\u3044\u3066\u4e88\u6e2c\u5206\u5e03\u3092\u7b97\u51fa\u3057\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3092\u3042\u307e\u308a\u3001\u3068\u3044\u3046\u304b\u5168\u304f\u898b\u304b\u3051\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\uff08\u305f\u3060\u898b\u3066\u304d\u305f\u30b3\u30fc\u30c9\u304c\u5c11\u306a\u3044\u3060\u3051\u304b\u3082\uff09\u3002\n\u30d9\u30a4\u30ba\u7684\u306b\u4e88\u6e2c\u5206\u5e03\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u306f\u91cd\u307f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e8b\u5f8c\u5206\u5e03\u3092\u4f7f\u3063\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3064\u3044\u3066\u7a4d\u5206\u6d88\u53bb\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\u3057\u304b\u3057\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u306f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u7528\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u89e3\u6790\u7684\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3064\u3044\u3066\u7a4d\u5206\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u30e9\u30d7\u30e9\u30b9\u8fd1\u4f3c\u3092\u7528\u3044\u3066\u8fd1\u4f3c\u7684\u306b\u4e88\u6e2c\u5206\u5e03\u3092\u6c42\u3081\u307e\u3059\u3002\n\n\n## \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n\u307e\u305a2\u30af\u30e9\u30b9\u5206\u985e\u3092\u884c\u3046\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u8003\u3048\u3066\u3044\u304d\u307e\u3059\u3002$\\phi$\u3092\u3042\u308b\u70b9$x$\u306e\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u3068\u3057\u3066\u3001\u305d\u306e\u70b9\u304c\u30af\u30e9\u30b9$C_1$\u306b\u5c5e\u3059\u308b\u3092\n\n```math\np(C_1|\\phi) = y(\\phi) = \\sigma({\\bf w}^\\intercal\\phi)\n```\n\u3068\u8868\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001$\\sigma(\\cdot)$\u306f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570$\\sigma(x)={1\\over1+\\exp(-x)}$\u3068\u3059\u308b\u3002\u3053\u3053\u3067\u306f2\u30af\u30e9\u30b9\u5206\u985e\u3092\u8003\u3048\u3066\u3044\u308b\u306e\u3067\u3001\u30af\u30e9\u30b9$C_1$\u306b\u5c5e\u3059\u308b\u78ba\u7387\u304c\u5206\u304b\u308c\u3070\u3001\u3082\u3046\u4e00\u65b9\u306e\u30af\u30e9\u30b9$C_2$\u306b\u5c5e\u3059\u308b\u78ba\u7387\u306f$p(C_2|\\phi(x)) = 1 - p(C_1|\\phi(x))$\u3067\u4e0e\u3048\u3089\u308c\u308b\u3002\u3088\u3063\u3066\u3001\u3053\u308c\u4ee5\u964d\u306f\u30af\u30e9\u30b9$C_1$\u306b\u5c5e\u3059\u308b\u78ba\u7387\u306e\u65b9\u3060\u3051\u3092\u8003\u3048\u3066\u3044\u304f\u3002\n\n$\\phi_n=\\phi(x_n)$\u3001$t_n\\in\\\\{0,1\\\\}$\u3068\u3057\u3066\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8$\\\\{\\phi_n, t_n\\\\}_{n=1}^N$\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u306e\u5c24\u5ea6\u95a2\u6570\u306f\u30d9\u30eb\u30cc\u30fc\u30a4\u5206\u5e03\u3092\u30e2\u30c7\u30eb\u3068\u3057\u3066\u3001\n\n```math\n\\begin{align}\np({\\bf t}|{\\bf\\Phi},{\\bf w}) &= \\prod_{n=1}^N{\\rm Bern}(t_n|y_n)\\\\\n&= \\prod_{n=1}^N y_n^{t_n}(1 - y_n)^{1 - t_n}\n\\end{align}\n```\n\u3068\u306a\u308b\u3002\u305f\u3060\u3057\u3001${\\bf\\Phi}$\u306f\u6a2a\u30d9\u30af\u30c8\u30eb$\\phi^{\\rm T}$\u3092\u7e26\u306b\u4e26\u3079\u305f\u8a08\u753b\u884c\u5217\u3067\u3042\u308b\u3002\u3044\u3064\u3082\u306e\u3088\u3046\u306b\u30b3\u30b9\u30c8\u95a2\u6570\u3092\u8ca0\u306e\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u3068\u5b9a\u7fa9\u3059\u308b\u3068\u3001\u30af\u30ed\u30b9\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u306e\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\n\n```math\nE({\\bf w}) = -\\ln p({\\bf t}|{\\bf\\Phi},{\\bf w}) = -\\sum_{n=1}^N\\{t_n\\ln y_n + (1 - t_n)\\ln(1 - y_n)\\}\n```\n\u3053\u306e\u30b3\u30b9\u30c8\u95a2\u6570\u3092\u30d1\u30e9\u30e1\u30fc\u30bf${\\bf w}$\u306b\u3064\u3044\u3066\u4e00\u968e\u3001\u4e8c\u968e\u5fae\u5206\u3057\u305f\u7d50\u679c\u306f\u305d\u308c\u305e\u308c\n\n```math\n\\begin{align}\n\\nabla E({\\bf w}) &= \\sum_{n=1}^N (y_n - t_n) {\\bf\\phi}_n = {\\bf\\Phi}^\\intercal({\\bf y} - {\\bf t})\\\\\n{\\bf H} = \\nabla\\nabla E({\\bf w}) &= \\sum_{n=1}^N y_n(1 - y_n)\\phi_n\\phi_n^\\intercal = {\\bf\\Phi}^\\intercal{\\bf R}{\\bf\\Phi}\n\\end{align}\n```\n\u305f\u3060\u3057\u3001\u884c\u5217${\\bf R}$\u306f\u305d\u306e\u8981\u7d20\u304c$R_{nn}=y_n(1-y_n)$\u3068\u306a\u3063\u3066\u3044\u308b\u5bfe\u89d2\u884c\u5217\u3067\u3042\u308b\u3002\u3053\u308c\u3089\u306e\u7d50\u679c\u3092\u7528\u3044\u3066\u3001\n\n```math\n{\\bf w}^{new} = {\\bf w}^{old} - {\\bf H}^{-1}\\nabla E({\\bf w})\n```\n\u3068\u3057\u3066\u3001\u30d1\u30e9\u30e1\u30fc\u30bf${\\bf w}$\u304c\u53ce\u675f\u3059\u308b\u307e\u3067\u66f4\u65b0\u3092\u7e70\u308a\u8fd4\u3059\u3002\n\n## \u30e9\u30d7\u30e9\u30b9\u8fd1\u4f3c\n\u30d1\u30e9\u30e1\u30fc\u30bf${\\bf w}$\u306b\u3064\u3044\u3066\u4e8b\u524d\u5206\u5e03$p({\\bf w})=\\mathcal{N}({\\bf w}|{\\bf 0},\\alpha^{-1}{\\bf I})$\u3092\u5c0e\u5165\u3057\u3066\u3001\u30e9\u30d7\u30e9\u30b9\u8fd1\u4f3c\u3092\u4f7f\u3046\u3053\u3068\u3067\u30ac\u30a6\u30b9\u95a2\u6570\u306e\u5f62\u306b\u306a\u3063\u3066\u3044\u308b\u8fd1\u4f3c\u7684\u306a\u4e8b\u5f8c\u5206\u5e03\u3092\u6c42\u3081\u308b\u3002\u30d9\u30a4\u30ba\u306e\u5b9a\u7406\u304b\u3089\n\n```math\np({\\bf w}|{\\bf t},{\\bf\\Phi}) \\propto p({\\bf t}|{\\bf\\Phi},{\\bf w})p({\\bf w})\n```\n\u3067\u3042\u308b\u304b\u3089\u3001\u305d\u306e\u5bfe\u6570\u3092\u3068\u308b\u3068\n\n```math\n\\ln p({\\bf w}|{\\bf t},{\\bf\\Phi}) = -{\\alpha\\over2}{\\bf w}^\\intercal{\\bf w} + \\sum_{n=1}^N\\{t_n\\ln y_n + (1 - t_n)\\ln(1 - y_n)\\}\n```\n\u3068\u306a\u308b\u3002\u3053\u308c\u304b\u3089\u30ac\u30a6\u30b9\u8fd1\u4f3c\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u3001\u307e\u305a\u4e0a\u306e\u5f0f\u3092${\\bf w}$\u306b\u3064\u3044\u3066\u6700\u5927\u5316\u3057\u3066\u3001\u305d\u306e\u3068\u304d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf${\\bf w}_{MAP}$\u3068\u4e8c\u968e\u5fae\u5206$S_N^{-1}$\u3092\u7528\u3044\u3066\u8fd1\u4f3c\u7684\u306a\u4e8b\u5f8c\u5206\u5e03\u306f\n\n```math\nq({\\bf w}) = \\mathcal{N}({\\bf w}|{\\bf w}_{MAP}, S_N)\n```\n\u3068\u3057\u3066\u6c42\u3081\u3089\u308c\u308b\u3002\n\n## \u4e8b\u5f8c\u4e88\u6e2c\u5206\u5e03\n\u65b0\u3057\u3044\u70b9$\\phi$\u306b\u3064\u3044\u3066\u306e\u4e8b\u5f8c\u4e88\u6e2c\u5206\u5e03\u306f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e8b\u5f8c\u5206\u5e03\u306b\u3064\u3044\u3066\u5468\u8fba\u5316\u3059\u308b\u3053\u3068\u3067\u5f97\u3089\u308c\u308b\u3002\n\n```math\n\\begin{align}\np(C_1|\\phi,{\\bf t},{\\bf\\Phi}) &= \\int p(C_1|\\phi,{\\bf w})p({\\bf w}|{\\bf t},{\\bf\\Phi}){\\rm d}{\\bf w}\\\\\n&\\approx \\int \\sigma({\\bf w}^\\intercal\\phi)\\mathcal{N}({\\bf w}|{\\bf w}_{MAP},S_N){\\rm d}{\\bf w}\\\\\n&\\approx \\sigma\\left({\\mu\\over\\sqrt{1 + \\pi\\sigma^2/8}}\\right)\n\\end{align}\n```\n\u305f\u3060\u3057\u3001\n\n```math\n\\begin{align}\n\\mu &= {\\bf w}_{MAP}^\\intercal\\phi\\\\\n\\sigma^2 &= \\phi^\\intercal S_N\\phi\n\\end{align}\n```\n\u3068\u3059\u308b\u3002\u30d1\u30e9\u30e1\u30fc\u30bf${\\bf w}$\u306e\u4e8b\u5f8c\u5206\u5e03\u3092\u30e9\u30d7\u30e9\u30b9\u8fd1\u4f3c\u3057\u305f\u3053\u3068\u3001\u305d\u3057\u3066\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u30d7\u30ed\u30d3\u30c3\u30c8\u95a2\u6570\u3067\u8fd1\u4f3c\u3057\u305f\u3053\u3068\u3001\u3053\u306e\u4e8c\u3064\u306e\u8fd1\u4f3c\u304c\u7528\u3044\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u8a73\u3057\u3044\u5f0f\u5909\u5f62\u306fPRML\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\n# \u5b9f\u88c5\n## \u30d1\u30c3\u30b1\u30fc\u30b8\n\u3044\u3064\u3082\u306ematplotlib\u3001numpy\u306b\u52a0\u3048\u3066itertools\u3068\u3044\u3046Python\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u307e\u3059\u3002\n\n```python\nimport itertools\nimport matplotlib.pyplot as plt\nimport numpy as np\n```\n\n## \u8a08\u753b\u884c\u5217\uff1a\u591a\u9805\u5f0f\u7279\u5fb4\n\uff12\u6b21\u5143\u306e\u70b9$(x_1,x_2)$\u3092\uff12\u6b21\u306e\u591a\u9805\u5f0f\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\u3068\n\n```math\n\\phi(x_1,x_2) =\n\\begin{bmatrix}\n1\\\\\nx_1\\\\\nx_2\\\\\nx_1^2\\\\\nx_1x_2\\\\\nx_2^2\n\\end{bmatrix}\n```\n\u3068\u306a\u308a\u307e\u3059\u3002\u3044\u304f\u3064\u3082\u306e\uff12\u6b21\u5143\u306e\u70b9\u304b\u3089\u8a08\u753b\u884c\u5217\u306b\u5909\u63db\u3059\u308b\u30af\u30e9\u30b9\u304c\u4e0b\u306e\u3082\u306e\u3067\u3059\u3002\n\u4f8b\u3048\u3070\uff12\u6b21\u5143\u306e\u70b9$(2,5)$\u3068$(-3,1)$\u306e\uff12\u6b21\u591a\u9805\u5f0f\u7279\u5fb4\u306e\u8a08\u753b\u884c\u5217\u306f\n\n```math\n{\\bf\\Phi}=\n\\begin{bmatrix}\n1 & 2 & 5 & 2^2 & 2 \\times 5 & 5^2\\\\\n1 & 3 & -1 & 3^2 & 3 \\times (-1) & (-1)^2\n\\end{bmatrix}\n```\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```python\nclass PolynomialFeatures(object):\n\n    def __init__(self, degree=2):\n        self.degree = degree\n\n    def transform(self, x):\n        x_t = x.transpose()\n        features = [np.ones(len(x))]\n        for degree in xrange(1, self.degree + 1):\n            for items in itertools.combinations_with_replacement(x_t, degree):\n                features.append(reduce(lambda x, y: x * y, items))\n        return np.array(features).transpose()\n```\n\n## \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3068\u30d9\u30a4\u30ba\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u884c\u3046\u30af\u30e9\u30b9\u3092\u5225\u3005\u306b\u5206\u3051\u308b\u5fc5\u8981\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u4e8c\u3064\u306e\u9055\u3044\u3092\u9855\u8457\u306b\u3059\u308b\u305f\u3081\u306b\u4eca\u56de\u306f\u5206\u3051\u307e\u3057\u305f\u3002\n\n```python\nclass LogisticRegression(object):\n\n    def __init__(self, iter_max, alpha=0):\n        self.iter_max = iter_max\n        self.alpha = alpha\n\n    def _sigmoid(self, a):\n        return np.divide(1, 1 + np.exp(-a))\n\n    def fit(self, X, t):\n        self.w = np.zeros(np.size(X, 1))\n        for i in xrange(self.iter_max):\n            w = np.copy(self.w)\n            y = self.predict_proba(X)\n            grad = X.T.dot(y - t) + self.alpha * w\n            hessian = (X.T.dot(np.diag(y * (1 - y))).dot(X)\n                       + self.alpha * np.identity(len(w)))\n            try:\n                self.w -= np.linalg.solve(hessian, grad)\n            except np.linalg.LinAlgError:\n                break\n            if np.allclose(w, self.w):\n                break\n            if i == self.iter_max - 1:\n                print \"weight parameter w may not have converged\"\n\n    def predict(self, X):\n        return (self.predict_proba(X) > 0.5).astype(np.int)\n\n    def predict_proba(self, X):\n        return self._sigmoid(X.dot(self.w))\n```\n\n| LogisticRegression | \u30e1\u30bd\u30c3\u30c9\u306e\u8aac\u660e                                             |\n|:------------------:|------------------------------------------------------------|\n|     \\_\\_init\\_\\_   | \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u5927\u66f4\u65b0\u56de\u6570\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e8b\u524d\u5206\u5e03\u306e\u7cbe\u5ea6\u306e\u8a2d\u5b9a |\n|      _sigmoid      | \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570                               |\n|         fit        | \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u63a8\u5b9a                                           |\n|       predict      | \u5165\u529b\u306e\u30e9\u30d9\u30eb\u3092\u4e88\u6e2c                                         |\n|    predict_proba   | \u5165\u529b\u304c\u30e9\u30d9\u30eb1\u3068\u306a\u308b\u78ba\u7387\u3092\u8a08\u7b97                              |\n\n## \u30d9\u30a4\u30ba\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u5927\u4e8b\u5f8c\u78ba\u7387\u63a8\u5b9a\u306b\u304a\u3044\u3066\u6700\u983b\u5024\u3060\u3051\u3067\u306a\u304f\u8fd1\u4f3c\u7684\u306a\u5206\u6563\u3082\u6c42\u3081\u3066\u3044\u307e\u3059\u3002\u4e0a\u306e\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u3082\u30d8\u30c3\u30bb\u884c\u5217\uff08\u8fd1\u4f3c\u7684\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7cbe\u5ea6\u884c\u5217\uff09\u3092\u6c42\u3081\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u305d\u308c\u306f\u63a8\u5b9a\u3057\u3066\u3044\u308b\u3068\u304d\u306b\u305d\u306e\u884c\u5217\u3092\u4f7f\u3063\u3066\u3044\u308b\u3060\u3051\u306a\u306e\u3067\u305d\u306e\u884c\u5217\u3092\u4f55\u3089\u304b\u306e\u5909\u6570\u306b\u4fdd\u5b58\u3057\u3066\u306f\u3044\u307e\u305b\u3093\u304c\u3001\u30d9\u30a4\u30ba\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5206\u6563\u3082\u4f7f\u3063\u3066\u4e88\u6e2c\u5206\u5e03\u3092\u8a08\u7b97\u3059\u308b\u306e\u3067\u4fdd\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u305d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5206\u6563\u884c\u5217\u3082\u3064\u304b\u3063\u3066\u4e88\u6e2c\u5206\u5e03\u3092\u8a08\u7b97\u3057\u3066\u3044\u308b\u306e\u304c\u3001predict_dist\u30e1\u30bd\u30c3\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n\n```python\nclass BayesianLogisticRegression(LogisticRegression):\n\n    def __init__(self, iter_max, alpha=0.1):\n        super(BayesianLogisticRegression, self).__init__(iter_max, alpha)\n\n    def fit(self, X, t):\n        super(BayesianLogisticRegression, self).fit(X, t)\n        y = self.predict_proba(X)\n        hessian = (X.T.dot(np.diag(y * (1 - y))).dot(X)\n                   + self.alpha * np.identity(len(self.w)))\n        self.w_var = np.linalg.inv(hessian)\n\n    def predict_dist(self, X):\n        mu_a = X.dot(self.w)\n        var_a = np.sum(X.dot(self.w_var) * X, axis=1)\n        return self._sigmoid(mu_a / np.sqrt(1 + np.pi * var_a / 8))\n```\n\n| BayesianLogisticRegression | \u30e1\u30bd\u30c3\u30c9\u306e\u8aac\u660e                                             |\n|:--------------------------:|------------------------------------------------------------|\n|         \\_\\_init\\_\\_       | \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u5927\u66f4\u65b0\u56de\u6570\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e8b\u524d\u5206\u5e03\u306e\u7cbe\u5ea6\u306e\u8a2d\u5b9a |\n|             fit            | \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u63a8\u5b9a                                           |\n|        predict_dist        | \u5165\u529b\u306b\u5bfe\u3059\u308b\u4e8b\u5f8c\u4e88\u6e2c\u5206\u5e03\u306e\u8a08\u7b97                             |\n\n## \u30b3\u30fc\u30c9\u5168\u4f53\n```python\nimport itertools\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nclass PolynomialFeatures(object):\n\n    def __init__(self, degree=2):\n        self.degree = degree\n\n    def transform(self, x):\n        x_t = x.transpose()\n        features = [np.ones(len(x))]\n        for degree in xrange(1, self.degree + 1):\n            for items in itertools.combinations_with_replacement(x_t, degree):\n                features.append(reduce(lambda x, y: x * y, items))\n        return np.array(features).transpose()\n\n\nclass LogisticRegression(object):\n\n    def __init__(self, iter_max, alpha=0):\n        self.iter_max = iter_max\n        self.alpha = alpha\n\n    def _sigmoid(self, a):\n        return np.divide(1, 1 + np.exp(-a))\n\n    def fit(self, X, t):\n        self.w = np.zeros(np.size(X, 1))\n        for i in xrange(self.iter_max):\n            w = np.copy(self.w)\n            y = self.predict_proba(X)\n            grad = X.T.dot(y - t) + self.alpha * w\n            hessian = (X.T.dot(np.diag(y * (1 - y))).dot(X)\n                       + self.alpha * np.identity(len(w)))\n            try:\n                self.w -= np.linalg.inv(hessian).dot(grad)\n            except np.linalg.LinAlgError:\n                break\n            if np.allclose(w, self.w):\n                break\n            if i == self.iter_max - 1:\n                print \"weight parameter w may not have converged\"\n\n    def predict(self, X):\n        return (self.predict_proba(X) > 0.5).astype(np.int)\n\n    def predict_proba(self, X):\n        return self._sigmoid(X.dot(self.w))\n\n\nclass BayesianLogisticRegression(LogisticRegression):\n\n    def __init__(self, iter_max, alpha=0.1):\n        super(BayesianLogisticRegression, self).__init__(iter_max, alpha)\n\n    def fit(self, X, t):\n        super(BayesianLogisticRegression, self).fit(X, t)\n        y = self.predict_proba(X)\n        hessian = (X.T.dot(np.diag(y * (1 - y))).dot(X)\n                   + self.alpha * np.identity(len(self.w)))\n        self.w_var = np.linalg.inv(hessian)\n\n    def predict_dist(self, X):\n        mu_a = X.dot(self.w)\n        var_a = np.sum(X.dot(self.w_var) * X, axis=1)\n        return self._sigmoid(mu_a / np.sqrt(1 + np.pi * var_a / 8))\n\n\ndef create_data_set():\n    x = np.random.normal(size=50).reshape(-1, 2)\n    y = np.random.normal(size=50).reshape(-1, 2)\n    y += np.array([2., 2.])\n    return (np.concatenate([x, y]), np.concatenate([np.zeros(25), np.ones(25)]))\n\n\ndef main():\n    x, labels = create_data_set()\n    colors = ['blue', 'red']\n    plt.scatter(x[:, 0], x[:, 1], c=[colors[int(label)] for label in labels])\n\n    features = PolynomialFeatures(degree=3)\n\n    classifier = BayesianLogisticRegression(iter_max=100, alpha=0.1)\n    classifier.fit(features.transform(x), labels)\n\n    X_test, Y_test = np.meshgrid(np.linspace(-2, 4, 100), np.linspace(-2, 4, 100))\n    x_test = np.array([X_test, Y_test]).transpose(1, 2, 0).reshape(-1, 2)\n    probs = classifier.predict_proba(features.transform(x_test))\n    Probs = probs.reshape(100, 100)\n    dists = classifier.predict_dist(features.transform(x_test))\n    Dists = dists.reshape(100, 100)\n    levels = np.linspace(0, 1, 5)\n    cp = plt.contour(X_test, Y_test, Probs, levels, colors='k', linestyles='dashed')\n    plt.clabel(cp, inline=True, fontsize=10)\n    plt.contourf(X_test, Y_test, Dists, levels, alpha=0.5)\n    plt.colorbar()\n    plt.xlim(-2, 4)\n    plt.ylim(-2, 4)\n    plt.show()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n# \u7d50\u679c\n\n- \u5b66\u7fd2\u30c7\u30fc\u30bf\uff1a\u9752\uff08\u30af\u30e9\u30b9\uff10\uff09\u3001\u8d64\uff08\u30af\u30e9\u30b9\uff11\uff09\u306e\u70b9\n- **\u9ed2\u306e\u70b9\u7dda\uff1a\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u51fa\u529b**\u3001\u898b\u306b\u304f\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u4e0a\u304b\u3089\u30af\u30e9\u30b9\uff11\u306b\u5c5e\u3059\u308b\u78ba\u7387\u304c0.75,0.5,0.25\u306e\u7dda\n- **\u8272\u5206\u3051\uff1a\u30d9\u30a4\u30ba\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u51fa\u529b**\u3001\u305d\u308c\u305e\u308c\u30af\u30e9\u30b9\uff11\u306b\u5c5e\u3059\u308b\u78ba\u7387\u304c\n    - \u8d64\uff1a0.75\u301c\n    - \u9ec4\uff1a0.5\u301c0.75\n    - \u6c34\uff1a0.25\u301c0.5\n    - \u9752\uff1a\u301c0.25\n\n![predictive_distribution.png](https://qiita-image-store.s3.amazonaws.com/0/148017/979d9683-b975-9347-9ba2-d45353d483da.png)\n\n\u3053\u308c\u3092\u898b\u308b\u3068\u3001\u78ba\u73870.5\u306e\u7dda\uff08\u771f\u3093\u4e2d\u306e\u70b9\u7dda\u3068\u6c34\u8272\u3068\u9ec4\u8272\u306e\u5883\u754c\u7dda\uff09\u306f\u3069\u3061\u3089\u306e\u5834\u5408\u3082\u5171\u901a\u3057\u3066\u3044\u308b\u306e\u306b\u5bfe\u3057\u3066\u30010.25\u30680.75\u306e\u7dda\u306f\u30d9\u30a4\u30ba\u7684\u306b\u6271\u3063\u305f\u65b9\u306f\u3088\u308a0.5\u306e\u7dda\u304b\u3089\u96e2\u308c\u3066\u3044\u3066\u3001\u3069\u3061\u3089\u306e\u30af\u30e9\u30b9\u306b\u5c5e\u3059\u308b\u306e\u304b\u66d6\u6627\u3067\u3042\u308b\u3053\u3068\u3092\u4f1d\u3048\u3066\u3044\u307e\u3059\u3002\u3055\u3089\u306b\u3001\u56f3\u306e\u5de6\u4e0a\u306e\u30c7\u30fc\u30bf\u70b9\u304c\u5168\u7136\u306a\u3044\u3068\u3053\u308d\u3067\u306f\u4ed6\u306e\u9818\u57df\u3088\u308a\u3082\u4e88\u6e2c\u5206\u5e03\u304c\u3088\u308a\u66d6\u6627\u306b\u306a\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u305d\u308c\u306b\u5bfe\u3057\u3066\u3001\u4e2d\u5fc3\u306e\u3042\u305f\u308a\u3067\u306f\u30c7\u30fc\u30bf\u70b9\u304c\u591a\u3044\u306e\u30670.25\u304b\u30890.75\u307e\u3067\u306e\u5e45\u304c\u72ed\u304f\u306a\u3063\u3066\u3044\u308b\u3002\n\u30af\u30e9\u30b91\u306b\u5c5e\u3057\u3066\u3044\u308b\u78ba\u7387\u3092\u3069\u3061\u3089\u304b\u306e\u65b9\u6cd5\u3067\u8a08\u7b97\u3057\u305f\u5f8c\u3001\u4f55\u3089\u304b\u306e\u6c7a\u5b9a\u57fa\u6e96\u306b\u3088\u3063\u3066\u3069\u3061\u3089\u304b\u306e\u30af\u30e9\u30b9\u306b\u5272\u308a\u5f53\u3066\u308b\u306e\u3067\u3059\u304c\u3001\u6c7a\u5b9a\u57fa\u6e96\u304c\u8aa4\u5206\u985e\u6700\u5c0f\u5316\u3067\u3042\u308c\u3070\u3069\u3061\u3089\u3092\u4f7f\u3063\u3066\u3082\u5909\u308f\u308a\u307e\u305b\u3093\u3002\u306a\u305c\u306a\u3089\u78ba\u73870.5\u306e\u7dda\u304c\u5171\u901a\u3057\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u3088\u308a\u8907\u96d1\u306a\u6c7a\u5b9a\u57fa\u6e96\u3092\u7528\u3044\u308b\u5834\u5408\u306f\u30d9\u30a4\u30ba\u7684\u306a\u6271\u3044\u3092\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n# \u7d42\u308f\u308a\u306b\n\u4eca\u56de\u306f\u30e9\u30d7\u30e9\u30b9\u8fd1\u4f3c\u3092\u5229\u7528\u3057\u3066\u30d9\u30a4\u30ba\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u884c\u3046\u624b\u6cd5\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u30d9\u30a4\u30ba\u7684\u306b\u6271\u3046\u5229\u70b9\u3068\u3057\u3066\u306f\u3001\u30c7\u30fc\u30bf\u70b9\u304c\u591a\u304f\u5b58\u5728\u3059\u308b\u9818\u57df\u3068\u305d\u3046\u3067\u306a\u3044\u3068\u3053\u308d\u3068\u3067\u7570\u306a\u308b\u6319\u52d5\u3092\u3059\u308b\u3053\u3068\u3067\u3057\u3087\u3046\u304b\u3002\n\u30e9\u30d7\u30e9\u30b9\u8fd1\u4f3c\u3092\u7528\u3044\u308b\u3082\u306e\u4ee5\u5916\u306b\u3082\u5909\u5206\u30d9\u30a4\u30ba\u3092\u3064\u304b\u3063\u3066\u4e88\u6e2c\u5206\u5e03\u3092\u5c0e\u51fa\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308b\u305d\u3046\u3067\u3059\u3002PRML\u306e\u7b2c\uff11\uff10\u7ae0\u3067\u306f\u5909\u5206\u30d9\u30a4\u30ba\u3092\u4f7f\u3063\u3066\u3001\u8d85\u30d1\u30e9\u30e1\u30fc\u30bf$\\alpha$\u306e\u63a8\u5b9a\u3082\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u3061\u3089\u3082\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["PRML", "Python", "\u6a5f\u68b0\u5b66\u7fd2"]}