{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306fCrystal Advent Calendar 2015\u306e6\u65e5\u76ee\u3067\u3059\u3002\u66f8\u304d\u59cb\u3081\u305f\u6bb5\u968e\u306723:30\u3068\u30e4\u30d0\u3044\u306e\u3067\u99c6\u3051\u8db3\u3067\u3044\u304d\u307e\u3059\u3002\nAmorphous\u3068\u3044\u3046\u30d1\u30fc\u30b5\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u3063\u305f\u306e\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nAmorphous\u306e\u7d39\u4ecb\nCrystal\u3067\u5b9f\u88c5\u3055\u308c\u305f\u30d1\u30fc\u30b5\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002Haskell\u306eParsec\u3084Scala\u306escala-parser-combinators\u307f\u305f\u3044\u306a\u611f\u3058\u3067\u3059\u3002\u7d30\u304b\u3044\u8aac\u660e\u306f\u7701\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u3001Amorphous\u3067\u66f8\u3044\u305fJSON\u30d1\u30fc\u30b5\u30fc\u306e\u4f8b\u3067\u3059\u3002\n\njson.cr\nrequire \"colorize\"\n\nrequire \"amorphous\"\n\nclass Highlighter\n  STYLE = {\n    error:    {:white, :red, :bold},\n    punctual: {:white,  nil, :bold},\n    literal:  {:red  ,  nil, :bold},\n    string:   {:green,  nil,  nil},\n    keyword:  {:cyan ,  nil,  nil},\n  }\n\n  def highlight(io, str, style)\n    if style && (s = STYLE[style]?)\n      str = str.colorize\n      str = str.fore(s[0].not_nil!) if s[0]\n      str = str.back(s[1].not_nil!) if s[1]\n      str = str.mode(s[2].not_nil!) if s[2]\n    end\n    io << str\n  end\nend\n\nmodule JSONParser\n  alias Result = Nil | Bool | String | Float64 | Array(Result) | Hash(String, Result)\n\n\n  extend self\n\n  include Amorphous\n  include Amorphous::Parsers\n\n\n  VALUE = Parser(Result).lazy\n\n\n  # RFC 7159\n  # https://tools.ietf.org/html/rfc7159\n\n  # 2. JSON Grammer\n\n  WS = (char(' ') | char('\\t') | char('\\n') | char('\\r')).skip_many\n\n  JSON = WS >> VALUE << WS << eof\n\n  BEGIN_ARRAY = WS >> char('[').highlight(:punctual) << WS\n  BEGIN_OBJECT = WS >> char('{').highlight(:punctual) << WS\n  END_ARRAY = WS >> char(']').highlight(:punctual) << WS\n  END_OBJECT = WS >> char('}').highlight(:punctual) << WS\n\n  NAME_SEPARATOR = WS >> char(':').highlight(:punctual) << WS\n  VALUE_SEPARATOR = WS >> char(',').highlight(:punctual) << WS\n\n\n  # 6. Number\n\n  DIGIT = range('0'..'9')\n  DIGIT1_9 = range('1'..'9')\n  E = char('e') | char('E')\n  MINUS = char('-')\n  PLUS = char('+')\n  EXP = seq(E, (MINUS | PLUS).opt, DIGIT.some) do |e, op, num|\n    \"#{e}#{op}#{num}\"\n  end\n  FRAC = seq(char('.'), DIGIT.some) do |pt, num|\n    \"#{pt}#{num}\"\n  end\n  INT = char('0').map(&.to_s) | seq(DIGIT1_9, DIGIT.many.map(&.join)){ |c, s| \"#{c}#{s}\" }\n\n  NUMBER = seq(MINUS.opt, INT, FRAC.opt, EXP.opt) do |op, i, f, e|\n    \"#{op}#{i}#{f}#{e}\".to_f as Result\n  end.highlight(:literal).name(\"number\")\n\n\n  # 7. Strings\n\n  HEXDIG = DIGIT | range('a'..'f') | range('A'..'F')\n  UNESCAPED = range('\\u{20}'..'\\u{21}') | range('\\u{23}'..'\\u{5B}') | range('\\u{5D}'..'\\u{10FFFF}')\n  CHAR = UNESCAPED | (char('\\\\') >> (\n    char('\"')  |\n    char('\\\\') |\n    char('/')  |\n    char('b').map{ '\\b' } |\n    char('f').map{ '\\f' } |\n    char('n').map{ '\\n' } |\n    char('r').map{ '\\r' } |\n    char('t').map{ '\\t' } |\n    char('u') >> HEXDIG.count(4).map{ |s| s.join.to_i(16).chr } |\n    fail(Char, \"Invalid escape sequence\"))) |\n    fail(Char, \"Invalid character\")\n  STRING = (char('\"') >> CHAR.many.map(&.join) << char('\"'))\n    .highlight(:string).name(\"string\")\n\n\n  # 4. Objects\n\n  MEMBER = seq(STRING << NAME_SEPARATOR, VALUE)\n  OBJECT = (BEGIN_OBJECT >> MEMBER.sep_by(VALUE_SEPARATOR) << END_OBJECT)\n    .map do |object|\n      Hash(String, Result).new.tap do |result|\n        object.each do |name_and_value|\n          name, value = name_and_value\n          result[name] = value\n        end\n      end as Result\n    end\n\n\n  # 5. Arrays\n\n  ARRAY = BEGIN_ARRAY >> VALUE.sep_by(VALUE_SEPARATOR).map{ |a| a as Result } << END_ARRAY\n\n\n  # 3. Values\n\n  TRUE = string(\"true\").map{ true as Result }.highlight(:keyword).name(\"true\")\n  FALSE = string(\"false\").map{ false as Result }.highlight(:keyword).name(\"false\")\n  NULL = string(\"null\").map{ nil as Result }.highlight(:keyword).name(\"null\")\n\n  VALUE.bind = TRUE | FALSE | NULL | OBJECT | ARRAY | NUMBER | STRING.map{ |s| s as Result }\n\n\n  def run(source : String)\n    JSONParser.run(Source.new MemoryIO.new(source), \"<source>\")\n  end\n\n  def run(source)\n    JSON.run source\n  end\nend\n\ndef test(source)\n  puts \"Source: #{source.inspect}\"\n  case res = JSONParser.run source\n  when Amorphous::Success\n    puts \"Result: #{res.value.inspect}\"\n  else\n    print \"Failure: \"\n    res.to_s STDOUT, Highlighter.new\n  end\n  puts \"---\"\nend\n\ntest %({})\ntest %(\"\\\\uGGGG\")\ntest %({\"hello\": \"world\"})\ntest %({\"ok\": \"\\\\google\"})\ntest %({\"hey\": \"siri\",})\n\n\n\u7121\u99c4\u306b\u30b3\u30fc\u30c9\u304c\u9577\u304f\u3066\u3059\u307f\u307e\u305b\u3093\u3002JSONParser\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u4e2d\u8eab\u304cAmorphous\u3067\u7d44\u307f\u7acb\u3066\u3089\u308c\u305f\u30d1\u30fc\u30b5\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\u5fc3\u610f\u6c17\u3067\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\u3053\u308c\u3060\u3051\u3060\u3068\u3001rparsec\u3092Crystal\u306b\u79fb\u690d\u3057\u305f\u3060\u3051\u307f\u305f\u3044\u3067\u9762\u767d\u304f\u306a\u3044\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u5de5\u592b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4e0a\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306a\u51fa\u529b\u304c\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u6ce8\u76ee\u3057\u3066\u3082\u3089\u3044\u305f\u3044\u306e\u306f\u3001\u30d1\u30fc\u30b9\u30a8\u30e9\u30fc\u51fa\u529b\u306e\u969b\u306b\u3001\u30a8\u30e9\u30fc\u306e\u3042\u3063\u305f\u884c\u304c\u8868\u793a\u3055\u308c\u3066\u30a8\u30e9\u30fc\u306e\u4f4d\u7f6e\u304c\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u3066\u3044\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u305d\u306e\u524d\u306e\u90e8\u5206\u3082\u8272\u4ed8\u3051\u3055\u308c\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u51fa\u529b\u304c\u3067\u304d\u308b\u30d1\u30fc\u30b5\u30fc\u306f\u306a\u304b\u306a\u304b\u7121\u3044\u3093\u3058\u3083\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u3053\u3046\u3044\u3046\u30d1\u30fc\u30b5\u30fc\u304c\u5f79\u306b\u7acb\u3064\u306e\u306f\u3001\u4f8b\u3048\u3070\u3001\u3042\u307e\u308a\u901f\u5ea6\u306e\u8981\u6c42\u3055\u308c\u306a\u3044\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306e\u3068\u304d\u306a\u3093\u304b\u306a\u3093\u3058\u3083\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u83ef\u3084\u304b\u306a\u65b9\u304c\u4fbf\u5229\u304b\u3068\u3002\n\n\u61fa\u6094\n\u8cac\u4efb\u306f\u679c\u305f\u3057\u305f\u306e\u3067\u61fa\u6094\u3057\u307e\u3059\u3002\n\u307e\u305aAmorphous\u3067\u3059\u304c\u3001\u307e\u3063\u305f\u304f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u30c6\u30b9\u30c8\u3082\u66f8\u3044\u3066\u306a\u3044\u3067\u3059\u3002\u306a\u305c\u306a\u3089\u4eca\u65e5\u4f5c\u3063\u305f\u304b\u3089\u3067\u3059\u3002\u3084\u3063\u3064\u3051\u4ed5\u4e8b\u306f\u3044\u3051\u307e\u305b\u3093\u306d\u3002\u6765\u9031\u304f\u3089\u3044\u307e\u3067\u306b\u306f\u6574\u5099\u3057\u305f\u3044\u3067\u3059\u3002\u305b\u3063\u304b\u304f\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u4f5c\u3063\u305f\u306e\u306b\u4f7f\u308f\u305a\u3058\u307e\u3044\u3068\u306f\u2025\u2025\u3002\u7121\u5ff5\u306a\u308a\u3002\nAdvent Calendar\u3092\u66f8\u304f\u3053\u3068\u81ea\u4f53\u306f11\u6708\u306b\u306f\u5206\u304b\u3063\u3066\u3044\u305f\u3053\u3068\u306a\u3093\u3060\u304b\u3089\u3001\u3082\u3063\u3068\u524d\u3005\u304b\u3089\u6e96\u5099\u3057\u3066\u304a\u304f\u3079\u304d\u3067\u3057\u305f\u3002\n\u8a18\u4e8b\u3082\u9069\u5f53\u3059\u304e\u307e\u3059\u306d\u3002\n\u305d\u308d\u305d\u308d12:00\u306b\u306a\u308a\u305d\u3046\u306a\u306e\u3067\u3053\u308c\u304f\u3089\u3044\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\u3053\u306e\u8a18\u4e8b\u306f[Crystal Advent Calendar 2015](http://www.adventar.org/calendars/800)\u306e6\u65e5\u76ee\u3067\u3059\u3002\u66f8\u304d\u59cb\u3081\u305f\u6bb5\u968e\u306723:30\u3068\u30e4\u30d0\u3044\u306e\u3067\u99c6\u3051\u8db3\u3067\u3044\u304d\u307e\u3059\u3002\n\n[Amorphous][]\u3068\u3044\u3046\u30d1\u30fc\u30b5\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u3063\u305f\u306e\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n## [Amorphous][]\u306e\u7d39\u4ecb\n\nCrystal\u3067\u5b9f\u88c5\u3055\u308c\u305f\u30d1\u30fc\u30b5\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002Haskell\u306eParsec\u3084Scala\u306escala-parser-combinators\u307f\u305f\u3044\u306a\u611f\u3058\u3067\u3059\u3002\u7d30\u304b\u3044\u8aac\u660e\u306f\u7701\u304d\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u3001[Amorphous][]\u3067\u66f8\u3044\u305fJSON\u30d1\u30fc\u30b5\u30fc\u306e\u4f8b\u3067\u3059\u3002\n\n```ruby:json.cr\nrequire \"colorize\"\n\nrequire \"amorphous\"\n\nclass Highlighter\n  STYLE = {\n    error:    {:white, :red, :bold},\n    punctual: {:white,  nil, :bold},\n    literal:  {:red  ,  nil, :bold},\n    string:   {:green,  nil,  nil},\n    keyword:  {:cyan ,  nil,  nil},\n  }\n\n  def highlight(io, str, style)\n    if style && (s = STYLE[style]?)\n      str = str.colorize\n      str = str.fore(s[0].not_nil!) if s[0]\n      str = str.back(s[1].not_nil!) if s[1]\n      str = str.mode(s[2].not_nil!) if s[2]\n    end\n    io << str\n  end\nend\n\nmodule JSONParser\n  alias Result = Nil | Bool | String | Float64 | Array(Result) | Hash(String, Result)\n\n\n  extend self\n\n  include Amorphous\n  include Amorphous::Parsers\n\n\n  VALUE = Parser(Result).lazy\n\n\n  # RFC 7159\n  # https://tools.ietf.org/html/rfc7159\n\n  # 2. JSON Grammer\n\n  WS = (char(' ') | char('\\t') | char('\\n') | char('\\r')).skip_many\n\n  JSON = WS >> VALUE << WS << eof\n\n  BEGIN_ARRAY = WS >> char('[').highlight(:punctual) << WS\n  BEGIN_OBJECT = WS >> char('{').highlight(:punctual) << WS\n  END_ARRAY = WS >> char(']').highlight(:punctual) << WS\n  END_OBJECT = WS >> char('}').highlight(:punctual) << WS\n\n  NAME_SEPARATOR = WS >> char(':').highlight(:punctual) << WS\n  VALUE_SEPARATOR = WS >> char(',').highlight(:punctual) << WS\n\n\n  # 6. Number\n\n  DIGIT = range('0'..'9')\n  DIGIT1_9 = range('1'..'9')\n  E = char('e') | char('E')\n  MINUS = char('-')\n  PLUS = char('+')\n  EXP = seq(E, (MINUS | PLUS).opt, DIGIT.some) do |e, op, num|\n    \"#{e}#{op}#{num}\"\n  end\n  FRAC = seq(char('.'), DIGIT.some) do |pt, num|\n    \"#{pt}#{num}\"\n  end\n  INT = char('0').map(&.to_s) | seq(DIGIT1_9, DIGIT.many.map(&.join)){ |c, s| \"#{c}#{s}\" }\n\n  NUMBER = seq(MINUS.opt, INT, FRAC.opt, EXP.opt) do |op, i, f, e|\n    \"#{op}#{i}#{f}#{e}\".to_f as Result\n  end.highlight(:literal).name(\"number\")\n\n\n  # 7. Strings\n\n  HEXDIG = DIGIT | range('a'..'f') | range('A'..'F')\n  UNESCAPED = range('\\u{20}'..'\\u{21}') | range('\\u{23}'..'\\u{5B}') | range('\\u{5D}'..'\\u{10FFFF}')\n  CHAR = UNESCAPED | (char('\\\\') >> (\n    char('\"')  |\n    char('\\\\') |\n    char('/')  |\n    char('b').map{ '\\b' } |\n    char('f').map{ '\\f' } |\n    char('n').map{ '\\n' } |\n    char('r').map{ '\\r' } |\n    char('t').map{ '\\t' } |\n    char('u') >> HEXDIG.count(4).map{ |s| s.join.to_i(16).chr } |\n    fail(Char, \"Invalid escape sequence\"))) |\n    fail(Char, \"Invalid character\")\n  STRING = (char('\"') >> CHAR.many.map(&.join) << char('\"'))\n    .highlight(:string).name(\"string\")\n\n\n  # 4. Objects\n\n  MEMBER = seq(STRING << NAME_SEPARATOR, VALUE)\n  OBJECT = (BEGIN_OBJECT >> MEMBER.sep_by(VALUE_SEPARATOR) << END_OBJECT)\n    .map do |object|\n      Hash(String, Result).new.tap do |result|\n        object.each do |name_and_value|\n          name, value = name_and_value\n          result[name] = value\n        end\n      end as Result\n    end\n\n\n  # 5. Arrays\n\n  ARRAY = BEGIN_ARRAY >> VALUE.sep_by(VALUE_SEPARATOR).map{ |a| a as Result } << END_ARRAY\n\n\n  # 3. Values\n\n  TRUE = string(\"true\").map{ true as Result }.highlight(:keyword).name(\"true\")\n  FALSE = string(\"false\").map{ false as Result }.highlight(:keyword).name(\"false\")\n  NULL = string(\"null\").map{ nil as Result }.highlight(:keyword).name(\"null\")\n\n  VALUE.bind = TRUE | FALSE | NULL | OBJECT | ARRAY | NUMBER | STRING.map{ |s| s as Result }\n\n\n  def run(source : String)\n    JSONParser.run(Source.new MemoryIO.new(source), \"<source>\")\n  end\n\n  def run(source)\n    JSON.run source\n  end\nend\n\ndef test(source)\n  puts \"Source: #{source.inspect}\"\n  case res = JSONParser.run source\n  when Amorphous::Success\n    puts \"Result: #{res.value.inspect}\"\n  else\n    print \"Failure: \"\n    res.to_s STDOUT, Highlighter.new\n  end\n  puts \"---\"\nend\n\ntest %({})\ntest %(\"\\\\uGGGG\")\ntest %({\"hello\": \"world\"})\ntest %({\"ok\": \"\\\\google\"})\ntest %({\"hey\": \"siri\",})\n```\n\n\u7121\u99c4\u306b\u30b3\u30fc\u30c9\u304c\u9577\u304f\u3066\u3059\u307f\u307e\u305b\u3093\u3002`JSONParser`\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u4e2d\u8eab\u304c[Amorphous][]\u3067\u7d44\u307f\u7acb\u3066\u3089\u308c\u305f\u30d1\u30fc\u30b5\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\u5fc3\u610f\u6c17\u3067\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\n\u3053\u308c\u3060\u3051\u3060\u3068\u3001rparsec\u3092Crystal\u306b\u79fb\u690d\u3057\u305f\u3060\u3051\u307f\u305f\u3044\u3067\u9762\u767d\u304f\u306a\u3044\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u5de5\u592b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4e0a\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306a\u51fa\u529b\u304c\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\n![\u30b9\u30af\u30b7\u30e7](https://qiita-image-store.s3.amazonaws.com/0/68263/4fdd3bde-78b8-0739-12ec-bb60f11158b0.png)\n\n\u6ce8\u76ee\u3057\u3066\u3082\u3089\u3044\u305f\u3044\u306e\u306f\u3001\u30d1\u30fc\u30b9\u30a8\u30e9\u30fc\u51fa\u529b\u306e\u969b\u306b\u3001\u30a8\u30e9\u30fc\u306e\u3042\u3063\u305f\u884c\u304c\u8868\u793a\u3055\u308c\u3066\u30a8\u30e9\u30fc\u306e\u4f4d\u7f6e\u304c\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u3066\u3044\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u305d\u306e\u524d\u306e\u90e8\u5206\u3082\u8272\u4ed8\u3051\u3055\u308c\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u51fa\u529b\u304c\u3067\u304d\u308b\u30d1\u30fc\u30b5\u30fc\u306f\u306a\u304b\u306a\u304b\u7121\u3044\u3093\u3058\u3083\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u3053\u3046\u3044\u3046\u30d1\u30fc\u30b5\u30fc\u304c\u5f79\u306b\u7acb\u3064\u306e\u306f\u3001\u4f8b\u3048\u3070\u3001\u3042\u307e\u308a\u901f\u5ea6\u306e\u8981\u6c42\u3055\u308c\u306a\u3044\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306e\u3068\u304d\u306a\u3093\u304b\u306a\u3093\u3058\u3083\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u83ef\u3084\u304b\u306a\u65b9\u304c\u4fbf\u5229\u304b\u3068\u3002\n\n## \u61fa\u6094\n\n\u8cac\u4efb\u306f\u679c\u305f\u3057\u305f\u306e\u3067\u61fa\u6094\u3057\u307e\u3059\u3002\n\n\u307e\u305a[Amorphous][]\u3067\u3059\u304c\u3001\u307e\u3063\u305f\u304f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u30c6\u30b9\u30c8\u3082\u66f8\u3044\u3066\u306a\u3044\u3067\u3059\u3002\u306a\u305c\u306a\u3089\u4eca\u65e5\u4f5c\u3063\u305f\u304b\u3089\u3067\u3059\u3002\u3084\u3063\u3064\u3051\u4ed5\u4e8b\u306f\u3044\u3051\u307e\u305b\u3093\u306d\u3002\u6765\u9031\u304f\u3089\u3044\u307e\u3067\u306b\u306f\u6574\u5099\u3057\u305f\u3044\u3067\u3059\u3002\u305b\u3063\u304b\u304f[\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea](https://github.com/MakeNowJust/tap)\u3082\u4f5c\u3063\u305f\u306e\u306b\u4f7f\u308f\u305a\u3058\u307e\u3044\u3068\u306f\u2025\u2025\u3002\u7121\u5ff5\u306a\u308a\u3002\n\nAdvent Calendar\u3092\u66f8\u304f\u3053\u3068\u81ea\u4f53\u306f11\u6708\u306b\u306f\u5206\u304b\u3063\u3066\u3044\u305f\u3053\u3068\u306a\u3093\u3060\u304b\u3089\u3001\u3082\u3063\u3068\u524d\u3005\u304b\u3089\u6e96\u5099\u3057\u3066\u304a\u304f\u3079\u304d\u3067\u3057\u305f\u3002\n\n\u8a18\u4e8b\u3082\u9069\u5f53\u3059\u304e\u307e\u3059\u306d\u3002\n\n\u305d\u308d\u305d\u308d12:00\u306b\u306a\u308a\u305d\u3046\u306a\u306e\u3067\u3053\u308c\u304f\u3089\u3044\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n[Amorphous]: https://github.com/MakeNowJust/amorphous\n", "tags": ["crystal"]}