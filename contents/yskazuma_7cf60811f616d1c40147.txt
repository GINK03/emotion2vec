{"context": "PlayFramework\u3067\u306fplay-json\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3053\u3068\u3067Json\u3092\u7c21\u5358\u306b\u30d1\u30fc\u30b9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u4eca\u56denull\u306e\u542b\u307e\u308c\u308bList\u3092\u30d1\u30fc\u30b9\u3059\u308b\u6642\u306b\u5c11\u3057\u306f\u307e\u3063\u305f\u306e\u3067\u30e1\u30e2\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nplay-json\u306b\u95a2\u3057\u3066\u306f\u65e2\u306b\u8272\u3005\u306a\u65b9\u304c\u8aac\u660e\u8a18\u4e8b\u3092\u6319\u3052\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u307e\u3059\u3002\nhttp://qiita.com/daneko0123/items/1f19f83b943cfd3b8829\nhttp://dev.classmethod.jp/server-side/scala/play-json-5-frequent-patterns/\n\n\u74b0\u5883\n\nPlay2.5.1\n\n\n\u6982\u8981\n\u4eca\u56de\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306anull\u304c\u542b\u307e\u308c\u308b\u30ea\u30b9\u30c8\u3092Seq[Option[String]]\u306e\u578b\u306b\u30d1\u30fc\u30b9\u3057\u3088\u3046\u3068\u3057\u307e\u3057\u305f\u3002\n\nsample.json\n{\n \"id\":\"aaa\",\n \"age\":18,\n \"params\":[\n  \"test1\",\n  null,\n  \"test2\"\n ]\n}\n\n\n\u305d\u3053\u3067\u30d1\u30fc\u30b9\u7528\u306e\u30af\u30e9\u30b9\u3068\u3057\u3066\u4ee5\u4e0b\u3092\u7528\u610f\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\nSample.scala\ncase class Sample(id:String, age:Int, params:Seq[Option[String]])\n\nobject Sample extends ((String,Int,Seq[Option[String]]) => Sample) {\n  implicit val SampleRead: Reads[Sample] = (\n    (JsPath \\ \"id\").read[String] and\n      (JsPath \\ \"age\").read[Int] and\n      (JsPath \\ \"params\").read[Seq[Option[String]]] | Reads.pure(Seq.empty[Option[String]])\n    )(Sample)\n}\n\n\n\n\nerror\nNo Json deserializer found for type Seq[Option[String]]. Try to implement an implicit Reads or Format for this type.\n[error]       (JsPath \\ \"params\").read[Seq[Option[String]]] | Reads.pure(Seq.empty[Option[String]])\n\n\n\n\u89e3\u6c7a\u7b56\n\u81ea\u5206\u3082\u5b8c\u5168\u306b\u7406\u89e3\u3067\u304d\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001read[A]\u306b\u306f\u6697\u9ed9\u7684\u306bReads[A]\u304c\u6e21\u3055\u308c\u3066\u304a\u308a\u3001\u4eca\u56deread[Seq[Option[String]]]\u306b\u5bfe\u5fdc\u3059\u308bReads[Seq[Option[String]]]\u306e\u5b9f\u88c5\u304c\u7121\u304b\u3063\u305f\u305f\u3081\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3044\u305f\u3088\u3046\u3067\u3059\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\nSample.scala\ncase class Sample(id:String, age:Int, params:Seq[Option[String]])\n\nobject Sample extends ((String,Int,Seq[Option[String]]) => Sample) {\n\n  implicit val SeqOpStringRead = new Reads[Seq[Option[String]]] {\n    override def reads(json: JsValue): JsResult[Seq[Option[String]]] = {\n      json match {\n        case JsArray(seq) => JsSuccess(seq.map(jsvalue => jsvalue.asOpt[String]))\n        case _ => JsError(\"Invalid array\")\n      }\n    }\n  }\n\n  implicit val SampleRead: Reads[Sample] = (\n    (JsPath \\ \"id\").read[String] and\n      (JsPath \\ \"age\").read[Int] and\n      (JsPath \\ \"params\").read[Seq[Option[String]]] | Reads.pure(Seq.empty[Option[String]])\n    )(Sample)\n}\n\n\n\n\u3053\u308c\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u901a\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30d1\u30fc\u30b9\u3067\u304d\u307e\u3057\u305f\u3002\n\nparseResult\nSample(aaa,18,ListBuffer(Some(test1), None, Some(test2)))\n\n\n\u4ee5\u4e0a\u3067\u3059\u3002Scala+Play\u306f\u307e\u3060\u3042\u307e\u308a\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u9593\u9055\u3063\u3066\u3044\u308b\u6240\u3084\u3082\u3063\u3068\u826f\u3044\u65b9\u6cd5\u306a\u3069\u3042\u308c\u3070\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\uff01\nPlayFramework\u3067\u306fplay-json\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3053\u3068\u3067Json\u3092\u7c21\u5358\u306b\u30d1\u30fc\u30b9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u4eca\u56denull\u306e\u542b\u307e\u308c\u308bList\u3092\u30d1\u30fc\u30b9\u3059\u308b\u6642\u306b\u5c11\u3057\u306f\u307e\u3063\u305f\u306e\u3067\u30e1\u30e2\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nplay-json\u306b\u95a2\u3057\u3066\u306f\u65e2\u306b\u8272\u3005\u306a\u65b9\u304c\u8aac\u660e\u8a18\u4e8b\u3092\u6319\u3052\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u307e\u3059\u3002\n\nhttp://qiita.com/daneko0123/items/1f19f83b943cfd3b8829\nhttp://dev.classmethod.jp/server-side/scala/play-json-5-frequent-patterns/\n\n##\u74b0\u5883\n* Play2.5.1\n\n##\u6982\u8981\n\u4eca\u56de\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306anull\u304c\u542b\u307e\u308c\u308b\u30ea\u30b9\u30c8\u3092Seq[Option[String]]\u306e\u578b\u306b\u30d1\u30fc\u30b9\u3057\u3088\u3046\u3068\u3057\u307e\u3057\u305f\u3002\n\n```json:sample.json\n{\n \"id\":\"aaa\",\n \"age\":18,\n \"params\":[\n  \"test1\",\n  null,\n  \"test2\"\n ]\n}\n```\n\n\u305d\u3053\u3067\u30d1\u30fc\u30b9\u7528\u306e\u30af\u30e9\u30b9\u3068\u3057\u3066\u4ee5\u4e0b\u3092\u7528\u610f\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n```scala:Sample.scala\ncase class Sample(id:String, age:Int, params:Seq[Option[String]])\n\nobject Sample extends ((String,Int,Seq[Option[String]]) => Sample) {\n  implicit val SampleRead: Reads[Sample] = (\n    (JsPath \\ \"id\").read[String] and\n      (JsPath \\ \"age\").read[Int] and\n      (JsPath \\ \"params\").read[Seq[Option[String]]] | Reads.pure(Seq.empty[Option[String]])\n    )(Sample)\n}\n\n```\n\n```text:error\nNo Json deserializer found for type Seq[Option[String]]. Try to implement an implicit Reads or Format for this type.\n[error]       (JsPath \\ \"params\").read[Seq[Option[String]]] | Reads.pure(Seq.empty[Option[String]])\n```\n\n##\u89e3\u6c7a\u7b56\n\u81ea\u5206\u3082\u5b8c\u5168\u306b\u7406\u89e3\u3067\u304d\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001read[A]\u306b\u306f\u6697\u9ed9\u7684\u306bReads[A]\u304c\u6e21\u3055\u308c\u3066\u304a\u308a\u3001\u4eca\u56deread[Seq[Option[String]]]\u306b\u5bfe\u5fdc\u3059\u308bReads[Seq[Option[String]]]\u306e\u5b9f\u88c5\u304c\u7121\u304b\u3063\u305f\u305f\u3081\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3044\u305f\u3088\u3046\u3067\u3059\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\n```scala:Sample.scala\ncase class Sample(id:String, age:Int, params:Seq[Option[String]])\n\nobject Sample extends ((String,Int,Seq[Option[String]]) => Sample) {\n  \n  implicit val SeqOpStringRead = new Reads[Seq[Option[String]]] {\n    override def reads(json: JsValue): JsResult[Seq[Option[String]]] = {\n      json match {\n        case JsArray(seq) => JsSuccess(seq.map(jsvalue => jsvalue.asOpt[String]))\n        case _ => JsError(\"Invalid array\")\n      }\n    }\n  }\n\n  implicit val SampleRead: Reads[Sample] = (\n    (JsPath \\ \"id\").read[String] and\n      (JsPath \\ \"age\").read[Int] and\n      (JsPath \\ \"params\").read[Seq[Option[String]]] | Reads.pure(Seq.empty[Option[String]])\n    )(Sample)\n}\n\n```\n\n\u3053\u308c\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u901a\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30d1\u30fc\u30b9\u3067\u304d\u307e\u3057\u305f\u3002\n\n```text:parseResult\nSample(aaa,18,ListBuffer(Some(test1), None, Some(test2)))\n```\n\n\u4ee5\u4e0a\u3067\u3059\u3002Scala+Play\u306f\u307e\u3060\u3042\u307e\u308a\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u9593\u9055\u3063\u3066\u3044\u308b\u6240\u3084\u3082\u3063\u3068\u826f\u3044\u65b9\u6cd5\u306a\u3069\u3042\u308c\u3070\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\uff01\n", "tags": ["PlayFramework", "Scala", "JSON"]}