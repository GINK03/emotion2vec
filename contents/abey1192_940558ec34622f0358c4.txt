{"context": " More than 1 year has passed since last update.\u30bb\u30c3\u30b7\u30e7\u30f3\u30b9\u30c8\u30a2\u3068\u304b\u30e9\u30f3\u30ad\u30f3\u30b0\u3068\u304b\u3001\u3044\u308d\u3044\u308d\u4fbf\u5229\u306b\u4f7f\u3048\u308bRedis\u3067\u3059\u304c\u3001Vert.x\u306b\u3082\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3042\u3063\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30e2\u30b8\u30e5\u30fc\u30eb\u306fmod-redis\u3068\u3044\u3046\u306e\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002Vert.x\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u30c7\u30d7\u30ed\u30a4\u65b9\u6cd5\u3068API\u304c\u4e00\u8cab\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3084\u308a\u304b\u305f\u3092\u899a\u3048\u305f\u3089Redis\u3060\u308d\u3046\u304cRDB\u3060\u308d\u3046\u304c\u5909\u308f\u3089\u306a\u3044\u306e\u304c\u3044\u3044\u3067\u3059\u306d\u30fc\n\u305d\u3057\u3066\u3001\u8a66\u3057\u306b\u66f8\u3044\u3066\u307f\u305f\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\nGET\u3057\u305f\u3089Redis\u304b\u3089\u5024\u3092\u8aad\u3093\u3067\u304f\u308b\nPOST\u3057\u305f\u3089Redis\u306b\u5024\u3092\u66f8\u304d\u8fbc\u3080\u3002\n\nGET\u306e\u3068\u304d\u306bRedis\u306b\u5024\u304c\u5165\u3063\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5024\u3092\u66f8\u304d\u8fbc\u3080\u51e6\u7406\u3082\u5165\u3063\u3066\u3044\u307e\u3059\u3002\npost body\u3092\u53d6\u5f97\u3059\u308b\u90e8\u5206\u306fVert.x\u306b\u3082\u7528\u610f\u3055\u308c\u3066\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3088\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u66f8\u304d\u4e0b\u3057\u307e\u3057\u305f\u3002\nimport org.vertx.groovy.platform.Verticle\nimport org.vertx.groovy.core.Vertx\n\nimport java.net.URLDecoder\n\nclass Server extends Verticle {\n    @Override\n    def start() {\n        container.deployModule( Redis.moduleName, Redis.config, 1, { result -> } )\n\n        def server = vertx.createHttpServer()\n        server.requestHandler { request -> processRequest(request) }.listen(8080)\n    }\n\n    @Override\n    def stop() {\n    }\n\n    // \u30ea\u30af\u30a8\u30b9\u30c8\u30cf\u30f3\u30c9\u30e9\n    private def processRequest(request) {\n        if(request.method == \"GET\") {\n            performGet(request)\n        }\n        else {\n            performPost(request)\n        }\n    }\n\n    // GET\u306e\u3068\u304d\n    private def performGet(request) {\n        def redis = new Redis(eventBus:vertx.eventBus)\n\n        redis.get(\"test\") { callback -> callback(\"test data\") } { value ->\n            request.response.end(value)\n        }\n    }\n\n    // POST\u306e\u3068\u304d\n    private def performPost(reuqest) {\n        def redis = new Redis(eventBus:vertx.eventBus)\n\n        postParams(request) { params ->\n            redis.set(\"test\", params[\"value\"]) { value ->\n                request.response.end(value)\n            }\n        }\n    }\n\n    // Request Body\u3092HashMap\u306b\u3059\u308b\n    private def postParams(request, callback) {\n        request.bodyHandler { buffer ->\n            def postBody = buffer.getString(0, buffer.length)\n            def params = [:]\n\n            postBody.split(\"&\").each { chunk ->\n                def keyValue = chunk.split(\"=\")\n                params[keyValue[0]] = URLDecoder.decode(keyValue[1], \"utf-8\")\n            }\n            callback(params)\n        }\n    }\n\n    // Redis\u30a2\u30af\u30bb\u30b9\u7528\u30af\u30e9\u30b9\n    class Redis {\n        private def eventBus\n\n        static final def moduleName = \"io.vertx~mod-redis~1.1.4-SNAPSHOT\"\n        static final def config = [\n            address: \"redis\",\n            host: \"localhost\",\n            port: 6379,\n            encoding: \"utf-8\",\n            binary: false,\n        ] \n\n        // get\u3057\u3066null\u3060\u3063\u305f\u3089 fetch\u3057\u3066\u5f97\u3089\u308c\u305f\u5024\u3092set\n        def get(key, fetch, next) {\n            read(key) { reply -> \n                if(succeeded(reply) && reply.body.value != null) {\n                    next(reply.body.value)\n                }\n                else if(fetch == null) {\n                    next(null)\n                }\n                else {\n                    fetch() { result -> set(key, result, next) }\n                }\n            }\n        }\n\n        // set\n        def set(key, value, callback) {\n            write(key, value) { reply -> callback(value) }\n        }\n\n        private def read(key, callback) {\n            eventBus.send(config[\"address\"], [command:\"get\", args:[key]], callback)\n        }\n\n        private def write(key, value, callback) {\n            eventBus.send(config[\"address\"], [command:\"set\", args:[key, value]], callback)\n        }\n\n        private def succeeded(reply) {\n            reply.body.status == \"ok\"\n        }\n    }\n}\n\n\u30bb\u30c3\u30b7\u30e7\u30f3\u30b9\u30c8\u30a2\u3068\u304b\u30e9\u30f3\u30ad\u30f3\u30b0\u3068\u304b\u3001\u3044\u308d\u3044\u308d\u4fbf\u5229\u306b\u4f7f\u3048\u308bRedis\u3067\u3059\u304c\u3001Vert.x\u306b\u3082\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3042\u3063\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\u306f[mod-redis](https://github.com/vert-x/mod-redis \"mod-redis\")\u3068\u3044\u3046\u306e\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002Vert.x\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u30c7\u30d7\u30ed\u30a4\u65b9\u6cd5\u3068API\u304c\u4e00\u8cab\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3084\u308a\u304b\u305f\u3092\u899a\u3048\u305f\u3089Redis\u3060\u308d\u3046\u304cRDB\u3060\u308d\u3046\u304c\u5909\u308f\u3089\u306a\u3044\u306e\u304c\u3044\u3044\u3067\u3059\u306d\u30fc\n\n\u305d\u3057\u3066\u3001\u8a66\u3057\u306b\u66f8\u3044\u3066\u307f\u305f\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\n* GET\u3057\u305f\u3089Redis\u304b\u3089\u5024\u3092\u8aad\u3093\u3067\u304f\u308b\n* POST\u3057\u305f\u3089Redis\u306b\u5024\u3092\u66f8\u304d\u8fbc\u3080\u3002\n\nGET\u306e\u3068\u304d\u306bRedis\u306b\u5024\u304c\u5165\u3063\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5024\u3092\u66f8\u304d\u8fbc\u3080\u51e6\u7406\u3082\u5165\u3063\u3066\u3044\u307e\u3059\u3002\npost body\u3092\u53d6\u5f97\u3059\u308b\u90e8\u5206\u306fVert.x\u306b\u3082\u7528\u610f\u3055\u308c\u3066\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3088\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u66f8\u304d\u4e0b\u3057\u307e\u3057\u305f\u3002\n\n~~~groovy\nimport org.vertx.groovy.platform.Verticle\nimport org.vertx.groovy.core.Vertx\n\nimport java.net.URLDecoder\n\nclass Server extends Verticle {\n    @Override\n    def start() {\n        container.deployModule( Redis.moduleName, Redis.config, 1, { result -> } )\n\n        def server = vertx.createHttpServer()\n        server.requestHandler { request -> processRequest(request) }.listen(8080)\n    }\n\n    @Override\n    def stop() {\n    }\n\n    // \u30ea\u30af\u30a8\u30b9\u30c8\u30cf\u30f3\u30c9\u30e9\n    private def processRequest(request) {\n        if(request.method == \"GET\") {\n            performGet(request)\n        }\n        else {\n            performPost(request)\n        }\n    }\n\n    // GET\u306e\u3068\u304d\n    private def performGet(request) {\n        def redis = new Redis(eventBus:vertx.eventBus)\n\n        redis.get(\"test\") { callback -> callback(\"test data\") } { value ->\n            request.response.end(value)\n        }\n    }\n\n    // POST\u306e\u3068\u304d\n    private def performPost(reuqest) {\n        def redis = new Redis(eventBus:vertx.eventBus)\n\n        postParams(request) { params ->\n            redis.set(\"test\", params[\"value\"]) { value ->\n                request.response.end(value)\n            }\n        }\n    }\n\n    // Request Body\u3092HashMap\u306b\u3059\u308b\n    private def postParams(request, callback) {\n        request.bodyHandler { buffer ->\n            def postBody = buffer.getString(0, buffer.length)\n            def params = [:]\n\n            postBody.split(\"&\").each { chunk ->\n                def keyValue = chunk.split(\"=\")\n                params[keyValue[0]] = URLDecoder.decode(keyValue[1], \"utf-8\")\n            }\n            callback(params)\n        }\n    }\n\n    // Redis\u30a2\u30af\u30bb\u30b9\u7528\u30af\u30e9\u30b9\n    class Redis {\n        private def eventBus\n\n        static final def moduleName = \"io.vertx~mod-redis~1.1.4-SNAPSHOT\"\n        static final def config = [\n            address: \"redis\",\n            host: \"localhost\",\n            port: 6379,\n            encoding: \"utf-8\",\n            binary: false,\n        ] \n\n        // get\u3057\u3066null\u3060\u3063\u305f\u3089 fetch\u3057\u3066\u5f97\u3089\u308c\u305f\u5024\u3092set\n        def get(key, fetch, next) {\n            read(key) { reply -> \n                if(succeeded(reply) && reply.body.value != null) {\n                    next(reply.body.value)\n                }\n                else if(fetch == null) {\n                    next(null)\n                }\n                else {\n                    fetch() { result -> set(key, result, next) }\n                }\n            }\n        }\n\n        // set\n        def set(key, value, callback) {\n            write(key, value) { reply -> callback(value) }\n        }\n \n        private def read(key, callback) {\n            eventBus.send(config[\"address\"], [command:\"get\", args:[key]], callback)\n        }\n\n        private def write(key, value, callback) {\n            eventBus.send(config[\"address\"], [command:\"set\", args:[key, value]], callback)\n        }\n\n        private def succeeded(reply) {\n            reply.body.status == \"ok\"\n        }\n    }\n}\n~~~\n", "tags": ["Groovy2.2.0", "Vert.x2.0.2"]}