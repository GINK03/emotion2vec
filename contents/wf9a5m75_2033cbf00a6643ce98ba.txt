{"context": " More than 1 year has passed since last update.Google Apps Script\u306eTips\u304c\u6e9c\u307e\u3063\u3066\u304d\u307e\u3057\u305f\u306e\u3067\u5171\u6709\u3057\u307e\u3059\u3002\n\u6c17\u304c\u5411\u3044\u305f\u3089\u66f4\u65b0\u3057\u307e\u3059\u3002\n\nGoogleDrive\n\n\u89aa\u30d5\u30a9\u30eb\u30c0\u306e\u79fb\u52d5\n//\u30bf\u30fc\u30b2\u30c3\u30c8\u30d5\u30a1\u30a4\u30eb\u306eID\nvar targetFileId = \"0B1ECfqTCcLE8SS1PRnJ1cVgxVlk\";\n//\u65b0\u3057\u3044\u30d5\u30a9\u30eb\u30c0\u306eID\nvar dstFolderId = \"0B1ECfqTCcLE8c09YZUtqTkVwU3c\";\n\n//\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\nvar targetFile = DriveApp.getFileById(targetFileId);\n\n// \u73fe\u5728\u306e\u89aa\u30d5\u30a9\u30eb\u30c0\u3092\u4e00\u6383\nvar parentFolders = targetFile.getParents();\nwhile(parentFolders.hasNext()) {\n  var parent = parentFolders.next();\n  parent.removeFile(targetFile);\n}\n\n// \u65b0\u3057\u3044\u30d5\u30a9\u30eb\u30c0\u306b\u8ffd\u52a0\u3059\u308b\nvar dstFolder = DriveApp.getFolderById(dstFolderId);\ndstFolder.addFile(targetFile);\n\n\n\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u30fb\u66f4\u65b0\n\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u3042\u308b\u30d5\u30a9\u30eb\u30c0\u306b\u4f5c\u6210\u3059\u308b\u3002\u3042\u308b\u5834\u5408\u306f\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8ffd\u52a0\u3002\nfunction myFunction() {\n  var filename = \"testFile.txt\";\n  var foldername = \"testFolder\";\n\n  var content = \"\u307b\u3052\u307b\u3052\";\n\n  var dir = DriveApp.getFoldersByName(foldername).next();\n  var children = dir.getFilesByName(filename);\n  var file = null;\n  if (children.hasNext()) {\n    // \u30d5\u30a1\u30a4\u30eb\u304c\u6709\u308c\u3070\u5185\u5bb9\u3092\u8ffd\u52a0\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u8ffd\u52a0\n    file = children.next();\n    var blob = file.getBlob();\n    var text = blob.getDataAsString();\n    text += \"\\n\";                       // <-- \u6539\u884c\u3092\u8ffd\u52a0\n    text += (new Date()).toString();    // <-- \u65e5\u6642\u3092\u8ffd\u52a0\n    file.setContent(text);\n  } else {\n    // \u30d5\u30a1\u30a4\u30eb\u304c\u306a\u3051\u308c\u3070\u65b0\u898f\u4f5c\u6210\n    file = dir.createFile(filename, content);\n  }\n}\n\n\n\u7279\u5b9a\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u304c\u306a\u3051\u308c\u3070\u8ffd\u52a0\u30fb\u3042\u308c\u3070\u53d6\u5f97\nvar files = folder.getFilesByName(filename);\nvar file, ssFile;\nif (files.hasNext()) {\n  // \u30d5\u30a1\u30a4\u30eb\u304c\u6709\u308b\u5834\u5408\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\n  file = files.next();\n  // \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u3068\u3057\u3066\u958b\u304f\n  ssFile = SpreadsheetApp.open(file);\n} else {\n  // \u306a\u3044\u5834\u5408\u306f\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308b\n  ssFile = SpreadsheetApp.create(newFileName);\n  file = DriveApp.getFileById(ssFile.getId());\n  folder.addFile(file);\n  DriveApp.getRootFolder().removeFile(file);\n}\n\n\n\u7279\u5b9a\u306e\u30d5\u30a9\u30eb\u30c0\u3092zip\u30d5\u30a1\u30a4\u30eb\u306b\u3059\u308b\n\u30d5\u30a9\u30eb\u30c0\u30b5\u30a4\u30ba\u304c20MB\u3092\u8d85\u3048\u308b\u3068\u5931\u6557\u3057\u307e\u3059\u3002\n\u540c\u4e00\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u3042\u308b\u5834\u5408\u3082\u5931\u6557\u3057\u307e\u3059\u3002\nfunction createZipFile(request) {\n\n  var targetFolderId = \"0B_SnOzJ...0UwOUE\";\n  var targetFolder = DriveApp.getFolderById(targetFolderId);\n\n  var targetName = targetFolder.getName();\n  var cacheFileName = targetName + \".zip\";\n\n  // \u5404\u30d5\u30a1\u30a4\u30eb\u306eblob\u3092\u304b\u304d\u96c6\u3081\u3066\u3001zip\u3067\u56fa\u3081\u308b\n  var zipped = Utilities.zip(getBlobs(targetFolder, ''), cacheFileName);\n  var zipfile = DriveApp.getRootFolder().createFile(zipped);\n  zipfile = zipfile.getId();\n\n}\nfunction getBlobs(rootFolder, path) {\n  var blobs = [];\n  var files = rootFolder.getFiles();\n\n  while (files.hasNext()) {\n    var file = files.next();\n    blobs.push(file.getBlob());\n  }\n\n  var folders = rootFolder.getFolders();\n  while (folders.hasNext()) {\n    var folder = folders.next();\n    var nextFolderPath = path + folder.getName()+'/';\n    blobs = blobs.concat(getBlobs(folder, nextFolderPath));\n  }\n  return blobs;\n}\n\n\n\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\n\n\u30ab\u30e9\u30e0\u756a\u53f7\u304b\u3089A1\u66f8\u5f0f\u306b\u5909\u3048\u308b\nfunction getColumnLabel(x) {\n  var label = \"\";\n\n  var alphaLabel = x.toString(26);\n  var char;\n  for (var i = 0; i < alphaLabel.length; i++) {\n    char = parseInt(alphaLabel.substr(i, 1), 26);\n    label += String.fromCharCode(64 + char);\n  }\n\n  return label;\n}\n\n\n\u30c1\u30e3\u30fc\u30c8\u306e\u633f\u5165 or \u66f4\u65b0\nvar targetChartTitle = \"my chart\";\n\nvar chart = null;\nvar insertChart = true;\nvar title, embededChartBuilder;\n\nfor (var j = 0; j < charts.length; j++) {\n  title = charts[j].getOptions().get(\"title\") + \"\";\n  if (title.indexOf(targetChartTitle) > -1) {\n    chart = charts[j];\n    insertChart = false;\n    break;\n  }\n}\n\nif (insertChart) {\n  // \u30c1\u30e3\u30fc\u30c8\u306e\u633f\u5165\n  embededChartBuilder = mySheet.newChart().asColumnChart().setStacked();\n} else {\n  // \u65e2\u5b58\u306e\u30c1\u30e3\u30fc\u30c8\u306e\u66f4\u65b0\n  embededChartBuilder = chart.modify().asColumnChart().setStacked();\n\n  // \u30ec\u30f3\u30b8\u3092\u4e00\u56de\u5168\u90e8\u524a\u9664\n  var ranges = chart.getRanges();\n  ranges.forEach(function(range) {\n    embededChartBuilder.removeRange(range);\n  });\n}\n\n// \u30c1\u30e3\u30fc\u30c8\u306e\u8abf\u6574\nvar range = mySheet.getRange(...);\nembededChartBuilder.addRange(range);\nembededChartBuilder.setPosition(1, 1, 0, 0);\nembededChartBuilder.setTitle(targetChartTitle);\n\n//\u30c1\u30e3\u30fc\u30c8\u3092\u4f5c\u6210\u3057\u3066\u633f\u5165/\u66f4\u65b0\nchart = embededChartBuilder.build();\nif (insertChart) {\n  mySheet.insertChart(chart);\n} else {\n  mySheet.updateChart(chart);\n}\n\n\n\u305d\u306e\u4ed6\n\nTwilio\u3092\u4f7f\u3063\u3066SMS\u3092\u9001\u4fe1\u3000\nfunction sendSms(sendToSMS, sendToEmail, message) {\n  var accountSid = \"\";\n  var authToken = \"\";\n  var url = \"https://api.twilio.com/2010-04-01/Accounts/\" + accountSid + \"/SMS/Messages.json\";\n\n  var smsMessage = message;\n  if (smsMessage.length > 160) {\n    smsMessage = smsMessage.substring(0, 155) + \"...\";\n  }\n  var options = {\n    method: \"post\",\n    headers: {\n      Authorization: \"Basic \" + Utilities.base64Encode(accountSid + \":\" + authToken)\n    },\n    payload: {\n      From: \"\",  // Twilio\u306e\u5951\u7d04\u3057\u3066\u3044\u308b\u96fb\u8a71\u756a\u53f7\n      To: sendToSMS,\n      Body: smsMessage\n    },\n    muteHttpExceptions: true \n  };\n  var response = UrlFetchApp.fetch(url, options);\n  Logger.log(response);\n}\n\n\nsprintf\n/**\nsprintf() for JavaScript 0.7-beta1\nhttp://www.diveintojavascript.com/projects/javascript-sprintf\n\nCopyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of sprintf() for JavaScript nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL Alexandru Marasteanu BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nChangelog:\n2010.09.06 - 0.7-beta1\n  - features: vsprintf, support for named placeholders\n  - enhancements: format cache, reduced global namespace pollution\n\n2010.05.22 - 0.6:\n - reverted to 0.4 and fixed the bug regarding the sign of the number 0\n Note:\n Thanks to Raphael Pigulla <raph (at] n3rd [dot) org> (http://www.n3rd.org/)\n who warned me about a bug in 0.5, I discovered that the last update was\n a regress. I appologize for that.\n\n2010.05.09 - 0.5:\n - bug fix: 0 is now preceeded with a + sign\n - bug fix: the sign was not at the right position on padded results (Kamal Abdali)\n - switched from GPL to BSD license\n\n2007.10.21 - 0.4:\n - unit test and patch (David Baird)\n\n2007.09.17 - 0.3:\n - bug fix: no longer throws exception on empty paramenters (Hans Pufal)\n\n2007.09.11 - 0.2:\n - feature: added argument swapping\n\n2007.04.03 - 0.1:\n - initial release\n**/\n\n\n/*\n * sprintf() for JavaScript is a complete open source JavaScript sprintf implementation.\n * \n * @param {String} format string\n * @param {Object...values} values\n * @return {String} formatted string.\n */\nvar sprintf = (function() {\n    function get_type(variable) {\n        return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();\n    }\n    function str_repeat(input, multiplier) {\n        for (var output = []; multiplier > 0; output[--multiplier] = input) {/* do nothing */}\n        return output.join('');\n    }\n\n    var str_format = function() {\n        if (!str_format.cache.hasOwnProperty(arguments[0])) {\n            str_format.cache[arguments[0]] = str_format.parse(arguments[0]);\n        }\n        return str_format.format.call(null, str_format.cache[arguments[0]], arguments);\n    };\n\n    str_format.format = function(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;\n        for (i = 0; i < tree_length; i++) {\n            node_type = get_type(parse_tree[i]);\n            if (node_type === 'string') {\n                output.push(parse_tree[i]);\n            }\n            else if (node_type === 'array') {\n                match = parse_tree[i]; // convenience purposes only\n                if (match[2]) { // keyword argument\n                    arg = argv[cursor];\n                    for (k = 0; k < match[2].length; k++) {\n                        if (!arg.hasOwnProperty(match[2][k])) {\n                            throw(sprintf('[sprintf] property \"%s\" does not exist', match[2][k]));\n                        }\n                        arg = arg[match[2][k]];\n                    }\n                }\n                else if (match[1]) { // positional argument (explicit)\n                    arg = argv[match[1]];\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++];\n                }\n\n                if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {\n                    throw(sprintf('[sprintf] expecting number but found %s', get_type(arg)));\n                }\n                switch (match[8]) {\n                    case 'b': arg = arg.toString(2); break;\n                    case 'c': arg = String.fromCharCode(arg); break;\n                    case 'd': arg = parseInt(arg, 10); break;\n                    case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;\n                    case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;\n                    case 'o': arg = arg.toString(8); break;\n                    case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;\n                    case 'u': arg = Math.abs(arg); break;\n                    case 'x': arg = arg.toString(16); break;\n                    case 'X': arg = arg.toString(16).toUpperCase(); break;\n                }\n                arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);\n                pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';\n                pad_length = match[6] - String(arg).length;\n                pad = match[6] ? str_repeat(pad_character, pad_length) : '';\n                output.push(match[5] ? arg + pad : pad + arg);\n            }\n        }\n        return output.join('');\n    };\n\n    str_format.cache = {};\n\n    str_format.parse = function(fmt) {\n        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;\n        while (_fmt) {\n            if ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {\n                parse_tree.push(match[0]);\n            }\n            else if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {\n                parse_tree.push('%');\n            }\n            else if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1;\n                    var field_list = [], replacement_field = match[2], field_match = [];\n                    if ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1]);\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1]);\n                            }\n                            else if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1]);\n                            }\n                            else {\n                                throw('[sprintf] huh?');\n                            }\n                        }\n                    }\n                    else {\n                        throw('[sprintf] huh?');\n                    }\n                    match[2] = field_list;\n                }\n                else {\n                    arg_names |= 2;\n                }\n                if (arg_names === 3) {\n                    throw('[sprintf] mixing positional and named placeholders is not (yet) supported');\n                }\n                parse_tree.push(match);\n            }\n            else {\n                throw('[sprintf] huh?');\n            }\n            _fmt = _fmt.substring(match[0].length);\n        }\n        return parse_tree;\n    };\n\n    return str_format;\n})();\n\nvar vsprintf = function(fmt, argv) {\n    argv.unshift(fmt);\n    return sprintf.apply(null, argv);\n};\n\nGoogle Apps Script\u306eTips\u304c\u6e9c\u307e\u3063\u3066\u304d\u307e\u3057\u305f\u306e\u3067\u5171\u6709\u3057\u307e\u3059\u3002\n\u6c17\u304c\u5411\u3044\u305f\u3089\u66f4\u65b0\u3057\u307e\u3059\u3002\n\n#GoogleDrive\n\n##\u89aa\u30d5\u30a9\u30eb\u30c0\u306e\u79fb\u52d5\n\n```js\n//\u30bf\u30fc\u30b2\u30c3\u30c8\u30d5\u30a1\u30a4\u30eb\u306eID\nvar targetFileId = \"0B1ECfqTCcLE8SS1PRnJ1cVgxVlk\";\n//\u65b0\u3057\u3044\u30d5\u30a9\u30eb\u30c0\u306eID\nvar dstFolderId = \"0B1ECfqTCcLE8c09YZUtqTkVwU3c\";\n\n//\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\nvar targetFile = DriveApp.getFileById(targetFileId);\n \n// \u73fe\u5728\u306e\u89aa\u30d5\u30a9\u30eb\u30c0\u3092\u4e00\u6383\nvar parentFolders = targetFile.getParents();\nwhile(parentFolders.hasNext()) {\n  var parent = parentFolders.next();\n  parent.removeFile(targetFile);\n}\n  \n// \u65b0\u3057\u3044\u30d5\u30a9\u30eb\u30c0\u306b\u8ffd\u52a0\u3059\u308b\nvar dstFolder = DriveApp.getFolderById(dstFolderId);\ndstFolder.addFile(targetFile);\n```\n\n##\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u30fb\u66f4\u65b0\n\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u3042\u308b\u30d5\u30a9\u30eb\u30c0\u306b\u4f5c\u6210\u3059\u308b\u3002\u3042\u308b\u5834\u5408\u306f\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8ffd\u52a0\u3002\n\n```js\nfunction myFunction() {\n  var filename = \"testFile.txt\";\n  var foldername = \"testFolder\";\n\n  var content = \"\u307b\u3052\u307b\u3052\";\n\n  var dir = DriveApp.getFoldersByName(foldername).next();\n  var children = dir.getFilesByName(filename);\n  var file = null;\n  if (children.hasNext()) {\n    // \u30d5\u30a1\u30a4\u30eb\u304c\u6709\u308c\u3070\u5185\u5bb9\u3092\u8ffd\u52a0\u3057\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u8ffd\u52a0\n    file = children.next();\n    var blob = file.getBlob();\n    var text = blob.getDataAsString();\n    text += \"\\n\";                       // <-- \u6539\u884c\u3092\u8ffd\u52a0\n    text += (new Date()).toString();    // <-- \u65e5\u6642\u3092\u8ffd\u52a0\n    file.setContent(text);\n  } else {\n    // \u30d5\u30a1\u30a4\u30eb\u304c\u306a\u3051\u308c\u3070\u65b0\u898f\u4f5c\u6210\n    file = dir.createFile(filename, content);\n  }\n}\n```\n\n##\u7279\u5b9a\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u304c\u306a\u3051\u308c\u3070\u8ffd\u52a0\u30fb\u3042\u308c\u3070\u53d6\u5f97\n\n```js\nvar files = folder.getFilesByName(filename);\nvar file, ssFile;\nif (files.hasNext()) {\n  // \u30d5\u30a1\u30a4\u30eb\u304c\u6709\u308b\u5834\u5408\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\n  file = files.next();\n  // \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u3068\u3057\u3066\u958b\u304f\n  ssFile = SpreadsheetApp.open(file);\n} else {\n  // \u306a\u3044\u5834\u5408\u306f\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308b\n  ssFile = SpreadsheetApp.create(newFileName);\n  file = DriveApp.getFileById(ssFile.getId());\n  folder.addFile(file);\n  DriveApp.getRootFolder().removeFile(file);\n}\n```\n\n## \u7279\u5b9a\u306e\u30d5\u30a9\u30eb\u30c0\u3092zip\u30d5\u30a1\u30a4\u30eb\u306b\u3059\u308b\n\n\u30d5\u30a9\u30eb\u30c0\u30b5\u30a4\u30ba\u304c20MB\u3092\u8d85\u3048\u308b\u3068\u5931\u6557\u3057\u307e\u3059\u3002\n\u540c\u4e00\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u3042\u308b\u5834\u5408\u3082\u5931\u6557\u3057\u307e\u3059\u3002\n\n```js\nfunction createZipFile(request) {\n  \n  var targetFolderId = \"0B_SnOzJ...0UwOUE\";\n  var targetFolder = DriveApp.getFolderById(targetFolderId);\n  \n  var targetName = targetFolder.getName();\n  var cacheFileName = targetName + \".zip\";\n  \n  // \u5404\u30d5\u30a1\u30a4\u30eb\u306eblob\u3092\u304b\u304d\u96c6\u3081\u3066\u3001zip\u3067\u56fa\u3081\u308b\n  var zipped = Utilities.zip(getBlobs(targetFolder, ''), cacheFileName);\n  var zipfile = DriveApp.getRootFolder().createFile(zipped);\n  zipfile = zipfile.getId();\n  \n}\nfunction getBlobs(rootFolder, path) {\n  var blobs = [];\n  var files = rootFolder.getFiles();\n  \n  while (files.hasNext()) {\n    var file = files.next();\n    blobs.push(file.getBlob());\n  }\n  \n  var folders = rootFolder.getFolders();\n  while (folders.hasNext()) {\n    var folder = folders.next();\n    var nextFolderPath = path + folder.getName()+'/';\n    blobs = blobs.concat(getBlobs(folder, nextFolderPath));\n  }\n  return blobs;\n}\n```\n\n# \u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\n\n## \u30ab\u30e9\u30e0\u756a\u53f7\u304b\u3089A1\u66f8\u5f0f\u306b\u5909\u3048\u308b\n\n```js\nfunction getColumnLabel(x) {\n  var label = \"\";\n  \n  var alphaLabel = x.toString(26);\n  var char;\n  for (var i = 0; i < alphaLabel.length; i++) {\n    char = parseInt(alphaLabel.substr(i, 1), 26);\n    label += String.fromCharCode(64 + char);\n  }\n  \n  return label;\n}\n```\n\n## \u30c1\u30e3\u30fc\u30c8\u306e\u633f\u5165 or \u66f4\u65b0\n\n```js\nvar targetChartTitle = \"my chart\";\n\nvar chart = null;\nvar insertChart = true;\nvar title, embededChartBuilder;\n\nfor (var j = 0; j < charts.length; j++) {\n  title = charts[j].getOptions().get(\"title\") + \"\";\n  if (title.indexOf(targetChartTitle) > -1) {\n    chart = charts[j];\n    insertChart = false;\n    break;\n  }\n}\n\nif (insertChart) {\n  // \u30c1\u30e3\u30fc\u30c8\u306e\u633f\u5165\n  embededChartBuilder = mySheet.newChart().asColumnChart().setStacked();\n} else {\n  // \u65e2\u5b58\u306e\u30c1\u30e3\u30fc\u30c8\u306e\u66f4\u65b0\n  embededChartBuilder = chart.modify().asColumnChart().setStacked();\n  \n  // \u30ec\u30f3\u30b8\u3092\u4e00\u56de\u5168\u90e8\u524a\u9664\n  var ranges = chart.getRanges();\n  ranges.forEach(function(range) {\n    embededChartBuilder.removeRange(range);\n  });\n}\n\n// \u30c1\u30e3\u30fc\u30c8\u306e\u8abf\u6574\nvar range = mySheet.getRange(...);\nembededChartBuilder.addRange(range);\nembededChartBuilder.setPosition(1, 1, 0, 0);\nembededChartBuilder.setTitle(targetChartTitle);\n\n//\u30c1\u30e3\u30fc\u30c8\u3092\u4f5c\u6210\u3057\u3066\u633f\u5165/\u66f4\u65b0\nchart = embededChartBuilder.build();\nif (insertChart) {\n  mySheet.insertChart(chart);\n} else {\n  mySheet.updateChart(chart);\n}\n```\n\n# \u305d\u306e\u4ed6\n\n## Twilio\u3092\u4f7f\u3063\u3066SMS\u3092\u9001\u4fe1\u3000\n\n```js\nfunction sendSms(sendToSMS, sendToEmail, message) {\n  var accountSid = \"\";\n  var authToken = \"\";\n  var url = \"https://api.twilio.com/2010-04-01/Accounts/\" + accountSid + \"/SMS/Messages.json\";\n  \n  var smsMessage = message;\n  if (smsMessage.length > 160) {\n    smsMessage = smsMessage.substring(0, 155) + \"...\";\n  }\n  var options = {\n    method: \"post\",\n    headers: {\n      Authorization: \"Basic \" + Utilities.base64Encode(accountSid + \":\" + authToken)\n    },\n    payload: {\n      From: \"\",  // Twilio\u306e\u5951\u7d04\u3057\u3066\u3044\u308b\u96fb\u8a71\u756a\u53f7\n      To: sendToSMS,\n      Body: smsMessage\n    },\n    muteHttpExceptions: true \n  };\n  var response = UrlFetchApp.fetch(url, options);\n  Logger.log(response);\n}\n```\n\n## sprintf\n\n```js\n/**\nsprintf() for JavaScript 0.7-beta1\nhttp://www.diveintojavascript.com/projects/javascript-sprintf\n\nCopyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of sprintf() for JavaScript nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL Alexandru Marasteanu BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nChangelog:\n2010.09.06 - 0.7-beta1\n  - features: vsprintf, support for named placeholders\n  - enhancements: format cache, reduced global namespace pollution\n\n2010.05.22 - 0.6:\n - reverted to 0.4 and fixed the bug regarding the sign of the number 0\n Note:\n Thanks to Raphael Pigulla <raph (at] n3rd [dot) org> (http://www.n3rd.org/)\n who warned me about a bug in 0.5, I discovered that the last update was\n a regress. I appologize for that.\n\n2010.05.09 - 0.5:\n - bug fix: 0 is now preceeded with a + sign\n - bug fix: the sign was not at the right position on padded results (Kamal Abdali)\n - switched from GPL to BSD license\n\n2007.10.21 - 0.4:\n - unit test and patch (David Baird)\n\n2007.09.17 - 0.3:\n - bug fix: no longer throws exception on empty paramenters (Hans Pufal)\n\n2007.09.11 - 0.2:\n - feature: added argument swapping\n\n2007.04.03 - 0.1:\n - initial release\n**/\n\n\n/*\n * sprintf() for JavaScript is a complete open source JavaScript sprintf implementation.\n * \n * @param {String} format string\n * @param {Object...values} values\n * @return {String} formatted string.\n */\nvar sprintf = (function() {\n\tfunction get_type(variable) {\n\t\treturn Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();\n\t}\n\tfunction str_repeat(input, multiplier) {\n\t\tfor (var output = []; multiplier > 0; output[--multiplier] = input) {/* do nothing */}\n\t\treturn output.join('');\n\t}\n\n\tvar str_format = function() {\n\t\tif (!str_format.cache.hasOwnProperty(arguments[0])) {\n\t\t\tstr_format.cache[arguments[0]] = str_format.parse(arguments[0]);\n\t\t}\n\t\treturn str_format.format.call(null, str_format.cache[arguments[0]], arguments);\n\t};\n\n\tstr_format.format = function(parse_tree, argv) {\n\t\tvar cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;\n\t\tfor (i = 0; i < tree_length; i++) {\n\t\t\tnode_type = get_type(parse_tree[i]);\n\t\t\tif (node_type === 'string') {\n\t\t\t\toutput.push(parse_tree[i]);\n\t\t\t}\n\t\t\telse if (node_type === 'array') {\n\t\t\t\tmatch = parse_tree[i]; // convenience purposes only\n\t\t\t\tif (match[2]) { // keyword argument\n\t\t\t\t\targ = argv[cursor];\n\t\t\t\t\tfor (k = 0; k < match[2].length; k++) {\n\t\t\t\t\t\tif (!arg.hasOwnProperty(match[2][k])) {\n\t\t\t\t\t\t\tthrow(sprintf('[sprintf] property \"%s\" does not exist', match[2][k]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\targ = arg[match[2][k]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (match[1]) { // positional argument (explicit)\n\t\t\t\t\targ = argv[match[1]];\n\t\t\t\t}\n\t\t\t\telse { // positional argument (implicit)\n\t\t\t\t\targ = argv[cursor++];\n\t\t\t\t}\n\n\t\t\t\tif (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {\n\t\t\t\t\tthrow(sprintf('[sprintf] expecting number but found %s', get_type(arg)));\n\t\t\t\t}\n\t\t\t\tswitch (match[8]) {\n\t\t\t\t\tcase 'b': arg = arg.toString(2); break;\n\t\t\t\t\tcase 'c': arg = String.fromCharCode(arg); break;\n\t\t\t\t\tcase 'd': arg = parseInt(arg, 10); break;\n\t\t\t\t\tcase 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;\n\t\t\t\t\tcase 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;\n\t\t\t\t\tcase 'o': arg = arg.toString(8); break;\n\t\t\t\t\tcase 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;\n\t\t\t\t\tcase 'u': arg = Math.abs(arg); break;\n\t\t\t\t\tcase 'x': arg = arg.toString(16); break;\n\t\t\t\t\tcase 'X': arg = arg.toString(16).toUpperCase(); break;\n\t\t\t\t}\n\t\t\t\targ = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);\n\t\t\t\tpad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';\n\t\t\t\tpad_length = match[6] - String(arg).length;\n\t\t\t\tpad = match[6] ? str_repeat(pad_character, pad_length) : '';\n\t\t\t\toutput.push(match[5] ? arg + pad : pad + arg);\n\t\t\t}\n\t\t}\n\t\treturn output.join('');\n\t};\n\n\tstr_format.cache = {};\n\n\tstr_format.parse = function(fmt) {\n\t\tvar _fmt = fmt, match = [], parse_tree = [], arg_names = 0;\n\t\twhile (_fmt) {\n\t\t\tif ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {\n\t\t\t\tparse_tree.push(match[0]);\n\t\t\t}\n\t\t\telse if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {\n\t\t\t\tparse_tree.push('%');\n\t\t\t}\n\t\t\telse if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\n\t\t\t\tif (match[2]) {\n\t\t\t\t\targ_names |= 1;\n\t\t\t\t\tvar field_list = [], replacement_field = match[2], field_match = [];\n\t\t\t\t\tif ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n\t\t\t\t\t\tfield_list.push(field_match[1]);\n\t\t\t\t\t\twhile ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n\t\t\t\t\t\t\tif ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n\t\t\t\t\t\t\t\tfield_list.push(field_match[1]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {\n\t\t\t\t\t\t\t\tfield_list.push(field_match[1]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthrow('[sprintf] huh?');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow('[sprintf] huh?');\n\t\t\t\t\t}\n\t\t\t\t\tmatch[2] = field_list;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\targ_names |= 2;\n\t\t\t\t}\n\t\t\t\tif (arg_names === 3) {\n\t\t\t\t\tthrow('[sprintf] mixing positional and named placeholders is not (yet) supported');\n\t\t\t\t}\n\t\t\t\tparse_tree.push(match);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow('[sprintf] huh?');\n\t\t\t}\n\t\t\t_fmt = _fmt.substring(match[0].length);\n\t\t}\n\t\treturn parse_tree;\n\t};\n\n\treturn str_format;\n})();\n\nvar vsprintf = function(fmt, argv) {\n\targv.unshift(fmt);\n\treturn sprintf.apply(null, argv);\n};\n```\n", "tags": ["GoogleAppsScript"]}