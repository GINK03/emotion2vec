{"context": " More than 1 year has passed since last update.fp \u306e\u5024\u3092\u5206\u985e\u3057\u307e\u3059\u3002\n\nQNAN\n+0\n-0\n+inf\n-inf\ndenormal\nnegative normal\nSNAN\n\n\u306e\u5206\u985e\u304c\u3067\u304d\u307e\u3059\u3002\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3048\u307e\u3059\u3002\u4f8b\u3048\u3070 +0 or -0 \u3068\u3044\u3046\u5224\u5b9a\u304c\u3067\u304d\u307e\u3059\u3002\n#include <immintrin.h>\n#include <stdio.h>\n#include <math.h>\n\ndouble in[8] = {NAN,\n                1,\n                INFINITY,\n                1,\n\n                1e-308,\n                2.0,\n                0,\n                -0.0,\n};\n\nvoid\ndump_bits8(__mmask8 a)\n{\n    for (int i=0; i<8; i++) {\n        if (a & (1<<i)) {\n            putchar('1');\n        } else {\n            putchar('0');\n        }\n    }\n    puts(\"\");\n}\n\n#define FPCLASS_PD(cond,v,imm)                                          \\\n    __asm__ __volatile__ (\"vfpclasspd %[cat], %[src], %[dest]\\n\\t\"      \\\n                          :[dest]\"=Yk\"(cond)                            \\\n                          :[cat]\"i\"(imm),                               \\\n                           [src]\"v\"(v)                                  \\\n                          :);                                           \\\n\n#define CLASS_QNAN (1<<0)\n#define CLASS_POS_ZERO (1<<1)\n#define CLASS_NEG_ZERO (1<<2)\n#define CLASS_POS_INF (1<<3)\n#define CLASS_NEG_INF (1<<4)\n#define CLASS_DENORMAL (1<<5)\n#define CLASS_NEGATIVE (1<<6)\n#define CLASS_SNAN (1<<7)\n\nint\nmain()\n{\n    __m512d v0 = _mm512_loadu_pd(in);\n    __mmask8 cond_qnan;\n    __mmask8 cond_pos_zero;\n    __mmask8 cond_not_normal;\n    for (int i=0; i<8; i++) {\n        printf(\"%.1e, \", in[i]);\n    }\n\n    FPCLASS_PD(cond_qnan, v0, CLASS_QNAN);\n    FPCLASS_PD(cond_pos_zero, v0, CLASS_POS_ZERO);\n    FPCLASS_PD(cond_not_normal, v0, CLASS_QNAN | CLASS_POS_ZERO | CLASS_NEG_ZERO | CLASS_POS_INF | CLASS_NEG_INF | CLASS_DENORMAL | CLASS_SNAN);\n\n    printf(\"%x\\n\", cond_qnan);\n\n    printf(\"qnan     : \");\n    dump_bits8(cond_qnan);\n\n    printf(\"pos_zero : \");\n    dump_bits8(cond_pos_zero);\n\n    printf(\"!normal  : \");\n    dump_bits8(cond_not_normal);\n}\n\nnan, 1.0e+00, inf, 1.0e+00, 1.0e-308, 2.0e+00, 0.0e+00, -0.0e+00, 1\nqnan     : 10000000\npos_zero : 00000010\n!normal  : 10101011\n\n(+0\u306ffpclassify\u3067\u306enormal\u5224\u5b9a\u3055\u308c\u306a\u3044\u3068\u4eca\u77e5\u3063\u305f)\nvfpclasspd \u306f\u3001AVX512-DQ\u3068\u3044\u3046 \u307e\u305f\u5225\u306e \u62e1\u5f35\u306b\u306a\u3063\u3066\u3044\u3066(\u3044\u3063\u305f\u3044\u3044\u304f\u3064\u62e1\u5f35\u3042\u308b\u3093\u3060\u3088)\u3001sde \u306e\u6319\u52d5\u898b\u308b\u3068\u3001knl \u3067\u52d5\u304b\u306a\u3044\u3001skx \u3067\u52d5\u304f\u3068\u3044\u3046\u72b6\u614b\u306e\u3088\u3046\u3067\u3059\u3002\n\u660e\u65e5\u306f @tanakmura \u304c ' ' \u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\u3002\nfp \u306e\u5024\u3092\u5206\u985e\u3057\u307e\u3059\u3002\n\n- QNAN\n- +0\n- -0\n- +inf\n- -inf\n- denormal\n- negative normal\n- SNAN\n\n\u306e\u5206\u985e\u304c\u3067\u304d\u307e\u3059\u3002\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3048\u307e\u3059\u3002\u4f8b\u3048\u3070 +0 or -0 \u3068\u3044\u3046\u5224\u5b9a\u304c\u3067\u304d\u307e\u3059\u3002\n\n```cpp\n#include <immintrin.h>\n#include <stdio.h>\n#include <math.h>\n\ndouble in[8] = {NAN,\n                1,\n                INFINITY,\n                1,\n\n                1e-308,\n                2.0,\n                0,\n                -0.0,\n};\n\nvoid\ndump_bits8(__mmask8 a)\n{\n    for (int i=0; i<8; i++) {\n        if (a & (1<<i)) {\n            putchar('1');\n        } else {\n            putchar('0');\n        }\n    }\n    puts(\"\");\n}\n\n#define FPCLASS_PD(cond,v,imm)                                          \\\n    __asm__ __volatile__ (\"vfpclasspd %[cat], %[src], %[dest]\\n\\t\"      \\\n                          :[dest]\"=Yk\"(cond)                            \\\n                          :[cat]\"i\"(imm),                               \\\n                           [src]\"v\"(v)                                  \\\n                          :);                                           \\\n\n#define CLASS_QNAN (1<<0)\n#define CLASS_POS_ZERO (1<<1)\n#define CLASS_NEG_ZERO (1<<2)\n#define CLASS_POS_INF (1<<3)\n#define CLASS_NEG_INF (1<<4)\n#define CLASS_DENORMAL (1<<5)\n#define CLASS_NEGATIVE (1<<6)\n#define CLASS_SNAN (1<<7)\n\nint\nmain()\n{\n    __m512d v0 = _mm512_loadu_pd(in);\n    __mmask8 cond_qnan;\n    __mmask8 cond_pos_zero;\n    __mmask8 cond_not_normal;\n    for (int i=0; i<8; i++) {\n        printf(\"%.1e, \", in[i]);\n    }\n\n    FPCLASS_PD(cond_qnan, v0, CLASS_QNAN);\n    FPCLASS_PD(cond_pos_zero, v0, CLASS_POS_ZERO);\n    FPCLASS_PD(cond_not_normal, v0, CLASS_QNAN | CLASS_POS_ZERO | CLASS_NEG_ZERO | CLASS_POS_INF | CLASS_NEG_INF | CLASS_DENORMAL | CLASS_SNAN);\n\n    printf(\"%x\\n\", cond_qnan);\n\n    printf(\"qnan     : \");\n    dump_bits8(cond_qnan);\n\n    printf(\"pos_zero : \");\n    dump_bits8(cond_pos_zero);\n\n    printf(\"!normal  : \");\n    dump_bits8(cond_not_normal);\n}\n```\n\n```\nnan, 1.0e+00, inf, 1.0e+00, 1.0e-308, 2.0e+00, 0.0e+00, -0.0e+00, 1\nqnan     : 10000000\npos_zero : 00000010\n!normal  : 10101011\n```\n\n(+0\u306ffpclassify\u3067\u306enormal\u5224\u5b9a\u3055\u308c\u306a\u3044\u3068\u4eca\u77e5\u3063\u305f)\n\n\nvfpclasspd \u306f\u3001AVX512-DQ\u3068\u3044\u3046 **\u307e\u305f\u5225\u306e** \u62e1\u5f35\u306b\u306a\u3063\u3066\u3044\u3066(\u3044\u3063\u305f\u3044\u3044\u304f\u3064\u62e1\u5f35\u3042\u308b\u3093\u3060\u3088)\u3001sde \u306e\u6319\u52d5\u898b\u308b\u3068\u3001knl \u3067\u52d5\u304b\u306a\u3044\u3001skx \u3067\u52d5\u304f\u3068\u3044\u3046\u72b6\u614b\u306e\u3088\u3046\u3067\u3059\u3002\n\n\n\u660e\u65e5\u306f @tanakmura \u304c ' ' \u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\u3002\n", "tags": ["avx512"]}