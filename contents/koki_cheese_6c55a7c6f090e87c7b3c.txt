{"context": "\u30aa\u30a6\u30e0\u8fd4\u3057\u3059\u308bLINE Bot\u3092GAE/Go\u3067\u52d5\u304b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30b3\u30fc\u30c9\n\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\n\napp.yaml\nruntime: go\napi_version: go1\nthreadsafe: yes\n\ndefault_expiration: 1d\n\ninstance_class: F1\nautomatic_scaling:\n  min_idle_instances: 0\n  max_idle_instances: 1\n  min_pending_latency: automatic\n  max_pending_latency: automatic\n  max_concurrent_requests: 120\n\nhandlers:\n  - url: /.*\n    script: _go_app\n    secure: always\n\n\n\nmain.go\npackage main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/http/httputil\"\n    \"sync\"\n\n    \"google.golang.org/appengine\"\n    \"google.golang.org/appengine/log\"\n    \"google.golang.org/appengine/urlfetch\"\n)\n\nvar (\n    LINE_CHANNEL_ID     = \"\"\n    LINE_CHANNEL_SECRET = \"\"\n    LINE_CHANNEL_MID    = \"\"\n)\n\ntype Result struct {\n    ID          string                 `json:\"id\"`\n    EventType   string                 `json:\"eventType\"`\n    From        string                 `json:\"from\"`\n    FromChannel int                    `json:\"fromChannel\"`\n    ToChannel   int                    `json:\"toChannel\"`\n    To          []string               `json:\"to\"`\n    CreateTime  int                    `json:\"createdTime\"`\n    Content     map[string]interface{} `json:\"content\"`\n}\n\ntype Request struct {\n    Result []*Result `json:\"result\"`\n}\n\ntype Response struct {\n    To        []string               `json:\"to\"`\n    ToChannel int                    `json:\"toChannel\"`\n    EventType string                 `json:\"eventType\"`\n    Content   map[string]interface{} `json:\"content\"`\n}\n\nfunc (r *Response) Do(client *http.Client) (*http.Response, error) {\n    b, err := json.Marshal(r)\n    if err != nil {\n        return nil, fmt.Errorf(\"Send error: %v\\n\", err)\n    }\n    req, err := http.NewRequest(\"POST\", \"https://trialbot-api.line.me/v1/events\", bytes.NewReader(b))\n    if err != nil {\n        return nil, fmt.Errorf(\"NewRequest error: %v\\n\", err)\n    }\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    req.Header.Set(\"X-Line-ChannelID\", LINE_CHANNEL_ID)\n    req.Header.Set(\"X-Line-ChannelSecret\", LINE_CHANNEL_SECRET)\n    req.Header.Set(\"X-Line-Trusted-User-With-ACL\", LINE_CHANNEL_MID)\n    return client.Do(req)\n}\n\nfunc init() {\n    http.HandleFunc(\"/line/receive\", receiveLine)\n}\n\nfunc receiveLine(w http.ResponseWriter, r *http.Request) {\n    if r.Method != \"POST\" {\n        http.Error(w, \"method not allowed\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    dump, err := httputil.DumpRequest(r, true)\n    if err != nil {\n        http.Error(w, fmt.Sprint(err), http.StatusInternalServerError)\n        return\n    }\n    var req Request\n    err = json.NewDecoder(r.Body).Decode(&req)\n    if err != nil {\n        http.Error(w, fmt.Sprint(err), http.StatusInternalServerError)\n        return\n    }\n\n    ctx := appengine.NewContext(r)\n    log.Infof(ctx, \"%s\\n\", dump)\n    log.Infof(ctx, \"Request: %#v\\n\", req)\n\n    client := urlfetch.Client(ctx)\n\n    var wg sync.WaitGroup\n    wg.Add(len(req.Result))\n    for _, m := range req.Result {\n        go func(m *Result) {\n            defer wg.Done()\n            res := &Response{\n                To:        []string{m.Content[\"from\"].(string)},\n                ToChannel: 1383378250,\n                EventType: \"138311608800106203\",\n                Content:   m.Content,\n            }\n            resp, err := res.Do(client)\n            defer resp.Body.Close()\n            if err != nil {\n                log.Errorf(ctx, \"SendRequest error: %v\\n\", err)\n                return\n            }\n            body, err := ioutil.ReadAll(resp.Body)\n            if err != nil {\n                log.Errorf(ctx, \"response pershing error: %v\\n\", err)\n                return\n            }\n            log.Infof(ctx, \"SendResponse: %s\\n\", body)\n        }(m)\n    }\n    wg.Wait()\n    fmt.Fprintf(w, \"ok\")\n}\n\n\n\nCallback\u3068IP Address\u306e\u767b\u9332\nCallback\u306bhttps://{project-id}.appspot.com:443/line/receive\u3092\u767b\u9332\u3057\u305f\u3089\n\u4e00\u5ea6\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u3063\u3066\n{\"statusCode\":\"427\",\"statusMessage\":\"Your ip address [IP Address] is not allowed to access this API.\"}\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u66f8\u304b\u308c\u3066\u308bIP Address\u3092whitelist\u306b\u767b\u9332\u3059\u308c\u3070\u52d5\u304d\u307e\u3059\u3002\n\n\u307e\u3068\u3081\nIP\u304c\u3044\u3064\u3082\u56fa\u5b9a\u3068\u306f\u9650\u3089\u306a\u3044\u306e\u3067\u5909\u308f\u3063\u3066\u3057\u307e\u3063\u305f\u3089\u52d5\u304b\u306a\u304f\u306a\u308a\u307e\u3059\u3002\nwhitelist\u306eIP\u3092\u6307\u5b9a\u3067\u304d\u308b\u30ec\u30f3\u30b8\u3092\u3082\u3063\u3068\u5e83\u3052\u3066\u304f\u308c\u308c\u3070GAE\u304c\u4f7f\u3046IP\u3092\u5168\u90e8\u30ab\u30d0\u30fc\u3067\u304d\u308b\u306e\u3067\u3059\u304c...\n\u3082\u3057\u672c\u756a\u3067\u3082\u30db\u30ef\u30a4\u30c8\u30ea\u30b9\u30c8\u304c\u3053\u306e\u307e\u307e\u306a\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u4fe1\u306b\u306fGCE\u3068\u304b\u3067IP\u3092\u56fa\u5b9a\u3067\u304d\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5efa\u3066\u308b\u4e8b\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u306d\u3002\n\u30aa\u30a6\u30e0\u8fd4\u3057\u3059\u308bLINE Bot\u3092GAE/Go\u3067\u52d5\u304b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u30b3\u30fc\u30c9\n\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\n\n```yaml:app.yaml\nruntime: go\napi_version: go1\nthreadsafe: yes\n\ndefault_expiration: 1d\n\ninstance_class: F1\nautomatic_scaling:\n  min_idle_instances: 0\n  max_idle_instances: 1\n  min_pending_latency: automatic\n  max_pending_latency: automatic\n  max_concurrent_requests: 120\n\nhandlers:\n  - url: /.*\n    script: _go_app\n    secure: always\n```\n\n```go:main.go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"sync\"\n\n\t\"google.golang.org/appengine\"\n\t\"google.golang.org/appengine/log\"\n\t\"google.golang.org/appengine/urlfetch\"\n)\n\nvar (\n\tLINE_CHANNEL_ID     = \"\"\n\tLINE_CHANNEL_SECRET = \"\"\n\tLINE_CHANNEL_MID    = \"\"\n)\n\ntype Result struct {\n\tID          string                 `json:\"id\"`\n\tEventType   string                 `json:\"eventType\"`\n\tFrom        string                 `json:\"from\"`\n\tFromChannel int                    `json:\"fromChannel\"`\n\tToChannel   int                    `json:\"toChannel\"`\n\tTo          []string               `json:\"to\"`\n\tCreateTime  int                    `json:\"createdTime\"`\n\tContent     map[string]interface{} `json:\"content\"`\n}\n\ntype Request struct {\n\tResult []*Result `json:\"result\"`\n}\n\ntype Response struct {\n\tTo        []string               `json:\"to\"`\n\tToChannel int                    `json:\"toChannel\"`\n\tEventType string                 `json:\"eventType\"`\n\tContent   map[string]interface{} `json:\"content\"`\n}\n\nfunc (r *Response) Do(client *http.Client) (*http.Response, error) {\n\tb, err := json.Marshal(r)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Send error: %v\\n\", err)\n\t}\n\treq, err := http.NewRequest(\"POST\", \"https://trialbot-api.line.me/v1/events\", bytes.NewReader(b))\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"NewRequest error: %v\\n\", err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"X-Line-ChannelID\", LINE_CHANNEL_ID)\n\treq.Header.Set(\"X-Line-ChannelSecret\", LINE_CHANNEL_SECRET)\n\treq.Header.Set(\"X-Line-Trusted-User-With-ACL\", LINE_CHANNEL_MID)\n\treturn client.Do(req)\n}\n\nfunc init() {\n\thttp.HandleFunc(\"/line/receive\", receiveLine)\n}\n\nfunc receiveLine(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != \"POST\" {\n\t\thttp.Error(w, \"method not allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\n\tdump, err := httputil.DumpRequest(r, true)\n\tif err != nil {\n\t\thttp.Error(w, fmt.Sprint(err), http.StatusInternalServerError)\n\t\treturn\n\t}\n\tvar req Request\n\terr = json.NewDecoder(r.Body).Decode(&req)\n\tif err != nil {\n\t\thttp.Error(w, fmt.Sprint(err), http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tctx := appengine.NewContext(r)\n\tlog.Infof(ctx, \"%s\\n\", dump)\n\tlog.Infof(ctx, \"Request: %#v\\n\", req)\n\n\tclient := urlfetch.Client(ctx)\n\n\tvar wg sync.WaitGroup\n\twg.Add(len(req.Result))\n\tfor _, m := range req.Result {\n\t\tgo func(m *Result) {\n\t\t\tdefer wg.Done()\n\t\t\tres := &Response{\n\t\t\t\tTo:        []string{m.Content[\"from\"].(string)},\n\t\t\t\tToChannel: 1383378250,\n\t\t\t\tEventType: \"138311608800106203\",\n\t\t\t\tContent:   m.Content,\n\t\t\t}\n\t\t\tresp, err := res.Do(client)\n\t\t\tdefer resp.Body.Close()\n\t\t\tif err != nil {\n\t\t\t\tlog.Errorf(ctx, \"SendRequest error: %v\\n\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tbody, err := ioutil.ReadAll(resp.Body)\n\t\t\tif err != nil {\n\t\t\t\tlog.Errorf(ctx, \"response pershing error: %v\\n\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlog.Infof(ctx, \"SendResponse: %s\\n\", body)\n\t\t}(m)\n\t}\n\twg.Wait()\n\tfmt.Fprintf(w, \"ok\")\n}\n```\n\n# Callback\u3068IP Address\u306e\u767b\u9332\n\nCallback\u306b`https://{project-id}.appspot.com:443/line/receive`\u3092\u767b\u9332\u3057\u305f\u3089\n\u4e00\u5ea6\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u3063\u3066\n\n`{\"statusCode\":\"427\",\"statusMessage\":\"Your ip address [IP Address] is not allowed to access this API.\"}`\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u66f8\u304b\u308c\u3066\u308bIP Address\u3092whitelist\u306b\u767b\u9332\u3059\u308c\u3070\u52d5\u304d\u307e\u3059\u3002\n\n# \u307e\u3068\u3081\n\nIP\u304c\u3044\u3064\u3082\u56fa\u5b9a\u3068\u306f\u9650\u3089\u306a\u3044\u306e\u3067\u5909\u308f\u3063\u3066\u3057\u307e\u3063\u305f\u3089\u52d5\u304b\u306a\u304f\u306a\u308a\u307e\u3059\u3002\nwhitelist\u306eIP\u3092\u6307\u5b9a\u3067\u304d\u308b\u30ec\u30f3\u30b8\u3092\u3082\u3063\u3068\u5e83\u3052\u3066\u304f\u308c\u308c\u3070GAE\u304c\u4f7f\u3046IP\u3092\u5168\u90e8\u30ab\u30d0\u30fc\u3067\u304d\u308b\u306e\u3067\u3059\u304c...\n\n\u3082\u3057\u672c\u756a\u3067\u3082\u30db\u30ef\u30a4\u30c8\u30ea\u30b9\u30c8\u304c\u3053\u306e\u307e\u307e\u306a\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u4fe1\u306b\u306fGCE\u3068\u304b\u3067IP\u3092\u56fa\u5b9a\u3067\u304d\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5efa\u3066\u308b\u4e8b\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u306d\u3002\n", "tags": ["Go", "Line", "linebot", "GoogleAppEngine", "GoogleCloudPlatform"]}