{"tags": ["C++", "JSON", "picojson", "JSON-RPC-2.0", "library"], "context": "\n\n\u6982\u8981\npicojson \u3092\u4f7f\u3044 JSON-RPC 2.0 \u3092\u6271\u3046 C++ \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u5b9f\u88c5\u3092\u3084\u3063\u3064\u3051\u305f\u306e\u3067\u7d39\u4ecb\u3057\u305f\u3044\u3002\n\n\u7279\u5fb4\n\n\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\n\n\npicojson\nboost::signals2\nboost::uuids\n\n\nstd=c++1z\n\u7528\u9014\u3068\u6a5f\u80fd\n\n\n\nJSON-RPC 2.0 \u3092\u6271\u3046\n\n\nrequest \u3092 picojson::value \u3067\u53d7\u3051\u3066 response \uff08 result or error \uff09\u3092 picojson::value \u3067\u8fd4\u3059\u30d5\u30a1\u30f3\u30af\u30bf\u30fc\u7fa4\u3092 boost::signals2::signal \u3067 std::string \u306e\u30e1\u30bd\u30c3\u30c9\u540d\u3068\u306e unordered_map \u3067\u30de\u30c3\u30d4\u30f3\u30b0\u30fb\u7ba1\u7406\u3059\u308b picojson \u30d9\u30fc\u30b9\u306e JSON-RPC 2.0 \u30b5\u30fc\u30d0\u30fc server_type \uff08 HTTP \u6a5f\u80fd\u306f\u7121\u3057 \uff09\nrequest \u3092\u304a\u624b\u8efd\u306b\u751f\u6210\u3059\u308b make_request \u3084 make_request_with_uuidv4\n\nrequest \u304b\u3089 id, method, params \u3092\u53d6\u5f97\u3057\u3064\u3064\u30a8\u30e9\u30fc\u304c\u3042\u308c\u3070\u4f8b\u5916\u3092\u6295\u3052\u305f\u308a\u3001\u4f8b\u5916\u304b\u3089 error \u306e response \u3092\u8fd4\u3059\u6a5f\u80fd\nresult \u306e response \u3092\u304a\u624b\u8efd\u306b\u751f\u6210\u3059\u308b make_response \u3084 meke_response_from_request\n\netc.\n\n\n\n\n\n\n\u5b9f\u88c5\n\nhttps://github.com/usagi/usagi/tree/master/include/usagi/json/picojson/rpc/jsonrpc20\n\n\n\u4f7f\u3044\u65b9\n\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306f\u6b21\u306e\u69d8\u306a\u624b\u9806\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059: \n\n\nserver_type \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 s \u3092\u751f\u6210\n\ns \u306b .connect \u3067 server_type::method_functor_type \u306a JSON-RPC \u306e\u30e1\u30bd\u30c3\u30c9\u3092\u63a5\u7d9a\n\n\n\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u7b2c3\u5f15\u6570\u306b shared_ptr \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6295\u3052\u3066\u30e1\u30bd\u30c3\u30c9\u306e\u63a5\u7d9a\u306e\u81ea\u52d5\u7ba1\u7406\uff08 track_foreign \uff09\u3092\u884c\u3046\uff08\u591a\u304f\u306e\u5834\u5408\u306b\u30b3\u30cd\u30af\u30bf\u30fc\u306e\u624b\u52d5\u7ba1\u7406\u3088\u308a\u3082\u304a\u52e7\u3081\uff09\n\n\nHTTP \u306a\u3069\u3067\u53d7\u3051\u53d6\u3063\u305f JSON \u6587\u5b57\u5217\u306e JSON-RPC 2.0 \u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092 picojson::value \u306b\u3057\u3066 s \u306e operator() \u3078\u653e\u308a\u6295\u3052\u308b\n\ns \u306b\u653e\u308a\u6295\u3052\u3066\u8fd4\u3063\u3066\u6765\u305f picojson::value \uff08 result or error \uff09\u3092 HTTP \u306a\u3069\u3067\u8fd4\u3059\n\n\nexample\n\nhttps://github.com/usagi/usagi/blob/master/example/jsonrpc20.cxx\n\n#include <usagi/json/picojson/rpc/jsonrpc20.hxx>\n\n#include <memory>\n\nauto main() -> int\n{\n  using namespace usagi::json::picojson;\n  using namespace usagi::json::picojson::rpc::jsonrpc20;\n\n  server_type s;\n\n  // \u91ce\u751f\u306e\u03bb\n  auto fa = []( const value_type& request ){ return value_type( request.get< double >() * 2.0 ); };\n\n  // s \u306b\u5b58\u5728\u3057\u306a\u3044\u30e1\u30bd\u30c3\u30c9 aaa \u3092 uuidv4 \u306e id \u4ed8\u304d\u3067\u547c\u3076\n  std::cout << \"trial-1: \" << s( make_request_with_uuidv4( \"aaa\", value_type( 1.23 ) ) ) << '\\n';\n\n  // s \u306b fa \u3092\u30e1\u30bd\u30c3\u30c9\u540d aaa \u3068\u3057\u3066\u63a5\u7d9a\u3057\u30b3\u30cd\u30af\u30bf\u30fc ca \u3092\u53d6\u5f97\n  auto ca = s.connect( \"aaa\", fa );\n\n  // s \u306b\u5b58\u5728\u3059\u308b\u30e1\u30bd\u30c3\u30c9 aaa \u3092\u547c\u3076\uff08\u671f\u5f85\u3055\u308c\u308b\u578b\u306e\u5f15\u6570\u3092\u4f34\u3046\uff09\n  std::cout << \"trial-2: \" << s( make_request_with_uuidv4( \"aaa\", value_type( 1.23 ) ) ) << '\\n';\n  // s \u306b\u5b58\u5728\u3059\u308b\u30e1\u30bd\u30c3\u30c9 aaa \u3092\u547c\u3076\uff08\u671f\u5f85\u3055\u308c\u306a\u3044\u578b\u306e\u5f15\u6570\u3092\u4f34\u3046\uff09\n  std::cout << \"trial-3: \" << s( make_request_with_uuidv4( \"aaa\", value_type( \"1.23\" ) ) ) << '\\n';\n\n  // s \u306b\u63a5\u7d9a\u3057\u305f fa \u3092\u30b3\u30cd\u30af\u30bf\u30fc ca \u304b\u3089\u5207\u65ad\n  ca.disconnect();\n\n  // \u6709\u52b9\u306a\u30b9\u30ed\u30c3\u30c8\u304c\u5b58\u5728\u3057\u306a\u3044\u30e1\u30bd\u30c3\u30c9 aaa \u3092\u547c\u3076\n  std::cout << \"trial-4: \" << s( make_request_with_uuidv4( \"aaa\", value_type( 1.23 ) ) ) << '\\n';\n\n  // shared_ptr \u306e functor\n  auto fb = std::make_shared< server_type::method_functor_type >( []( const auto& ) { return value_type(); } );\n\n  // s \u306b\u5b58\u5728\u3057\u306a\u3044\u30e1\u30bd\u30c3\u30c9 bbb \u3092 id \u306a\u3057\uff08 = null \uff09\u3067\u547c\u3076\n  std::cout << \"trial-5: \" << s( make_request( \"bbb\", value_type( 1.23 ) ) ) << '\\n';\n\n  // s \u306b fb \u306e\u4e2d\u8eab\u306e functor \u3092 fb \u3092\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u3055\u305b\u3064\u3064\u63a5\u7d9a\u3057\u30b3\u30cd\u30af\u30bf\u30fc cb \u3092\u53d6\u5f97\n  auto cb = s.connect( \"bbb\", *fb, fb );\n\n  // s \u306b\u5b58\u5728\u3059\u308b\u30e1\u30bd\u30c3\u30c9 bbb \u3092\u547c\u3076\n  std::cout << \"trial-6: \" << s( make_request( \"bbb\" ) ) << '\\n';\n\n  // s \u306e\u30e1\u30bd\u30c3\u30c9 bbb \u306b\u63a5\u7d9a\u3057\u305f fb \u306e\u4e2d\u8eab\u306e functor \u3068\u306e\u63a5\u7d9a\u3092\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u3059\u308b fb \u3092\u7121\u52b9\u5316\u3059\u308b\uff08\u540c\u6642\u306b\u63a5\u7d9a\u304c\u81ea\u52d5\u7684\u306b\u5207\u65ad\u3055\u308c\u308b\uff09\n  fb.reset();\n\n  // \uff08\u81ea\u52d5\u7684\u306b\u5207\u65ad\u3055\u308c\uff09\u6709\u52b9\u306a\u30b9\u30ed\u30c3\u30c8\u304c\u5b58\u5728\u3057\u306a\u3044\u30e1\u30bd\u30c3\u30c9 bbb \u3092\u547c\u3076\n  std::cout << \"trial-7: \" << s( make_request( \"bbb\" ) ) << '\\n';\n}\n\n\nexample \u306e\u52d5\u4f5c\u7d50\u679c\ntrial-1: {\"error\":{\"code\":-32601,\"data\":null,\"message\":\"Method not found\"},\"id\":\"7b474b5e-6df1-4200-8ba0-74508f8e6206\",\"jsonrpc\":\"2.0\"}\ntrial-2: {\"id\":\"869650e4-0869-4304-ace6-27862ff5817b\",\"jsonrpc\":\"2.0\",\"result\":2.46}\ntrial-3: {\"error\":{\"code\":-32603,\"data\":null,\"message\":\"Internal error ( \\\"type mismatch! call is<type>() before get<type>()\\\" && is<double>() ) \"},\"id\":\"2d1e3204-493a-4edc-88b2-73b341546e1c\",\"jsonrpc\":\"2.0\"}\ntrial-4: {\"error\":{\"code\":-32601,\"data\":null,\"message\":\"Method not found ( sigal is empty. ) \"},\"id\":\"4c102ebc-23a7-466a-9f4c-b9fcc1c727a5\",\"jsonrpc\":\"2.0\"}\ntrial-5: {\"error\":{\"code\":-32601,\"data\":null,\"message\":\"Method not found\"},\"id\":null,\"jsonrpc\":\"2.0\"}\ntrial-6: {\"id\":null,\"jsonrpc\":\"2.0\",\"result\":null}\ntrial-7: {\"error\":{\"code\":-32601,\"data\":null,\"message\":\"Method not found ( sigal is empty. ) \"},\"id\":null,\"jsonrpc\":\"2.0\"}\n\n\n\ncmake \u7d4c\u7531\u3067 example \u3092\u8a66\u3059\u5834\u5408\ngit clone git@github.com:usagi/usagi.git\ncd usagi\nmkdir build\ncd build\ncmake .. -G Ninja -DEXAMPLES=1\nninja jsonrpc20\n./jsonrpc20\n\n# \u6982\u8981\n\n[picojson]() \u3092\u4f7f\u3044 [JSON-RPC 2.0](http://www.jsonrpc.org/specification) \u3092\u6271\u3046 C++ \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u5b9f\u88c5\u3092\u3084\u3063\u3064\u3051\u305f\u306e\u3067\u7d39\u4ecb\u3057\u305f\u3044\u3002\n\n## \u7279\u5fb4\n\n- \u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\n    - [picojson](https://github.com/kazuho/picojson/)\n    - [boost::signals2](http://www.boost.org/doc/libs/1_63_0/doc/html/signals2.html)\n    - [boost::uuids](http://www.boost.org/doc/libs/1_63_0/libs/uuid/uuid.html)\n- `std=c++1z`\n- \u7528\u9014\u3068\u6a5f\u80fd\n    - [JSON-RPC 2.0](http://www.jsonrpc.org/specification) \u3092\u6271\u3046\n        - request \u3092 picojson::value \u3067\u53d7\u3051\u3066 response \uff08 result or error \uff09\u3092 picojson::value \u3067\u8fd4\u3059\u30d5\u30a1\u30f3\u30af\u30bf\u30fc\u7fa4\u3092 `boost::signals2::signal` \u3067 `std::string` \u306e\u30e1\u30bd\u30c3\u30c9\u540d\u3068\u306e `unordered_map` \u3067\u30de\u30c3\u30d4\u30f3\u30b0\u30fb\u7ba1\u7406\u3059\u308b picojson \u30d9\u30fc\u30b9\u306e JSON-RPC 2.0 \u30b5\u30fc\u30d0\u30fc `server_type` \uff08 HTTP \u6a5f\u80fd\u306f\u7121\u3057 \uff09\n        - request \u3092\u304a\u624b\u8efd\u306b\u751f\u6210\u3059\u308b `make_request` \u3084 `make_request_with_uuidv4`\n        - request \u304b\u3089 id, method, params \u3092\u53d6\u5f97\u3057\u3064\u3064\u30a8\u30e9\u30fc\u304c\u3042\u308c\u3070\u4f8b\u5916\u3092\u6295\u3052\u305f\u308a\u3001\u4f8b\u5916\u304b\u3089 error \u306e response \u3092\u8fd4\u3059\u6a5f\u80fd\n        - result \u306e response \u3092\u304a\u624b\u8efd\u306b\u751f\u6210\u3059\u308b `make_response` \u3084 `meke_response_from_request`\n        - etc.\n\n# \u5b9f\u88c5\n\n- https://github.com/usagi/usagi/tree/master/include/usagi/json/picojson/rpc/jsonrpc20\n\n# \u4f7f\u3044\u65b9\n\n\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306f\u6b21\u306e\u69d8\u306a\u624b\u9806\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059: \n\n1. `server_type` \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 `s` \u3092\u751f\u6210\n2. `s` \u306b `.connect` \u3067 `server_type::method_functor_type` \u306a JSON-RPC \u306e\u30e1\u30bd\u30c3\u30c9\u3092\u63a5\u7d9a\n    - \u5fc5\u8981\u306b\u5fdc\u3058\u3066\u7b2c3\u5f15\u6570\u306b `shared_ptr` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6295\u3052\u3066\u30e1\u30bd\u30c3\u30c9\u306e\u63a5\u7d9a\u306e\u81ea\u52d5\u7ba1\u7406\uff08 `track_foreign` \uff09\u3092\u884c\u3046\uff08\u591a\u304f\u306e\u5834\u5408\u306b\u30b3\u30cd\u30af\u30bf\u30fc\u306e\u624b\u52d5\u7ba1\u7406\u3088\u308a\u3082\u304a\u52e7\u3081\uff09\n3. HTTP \u306a\u3069\u3067\u53d7\u3051\u53d6\u3063\u305f JSON \u6587\u5b57\u5217\u306e JSON-RPC 2.0 \u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092 picojson::value \u306b\u3057\u3066 `s` \u306e `operator()` \u3078\u653e\u308a\u6295\u3052\u308b\n4. `s` \u306b\u653e\u308a\u6295\u3052\u3066\u8fd4\u3063\u3066\u6765\u305f picojson::value \uff08 result or error \uff09\u3092 HTTP \u306a\u3069\u3067\u8fd4\u3059\n\n## example\n\n- https://github.com/usagi/usagi/blob/master/example/jsonrpc20.cxx\n\n```C++\n#include <usagi/json/picojson/rpc/jsonrpc20.hxx>\n\n#include <memory>\n\nauto main() -> int\n{\n  using namespace usagi::json::picojson;\n  using namespace usagi::json::picojson::rpc::jsonrpc20;\n  \n  server_type s;\n  \n  // \u91ce\u751f\u306e\u03bb\n  auto fa = []( const value_type& request ){ return value_type( request.get< double >() * 2.0 ); };\n  \n  // s \u306b\u5b58\u5728\u3057\u306a\u3044\u30e1\u30bd\u30c3\u30c9 aaa \u3092 uuidv4 \u306e id \u4ed8\u304d\u3067\u547c\u3076\n  std::cout << \"trial-1: \" << s( make_request_with_uuidv4( \"aaa\", value_type( 1.23 ) ) ) << '\\n';\n  \n  // s \u306b fa \u3092\u30e1\u30bd\u30c3\u30c9\u540d aaa \u3068\u3057\u3066\u63a5\u7d9a\u3057\u30b3\u30cd\u30af\u30bf\u30fc ca \u3092\u53d6\u5f97\n  auto ca = s.connect( \"aaa\", fa );\n  \n  // s \u306b\u5b58\u5728\u3059\u308b\u30e1\u30bd\u30c3\u30c9 aaa \u3092\u547c\u3076\uff08\u671f\u5f85\u3055\u308c\u308b\u578b\u306e\u5f15\u6570\u3092\u4f34\u3046\uff09\n  std::cout << \"trial-2: \" << s( make_request_with_uuidv4( \"aaa\", value_type( 1.23 ) ) ) << '\\n';\n  // s \u306b\u5b58\u5728\u3059\u308b\u30e1\u30bd\u30c3\u30c9 aaa \u3092\u547c\u3076\uff08\u671f\u5f85\u3055\u308c\u306a\u3044\u578b\u306e\u5f15\u6570\u3092\u4f34\u3046\uff09\n  std::cout << \"trial-3: \" << s( make_request_with_uuidv4( \"aaa\", value_type( \"1.23\" ) ) ) << '\\n';\n  \n  // s \u306b\u63a5\u7d9a\u3057\u305f fa \u3092\u30b3\u30cd\u30af\u30bf\u30fc ca \u304b\u3089\u5207\u65ad\n  ca.disconnect();\n  \n  // \u6709\u52b9\u306a\u30b9\u30ed\u30c3\u30c8\u304c\u5b58\u5728\u3057\u306a\u3044\u30e1\u30bd\u30c3\u30c9 aaa \u3092\u547c\u3076\n  std::cout << \"trial-4: \" << s( make_request_with_uuidv4( \"aaa\", value_type( 1.23 ) ) ) << '\\n';\n  \n  // shared_ptr \u306e functor\n  auto fb = std::make_shared< server_type::method_functor_type >( []( const auto& ) { return value_type(); } );\n  \n  // s \u306b\u5b58\u5728\u3057\u306a\u3044\u30e1\u30bd\u30c3\u30c9 bbb \u3092 id \u306a\u3057\uff08 = null \uff09\u3067\u547c\u3076\n  std::cout << \"trial-5: \" << s( make_request( \"bbb\", value_type( 1.23 ) ) ) << '\\n';\n  \n  // s \u306b fb \u306e\u4e2d\u8eab\u306e functor \u3092 fb \u3092\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u3055\u305b\u3064\u3064\u63a5\u7d9a\u3057\u30b3\u30cd\u30af\u30bf\u30fc cb \u3092\u53d6\u5f97\n  auto cb = s.connect( \"bbb\", *fb, fb );\n  \n  // s \u306b\u5b58\u5728\u3059\u308b\u30e1\u30bd\u30c3\u30c9 bbb \u3092\u547c\u3076\n  std::cout << \"trial-6: \" << s( make_request( \"bbb\" ) ) << '\\n';\n  \n  // s \u306e\u30e1\u30bd\u30c3\u30c9 bbb \u306b\u63a5\u7d9a\u3057\u305f fb \u306e\u4e2d\u8eab\u306e functor \u3068\u306e\u63a5\u7d9a\u3092\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u3059\u308b fb \u3092\u7121\u52b9\u5316\u3059\u308b\uff08\u540c\u6642\u306b\u63a5\u7d9a\u304c\u81ea\u52d5\u7684\u306b\u5207\u65ad\u3055\u308c\u308b\uff09\n  fb.reset();\n  \n  // \uff08\u81ea\u52d5\u7684\u306b\u5207\u65ad\u3055\u308c\uff09\u6709\u52b9\u306a\u30b9\u30ed\u30c3\u30c8\u304c\u5b58\u5728\u3057\u306a\u3044\u30e1\u30bd\u30c3\u30c9 bbb \u3092\u547c\u3076\n  std::cout << \"trial-7: \" << s( make_request( \"bbb\" ) ) << '\\n';\n}\n```\n\n### example \u306e\u52d5\u4f5c\u7d50\u679c\n\n```json\ntrial-1: {\"error\":{\"code\":-32601,\"data\":null,\"message\":\"Method not found\"},\"id\":\"7b474b5e-6df1-4200-8ba0-74508f8e6206\",\"jsonrpc\":\"2.0\"}\ntrial-2: {\"id\":\"869650e4-0869-4304-ace6-27862ff5817b\",\"jsonrpc\":\"2.0\",\"result\":2.46}\ntrial-3: {\"error\":{\"code\":-32603,\"data\":null,\"message\":\"Internal error ( \\\"type mismatch! call is<type>() before get<type>()\\\" && is<double>() ) \"},\"id\":\"2d1e3204-493a-4edc-88b2-73b341546e1c\",\"jsonrpc\":\"2.0\"}\ntrial-4: {\"error\":{\"code\":-32601,\"data\":null,\"message\":\"Method not found ( sigal is empty. ) \"},\"id\":\"4c102ebc-23a7-466a-9f4c-b9fcc1c727a5\",\"jsonrpc\":\"2.0\"}\ntrial-5: {\"error\":{\"code\":-32601,\"data\":null,\"message\":\"Method not found\"},\"id\":null,\"jsonrpc\":\"2.0\"}\ntrial-6: {\"id\":null,\"jsonrpc\":\"2.0\",\"result\":null}\ntrial-7: {\"error\":{\"code\":-32601,\"data\":null,\"message\":\"Method not found ( sigal is empty. ) \"},\"id\":null,\"jsonrpc\":\"2.0\"}\n\n```\n\n### cmake \u7d4c\u7531\u3067 example \u3092\u8a66\u3059\u5834\u5408\n\n```zsh\ngit clone git@github.com:usagi/usagi.git\ncd usagi\nmkdir build\ncd build\ncmake .. -G Ninja -DEXAMPLES=1\nninja jsonrpc20\n./jsonrpc20\n```\n"}