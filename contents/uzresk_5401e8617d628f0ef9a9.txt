{"context": "\n\n\u306f\u3058\u3081\u306b\n\nAWS SWF\u3054\u5b58\u77e5\u3067\u3057\u3087\u3046\u304b\u3002\u5927\u4f53\u306e\u4eba\u304c\u540d\u524d\u306f\u77e5\u3063\u3066\u308b\u3051\u3069\u89e6\u3063\u305f\u3053\u3068\u304c\u306a\u3044\u3068\u3044\u3046\u53cd\u5fdc\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\uff08SWF\u4f7f\u3044\u3069\u3053\u308d\u305f\u304f\u3055\u3093\u3042\u308b\u3093\u3060\u3051\u3069\u3001\u3084\u3063\u3071\u308a\u6d41\u884c\u3089\u306a\u3044\u306e\u304b\u306a\u30fc\uff08\u6d99\uff09\uff09\nSWF\u3068FlowFramework(Java or Ruby)\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u7c21\u5358\u306b\uff08\uff1f\uff09\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u51c4\u3044\u30b5\u30fc\u30d3\u30b9\u306a\u3093\u3067\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306fSWF\u306eActivity\u306bLambda\u3092\u4f7f\u3063\u3066\u5e78\u305b\u306b\u306a\u308d\u3046\u305c\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3059\u3002\nLambda\u306f\u4eba\u6c17\u304c\u3042\u3063\u3066\u8a18\u4e8b\u3082\u305f\u304f\u3055\u3093\u3042\u308b\u306e\u3067\u3059\u304c\u3001SWF\u306f\u59cb\u3081\u306e\u3068\u3063\u3064\u304d\u306b\u304f\u3055\u304b\u3089\u304b\u3001\u5468\u308a\u306b\u4f7f\u3063\u3066\u308b\u4eba\u304c\u898b\u3064\u3051\u3089\u308c\u305a\u3001\u30cd\u30c3\u30c8\u4e0a\u3067\u3082\u65e5\u672c\u8a9e\u306e\u60c5\u5831\u6e90\u304c\u975e\u5e38\u306b\u5c11\u306a\u3044\u306e\u3067\u3059\u3002\u306a\u306e\u3067\u5c11\u3057\u666e\u53ca\u306b\u8ca2\u732e\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\uff08\u666e\u53ca\u306b\u8ca2\u732e\u3057\u305f\u3044\u4eba\u3001\u4e00\u7dd2\u306b\u52c9\u5f37\u4f1a\u3067\u3082\u3057\u307e\u3057\u3087\u3046\uff09\n\n\nSWF\u306e\u57fa\u790e\u7684\u306a\u8a71\n\nSWF\u306e\u6982\u8981\u3092\u7406\u89e3\u3059\u308b\u306b\u306f\u307e\u305a\u306f\u3053\u3061\u3089\u306e\u8cc7\u6599\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\u3053\u306e\u8cc7\u6599\u3092\u898b\u3066\u308f\u304b\u308b\u3088\u3046\u306bAWS SWF\u3067\u306f\u5927\u304d\u304f\uff14\u4eba\u306e\u767b\u5834\u4eba\u7269\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n\n\n\nClient(Executor) \u30fb\u30fb\u30fb workflow\u3092\u30ad\u30c3\u30af\u3059\u308b\u4eba\u3067\u3059\u3002\u30aa\u30f3\u30d7\u30ec\u30df\u30b9\u5074\u304b\u3089SWF\u306eEndpoint\u306b\u63a5\u7d9a\u3057\u3066\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\nSWF\u30fb\u30fb\u30fbSWF\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u5b9f\u884c\u306e\u8981\u6c42\u3092\u53d7\u4ed8\u3051\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306e\u30ad\u30e5\u30fc\u306e\u7ba1\u7406\u3092\u3057\u3066\u304f\u308c\u307e\u3059\u3002\nDesider\u30fb\u30fb\u30fbSWF\u306e\u30ad\u30e5\u30fc\uff08\u30c9\u30e1\u30a4\u30f3\u30fb\u30bf\u30b9\u30af\u30ea\u30b9\u30c8\uff09\u3092\u76e3\u8996\u3057\u306a\u304c\u3089\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u9032\u3081\u308b\u4eba\u3067\u3059\u3002\u305f\u3060\u30bf\u30b9\u30af\u3092\u7ba1\u7406\u3059\u308b\u3060\u3051\u3067\u5b9f\u969b\u306e\u51e6\u7406\u306f\u884c\u3044\u307e\u305b\u3093\u3002SWF\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u3064\u306a\u304c\u308b\u306e\u3067\u3042\u308c\u3070EC2\u3067\u3082\u3088\u3044\u3067\u3059\u3057\u3001\u30aa\u30f3\u30d7\u30ec\u30df\u30b9\u306e\u30b5\u30fc\u30d0\u3092\u4f7f\u3063\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\nActivity\u30fb\u30fb\u30fbDesider\u304b\u3089\u632f\u3089\u308c\u305f\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u4eba\u3067\u3059\u3002\u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002Activity\u3082SWF\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u3064\u306a\u304c\u308b\u306e\u3067\u3042\u308c\u3070EC2\u3067\u3082\u3088\u3044\u3067\u3059\u3057\u3001\u30aa\u30f3\u30d7\u30ec\u30df\u30b9\u306e\u30b5\u30fc\u30d0\u3092\u4f7f\u3063\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\nActivity\u306b\u306f\u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u3067\u3001\u51e6\u7406\u6642\u9593\u304c\u304b\u304b\u308a\u8ca0\u8377\u304c\u304b\u304b\u308b\u3082\u306e\u304c\u5b9f\u88c5\u3055\u308c\u308b\u305f\u3081\u3001\u5b9f\u969b\u306b\u904b\u7528\u3057\u3066\u3044\u304f\u3068\u306a\u308b\u3068Activity\u3092\u30b9\u30b1\u30fc\u30eb\u30a2\u30a6\u30c8\u3057\u3066\u3044\u304f\u904b\u7528\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\u3055\u3066\u672c\u984c\n\nSWF\u3092\u4e2d\u5fc3\u3068\u3057\u305f\u758e\u7d50\u5408\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306a\u306e\u3067\u3001Activity\u3092\u30b9\u30b1\u30fc\u30eb\u30a2\u30a6\u30c8\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u8ca0\u8377\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u81ea\u52d5\u30b9\u30b1\u30fc\u30eb\u30a2\u30a6\u30c8\u3059\u308b\u306b\u306fActivity\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092AutoScalingGroup\u306b\u767b\u9332\u3055\u305b\u308c\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u3002\u305d\u308c\u3059\u3089\u9762\u5012\u306a\u3089ElasticBeansTalk\u306b\u304a\u4efb\u305b\u3057\u307e\u3057\u3087\u3046\u3002\u305d\u308c\u3059\u3089\u3082\u9762\u5012\u3060\u3001\u3082\u3063\u3068\u5b89\u304f\u904b\u7528\u3057\u305f\u3044\u3093\u3060\u3063\u305f\u3089Lamda\u306a\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u3068\u601d\u3046\u308f\u3051\u3067\u3059\u3002\nLambda\u3092\u4f7f\u3063\u305f\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nActivity\u306e\u90e8\u5206\u304cLambda\u306b\u306a\u3063\u305f\u3060\u3051\u3067\u3059\u304c\u3001Activity\u306e\u904b\u7528\u304b\u3089\u89e3\u304d\u653e\u305f\u308c\u308b\u3068\u601d\u3046\u3068\u3053\u3093\u306a\u306b\u5b09\u3057\u3044\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u65e9\u901f\u5b9f\u88c5\u65b9\u6cd5\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\uff08LambdaFunction\u306e\u767b\u9332\u306f\u901a\u5e38Lambda\u3092\u5229\u7528\u3059\u308b\u3068\u304d\u3068\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\uff09\n\n\n\n\u30b7\u30f3\u30d7\u30eb\u306b\u547c\u3073\u51fa\u3059\n\nDesider\u304b\u3089Lambda\u3092\u547c\u3073\u51fa\u3059\u65b9\u6cd5\n\nSWF\u306b\u4ed8\u5c5e\u3057\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u306fLambdaFunction\u3078\u547c\u3073\u3063\u3071\u306a\u3057\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306fLambda\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3092\u5f85\u3064\u5f62\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n    @Override\n    public void hello(String name) throws Exception {\n\n        task = new TryCatchFinally() {\n\n            @Override\n            protected void doTry() throws Throwable {\n                ConfigHelper configHelper = ConfigHelper.createConfig();\n                DecisionContextProvider decisionProvider =\n                        new DecisionContextProviderImpl();\n\n                DecisionContext decisionContext = decisionProvider.getDecisionContext();\n                LambdaFunctionClient lambdaClient =\n                        decisionContext.getLambdaFunctionClient();\n\n                // lambda\u306e\u5f15\u6570\u306fjson\n                Promise<String> val = lambdaClient.scheduleLambdaFunction(\n                        configHelper.getSwfLambdaFunction(), \"\\\"\" + name + \"\\\"\", 30);\n                // lambda function\u306e\u547c\u3073\u51fa\u3057\u304c\u7d42\u308f\u308b\u307e\u3067\u5f85\u3064\n                processResult(val);\n\n            }\n\n            @Override\n            protected void doCatch(Throwable e) throws Throwable {\n                logger.error(\"catch exception\", e);\n                // \u4f8b\u5916\u51e6\u7406\n                throw e;\n            }\n\n            @Override\n            protected void doFinally() throws Throwable {\n                // noop\n            }\n        };\n    }\n\n    @Asynchronous\n    private void processResult(Promise<String> lambdaClientResult) {\n        System.out.println(\"ready[\" + LocalTime.now() + \"] lambda return value[\"\n                + lambdaClientResult.get() + \"]\");\n    }\n}\n\n\nscheduleLambdaFunction\u306e\u7b2c\u4e00\u5f15\u6570\u306fLambdaFunction\u540d\u3001\u7b2c\u4e8c\u5f15\u6570\u306fLambdaFunction\u3078\u306e\u5f15\u6570\uff08json\u306e\u307f\uff09\u3001\u7b2c\u4e09\u5f15\u6570\u306ftimeout\u306e\u6642\u9593\u306b\u306a\u308a\u307e\u3059\u3002\nLambdaFunction\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u304cPromise\u3067\u53d6\u308c\u307e\u3059\u306e\u3067\u3001\u3053\u308c\u3092Asynchronous\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3059\u3053\u3068\u3067LambdaFunction\u306e\u5b9f\u884c\u3092\u5f85\u3063\u3066\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n\u30ea\u30c8\u30e9\u30a4\u51e6\u7406\n\n\u81ea\u524d\u306eActivity\u306e\u5834\u5408\n\n\u901a\u5e38\u306eActivity\u3067\u3042\u308c\u3070\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092Activity\u306b\u4ed8\u4e0e\u3059\u308c\u3070\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u308b\u308f\u3051\u3067\u3059\u3002\n\u3061\u306a\u307f\u306b\u4ee5\u4e0b\u306e\u8a2d\u5b9a\u306f5\u79d2,10\u79d2,20\u79d2\u3068\u30ea\u30c8\u30e9\u30a4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n@ExponentialRetry(initialRetryIntervalSeconds = 5, maximumAttempts = 3)\npublic String hello(String str);\n\n\n\nLambdaFunction\u3092Activity\u306b\u3057\u305f\u5834\u5408\n\nLambdaFunction\u5074\u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u4f7f\u3048\u306a\u3044\u306e\u3067Desider\u5074\u3067\u306a\u3093\u3068\u304b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n\u3053\u3053\u3067\u767b\u5834\u3059\u308b\u306e\u304cExponentialRetryPolicy\u3068RetryDecorator\u3067\u3059\u3002\nExponentialRetryPolicy\u3067\u30dd\u30ea\u30b7\u30fc\u3092\u6c7a\u3081\u3066\u3001RetryDecorator\u7d4c\u7531LambdaFunctionClient\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5165\u624b\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\n                long initialRetryIntervalSeconds = 5;\n                int maximumAttempts = 5;\n                List<Class<? extends Throwable>> exceptionsToRetry = new ArrayList<>();\n                exceptionsToRetry.add(RuntimeException.class);\n                ExponentialRetryPolicy retryPolicy =\n                        new ExponentialRetryPolicy(initialRetryIntervalSeconds)\n                                .withMaximumAttempts(maximumAttempts)\n                                .withExceptionsToRetry(exceptionsToRetry);\n                Decorator retryDecorator = new RetryDecorator(retryPolicy);\n                LambdaFunctionClient decoratedLambdaClient =\n                        retryDecorator.decorate(LambdaFunctionClient.class, lambdaClient);\n\n\n\u308f\u304b\u308c\u3070\u7c21\u5358\u3067\u3059\u3051\u3069\u6c17\u3065\u3051\u306a\u3044\u3067\u3059\u3088\u306d\u30fc\n\n\n300\u79d2\u306e\u58c1\n\nAWS Lambda \u306e\u5236\u9650\n\u3061\u3087\u3063\u3068\u524d\u306b300\u79d2\u307e\u3067Lambda\u306e\u5b9f\u884c\u6642\u9593\u304c\u5ef6\u3073\u307e\u3057\u305f\u304c300\u79d2\u3092\u8d85\u3048\u308b\u51e6\u7406\u306f\u3069\u3046\u3084\u3063\u3066\u5b9f\u73fe\u3057\u305f\u3089\u3088\u3044\u3067\u3057\u3087\u3046\u304b\u3002\uff08\u3044\u3084\u3001\u305d\u306e\u307e\u3048\u306b300\u79d2\u8d85\u3048\u308b\u51e6\u7406\u3069\u3046\u306a\u306e\uff1f\u306f\u4e00\u65e6\u7f6e\u3044\u3066\u304a\u304d\u307e\u3057\u3087\u3046\uff09\n\u305d\u3046\u3044\u3046\u5834\u5408\u306f\u3001\u51e6\u7406\u3092\u6295\u3052\u305f\u5f8c\u306b\u7d50\u679c\u3092\u30dd\u30fc\u30ea\u30f3\u30b0\u3055\u305b\u308b\u3088\u3046\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u3059\u308b\u3068\u5e78\u305b\u306b\u306a\u308a\u307e\u3059\u3002\nDesider\u5074\u3067\u306fDecisionContext\u304b\u3089WorkflowClock\u3068\u3044\u3046\u306e\u304c\u53d6\u308c\u307e\u3057\u3066\u3001WorkflowClock\u304b\u3089createTimer\u3057\u3066\u5f97\u3089\u308c\u305fPromise\u3092desider\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u4e0a\u3052\u3066\u3042\u3052\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u306fRds\u306eSnapshot\u53d6\u5f97\u306eAPI\u3092\u53e9\u3044\u305f\u5f8c\u3001snapshot\u304cavairable\u306b\u306a\u308b\u306e\u3092\u5f85\u3063\u3066\u51e6\u7406\u3092\u52d5\u304b\u3059\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\nFunctor\u306e\u5f15\u6570\u306bPromise\u3092\u6e21\u3059\u3053\u3068\u3067\u305d\u3053\u307e\u3067\u51e6\u7406\u3092\u5f85\u305f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3068\u3001pargeRdsSnapshotAfterPooling\u306btimer\u3092\u6e21\u3057\u3066\u3044\u308b\u90e8\u5206\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u306d\u3002\n\n    @Asynchronous\n    private Promise<String> pargeRdsSnapshotAfterPooling(Promise<String> createRdsSnapshotResult,\n            Promise<?>... waitForPromises) {\n\n        // \u4e2d\u7565\n\n        LambdaFunctionClient lambdaClient = decisionContext.getLambdaFunctionClient();\n        Promise<String> getRdsSnapshotStatusResult =\n                lambdaClient.scheduleLambdaFunction(\"getRdsSnapshotStatus\", parameter, 60);\n\n        return new Functor<String>(getRdsSnapshotStatusResult) {\n            @Override\n            protected Promise<String> doExecute() throws Throwable {\n                String rdsSnapshotStatus =\n                        CmpWorkflowUtils.getActivityResult(getRdsSnapshotStatusResult.get());\n                if (\"available\".equals(rdsSnapshotStatus)) {\n                    return pargeRdsSnapshot();\n                }\n                int retryPeriod = 10;\n                Promise<Void> timer = clock.createTimer(retryPeriod);\n                return pargeRdsSnapshotAfterPooling(createRdsSnapshotResult, timer);\n            }\n        };\n    }\n\n\n\u307e\u3068\u3081\n\n\u3068\u3044\u3046\u3053\u3068\u3067SWF\u306eLambda\u3092\u4f7f\u3046\u3068Activity\u306e\u904b\u7528\u304b\u3089\u89e3\u653e\u3055\u308c\u3066\u5e78\u305b\u306b\u306a\u308c\u308b\u304b\u3082\u306d\u3002\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3057\u305f\u3002\n\u30b5\u30f3\u30d7\u30eb\u306f\u4ee5\u4e0b\u306b\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\u3002\u4e0a\u8a18\u306e\u4ed6\u3001Lambda\u3092Cron\u3067\u5b9f\u884c\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3082\u4f5c\u3063\u3066\u898b\u307e\u3057\u305f\u3002\nhttps://github.com/uzresk/aws-swf-lambda-samples\n\n\n# \u306f\u3058\u3081\u306b\n\n* AWS SWF\u3054\u5b58\u77e5\u3067\u3057\u3087\u3046\u304b\u3002\u5927\u4f53\u306e\u4eba\u304c\u540d\u524d\u306f\u77e5\u3063\u3066\u308b\u3051\u3069\u89e6\u3063\u305f\u3053\u3068\u304c\u306a\u3044\u3068\u3044\u3046\u53cd\u5fdc\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\uff08SWF\u4f7f\u3044\u3069\u3053\u308d\u305f\u304f\u3055\u3093\u3042\u308b\u3093\u3060\u3051\u3069\u3001\u3084\u3063\u3071\u308a\u6d41\u884c\u3089\u306a\u3044\u306e\u304b\u306a\u30fc\uff08\u6d99\uff09\uff09\n* SWF\u3068FlowFramework(Java or Ruby)\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u7c21\u5358\u306b\uff08\uff1f\uff09\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u51c4\u3044\u30b5\u30fc\u30d3\u30b9\u306a\u3093\u3067\u3059\u3002\n* **\u3053\u306e\u8a18\u4e8b\u306fSWF\u306eActivity\u306bLambda\u3092\u4f7f\u3063\u3066\u5e78\u305b\u306b\u306a\u308d\u3046\u305c\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3059\u3002**\n\n\n* Lambda\u306f\u4eba\u6c17\u304c\u3042\u3063\u3066\u8a18\u4e8b\u3082\u305f\u304f\u3055\u3093\u3042\u308b\u306e\u3067\u3059\u304c\u3001SWF\u306f\u59cb\u3081\u306e\u3068\u3063\u3064\u304d\u306b\u304f\u3055\u304b\u3089\u304b\u3001\u5468\u308a\u306b\u4f7f\u3063\u3066\u308b\u4eba\u304c\u898b\u3064\u3051\u3089\u308c\u305a\u3001\u30cd\u30c3\u30c8\u4e0a\u3067\u3082\u65e5\u672c\u8a9e\u306e\u60c5\u5831\u6e90\u304c\u975e\u5e38\u306b\u5c11\u306a\u3044\u306e\u3067\u3059\u3002\u306a\u306e\u3067\u5c11\u3057\u666e\u53ca\u306b\u8ca2\u732e\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\uff08\u666e\u53ca\u306b\u8ca2\u732e\u3057\u305f\u3044\u4eba\u3001\u4e00\u7dd2\u306b\u52c9\u5f37\u4f1a\u3067\u3082\u3057\u307e\u3057\u3087\u3046\uff09\n\n\n# SWF\u306e\u57fa\u790e\u7684\u306a\u8a71\n\n* SWF\u306e\u6982\u8981\u3092\u7406\u89e3\u3059\u308b\u306b\u306f[\u307e\u305a\u306f\u3053\u3061\u3089\u306e\u8cc7\u6599](http://www.slideshare.net/AmazonWebServicesJapan/amazon-simple-workflow-service-swf)\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n* \u3053\u306e\u8cc7\u6599\u3092\u898b\u3066\u308f\u304b\u308b\u3088\u3046\u306bAWS SWF\u3067\u306f\u5927\u304d\u304f\uff14\u4eba\u306e\u767b\u5834\u4eba\u7269\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n\n![Cacoo - SWF 2016-04-01 10-12-44.png](https://qiita-image-store.s3.amazonaws.com/0/57686/7fe80dc1-dc77-7929-abfc-e2baad02f71a.png)\n\n* Client(Executor) \u30fb\u30fb\u30fb workflow\u3092\u30ad\u30c3\u30af\u3059\u308b\u4eba\u3067\u3059\u3002\u30aa\u30f3\u30d7\u30ec\u30df\u30b9\u5074\u304b\u3089SWF\u306eEndpoint\u306b\u63a5\u7d9a\u3057\u3066\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\n* SWF\u30fb\u30fb\u30fbSWF\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u5b9f\u884c\u306e\u8981\u6c42\u3092\u53d7\u4ed8\u3051\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u306e\u30ad\u30e5\u30fc\u306e\u7ba1\u7406\u3092\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n* Desider\u30fb\u30fb\u30fbSWF\u306e\u30ad\u30e5\u30fc\uff08\u30c9\u30e1\u30a4\u30f3\u30fb\u30bf\u30b9\u30af\u30ea\u30b9\u30c8\uff09\u3092\u76e3\u8996\u3057\u306a\u304c\u3089\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u9032\u3081\u308b\u4eba\u3067\u3059\u3002\u305f\u3060\u30bf\u30b9\u30af\u3092\u7ba1\u7406\u3059\u308b\u3060\u3051\u3067\u5b9f\u969b\u306e\u51e6\u7406\u306f\u884c\u3044\u307e\u305b\u3093\u3002SWF\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u3064\u306a\u304c\u308b\u306e\u3067\u3042\u308c\u3070EC2\u3067\u3082\u3088\u3044\u3067\u3059\u3057\u3001\u30aa\u30f3\u30d7\u30ec\u30df\u30b9\u306e\u30b5\u30fc\u30d0\u3092\u4f7f\u3063\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\n* Activity\u30fb\u30fb\u30fbDesider\u304b\u3089\u632f\u3089\u308c\u305f\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u4eba\u3067\u3059\u3002\u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002Activity\u3082SWF\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u3064\u306a\u304c\u308b\u306e\u3067\u3042\u308c\u3070EC2\u3067\u3082\u3088\u3044\u3067\u3059\u3057\u3001\u30aa\u30f3\u30d7\u30ec\u30df\u30b9\u306e\u30b5\u30fc\u30d0\u3092\u4f7f\u3063\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\n* Activity\u306b\u306f\u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u3067\u3001\u51e6\u7406\u6642\u9593\u304c\u304b\u304b\u308a\u8ca0\u8377\u304c\u304b\u304b\u308b\u3082\u306e\u304c\u5b9f\u88c5\u3055\u308c\u308b\u305f\u3081\u3001\u5b9f\u969b\u306b\u904b\u7528\u3057\u3066\u3044\u304f\u3068\u306a\u308b\u3068Activity\u3092\u30b9\u30b1\u30fc\u30eb\u30a2\u30a6\u30c8\u3057\u3066\u3044\u304f\u904b\u7528\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u3055\u3066\u672c\u984c\n\n* SWF\u3092\u4e2d\u5fc3\u3068\u3057\u305f\u758e\u7d50\u5408\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306a\u306e\u3067\u3001Activity\u3092\u30b9\u30b1\u30fc\u30eb\u30a2\u30a6\u30c8\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u8ca0\u8377\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n* **\u81ea\u52d5\u30b9\u30b1\u30fc\u30eb\u30a2\u30a6\u30c8\u3059\u308b\u306b\u306fActivity\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092AutoScalingGroup\u306b\u767b\u9332\u3055\u305b\u308c\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u3002\u305d\u308c\u3059\u3089\u9762\u5012\u306a\u3089ElasticBeansTalk\u306b\u304a\u4efb\u305b\u3057\u307e\u3057\u3087\u3046\u3002\u305d\u308c\u3059\u3089\u3082\u9762\u5012\u3060\u3001\u3082\u3063\u3068\u5b89\u304f\u904b\u7528\u3057\u305f\u3044\u3093\u3060\u3063\u305f\u3089Lamda\u306a\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u3068\u601d\u3046\u308f\u3051\u3067\u3059\u3002**\n* Lambda\u3092\u4f7f\u3063\u305f\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n* ![Cacoo - SWF 2016-04-01 10-24-20.png](https://qiita-image-store.s3.amazonaws.com/0/57686/06472b5f-270b-2ddb-955b-f60000b88dd7.png)\n* Activity\u306e\u90e8\u5206\u304cLambda\u306b\u306a\u3063\u305f\u3060\u3051\u3067\u3059\u304c\u3001Activity\u306e\u904b\u7528\u304b\u3089\u89e3\u304d\u653e\u305f\u308c\u308b\u3068\u601d\u3046\u3068\u3053\u3093\u306a\u306b\u5b09\u3057\u3044\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n* \u65e9\u901f\u5b9f\u88c5\u65b9\u6cd5\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\uff08LambdaFunction\u306e\u767b\u9332\u306f\u901a\u5e38Lambda\u3092\u5229\u7528\u3059\u308b\u3068\u304d\u3068\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\uff09\n\n---\n\n# \u30b7\u30f3\u30d7\u30eb\u306b\u547c\u3073\u51fa\u3059\n\n## Desider\u304b\u3089Lambda\u3092\u547c\u3073\u51fa\u3059\u65b9\u6cd5\n\n* SWF\u306b\u4ed8\u5c5e\u3057\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u306fLambdaFunction\u3078\u547c\u3073\u3063\u3071\u306a\u3057\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306fLambda\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3092\u5f85\u3064\u5f62\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```\n    @Override\n    public void hello(String name) throws Exception {\n\n        task = new TryCatchFinally() {\n\n            @Override\n            protected void doTry() throws Throwable {\n                ConfigHelper configHelper = ConfigHelper.createConfig();\n                DecisionContextProvider decisionProvider =\n                        new DecisionContextProviderImpl();\n\n                DecisionContext decisionContext = decisionProvider.getDecisionContext();\n                LambdaFunctionClient lambdaClient =\n                        decisionContext.getLambdaFunctionClient();\n\n                // lambda\u306e\u5f15\u6570\u306fjson\n                Promise<String> val = lambdaClient.scheduleLambdaFunction(\n                        configHelper.getSwfLambdaFunction(), \"\\\"\" + name + \"\\\"\", 30);\n                // lambda function\u306e\u547c\u3073\u51fa\u3057\u304c\u7d42\u308f\u308b\u307e\u3067\u5f85\u3064\n                processResult(val);\n\n            }\n\n            @Override\n            protected void doCatch(Throwable e) throws Throwable {\n                logger.error(\"catch exception\", e);\n                // \u4f8b\u5916\u51e6\u7406\n                throw e;\n            }\n\n            @Override\n            protected void doFinally() throws Throwable {\n                // noop\n            }\n        };\n    }\n\n    @Asynchronous\n    private void processResult(Promise<String> lambdaClientResult) {\n        System.out.println(\"ready[\" + LocalTime.now() + \"] lambda return value[\"\n                + lambdaClientResult.get() + \"]\");\n    }\n}\n```\n\n* scheduleLambdaFunction\u306e\u7b2c\u4e00\u5f15\u6570\u306fLambdaFunction\u540d\u3001\u7b2c\u4e8c\u5f15\u6570\u306fLambdaFunction\u3078\u306e\u5f15\u6570\uff08json\u306e\u307f\uff09\u3001\u7b2c\u4e09\u5f15\u6570\u306ftimeout\u306e\u6642\u9593\u306b\u306a\u308a\u307e\u3059\u3002\n* LambdaFunction\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u304cPromise<String>\u3067\u53d6\u308c\u307e\u3059\u306e\u3067\u3001\u3053\u308c\u3092Asynchronous\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3059\u3053\u3068\u3067LambdaFunction\u306e\u5b9f\u884c\u3092\u5f85\u3063\u3066\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n# \u30ea\u30c8\u30e9\u30a4\u51e6\u7406\n\n## \u81ea\u524d\u306eActivity\u306e\u5834\u5408\n\n* \u901a\u5e38\u306eActivity\u3067\u3042\u308c\u3070\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092Activity\u306b\u4ed8\u4e0e\u3059\u308c\u3070\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u308b\u308f\u3051\u3067\u3059\u3002\n* \u3061\u306a\u307f\u306b\u4ee5\u4e0b\u306e\u8a2d\u5b9a\u306f5\u79d2,10\u79d2,20\u79d2\u3068\u30ea\u30c8\u30e9\u30a4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n```\n@ExponentialRetry(initialRetryIntervalSeconds = 5, maximumAttempts = 3)\npublic String hello(String str);\n```\n\n---\n\n## LambdaFunction\u3092Activity\u306b\u3057\u305f\u5834\u5408\n\n* LambdaFunction\u5074\u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u4f7f\u3048\u306a\u3044\u306e\u3067Desider\u5074\u3067\u306a\u3093\u3068\u304b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n* \u3053\u3053\u3067\u767b\u5834\u3059\u308b\u306e\u304cExponentialRetryPolicy\u3068RetryDecorator\u3067\u3059\u3002\n* ExponentialRetryPolicy\u3067\u30dd\u30ea\u30b7\u30fc\u3092\u6c7a\u3081\u3066\u3001RetryDecorator\u7d4c\u7531LambdaFunctionClient\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5165\u624b\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\n```\n                long initialRetryIntervalSeconds = 5;\n                int maximumAttempts = 5;\n                List<Class<? extends Throwable>> exceptionsToRetry = new ArrayList<>();\n                exceptionsToRetry.add(RuntimeException.class);\n                ExponentialRetryPolicy retryPolicy =\n                        new ExponentialRetryPolicy(initialRetryIntervalSeconds)\n                                .withMaximumAttempts(maximumAttempts)\n                                .withExceptionsToRetry(exceptionsToRetry);\n                Decorator retryDecorator = new RetryDecorator(retryPolicy);\n                LambdaFunctionClient decoratedLambdaClient =\n                        retryDecorator.decorate(LambdaFunctionClient.class, lambdaClient);\n```\n\n* \u308f\u304b\u308c\u3070\u7c21\u5358\u3067\u3059\u3051\u3069\u6c17\u3065\u3051\u306a\u3044\u3067\u3059\u3088\u306d\u30fc\n\n# 300\u79d2\u306e\u58c1\n\n* [AWS Lambda \u306e\u5236\u9650](https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/limits.html)\n* \u3061\u3087\u3063\u3068\u524d\u306b300\u79d2\u307e\u3067Lambda\u306e\u5b9f\u884c\u6642\u9593\u304c\u5ef6\u3073\u307e\u3057\u305f\u304c300\u79d2\u3092\u8d85\u3048\u308b\u51e6\u7406\u306f\u3069\u3046\u3084\u3063\u3066\u5b9f\u73fe\u3057\u305f\u3089\u3088\u3044\u3067\u3057\u3087\u3046\u304b\u3002\uff08\u3044\u3084\u3001\u305d\u306e\u307e\u3048\u306b300\u79d2\u8d85\u3048\u308b\u51e6\u7406\u3069\u3046\u306a\u306e\uff1f\u306f\u4e00\u65e6\u7f6e\u3044\u3066\u304a\u304d\u307e\u3057\u3087\u3046\uff09\n* \u305d\u3046\u3044\u3046\u5834\u5408\u306f\u3001\u51e6\u7406\u3092\u6295\u3052\u305f\u5f8c\u306b\u7d50\u679c\u3092\u30dd\u30fc\u30ea\u30f3\u30b0\u3055\u305b\u308b\u3088\u3046\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u3059\u308b\u3068\u5e78\u305b\u306b\u306a\u308a\u307e\u3059\u3002\n* Desider\u5074\u3067\u306fDecisionContext\u304b\u3089WorkflowClock\u3068\u3044\u3046\u306e\u304c\u53d6\u308c\u307e\u3057\u3066\u3001WorkflowClock\u304b\u3089createTimer\u3057\u3066\u5f97\u3089\u308c\u305fPromise\u3092desider\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u4e0a\u3052\u3066\u3042\u3052\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n* \u4ee5\u4e0b\u306e\u4f8b\u306fRds\u306eSnapshot\u53d6\u5f97\u306eAPI\u3092\u53e9\u3044\u305f\u5f8c\u3001snapshot\u304cavairable\u306b\u306a\u308b\u306e\u3092\u5f85\u3063\u3066\u51e6\u7406\u3092\u52d5\u304b\u3059\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n* Functor\u306e\u5f15\u6570\u306bPromise\u3092\u6e21\u3059\u3053\u3068\u3067\u305d\u3053\u307e\u3067\u51e6\u7406\u3092\u5f85\u305f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3068\u3001pargeRdsSnapshotAfterPooling\u306btimer\u3092\u6e21\u3057\u3066\u3044\u308b\u90e8\u5206\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u306d\u3002\n\n```\n    @Asynchronous\n    private Promise<String> pargeRdsSnapshotAfterPooling(Promise<String> createRdsSnapshotResult,\n            Promise<?>... waitForPromises) {\n\n        // \u4e2d\u7565\n\n        LambdaFunctionClient lambdaClient = decisionContext.getLambdaFunctionClient();\n        Promise<String> getRdsSnapshotStatusResult =\n                lambdaClient.scheduleLambdaFunction(\"getRdsSnapshotStatus\", parameter, 60);\n\n        return new Functor<String>(getRdsSnapshotStatusResult) {\n            @Override\n            protected Promise<String> doExecute() throws Throwable {\n                String rdsSnapshotStatus =\n                        CmpWorkflowUtils.getActivityResult(getRdsSnapshotStatusResult.get());\n                if (\"available\".equals(rdsSnapshotStatus)) {\n                    return pargeRdsSnapshot();\n                }\n                int retryPeriod = 10;\n                Promise<Void> timer = clock.createTimer(retryPeriod);\n                return pargeRdsSnapshotAfterPooling(createRdsSnapshotResult, timer);\n            }\n        };\n    }\n```\n\n# \u307e\u3068\u3081\n\n* \u3068\u3044\u3046\u3053\u3068\u3067SWF\u306eLambda\u3092\u4f7f\u3046\u3068Activity\u306e\u904b\u7528\u304b\u3089\u89e3\u653e\u3055\u308c\u3066\u5e78\u305b\u306b\u306a\u308c\u308b\u304b\u3082\u306d\u3002\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3057\u305f\u3002\n* \u30b5\u30f3\u30d7\u30eb\u306f\u4ee5\u4e0b\u306b\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\u3002\u4e0a\u8a18\u306e\u4ed6\u3001Lambda\u3092Cron\u3067\u5b9f\u884c\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3082\u4f5c\u3063\u3066\u898b\u307e\u3057\u305f\u3002\nhttps://github.com/uzresk/aws-swf-lambda-samples\n", "tags": ["AWS", "Java", "SWF", "AWSLambda", "AWSFlowFramework"]}