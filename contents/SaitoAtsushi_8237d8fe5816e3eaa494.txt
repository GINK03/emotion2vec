{"context": " More than 1 year has passed since last update.\u6d41\u884c\u3063\u3066\u3044\u308b\u3088\u3046\u3067 Gauche \u7248\u3082\u767b\u5834\u3057\u3066\u3044\u305f\u306e\u3067\u3001\u3088\u308a\u30dd\u30fc\u30bf\u30d6\u30eb\u306b R7RS \u3067\u66f8\u304d\u307e\u3057\u305f\u3002 SRFI-1 \u3068 SRFI-13 \u3082\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u51e6\u7406\u7cfb\u3067\u306a\u3044\u3068\u52d5\u304b\u306a\u3044\u306e\u3067\u3001Gauche \u3068 Sagittarius \u304f\u3089\u3044\u3057\u304b\u306a\u304f\u3066\u7d50\u5c40\u305d\u308c\u307b\u3069\u30dd\u30fc\u30bf\u30d6\u30eb\u3068\u3044\u3046\u308f\u3051\u3067\u3082\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u3059\u304c\u3002\n\nmynumber.scm\n\n(import (scheme base)\n        (scheme write)\n        (scheme char)\n        (srfi 1)\n        (srfi 13))\n\n(define (mynumber-assert p)\n  (unless (string? p)\n    (error \"string required, but\" p))\n  (unless (= (string-length p) 12)\n    (error \"string of length 12 required, but\" p))\n  (unless (string-every digit-value p)\n    (error \"every elements of string must be digit, but\" p)))  \n\n(define (mynumber-checkdigit p)\n  (let ((d (- 11\n              (modulo (fold (lambda(pn qn a) (+ a (* pn qn)))\n                            0\n                            (map digit-value (string->list p))\n                            '(6 5 4 3 2 7 6 5 4 3 2))\n                      11))))\n    (if (< 9 d) 0 d)))\n\n(define (mynumber-validate? p)\n  (mynumber-assert p)\n  (= (digit-value (string-ref p 11))\n     (mynumber-checkdigit p)))\n\n;; test case\n(for-each (lambda (x)\n            (display x)\n            (display \" : \")\n            (display (mynumber-validate? x))\n            (newline))\n          '(\"123456789010\"\n            \"123456789011\"\n            \"123456789012\"\n            \"123456789013\"\n            \"123456789014\"\n            \"123456789015\"\n            \"123456789016\"\n            \"123456789017\"\n            \"123456789018\"\n            \"123456789019\"\n            \"023456789013\"))\n\n\n\u5165\u529b\u304c\u6587\u5b57\u5217\u3067\u306f\u306a\u304f\u6570\u5024\u3067\u4e0e\u3048\u3089\u308c\u308b\u5834\u5408\u3082\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002 \u3053\u3061\u3089\u306f R7RS \u306e\u7bc4\u56f2\u5185\u3060\u3051\u3067\u66f8\u3044\u305f\u306e\u3067\u3088\u308a\u591a\u304f\u306e\u51e6\u7406\u7cfb\u3067\u305d\u306e\u307e\u307e\u4f7f\u3048\u307e\u3059\u3002 Gauche, Sagittarius, Larceny, Chibi, Foment \u3067\u52d5\u4f5c\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\nmynumber.scm\n(import (scheme base)\n        (scheme write))\n\n(define (mynumber-validate? p)\n  (unless (integer? p) (error \"integer required\" p))\n  (let ((check-digit (modulo p 10)))\n    (do ((r (quotient p 10) (quotient r 10))\n         (c 0 (+ c (* (modulo r 10) (vector-ref '#(2 3 4 5 6 7 2 3 4 5 6) i))))\n         (i 0 (+ i 1)))\n        ((= i 11)\n         (unless (= r 0) (error \"number is too large\" p))\n         (let ((d (- 11 (modulo c 11))))\n           (= (if (< 9 d) 0 d) check-digit))))))\n\n;; test case\n(for-each (lambda (x)\n            (display x)\n            (display \" : \")\n            (display (mynumber-validate? x))\n            (newline))\n          '(123456789010\n            123456789011\n            123456789012\n            123456789013\n            123456789014\n            123456789015\n            123456789016\n            123456789017\n            123456789018\n            123456789019\n            23456789013))\n\n\n\u6d41\u884c\u3063\u3066\u3044\u308b\u3088\u3046\u3067 Gauche \u7248\u3082\u767b\u5834\u3057\u3066\u3044\u305f\u306e\u3067\u3001\u3088\u308a\u30dd\u30fc\u30bf\u30d6\u30eb\u306b R7RS \u3067\u66f8\u304d\u307e\u3057\u305f\u3002 SRFI-1 \u3068 SRFI-13 \u3082\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u51e6\u7406\u7cfb\u3067\u306a\u3044\u3068\u52d5\u304b\u306a\u3044\u306e\u3067\u3001Gauche \u3068 Sagittarius \u304f\u3089\u3044\u3057\u304b\u306a\u304f\u3066\u7d50\u5c40\u305d\u308c\u307b\u3069\u30dd\u30fc\u30bf\u30d6\u30eb\u3068\u3044\u3046\u308f\u3051\u3067\u3082\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u3059\u304c\u3002\n\n```scheme:mynumber.scm\n\n(import (scheme base)\n        (scheme write)\n        (scheme char)\n        (srfi 1)\n        (srfi 13))\n\n(define (mynumber-assert p)\n  (unless (string? p)\n    (error \"string required, but\" p))\n  (unless (= (string-length p) 12)\n    (error \"string of length 12 required, but\" p))\n  (unless (string-every digit-value p)\n    (error \"every elements of string must be digit, but\" p)))  \n\n(define (mynumber-checkdigit p)\n  (let ((d (- 11\n              (modulo (fold (lambda(pn qn a) (+ a (* pn qn)))\n                            0\n                            (map digit-value (string->list p))\n                            '(6 5 4 3 2 7 6 5 4 3 2))\n                      11))))\n    (if (< 9 d) 0 d)))\n\n(define (mynumber-validate? p)\n  (mynumber-assert p)\n  (= (digit-value (string-ref p 11))\n     (mynumber-checkdigit p)))\n\n;; test case\n(for-each (lambda (x)\n            (display x)\n            (display \" : \")\n            (display (mynumber-validate? x))\n            (newline))\n          '(\"123456789010\"\n            \"123456789011\"\n            \"123456789012\"\n            \"123456789013\"\n            \"123456789014\"\n            \"123456789015\"\n            \"123456789016\"\n            \"123456789017\"\n            \"123456789018\"\n            \"123456789019\"\n            \"023456789013\"))\n```\n\n\u5165\u529b\u304c\u6587\u5b57\u5217\u3067\u306f\u306a\u304f\u6570\u5024\u3067\u4e0e\u3048\u3089\u308c\u308b\u5834\u5408\u3082\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002 \u3053\u3061\u3089\u306f R7RS \u306e\u7bc4\u56f2\u5185\u3060\u3051\u3067\u66f8\u3044\u305f\u306e\u3067\u3088\u308a\u591a\u304f\u306e\u51e6\u7406\u7cfb\u3067\u305d\u306e\u307e\u307e\u4f7f\u3048\u307e\u3059\u3002 Gauche, Sagittarius, Larceny, Chibi, Foment \u3067\u52d5\u4f5c\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\n```scheme:mynumber.scm\n(import (scheme base)\n        (scheme write))\n\n(define (mynumber-validate? p)\n  (unless (integer? p) (error \"integer required\" p))\n  (let ((check-digit (modulo p 10)))\n    (do ((r (quotient p 10) (quotient r 10))\n         (c 0 (+ c (* (modulo r 10) (vector-ref '#(2 3 4 5 6 7 2 3 4 5 6) i))))\n         (i 0 (+ i 1)))\n        ((= i 11)\n         (unless (= r 0) (error \"number is too large\" p))\n         (let ((d (- 11 (modulo c 11))))\n           (= (if (< 9 d) 0 d) check-digit))))))\n\n;; test case\n(for-each (lambda (x)\n            (display x)\n            (display \" : \")\n            (display (mynumber-validate? x))\n            (newline))\n          '(123456789010\n            123456789011\n            123456789012\n            123456789013\n            123456789014\n            123456789015\n            123456789016\n            123456789017\n            123456789018\n            123456789019\n            23456789013))\n```\n", "tags": ["Scheme", "R7RS"]}