{"context": " More than 1 year has passed since last update.Alternativa3D(AlternativaPlatform)\u306b\u3066\n\n\u30c6\u30af\u30b9\u30c1\u30e3\u30de\u30c6\u30ea\u30a2\u30eb\u306b\u72ec\u81ea\u306eAGAL\u3092\u9069\u7528\n\u30a2\u30eb\u30d5\u30a1\u5024\u3092\u53cd\u6620\n\n...\u3059\u308b\u89e3\u8aac\u3067\u3059\u3002\n\n\u5171\u901a\nMaterial\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066 fillResources() \u3068 collectDraws() \u3092override\u3057\u307e\u3059\u3002\n\n\nfillResources() \u3067\u5fc5\u8981\u306aGPU\u30ea\u30bd\u30fc\u30b9\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n\ncollectDraws() \u3067\u63cf\u753b\u306e\u6e96\u5099\u3068\u4e88\u7d04\u3092\u3059\u308b\u69d8\u3067\u3059\u3002\n\n\nAGAL\u306e\u9069\u7528\ncamera:Camera3D \u304b\u3089 DrawUnit \u3092\u751f\u6210\u3057\u3001vertexBuffer, indexBuffer, texture, shader\u3092\u6e96\u5099\u3057\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u3067\u306f\n\nvertexShader\n\n\n\u9802\u70b9\u306bprojectionMatrix\u3092\u53cd\u6620\nuv\u3092fragmentShader\u3078\u6e21\u3059\n\n\nfragmentShader\n\n\n\u8f1d\u5ea6\u3092\u8a08\u7b97\u3057\u3066RGB\u3078\u683c\u7d0d\n\u30a2\u30eb\u30d5\u30a1\u5024\u306f\u6307\u5b9a\u306e\u5024\u3092\u683c\u7d0d\n\n\n\n\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30a2\u30eb\u30d5\u30a1\u5024\u306e\u53cd\u6620\nfragmentShader\u3067 oc.w(oc.a) \u306b\u30a2\u30eb\u30d5\u30a1\u5024\u3092\u4ee3\u5165\u3057\u3066\u3082\u53cd\u6620\u3055\u308c\u307e\u305b\u3093\u3002\nContext3D#setBlendFactors \u3067\u53cd\u6620\u3055\u305b\u308b\u65e8\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n- Context3DBlendFactor - help.adobe.com\n- Context3D#setBlendFactors - help.adobe.com\nAlternativa3D\u3067\u306f\u5148\u306eDrawUnit\u306eblendSource\u3068blendDestination\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u9069\u7528\u3067\u304d\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\nLuminanceAndAlphaTextureMaterial.as - github \u306b\u3082\u3042\u308a\u307e\u3059\u3002\n\nLuminanceAndAlphaTextureMaterial.as\npackage \n{\n    import alternativa.engine3d.alternativa3d;\n    import alternativa.engine3d.core.Camera3D;\n    import alternativa.engine3d.core.DrawUnit;\n    import alternativa.engine3d.core.Light3D;\n    import alternativa.engine3d.core.Object3D;\n    import alternativa.engine3d.core.Renderer;\n    import alternativa.engine3d.core.VertexAttributes;\n    import alternativa.engine3d.materials.Material;\n    import alternativa.engine3d.materials.ShaderProgram;\n    import alternativa.engine3d.objects.Surface;\n    import alternativa.engine3d.resources.Geometry;\n    import alternativa.engine3d.resources.TextureResource;\n    import com.adobe.utils.AGALMiniAssembler;\n    import flash.display3D.Context3D;\n    import flash.display3D.Context3DBlendFactor;\n    import flash.display3D.Context3DProgramType;\n    import flash.display3D.VertexBuffer3D;\n    import flash.utils.Dictionary;\n\n    use namespace alternativa3d;\n    /**\n     * ...\n     * @author Toshiyuki Suzumura / @suzumura_ss\n     */\n    public class LuminanceAndAlphaTextureMaterial extends Material\n    {\n        private var _texture:TextureResource;\n        private var _alpha:Number;\n        private var _context3d:Context3D;\n        private var _program:ShaderProgram = new ShaderProgram(null, null);\n        private var _vertexShaderAssembler:AGALMiniAssembler = new AGALMiniAssembler();\n        private var _fragmentShaderAssembler:AGALMiniAssembler = new AGALMiniAssembler();\n\n        public function LuminanceAndAlphaTextureMaterial(texture:TextureResource, alpha:Number, context3d:Context3D)\n        {\n            _texture = texture;\n            _alpha = alpha;\n            _context3d = context3d;\n\n            _vertexShaderAssembler.assemble(Context3DProgramType.VERTEX, [\n                // op = va0[pos] * vc0[projection]\n                \"m44 op, va0, vc0\",\n                // v0 = va1[uv]\n                \"mov v0, va1\",\n            ].join(\"\\n\"));\n\n            _fragmentShaderAssembler.assemble(Context3DProgramType.FRAGMENT, [\n                // ft0 = sampler2d(fs0, v0[uv])\n                \"tex ft0, v0, fs0 <2d,linear,repeat>\",\n                // lum = 0.299r\n                \"mul ft0.x, ft0.x, fc0.x\",\n                // lum += 0.587g\n                \"mul ft0.y, ft0.y, fc0.y\",\n                \"add ft0.x, ft0.x, ft0.y\",\n                // lum += 0.114b\n                \"mul ft0.z, ft0.z, fc0.z\",\n                \"add ft0.x, ft0.x, ft0.z\",\n                // g = lum, b = lum\n                \"mov ft0.y, ft0.x\",\n                \"mov ft0.z, ft0.x\",\n                // a = <_alpha>\n                \"mov ft0.w, fc0.w\",\n                \"mov oc, ft0\",\n            ].join(\"\\n\"));\n        }\n\n        override alternativa3d function fillResources(resources:Dictionary, resourceType:Class):void\n        {\n            super.fillResources(resources, resourceType);\n\n            if (_texture != null) {\n                resources[_texture] = true;\n            }\n            _program.program = _context3d.createProgram();\n            _program.program.upload(_vertexShaderAssembler.agalcode, _fragmentShaderAssembler.agalcode);\n        }\n\n        override alternativa3d function collectDraws(camera:Camera3D, surface:Surface, geometry:Geometry, lights:Vector.<Light3D>, lightsLength:int, useShadow:Boolean, objectRenderPriority:int = -1):void\n        {\n            var object:Object3D = surface.object;\n            var posBuffer:VertexBuffer3D = geometry.getVertexBuffer(VertexAttributes.POSITION);\n            var uvBuffer:VertexBuffer3D = geometry.getVertexBuffer(VertexAttributes.TEXCOORDS[0]);\n            var drawUnit:DrawUnit = camera.renderer.createDrawUnit(object, _program.program, geometry._indexBuffer, surface.indexBegin, surface.numTriangles, _program);\n\n            drawUnit.setProjectionConstants(camera, 0, object.localToCameraTransform);  // = vc0\n            drawUnit.setVertexBufferAt(0, posBuffer, 0, \"float3\");                      // = va0\n            drawUnit.setVertexBufferAt(1, uvBuffer,  3, \"float2\");                      // = va1\n            drawUnit.setFragmentConstantsFromNumbers(0, 0.299, 0.587, 0.114, _alpha);   // = fc0\n            drawUnit.setTextureAt(0, _texture._texture);                                // = fs0\n\n            drawUnit.blendSource = Context3DBlendFactor.SOURCE_ALPHA;\n            drawUnit.blendDestination = Context3DBlendFactor.ONE_MINUS_SOURCE_ALPHA;\n\n            camera.renderer.addDrawUnit(drawUnit, (objectRenderPriority >= 0)? objectRenderPriority: Renderer.OPAQUE);\n        }\n    }\n}\n\n\nAlternativa3D(AlternativaPlatform)\u306b\u3066\n\n- \u30c6\u30af\u30b9\u30c1\u30e3\u30de\u30c6\u30ea\u30a2\u30eb\u306b\u72ec\u81ea\u306eAGAL\u3092\u9069\u7528\n- \u30a2\u30eb\u30d5\u30a1\u5024\u3092\u53cd\u6620\n\n...\u3059\u308b\u89e3\u8aac\u3067\u3059\u3002\n\n\n## \u5171\u901a\nMaterial\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066 `fillResources()` \u3068 `collectDraws()` \u3092override\u3057\u307e\u3059\u3002\n\n- `fillResources()` \u3067\u5fc5\u8981\u306aGPU\u30ea\u30bd\u30fc\u30b9\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n- `collectDraws()` \u3067\u63cf\u753b\u306e\u6e96\u5099\u3068\u4e88\u7d04\u3092\u3059\u308b\u69d8\u3067\u3059\u3002\n\n\n## AGAL\u306e\u9069\u7528\n\n`camera:Camera3D` \u304b\u3089 `DrawUnit` \u3092\u751f\u6210\u3057\u3001vertexBuffer, indexBuffer, texture, shader\u3092\u6e96\u5099\u3057\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u3067\u306f\n\n- vertexShader\n - \u9802\u70b9\u306bprojectionMatrix\u3092\u53cd\u6620\n - uv\u3092fragmentShader\u3078\u6e21\u3059\n- fragmentShader\n - \u8f1d\u5ea6\u3092\u8a08\u7b97\u3057\u3066RGB\u3078\u683c\u7d0d\n - \u30a2\u30eb\u30d5\u30a1\u5024\u306f\u6307\u5b9a\u306e\u5024\u3092\u683c\u7d0d\n\n\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\n## \u30a2\u30eb\u30d5\u30a1\u5024\u306e\u53cd\u6620\n\nfragmentShader\u3067 `oc.w(oc.a)` \u306b\u30a2\u30eb\u30d5\u30a1\u5024\u3092\u4ee3\u5165\u3057\u3066\u3082\u53cd\u6620\u3055\u308c\u307e\u305b\u3093\u3002\n`Context3D#setBlendFactors` \u3067\u53cd\u6620\u3055\u305b\u308b\u65e8\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n- [Context3DBlendFactor - help.adobe.com]([http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/display3D/Context3DBlendFactor.html)\n- [Context3D#setBlendFactors - help.adobe.com](http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/display3D/Context3D.html#setBlendFactors\\(\\))\n\nAlternativa3D\u3067\u306f\u5148\u306e`DrawUnit`\u306e`blendSource`\u3068`blendDestination`\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u9069\u7528\u3067\u304d\u307e\u3059\u3002\n\n\n## \u30b5\u30f3\u30d7\u30eb\n[LuminanceAndAlphaTextureMaterial.as - github](https://github.com/suzumura-ss/stage3d_utils/blob/master/src/info/smoche/alternativa/LuminanceAndAlphaTextureMaterial.as) \u306b\u3082\u3042\u308a\u307e\u3059\u3002\n\n```as:LuminanceAndAlphaTextureMaterial.as\npackage \n{\n\timport alternativa.engine3d.alternativa3d;\n\timport alternativa.engine3d.core.Camera3D;\n\timport alternativa.engine3d.core.DrawUnit;\n\timport alternativa.engine3d.core.Light3D;\n\timport alternativa.engine3d.core.Object3D;\n\timport alternativa.engine3d.core.Renderer;\n\timport alternativa.engine3d.core.VertexAttributes;\n\timport alternativa.engine3d.materials.Material;\n\timport alternativa.engine3d.materials.ShaderProgram;\n\timport alternativa.engine3d.objects.Surface;\n\timport alternativa.engine3d.resources.Geometry;\n\timport alternativa.engine3d.resources.TextureResource;\n\timport com.adobe.utils.AGALMiniAssembler;\n\timport flash.display3D.Context3D;\n\timport flash.display3D.Context3DBlendFactor;\n\timport flash.display3D.Context3DProgramType;\n\timport flash.display3D.VertexBuffer3D;\n\timport flash.utils.Dictionary;\n\t\n\tuse namespace alternativa3d;\n\t/**\n\t * ...\n\t * @author Toshiyuki Suzumura / @suzumura_ss\n\t */\n\tpublic class LuminanceAndAlphaTextureMaterial extends Material\n\t{\n\t\tprivate var _texture:TextureResource;\n\t\tprivate var _alpha:Number;\n\t\tprivate var _context3d:Context3D;\n\t\tprivate var _program:ShaderProgram = new ShaderProgram(null, null);\n\t\tprivate var _vertexShaderAssembler:AGALMiniAssembler = new AGALMiniAssembler();\n\t\tprivate var _fragmentShaderAssembler:AGALMiniAssembler = new AGALMiniAssembler();\n\t\t\n\t\tpublic function LuminanceAndAlphaTextureMaterial(texture:TextureResource, alpha:Number, context3d:Context3D)\n\t\t{\n\t\t\t_texture = texture;\n\t\t\t_alpha = alpha;\n\t\t\t_context3d = context3d;\n\t\t\t\n\t\t\t_vertexShaderAssembler.assemble(Context3DProgramType.VERTEX, [\n\t\t\t\t// op = va0[pos] * vc0[projection]\n\t\t\t\t\"m44 op, va0, vc0\",\n\t\t\t\t// v0 = va1[uv]\n\t\t\t\t\"mov v0, va1\",\n\t\t\t].join(\"\\n\"));\n\t\t\t\n\t\t\t_fragmentShaderAssembler.assemble(Context3DProgramType.FRAGMENT, [\n\t\t\t\t// ft0 = sampler2d(fs0, v0[uv])\n\t\t\t\t\"tex ft0, v0, fs0 <2d,linear,repeat>\",\n\t\t\t\t// lum = 0.299r\n\t\t\t\t\"mul ft0.x, ft0.x, fc0.x\",\n\t\t\t\t// lum += 0.587g\n\t\t\t\t\"mul ft0.y, ft0.y, fc0.y\",\n\t\t\t\t\"add ft0.x, ft0.x, ft0.y\",\n\t\t\t\t// lum += 0.114b\n\t\t\t\t\"mul ft0.z, ft0.z, fc0.z\",\n\t\t\t\t\"add ft0.x, ft0.x, ft0.z\",\n\t\t\t\t// g = lum, b = lum\n\t\t\t\t\"mov ft0.y, ft0.x\",\n\t\t\t\t\"mov ft0.z, ft0.x\",\n\t\t\t\t// a = <_alpha>\n\t\t\t\t\"mov ft0.w, fc0.w\",\n\t\t\t\t\"mov oc, ft0\",\n\t\t\t].join(\"\\n\"));\n\t\t}\n\t\t\n\t\toverride alternativa3d function fillResources(resources:Dictionary, resourceType:Class):void\n\t\t{\n\t\t\tsuper.fillResources(resources, resourceType);\n\t\t\t\n\t\t\tif (_texture != null) {\n\t\t\t\tresources[_texture] = true;\n\t\t\t}\n\t\t\t_program.program = _context3d.createProgram();\n\t\t\t_program.program.upload(_vertexShaderAssembler.agalcode, _fragmentShaderAssembler.agalcode);\n\t\t}\n\t\t\n\t\toverride alternativa3d function collectDraws(camera:Camera3D, surface:Surface, geometry:Geometry, lights:Vector.<Light3D>, lightsLength:int, useShadow:Boolean, objectRenderPriority:int = -1):void\n\t\t{\n\t\t\tvar object:Object3D = surface.object;\n\t\t\tvar posBuffer:VertexBuffer3D = geometry.getVertexBuffer(VertexAttributes.POSITION);\n\t\t\tvar uvBuffer:VertexBuffer3D = geometry.getVertexBuffer(VertexAttributes.TEXCOORDS[0]);\n\t\t\tvar drawUnit:DrawUnit = camera.renderer.createDrawUnit(object, _program.program, geometry._indexBuffer, surface.indexBegin, surface.numTriangles, _program);\n\t\t\t\n\t\t\tdrawUnit.setProjectionConstants(camera, 0, object.localToCameraTransform);\t// = vc0\n\t\t\tdrawUnit.setVertexBufferAt(0, posBuffer, 0, \"float3\");\t\t\t\t\t\t// = va0\n\t\t\tdrawUnit.setVertexBufferAt(1, uvBuffer,  3, \"float2\");\t\t\t\t\t\t// = va1\n\t\t\tdrawUnit.setFragmentConstantsFromNumbers(0, 0.299, 0.587, 0.114, _alpha);\t// = fc0\n\t\t\tdrawUnit.setTextureAt(0, _texture._texture);\t\t\t\t\t\t\t\t// = fs0\n\n\t\t\tdrawUnit.blendSource = Context3DBlendFactor.SOURCE_ALPHA;\n\t\t\tdrawUnit.blendDestination = Context3DBlendFactor.ONE_MINUS_SOURCE_ALPHA;\n\n\t\t\tcamera.renderer.addDrawUnit(drawUnit, (objectRenderPriority >= 0)? objectRenderPriority: Renderer.OPAQUE);\n\t\t}\n\t}\n}\n```\n\n", "tags": ["Alternativa3D8", "ActionScript", "AGAL"]}