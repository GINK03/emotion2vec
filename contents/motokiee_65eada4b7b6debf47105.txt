{"context": "\n\nRxSwift\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u307f\u3066\n\u9699\u9593\u6642\u9593\u3092\u898b\u3064\u3051\u3066RxSwift\u3092\u52c9\u5f37\u3057\u59cb\u3081\u3066\u6570\u304b\u6708\u304c\u7d4c\u3064\u306e\u3067\u3059\u304c\u3001\u7c21\u5358\u306a\u5b9f\u88c5\u3067\u3082\u51fa\u3066\u304f\u308b\u7528\u8a9e\u3068\u304b\u30aa\u30da\u30ec\u30fc\u30bf\u304c\u591a\u304f\u77ed\u6642\u9593\u3060\u3068\u306a\u304b\u306a\u304b\u7406\u89e3\u304c\u6df1\u307e\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\nRxSwift\u306ePlayground\u3092\u89e6\u3063\u305f\u308a\u3001Example\u3092\u89e6\u3063\u305f\u308a\u3001\u30de\u30fc\u30d6\u30eb\u30c0\u30a4\u30a2\u30b0\u30e9\u30e0\u3092\u898b\u305f\u308a\u3057\u3066\u3001\u3088\u3046\u3084\u304f\u3042\u308b\u7a0b\u5ea6\u7406\u89e3\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\u30aa\u30da\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\u8ffd\u3063\u3066\u307f\u305f\u306e\u3067\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\u3082\u3057\u9593\u9055\u3044\u306a\u3069\u304c\u3042\u308c\u3070\u3054\u6307\u6458\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3059\u3002\n\nRxSwift\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3064\u3044\u3066\nRxSwift\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u306fDocumentation\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u3001\u3044\u308d\u3044\u308d\u306a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nHotAndColdObservables.md\u306a\u3093\u304b\u306fHot\u3068Cold\u306e\u9055\u3044\u306b\u3064\u3044\u3066\u8868\u3082\u7528\u3044\u3066\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u4e00\u5ea6\u898b\u3066\u307f\u308b\u3068\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nRxSwift\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u30aa\u30da\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\u306fAPI.md\u306b\u8a73\u3057\u304f\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\n\nAPI.md\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u3053\u3068\n\u5c0e\u5165\u90e8\u5206\u3067\u3055\u3089\u3063\u3068\u8aac\u660e\u304c\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u307e\u3068\u3081\u3066\u307f\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n\u3044\u308d\u3044\u308d\u306a\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3044\u308d\u3044\u308d\u306a\u5b9f\u88c5\u304c\u3055\u308c\u3066\u304a\u308a\u3001\u540c\u3058\u30aa\u30da\u30ec\u30fc\u30bf\u30fc\u3067\u3082\u7570\u306a\u308b\u547c\u3073\u65b9\u3092\u3057\u3066\u3044\u308b\n\u3053\u308c\u306f\u6b74\u53f2\u7684\u306a\u7406\u7531\u3084\u8a00\u8a9e\u306e\u4e88\u7d04\u5f8c\u304c\u539f\u56e0\u3060\u3063\u305f\u308a\u3059\u308b\n\u30aa\u30da\u30ec\u30fc\u30bf\u30fc\u306f\u72b6\u614b\u3092\u6301\u305f\u306a\u3044\n\u76ee\u7684\u306b\u5fdc\u3058\u305fAPI\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\n\n\u3053\u3053\u3067\u306f\u30aa\u30da\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30ea\u30f3\u30af\u5148\u306fReactiveX\u306e\u30da\u30fc\u30b8\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u30de\u30fc\u30d6\u30eb\u30c0\u30a4\u30a2\u30b0\u30e9\u30e0\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30ea\u30f3\u30af\u5148\u306e\u30da\u30fc\u30b8\u4e0b\u90e8\u306b\u306f\u8a00\u8a9e\u3054\u3068\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001RxSwift\u306f\"TBD\"\u3068\u66f8\u304b\u308c\u3066\u304a\u308a\u3001\u30b5\u30f3\u30d7\u30eb\u306a\u3069\u306f\u66f8\u304b\u308c\u3066\u3044\u307e\u305b\u3093\u3002\nAPI.md\u306eCreating Observables\u306easObservable\u306e\u30ea\u30f3\u30af\u5148\u3092\u898b\u3066\u307f\u308b\u3068\u3001asObservable\u306fFrom\u3068\u8a00\u3046\u3053\u3068\u304c\u5206\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u3053\u3053\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u57fa\u672c\u7684\u306a\u95a2\u6570\u306b\u3064\u3044\u3066\u306f\u3001\u3042\u308b\u7a0b\u5ea6RxSwift\u306b\u542b\u307e\u308c\u3066\u3044\u308bPlayground\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4eca\u56de\u306fempty\u306e\u30bd\u30fc\u30b9\u3092\u8ffd\u3063\u3066\u3001Observable\u3001ObserverType\u3001AnonymousObserver\u306a\u3069\u306b\u89e6\u308c\u3066\u307f\u307e\u3057\u305f\u3002\n\nempty\u306e\u30bd\u30fc\u30b9\u3092\u8ffd\u3063\u3066\u307f\u308b\nempty\u306fReactiveX\u306e\u30ea\u30f3\u30af\u3092\u898b\u3066\u3082\"Empty\"\u3068\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\ncreate an Observable that emits no items but terminates normally\n\n\u4f55\u3082\u30a2\u30a4\u30c6\u30e0\u3092\u767a\u884c\u3057\u306a\u3044\u304c\u3001\u6b63\u5e38\u306b\u7d42\u4e86\u3059\u308bObservable\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nPlayground\u3067\u306f\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u30b5\u30f3\u30d7\u30eb\u304c\u66f8\u304b\u308c\u3066\u3044\u307e\u3057\u305f\u3002\nlet emptySequence = Observable<Int>.empty()\nemptySequence\n    .subscribe { event in\n        print(event) // Completed\n}\n\nempty\u3067\u4f5c\u6210\u3057\u305fObservable\u306b\u5bfe\u3057\u3066subscribe\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\uff08subscribe\u306f\u5f8c\u307b\u3069\uff09\u3002\n\nEvent<Element>\u30af\u30e9\u30b9\nempty\u306f\u4f55\u3082\u30a2\u30a4\u30c6\u30e0\u3092\u767a\u884c\u3057\u306a\u3044\u306e\u3067Completed\u3068\u51fa\u529b\u3055\u308c\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u306e\u6b63\u4f53\u306fEvent\u3068\u3044\u3046enum\u306b\u306a\u308a\u307e\u3059\u3002\n\nEvent.swift\npublic enum Event<Element> : CustomDebugStringConvertible {\n    /**\n    Next element is produced\n    */\n    case Next(Element)\n\n    /**\n    Sequence terminates with error\n    */\n    case Error(ErrorType)\n\n    /**\n    Sequence completes sucessfully\n    */\n    case Completed\n}\n\n\nEvent\u306f3\u3064\u306e\u30e1\u30f3\u30d0\u30fc\u3092\u6301\u3063\u3066\u304a\u308a\u3001Next(Element)\u3001Error(ErrorType)\u3001\u305d\u3057\u3066Completed\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002empty\u306f\u4f55\u3082\u30a2\u30a4\u30c6\u30e0\u3092\u767a\u884c\u305b\u305a\u306b\u7d42\u4e86\u3068\u66f8\u304b\u308c\u3066\u3044\u305f\u306e\u3067\u3001Completed\u304c\u5b8c\u4e86\u3092\u610f\u5473\u3059\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\nObservable<Element>\u30af\u30e9\u30b9\nempty\u306e\u8a71\u306b\u623b\u308a\u307e\u3059\u3002empty\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002empty\u306f\u5f15\u6570\u3092\u4f55\u3082\u53d6\u3089\u305a\u306b\u578bE\u306eObservable\u3092\u8fd4\u3059\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\nObservable+Creation.swift\npublic static func empty() -> Observable<E> {\n    return Empty<E>()\n}\n\n\nempty\u306fObservable\u306eextension\u3067\u3059\u3002Observable+Creation.swift\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306fcreate,just\u3068\u3044\u3063\u305f\u95a2\u6570\u3082\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u901a\u308aObservable\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nObservable\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff08\u5b9f\u969b\u306f\u30b3\u30e1\u30f3\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u9577\u304f\u306a\u308b\u306e\u3067\u524a\u9664\u3057\u3066\u3044\u307e\u3059\uff09\u3002\n\nObservable.swift\npublic class Observable<Element> : ObservableType {\n    public typealias E = Element\n\n    init() {\n#if TRACE_RESOURCES\n        OSAtomicIncrement32(&resourceCount)\n#endif\n    }\n\n    public func subscribe<O: ObserverType where O.E == E>(observer: O) -> Disposable {\n        abstractMethod()\n    }\n\n    public func asObservable() -> Observable<E> {\n        return self\n    }\n\n    deinit {\n#if TRACE_RESOURCES\n        AtomicDecrement(&resourceCount)\n#endif\n    }\n\n    internal func composeMap<R>(selector: Element throws -> R) -> Observable<R> {\n        return Map(source: self, selector: selector)\n    }\n}\n\n\nObservable\u306f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u30af\u30e9\u30b9\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u5916\u90e8\u516c\u958b\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066subscribe\u3068asObservable\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\nsubscribe\u306fabstractMethod()\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u304c\u3001@noreturn\u306a\u95a2\u6570\u3067\u5185\u90e8\u7684\u306bfatalError\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\u7d99\u627f\u3057\u3066\u4f7f\u3046\u3082\u306e\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u304b\u3002\nasObservable\u306fself\u3092\u8fd4\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\nObservableType\u30d7\u30ed\u30c8\u30b3\u30eb\n\u307e\u305f\u3001Observable\u30af\u30e9\u30b9\u306fObservableType\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u9069\u5408\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002ObservableType\u30d7\u30ed\u30c8\u30b3\u30eb\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff08\u5b9f\u969b\u306f\u30b3\u30e1\u30f3\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u9577\u304f\u306a\u308b\u306e\u3067\u524a\u9664\u3057\u3066\u3044\u307e\u3059\uff09\u3002\n\nObservableType.swift\n\npublic protocol ObservableType : ObservableConvertibleType {\n\n    associatedtype E\n\n    @warn_unused_result(message=\"http://git.io/rxs.ud\")\n    func subscribe<O: ObserverType where O.E == E>(observer: O) -> Disposable\n\n}\n\n\n\u95a2\u9023\u578bE\u3092\u6301\u3061\u3001subscribe\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3001ObservableType\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u306f\u5fc5\u8981\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\nsubscribe\u3067\u304d\u308b\u3053\u3068\u304cObservable=\u89b3\u5bdf\u53ef\u80fd\u3067\u3042\u308b\u3001\u3068\u3044\u3046\u6027\u8cea\u3092\u8868\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\nDisposable\u30d7\u30ed\u30c8\u30b3\u30eb\nsubscribe\u306fObserverType\u3092\u5f15\u6570\u306b\u53d6\u308a\u3001Disposable\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u6642ObserverType\u306e\u95a2\u9023\u578b\u3068ObservableType\u306e\u95a2\u9023\u578b\u306f\u540c\u3058\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nDisposable\u306f\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u3059\u3002\n\nDisposable.swift\n/**\nRespresents disposable resource.\n*/\npublic protocol Disposable {\n    /**\n    Dispose resource.\n    */\n    func dispose()\n}\n\n\ndispose\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u30ea\u30bd\u30fc\u30b9\u306e\u51e6\u5206\u3092\u884c\u3046\u307f\u305f\u3044\u3067\u3059\u3002\n\nObserverType\u30d7\u30ed\u30c8\u30b3\u30eb\nObserverType\u30d7\u30ed\u30c8\u30b3\u30eb\u3082\u898b\u3066\u307f\u307e\u3059\u3002ObserverType\u3082\u95a2\u9023\u578bE\u3092\u6301\u3061\u3001on\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\u3002Event\u304c\u518d\u767b\u5834\u3057\u307e\u3057\u305f\u3002\n\nObserverType.swift\npublic protocol ObserverType {\n\n    /**\n    The type of elements in sequence that observer can observe.\n    */\n    associatedtype E\n\n    /**\n    Notify observer about sequence event.\n\n    - parameter event: Event that occured.\n    */\n    func on(event: Event<E>)\n}\n\n\non\u30e1\u30bd\u30c3\u30c9\u306e\u306f\u30aa\u30d6\u30b6\u30fc\u30d0\u30fc=\u89b3\u5bdf\u8005\u306b\u5bfe\u3057\u3066\u30a4\u30d9\u30f3\u30c8\u3092\u901a\u77e5\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u3088\u3046\u3067\u3059\u3002\nObserverType\u306b\u306fEvent\u5404\u7a2e\u306b\u5bfe\u3059\u308b\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n\nObserverType.swift\npublic extension ObserverType {\n\n    /**\n    Convenience method equivalent to `on(.Next(element: E))`\n\n    - parameter element: Next element to send to observer(s)\n    */\n    final func onNext(element: E) {\n        on(.Next(element))\n    }\n\n    /**\n    Convenience method equivalent to `on(.Completed)`\n    */\n    final func onCompleted() {\n        on(.Completed)\n    }\n\n    /**\n    Convenience method equivalent to `on(.Error(error: ErrorType))`\n    - parameter error: ErrorType to send to observer(s)\n    */\n    final func onError(error: ErrorType) {\n        on(.Error(error))\n    }\n}\n\n\n\nEmpty\u30af\u30e9\u30b9\n\u3055\u3066\u3001Observable\u304c\u306a\u3093\u3068\u306a\u304f\u308f\u304b\u3063\u305f\u306e\u3067\u3001empty\u3092\u518d\u5ea6\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff08Observable\u3092\u898b\u308b\u3060\u3051\u3060\u3063\u305f\u306e\u3067\u3059\u304c\u3060\u3044\u3076\u9060\u56de\u308a\u3057\u307e\u3057\u305f\uff09\u3002\nempty\u30e1\u30bd\u30c3\u30c9\u306fObservable<E>\u3092\u623b\u308a\u5024\u3068\u3057\u3066\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\nObservable+Creation.swift\npublic static func empty() -> Observable<E> {\n    return Empty<E>()\n}\n\n\nEmpty\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u304c\u3001Empty\u306fObservable\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306a\u306e\u3067\u3057\u3087\u3046\u3002\n\u3053\u306eEmpty\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002Empty\u30af\u30e9\u30b9\u306fProducer\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u305f\u3082\u306e\u3067\u3001subscribe\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066\u3044\u307e\u3059\uff08Producer\u306fObservable\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3067\u3059\uff09\u3002\n\nEmpty.swift\nclass Empty<Element> : Producer<Element> {\n    override func subscribe<O : ObserverType where O.E == Element>(observer: O) -> Disposable {\n        observer.on(.Completed)\n        return NopDisposable.instance\n    }\n}\n\n\n\u5148\u307b\u3069\u51fa\u3066\u304d\u305fObserverType\u306eon\u306bEvent\u306e.Completed\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u306d\u3002Event\u306b\u306f.Next\u3082.Error\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u3069\u3061\u3089\u3082\u6e21\u3057\u3066\u3044\u307e\u305b\u3093\u3002\nEmpty\u306fpublic\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u306e\u3067RxSwift\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\u4f7f\u3046\u969b\u306b\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002\n\nNopDisposable\u30af\u30e9\u30b9\nNopDisposable\u306f\u4f55\u3082\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5fc5\u8981\u304c\u306a\u3044Disposable\u3067\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u4f55\u3082\u3057\u306a\u3044Disposable\u307f\u305f\u3044\u3067\u3059\u3002\n\nNopDisposable.swift\npublic struct NopDisposable : Disposable {\n\n    /**\n    Singleton instance of `NopDisposable`.\n    */\n    public static let instance: Disposable = NopDisposable()\n\n    init() {\n\n    }\n\n    /**\n    Does nothing.\n    */\n    public func dispose() {\n    }\n}\n\n\n\n\u3053\u3053\u307e\u3067\u306e\u307e\u3068\u3081\n\u3053\u3053\u307e\u3067\u3092\u307e\u3068\u3081\u308b\u3068\u3001\u89b3\u5bdf\u53ef\u80fd\u306aObservableType\u306b\u9069\u5408\u3057\u305fObservable<E>\u3092\u7d99\u627f\u3057\u305fEmpty\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092empty\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5024\u3068\u3059\u308b\u3053\u3068\u3067\u30a4\u30d9\u30f3\u30c8\u306e\u76e3\u8996\u3092\u53ef\u80fd\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nObservable+Creation.swift\npublic static func empty() -> Observable<E> {\n    return Empty<E>()\n}\n\n\n\nsubscribe(on: (event: Event<E>) -> Void) -> Disposable\u306fObservable<Element>\u30e1\u30bd\u30c3\u30c9\n\u3053\u3053\u3067\u3088\u3046\u3084\u304fPlayground\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u623b\u308a\u307e\u3059\u3002\nlet emptySequence = Observable<Int>.empty()\nemptySequence\n    .subscribe { event in\n        print(event) // Completed\n}\n\nObservable<Int>.empty()\u306e\u6d41\u308c\u306f\u3053\u3053\u307e\u3067\u66f8\u3044\u3066\u304d\u305f\u3068\u304a\u308a\u3067\u3059\u3002Observable<Int>\u306f\u89b3\u5bdf\u53ef\u80fd\u306a\u30af\u30e9\u30b9\u3067\u3001empty\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u3063\u3066.Completed\u306eEvent\u306e\u307f\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u305d\u308c\u304cemptySequence\u3067\u3059\u3002\nEmpty\u306fsubscribe\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\u3001subscribe\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3068\u601d\u3044\u304d\u3084\u3001Playground\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308bsubscribe\u306fEmpty\u30af\u30e9\u30b9\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308bsubscribe\u3068\u306f\u5f15\u6570\u304c\u7570\u306a\u308a\u307e\u3059\u3002\nEmpty\u306f\u3053\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002ObserverType\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u3066Disposable\u3092\u623b\u308a\u5024\u3068\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\nEmpty.swift\nclass Empty<Element> : Producer<Element> {\n    override func subscribe<O : ObserverType where O.E == Element>(observer: O) -> Disposable {\n        observer.on(.Completed)\n        return NopDisposable.instance\n    }\n}\n\n\n\u3057\u304b\u3057Playground\u3067\u4f7f\u308f\u308c\u3066\u3044\u305f\u306e\u306f\u4ee5\u4e0b\u306esubscribe\u3067\u3059\u3002Event\u3092\u5f15\u6570\u306bVoid\u3092\u8fd4\u3059\u95a2\u6570\u3092\u7b2c\u4e00\u5f15\u6570\u3068\u3057\u3001\u623b\u308a\u5024\u306fDisposable\u578b\u3067\u3059\u3002\n\nObservable+Extensions.swift\n@warn_unused_result(message=\"http://git.io/rxs.ud\")\npublic func subscribe(on: (event: Event<E>) -> Void)\n    -> Disposable {\n    let observer = AnonymousObserver { e in\n        on(event: e)\n    }\n    return self.subscribeSafe(observer)\n}\n\n\n\nAnonymousObserver\u30af\u30e9\u30b9\n\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u305fon\u306fAnonymousObserver\u306b\u6e21\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u306fObserverBase<ElementType>\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3068\u306a\u3063\u3066\u304a\u308a\u3001ObserverBase\u306fObserverType\u3068Disposable\u306b\u9069\u5408\u3057\u3066\u3044\u307e\u3059\u3002\n\nAnonymousObserver.swift\nclass AnonymousObserver<ElementType> : ObserverBase<ElementType> {\n    typealias Element = ElementType\n\n    typealias EventHandler = Event<Element> -> Void\n\n    private let _eventHandler : EventHandler\n\n    init(_ eventHandler: EventHandler) {\n#if TRACE_RESOURCES\n        AtomicIncrement(&resourceCount)\n#endif\n        _eventHandler = eventHandler\n    }\n\n    override func onCore(event: Event<Element>) {\n        return _eventHandler(event)\n    }\n\n#if TRACE_RESOURCES\n    deinit {\n        AtomicDecrement(&resourceCount)\n    }\n#endif\n}\n\n\nAnonymousObserver\u306fEvent<Element> -> Void\u578b\u306e\u5024\u3092\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u3057\u3066\u4fdd\u6301\u3057\u3066\u304a\u308a\u3001\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066\u3044\u308bonCore\u304c\u3001\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u3067\u3042\u308bObserverBase<ElementType>\u306eon\u3067\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nObserverBase<ElementType>\u306eonCore\u306f\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3055\u308c\u308b\u3053\u3068\u304c\u524d\u63d0\u3067abstractMethod()\u304c\u547c\u3070\u308c\u3066\u3044\u307e\u3059(\u3044\u307e\u306e\u3068\u3053\u308dAnonymousObserver\u4ee5\u5916\u306bObserverBase<ElementType>\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f)\u3002\n\nObserverBase.swift\nclass ObserverBase<ElementType> : Disposable, ObserverType {\n    typealias E = ElementType\n\n    private var _isStopped: AtomicInt = 0\n\n    func on(event: Event<E>) {\n        switch event {\n        case .Next:\n            if _isStopped == 0 {\n                onCore(event)\n            }\n        case .Error, .Completed:\n\n            if !AtomicCompareAndSwap(0, 1, &_isStopped) {\n                return\n            }\n\n            onCore(event)\n        }\n    }\n\n    func onCore(event: Event<E>) {\n        abstractMethod()\n    }\n\n    func dispose() {\n        _isStopped = 1\n    }\n}\n\n\n\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u3051\u53d6\u3063\u3066ObserverType\u306eon\u3092\u5b9f\u884c\u3059\u308b\u306e\u304cAnonymousObserver\u306e\u5f79\u5272\u3063\u307d\u3044\u3067\u3059\u3002\n\nObservable+Extensions.swift\n@warn_unused_result(message=\"http://git.io/rxs.ud\")\npublic func subscribe(on: (event: Event<E>) -> Void)\n    -> Disposable {\n    let observer = AnonymousObserver { e in\n        on(event: e)\n    }\n    return self.subscribeSafe(observer)\n}\n\n\n\nsubscribeSafe\u30e1\u30bd\u30c3\u30c9\nAnonymousObserver\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306fsubscribeSafe\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nObservable+Extensions.swift\npublic extension ObservableType {\n    /**\n    All internal subscribe calls go through this method\n    */\n    @warn_unused_result(message=\"http://git.io/rxs.ud\")\n    func subscribeSafe<O: ObserverType where O.E == E>(observer: O) -> Disposable {\n        return self.asObservable().subscribe(observer)\n    }\n}\n\n\n\nAll internal subscribe calls go through this method\n\n\u30a4\u30f3\u30bf\u30fc\u30ca\u30eb\u306asubscribe\u306f\u3059\u3079\u3066\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u901a\u3057\u3066\u547c\u3070\u308c\u308b\u305d\u3046\u3067\u3001Empty\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u305f\u4ee5\u4e0b\u306esubscribe\u306f\u3053\u3053\u3067\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u306d\uff08\u3053\u306e\"All internal subscribe\"\u304c\u3069\u3053\u307e\u3067\u3092\u30ab\u30d0\u30fc\u3057\u3066\u3044\u308b\u306e\u304b\u306f\u78ba\u8a8d\u3057\u3066\u3044\u307e\u305b\u3093\uff09\u3002\n\nEmpty.swift\nclass Empty<Element> : Producer<Element> {\n    override func subscribe<O : ObserverType where O.E == Element>(observer: O) -> Disposable {\n        observer.on(.Completed)\n        return NopDisposable.instance\n    }\n}\n\n\n\n\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u307e\u3068\u3081\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u8efd\u304f\u307e\u3068\u3081\u307e\u3059\u3002\nlet emptySequence = Observable<Int>.empty()\nemptySequence\n    .subscribe { event in\n        print(event) // Completed\n}\n\n\u6574\u7406\u3059\u308b\u3068\u3001\n\n\nObservable<Int>.empty()\u3067\u7a7a\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u4f5c\u6210\u3055\u308c\u308b\n\n\n\nEmpty<E>\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\n\nEmpty<E>\u306fObservable<Element>\u306e\u30b5\u30d6\u30af\u30e9\u30b9\n\nObservable<Element>=\u76e3\u5bdf\u53ef\u80fd\uff08subscribe\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\uff09\n\n\n\nsubscribe(on: (event: Event<E>) -> Void)\n-> Disposable\u3067\u6d41\u308c\u3066\u304f\u308b\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406\u3059\u308b\n\n\n\nsubscribe(on: (event: Event<E>) -> Void)\n-> Disposable\u306fObservable<Element>\u306eextension\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\n\u5f15\u6570\u3068\u3057\u3066\u6e21\u3057\u3066\u3044\u308b\u30af\u30ed\u30fc\u30b8\u30e3\u306fAnonymousObserver\u304c\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u3057\u3066\u4fdd\u6301\n\nAnonymousObserver\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304csubscribeSafe\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u6e21\u3055\u308c\u308b\n\nsubscribeSafe\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u306fEmpty\u306esubscribe\u30e1\u30bd\u30c3\u30c9\u304c\u5b9f\u884c\u3055\u308c\u308b\n\nEmpty\u306esubscribe\u306f\u6e21\u3055\u308c\u305fobserver\u306eon\u3092\u5b9f\u884c\u3057\u3001\u5f15\u6570\u306bCompleted\u3092\u6e21\u3057\u3066\u3044\u308b\n\n\n\n\u4ee5\u4e0a\u306e\u3088\u3046\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\u51fa\u3066\u304f\u308b\u7528\u8a9e\u3092\u4e00\u3064\u305a\u3064\u6574\u7406\u3059\u308b\u3068\u4eca\u56de\u306e\u3088\u3046\u306b\u305f\u304f\u3055\u3093\u5bc4\u308a\u9053\u3092\u3057\u3066\u30bd\u30fc\u30b9\u3092\u8aad\u307e\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3001API.md\u3084\u30de\u30fc\u30d6\u30eb\u30c0\u30a4\u30a2\u30b0\u30e9\u30e0\u306b\u76ee\u3092\u901a\u3057\u3066Rx\u306e\u7528\u8a9e\u3092\u7406\u89e3\u3057\u3066\u304a\u304f\u3068\u3082\u3063\u3068\u30b9\u30e0\u30fc\u30ba\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u30b3\u30fc\u30c9\u7684\u306b\u306fclass\u306b\u3088\u308b\u7d99\u627f\u304c\u7d50\u69cb\u4f7f\u308f\u308c\u3066\u3044\u308b\u5370\u8c61\u3092\u53d7\u3051\u307e\u3057\u305f\u3002\n\u5b9f\u88c5\u3092\u898b\u308b\u3068\u3069\u306e\u3088\u3046\u306b\u52d5\u304f\u306e\u304b\u5206\u304b\u3063\u3066\u826f\u3044\u3067\u3059\u306d\u3002\n# RxSwift\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u307f\u3066\n\n\u9699\u9593\u6642\u9593\u3092\u898b\u3064\u3051\u3066RxSwift\u3092\u52c9\u5f37\u3057\u59cb\u3081\u3066\u6570\u304b\u6708\u304c\u7d4c\u3064\u306e\u3067\u3059\u304c\u3001\u7c21\u5358\u306a\u5b9f\u88c5\u3067\u3082\u51fa\u3066\u304f\u308b\u7528\u8a9e\u3068\u304b\u30aa\u30da\u30ec\u30fc\u30bf\u304c\u591a\u304f\u77ed\u6642\u9593\u3060\u3068\u306a\u304b\u306a\u304b\u7406\u89e3\u304c\u6df1\u307e\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n[RxSwift](https://github.com/ReactiveX/RxSwift)\u306ePlayground\u3092\u89e6\u3063\u305f\u308a\u3001Example\u3092\u89e6\u3063\u305f\u308a\u3001[\u30de\u30fc\u30d6\u30eb\u30c0\u30a4\u30a2\u30b0\u30e9\u30e0](http://rxmarbles.com/)\u3092\u898b\u305f\u308a\u3057\u3066\u3001\u3088\u3046\u3084\u304f\u3042\u308b\u7a0b\u5ea6\u7406\u89e3\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\n\u30aa\u30da\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\u8ffd\u3063\u3066\u307f\u305f\u306e\u3067\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\u3082\u3057\u9593\u9055\u3044\u306a\u3069\u304c\u3042\u308c\u3070\u3054\u6307\u6458\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3059\u3002\n\n## RxSwift\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3064\u3044\u3066\n\nRxSwift\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u306f[Documentation](https://github.com/ReactiveX/RxSwift/tree/master/Documentation)\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u3001\u3044\u308d\u3044\u308d\u306a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n[HotAndColdObservables.md](https://github.com/ReactiveX/RxSwift/blob/master/Documentation/HotAndColdObservables.md)\u306a\u3093\u304b\u306fHot\u3068Cold\u306e\u9055\u3044\u306b\u3064\u3044\u3066\u8868\u3082\u7528\u3044\u3066\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u4e00\u5ea6\u898b\u3066\u307f\u308b\u3068\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nRxSwift\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u30aa\u30da\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\u306f[API.md](https://github.com/ReactiveX/RxSwift/blob/master/Documentation/API.md)\u306b\u8a73\u3057\u304f\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\n\n\n### [API.md](https://github.com/ReactiveX/RxSwift/blob/master/Documentation/API.md)\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u3053\u3068\n\n\u5c0e\u5165\u90e8\u5206\u3067\u3055\u3089\u3063\u3068\u8aac\u660e\u304c\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u307e\u3068\u3081\u3066\u307f\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n* \u3044\u308d\u3044\u308d\u306a\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3044\u308d\u3044\u308d\u306a\u5b9f\u88c5\u304c\u3055\u308c\u3066\u304a\u308a\u3001\u540c\u3058\u30aa\u30da\u30ec\u30fc\u30bf\u30fc\u3067\u3082\u7570\u306a\u308b\u547c\u3073\u65b9\u3092\u3057\u3066\u3044\u308b\n* \u3053\u308c\u306f\u6b74\u53f2\u7684\u306a\u7406\u7531\u3084\u8a00\u8a9e\u306e\u4e88\u7d04\u5f8c\u304c\u539f\u56e0\u3060\u3063\u305f\u308a\u3059\u308b\n* \u30aa\u30da\u30ec\u30fc\u30bf\u30fc\u306f\u72b6\u614b\u3092\u6301\u305f\u306a\u3044\n* \u76ee\u7684\u306b\u5fdc\u3058\u305fAPI\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\n\n\u3053\u3053\u3067\u306f\u30aa\u30da\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30ea\u30f3\u30af\u5148\u306fReactiveX\u306e\u30da\u30fc\u30b8\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u30de\u30fc\u30d6\u30eb\u30c0\u30a4\u30a2\u30b0\u30e9\u30e0\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30ea\u30f3\u30af\u5148\u306e\u30da\u30fc\u30b8\u4e0b\u90e8\u306b\u306f\u8a00\u8a9e\u3054\u3068\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001RxSwift\u306f\"TBD\"\u3068\u66f8\u304b\u308c\u3066\u304a\u308a\u3001\u30b5\u30f3\u30d7\u30eb\u306a\u3069\u306f\u66f8\u304b\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\n[API.md](https://github.com/ReactiveX/RxSwift/blob/master/Documentation/API.md)\u306e[Creating Observables](https://github.com/ReactiveX/RxSwift/blob/master/Documentation/API.md#creating-observables)\u306e`asObservable`\u306e\u30ea\u30f3\u30af\u5148\u3092\u898b\u3066\u307f\u308b\u3068\u3001`asObservable`\u306f[From](http://reactivex.io/documentation/operators/from.html)\u3068\u8a00\u3046\u3053\u3068\u304c\u5206\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u3053\u3053\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u57fa\u672c\u7684\u306a\u95a2\u6570\u306b\u3064\u3044\u3066\u306f\u3001\u3042\u308b\u7a0b\u5ea6RxSwift\u306b\u542b\u307e\u308c\u3066\u3044\u308b[Playground](https://github.com/ReactiveX/RxSwift/tree/master/Rx.playground/Pages)\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4eca\u56de\u306f`empty`\u306e\u30bd\u30fc\u30b9\u3092\u8ffd\u3063\u3066\u3001`Observable`\u3001`ObserverType`\u3001`AnonymousObserver `\u306a\u3069\u306b\u89e6\u308c\u3066\u307f\u307e\u3057\u305f\u3002\n\n## `empty`\u306e\u30bd\u30fc\u30b9\u3092\u8ffd\u3063\u3066\u307f\u308b\n\n`empty`\u306fReactiveX\u306e\u30ea\u30f3\u30af\u3092\u898b\u3066\u3082[\"Empty\"](http://reactivex.io/documentation/operators/empty-never-throw.html)\u3068\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n> create an Observable that emits no items but terminates normally\n\n\u4f55\u3082\u30a2\u30a4\u30c6\u30e0\u3092\u767a\u884c\u3057\u306a\u3044\u304c\u3001\u6b63\u5e38\u306b\u7d42\u4e86\u3059\u308bObservable\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n[Playground](https://github.com/ReactiveX/RxSwift/tree/master/Rx.playground/Pages)\u3067\u306f\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u30b5\u30f3\u30d7\u30eb\u304c\u66f8\u304b\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n\n```swift\nlet emptySequence = Observable<Int>.empty()\nemptySequence\n    .subscribe { event in\n        print(event) // Completed\n}\n```\n\n`empty`\u3067\u4f5c\u6210\u3057\u305fObservable\u306b\u5bfe\u3057\u3066`subscribe`\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\uff08`subscribe`\u306f\u5f8c\u307b\u3069\uff09\u3002\n\n### `Event<Element>`\u30af\u30e9\u30b9\n\n`empty`\u306f\u4f55\u3082\u30a2\u30a4\u30c6\u30e0\u3092\u767a\u884c\u3057\u306a\u3044\u306e\u3067`Completed`\u3068\u51fa\u529b\u3055\u308c\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u306e\u6b63\u4f53\u306f`Event`\u3068\u3044\u3046enum\u306b\u306a\u308a\u307e\u3059\u3002\n\n```swift:Event.swift\npublic enum Event<Element> : CustomDebugStringConvertible {\n    /**\n    Next element is produced\n    */\n    case Next(Element)\n\n    /**\n    Sequence terminates with error\n    */\n    case Error(ErrorType)\n\n    /**\n    Sequence completes sucessfully\n    */\n    case Completed\n}\n```\n\n`Event`\u306f3\u3064\u306e\u30e1\u30f3\u30d0\u30fc\u3092\u6301\u3063\u3066\u304a\u308a\u3001`Next(Element)`\u3001`Error(ErrorType)`\u3001\u305d\u3057\u3066`Completed`\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002`empty`\u306f\u4f55\u3082\u30a2\u30a4\u30c6\u30e0\u3092\u767a\u884c\u305b\u305a\u306b\u7d42\u4e86\u3068\u66f8\u304b\u308c\u3066\u3044\u305f\u306e\u3067\u3001`Completed`\u304c\u5b8c\u4e86\u3092\u610f\u5473\u3059\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n### `Observable<Element>`\u30af\u30e9\u30b9\n\n`empty`\u306e\u8a71\u306b\u623b\u308a\u307e\u3059\u3002`empty`\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002`empty`\u306f\u5f15\u6570\u3092\u4f55\u3082\u53d6\u3089\u305a\u306b\u578b`E`\u306e`Observable`\u3092\u8fd4\u3059\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n```swift:Observable+Creation.swift\npublic static func empty() -> Observable<E> {\n    return Empty<E>()\n}\n```\n`empty`\u306f`Observable`\u306eextension\u3067\u3059\u3002Observable+Creation.swift\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306f`create`,`just`\u3068\u3044\u3063\u305f\u95a2\u6570\u3082\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u901a\u308a`Observable`\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\n`Observable`\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff08\u5b9f\u969b\u306f\u30b3\u30e1\u30f3\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u9577\u304f\u306a\u308b\u306e\u3067\u524a\u9664\u3057\u3066\u3044\u307e\u3059\uff09\u3002\n\n```swift:Observable.swift\npublic class Observable<Element> : ObservableType {\n    public typealias E = Element\n\n    init() {\n#if TRACE_RESOURCES\n        OSAtomicIncrement32(&resourceCount)\n#endif\n    }\n\n    public func subscribe<O: ObserverType where O.E == E>(observer: O) -> Disposable {\n        abstractMethod()\n    }\n\n    public func asObservable() -> Observable<E> {\n        return self\n    }\n\n    deinit {\n#if TRACE_RESOURCES\n        AtomicDecrement(&resourceCount)\n#endif\n    }\n\n    internal func composeMap<R>(selector: Element throws -> R) -> Observable<R> {\n        return Map(source: self, selector: selector)\n    }\n}\n```\n\n`Observable`\u306f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u30af\u30e9\u30b9\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u5916\u90e8\u516c\u958b\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066`subscribe`\u3068`asObservable`\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\n`subscribe`\u306f`abstractMethod()`\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u304c\u3001`@noreturn`\u306a\u95a2\u6570\u3067\u5185\u90e8\u7684\u306b`fatalError`\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\u7d99\u627f\u3057\u3066\u4f7f\u3046\u3082\u306e\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u304b\u3002\n\n`asObservable`\u306f`self`\u3092\u8fd4\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\n### `ObservableType`\u30d7\u30ed\u30c8\u30b3\u30eb\n\n\u307e\u305f\u3001`Observable`\u30af\u30e9\u30b9\u306f`ObservableType`\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u9069\u5408\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002`ObservableType`\u30d7\u30ed\u30c8\u30b3\u30eb\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff08\u5b9f\u969b\u306f\u30b3\u30e1\u30f3\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u9577\u304f\u306a\u308b\u306e\u3067\u524a\u9664\u3057\u3066\u3044\u307e\u3059\uff09\u3002\n\n```swift:ObservableType.swift\n\npublic protocol ObservableType : ObservableConvertibleType {\n\n    associatedtype E\n\n    @warn_unused_result(message=\"http://git.io/rxs.ud\")\n    func subscribe<O: ObserverType where O.E == E>(observer: O) -> Disposable\n\n}\n```\n\u95a2\u9023\u578b`E`\u3092\u6301\u3061\u3001`subscribe`\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3001`ObservableType`\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u306f\u5fc5\u8981\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n`subscribe`\u3067\u304d\u308b\u3053\u3068\u304c`Observable`=\u89b3\u5bdf\u53ef\u80fd\u3067\u3042\u308b\u3001\u3068\u3044\u3046\u6027\u8cea\u3092\u8868\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n### `Disposable`\u30d7\u30ed\u30c8\u30b3\u30eb\n\n`subscribe`\u306f`ObserverType`\u3092\u5f15\u6570\u306b\u53d6\u308a\u3001`Disposable`\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u6642`ObserverType`\u306e\u95a2\u9023\u578b\u3068`ObservableType`\u306e\u95a2\u9023\u578b\u306f\u540c\u3058\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n`Disposable`\u306f\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u3059\u3002\n\n```swift:Disposable.swift\n/**\nRespresents disposable resource.\n*/\npublic protocol Disposable {\n    /**\n    Dispose resource.\n    */\n    func dispose()\n}\n```\n\n\b`dispose`\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u30ea\u30bd\u30fc\u30b9\u306e\u51e6\u5206\u3092\u884c\u3046\u307f\u305f\u3044\u3067\u3059\u3002\n\n### `ObserverType`\u30d7\u30ed\u30c8\u30b3\u30eb\n\n`ObserverType`\u30d7\u30ed\u30c8\u30b3\u30eb\u3082\u898b\u3066\u307f\u307e\u3059\u3002`ObserverType`\u3082\u95a2\u9023\u578b`E`\u3092\u6301\u3061\u3001`on`\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\u3002`Event`\u304c\u518d\u767b\u5834\u3057\u307e\u3057\u305f\u3002\n\n```swift:ObserverType.swift\npublic protocol ObserverType {\n\n    /**\n    The type of elements in sequence that observer can observe.\n    */\n    associatedtype E\n\n    /**\n    Notify observer about sequence event.\n\n    - parameter event: Event that occured.\n    */\n    func on(event: Event<E>)\n}\n```\n\n`on`\u30e1\u30bd\u30c3\u30c9\u306e\u306f\u30aa\u30d6\u30b6\u30fc\u30d0\u30fc=\u89b3\u5bdf\u8005\u306b\u5bfe\u3057\u3066\u30a4\u30d9\u30f3\u30c8\u3092\u901a\u77e5\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u3088\u3046\u3067\u3059\u3002\n\n`ObserverType`\u306b\u306f`Event`\u5404\u7a2e\u306b\u5bfe\u3059\u308b\u4fbf\u5229\u30e1\u30bd\u30c3\u30c9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n\n```swift:ObserverType.swift\npublic extension ObserverType {\n\n    /**\n    Convenience method equivalent to `on(.Next(element: E))`\n\n    - parameter element: Next element to send to observer(s)\n    */\n    final func onNext(element: E) {\n        on(.Next(element))\n    }\n\n    /**\n    Convenience method equivalent to `on(.Completed)`\n    */\n    final func onCompleted() {\n        on(.Completed)\n    }\n\n    /**\n    Convenience method equivalent to `on(.Error(error: ErrorType))`\n    - parameter error: ErrorType to send to observer(s)\n    */\n    final func onError(error: ErrorType) {\n        on(.Error(error))\n    }\n}\n```\n\n### `Empty`\u30af\u30e9\u30b9\n\n\u3055\u3066\u3001`Observable`\u304c\u306a\u3093\u3068\u306a\u304f\u308f\u304b\u3063\u305f\u306e\u3067\u3001`empty`\u3092\u518d\u5ea6\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff08`Observable`\u3092\u898b\u308b\u3060\u3051\u3060\u3063\u305f\u306e\u3067\u3059\u304c\u3060\u3044\u3076\u9060\u56de\u308a\u3057\u307e\u3057\u305f\uff09\u3002\n\n`empty`\u30e1\u30bd\u30c3\u30c9\u306f`Observable<E>`\u3092\u623b\u308a\u5024\u3068\u3057\u3066\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\n```swift:Observable+Creation.swift\npublic static func empty() -> Observable<E> {\n    return Empty<E>()\n}\n```\n\n`Empty`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u304c\u3001`Empty`\u306f`Observable`\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306a\u306e\u3067\u3057\u3087\u3046\u3002\n\n\u3053\u306e`Empty`\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002`Empty`\u30af\u30e9\u30b9\u306f`Producer`\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u305f\u3082\u306e\u3067\u3001`subscribe`\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066\u3044\u307e\u3059\uff08`Producer`\u306f`Observable`\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3067\u3059\uff09\u3002\n\n```swift:Empty.swift\nclass Empty<Element> : Producer<Element> {\n    override func subscribe<O : ObserverType where O.E == Element>(observer: O) -> Disposable {\n        observer.on(.Completed)\n        return NopDisposable.instance\n    }\n}\n```\n\n\u5148\u307b\u3069\u51fa\u3066\u304d\u305f`ObserverType`\u306e`on`\u306b`Event`\u306e`.Completed`\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u306d\u3002`Event`\u306b\u306f`.Next`\u3082`.Error`\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u3069\u3061\u3089\u3082\u6e21\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n`Empty`\u306f`public`\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u306e\u3067RxSwift\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\u4f7f\u3046\u969b\u306b\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002\n\n### `NopDisposable`\u30af\u30e9\u30b9\n\n`NopDisposable`\u306f\u4f55\u3082\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5fc5\u8981\u304c\u306a\u3044`Disposable`\u3067\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u4f55\u3082\u3057\u306a\u3044`Disposable`\u307f\u305f\u3044\u3067\u3059\u3002\n\n```swift:NopDisposable.swift\npublic struct NopDisposable : Disposable {\n \n    /**\n    Singleton instance of `NopDisposable`.\n    */\n    public static let instance: Disposable = NopDisposable()\n    \n    init() {\n        \n    }\n    \n    /**\n    Does nothing.\n    */\n    public func dispose() {\n    }\n}\n```\n\n### \u3053\u3053\u307e\u3067\u306e\u307e\u3068\u3081\n\n\u3053\u3053\u307e\u3067\u3092\u307e\u3068\u3081\u308b\u3068\u3001\u89b3\u5bdf\u53ef\u80fd\u306a`ObservableType`\u306b\u9069\u5408\u3057\u305f`Observable<E>`\u3092\u7d99\u627f\u3057\u305f`Empty`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092`empty`\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5024\u3068\u3059\u308b\u3053\u3068\u3067\u30a4\u30d9\u30f3\u30c8\u306e\u76e3\u8996\u3092\u53ef\u80fd\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```swift:Observable+Creation.swift\npublic static func empty() -> Observable<E> {\n    return Empty<E>()\n}\n```\n\n### `subscribe(on: (event: Event<E>) -> Void) -> Disposable\u306fObservable<Element>`\u30e1\u30bd\u30c3\u30c9\n\n\u3053\u3053\u3067\u3088\u3046\u3084\u304fPlayground\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u623b\u308a\u307e\u3059\u3002\n\n```swift\nlet emptySequence = Observable<Int>.empty()\nemptySequence\n    .subscribe { event in\n        print(event) // Completed\n}\n```\n`Observable<Int>.empty()`\b\u306e\u6d41\u308c\u306f\u3053\u3053\u307e\u3067\u66f8\u3044\u3066\u304d\u305f\u3068\u304a\u308a\u3067\u3059\u3002`Observable<Int>`\u306f\u89b3\u5bdf\u53ef\u80fd\u306a\u30af\u30e9\u30b9\u3067\u3001`empty`\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u3063\u3066`.Completed`\u306e`Event`\u306e\u307f\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u305d\u308c\u304c`emptySequence`\u3067\u3059\u3002\n\n`Empty`\u306f`subscribe`\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\u3001`subscribe`\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u3068\u601d\u3044\u304d\u3084\u3001Playground\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b`subscribe`\u306f`Empty`\u30af\u30e9\u30b9\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b`subscribe`\u3068\u306f\u5f15\u6570\u304c\u7570\u306a\u308a\u307e\u3059\u3002\n\n`Empty`\u306f\u3053\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002`ObserverType`\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u3066`Disposable`\u3092\u623b\u308a\u5024\u3068\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\n```swift:Empty.swift\nclass Empty<Element> : Producer<Element> {\n    override func subscribe<O : ObserverType where O.E == Element>(observer: O) -> Disposable {\n        observer.on(.Completed)\n        return NopDisposable.instance\n    }\n}\n```\n\n\u3057\u304b\u3057Playground\u3067\u4f7f\u308f\u308c\u3066\u3044\u305f\u306e\u306f\u4ee5\u4e0b\u306e`subscribe`\u3067\u3059\u3002`Event`\u3092\u5f15\u6570\u306b`Void`\u3092\u8fd4\u3059\u95a2\u6570\u3092\u7b2c\u4e00\u5f15\u6570\u3068\u3057\u3001\u623b\u308a\u5024\u306f`Disposable`\u578b\u3067\u3059\u3002\n\n```swift:Observable+Extensions.swift\n@warn_unused_result(message=\"http://git.io/rxs.ud\")\npublic func subscribe(on: (event: Event<E>) -> Void)\n    -> Disposable {\n    let observer = AnonymousObserver { e in\n        on(event: e)\n    }\n    return self.subscribeSafe(observer)\n}\n```\n\n#### `AnonymousObserver`\u30af\u30e9\u30b9\n\n\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u305f`on`\u306f`AnonymousObserver`\u306b\u6e21\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u306f`ObserverBase<ElementType>`\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3068\u306a\u3063\u3066\u304a\u308a\u3001`ObserverBase`\u306f`ObserverType`\u3068`Disposable`\u306b\u9069\u5408\u3057\u3066\u3044\u307e\u3059\u3002\n\n```swift:AnonymousObserver.swift\nclass AnonymousObserver<ElementType> : ObserverBase<ElementType> {\n    typealias Element = ElementType\n    \n    typealias EventHandler = Event<Element> -> Void\n    \n    private let _eventHandler : EventHandler\n    \n    init(_ eventHandler: EventHandler) {\n#if TRACE_RESOURCES\n        AtomicIncrement(&resourceCount)\n#endif\n        _eventHandler = eventHandler\n    }\n\n    override func onCore(event: Event<Element>) {\n        return _eventHandler(event)\n    }\n    \n#if TRACE_RESOURCES\n    deinit {\n        AtomicDecrement(&resourceCount)\n    }\n#endif\n}\n```\n\n`AnonymousObserver`\u306f`Event<Element> -> Void`\u578b\u306e\u5024\u3092\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u3057\u3066\u4fdd\u6301\u3057\u3066\u304a\u308a\u3001\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066\u3044\u308b`onCore`\u304c\u3001\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u3067\u3042\u308b`ObserverBase<ElementType>`\u306e`on`\u3067\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n`ObserverBase<ElementType>`\u306e`onCore`\u306f\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3055\u308c\u308b\u3053\u3068\u304c\u524d\u63d0\u3067`abstractMethod()`\u304c\u547c\u3070\u308c\u3066\u3044\u307e\u3059(\u3044\u307e\u306e\u3068\u3053\u308d`AnonymousObserver`\u4ee5\u5916\u306b`ObserverBase<ElementType>`\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f)\u3002\n\n```swift:ObserverBase.swift\nclass ObserverBase<ElementType> : Disposable, ObserverType {\n    typealias E = ElementType\n\n    private var _isStopped: AtomicInt = 0\n\n    func on(event: Event<E>) {\n        switch event {\n        case .Next:\n            if _isStopped == 0 {\n                onCore(event)\n            }\n        case .Error, .Completed:\n\n            if !AtomicCompareAndSwap(0, 1, &_isStopped) {\n                return\n            }\n\n            onCore(event)\n        }\n    }\n\n    func onCore(event: Event<E>) {\n        abstractMethod()\n    }\n\n    func dispose() {\n        _isStopped = 1\n    }\n}\n```\n\n\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u3051\u53d6\u3063\u3066`ObserverType`\u306e`on`\u3092\u5b9f\u884c\u3059\u308b\u306e\u304c`AnonymousObserver`\u306e\u5f79\u5272\u3063\u307d\u3044\u3067\u3059\u3002\n\n\n```swift:Observable+Extensions.swift\n@warn_unused_result(message=\"http://git.io/rxs.ud\")\npublic func subscribe(on: (event: Event<E>) -> Void)\n    -> Disposable {\n    let observer = AnonymousObserver { e in\n        on(event: e)\n    }\n    return self.subscribeSafe(observer)\n}\n```\n\n#### `subscribeSafe`\u30e1\u30bd\u30c3\u30c9\n\n`AnonymousObserver`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f`subscribeSafe`\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```swift:Observable+Extensions.swift\npublic extension ObservableType {\n    /**\n    All internal subscribe calls go through this method\n    */\n    @warn_unused_result(message=\"http://git.io/rxs.ud\")\n    func subscribeSafe<O: ObserverType where O.E == E>(observer: O) -> Disposable {\n        return self.asObservable().subscribe(observer)\n    }\n}\n```\n\n> All internal subscribe calls go through this method\n\n\u30a4\u30f3\u30bf\u30fc\u30ca\u30eb\u306asubscribe\u306f\u3059\u3079\u3066\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u901a\u3057\u3066\u547c\u3070\u308c\u308b\u305d\u3046\u3067\u3001`Empty`\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u305f\u4ee5\u4e0b\u306e`subscribe`\u306f\u3053\u3053\u3067\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u306d\uff08\u3053\u306e\"All internal subscribe\"\u304c\u3069\u3053\u307e\u3067\u3092\u30ab\u30d0\u30fc\u3057\u3066\u3044\u308b\u306e\u304b\u306f\u78ba\u8a8d\u3057\u3066\u3044\u307e\u305b\u3093\uff09\u3002\n\n```swift:Empty.swift\nclass Empty<Element> : Producer<Element> {\n    override func subscribe<O : ObserverType where O.E == Element>(observer: O) -> Disposable {\n        observer.on(.Completed)\n        return NopDisposable.instance\n    }\n}\n```\n\n## \u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u307e\u3068\u3081\n\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u8efd\u304f\u307e\u3068\u3081\u307e\u3059\u3002\n\n```swift\nlet emptySequence = Observable<Int>.empty()\nemptySequence\n    .subscribe { event in\n        print(event) // Completed\n}\n```\n\n\u6574\u7406\u3059\u308b\u3068\u3001\n\n1. `Observable<Int>.empty()`\u3067\u7a7a\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u4f5c\u6210\u3055\u308c\u308b\n  * `Empty<E>`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\n  * `Empty<E>`\u306f`Observable<Element>`\u306e\u30b5\u30d6\u30af\u30e9\u30b9\n  * `Observable<Element>`=\u76e3\u5bdf\u53ef\u80fd`\uff08subscribe`\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\uff09\n2. `subscribe(on: (event: Event<E>) -> Void)\n    -> Disposable`\u3067\u6d41\u308c\u3066\u304f\u308b\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406\u3059\u308b\n * `subscribe(on: (event: Event<E>) -> Void)\n    -> Disposable`\u306f`Observable<Element>`\u306eextension\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\n  * \u5f15\u6570\u3068\u3057\u3066\u6e21\u3057\u3066\u3044\u308b\u30af\u30ed\u30fc\u30b8\u30e3\u306f`AnonymousObserver`\u304c\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u3057\u3066\u4fdd\u6301\n  * `AnonymousObserver`\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c`subscribeSafe`\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u6e21\u3055\u308c\u308b\n  * `subscribeSafe`\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u306f`Empty`\u306e`subscribe`\u30e1\u30bd\u30c3\u30c9\u304c\u5b9f\u884c\u3055\u308c\u308b\n  * `Empty`\u306e`subscribe`\u306f\u6e21\u3055\u308c\u305f`observer`\u306e`on`\u3092\u5b9f\u884c\u3057\u3001\u5f15\u6570\u306b`Completed`\u3092\u6e21\u3057\u3066\u3044\u308b\n\n\u4ee5\u4e0a\u306e\u3088\u3046\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u307e\u3068\u3081\n\n\u51fa\u3066\u304f\u308b\u7528\u8a9e\u3092\u4e00\u3064\u305a\u3064\u6574\u7406\u3059\u308b\u3068\u4eca\u56de\u306e\u3088\u3046\u306b\u305f\u304f\u3055\u3093\u5bc4\u308a\u9053\u3092\u3057\u3066\u30bd\u30fc\u30b9\u3092\u8aad\u307e\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3001[API.md](https://github.com/ReactiveX/RxSwift/blob/master/Documentation/API.md)\u3084[\u30de\u30fc\u30d6\u30eb\u30c0\u30a4\u30a2\u30b0\u30e9\u30e0](http://rxmarbles.com/)\u306b\u76ee\u3092\u901a\u3057\u3066Rx\u306e\u7528\u8a9e\u3092\u7406\u89e3\u3057\u3066\u304a\u304f\u3068\u3082\u3063\u3068\u30b9\u30e0\u30fc\u30ba\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u30b3\u30fc\u30c9\u7684\u306b\u306fclass\u306b\u3088\u308b\u7d99\u627f\u304c\u7d50\u69cb\u4f7f\u308f\u308c\u3066\u3044\u308b\u5370\u8c61\u3092\u53d7\u3051\u307e\u3057\u305f\u3002\n\u5b9f\u88c5\u3092\u898b\u308b\u3068\u3069\u306e\u3088\u3046\u306b\u52d5\u304f\u306e\u304b\u5206\u304b\u3063\u3066\u826f\u3044\u3067\u3059\u306d\u3002\n", "tags": ["RxSwift", "Swift"]}