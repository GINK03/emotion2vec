{"tags": ["bluetooth", "Python"], "context": " More than 1 year has passed since last update.blue giga\u306eBLE112\u3092python\u3067\u5236\u5fa1\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304cGitHub\u3067bglib\u3068\u3057\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\u3088\u304f\u3067\u304d\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u3066BLE(Bluetooth Low Energy)\u3092\u6271\u3046\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u578b\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\uff0e\n\nOverView\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u306b\u3082\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u304c\uff0c\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u57fa\u672c\u7684\u306a\u4ed5\u7d44\u307f\u306f\u3053\u3053\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\uff0e(\u5e78\u904b\u306b\u3082\u65e5\u672c\u8a9e\u306e\u30ea\u30bd\u30fc\u30b9\u306b\u306a\u308a\u307e\u3059\uff0e)\n\u3053\u306e\u60c5\u5831\u6e90\u3092\u307f\u308b\u3053\u3068\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u7406\u89e3\u304c\u6df1\u307e\u308b\u306f\u305a\u3067\u3059\uff0e\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u3092\u3055\u3089\u3063\u3068\u773a\u3081\u3066\u304f\u3060\u3055\u3044\uff0e\n\u6700\u521d\u306e\u307b\u3046\u306bBGAPIEvent\u306a\u308b\u30af\u30e9\u30b9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3066\u2026\u305d\u306e\u3042\u3068\u306b\u306f\u30d0\u30a4\u30ca\u30ea\u3092\u304b\u3048\u3059\u95a2\u6570\u304c\u3042\u3063\u3066\u2026BGAPIEvent\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u4f5c\u3089\u308c\u3066\u3066\u2026\u6700\u5f8c\u306f\u5927\u91cf\u306eif\u6587\u2026\n\u4e00\u898b\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3057\uff0c\u76ee\u304c\u3061\u304b\u3061\u304b\u3059\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\n\u3042\u3068\u3067\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3059\u306e\u3067\u306f\u3058\u3081\u306b\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3069\u3046\u4f7f\u3046\u306e\u304b\uff0c\u3056\u3063\u304f\u308a\u8aac\u660e\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3042\u308b\"\u9069\u5f53\u306a\"BGAPIEvent\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306b\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u3068\u304d\u306b\u5b9f\u884c\u3057\u305f\u3044\u95a2\u6570\u3092\"\u52a0\u3048\u308b\"\uff0e\n\u9069\u5f53\u306a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3092\u9078\u3076\u3053\u3068\u3067\u30a4\u30d9\u30f3\u30c8\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\u30a4\u30d9\u30f3\u30c8(BLE\u304c\u4fe1\u53f7\u3092\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u30fb\u767a\u4fe1\u3059\u308b)\u304c\u767a\u751f\u3059\u308b\u3068\u52a0\u3048\u305f\u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u308b\uff0e\n\n\u305f\u304f\u3055\u3093\u3042\u308bBGAPIEvent\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u304c\u30a4\u30d9\u30f3\u30c8\u306e\u30c8\u30ea\u30ac\u30fc\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\u3069\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3092\u3048\u3089\u3076\u3053\u3068\u306f\u30a4\u30d9\u30f3\u30c8\u3092\u9078\u3076\u3053\u3068\u3068\u540c\u3058\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n\u4f8b\nbglib\u306eExample\u306b\u793a\u3055\u308c\u3066\u3044\u308b\u30bd\u30fc\u30b9\u3092\u5c11\u3057\u66f8\u304d\u5909\u3048\u3066BLE\u3067\u9001\u4fe1\u3068\u53d7\u4fe1\u3092\u540c\u6642\u306b\u884c\u306a\u3044\uff0cCtrl-C\u3067\u9001\u53d7\u4fe1\u3092\u505c\u6b62\u3059\u308b\uff0c\u3068\u3044\u3046\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3057\u307e\u3059\uff0e(\u96d1\u306a\u30bd\u30fc\u30b9\u3067\u6065\u304b\u3057\u3044\u306e\u3067\u3059\u304c\u2026)\nimport bglib\nimport serial\nimport sys\nimport time\n\n\ndef timeout_handler(sender, args):\n    print \"BGAPI parser timed out.\",\n    print \" Make sure the BLE device is in a known/idle state.\"\n\n\ndef handle_foo(sender, earg):\n    print \"foo!\"\n\n\ndef handle_rssi(sender, earg):\n    print earg['rssi']\n    print earg['sender']\n    print earg['data']\n\n\ndef main():\n    ble = bglib.BGLib()\n    ble.packet_mode = False\n    ble.debug = True\n\n    # add handler for BGAPI timeout condition (hopefully won't happen)\n    ble.on_timeout += timeout_handler\n\n    # Add Function\n    ble.ble_evt_gap_scan_response += handle_foo\n    ble.ble_evt_gap_scan_response += handle_rssi\n\n    if len(sys.argv) != 2:\n        print \"Usage: python %s port\" % sys.argv[0]\n        quit()\n\n    port = sys.argv[1]\n    baudrate = 115200\n\n    try:\n        ser = serial.Serial(\n            port=port, baudrate=baudrate, timeout=1, writeTimeout=1)\n    except serial.SerialException as e:\n        print \"\\n\" + (\"=\" * 20)\n        print \"Port error (name='%s', baud='%ld'): %s\" % (port, baudrate, e)\n        print \"=\" * 20\n        quit()\n\n    # flush buffers\n    ser.flushInput()\n    ser.flushOutput()\n\n    # disconnect if we are connected already\n    ble.send_command(ser, ble.ble_cmd_connection_disconnect(0))\n    ble.check_activity(ser, 1)\n\n    # stop advertising if we are advertising already\n    ble.send_command(ser, ble.ble_cmd_gap_set_mode(0, 0))\n    ble.check_activity(ser, 1)\n\n    # stop scanning if we are scanning already\n    ble.send_command(ser, ble.ble_cmd_gap_end_procedure())\n    ble.check_activity(ser, 1)\n\n    # set advertising parameters\n    ble.send_command(\n        ser, ble.ble_cmd_gap_set_adv_parameters(0x640, 0x640, 0x07))\n    ble.check_activity(ser, 1)\n\n    # set TX power level\n    ble.send_command(ser, ble.ble_cmd_hardware_set_txpower(15))\n                     # range 0 to 15 (real TX power from -23 to +3dBm)\n    ble.check_activity(ser, 1)\n\n    # set advertising data\n    adv_data = [0x02, 0x01, 0x06, 0x02, 0x0a, 0x03]\n    ble.send_command(ser, ble.ble_cmd_gap_set_adv_data(0, adv_data))\n    ble.check_activity(ser, 1)\n\n    # start advertising\n    ble.send_command(ser, ble.ble_cmd_gap_set_mode(4, 0))\n    ble.check_activity(ser, 1)\n\n    # set scan parameters\n    ble.send_command(ser, ble.ble_cmd_gap_set_scan_parameters(0xC8, 0xC8, 1))\n    ble.check_activity(ser, 1)\n\n    # start scanning now\n    ble.send_command(ser, ble.ble_cmd_gap_discover(1))\n    ble.check_activity(ser, 1)\n\n    print(\"started.\")\n\n    try:\n        while (1):\n            # check for all incoming data (no timeout, non-blocking)\n            ble.check_activity(ser)\n\n            # don't burden the CPU\n            time.sleep(0.01)\n    except KeyboardInterrupt as e:\n        # disconnect if we are connected already\n        ble.send_command(ser, ble.ble_cmd_connection_disconnect(0))\n        ble.check_activity(ser, 1)\n\n        # stop advertising if we are advertising already\n        ble.send_command(ser, ble.ble_cmd_gap_set_mode(0, 0))\n        ble.check_activity(ser, 1)\n\n        # stop scanning if we are scanning already\n        ble.send_command(ser, ble.ble_cmd_gap_end_procedure())\n        ble.check_activity(ser, 1)\n\n        print(\"stopped\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n\u6ce8\u76ee\u3057\u3066\u307b\u3057\u3044\u306e\u306f\n\u2026\n    # Add Function\n    ble.ble_evt_gap_scan_response += handle_foo\n    ble.ble_evt_gap_scan_response += handle_rssi\n\u2026\n\n\u3068\u3044\u3046\u90e8\u5206\u3067\u3059\uff0e\n\u3053\u3053\u3067\u5b9a\u7fa9\u3057\u305fhandle_foo\uff0chandle_rssi\u3092\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u3059\u308b\u3088\u3046\u306b\u767b\u9332\u3057\u307e\u3059\uff0e\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570ble_evt_gap_scan_response\u306fBLE\u304cscan\u3064\u307e\u308a\u53d7\u4fe1\u3057\u305f\u3068\u304d\uff0c\u3068\u3044\u3046\u30a4\u30d9\u30f3\u30c8\u3092\u8868\u308f\u3057\u3066\u3044\u307e\u3059\uff0e\n\u3053\u306e\u30a4\u30d9\u30f3\u30c8\u306b\u3088\u308b\u632f\u308a\u5206\u3051\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u306e\u4e0b\u306e\u307b\u3046\u306b\u3042\u308b\u5927\u304d\u306aif\u6587\u3067\u884c\u306a\u308f\u308c\u3066\u3044\u307e\u3059\uff0e\nble_evt_gap_scan_response\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5185\u3092\u691c\u7d22\u3059\u308b\u3068\nif packet_command == 0:  # ble_evt_gap_scan_response\n                        rssi, packet_type, sender, address_type, bond, data_len = struct.unpack(\n                            '<bB6sBBB', self.bgapi_rx_payload[:11])\n                        sender = [ord(b) for b in sender]\n                        data_data = [ord(b)\n                                     for b in self.bgapi_rx_payload[11:]]\n                        self.ble_evt_gap_scan_response(\n                            {'rssi': rssi, 'packet_type': packet_type, 'sender': sender, 'address_type': address_type, 'bond': bond, 'data': data_data})\n\n\u3068\u3044\u3046\u90e8\u5206\u304c\u307f\u3064\u304b\u308b\u3068\u304a\u3082\u3044\u307e\u3059\uff0e\n\u3053\u306e\u90e8\u5206\u3067\u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u3092\u3057\u3066\u3044\u307e\u3059\uff0e\n\u6700\u5f8c\u306eself.ble_evt_gap_scan_response(\u2026)\u3067\u767b\u9332\u3057\u305f\u95a2\u6570\u3092\u547c\u3073\u3060\u3057\uff0c\u5f15\u6570\u306bdictionary\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\uff0e\nble_evt_gap_scan_response\u306a\u3069\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u304c\u3069\u3044\u3063\u305f\u30a4\u30d9\u30f3\u30c8\u3092\u8868\u308f\u3057\u3066\u3044\u308b\u306e\u304b\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u308b\u3053\u3068\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff0e(\u30ea\u30f3\u30af\u5148\u306b\u3042\u308bAPI\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u63a2\u3057\u51fa\u3057\u3066\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u7b49\u3092\u767b\u9332\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e)\ndictionary\u3067\u308f\u305f\u3055\u308c\u305f\u5f15\u6570\u306b\u306f\u6709\u76ca\u306a\u60c5\u5831\u304c\u767b\u9332\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\u305f\u3068\u3048\u3070rssi\u306f\u53d7\u4fe1\u3057\u305f\u4fe1\u53f7\u306e\u5f37\u5ea6\u304cvalue\u306b\u5165\u3063\u3066\u3044\u307e\u3059\uff0e\n\u3053\u308c\u3089\u306edictionary\u306e\u5024\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\ndef handle_rssi(sender, earg):\n    print earg['rssi']\n    print earg['sender']\n    print earg['data']\n\n\n\u3068\u3044\u3063\u305f\u3088\u3046\u306b\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u3067\u547c\u3073\u51fa\u3055\u308c\u308b\u95a2\u6570\u5185\u3067\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n\u307e\u3068\u3081\nbglib\u306e\u4f7f\u3044\u65b9\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\uff0e\n\u5bb9\u6613\u306b\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u578b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d44\u3081\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u3066\u3044\u305f\u3060\u3051\u305f\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\n\u30a4\u30d9\u30f3\u30c8\u3092\u8abf\u3079\u308b\u305f\u3081\u306b\u306f\u3061\u3087\u3063\u3068\u5206\u539a\u3044\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u306a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u2026\n\u305d\u308c\u304f\u3089\u3044\u306e\u624b\u9593\u306f\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u3092\u4e00\u304b\u3089\u7d44\u307f\u4e0a\u3052\u308b\u3053\u3068\u306b\u6bd4\u3079\u308c\u3070\u7c21\u5358\u306a\u3082\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff0e\n\nblue giga\u306eBLE112\u3092python\u3067\u5236\u5fa1\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304cGitHub\u3067[bglib](https://github.com/jrowberg/bglib)\u3068\u3057\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\u3088\u304f\u3067\u304d\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u3066BLE(Bluetooth Low Energy)\u3092\u6271\u3046\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u578b\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\uff0e\n\n## OverView\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u306b\u3082\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u304c\uff0c\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u57fa\u672c\u7684\u306a\u4ed5\u7d44\u307f\u306f[\u3053\u3053](http://www.emptypage.jp/notes/pyevent.html)\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\uff0e(\u5e78\u904b\u306b\u3082\u65e5\u672c\u8a9e\u306e\u30ea\u30bd\u30fc\u30b9\u306b\u306a\u308a\u307e\u3059\uff0e)\n\u3053\u306e\u60c5\u5831\u6e90\u3092\u307f\u308b\u3053\u3068\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u7406\u89e3\u304c\u6df1\u307e\u308b\u306f\u305a\u3067\u3059\uff0e\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u3092\u3055\u3089\u3063\u3068\u773a\u3081\u3066\u304f\u3060\u3055\u3044\uff0e\n\u6700\u521d\u306e\u307b\u3046\u306bBGAPIEvent\u306a\u308b\u30af\u30e9\u30b9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3066\u2026\u305d\u306e\u3042\u3068\u306b\u306f\u30d0\u30a4\u30ca\u30ea\u3092\u304b\u3048\u3059\u95a2\u6570\u304c\u3042\u3063\u3066\u2026BGAPIEvent\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u4f5c\u3089\u308c\u3066\u3066\u2026\u6700\u5f8c\u306f\u5927\u91cf\u306eif\u6587\u2026\n\n\u4e00\u898b\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3057\uff0c\u76ee\u304c\u3061\u304b\u3061\u304b\u3059\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\n\u3042\u3068\u3067\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3059\u306e\u3067\u306f\u3058\u3081\u306b\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3069\u3046\u4f7f\u3046\u306e\u304b\uff0c\u3056\u3063\u304f\u308a\u8aac\u660e\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n1. \u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3042\u308b\"\u9069\u5f53\u306a\"BGAPIEvent\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306b\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u3068\u304d\u306b\u5b9f\u884c\u3057\u305f\u3044\u95a2\u6570\u3092\"\u52a0\u3048\u308b\"\uff0e\n2. \u9069\u5f53\u306a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3092\u9078\u3076\u3053\u3068\u3067\u30a4\u30d9\u30f3\u30c8\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n3. \u30a4\u30d9\u30f3\u30c8(BLE\u304c\u4fe1\u53f7\u3092\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u30fb\u767a\u4fe1\u3059\u308b)\u304c\u767a\u751f\u3059\u308b\u3068\u52a0\u3048\u305f\u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u308b\uff0e\n\n\u305f\u304f\u3055\u3093\u3042\u308bBGAPIEvent\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u304c\u30a4\u30d9\u30f3\u30c8\u306e\u30c8\u30ea\u30ac\u30fc\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\u3069\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3092\u3048\u3089\u3076\u3053\u3068\u306f\u30a4\u30d9\u30f3\u30c8\u3092\u9078\u3076\u3053\u3068\u3068\u540c\u3058\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n## \u4f8b\nbglib\u306eExample\u306b\u793a\u3055\u308c\u3066\u3044\u308b\u30bd\u30fc\u30b9\u3092\u5c11\u3057\u66f8\u304d\u5909\u3048\u3066BLE\u3067\u9001\u4fe1\u3068\u53d7\u4fe1\u3092\u540c\u6642\u306b\u884c\u306a\u3044\uff0cCtrl-C\u3067\u9001\u53d7\u4fe1\u3092\u505c\u6b62\u3059\u308b\uff0c\u3068\u3044\u3046\u30b5\u30f3\u30d7\u30eb\u3092\u793a\u3057\u307e\u3059\uff0e(\u96d1\u306a\u30bd\u30fc\u30b9\u3067\u6065\u304b\u3057\u3044\u306e\u3067\u3059\u304c\u2026)\n\n```Python\nimport bglib\nimport serial\nimport sys\nimport time\n\n\ndef timeout_handler(sender, args):\n    print \"BGAPI parser timed out.\",\n    print \" Make sure the BLE device is in a known/idle state.\"\n\n\ndef handle_foo(sender, earg):\n    print \"foo!\"\n\n\ndef handle_rssi(sender, earg):\n    print earg['rssi']\n    print earg['sender']\n    print earg['data']\n\n\ndef main():\n    ble = bglib.BGLib()\n    ble.packet_mode = False\n    ble.debug = True\n\n    # add handler for BGAPI timeout condition (hopefully won't happen)\n    ble.on_timeout += timeout_handler\n\n    # Add Function\n    ble.ble_evt_gap_scan_response += handle_foo\n    ble.ble_evt_gap_scan_response += handle_rssi\n\n    if len(sys.argv) != 2:\n        print \"Usage: python %s port\" % sys.argv[0]\n        quit()\n\n    port = sys.argv[1]\n    baudrate = 115200\n\n    try:\n        ser = serial.Serial(\n            port=port, baudrate=baudrate, timeout=1, writeTimeout=1)\n    except serial.SerialException as e:\n        print \"\\n\" + (\"=\" * 20)\n        print \"Port error (name='%s', baud='%ld'): %s\" % (port, baudrate, e)\n        print \"=\" * 20\n        quit()\n\n    # flush buffers\n    ser.flushInput()\n    ser.flushOutput()\n\n    # disconnect if we are connected already\n    ble.send_command(ser, ble.ble_cmd_connection_disconnect(0))\n    ble.check_activity(ser, 1)\n\n    # stop advertising if we are advertising already\n    ble.send_command(ser, ble.ble_cmd_gap_set_mode(0, 0))\n    ble.check_activity(ser, 1)\n\n    # stop scanning if we are scanning already\n    ble.send_command(ser, ble.ble_cmd_gap_end_procedure())\n    ble.check_activity(ser, 1)\n\n    # set advertising parameters\n    ble.send_command(\n        ser, ble.ble_cmd_gap_set_adv_parameters(0x640, 0x640, 0x07))\n    ble.check_activity(ser, 1)\n\n    # set TX power level\n    ble.send_command(ser, ble.ble_cmd_hardware_set_txpower(15))\n                     # range 0 to 15 (real TX power from -23 to +3dBm)\n    ble.check_activity(ser, 1)\n\n    # set advertising data\n    adv_data = [0x02, 0x01, 0x06, 0x02, 0x0a, 0x03]\n    ble.send_command(ser, ble.ble_cmd_gap_set_adv_data(0, adv_data))\n    ble.check_activity(ser, 1)\n\n    # start advertising\n    ble.send_command(ser, ble.ble_cmd_gap_set_mode(4, 0))\n    ble.check_activity(ser, 1)\n\n    # set scan parameters\n    ble.send_command(ser, ble.ble_cmd_gap_set_scan_parameters(0xC8, 0xC8, 1))\n    ble.check_activity(ser, 1)\n\n    # start scanning now\n    ble.send_command(ser, ble.ble_cmd_gap_discover(1))\n    ble.check_activity(ser, 1)\n\n    print(\"started.\")\n\n    try:\n        while (1):\n            # check for all incoming data (no timeout, non-blocking)\n            ble.check_activity(ser)\n\n            # don't burden the CPU\n            time.sleep(0.01)\n    except KeyboardInterrupt as e:\n        # disconnect if we are connected already\n        ble.send_command(ser, ble.ble_cmd_connection_disconnect(0))\n        ble.check_activity(ser, 1)\n\n        # stop advertising if we are advertising already\n        ble.send_command(ser, ble.ble_cmd_gap_set_mode(0, 0))\n        ble.check_activity(ser, 1)\n\n        # stop scanning if we are scanning already\n        ble.send_command(ser, ble.ble_cmd_gap_end_procedure())\n        ble.check_activity(ser, 1)\n\n        print(\"stopped\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n\u6ce8\u76ee\u3057\u3066\u307b\u3057\u3044\u306e\u306f\n\n```Python\n\u2026\n\t# Add Function\n    ble.ble_evt_gap_scan_response += handle_foo\n    ble.ble_evt_gap_scan_response += handle_rssi\n\u2026\n```\n\n\u3068\u3044\u3046\u90e8\u5206\u3067\u3059\uff0e\n\u3053\u3053\u3067\u5b9a\u7fa9\u3057\u305fhandle_foo\uff0chandle_rssi\u3092\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u3059\u308b\u3088\u3046\u306b\u767b\u9332\u3057\u307e\u3059\uff0e\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570ble_evt_gap_scan_response\u306fBLE\u304cscan\u3064\u307e\u308a\u53d7\u4fe1\u3057\u305f\u3068\u304d\uff0c\u3068\u3044\u3046\u30a4\u30d9\u30f3\u30c8\u3092\u8868\u308f\u3057\u3066\u3044\u307e\u3059\uff0e\n\u3053\u306e\u30a4\u30d9\u30f3\u30c8\u306b\u3088\u308b\u632f\u308a\u5206\u3051\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u306e\u4e0b\u306e\u307b\u3046\u306b\u3042\u308b\u5927\u304d\u306aif\u6587\u3067\u884c\u306a\u308f\u308c\u3066\u3044\u307e\u3059\uff0e\nble_evt_gap_scan_response\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5185\u3092\u691c\u7d22\u3059\u308b\u3068\n\n```Python\nif packet_command == 0:  # ble_evt_gap_scan_response\n                        rssi, packet_type, sender, address_type, bond, data_len = struct.unpack(\n                            '<bB6sBBB', self.bgapi_rx_payload[:11])\n                        sender = [ord(b) for b in sender]\n                        data_data = [ord(b)\n                                     for b in self.bgapi_rx_payload[11:]]\n                        self.ble_evt_gap_scan_response(\n                            {'rssi': rssi, 'packet_type': packet_type, 'sender': sender, 'address_type': address_type, 'bond': bond, 'data': data_data})\n```\n\n\u3068\u3044\u3046\u90e8\u5206\u304c\u307f\u3064\u304b\u308b\u3068\u304a\u3082\u3044\u307e\u3059\uff0e\n\u3053\u306e\u90e8\u5206\u3067\u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u3092\u3057\u3066\u3044\u307e\u3059\uff0e\n\u6700\u5f8c\u306eself.ble_evt_gap_scan_response(\u2026)\u3067\u767b\u9332\u3057\u305f\u95a2\u6570\u3092\u547c\u3073\u3060\u3057\uff0c\u5f15\u6570\u306bdictionary\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\uff0e\n\nble_evt_gap_scan_response\u306a\u3069\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u304c\u3069\u3044\u3063\u305f\u30a4\u30d9\u30f3\u30c8\u3092\u8868\u308f\u3057\u3066\u3044\u308b\u306e\u304b\u306f[\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://www.bluegiga.com/en-US/products/bluetooth-4.0-modules/ble112-bluetooth--smart-module/documentation/)\u3092\u898b\u308b\u3053\u3068\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff0e(\u30ea\u30f3\u30af\u5148\u306b\u3042\u308bAPI\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u63a2\u3057\u51fa\u3057\u3066\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u7b49\u3092\u767b\u9332\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e)\n\ndictionary\u3067\u308f\u305f\u3055\u308c\u305f\u5f15\u6570\u306b\u306f\u6709\u76ca\u306a\u60c5\u5831\u304c\u767b\u9332\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\u305f\u3068\u3048\u3070rssi\u306f\u53d7\u4fe1\u3057\u305f\u4fe1\u53f7\u306e\u5f37\u5ea6\u304cvalue\u306b\u5165\u3063\u3066\u3044\u307e\u3059\uff0e\n\u3053\u308c\u3089\u306edictionary\u306e\u5024\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\n\n```Python\ndef handle_rssi(sender, earg):\n    print earg['rssi']\n    print earg['sender']\n    print earg['data']\n\n```\n\n\u3068\u3044\u3063\u305f\u3088\u3046\u306b\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u3067\u547c\u3073\u51fa\u3055\u308c\u308b\u95a2\u6570\u5185\u3067\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n## \u307e\u3068\u3081\nbglib\u306e\u4f7f\u3044\u65b9\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\uff0e\n\u5bb9\u6613\u306b\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u578b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d44\u3081\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u3066\u3044\u305f\u3060\u3051\u305f\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\n\u30a4\u30d9\u30f3\u30c8\u3092\u8abf\u3079\u308b\u305f\u3081\u306b\u306f\u3061\u3087\u3063\u3068\u5206\u539a\u3044\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u306a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u2026\n\u305d\u308c\u304f\u3089\u3044\u306e\u624b\u9593\u306f\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u3092\u4e00\u304b\u3089\u7d44\u307f\u4e0a\u3052\u308b\u3053\u3068\u306b\u6bd4\u3079\u308c\u3070\u7c21\u5358\u306a\u3082\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff0e"}