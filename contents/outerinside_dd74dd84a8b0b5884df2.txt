{"context": " More than 1 year has passed since last update.cf. \u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\nn+1 \u5339\u76ee\u306e\u30c9\u30b8\u30e7\u30a6\u306b\u6311\u6226\u3002\n\nmynumber.ml\nlet digits_pattern = Str.regexp \"^[0-9]+$\"\n\nlet checkdigit n =\n  let q i =\n    if i < 6 then i + 2\n    else i - 4 in\n  let rec accumulate n i acc =\n    if n = 0 then 11 - (acc mod 11)\n    else accumulate (n / 10) (i + 1) (acc + (n mod 10) * (q i)) in\n  if String.length n <> 11\n     || not (Str.string_match digits_pattern n 0) then None\n  else Some (accumulate (int_of_string n) 0 0)\n\nlet valid n =\n  String.length n = 12\n  && Str.string_match digits_pattern n 0\n  && let c = (int_of_char n.[11]) - (int_of_char '0') in\n     let m = String.init 11 (fun i -> n.[i]) in\n     match checkdigit m with\n     | None -> false\n     | Some d -> c = d\n\nlet () =\n  List.iter\n    (fun n -> Printf.printf \"%s: %b\\n\" n @@ valid n)\n    [ \"123456789010\";\n      \"123456789011\";\n      \"123456789012\";\n      \"123456789013\";\n      \"123456789014\";\n      \"123456789015\";\n      \"123456789016\";\n      \"123456789017\";\n      \"123456789018\";\n      \"123456789019\";\n      \"023456789013\" ]\n\n\ncheckdigit \u306f\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u5148\u982d11\u6841\u3092 string \u3068\u3057\u3066\u53d6\u3063\u3066\u30c1\u30a7\u30c3\u30af\u30c7\u30a3\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3002\u5165\u529b\u6587\u5b57\u5217\u304c\u6570\u5b57\u3058\u3083\u306a\u304b\u3063\u305f\u308a\u6841\u304c\u8db3\u308a\u306a\u3044\u5834\u5408\u5931\u6557\u3059\u308b\u305f\u3081\u623b\u308a\u5024\u306e\u578b\u306f int option\u3002\nvalid \u306f\u30de\u30a4\u30ca\u30f3\u30d0\u30fc12\u6841\u3092 string \u3067\u53d7\u3051\u3066 checkdigit \u3067\u5f97\u305f\u30c1\u30a7\u30c3\u30af\u30c7\u30a3\u30b8\u30c3\u30c8\u304c\u4e0e\u3048\u3089\u308c\u305f\u3082\u306e\u3068\u540c\u3058\u304b\u7a81\u304d\u5408\u308f\u305b\u308b\u3060\u3051\u3002\n\u5165\u529b\u30c1\u30a7\u30c3\u30af\u306f\u6a2a\u7740\u3057\u3066\u6b63\u898f\u8868\u73fe\u3002Str \u304c\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u6b63\u898f\u8868\u73fe\u306f PCRE \u3058\u3083\u306a\u3044\u306e\u3067 \\d \u3092 [0-9] \u3068\u3057\u3066\u3044\u307e\u3059\u3002\\A \u3084 \\z \u3082\u306a\u3044\u306e\u3067\u5165\u529b\u304c\u6539\u884c\u3092\u542b\u3080\u5834\u5408\u306f\u77e5\u3089\u306a\u3044\u3002\n\u6574\u6570\u578b\u304c11\u6841\u4ee5\u4e0a\u5fc5\u8981\u306a\u306e\u3067 32bit \u74b0\u5883\u3060\u3068\u52d5\u304b\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c:\n$ ocamlfind ocamlc -linkpkg -package str mynumber.ml\n$ ./a.out \n123456789010: false\n123456789011: false\n123456789012: false\n123456789013: false\n123456789014: false\n123456789015: false\n123456789016: false\n123456789017: false\n123456789018: true\n123456789019: false\n023456789013: true\n\n\u5408\u3063\u3066\u307e\u3059\u306d\u3002\ncf. [\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b](http://qiita.com/qube81/items/fa6ef94d3c8615b0ce64)\nn+1 \u5339\u76ee\u306e\u30c9\u30b8\u30e7\u30a6\u306b\u6311\u6226\u3002\n\n```ocaml:mynumber.ml\nlet digits_pattern = Str.regexp \"^[0-9]+$\"\n\nlet checkdigit n =\n  let q i =\n    if i < 6 then i + 2\n    else i - 4 in\n  let rec accumulate n i acc =\n    if n = 0 then 11 - (acc mod 11)\n    else accumulate (n / 10) (i + 1) (acc + (n mod 10) * (q i)) in\n  if String.length n <> 11\n     || not (Str.string_match digits_pattern n 0) then None\n  else Some (accumulate (int_of_string n) 0 0)\n\nlet valid n =\n  String.length n = 12\n  && Str.string_match digits_pattern n 0\n  && let c = (int_of_char n.[11]) - (int_of_char '0') in\n     let m = String.init 11 (fun i -> n.[i]) in\n     match checkdigit m with\n     | None -> false\n     | Some d -> c = d\n\nlet () =\n  List.iter\n    (fun n -> Printf.printf \"%s: %b\\n\" n @@ valid n)\n    [ \"123456789010\";\n      \"123456789011\";\n      \"123456789012\";\n      \"123456789013\";\n      \"123456789014\";\n      \"123456789015\";\n      \"123456789016\";\n      \"123456789017\";\n      \"123456789018\";\n      \"123456789019\";\n      \"023456789013\" ]\n```\n\n`checkdigit` \u306f\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u5148\u982d11\u6841\u3092 `string` \u3068\u3057\u3066\u53d6\u3063\u3066\u30c1\u30a7\u30c3\u30af\u30c7\u30a3\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3002\u5165\u529b\u6587\u5b57\u5217\u304c\u6570\u5b57\u3058\u3083\u306a\u304b\u3063\u305f\u308a\u6841\u304c\u8db3\u308a\u306a\u3044\u5834\u5408\u5931\u6557\u3059\u308b\u305f\u3081\u623b\u308a\u5024\u306e\u578b\u306f `int option`\u3002\n`valid` \u306f\u30de\u30a4\u30ca\u30f3\u30d0\u30fc12\u6841\u3092 `string` \u3067\u53d7\u3051\u3066 `checkdigit` \u3067\u5f97\u305f\u30c1\u30a7\u30c3\u30af\u30c7\u30a3\u30b8\u30c3\u30c8\u304c\u4e0e\u3048\u3089\u308c\u305f\u3082\u306e\u3068\u540c\u3058\u304b\u7a81\u304d\u5408\u308f\u305b\u308b\u3060\u3051\u3002\n\n\u5165\u529b\u30c1\u30a7\u30c3\u30af\u306f\u6a2a\u7740\u3057\u3066\u6b63\u898f\u8868\u73fe\u3002`Str` \u304c\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u6b63\u898f\u8868\u73fe\u306f PCRE \u3058\u3083\u306a\u3044\u306e\u3067 `\\d` \u3092 `[0-9]` \u3068\u3057\u3066\u3044\u307e\u3059\u3002`\\A` \u3084 `\\z` \u3082\u306a\u3044\u306e\u3067\u5165\u529b\u304c\u6539\u884c\u3092\u542b\u3080\u5834\u5408\u306f\u77e5\u3089\u306a\u3044\u3002\n\n\u6574\u6570\u578b\u304c11\u6841\u4ee5\u4e0a\u5fc5\u8981\u306a\u306e\u3067 32bit \u74b0\u5883\u3060\u3068\u52d5\u304b\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c:\n\n```\n$ ocamlfind ocamlc -linkpkg -package str mynumber.ml\n$ ./a.out \n123456789010: false\n123456789011: false\n123456789012: false\n123456789013: false\n123456789014: false\n123456789015: false\n123456789016: false\n123456789017: false\n123456789018: true\n123456789019: false\n023456789013: true\n```\n\n\u5408\u3063\u3066\u307e\u3059\u306d\u3002\n", "tags": ["OCaml"]}