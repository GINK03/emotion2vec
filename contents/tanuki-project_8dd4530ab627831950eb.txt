{"tags": ["Objective-C", "MacOSX", "RSS", "XML", "Xcode"], "context": " More than 1 year has passed since last update.C\u3067\u66f8\u3044\u305f\u7c21\u6613RSS\u30ea\u30fc\u30c0\u30fc\u3068\u540c\u3058\u6a5f\u80fd\u306e\u3082\u306e\u3092MacOS\u7528\u306bObjective-C\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u30a2\u30c3\u30d7\u30eb\u306eRSS\u30d5\u30a3\u30fc\u30c9\u3092\u53d6\u5f97\u3057\u3066\u3001\u30b5\u30de\u30ea\u3092\u8868\u793a\u3059\u308b Command Line Tool \u3067\u3059\u3002\n#import <Foundation/Foundation.h>\n\n#define PATH @\"http://www.apple.com/jp/main/rss/hotnews/hotnews.rss\"\nint read_rss(NSXMLDocument*);\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        // Download RSS feed.\n        NSURL           *url = [NSURL URLWithString:PATH];\n        NSURLRequest    *urlRequest = [NSURLRequest requestWithURL:url\n                                                       cachePolicy:NSURLRequestReturnCacheDataElseLoad\n                                                   timeoutInterval:30];\n\n        NSData          *urlData;\n        NSURLResponse   *response;\n        NSError         *error;\n        urlData = [NSURLConnection sendSynchronousRequest:urlRequest\n                                        returningResponse:&response\n                                                    error:&error];\n        if (!urlData) {\n            printf(\"failed to url request.\");\n        }\n\n        // Create XML Document fron urlData\n        NSXMLDocument   *doc;\n        doc = [[NSXMLDocument alloc] initWithData:urlData\n                                          options:0\n                                            error:&error];\n        if (!doc) {\n            printf(\"failed to create xml doc.\");\n            return 1;\n        }\n\n        // read RSS Feed.\n        read_rss(doc);\n        return 0;\n    }\n}\n\nint read_rss(NSXMLDocument  *doc) {\n    NSError         *error;\n    // NSString* xmlString = [[NSString alloc] initWithData:urlData encoding:NSUTF8StringEncoding];\n    // NSLog(@\"doc\\n%@\\n\", xmlString);\n\n    // Get and print Title of RSS Feed.\n    NSArray *channelNodes = [doc nodesForXPath:@\"//channel\" error:&error];\n    if (!channelNodes) {\n        return -1;\n    }\n    for (NSXMLElement* element in channelNodes) {\n        if ([element kind] != NSXMLElementKind) {\n            continue;\n        }\n        NSArray*    children = [element children];\n        NSString*   title;\n        for (NSXMLNode* node in children) {\n            if ([[node name] isEqualToString:@\"title\"]) {\n                title = [node stringValue];\n                printf(\"\\nTitle: %s\\n\\n\", [title cStringUsingEncoding:NSUTF8StringEncoding]);\n            }\n        }\n    }\n\n    // Get Node list of RSS items.\n    NSArray *itemNodes = [doc nodesForXPath:@\"//item\" error:&error];\n    if (!itemNodes) {\n        return -1;\n    }\n    for (NSXMLElement* element in itemNodes) {\n        if ([element kind] != NSXMLElementKind) {\n            continue;\n        }\n        NSArray*    children = [element children];\n        NSString*   title;\n        NSString*   link;\n        for (NSXMLNode* node in children) {\n            if ([[node name] isEqualToString:@\"title\"]) {\n                title = [node stringValue];\n            } else if ([[node name] isEqualToString:@\"link\"]) {\n                link = [node stringValue];\n            }\n        }\n        printf(\" title: %s\\n\", [title cStringUsingEncoding:NSUTF8StringEncoding]);\n        printf(\" link:  %s\\n\\n\", [link cStringUsingEncoding:NSUTF8StringEncoding]);\n    }\n    return 0;\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u5b9f\u884c\u3059\u308b\u3068\u300c\u30a2\u30c3\u30d7\u30eb - \u30db\u30c3\u30c8\u30cb\u30e5\u30fc\u30b9\u300d\u306e\u30b5\u30de\u30ea\u304c\u8868\u793a\u3055\u308c\u307e\u3057\u305f\u3002\nTitle: \u30a2\u30c3\u30d7\u30eb - \u30db\u30c3\u30c8\u30cb\u30e5\u30fc\u30b9\n\n title: Apple\u3001\u611f\u5727\u30bf\u30c3\u30c1\u30c8\u30e9\u30c3\u30af\u30d1\u30c3\u30c9\u3092\u642d\u8f09\u3057\u305f15\u30a4\u30f3\u30c1\u306eMacBook Pro\u3001238,800\u5186\u306e\u65b0\u3057\u3044iMac Retina 5K\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30e2\u30c7\u30eb\u3092\u767a\u58f2\n link:  http://www.apple.com/jp/pr/library/2015/05/19Apple-Introduces-15-inch-MacBook-Pro-with-Force-Touch-Trackpad-New-1-999-iMac-with-Retina-5K-Display.html\n\n title: \u65e5\u672c\u90f5\u653f\u30b0\u30eb\u30fc\u30d7\u3001IBM\u3001Apple\u3001\u65e5\u672c\u306e\u9ad8\u9f62\u8005\u304c\u30b5\u30fc\u30d3\u30b9\u3092\u901a\u3058\u3066\u5bb6\u65cf\u30fb\u5730\u57df\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u30fc\u3068\u3064\u306a\u304c\u308b\u305f\u3081\u306b\u3001iPad\u3068\u5c02\u7528\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u63d0\u4f9b\n link:  http://www.apple.com/jp/pr/library/2015/04/30Japan-Post-Group-IBM-and-Apple-Deliver-iPads-and-Custom-Apps-to-Connect-Elderly-in-Japan-to-Services-Family-and-Community.html\n\n title: Apple\u3001\u7b2c2\u56db\u534a\u671f\u306e\u696d\u7e3e\u3092\u767a\u8868\n  link:  http://www.apple.com/jp/pr/library/2015/04/27Apple-Reports-Record-Second-Quarter-Results.html      \n\n    \u30fb\n    \u30fb\n    \u30fb\n\nC\u3067\u66f8\u3044\u305f[\u7c21\u6613RSS\u30ea\u30fc\u30c0\u30fc](http://qiita.com/tanuki-project/items/ea83519a08ab64803c2d)\u3068\u540c\u3058\u6a5f\u80fd\u306e\u3082\u306e\u3092MacOS\u7528\u306bObjective-C\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u30a2\u30c3\u30d7\u30eb\u306eRSS\u30d5\u30a3\u30fc\u30c9\u3092\u53d6\u5f97\u3057\u3066\u3001\u30b5\u30de\u30ea\u3092\u8868\u793a\u3059\u308b Command Line Tool \u3067\u3059\u3002\n\n    #import <Foundation/Foundation.h>\n\n    #define PATH @\"http://www.apple.com/jp/main/rss/hotnews/hotnews.rss\"\n    int read_rss(NSXMLDocument*);\n\n    int main(int argc, const char * argv[]) {\n        @autoreleasepool {\n            // Download RSS feed.\n            NSURL           *url = [NSURL URLWithString:PATH];\n            NSURLRequest    *urlRequest = [NSURLRequest requestWithURL:url\n                                                           cachePolicy:NSURLRequestReturnCacheDataElseLoad\n                                                       timeoutInterval:30];\n            \n            NSData\t\t\t*urlData;\n            NSURLResponse\t*response;\n            NSError\t\t\t*error;\n            urlData = [NSURLConnection sendSynchronousRequest:urlRequest\n                                            returningResponse:&response\n                                                        error:&error];\n            if (!urlData) {\n                printf(\"failed to url request.\");\n            }\n            \n            // Create XML Document fron urlData\n            NSXMLDocument\t*doc;\n            doc = [[NSXMLDocument alloc] initWithData:urlData\n                                              options:0\n                                                error:&error];\n            if (!doc) {\n                printf(\"failed to create xml doc.\");\n                return 1;\n            }\n    \n            // read RSS Feed.\n            read_rss(doc);\n            return 0;\n        }\n    }\n    \n    int read_rss(NSXMLDocument\t*doc) {\n        NSError\t\t\t*error;\n        // NSString* xmlString = [[NSString alloc] initWithData:urlData encoding:NSUTF8StringEncoding];\n        // NSLog(@\"doc\\n%@\\n\", xmlString);\n        \n        // Get and print Title of RSS Feed.\n        NSArray *channelNodes = [doc nodesForXPath:@\"//channel\" error:&error];\n        if (!channelNodes) {\n            return -1;\n        }\n        for (NSXMLElement* element in channelNodes) {\n            if ([element kind] != NSXMLElementKind) {\n                continue;\n            }\n            NSArray*    children = [element children];\n            NSString*   title;\n            for (NSXMLNode* node in children) {\n                if ([[node name] isEqualToString:@\"title\"]) {\n                    title = [node stringValue];\n                    printf(\"\\nTitle: %s\\n\\n\", [title cStringUsingEncoding:NSUTF8StringEncoding]);\n                }\n            }\n        }\n        \n        // Get Node list of RSS items.\n        NSArray *itemNodes = [doc nodesForXPath:@\"//item\" error:&error];\n        if (!itemNodes) {\n            return -1;\n        }\n        for (NSXMLElement* element in itemNodes) {\n            if ([element kind] != NSXMLElementKind) {\n                continue;\n            }\n            NSArray*    children = [element children];\n            NSString*   title;\n            NSString*   link;\n            for (NSXMLNode* node in children) {\n                if ([[node name] isEqualToString:@\"title\"]) {\n                    title = [node stringValue];\n                } else if ([[node name] isEqualToString:@\"link\"]) {\n                    link = [node stringValue];\n                }\n            }\n            printf(\" title: %s\\n\", [title cStringUsingEncoding:NSUTF8StringEncoding]);\n            printf(\" link:  %s\\n\\n\", [link cStringUsingEncoding:NSUTF8StringEncoding]);\n        }\n        return 0;\n    }\n\n\n# \u5b9f\u884c\u7d50\u679c\n\n\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u5b9f\u884c\u3059\u308b\u3068\u300c\u30a2\u30c3\u30d7\u30eb - \u30db\u30c3\u30c8\u30cb\u30e5\u30fc\u30b9\u300d\u306e\u30b5\u30de\u30ea\u304c\u8868\u793a\u3055\u308c\u307e\u3057\u305f\u3002\n\t\n    Title: \u30a2\u30c3\u30d7\u30eb - \u30db\u30c3\u30c8\u30cb\u30e5\u30fc\u30b9\n\t\n     title: Apple\u3001\u611f\u5727\u30bf\u30c3\u30c1\u30c8\u30e9\u30c3\u30af\u30d1\u30c3\u30c9\u3092\u642d\u8f09\u3057\u305f15\u30a4\u30f3\u30c1\u306eMacBook Pro\u3001238,800\u5186\u306e\u65b0\u3057\u3044iMac Retina 5K\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30e2\u30c7\u30eb\u3092\u767a\u58f2\n     link:  http://www.apple.com/jp/pr/library/2015/05/19Apple-Introduces-15-inch-MacBook-Pro-with-Force-Touch-Trackpad-New-1-999-iMac-with-Retina-5K-Display.html\n\t\n     title: \u65e5\u672c\u90f5\u653f\u30b0\u30eb\u30fc\u30d7\u3001IBM\u3001Apple\u3001\u65e5\u672c\u306e\u9ad8\u9f62\u8005\u304c\u30b5\u30fc\u30d3\u30b9\u3092\u901a\u3058\u3066\u5bb6\u65cf\u30fb\u5730\u57df\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u30fc\u3068\u3064\u306a\u304c\u308b\u305f\u3081\u306b\u3001iPad\u3068\u5c02\u7528\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u63d0\u4f9b\n     link:  http://www.apple.com/jp/pr/library/2015/04/30Japan-Post-Group-IBM-and-Apple-Deliver-iPads-and-Custom-Apps-to-Connect-Elderly-in-Japan-to-Services-Family-and-Community.html\n\t\n     title: Apple\u3001\u7b2c2\u56db\u534a\u671f\u306e\u696d\u7e3e\u3092\u767a\u8868\n      link:  http://www.apple.com/jp/pr/library/2015/04/27Apple-Reports-Record-Second-Quarter-Results.html\t    \n    \n        \u30fb\n        \u30fb\n        \u30fb\n"}