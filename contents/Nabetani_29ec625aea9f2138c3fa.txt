{"tags": ["\u3069\u3046\u66f8\u304f", "Ruby", "yhpg"], "context": "\u554f\u984c http://mtsmfm.github.io/2016/06/04/doukaku-e04.html\n\u5b9f\u88c5\u30ea\u30f3\u30af\u96c6 http://qiita.com/mtsmfm/items/6d9112fcc568908caaba\n\u3067\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u30b3\u30fc\u30c9\u3002\ndef amida( paths, pos )\n  r=[]\n  paths.each.with_index(0) do |path, ix|\n    cands =  [path, (path+1)%8 ]\n    if cands.include? pos\n      r.push ix\n      pos,=cands-[pos]\n    end\n  end\n  r\nend\n\ndef can_go( stone_path, paths, x )\n  walk = amida( paths.reverse, x ).map{ |x| paths.size-x-1 }\n  ( walk & stone_path ).empty?\nend\n\ndef solve_impl(paths, stone)\n  stone_path=amida( paths, stone )\n  if stone_path.empty?\n    [*0..7]-[stone]\n  else\n    (0..7).select{ |x|\n      can_go( stone_path, paths, x )\n    }\n  end\nend\n\ndef solve( src )\n  path, stone = src.split(\":\")\n  solve_impl( path.chars.map{|x| x.to_i-1}, stone.ord - ?A.ord ).map{ |x| (x+?A.ord).chr }.join\nend\n\n$stdout.sync=true\n\nDATA.map{ |line|\n  num, src, exp = line.scan(/(\\d+).*\\\"([^\\\"]*)\\\".*\\\"([^\\\"]*)\\\"/).to_a.flatten\n  act = solve(src)\n  okay = act==exp\n  puts( \"#{num} #{okay ? \"ok\" : \"**NG**\"} #{src}->#{act} / e:#{exp}\" )\n  okay\n}.all?.tap{ |x| puts( x ? \"everything is okay\" : \"something wrong\" ) }\n\n__END__\n/*0*/ test(\"2512:C\", \"DEFGH\"\n/*14*/ test(\"3456781:C\", \"\"\n/*30*/ test(\"381352782758218463842725673473:B\", \"A\"\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\u5f53\u65e5\u306e\u8aac\u660e\u3067\u4e00\u756a\u53cd\u97ff\u304c\u3042\u3063\u305f\u306e\u306f\npos,=cands-[pos]\n\u306e\u90e8\u5206\u3002\n\u3053\u308c\u306f\u3001\npos,_ = cands-[pos]\n\u306e\u300c_\u300d\u3092\u7701\u7565\u3057\u305f\u3082\u306e\u306a\u306e\u3067\u3001\npos = (cands-[pos])[0]\n\u3068\u540c\u7b49\u3002\n\n\u6a2a\u65b9\u5411\u306e\u52d5\u304d\u306e\u307f\u3092\u8a18\u9332\u3059\u308c\u3070\u3060\u3044\u305f\u3044OK\n\u3057\u304b\u3057\u3001\u77f3\u304c\u6a2a\u65b9\u5411\u306b\u5168\u304f\u52d5\u304b\u306a\u3044\u5834\u5408\u306f\u7279\u5225\u6271\u3044\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n\u77f3\u306e\u52d5\u304d\u3068\u4eba\u9593\u306e\u52d5\u304d\u304c\u307b\u307c\u540c\u3058\u306a\u306e\u3067\u3001\u3069\u3061\u3089\u3082\u300camida\u300d\u3067\u5b9f\u88c5\n\n\u3068\u3044\u3046\u611f\u3058\u306e\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\u5927\u5909\u3088\u3044\u554f\u984c\u3060\u3063\u305f\u3068\u601d\u3046\u3002\n\u79c1\u306f\u96e3\u3057\u3081\u306b\u611f\u3058\u305f\u3051\u3069\u3001\u4f1a\u5834\u3067\u306f\u305d\u3046\u3067\u3082\u306a\u3044\u611f\u3058\u3060\u3063\u305f\u3002\n\u554f\u984c http://mtsmfm.github.io/2016/06/04/doukaku-e04.html\n\u5b9f\u88c5\u30ea\u30f3\u30af\u96c6 http://qiita.com/mtsmfm/items/6d9112fcc568908caaba\n\u3067\u3059\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u30b3\u30fc\u30c9\u3002\n\n```ruby\ndef amida( paths, pos )\n  r=[]\n  paths.each.with_index(0) do |path, ix|\n    cands =  [path, (path+1)%8 ]\n    if cands.include? pos\n      r.push ix\n      pos,=cands-[pos]\n    end\n  end\n  r\nend\n\ndef can_go( stone_path, paths, x )\n  walk = amida( paths.reverse, x ).map{ |x| paths.size-x-1 }\n  ( walk & stone_path ).empty?\nend\n\ndef solve_impl(paths, stone)\n  stone_path=amida( paths, stone )\n  if stone_path.empty?\n    [*0..7]-[stone]\n  else\n    (0..7).select{ |x|\n      can_go( stone_path, paths, x )\n    }\n  end\nend\n\ndef solve( src )\n  path, stone = src.split(\":\")\n  solve_impl( path.chars.map{|x| x.to_i-1}, stone.ord - ?A.ord ).map{ |x| (x+?A.ord).chr }.join\nend\n\n$stdout.sync=true\n\nDATA.map{ |line|\n  num, src, exp = line.scan(/(\\d+).*\\\"([^\\\"]*)\\\".*\\\"([^\\\"]*)\\\"/).to_a.flatten\n  act = solve(src)\n  okay = act==exp\n  puts( \"#{num} #{okay ? \"ok\" : \"**NG**\"} #{src}->#{act} / e:#{exp}\" )\n  okay\n}.all?.tap{ |x| puts( x ? \"everything is okay\" : \"something wrong\" ) }\n\n__END__\n/*0*/ test(\"2512:C\", \"DEFGH\"\n/*14*/ test(\"3456781:C\", \"\"\n/*30*/ test(\"381352782758218463842725673473:B\", \"A\"\n```\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\n\u5f53\u65e5\u306e\u8aac\u660e\u3067\u4e00\u756a\u53cd\u97ff\u304c\u3042\u3063\u305f\u306e\u306f\n`pos,=cands-[pos]`\n\u306e\u90e8\u5206\u3002\n\u3053\u308c\u306f\u3001\n`pos,_ = cands-[pos]`\n\u306e\u300c`_`\u300d\u3092\u7701\u7565\u3057\u305f\u3082\u306e\u306a\u306e\u3067\u3001\n`pos = (cands-[pos])[0]`\n\u3068\u540c\u7b49\u3002\n\n* \u6a2a\u65b9\u5411\u306e\u52d5\u304d\u306e\u307f\u3092\u8a18\u9332\u3059\u308c\u3070\u3060\u3044\u305f\u3044OK\n* \u3057\u304b\u3057\u3001\u77f3\u304c\u6a2a\u65b9\u5411\u306b\u5168\u304f\u52d5\u304b\u306a\u3044\u5834\u5408\u306f\u7279\u5225\u6271\u3044\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n* \u77f3\u306e\u52d5\u304d\u3068\u4eba\u9593\u306e\u52d5\u304d\u304c\u307b\u307c\u540c\u3058\u306a\u306e\u3067\u3001\u3069\u3061\u3089\u3082\u300camida\u300d\u3067\u5b9f\u88c5\n\n\u3068\u3044\u3046\u611f\u3058\u306e\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u5927\u5909\u3088\u3044\u554f\u984c\u3060\u3063\u305f\u3068\u601d\u3046\u3002\n\u79c1\u306f\u96e3\u3057\u3081\u306b\u611f\u3058\u305f\u3051\u3069\u3001\u4f1a\u5834\u3067\u306f\u305d\u3046\u3067\u3082\u306a\u3044\u611f\u3058\u3060\u3063\u305f\u3002\n"}