{"context": " More than 1 year has passed since last update.\u4f55\u3092\u8a00\u3063\u3066\u3044\u308b\u306e\u304b\u5206\u304b\u3089\u306d\u30fc\u3068\u601d\u3046\u304c\u3001\u4ffa\u3082\u4f55\u304c\u8d77\u304d\u305f\u306e\u304b\u5206\u304b\u3089\u306a\u304b\u3063\u305f...\n\u4ee5\u4e0b\u306e\u3088\u3046\u306aEnum1\u3092JSON Object\u3068\u3057\u3066\u5909\u63db\u3059\u308b\u3068\u30fb\u30fb\u30fb\n@JsonFormat(shape = JsonFormat.Shape.OBJECT)\npublic enum Planet {\n\n    MERCURY(3.303e+23, 2.4397e6),\n    VENUS(4.869e+24, 6.0518e6),\n    EARTH(5.976e+24, 6.37814e6),\n    MARS(6.421e+23, 3.3972e6),\n    JUPITER(1.9e+27, 7.1492e7),\n    SATURN(5.688e+26, 6.0268e7),\n    URANUS(8.686e+25, 2.5559e7),\n    NEPTUNE(1.024e+26, 2.4746e7);\n\n    private final double mass; // in kilograms\n    private final double radius; // in meters\n\n    private Planet(double mass, double radius) {\n        this.mass = mass;\n        this.radius = radius;\n    }\n\n    // universal gravitational constant (m3 kg-1 s-2)\n    public static final double G = 6.67300E-11;\n\n    public double getMass() {\n        return mass;\n    }\n\n    public double getRadius() {\n        return radius;\n    }\n\n    @JsonProperty\n    public double surfaceGravity() {\n        return G * mass / (radius * radius);\n    }\n}\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51fa\u529b\u306b\u306a\u308a\u307e\u3059\u3002\n{\"mass\":1.9E27,\"radius\":7.1492E7,\"surfaceGravity\":24.80617666947324}\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u304c\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u306a\u306e\u3067\u3001PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES \u3092\u6307\u5b9a\u3057\u3066\u30b9\u30cd\u30fc\u30af\u30b1\u30fc\u30b9\u3067\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\u3059\u308b\u3068\u30fb\u30fb\u30fb\nObjectMapper mapper = new ObjectMapper()\n    .setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES)\nString json = mapper.writeValueAsString(Planet.JUPITER);\nSystem.out.println(json);\n\n{\"mass\":1.9E27,\"radius\":7.1492E7,\"surface_gravity\":24.80617666947324,\"declaring_class\":\"sample.jackson.Planet\"}\n\n\u3053\u306e\u3088\u3046\u306b\u30b9\u30cd\u30fc\u30af\u30b1\u30fc\u30b9\u306b\u306f\u306a\u308b\u306e\u3067\u3059\u304c\u3001declaring_class \u3068\u3044\u3046\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u4e00\u5fdc\u3001BasicSerializerFactory#buildEnumSerializer(SerializationConfig, JavaType, BeanDescription) \u3067\u3001\u62fe\u3063\u3066\u304d\u3066\u3057\u307e\u3063\u305fjava.lang.Enum#getDeclaringClass()\u3092\u9664\u5916\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u306a\u306e\u3067\u3059\u304c\u30fb\u30fb\u30fb\n\ncom.fasterxml.jackson.databind.ser.BasicSerializerFactory.java\n\n/* As per [Issue#24], may want to use alternate shape, serialize as JSON Object.\n * Challenge here is that EnumSerializer does not know how to produce\n * POJO style serialization, so we must handle that special case separately;\n * otherwise pass it to EnumSerializer.\n */\nJsonFormat.Value format = beanDesc.findExpectedFormat(null);\nif (format != null && format.getShape() == JsonFormat.Shape.OBJECT) {\n    // one special case: suppress serialization of \"getDeclaringClass()\"...\n    ((BasicBeanDescription) beanDesc).removeProperty(\"declaringClass\");\n    // returning null will mean that eventually BeanSerializer gets constructed\n    return null;\n}\n\n\n\u3053\u306e\u3088\u3046\u306b\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u3067\u30d9\u30bf\u66f8\u304d\u3057\u3066\u3044\u307e\u3059\u3002\n\u30b9\u30cd\u30fc\u30af\u30b1\u30fc\u30b9\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u30b3\u30b3\u304b\u52d5\u3044\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u3082\u898b\u3048\u308b\u306e\u3067\u3001\u975e\u5e38\u306b\u4e0d\u5b89\u306b\u306a\u308b\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\ncom.fasterxml.jackson.databind.introspect.BasicBeanDescription.java\n\n/**\n * Method that can be used to prune unwanted properties, during\n * construction of serializers and deserializers.\n * Use with utmost care, if at all...\n * \n * @since 2.1\n */\npublic boolean removeProperty(String propName)\n{\n    Iterator<BeanPropertyDefinition> it = _properties.iterator();\n    while (it.hasNext()) {\n        BeanPropertyDefinition prop = it.next();\n        if (prop.getName().equals(propName)) {\n            it.remove();\n            return true;\n        }\n    }\n    return false;\n}\n\n\n\u30fb\u30fb\u30fb\u3046\u30fc\u3093\u3001BeanPropertyDefinition#getName() \u3068\u6bd4\u8f03\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306e\u5834\u5408\u3060\u3068 \"declaringClass\" \u3067\u306f\u306a\u304f \"declaring_class\" \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u307e\u3055\u304b\u3068\u306f\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u7d50\u69cb\u5358\u7d14\u306a\u30df\u30b9\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\u3042\u3048\u3066 \"declaringClass\" \u3092\u6307\u5b9a\u3057\u305f\u3068\u3044\u3046\u3053\u3068\u306fStrategy\u306b\u5de6\u53f3\u3055\u308c\u306a\u305d\u3046\u306aBeanPropertyDefinition#getInternalName() \u3092\u4f7f\u3046\u3079\u304d\u3060\u3063\u305f\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u3002\u3002\u3002\n\ncom.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.java\n\n/**\n * Accessor that can be used to determine implicit name from underlying\n * element(s) before possible renaming. This is the \"internal\"\n * name derived from accessor (\"x\" from \"getX\"), and is not based on\n * annotations or naming strategy.\n */\npublic abstract String getInternalName();\n\n\n\n\n\n\n\nORACLE The Java\u2122 Tutorials Enum Types\u00a0\u21a9\n\n\n\n\n\u4f55\u3092\u8a00\u3063\u3066\u3044\u308b\u306e\u304b\u5206\u304b\u3089\u306d\u30fc\u3068\u601d\u3046\u304c\u3001\u4ffa\u3082\u4f55\u304c\u8d77\u304d\u305f\u306e\u304b\u5206\u304b\u3089\u306a\u304b\u3063\u305f...\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306aEnum[^1]\u3092`JSON Object`\u3068\u3057\u3066\u5909\u63db\u3059\u308b\u3068\u30fb\u30fb\u30fb\n\n[^1]: [ORACLE The Java\u2122 Tutorials Enum Types](https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html)\n\n```java\n@JsonFormat(shape = JsonFormat.Shape.OBJECT)\npublic enum Planet {\n\n    MERCURY(3.303e+23, 2.4397e6),\n    VENUS(4.869e+24, 6.0518e6),\n    EARTH(5.976e+24, 6.37814e6),\n    MARS(6.421e+23, 3.3972e6),\n    JUPITER(1.9e+27, 7.1492e7),\n    SATURN(5.688e+26, 6.0268e7),\n    URANUS(8.686e+25, 2.5559e7),\n    NEPTUNE(1.024e+26, 2.4746e7);\n\n    private final double mass; // in kilograms\n    private final double radius; // in meters\n\n    private Planet(double mass, double radius) {\n        this.mass = mass;\n        this.radius = radius;\n    }\n\n    // universal gravitational constant (m3 kg-1 s-2)\n    public static final double G = 6.67300E-11;\n\n    public double getMass() {\n        return mass;\n    }\n\n    public double getRadius() {\n        return radius;\n    }\n\n    @JsonProperty\n    public double surfaceGravity() {\n        return G * mass / (radius * radius);\n    }\n}\n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51fa\u529b\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\n{\"mass\":1.9E27,\"radius\":7.1492E7,\"surfaceGravity\":24.80617666947324}\n```\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u304c\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u306a\u306e\u3067\u3001`PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES` \u3092\u6307\u5b9a\u3057\u3066\u30b9\u30cd\u30fc\u30af\u30b1\u30fc\u30b9\u3067\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\u3059\u308b\u3068\u30fb\u30fb\u30fb\n\n```java\nObjectMapper mapper = new ObjectMapper()\n    .setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES)\nString json = mapper.writeValueAsString(Planet.JUPITER);\nSystem.out.println(json);\n```\n\n```\n{\"mass\":1.9E27,\"radius\":7.1492E7,\"surface_gravity\":24.80617666947324,\"declaring_class\":\"sample.jackson.Planet\"}\n```\n\n\u3053\u306e\u3088\u3046\u306b\u30b9\u30cd\u30fc\u30af\u30b1\u30fc\u30b9\u306b\u306f\u306a\u308b\u306e\u3067\u3059\u304c\u3001`declaring_class` \u3068\u3044\u3046\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u4e00\u5fdc\u3001`BasicSerializerFactory#buildEnumSerializer(SerializationConfig, JavaType, BeanDescription)` \u3067\u3001\u62fe\u3063\u3066\u304d\u3066\u3057\u307e\u3063\u305f`java.lang.Enum#getDeclaringClass()`\u3092\u9664\u5916\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u306a\u306e\u3067\u3059\u304c\u30fb\u30fb\u30fb\n\n```java:com.fasterxml.jackson.databind.ser.BasicSerializerFactory.java\n\n/* As per [Issue#24], may want to use alternate shape, serialize as JSON Object.\n * Challenge here is that EnumSerializer does not know how to produce\n * POJO style serialization, so we must handle that special case separately;\n * otherwise pass it to EnumSerializer.\n */\nJsonFormat.Value format = beanDesc.findExpectedFormat(null);\nif (format != null && format.getShape() == JsonFormat.Shape.OBJECT) {\n    // one special case: suppress serialization of \"getDeclaringClass()\"...\n    ((BasicBeanDescription) beanDesc).removeProperty(\"declaringClass\");\n    // returning null will mean that eventually BeanSerializer gets constructed\n    return null;\n}\n```\n\u3053\u306e\u3088\u3046\u306b\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u3067\u30d9\u30bf\u66f8\u304d\u3057\u3066\u3044\u307e\u3059\u3002\n\u30b9\u30cd\u30fc\u30af\u30b1\u30fc\u30b9\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u30b3\u30b3\u304b\u52d5\u3044\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u3082\u898b\u3048\u308b\u306e\u3067\u3001\u975e\u5e38\u306b\u4e0d\u5b89\u306b\u306a\u308b\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```java:com.fasterxml.jackson.databind.introspect.BasicBeanDescription.java\n\n/**\n * Method that can be used to prune unwanted properties, during\n * construction of serializers and deserializers.\n * Use with utmost care, if at all...\n * \n * @since 2.1\n */\npublic boolean removeProperty(String propName)\n{\n    Iterator<BeanPropertyDefinition> it = _properties.iterator();\n    while (it.hasNext()) {\n        BeanPropertyDefinition prop = it.next();\n        if (prop.getName().equals(propName)) {\n            it.remove();\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n\u30fb\u30fb\u30fb\u3046\u30fc\u3093\u3001`BeanPropertyDefinition#getName()` \u3068\u6bd4\u8f03\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306e\u5834\u5408\u3060\u3068 *\"declaringClass\"* \u3067\u306f\u306a\u304f *\"declaring_class\"* \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u307e\u3055\u304b\u3068\u306f\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u7d50\u69cb\u5358\u7d14\u306a\u30df\u30b9\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\u3042\u3048\u3066 *\"declaringClass\"* \u3092\u6307\u5b9a\u3057\u305f\u3068\u3044\u3046\u3053\u3068\u306fStrategy\u306b\u5de6\u53f3\u3055\u308c\u306a\u305d\u3046\u306a`BeanPropertyDefinition#getInternalName()` \u3092\u4f7f\u3046\u3079\u304d\u3060\u3063\u305f\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u3002\u3002\u3002\n\n\n```java:com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.java\n\n/**\n * Accessor that can be used to determine implicit name from underlying\n * element(s) before possible renaming. This is the \"internal\"\n * name derived from accessor (\"x\" from \"getX\"), and is not based on\n * annotations or naming strategy.\n */\npublic abstract String getInternalName();\n\n```\n\n\n\n\n\n", "tags": ["Java", "Jackson"]}