{"context": "\n\u52d5\u4f5c\u74b0\u5883\n\u7d44\u8fbc\u307fC (MSP430)\n\n\nstrcpy()\u304f\u3089\u3044\u3042\u308b\u72b6\u6cc1\u3067\u30ab\u30f3\u30de\u533a\u5207\u308a\u6587\u5b57\u5217\u304b\u3089\u5404\u9805\u76ee\u3092\u53d6\u51fa\u3059extractCsvRow()\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3002\n\ncode v0.1\nhttp://ideone.com/AmrfcF\n\nsample.c\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\n/*\nv0.1 2016/05/25\n  - add extractCsvRow()\n*/\n\nstatic const char *s_rcvd = \"pval,3.141,2.718,6.022\"; // dummy data\n\nstatic bool extractCsvRow(char *srcPtr, int length, int itmidx, char *dstPtr)\n{\n    char szbuf[20];\n    int pos = 0;\n    int cntComma = 0;\n\n    int idx;\n    if (dstPtr == NULL) {\n        return false;\n    }\n\n    for(idx=0; idx < length; idx++) {\n        if (srcPtr[idx] == ',') {\n            if (cntComma == itmidx) {\n                szbuf[pos++] = 0x00;\n                strcpy(dstPtr, szbuf);\n                return true;\n            }\n            cntComma++;\n        } else {\n            if (cntComma == itmidx) {\n                szbuf[pos++] = srcPtr[idx];\n            }\n        }\n    }\n\n    if (cntComma == itmidx) {\n        szbuf[pos++] = 0x00;\n        strcpy(dstPtr, szbuf);\n        return true;\n    }\n\n    return false;\n}   \n\nint main(void) {\n    bool res;\n    static char szbuf[20];\n    int idx;\n\n    for(idx=0; idx < 4; idx++) {\n        memset(szbuf, 0, sizeof(szbuf));\n        res = extractCsvRow(s_rcvd, strlen(s_rcvd), idx, szbuf);\n        if (res) {\n            printf(\"%s\\n\", szbuf);\n        }\n    }\n\n    return 0;\n}\n\n\n\n\u7d50\u679c\n\n\u7d50\u679c\npval\n3.141\n2.718\n6.022\n\n\n\u4e00\u5fdc\u52d5\u3044\u3066\u3044\u308b\u304c\u3001\u3082\u3046\u5c11\u3057\u898b\u76f4\u3057\u304c\u5fc5\u8981\u304b\u3082\u3057\u308c\u306a\u3044\u3002\nArduino\u306a\u3069\u3067\u3084\u308b\u3068\u3082\u3063\u3068\u697d\u304c\u3067\u304d\u308b http://qiita.com/7of9/items/ac7737c17c4dacf09bc3\nUnity\u306a\u3089 http://qiita.com/7of9/items/f6ff497333bf558a5951\n```txt:\u52d5\u4f5c\u74b0\u5883\n\u7d44\u8fbc\u307fC (MSP430)\n```\n\nstrcpy()\u304f\u3089\u3044\u3042\u308b\u72b6\u6cc1\u3067\u30ab\u30f3\u30de\u533a\u5207\u308a\u6587\u5b57\u5217\u304b\u3089\u5404\u9805\u76ee\u3092\u53d6\u51fa\u3059extractCsvRow()\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3002\n\n## code v0.1\n\nhttp://ideone.com/AmrfcF\n\n```sample.c\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\n/*\nv0.1 2016/05/25\n  - add extractCsvRow()\n*/\n\nstatic const char *s_rcvd = \"pval,3.141,2.718,6.022\"; // dummy data\n\nstatic bool extractCsvRow(char *srcPtr, int length, int itmidx, char *dstPtr)\n{\n\tchar szbuf[20];\n\tint pos = 0;\n\tint cntComma = 0;\n\t\n\tint idx;\n\tif (dstPtr == NULL) {\n\t\treturn false;\n\t}\n\t\n\tfor(idx=0; idx < length; idx++) {\n\t\tif (srcPtr[idx] == ',') {\n\t\t\tif (cntComma == itmidx) {\n\t\t\t\tszbuf[pos++] = 0x00;\n\t\t\t\tstrcpy(dstPtr, szbuf);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcntComma++;\n\t\t} else {\n\t\t\tif (cntComma == itmidx) {\n\t\t\t\tszbuf[pos++] = srcPtr[idx];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (cntComma == itmidx) {\n\t\tszbuf[pos++] = 0x00;\n\t\tstrcpy(dstPtr, szbuf);\n\t\treturn true;\n\t}\n\n\treturn false;\n}\t\n\nint main(void) {\n\tbool res;\n\tstatic char szbuf[20];\n\tint idx;\n\t\n\tfor(idx=0; idx < 4; idx++) {\n\t\tmemset(szbuf, 0, sizeof(szbuf));\n\t\tres = extractCsvRow(s_rcvd, strlen(s_rcvd), idx, szbuf);\n\t\tif (res) {\n\t\t\tprintf(\"%s\\n\", szbuf);\n\t\t}\n\t}\n\n\treturn 0;\n}\n```\n\n## \u7d50\u679c\n\n```txt:\u7d50\u679c\npval\n3.141\n2.718\n6.022\n```\n\n\u4e00\u5fdc\u52d5\u3044\u3066\u3044\u308b\u304c\u3001\u3082\u3046\u5c11\u3057\u898b\u76f4\u3057\u304c\u5fc5\u8981\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\nArduino\u306a\u3069\u3067\u3084\u308b\u3068\u3082\u3063\u3068\u697d\u304c\u3067\u304d\u308b http://qiita.com/7of9/items/ac7737c17c4dacf09bc3\n\nUnity\u306a\u3089 http://qiita.com/7of9/items/f6ff497333bf558a5951\n", "tags": ["C", "stringOperation"]}