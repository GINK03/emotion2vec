{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nC++\u306f\u53ef\u8aad\u6027\u3082\u4f5c\u696d\u52b9\u7387\u3082(C\u8a00\u8a9e\u306b\u6bd4\u3079)\u9ad8\u304f\u304b\u3051\u307e\u3059\n\u304c\u3001C\u8a00\u8a9e\u306e\u8a18\u8ff0\u65b9\u6cd5\u3082\u53ef\u80fd\u306a\u305f\u3081\u3001\u306a\u304b\u306a\u304bC++\u3063\u307d\u304f\u66f8\u3051\u306a\u3044\u4eba\u304c\u591a\u3044\u3067\u3059\nC++\u3067\u3061\u3083\u3093\u3068\u66f8\u3051\u3070\u901f\u5ea6\u306f\u307b\u3068\u3093\u3069\u843d\u3068\u3059\u4e8b\u306a\u304f\u3001\u5b89\u5168\u306a\u30b3\u30fc\u30c9\u304c\u304b\u3051\u307e\u3059\n\u4eca\u56de\u306f\u3001C++11\u3067\u306f\u3058\u3081\u3066\u4f5c\u696d\u3092\u3057\u3066\u3001\u3068\u3066\u3082\u5feb\u9069\u306b\u306a\u3063\u305f\nstd::algorithm \u306e\u3055\u308f\u308a\u3092\u3002\n\n\u4f55\u304c\u4fbf\u5229\u306b\u306a\u3063\u305f\u304b\nstd::algorithm\u306f\u3001\u95a2\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u3088\u304f\u4f7f\u3044\u307e\u3059\u304c\nC++11\u4ee5\u524d\u306f\u3001\u95a2\u6570\u3092\u4f5c\u6210\u3057\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3092\u6e21\u3059\u304b\u3001\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\n\u5fc5\u8981\u304c\u3042\u308a\u3001\u5c11\u3057\u624b\u9593\u306b\u611f\u3058\u3066\u3044\u307e\u3057\u305f\n\u304c\u3001C++11\u3067\u306f \u30e9\u30e0\u30c0\u95a2\u6570\u304c\u6a19\u6e96\u5316\u3055\u308c\u3001\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u975e\u5e38\u306b\u7c21\u5358\u306b\u4f5c\u308c\u307e\u3059\n\u30e9\u30e0\u30c0\u95a2\u6570\u306e\u767b\u5834\u306b\u3088\u308a\u3001std::algorithm\u306f\u6069\u6075\u3092\u304b\u306a\u308a\u53d7\u3051\u3001\u4f7f\u3044\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\n\nrambda\n\n// \u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u4f8b\nbool func(int &n){\n  return(...);\n}\n\nauto fp = std::find( v.begin(), v.end(), (bool(*)(int))func );\n...\n\n// \u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f8b\nstruct OBJ{\n  bool operator()(int n) const{\n    return(...);\n  }\n};\n\nauto fp = std::find_if( v.begin(), v.end(), OBJ() );\n...\n\n\n// \u30e9\u30e0\u30c0\nauto fp = std::find_if( v.begin(), v.end(), [](int &n){ return(...); } );\n\n\n\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u30e9\u30e0\u30c0\u3060\u3068\u975e\u5e38\u306b\u3059\u3063\u304d\u308a\u3057\u307e\u3059\u306d\uff01\n\u3055\u3089\u306b\u3001\u4ed6\u306e\u5909\u6570\u306e\u5024\u3092\u4fdd\u6301\u3055\u305b\u308b\u5834\u5408\u306f\n\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3067\u306f\u96e3\u3057\u3044\u3067\u3059\n\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001\u5f15\u6570\u4ed8\u304d\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f5c\u6210\u3057\u5024\u3092\u4fdd\u6301\u3057\u307e\u3059\u304c\n\u30e9\u30e0\u30c0\u3067\u306f\u3001[]\u5185\u90e8\u306b\u5909\u6570\u540d\u3092\u66f8\u304f\u3060\u3051\u3067\u3001\u5024\u306e\u4fdd\u6301\uff08\u30b3\u30d4\u30fc\u3001\u53c2\u7167\u3082\u9078\u3079\u308b\uff09\u304c\u51fa\u6765\n\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\n\nfind_if C\u8a00\u8a9e\u3067\u611a\u76f4\u306b\nfind_if\u306f\u3001\u691c\u7d22\u306e\u958b\u59cb\u3068\u7d42\u4e86\u3092\u6307\u5b9a\u3057\n\u95a2\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u6761\u4ef6\u304ctrue\u3060\u3063\u305f\u6700\u521d\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3057\u307e\u3059\n\u4eca\u56de\u306f HOGE\u69cb\u9020\u4f53\u306e flag==true\u304b\u3064\u3001id\u306e\u5024\u304c\u4e00\u81f4\u3059\u308b\u3082\u306e\u3092\u53d6\u5f97\u3057\u307e\u3059\n\u307e\u305a\u306f\u611a\u76f4\u306b C\u8a00\u8a9e\u3067\u306e\u5b9f\u88c5\u6cd5\n\nC\u8a00\u8a9e\u98a8\n        struct HOGE{\n            int         id;\n            bool        flag;\n        };\n\n        //\u3000C\u8a00\u8a9e\u306e\u66f8\u304d\u65b9\n        HOGE h[]={ {1,true},{2,true},{3,false} };\n        for(int i=0; i<3; i++){\n            if( (h[i].id== 1) && (h[i].flag==true)){\n                std::cout << \"for h\" << std::endl;\n            }\n        }\n\n\n\n\u611a\u76f4\u3067C\u3089\u3057\u3044\u3067\u3059\u306d\uff01\n\nstd::array\u3067C\u8a00\u8a9e\u98a8\u306b\u611a\u76f4\u3067\nC++11\u3067\u306f\u914d\u5217\u306f std::array\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u751f\u914d\u5217\u3068\u3061\u304c\u3044\u3001\u30b5\u30a4\u30ba\u304c\u53d6\u5f97\u51fa\u6765\u305f\u308a\u3001STL\u30b3\u30f3\u30c6\u30ca\u3068\u3057\u3066\u4f7f\u3048\u305f\u308a\n\u751f\u914d\u5217\u3088\u308a\u3082\u5b89\u5168\u304b\u3064\u3001\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u7121\u3057\u3067\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u4f7f\u3048\u308b\u306e\u3067\n\u4eca\u307e\u3067\u751f\u914d\u5217\u3092\u4f7f\u3063\u3066\u3044\u305f\u4eba\u306f\u3053\u306e\u6a5f\u4f1a\u306b stl::array\u306b\u79fb\u884c\u3057\u307e\u3057\u3087\u3046\n\uff08\u73fe\u5728\u306f \u521d\u671f\u5316\u6642\u306b\u914d\u5217\u6570\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306a\u3069 \u591a\u5c11\u9762\u5012\u3067\u3059\u304c\u3001std::make_array\u304c\u6b21\u306b\u5c0e\u5165\u3055\u308c\u308b\u306e\u3067\u3000\u3088\u308a\u4fbf\u5229\u306b\u306a\u308a\u307e\u3059\uff09\n\nstd#arrayC\u8a00\u8a9e\u98a8\n        struct HOGE{\n            int         id;\n            bool        flag;\n        };\n\n        // std::array\u3092\u611a\u76f4\u306bC\u8a00\u8a9e\u3067\n        std::array<HOGE,3>  hh = {{ {1,true},{2,true},{3,false} }};\n        for(int i=0; i<hh.size(); i++){\n            if( (hh[i].id== 1) && (hh[i].flag==true)){\n                std::cout << \"for hh\" << std::endl;\n            }\n        }\n\n\narray<>::size() \u3067\u914d\u5217\u306e\u500b\u6570\u3092\u53d6\u5f97\u51fa\u6765\u308b\u4ee5\u5916\u306f\u3001\u540c\u3058\u3067\u3059\u306d\u3002\n\u5b9f\u969b\u306e\u52d5\u4f5c\u3082\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306a\u304f\u751f\u914d\u5217\u3068\u540c\u3058\u306a\u306e\u3067\u3001\u901f\u5ea6\u3082\u554f\u984c\u306a\u304f\u4f7f\u3048\u307e\u3059\n\u4e00\u3064\u4e0d\u601d\u8b70\u306a\u306e\u306f\u3001\u521d\u671f\u5316\u6642\u306b\u3000\u306a\u305c\u304b {}\u3000\u304c\u4e00\u3064\u591a\u3044\u4e8b\u3002\n\u7406\u7531\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001array\u3092\u4f7f\u3046\u5834\u5408\u306f\u3001\u4e00\u3064\u591a\u304f\u56f2\u308f\u306a\u3051\u308c\u3070\u30c0\u30e1\u306e\u3088\u3046\u3067\u3059\n\nfor_each\nC++\u3067\u8981\u7d20\u3092\u306a\u3081\u308b\u6642\u306f std::for_each\u304c\u4f7f\u3048\u307e\u3059\n\nstd#for_each\n        struct HOGE{\n            int         id;\n            bool        flag;\n        };\n\n        std::array<HOGE,3>  hh = {{ {1,true},{2,true},{3,false} }};\n        // std::for_each\n        std::for_each(hh.begin(), hh.end(),\n                      [](HOGE &h){\n                          if((h.id==1)&&(h.flag==true)){\n                              std::cout << \"std::for_each hh\" << std::endl;\n                              break;\n                          }\n                      } );\n\n\n\nfor_each\u306e\u7b2c\u4e00\u5f15\u6570\u306f\u3001\u958b\u59cb\u30a4\u30c6\u30ec\u30fc\u30bf\u3001\u7b2c\u4e8c\u5f15\u6570\u306f\u7d42\u4e86\u30a4\u30c6\u30ec\u30fc\u30bf\n\u7b2c\u4e09\u5f15\u6570\u306b\u3001\u5b9f\u884c\u3059\u308b\u95a2\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u3092\u6307\u5b9a\u3057\u307e\u3059\n\u5c11\u3057 STL\u3063\u307d\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u306d\n\nrange-based for-loop\nstd::for_each \u3068\u4f3c\u305f\u52d5\u4f5c\u3092\u3059\u308b\u3082\u306e\u3068\u3057\u3066 range-based for-loop\u304c\u3042\u308a\u307e\u3059\n\u65e5\u672c\u8a9e\u3060\u3068 \u7bc4\u56f2\u30d9\u30fc\u30b9for\u30eb\u30fc\u30d7 \u3068\u304b\u3001\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u540d\u524d\u306a\u306e\u3067\u82f1\u8a9e\u3067\u3044\u304d\u307e\u3059\nstd::for_each\u306b\u6bd4\u3079\u3001\u975e\u5e38\u306b\u3059\u3063\u304d\u308a\u3057\u305f\u6587\u6cd5\u3067\u5168\u3066\u306e\u8981\u7d20\u3092\u306a\u3081\u307e\u3059\nstd::for_each\u3060\u3068 \u59cb\u3081\u3068\u7d42\u308f\u308a\u3092\u6307\u5b9a\u51fa\u6765\u308b\u306e\u3067\u3001\u305d\u3046\u3044\u3046\u7528\u9014\u306e\u5834\u5408\u306f\u305d\u3061\u3089\u3092\u4f7f\u3046\u3079\u304d\u3067\u3059\u306d\n\nstd#range-based\u3000for-loop\n        struct HOGE{\n            int         id;\n            bool        flag;\n        };\n\n        std::array<HOGE,3>  hh = {{ {1,true},{2,true},{3,false} }};\n        // range-based for-loop\n        for( auto &a: hh){\n            if( (a.id== 1) && (a.flag==true)){\n                std::cout << \"range-based for hh\" << std::endl;\n                break;\n            }\n        }\n\n\n\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3082\u306a\u304f\u3001\u7c21\u6f54\u306b\u304b\u3051\u307e\u3059\u3002\n\u975e\u5e38\u306b\u4fbf\u5229\u306a\u306e\u3067 \u4f7f\u3063\u3066\u307f\u3066\u4e0b\u3055\u3044\uff01\n\nstd::find_if\n\u3084\u3063\u3068\u672c\u547d\u3067\u3059\nstd::find_if\u306f\u3001\u7b2c\u4e00\u5f15\u6570 \u958b\u59cb\u30a4\u30c6\u30ec\u30fc\u30bf\u3001\u7b2c\u4e8c\u5f15\u6570 \u7d42\u4e86\u30a4\u30c6\u30ec\u30fc\u30bf\n\u7b2c\u4e09\u5f15\u6570 \u6761\u4ef6 \u95a2\u6570(\u30aa\u30d6\u30b8\u30a7\u30af\u30c8)\n\u3068\u306a\u3063\u3066\u304a\u308a\u307e\u3059\n\nstd#find_if\n        struct HOGE{\n            int         id;\n            bool        flag;\n        };\n\n        std::array<HOGE,3>  hh = {{ {1,true},{2,true},{3,false} }};\n        // std::find_if\n        auto fi = std::find_if(hh.begin(), hh.end(),\n                       [](HOGE &h){\n                           return( (h.id==1)&&(h.flag==true));\n                       } );\n\n        if(fi != hh.end()){\n            std::cout << \"std::find_if\" << std::endl;\n        }\n\n\nstd::for_each \u306b\u4f3c\u305f\u5f62\u3067\u3059\u304c\u3001\u7b2c\u4e09\u5f15\u6570\u306b\u306f\u6761\u4ef6\u5f0f\u3092\u6e21\u3057\u307e\u3059\n\u3053\u306e\u6761\u4ef6\u5f0f\u304c true\u306e\u5834\u5408\u306f find_if\u3092\u305d\u3053\u3067\u505c\u6b62\u3057\u3001true\u306b\u306a\u3063\u305f\u6642\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\n\u3069\u308c\u306b\u3082\u4e00\u81f4\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f end() \u304c\u8fd4\u308a\u307e\u3059\n\u304a\u305d\u3089\u304f\u3001\u6700\u3082STL\u306e\u6069\u6075\u3092\u6388\u304b\u3063\u305f\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\n\n\u756a\u5916\u7de8 std::find\nstd::find\u306f std::find_if\u3068\u9055\u3044\u3001\u7b2c\u4e09\u5f15\u6570\u306f\u6761\u4ef6\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u306f\u306a\u304f\u3001\u5024\u3092\u6307\u5b9a\u3057\u307e\u3059\n\u4f8b\u3048\u3070 \u30b3\u30f3\u30c6\u30ca\u306e\u4e2d\u8eab\u304c int\u7b49\u306e\u5834\u5408\u306f\u3001\u6570\u5b57\u3092\u6307\u5b9a\u3057\u4e00\u81f4\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\n\u4eca\u56de\u306f \u69cb\u9020\u4f53\u306a\u306e\u3067\u3001\u305d\u306e\u307e\u307e\u5024\u3092\u6bd4\u8f03\u3067\u304d\u306a\u3044\u306e\u3067\noperator int() \u3092\u5b9f\u88c5\u3057\u5024\u306e\u6bd4\u8f03\u3092\u3057\u307e\u3059\n\uff08\u5185\u90e8\u306f-1\u3068\u3044\u3046\u30c0\u30df\u30fc\u5024\u3092\u4f7f\u3044\u3000\u30c0\u30b5\u3044\u30b3\u30fc\u30c9\u3067\u3059\u304c\u30fb\u30fb\uff09\n\nstd#find\n        struct HOGE{\n            int         id;\n            bool        flag;\n\n            operator int() {\n                if(flag) {\n                    return id;\n                }else{\n                    return -1;\n                }\n            };\n        };\n\n        std::array<HOGE,3>  hh = {{ {1,true},{2,true},{3,false} }};\n        // std::find\n        auto f = std::find(hh.begin(), hh.end(), 1);\n\n        if(fi != hh.end()){\n            std::cout << \"std::find\" << std::endl;\n        }\n\n\n\u3042\u308b\u3044\u306f\u3001int\u306b\u305b\u305a\u69cb\u9020\u4f53\u3067\u6bd4\u8f03\u3059\u308b\u306b\u306f\u3001operator==\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\n\nstd#find\n        struct HOGE{\n            int         id;\n            bool        flag;\n\n            bool operator ==(const HOGE &h) {\n                return( (h.flag==true)&&(this->id==h.id) );\n            }\n        };\n\n        std::array<HOGE,3>  hh = {{ {1,true},{2,true},{3,false} }};\n        // std::find\n        auto f = std::find(hh.begin(), hh.end(), HOGE{1,true});\n\n        if(f != hh.end()){\n            std::cout << \"std::find\" << std::endl;\n        }\n\n\n\u5b9f\u884c\u901f\u5ea6\u3068\u304b\u591a\u5c11\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u3042\u308a\u305d\u3046\u3060\u3051\u3069\u3001operator==\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3068\n\u3059\u3093\u306a\u308a\u66f8\u304f\u4e8b\u3082\u51fa\u6765\u307e\u3059\n\u304c\n\u3068\u8907\u6570\u6761\u4ef6\u306efind\u306f  find_if\u3092\u4f7f\u3046\u306e\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\n\u3063\u3066\u3053\u3068\u3067\u3001 std::find\u3001std::find_if\n\u4eca\u56de\u306f\u3058\u3081\u3066STL\u3092\u30de\u30c8\u30e2\u306b\u4ed5\u4e8b\u306b\u4f7f\u3063\u3066\u3000\u975e\u5e38\u306b\u4fbf\u5229\u3060\u3063\u305f\u306e\u3067\n\u30aa\u30b9\u30b9\u30e1\u3057\u3066\u304a\u304d\u307e\u3059\n\u307e\u305f find\u306f\u3001set\u3084map\u3001unordered_map\u7b49\u306e\u5834\u5408\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u3082\u306e\u3092\u4f7f\u3046\u3068\n\u4e8c\u5206\u6728\u3084\u30cf\u30c3\u30b7\u30e5\u3092\u4f7f\u3044\u691c\u7d22\u3057\u3066\u304f\u308c\u308b\u306e\u3067\n\u305d\u3061\u3089\u3092\u4f7f\u3063\u3066\u4e0b\u3055\u3044\uff01\n#\u306f\u3058\u3081\u306b\nC++\u306f\u53ef\u8aad\u6027\u3082\u4f5c\u696d\u52b9\u7387\u3082(C\u8a00\u8a9e\u306b\u6bd4\u3079)\u9ad8\u304f\u304b\u3051\u307e\u3059\n\u304c\u3001C\u8a00\u8a9e\u306e\u8a18\u8ff0\u65b9\u6cd5\u3082\u53ef\u80fd\u306a\u305f\u3081\u3001\u306a\u304b\u306a\u304bC++\u3063\u307d\u304f\u66f8\u3051\u306a\u3044\u4eba\u304c\u591a\u3044\u3067\u3059\nC++\u3067\u3061\u3083\u3093\u3068\u66f8\u3051\u3070\u901f\u5ea6\u306f\u307b\u3068\u3093\u3069\u843d\u3068\u3059\u4e8b\u306a\u304f\u3001\u5b89\u5168\u306a\u30b3\u30fc\u30c9\u304c\u304b\u3051\u307e\u3059\n\n\u4eca\u56de\u306f\u3001C++11\u3067\u306f\u3058\u3081\u3066\u4f5c\u696d\u3092\u3057\u3066\u3001\u3068\u3066\u3082\u5feb\u9069\u306b\u306a\u3063\u305f\nstd::algorithm \u306e\u3055\u308f\u308a\u3092\u3002\n\n\n#\u4f55\u304c\u4fbf\u5229\u306b\u306a\u3063\u305f\u304b\nstd::algorithm\u306f\u3001\u95a2\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u3088\u304f\u4f7f\u3044\u307e\u3059\u304c\nC++11\u4ee5\u524d\u306f\u3001\u95a2\u6570\u3092\u4f5c\u6210\u3057\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3092\u6e21\u3059\u304b\u3001\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\n\u5fc5\u8981\u304c\u3042\u308a\u3001\u5c11\u3057\u624b\u9593\u306b\u611f\u3058\u3066\u3044\u307e\u3057\u305f\n\u304c\u3001C++11\u3067\u306f \u30e9\u30e0\u30c0\u95a2\u6570\u304c\u6a19\u6e96\u5316\u3055\u308c\u3001\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u975e\u5e38\u306b\u7c21\u5358\u306b\u4f5c\u308c\u307e\u3059\n\n\u30e9\u30e0\u30c0\u95a2\u6570\u306e\u767b\u5834\u306b\u3088\u308a\u3001std::algorithm\u306f\u6069\u6075\u3092\u304b\u306a\u308a\u53d7\u3051\u3001\u4f7f\u3044\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\n\n```cpp:rambda\n\n// \u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u4f8b\nbool func(int &n){\n  return(...);\n}\n\nauto fp = std::find( v.begin(), v.end(), (bool(*)(int))func );\n...\n\n// \u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f8b\nstruct OBJ{\n  bool operator()(int n) const{\n    return(...);\n  }\n};\n\nauto fp = std::find_if( v.begin(), v.end(), OBJ() );\n...\n\n\n// \u30e9\u30e0\u30c0\nauto fp = std::find_if( v.begin(), v.end(), [](int &n){ return(...); } );\n\n\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u30e9\u30e0\u30c0\u3060\u3068\u975e\u5e38\u306b\u3059\u3063\u304d\u308a\u3057\u307e\u3059\u306d\uff01\n\u3055\u3089\u306b\u3001\u4ed6\u306e\u5909\u6570\u306e\u5024\u3092\u4fdd\u6301\u3055\u305b\u308b\u5834\u5408\u306f\n\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3067\u306f\u96e3\u3057\u3044\u3067\u3059\n\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001\u5f15\u6570\u4ed8\u304d\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f5c\u6210\u3057\u5024\u3092\u4fdd\u6301\u3057\u307e\u3059\u304c\n\u30e9\u30e0\u30c0\u3067\u306f\u3001[]\u5185\u90e8\u306b\u5909\u6570\u540d\u3092\u66f8\u304f\u3060\u3051\u3067\u3001\u5024\u306e\u4fdd\u6301\uff08\u30b3\u30d4\u30fc\u3001\u53c2\u7167\u3082\u9078\u3079\u308b\uff09\u304c\u51fa\u6765\n\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\n\n\n##find_if C\u8a00\u8a9e\u3067\u611a\u76f4\u306b\nfind_if\u306f\u3001\u691c\u7d22\u306e\u958b\u59cb\u3068\u7d42\u4e86\u3092\u6307\u5b9a\u3057\n\u95a2\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u6761\u4ef6\u304ctrue\u3060\u3063\u305f\u6700\u521d\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3057\u307e\u3059\n\n\u4eca\u56de\u306f HOGE\u69cb\u9020\u4f53\u306e flag==true\u304b\u3064\u3001id\u306e\u5024\u304c\u4e00\u81f4\u3059\u308b\u3082\u306e\u3092\u53d6\u5f97\u3057\u307e\u3059\n\u307e\u305a\u306f\u611a\u76f4\u306b C\u8a00\u8a9e\u3067\u306e\u5b9f\u88c5\u6cd5\n\n\n```cpp:C\u8a00\u8a9e\u98a8\n        struct HOGE{\n            int         id;\n            bool        flag;\n        };\n\n        //\u3000C\u8a00\u8a9e\u306e\u66f8\u304d\u65b9\n        HOGE h[]={ {1,true},{2,true},{3,false} };\n        for(int i=0; i<3; i++){\n            if( (h[i].id== 1) && (h[i].flag==true)){\n                std::cout << \"for h\" << std::endl;\n            }\n        }\n\n```\n\n\u611a\u76f4\u3067C\u3089\u3057\u3044\u3067\u3059\u306d\uff01\n\n\n## std::array\u3067C\u8a00\u8a9e\u98a8\u306b\u611a\u76f4\u3067\nC++11\u3067\u306f\u914d\u5217\u306f std::array\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u751f\u914d\u5217\u3068\u3061\u304c\u3044\u3001\u30b5\u30a4\u30ba\u304c\u53d6\u5f97\u51fa\u6765\u305f\u308a\u3001STL\u30b3\u30f3\u30c6\u30ca\u3068\u3057\u3066\u4f7f\u3048\u305f\u308a\n\u751f\u914d\u5217\u3088\u308a\u3082\u5b89\u5168\u304b\u3064\u3001\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u7121\u3057\u3067\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u4f7f\u3048\u308b\u306e\u3067\n\u4eca\u307e\u3067\u751f\u914d\u5217\u3092\u4f7f\u3063\u3066\u3044\u305f\u4eba\u306f\u3053\u306e\u6a5f\u4f1a\u306b stl::array\u306b\u79fb\u884c\u3057\u307e\u3057\u3087\u3046\n\uff08\u73fe\u5728\u306f \u521d\u671f\u5316\u6642\u306b\u914d\u5217\u6570\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306a\u3069 \u591a\u5c11\u9762\u5012\u3067\u3059\u304c\u3001std::make_array\u304c\u6b21\u306b\u5c0e\u5165\u3055\u308c\u308b\u306e\u3067\u3000\u3088\u308a\u4fbf\u5229\u306b\u306a\u308a\u307e\u3059\uff09\n\n```cpp:std#arrayC\u8a00\u8a9e\u98a8\n        struct HOGE{\n            int         id;\n            bool        flag;\n        };\n\n        // std::array\u3092\u611a\u76f4\u306bC\u8a00\u8a9e\u3067\n        std::array<HOGE,3>  hh = {{ {1,true},{2,true},{3,false} }};\n        for(int i=0; i<hh.size(); i++){\n            if( (hh[i].id== 1) && (hh[i].flag==true)){\n                std::cout << \"for hh\" << std::endl;\n            }\n        }\n```\n\narray<>::size() \u3067\u914d\u5217\u306e\u500b\u6570\u3092\u53d6\u5f97\u51fa\u6765\u308b\u4ee5\u5916\u306f\u3001\u540c\u3058\u3067\u3059\u306d\u3002\n\u5b9f\u969b\u306e\u52d5\u4f5c\u3082\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306a\u304f\u751f\u914d\u5217\u3068\u540c\u3058\u306a\u306e\u3067\u3001\u901f\u5ea6\u3082\u554f\u984c\u306a\u304f\u4f7f\u3048\u307e\u3059\n\n\u4e00\u3064\u4e0d\u601d\u8b70\u306a\u306e\u306f\u3001\u521d\u671f\u5316\u6642\u306b\u3000\u306a\u305c\u304b {}\u3000\u304c\u4e00\u3064\u591a\u3044\u4e8b\u3002\n\u7406\u7531\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001array\u3092\u4f7f\u3046\u5834\u5408\u306f\u3001\u4e00\u3064\u591a\u304f\u56f2\u308f\u306a\u3051\u308c\u3070\u30c0\u30e1\u306e\u3088\u3046\u3067\u3059\n\n\n## for_each\nC++\u3067\u8981\u7d20\u3092\u306a\u3081\u308b\u6642\u306f std::for_each\u304c\u4f7f\u3048\u307e\u3059\n\n```cpp:std#for_each\n        struct HOGE{\n            int         id;\n            bool        flag;\n        };\n\n        std::array<HOGE,3>  hh = {{ {1,true},{2,true},{3,false} }};\n        // std::for_each\n        std::for_each(hh.begin(), hh.end(),\n                      [](HOGE &h){\n                          if((h.id==1)&&(h.flag==true)){\n                              std::cout << \"std::for_each hh\" << std::endl;\n                              break;\n                          }\n                      } );\n\n```\n\nfor_each\u306e\u7b2c\u4e00\u5f15\u6570\u306f\u3001\u958b\u59cb\u30a4\u30c6\u30ec\u30fc\u30bf\u3001\u7b2c\u4e8c\u5f15\u6570\u306f\u7d42\u4e86\u30a4\u30c6\u30ec\u30fc\u30bf\n\u7b2c\u4e09\u5f15\u6570\u306b\u3001\u5b9f\u884c\u3059\u308b\u95a2\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u3092\u6307\u5b9a\u3057\u307e\u3059\n\u5c11\u3057 STL\u3063\u307d\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u306d\n\n\n#range-based for-loop\nstd::for_each \u3068\u4f3c\u305f\u52d5\u4f5c\u3092\u3059\u308b\u3082\u306e\u3068\u3057\u3066 range-based for-loop\u304c\u3042\u308a\u307e\u3059\n\u65e5\u672c\u8a9e\u3060\u3068 \u7bc4\u56f2\u30d9\u30fc\u30b9for\u30eb\u30fc\u30d7 \u3068\u304b\u3001\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u540d\u524d\u306a\u306e\u3067\u82f1\u8a9e\u3067\u3044\u304d\u307e\u3059\n\nstd::for_each\u306b\u6bd4\u3079\u3001\u975e\u5e38\u306b\u3059\u3063\u304d\u308a\u3057\u305f\u6587\u6cd5\u3067\u5168\u3066\u306e\u8981\u7d20\u3092\u306a\u3081\u307e\u3059\nstd::for_each\u3060\u3068 \u59cb\u3081\u3068\u7d42\u308f\u308a\u3092\u6307\u5b9a\u51fa\u6765\u308b\u306e\u3067\u3001\u305d\u3046\u3044\u3046\u7528\u9014\u306e\u5834\u5408\u306f\u305d\u3061\u3089\u3092\u4f7f\u3046\u3079\u304d\u3067\u3059\u306d\n\n```cpp:std#range-based\u3000for-loop\n        struct HOGE{\n            int         id;\n            bool        flag;\n        };\n\n        std::array<HOGE,3>  hh = {{ {1,true},{2,true},{3,false} }};\n        // range-based for-loop\n        for( auto &a: hh){\n            if( (a.id== 1) && (a.flag==true)){\n                std::cout << \"range-based for hh\" << std::endl;\n                break;\n            }\n        }\n```\n\n\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3082\u306a\u304f\u3001\u7c21\u6f54\u306b\u304b\u3051\u307e\u3059\u3002\n\u975e\u5e38\u306b\u4fbf\u5229\u306a\u306e\u3067 \u4f7f\u3063\u3066\u307f\u3066\u4e0b\u3055\u3044\uff01\n\n\n##std::find_if\n\u3084\u3063\u3068\u672c\u547d\u3067\u3059\nstd::find_if\u306f\u3001\u7b2c\u4e00\u5f15\u6570 \u958b\u59cb\u30a4\u30c6\u30ec\u30fc\u30bf\u3001\u7b2c\u4e8c\u5f15\u6570 \u7d42\u4e86\u30a4\u30c6\u30ec\u30fc\u30bf\n\u7b2c\u4e09\u5f15\u6570 \u6761\u4ef6 \u95a2\u6570(\u30aa\u30d6\u30b8\u30a7\u30af\u30c8)\n\n\u3068\u306a\u3063\u3066\u304a\u308a\u307e\u3059\n\n```cpp:std#find_if\n        struct HOGE{\n            int         id;\n            bool        flag;\n        };\n\n        std::array<HOGE,3>  hh = {{ {1,true},{2,true},{3,false} }};\n        // std::find_if\n        auto fi = std::find_if(hh.begin(), hh.end(),\n                       [](HOGE &h){\n                           return( (h.id==1)&&(h.flag==true));\n                       } );\n\n        if(fi != hh.end()){\n            std::cout << \"std::find_if\" << std::endl;\n        }\n```\n\nstd::for_each \u306b\u4f3c\u305f\u5f62\u3067\u3059\u304c\u3001\u7b2c\u4e09\u5f15\u6570\u306b\u306f\u6761\u4ef6\u5f0f\u3092\u6e21\u3057\u307e\u3059\n\u3053\u306e\u6761\u4ef6\u5f0f\u304c true\u306e\u5834\u5408\u306f find_if\u3092\u305d\u3053\u3067\u505c\u6b62\u3057\u3001true\u306b\u306a\u3063\u305f\u6642\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\n\u3069\u308c\u306b\u3082\u4e00\u81f4\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f end() \u304c\u8fd4\u308a\u307e\u3059\n\n\u304a\u305d\u3089\u304f\u3001\u6700\u3082STL\u306e\u6069\u6075\u3092\u6388\u304b\u3063\u305f\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\n\n\n\n##\u756a\u5916\u7de8 std::find\nstd::find\u306f std::find_if\u3068\u9055\u3044\u3001\u7b2c\u4e09\u5f15\u6570\u306f\u6761\u4ef6\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u306f\u306a\u304f\u3001\u5024\u3092\u6307\u5b9a\u3057\u307e\u3059\n\u4f8b\u3048\u3070 \u30b3\u30f3\u30c6\u30ca\u306e\u4e2d\u8eab\u304c int\u7b49\u306e\u5834\u5408\u306f\u3001\u6570\u5b57\u3092\u6307\u5b9a\u3057\u4e00\u81f4\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\n\u4eca\u56de\u306f \u69cb\u9020\u4f53\u306a\u306e\u3067\u3001\u305d\u306e\u307e\u307e\u5024\u3092\u6bd4\u8f03\u3067\u304d\u306a\u3044\u306e\u3067\noperator int() \u3092\u5b9f\u88c5\u3057\u5024\u306e\u6bd4\u8f03\u3092\u3057\u307e\u3059\n\uff08\u5185\u90e8\u306f-1\u3068\u3044\u3046\u30c0\u30df\u30fc\u5024\u3092\u4f7f\u3044\u3000\u30c0\u30b5\u3044\u30b3\u30fc\u30c9\u3067\u3059\u304c\u30fb\u30fb\uff09\n\n\n```cpp:std#find\n        struct HOGE{\n            int         id;\n            bool        flag;\n\n            operator int() {\n                if(flag) {\n                    return id;\n                }else{\n                    return -1;\n                }\n            };\n        };\n\n        std::array<HOGE,3>  hh = {{ {1,true},{2,true},{3,false} }};\n        // std::find\n        auto f = std::find(hh.begin(), hh.end(), 1);\n\n        if(fi != hh.end()){\n            std::cout << \"std::find\" << std::endl;\n        }\n```\n\n\n\u3042\u308b\u3044\u306f\u3001int\u306b\u305b\u305a\u69cb\u9020\u4f53\u3067\u6bd4\u8f03\u3059\u308b\u306b\u306f\u3001operator==\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\n\n```cpp:std#find\n        struct HOGE{\n            int         id;\n            bool        flag;\n\n            bool operator ==(const HOGE &h) {\n                return( (h.flag==true)&&(this->id==h.id) );\n            }\n        };\n\n        std::array<HOGE,3>  hh = {{ {1,true},{2,true},{3,false} }};\n        // std::find\n        auto f = std::find(hh.begin(), hh.end(), HOGE{1,true});\n\n        if(f != hh.end()){\n            std::cout << \"std::find\" << std::endl;\n        }\n```\n\n\u5b9f\u884c\u901f\u5ea6\u3068\u304b\u591a\u5c11\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u3042\u308a\u305d\u3046\u3060\u3051\u3069\u3001operator==\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3068\n\u3059\u3093\u306a\u308a\u66f8\u304f\u4e8b\u3082\u51fa\u6765\u307e\u3059\n\n\u304c\n\n\u3068\u8907\u6570\u6761\u4ef6\u306efind\u306f  find_if\u3092\u4f7f\u3046\u306e\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\n\n\u3063\u3066\u3053\u3068\u3067\u3001 std::find\u3001std::find_if\n\u4eca\u56de\u306f\u3058\u3081\u3066STL\u3092\u30de\u30c8\u30e2\u306b\u4ed5\u4e8b\u306b\u4f7f\u3063\u3066\u3000\u975e\u5e38\u306b\u4fbf\u5229\u3060\u3063\u305f\u306e\u3067\n\u30aa\u30b9\u30b9\u30e1\u3057\u3066\u304a\u304d\u307e\u3059\n\n\n\n\u307e\u305f find\u306f\u3001set\u3084map\u3001unordered_map\u7b49\u306e\u5834\u5408\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u3082\u306e\u3092\u4f7f\u3046\u3068\n\u4e8c\u5206\u6728\u3084\u30cf\u30c3\u30b7\u30e5\u3092\u4f7f\u3044\u691c\u7d22\u3057\u3066\u304f\u308c\u308b\u306e\u3067\n\u305d\u3061\u3089\u3092\u4f7f\u3063\u3066\u4e0b\u3055\u3044\uff01\n\n\n", "tags": ["C++11", "STL", "algorithm"]}