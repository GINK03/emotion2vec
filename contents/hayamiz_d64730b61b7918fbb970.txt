{"context": " More than 1 year has passed since last update.Linux\u30ab\u30fc\u30cd\u30eb\u306emake\u3068\u304b\u3001\u5b9f\u884c\u306b\u6642\u9593\u306e\u304b\u304b\u308b\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3001\u7d42\u308f\u308b\u306e\u3092\u5f85\u3063\u3066\u773a\u3081\u308b\u306e\u306f\u8f9b\u3044\u3002\u3067\u3082\u305d\u306e\u9699\u306b\u5225\u306e\u3053\u3068\u3092\u3084\u308b\u3068\u3001\u305d\u306e\u307e\u307e\u5b8c\u4e86\u3092\u5f85\u3063\u3066\u3044\u308b\u306e\u3092\u5fd8\u308c\u3066\u3057\u307e\u3063\u3066\u6642\u9593\u3092\u7121\u99c4\u306b\u3057\u305f\u6c17\u6301\u3061\u306b\u306a\u3063\u3066\u8f9b\u3044\u3002&& growlnotify \u3068\u304b\u30b3\u30de\u30f3\u30c9\u306e\u5f8c\u306b\u3064\u3051\u308b\u306e\u3092\u5fd8\u308c\u305f\u3053\u3068\u306b\u6c17\u304c\u3064\u3044\u3066\u3001Ctrl-C\u3067\u4e00\u65e6\u6b62\u3081\u308b\u304b\u3069\u3046\u304b\u60a9\u3080\u306e\u304c\u8f9b\u3044\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\nzsh\u306e\u30d5\u30c3\u30af\u3092\u9069\u5f53\u306b\u4f7f\u3063\u3066\u3001\u666e\u901a\u306bzsh\u3067\u30b3\u30de\u30f3\u30c9\u3092\u53e9\u304f\u3060\u3051\u3067\u3001\u95be\u5024\u4ee5\u4e0a\u306e\u6642\u9593\u304c\u304b\u304b\u308b\u30b3\u30de\u30f3\u30c9\u304c\u7d42\u308f\u308b\u3068\u901a\u77e5\u3057\u3066\u304f\u308c\u308b\u8a2d\u5b9a\u3092\u8003\u3048\u3066\u307f\u305f\u3002\n\nMac\u306eGrowl \u5bfe\u5fdc ( growlnotify \u5fc5\u9808 )\nLinux\u306e\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u901a\u77e5\u5bfe\u5fdc ( notify-send \u5fc5\u9808 )\nSSH\u63a5\u7d9a\u5148\u3067\u306f\u30c8\u30ea\u30ac\u7528\u6587\u5b57\u5217\u3092\u51fa\u529b\u3059\u308b\u306e\u3067\u3001iTerm2\u306a\u3069\u3092\u4f7f\u3046\u3068\u901a\u77e5\u53ef\u80fd\n\n\n\u30c8\u30ea\u30ac\u8a2d\u5b9a\u306f\u30b3\u30e1\u30f3\u30c8\u53c2\u7167\niTerm2\u306e\u8a2d\u5b9a\u2192 Mac - iTerm2\u3067\u7279\u5b9a\u6587\u5b57\u5217\u3092\u30cf\u30a4\u30e9\u30a4\u30c8\u3084Growl\u901a\u77e5\u3059\u308b - Qiita [\u30ad\u30fc\u30bf] \n\n\n\n.zshrc\u306a\u3069\u306b\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u52d5\u304f\u306f\u305a\u3002\n__timetrack_threshold\u306b\u8a2d\u5b9a\u3059\u308b\u79d2\u6570\u3067\u3001\u901a\u77e5\u306e\u95be\u5024\u3092\u8a2d\u5b9a\u3067\u304d\u308b\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f20\u79d2\u3002\n\u5b9f\u884c\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3082\u901a\u77e5\u3055\u308c\u305f\u304f\u306a\u3044\u30b3\u30de\u30f3\u30c9(vim\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u7de8\u96c6\u3068\u304bssh\u3068\u304b)\u3092 __timetrack_ignore_progs \u306b\u5217\u6319\u3059\u308b\u3068\u3001\u305d\u308c\u3089\u306f\u901a\u77e5\u3055\u308c\u306a\u304f\u306a\u308b\u3002\n\u3061\u3087\u3063\u3068\u66f8\u304d\u63db\u3048\u308c\u3070\u3001\u30e1\u30fc\u30eb\u901a\u77e5\u3068\u304b\u3082\u4e00\u5fdc\u51fa\u6765\u308b\u3068\u601d\u3046\u3051\u3069\u3084\u3089\u306a\u3044\u307b\u3046\u304c\u5730\u7403\u306b\u3084\u3055\u3057\u3044\u3068\u601d\u3046\u3002\nautoload -U add-zsh-hook 2>/dev/null || return\n\n#\n# Notification of local host command\n# ----------------------------------\n#\n# Automatic notification via growlnotify / notify-send\n#\n#\n# Notification of remote host command\n# -----------------------------------\n#\n# \"==ZSH LONGRUN COMMAND TRACKER==\" is printed after long run command execution\n# You can utilize it as a trigger\n#\n# ## Example: iTerm2 trigger( http://qiita.com/yaotti/items/3764572ea1e1972ba928 )\n#\n#  * Trigger regex: ==ZSH LONGRUN COMMAND TRACKER==(.*)\n#  * Parameters: \\1\n#\n\n__timetrack_threshold=20 # seconds\nread -r -d '' __timetrack_ignore_progs <<EOF\nless\nemacs vi vim\nssh mosh telnet nc netcat\ngdb\nEOF\n\nexport __timetrack_threshold\nexport __timetrack_ignore_progs\n\nfunction __my_preexec_start_timetrack() {\n    local command=$1\n\n    export __timetrack_start=`date +%s`\n    export __timetrack_command=\"$command\"\n}\n\nfunction __my_preexec_end_timetrack() {\n    local exec_time\n    local command=$__timetrack_command\n    local prog=$(echo $command|awk '{print $1}')\n    local notify_method\n    local message\n\n    export __timetrack_end=`date +%s`\n\n    if test -n \"${REMOTEHOST}${SSH_CONNECTION}\"; then\n        notify_method=\"remotehost\"\n    elif which growlnotify >/dev/null 2>&1; then\n        notify_method=\"growlnotify\"\n    elif which notify-send >/dev/null 2>&1; then\n        notify_method=\"notify-send\"\n    else\n        return\n    fi\n\n    if [ -z \"$__timetrack_start\" ] || [ -z \"$__timetrack_threshold\" ]; then\n        return\n    fi\n\n    for ignore_prog in $(echo $__timetrack_ignore_progs); do\n        [ \"$prog\" = \"$ignore_prog\" ] && return\n    done\n\n    exec_time=$((__timetrack_end-__timetrack_start))\n    if [ -z \"$command\" ]; then\n        command=\"<UNKNOWN>\"\n    fi\n\n    message=\"Command finished!\\nTime: $exec_time seconds\\nCOMMAND: $command\"\n\n    if [ \"$exec_time\" -ge \"$__timetrack_threshold\" ]; then\n        case $notify_method in\n            \"remotehost\" )\n        # show trigger string\n                echo -e \"\\e[0;30m==ZSH LONGRUN COMMAND TRACKER==$(hostname -s): $command ($exec_time seconds)\\e[m\"\n        sleep 1\n        # wait 1 sec, and then delete trigger string\n        echo -e \"\\e[1A\\e[2K\"\n                ;;\n            \"growlnotify\" )\n                echo \"$message\" | growlnotify -n \"ZSH timetracker\" --appIcon Terminal\n                ;;\n            \"notify-send\" )\n                notify-send \"ZSH timetracker\" \"$message\"\n                ;;\n        esac\n    fi\n\n    unset __timetrack_start\n    unset __timetrack_command\n}\n\nif which growlnotify >/dev/null 2>&1 ||\n    which notify-send >/dev/null 2>&1 ||\n    test -n \"${REMOTEHOST}${SSH_CONNECTION}\"; then\n    add-zsh-hook preexec __my_preexec_start_timetrack\n    add-zsh-hook precmd __my_preexec_end_timetrack\nfi\n\n\nLinux\u30ab\u30fc\u30cd\u30eb\u306emake\u3068\u304b\u3001\u5b9f\u884c\u306b\u6642\u9593\u306e\u304b\u304b\u308b\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3001\u7d42\u308f\u308b\u306e\u3092\u5f85\u3063\u3066\u773a\u3081\u308b\u306e\u306f\u8f9b\u3044\u3002\u3067\u3082\u305d\u306e\u9699\u306b\u5225\u306e\u3053\u3068\u3092\u3084\u308b\u3068\u3001\u305d\u306e\u307e\u307e\u5b8c\u4e86\u3092\u5f85\u3063\u3066\u3044\u308b\u306e\u3092\u5fd8\u308c\u3066\u3057\u307e\u3063\u3066\u6642\u9593\u3092\u7121\u99c4\u306b\u3057\u305f\u6c17\u6301\u3061\u306b\u306a\u3063\u3066\u8f9b\u3044\u3002` && growlnotify` \u3068\u304b\u30b3\u30de\u30f3\u30c9\u306e\u5f8c\u306b\u3064\u3051\u308b\u306e\u3092\u5fd8\u308c\u305f\u3053\u3068\u306b\u6c17\u304c\u3064\u3044\u3066\u3001Ctrl-C\u3067\u4e00\u65e6\u6b62\u3081\u308b\u304b\u3069\u3046\u304b\u60a9\u3080\u306e\u304c\u8f9b\u3044\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\n\nzsh\u306e\u30d5\u30c3\u30af\u3092\u9069\u5f53\u306b\u4f7f\u3063\u3066\u3001\u666e\u901a\u306bzsh\u3067\u30b3\u30de\u30f3\u30c9\u3092\u53e9\u304f\u3060\u3051\u3067\u3001\u95be\u5024\u4ee5\u4e0a\u306e\u6642\u9593\u304c\u304b\u304b\u308b\u30b3\u30de\u30f3\u30c9\u304c\u7d42\u308f\u308b\u3068\u901a\u77e5\u3057\u3066\u304f\u308c\u308b\u8a2d\u5b9a\u3092\u8003\u3048\u3066\u307f\u305f\u3002\n\n* Mac\u306eGrowl \u5bfe\u5fdc ( growlnotify \u5fc5\u9808 )\n* Linux\u306e\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u901a\u77e5\u5bfe\u5fdc ( notify-send \u5fc5\u9808 )\n* SSH\u63a5\u7d9a\u5148\u3067\u306f\u30c8\u30ea\u30ac\u7528\u6587\u5b57\u5217\u3092\u51fa\u529b\u3059\u308b\u306e\u3067\u3001iTerm2\u306a\u3069\u3092\u4f7f\u3046\u3068\u901a\u77e5\u53ef\u80fd\n  * \u30c8\u30ea\u30ac\u8a2d\u5b9a\u306f\u30b3\u30e1\u30f3\u30c8\u53c2\u7167\n  * iTerm2\u306e\u8a2d\u5b9a\u2192 [Mac - iTerm2\u3067\u7279\u5b9a\u6587\u5b57\u5217\u3092\u30cf\u30a4\u30e9\u30a4\u30c8\u3084Growl\u901a\u77e5\u3059\u308b - Qiita [\u30ad\u30fc\u30bf]](http://qiita.com/yaotti/items/3764572ea1e1972ba928) \n\n`.zshrc`\u306a\u3069\u306b\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u52d5\u304f\u306f\u305a\u3002\n\n`__timetrack_threshold`\u306b\u8a2d\u5b9a\u3059\u308b\u79d2\u6570\u3067\u3001\u901a\u77e5\u306e\u95be\u5024\u3092\u8a2d\u5b9a\u3067\u304d\u308b\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f20\u79d2\u3002\n\u5b9f\u884c\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3082\u901a\u77e5\u3055\u308c\u305f\u304f\u306a\u3044\u30b3\u30de\u30f3\u30c9(vim\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u7de8\u96c6\u3068\u304bssh\u3068\u304b)\u3092 `__timetrack_ignore_progs` \u306b\u5217\u6319\u3059\u308b\u3068\u3001\u305d\u308c\u3089\u306f\u901a\u77e5\u3055\u308c\u306a\u304f\u306a\u308b\u3002\n\n\u3061\u3087\u3063\u3068\u66f8\u304d\u63db\u3048\u308c\u3070\u3001\u30e1\u30fc\u30eb\u901a\u77e5\u3068\u304b\u3082\u4e00\u5fdc\u51fa\u6765\u308b\u3068\u601d\u3046\u3051\u3069\u3084\u3089\u306a\u3044\u307b\u3046\u304c\u5730\u7403\u306b\u3084\u3055\u3057\u3044\u3068\u601d\u3046\u3002\n\n~~~zsh\nautoload -U add-zsh-hook 2>/dev/null || return\n\n#\n# Notification of local host command\n# ----------------------------------\n#\n# Automatic notification via growlnotify / notify-send\n#\n#\n# Notification of remote host command\n# -----------------------------------\n#\n# \"==ZSH LONGRUN COMMAND TRACKER==\" is printed after long run command execution\n# You can utilize it as a trigger\n#\n# ## Example: iTerm2 trigger( http://qiita.com/yaotti/items/3764572ea1e1972ba928 )\n#\n#  * Trigger regex: ==ZSH LONGRUN COMMAND TRACKER==(.*)\n#  * Parameters: \\1\n#\n\n__timetrack_threshold=20 # seconds\nread -r -d '' __timetrack_ignore_progs <<EOF\nless\nemacs vi vim\nssh mosh telnet nc netcat\ngdb\nEOF\n\nexport __timetrack_threshold\nexport __timetrack_ignore_progs\n\nfunction __my_preexec_start_timetrack() {\n    local command=$1\n\n    export __timetrack_start=`date +%s`\n    export __timetrack_command=\"$command\"\n}\n\nfunction __my_preexec_end_timetrack() {\n    local exec_time\n    local command=$__timetrack_command\n    local prog=$(echo $command|awk '{print $1}')\n    local notify_method\n    local message\n\n    export __timetrack_end=`date +%s`\n\n    if test -n \"${REMOTEHOST}${SSH_CONNECTION}\"; then\n        notify_method=\"remotehost\"\n    elif which growlnotify >/dev/null 2>&1; then\n        notify_method=\"growlnotify\"\n    elif which notify-send >/dev/null 2>&1; then\n        notify_method=\"notify-send\"\n    else\n        return\n    fi\n\n    if [ -z \"$__timetrack_start\" ] || [ -z \"$__timetrack_threshold\" ]; then\n        return\n    fi\n\n    for ignore_prog in $(echo $__timetrack_ignore_progs); do\n        [ \"$prog\" = \"$ignore_prog\" ] && return\n    done\n\n    exec_time=$((__timetrack_end-__timetrack_start))\n    if [ -z \"$command\" ]; then\n        command=\"<UNKNOWN>\"\n    fi\n\n    message=\"Command finished!\\nTime: $exec_time seconds\\nCOMMAND: $command\"\n\n    if [ \"$exec_time\" -ge \"$__timetrack_threshold\" ]; then\n        case $notify_method in\n            \"remotehost\" )\n\t\t# show trigger string\n                echo -e \"\\e[0;30m==ZSH LONGRUN COMMAND TRACKER==$(hostname -s): $command ($exec_time seconds)\\e[m\"\n\t\tsleep 1\n\t\t# wait 1 sec, and then delete trigger string\n\t\techo -e \"\\e[1A\\e[2K\"\n                ;;\n            \"growlnotify\" )\n                echo \"$message\" | growlnotify -n \"ZSH timetracker\" --appIcon Terminal\n                ;;\n            \"notify-send\" )\n                notify-send \"ZSH timetracker\" \"$message\"\n                ;;\n        esac\n    fi\n\n    unset __timetrack_start\n    unset __timetrack_command\n}\n\nif which growlnotify >/dev/null 2>&1 ||\n    which notify-send >/dev/null 2>&1 ||\n    test -n \"${REMOTEHOST}${SSH_CONNECTION}\"; then\n    add-zsh-hook preexec __my_preexec_start_timetrack\n    add-zsh-hook precmd __my_preexec_end_timetrack\nfi\n~~~", "tags": ["Mac", "OSX", "Zsh", "Growl", "Linux"]}