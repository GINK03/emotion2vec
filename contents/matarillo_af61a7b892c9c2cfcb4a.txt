{"tags": ["C#", "yhpg", "\u3069\u3046\u66f8\u304f"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\u554f\u984c\u306f\u3053\u3061\u3089\nhttp://qiita.com/Nabetani/items/23ebddb44f0234e7fb15\n\u975e\u5faa\u74b0\u6709\u5411\u30b0\u30e9\u30d5(DAG)\u63a2\u7d22\u3002\u30b0\u30e9\u30d5\u69cb\u9020\u3092\u4f5c\u308b\u306b\u3042\u305f\u3063\u3066\u3001NuGet\u306e System.Collections.Immutable \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3044\u307e\u3057\u305f\u304c\u3001\u30b0\u30e9\u30d5\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u4f7f\u3063\u3066\u306a\u3044\u3067\u3059\u3002\n\u30b0\u30e9\u30d5\u3092\u300c\u5207\u308b\u300d\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u306e\u3067\u3001\u30eb\u30fc\u30c8\u3092\u6570\u3048\u4e0a\u3052\u3066\u304b\u3089\u7d5e\u308a\u8fbc\u3080\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\nProgram.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Collections.Immutable; // from NuGet\nusing System.Linq;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Test(\"befi\", \"14,16,24,26\");\n        Test(\"abc\", \"14,15,16,24,25,26,34,35,36\");\n        Test(\"de\", \"14,15,16,24,26,34,35,36\");\n        Test(\"fghi\", \"14,15,16,24,25,26,34,35,36\");\n        Test(\"abcdefghi\", \"-\");\n        Test(\"ag\", \"24,25,26,34,35,36\");\n        Test(\"dh\", \"14,15,16,34,35,36\");\n        Test(\"bf\", \"14,15,16,24,25,26\");\n        Test(\"ch\", \"15,25,35\");\n        Test(\"be\", \"14,16,24,26,34,36\");\n        Test(\"ci\", \"14,15,24,25,34,35\");\n        Test(\"cgi\", \"15,24,25,35\");\n        Test(\"acgi\", \"24,25,35\");\n        Test(\"cdefghi\", \"15,35\");\n        Test(\"acdefghi\", \"35\");\n        Test(\"cdegi\", \"15,24,35\");\n        Test(\"bcdegi\", \"24\");\n        Test(\"afh\", \"14,15,16,24,25,26,34,35,36\");\n        Test(\"abfh\", \"14,15,16,24,25,26\");\n        Test(\"dfh\", \"14,15,16,34,35,36\");\n        Test(\"cdfh\", \"15,35\");\n        Test(\"deh\", \"14,15,16,34,35,36\");\n        Test(\"cdeh\", \"15,35\");\n        Test(\"abefgh\", \"24,26\");\n        Test(\"abdefgh\", \"-\");\n        Test(\"acfghi\", \"25,35\");\n        Test(\"acdfghi\", \"35\");\n        Test(\"cegi\", \"15,24,35\");\n        Test(\"abcfhi\", \"15,25\");\n        Test(\"abcefhi\", \"-\");\n        Test(\"abdi\", \"14,15,16,24,34,35,36\");\n        Test(\"abdfi\", \"14,15,16,24\");\n        Test(\"bdi\", \"14,15,16,24,34,35,36\");\n        Test(\"bdfi\", \"14,15,16,24\");\n        Test(\"adfh\", \"14,15,16,34,35,36\");\n        Test(\"adfgh\", \"34,35,36\");\n        Test(\"acdfhi\", \"15,35\");\n        Test(\"bcdfgi\", \"24\");\n        Test(\"bcdfghi\", \"-\");\n        Test(\"defi\", \"14,15,16,24,34,35,36\");\n        Test(\"defhi\", \"14,15,16,34,35,36\");\n        Test(\"cdefg\", \"15,24,26,35\");\n        Test(\"cdefgi\", \"15,24,35\");\n        Test(\"bdefg\", \"24,26\");\n        Test(\"bdefgi\", \"24\");\n    }\n\n    static void Test(string input, string expected)\n    {\n        var actual = Solve(input);\n        var success = (expected == actual);\n        Console.WriteLine(success ? \"Success\" : \"Failure\");\n    }\n\n    static string Solve(string input)\n    {\n        var results = allRoutes\n            .Where(p => p.All(x => !input.Contains(x)))\n            .Select(x => new string(new[] { x.First(), x.Last() }))\n            .OrderBy(x => x)\n            .Distinct();\n        var result = string.Join(\",\", results);\n        return (result == \"\") ? \"-\" : result;\n    }\n\n    static IEnumerable<ImmutableStack<char>> allRoutes = Graph.Empty\n        .Add(' ', '1').Add(' ', '2').Add(' ', '3')\n        .Add('1', 'a').Add('a', 'b').Add('b', 'c').Add('c', '4')\n        .Add('2', 'd').Add('d', 'e').Add('e', '5')\n        .Add('3', 'f').Add('f', 'g').Add('g', 'h').Add('h', 'i').Add('i', '6')\n        .Add('1', 'g').Add('b', '5').Add('c', '6')\n        .Add('2', 'h').Add('d', 'c')\n        .Add('3', 'b').Add('g', 'e').Add('g', 'c').Add('h', '4')\n        .TraverseFrom(' ')\n        .ToArray();\n}\n\n// DAG\nstruct Graph\n{\n    public static readonly Graph Empty =\n      new Graph(ImmutableDictionary<char, IImmutableSet<char>>.Empty);\n\n    private ImmutableDictionary<char, IImmutableSet<char>> graph;\n\n    private Graph(ImmutableDictionary<char, IImmutableSet<char>> graph)\n    {\n        this.graph = graph;\n    }\n\n    public Graph Add(char node)\n    {\n        if (graph.ContainsKey(node))\n            return this;\n        return new Graph(graph.Add(node, ImmutableHashSet<char>.Empty));\n    }\n\n    public Graph Add(char from, char to)\n    {\n        var g = this.Add(from).Add(to);\n        return new Graph(\n          g.graph.SetItem(\n            from,\n            g.graph[from].Add(to)));\n    }\n\n    public IImmutableSet<char> Edges(char node)\n    {\n        return graph.ContainsKey(node) ?\n          graph[node] :\n          ImmutableHashSet<char>.Empty;\n    }\n\n    public IEnumerable<ImmutableStack<char>> TraverseFrom(char start)\n    {\n        var edges = Edges(start);\n        if (edges.Count == 0)\n        {\n            yield return ImmutableStack<char>.Empty;\n        }\n        else\n        {\n            foreach (var node in edges)\n                foreach (var path in TraverseFrom(node))\n                    yield return path.Push(node);\n        }\n    }\n}\n\n\n\u554f\u984c\u306f\u3053\u3061\u3089\nhttp://qiita.com/Nabetani/items/23ebddb44f0234e7fb15\n\n\u975e\u5faa\u74b0\u6709\u5411\u30b0\u30e9\u30d5(DAG)\u63a2\u7d22\u3002\u30b0\u30e9\u30d5\u69cb\u9020\u3092\u4f5c\u308b\u306b\u3042\u305f\u3063\u3066\u3001NuGet\u306e System.Collections.Immutable \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3044\u307e\u3057\u305f\u304c\u3001\u30b0\u30e9\u30d5\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u4f7f\u3063\u3066\u306a\u3044\u3067\u3059\u3002\n\n\u30b0\u30e9\u30d5\u3092\u300c\u5207\u308b\u300d\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u306e\u3067\u3001\u30eb\u30fc\u30c8\u3092\u6570\u3048\u4e0a\u3052\u3066\u304b\u3089\u7d5e\u308a\u8fbc\u3080\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n```csharp:Program.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Collections.Immutable; // from NuGet\nusing System.Linq;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Test(\"befi\", \"14,16,24,26\");\n        Test(\"abc\", \"14,15,16,24,25,26,34,35,36\");\n        Test(\"de\", \"14,15,16,24,26,34,35,36\");\n        Test(\"fghi\", \"14,15,16,24,25,26,34,35,36\");\n        Test(\"abcdefghi\", \"-\");\n        Test(\"ag\", \"24,25,26,34,35,36\");\n        Test(\"dh\", \"14,15,16,34,35,36\");\n        Test(\"bf\", \"14,15,16,24,25,26\");\n        Test(\"ch\", \"15,25,35\");\n        Test(\"be\", \"14,16,24,26,34,36\");\n        Test(\"ci\", \"14,15,24,25,34,35\");\n        Test(\"cgi\", \"15,24,25,35\");\n        Test(\"acgi\", \"24,25,35\");\n        Test(\"cdefghi\", \"15,35\");\n        Test(\"acdefghi\", \"35\");\n        Test(\"cdegi\", \"15,24,35\");\n        Test(\"bcdegi\", \"24\");\n        Test(\"afh\", \"14,15,16,24,25,26,34,35,36\");\n        Test(\"abfh\", \"14,15,16,24,25,26\");\n        Test(\"dfh\", \"14,15,16,34,35,36\");\n        Test(\"cdfh\", \"15,35\");\n        Test(\"deh\", \"14,15,16,34,35,36\");\n        Test(\"cdeh\", \"15,35\");\n        Test(\"abefgh\", \"24,26\");\n        Test(\"abdefgh\", \"-\");\n        Test(\"acfghi\", \"25,35\");\n        Test(\"acdfghi\", \"35\");\n        Test(\"cegi\", \"15,24,35\");\n        Test(\"abcfhi\", \"15,25\");\n        Test(\"abcefhi\", \"-\");\n        Test(\"abdi\", \"14,15,16,24,34,35,36\");\n        Test(\"abdfi\", \"14,15,16,24\");\n        Test(\"bdi\", \"14,15,16,24,34,35,36\");\n        Test(\"bdfi\", \"14,15,16,24\");\n        Test(\"adfh\", \"14,15,16,34,35,36\");\n        Test(\"adfgh\", \"34,35,36\");\n        Test(\"acdfhi\", \"15,35\");\n        Test(\"bcdfgi\", \"24\");\n        Test(\"bcdfghi\", \"-\");\n        Test(\"defi\", \"14,15,16,24,34,35,36\");\n        Test(\"defhi\", \"14,15,16,34,35,36\");\n        Test(\"cdefg\", \"15,24,26,35\");\n        Test(\"cdefgi\", \"15,24,35\");\n        Test(\"bdefg\", \"24,26\");\n        Test(\"bdefgi\", \"24\");\n    }\n\n    static void Test(string input, string expected)\n    {\n        var actual = Solve(input);\n        var success = (expected == actual);\n        Console.WriteLine(success ? \"Success\" : \"Failure\");\n    }\n\n    static string Solve(string input)\n    {\n        var results = allRoutes\n            .Where(p => p.All(x => !input.Contains(x)))\n            .Select(x => new string(new[] { x.First(), x.Last() }))\n            .OrderBy(x => x)\n            .Distinct();\n        var result = string.Join(\",\", results);\n        return (result == \"\") ? \"-\" : result;\n    }\n\n    static IEnumerable<ImmutableStack<char>> allRoutes = Graph.Empty\n        .Add(' ', '1').Add(' ', '2').Add(' ', '3')\n        .Add('1', 'a').Add('a', 'b').Add('b', 'c').Add('c', '4')\n        .Add('2', 'd').Add('d', 'e').Add('e', '5')\n        .Add('3', 'f').Add('f', 'g').Add('g', 'h').Add('h', 'i').Add('i', '6')\n        .Add('1', 'g').Add('b', '5').Add('c', '6')\n        .Add('2', 'h').Add('d', 'c')\n        .Add('3', 'b').Add('g', 'e').Add('g', 'c').Add('h', '4')\n        .TraverseFrom(' ')\n        .ToArray();\n}\n\n// DAG\nstruct Graph\n{\n    public static readonly Graph Empty =\n      new Graph(ImmutableDictionary<char, IImmutableSet<char>>.Empty);\n\n    private ImmutableDictionary<char, IImmutableSet<char>> graph;\n\n    private Graph(ImmutableDictionary<char, IImmutableSet<char>> graph)\n    {\n        this.graph = graph;\n    }\n\n    public Graph Add(char node)\n    {\n        if (graph.ContainsKey(node))\n            return this;\n        return new Graph(graph.Add(node, ImmutableHashSet<char>.Empty));\n    }\n\n    public Graph Add(char from, char to)\n    {\n        var g = this.Add(from).Add(to);\n        return new Graph(\n          g.graph.SetItem(\n            from,\n            g.graph[from].Add(to)));\n    }\n\n    public IImmutableSet<char> Edges(char node)\n    {\n        return graph.ContainsKey(node) ?\n          graph[node] :\n          ImmutableHashSet<char>.Empty;\n    }\n\n    public IEnumerable<ImmutableStack<char>> TraverseFrom(char start)\n    {\n        var edges = Edges(start);\n        if (edges.Count == 0)\n        {\n            yield return ImmutableStack<char>.Empty;\n        }\n        else\n        {\n            foreach (var node in edges)\n                foreach (var path in TraverseFrom(node))\n                    yield return path.Push(node);\n        }\n    }\n}\n```\n"}