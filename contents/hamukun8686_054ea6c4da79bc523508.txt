{"context": " More than 1 year has passed since last update.Siv3D\u3067STG\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u76ee\u6a19\u306f\n\n\uff11\uff0e200\u884c\u4ee5\u5185\u306b\u53ce\u3081\u308b\u3053\u3068\uff08Main\u306e\u307f\uff09\n\uff12\uff0ehttp://play-siv3d.hateblo.jp/ \u3068\u4f3c\u305f\u66f8\u304d\u65b9\n\uff13\uff0e\u83ef\u3084\u304b\u3067\u3042\u308b\u3053\u3068\n\uff14\uff0eSTG\u3068\u3057\u3066\u904a\u3079\u308b\u3053\u3068\n\n\u3067\u3059\u3002\n\u73fe\u72b6\n\n280\u884c\u2192\u9577\u3044\n\u753b\u9762\u2192\u5730\u5473\nSTG\u2192\u6b7b\u306a\u306a\u3044\n\n\u6539\u5584\u7b56\u6c42\u3080\n\nMain.cpp\n\n# include <Siv3D.hpp>\n//March2014\n\nclass Mover\n{\npublic:\n\n    Mover(\n        const Vec2& pos, \n        const Vec2& velocity, \n        double radius\n        ) :\n        m_pos(pos),\n        m_velocity(velocity),\n        m_radius(radius)\n    {\n\n    }\n\n    virtual void update()\n    {\n        m_pos += m_velocity;\n\n        if (!RectF(Window::Size()).intersects(Circle(m_pos, m_radius)))\n        {\n            m_isActive = false;\n        }\n\n        ++m_count;\n    }\n\n    virtual void draw()\n    {\n        RectF(2.0 * Vec2(m_radius, m_radius)).setCenter(m_pos).draw();\n    }\n\n    void setPos(const Vec2& pos)\n    {\n        m_pos = pos;\n    }\n\n    const Vec2& getPos() const\n    {\n        return m_pos;\n    }\n\n    void setRadius(double radius)\n    {\n        m_radius = radius;\n    }\n\n    double getRadius() const\n    {\n        return m_radius;\n    }\n\n    void setActive(bool isActive)\n    {\n        m_isActive = isActive;\n    }\n\n    bool isActive() const\n    {\n        return m_isActive;\n    }\n\nprotected:\n\n    Vec2 m_pos;\n\n    Vec2 m_velocity;\n\n    double m_radius;\n\n    bool m_isActive = true;\n\n    unsigned m_count = 0;\n\n};\n\nclass Object : public Mover\n{\npublic:\n\n    Object(\n        const Vec2& pos,\n        vector<std::shared_ptr<Mover>>& bullets,\n        const Vec2& velocity,\n        double radius       \n        ) :\n        Mover(pos, velocity, radius),\n        m_bullets(bullets)\n    {\n\n    }\n\n    void update() override\n    {\n        Mover::update();\n\n        if (m_count % 30 == 0)\n        {\n            m_bullets.emplace_back(std::make_shared<Mover>(m_pos, Vec2::Down * 5.0, 2.5));\n        }\n    }\n\n    void setHp(int hp)\n    {\n        m_hp = hp;\n\n        if (m_hp <= 0)\n        {\n            m_isActive = false;\n        }\n    }\n\n    int getHp() const\n    {\n        return m_hp;\n    }\n\nprotected:\n\n    int m_hp = 3;\n\n    vector<std::shared_ptr<Mover>>& m_bullets;\n};\n\nclass Player : public Object\n{\npublic:\n\n    Player(\n        const Vec2& pos, \n        vector<std::shared_ptr<Mover>>& bullets,\n        const Vec2& velocity = Vec2(0.0, 0.0), \n        double radius = 10.0\n        ) :\n        Object(pos, bullets, velocity, radius)\n    {\n        m_hp = 10;\n    }\n\n    void update() override\n    {\n        m_velocity = Vec2(0.0, 0.0);\n\n        const double speed = 5.0;\n\n        if (Input::KeyLeft.pressed)\n        {\n            m_velocity += Vec2::Left * speed;\n        }\n        if (Input::KeyRight.pressed)\n        {\n            m_velocity += Vec2::Right * speed;\n        }\n        if (Input::KeyUp.pressed)\n        {\n            m_velocity += Vec2::Up * speed;\n        }\n        if (Input::KeyDown.pressed)\n        {\n            m_velocity += Vec2::Down * speed;\n        }\n        if (Input::KeyZ.pressed)\n        {\n            m_bullets.emplace_back(std::make_shared<Mover>(m_pos, Vec2::Up * 20.0, 10.0));\n        }\n\n        if (RectF(Window::Size()).contains(Circle(m_pos + m_velocity, m_radius)))\n        {\n            Mover::update();\n        }\n    }\n};\n\nbool CheckBullet(const std::shared_ptr<Object>& Object, const std::shared_ptr<Mover>& bullet)\n{\n    const Circle circleBullet(bullet->getPos(), bullet->getRadius());\n\n    const Circle circleObject(Object->getPos(), Object->getRadius());\n\n    if (circleBullet.intersects(circleObject))\n    {\n        Object->setHp(Object->getHp() - 1);\n\n        bullet->setActive(false);\n\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n\nvoid Main()\n{\n    Window::SetTitle(L\"Z:\u6253\u3064 \u5341\u5b57\u30ad\u30fc:\u79fb\u52d5\");\n\n    int score = 0;\n\n    const Vec2 startPos = Vec2(Window::Width() / 2.0, Window::Height() * 4.0 / 5.0);\n\n    vector<std::shared_ptr<Object>> enemies;\n    vector<std::shared_ptr<Mover>> bulletsEnemy;\n    vector<std::shared_ptr<Mover>> bulletsPlayer;\n    std::shared_ptr<Player> player = std::make_shared<Player>(startPos, bulletsPlayer);\n\n    while (System::Update())\n    {\n        if (System::FrameCount() % Random(30, 60) == 0)\n        {\n            enemies.emplace_back(std::make_shared<Object>(RandomVec2(Window::Width(), 0.0), bulletsEnemy, Vec2(0.0, 1.0), 20.0));\n        }\n\n        for (auto& enemy : enemies)\n        {\n            enemy->update();\n        }\n\n        for (auto& bullet : bulletsEnemy)\n        {\n            bullet->update();\n\n            if (CheckBullet(player, bullet))\n            {\n                Rect(Window::Size()).draw(Palette::Red);\n            }\n        }\n\n        for (auto& bullet : bulletsPlayer)\n        {\n            bullet->update();\n\n            for (auto& enemy : enemies)\n            {\n                if (CheckBullet(enemy, bullet))\n                {\n                    score += 1;\n                }\n            }\n        }\n\n        player->update();\n\n        Erase_if(bulletsEnemy, [](const std::shared_ptr<Mover>& bullet){return !bullet->isActive(); });\n        Erase_if(bulletsPlayer, [](const std::shared_ptr<Mover>& bullet){return !bullet->isActive(); });\n        Erase_if(enemies, [](const std::shared_ptr<Object>& enemy){return !enemy->isActive(); });\n\n        //\u63cf\u753b\n        for (auto& enemy : enemies)\n        {\n            enemy->draw();\n        }\n\n        for (auto& bullet : bulletsEnemy)\n        {\n            bullet->draw();\n        }\n\n        for (auto& bullet : bulletsPlayer)\n        {\n            bullet->draw();\n        }\n\n        player->draw();\n\n        ClearPrint();\n        Println(score);\n        Println(player->getHp());\n        Println(bulletsEnemy.size());\n        Println(bulletsPlayer.size());\n        Println(enemies.size());\n    }\n\n\n}\n\n\n\nSiv3D\u3067STG\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u76ee\u6a19\u306f\n\n>\uff11\uff0e200\u884c\u4ee5\u5185\u306b\u53ce\u3081\u308b\u3053\u3068\uff08Main\u306e\u307f\uff09\n\uff12\uff0ehttp://play-siv3d.hateblo.jp/ \u3068\u4f3c\u305f\u66f8\u304d\u65b9\n\uff13\uff0e\u83ef\u3084\u304b\u3067\u3042\u308b\u3053\u3068\n\uff14\uff0eSTG\u3068\u3057\u3066\u904a\u3079\u308b\u3053\u3068\n\n\u3067\u3059\u3002\n\u73fe\u72b6\n>280\u884c\u2192\u9577\u3044\n\u753b\u9762\u2192\u5730\u5473\nSTG\u2192\u6b7b\u306a\u306a\u3044\n\n\u6539\u5584\u7b56\u6c42\u3080\n\n```Siv3D:Main.cpp\n\n# include <Siv3D.hpp>\n//March2014\n\nclass Mover\n{\npublic:\n\n\tMover(\n\t\tconst Vec2& pos, \n\t\tconst Vec2& velocity, \n\t\tdouble radius\n\t\t) :\n\t\tm_pos(pos),\n\t\tm_velocity(velocity),\n\t\tm_radius(radius)\n\t{\n\n\t}\n\n\tvirtual void update()\n\t{\n\t\tm_pos += m_velocity;\n\n\t\tif (!RectF(Window::Size()).intersects(Circle(m_pos, m_radius)))\n\t\t{\n\t\t\tm_isActive = false;\n\t\t}\n\n\t\t++m_count;\n\t}\n\n\tvirtual void draw()\n\t{\n\t\tRectF(2.0 * Vec2(m_radius, m_radius)).setCenter(m_pos).draw();\n\t}\n\n\tvoid setPos(const Vec2& pos)\n\t{\n\t\tm_pos = pos;\n\t}\n\n\tconst Vec2& getPos() const\n\t{\n\t\treturn m_pos;\n\t}\n\n\tvoid setRadius(double radius)\n\t{\n\t\tm_radius = radius;\n\t}\n\t \n\tdouble getRadius() const\n\t{\n\t\treturn m_radius;\n\t}\n\n\tvoid setActive(bool isActive)\n\t{\n\t\tm_isActive = isActive;\n\t}\n\n\tbool isActive() const\n\t{\n\t\treturn m_isActive;\n\t}\n\nprotected:\n\n\tVec2 m_pos;\n\n\tVec2 m_velocity;\n\n\tdouble m_radius;\n\n\tbool m_isActive = true;\n\n\tunsigned m_count = 0;\n\n};\n\nclass Object : public Mover\n{\npublic:\n\n\tObject(\n\t\tconst Vec2& pos,\n\t\tvector<std::shared_ptr<Mover>>& bullets,\n\t\tconst Vec2& velocity,\n\t\tdouble radius\t\t\n\t\t) :\n\t\tMover(pos, velocity, radius),\n\t\tm_bullets(bullets)\n\t{\n\n\t}\n\n\tvoid update() override\n\t{\n\t\tMover::update();\n\n\t\tif (m_count % 30 == 0)\n\t\t{\n\t\t\tm_bullets.emplace_back(std::make_shared<Mover>(m_pos, Vec2::Down * 5.0, 2.5));\n\t\t}\n\t}\n\n\tvoid setHp(int hp)\n\t{\n\t\tm_hp = hp;\n\n\t\tif (m_hp <= 0)\n\t\t{\n\t\t\tm_isActive = false;\n\t\t}\n\t}\n\n\tint getHp() const\n\t{\n\t\treturn m_hp;\n\t}\n\nprotected:\n\n\tint m_hp = 3;\n\n\tvector<std::shared_ptr<Mover>>& m_bullets;\n};\n\nclass Player : public Object\n{\npublic:\n\n\tPlayer(\n\t\tconst Vec2& pos, \n\t\tvector<std::shared_ptr<Mover>>& bullets,\n\t\tconst Vec2& velocity = Vec2(0.0, 0.0), \n\t\tdouble radius = 10.0\n\t\t) :\n\t\tObject(pos, bullets, velocity, radius)\n\t{\n\t\tm_hp = 10;\n\t}\n\n\tvoid update() override\n\t{\n\t\tm_velocity = Vec2(0.0, 0.0);\n\n\t\tconst double speed = 5.0;\n\n\t\tif (Input::KeyLeft.pressed)\n\t\t{\n\t\t\tm_velocity += Vec2::Left * speed;\n\t\t}\n\t\tif (Input::KeyRight.pressed)\n\t\t{\n\t\t\tm_velocity += Vec2::Right * speed;\n\t\t}\n\t\tif (Input::KeyUp.pressed)\n\t\t{\n\t\t\tm_velocity += Vec2::Up * speed;\n\t\t}\n\t\tif (Input::KeyDown.pressed)\n\t\t{\n\t\t\tm_velocity += Vec2::Down * speed;\n\t\t}\n\t\tif (Input::KeyZ.pressed)\n\t\t{\n\t\t\tm_bullets.emplace_back(std::make_shared<Mover>(m_pos, Vec2::Up * 20.0, 10.0));\n\t\t}\n\n\t\tif (RectF(Window::Size()).contains(Circle(m_pos + m_velocity, m_radius)))\n\t\t{\n\t\t\tMover::update();\n\t\t}\n\t}\n};\n\nbool CheckBullet(const std::shared_ptr<Object>& Object, const std::shared_ptr<Mover>& bullet)\n{\n\tconst Circle circleBullet(bullet->getPos(), bullet->getRadius());\n\n\tconst Circle circleObject(Object->getPos(), Object->getRadius());\n\n\tif (circleBullet.intersects(circleObject))\n\t{\n\t\tObject->setHp(Object->getHp() - 1);\n\n\t\tbullet->setActive(false);\n\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\nvoid Main()\n{\n\tWindow::SetTitle(L\"Z:\u6253\u3064 \u5341\u5b57\u30ad\u30fc:\u79fb\u52d5\");\n\n\tint score = 0;\n\n\tconst Vec2 startPos = Vec2(Window::Width() / 2.0, Window::Height() * 4.0 / 5.0);\n\n\tvector<std::shared_ptr<Object>> enemies;\n\tvector<std::shared_ptr<Mover>> bulletsEnemy;\n\tvector<std::shared_ptr<Mover>> bulletsPlayer;\n\tstd::shared_ptr<Player> player = std::make_shared<Player>(startPos, bulletsPlayer);\n\t\n\twhile (System::Update())\n\t{\n\t\tif (System::FrameCount() % Random(30, 60) == 0)\n\t\t{\n\t\t\tenemies.emplace_back(std::make_shared<Object>(RandomVec2(Window::Width(), 0.0), bulletsEnemy, Vec2(0.0, 1.0), 20.0));\n\t\t}\n\n\t\tfor (auto& enemy : enemies)\n\t\t{\n\t\t\tenemy->update();\n\t\t}\n\n\t\tfor (auto& bullet : bulletsEnemy)\n\t\t{\n\t\t\tbullet->update();\n\n\t\t\tif (CheckBullet(player, bullet))\n\t\t\t{\n\t\t\t\tRect(Window::Size()).draw(Palette::Red);\n\t\t\t}\n\t\t}\n\n\t\tfor (auto& bullet : bulletsPlayer)\n\t\t{\n\t\t\tbullet->update();\n\n\t\t\tfor (auto& enemy : enemies)\n\t\t\t{\n\t\t\t\tif (CheckBullet(enemy, bullet))\n\t\t\t\t{\n\t\t\t\t\tscore += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tplayer->update();\n\n\t\tErase_if(bulletsEnemy, [](const std::shared_ptr<Mover>& bullet){return !bullet->isActive(); });\n\t\tErase_if(bulletsPlayer, [](const std::shared_ptr<Mover>& bullet){return !bullet->isActive(); });\n\t\tErase_if(enemies, [](const std::shared_ptr<Object>& enemy){return !enemy->isActive(); });\n\t\t\n\t\t//\u63cf\u753b\n\t\tfor (auto& enemy : enemies)\n\t\t{\n\t\t\tenemy->draw();\n\t\t}\n\n\t\tfor (auto& bullet : bulletsEnemy)\n\t\t{\n\t\t\tbullet->draw();\n\t\t}\n\n\t\tfor (auto& bullet : bulletsPlayer)\n\t\t{\n\t\t\tbullet->draw();\n\t\t}\n\n\t\tplayer->draw();\n\n\t\tClearPrint();\n\t\tPrintln(score);\n\t\tPrintln(player->getHp());\n\t\tPrintln(bulletsEnemy.size());\n\t\tPrintln(bulletsPlayer.size());\n\t\tPrintln(enemies.size());\n\t}\n\n\t\n}\n\n```", "tags": ["Siv3DMarch2014"]}