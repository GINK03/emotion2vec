{"context": "\n\n\u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u3067\u306fC++\u306e\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u4f7f\u3044\u6163\u308c\u3066\u3044\u306a\u3044\u4eba\u306e\u70ba\u306e\u307e\u3068\u3081\u3068\u3057\u3066\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\nC++\u306e\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3001\u5f15\u6570\u3084\u623b\u308a\u5024\u306b\u81ea\u7531\u304c\u5229\u304d\u3059\u304e\u3066\u3069\u3046\u3059\u308b\u306e\u304c\u30bb\u30aa\u30ea\u30fc\u306a\u306e\u304b\u5206\u304b\u3089\u306a\u3044\u305e\u3001\u3068\u3044\u3046\u3088\u3046\u306a\u3068\u304d\u306b\u898b\u3066\u9802\u3051\u305f\u3089\u3068\u601d\u3044\u307e\u3059\u3002\n\u4e3b\u306b\u5f15\u6570\u3084\u623b\u308a\u5024\u3092\u4e2d\u5fc3\u306b\u636e\u3048\u307e\u3059\u304c\u3001\u7d30\u304b\u3044\u6a5f\u80fd\u3082\u7db2\u7f85\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\u79c1\u306f\u4e8c\u9805\u6f14\u7b97\u5b50\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u6559\u306e\u4fe1\u5f92\u3067\u3042\u308a\u3001const\u6559\u306e\u656c\u8654\u306a\u4fe1\u5f92\u3067\u3059\u3002\n\u512a\u5148\u9806\u4f4d\u306e\u9806\u306b\u3001\u6f14\u7b97\u5b50\u5225\u306b\u89e3\u8aac\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001this\u306e\u578b\u3092 T* const\u578b\u3068\u3057\u3001T\u3068\u306f\u5225\u306e\u4efb\u610f\u306e\u578b\u3092U\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u3067\u306f\u3001\u65e9\u901f\u89e3\u8aac\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nMember Selection\nU* operator->() const noexcept ;\n\n\u30e1\u30f3\u30d0\u9078\u629e\u6f14\u7b97\u5b50\u3002\u30c9\u30c3\u30c8\u6f14\u7b97\u5b50\u306f\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u8f09\u305b\u308b\u306e\u306f\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u3060\u3051\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u6f14\u7b97\u5b50\u306e\u6587\u8108\u3067\u4f7f\u3046\u306b\u306f\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u3092\u6301\u3063\u305f\u4efb\u610f\u306e\u578bU\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u751f\u30dd\u30a4\u30f3\u30bf\u3084std::unique_ptr\u306e\u3088\u3046\u306a\u30e6\u30cb\u30fc\u30af\u30dd\u30a4\u30f3\u30bf\u306a\u3069\u3067\u3059\u306d\u3002\u6ce8\u610f\u3059\u3079\u304d\u306f\u3001\u57fa\u672c\u7684\u306b\u623b\u308a\u5024\u306fconst\u306b\u3057\u3066\u306f\u306a\u3089\u306a\u3044\u3053\u3068\u3001\u30e1\u30f3\u30d0\u95a2\u6570\u306fconst\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001const\u3068\u305d\u3046\u3067\u306a\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u7528\u610f\u3059\u308b\u306e\u306f\u591a\u304f\u306e\u5834\u5408\u8aa4\u308a\u3067\u3059\u3002\nconst U* operator->() const noexcept;\nU* operator->() noexcept;\n\n\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u306b\u3064\u3044\u3066\u30012016/12/24 \u8ffd\u8a18:\n\u3053\u308c\u306f\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u3092\u6301\u3064\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3084\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u3001\u305d\u308c\u304c\u793a\u3059\u8981\u7d20\u3068\u306e\u95a2\u4fc2\u3092\u8003\u3048\u308b\u3068\u3088\u304f\u7406\u89e3\u3067\u304d\u307e\u3059\u3002\ntemplate< class T >\nclass pointer\n{\n  T* ptr;\n\npublic:\n  T* // \u623b\u308a\u5024\u306econst\u306f\u3053\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u8981\u7d20\u306e\u5909\u66f4\u306e\u53ef\u5426\u3092\u793a\u3059\n  operator->() const noexcept // \u3053\u3053\u306econst\u306f\u3053\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u5909\u66f4\u306e\u53ef\u5426\u3092\u793a\u3059\n    { return ptr; }\n};\n\n...\n\npointer<int> p = &value;\n*p = 12; // p \u306e\u4e2d\u8eab\u306f\u5909\u308f\u308b\u3051\u3069p \u306f\u5909\u308f\u3089\u306a\u3044; \u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u3067\u8a00\u3046\u623b\u308a\u5024\u306econst\u306b\u95a2\u308f\u308b\np = &another; // p \u306e\u4e2d\u8eab\u306f\u5909\u308f\u3089\u306a\u3044\u3051\u3069p \u306f\u5909\u308f\u308b; \u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u3067\u8a00\u3046const\u4fee\u98fe\u306b\u95a2\u308f\u308b\np = nullptr; // p \u306e\u4e2d\u8eab\u306f\u5909\u308f\u3089\u306a\u3044\u3051\u3069p \u306f\u5909\u308f\u308b\n\n\u4e0a\u306e\u4f8b\u3067\u306f\u3001\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u306e\u793a\u3059\u8981\u7d20\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u72b6\u614b\u306e\u9593\u306b\u306f\u95a2\u4fc2\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\u305f\u3060\u3057\u3001optional\u306b\u4ee3\u8868\u3055\u308c\u308b\u3088\u3046\u306a\u7279\u6b8a\u306a\u4f7f\u308f\u308c\u65b9\u3092\u3059\u308b\u3068\u304d\u306f\u4f8b\u5916\u3067\u3059\u3002\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u306f\u4f55\u3092\u793a\u3059\u306e\u304b\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u306e\u793a\u3059\u3082\u306e\u306e\u95a2\u4fc2\u306f\u3069\u3046\u3067\u3042\u308b\u304b\u3001\u3057\u3063\u304b\u308a\u8003\u3048\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u306d\u3002\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u306e\u793a\u3059\u8981\u7d20\u306f\u3059\u306a\u308f\u3061\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u72b6\u614b\u3068\u8a00\u3048\u307e\u3059\u3002\ntemplate< class T >\nclass optional\n{\n  T value;\n\npublic:\n  const T* operator->() const noexcept { return &value; }\n  T* operator->() noexcept { return &value; }\n};\n\n...\n\noptional<int> n = 1;\n*n = 123; // n \u306e\u4e2d\u8eab\u304c\u5909\u308f\u308b\u3053\u3068\u306f\u3059\u306a\u308f\u3061n \u304c\u5909\u308f\u308b\u3053\u3068\u3092\u610f\u5473\u3059\u308b\nn = 456; // \u3053\u306e\u6587\u8108\u3067\u306f *n = 456 \u306b\u7b49\u4fa1\u306a\u64cd\u4f5c\nn = nullopt; // n \u3092\u5909\u3048\u308b\u51e6\u7406\u3002*n = nullopt \u3068\u306f\u66f8\u304d\u63db\u3048\u3089\u308c\u306a\u3044\u3002\n\n\u4f7f\u7528\u4f8b\u3002\nstd::unique_ptr<std::string> ptr(new string());\nptr->push_back('a'); // ptr.operator->()->push_back('a'); \u3068\u5168\u304f\u7b49\u4fa1\u3002\n\n\nArray Subscript\nconst U& operator[](std::size_t) const ;\nU& operator[](std::size_t) ;\n\n// \u5b89\u5168\u6027\u3092\u9ad8\u3081\u305f\u3051\u308c\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\uff13\u3064\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u7528\u610f\u3057\u3066\u3082\u3088\u3044\u3002\nconst U& operator[](std::size_t) const& ;\nU& opeorator[](std::size_t) &;\nU operator[](std::size_t) && ;\n\n\u6dfb\u5b57\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\u591a\u304f\u306e\u5834\u5408const\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u975econst\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u4e21\u65b9\u3092\u7528\u610f\u3057\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u3051\u3093\u3002\u5f15\u6570\u306f\u4f8b\u3068\u3057\u3066std::size_t\u3092\u5165\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u30b3\u30f3\u30c6\u30ca\u306e\u6027\u8cea\u306b\u3088\u3063\u3066\u69d8\u3005\u306b\u306a\u308a\u307e\u3059\u3002\u975econst\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u3001\u623b\u308a\u5024\u306f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306e\u53c2\u7167\u578b\u3067\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u304c\u3001\u30b3\u30f3\u30c6\u30ca\u306b\u5024\u3092\u8a2d\u5b9a\u3067\u304d\u308b\u3088\u3046\u306a\u4ed5\u7d44\u307f\u304c\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\nstd::bitset<8> bit {};\n// bool& elem = bit[0]; // std::vector\u306a\u3069\u3067\u306f\u5076\u7136\u4f7f\u3048\u308b\u304c\u3001\u3053\u308c\u306f\u5b9f\u306fcontainer\u30b3\u30f3\u30bb\u30d7\u30c8\u306b\u306f\u542b\u307e\u308c\u306a\u3044\u3002\nauto&& elem = bit[0]; // \u53c2\u7167\u578b\u306b\u675f\u7e1b\u3057\u305f\u3051\u308c\u3070\u3001universal reference \u3092\u4f7f\u3046\u306e\u304c\u78ba\u5b9f\u3002\u3053\u3053\u3067\u306fstd::bitset<8>::reference&&\u304c\u63a8\u8ad6\u3055\u308c\u308b\u3002\nbit[0] = U(); // \u975econst\u578b\u306eoperator[]\u306f\u3053\u308c\u3092\u4fdd\u8a3c\u3057\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u3002\n\n\u4e0b\u306e3\u3064\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u3044\u3046\u306e\u306f\u3001\u4e0a2\u3064\u304c\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5185\u90e8\u306b\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u53c2\u7167\u3092\u8fd4\u3057\u3046\u308b\u306e\u306b\u5bfe\u3057\u3001\u305d\u308c\u3092\u9632\u3050\u3088\u3046\u306b\u6539\u3081\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u8a00\u3048\u307e\u3059\u3002\u4e0a2\u3064\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u554f\u984c\u304c\u767a\u751f\u3057\u3048\u307e\u3059\u3002\nint& n = std::vector<int>{1, 2, 3}[0]; // oops, n is a dangling reference.\nauto&& m = std::vector<int>{1, 2, 3}[1]; // oops, the same problem occurs.\n\n\u3053\u308c\u3092\u9632\u3050\u305f\u3081\u3001\u53f3\u8fba\u5024\u306e\u5834\u5408\u306b\u9650\u3063\u3066\u53c2\u7167\u3067\u306f\u306a\u304f\u5b9f\u4f53\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3059\u3002\ntemplate<class T, class Alloc = std::allocator<T>>\nclass my_vector\n{\n  std::vector<T, Alloc> vec;\n\npublic:\n  my_vector(std::initializer_list<T> init) : vec{init} {}\n  T& operator[](std::size_t n) & { return vec[n]; }\n  const T& operator[](std::size_t n) const& { return vec[n]; }\n  T operator[](std::size_t n) && { return std::move(vec[n]); } // \u624b\u52d5\u30e0\u30fc\u30d6\u3002noexcept\u304c\u3042\u3063\u3066\u3082\u3088\u3044\u3002\n};\n\n\u81ea\u4f5c\u30b3\u30f3\u30c6\u30ca\u3092\u4f5c\u308b\u306a\u3089\u3053\u308c\u304f\u3089\u3044\u6c17\u306e\u5229\u3044\u305f\u3082\u306e\u3092\u4f5c\u308a\u305f\u3044\u3067\u3059\u306d\u3002\u3053\u308c\u3082\u542b\u3081\u3066\u3001\u30af\u30e9\u30b9\u5185\u90e8\u3078\u306e\u53c2\u7167\u3092\u53d6\u308b\u3068\u304d\u306b\u306funiversal reference\u304c\u63a8\u5968\u3055\u308c\u308b\u306e\u3067\u3059\u3002\nint& n = my_vector<int>{1, 2, 3}[0]; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\nauto&& m = my_vector<int>{1, 2, 3}[1]; // OK. m\u306fint&&\u3068\u63a8\u8ad6\u3055\u308c\u3001\u53c2\u7167\u5148\u306e\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306fm\u3068\u540c\u3058\u3060\u3051\u5ef6\u547d\u3055\u308c\u308b\u3002\n\n\nFunction Call\nU operator()(Args) ;\n\n\u95a2\u6570\u547c\u3073\u51fa\u3057\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u623b\u308a\u5024\u3001\u5f15\u6570\u3001const\u6307\u5b9a\u306a\u3069\u5168\u304f\u306e\u81ea\u7531\u3067\u3059\u3002\u6700\u3082\u3088\u304f\u4f7f\u3046\u306e\u306f\u8ff0\u8a9e\u3068\u3057\u3066\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u95a2\u6570\u306b\u7a81\u3063\u8fbc\u3093\u3060\u308a\u3067\u3059\u304b\u306d\u3002\u30e9\u30e0\u30c0\u5f0f\u306b\u304a\u682a\u3092\u596a\u308f\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3051\u3069\u3002\n\u5f8c\u306f\u72b6\u614b\u3092\u6301\u3063\u305f\u95a2\u6570\u3092static\u5909\u6570\u3092\u4f7f\u308f\u305a\u306b\u5b9f\u73fe\u3057\u305f\u3044\u3068\u304d\u306a\u3069\u306b\u4f7f\u3044\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092C++\u3067\u306f\u7279\u306b\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u547c\u3073\u307e\u3059\u3002\n\u4ee5\u4e0b\u306bC++14\u6642\u70b9\u3067\u306estd::plus\u306e\u5b9f\u88c5\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\nnamespace std\n{\ntemplate<class T = void>\nclass plus\n{\npublic:\n  constexpr T operator()(const T& t1, const T& t2) const { return t1 + t2; }\n};\ntemplate<>\nclass plus<void>\n{\npublic:\n  template<class T, class U>\n  constexpr auto operator()(const T& t, const U& u) const { return t + u; }\n};\n}\n\n\u5b9f\u969b\u306b\u4f7f\u3046\u3068\u3053\u3093\u306a\u611f\u3058\u3002\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306bvoid\u3092\u6307\u5b9a\u3059\u308b\u3068\u5f15\u6570\u3068\u623b\u308a\u5024\u3092\u63a8\u8ad6\u3057\u3066\u304f\u308c\u308b\u3002\u307b\u306e\u304b\u306a\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306e\u9999\u308a\u3002\nstd::plus<> plus;\nint n = plus(1, 2); // n == 3\n\n\u3076\u3063\u3061\u3083\u3051\u3001std::plus\u306fT\u3068U\u306e\u4e21\u65b9\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u6307\u5b9a\u3067\u304d\u308b\u3079\u304d\u3060\u3063\u305f\u3002\n// \u7406\u60f3\ntemplate<class T = void, class U = T>\nclass plus\n{\npublic:\n  constexpr auto operator()(const T& t, const U& u) const { return t + u; }\n};\ntemplate<>\nclass plus<void, void>\n{\npublic:\n  template<class T, class U>\n  constexpr auto operator()(const T& t, const U& u) const { return t + u; }\n};\n\n\nPostfix Increment/Decrement\nT operator++(int) ;\nT operator--(int) ;\n\n\u5f8c\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002const\u6307\u5b9a\u306f\u306a\u3057\u3067\u3001\u4e88\u3081\u4fdd\u5b58\u3057\u3066\u304a\u3044\u305f\u5909\u66f4\u524d\u306ethis\u3092\u8fd4\u5374\u3059\u3079\u304d\u3067\u3059\u3002\u5f15\u6570\u306b\u306a\u306b\u304c\u6e21\u3055\u308c\u308b\u304b\u306f\u8b0e\u3067\u3059\u3002\nint n = 1;\nint m = n++; // m\u306b\u306f1\u304c\u5165\u308b\u3002\n\n\nPrefix Increment/Decremrnt\nT& operator++() ;\nT& operator--() ;\n\n\u524d\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002const\u6307\u5b9a\u306f\u306a\u3057\u3067\u3001this\u53c2\u7167\u3092\u8fd4\u5374\u3059\u3079\u304d\u3067\u3059\u3002\nint n = 1;\nint m = ++n; // m\u306b\u306f2\u304c\u5165\u308b\u3002\n\n\nOne's Complement\nT operator~() const ;\n\n\u30d3\u30c3\u30c8\u5426\u5b9a\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u305f\u307e\u306b\u52d8\u9055\u3044\u3055\u308c\u307e\u3059\u304c\u3001\u3053\u306e\u6f14\u7b97\u5b50\u306f\u547c\u3073\u51fa\u3057\u5143\u306b\u306f\u5909\u66f4\u3092\u52a0\u3048\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\nint n = 0 ^ 0; // \u5168\u3066\u306e\u30d3\u30c3\u30c8\u3092\u4f0f\u305b\u305f\u72b6\u614b\u3067\u521d\u671f\u5316\u3002\nn = ~n; // \u5168\u3066\u306e\u30d3\u30c3\u30c8\u3092\u7acb\u3066\u308b\u3002\n\n\nLogical Not\nbool operator!() const noexcept { return !static_cast<bool>(*this); }\n\n\u8ad6\u7406\u5426\u5b9a\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u307e\u305f\u623b\u308a\u5024\u304cbool\u306b\u6697\u9ed9\u5909\u63db\u53ef\u80fd\u306a\u578b\u3067\u3042\u308a\u3001const\u6307\u5b9a\u304c\u3055\u308c\u3066\u3044\u3066\u3001\u4f8b\u5916\u3092\u9001\u51fa\u3057\u306a\u3044\u95a2\u6570\u3068\u3059\u308b\u3079\u304d\u3067\u3059\u3002\n\u591a\u304f\u306e\u5834\u5408\u3001\u3053\u306e\u6f14\u7b97\u5b50\u3092\u5b9f\u88c5\u3059\u308b\u578bT\u306fbool\u578b\u3078\u5909\u63db\u53ef\u80fd\u306a\u578b\u3067\u3042\u308a\u3001\u3053\u3053\u3067\u306f\u6700\u3082\u5178\u578b\u7684\u306a\u5b9f\u88c5\u3092\u4f8b\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nstd::unique_ptr<int> ptr(new int());\nif (ptr) { /* \u306a\u3093\u304b */ }\nif (!ptr) { /* \u306a\u3093\u304b */ }\n\n\nUnary Negation/Plus\nT operator-() const ;\nT operator+() const ;\n\n\u5358\u9805\u30de\u30a4\u30ca\u30b9\u6f14\u7b97\u5b50\u3068\u5358\u9805\u30d7\u30e9\u30b9\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u307e\u305f\u3001const\u6307\u5b9a\u3055\u308c\u3066\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\nint1024_t n = 100;\nuint1024_t m = +n;\nauto l = -m; // m\u306f\u7b26\u53f7\u306a\u3057\u306e\u81ea\u4f5c\u578b\u306a\u306e\u3067\u3001\u5358\u9805\u30de\u30a4\u30ca\u30b9\u306e\u623b\u308a\u5024\u306e\u578b\u306fint2048_t\u304c\u7406\u60f3\u3002\n\n\nAddress-of\nT* operator&() const noexcept ;\n\n\u30a2\u30c9\u30ec\u30b9\u53d6\u5f97\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u57fa\u672c\u7684\u306b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001c++98\u306a\u3069\u3067nullptr\u3092\u81ea\u524d\u3067\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306a\u3069\u306b\u306f\u4f7f\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\nclass nullptr_t\n{\n  /*\u3054\u306b\u3087\u3054\u306b\u3087*/\n\nprivate:\n  nullptr_t* operator&() const noexcept ; // \u30a2\u30c9\u30ec\u30b9\u53d6\u5f97\u3092\u7981\u6b62\n};\nstatic constexpr nullptr_t nullptr; // \u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a2\u30c9\u30ec\u30b9\u306f\u53d6\u5f97\u3067\u304d\u306a\u3044\u3002\n\n\u307e\u3042\u3001std::addressof\u95a2\u6570\u3092\u4f7f\u3048\u3070\u3069\u3046\u3063\u3066\u3053\u3068\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u3053\u3093\u306a\u95a2\u6570\u304c\u3042\u308b\u7406\u7531\u306b\u306a\u308b\u7a0b\u5ea6\u306b\u306f\u30a2\u30c9\u30ec\u30b9\u53d6\u5f97\u6f14\u7b97\u5b50\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u3079\u304d\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d\u3002\n\nIndirection\nT& operator*() const noexcept ;\n\n\u95a2\u7bc0\u53c2\u7167\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u540c\u69d8\u3001\u3053\u306e\u6f14\u7b97\u5b50\u306f\u5e38\u306bconst\u6307\u5b9a\u3092\u3057\u3066\u4f8b\u5916\u3092\u9001\u51fa\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3079\u304d\u3067\u3059\u3002\u3053\u306e\u6f14\u7b97\u5b50\u3067\u306fconst\u6307\u5b9a\u3068\u623b\u308a\u5024\u306econst\u306f\u5168\u304f\u95a2\u4fc2\u306a\u3044\u3053\u3068\u306b\u6c17\u3092\u3064\u3051\u3066\u304f\u3060\u3055\u3044\u3002\nstd::unique_ptr<int> ptr(new int());\nint& elem = *ptr;\n\n\u3053\u306e\u95a2\u6570\u3067\u3082\u6dfb\u5b57\u6f14\u7b97\u5b50\u3068\u540c\u3058\u554f\u984c\u304c\u767a\u751f\u3057\u5f97\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u6f14\u7b97\u5b50\u306f\u305d\u306e\u76ee\u7684\u4e0a\u53f3\u8fba\u5024\u53c2\u7167\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306f\u3057\u306a\u3044\u65b9\u304c\u3088\u3044\u3068\u601d\u308f\u308c\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u304c\u5927\u3044\u306b\u3042\u308a\u5f97\u308b\u304b\u3089\u3067\u3059\u3002\nsomething s;\nsomething& rs = *my_pointer_wrapper<something>(&s);\n\n\nCreate/Destroy Object\nnew/delete\u6f14\u7b97\u5b50\u306f\u975e\u5e38\u306b\u6df1\u3044\u8a71\u984c\u3067\u3042\u308b\u306e\u3067\u3053\u306e\u8a18\u4e8b\u306b\u542b\u3081\u308b\u3053\u3068\u306f\u3057\u306a\u3044\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n2016/10/01 \u8ffd\u8a18: \u5225\u306b\u8a18\u4e8b\u3092\u3054\u7528\u610f\u3044\u305f\u3057\u307e\u3057\u305f\u3002\u3088\u308d\u3057\u3051\u308c\u3070\u3053\u3061\u3089\u3082\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\nnew/delete \u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\n\nCast\n[explicit(optional)] operator U() const noexcept ;\n\n\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u3053\u306e\u6f14\u7b97\u5b50\u306b\u306f\u623b\u308a\u5024\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002C++11\u304b\u3089\u3053\u306e\u6f14\u7b97\u5b50\u306b\u306fexplicit\u3092\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u3053\u308c\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u6697\u9ed9\u306e\u5909\u63db\u3092\u9632\u3044\u3067\u304f\u308c\u307e\u3059\u3002\n\u6df7\u4e71\u3055\u308c\u308b\u65b9\u304c\u591a\u3044\u3067\u3059\u304c\u3001\u4ed6\u306e\u578b\u304b\u3089\u3053\u306e\u578b\u306b\u5909\u63db\u3059\u308b\u306b\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3001\u3053\u306e\u578b\u304b\u3089\u4ed6\u306e\u578b\u306b\u5909\u63db\u3059\u308b\u306b\u306f\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u3092\u4f7f\u3044\u307e\u3059\u3002\u4e21\u8005\u306f\u4f9d\u5b58\u95a2\u4fc2\u3092\u3088\u304f\u8003\u3048\u3066\u4f7f\u3046\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nclass something\n{\npublic:\n  // ...\n\n  // \u6700\u3082\u3088\u304f\u4f7f\u3046bool\u578b\u3078\u306e\u5909\u63db\n  //   \u57fa\u672c\u7684\u306b\u306fexplicit\u304c\u3042\u3063\u305f\u65b9\u304c\u3088\u3044\u3002\n  //   \u306a\u3044\u3068\u3001bool\u306b\u6697\u9ed9\u5909\u63db\u3055\u308c\u3066int\u306b\u578b\u6607\u683c\u3055\u308c\u3066\u2026\u3068\u3044\u3046\u5177\u5408\u306b\u610f\u5473\u5206\u304b\u3089\u306a\u3044\u578b\u5909\u63db\u306b\u632f\u308a\u56de\u3055\u308c\u308b\u3002\n  explicit operator bool() const noexcept { return is_empty(); }\n  bool operator!() const noexcept { return !static_cast<bool>(*this); } // \u5927\u62b5\u30ef\u30f3\u30bb\u30c3\u30c8\n};\n\n\u3053\u306esomething\u578b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5229\u7528\u3067\u304d\u308b\u3002\nsomething s;\nif (s) { /*do something*/ }\nif (!s) { /* do something */ }\n\n// int n = s + 1; // oops! bool\u3078\u306e\u6697\u9ed9\u5909\u63db\u306f\u7981\u3058\u3089\u308c\u3066\u3044\u308b\u3002explicit\u3092\u4ed8\u3051\u306a\u3051\u308c\u3070\u3053\u306e\u64cd\u4f5c\u306f\u53ef\u80fd\u306b\u306a\u308b\u3002\n\n\nPointer-To-Member\nV operator->*(V(U::*)(Args)) const noexcept ;\nV operator->*(V U::*) const noexcept ;\n\n\u30e1\u30f3\u30d0\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u3068\u307b\u307c\u540c\u3058\u3082\u306e\u3067\u3059\u304c\u3001\u3053\u3061\u3089\u306f\u5f15\u6570\u306b\u4efb\u610f\u306e\u30e1\u30f3\u30d0\u95a2\u6570/\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u308a\u307e\u3059\u3002\u5229\u7528\u3059\u308b\u6a5f\u4f1a\u3082\u5c11\u306a\u3044\u306e\u3067\u3001\u30dd\u30a4\u30f3\u30bf\u306e\u30e9\u30c3\u30d1\u3092\u4f5c\u308a\u305f\u3044\u6642\u306b\u3001\u66f4\u306b\u3053\u3060\u308f\u3063\u3066\u307f\u305f\u3044\u6642\u306b\u3067\u3082\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\n\nArithmetic\nT operator*(const T& t1, const T& t2) { return T(t1) *= t2; }\nT operator/(const T& t1, const T& t2) { return T(t1) /= t2; }\nT operator%(const T& t1, const T& t2) { return T(t1) %= t2; }\nT operator+(const T& t1, const T& t2) { return T(t1) += t2; }\nT operator-(const T& t1, const T& t2) { return T(t1) -= t2; }\nDiff operator-(const T&, const T& t2) ; // \u30dd\u30a4\u30f3\u30bf\u3084\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5834\u5408 ...(*1)\nT operator-(const T& t, Diff diff) { return t -= diff; } // \u30dd\u30a4\u30f3\u30bf\u3084\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5834\u5408 ...(*2)\n\n\u7b97\u8853\u6f14\u7b97\u5b50\u3002\u3053\u308c\u3089\u6f14\u7b97\u5b50\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u3053\u308c\u3089\u306e\u7b97\u8853\u6f14\u7b97\u5b50\u306f\u901a\u5e38\u8907\u5408\u4ee3\u5165\u6f14\u7b97\u5b50\u3068\u540c\u6642\u306b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u308b\u306e\u3067\u3001\u6a5f\u68b0\u7684\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002(*1\u3092\u9664\u304f)\n\u6e1b\u7b97\u6f14\u7b97\u5b50\u3060\u3051\u306f\u8272\u3005\u3068\u90fd\u5408\u304c\u3042\u308a\u3001\u6570\u5b66\u7684\u306a\u578b\u306b\u5b9f\u88c5\u3055\u308c\u305f\u5834\u5408\u3068\u30dd\u30a4\u30f3\u30bf\u3084\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5b9f\u88c5\u3055\u308c\u305f\u5834\u5408\u3068\u3067\u5927\u304d\u304f\u6027\u8cea\u304c\u5909\u308f\u308a\u307e\u3059\u3002\u7279\u306b\u3001Diff operator-(const T&, const T&) ;\u3068\u3044\u3046\u30d1\u30bf\u30fc\u30f3\u306e\u6e1b\u7b97\u306f\u30d5\u30ec\u30f3\u30c9\u6307\u5b9a\u3055\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\u79c1\u306f\u4e8c\u9805\u6f14\u7b97\u5b50\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u6559\u5f92\u306a\u306e\u3067\u3001\u30d5\u30ec\u30f3\u30c9\u3092\u30cf\u30e9\u30fc\u30e0\u306b\u6307\u5b9a\u3059\u308b\u5b97\u6559\u306e\u4eba\u306f\u3053\u3053\u3067\u306f\u3069\u3046\u304b\u3054\u5bb9\u8d66\u304f\u3060\u3055\u3044\u3002\nint n = 123, m = 456;\nint l = n - m;\n\nint array[10] {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};\nint* pbegin = array;\nint* pend = array + 10;\nstd::ptrdiff_t diff = pend - pbegin; // \u30dd\u30a4\u30f3\u30bf\u3068\u30dd\u30a4\u30f3\u30bf\u306e\u5dee\u306fstd::ptrdiff_t\u578b\u3067\u5b9a\u7fa9\u3055\u308c\u308b\u3002(*1)\nint i = *(pend - 5); // \u30dd\u30a4\u30f3\u30bf\u304b\u3089std::ptrdiff_t\u578b\u3092\u5f15\u304f\u3068\u30dd\u30a4\u30f3\u30bf\u578b\u304c\u8fd4\u308b\u3002(*2)\n\n\nShift\nT operator<<(const T& t, std::size_t n) { return T(t) <<= n; }\nT operator>>(const T& t, std::size_t n) { return T(t) >>= n; }\n\ntemplate<class Char, class Traits>\nstd::basic_ostream<Char, Traits>& operator<<(\n    std::basic_ostream<char, Traits>& os, const T&) ;\ntemplate<class Char, class Traits>\nstd::basic_istream<Char, Traits>& operator>>(\n    std::basic_istream<char, Traits>& is, const T&) ;\n\n\u30b7\u30d5\u30c8\u6f14\u7b97\u5b50\u3002\u3053\u308c\u3089\u306e\u6f14\u7b97\u5b50\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u7b97\u8853\u6f14\u7b97\u5b50\u540c\u69d8\u3001\u901a\u5e38\u8907\u5408\u4ee3\u5165\u6f14\u7b97\u5b50\u3068\u540c\u6642\u306b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u308b\u306e\u3067\u6a5f\u68b0\u7684\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nC++\u3067\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7981\u5fcc\u3068\u3055\u308c\u308b\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u60aa\u7528\u3092\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3053\u3053\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u6f14\u7b97\u5b50\u306b\u3064\u3044\u3066\u3082\u89e3\u8aac\u3057\u307e\u3059\u3002\u4e0b2\u3064\u306e\u5ba3\u8a00\u306f\u51fa\u5165\u529b\u6f14\u7b97\u5b50\u3084\u30b9\u30c8\u30ea\u30fc\u30e0\u6f14\u7b97\u5b50\u306a\u3069\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u3067\u3001\u5fc5\u305a\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u3001std::cout\u306a\u3069\u306b\u81ea\u4f5c\u306e\u578b\u3092\u6d41\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nCompare\nbool operator<(const T&, const T&) ;\nbool operator>(const T& t1, const T& t2) { return t2 < t1; }\nbool operator<=(const T& t1, const T& t2) { return !(t1 > t2); }\nbool operator>=(const T& t1, const T& t2) { return !(t1 < t2); }\n\n\u6bd4\u8f03\u6f14\u7b97\u5b50\u3002\u3053\u308c\u3089\u306e\u6f14\u7b97\u5b50\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u5b9f\u306f\u5c0f\u306a\u308a\u3055\u3048\u5b9a\u7fa9\u3057\u3066\u3057\u307e\u3048\u3070\u5f8c\u306f\u6a5f\u68b0\u7684\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u6f14\u7b97\u5b50\u306f\u305d\u3093\u306a\u306b\u66f8\u304f\u3053\u3068\u3082\u306a\u3044\u3067\u3059\u3002\n\nEquality Compare\nbool operator==(const T&, const T&) ;\nbool operator==(const T& t1, const T& t2) { return !(t1 < t2) && !(t2 > t2); } // ...(*1)\nbool operator!=(const T& t1, const T& t2) { return !(t1 == t2); }\n\n\u7b49\u4fa1\u6bd4\u8f03\u6f14\u7b97\u5b50\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u6bd4\u8f03\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u3067\u306f\u3001\u305d\u306e\u610f\u5473\u8ad6\u306b\u3088\u3063\u3066\u306f\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\u5168\u304f\u6a5f\u68b0\u7684\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059(*1)\u3002\n\nBitwise\nT operator&(const T& t1, const T& t2) { return ~(~t1 | ~t2); }\nT operator^(const T& t1, const T& t2) { return (t1 & ~t2) | (~t1) & t2; }\nT operator|(const T&, const T&) ;\n\n\u30d3\u30c3\u30c8\u6f14\u7b97\u5b50\u3002\u3053\u308c\u3089\u306e\u6f14\u7b97\u5b50\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u8ad6\u7406\u548c\u3068\u30d3\u30c3\u30c8\u5426\u5b9a\u304c\u3042\u308c\u3070\u3001\u8ad6\u7406\u7a4d\u3068\u6392\u4ed6\u7684\u8ad6\u7406\u548c\u306f\u6a5f\u68b0\u7684\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nLogical And/Or\nbool operator&&(const T& t1, const T& t2) { return !(!t1 || !t2); }\nbool operator||(const T&, const T&) ;\n\n\u8ad6\u7406\u6f14\u7b97\u5b50\u3002\u8ad6\u7406\u6f14\u7b97\u5b50\u3063\u3066\u8a00\u3044\u65b9\u306f\u3042\u307e\u308a\u3057\u307e\u305b\u3093\u306d\u3002\u3053\u308c\u3089\u306e\u6f14\u7b97\u5b50\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u8ad6\u7406\u548c\u3068\u8ad6\u7406\u5426\u5b9a\u304c\u3042\u308c\u3070\u8ad6\u7406\u7a4d\u306f\u6a5f\u68b0\u7684\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nAssignment\nT& operator=(const U&) ;\nT& operator=(const T&) ;\nT& operator=(T&&) noexcept ;\n\n// \u3053\u3063\u3061\u306e\u65b9\u304c\u5b89\u5168\uff1f\u3000\u81ea\u7136\uff1f\nT& operator=(const U&) &;\nT& operator=(const T&) &;\nT& operator=(T&&) & noexcept;\n\n\u4ee3\u5165\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u5f15\u6570\u306b\u306f\u4efb\u610f\u306e\u578bU\u3092\u53d6\u308a\u307e\u3059\u304c\u3001\u5178\u578b\u7684\u306b\u306f\u81ea\u8eab\u3068\u540c\u3058\u578b\u3078\u306e\u53c2\u7167\u3092\u53d6\u308b\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3068\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u304c\u5b9f\u88c5\u3055\u308c\u307e\u3059\u3002\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u306f\u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u623b\u308a\u5024\u306bthis\u53c2\u7167\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u304a\u5c3b\u306b\u30a2\u30f3\u30d1\u30b5\u30f3\u30c9\u304c\u3064\u3044\u3066\u3044\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u3001\u53f3\u8fba\u5024\u306b\u4ee3\u5165\u304c\u884c\u308f\u308c\u308b\u3053\u3068\u3092\u7981\u3058\u3066\u3044\u307e\u3059\u3002\u9593\u9055\u3063\u3066\u3082\u3053\u308c\u3092\u9632\u3050\u305f\u3081\u306b\u623b\u308a\u5024\u306e\u578b\u306bconst\u3092\u4ed8\u3051\u305f\u308a\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\n// \u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3067\u306f\u3053\u308c\u306f\u8a31\u3055\u308c\u306a\u3044\u3002\n1 = 2;\n// \u901a\u5e38\u3053\u308c\u306f\u8a31\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u30a2\u30f3\u30d1\u30b5\u30f3\u30c9\u4ed8\u304d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3060\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n// \u4e0d\u81ea\u7136\u306b\u898b\u3048\u308b\u304c\u5371\u967a\u306f\u5c11\u306a\u3044\u3002\nsomething() = something();\n\nsomething s1, s2;\ns1 = s2 = something(); // \u3053\u308c\u304c\u3067\u304d\u308b\u306e\u306fthis\u53c2\u7167\u3092\u8fd4\u3059\u304a\u304b\u3052\u3002\n\n\nCompound Assignment\nT& operator*=(const T&) ;\nT& operator/=(const T&) ;\nT& operator%=(const T&) ;\nT& operator+=(const T&) ;\nT& operator-=(const T&) ;\nT& operator<<=(const T&) ;\nT& operator>>=(const T&) ;\nT& operator&=(const T&) ;\nT& operator|=(const T&) ;\nT& operator^=(const T&) ;\n\n\u8907\u5408\u4ee3\u5165\u6f14\u7b97\u5b50\u3002\u3053\u308c\u3089\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u5f15\u6570\u306b\u306f\u4efb\u610f\u306e\u578bU\u3092\u53d6\u308a\u307e\u3059\u304c\u3001const T&\u304c\u4f7f\u308f\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u5370\u8c61\u3067\u3059\u3002\u6ce8\u610f\u70b9\u306f\u5168\u3066\u4ee3\u5165\u6f14\u7b97\u5b50\u3068\u540c\u3058\u3067\u3059\u3002\u3053\u3053\u3067\u3042\u306e\u4e8c\u9805\u6f14\u7b97\u5b50\u7fa4\u306e\u4e2d\u6838\u3092\u62c5\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u306d\u3002\n\nComma\n// \u30e1\u30f3\u30d0\u95a2\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\nU& operator,(U&) const noexcept ;\n\n// \u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\nU& operator,(const T&, U&) noexcept ;\n\n\u30b3\u30f3\u30de\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3067\u3082\u4e00\u5fdc\u3059\u308b\u306a\u3089\u3001\u4e8c\u9805\u6f14\u7b97\u5b50\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u65b9\u304c\u826f\u3044\u6c17\u304c\u3057\u307e\u3059\u3002\n\u6bd4\u8f03\u7684\u6709\u540d\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u3066\u305f\u308a\u3055\u308c\u3066\u306a\u304b\u3063\u305f\u308a\u3002\n\u3069\u3053\u304b\u3067\u898b\u305f\u6709\u7528\u306a\u4f7f\u3044\u65b9\u306f\u3001Mutex\u306e\u30ed\u30c3\u30af\u6a5f\u69cb\u306b\u4f7f\u3046\u3068\u304b\u3044\u3046\u3082\u306e\u3067\u3057\u305f\u3002\n// scoped_guard\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30ed\u30c3\u30af\u3055\u308c\u3001func()\u304c\u5b9f\u884c\u3055\u308c\u3001scoped_guard\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30ed\u30c3\u30af\u304c\u89e3\u9664\u3055\u308c\u308b\u3002\n// mutex\u306a\u3093\u304b\u3067\u306f\u4f7f\u3044\u3084\u3059\u3044\u304b\u3082\uff1f\nscoped_guard(), fund();\n\n\n{ // \u30b3\u30f3\u30de\u30cf\u30c3\u30af\u3092\u4f7f\u308f\u306a\u3051\u308c\u3070\u3053\u3046\u306a\u308b\u3002\n  scoped_guard guard;\n  func();\n}\n\n\u4e0b\u306e\u65b9\u304c\u610f\u56f3\u304c\u660e\u78ba\u3067\u3044\u3044\u3088\u3046\u306a\u6c17\u3082\u3057\u306a\u304f\u3082\u306a\u3044\u3002\n\n\u304a\u307e\u3051\nstd::rel_ops\u540d\u524d\u7a7a\u9593\u3068Boost.Operators\u306b\u8efd\u304f\u89e6\u308c\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u3053\u307e\u3067\u3067\u3001\u591a\u304f\u306e\u6f14\u7b97\u5b50\u306b\u3064\u3044\u3066\u6a5f\u68b0\u7684\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u8a00\u3044\u307e\u3057\u305f\u304c\u3001\u6a5f\u68b0\u7684\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3001\u3068\u3044\u3046\u306e\u306f\u6c7a\u3057\u3066\u3044\u3044\u3068\u3053\u308d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u6700\u3082\u79c1\u305f\u3061\u306e\u5fcc\u8af1\u3059\u3079\u304d\u3068\u3053\u308d\u3068\u3082\u3044\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u305d\u3046\u3044\u3046\u90e8\u5206\u3092\u81ea\u52d5\u7684\u306b\u5b9a\u7fa9\u3057\u3066\u304f\u308c\u308b\u3082\u306e\u304c\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3001\u6e96\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3082\u3042\u308b\u306e\u3067\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nstd::rel_ops\n<utility>\u30d8\u30c3\u30c0\u306b\u5165\u3063\u3066\u3044\u308bstd::rel_ops\u540d\u524d\u7a7a\u9593\u306b\u306f\u3001!=,>,<=,>= \u306e4\u3064\u306e\u6f14\u7b97\u5b50\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nnamespace std {\nnamespace rel_ops\n{ // namespace std::rel_ops\n\ntemplate< class T >\nbool operator!=( const T& lhs, const T& rhs );\n\ntemplate< class T >\nbool operator>( const T& lhs, const T& rhs );\n\ntemplate< class T >\nbool operator<=( const T& lhs, const T& rhs );\n\ntemplate< class T >\nbool operator>=( const T& lhs, const T& rhs );\n\n} // namespace rel_ops\n} // namespace std\n\n\u3053\u306e\u540d\u524d\u7a7a\u9593\u3092using\u3059\u308c\u3070\u3001\u81ea\u4f5c\u30af\u30e9\u30b9\u306e\u6bd4\u8f03\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3059\u308b\u624b\u9593\u304c\u7701\u3051\u308b\u3068\u3044\u3046\u5bf8\u6cd5\u3067\u3059\u3002\n\u306a\u3093\u304b\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3057\u3066\u306f\u3042\u307e\u308a\u306b\u9069\u5f53\u3068\u3044\u3046\u304b\u96d1\u3068\u3044\u3046\u304b\u3001\u305d\u3093\u306a\u6c17\u304c\u3057\u307e\u3059\u3051\u308c\u3069\u3002\n\u305d\u3093\u306a\u6c17\u304c\u3057\u305f\u306a\u3089\u3001\u6b21\u306b\u884c\u304d\u307e\u3057\u3087\u3046\u3002boost\u69d8\u304c\u304a\u5f85\u3061\u3067\u3059\u3002\n\nBoost.Operators\nBoost\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u3092\u88dc\u3063\u3066\u4f59\u308a\u3042\u308b\u30d1\u30ef\u30fc\u3068\u3001\u5b89\u5168\u6027\u3068\u3001\u79fb\u690d\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u9593\u3082\u30d6\u30fc\u30b9\u30c8\u3057\u3066\u304f\u308c\u307e\u3059\u3002Boost.Operators\u306fstd::rel_ops\u3068\u306f\u6bd4\u8f03\u306b\u306a\u3089\u306a\u3044\u307b\u3069\u6f14\u7b97\u5b50\u306e\u81ea\u52d5\u5b9a\u7fa9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u6b32\u3057\u3044\u6f14\u7b97\u5b50\u3092\u6301\u3064\u30af\u30e9\u30b9\u3092private\u7d99\u627f\u3059\u308b\u3053\u3068\u3067mix-in\u3068\u3044\u3046\u5f62\u3067\u6f14\u7b97\u5b50\u3092\u500b\u5225\u306b\u6301\u3063\u3066\u304f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4f8b\u3068\u3057\u3066\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u6574\u6570\u578b\u3092\u4f5c\u308b\u3068\u3057\u307e\u3059\u3002\u305d\u3046\u306a\u308b\u3068\u3082\u306e\u3059\u3054\u3044\u91cf\u306e\u6f14\u7b97\u5b50\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u3057\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u306d\u3002\nclass my_integral\n  : boost::operators<my_integral>\n{\n  friend bool operator==(const my_integral&, const my_integral&) ;\n  friend bool operator<(const my_integral&, const my_integral&) ;\n\npublic:\n  my_integral& operator++() ;\n  my_integral& operator--() ;\n  my_integral& operator*=(const my_integral& n) ;\n  my_integral& operator/=(const my_integral& n) ;\n  my_integral& operator%=(const my_integral& n) ;\n  my_integral& operator+=(const my_integral& n) ;\n  my_integral& operator-=(const my_integral& n) ;\n  my_integral& operator<<=(const my_integral&) ;\n  my_integral& operator>>=(const my_integral&) ;\n  my_integral& operator&=(const my_integral&) ;\n  my_integral& operator|=(const my_integral&) ;\n  my_integral& operator^=(const my_integral&) ;\n};\n\nbool operator==(const my_integral&, const my_integral&) ;\nbool operator<(const my_integral&, const my_integral&) ;\n\n\u81ea\u52d5\u3067\u5b9a\u7fa9\u3067\u304d\u308b\u4e8c\u9805\u6f14\u7b97\u5b50\u306a\u3069\u306f\u5168\u3066boost::operators<my_integral>\u306e\u90e8\u5206\u3067mix-in\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3088\u3063\u3066\u3001\u81ea\u524d\u3067\u5b9a\u7fa9\u3059\u308b\u306e\u306f\u4ee5\u4e0b\u3060\u3051\u3067\u3088\u304f\u306a\u308a\u307e\u3059\u3002\n\n\u524d\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3001\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\n\u8907\u5408\u4ee3\u5165\u6f14\u7b97\u5b50\n\u7b49\u4fa1\u6bd4\u8f03\u6f14\u7b97\u5b50\u3001\u5c0f\u306a\u308a\u6f14\u7b97\u5b50\n\n\u4ed6\u306b\u3082\u3001std::rel_ops\u3067\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u306a\u3044\u3001\u53f3\u8fba\u306b\u4efb\u610f\u306e\u578bU\u3092\u53d6\u308b\u6a5f\u80fd\u3084\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u4f5c\u6210\u306b\u5fc5\u8981\u306a\u6f14\u7b97\u5b50\u306e\u81ea\u52d5\u5b9a\u7fa9\u306a\u3069\u3001\u591a\u304f\u306e\u6a5f\u80fd\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u6a5f\u80fd\u306f\u30d8\u30c3\u30c0\u30aa\u30f3\u30ea\u30fc\u3067\u4f7f\u7528\u3067\u304d\u307e\u3059\u306e\u3067\u3001\u305c\u3072\u8997\u3044\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u306d\u3002\nhttp://www.boost.org/doc/libs/1_61_0/libs/utility/operators.htm\n\n\u304a\u307e\u3051\uff12\n\u81ea\u4f5c\u306e\u30dd\u30a4\u30f3\u30bf\u578b\u306e\u30e9\u30c3\u30d1\u578b\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u305d\u3082\u305d\u3082\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3063\u3066\u3001\u30dd\u30a4\u30f3\u30bf\u3082\u542b\u3081\u3066\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3058\u3083\u306a\u3044\u3093\u3067\u3059\u3088\u306d\u3002\u7d99\u627f\u3067\u304d\u306a\u3044\u3057\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u7684\u306b\u306f\u4e2d\u9014\u534a\u7aef\u306a\u3093\u3067\u3059\u3002\u307f\u305f\u3044\u306a\u4e0d\u6e80\u3092\u62b1\u3044\u305f\u3068\u3057\u3066\u3001\u30dd\u30a4\u30f3\u30bf\u578b\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u4e8c\u9805\u6f14\u7b97\u5b50\u305f\u3061\u306f\u672c\u5f53\u306b\u305f\u3060\u9762\u5012\u304f\u3055\u3044\u3060\u3051\u306a\u306e\u3067\u66f8\u304d\u307e\u305b\u3093\u3002Boost.Operators\u4f7f\u3046\u304b\u3001\u81ea\u5206\u3067\u4f3c\u305f\u306e\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002\ntemplate<class T>\nclass pointer\n{\n  using this_type = pointer<T>;\n  T* _ptr;\n\npublic:\n  using value_type = T;\n  using reference = value_type&;\n  using const_reference = const value_type&;\n  using difference_type = std::ptrdiff_t;\n\n  pointer() noexcept : _ptr() {}\n  pointer(T* p) noexcept : _ptr(p) {}\n\n  T* get() const noexcept { return _ptr; }\n\n  T* operator->() const noexcept { return _ptr; }\n  reference operator*() const noexcept { return (*_ptr); }\n\n  // \u3053\u306e\u5834\u5408\u306e\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50\u306f\u95a2\u7bc0\u53c2\u7167\u6f14\u7b97\u5b50\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\n  reference operator[](std::ptrdiff_t diff) { return *(_ptr + diff); }\n  const_reference operator[](std::ptrdiff_t diff) const { return *(_ptr + diff); }\n\n  reference operator++() { ++_ptr; return (*this); }\n  reference operator--() { --_ptr; return (*this); }\n  value_type operator++(int) { this_type temp(*this); ++*this; return temp; }\n  value_type operator--(int) { this_type temp(*this); --*this; return temp; }\n\n  explicit operator bool() const noexcept { return _ptr; }\n  bool operator!() const noexcept { return !static_cast<bool>(*this); }\n\n  template<class U,\n    std::enable_if_t<std::is_member_function_pointer<U>::value, std::nullptr_t> = nullptr>\n  auto operator->*(U u) const noexcept\n  {\n    return [u, this](auto... args)\n    { // lambda\n      return (_ptr->*u)(std::forward<decltype(args)>(args)...);\n    };\n  }\n\n  template<class U,\n    std::enable_if_t<std::is_member_object_pointer<U>::value, std::nullptr_t> = nullptr>\n  auto& operator->*(U u) const noexcept\n  {\n    return _ptr->*u;\n  }\n\n  reference operator+=(difference_type diff)\n    { _ptr += diff; return (*this); }\n  reference operator-=(difference_type diff)\n    { _ptr -= diff; return (*this); }\n\n};\n\ntemplate<class T, class U>\nstatic inline bool operator==(const pointer<T>& p1, const pointer<U>& p2) noexcept\n{\n  return p1.get() == p2.get();\n}\n\n// \u3053\u306e\u6e1b\u7b97\u306f\u4f8b\u306e\u5384\u4ecb\u306a\u3084\u3064\u3002\ntemplate<class T, class U>\nstatic inline auto operator-(const pointer<T>& p1, const pointer<U>& p2)\n  ->typename pointer<T>::difference_type\n{\n  return typename pointer<T>::difference_type(p1.get() - p2.get());\n}\n\n9/21/2016 \u8ffd\u8a18\npointer\u306e\u30b3\u30fc\u30c9\u3092\u3061\u3083\u3093\u3068\u898b\u76f4\u3057\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u901a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u898b\u6804\u5f35\u3063\u3066\u30e1\u30f3\u30d0\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u6f14\u7b97\u5b50\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u30ac\u30c3\u30c4\u30eaC++14\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u306eURL\u3067\u5b9f\u969b\u306b\u52d5\u304f\u3068\u3053\u308d\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nhttp://ideone.com/WZ6vaB\n\n\u304a\u308f\u308a\u306b\n\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u4ee5\u4e0a\u3067\u5168\u3066\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u53ef\u80fd\u306a\u6f14\u7b97\u5b50\u3092\u89e3\u8aac\u3044\u305f\u3057\u307e\u3057\u305f\u3002\n\u5927\u3052\u3055\u306a\u30bf\u30a4\u30c8\u30eb\u3067\u3054\u3081\u3093\u306a\u3055\u3044\u3002\n\u8aa4\u308a\u3084\u4e0d\u660e\u306a\u70b9\u304c\u3042\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u306b\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n# \u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u3067\u306fC++\u306e\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u4f7f\u3044\u6163\u308c\u3066\u3044\u306a\u3044\u4eba\u306e\u70ba\u306e\u307e\u3068\u3081\u3068\u3057\u3066\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\nC++\u306e\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3001\u5f15\u6570\u3084\u623b\u308a\u5024\u306b\u81ea\u7531\u304c\u5229\u304d\u3059\u304e\u3066\u3069\u3046\u3059\u308b\u306e\u304c\u30bb\u30aa\u30ea\u30fc\u306a\u306e\u304b\u5206\u304b\u3089\u306a\u3044\u305e\u3001\u3068\u3044\u3046\u3088\u3046\u306a\u3068\u304d\u306b\u898b\u3066\u9802\u3051\u305f\u3089\u3068\u601d\u3044\u307e\u3059\u3002\n\u4e3b\u306b\u5f15\u6570\u3084\u623b\u308a\u5024\u3092\u4e2d\u5fc3\u306b\u636e\u3048\u307e\u3059\u304c\u3001\u7d30\u304b\u3044\u6a5f\u80fd\u3082\u7db2\u7f85\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\u79c1\u306f\u4e8c\u9805\u6f14\u7b97\u5b50\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u6559\u306e\u4fe1\u5f92\u3067\u3042\u308a\u3001const\u6559\u306e\u656c\u8654\u306a\u4fe1\u5f92\u3067\u3059\u3002\n\u512a\u5148\u9806\u4f4d\u306e\u9806\u306b\u3001\u6f14\u7b97\u5b50\u5225\u306b\u89e3\u8aac\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001`this`\u306e\u578b\u3092 `T* const`\u578b\u3068\u3057\u3001`T`\u3068\u306f\u5225\u306e\u4efb\u610f\u306e\u578b\u3092`U`\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3067\u306f\u3001\u65e9\u901f\u89e3\u8aac\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# Member Selection\n\n```cpp\nU* operator->() const noexcept ;\n```\n\n\u30e1\u30f3\u30d0\u9078\u629e\u6f14\u7b97\u5b50\u3002\u30c9\u30c3\u30c8\u6f14\u7b97\u5b50\u306f\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u8f09\u305b\u308b\u306e\u306f\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u3060\u3051\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u6f14\u7b97\u5b50\u306e\u6587\u8108\u3067\u4f7f\u3046\u306b\u306f\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u3092\u6301\u3063\u305f\u4efb\u610f\u306e\u578b`U`\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u751f\u30dd\u30a4\u30f3\u30bf\u3084`std::unique_ptr`\u306e\u3088\u3046\u306a\u30e6\u30cb\u30fc\u30af\u30dd\u30a4\u30f3\u30bf\u306a\u3069\u3067\u3059\u306d\u3002\u6ce8\u610f\u3059\u3079\u304d\u306f\u3001\u57fa\u672c\u7684\u306b\u623b\u308a\u5024\u306fconst\u306b\u3057\u3066\u306f\u306a\u3089\u306a\u3044\u3053\u3068\u3001\u30e1\u30f3\u30d0\u95a2\u6570\u306fconst\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u3067\u3059\u3002\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001const\u3068\u305d\u3046\u3067\u306a\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u7528\u610f\u3059\u308b\u306e\u306f\u591a\u304f\u306e\u5834\u5408\u8aa4\u308a\u3067\u3059\u3002\n\n```cpp\nconst U* operator->() const noexcept;\nU* operator->() noexcept;\n```\n\n***\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u306b\u3064\u3044\u3066\u30012016/12/24 \u8ffd\u8a18:***\n\n\u3053\u308c\u306f\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u3092\u6301\u3064\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3084\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u3001\u305d\u308c\u304c\u793a\u3059\u8981\u7d20\u3068\u306e\u95a2\u4fc2\u3092\u8003\u3048\u308b\u3068\u3088\u304f\u7406\u89e3\u3067\u304d\u307e\u3059\u3002\n\n```cpp\ntemplate< class T >\nclass pointer\n{\n  T* ptr;\n\npublic:\n  T* // \u623b\u308a\u5024\u306econst\u306f\u3053\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u8981\u7d20\u306e\u5909\u66f4\u306e\u53ef\u5426\u3092\u793a\u3059\n  operator->() const noexcept // \u3053\u3053\u306econst\u306f\u3053\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u5909\u66f4\u306e\u53ef\u5426\u3092\u793a\u3059\n    { return ptr; }\n};\n\n...\n\npointer<int> p = &value;\n*p = 12; // p \u306e\u4e2d\u8eab\u306f\u5909\u308f\u308b\u3051\u3069p \u306f\u5909\u308f\u3089\u306a\u3044; \u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u3067\u8a00\u3046\u623b\u308a\u5024\u306econst\u306b\u95a2\u308f\u308b\np = &another; // p \u306e\u4e2d\u8eab\u306f\u5909\u308f\u3089\u306a\u3044\u3051\u3069p \u306f\u5909\u308f\u308b; \u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u3067\u8a00\u3046const\u4fee\u98fe\u306b\u95a2\u308f\u308b\np = nullptr; // p \u306e\u4e2d\u8eab\u306f\u5909\u308f\u3089\u306a\u3044\u3051\u3069p \u306f\u5909\u308f\u308b\n```\n\n\u4e0a\u306e\u4f8b\u3067\u306f\u3001\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u306e\u793a\u3059\u8981\u7d20\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u72b6\u614b\u306e\u9593\u306b\u306f\u95a2\u4fc2\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u305f\u3060\u3057\u3001`optional`\u306b\u4ee3\u8868\u3055\u308c\u308b\u3088\u3046\u306a\u7279\u6b8a\u306a\u4f7f\u308f\u308c\u65b9\u3092\u3059\u308b\u3068\u304d\u306f\u4f8b\u5916\u3067\u3059\u3002\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u306f\u4f55\u3092\u793a\u3059\u306e\u304b\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u306e\u793a\u3059\u3082\u306e\u306e\u95a2\u4fc2\u306f\u3069\u3046\u3067\u3042\u308b\u304b\u3001\u3057\u3063\u304b\u308a\u8003\u3048\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u306d\u3002\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u306e\u793a\u3059\u8981\u7d20\u306f\u3059\u306a\u308f\u3061\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u72b6\u614b\u3068\u8a00\u3048\u307e\u3059\u3002\n\n```cpp\ntemplate< class T >\nclass optional\n{\n  T value;\n\npublic:\n  const T* operator->() const noexcept { return &value; }\n  T* operator->() noexcept { return &value; }\n};\n\n...\n\noptional<int> n = 1;\n*n = 123; // n \u306e\u4e2d\u8eab\u304c\u5909\u308f\u308b\u3053\u3068\u306f\u3059\u306a\u308f\u3061n \u304c\u5909\u308f\u308b\u3053\u3068\u3092\u610f\u5473\u3059\u308b\nn = 456; // \u3053\u306e\u6587\u8108\u3067\u306f *n = 456 \u306b\u7b49\u4fa1\u306a\u64cd\u4f5c\nn = nullopt; // n \u3092\u5909\u3048\u308b\u51e6\u7406\u3002*n = nullopt \u3068\u306f\u66f8\u304d\u63db\u3048\u3089\u308c\u306a\u3044\u3002\n```\n\n\u4f7f\u7528\u4f8b\u3002\n\n``` cpp\nstd::unique_ptr<std::string> ptr(new string());\nptr->push_back('a'); // ptr.operator->()->push_back('a'); \u3068\u5168\u304f\u7b49\u4fa1\u3002\n```\n\n\n# Array Subscript\n\n```cpp\nconst U& operator[](std::size_t) const ;\nU& operator[](std::size_t) ;\n\n// \u5b89\u5168\u6027\u3092\u9ad8\u3081\u305f\u3051\u308c\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\uff13\u3064\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u7528\u610f\u3057\u3066\u3082\u3088\u3044\u3002\nconst U& operator[](std::size_t) const& ;\nU& opeorator[](std::size_t) &;\nU operator[](std::size_t) && ;\n```\n\n\u6dfb\u5b57\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\u591a\u304f\u306e\u5834\u5408const\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u975econst\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u4e21\u65b9\u3092\u7528\u610f\u3057\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u3051\u3093\u3002\u5f15\u6570\u306f\u4f8b\u3068\u3057\u3066`std::size_t`\u3092\u5165\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u30b3\u30f3\u30c6\u30ca\u306e\u6027\u8cea\u306b\u3088\u3063\u3066\u69d8\u3005\u306b\u306a\u308a\u307e\u3059\u3002\u975econst\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u3001\u623b\u308a\u5024\u306f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306e\u53c2\u7167\u578b\u3067\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u304c\u3001\u30b3\u30f3\u30c6\u30ca\u306b\u5024\u3092\u8a2d\u5b9a\u3067\u304d\u308b\u3088\u3046\u306a\u4ed5\u7d44\u307f\u304c\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\n\n``` cpp\nstd::bitset<8> bit {};\n// bool& elem = bit[0]; // std::vector\u306a\u3069\u3067\u306f\u5076\u7136\u4f7f\u3048\u308b\u304c\u3001\u3053\u308c\u306f\u5b9f\u306fcontainer\u30b3\u30f3\u30bb\u30d7\u30c8\u306b\u306f\u542b\u307e\u308c\u306a\u3044\u3002\nauto&& elem = bit[0]; // \u53c2\u7167\u578b\u306b\u675f\u7e1b\u3057\u305f\u3051\u308c\u3070\u3001universal reference \u3092\u4f7f\u3046\u306e\u304c\u78ba\u5b9f\u3002\u3053\u3053\u3067\u306fstd::bitset<8>::reference&&\u304c\u63a8\u8ad6\u3055\u308c\u308b\u3002\nbit[0] = U(); // \u975econst\u578b\u306eoperator[]\u306f\u3053\u308c\u3092\u4fdd\u8a3c\u3057\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u3002\n``` \n\n\u4e0b\u306e3\u3064\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u3044\u3046\u306e\u306f\u3001\u4e0a2\u3064\u304c\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5185\u90e8\u306b\u4fdd\u6301\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u53c2\u7167\u3092\u8fd4\u3057\u3046\u308b\u306e\u306b\u5bfe\u3057\u3001\u305d\u308c\u3092\u9632\u3050\u3088\u3046\u306b\u6539\u3081\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u8a00\u3048\u307e\u3059\u3002\u4e0a2\u3064\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u554f\u984c\u304c\u767a\u751f\u3057\u3048\u307e\u3059\u3002\n\n```cpp\nint& n = std::vector<int>{1, 2, 3}[0]; // oops, n is a dangling reference.\nauto&& m = std::vector<int>{1, 2, 3}[1]; // oops, the same problem occurs.\n```\n\n\u3053\u308c\u3092\u9632\u3050\u305f\u3081\u3001\u53f3\u8fba\u5024\u306e\u5834\u5408\u306b\u9650\u3063\u3066\u53c2\u7167\u3067\u306f\u306a\u304f\u5b9f\u4f53\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```cpp\ntemplate<class T, class Alloc = std::allocator<T>>\nclass my_vector\n{\n  std::vector<T, Alloc> vec;\n  \npublic:\n  my_vector(std::initializer_list<T> init) : vec{init} {}\n  T& operator[](std::size_t n) & { return vec[n]; }\n  const T& operator[](std::size_t n) const& { return vec[n]; }\n  T operator[](std::size_t n) && { return std::move(vec[n]); } // \u624b\u52d5\u30e0\u30fc\u30d6\u3002noexcept\u304c\u3042\u3063\u3066\u3082\u3088\u3044\u3002\n};\n```\n\n\u81ea\u4f5c\u30b3\u30f3\u30c6\u30ca\u3092\u4f5c\u308b\u306a\u3089\u3053\u308c\u304f\u3089\u3044\u6c17\u306e\u5229\u3044\u305f\u3082\u306e\u3092\u4f5c\u308a\u305f\u3044\u3067\u3059\u306d\u3002\u3053\u308c\u3082\u542b\u3081\u3066\u3001\u30af\u30e9\u30b9\u5185\u90e8\u3078\u306e\u53c2\u7167\u3092\u53d6\u308b\u3068\u304d\u306b\u306funiversal reference\u304c\u63a8\u5968\u3055\u308c\u308b\u306e\u3067\u3059\u3002\n\n```cpp\nint& n = my_vector<int>{1, 2, 3}[0]; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\nauto&& m = my_vector<int>{1, 2, 3}[1]; // OK. m\u306fint&&\u3068\u63a8\u8ad6\u3055\u308c\u3001\u53c2\u7167\u5148\u306e\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306fm\u3068\u540c\u3058\u3060\u3051\u5ef6\u547d\u3055\u308c\u308b\u3002\n```\n\n\n\n\n# Function Call\n\n``` cpp\nU operator()(Args) ;\n```\n\n\u95a2\u6570\u547c\u3073\u51fa\u3057\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u623b\u308a\u5024\u3001\u5f15\u6570\u3001const\u6307\u5b9a\u306a\u3069\u5168\u304f\u306e\u81ea\u7531\u3067\u3059\u3002\u6700\u3082\u3088\u304f\u4f7f\u3046\u306e\u306f\u8ff0\u8a9e\u3068\u3057\u3066\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u95a2\u6570\u306b\u7a81\u3063\u8fbc\u3093\u3060\u308a\u3067\u3059\u304b\u306d\u3002\u30e9\u30e0\u30c0\u5f0f\u306b\u304a\u682a\u3092\u596a\u308f\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3051\u3069\u3002\n\u5f8c\u306f\u72b6\u614b\u3092\u6301\u3063\u305f\u95a2\u6570\u3092static\u5909\u6570\u3092\u4f7f\u308f\u305a\u306b\u5b9f\u73fe\u3057\u305f\u3044\u3068\u304d\u306a\u3069\u306b\u4f7f\u3044\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092C++\u3067\u306f\u7279\u306b\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u547c\u3073\u307e\u3059\u3002\n\u4ee5\u4e0b\u306bC++14\u6642\u70b9\u3067\u306e`std::plus`\u306e\u5b9f\u88c5\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\n```cpp\nnamespace std\n{\ntemplate<class T = void>\nclass plus\n{\npublic:\n  constexpr T operator()(const T& t1, const T& t2) const { return t1 + t2; }\n};\ntemplate<>\nclass plus<void>\n{\npublic:\n  template<class T, class U>\n  constexpr auto operator()(const T& t, const U& u) const { return t + u; }\n};\n}\n```\n\n\u5b9f\u969b\u306b\u4f7f\u3046\u3068\u3053\u3093\u306a\u611f\u3058\u3002\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306bvoid\u3092\u6307\u5b9a\u3059\u308b\u3068\u5f15\u6570\u3068\u623b\u308a\u5024\u3092\u63a8\u8ad6\u3057\u3066\u304f\u308c\u308b\u3002\u307b\u306e\u304b\u306a\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306e\u9999\u308a\u3002\n\n```cpp\nstd::plus<> plus;\nint n = plus(1, 2); // n == 3\n```\n\n\u3076\u3063\u3061\u3083\u3051\u3001`std::plus`\u306f`T`\u3068`U`\u306e\u4e21\u65b9\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u6307\u5b9a\u3067\u304d\u308b\u3079\u304d\u3060\u3063\u305f\u3002\n\n```cpp\n// \u7406\u60f3\ntemplate<class T = void, class U = T>\nclass plus\n{\npublic:\n  constexpr auto operator()(const T& t, const U& u) const { return t + u; }\n};\ntemplate<>\nclass plus<void, void>\n{\npublic:\n  template<class T, class U>\n  constexpr auto operator()(const T& t, const U& u) const { return t + u; }\n};\n```\n\n\n\n# Postfix Increment/Decrement\n\n``` cpp\nT operator++(int) ;\nT operator--(int) ;\n```\n\n\u5f8c\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002const\u6307\u5b9a\u306f\u306a\u3057\u3067\u3001\u4e88\u3081\u4fdd\u5b58\u3057\u3066\u304a\u3044\u305f\u5909\u66f4\u524d\u306ethis\u3092\u8fd4\u5374\u3059\u3079\u304d\u3067\u3059\u3002\u5f15\u6570\u306b\u306a\u306b\u304c\u6e21\u3055\u308c\u308b\u304b\u306f\u8b0e\u3067\u3059\u3002\n\n```cpp\nint n = 1;\nint m = n++; // m\u306b\u306f1\u304c\u5165\u308b\u3002\n```\n\n# Prefix Increment/Decremrnt\n\n``` cpp\nT& operator++() ;\nT& operator--() ;\n```\n\n\u524d\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002const\u6307\u5b9a\u306f\u306a\u3057\u3067\u3001this\u53c2\u7167\u3092\u8fd4\u5374\u3059\u3079\u304d\u3067\u3059\u3002\n\n```cpp\nint n = 1;\nint m = ++n; // m\u306b\u306f2\u304c\u5165\u308b\u3002\n```\n\n\n# One's Complement\n\n``` cpp\nT operator~() const ;\n```\n\n\u30d3\u30c3\u30c8\u5426\u5b9a\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u305f\u307e\u306b\u52d8\u9055\u3044\u3055\u308c\u307e\u3059\u304c\u3001\u3053\u306e\u6f14\u7b97\u5b50\u306f\u547c\u3073\u51fa\u3057\u5143\u306b\u306f\u5909\u66f4\u3092\u52a0\u3048\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n```cpp\nint n = 0 ^ 0; // \u5168\u3066\u306e\u30d3\u30c3\u30c8\u3092\u4f0f\u305b\u305f\u72b6\u614b\u3067\u521d\u671f\u5316\u3002\nn = ~n; // \u5168\u3066\u306e\u30d3\u30c3\u30c8\u3092\u7acb\u3066\u308b\u3002\n```\n\n# Logical Not\n\n``` cpp\nbool operator!() const noexcept { return !static_cast<bool>(*this); }\n``` \n\n\u8ad6\u7406\u5426\u5b9a\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u307e\u305f\u623b\u308a\u5024\u304cbool\u306b\u6697\u9ed9\u5909\u63db\u53ef\u80fd\u306a\u578b\u3067\u3042\u308a\u3001const\u6307\u5b9a\u304c\u3055\u308c\u3066\u3044\u3066\u3001\u4f8b\u5916\u3092\u9001\u51fa\u3057\u306a\u3044\u95a2\u6570\u3068\u3059\u308b\u3079\u304d\u3067\u3059\u3002\n\u591a\u304f\u306e\u5834\u5408\u3001\u3053\u306e\u6f14\u7b97\u5b50\u3092\u5b9f\u88c5\u3059\u308b\u578bT\u306fbool\u578b\u3078\u5909\u63db\u53ef\u80fd\u306a\u578b\u3067\u3042\u308a\u3001\u3053\u3053\u3067\u306f\u6700\u3082\u5178\u578b\u7684\u306a\u5b9f\u88c5\u3092\u4f8b\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```cpp\nstd::unique_ptr<int> ptr(new int());\nif (ptr) { /* \u306a\u3093\u304b */ }\nif (!ptr) { /* \u306a\u3093\u304b */ }\n```\n\n# Unary Negation/Plus\n\n``` cpp\nT operator-() const ;\nT operator+() const ;\n```\n\n\u5358\u9805\u30de\u30a4\u30ca\u30b9\u6f14\u7b97\u5b50\u3068\u5358\u9805\u30d7\u30e9\u30b9\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u307e\u305f\u3001const\u6307\u5b9a\u3055\u308c\u3066\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\n\n```cpp\nint1024_t n = 100;\nuint1024_t m = +n;\nauto l = -m; // m\u306f\u7b26\u53f7\u306a\u3057\u306e\u81ea\u4f5c\u578b\u306a\u306e\u3067\u3001\u5358\u9805\u30de\u30a4\u30ca\u30b9\u306e\u623b\u308a\u5024\u306e\u578b\u306fint2048_t\u304c\u7406\u60f3\u3002\n```\n\n# Address-of\n\n``` cpp\nT* operator&() const noexcept ;\n```\n\n\u30a2\u30c9\u30ec\u30b9\u53d6\u5f97\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u57fa\u672c\u7684\u306b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001c++98\u306a\u3069\u3067nullptr\u3092\u81ea\u524d\u3067\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306a\u3069\u306b\u306f\u4f7f\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n```cpp\nclass nullptr_t\n{\n  /*\u3054\u306b\u3087\u3054\u306b\u3087*/\n\nprivate:\n  nullptr_t* operator&() const noexcept ; // \u30a2\u30c9\u30ec\u30b9\u53d6\u5f97\u3092\u7981\u6b62\n};\nstatic constexpr nullptr_t nullptr; // \u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a2\u30c9\u30ec\u30b9\u306f\u53d6\u5f97\u3067\u304d\u306a\u3044\u3002\n``` \n\n\u307e\u3042\u3001`std::addressof`\u95a2\u6570\u3092\u4f7f\u3048\u3070\u3069\u3046\u3063\u3066\u3053\u3068\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u3053\u3093\u306a\u95a2\u6570\u304c\u3042\u308b\u7406\u7531\u306b\u306a\u308b\u7a0b\u5ea6\u306b\u306f\u30a2\u30c9\u30ec\u30b9\u53d6\u5f97\u6f14\u7b97\u5b50\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u3079\u304d\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d\u3002\n\n# Indirection\n\n``` cpp\nT& operator*() const noexcept ;\n``` \n\n\u95a2\u7bc0\u53c2\u7167\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u540c\u69d8\u3001\u3053\u306e\u6f14\u7b97\u5b50\u306f\u5e38\u306bconst\u6307\u5b9a\u3092\u3057\u3066\u4f8b\u5916\u3092\u9001\u51fa\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3079\u304d\u3067\u3059\u3002\u3053\u306e\u6f14\u7b97\u5b50\u3067\u306fconst\u6307\u5b9a\u3068\u623b\u308a\u5024\u306econst\u306f\u5168\u304f\u95a2\u4fc2\u306a\u3044\u3053\u3068\u306b\u6c17\u3092\u3064\u3051\u3066\u304f\u3060\u3055\u3044\u3002\n\n```cpp\nstd::unique_ptr<int> ptr(new int());\nint& elem = *ptr;\n```\n\n\u3053\u306e\u95a2\u6570\u3067\u3082\u6dfb\u5b57\u6f14\u7b97\u5b50\u3068\u540c\u3058\u554f\u984c\u304c\u767a\u751f\u3057\u5f97\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u6f14\u7b97\u5b50\u306f\u305d\u306e\u76ee\u7684\u4e0a\u53f3\u8fba\u5024\u53c2\u7167\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306f\u3057\u306a\u3044\u65b9\u304c\u3088\u3044\u3068\u601d\u308f\u308c\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u304c\u5927\u3044\u306b\u3042\u308a\u5f97\u308b\u304b\u3089\u3067\u3059\u3002\n\n```cpp\nsomething s;\nsomething& rs = *my_pointer_wrapper<something>(&s);\n```\n\n\n# Create/Destroy Object\nnew/delete\u6f14\u7b97\u5b50\u306f\u975e\u5e38\u306b\u6df1\u3044\u8a71\u984c\u3067\u3042\u308b\u306e\u3067\u3053\u306e\u8a18\u4e8b\u306b\u542b\u3081\u308b\u3053\u3068\u306f\u3057\u306a\u3044\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n2016/10/01 \u8ffd\u8a18: \u5225\u306b\u8a18\u4e8b\u3092\u3054\u7528\u610f\u3044\u305f\u3057\u307e\u3057\u305f\u3002\u3088\u308d\u3057\u3051\u308c\u3070\u3053\u3061\u3089\u3082\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n[new/delete \u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9](http://qiita.com/rinse_/items/e727ebe395a5e4948a84)\n\n# Cast\n\n``` cpp\n[explicit(optional)] operator U() const noexcept ;\n```\n\n\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u3053\u306e\u6f14\u7b97\u5b50\u306b\u306f\u623b\u308a\u5024\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002C++11\u304b\u3089\u3053\u306e\u6f14\u7b97\u5b50\u306b\u306fexplicit\u3092\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u3053\u308c\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u6697\u9ed9\u306e\u5909\u63db\u3092\u9632\u3044\u3067\u304f\u308c\u307e\u3059\u3002\n\u6df7\u4e71\u3055\u308c\u308b\u65b9\u304c\u591a\u3044\u3067\u3059\u304c\u3001\u4ed6\u306e\u578b\u304b\u3089\u3053\u306e\u578b\u306b\u5909\u63db\u3059\u308b\u306b\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3001\u3053\u306e\u578b\u304b\u3089\u4ed6\u306e\u578b\u306b\u5909\u63db\u3059\u308b\u306b\u306f\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u3092\u4f7f\u3044\u307e\u3059\u3002\u4e21\u8005\u306f\u4f9d\u5b58\u95a2\u4fc2\u3092\u3088\u304f\u8003\u3048\u3066\u4f7f\u3046\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```cpp\nclass something\n{\npublic:\n  // ...\n\n  // \u6700\u3082\u3088\u304f\u4f7f\u3046bool\u578b\u3078\u306e\u5909\u63db\n  //   \u57fa\u672c\u7684\u306b\u306fexplicit\u304c\u3042\u3063\u305f\u65b9\u304c\u3088\u3044\u3002\n  //   \u306a\u3044\u3068\u3001bool\u306b\u6697\u9ed9\u5909\u63db\u3055\u308c\u3066int\u306b\u578b\u6607\u683c\u3055\u308c\u3066\u2026\u3068\u3044\u3046\u5177\u5408\u306b\u610f\u5473\u5206\u304b\u3089\u306a\u3044\u578b\u5909\u63db\u306b\u632f\u308a\u56de\u3055\u308c\u308b\u3002\n  explicit operator bool() const noexcept { return is_empty(); }\n  bool operator!() const noexcept { return !static_cast<bool>(*this); } // \u5927\u62b5\u30ef\u30f3\u30bb\u30c3\u30c8\n};\n```\n\n\u3053\u306esomething\u578b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5229\u7528\u3067\u304d\u308b\u3002\n\n```cpp\nsomething s;\nif (s) { /*do something*/ }\nif (!s) { /* do something */ }\n\n// int n = s + 1; // oops! bool\u3078\u306e\u6697\u9ed9\u5909\u63db\u306f\u7981\u3058\u3089\u308c\u3066\u3044\u308b\u3002explicit\u3092\u4ed8\u3051\u306a\u3051\u308c\u3070\u3053\u306e\u64cd\u4f5c\u306f\u53ef\u80fd\u306b\u306a\u308b\u3002\n```\n\n# Pointer-To-Member\n\n``` cpp\nV operator->*(V(U::*)(Args)) const noexcept ;\nV operator->*(V U::*) const noexcept ;\n```\n\n\u30e1\u30f3\u30d0\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u30a2\u30ed\u30fc\u6f14\u7b97\u5b50\u3068\u307b\u307c\u540c\u3058\u3082\u306e\u3067\u3059\u304c\u3001\u3053\u3061\u3089\u306f\u5f15\u6570\u306b\u4efb\u610f\u306e\u30e1\u30f3\u30d0\u95a2\u6570/\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u308a\u307e\u3059\u3002\u5229\u7528\u3059\u308b\u6a5f\u4f1a\u3082\u5c11\u306a\u3044\u306e\u3067\u3001\u30dd\u30a4\u30f3\u30bf\u306e\u30e9\u30c3\u30d1\u3092\u4f5c\u308a\u305f\u3044\u6642\u306b\u3001\u66f4\u306b\u3053\u3060\u308f\u3063\u3066\u307f\u305f\u3044\u6642\u306b\u3067\u3082\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\n\n# Arithmetic\n\n```cpp\nT operator*(const T& t1, const T& t2) { return T(t1) *= t2; }\nT operator/(const T& t1, const T& t2) { return T(t1) /= t2; }\nT operator%(const T& t1, const T& t2) { return T(t1) %= t2; }\nT operator+(const T& t1, const T& t2) { return T(t1) += t2; }\nT operator-(const T& t1, const T& t2) { return T(t1) -= t2; }\nDiff operator-(const T&, const T& t2) ; // \u30dd\u30a4\u30f3\u30bf\u3084\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5834\u5408 ...(*1)\nT operator-(const T& t, Diff diff) { return t -= diff; } // \u30dd\u30a4\u30f3\u30bf\u3084\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5834\u5408 ...(*2)\n```\n\n\u7b97\u8853\u6f14\u7b97\u5b50\u3002\u3053\u308c\u3089\u6f14\u7b97\u5b50\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u3053\u308c\u3089\u306e\u7b97\u8853\u6f14\u7b97\u5b50\u306f\u901a\u5e38\u8907\u5408\u4ee3\u5165\u6f14\u7b97\u5b50\u3068\u540c\u6642\u306b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u308b\u306e\u3067\u3001\u6a5f\u68b0\u7684\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002(*1\u3092\u9664\u304f)\n\u6e1b\u7b97\u6f14\u7b97\u5b50\u3060\u3051\u306f\u8272\u3005\u3068\u90fd\u5408\u304c\u3042\u308a\u3001\u6570\u5b66\u7684\u306a\u578b\u306b\u5b9f\u88c5\u3055\u308c\u305f\u5834\u5408\u3068\u30dd\u30a4\u30f3\u30bf\u3084\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5b9f\u88c5\u3055\u308c\u305f\u5834\u5408\u3068\u3067\u5927\u304d\u304f\u6027\u8cea\u304c\u5909\u308f\u308a\u307e\u3059\u3002\u7279\u306b\u3001`Diff operator-(const T&, const T&) ;`\u3068\u3044\u3046\u30d1\u30bf\u30fc\u30f3\u306e\u6e1b\u7b97\u306f\u30d5\u30ec\u30f3\u30c9\u6307\u5b9a\u3055\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\u79c1\u306f\u4e8c\u9805\u6f14\u7b97\u5b50\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u6559\u5f92\u306a\u306e\u3067\u3001\u30d5\u30ec\u30f3\u30c9\u3092\u30cf\u30e9\u30fc\u30e0\u306b\u6307\u5b9a\u3059\u308b\u5b97\u6559\u306e\u4eba\u306f\u3053\u3053\u3067\u306f\u3069\u3046\u304b\u3054\u5bb9\u8d66\u304f\u3060\u3055\u3044\u3002\n\n```cpp\nint n = 123, m = 456;\nint l = n - m;\n\nint array[10] {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};\nint* pbegin = array;\nint* pend = array + 10;\nstd::ptrdiff_t diff = pend - pbegin; // \u30dd\u30a4\u30f3\u30bf\u3068\u30dd\u30a4\u30f3\u30bf\u306e\u5dee\u306fstd::ptrdiff_t\u578b\u3067\u5b9a\u7fa9\u3055\u308c\u308b\u3002(*1)\nint i = *(pend - 5); // \u30dd\u30a4\u30f3\u30bf\u304b\u3089std::ptrdiff_t\u578b\u3092\u5f15\u304f\u3068\u30dd\u30a4\u30f3\u30bf\u578b\u304c\u8fd4\u308b\u3002(*2)\n```\n\n# Shift\n\n```cpp\nT operator<<(const T& t, std::size_t n) { return T(t) <<= n; }\nT operator>>(const T& t, std::size_t n) { return T(t) >>= n; }\n\ntemplate<class Char, class Traits>\nstd::basic_ostream<Char, Traits>& operator<<(\n    std::basic_ostream<char, Traits>& os, const T&) ;\ntemplate<class Char, class Traits>\nstd::basic_istream<Char, Traits>& operator>>(\n    std::basic_istream<char, Traits>& is, const T&) ;\n```\n\n\u30b7\u30d5\u30c8\u6f14\u7b97\u5b50\u3002\u3053\u308c\u3089\u306e\u6f14\u7b97\u5b50\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u7b97\u8853\u6f14\u7b97\u5b50\u540c\u69d8\u3001\u901a\u5e38\u8907\u5408\u4ee3\u5165\u6f14\u7b97\u5b50\u3068\u540c\u6642\u306b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u308b\u306e\u3067\u6a5f\u68b0\u7684\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nC++\u3067\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7981\u5fcc\u3068\u3055\u308c\u308b\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u60aa\u7528\u3092\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3053\u3053\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u6f14\u7b97\u5b50\u306b\u3064\u3044\u3066\u3082\u89e3\u8aac\u3057\u307e\u3059\u3002\u4e0b2\u3064\u306e\u5ba3\u8a00\u306f\u51fa\u5165\u529b\u6f14\u7b97\u5b50\u3084\u30b9\u30c8\u30ea\u30fc\u30e0\u6f14\u7b97\u5b50\u306a\u3069\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u3067\u3001\u5fc5\u305a\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u3001`std::cout`\u306a\u3069\u306b\u81ea\u4f5c\u306e\u578b\u3092\u6d41\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n# Compare\n\n```cpp\nbool operator<(const T&, const T&) ;\nbool operator>(const T& t1, const T& t2) { return t2 < t1; }\nbool operator<=(const T& t1, const T& t2) { return !(t1 > t2); }\nbool operator>=(const T& t1, const T& t2) { return !(t1 < t2); }\n```\n\n\u6bd4\u8f03\u6f14\u7b97\u5b50\u3002\u3053\u308c\u3089\u306e\u6f14\u7b97\u5b50\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u5b9f\u306f\u5c0f\u306a\u308a\u3055\u3048\u5b9a\u7fa9\u3057\u3066\u3057\u307e\u3048\u3070\u5f8c\u306f\u6a5f\u68b0\u7684\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u6f14\u7b97\u5b50\u306f\u305d\u3093\u306a\u306b\u66f8\u304f\u3053\u3068\u3082\u306a\u3044\u3067\u3059\u3002\n\n# Equality Compare\n\n```cpp\nbool operator==(const T&, const T&) ;\nbool operator==(const T& t1, const T& t2) { return !(t1 < t2) && !(t2 > t2); } // ...(*1)\nbool operator!=(const T& t1, const T& t2) { return !(t1 == t2); }\n```\n\n\u7b49\u4fa1\u6bd4\u8f03\u6f14\u7b97\u5b50\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u6bd4\u8f03\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u3067\u306f\u3001\u305d\u306e\u610f\u5473\u8ad6\u306b\u3088\u3063\u3066\u306f\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\u5168\u304f\u6a5f\u68b0\u7684\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059(*1)\u3002\n\n# Bitwise\n\n```cpp\nT operator&(const T& t1, const T& t2) { return ~(~t1 | ~t2); }\nT operator^(const T& t1, const T& t2) { return (t1 & ~t2) | (~t1) & t2; }\nT operator|(const T&, const T&) ;\n```\n\n\u30d3\u30c3\u30c8\u6f14\u7b97\u5b50\u3002\u3053\u308c\u3089\u306e\u6f14\u7b97\u5b50\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u8ad6\u7406\u548c\u3068\u30d3\u30c3\u30c8\u5426\u5b9a\u304c\u3042\u308c\u3070\u3001\u8ad6\u7406\u7a4d\u3068\u6392\u4ed6\u7684\u8ad6\u7406\u548c\u306f\u6a5f\u68b0\u7684\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n# Logical And/Or\n\n```cpp\nbool operator&&(const T& t1, const T& t2) { return !(!t1 || !t2); }\nbool operator||(const T&, const T&) ;\n```\n\n\u8ad6\u7406\u6f14\u7b97\u5b50\u3002\u8ad6\u7406\u6f14\u7b97\u5b50\u3063\u3066\u8a00\u3044\u65b9\u306f\u3042\u307e\u308a\u3057\u307e\u305b\u3093\u306d\u3002\u3053\u308c\u3089\u306e\u6f14\u7b97\u5b50\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\u8ad6\u7406\u548c\u3068\u8ad6\u7406\u5426\u5b9a\u304c\u3042\u308c\u3070\u8ad6\u7406\u7a4d\u306f\u6a5f\u68b0\u7684\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n# Assignment\n\n```cpp\nT& operator=(const U&) ;\nT& operator=(const T&) ;\nT& operator=(T&&) noexcept ;\n\n// \u3053\u3063\u3061\u306e\u65b9\u304c\u5b89\u5168\uff1f\u3000\u81ea\u7136\uff1f\nT& operator=(const U&) &;\nT& operator=(const T&) &;\nT& operator=(T&&) & noexcept;\n```\n\n\u4ee3\u5165\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u5f15\u6570\u306b\u306f\u4efb\u610f\u306e\u578b`U`\u3092\u53d6\u308a\u307e\u3059\u304c\u3001\u5178\u578b\u7684\u306b\u306f\u81ea\u8eab\u3068\u540c\u3058\u578b\u3078\u306e\u53c2\u7167\u3092\u53d6\u308b\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3068\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u304c\u5b9f\u88c5\u3055\u308c\u307e\u3059\u3002\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u306f\u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u623b\u308a\u5024\u306bthis\u53c2\u7167\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u304a\u5c3b\u306b\u30a2\u30f3\u30d1\u30b5\u30f3\u30c9\u304c\u3064\u3044\u3066\u3044\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u3001\u53f3\u8fba\u5024\u306b\u4ee3\u5165\u304c\u884c\u308f\u308c\u308b\u3053\u3068\u3092\u7981\u3058\u3066\u3044\u307e\u3059\u3002\u9593\u9055\u3063\u3066\u3082\u3053\u308c\u3092\u9632\u3050\u305f\u3081\u306b\u623b\u308a\u5024\u306e\u578b\u306bconst\u3092\u4ed8\u3051\u305f\u308a\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\n\n```cpp\n// \u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3067\u306f\u3053\u308c\u306f\u8a31\u3055\u308c\u306a\u3044\u3002\n1 = 2;\n// \u901a\u5e38\u3053\u308c\u306f\u8a31\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u30a2\u30f3\u30d1\u30b5\u30f3\u30c9\u4ed8\u304d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3060\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n// \u4e0d\u81ea\u7136\u306b\u898b\u3048\u308b\u304c\u5371\u967a\u306f\u5c11\u306a\u3044\u3002\nsomething() = something();\n\nsomething s1, s2;\ns1 = s2 = something(); // \u3053\u308c\u304c\u3067\u304d\u308b\u306e\u306fthis\u53c2\u7167\u3092\u8fd4\u3059\u304a\u304b\u3052\u3002\n```\n\n\n# Compound Assignment\n\n```cpp\nT& operator*=(const T&) ;\nT& operator/=(const T&) ;\nT& operator%=(const T&) ;\nT& operator+=(const T&) ;\nT& operator-=(const T&) ;\nT& operator<<=(const T&) ;\nT& operator>>=(const T&) ;\nT& operator&=(const T&) ;\nT& operator|=(const T&) ;\nT& operator^=(const T&) ;\n```\n\n\n\u8907\u5408\u4ee3\u5165\u6f14\u7b97\u5b50\u3002\u3053\u308c\u3089\u306e\u6f14\u7b97\u5b50\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u5f15\u6570\u306b\u306f\u4efb\u610f\u306e\u578b`U`\u3092\u53d6\u308a\u307e\u3059\u304c\u3001`const T&`\u304c\u4f7f\u308f\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u5370\u8c61\u3067\u3059\u3002\u6ce8\u610f\u70b9\u306f\u5168\u3066\u4ee3\u5165\u6f14\u7b97\u5b50\u3068\u540c\u3058\u3067\u3059\u3002\u3053\u3053\u3067\u3042\u306e\u4e8c\u9805\u6f14\u7b97\u5b50\u7fa4\u306e\u4e2d\u6838\u3092\u62c5\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u306d\u3002\n\n# Comma\n\n```cpp\n// \u30e1\u30f3\u30d0\u95a2\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\nU& operator,(U&) const noexcept ;\n\n// \u30b0\u30ed\u30fc\u30d0\u30eb\u95a2\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\nU& operator,(const T&, U&) noexcept ;\n```\n\n\u30b3\u30f3\u30de\u6f14\u7b97\u5b50\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3067\u3082\u4e00\u5fdc\u3059\u308b\u306a\u3089\u3001\u4e8c\u9805\u6f14\u7b97\u5b50\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u65b9\u304c\u826f\u3044\u6c17\u304c\u3057\u307e\u3059\u3002\n\u6bd4\u8f03\u7684\u6709\u540d\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u3066\u305f\u308a\u3055\u308c\u3066\u306a\u304b\u3063\u305f\u308a\u3002\n\n\u3069\u3053\u304b\u3067\u898b\u305f\u6709\u7528\u306a\u4f7f\u3044\u65b9\u306f\u3001Mutex\u306e\u30ed\u30c3\u30af\u6a5f\u69cb\u306b\u4f7f\u3046\u3068\u304b\u3044\u3046\u3082\u306e\u3067\u3057\u305f\u3002\n\n```cpp\n// scoped_guard\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30ed\u30c3\u30af\u3055\u308c\u3001func()\u304c\u5b9f\u884c\u3055\u308c\u3001scoped_guard\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30ed\u30c3\u30af\u304c\u89e3\u9664\u3055\u308c\u308b\u3002\n// mutex\u306a\u3093\u304b\u3067\u306f\u4f7f\u3044\u3084\u3059\u3044\u304b\u3082\uff1f\nscoped_guard(), fund();\n\n\n{ // \u30b3\u30f3\u30de\u30cf\u30c3\u30af\u3092\u4f7f\u308f\u306a\u3051\u308c\u3070\u3053\u3046\u306a\u308b\u3002\n  scoped_guard guard;\n  func();\n}\n```\n\n\u4e0b\u306e\u65b9\u304c\u610f\u56f3\u304c\u660e\u78ba\u3067\u3044\u3044\u3088\u3046\u306a\u6c17\u3082\u3057\u306a\u304f\u3082\u306a\u3044\u3002\n\n# \u304a\u307e\u3051\n`std::rel_ops`\u540d\u524d\u7a7a\u9593\u3068Boost.Operators\u306b\u8efd\u304f\u89e6\u308c\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u3053\u307e\u3067\u3067\u3001\u591a\u304f\u306e\u6f14\u7b97\u5b50\u306b\u3064\u3044\u3066\u6a5f\u68b0\u7684\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u8a00\u3044\u307e\u3057\u305f\u304c\u3001\u6a5f\u68b0\u7684\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u3001\u3068\u3044\u3046\u306e\u306f\u6c7a\u3057\u3066\u3044\u3044\u3068\u3053\u308d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u6700\u3082\u79c1\u305f\u3061\u306e\u5fcc\u8af1\u3059\u3079\u304d\u3068\u3053\u308d\u3068\u3082\u3044\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u305d\u3046\u3044\u3046\u90e8\u5206\u3092\u81ea\u52d5\u7684\u306b\u5b9a\u7fa9\u3057\u3066\u304f\u308c\u308b\u3082\u306e\u304c\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3001\u6e96\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3082\u3042\u308b\u306e\u3067\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## std::rel_ops\n`<utility>`\u30d8\u30c3\u30c0\u306b\u5165\u3063\u3066\u3044\u308b`std::rel_ops`\u540d\u524d\u7a7a\u9593\u306b\u306f\u3001!=,>,<=,>= \u306e4\u3064\u306e\u6f14\u7b97\u5b50\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```cpp\nnamespace std {\nnamespace rel_ops\n{ // namespace std::rel_ops\n\ntemplate< class T >\nbool operator!=( const T& lhs, const T& rhs );\n\ntemplate< class T >\nbool operator>( const T& lhs, const T& rhs );\n\ntemplate< class T >\nbool operator<=( const T& lhs, const T& rhs );\n\ntemplate< class T >\nbool operator>=( const T& lhs, const T& rhs );\n\n} // namespace rel_ops\n} // namespace std\n```\n\n\u3053\u306e\u540d\u524d\u7a7a\u9593\u3092using\u3059\u308c\u3070\u3001\u81ea\u4f5c\u30af\u30e9\u30b9\u306e\u6bd4\u8f03\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3059\u308b\u624b\u9593\u304c\u7701\u3051\u308b\u3068\u3044\u3046\u5bf8\u6cd5\u3067\u3059\u3002\n\u306a\u3093\u304b\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3057\u3066\u306f\u3042\u307e\u308a\u306b\u9069\u5f53\u3068\u3044\u3046\u304b\u96d1\u3068\u3044\u3046\u304b\u3001\u305d\u3093\u306a\u6c17\u304c\u3057\u307e\u3059\u3051\u308c\u3069\u3002\n\u305d\u3093\u306a\u6c17\u304c\u3057\u305f\u306a\u3089\u3001\u6b21\u306b\u884c\u304d\u307e\u3057\u3087\u3046\u3002boost\u69d8\u304c\u304a\u5f85\u3061\u3067\u3059\u3002\n\n## Boost.Operators\n\nBoost\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u3092\u88dc\u3063\u3066\u4f59\u308a\u3042\u308b\u30d1\u30ef\u30fc\u3068\u3001\u5b89\u5168\u6027\u3068\u3001\u79fb\u690d\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u9593\u3082\u30d6\u30fc\u30b9\u30c8\u3057\u3066\u304f\u308c\u307e\u3059\u3002Boost.Operators\u306f`std::rel_ops`\u3068\u306f\u6bd4\u8f03\u306b\u306a\u3089\u306a\u3044\u307b\u3069\u6f14\u7b97\u5b50\u306e\u81ea\u52d5\u5b9a\u7fa9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u6b32\u3057\u3044\u6f14\u7b97\u5b50\u3092\u6301\u3064\u30af\u30e9\u30b9\u3092private\u7d99\u627f\u3059\u308b\u3053\u3068\u3067mix-in\u3068\u3044\u3046\u5f62\u3067\u6f14\u7b97\u5b50\u3092\u500b\u5225\u306b\u6301\u3063\u3066\u304f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4f8b\u3068\u3057\u3066\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u6574\u6570\u578b\u3092\u4f5c\u308b\u3068\u3057\u307e\u3059\u3002\u305d\u3046\u306a\u308b\u3068\u3082\u306e\u3059\u3054\u3044\u91cf\u306e\u6f14\u7b97\u5b50\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u3057\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u306d\u3002\n\n```cpp\nclass my_integral\n  : boost::operators<my_integral>\n{\n  friend bool operator==(const my_integral&, const my_integral&) ;\n  friend bool operator<(const my_integral&, const my_integral&) ;\n\npublic:\n  my_integral& operator++() ;\n  my_integral& operator--() ;\n  my_integral& operator*=(const my_integral& n) ;\n  my_integral& operator/=(const my_integral& n) ;\n  my_integral& operator%=(const my_integral& n) ;\n  my_integral& operator+=(const my_integral& n) ;\n  my_integral& operator-=(const my_integral& n) ;\n  my_integral& operator<<=(const my_integral&) ;\n  my_integral& operator>>=(const my_integral&) ;\n  my_integral& operator&=(const my_integral&) ;\n  my_integral& operator|=(const my_integral&) ;\n  my_integral& operator^=(const my_integral&) ;\n};\n\nbool operator==(const my_integral&, const my_integral&) ;\nbool operator<(const my_integral&, const my_integral&) ;\n```\n\n\u81ea\u52d5\u3067\u5b9a\u7fa9\u3067\u304d\u308b\u4e8c\u9805\u6f14\u7b97\u5b50\u306a\u3069\u306f\u5168\u3066`boost::operators<my_integral>`\u306e\u90e8\u5206\u3067mix-in\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3088\u3063\u3066\u3001\u81ea\u524d\u3067\u5b9a\u7fa9\u3059\u308b\u306e\u306f\u4ee5\u4e0b\u3060\u3051\u3067\u3088\u304f\u306a\u308a\u307e\u3059\u3002\n\n* \u524d\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3001\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\n* \u8907\u5408\u4ee3\u5165\u6f14\u7b97\u5b50\n* \u7b49\u4fa1\u6bd4\u8f03\u6f14\u7b97\u5b50\u3001\u5c0f\u306a\u308a\u6f14\u7b97\u5b50\n\n\u4ed6\u306b\u3082\u3001`std::rel_ops`\u3067\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u306a\u3044\u3001\u53f3\u8fba\u306b\u4efb\u610f\u306e\u578b`U`\u3092\u53d6\u308b\u6a5f\u80fd\u3084\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u4f5c\u6210\u306b\u5fc5\u8981\u306a\u6f14\u7b97\u5b50\u306e\u81ea\u52d5\u5b9a\u7fa9\u306a\u3069\u3001\u591a\u304f\u306e\u6a5f\u80fd\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u6a5f\u80fd\u306f\u30d8\u30c3\u30c0\u30aa\u30f3\u30ea\u30fc\u3067\u4f7f\u7528\u3067\u304d\u307e\u3059\u306e\u3067\u3001\u305c\u3072\u8997\u3044\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u306d\u3002\n\nhttp://www.boost.org/doc/libs/1_61_0/libs/utility/operators.htm\n\n# \u304a\u307e\u3051\uff12\n\u81ea\u4f5c\u306e\u30dd\u30a4\u30f3\u30bf\u578b\u306e\u30e9\u30c3\u30d1\u578b\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u305d\u3082\u305d\u3082\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3063\u3066\u3001\u30dd\u30a4\u30f3\u30bf\u3082\u542b\u3081\u3066\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3058\u3083\u306a\u3044\u3093\u3067\u3059\u3088\u306d\u3002\u7d99\u627f\u3067\u304d\u306a\u3044\u3057\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u7684\u306b\u306f\u4e2d\u9014\u534a\u7aef\u306a\u3093\u3067\u3059\u3002\u307f\u305f\u3044\u306a\u4e0d\u6e80\u3092\u62b1\u3044\u305f\u3068\u3057\u3066\u3001\u30dd\u30a4\u30f3\u30bf\u578b\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u4e8c\u9805\u6f14\u7b97\u5b50\u305f\u3061\u306f\u672c\u5f53\u306b\u305f\u3060\u9762\u5012\u304f\u3055\u3044\u3060\u3051\u306a\u306e\u3067\u66f8\u304d\u307e\u305b\u3093\u3002Boost.Operators\u4f7f\u3046\u304b\u3001\u81ea\u5206\u3067\u4f3c\u305f\u306e\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002\n\n```cpp\ntemplate<class T>\nclass pointer\n{\n  using this_type = pointer<T>;\n  T* _ptr;\n \npublic:\n  using value_type = T;\n  using reference = value_type&;\n  using const_reference = const value_type&;\n  using difference_type = std::ptrdiff_t;\n \n  pointer() noexcept : _ptr() {}\n  pointer(T* p) noexcept : _ptr(p) {}\n \n  T* get() const noexcept { return _ptr; }\n \n  T* operator->() const noexcept { return _ptr; }\n  reference operator*() const noexcept { return (*_ptr); }\n \n  // \u3053\u306e\u5834\u5408\u306e\u6dfb\u3048\u5b57\u6f14\u7b97\u5b50\u306f\u95a2\u7bc0\u53c2\u7167\u6f14\u7b97\u5b50\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\n  reference operator[](std::ptrdiff_t diff) { return *(_ptr + diff); }\n  const_reference operator[](std::ptrdiff_t diff) const { return *(_ptr + diff); }\n \n  reference operator++() { ++_ptr; return (*this); }\n  reference operator--() { --_ptr; return (*this); }\n  value_type operator++(int) { this_type temp(*this); ++*this; return temp; }\n  value_type operator--(int) { this_type temp(*this); --*this; return temp; }\n \n  explicit operator bool() const noexcept { return _ptr; }\n  bool operator!() const noexcept { return !static_cast<bool>(*this); }\n \n  template<class U,\n    std::enable_if_t<std::is_member_function_pointer<U>::value, std::nullptr_t> = nullptr>\n  auto operator->*(U u) const noexcept\n  {\n    return [u, this](auto... args)\n    { // lambda\n      return (_ptr->*u)(std::forward<decltype(args)>(args)...);\n    };\n  }\n \n  template<class U,\n    std::enable_if_t<std::is_member_object_pointer<U>::value, std::nullptr_t> = nullptr>\n  auto& operator->*(U u) const noexcept\n  {\n    return _ptr->*u;\n  }\n \n  reference operator+=(difference_type diff)\n    { _ptr += diff; return (*this); }\n  reference operator-=(difference_type diff)\n    { _ptr -= diff; return (*this); }\n \n};\n \ntemplate<class T, class U>\nstatic inline bool operator==(const pointer<T>& p1, const pointer<U>& p2) noexcept\n{\n  return p1.get() == p2.get();\n}\n \n// \u3053\u306e\u6e1b\u7b97\u306f\u4f8b\u306e\u5384\u4ecb\u306a\u3084\u3064\u3002\ntemplate<class T, class U>\nstatic inline auto operator-(const pointer<T>& p1, const pointer<U>& p2)\n  ->typename pointer<T>::difference_type\n{\n  return typename pointer<T>::difference_type(p1.get() - p2.get());\n}\n```\n\n**9/21/2016 \u8ffd\u8a18**\npointer\u306e\u30b3\u30fc\u30c9\u3092\u3061\u3083\u3093\u3068\u898b\u76f4\u3057\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u901a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u898b\u6804\u5f35\u3063\u3066\u30e1\u30f3\u30d0\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u6f14\u7b97\u5b50\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u30ac\u30c3\u30c4\u30eaC++14\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306eURL\u3067\u5b9f\u969b\u306b\u52d5\u304f\u3068\u3053\u308d\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nhttp://ideone.com/WZ6vaB\n\n# \u304a\u308f\u308a\u306b\n\n\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u4ee5\u4e0a\u3067\u5168\u3066\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u53ef\u80fd\u306a\u6f14\u7b97\u5b50\u3092\u89e3\u8aac\u3044\u305f\u3057\u307e\u3057\u305f\u3002\n\u5927\u3052\u3055\u306a\u30bf\u30a4\u30c8\u30eb\u3067\u3054\u3081\u3093\u306a\u3055\u3044\u3002\n\u8aa4\u308a\u3084\u4e0d\u660e\u306a\u70b9\u304c\u3042\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u306b\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n", "tags": ["C++", "C++11", "C++14"]}