{"context": "\n\ndate_range\n\ndateutil\n\ndatetime_range.py\nfrom dateutil import (\n    rrule,\n    parser\n)\n\nstart_date = parser.parse('2015-11-01')\nend_date = parser.parse('2015-11-05')\n\nlist(rrule.rrule(rrule.DAILY, dtstart=start_date, until=end_date))\n\n\n\npandas\n\n\u5165\u3063\u3066\u3044\u308b\u306a\u3089\u65e5\u4ed8Parse\u3084\u9593\u9694(offset)\u304a\u3088\u3073\u304c\u4fbf\u5229\u306a\u306e\u3067\u3053\u3061\u3089\nhttp://pandas.pydata.org/pandas-docs/stable/generated/pandas.date_range.html\n\u65e5\u672c\u8a9e\u65e5\u4ed8\u3092\u6271\u3046\u306a\u3089japandas\u304c\u4fbf\u5229\n\n\nhttps://gist.github.com/ksomemo/34c0e447d12376b87d1602a1558af390\n\n\n\n\npandas offset alias\u307e\u3068\u3081\n\nhttp://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases\n\u898b\u3065\u3089\u3044\u306e\u3067\u6574\u5f62\u3057\u305f\n\nhttp://www.tablesgenerator.com/markdown_tables \u3067\u6574\u5f62\u3057\u305f\n\n\n\n\nAlias\nbusiness\ncustom business(experimental)\nDescription\n\n\n\n\nD\nB\nC\ncalendar day\n\n\nW\n\n\nweekly\n\n\nM\nBM\nCBM\nmonth end\n\n\nMS\nBMS\nCBMS\nmonth start\n\n\nQ\nBQ\n\nquarter end\n\n\nQS\nBQS\n\nquarter start\n\n\nA\nBA\n\nyear end\n\n\nAS\nBAS\n\nyear start\n\n\nH\n\n\nhourly\n\n\nT,min\n\n\nminutely\n\n\nS\n\n\nsecondly\n\n\nL,ms\n\n\nmilliseonds\n\n\nU,us\n\n\nmicroseconds\n\n\nN\n\n\nnanoseconds\n\n\n\n\n\u3088\u304f\u4f7f\u3046\u6708\u672b\u6708\u521d\u306e\u65e5\u4ed8\u3092\u6c42\u3081\u308b\n\npd.offsets.MonthEnd\u3092\u4f7f\u3063\u3066\u6c42\u3081\u308b\npd.offsets.MonthBegin\u306f\u4f7f\u3046\u5fc5\u8981\u306a\u304b\u3063\u305f\n\n\nhttp://docs.python.jp/3/library/datetime.html#datetime.datetime.replace\n\n\n\n\ndatetime_replace.py\n# pandas.Timestamp\u306e\u307e\u307e\u8fd4\u3063\u3066\u304f\u308b\ndt.replace(year=2000, month=10, day=1, hour=2, minute=3, second=4, microsecond=123456)\nTimestamp('2000-10-01 02:03:04.123456')\n\n\n\npandas_offsets.py\n\"\"\"\n(\u6708\u521d/\u4e2d/\u672b)\u65e5\u4ed8 \u00d7 \u6708\u672boffset(0, 1) \u00d7 (\u52a0\u7b97\u6e1b\u7b97)\u306e\u7d44\u5408\u305b\u306e\u3046\u3061\u3001\n\u3069\u308c\u3092\u884c\u3048\u3070\u6c42\u3081\u3089\u308c\u308b\u304b\n\"\"\"\nimport pandas as pd\nfrom operator import add, sub\nfrom itertools import product\nimport io\n\n\ndt = pd.to_datetime(\"20161111\").date()\ndtb = pd.to_datetime(\"20161101\").date()\ndte = pd.to_datetime(\"20161130\").date()\ndts = [dt, dtb, dte]\n\n#mb = pd.offsets.MonthBegin()\n#mb0 = pd.offsets.MonthBegin(0)\nme = pd.offsets.MonthEnd()\nme0 = pd.offsets.MonthEnd(0)\nms = me, me0\n\nops = [add, sub]\n\nexpected_values = {\n  mb.__class__.__name__: \"2016-11-01\",\n  me.__class__.__name__: \"2016-11-30\",\n}\n\n# ipython\u4e0a\u3067\u78ba\u8a8d\u3057\u3066\u3044\u305f+\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3059\u308b\u3068\u30b4\u30df\u304c\u6e9c\u307e\u308b\u306e\u3067\n# StringIO,print sep=tab, seek\u3067\u5143\u306b\u623b\u3059\u3067\u5bfe\u5fdc\u3057\u3066DataFrame\u306b\u51fa\u529b\nwith io.StringIO() as sio:\n    for d, m, op in product(dts, ms, ops):\n        print(d, op.__name__, m, op(d, m).date(),\n              sep=\"\\t\", file=sio)\n    sio.seek(0)\n    df = pd.read_table(sio, names=[\"date\", \"operator\", \"offset\", \"result\"])\n\ndf[\"correct\"] = df[\"result\"] == \"2016-11-30\"\ndf.pivot_table(index=[\"offset\", \"operator\"],\n               columns=\"correct\", values=\"result\", aggfunc=len)\n\n\n\n\u7d50\u679c\n\n\u6708\u672b\u306fMonthBegin(0)\u3092\u4f7f\u3048\u3070\u52a0\u6e1b\u3069\u3061\u3089\u3067\u3082\u3088\u3044\n\u610f\u5473\u3068\u3057\u3066\u306f\u8db3\u3057\u305f\u307b\u3046\u304c\u308f\u304b\u308a\u3084\u3059\u3044\n\n\npandas_offsets_result.txt\ncorrect                   False  True\noffset          operator\n<0 * MonthEnds> add         NaN    3.0\n                sub         NaN    3.0\n<MonthEnd>      add         1.0    2.0\n                sub         3.0    NaN\n\n\n## date_range\n### dateutil\n```py3:datetime_range.py\nfrom dateutil import (\n    rrule,\n    parser\n)\n\nstart_date = parser.parse('2015-11-01')\nend_date = parser.parse('2015-11-05')\n\nlist(rrule.rrule(rrule.DAILY, dtstart=start_date, until=end_date))\n```\n\n### pandas\n- \u5165\u3063\u3066\u3044\u308b\u306a\u3089\u65e5\u4ed8Parse\u3084\u9593\u9694(offset)\u304a\u3088\u3073\u304c\u4fbf\u5229\u306a\u306e\u3067\u3053\u3061\u3089\n- http://pandas.pydata.org/pandas-docs/stable/generated/pandas.date_range.html\n- \u65e5\u672c\u8a9e\u65e5\u4ed8\u3092\u6271\u3046\u306a\u3089japandas\u304c\u4fbf\u5229\n    - https://gist.github.com/ksomemo/34c0e447d12376b87d1602a1558af390\n\n## pandas offset alias\u307e\u3068\u3081\n- http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases\n- \u898b\u3065\u3089\u3044\u306e\u3067\u6574\u5f62\u3057\u305f\n- http://www.tablesgenerator.com/markdown_tables \u3067\u6574\u5f62\u3057\u305f\n\n| Alias | business | custom business(experimental) | Description   |\n|-------|----------|-------------------------------|---------------|\n| D     | B        | C                             | calendar day  |\n| W     |          |                               | weekly        |\n| M     | BM       | CBM                           | month end     |\n| MS    | BMS      | CBMS                          | month start   |\n| Q     | BQ       |                               | quarter end   |\n| QS    | BQS      |                               | quarter start |\n| A     | BA       |                               | year end      |\n| AS    | BAS      |                               | year start    |\n| H     |          |                               | hourly        |\n| T,min |          |                               | minutely      |\n| S     |          |                               | secondly      |\n| L,ms  |          |                               | milliseonds   |\n| U,us  |          |                               | microseconds  |\n| N     |          |                               | nanoseconds   |\n\n### \u3088\u304f\u4f7f\u3046\u6708\u672b\u6708\u521d\u306e\u65e5\u4ed8\u3092\u6c42\u3081\u308b\n- pd.offsets.MonthEnd\u3092\u4f7f\u3063\u3066\u6c42\u3081\u308b\n- pd.offsets.MonthBegin\u306f\u4f7f\u3046\u5fc5\u8981\u306a\u304b\u3063\u305f\n    - http://docs.python.jp/3/library/datetime.html#datetime.datetime.replace\n\n```datetime_replace.py\n# pandas.Timestamp\u306e\u307e\u307e\u8fd4\u3063\u3066\u304f\u308b\ndt.replace(year=2000, month=10, day=1, hour=2, minute=3, second=4, microsecond=123456)\nTimestamp('2000-10-01 02:03:04.123456')\n```\n\n```pandas_offsets.py\n\"\"\"\n(\u6708\u521d/\u4e2d/\u672b)\u65e5\u4ed8 \u00d7 \u6708\u672boffset(0, 1) \u00d7 (\u52a0\u7b97\u6e1b\u7b97)\u306e\u7d44\u5408\u305b\u306e\u3046\u3061\u3001\n\u3069\u308c\u3092\u884c\u3048\u3070\u6c42\u3081\u3089\u308c\u308b\u304b\n\"\"\"\nimport pandas as pd\nfrom operator import add, sub\nfrom itertools import product\nimport io\n\n\ndt = pd.to_datetime(\"20161111\").date()\ndtb = pd.to_datetime(\"20161101\").date()\ndte = pd.to_datetime(\"20161130\").date()\ndts = [dt, dtb, dte]\n\n#mb = pd.offsets.MonthBegin()\n#mb0 = pd.offsets.MonthBegin(0)\nme = pd.offsets.MonthEnd()\nme0 = pd.offsets.MonthEnd(0)\nms = me, me0\n\nops = [add, sub]\n\nexpected_values = {\n  mb.__class__.__name__: \"2016-11-01\",\n  me.__class__.__name__: \"2016-11-30\",\n}\n\n# ipython\u4e0a\u3067\u78ba\u8a8d\u3057\u3066\u3044\u305f+\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3059\u308b\u3068\u30b4\u30df\u304c\u6e9c\u307e\u308b\u306e\u3067\n# StringIO,print sep=tab, seek\u3067\u5143\u306b\u623b\u3059\u3067\u5bfe\u5fdc\u3057\u3066DataFrame\u306b\u51fa\u529b\nwith io.StringIO() as sio:\n    for d, m, op in product(dts, ms, ops):\n        print(d, op.__name__, m, op(d, m).date(),\n              sep=\"\\t\", file=sio)\n    sio.seek(0)\n    df = pd.read_table(sio, names=[\"date\", \"operator\", \"offset\", \"result\"])\n\ndf[\"correct\"] = df[\"result\"] == \"2016-11-30\"\ndf.pivot_table(index=[\"offset\", \"operator\"],\n               columns=\"correct\", values=\"result\", aggfunc=len)\n```\n\n#### \u7d50\u679c\n- \u6708\u672b\u306fMonthBegin(0)\u3092\u4f7f\u3048\u3070\u52a0\u6e1b\u3069\u3061\u3089\u3067\u3082\u3088\u3044\n- \u610f\u5473\u3068\u3057\u3066\u306f\u8db3\u3057\u305f\u307b\u3046\u304c\u308f\u304b\u308a\u3084\u3059\u3044\n\n```pandas_offsets_result.txt\ncorrect                   False  True\noffset          operator\n<0 * MonthEnds> add         NaN    3.0\n                sub         NaN    3.0\n<MonthEnd>      add         1.0    2.0\n                sub         3.0    NaN\n```\n", "tags": ["memo"]}