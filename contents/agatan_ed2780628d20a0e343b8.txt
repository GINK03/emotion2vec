{"context": " More than 1 year has passed since last update.\u30b3\u30fc\u30c9\u5168\u6587\u306f\u3053\u3061\u3089\nagatan/rsh\nRust\u3067\u81ea\u4f5c\u30b7\u30a7\u30eb\u3082\u3069\u304d\u3092\u4f5c\u308b(\u5b57\u53e5\u89e3\u6790\u7de8) - Qiita\n\u524d\u56de\u306f\u30e6\u30fc\u30b6\u304b\u3089\u306e\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u3066\u30d1\u30fc\u30b9\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u5b9f\u88c5\u3057\u305f\u306e\u3067\u3001\u4eca\u56de\u306f\u5b9f\u969b\u306b\u5165\u529b\u3055\u308c\u305f\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001\u3044\u304d\u306a\u308a\u3044\u308d\u3044\u308d\u3084\u308b\u306e\u306f\u304d\u3064\u3044\u306e\u3067\u3001\u307e\u305a\u306f\u5358\u7d14\u306a\u30b3\u30de\u30f3\u30c9(\u30d1\u30a4\u30d7\u3084\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u306f\u4e00\u65e6\u7121\u8996\u3057\u307e\u3059)\u306e\u5b9f\u884c\u3092\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\nCommand\nRust\u306b\u306fstd::io::process::Command\u3068\u3044\u3046\u69cb\u9020\u4f53\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u306f\u51fa\u6765\u305d\u3046\u3067\u3059\u3002\n\nhttp://doc.rust-lang.org/std/io/process/struct.Command.html\u3088\u308a\u5f15\u7528\nuse std::io::Command;\n\nlet mut process = match Command::new(\"sh\").arg(\"-c\").arg(\"echo hello\").spawn() {\n  Ok(p) => p,\n  Err(e) => panic!(\"failed to execute process: {}\", e),\n};\n\nlet output = process.stdout.as_mut().unwrap().read_to_end();\n\n\n\u3044\u308d\u3044\u308d\u3068\u4fbf\u5229\u305d\u3046\u306a\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u6700\u3082\u5358\u7d14\u306b\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3055\u305b\u308b\u305f\u3081\u306b\u3001output\u3068\u3044\u3046\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\nexec.rs\nuse std;\nuse std::io::process::Command;\n\nuse parse::Token;\n\npub fn exec(tokens: Vec<Token>) {\n    if tokens.iter()\n             .find(|&t| match t {\n                 &Token::Str(_) => false, _ => true } ).is_some() {\n        panic!(\"Not implemented yet.\");\n    }\n    let first_cmd = tokens.iter()\n                          .take_while(|&t| match t {\n                              &Token::Str(_) => true,\n                              _ => false\n                          })\n                          .map(|ref t| match *t {\n                              &Token::Str(ref x) => x.clone(),\n                              _ => panic!(\"Shouldn't be reached.\"),\n                          })\n                          .collect::<Vec<String>>();\n\n    let mut output = match Command::new(first_cmd[0].as_slice())\n                              .args(first_cmd.as_slice().tail())\n                              .output() {\n        Ok(p) => p,\n        Err(e) => panic!(\"Failed to execute: {}\", e),\n    };\n\n    print!(\"{}\", String::from_utf8_lossy(output.output.as_slice()));\n\n}\n\n\nexec\u306fVec<Token>\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u3067\u3059\u3002\n\u4eca\u56de\u306f\u30d1\u30a4\u30d7\u306a\u3069\u306f\u672a\u5b9f\u88c5\u3067\u3059\u304b\u3089\u3001Str(_)\u4ee5\u5916\u306eToken\u304c\u542b\u307e\u308c\u3066\u3044\u305f\u3089panic!(\u4f8b\u5916\u9001\u51fa)\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u3055\u3066\u3001Command\u306fnew\u3067\u5b9f\u884c\u3057\u305f\u3044\u30b3\u30de\u30f3\u30c9\u540d\u3092\u6307\u5b9a\u3057\u3001\u305d\u308c\u306b\u7d9a\u3051\u3066arg\u3084args\u3067\u5f15\u6570\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u30e6\u30fc\u30b6\u304b\u3089\u306e\u5165\u529b\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3072\u3068\u3064\u305a\u3064\u3057\u304b\u8ffd\u52a0\u3067\u304d\u306a\u3044arg\u3088\u308a\u306f\u3001\u30b9\u30e9\u30a4\u30b9\u3092\u6e21\u3057\u3066\u8907\u6570\u8ffd\u52a0\u3067\u304d\u308bargs\u3092\u4f7f\u3044\u305f\u3044\u3067\u3059\u3002\n\u3053\u308c\u3089\u306b\u3042\u308f\u305b\u3066Vec<Token>\u3092Vec<String>\u3082\u3057\u304f\u306fVec<&str>\u306b\u5909\u63db\u3057\u3066\u3042\u3052\u308c\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067let first_cmd = ...\u3068\u3044\u3046\u9577\u3044\u6587\u306f\u3001\u305d\u306e\u5909\u63db\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u6b63\u76f4\u307e\u3060&\u3068ref\u306e\u95a2\u4fc2\u3068\u304b\u6240\u6709\u6a29\u306e\u554f\u984c\u306f\u304d\u3061\u3093\u3068\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u304b\u66f8\u304d\u65b9\u304c\u3088\u304f\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u6012\u3063\u3066\u3082\u3089\u3044\u306a\u304c\u3089\u306a\u3093\u3068\u304b\u76f4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u901a\u308b\u3088\u3046\u306b\u3001\u3092\u7b2c\u4e00\u306b\u66f8\u3044\u3066\u3044\u3063\u305f\u306e\u3067\u6c5a\u304b\u3063\u305f\u308a\u52b9\u7387\u60aa\u304b\u3063\u305f\u308a\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093...\n\u3042\u3068\u306fCommand\u306b\u767b\u9332\u3057\u3066\u3044\u3063\u3066\u3001output\u3092\u8aad\u3093\u3067\u3042\u3052\u308c\u3070\u5b8c\u4e86\u3067\u3059\u3002\n\u305f\u3060\u3057output\u306f\u30d0\u30a4\u30c8\u5217\u3092\u8fd4\u3059\u307f\u305f\u3044\u306a\u306e\u3067\u3001String::from_utf8_lossy\u3092\u4f7f\u3063\u3066\u3001\u6587\u5b57\u306b\u76f4\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n\n\u8ffd\u8a18(2014/12/21)\n\n\u3053\u306e\u307e\u307e\u3060\u3068\u6a19\u6e96\u5165\u529b\u3084\u6a19\u6e96\u51fa\u529b\u3001\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\u304c\u5b50\u30d7\u30ed\u30bb\u30b9\u3068\u7d50\u3073\u3064\u3044\u3066\u304a\u3089\u305a\u3001\u4eee\u60f3\u306e\u30d1\u30a4\u30d7\u3068\u3064\u306a\u304c\u3063\u305f\u3088\u3046\u306a\u72b6\u614b\u306b\u306a\u308b\u3088\u3046\u3067\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u6a19\u6e96\u5165\u529b\u304b\u3089\u8aad\u307f\u53d6\u308b\u3088\u3046\u306a\u95a2\u6570\u3092\u5b9f\u884c\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u305d\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u5931\u6557\u3057\u307e\u3059\u3002\n\u4fee\u6b63\u3057\u305f\u306e\u304c\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002(Command\u3092\u4f5c\u6210\u3059\u308b\u90e8\u5206\u306e\u307f)\n    let mut output = match Command::new(first_cmd[0].as_slice())\n                              .args(first_cmd.as_slice().tail())\n                              .stdin(StdioContainer::InheritFd(STDIN_FILENO))\n                              .stdout(StdioContainer::InheritFd(STDOUT_FILENO))\n                              .stderr(StdioContainer::InheritFd(STDERR_FILENO))\n                              .spawn() {\n        Ok(p) => p,\n        Err(e) => panic!(\"ERROR: {}\", e)\n                              };\n    match output.wait() {\n        Ok(e) => println!(\"Exit: {}\", e),\n        Err(e) => println!(\"Error: {}\", e)\n    }\n\n\u3053\u306e\u3088\u3046\u306b\u3001stdout\u3092\u6a19\u6e96\u51fa\u529b\u3068\u95a2\u9023\u4ed8\u3051\u308b\u3053\u3068\u3067\u3001\u524d\u306e\u30b3\u30fc\u30c9\u3067\u306eoutput\u304b\u3089\u8aad\u307f\u53d6\u3063\u3066\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u51fa\u529b\u3001\u3068\u3044\u3046\u624b\u9806\u306f\u4e0d\u8981\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nC\u8a00\u8a9e\u3067\u306ffork\u3057\u305f\u3089wait\u3057\u308d\u3068\u8a00\u308f\u308c\u3066\u80b2\u3063\u3066\u304d\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305await\u3092\u5165\u308c\u3066\u307f\u3066\u3044\u307e\u3059\u304c\u3001\u3069\u3046\u3082wait\u3092\u5165\u308c\u306a\u304f\u3066\u3082\u30be\u30f3\u30d3\u30d7\u30ed\u30bb\u30b9\u304c\u6b8b\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u306f\u898b\u3048\u306a\u3044\u306e\u3067\u8b0e\u3067\u3059\u3002\n\u8abf\u67fb\u4e2d\u3067\u3059\u3002\n\n\u8ffd\u8a18\u3053\u3053\u307e\u3067\n\nmain\n\u5148\u307b\u3069\u306eexec\u95a2\u6570\u3092main\u3067\u4f7f\u3048\u308b\u5f62\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\nmain.rs\nuse std::io;\nmod parse;\nmod exec;\n\nfn main() {\n    loop {\n        print!(\"% > \");\n        let input = std::io::stdin().read_line().ok().expect(\"Failed to read.\");\n        let parser = parse::Parser::new(input);\n        let tokens: Vec<parse::Token> = parser.collect();\n        exec::exec(tokens);\n    }\n}\n\n\n\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8868\u793a\u3057\u3066\u304b\u3089\u30e6\u30fc\u30b6\u30fc\u306e\u5165\u529b\u3092\u53d7\u4ed8\u3051\u3001\u30d1\u30fc\u30b9\u3057\u3066Vec<Token>\u306b\u306a\u304a\u3057\u3066\u304b\u3089exec\u306b\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\n% > echo hello\nhello\n% > echo \"hello world\"\n\"hello world\"\n% >\n\n\u3042\u308c\uff1f\"\u306e\u6271\u3044\u306a\u3093\u3066\u8003\u3048\u3066\u306a\u304b\u3063\u305f\u306e\u306b\u306a\u305c\u304b\u3046\u307e\u304f\u3044\u3063\u3066\u307e\u3059\u306d\u3002\u4e0d\u601d\u8b70\u3002\n\u691c\u8a3c\u7528\u306bmain.rs\u3092\u66f8\u304d\u63db\u3048\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n% > echo hello\nStr(echo)\nStr(hello)\nhello\n% > echo \"hello world\"\nStr(echo)\nStr(\"hello)\nStr(world\")\n\"hello world\"\n% > echo \"hello     world\"\nStr(echo)\nStr(\"hello)\nStr(world\")\n\"hello world\"\n% >\n\necho\u304c\u3046\u307e\u304f\u3084\u3063\u3066\u304f\u308c\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u306d\u3002\u3059\u3054\u3044\u3002\n\n\u4eca\u5f8c\n\u6b21\u306f\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u95a2\u9023\u3067\u3059\u304b\u306d\u3002\u30d1\u30a4\u30d7\u3084&\u3088\u308a\u3082\u7c21\u5358\u305d\u3046\u3060\u3057\u3002\n\u6bce\u5ea6\u306e\u3053\u3068\u3067\u3059\u304c\u3001\u3054\u6307\u6458\u5927\u6b53\u8fce\u3067\u3059\uff01\u8272\u3005\u306a\u610f\u898b\u3092\u4f3a\u3044\u305f\u304f\u3066\u3053\u308c\u3092\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u4f55\u304b\u3042\u308a\u307e\u3057\u305f\u3089\u305c\u3072\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\uff01\nagatan/rsh\n\n\u30b3\u30fc\u30c9\u5168\u6587\u306f\u3053\u3061\u3089\n[agatan/rsh](https://github.com/agatan/rsh)\n\n[Rust\u3067\u81ea\u4f5c\u30b7\u30a7\u30eb\u3082\u3069\u304d\u3092\u4f5c\u308b(\u5b57\u53e5\u89e3\u6790\u7de8) - Qiita](http://qiita.com/agatan/items/8a097ead46df1c1659ff)\n\n\u524d\u56de\u306f\u30e6\u30fc\u30b6\u304b\u3089\u306e\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u3066\u30d1\u30fc\u30b9\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u5b9f\u88c5\u3057\u305f\u306e\u3067\u3001\u4eca\u56de\u306f\u5b9f\u969b\u306b\u5165\u529b\u3055\u308c\u305f\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3055\u305b\u3066\u307f\u307e\u3059\u3002  \n\u305f\u3060\u3057\u3001\u3044\u304d\u306a\u308a\u3044\u308d\u3044\u308d\u3084\u308b\u306e\u306f\u304d\u3064\u3044\u306e\u3067\u3001\u307e\u305a\u306f\u5358\u7d14\u306a\u30b3\u30de\u30f3\u30c9(\u30d1\u30a4\u30d7\u3084\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u306f\u4e00\u65e6\u7121\u8996\u3057\u307e\u3059)\u306e\u5b9f\u884c\u3092\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n## Command\nRust\u306b\u306f`std::io::process::Command`\u3068\u3044\u3046\u69cb\u9020\u4f53\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u306f\u51fa\u6765\u305d\u3046\u3067\u3059\u3002\n\n> http://doc.rust-lang.org/std/io/process/struct.Command.html\u3088\u308a\u5f15\u7528\n>\n>```rust\n>use std::io::Command;\n\n>let mut process = match Command::new(\"sh\").arg(\"-c\").arg(\"echo hello\").spawn() {\n  Ok(p) => p,\n  Err(e) => panic!(\"failed to execute process: {}\", e),\n};\n\n>let output = process.stdout.as_mut().unwrap().read_to_end();\n```\n\n\u3044\u308d\u3044\u308d\u3068\u4fbf\u5229\u305d\u3046\u306a\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u6700\u3082\u5358\u7d14\u306b\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3055\u305b\u308b\u305f\u3081\u306b\u3001`output`\u3068\u3044\u3046\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```rust:exec.rs\nuse std;\nuse std::io::process::Command;\n\nuse parse::Token;\n\npub fn exec(tokens: Vec<Token>) {\n    if tokens.iter()\n             .find(|&t| match t {\n                 &Token::Str(_) => false, _ => true } ).is_some() {\n        panic!(\"Not implemented yet.\");\n    }\n    let first_cmd = tokens.iter()\n                          .take_while(|&t| match t {\n                              &Token::Str(_) => true,\n                              _ => false\n                          })\n                          .map(|ref t| match *t {\n                              &Token::Str(ref x) => x.clone(),\n                              _ => panic!(\"Shouldn't be reached.\"),\n                          })\n                          .collect::<Vec<String>>();\n\n    let mut output = match Command::new(first_cmd[0].as_slice())\n                              .args(first_cmd.as_slice().tail())\n                              .output() {\n        Ok(p) => p,\n        Err(e) => panic!(\"Failed to execute: {}\", e),\n    };\n\n    print!(\"{}\", String::from_utf8_lossy(output.output.as_slice()));\n\n}\n```\n\n`exec`\u306f`Vec<Token>`\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u3067\u3059\u3002\n\u4eca\u56de\u306f\u30d1\u30a4\u30d7\u306a\u3069\u306f\u672a\u5b9f\u88c5\u3067\u3059\u304b\u3089\u3001`Str(_)`\u4ee5\u5916\u306e`Token`\u304c\u542b\u307e\u308c\u3066\u3044\u305f\u3089`panic!`(\u4f8b\u5916\u9001\u51fa)\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3055\u3066\u3001`Command`\u306f`new`\u3067\u5b9f\u884c\u3057\u305f\u3044\u30b3\u30de\u30f3\u30c9\u540d\u3092\u6307\u5b9a\u3057\u3001\u305d\u308c\u306b\u7d9a\u3051\u3066`arg`\u3084`args`\u3067\u5f15\u6570\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u30e6\u30fc\u30b6\u304b\u3089\u306e\u5165\u529b\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3072\u3068\u3064\u305a\u3064\u3057\u304b\u8ffd\u52a0\u3067\u304d\u306a\u3044`arg`\u3088\u308a\u306f\u3001\u30b9\u30e9\u30a4\u30b9\u3092\u6e21\u3057\u3066\u8907\u6570\u8ffd\u52a0\u3067\u304d\u308b`args`\u3092\u4f7f\u3044\u305f\u3044\u3067\u3059\u3002\n\n\u3053\u308c\u3089\u306b\u3042\u308f\u305b\u3066`Vec<Token>`\u3092`Vec<String>`\u3082\u3057\u304f\u306f`Vec<&str>`\u306b\u5909\u63db\u3057\u3066\u3042\u3052\u308c\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067`let first_cmd = ...`\u3068\u3044\u3046\u9577\u3044\u6587\u306f\u3001\u305d\u306e\u5909\u63db\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u6b63\u76f4\u307e\u3060`&`\u3068`ref`\u306e\u95a2\u4fc2\u3068\u304b\u6240\u6709\u6a29\u306e\u554f\u984c\u306f\u304d\u3061\u3093\u3068\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u304b\u66f8\u304d\u65b9\u304c\u3088\u304f\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u6012\u3063\u3066\u3082\u3089\u3044\u306a\u304c\u3089\u306a\u3093\u3068\u304b\u76f4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u901a\u308b\u3088\u3046\u306b\u3001\u3092\u7b2c\u4e00\u306b\u66f8\u3044\u3066\u3044\u3063\u305f\u306e\u3067\u6c5a\u304b\u3063\u305f\u308a\u52b9\u7387\u60aa\u304b\u3063\u305f\u308a\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093...\n\n\u3042\u3068\u306f`Command`\u306b\u767b\u9332\u3057\u3066\u3044\u3063\u3066\u3001`output`\u3092\u8aad\u3093\u3067\u3042\u3052\u308c\u3070\u5b8c\u4e86\u3067\u3059\u3002\n\u305f\u3060\u3057`output`\u306f\u30d0\u30a4\u30c8\u5217\u3092\u8fd4\u3059\u307f\u305f\u3044\u306a\u306e\u3067\u3001`String::from_utf8_lossy`\u3092\u4f7f\u3063\u3066\u3001\u6587\u5b57\u306b\u76f4\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n\n#### \u8ffd\u8a18(2014/12/21)\n----\n\u3053\u306e\u307e\u307e\u3060\u3068\u6a19\u6e96\u5165\u529b\u3084\u6a19\u6e96\u51fa\u529b\u3001\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\u304c\u5b50\u30d7\u30ed\u30bb\u30b9\u3068\u7d50\u3073\u3064\u3044\u3066\u304a\u3089\u305a\u3001\u4eee\u60f3\u306e\u30d1\u30a4\u30d7\u3068\u3064\u306a\u304c\u3063\u305f\u3088\u3046\u306a\u72b6\u614b\u306b\u306a\u308b\u3088\u3046\u3067\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u6a19\u6e96\u5165\u529b\u304b\u3089\u8aad\u307f\u53d6\u308b\u3088\u3046\u306a\u95a2\u6570\u3092\u5b9f\u884c\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u305d\u306e\u30d7\u30ed\u30bb\u30b9\u306f\u5931\u6557\u3057\u307e\u3059\u3002\n\n\u4fee\u6b63\u3057\u305f\u306e\u304c\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002(`Command`\u3092\u4f5c\u6210\u3059\u308b\u90e8\u5206\u306e\u307f)\n\n```rust\n    let mut output = match Command::new(first_cmd[0].as_slice())\n                              .args(first_cmd.as_slice().tail())\n                              .stdin(StdioContainer::InheritFd(STDIN_FILENO))\n                              .stdout(StdioContainer::InheritFd(STDOUT_FILENO))\n                              .stderr(StdioContainer::InheritFd(STDERR_FILENO))\n                              .spawn() {\n        Ok(p) => p,\n        Err(e) => panic!(\"ERROR: {}\", e)\n                              };\n    match output.wait() {\n        Ok(e) => println!(\"Exit: {}\", e),\n        Err(e) => println!(\"Error: {}\", e)\n    }\n```\n\u3053\u306e\u3088\u3046\u306b\u3001`stdout`\u3092\u6a19\u6e96\u51fa\u529b\u3068\u95a2\u9023\u4ed8\u3051\u308b\u3053\u3068\u3067\u3001\u524d\u306e\u30b3\u30fc\u30c9\u3067\u306e`output`\u304b\u3089\u8aad\u307f\u53d6\u3063\u3066\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u51fa\u529b\u3001\u3068\u3044\u3046\u624b\u9806\u306f\u4e0d\u8981\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nC\u8a00\u8a9e\u3067\u306f`fork`\u3057\u305f\u3089`wait`\u3057\u308d\u3068\u8a00\u308f\u308c\u3066\u80b2\u3063\u3066\u304d\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a`wait`\u3092\u5165\u308c\u3066\u307f\u3066\u3044\u307e\u3059\u304c\u3001\u3069\u3046\u3082`wait`\u3092\u5165\u308c\u306a\u304f\u3066\u3082\u30be\u30f3\u30d3\u30d7\u30ed\u30bb\u30b9\u304c\u6b8b\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u306f\u898b\u3048\u306a\u3044\u306e\u3067\u8b0e\u3067\u3059\u3002\n\u8abf\u67fb\u4e2d\u3067\u3059\u3002\n\n### \u8ffd\u8a18\u3053\u3053\u307e\u3067\n\n## main\n\u5148\u307b\u3069\u306e`exec`\u95a2\u6570\u3092`main`\u3067\u4f7f\u3048\u308b\u5f62\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n```rust:main.rs\nuse std::io;\nmod parse;\nmod exec;\n\nfn main() {\n    loop {\n        print!(\"% > \");\n        let input = std::io::stdin().read_line().ok().expect(\"Failed to read.\");\n        let parser = parse::Parser::new(input);\n        let tokens: Vec<parse::Token> = parser.collect();\n        exec::exec(tokens);\n    }\n}\n```\n\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8868\u793a\u3057\u3066\u304b\u3089\u30e6\u30fc\u30b6\u30fc\u306e\u5165\u529b\u3092\u53d7\u4ed8\u3051\u3001\u30d1\u30fc\u30b9\u3057\u3066`Vec<Token>`\u306b\u306a\u304a\u3057\u3066\u304b\u3089`exec`\u306b\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u5b9f\u884c\u7d50\u679c\n\n```\n% > echo hello\nhello\n% > echo \"hello world\"\n\"hello world\"\n% >\n```\n\n\u3042\u308c\uff1f`\"`\u306e\u6271\u3044\u306a\u3093\u3066\u8003\u3048\u3066\u306a\u304b\u3063\u305f\u306e\u306b\u306a\u305c\u304b\u3046\u307e\u304f\u3044\u3063\u3066\u307e\u3059\u306d\u3002\u4e0d\u601d\u8b70\u3002\n\n\u691c\u8a3c\u7528\u306b`main.rs`\u3092\u66f8\u304d\u63db\u3048\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```\n% > echo hello\nStr(echo)\nStr(hello)\nhello\n% > echo \"hello world\"\nStr(echo)\nStr(\"hello)\nStr(world\")\n\"hello world\"\n% > echo \"hello     world\"\nStr(echo)\nStr(\"hello)\nStr(world\")\n\"hello world\"\n% >\n```\n\n`echo`\u304c\u3046\u307e\u304f\u3084\u3063\u3066\u304f\u308c\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u306d\u3002\u3059\u3054\u3044\u3002\n\n## \u4eca\u5f8c\n\u6b21\u306f\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u95a2\u9023\u3067\u3059\u304b\u306d\u3002\u30d1\u30a4\u30d7\u3084&\u3088\u308a\u3082\u7c21\u5358\u305d\u3046\u3060\u3057\u3002\n\u6bce\u5ea6\u306e\u3053\u3068\u3067\u3059\u304c\u3001\u3054\u6307\u6458\u5927\u6b53\u8fce\u3067\u3059\uff01\u8272\u3005\u306a\u610f\u898b\u3092\u4f3a\u3044\u305f\u304f\u3066\u3053\u308c\u3092\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u4f55\u304b\u3042\u308a\u307e\u3057\u305f\u3089\u305c\u3072\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\uff01\n\n[agatan/rsh](https://github.com/agatan/rsh)\n", "tags": ["rust0.13.0-nightly"]}