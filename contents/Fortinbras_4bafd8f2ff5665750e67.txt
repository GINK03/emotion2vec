{"context": "\ntestga.py\n# -*- coding: utf-8 -*-\n# Google Analytics API\n\nimport yaml\nimport datetime\nimport httplib2\nfrom apiclient.discovery import build\nfrom oauth2client.client import flow_from_clientsecrets\nfrom oauth2client.file import Storage\nfrom oauth2client import tools\nimport argparse\n\nCLIENT_SECRETS = 'client_secrets.json'\n\n# The Flow object to be used if we need to authenticate.\nFLOW = flow_from_clientsecrets(\n    CLIENT_SECRETS,\n    scope='https://www.googleapis.com/auth/analytics.readonly',\n    message='%s is missing' % CLIENT_SECRETS\n    )\n\n# A file to store the access token\nTOKEN_FILE_NAME = 'credentials.dat'\n\ndef prepare_credentials():\n    parser = argparse.ArgumentParser(parents=[tools.argparser])\n    flags = parser.parse_args()\n    # Retrieve existing credendials\n    storage = Storage(TOKEN_FILE_NAME)\n    credentials = storage.get()\n    # If no credentials exist, we create new ones\n    if credentials is None or credentials.invalid:\n        credentials = tools.run_flow(FLOW, storage, flags)\n    return credentials \n\ndef initialize_service():\n    http = httplib2.Http()\n    credentials = prepare_credentials()\n    http = credentials.authorize(http)\n    return build('analytics', 'v3', http=http)\n\n\n# API\u5b9f\u884c(core API)\ndef get_ga_data(service, profile_id, start_date, end_date):\n    ids = \"ga:\" + profile_id\n    metrics = \"ga:pageviews\"\n    dimensions = \"ga:Year,ga:month,ga:day,ga:pagetitle\"\n    filter = \"ga:pageviews>=100\"\n    data = service.data().ga().get(\n        ids=ids, start_date=start_date, end_date=end_date, metrics=metrics,\n        dimensions=dimensions, filters=filter).execute()\n    return data\n\n# main\nif __name__ == '__main__':\n    service = initialize_service()\n    profile_id = \"12345678\"  #\u5bfe\u8c61\u30b5\u30a4\u30c8\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30ebID\n    start_date = \"2017-01-01\"\n    end_date = \"2017-01-10\"\n    data = get_ga_data(service, profile_id, start_date, end_date)\n    row = data[\"rows\"]\n    nm = ['ga_year','ga_month','ga_day','ga_pageTitle','ga_pageviews'] \n    lst = []\n    for i in row:\n        d = dict(zip(nm,i))\n        lst.append(d)\n    print(lst)\n    print(\"finish!\")  \n\n\n\n\u30fbGoogle Developers Console\u306b\u3066\u3001Google Analytics\u306eAPI\u3092\u6709\u52b9\u5316\u3059\u308b\n\u30fb\u540c\u3058\u304fgoogle Developers\u306b\u3066\u3001oauth\u7528\u306e\u8a8d\u8a3c\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\n\u3000(\u30d5\u30a1\u30a4\u30eb\u540d\uff1aclient_secrets.json)\n\u30fb\u521d\u56de\u30a2\u30af\u30bb\u30b9\u6642\u306f\u30d6\u30e9\u30a6\u30b6\u304c\u8868\u793a\u3055\u308c\u3066Google\u306eOauth\u8a8d\u8a3c\u3092\u5b9f\u65bd\u3001\u305d\u306e\u6642credentials.dat\u304c\u751f\u6210\uff08\uff12\u56de\u76ee\u4ee5\u964d\u306f\u3053\u306ecredentials.dat\u3092\u5143\u306b\u3057\u3066Oauth\u8a8d\u8a3c\u3092\u7701\u7565\u3067\u304d\u308b\uff09\n\u30fb\u4e0a\u8a18\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306fget_ga_data()\u3067Google Analytics API\u3092\u5b9f\u884c\u3057\u3066\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3001\u6700\u5f8c\u306b\u8f9e\u66f8dict\u306e\u5f62\u5f0f\u306b\u3057\u3066\u3044\u308b\u306e\u306fSQLAlchemy\u3067\u6700\u5bc4\u308a\u306eRDB\u306b\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\n```py3:testga.py\n# -*- coding: utf-8 -*-\n# Google Analytics API\n\nimport yaml\nimport datetime\nimport httplib2\nfrom apiclient.discovery import build\nfrom oauth2client.client import flow_from_clientsecrets\nfrom oauth2client.file import Storage\nfrom oauth2client import tools\nimport argparse\n\nCLIENT_SECRETS = 'client_secrets.json'\n\n# The Flow object to be used if we need to authenticate.\nFLOW = flow_from_clientsecrets(\n    CLIENT_SECRETS,\n    scope='https://www.googleapis.com/auth/analytics.readonly',\n    message='%s is missing' % CLIENT_SECRETS\n    )\n\n# A file to store the access token\nTOKEN_FILE_NAME = 'credentials.dat'\n\ndef prepare_credentials():\n    parser = argparse.ArgumentParser(parents=[tools.argparser])\n    flags = parser.parse_args()\n    # Retrieve existing credendials\n    storage = Storage(TOKEN_FILE_NAME)\n    credentials = storage.get()\n    # If no credentials exist, we create new ones\n    if credentials is None or credentials.invalid:\n        credentials = tools.run_flow(FLOW, storage, flags)\n    return credentials \n\ndef initialize_service():\n    http = httplib2.Http()\n    credentials = prepare_credentials()\n    http = credentials.authorize(http)\n    return build('analytics', 'v3', http=http)\n\n\n# API\u5b9f\u884c(core API)\ndef get_ga_data(service, profile_id, start_date, end_date):\n    ids = \"ga:\" + profile_id\n    metrics = \"ga:pageviews\"\n    dimensions = \"ga:Year,ga:month,ga:day,ga:pagetitle\"\n    filter = \"ga:pageviews>=100\"\n    data = service.data().ga().get(\n        ids=ids, start_date=start_date, end_date=end_date, metrics=metrics,\n        dimensions=dimensions, filters=filter).execute()\n    return data\n\n# main\nif __name__ == '__main__':\n    service = initialize_service()\n    profile_id = \"12345678\"  #\u5bfe\u8c61\u30b5\u30a4\u30c8\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30ebID\n    start_date = \"2017-01-01\"\n    end_date = \"2017-01-10\"\n    data = get_ga_data(service, profile_id, start_date, end_date)\n    row = data[\"rows\"]\n    nm = ['ga_year','ga_month','ga_day','ga_pageTitle','ga_pageviews'] \n    lst = []\n    for i in row:\n        d = dict(zip(nm,i))\n        lst.append(d)\n    print(lst)\n    print(\"finish!\")  \n\n```\n\u30fbGoogle Developers Console\u306b\u3066\u3001Google Analytics\u306eAPI\u3092\u6709\u52b9\u5316\u3059\u308b\n\u30fb\u540c\u3058\u304fgoogle Developers\u306b\u3066\u3001oauth\u7528\u306e\u8a8d\u8a3c\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\n\u3000(\u30d5\u30a1\u30a4\u30eb\u540d\uff1aclient_secrets.json)\n\u30fb\u521d\u56de\u30a2\u30af\u30bb\u30b9\u6642\u306f\u30d6\u30e9\u30a6\u30b6\u304c\u8868\u793a\u3055\u308c\u3066Google\u306eOauth\u8a8d\u8a3c\u3092\u5b9f\u65bd\u3001\u305d\u306e\u6642credentials.dat\u304c\u751f\u6210\uff08\uff12\u56de\u76ee\u4ee5\u964d\u306f\u3053\u306ecredentials.dat\u3092\u5143\u306b\u3057\u3066Oauth\u8a8d\u8a3c\u3092\u7701\u7565\u3067\u304d\u308b\uff09\n\u30fb\u4e0a\u8a18\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u306fget_ga_data()\u3067Google Analytics API\u3092\u5b9f\u884c\u3057\u3066\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3001\u6700\u5f8c\u306b\u8f9e\u66f8dict\u306e\u5f62\u5f0f\u306b\u3057\u3066\u3044\u308b\u306e\u306f[SQLAlchemy\u3067\u6700\u5bc4\u308a\u306eRDB\u306b\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b](http://qiita.com/Fortinbras/items/884b140de5af10183738)\u305f\u3081\n", "tags": ["python3", "Python", "GoogleAnalytics"]}