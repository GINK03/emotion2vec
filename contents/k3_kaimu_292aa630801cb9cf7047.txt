{"context": " More than 1 year has passed since last update.\u554f\u984c\u306f\u3053\u3093\u306a\u611f\u3058\u3089\u3057\u3044\u3067\u3059\nhttp://nabetani.sakura.ne.jp/hena/ord11bitamida/\n\u89e3\u6cd5\u306f\u3001\n\n1\u3092\u63a2\u3059\n\u305d\u3053\u304b\u3089\u53f3\u306b0\u3092\u63a2\u3059\n\u5165\u308c\u66ff\u3048\u308b\n\u4e0a\u8a18\u3092\u5404\u884c\u306b\u3064\u3044\u3066\u884c\u3046\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u7c21\u5358\u306b\nimport std.algorithm,\n       std.array,\n       std.bitmanip,\n       std.conv,\n       std.format,\n       std.stdio;\n\nvoid main()\n{\n    /*0*/ test( \"d6-7b-e1-9e\", \"740631825\" );\n    /// \u305d\u306e\u4ed6\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306f\u7701\u7565\n}\n\n\nvoid test(string input, string desired)\n{\n    if(bitLadderLottery(input) != desired)\n        throw new Exception(\"Error case of: \" ~ input);\n}\n\n\nstring bitLadderLottery(string input)\n{\n    uint[4] crossBit;\n    input.formattedRead(\"%x-%x-%x-%x\", &(crossBit[0]), &(crossBit[1]), &(crossBit[2]), &(crossBit[3]));\n\n    uint[9] numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n    foreach(e; crossBit[])\n        swapNumbers(numbers, e);\n\n    auto writer = appender!string();\n    writer.formattedWrite(\"%(%s%)\", numbers[]);\n    return writer.data;\n}\n\nunittest{\n    assert(bitLadderLottery(\"d6-7b-e1-9e\") == \"740631825\");\n}\n\n\nvoid swapNumbers(ref uint[9] numbers, uint crossLine)\n{\n    BitArray bitarr;\n    bitarr.init((cast(void*)&crossLine)[0 .. 1], 8);\n    bitarr.reverse;\n\n    foreach(ref i; 0 .. 8)\n    {\n        if(!bitarr[i])\n            continue;\n\n        size_t nextZeroIndex = i;\n        while(bitarr[nextZeroIndex] && nextZeroIndex < 8)\n            ++nextZeroIndex;\n\n        swap(numbers[i], numbers[nextZeroIndex]);\n        i = nextZeroIndex;\n    }\n}\nunittest{\n    uint[9] numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n\n    swapNumbers(numbers, cast(uint)(0xd6));\n    assert(numbers == [2, 1, 0, 4, 3, 7, 6, 5, 8]);\n}\n\n\u554f\u984c\u306f\u3053\u3093\u306a\u611f\u3058\u3089\u3057\u3044\u3067\u3059\nhttp://nabetani.sakura.ne.jp/hena/ord11bitamida/\n\n\u89e3\u6cd5\u306f\u3001\n\n1. 1\u3092\u63a2\u3059\n1. \u305d\u3053\u304b\u3089\u53f3\u306b0\u3092\u63a2\u3059\n1. \u5165\u308c\u66ff\u3048\u308b\n1. \u4e0a\u8a18\u3092\u5404\u884c\u306b\u3064\u3044\u3066\u884c\u3046\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u7c21\u5358\u306b\n\n```d\nimport std.algorithm,\n       std.array,\n       std.bitmanip,\n       std.conv,\n       std.format,\n       std.stdio;\n\nvoid main()\n{\n    /*0*/ test( \"d6-7b-e1-9e\", \"740631825\" );\n    /// \u305d\u306e\u4ed6\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306f\u7701\u7565\n}\n\n\nvoid test(string input, string desired)\n{\n    if(bitLadderLottery(input) != desired)\n        throw new Exception(\"Error case of: \" ~ input);\n}\n\n\nstring bitLadderLottery(string input)\n{\n    uint[4] crossBit;\n    input.formattedRead(\"%x-%x-%x-%x\", &(crossBit[0]), &(crossBit[1]), &(crossBit[2]), &(crossBit[3]));\n\n    uint[9] numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n    foreach(e; crossBit[])\n        swapNumbers(numbers, e);\n\n    auto writer = appender!string();\n    writer.formattedWrite(\"%(%s%)\", numbers[]);\n    return writer.data;\n}\n\nunittest{\n    assert(bitLadderLottery(\"d6-7b-e1-9e\") == \"740631825\");\n}\n\n\nvoid swapNumbers(ref uint[9] numbers, uint crossLine)\n{\n    BitArray bitarr;\n    bitarr.init((cast(void*)&crossLine)[0 .. 1], 8);\n    bitarr.reverse;\n\n    foreach(ref i; 0 .. 8)\n    {\n        if(!bitarr[i])\n            continue;\n\n        size_t nextZeroIndex = i;\n        while(bitarr[nextZeroIndex] && nextZeroIndex < 8)\n            ++nextZeroIndex;\n\n        swap(numbers[i], numbers[nextZeroIndex]);\n        i = nextZeroIndex;\n    }\n}\nunittest{\n    uint[9] numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n\n    swapNumbers(numbers, cast(uint)(0xd6));\n    assert(numbers == [2, 1, 0, 4, 3, 7, 6, 5, 8]);\n}\n```", "tags": ["dlang2.063", "\u3069\u3046\u66f8\u304f"]}