{"context": " More than 1 year has passed since last update.\n\nSplay Heap\n\u511f\u5374\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u305d\u306e2\u306fSplay Heap\u3067\u3059\uff0eset\u3084map\u3068\u3057\u3066\u306e\u30b9\u30d7\u30ec\u30fc\u6728\u3082\u6709\u540d\u3067\u3059\u304c\uff0c\u4eca\u56de\u306f\u30d2\u30fc\u30d7\u3068\u3057\u3066\u4f7f\u3044\u307e\u3059\uff0eSplay Heap\u306f\u30a2\u30f3\u30d0\u30e9\u30f3\u30b9\u306a\u4e8c\u5206\u6728\u3068\u540c\u3058\u5185\u90e8\u69cb\u9020\u3092\u6301\u3061\uff0c\u5404\u9802\u70b9\u306f\uff0c\u5024\u3068\u5de6\u53f3\u306e\u5b50\u306e\u307f\u6301\u3061\u307e\u3059\uff0e\u305d\u3057\u3066\uff0c\u64cd\u4f5c\u3092\u884c\u3046\u305f\u3073\u306b\uff0c\u30d0\u30e9\u30f3\u30b9\u3092\u53d6\u308b\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u3067\uff0c\u4ed6\u306e\u64cd\u4f5c\u306e\u30aa\u30fc\u30c0\u30fc\u3092\u6539\u5584\u3057\u307e\u3059\uff0e\n\u6728\u306e\u578b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\ntype Tree<'a> =\n    | E\n    | T of\n        left : Tree<'a> *\n        elem : 'a *\n        right : Tree<'a>\n\n\u633f\u5165\u51e6\u7406\u306f\u3061\u3087\u3063\u3068\u73cd\u3057\u304f\uff0c\u8981\u7d20\u3092\u6839\u306b\u8ffd\u52a0\u3057\u307e\u3059\uff0e\uff08\u666e\u901a\u306e\u4e8c\u5206\u6728\u306a\u3089\u8449\u304b\u7bc0\u70b9\u306a\u306e\u306b\u5bfe\u3057\u3066\uff09\uff0e \u305d\u3057\u3066\uff0c\u6728\u3092\uff0c\u8ffd\u52a0\u3055\u308c\u305f\u8981\u7d20\u3088\u308a\u5c0f\u3055\u3044\u3082\u306e\u3092\u5de6\u306e\u5b50\u306b\uff0c\u5927\u304d\u3044\u7269\u3092\u53f3\u306e\u5b50\u306b\u6301\u3064\u3088\u3046\u306b\u518d\u69cb\u7bc9\u3057\u307e\u3059\uff0e\u3053\u306e\u969b\uff0c\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306e\u3088\u3046\u306b\u518d\u5e30\u7684\u306b\u69cb\u7bc9\u3092\u884c\u3044\u7d9a\u3051\u307e\u3059\uff0e\nlet insert x t = T(smaller x t, x, bigger x t)\n\n// \u4e00\u65e6bigger\u306e\u307f\u63b2\u8f09\nlet bigger pivot = function\n    | E -> E\n    | T(a, x, b) -> \n        if x <= pivot then bigger pivot b\n        else T(bigger pivot a, x, b)\n\n\u305f\u3060\u3057\uff0c\u3053\u306e\u307e\u307e\u3067\u306f\u5e73\u8861\u306b\u8fd1\u3065\u3051\u306a\u3044\u305f\u3081\uff0cbigger\u306e\u5834\u5408\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u3092\u52a0\u3048\u307e\u3059\uff0e\n\npivot\u3088\u308a\u5024\u3092\u6301\u3064\u7bc0\u70b9\u304c\u304c\u898b\u3064\u304b\u3063\u305f\u6642\uff0c\u5de6\u306e\u5b50\u3092\u898b\u3066\uff0c\n\n\n pivot\u4ee5\u4e0b\u306a\u3089\u3070\u5de6\u306e\u5b50\u306e\u53f3\u306e\u5b50\u3092\u4e00\u6bb5\u5f15\u304d\u4e0a\u3052\u308b\n pivot\u3088\u308a\u5927\u304d\u3051\u308c\u3070\u53f3\u56de\u8ee2\u3055\u305b\u308b\n\n\n\n\u56f3\u89e3\u3059\u308b\u3068\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\nsmaller\u3082\u540c\u3058\u3088\u3046\u306a\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u3092\u52a0\u3048\u307e\u3059\u304c\uff0cbigger\u3068smaller\u306f\u4e00\u5ea6\u306b\u3057\u3066\u3057\u307e\u3046\u306e\u304c\u52b9\u7387\u304c\u826f\u3044\u306e\u3067\uff0cpartition\u3068\u3044\u3046\u95a2\u6570\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\n// pivot\u3068\u30d2\u30fc\u30d7\u3092\u5f15\u6570\u306b\u3068\u308a\uff0c\u30d2\u30fc\u30d7\u3092small\u3068big\u306b\u5206\u5272\nlet rec partition pivot = function\n    | E -> (E, E)\n    | (T(a, x, b) as t) ->\n        if x <= pivot then // smaller\n            match b with\n            | E -> (t, E) // small\u306e\u307f\n            | T(b1, y, b2) ->\n                if y <= pivot then\n                    let small, big = partition pivot b2\n                    T(T(a, x, b1), y, small), big // \u5de6\u56de\u8ee2\n                else\n                    let small, big = partition pivot b1\n                    T(a, x, small), T(big, y, b2) // b1\u306esmall\u3092\u4e00\u6bb5\u5f15\u304d\u4e0a\u3052\n        else // bigger\n            match a with\n            | E -> (E, t)  // big\u306e\u307f\n            | T(a1, y, a2) ->\n                if y <= pivot then\n                    let small, big = partition pivot a2\n                    T(a1, y, small), T(big, x, b) // a2\u3092\u5f15\u304d\u4e0a\u3052\n                else\n                    let small, big = partition pivot a1\n                    small, T(big, y, T(a2, x, b)) // \u53f3\u56de\u8ee2\n\npartition\u3092\u4f7f\u3063\u305finsert\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\uff0e\nlet insert x t =\n    let small, big = partition x t\n    T(small, x, big)\n\n\u6700\u5c0f\u5024\u306e\u53d6\u5f97\u306f\u5358\u306b\u5de6\u3092\u305f\u3069\u308a\u7d9a\u3051\u308b\u3060\u3051\u3067\u3059\uff0e\nlet rec findMin = function\n    | T(E, x, b) -> x\n    | T(a, x, b) -> findMin a\n    | E -> failwith \"empty\"\n\n\u6700\u5c0f\u5024\u306e\u6d88\u53bb\u306e\u6642\u306f\uff0c\u30d0\u30e9\u30f3\u30b9\u3092\u53d6\u308b\u51e6\u7406\u3092\u52a0\u3048\uff0c\u64cd\u4f5c\u306e\u5ea6\u306b\u6728\u304c\u5e73\u8861\u306b\u8fd1\u3065\u304f\u3088\u3046\u306b\u3057\u307e\u3059\uff0e\nlet rec deleteMin = function\n    | T(E, x, b) -> b\n    | T(T(E, x, b), y, c) -> T(b, y, c) // \u4e0d\u8981\u306a\u7bc0\u70b9\u3092\u6d88\u53bb\n    | T(T(a, x, b), y, c) -> T(deleteMin a, x, T(b, y, c)) // \u53f3\u56de\u8ee2\n    | E -> failwith \"empty\"\n\n\n\u5b9f\u884c\u4f8b\n\u9069\u5f53\u306b1\u304b\u308910\u307e\u3067\u8ffd\u52a0\u3057\uff0c\u6728\u306e\u51fa\u529b\uff0cfindMin\uff0cdeleteMin\u306e\u7d50\u679c\u306e\u51fa\u529b\u3092\u884c\u3044\u307e\u3059\uff0e\u307e\u305f\uff0c\u5076\u6570\u306e\u6642\u6700\u5c0f\u5024\u6d88\u53bb\u3067\u6728\u3092\u66f4\u65b0\u3057\u307e\u3059\uff0e\n[<EntryPoint>]\nlet main argv = \n    let mutable t = empty\n    for i in 1 .. 10 do\n        t <- insert i t\n        printfn \"%A\" t\n        printfn \"%A\" (findMin t)\n        printfn \"%A\" (deleteMin t)\n        if i % 2 = 0 then\n            t <- deleteMin t\n        printfn \"=======================================\"\n    0 // return an integer exit code\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\nT (E,1,E)\n1\nE\n=======================================\nT (T (E,1,E),2,E)\n1\nT (E,2,E)\n=======================================\nT (T (E,2,E),3,E)\n2\nT (E,3,E)\n=======================================\nT (T (T (E,2,E),3,E),4,E)\n2\nT (E,3,T (E,4,E))\n=======================================\nT (T (T (E,3,E),4,E),5,E)\n3\nT (E,4,T (E,5,E))\n=======================================\nT (T (T (T (E,3,E),4,E),5,E),6,E)\n3\nT (T (E,4,E),5,T (E,6,E))\n=======================================\nT (T (T (T (E,4,E),5,E),6,E),7,E)\n4\nT (T (E,5,E),6,T (E,7,E))\n=======================================\nT (T (T (T (T (E,4,E),5,E),6,E),7,E),8,E)\n4\nT (T (E,5,T (E,6,E)),7,T (E,8,E))\n=======================================\nT (T (T (T (E,5,T (E,6,E)),7,E),8,E),9,E)\n5\nT (T (T (E,6,E),7,E),8,T (E,9,E))\n=======================================\nT (T (T (T (T (E,5,T (E,6,E)),7,E),8,E),9,E),10,E)\n5\nT (T (T (E,6,E),7,T (E,8,E)),9,T (E,10,E))\n=======================================\n\n\u306a\u3093\u3068\u306a\u304f\u30d0\u30e9\u30f3\u30b9\u304c\u53d6\u308c\u305f\u6728\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u307e\u3059\u306d\uff0e\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5168\u4f53\ntype Tree<'a> =\n    | E\n    | T of\n        left : Tree<'a> *\n        elem : 'a *\n        right : Tree<'a>\n\nlet empty = E\nlet isEmpty = function\n    | E -> true\n    | _ -> false\n\n// pivot\u3068\u30d2\u30fc\u30d7\u3092\u5f15\u6570\u306b\u3068\u308a\uff0c\u30d2\u30fc\u30d7\u3092small\u3068big\u306b\u5206\u5272\nlet rec partition pivot = function\n    | E -> (E, E)\n    | (T(a, x, b) as t) ->\n        if x <= pivot then // smaller\n            match b with\n            | E -> (t, E) // small\u306e\u307f\n            | T(b1, y, b2) ->\n                if y <= pivot then\n                    let small, big = partition pivot b2\n                    T(T(a, x, b1), y, small), big // \u5de6\u56de\u8ee2\n                else\n                    let small, big = partition pivot b1\n                    T(a, x, small), T(big, y, b2) // b1\u306esmall\u3092\u4e00\u6bb5\u5f15\u304d\u4e0a\u3052\n        else // bigger\n            match a with\n            | E -> (E, t)  // big\u306e\u307f\n            | T(a1, y, a2) ->\n                if y <= pivot then\n                    let small, big = partition pivot a2\n                    T(a1, y, small), T(big, x, b) // a2\u3092\u5f15\u304d\u4e0a\u3052\n                else\n                    let small, big = partition pivot a1\n                    small, T(big, y, T(a2, x, b)) // \u53f3\u56de\u8ee2\n\nlet insert x t =\n    let small, big = partition x t\n    T(small, x, big)\n\nlet rec findMin = function\n    | T(E, x, b) -> x\n    | T(a, x, b) -> findMin a\n    | E -> failwith \"empty\"\n\nlet rec deleteMin = function\n    | T(E, x, b) -> b\n    | T(T(E, x, b), y, c) -> T(b, y, c)\n    | T(T(a, x, b), y, c) -> T(deleteMin a, x, T(b, y, c))\n    | E -> failwith \"empty\"\n\n\n\u7d42\u308f\u308a\u306b\n\u672c\u8a18\u4e8b\u3067\u3084\u3063\u305f\u3053\u3068\n\nSplay Heap\u306e\u7d39\u4ecb\n\n\u6b21\u56de\n\nPairing Heap \n\n# Splay Heap\n\u511f\u5374\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u305d\u306e2\u306fSplay Heap\u3067\u3059\uff0eset\u3084map\u3068\u3057\u3066\u306e\u30b9\u30d7\u30ec\u30fc\u6728\u3082\u6709\u540d\u3067\u3059\u304c\uff0c\u4eca\u56de\u306f\u30d2\u30fc\u30d7\u3068\u3057\u3066\u4f7f\u3044\u307e\u3059\uff0eSplay Heap\u306f\u30a2\u30f3\u30d0\u30e9\u30f3\u30b9\u306a\u4e8c\u5206\u6728\u3068\u540c\u3058\u5185\u90e8\u69cb\u9020\u3092\u6301\u3061\uff0c\u5404\u9802\u70b9\u306f\uff0c\u5024\u3068\u5de6\u53f3\u306e\u5b50\u306e\u307f\u6301\u3061\u307e\u3059\uff0e\u305d\u3057\u3066\uff0c\u64cd\u4f5c\u3092\u884c\u3046\u305f\u3073\u306b\uff0c\u30d0\u30e9\u30f3\u30b9\u3092\u53d6\u308b\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u3067\uff0c\u4ed6\u306e\u64cd\u4f5c\u306e\u30aa\u30fc\u30c0\u30fc\u3092\u6539\u5584\u3057\u307e\u3059\uff0e\n\n\u6728\u306e\u578b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```fsharp\ntype Tree<'a> =\n    | E\n    | T of\n        left : Tree<'a> *\n        elem : 'a *\n        right : Tree<'a>\n```\n\n\u633f\u5165\u51e6\u7406\u306f\u3061\u3087\u3063\u3068\u73cd\u3057\u304f\uff0c\u8981\u7d20\u3092**\u6839\u306b**\u8ffd\u52a0\u3057\u307e\u3059\uff0e\uff08\u666e\u901a\u306e\u4e8c\u5206\u6728\u306a\u3089\u8449\u304b\u7bc0\u70b9\u306a\u306e\u306b\u5bfe\u3057\u3066\uff09\uff0e \u305d\u3057\u3066\uff0c\u6728\u3092\uff0c\u8ffd\u52a0\u3055\u308c\u305f\u8981\u7d20\u3088\u308a\u5c0f\u3055\u3044\u3082\u306e\u3092\u5de6\u306e\u5b50\u306b\uff0c\u5927\u304d\u3044\u7269\u3092\u53f3\u306e\u5b50\u306b\u6301\u3064\u3088\u3046\u306b\u518d\u69cb\u7bc9\u3057\u307e\u3059\uff0e\u3053\u306e\u969b\uff0c\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306e\u3088\u3046\u306b\u518d\u5e30\u7684\u306b\u69cb\u7bc9\u3092\u884c\u3044\u7d9a\u3051\u307e\u3059\uff0e\n\n```fsharp\nlet insert x t = T(smaller x t, x, bigger x t)\n\n// \u4e00\u65e6bigger\u306e\u307f\u63b2\u8f09\nlet bigger pivot = function\n    | E -> E\n    | T(a, x, b) -> \n        if x <= pivot then bigger pivot b\n        else T(bigger pivot a, x, b)\n```\n\n\u305f\u3060\u3057\uff0c\u3053\u306e\u307e\u307e\u3067\u306f\u5e73\u8861\u306b\u8fd1\u3065\u3051\u306a\u3044\u305f\u3081\uff0cbigger\u306e\u5834\u5408\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u3092\u52a0\u3048\u307e\u3059\uff0e\n\n* pivot\u3088\u308a\u5024\u3092\u6301\u3064\u7bc0\u70b9\u304c\u304c\u898b\u3064\u304b\u3063\u305f\u6642\uff0c\u5de6\u306e\u5b50\u3092\u898b\u3066\uff0c\n *  pivot\u4ee5\u4e0b\u306a\u3089\u3070\u5de6\u306e\u5b50\u306e\u53f3\u306e\u5b50\u3092\u4e00\u6bb5\u5f15\u304d\u4e0a\u3052\u308b\n *  pivot\u3088\u308a\u5927\u304d\u3051\u308c\u3070\u53f3\u56de\u8ee2\u3055\u305b\u308b\n\n\u56f3\u89e3\u3059\u308b\u3068\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n![\u56f3(2).png](https://qiita-image-store.s3.amazonaws.com/0/58722/e498e992-e955-adfb-fdd9-aec2fc40176c.png)\n\n\nsmaller\u3082\u540c\u3058\u3088\u3046\u306a\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u3092\u52a0\u3048\u307e\u3059\u304c\uff0cbigger\u3068smaller\u306f\u4e00\u5ea6\u306b\u3057\u3066\u3057\u307e\u3046\u306e\u304c\u52b9\u7387\u304c\u826f\u3044\u306e\u3067\uff0cpartition\u3068\u3044\u3046\u95a2\u6570\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\n\n```fsharp\n// pivot\u3068\u30d2\u30fc\u30d7\u3092\u5f15\u6570\u306b\u3068\u308a\uff0c\u30d2\u30fc\u30d7\u3092small\u3068big\u306b\u5206\u5272\nlet rec partition pivot = function\n    | E -> (E, E)\n    | (T(a, x, b) as t) ->\n        if x <= pivot then // smaller\n            match b with\n            | E -> (t, E) // small\u306e\u307f\n            | T(b1, y, b2) ->\n                if y <= pivot then\n                    let small, big = partition pivot b2\n                    T(T(a, x, b1), y, small), big // \u5de6\u56de\u8ee2\n                else\n                    let small, big = partition pivot b1\n                    T(a, x, small), T(big, y, b2) // b1\u306esmall\u3092\u4e00\u6bb5\u5f15\u304d\u4e0a\u3052\n        else // bigger\n            match a with\n            | E -> (E, t)  // big\u306e\u307f\n            | T(a1, y, a2) ->\n                if y <= pivot then\n                    let small, big = partition pivot a2\n                    T(a1, y, small), T(big, x, b) // a2\u3092\u5f15\u304d\u4e0a\u3052\n                else\n                    let small, big = partition pivot a1\n                    small, T(big, y, T(a2, x, b)) // \u53f3\u56de\u8ee2\n``` \n\npartition\u3092\u4f7f\u3063\u305finsert\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```fsharp\nlet insert x t =\n    let small, big = partition x t\n    T(small, x, big)\n```\n\n\u6700\u5c0f\u5024\u306e\u53d6\u5f97\u306f\u5358\u306b\u5de6\u3092\u305f\u3069\u308a\u7d9a\u3051\u308b\u3060\u3051\u3067\u3059\uff0e\n\n```fsharp\nlet rec findMin = function\n    | T(E, x, b) -> x\n    | T(a, x, b) -> findMin a\n    | E -> failwith \"empty\"\n```\n\n\n\u6700\u5c0f\u5024\u306e\u6d88\u53bb\u306e\u6642\u306f\uff0c\u30d0\u30e9\u30f3\u30b9\u3092\u53d6\u308b\u51e6\u7406\u3092\u52a0\u3048\uff0c\u64cd\u4f5c\u306e\u5ea6\u306b\u6728\u304c\u5e73\u8861\u306b\u8fd1\u3065\u304f\u3088\u3046\u306b\u3057\u307e\u3059\uff0e\n\n```fsharp\nlet rec deleteMin = function\n    | T(E, x, b) -> b\n    | T(T(E, x, b), y, c) -> T(b, y, c) // \u4e0d\u8981\u306a\u7bc0\u70b9\u3092\u6d88\u53bb\n    | T(T(a, x, b), y, c) -> T(deleteMin a, x, T(b, y, c)) // \u53f3\u56de\u8ee2\n    | E -> failwith \"empty\"\n```\n\n# \u5b9f\u884c\u4f8b\n\n\u9069\u5f53\u306b1\u304b\u308910\u307e\u3067\u8ffd\u52a0\u3057\uff0c\u6728\u306e\u51fa\u529b\uff0cfindMin\uff0cdeleteMin\u306e\u7d50\u679c\u306e\u51fa\u529b\u3092\u884c\u3044\u307e\u3059\uff0e\u307e\u305f\uff0c\u5076\u6570\u306e\u6642\u6700\u5c0f\u5024\u6d88\u53bb\u3067\u6728\u3092\u66f4\u65b0\u3057\u307e\u3059\uff0e\n\n```fsharp\n[<EntryPoint>]\nlet main argv = \n    let mutable t = empty\n    for i in 1 .. 10 do\n        t <- insert i t\n        printfn \"%A\" t\n        printfn \"%A\" (findMin t)\n        printfn \"%A\" (deleteMin t)\n        if i % 2 = 0 then\n            t <- deleteMin t\n        printfn \"=======================================\"\n    0 // return an integer exit code\n```\n\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```shell-session\nT (E,1,E)\n1\nE\n=======================================\nT (T (E,1,E),2,E)\n1\nT (E,2,E)\n=======================================\nT (T (E,2,E),3,E)\n2\nT (E,3,E)\n=======================================\nT (T (T (E,2,E),3,E),4,E)\n2\nT (E,3,T (E,4,E))\n=======================================\nT (T (T (E,3,E),4,E),5,E)\n3\nT (E,4,T (E,5,E))\n=======================================\nT (T (T (T (E,3,E),4,E),5,E),6,E)\n3\nT (T (E,4,E),5,T (E,6,E))\n=======================================\nT (T (T (T (E,4,E),5,E),6,E),7,E)\n4\nT (T (E,5,E),6,T (E,7,E))\n=======================================\nT (T (T (T (T (E,4,E),5,E),6,E),7,E),8,E)\n4\nT (T (E,5,T (E,6,E)),7,T (E,8,E))\n=======================================\nT (T (T (T (E,5,T (E,6,E)),7,E),8,E),9,E)\n5\nT (T (T (E,6,E),7,E),8,T (E,9,E))\n=======================================\nT (T (T (T (T (E,5,T (E,6,E)),7,E),8,E),9,E),10,E)\n5\nT (T (T (E,6,E),7,T (E,8,E)),9,T (E,10,E))\n=======================================\n```\n\n\u306a\u3093\u3068\u306a\u304f\u30d0\u30e9\u30f3\u30b9\u304c\u53d6\u308c\u305f\u6728\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u307e\u3059\u306d\uff0e\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5168\u4f53\n\n```fsharp\ntype Tree<'a> =\n    | E\n    | T of\n        left : Tree<'a> *\n        elem : 'a *\n        right : Tree<'a>\n\nlet empty = E\nlet isEmpty = function\n    | E -> true\n    | _ -> false\n\n// pivot\u3068\u30d2\u30fc\u30d7\u3092\u5f15\u6570\u306b\u3068\u308a\uff0c\u30d2\u30fc\u30d7\u3092small\u3068big\u306b\u5206\u5272\nlet rec partition pivot = function\n    | E -> (E, E)\n    | (T(a, x, b) as t) ->\n        if x <= pivot then // smaller\n            match b with\n            | E -> (t, E) // small\u306e\u307f\n            | T(b1, y, b2) ->\n                if y <= pivot then\n                    let small, big = partition pivot b2\n                    T(T(a, x, b1), y, small), big // \u5de6\u56de\u8ee2\n                else\n                    let small, big = partition pivot b1\n                    T(a, x, small), T(big, y, b2) // b1\u306esmall\u3092\u4e00\u6bb5\u5f15\u304d\u4e0a\u3052\n        else // bigger\n            match a with\n            | E -> (E, t)  // big\u306e\u307f\n            | T(a1, y, a2) ->\n                if y <= pivot then\n                    let small, big = partition pivot a2\n                    T(a1, y, small), T(big, x, b) // a2\u3092\u5f15\u304d\u4e0a\u3052\n                else\n                    let small, big = partition pivot a1\n                    small, T(big, y, T(a2, x, b)) // \u53f3\u56de\u8ee2\n\nlet insert x t =\n    let small, big = partition x t\n    T(small, x, big)\n\nlet rec findMin = function\n    | T(E, x, b) -> x\n    | T(a, x, b) -> findMin a\n    | E -> failwith \"empty\"\n\nlet rec deleteMin = function\n    | T(E, x, b) -> b\n    | T(T(E, x, b), y, c) -> T(b, y, c)\n    | T(T(a, x, b), y, c) -> T(deleteMin a, x, T(b, y, c))\n    | E -> failwith \"empty\"\n```\n\n# \u7d42\u308f\u308a\u306b\n\n\u672c\u8a18\u4e8b\u3067\u3084\u3063\u305f\u3053\u3068\n\n* Splay Heap\u306e\u7d39\u4ecb\n\n\u6b21\u56de\n\n* Pairing Heap \n", "tags": ["\u95a2\u6570\u578b\u8a00\u8a9e", "\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0", "F#"]}