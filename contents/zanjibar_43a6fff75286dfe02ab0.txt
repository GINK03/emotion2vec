{"tags": ["api", "JSON", "\u884c\u653f\u6a5f\u95a2", "WebAPI", "resas"], "context": "\n\n\u5e02\u753a\u6751\u306e\u4f01\u696d\u6570\u306e\u7523\u696d\u5927\u5206\u985e\u4ed8\u304d\u306e\u30c7\u30fc\u30bf\u3092\u3068\u3063\u3066\u304f\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\u306a\u3093\u3061\u3083\u3063\u3066\u72b6\u614b\u3067\u306e\u516c\u958b\n\u81ea\u5206\u306b\u3068\u3063\u3066\u4fbf\u5229\u306a\u3088\u3046\u306b\u3064\u304f\u3063\u3066\u3042\u308b\u306e\u3067\u3001\u4ed6\u306e\u304b\u305f\u306b\u306f\u308f\u304b\u308a\u306b\u304f\u3044\u3068\u3053\u308d\u304c\u3042\u308b\u3068\u306f\u601d\u3044\u307e\u3059\u306e\u3067\u3001\u9069\u5b9c\u5909\u66f4\u3057\u3066\u3064\u304b\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\u30b3\u30fc\u30c9\u306f\u3064\u306a\u304e\u5408\u308f\u305b\u308c\u3070\u52d5\u304f\u306f\u305a\u3067\u3059\u3002jupyter \u304a\u4f7f\u3044\u306e\u65b9\u306a\u3089\u30bb\u30eb\u306b\u30b3\u30d4\u30da\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u6700\u5f8c\u306b\u3001csv \u3067\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u305a\u3001\u7523\u696d\u5927\u5206\u985e\u30b3\u30fc\u30c9 \u5404\u7a2e\u30b3\u30fc\u30c9\u3082\u3001API \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\u7523\u696d\u5927\u5206\u985e\u30b3\u30fc\u30c9\u5225\u306b\u3057\u304b\u3001\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u30ea\u30b9\u30c8\u3092\u3064\u304b\u3063\u3066\u3001\u4e00\u62ec\u3057\u3066\u3001\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n#\u3000\u7523\u696d\u5927\u5206\u985e\nsicCode_list = {'A': '\u8fb2\u696d\uff0c\u6797\u696d',\n 'B': '\u6f01\u696d',\n 'C': '\u9271\u696d\uff0c\u63a1\u77f3\u696d\uff0c\u7802\u5229\u63a1\u53d6\u696d',\n 'D': '\u5efa\u8a2d\u696d',\n 'E': '\u88fd\u9020\u696d',\n 'F': '\u96fb\u6c17\u30fb\u30ac\u30b9\u30fb\u71b1\u4f9b\u7d66\u30fb\u6c34\u9053\u696d',\n 'G': '\u60c5\u5831\u901a\u4fe1\u696d',\n 'H': '\u904b\u8f38\u696d\uff0c\u90f5\u4fbf\u696d',\n 'I': '\u5378\u58f2\u696d\uff0c\u5c0f\u58f2\u696d',\n 'J': '\u91d1\u878d\u696d\uff0c\u4fdd\u967a\u696d',\n 'K': '\u4e0d\u52d5\u7523\u696d\uff0c\u7269\u54c1\u8cc3\u8cb8\u696d',\n 'L': '\u5b66\u8853\u7814\u7a76\uff0c\u5c02\u9580\u30fb\u6280\u8853\u30b5\u30fc\u30d3\u30b9\u696d',\n 'M': '\u5bbf\u6cca\u696d\uff0c\u98f2\u98df\u30b5\u30fc\u30d3\u30b9\u696d',\n 'N': '\u751f\u6d3b\u95a2\u9023\u30b5\u30fc\u30d3\u30b9\u696d\uff0c\u5a2f\u697d\u696d',\n 'O': '\u6559\u80b2\uff0c\u5b66\u7fd2\u652f\u63f4\u696d',\n 'P': '\u533b\u7642\uff0c\u798f\u7949',\n 'Q': '\u8907\u5408\u30b5\u30fc\u30d3\u30b9\u4e8b\u696d',\n 'R': '\u30b5\u30fc\u30d3\u30b9\u696d\uff08\u4ed6\u306b\u5206\u985e\u3055\u308c\u306a\u3044\u3082\u306e\uff09',\n 'S': '\u516c\u52d9\uff08\u4ed6\u306b\u5206\u985e\u3055\u308c\u308b\u3082\u306e\u3092\u9664\u304f\uff09',\n 'T': '\u5206\u985e\u4e0d\u80fd\u306e\u7523\u696d'}\n\n\u306a\u3093\u3061\u3083\u3063\u3066\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3001API-KEY \u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\u9023\u60f3\u914d\u5217\u3092\u5f15\u6570\u306b\u9001\u308a\u8fbc\u3093\u3067\u3001execute \u3057\u307e\u3059\u3002\nget_cat \u3067\u3001\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\uff08\u7523\u696d\u5927\u5206\u985e\uff09\u3092\u4e00\u62ec\u3067\u3068\u3063\u3066\u304d\u3066\u3001year_df \u3067\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\u5927\u304d\u306aCSV\u30d5\u30a1\u30a4\u30eb\u3067\u516c\u958b\u3057\u3066\u3044\u308c\u3070\u3001\u3053\u306e\u3088\u3046\u306a\u4f5c\u696d\u306f\u4e0d\u8981\u306a\u306e\u306b\u3068\u601d\u3044\u3064\u3064\u3001\u30af\u30e9\u30b9\u3064\u304f\u308a\u307e\u3057\u305f\u3002\n#!/usr/bin/env python\n# -*- encoding:utf-8 -*-\n# anaconda default package \u306e\u307f\u4f7f\u3046\u4e88\u5b9a\nimport sys,os,re,json,inspect,requests\nimport datetime as dt\nfrom pprint import pprint as pp\nimport numpy as np\nimport pandas as pd\nfrom bs4 import BeautifulSoup\nfrom IPython.display import display, HTML\n\n\n# class \u540d\u306e\u5148\u982d\u306f\u5927\u6587\u5b57\u306e\u306f\u305a\u306a\u3093\u3067\u3059\u304c\u3001\u9762\u5012\u306a\u3093\u3067\u3001\u5c0f\u6587\u5b57\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n# my_args \u3068\u3044\u3046\u9023\u60f3\u914d\u5217\u3092\u9001\u308a\u8fbc\u3093\u3067\u51e6\u7406\u3057\u307e\u3059\u3002\n# rs \u3068\u3044\u3046\u5909\u6570\u3067\u3064\u304b\u3044\u307e\u3059\u3002\nclass resas:\n    # \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n    def __init__(self):\n        # \u2605\u2605\u2605\u3000api-key \u306e\u8aad\u307f\u8fbc\u307f \u540c\u3058\u30d5\u30a9\u30eb\u30c0\u5185\u306b\u3042\u308b\u524d\u63d0\u3067\u3059\u3002\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n        self.api_key =open('api-key.txt','r').read().rstrip()\n        # action \u3067\u3001method \u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\n        self.action_list = ['x',\n                'get',\n                'get_cat',\n                'year_df',\n                'dummy']\n\n        pass\n\n    # \u30a8\u30e9\u30fc\u306e\u3068\u304d\u306f\u3001None \u3092\u8fd4\u3057\u307e\u3059\u3002\n    def execute(self,my_args={'action':'dummy'}):\n        self.args = my_args\n        action = self.args['action']\n\n        # test \u5b9f\u884c\u306e\u3068\u304d dry = True\n        self.dry =False\n        if 'dry' in self.args:\n            self.dry = self.args['dry']\n\n\n\n\n        if action not in self.action_list:\n            print(action + ' not in list' )\n            return(None)\n\n        #\u3000\u5b9f\u884c\u7d50\u679c\u3092\u305d\u306e\u307e\u307e\u8fd4\u3057\u307e\u3059\u3002 \n        return(eval('self.' + action + '()'))\n        pass\n\n    def get(self):\n        x = json.loads(requests.get('https://opendata.resas-portal.go.jp/' + self.args['url'], \n                 headers={'X-API-KEY':self.api_key}).text)\n        return(x['message'],x['result'])\n\n\n\n\n    def dummy(self):\n        # under construction\n        try:\n         pass\n        except:\n         pass\n        print('dummy......')\n        return(None)\n\n    # \u7523\u696d\u5206\u985e\u306a\u3069\u306e\u30c7\u30fc\u30bf\u3092\u30ab\u30c6\u30b4\u30ea\u30fc\u3054\u3068\u3082\u3063\u3066\u304f\u308b\n    def get_cat(self):\n\n        cat_list = eval(self.args['cat'] + '_list')\n        plist = \"&\".join([x + '=' + str(self.args['params'][x]) for x in self.args['params']])\n        base_url = 'https://opendata.resas-portal.go.jp/' + self.args['url'] + '?' + plist\n        xlist = {}\n        for one in cat_list:\n            url = base_url + \"&sicCode=\" + one\n            if self.dry :\n                print(url)\n            else:\n                xlist[one] = json.loads(requests.get(url,headers={'X-API-KEY':self.api_key}).text)['result']\n        return(xlist)\n\n\n    def year_df(self):\n        cat_list = eval(self.args['cat'] + '_list')\n        # year \u4e00\u89a7\n        xlist = []\n        for cat_id in cat_list:\n            try:\n                self.args['data'][cat_id]['data']\n                for one in self.args['data'][cat_id]['data']:\n                    tmp_xlist = [one['year']]\n                    for item in self.args['items']:\n                        tmp_xlist.append(self.args['data'][cat_id][item])\n\n                    tmp_xlist.append(one['value']) \n                    xlist.append(tmp_xlist)\n\n            except:\n                pass\n\n        xdf = pd.DataFrame(xlist,columns = ['year'] + self.args['items'] + ['value'])\n\n        return(xdf)\n        # \u5e74\u30d9\u30fc\u30b9\u306e csv \u306b\u3059\u308b\n        # \u5bfe\u8c61 + \u30ab\u30c6\u30b4\u30ea\n\n\n# \u521d\u671f\u5316\u307e\u3067\u3053\u306e\u30bb\u30eb\u5185\u3067\u884c\u3044\u307e\u3059\u3002\nrs = resas()\n\n\u795e\u5948\u5ddd\u770c\u3001\u5e73\u585a\u306e\u30c7\u30fc\u30bf\u3092\u5e74\u3092\u30ad\u30fc\u306b\u3057\u305f\u8f9e\u66f8\u5f62\u5f0f\u3067\u3001\u53d6\u5f97\u3057\u307e\u3059\u3002\u90fd\u9053\u5e9c\u770c\u30b3\u30fc\u30c9 prefCode \u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u30c7\u30fc\u30bf\u3092\u3072\u3063\u3071\u3063\u3066\u3053\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u4e0b\u4f4d\u30b3\u30fc\u30c9\u304c\u6307\u5b9a\u3057\u3066\u3042\u308b\u306a\u3089\u3070\u3001\u4e0a\u4f4d\u306e\u30b3\u30fc\u30c9\u306e\u6307\u5b9a\u306f\u4e0d\u8981\u3060\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u306a\u3093\u3067\u3057\u3087\u3046\u304b\uff1f\n\u6b21\u306e\u30b3\u30fc\u30c9\u306f\u3001\u7523\u696d\u5927\u5206\u985e\u306e\u30c7\u30fc\u30bf\u3092\u4e00\u62ec\u3067\u3068\u3063\u3066\u304d\u3066\u3001xlist \u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\nyear \u306e\u6307\u5b9a\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u5e74\u306f\u3001\u30ea\u30b9\u30c8\u3067\u623b\u3063\u3066\u304d\u307e\u3059\u3002\n\u5e74\u6307\u5b9a\u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3001\u305d\u3046\u3067\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u3088\u3046\u3067\u3059\u3002\ndry\u3000\u3092 True \u306b\u6307\u5b9a\u3059\u308b\u3068\u3001\u30a2\u30af\u30bb\u30b9\u306f\u305b\u305a\u306b\u3001URL\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\u795e\u5948\u5ddd\u770c\u3001\u5e73\u585a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001params \u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n#\u5168\u7523\u696d\u82b1\u706b\u56f3 \u4f01\u696d\u6570\u3001GET  api/v1-rc.1/municipality/company/perYear\nmy_args = {'action':'get_cat',\n           'cat':'sicCode',\n           'params':{'prefCode':14,'cityCode':14203},\n           'dry':False,\n           'url':'api/v1-rc.1/municipality/company/perYear'}\nxlist = rs.execute(my_args)\n\n\n\u8f9e\u66f8\u3067\u306f\u3001\u4f7f\u3044\u3065\u3089\u3044\u306e\u3067\u3001dataframe \u306b\u5909\u63db\u3057\u3001csv \u5f62\u5f0f\u3067\u3001temp.csv \u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002\nmy_args = {'action':'year_df',\n           'data':xlist,\n           'cat':'sicCode', \n           'items':['prefName','cityName','sicCode','sicName']}\nxdf = rs.execute(my_args)\nxdf.to_csv('test.csv',index=False)\n\n### \u5e02\u753a\u6751\u306e\u4f01\u696d\u6570\u306e\u7523\u696d\u5927\u5206\u985e\u4ed8\u304d\u306e\u30c7\u30fc\u30bf\u3092\u3068\u3063\u3066\u304f\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\n\u306a\u3093\u3061\u3083\u3063\u3066\u72b6\u614b\u3067\u306e\u516c\u958b\n\u81ea\u5206\u306b\u3068\u3063\u3066\u4fbf\u5229\u306a\u3088\u3046\u306b\u3064\u304f\u3063\u3066\u3042\u308b\u306e\u3067\u3001\u4ed6\u306e\u304b\u305f\u306b\u306f\u308f\u304b\u308a\u306b\u304f\u3044\u3068\u3053\u308d\u304c\u3042\u308b\u3068\u306f\u601d\u3044\u307e\u3059\u306e\u3067\u3001\u9069\u5b9c\u5909\u66f4\u3057\u3066\u3064\u304b\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30b3\u30fc\u30c9\u306f\u3064\u306a\u304e\u5408\u308f\u305b\u308c\u3070\u52d5\u304f\u306f\u305a\u3067\u3059\u3002jupyter \u304a\u4f7f\u3044\u306e\u65b9\u306a\u3089\u30bb\u30eb\u306b\u30b3\u30d4\u30da\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u6700\u5f8c\u306b\u3001csv \u3067\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305a\u3001\u7523\u696d\u5927\u5206\u985e\u30b3\u30fc\u30c9 \u5404\u7a2e\u30b3\u30fc\u30c9\u3082\u3001API \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\u7523\u696d\u5927\u5206\u985e\u30b3\u30fc\u30c9\u5225\u306b\u3057\u304b\u3001\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u30ea\u30b9\u30c8\u3092\u3064\u304b\u3063\u3066\u3001\u4e00\u62ec\u3057\u3066\u3001\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n```\n#\u3000\u7523\u696d\u5927\u5206\u985e\nsicCode_list = {'A': '\u8fb2\u696d\uff0c\u6797\u696d',\n 'B': '\u6f01\u696d',\n 'C': '\u9271\u696d\uff0c\u63a1\u77f3\u696d\uff0c\u7802\u5229\u63a1\u53d6\u696d',\n 'D': '\u5efa\u8a2d\u696d',\n 'E': '\u88fd\u9020\u696d',\n 'F': '\u96fb\u6c17\u30fb\u30ac\u30b9\u30fb\u71b1\u4f9b\u7d66\u30fb\u6c34\u9053\u696d',\n 'G': '\u60c5\u5831\u901a\u4fe1\u696d',\n 'H': '\u904b\u8f38\u696d\uff0c\u90f5\u4fbf\u696d',\n 'I': '\u5378\u58f2\u696d\uff0c\u5c0f\u58f2\u696d',\n 'J': '\u91d1\u878d\u696d\uff0c\u4fdd\u967a\u696d',\n 'K': '\u4e0d\u52d5\u7523\u696d\uff0c\u7269\u54c1\u8cc3\u8cb8\u696d',\n 'L': '\u5b66\u8853\u7814\u7a76\uff0c\u5c02\u9580\u30fb\u6280\u8853\u30b5\u30fc\u30d3\u30b9\u696d',\n 'M': '\u5bbf\u6cca\u696d\uff0c\u98f2\u98df\u30b5\u30fc\u30d3\u30b9\u696d',\n 'N': '\u751f\u6d3b\u95a2\u9023\u30b5\u30fc\u30d3\u30b9\u696d\uff0c\u5a2f\u697d\u696d',\n 'O': '\u6559\u80b2\uff0c\u5b66\u7fd2\u652f\u63f4\u696d',\n 'P': '\u533b\u7642\uff0c\u798f\u7949',\n 'Q': '\u8907\u5408\u30b5\u30fc\u30d3\u30b9\u4e8b\u696d',\n 'R': '\u30b5\u30fc\u30d3\u30b9\u696d\uff08\u4ed6\u306b\u5206\u985e\u3055\u308c\u306a\u3044\u3082\u306e\uff09',\n 'S': '\u516c\u52d9\uff08\u4ed6\u306b\u5206\u985e\u3055\u308c\u308b\u3082\u306e\u3092\u9664\u304f\uff09',\n 'T': '\u5206\u985e\u4e0d\u80fd\u306e\u7523\u696d'}\n```\n\n\u306a\u3093\u3061\u3083\u3063\u3066\u30af\u30e9\u30b9\u3067\u3059\u3002\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3001API-KEY \u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\u9023\u60f3\u914d\u5217\u3092\u5f15\u6570\u306b\u9001\u308a\u8fbc\u3093\u3067\u3001execute \u3057\u307e\u3059\u3002\n\nget_cat \u3067\u3001\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\uff08\u7523\u696d\u5927\u5206\u985e\uff09\u3092\u4e00\u62ec\u3067\u3068\u3063\u3066\u304d\u3066\u3001year_df \u3067\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\n\u5927\u304d\u306aCSV\u30d5\u30a1\u30a4\u30eb\u3067\u516c\u958b\u3057\u3066\u3044\u308c\u3070\u3001\u3053\u306e\u3088\u3046\u306a\u4f5c\u696d\u306f\u4e0d\u8981\u306a\u306e\u306b\u3068\u601d\u3044\u3064\u3064\u3001\u30af\u30e9\u30b9\u3064\u304f\u308a\u307e\u3057\u305f\u3002\n\n```\n#!/usr/bin/env python\n# -*- encoding:utf-8 -*-\n# anaconda default package \u306e\u307f\u4f7f\u3046\u4e88\u5b9a\nimport sys,os,re,json,inspect,requests\nimport datetime as dt\nfrom pprint import pprint as pp\nimport numpy as np\nimport pandas as pd\nfrom bs4 import BeautifulSoup\nfrom IPython.display import display, HTML\n\n\n# class \u540d\u306e\u5148\u982d\u306f\u5927\u6587\u5b57\u306e\u306f\u305a\u306a\u3093\u3067\u3059\u304c\u3001\u9762\u5012\u306a\u3093\u3067\u3001\u5c0f\u6587\u5b57\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n# my_args \u3068\u3044\u3046\u9023\u60f3\u914d\u5217\u3092\u9001\u308a\u8fbc\u3093\u3067\u51e6\u7406\u3057\u307e\u3059\u3002\n# rs \u3068\u3044\u3046\u5909\u6570\u3067\u3064\u304b\u3044\u307e\u3059\u3002\nclass resas:\n    # \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n    def __init__(self):\n        # \u2605\u2605\u2605\u3000api-key \u306e\u8aad\u307f\u8fbc\u307f \u540c\u3058\u30d5\u30a9\u30eb\u30c0\u5185\u306b\u3042\u308b\u524d\u63d0\u3067\u3059\u3002\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n        self.api_key =open('api-key.txt','r').read().rstrip()\n        # action \u3067\u3001method \u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\n        self.action_list = ['x',\n                'get',\n                'get_cat',\n                'year_df',\n                'dummy']\n\n        pass\n\n    # \u30a8\u30e9\u30fc\u306e\u3068\u304d\u306f\u3001None \u3092\u8fd4\u3057\u307e\u3059\u3002\n    def execute(self,my_args={'action':'dummy'}):\n        self.args = my_args\n        action = self.args['action']\n        \n        # test \u5b9f\u884c\u306e\u3068\u304d dry = True\n        self.dry =False\n        if 'dry' in self.args:\n            self.dry = self.args['dry']\n\n        \n\n            \n        if action not in self.action_list:\n            print(action + ' not in list' )\n            return(None)\n        \n        #\u3000\u5b9f\u884c\u7d50\u679c\u3092\u305d\u306e\u307e\u307e\u8fd4\u3057\u307e\u3059\u3002 \n        return(eval('self.' + action + '()'))\n        pass\n    \n    def get(self):\n        x = json.loads(requests.get('https://opendata.resas-portal.go.jp/' + self.args['url'], \n                 headers={'X-API-KEY':self.api_key}).text)\n        return(x['message'],x['result'])\n    \n\n\n        \n    def dummy(self):\n        # under construction\n        try:\n         pass\n        except:\n         pass\n        print('dummy......')\n        return(None)\n\n    # \u7523\u696d\u5206\u985e\u306a\u3069\u306e\u30c7\u30fc\u30bf\u3092\u30ab\u30c6\u30b4\u30ea\u30fc\u3054\u3068\u3082\u3063\u3066\u304f\u308b\n    def get_cat(self):\n\n        cat_list = eval(self.args['cat'] + '_list')\n        plist = \"&\".join([x + '=' + str(self.args['params'][x]) for x in self.args['params']])\n        base_url = 'https://opendata.resas-portal.go.jp/' + self.args['url'] + '?' + plist\n        xlist = {}\n        for one in cat_list:\n            url = base_url + \"&sicCode=\" + one\n            if self.dry :\n                print(url)\n            else:\n                xlist[one] = json.loads(requests.get(url,headers={'X-API-KEY':self.api_key}).text)['result']\n        return(xlist)\n        \n    \n    def year_df(self):\n        cat_list = eval(self.args['cat'] + '_list')\n        # year \u4e00\u89a7\n        xlist = []\n        for cat_id in cat_list:\n            try:\n                self.args['data'][cat_id]['data']\n                for one in self.args['data'][cat_id]['data']:\n                    tmp_xlist = [one['year']]\n                    for item in self.args['items']:\n                        tmp_xlist.append(self.args['data'][cat_id][item])\n\n                    tmp_xlist.append(one['value']) \n                    xlist.append(tmp_xlist)\n\n            except:\n                pass\n\n        xdf = pd.DataFrame(xlist,columns = ['year'] + self.args['items'] + ['value'])\n\n        return(xdf)\n        # \u5e74\u30d9\u30fc\u30b9\u306e csv \u306b\u3059\u308b\n        # \u5bfe\u8c61 + \u30ab\u30c6\u30b4\u30ea\n        \n\n# \u521d\u671f\u5316\u307e\u3067\u3053\u306e\u30bb\u30eb\u5185\u3067\u884c\u3044\u307e\u3059\u3002\nrs = resas()\n```\n\n\u795e\u5948\u5ddd\u770c\u3001\u5e73\u585a\u306e\u30c7\u30fc\u30bf\u3092\u5e74\u3092\u30ad\u30fc\u306b\u3057\u305f\u8f9e\u66f8\u5f62\u5f0f\u3067\u3001\u53d6\u5f97\u3057\u307e\u3059\u3002\u90fd\u9053\u5e9c\u770c\u30b3\u30fc\u30c9 prefCode \u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u30c7\u30fc\u30bf\u3092\u3072\u3063\u3071\u3063\u3066\u3053\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u4e0b\u4f4d\u30b3\u30fc\u30c9\u304c\u6307\u5b9a\u3057\u3066\u3042\u308b\u306a\u3089\u3070\u3001\u4e0a\u4f4d\u306e\u30b3\u30fc\u30c9\u306e\u6307\u5b9a\u306f\u4e0d\u8981\u3060\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u306a\u3093\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\u6b21\u306e\u30b3\u30fc\u30c9\u306f\u3001\u7523\u696d\u5927\u5206\u985e\u306e\u30c7\u30fc\u30bf\u3092\u4e00\u62ec\u3067\u3068\u3063\u3066\u304d\u3066\u3001xlist \u306b\u683c\u7d0d\u3057\u307e\u3059\u3002\nyear \u306e\u6307\u5b9a\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u5e74\u306f\u3001\u30ea\u30b9\u30c8\u3067\u623b\u3063\u3066\u304d\u307e\u3059\u3002\n\u5e74\u6307\u5b9a\u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3001\u305d\u3046\u3067\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u3088\u3046\u3067\u3059\u3002\n\ndry\u3000\u3092 True \u306b\u6307\u5b9a\u3059\u308b\u3068\u3001\u30a2\u30af\u30bb\u30b9\u306f\u305b\u305a\u306b\u3001URL\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\u795e\u5948\u5ddd\u770c\u3001\u5e73\u585a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001params \u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\n```\n#\u5168\u7523\u696d\u82b1\u706b\u56f3 \u4f01\u696d\u6570\u3001GET  api/v1-rc.1/municipality/company/perYear\nmy_args = {'action':'get_cat',\n           'cat':'sicCode',\n           'params':{'prefCode':14,'cityCode':14203},\n           'dry':False,\n           'url':'api/v1-rc.1/municipality/company/perYear'}\nxlist = rs.execute(my_args)\n\n```\n\n\u8f9e\u66f8\u3067\u306f\u3001\u4f7f\u3044\u3065\u3089\u3044\u306e\u3067\u3001dataframe \u306b\u5909\u63db\u3057\u3001csv \u5f62\u5f0f\u3067\u3001temp.csv \u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\n```\nmy_args = {'action':'year_df',\n           'data':xlist,\n           'cat':'sicCode', \n           'items':['prefName','cityName','sicCode','sicName']}\nxdf = rs.execute(my_args)\nxdf.to_csv('test.csv',index=False)\n```\n"}