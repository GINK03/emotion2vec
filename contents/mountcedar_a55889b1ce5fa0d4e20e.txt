{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nProcessing\u305d\u306e\u3082\u306e\u306e\u958b\u767a\u30b9\u30d4\u30fc\u30c9\u304c\u65e9\u3059\u304e\u3066api\u304c\u5909\u5316\u3057\u3001\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u52d5\u304b\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u30b1\u30fc\u30b9\u3092\u3088\u304f\u898b\u304b\u3051\u308b\u3002\u305d\u3093\u306a\u30b1\u30fc\u30b9\u3092\u898b\u304b\u3051\u305f\u3089\u3001\u5fae\u4fee\u6b63\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u3055\u3089\u3059\u3053\u3068\u306b\u3059\u308b\u3002\u4eca\u65e5\u306f\u3001PSVM\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3002\u305d\u306e\u4ed6\u3001\u6298\u89d2\u306a\u306e\u3067\u3001\u30af\u30e9\u30b9\u5316\u3057\u3066\u304a\u304f\u3002\n\u3061\u306a\u307f\u306bPSVM\u3068\u306f\u3001\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3\u3092processing\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308bjava\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u3059\u3002\u672b\u5c3e\u306e\u30ea\u30f3\u30af\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nPSVM\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u306f\u4ee5\u4e0b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\nlogback-classic-0.9.30.jar\nlogback-core-0.9.30.jar\nslf4j-api-1.6.3.jar \n\n\u4e0a\u8a18\u306e\u306e3\u3064\u306f\u30ed\u30b0\u7528\u306b\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u304b\u3089\u53d6\u5f97\u3067\u304d\u307e\u3059\u304c\u3001\u9762\u5012\u306a\u3089\u3001\u30b3\u30fc\u30c9\u306e\u4e2d\u306elogger.error()\u3068\u3044\u3046\u95a2\u6570\u3092System.err.println()\u306b\u7f6e\u304d\u63db\u3048\u308c\u3070\u4f7f\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\nhttp://logback.qos.ch/download.html\nhttp://www.slf4j.org/download.html\n\n\u3055\u3066\u3001\u672c\u984c\u3002\n\nSVMComponent.java\nimport psvm.*;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.Arrays;\n\nimport java.lang.Class;\nimport java.lang.reflect.Field;\n\nimport processing.data.Table;\nimport processing.data.TableRow;\nimport processing.core.PApplet;\n\nimport java.io.File;\n\nclass SVMComponent {\n    protected static Logger logger = LoggerFactory.getLogger(SVMComponent.class);\n\n    protected PApplet applet = null;\n    protected String labelColumnName = null;\n    // protected List rows = null;\n\n    public int [] labels = null;\n    public float [][] trainingPoints = null;\n\n    public SVM model = null;\n    public SVMProblem problem = null;\n\n    public SVMComponent (PApplet applet) {\n        this.applet = applet;\n        model = new SVM(applet);\n        problem = new SVMProblem();\n    }\n\n    public boolean save (String modelPath) {\n        try {\n            this.model.saveModel(modelPath);\n            return true;\n        } catch (Exception e) {\n            logger.error(\"Error: {}\", e);\n            return false;\n        }\n    }\n\n    public boolean load (String modelPath, int columnNumber) {\n        try {\n            this.model.loadModel(modelPath, columnNumber);\n            return true;\n        } catch (Exception e) {\n            logger.error(\"Error: {}\", e);\n            return false;\n        }\n    }\n\n\n    public boolean importDataFromFile (String filepath, int labelIndex) {\n        try {\n            Table data = new Table(new File(filepath));\n            int featureNum = data.getColumnCount() - 1;\n            this.trainingPoints = new float[data.getRowCount()][featureNum];\n            this.labels = new int[data.getRowCount()];\n\n            float [] maximums = new float [featureNum]; // for normalization\n            float [] minimums = new float [featureNum]; // for normalization\n            for (int i = 0; i < featureNum; i++) minimums[i] = Float.MAX_VALUE;\n\n            int i = 0;\n            for (TableRow row : data.rows()) {\n                float[] p = new float[featureNum];\n                boolean aboveLabel = false;\n                for (int j = 0; j < data.getColumnCount(); j++) {\n                    if (j == labelIndex) {\n                        labels[i] = row.getInt(j);\n                        aboveLabel = true;\n                        continue;\n                    }\n                    int index = aboveLabel ? j - 1: j;\n                    float value = row.getFloat(index);\n                    //logger.error(\"index: {}\", index);\n\n                    if (value > maximums[index]) maximums[index] = value;\n                    if (value < minimums[index]) minimums[index] = value;\n                    p[index] = value;\n\n                }\n\n                this.trainingPoints[i] = p;\n                i++;\n            }\n\n            // normalization\n            for (i = 0; i < data.getRowCount(); i++) {\n                for (int j = 0; j < data.getColumnCount(); j++) {\n                    double range = maximums[j] - minimums[j];\n                    logger.debug(\"data range is {}\", range);\n\n                    this.trainingPoints[i][j] -= minimums[j];\n                    this.trainingPoints[i][j] /= maximums[j] - minimums[j];\n                }\n            }           \n\n            this.problem.setNumFeatures(featureNum);\n            return true;\n        } catch (Exception e) {\n            logger.error (\"Error: {}\", e);\n            return false;\n        }\n    } \n\n    public boolean importDataFromFile (String filepath, int labelIndex, double dataRange) {\n        try {\n            Table data = new Table(new File(filepath));\n            int featureNum = data.getColumnCount() - 1;\n            this.trainingPoints = new float[data.getRowCount()][featureNum];\n            this.labels = new int[data.getRowCount()];\n\n            logger.debug(\"Data details:\");\n            logger.debug(\"  Num of columns: {}\", featureNum);\n            logger.debug(\"  Num of training points: {}\", data.getRowCount());\n\n            float [] maximums = new float [featureNum]; // for normalization\n            float [] minimums = new float [featureNum]; // for normalization\n            for (int i = 0; i < featureNum; i++) minimums[i] = Float.MAX_VALUE;\n\n            int i = 0;\n            for (TableRow row : data.rows()) {\n                float[] p = new float[featureNum];\n                boolean aboveLabel = false;\n                for (int j = 0; j < data.getColumnCount(); j++) {\n                    if (j == labelIndex) {\n                        labels[i] = row.getInt(j);\n                        aboveLabel = true;\n                        continue;\n                    }\n                    int index = aboveLabel ? j - 1: j;\n                    float value = row.getFloat(index);\n                    if (value > maximums[index]) maximums[index] = value;\n                    if (value < minimums[index]) minimums[index] = value;\n                    p[index] = value;\n\n                }\n\n                this.trainingPoints[i] = p;\n                i++;\n            }\n\n            // normalization\n            for (i = 0; i < data.getRowCount(); i++) {\n                for (int j = 0; j < data.getColumnCount() - 1; j++) {\n                    this.trainingPoints[i][j] /= dataRange;\n                }\n            }\n\n\n\n            this.problem.setNumFeatures(featureNum);\n            return true;\n        } catch (Exception e) {\n            logger.error (\"Error: {}\", e);\n            return false;\n        }\n    } \n\n    public boolean train () {\n        try {\n            problem.setSampleData(this.labels, this.trainingPoints);\n            this.model.train(problem);\n            return true;\n        } catch (Exception e) {\n            logger.error(\"Error: {}\", e.getMessage());\n            return false;\n        }\n    }\n\n    public int test (double [] testSet) {\n        try {\n            return (int)this.model.test(testSet);\n        } catch (Exception e) {\n            logger.error(\"Error: {}\", e);\n            return -1;\n        }\n    }\n\n}\n\n\nprocessing\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3001\n\nSVMApp.pde\nPGraphics modelDisplay = null;\nboolean showModel = false;\nSVMComponent svm = null;\n\nvoid setup () {\n    size(500,500);\n\n    // displaying the model is very slow, so we'll\n    // do it in a PGraphics so we only have to do it once\n    modelDisplay = createGraphics(500,500); \n\n    svm = new SVMComponent(this);\n    svm.importDataFromFile(sketchPath + \"/points.csv\", 2, 500);\n\n    File f = new File (sketchPath + \"/trained.txt\");\n    if (f.exists()) {\n        svm.load(sketchPath + \"/trained.txt\", 2);\n    } else {\n        svm.train();\n        svm.save(sketchPath + \"/trained.txt\");\n    }\n\n    drawModel();\n}\n\n\nvoid draw(){\n    // show our model background if we want\n    if (showModel) {\n        image(modelDisplay, 0, 0);\n    } else {\n        background(255);\n    }\n\n    stroke(255);\n\n    // show all of the training points\n    // in the right color based on their labels\n    for(int i = 0; i < svm.trainingPoints.length; i++){\n        //println(\"svm.label: \" + Integer.toString(svm.labels[i]));\n            if(svm.labels[i] == 1){\n            fill(255,0,0);\n        } else if(svm.labels[i] == 2){\n            fill(0,255,0);\n        } else if(svm.labels[i] == 3){\n            fill(0,0,255);\n        }\n\n        //println (String.format(\"(%.2f, %.2f)\", svm.trainingPoints[i][0] * 500, svm.trainingPoints[i][1] * 500));\n        ellipse(\n            svm.trainingPoints[i][0] * 500, \n            svm.trainingPoints[i][1] * 500, \n            5, \n            5\n            );\n    }\n}\n\nvoid keyPressed(){\n    if(key == ' '){\n        showModel = !showModel;\n    }\n    // save out the model file for use\n    // in future classification\n    if(key == 's'){\n        svm.save(sketchPath + \"/model.txt\");\n    }\n}\n\n// on mouse click, for any given point\n// test it against the model and print the result set\nvoid mousePressed () {\n    double[] p = new double[2];\n    p[0] = (double)mouseX / width;\n    p[1] = (double)mouseY / height;\n    println((int)svm.test(p));\n}\n\n// this function colors in each pixel of the sketch\n// based on what result the model predicts for that x-y value\n// it saves the results in a PGraphics object\n// so that it can be displayed everytime beneath the data\nvoid drawModel(){\n    // start drawing into the PGraphics instead of the sketch\n    modelDisplay.beginDraw();\n    // for each row\n    for(int x = 0; x < width; x++){\n        // and each column\n        for(int y = 0; y < height; y++){\n\n            // make a 2-element array with the x and y values\n            double[] testPoint = new double[2];\n            testPoint[0] = (double)x / width;\n            testPoint[1] = (double)y / height;\n\n            // pass it to the model for testing\n            double d = svm.test(testPoint);\n\n            // based on the result, draw a red, green, or blue dot\n            if((int)d == 1){\n                modelDisplay.stroke(255,0,0);\n            } else if ((int)d == 2){\n                modelDisplay.stroke(0, 255 ,0);\n            } else if ((int)d == 3){\n                modelDisplay.stroke(0, 0, 255);\n            }\n\n            // which will fill up the entire area of the sketch\n            modelDisplay.point(x,y);\n\n        }\n    }\n    // we're done with the PGraphics\n    modelDisplay.endDraw();\n}\n\n\n\nprocessing.core.Table\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306a\u3069\u306e\u4ed5\u69d8\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f\u3002\n\n\u4eca\u5f8c\u306e\u8ab2\u984c\n\u30b5\u30f3\u30d7\u30eb\u306b\u7fd2\u3063\u3066\u3001GUI\u3082\u7528\u610f\u3057\u3088\u3046\u3068\u601d\u3046\u3002\n\n\u53c2\u8003URL\n\nhttp://makematics.com/code/psvm/\n\n\n## \u306f\u3058\u3081\u306b\n\nProcessing\u305d\u306e\u3082\u306e\u306e\u958b\u767a\u30b9\u30d4\u30fc\u30c9\u304c\u65e9\u3059\u304e\u3066api\u304c\u5909\u5316\u3057\u3001\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u52d5\u304b\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u30b1\u30fc\u30b9\u3092\u3088\u304f\u898b\u304b\u3051\u308b\u3002\u305d\u3093\u306a\u30b1\u30fc\u30b9\u3092\u898b\u304b\u3051\u305f\u3089\u3001\u5fae\u4fee\u6b63\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u3055\u3089\u3059\u3053\u3068\u306b\u3059\u308b\u3002\u4eca\u65e5\u306f\u3001PSVM\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3002\u305d\u306e\u4ed6\u3001\u6298\u89d2\u306a\u306e\u3067\u3001\u30af\u30e9\u30b9\u5316\u3057\u3066\u304a\u304f\u3002\n\n\u3061\u306a\u307f\u306bPSVM\u3068\u306f\u3001\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3\u3092processing\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308bjava\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u3059\u3002\u672b\u5c3e\u306e\u30ea\u30f3\u30af\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## PSVM\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u306f\u4ee5\u4e0b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n* logback-classic-0.9.30.jar\n* logback-core-0.9.30.jar\n* slf4j-api-1.6.3.jar \n\n\u4e0a\u8a18\u306e\u306e3\u3064\u306f\u30ed\u30b0\u7528\u306b\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u304b\u3089\u53d6\u5f97\u3067\u304d\u307e\u3059\u304c\u3001\u9762\u5012\u306a\u3089\u3001\u30b3\u30fc\u30c9\u306e\u4e2d\u306elogger.error()\u3068\u3044\u3046\u95a2\u6570\u3092System.err.println()\u306b\u7f6e\u304d\u63db\u3048\u308c\u3070\u4f7f\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n* http://logback.qos.ch/download.html\n* http://www.slf4j.org/download.html\n\n\u3055\u3066\u3001\u672c\u984c\u3002\n\n```SVMComponent.java\nimport psvm.*;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.Arrays;\n\nimport java.lang.Class;\nimport java.lang.reflect.Field;\n\nimport processing.data.Table;\nimport processing.data.TableRow;\nimport processing.core.PApplet;\n\nimport java.io.File;\n\nclass SVMComponent {\n\tprotected static Logger logger = LoggerFactory.getLogger(SVMComponent.class);\n\n\tprotected PApplet applet = null;\n\tprotected String labelColumnName = null;\n\t// protected List rows = null;\n\n\tpublic int [] labels = null;\n\tpublic float [][] trainingPoints = null;\n\n\tpublic SVM model = null;\n\tpublic SVMProblem problem = null;\n\n\tpublic SVMComponent (PApplet applet) {\n\t\tthis.applet = applet;\n\t\tmodel = new SVM(applet);\n\t\tproblem = new SVMProblem();\n\t}\n\n\tpublic boolean save (String modelPath) {\n\t\ttry {\n\t\t\tthis.model.saveModel(modelPath);\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error: {}\", e);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic boolean load (String modelPath, int columnNumber) {\n\t\ttry {\n\t\t\tthis.model.loadModel(modelPath, columnNumber);\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error: {}\", e);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\n\tpublic boolean importDataFromFile (String filepath, int labelIndex) {\n\t\ttry {\n\t\t\tTable data = new Table(new File(filepath));\n  \t\t\tint featureNum = data.getColumnCount() - 1;\n\t\t\tthis.trainingPoints = new float[data.getRowCount()][featureNum];\n\t\t\tthis.labels = new int[data.getRowCount()];\n\t\t\t\n\t\t\tfloat [] maximums = new float [featureNum]; // for normalization\n\t\t\tfloat [] minimums = new float [featureNum]; // for normalization\n\t\t\tfor (int i = 0; i < featureNum; i++) minimums[i] = Float.MAX_VALUE;\n\n\t\t\tint i = 0;\n\t\t\tfor (TableRow row : data.rows()) {\n\t\t\t\tfloat[] p = new float[featureNum];\n\t\t\t\tboolean aboveLabel = false;\n\t\t\t\tfor (int j = 0; j < data.getColumnCount(); j++) {\n\t\t\t\t\tif (j == labelIndex) {\n\t\t\t\t\t\tlabels[i] = row.getInt(j);\n\t\t\t\t\t\taboveLabel = true;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tint index = aboveLabel ? j - 1: j;\n\t\t\t\t\tfloat value = row.getFloat(index);\n\t\t\t\t\t//logger.error(\"index: {}\", index);\n\t\t\t\t\t\n\t\t\t\t\tif (value > maximums[index]) maximums[index] = value;\n\t\t\t\t\tif (value < minimums[index]) minimums[index] = value;\n\t\t\t\t\tp[index] = value;\n\n\t\t\t\t}\n\n\t\t\t    this.trainingPoints[i] = p;\n\t\t\t    i++;\n\t\t\t}\n\n\t\t\t// normalization\n\t\t\tfor (i = 0; i < data.getRowCount(); i++) {\n\t\t\t\tfor (int j = 0; j < data.getColumnCount(); j++) {\n\t\t\t\t\tdouble range = maximums[j] - minimums[j];\n\t\t\t\t\tlogger.debug(\"data range is {}\", range);\n\n\t\t\t\t\tthis.trainingPoints[i][j] -= minimums[j];\n\t\t\t\t\tthis.trainingPoints[i][j] /= maximums[j] - minimums[j];\n\t\t\t\t}\n\t\t\t}\t\t\t\n\n\t\t\tthis.problem.setNumFeatures(featureNum);\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\tlogger.error (\"Error: {}\", e);\n\t\t\treturn false;\n\t\t}\n\t} \n\n\tpublic boolean importDataFromFile (String filepath, int labelIndex, double dataRange) {\n\t\ttry {\n\t\t\tTable data = new Table(new File(filepath));\n  \t\t\tint featureNum = data.getColumnCount() - 1;\n\t\t\tthis.trainingPoints = new float[data.getRowCount()][featureNum];\n\t\t\tthis.labels = new int[data.getRowCount()];\n\t\t\t\n\t\t\tlogger.debug(\"Data details:\");\n\t\t\tlogger.debug(\"  Num of columns: {}\", featureNum);\n\t\t\tlogger.debug(\"  Num of training points: {}\", data.getRowCount());\n\n\t\t\tfloat [] maximums = new float [featureNum]; // for normalization\n\t\t\tfloat [] minimums = new float [featureNum]; // for normalization\n\t\t\tfor (int i = 0; i < featureNum; i++) minimums[i] = Float.MAX_VALUE;\n\n\t\t\tint i = 0;\n\t\t\tfor (TableRow row : data.rows()) {\n\t\t\t\tfloat[] p = new float[featureNum];\n\t\t\t\tboolean aboveLabel = false;\n\t\t\t\tfor (int j = 0; j < data.getColumnCount(); j++) {\n\t\t\t\t\tif (j == labelIndex) {\n\t\t\t\t\t\tlabels[i] = row.getInt(j);\n\t\t\t\t\t\taboveLabel = true;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tint index = aboveLabel ? j - 1: j;\n\t\t\t\t\tfloat value = row.getFloat(index);\n\t\t\t\t\tif (value > maximums[index]) maximums[index] = value;\n\t\t\t\t\tif (value < minimums[index]) minimums[index] = value;\n\t\t\t\t\tp[index] = value;\n\n\t\t\t\t}\n\n\t\t\t    this.trainingPoints[i] = p;\n\t\t\t    i++;\n\t\t\t}\n\n\t\t\t// normalization\n\t\t\tfor (i = 0; i < data.getRowCount(); i++) {\n\t\t\t\tfor (int j = 0; j < data.getColumnCount() - 1; j++) {\n\t\t\t\t\tthis.trainingPoints[i][j] /= dataRange;\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\tthis.problem.setNumFeatures(featureNum);\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\tlogger.error (\"Error: {}\", e);\n\t\t\treturn false;\n\t\t}\n\t} \n\n\tpublic boolean train () {\n\t\ttry {\n\t\t\tproblem.setSampleData(this.labels, this.trainingPoints);\n\t\t\tthis.model.train(problem);\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error: {}\", e.getMessage());\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic int test (double [] testSet) {\n\t\ttry {\n\t\t\treturn (int)this.model.test(testSet);\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error: {}\", e);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n}\n```\n\nprocessing\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3001\n\n```SVMApp.pde\nPGraphics modelDisplay = null;\nboolean showModel = false;\nSVMComponent svm = null;\n\nvoid setup () {\n\tsize(500,500);\n  \n\t// displaying the model is very slow, so we'll\n\t// do it in a PGraphics so we only have to do it once\n\tmodelDisplay = createGraphics(500,500);\t\n\n\tsvm = new SVMComponent(this);\n\tsvm.importDataFromFile(sketchPath + \"/points.csv\", 2, 500);\n\n\tFile f = new File (sketchPath + \"/trained.txt\");\n\tif (f.exists()) {\n\t\tsvm.load(sketchPath + \"/trained.txt\", 2);\n\t} else {\n\t\tsvm.train();\n\t\tsvm.save(sketchPath + \"/trained.txt\");\n\t}\n\n\tdrawModel();\n}\n\n\nvoid draw(){\n\t// show our model background if we want\n\tif (showModel) {\n\t    image(modelDisplay, 0, 0);\n\t} else {\n\t    background(255);\n\t}\n\t  \n\tstroke(255);\n\t  \n\t// show all of the training points\n\t// in the right color based on their labels\n\tfor(int i = 0; i < svm.trainingPoints.length; i++){\n\t    //println(\"svm.label: \" + Integer.toString(svm.labels[i]));\n            if(svm.labels[i] == 1){\n\t    \tfill(255,0,0);\n\t    } else if(svm.labels[i] == 2){\n\t    \tfill(0,255,0);\n\t    } else if(svm.labels[i] == 3){\n\t    \tfill(0,0,255);\n\t    }\n\t    \n\t    //println (String.format(\"(%.2f, %.2f)\", svm.trainingPoints[i][0] * 500, svm.trainingPoints[i][1] * 500));\n        ellipse(\n\t    \tsvm.trainingPoints[i][0] * 500, \n\t    \tsvm.trainingPoints[i][1] * 500, \n\t    \t5, \n\t    \t5\n\t    \t);\n\t}\n}\n\nvoid keyPressed(){\n\tif(key == ' '){\n\t    showModel = !showModel;\n\t}\n\t// save out the model file for use\n\t// in future classification\n\tif(key == 's'){\n\t    svm.save(sketchPath + \"/model.txt\");\n\t}\n}\n\n// on mouse click, for any given point\n// test it against the model and print the result set\nvoid mousePressed () {\n\tdouble[] p = new double[2];\n\tp[0] = (double)mouseX / width;\n\tp[1] = (double)mouseY / height;\n\tprintln((int)svm.test(p));\n}\n\n// this function colors in each pixel of the sketch\n// based on what result the model predicts for that x-y value\n// it saves the results in a PGraphics object\n// so that it can be displayed everytime beneath the data\nvoid drawModel(){\n\t// start drawing into the PGraphics instead of the sketch\n\tmodelDisplay.beginDraw();\n\t// for each row\n\tfor(int x = 0; x < width; x++){\n\t    // and each column\n\t    for(int y = 0; y < height; y++){\n\t      \n\t\t    // make a 2-element array with the x and y values\n\t\t    double[] testPoint = new double[2];\n\t\t    testPoint[0] = (double)x / width;\n\t\t    testPoint[1] = (double)y / height;\n\t\t      \n\t\t    // pass it to the model for testing\n\t\t    double d = svm.test(testPoint);\n\t\t      \n\t\t    // based on the result, draw a red, green, or blue dot\n\t\t    if((int)d == 1){\n\t\t        modelDisplay.stroke(255,0,0);\n\t\t    } else if ((int)d == 2){\n\t\t        modelDisplay.stroke(0, 255 ,0);\n\t\t    } else if ((int)d == 3){\n\t\t        modelDisplay.stroke(0, 0, 255);\n\t\t    }\n\t\t    \n\t\t    // which will fill up the entire area of the sketch\n\t\t    modelDisplay.point(x,y);\n\t  \n\t    }\n\t}\n\t// we're done with the PGraphics\n\tmodelDisplay.endDraw();\n}\n\n```\nprocessing.core.Table\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306a\u3069\u306e\u4ed5\u69d8\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f\u3002\n\n## \u4eca\u5f8c\u306e\u8ab2\u984c\n\n\u30b5\u30f3\u30d7\u30eb\u306b\u7fd2\u3063\u3066\u3001GUI\u3082\u7528\u610f\u3057\u3088\u3046\u3068\u601d\u3046\u3002\n\n## \u53c2\u8003URL\n\n* http://makematics.com/code/psvm/\n", "tags": ["svm", "processing", "psvm"]}