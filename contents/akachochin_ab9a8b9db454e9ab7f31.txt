{"context": " More than 1 year has passed since last update.\n\n\u524d\u56de\u306e\u304a\u3055\u3089\u3044\n\u524d\u56de\u306ffreezing\u306e\u5b9f\u88c5\u3092\u898b\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u300c\u30b7\u30b0\u30ca\u30eb\u3092\u9001\u51fa\u3057\u3066\u3044\u306a\u3044\u306e\u306b\u30b7\u30b0\u30ca\u30eb\u3092\u9001\u51fa\u3057\u305f\u300d\u65e8\u306e\u30d5\u30e9\u30b0\u3092\u30bf\u30b9\u30af\u69cb\u9020\u4f53\u306b\u7acb\u3066\u3066\u3001\u30b9\u30ec\u30c3\u30c9\u3092\u8d77\u3053\u3059\u3060\u3051\u306e\u3088\u3046\u306b\u898b\u3048\u307e\u3057\u305f\u3002\n\u899a\u3048\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u304b\u3002\n\nkernel/signal.c\nvoid signal_wake_up_state(struct task_struct *t, unsigned int state)\n{\n    set_tsk_thread_flag(t, TIF_SIGPENDING);\n\n\n\u3044\u3063\u305f\u3044\u8ab0\u304c\u30b9\u30ec\u30c3\u30c9\u3092freeze\u72b6\u614b\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\u5b9f\u306ffreezing\u72b6\u614b\u306b\u3059\u308b\u30eb\u30fc\u30c8\u306f\u8907\u6570\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u6587\u66f8\u3067\u306f\u4ee3\u8868\u7684\u3068\u601d\u308f\u308c\u308b2\u3064\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u305d\u306e\u3046\u3061\u306e\u4e00\u3064\u306b\u306f\u3001\u30b7\u30b0\u30ca\u30eb\u51e6\u7406\u304c\u5927\u304d\u304f\u95a2\u4fc2\u3057\u3066\u3044\u307e\u3059\u3002\u306a\u306e\u3067\u3001freezing\u51e6\u7406\u3068\u3068\u3082\u306b\u3001Linux\u306e\u30b7\u30b0\u30ca\u30eb\u53d7\u4fe1\u51e6\u7406\u306e\u4e00\u90e8\u3082\u3042\u308f\u305b\u3066\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u3067\u3001\u8ab0\u304c\u30b9\u30ec\u30c3\u30c9\u3092freeze\u72b6\u614b\u306b\u3057\u3066\u3044\u308b\u306e\uff1f\n\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u524d\u56defrozen()\u3068\u3044\u3046\u95a2\u6570\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\n\u305d\u3053\u3067\u306fp->flags\u306bPF_FROZEN\u304c\u7acb\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u898b\u3066\u3044\u307e\u3059\u3002\n\u306a\u3089\u3001\u3053\u306e\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u3066\u3044\u308b\u7b87\u6240\u3092\u691c\u7d22\u3057\u3066\u3042\u305f\u308a\u3092\u3064\u3051\u308c\u3070\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\u691c\u7d22\u3059\u308b\u3068\u3001\u3053\u306e\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u3066\u3044\u308b\u306e\u306f\u305f\u3063\u305f\u4e00\u7b87\u6240\u3067\u3059\u3002\nkernel/freezer.c:               current->flags |= PF_FROZEN;\n\n\u65e9\u901f\u5b9f\u88c5\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\u4e00\u8a00\u3067\u8a00\u3046\u3068\u300c\u5b9f\u884c\u72b6\u614b\u306e\u30b9\u30ec\u30c3\u30c9\u306bPF_FROZEN\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u305f\u4e0a\u3067\u3001\u81ea\u5206\u4ee5\u5916\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u5b9f\u884c\u6a29\u3092\u8b72\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306b\u518d\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u3092\u4f9d\u983c\u3059\u308b\u300d\u3068\u3044\u3046\u3068\u3053\u308d\u3067\u3059\u3002\n\nkernel/freezer.c\n/* Refrigerator is place where frozen processes are stored :-). */\nbool __refrigerator(bool check_kthr_stop)\n{\n/* \u7565 */\n\n    for (;;) {\n        set_current_state(TASK_UNINTERRUPTIBLE);\n\n        spin_lock_irq(&freezer_lock);\n        current->flags |= PF_FROZEN;\n        if (!freezing(current) ||\n            (check_kthr_stop && kthread_should_stop()))\n            current->flags &= ~PF_FROZEN;\n        spin_unlock_irq(&freezer_lock);\n\n        if (!(current->flags & PF_FROZEN))\n            break;\n        was_frozen = true;\n        schedule();\n    }\n\n/* \u7565 */\n\n    return was_frozen;\n}\nEXPORT_SYMBOL(__refrigerator);\n\n\n\u51b7\u8535\u5eab(refrigerator)\u3068\u306f\u3001\u306a\u3093\u3068\u3082\u6d12\u843d\u305f\u540d\u524d\u3067\u3059\u3002\n__refrigerator()\u306e\u547c\u3073\u51fa\u3057\u7b87\u6240\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\ninclude/linux/freezer.h:        return __refrigerator(false);\nkernel/kthread.c:               frozen = __refrigerator(true);\n\n\u4eca\u56de\u306f\u30e6\u30fc\u30b6\u30b9\u30ec\u30c3\u30c9\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u306e\u3067\u3001kthread.c\u306f\u7121\u8996\u3057\u3066include/linux/freezer.h\u3092\u898b\u307e\u3059\u3002\n\u306a\u304a\u3001\u4ee5\u4e0b\u30bd\u30fc\u30b9\u3092\u898b\u308b\u3068\u308f\u304b\u308a\u307e\u3059\u304c\u3001try_to_freeze_unsafe()\u306f\u547c\u3073\u51fa\u3057\u6642\u306bfreezing(current)\u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u623b\u308a\u5024\u304ctrue\u306e\u3068\u304d\u306b\u306e\u307f__refrigerator()\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nfreezing()\u306f\u300c\u30b7\u30b9\u30c6\u30e0\u306b\u5bfe\u3057\u3066freeze\u8981\u6c42\u304c\u3042\u3063\u305f\u304b\u3069\u3046\u304b\u300d\u3092\u898b\u3066\u3044\u307e\u3059\u3002\n\u8a73\u7d30\u306f\u3001\u524d\u56de\u629c\u7c8b\u3057\u305ffreezing()\u306e\u5b9f\u88c5\u304a\u3088\u3073Documentation\u8981\u7d04\u5185\u306esystem_freezing_cnt\u306b\u95a2\u3059\u308b\u8aac\u660e\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\ninclude/linux/freezer.h\nstatic inline bool try_to_freeze_unsafe(void)\n{\n    might_sleep();\n    if (likely(!freezing(current)))\n        return false;\n    return __refrigerator(false);\n}\n\nstatic inline bool try_to_freeze(void)\n{\n    if (!(current->flags & PF_NOFREEZE))\n        debug_check_no_locks_held();\n    return try_to_freeze_unsafe();\n}\n\n/* \u7565 */\n\n/* DO NOT ADD ANY NEW CALLERS OF THIS FUNCTION */\nstatic inline void freezer_count_unsafe(void)\n{\n    current->flags &= ~PF_FREEZER_SKIP;\n    smp_mb();\n    try_to_freeze_unsafe();\n}\n\n\n\u5b9f\u306f\u3001try_to_freeze_unsafe()\u306e\u547c\u3073\u51fa\u3057\u5143\u306f\u4e0a\u8a18\u30d8\u30c3\u30c0\u306b\u3042\u308b2\u3064\u306e\u95a2\u6570try_to_freeze()\u3068freezer_count_unsafe()\u3067\u3059\u3002\n\u30b3\u30e1\u30f3\u30c8\u304b\u3089\u3001freezer_count_unsafe()\u306f\u7279\u6b8a\u306a\u7528\u9014\u304c\u60f3\u5b9a\u3055\u308c\u307e\u3059\u306e\u3067\u3001\u4e00\u822c\u30b1\u30fc\u30b9\u3067\u3042\u308d\u3046try_to_freeze()\u306e\u547c\u3073\u51fa\u3057\u5143\u3092\u898b\u307e\u3059\u3002\n\u691c\u7d22\u3092\u304b\u3051\u308b\u3068\u3001try_to_freeze()\u306f\u30ab\u30fc\u30cd\u30eb\u306e\u8907\u6570\u7b87\u6240\u3067\u547c\u3070\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u305f\u3060\u3001\u5927\u4e8b\u306a\u306e\u306f\u3053\u308c\u304b\u3089\u7d39\u4ecb\u3059\u308b\u4e8c\u7b87\u6240\u3067\u306f\u306a\u3044\u304b\u306a\u3001\u3068\u8003\u3048\u307e\u3059\u3002\u305d\u308c\u3089\u3092\u4ee5\u964d\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\ntry_to_freeze()\u547c\u3073\u51fa\u3057\u5143\u305d\u306e1\n\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3001__wait_event_freezable()\u3067\u3059\u3002\n\ninclude/linux/wait.h\n#define ___wait_event(wq, condition, state, exclusive, ret, cmd)    \\\n    for (;;) {\n        if (condition)                      \\\n            break;\n        cmd;                            \\\n    }                               \\\n    finish_wait(&wq, &__wait);                  \\\n__out:  __ret;                              \\\n})\n#define __wait_event_freezable(wq, condition)               \\\n    ___wait_event(wq, condition, TASK_INTERRUPTIBLE, 0, 0,      \\\n                schedule(); try_to_freeze())\n\n\nLinux\u30ab\u30fc\u30cd\u30eb\u3067\u30a4\u30d9\u30f3\u30c8\u5f85\u3061(wait - wakeup)\u3092\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3067wait_event()\u304c\u3042\u308b\u3053\u3068\u306f\u3054\u5b58\u77e5\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u306e\u4e9c\u7a2e\u3067wait_event_freezable()\u3068\u3044\u3046\u306e\u304c\u3042\u308a\u307e\u3059\u3002wait_event_freezable()\u306f__wait_event_freezable()\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u5b9f\u88c5\u3067\u306f\u3001\u30a4\u30d9\u30f3\u30c8\u5f85\u3061\u3092\u884c\u3044\u3001\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u6761\u4ef6\u304c\u6210\u7acb\u3057\u305f\u3068\u304d\u306btry_to_freeze\u3092\u547c\u3076\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u518d\u5ea6\u601d\u3044\u51fa\u3057\u3066\u6b32\u3057\u3044\u306e\u304c\u3001__refrigerator()\u306e\u5b9f\u88c5\u304c\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002\n\nkernel/freezer.c\n    for (;;) {\n/* \u7565 */\n        current->flags |= PF_FROZEN;\n/* \u7565 */\n        if (!(current->flags & PF_FROZEN))\n            break;\n        was_frozen = true;\n        schedule();\n    }\n\n\n\u3064\u307e\u308a\u3001\u81ea\u3089\u3092PF_FROZEN\u72b6\u614b\u306b\u3057\u3066\u3001PF_FROZEN\u72b6\u614b\u304c\u89e3\u9664\u3055\u308c\u308b\u307e\u3067schedule()\u3092\u547c\u3073\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u518d\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u304c\u884c\u308f\u308c\u307e\u3059\u306e\u3067\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u5b9f\u884c\u6a29\u3092\u6e21\u3059\u304b\u3001\u5b9f\u884c\u6a29\u3092\u6301\u3063\u305f\u307e\u307e\u30eb\u30fc\u30d7\u3057\u307e\u3059(\u305d\u3057\u3066\u3044\u3064\u304b\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u5b9f\u884c\u6a29\u3092\u8b72\u308b)\u3002\n\u78ba\u304b\u306b\u3001\u660e\u793a\u7684\u306b\u300cfreezing\u306e\u3068\u304d\u306b\u306f\u5f85\u3063\u3066\u3082\u826f\u3044\u300d\u3068\u4e3b\u5f35\u3059\u308b\u3053\u306e\u30b1\u30fc\u30b9\u3067\u306f\u30b9\u30ec\u30c3\u30c9\u304c\"freezing\"\u3057\u307e\u3059\u3002\n\ntry_to_freeze()\u547c\u3073\u51fa\u3057\u5143\u305d\u306e2\ntry_to_freeze\u306fget_signal()\u3067\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n\u305f\u3060\u3001\u3044\u304d\u306a\u308aget_signal()\u3092\u898b\u3066\u3082\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001Linux\u306e\u30b7\u30b0\u30ca\u30eb\u51e6\u7406\u306e\u524d\u534a\u90e8\u5206\u3092\u898b\u306a\u304c\u3089get_signal()\u306b\u5230\u9054\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u30b7\u30b0\u30ca\u30eb\u51e6\u7406\u306b\u3064\u3044\u3066\n\u30b7\u30b0\u30ca\u30eb\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001\u8a72\u5f53\u30bf\u30b9\u30af\u69cb\u9020\u4f53\u306e\u30d5\u30e9\u30b0\u306b\u306fTIF_SIGPENDING\u304c\u7acb\u3061\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u30b7\u30b0\u30ca\u30eb\u306f\u57fa\u672c\u7684\u306b\u5373\u6642\u51e6\u7406\u3055\u308c\u307e\u305b\u3093\u3002\n\u5b9f\u884c\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u3072\u3068\u3064\u306b\u3001\u300c\u5272\u308a\u8fbc\u307f\u3084\u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u3068\u304d\u300d\u3068\u3044\u3046\u306e\u304c\u3042\u308a\u307e\u3059\u3002\u5b9f\u306f\u5272\u308a\u8fbc\u307f\u51e6\u7406\u3084\u4f8b\u5916\u51e6\u7406\u7d42\u4e86\u76f4\u524d\u306b\u3001\u300c\u5b9f\u884c\u4e2d\u306e\u30bf\u30b9\u30af(\u30d7\u30ed\u30bb\u30b9)\u306b\u306f\u30da\u30f3\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u30b7\u30b0\u30ca\u30eb\u304c\u3042\u308b\u304b\u300d\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\u5224\u5b9a\u65b9\u6cd5\u306f\u3001\u8a72\u5f53\u30bf\u30b9\u30af\u69cb\u9020\u4f53\u306e\u30d5\u30e9\u30b0\u306bTIF_SIGPENDING\u304c\u7acb\u3063\u3066\u3044\u308b\u304b\u3092\u8abf\u3079\u308b\u3053\u3068\u3067\u3059\u3002\n\u3053\u3053\u307e\u3067\u3092\u62bc\u3055\u3048\u3066\u3001\u300c\u5272\u308a\u8fbc\u307f\u3084\u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u3068\u304d\u300d\u306b\u304a\u3051\u308b\u30b7\u30b0\u30ca\u30eb\u53d7\u4fe1\u51e6\u7406\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u3044\u304d\u306a\u308a\u30a2\u30bb\u30f3\u30d6\u30e9\u3060\u3051\u3069\n\u30e6\u30fc\u30b6\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u4e2d\u306b\u4f8b\u5916\u3084\u5272\u308a\u8fbc\u307f\u304c\u767a\u751f\u3059\u308b\u3068\u30ab\u30fc\u30cd\u30eb\u30e2\u30fc\u30c9\u306b\u9077\u79fb\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u51e6\u7406\u304c\u7d42\u308f\u308b\u3068\u305d\u306e\u5f8c\u30e6\u30fc\u30b6\u30e2\u30fc\u30c9\u306b\u623b\u308a\u307e\u3059\u3002x86\u306e\u5834\u5408\u3001\u3053\u306e\u623b\u308a\u51e6\u7406\u3092\u5b9f\u65bd\u3057\u3066\u3044\u308b\u306e\u304cresume_userspace()\u3067\u3059\u3002\n\narch/x86/kernel/entry_32.S\nENTRY(resume_userspace)\n    LOCKDEP_SYS_EXIT\n    DISABLE_INTERRUPTS(CLBR_ANY)    # make sure we don't miss an interrupt\n                    # setting need_resched or sigpending\n                    # between sampling and the iret\n    TRACE_IRQS_OFF\n    movl TI_flags(%ebp), %ecx\n\n    # \u8ffd\u52a0\u30b3\u30e1\u30f3\u30c8\n    # \u5272\u308a\u8fbc\u307f\u3084\u4f8b\u5916\u7d42\u4e86\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u5b9f\u65bd\u3059\u3079\u304d\u3053\u3068\u304c\u3042\u308c\u3070\u5b9f\u65bd\u3059\u308b\u3002\n    # \u5b9f\u65bd\u306fwork_pending\u30e9\u30d9\u30eb\u3078\u306e\u30b8\u30e3\u30f3\u30d7\u3067\u884c\u3046\u3002\n    andl $_TIF_WORK_MASK, %ecx  # is there any work to be done on\n                    # int/exception return?\n    jne work_pending\n    jmp restore_all\nEND(ret_from_exception)\n\n\n\u8ffd\u52a0\u30b3\u30e1\u30f3\u30c8\u306e\u3068\u304a\u308a\u3001\u5272\u308a\u8fbc\u307f\u3084\u4f8b\u5916\u7d42\u4e86\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u5b9f\u65bd\u3059\u3079\u304d\u3053\u3068\u304c\u3042\u308c\u3070work_pending\u51e6\u7406\u306b\u30b8\u30e3\u30f3\u30d7\u3057\u307e\u3059\u3002\n\u3053\u306e\u5224\u5b9a\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b_TIF_WORK_MASK\u306f\u4ee5\u4e0b\u306e\u5b9a\u7fa9\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\narch/x86/include/asm/thread_info.h\n#define _TIF_SIGPENDING     (1 << TIF_SIGPENDING)\n/* \u7565 */\n/* work to do on interrupt/exception return */\n#define _TIF_WORK_MASK                          \\\n    (0x0000FFFF &                           \\\n     ~(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT|           \\\n       _TIF_SINGLESTEP|_TIF_SECCOMP|_TIF_SYSCALL_EMU))\n\n\n_TIF_WORK_MASK\u306f\u3001\u30bf\u30b9\u30af\u69cb\u9020\u4f53\u306e\u30d5\u30e9\u30b0\u306e\u3046\u3061\u3001\u5272\u308a\u8fbc\u307f\u3084\u4f8b\u5916\u306e\u623b\u308a\u6642\u306b\u306a\u3059\u3079\u304d\u30a4\u30d9\u30f3\u30c8\u306b\u95a2\u3059\u308b\u3082\u306e\u304c\u7acb\u3063\u3066\u3044\u308b\u304b\u3092\u8abf\u3079\u308b\u305f\u3081\u306e\u30de\u30b9\u30af\u5024\u3067\u3059\u3002\n_TIF_SYSCALL_TRACE\u3001_TIF_SYSCALL_AUDIT\u3001_TIF_SINGLESTEP\u3001_TIF_SECCOMP\u3001_TIF_SYSCALL_EMU\u306e5\u3064\u4ee5\u5916\u304c\u5bfe\u8c61\u306e\u30a4\u30d9\u30f3\u30c8\u306b\u8a72\u5f53\u3057\u307e\u3059\u3002\n\u3088\u3063\u3066\u3001_TIF_SIGPENDING(\u30da\u30f3\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u30b7\u30b0\u30ca\u30eb\u304c\u3042\u308b)\u304c\u7acb\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u5272\u308a\u8fbc\u307f\u3084\u4f8b\u5916\u306e\u623b\u308a\u6642\u306b\u306a\u3059\u3079\u304d\u30a4\u30d9\u30f3\u30c8\u304c\u3042\u308b\u3068\u307f\u306a\u3057\u307e\u3059\u3002\u305d\u3057\u3066\u3001work_pending\u3078\u3068\u30b8\u30e3\u30f3\u30d7\u3057\u307e\u3059\u3002\nwork_pending\u306b\u30b8\u30e3\u30f3\u30d7\u3057\u305f\u3042\u3068\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bdo_notify_resume()\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\narch/x86/kernel/entry_32.S\n# \u7565\n## work_pending\u30e9\u30d9\u30eb\u306f\u3053\u3053\u3002\nwork_pending:\n# \u7565 \n    call do_notify_resume\n    jmp resume_userspace\n\n\ndo_notify_resume()\u304a\u3088\u3073\u305d\u3053\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308bdo_signal()\u306farch\u306e\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u3001x86\u306e\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\narch/x86/kernel/signal.c\nstatic void do_signal(struct pt_regs *regs)\n{\n    struct ksignal ksig;\n\n    if (get_signal(&ksig)) {\n        /* Whee! Actually deliver the signal.  */\n        handle_signal(&ksig, regs);\n        return;\n    }\n\n                                                  /*\n * notification of userspace execution resumption\n * - triggered by the TIF_WORK_MASK flags\n */\n__visible void\ndo_notify_resume(struct pt_regs *regs, void *unused, __u32 thread_info_flags)\n{\n    user_exit();\n\n    if (thread_info_flags & _TIF_UPROBE)\n        uprobe_notify_resume(regs);\n\n    /* deal with pending signal delivery */\n    if (thread_info_flags & _TIF_SIGPENDING)\n        do_signal(regs);\n\n\n\u3053\u3053\u3092\u898b\u308b\u3068\u308f\u304b\u308b\u3088\u3046\u306b\u3001_TIF_SIGPENDING\u304c\u7acb\u3063\u3066\u3044\u308b\u5834\u5408\u3001do_signal()\u304c\u547c\u3070\u308c\u3001\u305d\u3053\u304b\u3089\u3055\u3089\u306bget_signal()\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\nkernel/signal.c\nint get_signal(struct ksignal *ksig)\n{\n    struct sighand_struct *sighand = current->sighand;\n    struct signal_struct *signal = current->signal;\n    int signr;\n\n    if (unlikely(current->task_works))\n        task_work_run();\n\n    if (unlikely(uprobe_deny_signal()))\n        return 0;\n\n    /*   \n     * Do this once, we can't return to user-mode if freezing() == T.\n     * do_signal_stop() and ptrace_stop() do freezable_schedule() and\n     * thus do not need another check after return.\n     */\n    try_to_freeze();\n\n\n\u78ba\u304b\u306b\u547c\u3093\u3067\u3044\u307e\u3059\u3002\u660e\u793a\u7684\u306b\u300cfreezing\u306e\u3068\u304d\u306b\u306f\u5f85\u3063\u3066\u3082\u826f\u3044\u300d\u3068\u4e3b\u5f35\u3057\u306a\u3044\u5927\u90e8\u5206\u306e\u30b1\u30fc\u30b9\u3067\u3042\u3063\u3066\u3082\u3001\u30b7\u30b0\u30ca\u30eb\u53d7\u4fe1\u3068\u540c\u69d8\u306e\u4ed5\u7d44\u307f\u3067\u30b9\u30ec\u30c3\u30c9\u3092freezing\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u306a\u304b\u306a\u304b\u9762\u767d\u3044\u4ed5\u7d44\u307f\u3067\u3059\u3002\n\n\u6b21\u56de\u306f\n\u5c11\u3057\u8003\u3048\u3055\u305b\u3066\u304f\u3060\u3055\u3044\u3002\u8aad\u3093\u3067\u307f\u305f\u3044\u3068\u3053\u308d\u304c\u3044\u308d\u3044\u308d\u3042\u308b\u306e\u3067\u30fb\u30fb\u30fb\u3002\n## \u524d\u56de\u306e\u304a\u3055\u3089\u3044\n\u524d\u56de\u306ffreezing\u306e\u5b9f\u88c5\u3092\u898b\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u300c\u30b7\u30b0\u30ca\u30eb\u3092\u9001\u51fa\u3057\u3066\u3044\u306a\u3044\u306e\u306b\u30b7\u30b0\u30ca\u30eb\u3092\u9001\u51fa\u3057\u305f\u300d\u65e8\u306e\u30d5\u30e9\u30b0\u3092\u30bf\u30b9\u30af\u69cb\u9020\u4f53\u306b\u7acb\u3066\u3066\u3001\u30b9\u30ec\u30c3\u30c9\u3092\u8d77\u3053\u3059\u3060\u3051\u306e\u3088\u3046\u306b\u898b\u3048\u307e\u3057\u305f\u3002\n\u899a\u3048\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u304b\u3002\n\n```c:kernel/signal.c\nvoid signal_wake_up_state(struct task_struct *t, unsigned int state)\n{\n    set_tsk_thread_flag(t, TIF_SIGPENDING);\n```\n\n\u3044\u3063\u305f\u3044\u8ab0\u304c\u30b9\u30ec\u30c3\u30c9\u3092freeze\u72b6\u614b\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u5b9f\u306ffreezing\u72b6\u614b\u306b\u3059\u308b\u30eb\u30fc\u30c8\u306f\u8907\u6570\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u6587\u66f8\u3067\u306f\u4ee3\u8868\u7684\u3068\u601d\u308f\u308c\u308b2\u3064\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u305d\u306e\u3046\u3061\u306e\u4e00\u3064\u306b\u306f\u3001\u30b7\u30b0\u30ca\u30eb\u51e6\u7406\u304c\u5927\u304d\u304f\u95a2\u4fc2\u3057\u3066\u3044\u307e\u3059\u3002\u306a\u306e\u3067\u3001**freezing\u51e6\u7406\u3068\u3068\u3082\u306b\u3001Linux\u306e\u30b7\u30b0\u30ca\u30eb\u53d7\u4fe1\u51e6\u7406\u306e\u4e00\u90e8\u3082\u3042\u308f\u305b\u3066\u307f\u3066\u3044\u304d\u307e\u3059\u3002**\n\n## \u3067\u3001\u8ab0\u304c\u30b9\u30ec\u30c3\u30c9\u3092freeze\u72b6\u614b\u306b\u3057\u3066\u3044\u308b\u306e\uff1f\n\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u524d\u56defrozen()\u3068\u3044\u3046\u95a2\u6570\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\n\u305d\u3053\u3067\u306fp->flags\u306bPF_FROZEN\u304c\u7acb\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u898b\u3066\u3044\u307e\u3059\u3002\n\n\u306a\u3089\u3001\u3053\u306e\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u3066\u3044\u308b\u7b87\u6240\u3092\u691c\u7d22\u3057\u3066\u3042\u305f\u308a\u3092\u3064\u3051\u308c\u3070\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\u691c\u7d22\u3059\u308b\u3068\u3001\u3053\u306e\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u3066\u3044\u308b\u306e\u306f\u305f\u3063\u305f\u4e00\u7b87\u6240\u3067\u3059\u3002\n\n```\nkernel/freezer.c:               current->flags |= PF_FROZEN;\n```\n\n\u65e9\u901f\u5b9f\u88c5\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\u4e00\u8a00\u3067\u8a00\u3046\u3068\u300c\u5b9f\u884c\u72b6\u614b\u306e\u30b9\u30ec\u30c3\u30c9\u306bPF_FROZEN\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u305f\u4e0a\u3067\u3001\u81ea\u5206\u4ee5\u5916\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u5b9f\u884c\u6a29\u3092\u8b72\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306b\u518d\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u3092\u4f9d\u983c\u3059\u308b\u300d\u3068\u3044\u3046\u3068\u3053\u308d\u3067\u3059\u3002\n\n```c:kernel/freezer.c\n/* Refrigerator is place where frozen processes are stored :-). */\nbool __refrigerator(bool check_kthr_stop)\n{\n/* \u7565 */\n\n    for (;;) {\n        set_current_state(TASK_UNINTERRUPTIBLE);\n\n        spin_lock_irq(&freezer_lock);\n        current->flags |= PF_FROZEN;\n        if (!freezing(current) ||\n            (check_kthr_stop && kthread_should_stop()))\n            current->flags &= ~PF_FROZEN;\n        spin_unlock_irq(&freezer_lock);\n\n        if (!(current->flags & PF_FROZEN))\n            break;\n        was_frozen = true;\n        schedule();\n    }\n\n/* \u7565 */\n\n    return was_frozen;\n}\nEXPORT_SYMBOL(__refrigerator);\n```\n\n\u51b7\u8535\u5eab(refrigerator)\u3068\u306f\u3001\u306a\u3093\u3068\u3082\u6d12\u843d\u305f\u540d\u524d\u3067\u3059\u3002\n__refrigerator()\u306e\u547c\u3073\u51fa\u3057\u7b87\u6240\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n```\ninclude/linux/freezer.h:        return __refrigerator(false);\nkernel/kthread.c:               frozen = __refrigerator(true);\n```\n\n\u4eca\u56de\u306f\u30e6\u30fc\u30b6\u30b9\u30ec\u30c3\u30c9\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u306e\u3067\u3001kthread.c\u306f\u7121\u8996\u3057\u3066include/linux/freezer.h\u3092\u898b\u307e\u3059\u3002\n\u306a\u304a\u3001\u4ee5\u4e0b\u30bd\u30fc\u30b9\u3092\u898b\u308b\u3068\u308f\u304b\u308a\u307e\u3059\u304c\u3001**try_to_freeze_unsafe()\u306f\u547c\u3073\u51fa\u3057\u6642\u306bfreezing(current)\u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u623b\u308a\u5024\u304ctrue\u306e\u3068\u304d\u306b\u306e\u307f__refrigerator()\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b**\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nfreezing()\u306f\u300c\u30b7\u30b9\u30c6\u30e0\u306b\u5bfe\u3057\u3066freeze\u8981\u6c42\u304c\u3042\u3063\u305f\u304b\u3069\u3046\u304b\u300d\u3092\u898b\u3066\u3044\u307e\u3059\u3002\n\n\u8a73\u7d30\u306f\u3001[\u524d\u56de](http://qiita.com/akachochin/items/928442e9b2ce5fac47c5)\u629c\u7c8b\u3057\u305ffreezing()\u306e\u5b9f\u88c5\u304a\u3088\u3073Documentation\u8981\u7d04\u5185\u306esystem_freezing_cnt\u306b\u95a2\u3059\u308b\u8aac\u660e\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```c:include/linux/freezer.h\nstatic inline bool try_to_freeze_unsafe(void)\n{\n    might_sleep();\n    if (likely(!freezing(current)))\n        return false;\n    return __refrigerator(false);\n}\n\nstatic inline bool try_to_freeze(void)\n{\n    if (!(current->flags & PF_NOFREEZE))\n        debug_check_no_locks_held();\n    return try_to_freeze_unsafe();\n}\n\n/* \u7565 */\n\n/* DO NOT ADD ANY NEW CALLERS OF THIS FUNCTION */\nstatic inline void freezer_count_unsafe(void)\n{\n    current->flags &= ~PF_FREEZER_SKIP;\n    smp_mb();\n    try_to_freeze_unsafe();\n}\n```\n\n\u5b9f\u306f\u3001try_to_freeze_unsafe()\u306e\u547c\u3073\u51fa\u3057\u5143\u306f\u4e0a\u8a18\u30d8\u30c3\u30c0\u306b\u3042\u308b2\u3064\u306e\u95a2\u6570try_to_freeze()\u3068freezer_count_unsafe()\u3067\u3059\u3002\n\u30b3\u30e1\u30f3\u30c8\u304b\u3089\u3001freezer_count_unsafe()\u306f\u7279\u6b8a\u306a\u7528\u9014\u304c\u60f3\u5b9a\u3055\u308c\u307e\u3059\u306e\u3067\u3001\u4e00\u822c\u30b1\u30fc\u30b9\u3067\u3042\u308d\u3046try_to_freeze()\u306e\u547c\u3073\u51fa\u3057\u5143\u3092\u898b\u307e\u3059\u3002\n\n\u691c\u7d22\u3092\u304b\u3051\u308b\u3068\u3001try_to_freeze()\u306f\u30ab\u30fc\u30cd\u30eb\u306e\u8907\u6570\u7b87\u6240\u3067\u547c\u3070\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u305f\u3060\u3001\u5927\u4e8b\u306a\u306e\u306f\u3053\u308c\u304b\u3089\u7d39\u4ecb\u3059\u308b\u4e8c\u7b87\u6240\u3067\u306f\u306a\u3044\u304b\u306a\u3001\u3068\u8003\u3048\u307e\u3059\u3002\u305d\u308c\u3089\u3092\u4ee5\u964d\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n## try_to_freeze()\u547c\u3073\u51fa\u3057\u5143\u305d\u306e1\n\n\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3001__wait_event_freezable()\u3067\u3059\u3002\n\n```c:include/linux/wait.h\n#define ___wait_event(wq, condition, state, exclusive, ret, cmd)    \\\n    for (;;) {\n        if (condition)                      \\\n            break;\n        cmd;                            \\\n    }                               \\\n    finish_wait(&wq, &__wait);                  \\\n__out:  __ret;                              \\\n})\n#define __wait_event_freezable(wq, condition)               \\\n    ___wait_event(wq, condition, TASK_INTERRUPTIBLE, 0, 0,      \\\n                schedule(); try_to_freeze())\n```\n\nLinux\u30ab\u30fc\u30cd\u30eb\u3067\u30a4\u30d9\u30f3\u30c8\u5f85\u3061(wait - wakeup)\u3092\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3067wait_event()\u304c\u3042\u308b\u3053\u3068\u306f\u3054\u5b58\u77e5\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u306e\u4e9c\u7a2e\u3067wait_event_freezable()\u3068\u3044\u3046\u306e\u304c\u3042\u308a\u307e\u3059\u3002wait_event_freezable()\u306f__wait_event_freezable()\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u5b9f\u88c5\u3067\u306f\u3001\u30a4\u30d9\u30f3\u30c8\u5f85\u3061\u3092\u884c\u3044\u3001\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u6761\u4ef6\u304c\u6210\u7acb\u3057\u305f\u3068\u304d\u306btry\\_to\\_freeze\u3092\u547c\u3076\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u3001\u518d\u5ea6\u601d\u3044\u51fa\u3057\u3066\u6b32\u3057\u3044\u306e\u304c\u3001\\_\\_refrigerator()\u306e\u5b9f\u88c5\u304c\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002\n\n```c:kernel/freezer.c\n    for (;;) {\n/* \u7565 */\n        current->flags |= PF_FROZEN;\n/* \u7565 */\n        if (!(current->flags & PF_FROZEN))\n            break;\n        was_frozen = true;\n        schedule();\n    }\n```\n\n\u3064\u307e\u308a\u3001\u81ea\u3089\u3092PF_FROZEN\u72b6\u614b\u306b\u3057\u3066\u3001PF_FROZEN\u72b6\u614b\u304c\u89e3\u9664\u3055\u308c\u308b\u307e\u3067schedule()\u3092\u547c\u3073\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u518d\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u304c\u884c\u308f\u308c\u307e\u3059\u306e\u3067\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u5b9f\u884c\u6a29\u3092\u6e21\u3059\u304b\u3001\u5b9f\u884c\u6a29\u3092\u6301\u3063\u305f\u307e\u307e\u30eb\u30fc\u30d7\u3057\u307e\u3059(\u305d\u3057\u3066\u3044\u3064\u304b\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u5b9f\u884c\u6a29\u3092\u8b72\u308b)\u3002\n\u78ba\u304b\u306b\u3001\u660e\u793a\u7684\u306b\u300cfreezing\u306e\u3068\u304d\u306b\u306f\u5f85\u3063\u3066\u3082\u826f\u3044\u300d\u3068\u4e3b\u5f35\u3059\u308b\u3053\u306e\u30b1\u30fc\u30b9\u3067\u306f\u30b9\u30ec\u30c3\u30c9\u304c\"freezing\"\u3057\u307e\u3059\u3002\n\n## try_to_freeze()\u547c\u3073\u51fa\u3057\u5143\u305d\u306e2\n\ntry_to_freeze\u306fget_signal()\u3067\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n\u305f\u3060\u3001\u3044\u304d\u306a\u308aget_signal()\u3092\u898b\u3066\u3082\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001Linux\u306e\u30b7\u30b0\u30ca\u30eb\u51e6\u7406\u306e\u524d\u534a\u90e8\u5206\u3092\u898b\u306a\u304c\u3089get_signal()\u306b\u5230\u9054\u3057\u3066\u307f\u307e\u3059\u3002\n\n## \u30b7\u30b0\u30ca\u30eb\u51e6\u7406\u306b\u3064\u3044\u3066\n\n\u30b7\u30b0\u30ca\u30eb\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001\u8a72\u5f53\u30bf\u30b9\u30af\u69cb\u9020\u4f53\u306e\u30d5\u30e9\u30b0\u306b\u306fTIF_SIGPENDING\u304c\u7acb\u3061\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u30b7\u30b0\u30ca\u30eb\u306f\u57fa\u672c\u7684\u306b\u5373\u6642\u51e6\u7406\u3055\u308c\u307e\u305b\u3093\u3002\n\u5b9f\u884c\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u3072\u3068\u3064\u306b\u3001\u300c\u5272\u308a\u8fbc\u307f\u3084\u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u3068\u304d\u300d\u3068\u3044\u3046\u306e\u304c\u3042\u308a\u307e\u3059\u3002\u5b9f\u306f\u5272\u308a\u8fbc\u307f\u51e6\u7406\u3084\u4f8b\u5916\u51e6\u7406\u7d42\u4e86\u76f4\u524d\u306b\u3001\u300c\u5b9f\u884c\u4e2d\u306e\u30bf\u30b9\u30af(\u30d7\u30ed\u30bb\u30b9)\u306b\u306f\u30da\u30f3\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u30b7\u30b0\u30ca\u30eb\u304c\u3042\u308b\u304b\u300d\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\u5224\u5b9a\u65b9\u6cd5\u306f\u3001**\u8a72\u5f53\u30bf\u30b9\u30af\u69cb\u9020\u4f53\u306e\u30d5\u30e9\u30b0\u306bTIF_SIGPENDING\u304c\u7acb\u3063\u3066\u3044\u308b\u304b**\u3092\u8abf\u3079\u308b\u3053\u3068\u3067\u3059\u3002\n\n\u3053\u3053\u307e\u3067\u3092\u62bc\u3055\u3048\u3066\u3001\u300c\u5272\u308a\u8fbc\u307f\u3084\u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u3068\u304d\u300d\u306b\u304a\u3051\u308b\u30b7\u30b0\u30ca\u30eb\u53d7\u4fe1\u51e6\u7406\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u307e\u3057\u3087\u3046\u3002\n\n### \u3044\u304d\u306a\u308a\u30a2\u30bb\u30f3\u30d6\u30e9\u3060\u3051\u3069\n\n\u30e6\u30fc\u30b6\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u4e2d\u306b\u4f8b\u5916\u3084\u5272\u308a\u8fbc\u307f\u304c\u767a\u751f\u3059\u308b\u3068\u30ab\u30fc\u30cd\u30eb\u30e2\u30fc\u30c9\u306b\u9077\u79fb\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u51e6\u7406\u304c\u7d42\u308f\u308b\u3068\u305d\u306e\u5f8c\u30e6\u30fc\u30b6\u30e2\u30fc\u30c9\u306b\u623b\u308a\u307e\u3059\u3002x86\u306e\u5834\u5408\u3001\u3053\u306e\u623b\u308a\u51e6\u7406\u3092\u5b9f\u65bd\u3057\u3066\u3044\u308b\u306e\u304cresume_userspace()\u3067\u3059\u3002\n\n```arch/x86/kernel/entry_32.S\nENTRY(resume_userspace)\n    LOCKDEP_SYS_EXIT\n    DISABLE_INTERRUPTS(CLBR_ANY)    # make sure we don't miss an interrupt\n                    # setting need_resched or sigpending\n                    # between sampling and the iret\n    TRACE_IRQS_OFF\n    movl TI_flags(%ebp), %ecx\n\n    # \u8ffd\u52a0\u30b3\u30e1\u30f3\u30c8\n    # \u5272\u308a\u8fbc\u307f\u3084\u4f8b\u5916\u7d42\u4e86\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u5b9f\u65bd\u3059\u3079\u304d\u3053\u3068\u304c\u3042\u308c\u3070\u5b9f\u65bd\u3059\u308b\u3002\n    # \u5b9f\u65bd\u306fwork_pending\u30e9\u30d9\u30eb\u3078\u306e\u30b8\u30e3\u30f3\u30d7\u3067\u884c\u3046\u3002\n    andl $_TIF_WORK_MASK, %ecx  # is there any work to be done on\n                    # int/exception return?\n    jne work_pending\n    jmp restore_all\nEND(ret_from_exception)\n```\n\n\u8ffd\u52a0\u30b3\u30e1\u30f3\u30c8\u306e\u3068\u304a\u308a\u3001\u5272\u308a\u8fbc\u307f\u3084\u4f8b\u5916\u7d42\u4e86\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u5b9f\u65bd\u3059\u3079\u304d\u3053\u3068\u304c\u3042\u308c\u3070work_pending\u51e6\u7406\u306b\u30b8\u30e3\u30f3\u30d7\u3057\u307e\u3059\u3002\n\u3053\u306e\u5224\u5b9a\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\\_TIF_WORK_MASK\u306f\u4ee5\u4e0b\u306e\u5b9a\u7fa9\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```c:arch/x86/include/asm/thread_info.h\n#define _TIF_SIGPENDING     (1 << TIF_SIGPENDING)\n/* \u7565 */\n/* work to do on interrupt/exception return */\n#define _TIF_WORK_MASK                          \\\n    (0x0000FFFF &                           \\\n     ~(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT|           \\\n       _TIF_SINGLESTEP|_TIF_SECCOMP|_TIF_SYSCALL_EMU))\n```\n\n\\_TIF\\_WORK_MASK\u306f\u3001\u30bf\u30b9\u30af\u69cb\u9020\u4f53\u306e\u30d5\u30e9\u30b0\u306e\u3046\u3061\u3001\u5272\u308a\u8fbc\u307f\u3084\u4f8b\u5916\u306e\u623b\u308a\u6642\u306b\u306a\u3059\u3079\u304d\u30a4\u30d9\u30f3\u30c8\u306b\u95a2\u3059\u308b\u3082\u306e\u304c\u7acb\u3063\u3066\u3044\u308b\u304b\u3092\u8abf\u3079\u308b\u305f\u3081\u306e\u30de\u30b9\u30af\u5024\u3067\u3059\u3002\n\n\\_TIF_SYSCALL_TRACE\u3001\\_TIF_SYSCALL_AUDIT\u3001\\_TIF_SINGLESTEP\u3001\\_TIF_SECCOMP\u3001\\_TIF_SYSCALL_EMU\u306e5\u3064**\u4ee5\u5916**\u304c\u5bfe\u8c61\u306e\u30a4\u30d9\u30f3\u30c8\u306b\u8a72\u5f53\u3057\u307e\u3059\u3002\n\u3088\u3063\u3066\u3001\\_TIF_SIGPENDING(\u30da\u30f3\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u30b7\u30b0\u30ca\u30eb\u304c\u3042\u308b)\u304c\u7acb\u3063\u3066\u3044\u308b\u5834\u5408\u3001**\u5272\u308a\u8fbc\u307f\u3084\u4f8b\u5916\u306e\u623b\u308a\u6642\u306b\u306a\u3059\u3079\u304d\u30a4\u30d9\u30f3\u30c8\u304c\u3042\u308b\u3068\u307f\u306a\u3057\u307e\u3059**\u3002\u305d\u3057\u3066\u3001work_pending\u3078\u3068\u30b8\u30e3\u30f3\u30d7\u3057\u307e\u3059\u3002\n\nwork_pending\u306b\u30b8\u30e3\u30f3\u30d7\u3057\u305f\u3042\u3068\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bdo_notify_resume()\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\n```arch/x86/kernel/entry_32.S\n# \u7565\n## work_pending\u30e9\u30d9\u30eb\u306f\u3053\u3053\u3002\nwork_pending:\n# \u7565 \n    call do_notify_resume\n    jmp resume_userspace\n```\n\ndo_notify_resume()\u304a\u3088\u3073\u305d\u3053\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308bdo_signal()\u306farch\u306e\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u3001x86\u306e\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\n```c:arch/x86/kernel/signal.c\nstatic void do_signal(struct pt_regs *regs)\n{\n    struct ksignal ksig;\n\n    if (get_signal(&ksig)) {\n        /* Whee! Actually deliver the signal.  */\n        handle_signal(&ksig, regs);\n        return;\n    }\n\n                                                  /*\n * notification of userspace execution resumption\n * - triggered by the TIF_WORK_MASK flags\n */\n__visible void\ndo_notify_resume(struct pt_regs *regs, void *unused, __u32 thread_info_flags)\n{\n    user_exit();\n\n    if (thread_info_flags & _TIF_UPROBE)\n        uprobe_notify_resume(regs);\n\n    /* deal with pending signal delivery */\n    if (thread_info_flags & _TIF_SIGPENDING)\n        do_signal(regs);\n```\n\n\u3053\u3053\u3092\u898b\u308b\u3068\u308f\u304b\u308b\u3088\u3046\u306b\u3001\\_TIF\\_SIGPENDING\u304c\u7acb\u3063\u3066\u3044\u308b\u5834\u5408\u3001do_signal()\u304c\u547c\u3070\u308c\u3001\u305d\u3053\u304b\u3089\u3055\u3089\u306bget_signal()\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\n```c:kernel/signal.c\nint get_signal(struct ksignal *ksig)\n{\n    struct sighand_struct *sighand = current->sighand;\n    struct signal_struct *signal = current->signal;\n    int signr;\n\n    if (unlikely(current->task_works))\n        task_work_run();\n\n    if (unlikely(uprobe_deny_signal()))\n        return 0;\n\n    /*   \n     * Do this once, we can't return to user-mode if freezing() == T.\n     * do_signal_stop() and ptrace_stop() do freezable_schedule() and\n     * thus do not need another check after return.\n     */\n    try_to_freeze();\n```\n\n\u78ba\u304b\u306b\u547c\u3093\u3067\u3044\u307e\u3059\u3002\u660e\u793a\u7684\u306b\u300cfreezing\u306e\u3068\u304d\u306b\u306f\u5f85\u3063\u3066\u3082\u826f\u3044\u300d\u3068\u4e3b\u5f35\u3057\u306a\u3044\u5927\u90e8\u5206\u306e\u30b1\u30fc\u30b9\u3067\u3042\u3063\u3066\u3082\u3001\u30b7\u30b0\u30ca\u30eb\u53d7\u4fe1\u3068\u540c\u69d8\u306e\u4ed5\u7d44\u307f\u3067\u30b9\u30ec\u30c3\u30c9\u3092freezing\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u306a\u304b\u306a\u304b\u9762\u767d\u3044\u4ed5\u7d44\u307f\u3067\u3059\u3002\n\n## \u6b21\u56de\u306f\n\u5c11\u3057\u8003\u3048\u3055\u305b\u3066\u304f\u3060\u3055\u3044\u3002\u8aad\u3093\u3067\u307f\u305f\u3044\u3068\u3053\u308d\u304c\u3044\u308d\u3044\u308d\u3042\u308b\u306e\u3067\u30fb\u30fb\u30fb\u3002\n\n\n", "tags": ["Linux", "kernel", "kernelvm"]}