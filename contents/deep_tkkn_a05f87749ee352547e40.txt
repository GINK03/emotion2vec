{"tags": ["BitVisor"], "context": "(2016/12/10: \u6587\u7ae0\u306a\u3069\u3092\u5c11\u3057\u4fee\u6b63)\n\n\u306f\u3058\u3081\u306b\nBitVisor \u304c\u30d6\u30fc\u30c8\u3059\u308b\u3068\u304d\u306b\u901a\u3063\u3066\u3044\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8fbf\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\nBitVisor \u306b\u3082\u3044\u308d\u3044\u308d\u306a\u30d6\u30fc\u30c8\u306e\u4ed5\u65b9\u304c\u3042\u308a\u307e\u3059\u3057\uff0c32bit\u74b0\u5883\u306864bit\u74b0\u5883, CPU \u304cIntel \u306e\u3082\u306e\u304b AMD \u306e\u3082\u306e\u304b\u3067\u901a\u308b\u30d1\u30b9\u304c\u9055\u3044\u307e\u3059\uff0e\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\uff0cMultiboot\uff0c64bit\u74b0\u5883\uff0cIntel CPU \u3068\u3044\u3046\u74b0\u5883\u3067\u30d6\u30fc\u30c8\u3059\u308b\u3068\u304d\u306e\u30b3\u30fc\u30c9\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\ncore/entry.s \u306eentry: \u304b\u3089 core/vt_main.c \u306evt_mainloop() \u307e\u3067\u8fbf\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u3042\u304f\u307e\u3067\uff0c\u30d6\u30fc\u30c8\u6642\u306e\u672c\u6d41\u3092\u8fbf\u308b\u3060\u3051\u3067\uff0c\u7d30\u304b\u3044\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\u306f\u306a\u3044\u3067\u3059\uff0e\n\n\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u304b\u3089C\u3078\u306e\u65c5\n\ncore/entry.s entry:\n\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u304b\u3089\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3067\u3059\uff0e\ncore/entry.s \u306eentry: \u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3059\u308b\u3088\u3046\u3067\u3059\uff0e\n\u3053\u3053\u3067\uff0cmultiboot_entry \u3084uefi64_entry \u306b\u98db\u3073\u307e\u3059\uff0e\n\u3053\u306e\u3042\u305f\u308a\u306e\u3053\u3068\u306f @hdk_2 \u3055\u3093\u306e http://qiita.com/hdk_2/items/b73161f08fefce0d99c3 \u306b\u8a73\u3057\u304f\u66f8\u304b\u308c\u3066\u307e\u3059\uff0e\n\ncore/entry.s multiboot_entry:\nCR \u30ec\u30b8\u30b9\u30bf\u306e\u8a2d\u5b9a\u306a\u3069\u3092\u884c\u3063\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u306d\uff0e\n\ncore/entry.s cpuinit_start:, cpuinit_tmpstack:\n\u30bb\u30b0\u30e1\u30f3\u30c8\u306e\u8a2d\u5b9a\u3063\u307d\u3044\u3053\u3068\u3092\u3084\u3063\u3066\u3044\u307e\u3059\uff0e\n\ncore/entry.s entry16:, entry16_2\nEFER \u3068\u304b MSR \u306e\u8a2d\u5b9a\u3092\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\uff0e\n\u6700\u5f8c\u306bcallmain64\u3000(32bit\u74b0\u5883\u306a\u3089callmain32)\u306b\u30b8\u30e3\u30f3\u30d7\u3057\u3066\u307e\u3059\u304b\u306d\uff0e\n\ncore/entry.s callmain64\n\u30bb\u30b0\u30e1\u30f3\u30c8\u8272\u3005\u8a2d\u5b9a\u3057\u3066\uff0cBSP\u306a\u3089vmm_main(), AP\u306a\u3089apinitproc0() \u3092\u547c\u3093\u3067\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u306d\uff0e\n\nBSP \u306e\u65c5\nentry.s \u304b\u3089C\u3078\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306fBSP\u3068AP\u3067\u306f\u7570\u306a\u308b\u3088\u3046\u3067\u3059\uff0e\n\u307e\u305a\u306f\uff0cBSP\u306e\u65b9\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\ncore/main.c vmm_main()\nasmlinkage void\nvmm_main (struct multiboot_info *mi_arg)\n{\n:\n(\u4e2d\u7565)\n:\n        call_initfunc (\"global\");\n        start_all_processors (bsp_proc, ap_proc);\n}\n\n\u6700\u7d42\u7684\u306b\u306f\u3000start_all_processors (); \u3092\u547c\u3093\u3067\u3044\u307e\u3059\uff0e\n\u76f4\u63a5 start_all_processors () \u3092\u898b\u308b\u524d\u306b\uff0c\u5c11\u3057call_initfunc()\u7d61\u307f\u306e\u8aac\u660e\u3092\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u3053\u306e\u95a2\u6570\u306f\uff0cBitVisor \u306e\u521d\u671f\u5316\u306e\u51e6\u7406\u3067\u3088\u304f\u898b\u308b\u95a2\u6570\u3067\u3059\u306e\u3067\uff0e\n\ncall_initfunc \u3068 INITFUNC \u30de\u30af\u30ed\u306b\u3064\u3044\u3066\ncore/ \u4ee5\u4e0b\u3084 driver/ \u4ee5\u4e0b\u306b\u3042\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u6642\u3005 INITFUNC(\"string0\", funcname) \u307f\u305f\u3044\u306a\u30de\u30af\u30ed\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\n\u3053\u308c\u306f\uff0cBitVisor \u306e\u521d\u671f\u5316\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u95a2\u6570\u3092\u767b\u9332\u3059\u308b\u305f\u3081\u306e\u30de\u30af\u30ed\u3067\u3059\uff0e\n\u3067\u306f\uff0c\u3044\u3064\u547c\u3073\u51fa\u3055\u308c\u308b\u306e\u304b? \n\u305d\u308c\u306f\uff0ccall_initfunc() \u304c\u547c\u3070\u308c\u305f\u3068\u304d\u3067\u3059\uff0e\n\u305f\u3060\uff0ccall_initfunc() \u3092\u4e00\u5ea6\u547c\u3076\u3068\uff0c\u767b\u9332\u3057\u305f\u3059\u3079\u3066\u306e\u95a2\u6570\u304c\u4e00\u5ea6\u306b\u547c\u3070\u308c\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\ncall_initfunc(\"hoge\") \u3068\u3059\u308b\u3068 INITFUNC(\"hoge0, funcname) \u306e\u3088\u3046\u306b\uff0c\u30de\u30af\u30ed\u306e\u7b2c\u4e00\u5f15\u6570\u306e\u6570\u5b57\u4ee5\u5916\u306e\u90e8\u5206\u304c\u30de\u30c3\u30c1\u3057\u305f\u3082\u306e\u304c\u547c\u3070\u308c\u307e\u3059\uff0e\n\u307e\u305f\uff0choge0\u306e\u6570\u5b57\u306e\u610f\u5473\u306f\uff0c\u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u9806\u5e8f\u306e\u5236\u5fa1\u3067\u3059\uff0e\n\u6570\u5b57\u304c\u5c0f\u3055\u3044\u3082\u306e\u304c\u5148\u306b\u547c\u3070\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\u4f8b\u3048\u3070\uff0cINITFUNC(\"hoge0, funcname0)\u3068INITFUNC(\"hoge1, funcname1) \u3068\u767b\u9332\u3057\u3066\uff0ccall_initfunc(\"hoge\") \u3092\u547c\u3076\u3068\uff0cfuncname0()\u306e\u6b21\u306bfuncname1()\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\uff0e\n\u4e0a\u8a18\u306evmm_main()\u5185\u306ecall_initfunc(\"global\")\u304c\u547c\u3076\u95a2\u6570\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n$ find . -name \"*.[chsS]\" | xargs grep \"INITFUNC.*\\\"global\"\n./core/process.c:INITFUNC (\"global3\", process_init_global);\n./core/msg.c:INITFUNC (\"global4\", msg_init_global);\n./core/time.c:INITFUNC (\"global3\", time_init_global);\n./core/int.c:INITFUNC (\"global1\", int_init_global);\n./core/acpi.c:INITFUNC (\"global3\", acpi_init_global);\n./core/mm.c:INITFUNC (\"global2\", mm_init_global);\n./core/printf.c:INITFUNC (\"global0\", printf_init_global);\n./core/sleep.c:INITFUNC (\"global0\", sleep_init_global);\n./core/thread.c:INITFUNC (\"global3\", thread_init_global);\n./core/tty.c:INITFUNC (\"global0\", tty_init_global);\n./core/tty.c:INITFUNC (\"global3\", tty_init_global2);\n./core/seg.c:INITFUNC (\"global0\", segment_init_global);\n./core/panic.c:INITFUNC (\"global0\", panic_init_global);\n./core/panic.c:INITFUNC (\"global3\", panic_init_global3);\n./core/vmmcall_dbgsh.c:INITFUNC (\"global3\", vmmcall_dbgsh_init_global);\n./core/vmmcall_status.c:INITFUNC (\"global3\", vmmcall_status_init_global);\n./core/cpu_mmu_spt.c:INITFUNC (\"global4\", cpu_mmu_spt_init_global);\n./core/main.c:INITFUNC (\"global1\", print_boot_msg);\n./core/main.c:INITFUNC (\"global3\", copy_minios);\n./core/main.c:INITFUNC (\"global3\", get_shiftflags);\n./core/callrealmode.c:INITFUNC (\"global0\", callrealmode_init_global);\n\n\u306a\u3093\u304b\u305f\u304f\u3055\u3093\u547c\u3070\u308c\u3066\u307e\u3059\u306d\uff0e\n\u3053\u308c\u5168\u90e8\u898b\u3066\u305f\u3089\u4eca\u5e74\u4e2d\u306b\u3053\u306e\u8a18\u4e8b\u304c\u66f8\u304d\u7d42\u308f\u3089\u306a\u3044\u306e\u3067\uff0c\u8208\u5473\u304c\u3042\u308b\u4eba\u306f\u898b\u3066\u304f\u3060\u3055\u3044\u3068\u3044\u3046\u3053\u3068\u3067\uff0e\n\ncore/ap.c start_all_processors ();\n\u3067\u306f\uff0c\u672c\u6d41\u306b\u3082\u3069\u308a\u307e\u3057\u3087\u3046\uff0e\nvoid\nstart_all_processors (void (*bsp_initproc) (void), void (*ap_initproc) (void))\n{\n        initproc_bsp = bsp_initproc;\n        initproc_ap = ap_initproc;\n        bsp_continue (bspinitproc1);\n}\n\n\n\u6b21\u306e\u98db\u3073\u5148\u306f bsp_continue() \u3067\u3059\u306d\uff0e\n\ncore/ap.c bsp_continue (bspinitproc1)\nstatic void\nbsp_continue (asmlinkage void (*initproc_arg) (void))\n{\n        void *newstack;\n\n        newstack = alloc (VMM_STACKSIZE);\n        currentcpu->stackaddr = newstack;\n        asm_wrrsp_and_jmp ((ulong)newstack + VMM_STACKSIZE, initproc_arg);\n}\n\n\u6700\u5f8c\u306e asm_wrrsp_and_jmp ((ulong)newstack + VMM_STACKSIZE, initproc_arg); \u3063\u3066\u306e\u3067initproc_arg \u306b\u98db\u3073\u307e\u3059\uff0e\n\u3053\u308c\u306f\u5f15\u6570\u3067\u6e21\u3055\u308c\u3066\u304f\u308b\u3082\u306e\u3067\uff0c\u5143\u3092\u305f\u3069\u308b\u3068\uff0cbspinitproc1()\u306b\u306a\u308a\u307e\u3059\uff0e\n\ncore/ap.c bspinitproc1()\n(\u4fee\u6b63 2015/12/2\uff17: if\u6587\u3092\u8aad\u307f\u9593\u9055\u3048\u3066\uff0c\u3044\u308d\u3044\u308d\u9593\u9055\u3048\u3066\u3044\u305f\u306e\u3067\u8a02\u6b63)\nstatic asmlinkage void\nbspinitproc1 (void)\n{\n        printf (\"Processor 0 (BSP)\\n\");\n:\n(\u4e2d\u7565)\n:\n        if (!uefi_booted) {\n                apinit_addr = 0xF000;\n                ap_start ();\n        } else {\n:\n(\u4e2d\u7565)\n:\n        initproc_bsp ();\n        panic (\"bspinitproc1\");\n}\n\nap_start(); \u3063\u3066\u3044\u3046\u306e\u304c\uff0cAP\u3092\u30ad\u30c3\u30af\u3057\u3066\u308b\u307f\u305f\u3044\u3067\u3059\uff0e\nBSP \u306e\u51e6\u7406\u306f initproc_bsp() \u306b\u7d9a\u3044\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff0e\ninitproc_bsp() \u306f\u5b9f\u306f\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3067\uff0c\u5b9f\u614b\u306f2\u3064\u524d\u304f\u3089\u3044\u306e\u95a2\u6570 start_all_processors () \u3067\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\u8ffd\u3063\u3066\u3082\u3089\u3048\u3070\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u304c\uff0c\u3053\u308c\u306f core/main.c \u306e bsp_proc() \u3067\u3059\uff0e\n\ncore/main.c bsp_proc()\n\u307e\u305f\uff0cmain.c \u306b\u623b\u3063\u3066\u304d\u307e\u3057\u305f\uff0e\nstatic void\nbsp_proc (void)\n{\n        call_initfunc (\"bsp\");\n        call_parallel ();\n        call_initfunc (\"pcpu\");\n}\n\n\u30d1\u30c3\u3068\u898b\u4e0d\u601d\u8b70\u306a\u30b3\u30fc\u30c9\u3067\u3059\uff0e\u3069\u3053\u306b\u3082\u98db\u3093\u3067\u884c\u3063\u3066\u308b\u6c17\u914d\u304c\u306a\u3044\u304b\u3089\u3067\u3059\uff0e\n\u305d\u308c\u304c\u306a\u305c\u4e0d\u601d\u8b70\u304b\u3068\u3044\u3046\u3068\uff0c\u3053\u306e\u95a2\u6570\u3092\u8aad\u3093\u3060 bspinitproc1() \u306f\u3053\u306e\u95a2\u6570\u304b\u3089\u623b\u3063\u3066\u304d\u305f\u3089\u3059\u304b\u3055\u305a panic()\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\u3053\u308c\u306f\u3064\u307e\u308a\uff0c\u6b63\u5e38\u306bBitVisor \u304c\u52d5\u3051\u3070bsp_proc()\u306f\u547c\u3073\u51fa\u3057\u304b\u3089\u623b\u3063\u3066\u3053\u306a\u3044\u306f\u305a\uff0c\u3068\u3044\u3046\u30b3\u30fc\u30c9\u3067\u3059\uff0e\n\u306a\u306e\u306b\uff0c\u3053\u306e\u30b3\u30fc\u30c9\uff0c\u30d1\u30c3\u3068\u898b\u666e\u901a\u306b\u623b\u3063\u3066\u3057\u307e\u3044\u305d\u3046\u306a\u30b3\u30fc\u30c9\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304b\uff0e\ncall_initfunc (\"pcpu\") \u304c\u6700\u5f8c\u306b\u547c\u3076\u95a2\u6570\u304c\u602a\u3057\u305d\u3046\u3067\u3059\uff0e\n\u8abf\u3079\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n$ find . -name \"*.[chsS]\" | xargs grep \"INITFUNC.*\\\"pcpu\"\n./core/nmi_pass.c:INITFUNC (\"pcpu0\", nmi_pass_init_pcpu);\n./core/time.c:INITFUNC (\"pcpu4\", time_init_pcpu);\n./core/cache.c:INITFUNC (\"pcpu4\", cache_init_pcpu);\n./core/thread.c:INITFUNC (\"pcpu0\", thread_init_pcpu);\n./core/panic.c:INITFUNC (\"pcpu3\", panic_init_pcpu);\n./core/cpu_mmu_spt.c:INITFUNC (\"pcpu0\", cpu_mmu_spt_init_pcpu);\n./core/main.c:INITFUNC (\"pcpu2\", virtualization_init_pcpu);\n./core/main.c:INITFUNC (\"pcpu5\", create_pass_vm);\n\n\u3069\u3046\u3082\uff0ccreate_pass_vm() \u3068\u3044\u3046\u306e\u304c\u6700\u5f8c\u306b\u547c\u3070\u308c\u308b\u3088\u3046\u3067\u3059\uff0e\n\u540d\u524d\u3082\u305d\u308c\u3063\u307d\u3044\u306e\u3067\uff0c\u304d\u3063\u3068\u3053\u308c\u3067\u3057\u3087\u3046\uff0e\n\ncore/main.c create_pass_vm()\nstatic void\ncreate_pass_vm (void)\n{\n:\n(\u4e2d\u7565)\n:\n        current->vmctl.start_vm ();\n        panic (\"VM stopped.\");\n}\n\n\u306a\u3093\u304b\u9014\u4e2d\u3067\u3044\u308d\u3044\u308d\u3084\u3063\u3066\u307e\u3059\u304c\uff0c\u6700\u5f8c\u306f current->vmctl.start_vm (); \u3092\u547c\u3073\u307e\u3059\uff0e\n\u3053\u308c\u306f\uff0cIntel CPU \u306a\u3089 vt_start_vm(), AMD CPU \u306a\u3089 svm_start_vm() \u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\n\ncore/vt_main.c vt_start_vm()\nvoid\nvt_start_vm (void)\n{\n        current->exint.int_enabled ();\n        vt_paging_start ();\n        vt_mainloop ();\n}\n\n\u6b21\u306f vt_mainloop() \u307f\u305f\u3044\u3067\u3059\u306d\uff0e\n\ncore/vt_main.c vt_mainloop()\n\u3053\u3053\u304c\uff0c\u7d42\u7740\u70b9\u3067\u3059\uff0e\nstatic void\nvt_mainloop (void)\n{\n\n        enum vmmerr err;\n        ulong cr0, acr;\n        u64 efer;\n\n        for (;;) {\n                schedule ();\n                vt_vmptrld (current->u.vt.vi.vmcs_region_phys);\n:\n(\u4e2d\u7565)\n:\n\n                        vt__vm_run ();\n:\n(\u4e2d\u7565)\n:\n                        vt__exit_reason ();\n                }\n        }\n}\n\n\u672c\u5f53\u306f\u3068\u3066\u3082\u9577\u3044\u95a2\u6570\u306a\u306e\u3067\u3059\u304c\uff0c\u3044\u308d\u3044\u308d\u7565\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\uff0e\nBitVisor \u306f\u4e0a\u3067OS\u304c\u52d5\u3044\u3066\u308b\u3042\u3044\u3060\uff0c\u3053\u306e\u7121\u9650\u30eb\u30fc\u30d7\u3092\u3050\u308b\u3050\u308b\u3057\u3066\u3044\u307e\u3059\uff0e\nvt__vm_run() \u3067VMENTER\u3057\u3066\uff0cVMEXIT\u3059\u308b\u3068\uff0c\u3053\u306e\u95a2\u6570\u304b\u3089\u623b\u3063\u3066\u304d\u307e\u3059\uff0e\nvt__vm_run() \u304b\u3089\u623b\u3063\u3066\u304f\u308b\u3068\uff0cvt__exit_reason() \u3068\u3044\u3046\u95a2\u6570\u3092\u547c\u3073\u307e\u3059\uff0e\n\u3053\u308c\u306f\uff0cVMEXIT\u3057\u305f\u539f\u56e0\u306b\u5408\u308f\u305b\u3066\u5fc5\u8981\u306a\u51e6\u7406\u3092\u884c\u3046\u3082\u306e\u3067\u3059\uff0e\n\u4f8b\u3048\u3070\uff0cEPT violation \u304c\u8d77\u304d\u305f\u306a\u3089\uff0c\u5fc5\u8981\u306aEPT\u306e\u51e6\u7406\u3092\u3057\u307e\u3059\uff0e\n\u30d5\u30c3\u30af\u3059\u3079\u304dI/O\u3092\u767a\u884c\u3055\u308c\u3066\uff0cVMEXIT \u3057\u3066\u304d\u305f\u306a\u3089\uff0c\u30d5\u30c3\u30af\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\uff0e\n\nAP \u306e\u65c5\n(\u4fee\u6b63 2015/12/26: \u3044\u308d\u3044\u308d\u9593\u9055\u3048\u3066\u3044\u305f\u306e\u3067\u8a02\u6b63)\n\u3053\u308c\u307e\u3067\u306f\uff0cBSP \u306e\u65c5\u3067\u3057\u305f\uff0e\nAP \u306e\u65b9\u306f\u3069\u3046\u3067\u3057\u3087\u3046\u304b?\nBSP \u304c\u30d6\u30fc\u30c8\u3059\u308b\u9014\u4e2d\u3067 bspinitproc1() \u3068\u3044\u3046\u95a2\u6570\u3092\u901a\u3063\u305f\u6642\u306b\uff0clocalapic_delayed_ap_start ap_start); apstart() \u3068\u3044\u3046\u95a2\u6570\u3092\u547c\u3073\u307e\u3057\u305f\uff0e\n\u3053\u306e\u95a2\u6570\u306f\uff0c\u3042\u3068\u3067(\u5177\u4f53\u7684\u306b\u306f\uff0c\u30b2\u30b9\u30c8OS\u304cAP\u3092\u8d77\u52d5\u3057\u3088\u3046\u3068\u3057\u305f\u3068\u304d)\u306bap_start()\u3092\u547c\u3076\u3088\u3046\u306b\u767b\u9332\u3057\u3066\u304a\u304f\u95a2\u6570\u3067\u3059\uff0e\n\u3067\uff0c\u3053\u306eap_start()\u306f\u6700\u7d42\u7684\u306bStart IPI \u3092\u9001\u4fe1\u3057\u3066AP\u3092\u8d77\u52d5\u3057\u307e\u3059\uff0e\n\u305f\u3076\u3093\uff0cAP\u3082entry.s \u306e entry: \u304b\u3089\u5b9f\u884c\u3092\u59cb\u3081\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u304a\u3082\u3044\u307e\u3059(\u50d5\u3082\u3088\u304f\u77e5\u3089\u306a\u3044\u306e\u3067\u3059\u3051\u3069\u3082...).\ncore/entry.s callmain64 \u306e\u7ae0\u3067\u8aac\u660e\u3057\u305f\u901a\u308a\uff0cAP\u306fapinitproc0()\u304b\u3089C\u306e\u30b3\u30fc\u30c9\u306b\u5165\u308a\u307e\u3059\uff0e\n\u3053\u3053\u304b\u3089\u8ffd\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n@hdk_2 \u3055\u3093\u304b\u3089\u3054\u6307\u6458\u306e\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u304d\u307e\u3057\u305f\uff0e\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff0e\n\nAP\u306fentry:\u3058\u3083\u306a\u304f\u3066\u3067\u3059\u306d\u3001cpuinit_start:\u3068\u3044\u3046\u3068\u3053\u308d\u304b\u3089\u59cb\u307e\u308b\u30b3\u30fc\u30c9\u3092\u30011MiB\u672a\u6e80\u306e\u30a2\u30c9\u30ec\u30b9\u306b\u30b3\u30d4\u30fc\u3057\u305f\u3082\u306e\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u30b3\u30d4\u30fc\u306fap_start()\u95a2\u6570\u3067\u3084\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u898b\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3068\u306e\u3053\u3068\u3067\u3059\u306e\u3067\uff0cap_start() \u304b\u3089\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\ncore/ap.c ap_start()\nstatic void\nap_start (void)\n{\n        volatile u32 *num;\n        u8 *apinit;\n        u32 tmp;\n        int i;\n        u8 buf[5];\n        u8 *p;\n        u32 apinit_segment;\n\n        apinit_segment = (apinit_addr - APINIT_OFFSET) >> 4;\n        /* Put a \"ljmpw\" instruction to the physical address 0 */\n        p = mapmem_hphys (0, 5, MAPMEM_WRITE);\n        memcpy (buf, p, 5);\n        p[0] = 0xEA;            /* ljmpw */\n        p[1] = APINIT_OFFSET & 0xFF;\n        p[2] = APINIT_OFFSET >> 8;\n        p[3] = apinit_segment & 0xFF;\n        p[4] = apinit_segment >> 8;\n        apinit = mapmem (MAPMEM_HPHYS | MAPMEM_WRITE, apinit_addr,\n                         APINIT_SIZE);\n        ASSERT (apinit);\n        memcpy (apinit, cpuinit_start, APINIT_SIZE);\n        num = (volatile u32 *)APINIT_POINTER (apinit_procs);\n        apinitlock = (spinlock_t *)APINIT_POINTER (apinit_lock);\n        *num = 0;\n        spinlock_init (apinitlock);\n        i = 0;\n        ap_start_addr (0, ap_start_loopcond, &i);\n        for (;;) {\n                spinlock_lock (&ap_lock);\n                tmp = num_of_processors;\n                spinlock_unlock (&ap_lock);\n                if (*num == tmp)\n                        break;\n                usleep (1000000);\n        }\n        unmapmem ((void *)apinit, APINIT_SIZE);\n        memcpy (p, buf, 5);\n        unmapmem (p, 5);\n        ap_started = true;\n}\n\n\u3056\u3063\u304f\u308a\u51e6\u7406\u306e\u6d41\u308c\u3092\u66f8\u304f\u3068\n\n0x0\u756a\u5730\u306blong jump \u547d\u4ee4\u306e\u30b3\u30fc\u30c9\u3092\u7f6e\u304f (p[0] = ...\u304b\u3089 p[4] = ... \u3042\u305f\u308a)\nlong jump \u306e\u98db\u3073\u5148\u306bcpuinit_start\u306e\u30b3\u30fc\u30c9\u3092\u7f6e\u304f(memcpy (apinit, cpuinit_start, APINIT_SIZE);)\nStartup IPI \u3092AP\u306b\u9001\u4fe1\u3059\u308b\uff0c\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306b0x0\u756a\u5730\u3092\u6307\u5b9a(ap_start_addr (0, ap_start_loopcond, &i);)\uff0e\n\n\ncore/entry.s cpuinit_start: ~ callmain64:\n\u3053\u306e\u9593\u306e\u51e6\u7406BSP\u3068\u5927\u5dee\u306a\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u6700\u5f8c\uff0cC\u306e\u30b3\u30fc\u30c9\u3078\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u304c\uff0cBSP\u306a\u3089 vmm_main() \u3060\u3063\u305f\u3068\u3053\u308d\u3092AP\u3060\u3068 apinitproc0() \u306b\u306a\u308b\u3068\u3053\u308d\u3067\uff0cBSP \u3068AP \u306e\u51e6\u7406\u306e\u6d41\u308c\u304c\u5909\u308f\u308a\u307e\u3059\uff0e\n\u3068\u3044\u3046\u308f\u3051\u3067\uff0c\u6b21\u306fapinitproc0()\u3092\u898b\u307e\u3059\uff0e\n\ncore/ap.c apinitproc0()\nasmlinkage void                                                                    \napinitproc0 (void)                                                                 \n{                                                                                  \n        newstack_tmp = alloc (VMM_STACKSIZE);                                      \n        asm_wrrsp_and_jmp ((ulong)newstack_tmp + VMM_STACKSIZE, apinitproc1);      \n} \n\napinitproc1()\u3092\u547c\u3093\u3067\u307e\u3059\uff0e\n\ncore/ap.c apinitproc1()\nstatic asmlinkage void\napinitproc1 (void)\n{\n        void (*proc) (void);\n:\n(\u4e2d\u7565)\n:\n        proc = initproc_ap;\n        printf (\"Processor %d (AP)\\n\", num_of_processors);\n:\n(\u4e2d\u7565)\n:\n        proc ();\n}\n\ninitproc_ap() \u3092\u547c\u3093\u3067\u307e\u3059\uff0e\n\u3053\u308c\u306f\uff0cBSP \u304ccore/ap.c start_all_processors (); \u306e\u4e2d\u3067\u30bb\u30c3\u30c8\u3057\u3066\u3044\u307e\u3057\u305f\uff0e\n\u8ffd\u3046\u3068\uff0ccore/main.c ap_proc() \u3060\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\ncore/main.c ap_proc()\nstatic void\nap_proc (void)\n{\n        call_initfunc (\"ap\");\n        call_parallel ();\n        call_initfunc (\"pcpu\");\n}\n\n\u3053\u308c\u3082BSP\u540c\u69d8\uff0ccall_initfunc (\"pcpu\"); \u306e\u6700\u5f8c\u3067create_pass_vm()\u3092\u547c\u3073\u307e\u3059\uff0e\n\u3053\u3053\u304b\u3089\u5148\u306f\uff0cBSP\u3068\u540c\u3058\u3067\u3059\u306d\uff0e\n\n\u304a\u308f\u308a\u306b\nentry.s \u304b\u3089vt_main() \u306evt_mainloop()\u306b\u81f3\u308b\u307e\u3067\u306e\u6d41\u308c\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u305f\uff0e\n\u3042\u307e\u308a\u8107\u9053\u306b\u305d\u308c\u305a\u306b\u672c\u6d41\u3060\u3051\u8ffd\u3063\u3066\u66f8\u3044\u3066\u307f\u3066\u3082\u7d50\u69cb\u306a\u91cf\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\u672c\u5f53\u306f\u3053\u306e\u9014\u4e2d\u3067\u30c9\u30e9\u30a4\u30d0\u306e\u521d\u671f\u5316\u3060\u3063\u305f\u308a\uff0cEPT\u306e\u521d\u671f\u5316\u3060\u3063\u305f\u308a\u3044\u308d\u3044\u308d\u3084\u3063\u3066\u3044\u307e\u3059\uff0e\n\u30d6\u30fc\u30c8\u306e\u6d41\u308c\u3092\u8ffd\u3046\u306e\u306f\u305f\u3044\u3066\u3044\u9762\u5012\u306a\u4f5c\u696d\u306a\u306e\u3067\uff0c\u305d\u3046\u3044\u3046\u4f5c\u696d\u306e\u52a9\u3051\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\uff0e\n(2016/12/10: \u6587\u7ae0\u306a\u3069\u3092\u5c11\u3057\u4fee\u6b63)\n# \u306f\u3058\u3081\u306b\nBitVisor \u304c\u30d6\u30fc\u30c8\u3059\u308b\u3068\u304d\u306b\u901a\u3063\u3066\u3044\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8fbf\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\nBitVisor \u306b\u3082\u3044\u308d\u3044\u308d\u306a\u30d6\u30fc\u30c8\u306e\u4ed5\u65b9\u304c\u3042\u308a\u307e\u3059\u3057\uff0c32bit\u74b0\u5883\u306864bit\u74b0\u5883, CPU \u304cIntel \u306e\u3082\u306e\u304b AMD \u306e\u3082\u306e\u304b\u3067\u901a\u308b\u30d1\u30b9\u304c\u9055\u3044\u307e\u3059\uff0e\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\uff0cMultiboot\uff0c64bit\u74b0\u5883\uff0cIntel CPU \u3068\u3044\u3046\u74b0\u5883\u3067\u30d6\u30fc\u30c8\u3059\u308b\u3068\u304d\u306e\u30b3\u30fc\u30c9\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\ncore/entry.s \u306eentry: \u304b\u3089 core/vt_main.c \u306evt_mainloop() \u307e\u3067\u8fbf\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u3042\u304f\u307e\u3067\uff0c\u30d6\u30fc\u30c8\u6642\u306e\u672c\u6d41\u3092\u8fbf\u308b\u3060\u3051\u3067\uff0c\u7d30\u304b\u3044\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\u306f\u306a\u3044\u3067\u3059\uff0e\n\n# \u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u304b\u3089C\u3078\u306e\u65c5\n\n## core/entry.s entry:\n\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u304b\u3089\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3067\u3059\uff0e\ncore/entry.s \u306eentry: \u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3059\u308b\u3088\u3046\u3067\u3059\uff0e\n\u3053\u3053\u3067\uff0cmultiboot_entry \u3084uefi64_entry \u306b\u98db\u3073\u307e\u3059\uff0e\n\u3053\u306e\u3042\u305f\u308a\u306e\u3053\u3068\u306f @hdk_2 \u3055\u3093\u306e http://qiita.com/hdk_2/items/b73161f08fefce0d99c3 \u306b\u8a73\u3057\u304f\u66f8\u304b\u308c\u3066\u307e\u3059\uff0e\n\n\n## core/entry.s multiboot_entry:\nCR \u30ec\u30b8\u30b9\u30bf\u306e\u8a2d\u5b9a\u306a\u3069\u3092\u884c\u3063\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u306d\uff0e\n\n## core/entry.s cpuinit_start:, cpuinit_tmpstack:\n\u30bb\u30b0\u30e1\u30f3\u30c8\u306e\u8a2d\u5b9a\u3063\u307d\u3044\u3053\u3068\u3092\u3084\u3063\u3066\u3044\u307e\u3059\uff0e\n\n## core/entry.s entry16:, entry16_2\nEFER \u3068\u304b MSR \u306e\u8a2d\u5b9a\u3092\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\uff0e\n\u6700\u5f8c\u306bcallmain64\u3000(32bit\u74b0\u5883\u306a\u3089callmain32)\u306b\u30b8\u30e3\u30f3\u30d7\u3057\u3066\u307e\u3059\u304b\u306d\uff0e\n\n## core/entry.s callmain64\n\u30bb\u30b0\u30e1\u30f3\u30c8\u8272\u3005\u8a2d\u5b9a\u3057\u3066\uff0cBSP\u306a\u3089`vmm_main()`, AP\u306a\u3089`apinitproc0()` \u3092\u547c\u3093\u3067\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u306d\uff0e\n\n# BSP \u306e\u65c5\nentry.s \u304b\u3089C\u3078\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306fBSP\u3068AP\u3067\u306f\u7570\u306a\u308b\u3088\u3046\u3067\u3059\uff0e\n\u307e\u305a\u306f\uff0cBSP\u306e\u65b9\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n## core/main.c vmm_main()\n\n```c\nasmlinkage void\nvmm_main (struct multiboot_info *mi_arg)\n{\n:\n(\u4e2d\u7565)\n:\n        call_initfunc (\"global\");\n        start_all_processors (bsp_proc, ap_proc);\n}\n```\n\u6700\u7d42\u7684\u306b\u306f\u3000`start_all_processors ();` \u3092\u547c\u3093\u3067\u3044\u307e\u3059\uff0e\n\u76f4\u63a5 `start_all_processors ()` \u3092\u898b\u308b\u524d\u306b\uff0c\u5c11\u3057`call_initfunc()`\u7d61\u307f\u306e\u8aac\u660e\u3092\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u3053\u306e\u95a2\u6570\u306f\uff0cBitVisor \u306e\u521d\u671f\u5316\u306e\u51e6\u7406\u3067\u3088\u304f\u898b\u308b\u95a2\u6570\u3067\u3059\u306e\u3067\uff0e\n\n### call_initfunc \u3068 INITFUNC \u30de\u30af\u30ed\u306b\u3064\u3044\u3066\ncore/ \u4ee5\u4e0b\u3084 driver/ \u4ee5\u4e0b\u306b\u3042\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u6642\u3005 `INITFUNC(\"string0\", funcname)` \u307f\u305f\u3044\u306a\u30de\u30af\u30ed\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\n\u3053\u308c\u306f\uff0cBitVisor \u306e\u521d\u671f\u5316\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u95a2\u6570\u3092\u767b\u9332\u3059\u308b\u305f\u3081\u306e\u30de\u30af\u30ed\u3067\u3059\uff0e\n\u3067\u306f\uff0c\u3044\u3064\u547c\u3073\u51fa\u3055\u308c\u308b\u306e\u304b? \n\u305d\u308c\u306f\uff0c`call_initfunc()` \u304c\u547c\u3070\u308c\u305f\u3068\u304d\u3067\u3059\uff0e\n\u305f\u3060\uff0c`call_initfunc()` \u3092\u4e00\u5ea6\u547c\u3076\u3068\uff0c\u767b\u9332\u3057\u305f\u3059\u3079\u3066\u306e\u95a2\u6570\u304c\u4e00\u5ea6\u306b\u547c\u3070\u308c\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\n\n`call_initfunc(\"hoge\")` \u3068\u3059\u308b\u3068 `INITFUNC(\"hoge0, funcname)` \u306e\u3088\u3046\u306b\uff0c\u30de\u30af\u30ed\u306e\u7b2c\u4e00\u5f15\u6570\u306e\u6570\u5b57\u4ee5\u5916\u306e\u90e8\u5206\u304c\u30de\u30c3\u30c1\u3057\u305f\u3082\u306e\u304c\u547c\u3070\u308c\u307e\u3059\uff0e\n\u307e\u305f\uff0c`hoge0`\u306e\u6570\u5b57\u306e\u610f\u5473\u306f\uff0c\u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u9806\u5e8f\u306e\u5236\u5fa1\u3067\u3059\uff0e\n\u6570\u5b57\u304c\u5c0f\u3055\u3044\u3082\u306e\u304c\u5148\u306b\u547c\u3070\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\u4f8b\u3048\u3070\uff0c`INITFUNC(\"hoge0, funcname0)`\u3068`INITFUNC(\"hoge1, funcname1)` \u3068\u767b\u9332\u3057\u3066\uff0c`call_initfunc(\"hoge\")` \u3092\u547c\u3076\u3068\uff0c`funcname0()`\u306e\u6b21\u306b`funcname1()`\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\uff0e\n\n\u4e0a\u8a18\u306e`vmm_main()`\u5185\u306e`call_initfunc(\"global\")`\u304c\u547c\u3076\u95a2\u6570\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\n```\n$ find . -name \"*.[chsS]\" | xargs grep \"INITFUNC.*\\\"global\"\n./core/process.c:INITFUNC (\"global3\", process_init_global);\n./core/msg.c:INITFUNC (\"global4\", msg_init_global);\n./core/time.c:INITFUNC (\"global3\", time_init_global);\n./core/int.c:INITFUNC (\"global1\", int_init_global);\n./core/acpi.c:INITFUNC (\"global3\", acpi_init_global);\n./core/mm.c:INITFUNC (\"global2\", mm_init_global);\n./core/printf.c:INITFUNC (\"global0\", printf_init_global);\n./core/sleep.c:INITFUNC (\"global0\", sleep_init_global);\n./core/thread.c:INITFUNC (\"global3\", thread_init_global);\n./core/tty.c:INITFUNC (\"global0\", tty_init_global);\n./core/tty.c:INITFUNC (\"global3\", tty_init_global2);\n./core/seg.c:INITFUNC (\"global0\", segment_init_global);\n./core/panic.c:INITFUNC (\"global0\", panic_init_global);\n./core/panic.c:INITFUNC (\"global3\", panic_init_global3);\n./core/vmmcall_dbgsh.c:INITFUNC (\"global3\", vmmcall_dbgsh_init_global);\n./core/vmmcall_status.c:INITFUNC (\"global3\", vmmcall_status_init_global);\n./core/cpu_mmu_spt.c:INITFUNC (\"global4\", cpu_mmu_spt_init_global);\n./core/main.c:INITFUNC (\"global1\", print_boot_msg);\n./core/main.c:INITFUNC (\"global3\", copy_minios);\n./core/main.c:INITFUNC (\"global3\", get_shiftflags);\n./core/callrealmode.c:INITFUNC (\"global0\", callrealmode_init_global);\n```\n\n\u306a\u3093\u304b\u305f\u304f\u3055\u3093\u547c\u3070\u308c\u3066\u307e\u3059\u306d\uff0e\n\u3053\u308c\u5168\u90e8\u898b\u3066\u305f\u3089\u4eca\u5e74\u4e2d\u306b\u3053\u306e\u8a18\u4e8b\u304c\u66f8\u304d\u7d42\u308f\u3089\u306a\u3044\u306e\u3067\uff0c\u8208\u5473\u304c\u3042\u308b\u4eba\u306f\u898b\u3066\u304f\u3060\u3055\u3044\u3068\u3044\u3046\u3053\u3068\u3067\uff0e\n\n## core/ap.c start_all_processors ();\n\u3067\u306f\uff0c\u672c\u6d41\u306b\u3082\u3069\u308a\u307e\u3057\u3087\u3046\uff0e\n\n```c\nvoid\nstart_all_processors (void (*bsp_initproc) (void), void (*ap_initproc) (void))\n{\n        initproc_bsp = bsp_initproc;\n        initproc_ap = ap_initproc;\n        bsp_continue (bspinitproc1);\n}\n\n```\n\u6b21\u306e\u98db\u3073\u5148\u306f `bsp_continue()` \u3067\u3059\u306d\uff0e\n\n## core/ap.c bsp_continue (bspinitproc1)\n\n```c\nstatic void\nbsp_continue (asmlinkage void (*initproc_arg) (void))\n{\n        void *newstack;\n\n        newstack = alloc (VMM_STACKSIZE);\n        currentcpu->stackaddr = newstack;\n        asm_wrrsp_and_jmp ((ulong)newstack + VMM_STACKSIZE, initproc_arg);\n}\n```\n\n\u6700\u5f8c\u306e `asm_wrrsp_and_jmp ((ulong)newstack + VMM_STACKSIZE, initproc_arg);` \u3063\u3066\u306e\u3067`initproc_arg` \u306b\u98db\u3073\u307e\u3059\uff0e\n\u3053\u308c\u306f\u5f15\u6570\u3067\u6e21\u3055\u308c\u3066\u304f\u308b\u3082\u306e\u3067\uff0c\u5143\u3092\u305f\u3069\u308b\u3068\uff0c`bspinitproc1()`\u306b\u306a\u308a\u307e\u3059\uff0e\n\n## core/ap.c bspinitproc1()\n\n(\u4fee\u6b63 2015/12/2\uff17: if\u6587\u3092\u8aad\u307f\u9593\u9055\u3048\u3066\uff0c\u3044\u308d\u3044\u308d\u9593\u9055\u3048\u3066\u3044\u305f\u306e\u3067\u8a02\u6b63)\n\n```c\nstatic asmlinkage void\nbspinitproc1 (void)\n{\n        printf (\"Processor 0 (BSP)\\n\");\n:\n(\u4e2d\u7565)\n:\n        if (!uefi_booted) {\n                apinit_addr = 0xF000;\n                ap_start ();\n        } else {\n:\n(\u4e2d\u7565)\n:\n        initproc_bsp ();\n        panic (\"bspinitproc1\");\n}\n```\n\nap_start(); \u3063\u3066\u3044\u3046\u306e\u304c\uff0cAP\u3092\u30ad\u30c3\u30af\u3057\u3066\u308b\u307f\u305f\u3044\u3067\u3059\uff0e\nBSP \u306e\u51e6\u7406\u306f `initproc_bsp()` \u306b\u7d9a\u3044\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff0e\n`initproc_bsp()` \u306f\u5b9f\u306f\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3067\uff0c\u5b9f\u614b\u306f2\u3064\u524d\u304f\u3089\u3044\u306e\u95a2\u6570 `start_all_processors ()` \u3067\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\u8ffd\u3063\u3066\u3082\u3089\u3048\u3070\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u304c\uff0c\u3053\u308c\u306f `core/main.c` \u306e `bsp_proc()` \u3067\u3059\uff0e\n\n## core/main.c bsp_proc()\n\n\u307e\u305f\uff0cmain.c \u306b\u623b\u3063\u3066\u304d\u307e\u3057\u305f\uff0e\n\n```c\nstatic void\nbsp_proc (void)\n{\n        call_initfunc (\"bsp\");\n        call_parallel ();\n        call_initfunc (\"pcpu\");\n}\n```\n\n\u30d1\u30c3\u3068\u898b\u4e0d\u601d\u8b70\u306a\u30b3\u30fc\u30c9\u3067\u3059\uff0e\u3069\u3053\u306b\u3082\u98db\u3093\u3067\u884c\u3063\u3066\u308b\u6c17\u914d\u304c\u306a\u3044\u304b\u3089\u3067\u3059\uff0e\n\u305d\u308c\u304c\u306a\u305c\u4e0d\u601d\u8b70\u304b\u3068\u3044\u3046\u3068\uff0c\u3053\u306e\u95a2\u6570\u3092\u8aad\u3093\u3060 `bspinitproc1()` \u306f\u3053\u306e\u95a2\u6570\u304b\u3089\u623b\u3063\u3066\u304d\u305f\u3089\u3059\u304b\u3055\u305a `panic()`\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\u3053\u308c\u306f\u3064\u307e\u308a\uff0c\u6b63\u5e38\u306bBitVisor \u304c\u52d5\u3051\u3070`bsp_proc()`\u306f\u547c\u3073\u51fa\u3057\u304b\u3089\u623b\u3063\u3066\u3053\u306a\u3044\u306f\u305a\uff0c\u3068\u3044\u3046\u30b3\u30fc\u30c9\u3067\u3059\uff0e\n\u306a\u306e\u306b\uff0c\u3053\u306e\u30b3\u30fc\u30c9\uff0c\u30d1\u30c3\u3068\u898b\u666e\u901a\u306b\u623b\u3063\u3066\u3057\u307e\u3044\u305d\u3046\u306a\u30b3\u30fc\u30c9\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304b\uff0e\n\n`call_initfunc (\"pcpu\")` \u304c\u6700\u5f8c\u306b\u547c\u3076\u95a2\u6570\u304c\u602a\u3057\u305d\u3046\u3067\u3059\uff0e\n\u8abf\u3079\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\n\n\n```\n$ find . -name \"*.[chsS]\" | xargs grep \"INITFUNC.*\\\"pcpu\"\n./core/nmi_pass.c:INITFUNC (\"pcpu0\", nmi_pass_init_pcpu);\n./core/time.c:INITFUNC (\"pcpu4\", time_init_pcpu);\n./core/cache.c:INITFUNC (\"pcpu4\", cache_init_pcpu);\n./core/thread.c:INITFUNC (\"pcpu0\", thread_init_pcpu);\n./core/panic.c:INITFUNC (\"pcpu3\", panic_init_pcpu);\n./core/cpu_mmu_spt.c:INITFUNC (\"pcpu0\", cpu_mmu_spt_init_pcpu);\n./core/main.c:INITFUNC (\"pcpu2\", virtualization_init_pcpu);\n./core/main.c:INITFUNC (\"pcpu5\", create_pass_vm);\n```\n\n\u3069\u3046\u3082\uff0c`create_pass_vm()` \u3068\u3044\u3046\u306e\u304c\u6700\u5f8c\u306b\u547c\u3070\u308c\u308b\u3088\u3046\u3067\u3059\uff0e\n\u540d\u524d\u3082\u305d\u308c\u3063\u307d\u3044\u306e\u3067\uff0c\u304d\u3063\u3068\u3053\u308c\u3067\u3057\u3087\u3046\uff0e\n\n\n## core/main.c create_pass_vm()\n\n```c\nstatic void\ncreate_pass_vm (void)\n{\n:\n(\u4e2d\u7565)\n:\n        current->vmctl.start_vm ();\n        panic (\"VM stopped.\");\n}\n```\n\n\u306a\u3093\u304b\u9014\u4e2d\u3067\u3044\u308d\u3044\u308d\u3084\u3063\u3066\u307e\u3059\u304c\uff0c\u6700\u5f8c\u306f `current->vmctl.start_vm ();` \u3092\u547c\u3073\u307e\u3059\uff0e\n\u3053\u308c\u306f\uff0cIntel CPU \u306a\u3089 `vt_start_vm()`, AMD CPU \u306a\u3089 `svm_start_vm()` \u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\n\n## core/vt_main.c vt_start_vm()\n\n```c\nvoid\nvt_start_vm (void)\n{\n        current->exint.int_enabled ();\n        vt_paging_start ();\n        vt_mainloop ();\n}\n```\n\n\u6b21\u306f `vt_mainloop()` \u307f\u305f\u3044\u3067\u3059\u306d\uff0e\n\n## core/vt_main.c vt_mainloop()\n\n\u3053\u3053\u304c\uff0c\u7d42\u7740\u70b9\u3067\u3059\uff0e\n\n```c\nstatic void\nvt_mainloop (void)\n{\n\n        enum vmmerr err;\n        ulong cr0, acr;\n        u64 efer;\n\n        for (;;) {\n                schedule ();\n                vt_vmptrld (current->u.vt.vi.vmcs_region_phys);\n:\n(\u4e2d\u7565)\n:\n\n                        vt__vm_run ();\n:\n(\u4e2d\u7565)\n:\n                        vt__exit_reason ();\n                }\n        }\n}\n```\n\n\u672c\u5f53\u306f\u3068\u3066\u3082\u9577\u3044\u95a2\u6570\u306a\u306e\u3067\u3059\u304c\uff0c\u3044\u308d\u3044\u308d\u7565\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\uff0e\nBitVisor \u306f\u4e0a\u3067OS\u304c\u52d5\u3044\u3066\u308b\u3042\u3044\u3060\uff0c\u3053\u306e\u7121\u9650\u30eb\u30fc\u30d7\u3092\u3050\u308b\u3050\u308b\u3057\u3066\u3044\u307e\u3059\uff0e\n`vt__vm_run()` \u3067VMENTER\u3057\u3066\uff0cVMEXIT\u3059\u308b\u3068\uff0c\u3053\u306e\u95a2\u6570\u304b\u3089\u623b\u3063\u3066\u304d\u307e\u3059\uff0e\n`vt__vm_run()` \u304b\u3089\u623b\u3063\u3066\u304f\u308b\u3068\uff0c`vt__exit_reason()` \u3068\u3044\u3046\u95a2\u6570\u3092\u547c\u3073\u307e\u3059\uff0e\n\u3053\u308c\u306f\uff0cVMEXIT\u3057\u305f\u539f\u56e0\u306b\u5408\u308f\u305b\u3066\u5fc5\u8981\u306a\u51e6\u7406\u3092\u884c\u3046\u3082\u306e\u3067\u3059\uff0e\n\u4f8b\u3048\u3070\uff0cEPT violation \u304c\u8d77\u304d\u305f\u306a\u3089\uff0c\u5fc5\u8981\u306aEPT\u306e\u51e6\u7406\u3092\u3057\u307e\u3059\uff0e\n\u30d5\u30c3\u30af\u3059\u3079\u304dI/O\u3092\u767a\u884c\u3055\u308c\u3066\uff0cVMEXIT \u3057\u3066\u304d\u305f\u306a\u3089\uff0c\u30d5\u30c3\u30af\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\uff0e\n\n\n# AP \u306e\u65c5\n(\u4fee\u6b63 2015/12/26: \u3044\u308d\u3044\u308d\u9593\u9055\u3048\u3066\u3044\u305f\u306e\u3067\u8a02\u6b63)\n\n\u3053\u308c\u307e\u3067\u306f\uff0cBSP \u306e\u65c5\u3067\u3057\u305f\uff0e\nAP \u306e\u65b9\u306f\u3069\u3046\u3067\u3057\u3087\u3046\u304b?\nBSP \u304c\u30d6\u30fc\u30c8\u3059\u308b\u9014\u4e2d\u3067 `bspinitproc1()` \u3068\u3044\u3046\u95a2\u6570\u3092\u901a\u3063\u305f\u6642\u306b\uff0c~~`localapic_delayed_ap_start ap_start);`~~ `apstart()` \u3068\u3044\u3046\u95a2\u6570\u3092\u547c\u3073\u307e\u3057\u305f\uff0e\n~~\u3053\u306e\u95a2\u6570\u306f\uff0c\u3042\u3068\u3067(\u5177\u4f53\u7684\u306b\u306f\uff0c\u30b2\u30b9\u30c8OS\u304cAP\u3092\u8d77\u52d5\u3057\u3088\u3046\u3068\u3057\u305f\u3068\u304d)\u306b`ap_start()`\u3092\u547c\u3076\u3088\u3046\u306b\u767b\u9332\u3057\u3066\u304a\u304f\u95a2\u6570\u3067\u3059\uff0e~~\n\u3067\uff0c\u3053\u306e`ap_start()`\u306f\u6700\u7d42\u7684\u306bStart IPI \u3092\u9001\u4fe1\u3057\u3066AP\u3092\u8d77\u52d5\u3057\u307e\u3059\uff0e\n~~\u305f\u3076\u3093\uff0cAP\u3082`entry.s` \u306e `entry:` \u304b\u3089\u5b9f\u884c\u3092\u59cb\u3081\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u304a\u3082\u3044\u307e\u3059(\u50d5\u3082\u3088\u304f\u77e5\u3089\u306a\u3044\u306e\u3067\u3059\u3051\u3069\u3082...).~~\n\n~~`core/entry.s` `callmain64` \u306e\u7ae0\u3067\u8aac\u660e\u3057\u305f\u901a\u308a\uff0cAP\u306f`apinitproc0()`\u304b\u3089C\u306e\u30b3\u30fc\u30c9\u306b\u5165\u308a\u307e\u3059\uff0e~~\n~~\u3053\u3053\u304b\u3089\u8ffd\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff0e~~\n\n\n@hdk_2 \u3055\u3093\u304b\u3089\u3054\u6307\u6458\u306e\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u304d\u307e\u3057\u305f\uff0e\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff0e\n\n>AP\u306fentry:\u3058\u3083\u306a\u304f\u3066\u3067\u3059\u306d\u3001cpuinit_start:\u3068\u3044\u3046\u3068\u3053\u308d\u304b\u3089\u59cb\u307e\u308b\u30b3\u30fc\u30c9\u3092\u30011MiB\u672a\u6e80\u306e\u30a2\u30c9\u30ec\u30b9\u306b\u30b3\u30d4\u30fc\u3057\u305f\u3082\u306e\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u30b3\u30d4\u30fc\u306fap_start()\u95a2\u6570\u3067\u3084\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u898b\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3068\u306e\u3053\u3068\u3067\u3059\u306e\u3067\uff0cap_start() \u304b\u3089\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\n## core/ap.c ap_start()\n\n```c\nstatic void\nap_start (void)\n{\n        volatile u32 *num;\n        u8 *apinit;\n        u32 tmp;\n        int i;\n        u8 buf[5];\n        u8 *p;\n        u32 apinit_segment;\n\n        apinit_segment = (apinit_addr - APINIT_OFFSET) >> 4;\n        /* Put a \"ljmpw\" instruction to the physical address 0 */\n        p = mapmem_hphys (0, 5, MAPMEM_WRITE);\n        memcpy (buf, p, 5);\n        p[0] = 0xEA;            /* ljmpw */\n        p[1] = APINIT_OFFSET & 0xFF;\n        p[2] = APINIT_OFFSET >> 8;\n        p[3] = apinit_segment & 0xFF;\n        p[4] = apinit_segment >> 8;\n        apinit = mapmem (MAPMEM_HPHYS | MAPMEM_WRITE, apinit_addr,\n                         APINIT_SIZE);\n        ASSERT (apinit);\n        memcpy (apinit, cpuinit_start, APINIT_SIZE);\n        num = (volatile u32 *)APINIT_POINTER (apinit_procs);\n        apinitlock = (spinlock_t *)APINIT_POINTER (apinit_lock);\n        *num = 0;\n        spinlock_init (apinitlock);\n        i = 0;\n        ap_start_addr (0, ap_start_loopcond, &i);\n        for (;;) {\n                spinlock_lock (&ap_lock);\n                tmp = num_of_processors;\n                spinlock_unlock (&ap_lock);\n                if (*num == tmp)\n                        break;\n                usleep (1000000);\n        }\n        unmapmem ((void *)apinit, APINIT_SIZE);\n        memcpy (p, buf, 5);\n        unmapmem (p, 5);\n        ap_started = true;\n}\n```\n\n\u3056\u3063\u304f\u308a\u51e6\u7406\u306e\u6d41\u308c\u3092\u66f8\u304f\u3068\n\n1. 0x0\u756a\u5730\u306blong jump \u547d\u4ee4\u306e\u30b3\u30fc\u30c9\u3092\u7f6e\u304f (`p[0] = ... `\u304b\u3089 `p[4] = ...` \u3042\u305f\u308a)\n2. long jump \u306e\u98db\u3073\u5148\u306b`cpuinit_start`\u306e\u30b3\u30fc\u30c9\u3092\u7f6e\u304f(`memcpy (apinit, cpuinit_start, APINIT_SIZE);`)\n3. Startup IPI \u3092AP\u306b\u9001\u4fe1\u3059\u308b\uff0c\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306b0x0\u756a\u5730\u3092\u6307\u5b9a(`ap_start_addr (0, ap_start_loopcond, &i);`)\uff0e\n\n## core/entry.s cpuinit_start: ~ callmain64:\n\u3053\u306e\u9593\u306e\u51e6\u7406BSP\u3068\u5927\u5dee\u306a\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u6700\u5f8c\uff0cC\u306e\u30b3\u30fc\u30c9\u3078\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u304c\uff0cBSP\u306a\u3089 `vmm_main()` \u3060\u3063\u305f\u3068\u3053\u308d\u3092AP\u3060\u3068 `apinitproc0()` \u306b\u306a\u308b\u3068\u3053\u308d\u3067\uff0cBSP \u3068AP \u306e\u51e6\u7406\u306e\u6d41\u308c\u304c\u5909\u308f\u308a\u307e\u3059\uff0e\n\n\u3068\u3044\u3046\u308f\u3051\u3067\uff0c\u6b21\u306f`apinitproc0()`\u3092\u898b\u307e\u3059\uff0e\n\n\n\n## core/ap.c apinitproc0()\n\n```c\nasmlinkage void                                                                    \napinitproc0 (void)                                                                 \n{                                                                                  \n        newstack_tmp = alloc (VMM_STACKSIZE);                                      \n        asm_wrrsp_and_jmp ((ulong)newstack_tmp + VMM_STACKSIZE, apinitproc1);      \n} \n```\n\napinitproc1()\u3092\u547c\u3093\u3067\u307e\u3059\uff0e\n\n## core/ap.c apinitproc1()\n\n```c\nstatic asmlinkage void\napinitproc1 (void)\n{\n        void (*proc) (void);\n:\n(\u4e2d\u7565)\n:\n        proc = initproc_ap;\n        printf (\"Processor %d (AP)\\n\", num_of_processors);\n:\n(\u4e2d\u7565)\n:\n        proc ();\n}\n```\n\n`initproc_ap()` \u3092\u547c\u3093\u3067\u307e\u3059\uff0e\n\u3053\u308c\u306f\uff0cBSP \u304c`core/ap.c` `start_all_processors ();` \u306e\u4e2d\u3067\u30bb\u30c3\u30c8\u3057\u3066\u3044\u307e\u3057\u305f\uff0e\n\u8ffd\u3046\u3068\uff0c`core/main.c` `ap_proc()` \u3060\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n## core/main.c ap_proc()\n\n```c\nstatic void\nap_proc (void)\n{\n        call_initfunc (\"ap\");\n        call_parallel ();\n        call_initfunc (\"pcpu\");\n}\n```\n\n\u3053\u308c\u3082BSP\u540c\u69d8\uff0c`call_initfunc (\"pcpu\");` \u306e\u6700\u5f8c\u3067`create_pass_vm()`\u3092\u547c\u3073\u307e\u3059\uff0e\n\u3053\u3053\u304b\u3089\u5148\u306f\uff0cBSP\u3068\u540c\u3058\u3067\u3059\u306d\uff0e\n\n# \u304a\u308f\u308a\u306b\nentry.s \u304b\u3089vt_main() \u306evt_mainloop()\u306b\u81f3\u308b\u307e\u3067\u306e\u6d41\u308c\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u305f\uff0e\n\u3042\u307e\u308a\u8107\u9053\u306b\u305d\u308c\u305a\u306b\u672c\u6d41\u3060\u3051\u8ffd\u3063\u3066\u66f8\u3044\u3066\u307f\u3066\u3082\u7d50\u69cb\u306a\u91cf\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\u672c\u5f53\u306f\u3053\u306e\u9014\u4e2d\u3067\u30c9\u30e9\u30a4\u30d0\u306e\u521d\u671f\u5316\u3060\u3063\u305f\u308a\uff0cEPT\u306e\u521d\u671f\u5316\u3060\u3063\u305f\u308a\u3044\u308d\u3044\u308d\u3084\u3063\u3066\u3044\u307e\u3059\uff0e\n\n\u30d6\u30fc\u30c8\u306e\u6d41\u308c\u3092\u8ffd\u3046\u306e\u306f\u305f\u3044\u3066\u3044\u9762\u5012\u306a\u4f5c\u696d\u306a\u306e\u3067\uff0c\u305d\u3046\u3044\u3046\u4f5c\u696d\u306e\u52a9\u3051\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\uff0e\n"}