{"context": " More than 1 year has passed since last update.\u3059\u3053\u3057\u65b0\u3057\u3044\u65b9\u3067\u3059\n\nMain.cpp\n//\u306f\u3080\u304f\u3093 \u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc \u8a66\u4f5c\n# include <Siv3D.hpp>\n\nvoid createGrad(Image& image)\n{\n    const Vec2 center = Vec2(image.width, image.height) / 2;\n\n    const double maxLength = center.x;\n\n    Color col;\n\n    for (int y = 0; y < image.height; ++y)\n    {\n        for (int x = 0; x < image.width; ++x)\n        {\n            const Vec2 pos(x, y);\n\n            const double length = (center - pos).length();\n\n            const double value = length / maxLength;\n\n            col = ColorF(1.0 - Pow(value, 2.0));\n\n            image[y][x] = col;\n        }\n    }\n}\n\nclass SoundPlayer\n{\nprivate:\n\n    GUI m_guiBasic;\n\n    GUI m_guiSettings;\n\n    Sound m_sound;\n\n    Texture m_gradTexture;\n\n    Texture m_backTexture;\n\n    const Font m_font;\n\n    const Vec2 m_centerPos;\n\n    static const double m_freq[];\n\n    static const bool m_isWhite[];\n\n    static const String m_name[];\n\n    bool m_isRecording;\n\n    bool m_isShowingSetting;\n\n    int m_hideSettingCount;\npublic:\n\n    SoundPlayer()\n        : m_guiBasic{ GUISkin::Default({ 0, 0, 0 }) }, m_guiSettings(m_guiBasic.skin), \n        m_font(10), m_centerPos(320, 190), m_isRecording(false), m_isShowingSetting(false)\n    {\n        Image image(10, 10);\n\n        createGrad(image);\n\n        m_gradTexture = Texture(image);\n\n        m_guiBasic.addSlider(L\"Slider\", { 0.0, 1.0, 0.0, 500 });\n\n        m_guiBasic.addNewLine();\n\n        m_guiBasic.addButton(L\"PlayButton\", { L\"\u518d\u751f\" });\n\n        m_guiBasic.addButton(L\"PauseButton\", { L\"\u505c\u6b62\" });\n\n        m_guiBasic.addButton(L\"OpenButton\", { L\"\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\" });\n\n        m_guiBasic.addButton(L\"UseMic\", { L\"\u30de\u30a4\u30af\" });\n\n        m_guiBasic.setPos((Window::Width() - m_guiBasic.rect.w) / 2, 380);\n\n        m_guiSettings.addText(L\"setting\",{ L\"\u8a2d\u5b9a\" });\n\n        m_guiSettings.addNewLine();\n\n        m_guiSettings.addButton(L\"OpenPicture\", { L\"\u80cc\u666f\u753b\u50cf\" });\n\n        m_guiSettings.addNewLine();\n\n        m_guiSettings.addText({ L\"\u753b\u50cf\u660e\u308b\u3055\" });\n\n        m_guiSettings.addNewLine();\n\n        m_guiSettings.addSlider(L\"Brightness\", { 0.0, 1.0});\n\n        m_guiSettings.addNewLine();\n\n        m_guiSettings.addToggleSwitch(L\"scale\", { true });\n\n        m_guiSettings.addText(L\"\u97f3\u968e\u8868\", { L\"\u97f3\u968e\u8868\" });\n\n        m_guiSettings.addNewLine();\n\n        m_guiSettings.addToggleSwitch(L\"CircleOfFifth\", { false });\n\n        m_guiSettings.addText(L\"godoken\", { L\"\u4e94\u5ea6\u570f\" });\n\n        m_guiSettings.addNewLine();\n\n        m_guiSettings.addText({ L\"\u5149\u5f37\u5ea6\" });\n\n        m_guiSettings.addNewLine();\n\n        m_guiSettings.addSlider(L\"LightStrength\", { 0.0, 1.0, 0.5 });\n\n        m_guiSettings.addNewLine();\n\n        m_guiSettings.addText({ L\"\u8272\u5408\u3044\" });\n\n        m_guiSettings.addNewLine();\n\n        m_guiSettings.addSlider(L\"HSVStart\", { 0.0, 1.0 , 0.0});\n\n        m_hideSettingCount = 0;\n\n\n    }\n\n    void update()\n    {\n        m_guiBasic.button(L\"PlayButton\").setEnabled(m_sound && !m_sound.isPlaying);\n\n        m_guiBasic.button(L\"PauseButton\").setEnabled(m_sound.isPlaying);\n\n        m_guiBasic.button(L\"UseMic\").setEnabled(!m_isRecording );\n\n        m_guiBasic.slider(L\"Slider\").setEnabled(!m_isRecording);\n\n        if (m_guiBasic.button(L\"PlayButton\").pushed)\n        {\n            m_sound.play();\n\n            m_isRecording = false;\n\n            Recorder::Stop();\n        }\n        else if (m_guiBasic.button(L\"PauseButton\").pushed)\n        {\n            m_sound.pause();\n\n            m_isRecording = false;\n\n            Recorder::Stop();\n        }\n        else if (m_guiBasic.button(L\"OpenButton\").pushed)\n        {\n            m_sound.pause();\n\n            m_isRecording = false;\n\n            Recorder::Stop();\n\n            m_sound = Dialog::OpenSound();\n        }\n\n        if (m_guiBasic.slider(L\"Slider\").hasChanged)\n        {\n            m_sound.setPosSec(m_sound.lengthSec*m_guiBasic.slider(L\"Slider\").value);\n        }\n\n        m_guiBasic.slider(L\"Slider\").setValue(m_sound.posSec / m_sound.lengthSec);\n\n        if (m_guiBasic.button(L\"UseMic\").pushed)\n        {\n            if (!Recorder::Start()){\n\n            }\n            else\n            {\n                m_isRecording = true;\n\n                m_sound.pause();\n            }\n        }\n\n        if (m_guiSettings.button(L\"OpenPicture\").pushed)\n        {\n            m_backTexture = Dialog::OpenTexture();  \n        }\n\n        //\u8a2d\u5b9a\u306eGUI\u3092\u96a0\u3057\u305f\u308a\u3059\u308b\u51e6\u7406\n        const Rect guiRect = m_guiSettings.rect;\n\n        const Point nowPos(guiRect.pos);\n\n        const Point showPos(0, 0);\n\n        const Point remainPos(10, 0);\n\n        const Point hidePos(remainPos - Point(guiRect.size.x, 0));\n\n        const double mass = 0.9;\n\n        if (m_isShowingSetting)\n        {\n            if (!guiRect.mouseOver)\n            {\n                ++m_hideSettingCount;\n            }\n            else\n            {\n                m_hideSettingCount = 0;\n            }\n\n            if (m_hideSettingCount > 60)\n            {\n                m_isShowingSetting = false;\n            }\n        }\n        else\n        {\n            if (Rect(0,0,remainPos.x, guiRect.size.y).mouseOver)\n            {\n                m_isShowingSetting = true;\n            }\n        }\n\n        if (m_isShowingSetting)\n        {\n            m_guiSettings.setPos(((nowPos - showPos) * mass + showPos).asPoint());\n        }\n        else\n        {\n            m_guiSettings.setPos(((nowPos - hidePos) * mass + hidePos).asPoint());\n        }\n\n    }\n\n    void drawVisualizer() \n    {       \n\n        if (m_backTexture)\n        {\n            Vec2 size;\n\n            const double windowRatio = double(Window::Size().x) / double(Window::Size().y);\n\n            const double texRatio = double(m_backTexture.width) / double(m_backTexture.height);\n\n            if (windowRatio > texRatio)\n            {\n                size = Vec2(Window::Size().x, double(Window::Size().x) / texRatio);\n            }\n            else\n            {\n                size = Vec2(double(Window::Size().y) * texRatio, Window::Size().y);\n            }\n\n            RectF(size)(m_backTexture).drawAt(Window::Size() / 2,ColorF(m_guiSettings.slider(L\"Brightness\").value));\n        }\n\n        if (m_guiSettings.toggleSwitch(L\"scale\").isRight)\n        {\n            drawBackGround();\n        }\n\n        if (m_isRecording)\n        {\n            Waving::FFT(Recorder::GetWave(), Recorder::GetPos());\n        }\n        else\n        {\n            if (m_sound.isPlaying)Waving::FFT(m_sound);\n        }   \n\n        const float* p = Waving::FFTBuffer();\n\n        for (int i = 0; i<1760; ++i)\n        {\n            const double di = i;\n\n            const double radian = getRad(di);\n\n            const double radius = 0.0;\n\n            const double radiusOuter = 180.0;\n\n            const double radianWidth = Max((radian)-getRad(di - 1),0.0);\n\n            const double width = Clamp(radiusOuter * (radianWidth), 0.0,50.0);\n\n            const double size = Pow(p[i], 0.6f) * 800 * Log(di)/Log(10.0);\n\n            const double sliderStrength = Pow(10.0,m_guiSettings.slider(L\"LightStrength\").value * 2.0);\n\n            const double strength = sliderStrength * Pow(size , 2.0) * Log( di ) / 10000000.0;\n\n            const Vec2 pos = getPosFromRad(radian) * (radius + size / 2.0) + m_centerPos;\n\n            const double hsvStart = m_guiSettings.slider(L\"HSVStart\").value * 255;\n\n            const Color col = HSV(240 - Log(di) * 100 + hsvStart, 1.0, strength);\n\n            const Color colPie = HSV(240 - Log(di) * 100, 1.0, strength);\n\n            RectF(width, size).setCenter(pos).rotate(radian)(m_gradTexture).draw(col);//{ Palette::Black, Palette::Black, col, col });\n            //Circle(m_centerPos, size).drawPie(radian - (radianWidth) / 2.0, radianWidth, colPie);\n\n            const Vec2 posOuter = getPosFromRad(radian) * (radiusOuter) + m_centerPos;\n\n            RectF(width * 2, width * 2).setCenter(posOuter).rotate(radian)(m_gradTexture).draw(col);//{ Palette::Black, Palette::Black, col, col });\n        }\n\n        if (m_isRecording && Recorder::IsEnd()) // \u9332\u97f3\u304c\u7d42\u4e86\n        {\n            Recorder::Restart();\n        }\n\n        Rect(Window::Size())(m_gradTexture).draw(ColorF(0.0, 0.3, 0.3));\n\n    }\n\n    void drawBackGround()\n    {\n        for (int i = 0; i < 12; ++i)\n        {\n            const double startRad = getRad((m_freq[i] + m_freq[i + 1]) / 2.0) + 0.01;\n\n            const double angle = getRad((m_freq[i + 1] + m_freq[i + 2]) / 2.0) - startRad;\n\n            const Vec2 pos = getPosFromRad(getRad(m_freq[i])) * (160.0) + m_centerPos;\n\n            if (m_isWhite[i])\n            {\n                //Circle(m_centerPos, 180).drawPie(startRad, angle, Color(50));\n            }\n            else\n            {\n                //Circle(m_centerPos, 180).drawPie(startRad, angle, Color(20));\n            }\n\n            m_font.drawCenter(m_name[i], pos, Color(70));\n        }\n\n        for (int i = 0; i < 5; ++i)\n        {\n            Circle(m_centerPos, 170 + i * 3).drawFrame(1.0, 0.0, Color(70));\n        }\n    }\n\n    double getRad(double freq) \n    {\n        if (!m_guiSettings.toggleSwitch(L\"CircleOfFifth\").isRight)\n        {\n            return 2.0 * Pi * Log(freq) / Log(2.0) + 2.4;\n        }\n        else\n        {\n            return getRadCircleOfFifth(freq);\n        }\n    }\n\n    double getRadCircleOfFifth(double freq)\n    {\n        const double startRad = -0.7;\n\n        const double rad = 2.0 * Pi * Log(freq) / Log(2.0) + startRad;\n\n        const double baseRad = 2.0 * Pi * Log((m_freq[0] + m_freq[1]) / 2.0) / Log(2.0) + startRad;\n\n\n        if (int((rad - baseRad) / (2.0 * Pi / 12.0) + 100) % 2 == 0)\n        { \n            return rad;\n        }\n        else\n        {\n            return rad + Pi;\n        }\n    }\n\n    Vec2 getPosFromRad(double rad)\n    {\n        return Vec2(Sin(rad), -Cos(rad));\n    }\n};\n\nconst double SoundPlayer::m_freq[] = {\n    440.000000,\n    466.163762,\n    493.883301,\n    523.251131,\n    554.365262,\n    587.329536,\n    622.253967,\n    659.255114,\n    698.456463,\n    739.988845,\n    783.990872,\n    830.609395,\n    880.000000,\n    932.328\n};\n\nconst bool SoundPlayer::m_isWhite[] = {\n    false, true, true, false, true, false, true, false, true, true, false, true\n};\n\nconst String SoundPlayer::m_name[] = {\n    L\"D\", L\"D#\", L\"E\", L\"F\", L\"F#\", L\"G\", L\"G#\", L\"A\", L\"A#\", L\"B\", L\"C\", L\"C#\"\n};\n\nvoid Main()\n{\n    SoundPlayer soundPlayer;\n\n    Graphics::Set2DSamplerState(SamplerState::Clamp());\n\n    Graphics::Set2DBlendState(BlendState::Additive());\n\n    Graphics::SetBackground({ 0, 0, 0 });\n\n    Window::SetTitle(L\"\u306f\u3080\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc\");\n\n    while (System::Update())\n    {\n        soundPlayer.update();\n\n        soundPlayer.drawVisualizer();       \n    }\n}\n\n\n\u3059\u3053\u3057\u65b0\u3057\u3044\u65b9\u3067\u3059\n\n```Siv3D:Main.cpp\n//\u306f\u3080\u304f\u3093 \u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc \u8a66\u4f5c\n# include <Siv3D.hpp>\n\nvoid createGrad(Image& image)\n{\n\tconst Vec2 center = Vec2(image.width, image.height) / 2;\n\n\tconst double maxLength = center.x;\n\n\tColor col;\n\n\tfor (int y = 0; y < image.height; ++y)\n\t{\n\t\tfor (int x = 0; x < image.width; ++x)\n\t\t{\n\t\t\tconst Vec2 pos(x, y);\n\n\t\t\tconst double length = (center - pos).length();\n\n\t\t\tconst double value = length / maxLength;\n\n\t\t\tcol = ColorF(1.0 - Pow(value, 2.0));\n\n\t\t\timage[y][x] = col;\n\t\t}\n\t}\n}\n\nclass SoundPlayer\n{\nprivate:\n\n\tGUI m_guiBasic;\n\n\tGUI m_guiSettings;\n\n\tSound m_sound;\n\n\tTexture m_gradTexture;\n\n\tTexture m_backTexture;\n\n\tconst Font m_font;\n\n\tconst Vec2 m_centerPos;\n\n\tstatic const double m_freq[];\n\n\tstatic const bool m_isWhite[];\n\n\tstatic const String m_name[];\n\n\tbool m_isRecording;\n\n\tbool m_isShowingSetting;\n\n\tint m_hideSettingCount;\npublic:\n\n\tSoundPlayer()\n\t\t: m_guiBasic{ GUISkin::Default({ 0, 0, 0 }) }, m_guiSettings(m_guiBasic.skin), \n\t\tm_font(10), m_centerPos(320, 190), m_isRecording(false), m_isShowingSetting(false)\n\t{\n\t\tImage image(10, 10);\n\n\t\tcreateGrad(image);\n\n\t\tm_gradTexture = Texture(image);\n\n\t\tm_guiBasic.addSlider(L\"Slider\", { 0.0, 1.0, 0.0, 500 });\n\n\t\tm_guiBasic.addNewLine();\n\n\t\tm_guiBasic.addButton(L\"PlayButton\", { L\"\u518d\u751f\" });\n\n\t\tm_guiBasic.addButton(L\"PauseButton\", { L\"\u505c\u6b62\" });\n\n\t\tm_guiBasic.addButton(L\"OpenButton\", { L\"\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\" });\n\n\t\tm_guiBasic.addButton(L\"UseMic\", { L\"\u30de\u30a4\u30af\" });\n\n\t\tm_guiBasic.setPos((Window::Width() - m_guiBasic.rect.w) / 2, 380);\n\n\t\tm_guiSettings.addText(L\"setting\",{ L\"\u8a2d\u5b9a\" });\n\n\t\tm_guiSettings.addNewLine();\n\t\t\n\t\tm_guiSettings.addButton(L\"OpenPicture\", { L\"\u80cc\u666f\u753b\u50cf\" });\n\n\t\tm_guiSettings.addNewLine();\n\n\t\tm_guiSettings.addText({ L\"\u753b\u50cf\u660e\u308b\u3055\" });\n\n\t\tm_guiSettings.addNewLine();\n\n\t\tm_guiSettings.addSlider(L\"Brightness\", { 0.0, 1.0});\n\n\t\tm_guiSettings.addNewLine();\n\n\t\tm_guiSettings.addToggleSwitch(L\"scale\", { true });\n\n\t\tm_guiSettings.addText(L\"\u97f3\u968e\u8868\", { L\"\u97f3\u968e\u8868\" });\n\n\t\tm_guiSettings.addNewLine();\n\n\t\tm_guiSettings.addToggleSwitch(L\"CircleOfFifth\", { false });\n\n\t\tm_guiSettings.addText(L\"godoken\", { L\"\u4e94\u5ea6\u570f\" });\n\n\t\tm_guiSettings.addNewLine();\n\n\t\tm_guiSettings.addText({ L\"\u5149\u5f37\u5ea6\" });\n\n\t\tm_guiSettings.addNewLine();\n\n\t\tm_guiSettings.addSlider(L\"LightStrength\", { 0.0, 1.0, 0.5 });\n\n\t\tm_guiSettings.addNewLine();\n\n\t\tm_guiSettings.addText({ L\"\u8272\u5408\u3044\" });\n\n\t\tm_guiSettings.addNewLine();\n\n\t\tm_guiSettings.addSlider(L\"HSVStart\", { 0.0, 1.0 , 0.0});\n\n\t\tm_hideSettingCount = 0;\n\n\n\t}\n\n\tvoid update()\n\t{\n\t\tm_guiBasic.button(L\"PlayButton\").setEnabled(m_sound && !m_sound.isPlaying);\n\n\t\tm_guiBasic.button(L\"PauseButton\").setEnabled(m_sound.isPlaying);\n\n\t\tm_guiBasic.button(L\"UseMic\").setEnabled(!m_isRecording );\n\n\t\tm_guiBasic.slider(L\"Slider\").setEnabled(!m_isRecording);\n\n\t\tif (m_guiBasic.button(L\"PlayButton\").pushed)\n\t\t{\n\t\t\tm_sound.play();\n\n\t\t\tm_isRecording = false;\n\n\t\t\tRecorder::Stop();\n\t\t}\n\t\telse if (m_guiBasic.button(L\"PauseButton\").pushed)\n\t\t{\n\t\t\tm_sound.pause();\n\n\t\t\tm_isRecording = false;\n\n\t\t\tRecorder::Stop();\n\t\t}\n\t\telse if (m_guiBasic.button(L\"OpenButton\").pushed)\n\t\t{\n\t\t\tm_sound.pause();\n\n\t\t\tm_isRecording = false;\n\n\t\t\tRecorder::Stop();\n\n\t\t\tm_sound = Dialog::OpenSound();\n\t\t}\n\n\t\tif (m_guiBasic.slider(L\"Slider\").hasChanged)\n\t\t{\n\t\t\tm_sound.setPosSec(m_sound.lengthSec*m_guiBasic.slider(L\"Slider\").value);\n\t\t}\n\n\t\tm_guiBasic.slider(L\"Slider\").setValue(m_sound.posSec / m_sound.lengthSec);\n\n\t\tif (m_guiBasic.button(L\"UseMic\").pushed)\n\t\t{\n\t\t\tif (!Recorder::Start()){\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tm_isRecording = true;\n\n\t\t\t\tm_sound.pause();\n\t\t\t}\n\t\t}\n\n\t\tif (m_guiSettings.button(L\"OpenPicture\").pushed)\n\t\t{\n\t\t\tm_backTexture = Dialog::OpenTexture();\t\n\t\t}\n\n\t\t//\u8a2d\u5b9a\u306eGUI\u3092\u96a0\u3057\u305f\u308a\u3059\u308b\u51e6\u7406\n\t\tconst Rect guiRect = m_guiSettings.rect;\n\n\t\tconst Point nowPos(guiRect.pos);\n\n\t\tconst Point showPos(0, 0);\n\n\t\tconst Point remainPos(10, 0);\n\n\t\tconst Point hidePos(remainPos - Point(guiRect.size.x, 0));\n\n\t\tconst double mass = 0.9;\n\n\t\tif (m_isShowingSetting)\n\t\t{\n\t\t\tif (!guiRect.mouseOver)\n\t\t\t{\n\t\t\t\t++m_hideSettingCount;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tm_hideSettingCount = 0;\n\t\t\t}\n\t\t\t\n\t\t\tif (m_hideSettingCount > 60)\n\t\t\t{\n\t\t\t\tm_isShowingSetting = false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (Rect(0,0,remainPos.x, guiRect.size.y).mouseOver)\n\t\t\t{\n\t\t\t\tm_isShowingSetting = true;\n\t\t\t}\n\t\t}\n\n\t\tif (m_isShowingSetting)\n\t\t{\n\t\t\tm_guiSettings.setPos(((nowPos - showPos) * mass + showPos).asPoint());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tm_guiSettings.setPos(((nowPos - hidePos) * mass + hidePos).asPoint());\n\t\t}\n\n\t}\n\n\tvoid drawVisualizer() \n\t{\t\t\n\n\t\tif (m_backTexture)\n\t\t{\n\t\t\tVec2 size;\n\n\t\t\tconst double windowRatio = double(Window::Size().x) / double(Window::Size().y);\n\n\t\t\tconst double texRatio = double(m_backTexture.width) / double(m_backTexture.height);\n\n\t\t\tif (windowRatio > texRatio)\n\t\t\t{\n\t\t\t\tsize = Vec2(Window::Size().x, double(Window::Size().x) / texRatio);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsize = Vec2(double(Window::Size().y) * texRatio, Window::Size().y);\n\t\t\t}\n\n\t\t\tRectF(size)(m_backTexture).drawAt(Window::Size() / 2,ColorF(m_guiSettings.slider(L\"Brightness\").value));\n\t\t}\n\n\t\tif (m_guiSettings.toggleSwitch(L\"scale\").isRight)\n\t\t{\n\t\t\tdrawBackGround();\n\t\t}\n\n\t\tif (m_isRecording)\n\t\t{\n\t\t\tWaving::FFT(Recorder::GetWave(), Recorder::GetPos());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (m_sound.isPlaying)Waving::FFT(m_sound);\n\t\t}\t\n\n\t\tconst float* p = Waving::FFTBuffer();\n\n\t\tfor (int i = 0; i<1760; ++i)\n\t\t{\n\t\t\tconst double di = i;\n\n\t\t\tconst double radian = getRad(di);\n\n\t\t\tconst double radius = 0.0;\n\n\t\t\tconst double radiusOuter = 180.0;\n\n\t\t\tconst double radianWidth = Max((radian)-getRad(di - 1),0.0);\n\n\t\t\tconst double width = Clamp(radiusOuter * (radianWidth), 0.0,50.0);\n\n\t\t\tconst double size = Pow(p[i], 0.6f) * 800 * Log(di)/Log(10.0);\n\n\t\t\tconst double sliderStrength = Pow(10.0,m_guiSettings.slider(L\"LightStrength\").value * 2.0);\n\n\t\t\tconst double strength = sliderStrength * Pow(size , 2.0) * Log( di ) / 10000000.0;\n\n\t\t\tconst Vec2 pos = getPosFromRad(radian) * (radius + size / 2.0) + m_centerPos;\n\n\t\t\tconst double hsvStart = m_guiSettings.slider(L\"HSVStart\").value * 255;\n\n\t\t\tconst Color col = HSV(240 - Log(di) * 100 + hsvStart, 1.0, strength);\n\n\t\t\tconst Color colPie = HSV(240 - Log(di) * 100, 1.0, strength);\n\n\t\t\tRectF(width, size).setCenter(pos).rotate(radian)(m_gradTexture).draw(col);//{ Palette::Black, Palette::Black, col, col });\n\t\t\t//Circle(m_centerPos, size).drawPie(radian - (radianWidth) / 2.0, radianWidth, colPie);\n\n\t\t\tconst Vec2 posOuter = getPosFromRad(radian) * (radiusOuter) + m_centerPos;\n\n\t\t\tRectF(width * 2, width * 2).setCenter(posOuter).rotate(radian)(m_gradTexture).draw(col);//{ Palette::Black, Palette::Black, col, col });\n\t\t}\n\t\t\n\t\tif (m_isRecording && Recorder::IsEnd()) // \u9332\u97f3\u304c\u7d42\u4e86\n\t\t{\n\t\t\tRecorder::Restart();\n\t\t}\n\t\t\n\t\tRect(Window::Size())(m_gradTexture).draw(ColorF(0.0, 0.3, 0.3));\n\t\t\n\t}\n\n\tvoid drawBackGround()\n\t{\n\t\tfor (int i = 0; i < 12; ++i)\n\t\t{\n\t\t\tconst double startRad = getRad((m_freq[i] + m_freq[i + 1]) / 2.0) + 0.01;\n\n\t\t\tconst double angle = getRad((m_freq[i + 1] + m_freq[i + 2]) / 2.0) - startRad;\n\n\t\t\tconst Vec2 pos = getPosFromRad(getRad(m_freq[i])) * (160.0) + m_centerPos;\n\n\t\t\tif (m_isWhite[i])\n\t\t\t{\n\t\t\t\t//Circle(m_centerPos, 180).drawPie(startRad, angle, Color(50));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Circle(m_centerPos, 180).drawPie(startRad, angle, Color(20));\n\t\t\t}\n\n\t\t\tm_font.drawCenter(m_name[i], pos, Color(70));\n\t\t}\n\n\t\tfor (int i = 0; i < 5; ++i)\n\t\t{\n\t\t\tCircle(m_centerPos, 170 + i * 3).drawFrame(1.0, 0.0, Color(70));\n\t\t}\n\t}\n\n\tdouble getRad(double freq) \n\t{\n\t\tif (!m_guiSettings.toggleSwitch(L\"CircleOfFifth\").isRight)\n\t\t{\n\t\t\treturn 2.0 * Pi * Log(freq) / Log(2.0) + 2.4;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn getRadCircleOfFifth(freq);\n\t\t}\n\t}\n\n\tdouble getRadCircleOfFifth(double freq)\n\t{\n\t\tconst double startRad = -0.7;\n\n\t\tconst double rad = 2.0 * Pi * Log(freq) / Log(2.0) + startRad;\n\n\t\tconst double baseRad = 2.0 * Pi * Log((m_freq[0] + m_freq[1]) / 2.0) / Log(2.0) + startRad;\n\n\n\t\tif (int((rad - baseRad) / (2.0 * Pi / 12.0) + 100) % 2 == 0)\n\t\t{ \n\t\t\treturn rad;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn rad + Pi;\n\t\t}\n\t}\n\n\tVec2 getPosFromRad(double rad)\n\t{\n\t\treturn Vec2(Sin(rad), -Cos(rad));\n\t}\n};\n\nconst double SoundPlayer::m_freq[] = {\n\t440.000000,\n\t466.163762,\n\t493.883301,\n\t523.251131,\n\t554.365262,\n\t587.329536,\n\t622.253967,\n\t659.255114,\n\t698.456463,\n\t739.988845,\n\t783.990872,\n\t830.609395,\n\t880.000000,\n\t932.328\n};\n\nconst bool SoundPlayer::m_isWhite[] = {\n\tfalse, true, true, false, true, false, true, false, true, true, false, true\n};\n\nconst String SoundPlayer::m_name[] = {\n\tL\"D\", L\"D#\", L\"E\", L\"F\", L\"F#\", L\"G\", L\"G#\", L\"A\", L\"A#\", L\"B\", L\"C\", L\"C#\"\n};\n\nvoid Main()\n{\n\tSoundPlayer soundPlayer;\n\n\tGraphics::Set2DSamplerState(SamplerState::Clamp());\n\n\tGraphics::Set2DBlendState(BlendState::Additive());\n\n\tGraphics::SetBackground({ 0, 0, 0 });\n\n\tWindow::SetTitle(L\"\u306f\u3080\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc\");\n\t\t\n\twhile (System::Update())\n\t{\n\t\tsoundPlayer.update();\n\n\t\tsoundPlayer.drawVisualizer();\t\t\n\t}\n}\n```", "tags": ["Siv3D"]}