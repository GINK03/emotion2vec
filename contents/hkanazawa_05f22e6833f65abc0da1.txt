{"context": "\u793e\u5185\u98f2\u307f\u4f1a\u7528\u306e\u30cd\u30bf\u3067\u3059  \n\u79c1\u306e\u6240\u5c5e\u30c1\u30fc\u30e0\u3067\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u308bSlack\u306eEmoji reactions\u3092\u96c6\u8a08\u3057\u307e\u3057\u305f\u3002\n\n\u7d50\u679c\n\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u308bSlack Emoji reaction\u4e0a\u4f4d7\u3064\u3067\u3059\u3002\n\u203b\u6570\u5024\u306f\u4f7f\u7528\u3055\u308c\u305f\u56de\u6570\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u6700\u3082\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u306f  (:ok_woman:) \u3067\u3057\u305f\u3002\u300c\u4e86\u89e3\u300d\u306e\u3064\u3082\u308a\u3067\u3088\u304f\u4f7f\u308f\u308c\u307e\u3059\u306d\u3002  \uff08:bow:\uff09\u3082\u300c\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u300d\u3068\u3044\u3046\u611f\u899a\u3067\u4f7f\u308f\u308c\u3084\u3059\u3044\u3002\n\n\u96c6\u8a08\u624b\u9806\n\nSlack\u304b\u3089\u30c1\u30fc\u30e0\u306e\u30ed\u30b0\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n\n\nhttps://get.slack.help/hc/en-us/articles/201658943-Export-your-team-s-Slack-history\n\n\n\nOwner\u304bAdmin\u306e\u6a29\u9650\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u89e3\u51cd\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n\n users.json\n\n channels.json\n\n integration_logs.json\n\n general\n\n\n\n 2015-08-03.json\n\n 2015-08-04.json\n...\n\n\n\n random\n\n\n\n 2015-08-03.json\n\n 2015-08-04.json\n...\n\n\n...\n\n\n\u30c1\u30e3\u30cd\u30eb\u3054\u3068\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u65e5\u5225\u306e\u30d5\u30a1\u30a4\u30eb\u306bJSON\u5f62\u5f0f\u3067\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u30ed\u30b0\u3092tsv\u5f62\u5f0f\u306b\u5909\u63db\nreactionss\u3060\u3051\u6570\u3048\u308b\u306a\u3089JSON\u304b\u3089\u76f4\u63a5\u96c6\u8a08\u3082\u3067\u304d\u305d\u3046\u3067\u3059\u304c\u3001\u6c4e\u7528\u7684\u306b\u5206\u6790\u3057\u3084\u3059\u3044\u3088\u3046tsv\u306b\u5909\u63db\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u4eca\u56de\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f Python 3.5.1 \u3067\u5b9f\u884c\u3057\u307e\u3057\u305f\u3002\n\nconvert_to_tsv.py\n# -*- coding: utf-8 -*-\n# Export\u3057\u305fSlack\u306e\u5c65\u6b74\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30ed\u30b0\u3092tsv\u306b\u51fa\u529b\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\n\nimport json\nimport os\nimport shutil\nimport sys\nimport zipfile\n\n\nclass SlackLogs(object):\n\n    def __init__(self, filepath):\n        self.__cwd = os.getcwd()\n        self.__tmp_dir = '__tmp'\n        self.__unzip(filepath)\n        self.__users = self.__fetch_users()\n        self.__channels = self.__fetch_channels()\n\n    def __unzip(self, filepath):\n        self.delete_tmp_dir()\n        os.mkdir(self.__tmp_dir)\n        with zipfile.ZipFile(filepath, 'r') as zf:\n            zf.extractall(path=self.__tmp_dir)\n\n    def __fetch_users(self):\n        users = {}\n\n        u_fp = os.path.join(self.__tmp_dir, 'users.json')\n        with open(u_fp, 'r') as f:\n            data = json.load(f)\n        for u in data:\n            users[u['id']] = u['name']\n        return users\n\n    def __fetch_channels(self):\n        fp = os.path.join(self.__tmp_dir, 'channels.json')\n        with open(fp, 'r') as f:\n            data = json.load(f)\n        return [c['name'] for c in data]\n\n    def __map_to_user_name(self, user_id):\n        if user_id in self.__users:\n            return self.__users[user_id]\n        return user_id\n\n    def __arrange_message(self, message, channel):\n        def optional_user(m):\n            if 'user' not in m:\n                return ''\n            return self.__map_to_user_name(m['user'])\n\n        def optional_text(m):\n            if 'text' not in m:\n                return ''\n            return m['text']\n\n        def arrange_reactions(m):\n            if 'reactions' not in m:\n                return []\n            a = []\n            for r in m['reactions']:\n                for u in r['users']:\n                    a.append({'name': r['name'], 'user': self.__map_to_user_name(u)})\n            return a\n\n        return {\n            'channel':   channel,\n            'ts':        message['ts'],\n            'type':      message['type'],\n            'user':      optional_user(message),\n            'text':      optional_text(message),\n            'reactions': arrange_reactions(message)\n        }\n\n    def __fetch_messages(self):\n        def fetch_messages_from_a_channel(channel):\n            files = os.listdir(os.path.join(self.__tmp_dir, channel))\n            messages = []\n            for file in files:\n                f_path = os.path.join(self.__cwd, self.__tmp_dir, channel, file)\n                with open(f_path, 'r') as f:\n                    data = json.load(f)\n                    messages.extend([self.__arrange_message(m, channel) for m in data])\n            return messages\n\n        messages = []\n        for c in self.__channels:\n            messages.extend(fetch_messages_from_a_channel(c))\n\n        messages.sort(key=lambda x: x['ts'])\n        return messages\n\n    def output_to_tsv(self):\n        messages = self.__fetch_messages()\n        f_path = os.path.join(self.__cwd, 'slack_logs.tsv')\n        with open(f_path, 'w') as f:\n            for m in messages:\n                f.write('\\t'.join([\n                    m['channel'],\n                    m['ts'],\n                    m['type'],\n                    m['user'],\n                    m['text'].replace('\\t', '\\\\t').replace('\\n', '\\\\n').replace('\\r', '\\\\r'),\n                    json.dumps(m['reactions'])\n                ]))\n                f.write('\\n')\n        return\n\n    def delete_tmp_dir(self):\n        if os.path.exists(self.__tmp_dir):\n            shutil.rmtree(self.__tmp_dir)\n\nif __name__ == '__main__':\n    filepath = os.path.join(os.getcwd(), sys.argv[1])\n    if not os.path.exists(filepath):\n        print('Not found {}'.format(filepath))\n        exit()\n    slack_logs = SlackLogs(filepath)\n    slack_logs.output_to_tsv()\n    slack_logs.delete_tmp_dir()\n    print('Finised!')\n\n\n\n\u5b9f\u884c\u3068\u78ba\u8a8d\n$ ls\nconvert_to_tsv.py  Export\u3057\u305f\u30d5\u30a1\u30a4\u30eb.zip\n$ python convert_to_tsv.py Exported_Files_from_Slack.zip\nFinished!\n$ ls\nconvert_to_tsv.py  Export\u3057\u305f\u30d5\u30a1\u30a4\u30eb.zip  slack_logs.tsv\n\n\n\nEmoji\u3054\u3068\u306b\u30ab\u30a6\u30f3\u30c8\u3059\u308b\n\u6b21\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u5168\u671f\u9593\u3001\u5168\u30c1\u30e3\u30cd\u30eb\u3001\u5168\u30e6\u30fc\u30b6\u30fc\u306b\u304a\u3051\u308bEmoji\u3054\u3068\u306ereaction\u56de\u6570\u3092\u96c6\u8a08\u3057\u307e\u3059\u3002\n\ncount_emoji_reactions.py\n# -*- coding: utf-8 -*-\n# tsv\u5f62\u5f0f\u306eSlack\u30ed\u30b0\u5c65\u6b74\u304b\u3089\u96c6\u8a08\u3059\u308b\n\nimport json\nimport os\nimport shutil\nimport sys\nimport zipfile\nimport re\nimport datetime\n\n\ndef count_emoji_reactions(logs):\n    reactions = {}\n    for m in logs:\n        for r in m['reactions']:\n            reactions.setdefault(r['name'], 0)\n            reactions[r['name']] += 1\n\n    for k, v in sorted(reactions.items(), key=lambda x: -x[1]):\n        print(':{}: : {}'.format(k, v))\n\n    return\n\ndef read_tsv(filepath):\n    def format_log(line):\n        log = line.rstrip().split('\\t')\n        try:\n            return {\n                'channel':   log[0],\n                'ts':        float(log[1]),\n                'type':      log[2],\n                'user':      log[3],\n                'text':      log[4],\n                'reactions': json.loads(log[5])\n            }\n        except:\n            print(log)\n            exit()\n\n    with open(filepath, 'r') as f:\n        return [format_log(l) for l in f]\n\nif __name__ == '__main__':\n    filepath = os.path.join(os.getcwd(), sys.argv[1])\n    if not os.path.exists(filepath):\n        print('Not found {}'.format(filepath))\n        exit()\n    logs = read_tsv(filepath)\n    count_emoji_reactions(logs)\n\n\n\n\u5b9f\u884c\u3068\u78ba\u8a8d\n$ ls\nconvert_to_tsv.py  count_emoji_reactions.py  Export\u3057\u305f\u30d5\u30a1\u30a4\u30eb.zip  slack_logs.tsv\n$ python count_emoji_reactions.py slack_logs.tsv\n:ok_woman: : 942\n:bow: : 645\n:+1: : 597\n:raising_hand: : 465\n:clap: : 298\n:sushi_thanks: : 260\n:pray: : 169\n:sushi_kirakira: : 141\n:tada: : 93\n:sushi_yeah: : 92\n:sushi_surprised: : 69\n:innocent: : 67\n:thinking_face: : 62\n:meat_on_bone: : 58\n:grinning: : 54\n:eyes: : 50\n:sushi_yes: : 43\n:ok_hand: : 42\n:smiley: : 42\n:beastie: : 32\n...\n\n\n\u3053\u306e\u307e\u307e\u3067\u306f\u5473\u6c17\u306a\u3044\u306e\u3067\u7d50\u679c\u3092Slack\u306b\u30b3\u30d4\u30da\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\n\u793e\u5185\u98f2\u307f\u4f1a\u7528\u306e\u30cd\u30bf\u3067\u3059 :wink: :beers:\n\u79c1\u306e\u6240\u5c5e\u30c1\u30fc\u30e0\u3067\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u308bSlack\u306eEmoji reactions\u3092\u96c6\u8a08\u3057\u307e\u3057\u305f\u3002\n\n# \u7d50\u679c\n\n\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u308bSlack Emoji reaction\u4e0a\u4f4d7\u3064\u3067\u3059\u3002\n*\u203b\u6570\u5024\u306f\u4f7f\u7528\u3055\u308c\u305f\u56de\u6570*\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-09-16 17.38.40.png](https://qiita-image-store.s3.amazonaws.com/0/79127/0359e04b-b048-a7d6-1018-5ec0ddf98efe.png)\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u6700\u3082\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u306f :ok_woman: (`:ok_woman:`) \u3067\u3057\u305f\u3002\u300c\u4e86\u89e3\u300d\u306e\u3064\u3082\u308a\u3067\u3088\u304f\u4f7f\u308f\u308c\u307e\u3059\u306d\u3002 :bow: \uff08`:bow:`\uff09\u3082\u300c\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u300d\u3068\u3044\u3046\u611f\u899a\u3067\u4f7f\u308f\u308c\u3084\u3059\u3044\u3002\n\n# \u96c6\u8a08\u624b\u9806\n\n## Slack\u304b\u3089\u30c1\u30fc\u30e0\u306e\u30ed\u30b0\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\n\n* \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n  * https://get.slack.help/hc/en-us/articles/201658943-Export-your-team-s-Slack-history\n\nOwner\u304bAdmin\u306e\u6a29\u9650\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u89e3\u51cd\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n------\n* :page_facing_up: users.json\n* :page_facing_up: channels.json\n* :page_facing_up: integration_logs.json\n* :file_folder: general\n  * :page_facing_up: 2015-08-03.json\n  * :page_facing_up: 2015-08-04.json\n  * ...\n* :file_folder: random\n  * :page_facing_up: 2015-08-03.json\n  * :page_facing_up: 2015-08-04.json\n  * ...\n* ...\n\n------\n\n\u30c1\u30e3\u30cd\u30eb\u3054\u3068\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u65e5\u5225\u306e\u30d5\u30a1\u30a4\u30eb\u306bJSON\u5f62\u5f0f\u3067\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n## \u30ed\u30b0\u3092tsv\u5f62\u5f0f\u306b\u5909\u63db \n\nreactionss\u3060\u3051\u6570\u3048\u308b\u306a\u3089JSON\u304b\u3089\u76f4\u63a5\u96c6\u8a08\u3082\u3067\u304d\u305d\u3046\u3067\u3059\u304c\u3001\u6c4e\u7528\u7684\u306b\u5206\u6790\u3057\u3084\u3059\u3044\u3088\u3046tsv\u306b\u5909\u63db\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u4eca\u56de\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f `Python 3.5.1` \u3067\u5b9f\u884c\u3057\u307e\u3057\u305f\u3002\n\n```py3:convert_to_tsv.py\n# -*- coding: utf-8 -*-\n# Export\u3057\u305fSlack\u306e\u5c65\u6b74\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30ed\u30b0\u3092tsv\u306b\u51fa\u529b\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\n\nimport json\nimport os\nimport shutil\nimport sys\nimport zipfile\n\n\nclass SlackLogs(object):\n\n    def __init__(self, filepath):\n        self.__cwd = os.getcwd()\n        self.__tmp_dir = '__tmp'\n        self.__unzip(filepath)\n        self.__users = self.__fetch_users()\n        self.__channels = self.__fetch_channels()\n\n    def __unzip(self, filepath):\n        self.delete_tmp_dir()\n        os.mkdir(self.__tmp_dir)\n        with zipfile.ZipFile(filepath, 'r') as zf:\n            zf.extractall(path=self.__tmp_dir)\n\n    def __fetch_users(self):\n        users = {}\n\n        u_fp = os.path.join(self.__tmp_dir, 'users.json')\n        with open(u_fp, 'r') as f:\n            data = json.load(f)\n        for u in data:\n            users[u['id']] = u['name']\n        return users\n\n    def __fetch_channels(self):\n        fp = os.path.join(self.__tmp_dir, 'channels.json')\n        with open(fp, 'r') as f:\n            data = json.load(f)\n        return [c['name'] for c in data]\n\n    def __map_to_user_name(self, user_id):\n        if user_id in self.__users:\n            return self.__users[user_id]\n        return user_id\n\n    def __arrange_message(self, message, channel):\n        def optional_user(m):\n            if 'user' not in m:\n                return ''\n            return self.__map_to_user_name(m['user'])\n\n        def optional_text(m):\n            if 'text' not in m:\n                return ''\n            return m['text']\n\n        def arrange_reactions(m):\n            if 'reactions' not in m:\n                return []\n            a = []\n            for r in m['reactions']:\n                for u in r['users']:\n                    a.append({'name': r['name'], 'user': self.__map_to_user_name(u)})\n            return a\n\n        return {\n            'channel':   channel,\n            'ts':        message['ts'],\n            'type':      message['type'],\n            'user':      optional_user(message),\n            'text':      optional_text(message),\n            'reactions': arrange_reactions(message)\n        }\n\n    def __fetch_messages(self):\n        def fetch_messages_from_a_channel(channel):\n            files = os.listdir(os.path.join(self.__tmp_dir, channel))\n            messages = []\n            for file in files:\n                f_path = os.path.join(self.__cwd, self.__tmp_dir, channel, file)\n                with open(f_path, 'r') as f:\n                    data = json.load(f)\n                    messages.extend([self.__arrange_message(m, channel) for m in data])\n            return messages\n\n        messages = []\n        for c in self.__channels:\n            messages.extend(fetch_messages_from_a_channel(c))\n\n        messages.sort(key=lambda x: x['ts'])\n        return messages\n\n    def output_to_tsv(self):\n        messages = self.__fetch_messages()\n        f_path = os.path.join(self.__cwd, 'slack_logs.tsv')\n        with open(f_path, 'w') as f:\n            for m in messages:\n                f.write('\\t'.join([\n                    m['channel'],\n                    m['ts'],\n                    m['type'],\n                    m['user'],\n                    m['text'].replace('\\t', '\\\\t').replace('\\n', '\\\\n').replace('\\r', '\\\\r'),\n                    json.dumps(m['reactions'])\n                ]))\n                f.write('\\n')\n        return\n\n    def delete_tmp_dir(self):\n        if os.path.exists(self.__tmp_dir):\n            shutil.rmtree(self.__tmp_dir)\n\nif __name__ == '__main__':\n    filepath = os.path.join(os.getcwd(), sys.argv[1])\n    if not os.path.exists(filepath):\n        print('Not found {}'.format(filepath))\n        exit()\n    slack_logs = SlackLogs(filepath)\n    slack_logs.output_to_tsv()\n    slack_logs.delete_tmp_dir()\n    print('Finised!')\n```\n\n```bash:\u5b9f\u884c\u3068\u78ba\u8a8d\n$ ls\nconvert_to_tsv.py  Export\u3057\u305f\u30d5\u30a1\u30a4\u30eb.zip\n$ python convert_to_tsv.py Exported_Files_from_Slack.zip\nFinished!\n$ ls\nconvert_to_tsv.py  Export\u3057\u305f\u30d5\u30a1\u30a4\u30eb.zip  slack_logs.tsv\n```\n\n\n\n# Emoji\u3054\u3068\u306b\u30ab\u30a6\u30f3\u30c8\u3059\u308b\n\n\u6b21\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u5168\u671f\u9593\u3001\u5168\u30c1\u30e3\u30cd\u30eb\u3001\u5168\u30e6\u30fc\u30b6\u30fc\u306b\u304a\u3051\u308bEmoji\u3054\u3068\u306ereaction\u56de\u6570\u3092\u96c6\u8a08\u3057\u307e\u3059\u3002\n\n```py3:count_emoji_reactions.py\n# -*- coding: utf-8 -*-\n# tsv\u5f62\u5f0f\u306eSlack\u30ed\u30b0\u5c65\u6b74\u304b\u3089\u96c6\u8a08\u3059\u308b\n\nimport json\nimport os\nimport shutil\nimport sys\nimport zipfile\nimport re\nimport datetime\n\n\ndef count_emoji_reactions(logs):\n    reactions = {}\n    for m in logs:\n        for r in m['reactions']:\n            reactions.setdefault(r['name'], 0)\n            reactions[r['name']] += 1\n\n    for k, v in sorted(reactions.items(), key=lambda x: -x[1]):\n        print(':{}: : {}'.format(k, v))\n\n    return\n\ndef read_tsv(filepath):\n    def format_log(line):\n        log = line.rstrip().split('\\t')\n        try:\n            return {\n                'channel':   log[0],\n                'ts':        float(log[1]),\n                'type':      log[2],\n                'user':      log[3],\n                'text':      log[4],\n                'reactions': json.loads(log[5])\n            }\n        except:\n            print(log)\n            exit()\n\n    with open(filepath, 'r') as f:\n        return [format_log(l) for l in f]\n\nif __name__ == '__main__':\n    filepath = os.path.join(os.getcwd(), sys.argv[1])\n    if not os.path.exists(filepath):\n        print('Not found {}'.format(filepath))\n        exit()\n    logs = read_tsv(filepath)\n    count_emoji_reactions(logs)\n```\n\n```bash:\u5b9f\u884c\u3068\u78ba\u8a8d\n$ ls\nconvert_to_tsv.py  count_emoji_reactions.py  Export\u3057\u305f\u30d5\u30a1\u30a4\u30eb.zip  slack_logs.tsv\n$ python count_emoji_reactions.py slack_logs.tsv\n:ok_woman: : 942\n:bow: : 645\n:+1: : 597\n:raising_hand: : 465\n:clap: : 298\n:sushi_thanks: : 260\n:pray: : 169\n:sushi_kirakira: : 141\n:tada: : 93\n:sushi_yeah: : 92\n:sushi_surprised: : 69\n:innocent: : 67\n:thinking_face: : 62\n:meat_on_bone: : 58\n:grinning: : 54\n:eyes: : 50\n:sushi_yes: : 43\n:ok_hand: : 42\n:smiley: : 42\n:beastie: : 32\n...\n```\n\n\u3053\u306e\u307e\u307e\u3067\u306f\u5473\u6c17\u306a\u3044\u306e\u3067\u7d50\u679c\u3092Slack\u306b\u30b3\u30d4\u30da\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\n", "tags": ["Slack", "emoji", "Python"]}