{"context": " More than 1 year has passed since last update.\n\n\nPython\n3.5.0\n\n\n\n\nDjango\n1.9\n\n\n\n\nsettings.py\n(\u7701\u7565)\n# Application definition\nAUTH_USER_MODEL = 'users.User'\n\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'users',\n]\n\n(\u7701\u7565)\n\n\n\nusers/models.py\n# --- coding: utf-8 ---\n\nimport re\n\nfrom django.db import models\nfrom django.contrib.auth.models import (\n    BaseUserManager, AbstractBaseUser, _user_has_perm\n)\nfrom django.core import validators\nfrom django.core.mail import send_mail\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.utils import timezone\n\nclass UserManager(BaseUserManager):\n    def create_user(self, username, email, password, **extra_fields):\n        \"\"\" Creates and saves User with the given email and password. \"\"\"\n        now = timezone.now()\n        if not email:\n            raise ValueError('Users must have an email address.')\n        email = UserManager.normalize_email(email)\n        user = self.model(\n            username=username,\n            email=email,\n            is_active=True,\n            last_login=now,\n            date_joined=now,\n            **extra_fields\n        )\n\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, username, email, password, **extra_fields):\n        \"\"\" Creates and saves a superuser with the given email and password. \"\"\"\n        user = self.create_user(username, email, password)\n        user.is_active = True\n        user.is_staff = True\n        user.is_admin = True\n        # user.is_superuser = True\n        user.save(using=self._db)\n        return user\n\nclass User(AbstractBaseUser):\n    \"\"\"User \"\"\"\n    username    = models.CharField(_('username'),\n                                   max_length=30,\n                                   unique=True,\n                                   help_text=_('Required. 30 characters or fewer. Letters, numbers and '\n                                   '@/./+/-/_ characters'))\n    first_name  = models.CharField(_('first name'), max_length=30, blank=True)\n    last_name   = models.CharField(_('last name'), max_length=30, blank=True)\n    email       = models.EmailField(verbose_name='email address', max_length=255, unique=True)\n    is_active   = models.BooleanField(default=True)\n    is_staff    = models.BooleanField(default=False)\n    is_admin    = models.BooleanField(default=False)\n    date_joined = models.DateTimeField(_('date joined'), default=timezone.now)\n    delete      = models.BooleanField(default=0)\n\n    objects = UserManager()\n\n    USERNAME_FIELD  = 'username'\n    REQUIRED_FIELDS = ['email']\n\n    def email_user(self, subject, message, from_email=None):\n        \"\"\"Send an email to this User. \"\"\"\n        send_mail(subject, message, from_email, [self.email])\n\n    def user_has_perm(user, perm, obj):\n        \"\"\"\n        A backend can raise `PermissionDenied` to short-circuit permission checking.\n        \"\"\"\n        return _user_has_perm(user, perm, obj)\n\n    def has_perm(self, perm, obj=None):\n        return _user_has_perm(self, perm, obj=obj)\n\n    def has_module_perms(self, app_label):\n        return self.is_admin\n\n    def get_short_name(self):\n        \"Returns the short name for the user.\"\n        return self.first_name\n\n    @property\n    def is_superuser(self):\n        return self.is_admin\n\n\n\n\nusers/admin.py\nfrom django.contrib import admin\nfrom users.models import User\n\nadmin.site.register(User)\n\n\n|Python|3.5.0|\n|:--:|:--:|\n|Django|1.9|\n\n```python:settings.py\n(\u7701\u7565)\n# Application definition\nAUTH_USER_MODEL = 'users.User'\n\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'users',\n]\n\n(\u7701\u7565)\n```\n\n```python:users/models.py\n# --- coding: utf-8 ---\n\nimport re\n\nfrom django.db import models\nfrom django.contrib.auth.models import (\n    BaseUserManager, AbstractBaseUser, _user_has_perm\n)\nfrom django.core import validators\nfrom django.core.mail import send_mail\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.utils import timezone\n\nclass UserManager(BaseUserManager):\n    def create_user(self, username, email, password, **extra_fields):\n        \"\"\" Creates and saves User with the given email and password. \"\"\"\n        now = timezone.now()\n        if not email:\n            raise ValueError('Users must have an email address.')\n        email = UserManager.normalize_email(email)\n        user = self.model(\n            username=username,\n            email=email,\n            is_active=True,\n            last_login=now,\n            date_joined=now,\n            **extra_fields\n        )\n\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, username, email, password, **extra_fields):\n        \"\"\" Creates and saves a superuser with the given email and password. \"\"\"\n        user = self.create_user(username, email, password)\n        user.is_active = True\n        user.is_staff = True\n        user.is_admin = True\n        # user.is_superuser = True\n        user.save(using=self._db)\n        return user\n\nclass User(AbstractBaseUser):\n    \"\"\"User \"\"\"\n    username    = models.CharField(_('username'),\n                                   max_length=30,\n                                   unique=True,\n                                   help_text=_('Required. 30 characters or fewer. Letters, numbers and '\n                                   '@/./+/-/_ characters'))\n    first_name  = models.CharField(_('first name'), max_length=30, blank=True)\n    last_name   = models.CharField(_('last name'), max_length=30, blank=True)\n    email       = models.EmailField(verbose_name='email address', max_length=255, unique=True)\n    is_active   = models.BooleanField(default=True)\n    is_staff    = models.BooleanField(default=False)\n    is_admin    = models.BooleanField(default=False)\n    date_joined = models.DateTimeField(_('date joined'), default=timezone.now)\n    delete      = models.BooleanField(default=0)\n\n    objects = UserManager()\n\n    USERNAME_FIELD  = 'username'\n    REQUIRED_FIELDS = ['email']\n\n    def email_user(self, subject, message, from_email=None):\n        \"\"\"Send an email to this User. \"\"\"\n        send_mail(subject, message, from_email, [self.email])\n\n    def user_has_perm(user, perm, obj):\n        \"\"\"\n        A backend can raise `PermissionDenied` to short-circuit permission checking.\n        \"\"\"\n        return _user_has_perm(user, perm, obj)\n\n    def has_perm(self, perm, obj=None):\n        return _user_has_perm(self, perm, obj=obj)\n\n    def has_module_perms(self, app_label):\n        return self.is_admin\n\n    def get_short_name(self):\n        \"Returns the short name for the user.\"\n        return self.first_name\n\n    @property\n    def is_superuser(self):\n        return self.is_admin\n\n```\n\n```python:users/admin.py\nfrom django.contrib import admin\nfrom users.models import User\n\nadmin.site.register(User)\n```\n", "tags": ["Django", "Python"]}