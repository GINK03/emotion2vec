{"tags": ["FuelPHP", "PHP", "Memcached"], "context": " More than 1 year has passed since last update.\u3053\u308c\u3092\u77e5\u3089\u306a\u304f\u3001\u5fc5\u6b7b\u3067memcache\u30b3\u30de\u30f3\u30c9\u306eget\u3092\u53e9\u3044\u3066\u3001\u3042\u308c\uff01\uff1f\u3063\u3066\n\u306a\u3063\u3066\u307e\u3057\u305f\u3002\n\nFuelPHP\u3067Memcached\u3092\u4f7f\u3046\u306b\u306f\uff1f\nconfig\u306ecache.php\u3067\nreturn array(\n    'driver'      => 'memcached',\n    'expiration'  => 86400,\n    'memcached'  => array(\n        'cache_id'  => 'fuel', others stored on the same server(s)\n        'servers'   => array(\n            'default' => array('host' => '127.0.0.1', 'port' => 11211, 'weight' => 100),\n        ),\n    ),\n);\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u8a2d\u5b9a\u3057\u3066\u3042\u3052\u308c\u3070\u3001FuelPHP\u3067\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9\u3092\u901a\u3057\u3066\u3001Memcached\u304c\u4f7f\u3048\u308b\u308f\u3051\u3067\u3059\u3002\nCache::set('test', 'hoge');\nCache::get('test');\n\n\n\u4e2d\u8eab\u3092\u78ba\u8a8d\u3057\u3088\u3046\u3068\u3057\u3066\u3001\u76f4\u63a5\u30b3\u30de\u30f3\u30c9\u3092\u53e9\u3044\u3066\u3082\u30fb\u30fb\u30fb\u30fb\nssh\u3067\u30b5\u30fc\u30d0\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u3066\n[nameko@centos]telnet 127.0.0.1 11211\nTrying 127.0.0.1...      \nConnected to 127.0.0.1.  \nEscape character is '^]'.\n\nget test\nEND\n\ntest\u3092\u30ad\u30fc\u306b\u5024\u3092\u53d6\u308a\u51fa\u305d\u3046\u3068\u3057\u3066\u3082\u3001\u306a\u306b\u3082\u3042\u308a\u307e\u305b\u3093\uff01\uff01\n\nFuelPHP\u3067\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30af\u30e9\u30b9\u3092\u6574\u7406\nmemcached\u3092\u30e9\u30c3\u30d7\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u3092\u6574\u7406\u3059\u308b\u3068\n\nFuel\\Core\\Cache\nFuel\\Core\\Cache_Storage_Memcached (\u7d99\u627f\u5143\u306fCache_Storage_Driver)\n\n\nFuel\\Core\\Cache\u30af\u30e9\u30b9\n\u3053\u3044\u3064\u304c\u30e6\u30fc\u30b6\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u64cd\u4f5c\u3092\u63d0\u4f9b\u3059\u308b\u8868\u5411\u304d\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\nforge,set,get\u306e\u5b9f\u88c5\u898b\u3066\u307f\u308b\u3068\u308f\u304b\u308a\u307e\u3059\u304c\n    /* \u884c\u306e\u7bc0\u7d04\u3067\u30b3\u30e1\u30f3\u30c8\u306f\u524a\u9664 */\n    public static function forge($identifier, $config = array())\n    {\n        $defaults = \\Config::get('cache', array());\n        if ( ! empty($config) and ! is_array($config) and ! is_null($config))\n        {\n            $config = array('driver' => $config);\n        }\n        $config = array_merge($defaults, (array) $config);\n        if (empty($config['driver']))\n        {\n            throw new \\FuelException('No cache driver given or no default cache driver set.');\n        }\n        $class = '\\\\Cache_Storage_'.ucfirst($config['driver']);\n        $identifier = call_user_func($class.'::stringify_identifier', $identifier);\n        return new $class($identifier, $config);\n    }\n\n    public static function set($identifier, $contents = null, $expiration = false, $dependencies = array())\n    {\n        $contents = \\Fuel::value($contents);\n        $cache = static::forge($identifier);\n        return $cache->set($contents, $expiration, $dependencies);\n    }\n\n    public static function get($identifier, $use_expiration = true)\n    {\n        $cache = static::forge($identifier);\n        return $cache->get($use_expiration);\n    }\n\nget,set\u3059\u308b\u3054\u3068\u306bforge\u3057\u3066\u308b\uff01\uff01\n        $class = '\\\\Cache_Storage_'.ucfirst($config['driver']);\n        $identifier = call_user_func($class.'::stringify_identifier', $identifier);\n        return new $class($identifier, $config);\n\n\u3053\u3053\u3067Cache_Storage_Memcached\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u307e\u3059\u306d\u3002\nset,get\u3078\u306e\u64cd\u4f5c\u306f\u305d\u308c\u305e\u308c\uff11\uff1a\uff11\u3067Memcached\u306e\u30b9\u30c8\u30ec\u30fc\u30b8\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5bfe\u5fdc\u3057\u3066\u308b\u308f\u3051\u3067\u3059\u3002\n\nFuel\\Core\\Cache_Storage_Memcached\u30af\u30e9\u30b9\n\u7d99\u627f\u5143\u306fCache_Storage_Drive\u3067\u3059\u3002\n    public function __construct($identifier, $config)\n    {\n        parent::__construct($identifier, $config);\n        ~~~~~\u7701\u7565\n        static::$memcached = new \\Memcached();\n        static::$memcached->addServers($this->config['servers']);\n     }\n\n\u3053\u3044\u3064\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u3068\u3001Memcached\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u3001config\u306e\u60c5\u5831\u3092\u5143\u306b\u3001addServers\u3057\u3066\u308b\u308f\u3051\u3067\u3059\u3002\nCache_Storage_Drive\u306f\u3001\u5b9f\u88c5\u30b9\u30c8\u30ec\u30fc\u30b8\u306b\u4f9d\u5b58\u3055\u308c\u306a\u3044\u3001\u51e6\u7406\u3084\u5024\u306e\u7ba1\u7406\u3092\u3057\u3066\u3044\u307e\u3059\u306d\u3002\n\u3061\u306a\u307f\u306b\u3001Cache::get,set\u306f\u3001\nCache_Storage_Drive\u306eget,set\u306b\u306a\u308a\u307e\u3059\nCache_Storage_Drive\u306eget,set\u3067\u3001\n\u5b50\u30af\u30e9\u30b9\u306eCache_Storage_Memcached\u306e_get,_set\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\u3084\u3084\u3053\u3057\u3044\u3067\u3059\u306d\u3002\n\u3053\u3053\u3089\u3078\u3093\u306f\u3001\u63d0\u4f9b\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3068\u5b9f\u969b\u51e6\u7406\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u5206\u96e2\u3092\u3059\u308b\u305f\u3081\u306e\u8a2d\u8a08\u3067\u3057\u3087\u3046\u304b\u3002\nFuel\u81ea\u4f53\u3001\u59d4\u8b72\u3092\u305f\u304f\u3055\u3093\u4f7f\u3044\u3001\u5dee\u3057\u66ff\u3048\u53ef\u80fd\u3084\u3001\u5206\u96e2\u3055\u305b\u308b\u305f\u3081\u306e\u8a2d\u8a08\u304c\u3042\u3061\u3053\u3061\u3067\u898b\u3089\u308c\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001Cache_Storage_Memcached\u306eset,get\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n    /* \u884c\u306e\u7bc0\u7d04\u3067\u30b3\u30e1\u30f3\u30c8\u306f\u524a\u9664 */\n    protected function _set()\n    {\n        $key = $this->_get_key();\n        $payload = $this->prep_contents();\n        $expiration = !is_null($this->expiration) ? $this->expiration - time() : 0;\n        $expiration = $expiration <= 2592000 ? (int) $expiration : (int) $this->expiration;\n        if (static::$memcached->set($key, $payload, $expiration) === false)\n        {\n            throw new \\FuelException('Memcached returned error code \"'.static::$memcached->getResultCode().'\" on write. Check your configuration.');\n        }\n        $this->_update_index($key);\n\n        return true;\n    }\n\n    protected function _get()\n    {\n        $key = $this->_get_key();\n        $payload = static::$memcached->get($key);\n        try\n        {\n            $this->unprep_contents($payload);\n        }\n        catch (\\UnexpectedValueException $e)\n        {\n            return false;\n        }\n        return true;\n    }\n\nstatic::\u3092\u4f7f\u3063\u3066\u3084\u304c\u308b\u30fb\u30fb\u30fb\u30fb\n\u3044\u304b\u3057\u305f\u8a2d\u8a08\u306b\u306f\u3082\u3061\u308d\u3093\u9045\u5ef6\u9759\u7684\u675f\u7e1b (Late Static Bindings) \u3082\u4f7f\u3046\u305c\uff01\uff01\n$key = $this->_get_key();\n\n\u3053\u3044\u3064\u306e\u63a2\u308b\u3068\u30fb\u30fb\u30fb\n    protected function _get_key($remove = false)\n    {\n        // get the current index information\n        list($identifier, $sections, $index) = $this->_get_index();\n\n        // get the key from the index\n        $key = isset($index[$identifier][0]) ? $index[$identifier][0] : false;\n\n        if ($remove === true)\n        {\n            if ( $key !== false )\n            {\n                unset($index[$identifier]);\n                static::$memcached->set($this->config['cache_id'].$sections, $index);\n            }\n        }\n        else\n        {\n            // create a new key if needed\n            $key === false and $key = $this->_new_key();\n        }\n        return $key;\n    }\n\n    protected function _new_key()\n    {\n        $key = '';\n        while (strlen($key) < 32)\n        {\n            $key .= mt_rand(0, mt_getrandmax());\n        }\n        return md5($this->config['cache_id'].'_'.uniqid($key, TRUE));\n    }\n\n_new_key()\u30e1\u30bd\u30c3\u30c9\u304c\u3001\u30cf\u30c3\u30b7\u30e5\u30ad\u30fc\u3092\u751f\u6210\u3057\u3066\u308b\u90e8\u5206\u3067\u3059\uff01\ncache_id\u306fconfig\u3067\u6307\u5b9a\u3057\u305f\u4efb\u610f\u306e\u6587\u5b57\u5217\u3067\u3001uniqid\u3057\u3066\u308bkey\u306frandom\u3067\u51fa\u3057\u305f\u5024\u3067\u3059\u306d\u3002\n\u30e6\u30fc\u30b6\u304c\u6307\u5b9a\u3057\u305f\u30ad\u30fc\u3068\u306f\u5168\u304f\u95a2\u4fc2\u306a\u3044\u3001\u30e6\u30cb\u30fc\u30af\u306a\u5024\u304c\u751f\u6210\u3055\u308c\u3001\n\u3053\u308c\u304cMemcached\u306e\u30ad\u30fc\u306b\u306a\u308b\u308f\u3051\u3067\u3059\u3002\n\n\u52b9\u7387\u3088\u304fMemcached\u306b\u5165\u3063\u3066\u3044\u308b\u5024\u3092\u53d6\u308a\u51fa\u3059\u306b\u306f\nMemcached\u3078\u306e\u64cd\u4f5c\u3092\u30e9\u30c3\u30d7\u3057\u3066\u3044\u308bCache\u30af\u30e9\u30b9\u3092\u4f7f\u3048\u3070\u3001\n\u5185\u90e8\u306e\u5b9f\u88c5\u3092\u610f\u8b58\u305b\u305a\u3001\u5024\u306e\u53d6\u308a\u51fa\u3057\u3001\u8a2d\u5b9a\u304c\u3067\u304d\u307e\u3059\u3002\n\u3067\u3082\u30b5\u30fc\u30d0\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3001\u76f4\u63a5\u3092\u5024\u3092\u78ba\u8a8d\u3057\u305f\u3044\u3068\u304d\u3082\u3042\u308b\u3058\u3083\u306a\u3044\u3067\u3059\u304b\u3002\n\u3069\u3046\u3084\u3063\u3066\u30e6\u30cb\u30fc\u30af\u306a\u30cf\u30c3\u30b7\u30e5\u30ad\u30fc\u3092\u63a2\u305b\u3070\u3044\u3044\u304b\u3068\u3044\u3046\u3068\u3001\n\u4e0a\u8a18\u3067\u767b\u5834\u3057\u305fcache_id\u306e\u5024\u3067get\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\ncache_id\u3092fuel\u306b\u3057\u3066\u3044\u305f\u5834\u5408\n[nameko@centos]telnet 127.0.0.1 11211\nTrying 127.0.0.1...      \nConnected to 127.0.0.1.  \nEscape character is '^]'.\n\nget fuel\ntest ffe1d667f601bfd95ca91b79c35dda63\nEND\n\n\u306a\u3093\u3068\u3001\u5143\u306e\u30ad\u30fc\u3068\u30cf\u30c3\u30b7\u30e5\u30ad\u30fc\u306e\u5bfe\u5fdc\u3092\u3001cache_id\u3092\u30ad\u30fc\u306b\u3057\u305f\nMemcached\u306e\u5024\u3067\u4fdd\u6301\u3057\u3066\u308b\u306e\u3067\u3059\uff01\uff01\n\u3053\u306e\u5bfe\u5fdc\u8868\u3092Fuel\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30af\u30e9\u30b9\u304c\u7ba1\u7406\u3057\u3066\u3001\u53d6\u5f97\u3001\u8a2d\u5b9a\u306e\u9762\u5012\u3092\u898b\u3066\u304f\u308c\u3066\u308b\u306e\u3067\u3059\u306d\u3002\n\u306a\u306e\u3067\u76f4\u63a5Memcached\u306e\u5024\u3092\u78ba\u8a8d\u3057\u305f\u3044\u3068\u304d\u306f\u3001\u3053\u306e\u5bfe\u5fdc\u3092\u78ba\u8a8d\u3057\u3066\n\u53d6\u308a\u51fa\u3057\u305f\u3044\u5024\u306e\u30cf\u30c3\u30b7\u30e5\u30ad\u30fc\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3057\u3087\u3046\u3002\n[nameko@centos]telnet 127.0.0.1 11211\nTrying 127.0.0.1...      \nConnected to 127.0.0.1.  \nEscape character is '^]'.\n\nget ffe1d667f601bfd95ca91b79c35dda63\nhoge\nEND\n\n\n\u753b\u9762\u3067\u78ba\u8a8d\u3057\u305f\u3044\n\u9762\u5012\u306a\u306e\u3067\u3001\u753b\u9762\u3067Memcached\u306b\u30bb\u30c3\u30c8\u3057\u3066\u308b\u4e00\u89a7\u3092\u898b\u305f\u3044\uff01\uff01\n\u3068\u3044\u3046\u5834\u5408\u306f\u3001\nclass Logic_Memview extends \\Cache_Storage_Memcached\n{\n    public function __construct($identifier, $config)\n    {\n        parent::__construct($identifier, $config);\n    }\n    public function get_all()\n    {\n        $indexs = $this->_get_index();\n        $cache_index_list = $indexs[2];\n        $cache_list = array();\n        if ($cache_index_list)\n        {\n            foreach ($cache_index_list as $cache_key => $index_values)\n            {\n                $instance = new self($cache_key, $this->config);\n                try\n                {\n                    $cache_data = $instance->get();\n                } catch (\\Exception $e)\n                {\n                    $cache_data = '';\n                }\n                $cache_list[$cache_key] = array('data' => $cache_data, 'hash_key' => $index_values[0]);\n            }\n        }\n        return $cache_list;\n    }\n}\n\n\\Cache_Storage_Memcached\u3092\u7d99\u627f\u3057\u3001get_all\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u307e\u3059\u3002\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3067\u3053\u3044\u3064\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u3001get_all\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u305b\u3070\u3001\n(cache_option\u306fcache\u306econfig\u5024\u3092\u3044\u308c\u3066\u304f\u3060\u3055\u3044)\n$logic = new Logic_Memview('test', $cache_option);\n$cache_data_list = $logic->get_all();\n\n\u30ad\u30fc\u3001\u30cf\u30c3\u30b7\u30e5\u30ad\u30fc\u3001\u5024\u306e\u914d\u5217\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\n\u3042\u3068\u306f\u3053\u308c\u3092view\u3067\u8868\u793a\u3059\u308c\u3070\u3001\u898b\u3084\u3059\u3044\u4e00\u89a7\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u3092\u77e5\u3089\u306a\u304f\u3001\u5fc5\u6b7b\u3067memcache\u30b3\u30de\u30f3\u30c9\u306eget\u3092\u53e9\u3044\u3066\u3001\u3042\u308c\uff01\uff1f\u3063\u3066\n\u306a\u3063\u3066\u307e\u3057\u305f\u3002\n\n# FuelPHP\u3067Memcached\u3092\u4f7f\u3046\u306b\u306f\uff1f\n\nconfig\u306ecache.php\u3067\n\n```\nreturn array(\n\t'driver'      => 'memcached',\n\t'expiration'  => 86400,\n\t'memcached'  => array(\n\t\t'cache_id'  => 'fuel', others stored on the same server(s)\n\t\t'servers'   => array(\n\t\t\t'default' => array('host' => '127.0.0.1', 'port' => 11211, 'weight' => 100),\n\t\t),\n\t),\n);\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u8a2d\u5b9a\u3057\u3066\u3042\u3052\u308c\u3070\u3001FuelPHP\u3067\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9\u3092\u901a\u3057\u3066\u3001Memcached\u304c\u4f7f\u3048\u308b\u308f\u3051\u3067\u3059\u3002\n\n```\nCache::set('test', 'hoge');\nCache::get('test');\n```\n\n## \u4e2d\u8eab\u3092\u78ba\u8a8d\u3057\u3088\u3046\u3068\u3057\u3066\u3001\u76f4\u63a5\u30b3\u30de\u30f3\u30c9\u3092\u53e9\u3044\u3066\u3082\u30fb\u30fb\u30fb\u30fb\n\nssh\u3067\u30b5\u30fc\u30d0\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u3066\n\n```\n[nameko@centos]telnet 127.0.0.1 11211\nTrying 127.0.0.1...      \nConnected to 127.0.0.1.  \nEscape character is '^]'.\n\nget test\nEND\n```\ntest\u3092\u30ad\u30fc\u306b\u5024\u3092\u53d6\u308a\u51fa\u305d\u3046\u3068\u3057\u3066\u3082\u3001\u306a\u306b\u3082\u3042\u308a\u307e\u305b\u3093\uff01\uff01\n\n# FuelPHP\u3067\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30af\u30e9\u30b9\u3092\u6574\u7406\n\nmemcached\u3092\u30e9\u30c3\u30d7\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u3092\u6574\u7406\u3059\u308b\u3068\n\n* Fuel\\Core\\Cache\n* Fuel\\Core\\Cache_Storage_Memcached (\u7d99\u627f\u5143\u306fCache_Storage_Driver)\n\n## Fuel\\Core\\Cache\u30af\u30e9\u30b9\n\u3053\u3044\u3064\u304c\u30e6\u30fc\u30b6\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u64cd\u4f5c\u3092\u63d0\u4f9b\u3059\u308b\u8868\u5411\u304d\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\n\nforge,set,get\u306e\u5b9f\u88c5\u898b\u3066\u307f\u308b\u3068\u308f\u304b\u308a\u307e\u3059\u304c\n\n```\n    /* \u884c\u306e\u7bc0\u7d04\u3067\u30b3\u30e1\u30f3\u30c8\u306f\u524a\u9664 */\n\tpublic static function forge($identifier, $config = array())\n\t{\n\t\t$defaults = \\Config::get('cache', array());\n\t\tif ( ! empty($config) and ! is_array($config) and ! is_null($config))\n\t\t{\n\t\t\t$config = array('driver' => $config);\n\t\t}\n\t\t$config = array_merge($defaults, (array) $config);\n\t\tif (empty($config['driver']))\n\t\t{\n\t\t\tthrow new \\FuelException('No cache driver given or no default cache driver set.');\n\t\t}\n\t\t$class = '\\\\Cache_Storage_'.ucfirst($config['driver']);\n\t\t$identifier = call_user_func($class.'::stringify_identifier', $identifier);\n\t\treturn new $class($identifier, $config);\n\t}\n    \n\tpublic static function set($identifier, $contents = null, $expiration = false, $dependencies = array())\n\t{\n\t\t$contents = \\Fuel::value($contents);\n\t\t$cache = static::forge($identifier);\n\t\treturn $cache->set($contents, $expiration, $dependencies);\n\t}\n    \n    public static function get($identifier, $use_expiration = true)\n\t{\n\t\t$cache = static::forge($identifier);\n\t\treturn $cache->get($use_expiration);\n\t}\n```\n\nget,set\u3059\u308b\u3054\u3068\u306bforge\u3057\u3066\u308b\uff01\uff01\n\n```\n\t\t$class = '\\\\Cache_Storage_'.ucfirst($config['driver']);\n\t\t$identifier = call_user_func($class.'::stringify_identifier', $identifier);\n\t\treturn new $class($identifier, $config);\n```\n\n\u3053\u3053\u3067Cache_Storage_Memcached\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u307e\u3059\u306d\u3002\nset,get\u3078\u306e\u64cd\u4f5c\u306f\u305d\u308c\u305e\u308c\uff11\uff1a\uff11\u3067Memcached\u306e\u30b9\u30c8\u30ec\u30fc\u30b8\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5bfe\u5fdc\u3057\u3066\u308b\u308f\u3051\u3067\u3059\u3002\n\n## Fuel\\Core\\Cache_Storage_Memcached\u30af\u30e9\u30b9\n\n\u7d99\u627f\u5143\u306fCache_Storage_Drive\u3067\u3059\u3002\n\n\n```\n\tpublic function __construct($identifier, $config)\n\t{\n\t\tparent::__construct($identifier, $config);\n        ~~~~~\u7701\u7565\n\t\tstatic::$memcached = new \\Memcached();\n\t\tstatic::$memcached->addServers($this->config['servers']);\n     }\n```\n\n\u3053\u3044\u3064\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u3068\u3001Memcached\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u3001config\u306e\u60c5\u5831\u3092\u5143\u306b\u3001addServers\u3057\u3066\u308b\u308f\u3051\u3067\u3059\u3002\n\nCache_Storage_Drive\u306f\u3001\u5b9f\u88c5\u30b9\u30c8\u30ec\u30fc\u30b8\u306b\u4f9d\u5b58\u3055\u308c\u306a\u3044\u3001\u51e6\u7406\u3084\u5024\u306e\u7ba1\u7406\u3092\u3057\u3066\u3044\u307e\u3059\u306d\u3002\n\n\u3061\u306a\u307f\u306b\u3001Cache::get,set\u306f\u3001\nCache_Storage_Drive\u306eget,set\u306b\u306a\u308a\u307e\u3059\nCache_Storage_Drive\u306eget,set\u3067\u3001\n\u5b50\u30af\u30e9\u30b9\u306eCache_Storage_Memcached\u306e_get,_set\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\u3084\u3084\u3053\u3057\u3044\u3067\u3059\u306d\u3002\n\u3053\u3053\u3089\u3078\u3093\u306f\u3001\u63d0\u4f9b\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3068\u5b9f\u969b\u51e6\u7406\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u5206\u96e2\u3092\u3059\u308b\u305f\u3081\u306e\u8a2d\u8a08\u3067\u3057\u3087\u3046\u304b\u3002\nFuel\u81ea\u4f53\u3001\u59d4\u8b72\u3092\u305f\u304f\u3055\u3093\u4f7f\u3044\u3001\u5dee\u3057\u66ff\u3048\u53ef\u80fd\u3084\u3001\u5206\u96e2\u3055\u305b\u308b\u305f\u3081\u306e\u8a2d\u8a08\u304c\u3042\u3061\u3053\u3061\u3067\u898b\u3089\u308c\u307e\u3059\u3002\n\n\u305d\u308c\u3067\u306f\u3001Cache_Storage_Memcached\u306eset,get\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n```\n    /* \u884c\u306e\u7bc0\u7d04\u3067\u30b3\u30e1\u30f3\u30c8\u306f\u524a\u9664 */\n\tprotected function _set()\n\t{\n\t\t$key = $this->_get_key();\n\t\t$payload = $this->prep_contents();\n\t\t$expiration = !is_null($this->expiration) ? $this->expiration - time() : 0;\n\t\t$expiration = $expiration <= 2592000 ? (int) $expiration : (int) $this->expiration;\n\t\tif (static::$memcached->set($key, $payload, $expiration) === false)\n\t\t{\n\t\t\tthrow new \\FuelException('Memcached returned error code \"'.static::$memcached->getResultCode().'\" on write. Check your configuration.');\n\t\t}\n\t\t$this->_update_index($key);\n\n\t\treturn true;\n\t}\n    \n\tprotected function _get()\n\t{\n\t\t$key = $this->_get_key();\n\t\t$payload = static::$memcached->get($key);\n\t\ttry\n\t\t{\n\t\t\t$this->unprep_contents($payload);\n\t\t}\n\t\tcatch (\\UnexpectedValueException $e)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n```\n\nstatic::\u3092\u4f7f\u3063\u3066\u3084\u304c\u308b\u30fb\u30fb\u30fb\u30fb\n\u3044\u304b\u3057\u305f\u8a2d\u8a08\u306b\u306f\u3082\u3061\u308d\u3093\u9045\u5ef6\u9759\u7684\u675f\u7e1b (Late Static Bindings) \u3082\u4f7f\u3046\u305c\uff01\uff01\n\n\n```\n$key = $this->_get_key();\n```\n\n\u3053\u3044\u3064\u306e\u63a2\u308b\u3068\u30fb\u30fb\u30fb\n\n\n```\n\tprotected function _get_key($remove = false)\n\t{\n\t\t// get the current index information\n\t\tlist($identifier, $sections, $index) = $this->_get_index();\n\n\t\t// get the key from the index\n\t\t$key = isset($index[$identifier][0]) ? $index[$identifier][0] : false;\n\n\t\tif ($remove === true)\n\t\t{\n\t\t\tif ( $key !== false )\n\t\t\t{\n\t\t\t\tunset($index[$identifier]);\n\t\t\t\tstatic::$memcached->set($this->config['cache_id'].$sections, $index);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// create a new key if needed\n\t\t\t$key === false and $key = $this->_new_key();\n\t\t}\n\t\treturn $key;\n\t}\n    \n\tprotected function _new_key()\n\t{\n\t\t$key = '';\n\t\twhile (strlen($key) < 32)\n\t\t{\n\t\t\t$key .= mt_rand(0, mt_getrandmax());\n\t\t}\n\t\treturn md5($this->config['cache_id'].'_'.uniqid($key, TRUE));\n\t}\n```\n\n_new_key()\u30e1\u30bd\u30c3\u30c9\u304c\u3001\u30cf\u30c3\u30b7\u30e5\u30ad\u30fc\u3092\u751f\u6210\u3057\u3066\u308b\u90e8\u5206\u3067\u3059\uff01\ncache_id\u306fconfig\u3067\u6307\u5b9a\u3057\u305f\u4efb\u610f\u306e\u6587\u5b57\u5217\u3067\u3001uniqid\u3057\u3066\u308bkey\u306frandom\u3067\u51fa\u3057\u305f\u5024\u3067\u3059\u306d\u3002\n\u30e6\u30fc\u30b6\u304c\u6307\u5b9a\u3057\u305f\u30ad\u30fc\u3068\u306f\u5168\u304f\u95a2\u4fc2\u306a\u3044\u3001\u30e6\u30cb\u30fc\u30af\u306a\u5024\u304c\u751f\u6210\u3055\u308c\u3001\n\u3053\u308c\u304cMemcached\u306e\u30ad\u30fc\u306b\u306a\u308b\u308f\u3051\u3067\u3059\u3002\n\n# \u52b9\u7387\u3088\u304fMemcached\u306b\u5165\u3063\u3066\u3044\u308b\u5024\u3092\u53d6\u308a\u51fa\u3059\u306b\u306f\n\nMemcached\u3078\u306e\u64cd\u4f5c\u3092\u30e9\u30c3\u30d7\u3057\u3066\u3044\u308bCache\u30af\u30e9\u30b9\u3092\u4f7f\u3048\u3070\u3001\n\u5185\u90e8\u306e\u5b9f\u88c5\u3092\u610f\u8b58\u305b\u305a\u3001\u5024\u306e\u53d6\u308a\u51fa\u3057\u3001\u8a2d\u5b9a\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u3067\u3082\u30b5\u30fc\u30d0\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3001\u76f4\u63a5\u3092\u5024\u3092\u78ba\u8a8d\u3057\u305f\u3044\u3068\u304d\u3082\u3042\u308b\u3058\u3083\u306a\u3044\u3067\u3059\u304b\u3002\n\u3069\u3046\u3084\u3063\u3066\u30e6\u30cb\u30fc\u30af\u306a\u30cf\u30c3\u30b7\u30e5\u30ad\u30fc\u3092\u63a2\u305b\u3070\u3044\u3044\u304b\u3068\u3044\u3046\u3068\u3001\n\n\u4e0a\u8a18\u3067\u767b\u5834\u3057\u305fcache_id\u306e\u5024\u3067get\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\ncache_id\u3092fuel\u306b\u3057\u3066\u3044\u305f\u5834\u5408\n\n```\n[nameko@centos]telnet 127.0.0.1 11211\nTrying 127.0.0.1...      \nConnected to 127.0.0.1.  \nEscape character is '^]'.\n\nget fuel\ntest ffe1d667f601bfd95ca91b79c35dda63\nEND\n```\n\n\u306a\u3093\u3068\u3001\u5143\u306e\u30ad\u30fc\u3068\u30cf\u30c3\u30b7\u30e5\u30ad\u30fc\u306e\u5bfe\u5fdc\u3092\u3001cache_id\u3092\u30ad\u30fc\u306b\u3057\u305f\nMemcached\u306e\u5024\u3067\u4fdd\u6301\u3057\u3066\u308b\u306e\u3067\u3059\uff01\uff01\n\u3053\u306e\u5bfe\u5fdc\u8868\u3092Fuel\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30af\u30e9\u30b9\u304c\u7ba1\u7406\u3057\u3066\u3001\u53d6\u5f97\u3001\u8a2d\u5b9a\u306e\u9762\u5012\u3092\u898b\u3066\u304f\u308c\u3066\u308b\u306e\u3067\u3059\u306d\u3002\n\n\u306a\u306e\u3067\u76f4\u63a5Memcached\u306e\u5024\u3092\u78ba\u8a8d\u3057\u305f\u3044\u3068\u304d\u306f\u3001\u3053\u306e\u5bfe\u5fdc\u3092\u78ba\u8a8d\u3057\u3066\n\u53d6\u308a\u51fa\u3057\u305f\u3044\u5024\u306e\u30cf\u30c3\u30b7\u30e5\u30ad\u30fc\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3057\u3087\u3046\u3002\n\n```\n[nameko@centos]telnet 127.0.0.1 11211\nTrying 127.0.0.1...      \nConnected to 127.0.0.1.  \nEscape character is '^]'.\n\nget ffe1d667f601bfd95ca91b79c35dda63\nhoge\nEND\n```\n\n# \u753b\u9762\u3067\u78ba\u8a8d\u3057\u305f\u3044\n\n\u9762\u5012\u306a\u306e\u3067\u3001\u753b\u9762\u3067Memcached\u306b\u30bb\u30c3\u30c8\u3057\u3066\u308b\u4e00\u89a7\u3092\u898b\u305f\u3044\uff01\uff01\n\u3068\u3044\u3046\u5834\u5408\u306f\u3001\n\n```\nclass Logic_Memview extends \\Cache_Storage_Memcached\n{\n\tpublic function __construct($identifier, $config)\n\t{\n\t\tparent::__construct($identifier, $config);\n\t}\n    public function get_all()\n    {\n        $indexs = $this->_get_index();\n        $cache_index_list = $indexs[2];\n        $cache_list = array();\n        if ($cache_index_list)\n        {\n            foreach ($cache_index_list as $cache_key => $index_values)\n            {\n                $instance = new self($cache_key, $this->config);\n                try\n                {\n                    $cache_data = $instance->get();\n                } catch (\\Exception $e)\n                {\n                    $cache_data = '';\n                }\n                $cache_list[$cache_key] = array('data' => $cache_data, 'hash_key' => $index_values[0]);\n            }\n        }\n        return $cache_list;\n    }\n}\n```\n\n\\Cache_Storage_Memcached\u3092\u7d99\u627f\u3057\u3001get_all\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u307e\u3059\u3002\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3067\u3053\u3044\u3064\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u3001get_all\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u305b\u3070\u3001\n(cache_option\u306fcache\u306econfig\u5024\u3092\u3044\u308c\u3066\u304f\u3060\u3055\u3044)\n\n```\n$logic = new Logic_Memview('test', $cache_option);\n$cache_data_list = $logic->get_all();\n```\n\n\u30ad\u30fc\u3001\u30cf\u30c3\u30b7\u30e5\u30ad\u30fc\u3001\u5024\u306e\u914d\u5217\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\n\u3042\u3068\u306f\u3053\u308c\u3092view\u3067\u8868\u793a\u3059\u308c\u3070\u3001\u898b\u3084\u3059\u3044\u4e00\u89a7\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n"}