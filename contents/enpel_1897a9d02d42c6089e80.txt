{"context": " More than 1 year has passed since last update.\u3067\u304d\u308b\u3053\u3068\u3002\n\u77ed\u3044\u30bf\u30c3\u30d7\u3060\u3063\u305f\u3089ShortTap\u3092\u547c\u3076\nIntervalAction\u79d2\u9577\u62bc\u3057\u3059\u308b\u3068LongTap\u304c\u547c\u3070\u308c\u308b\u3002\n\u3061\u3087\u3063\u3068\u307e\u3060\u30b9\u30de\u30fc\u30c8\u3058\u3083\u306a\u3044\u306e\u3068\u3053\u308c\u3060\u3068\uff81\uff6e\uff9d\uff6f\u3063\u3066\u30bf\u30c3\u30d7\u3057\u305f\u3060\u3051\u3067ShortTap\u304c\u547c\u3070\u308c\u3061\u3083\u3046\u306e\u3067\u305d\u3053\u3082\u4f55\u3068\u304b\u3057\u305f\u3044\u3002\n\u3042\u3068\u9577\u62bc\u3057\u3057\u3066\u3044\u3066\u3082\u6307\u3084\u30ab\u30fc\u30bd\u30eb\u304c\u52d5\u304d\u306a\u304c\u3089Press\u3057\u3066\u305f\u3089LongTap\u3082ShortTap\u3082\u547c\u3070\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3044\u3002\n\u3080\u305a\u3044\u305e\uff01\nusing UnityEngine;\nusing System.Collections;\nusing System;\nusing UniRx;\nusing System.Collections.Generic;\n\n\n[RequireComponent(typeof(UIButton))]\npublic class UIButtonLongTapComponent : ObservableMonoBehaviour\n{\n\n    [SerializeField]\n    float intervalAction = 3.0f;\n    public UIScrollView scroll = null;\n    float firstTapTime = 0f;\n    bool isHoldAction = true;\n    // \u62bc\u3057\u3063\u3071\u306a\u3057\u6642\u306b\u547c\u3073\u51fa\u3059Action\n    public Action OnLongTap = null;\n    public Action OnShortTap = null;\n\n    Vector3 tapPosition = Vector3.zero;\n\n    BoolReactiveProperty isPressing = new BoolReactiveProperty();\n    bool IsPressing { get { return isPressing.Value; } set { isPressing.Value = value; } }\n\n    void Start()\n    {\n        scroll = this.transform.GetComponentInParents<UIScrollView> ();\n        IsPressing = false;\n\n        var tapInStream = this.UpdateAsObservable().Select(_=>IsPressing).Where (_ => _);\n        var tapOutStream = this.UpdateAsObservable().Select(_=>IsPressing).Where (_ => !_);\n        var tapInOutStream = this.UpdateAsObservable ().SkipUntil (tapInStream).TakeUntil (tapOutStream).Repeat ();\n\n        var moveStream = tapInOutStream\n            .Select(x=>scroll.currentMomentum.magnitude)\n                .Scan((sum,current)=>sum+current)\n                // .Do(x=>Debug.Log(\"currentMomentum: \"+x))\n                .FirstOrDefault(x=>x>0.1f)\n                .Select(_=> \"Move\");\n\n        var longTapStream = \n            tapInOutStream.TakeUntil(moveStream).SelectMany(_ => Observable.Timer(TimeSpan.FromSeconds(intervalAction))).Select(_ => \"LongTap\");\n\n\n        longTapStream.Subscribe (_ => IsPressing = false);\n        moveStream.Subscribe (_ => IsPressing = false);\n\n        tapInStream.TakeUntil(moveStream).Timestamp()\n            .SelectMany(_ => tapOutStream.Timestamp(), (s, e) => (e.Timestamp - s.Timestamp).Seconds >= intervalAction)\n                .Select(x => x ? \"LongTap\" : \"ShortTap\")\n                .Merge(longTapStream)\n                .FirstOrDefault()\n                .RepeatUntilDestroy(gameObject)\n                .Subscribe(x =>{\n                    Debug.Log(x);\n                    if (x == \"LongTap\")\n                        LongTap();\n                    if (x == \"ShortTap\")\n                        ShortTap();\n                });\n\n    }\n\n    void OnPress (bool pressed)\n    {\n        IsPressing = pressed;\n    }\n\n    public void SetButtonAction(Action shortTap, Action longTap, bool isHoldLongTap) {\n        isHoldAction = isHoldLongTap;\n        OnLongTap = longTap;\n        OnShortTap = shortTap;\n    }\n\n    public void CleanAction()\n    {\n        OnLongTap = null;\n    }\n\n    public void LongTap()\n    {\n        Debug.Log (\"LongTap!!\");\n        if (OnLongTap != null)\n            OnLongTap ();\n    }\n    public void ShortTap()\n    {\n        Debug.Log (\"ShortTap!!\");\n        if (OnShortTap != null)\n            OnShortTap ();\n    }\n\n}\n\n\u3067\u304d\u308b\u3053\u3068\u3002\n\u77ed\u3044\u30bf\u30c3\u30d7\u3060\u3063\u305f\u3089ShortTap\u3092\u547c\u3076\nIntervalAction\u79d2\u9577\u62bc\u3057\u3059\u308b\u3068LongTap\u304c\u547c\u3070\u308c\u308b\u3002\n\n\u3061\u3087\u3063\u3068\u307e\u3060\u30b9\u30de\u30fc\u30c8\u3058\u3083\u306a\u3044\u306e\u3068\u3053\u308c\u3060\u3068\uff81\uff6e\uff9d\uff6f\u3063\u3066\u30bf\u30c3\u30d7\u3057\u305f\u3060\u3051\u3067ShortTap\u304c\u547c\u3070\u308c\u3061\u3083\u3046\u306e\u3067\u305d\u3053\u3082\u4f55\u3068\u304b\u3057\u305f\u3044\u3002\n\u3042\u3068\u9577\u62bc\u3057\u3057\u3066\u3044\u3066\u3082\u6307\u3084\u30ab\u30fc\u30bd\u30eb\u304c\u52d5\u304d\u306a\u304c\u3089Press\u3057\u3066\u305f\u3089LongTap\u3082ShortTap\u3082\u547c\u3070\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3044\u3002\n\u3080\u305a\u3044\u305e\uff01\n\n```csharp\nusing UnityEngine;\nusing System.Collections;\nusing System;\nusing UniRx;\nusing System.Collections.Generic;\n\n\n[RequireComponent(typeof(UIButton))]\npublic class UIButtonLongTapComponent : ObservableMonoBehaviour\n{\n\t\n\t[SerializeField]\n\tfloat intervalAction = 3.0f;\n\tpublic UIScrollView scroll = null;\n\tfloat firstTapTime = 0f;\n\tbool isHoldAction = true;\n\t// \u62bc\u3057\u3063\u3071\u306a\u3057\u6642\u306b\u547c\u3073\u51fa\u3059Action\n\tpublic Action OnLongTap = null;\n\tpublic Action OnShortTap = null;\n\t\n\tVector3 tapPosition = Vector3.zero;\n\t\n\tBoolReactiveProperty isPressing = new BoolReactiveProperty();\n\tbool IsPressing { get { return isPressing.Value; } set { isPressing.Value = value; } }\n\t\n\tvoid Start()\n\t{\n\t\tscroll = this.transform.GetComponentInParents<UIScrollView> ();\n\t\tIsPressing = false;\n\t\t\n\t\tvar tapInStream = this.UpdateAsObservable().Select(_=>IsPressing).Where (_ => _);\n\t\tvar tapOutStream = this.UpdateAsObservable().Select(_=>IsPressing).Where (_ => !_);\n\t\tvar tapInOutStream = this.UpdateAsObservable ().SkipUntil (tapInStream).TakeUntil (tapOutStream).Repeat ();\n\t\t\n\t\tvar moveStream = tapInOutStream\n\t\t\t.Select(x=>scroll.currentMomentum.magnitude)\n\t\t\t\t.Scan((sum,current)=>sum+current)\n\t\t\t\t// .Do(x=>Debug.Log(\"currentMomentum: \"+x))\n\t\t\t\t.FirstOrDefault(x=>x>0.1f)\n\t\t\t\t.Select(_=> \"Move\");\n\t\t\n\t\tvar longTapStream = \n\t\t\ttapInOutStream.TakeUntil(moveStream).SelectMany(_ => Observable.Timer(TimeSpan.FromSeconds(intervalAction))).Select(_ => \"LongTap\");\n\n\t\t\n\t\tlongTapStream.Subscribe (_ => IsPressing = false);\n\t\tmoveStream.Subscribe (_ => IsPressing = false);\n\n\t\ttapInStream.TakeUntil(moveStream).Timestamp()\n\t\t\t.SelectMany(_ => tapOutStream.Timestamp(), (s, e) => (e.Timestamp - s.Timestamp).Seconds >= intervalAction)\n\t\t\t\t.Select(x => x ? \"LongTap\" : \"ShortTap\")\n\t\t\t\t.Merge(longTapStream)\n\t\t\t\t.FirstOrDefault()\n\t\t\t\t.RepeatUntilDestroy(gameObject)\n\t\t\t\t.Subscribe(x =>{\n\t\t\t\t\tDebug.Log(x);\n\t\t\t\t\tif (x == \"LongTap\")\n\t\t\t\t\t\tLongTap();\n\t\t\t\t\tif (x == \"ShortTap\")\n\t\t\t\t\t\tShortTap();\n\t\t\t\t});\n\t\t\n\t}\n\t\n\tvoid OnPress (bool pressed)\n\t{\n\t\tIsPressing = pressed;\n\t}\n\t\n\tpublic void SetButtonAction(Action shortTap, Action longTap, bool isHoldLongTap) {\n\t\tisHoldAction = isHoldLongTap;\n\t\tOnLongTap = longTap;\n\t\tOnShortTap = shortTap;\n\t}\n\t\n\tpublic void CleanAction()\n\t{\n\t\tOnLongTap = null;\n\t}\n\t\n\tpublic void LongTap()\n\t{\n\t\tDebug.Log (\"LongTap!!\");\n\t\tif (OnLongTap != null)\n\t\t\tOnLongTap ();\n\t}\n\tpublic void ShortTap()\n\t{\n\t\tDebug.Log (\"ShortTap!!\");\n\t\tif (OnShortTap != null)\n\t\t\tOnShortTap ();\n\t}\n\t\n}\n```\n", "tags": ["UniRx", "NGUI", "Unity"]}