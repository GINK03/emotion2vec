{"context": " More than 1 year has passed since last update.\u500b\u4eba\u7684\u306b\u306f\u4e45\u3005\u306b\u8033\u306b\u3057\u305fSSI\u3002\n#include ...\u7b49\u306e\u8a18\u6cd5\u3067HTML\u5185\u306b\u5225\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u57cb\u3081\u8fbc\u3093\u3060\u308a\u3059\u308b\u3082\u306e\u3067\u3059\u304c\u3001grunt-contrib-connect\u6a19\u6e96\u3067\u306fSSI\u306b\u5bfe\u5fdc\u3057\u3066\u304a\u3089\u305a\u3001\u30ed\u30fc\u30ab\u30eb\u3067\u78ba\u8a8d\u3057\u3088\u3046\u306b\u3082\u3059\u3050\u306b\u306f\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u3053\u306e\u305f\u3081\u306b\u30ed\u30fc\u30ab\u30eb\u306bapache\u7acb\u3066\u308b\u306e\u3082\u9762\u5012\u306a\u306e\u3067\u3001connect\u306emiddleware\u3067\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u306b\u3002\nnode.js\u306essi\u95a2\u9023\u306f\u3001\n\nnode-ssi\nsimple-ssi\nconnect-include\n\n\u7b49\u304c\u3042\u308a\u307e\u3059\u304c\u3001#include virtual=...\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u306fnode-ssi\u3060\u3051\u306e\u3088\u3046\u3067\u3059\u306e\u3067\u3001\u305d\u308c\u3092\u63a1\u7528\u3057\u307e\u3057\u305f\u3002\n\nnode-ssi\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u307e\u305a\u306f\u3001npm\u3067ssi\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\nnpm install ssi --save-dev\n\n\nGruntfile\u306e\u4fee\u6b63\nGruntfile\u306e\u4e0a\u90e8\u3067fs\u3001util\u3001ssi\u3092\u5b9a\u7fa9\u3002\n\nGruntfile.coffee\nmodule.exports = (grunt) ->\n  require('load-grunt-tasks') grunt\n\n  fs = require 'fs'\n  url = require 'url'\n  ssi = require 'ssi'\n\n... snipped ...\n\n\n\n\u305d\u306e\u5f8c\u3001connect\u306e\u8a2d\u5b9a\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306bmiddleware\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\nreq(\u30ea\u30af\u30a8\u30b9\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8)\u304b\u3089\u30ea\u30af\u30a8\u30b9\u30c8URL\u3092\u53d6\u5f97\n\u300c/\u300d\u3067\u7d42\u308f\u3063\u3066\u3044\u305f\u3089\u3001\u300cindex.html\u300d\u3092\u8db3\u3059\n\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u3001\u4e14\u3064\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u300c.html\u300d\u300c.shtml\u300d\u3067\u7d42\u308f\u3063\u3066\u3044\u308c\u3070\u3001SSI\u30d1\u30fc\u30b9\u51e6\u7406\u3092\u3057\u3066\u8fd4\u3059\n\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u3001\u6a19\u6e96\u306estatic\u306b\u51e6\u7406\u3092\u6e21\u3059\n\n\nGruntfile.coffee\n... snipped ...\n\n    connect:\n      server:\n        options:\n          port: 8000\n          base: '.'\n          middleware: (conn, opt) ->\n            opt.base = [opt.base] unless Array.isArray opt.base\n\n            middlewares = []\n            middlewares.push (req, res, next) ->\n              urlobj = url.parse req.originalUrl\n              filename = __dirname + urlobj.pathname + if urlobj.pathname.substr(-1) is '/' then 'index.html' else ''\n\n              if fs.existsSync(filename) and filename.match(/\\.s?html$/)\n                parser = new ssi(__dirname, '', '')\n                content = parser.parse(filename, fs.readFileSync(filename, {encoding: 'utf8'})).contents\n\n                res.writeHead 200,\n                  'Content-Type': 'text/html'\n                  'Content-Length': Buffer.byteLength content, 'utf8'\n                res.end content\n              else\n                next()\n\n            for base in opt.base\n              middlewares.push conn.static(base)\n\n            middlewares\n\n... snipped ...\n\n\n\u3053\u308c\u3067\u3001SSI\u3092\u4f7f\u3063\u305f\u30b3\u30f3\u30c6\u30f3\u30c4\u304c\u6765\u3066\u3082\u3068\u308a\u3042\u3048\u305a\u306f\u30ed\u30fc\u30ab\u30eb\u3067\u3057\u306e\u3052\u307e\u3059\u3002\n\u9700\u8981\u304c\u3042\u308b\u304b\u306f\u8b0e\u3002\n\n2014/04/21\nQueryString\u5bfe\u5fdc\u306e\u305f\u3081\u3001urlobj.path -> urlobj.pathname \u306b\u4fee\u6b63\n\n\n\u500b\u4eba\u7684\u306b\u306f\u4e45\u3005\u306b\u8033\u306b\u3057\u305fSSI\u3002\n`#include ...`\u7b49\u306e\u8a18\u6cd5\u3067HTML\u5185\u306b\u5225\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u57cb\u3081\u8fbc\u3093\u3060\u308a\u3059\u308b\u3082\u306e\u3067\u3059\u304c\u3001grunt-contrib-connect\u6a19\u6e96\u3067\u306fSSI\u306b\u5bfe\u5fdc\u3057\u3066\u304a\u3089\u305a\u3001\u30ed\u30fc\u30ab\u30eb\u3067\u78ba\u8a8d\u3057\u3088\u3046\u306b\u3082\u3059\u3050\u306b\u306f\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u3053\u306e\u305f\u3081\u306b\u30ed\u30fc\u30ab\u30eb\u306bapache\u7acb\u3066\u308b\u306e\u3082\u9762\u5012\u306a\u306e\u3067\u3001connect\u306emiddleware\u3067\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u306b\u3002\n\nnode.js\u306essi\u95a2\u9023\u306f\u3001\n\n* [node-ssi](https://github.com/67726e/node-ssi)\n* [simple-ssi](https://github.com/academo/simple-ssi)\n* [connect-include](https://github.com/zeevl/connect-include)\n\n\u7b49\u304c\u3042\u308a\u307e\u3059\u304c\u3001`#include virtual=...`\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u306fnode-ssi\u3060\u3051\u306e\u3088\u3046\u3067\u3059\u306e\u3067\u3001\u305d\u308c\u3092\u63a1\u7528\u3057\u307e\u3057\u305f\u3002\n\n## node-ssi\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\u307e\u305a\u306f\u3001npm\u3067ssi\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```bash\nnpm install ssi --save-dev\n```\n\n## Gruntfile\u306e\u4fee\u6b63\n\nGruntfile\u306e\u4e0a\u90e8\u3067`fs`\u3001`util`\u3001`ssi`\u3092\u5b9a\u7fa9\u3002\n\n```Gruntfile.coffee\nmodule.exports = (grunt) ->\n  require('load-grunt-tasks') grunt\n\n  fs = require 'fs'\n  url = require 'url'\n  ssi = require 'ssi'\n\n... snipped ...\n\n```\n\n\u305d\u306e\u5f8c\u3001connect\u306e\u8a2d\u5b9a\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b`middleware`\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n* req(\u30ea\u30af\u30a8\u30b9\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8)\u304b\u3089\u30ea\u30af\u30a8\u30b9\u30c8URL\u3092\u53d6\u5f97\n* \u300c/\u300d\u3067\u7d42\u308f\u3063\u3066\u3044\u305f\u3089\u3001\u300cindex.html\u300d\u3092\u8db3\u3059\n* \u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u3001\u4e14\u3064\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u300c.html\u300d\u300c.shtml\u300d\u3067\u7d42\u308f\u3063\u3066\u3044\u308c\u3070\u3001SSI\u30d1\u30fc\u30b9\u51e6\u7406\u3092\u3057\u3066\u8fd4\u3059\n* \u305d\u3046\u3067\u306a\u3051\u308c\u3070\u3001\u6a19\u6e96\u306estatic\u306b\u51e6\u7406\u3092\u6e21\u3059\n\n```Gruntfile.coffee\n... snipped ...\n\n    connect:\n      server:\n        options:\n          port: 8000\n          base: '.'\n          middleware: (conn, opt) ->\n            opt.base = [opt.base] unless Array.isArray opt.base\n\n            middlewares = []\n            middlewares.push (req, res, next) ->\n              urlobj = url.parse req.originalUrl\n              filename = __dirname + urlobj.pathname + if urlobj.pathname.substr(-1) is '/' then 'index.html' else ''\n\n              if fs.existsSync(filename) and filename.match(/\\.s?html$/)\n                parser = new ssi(__dirname, '', '')\n                content = parser.parse(filename, fs.readFileSync(filename, {encoding: 'utf8'})).contents\n\n                res.writeHead 200,\n                  'Content-Type': 'text/html'\n                  'Content-Length': Buffer.byteLength content, 'utf8'\n                res.end content\n              else\n                next()\n\n            for base in opt.base\n              middlewares.push conn.static(base)\n\n            middlewares\n\n... snipped ...\n```\n\n\u3053\u308c\u3067\u3001SSI\u3092\u4f7f\u3063\u305f\u30b3\u30f3\u30c6\u30f3\u30c4\u304c\u6765\u3066\u3082\u3068\u308a\u3042\u3048\u305a\u306f\u30ed\u30fc\u30ab\u30eb\u3067\u3057\u306e\u3052\u307e\u3059\u3002\n\u9700\u8981\u304c\u3042\u308b\u304b\u306f\u8b0e\u3002\n\n* 2014/04/21\nQueryString\u5bfe\u5fdc\u306e\u305f\u3081\u3001`urlobj.path` -> `urlobj.pathname` \u306b\u4fee\u6b63\n", "tags": ["grunt", "JavaScript", "ssi"]}