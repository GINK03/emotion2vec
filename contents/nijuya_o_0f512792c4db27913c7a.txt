{"tags": ["Java", "Jackson"], "context": "\n\nJackson \u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6/\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3092\u4f5c\u3063\u3066\u307f\u308b\nJackson\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3059\u3002\n\u901a\u5e38\u306e ObjectMapper \u306e\u8a2d\u5b9a\u306e\u307e\u307e\u3060\u3068 getter \u306b\u5bfe\u3059\u308b setter \u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3001\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u304c\u6271\u3048\u306a\u304b\u3063\u305f\u308a\u3068\u8272\u3005\u6761\u4ef6\u304c\u3042\u308b\u306e\u3067\u3001ObjectMapper \u306b\u6b21\u306e\u8a2d\u5b9a\u3092\u65bd\u3057\u3066\u5b9f\u65bd\u3057\u307e\u3059\u3002\n\n\n\u5168\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u306e\u307f\u5bfe\u8c61\u3068\u3059\u308b\uff08getter/setter \u306f\u5bfe\u8c61\u3068\u3057\u306a\u3044\uff09\n\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u70ba\u3001\u81ea\u8eab\u306e\u578b\u3092\u57cb\u3081\u8fbc\u3080\n@JsonIgnore\u304c\u4ed8\u3044\u3066\u3044\u3066\u3082\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u8c61\u306b\u3059\u308b\nnull \u306f\u51fa\u529b\u3057\u306a\u3044\uff08\u30c7\u30fc\u30bf\u91cf\u524a\u6e1b\uff09\n\n\nObjectMapper \u5074\u3067\u8272\u3005\u8a2d\u5b9a\u3059\u308b\u4e8b\u3067\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5074\u306f\u7279\u306b\u5b9f\u88c5\u306e\u5909\u66f4\u3092\u5fc5\u8981\u3068\u3057\u306a\u3044\u70b9\u304c\u30df\u30bd\u3067\u3059\u3002\n\n\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6/\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u30bd\u30fc\u30b9\n\nJacksonSerializer.java\npublic class JacksonSerializer {\n    private static final ObjectMapper mapper = new  ObjectMapper();\n    static {\n        // Field\u306e\u307f\u5bfe\u8c61\u306b\u8a2d\u5b9a\n        mapper.setVisibility(PropertyAccessor.ALL, Visibility.NONE);\n        mapper.setVisibility(PropertyAccessor.FIELD, Visibility.ANY);\n        // Generics \u5bfe\u5fdc\n        StdTypeResolverBuilder typeResolverBuilder = \n                new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);\n        typeResolverBuilder.init(JsonTypeInfo.Id.CLASS, null);\n        typeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);\n        typeResolverBuilder.typeProperty(\"classType\");\n        mapper.setDefaultTyping(typeResolverBuilder);\n        //@JsonIgnore \u3092\u7121\u8996\n        AnnotationIntrospector introspector = new JsonIgnoreAnnotationIgnoreInterceptor();\n        mapper.setAnnotationIntrospector(introspector);\n        // Null \u3092\u51fa\u529b\u3057\u306a\u3044\n        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        // @JsonSerialize(include=Include.NON_NULL) \u3068\u540c\u3058\u8a2d\u5b9a\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    private static class JsonIgnoreAnnotationIgnoreInterceptor \n            extends JacksonAnnotationIntrospector {\n        /** */\n        private static final long serialVersionUID = 1L;\n\n        @Override\n        public boolean _isIgnorable(Annotated a) {\n            return false;\n        }\n    }\n\n    public static byte[] serialize(Object source) throws Throwable {\n        return mapper.writeValueAsBytes(source);\n    }\n\n    public static String serializeAsString(Object source) throws Throwable {\n        return mapper.writeValueAsString(source);\n    }\n\n    public static <T> T deserialize(String json, Class<T> type) throws Throwable {\n        return mapper.readValue(json, type);\n    }\n\n    public static <T> T deserialize(byte[] data, Class<T> type) throws Throwable {\n        return mapper.readValue(data, type);\n    }\n}\n\n\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\npublic void main() throws Throwable {\n\n   SubClass sub = new SubClass();\n   sub.id = 1234;\n   sub.name = \"aiueo\";\n\n   DerivedClass derived = new DerivedClass();\n   derived.id = 5678;\n   derived.number = 1;\n\n   Array hoge = new Array();\n   hoge.list.add(sub);\n   hoge.list.add(derived);\n\n   String json = JacksonSerializer.serializeAsString(hoge);\n   System.out.println(json);\n\n   // deserialize \u304c\u6210\u529f\u3059\u308b\u304b\u78ba\u8a8d\n   Array hoge2 = JacksonSerializer.deserialize(json, Array.class);\n   String json2 = JacksonSerializer.serializeAsString(hoge2);\n   System.out.println(\"desirialize success ?\");\n   System.out.println(json.equals(json2));\n\n   // \u4f59\u8a08\u306a\u5024\u304c\u5165\u3063\u3066\u3044\u3066\u3082\u7121\u8996\u3057\u3066JSON\u3092\u5909\u63db\u3067\u304d\u308b\u304b\u78ba\u8a8d\n   System.out.println(\"\\nmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\\n\u304c\u6709\u52b9\u306b\u52b9\u3044\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u70ba\u3001\u9069\u5f53\u306a\u5024\u3092JSON\u306b\u633f\u5165\");\n   StringBuilder sb = new StringBuilder(json2);\n   sb.insert(1, \"\\\"unknwon\\\":\\\"fugafuga\\\",\");\n   String customJson = sb.toString();\n   System.out.println(customJson);\n\n   Array hoge3 = JacksonSerializer.deserialize(customJson, Array.class);\n   String json3 = JacksonSerializer.serializeAsString(hoge3);\n   System.out.println(\"desirialize success ?\");\n   System.out.println(json.equals(json3));\n\n}\n\npublic abstract class SuperClass {\n    public int id;\n    @JsonIgnore\n    private String address = \"address\";\n\n    public String getPublic() {\n        return \"public\";\n    }\n}\n\npublic class SubClass extends SuperClass {\n    public String name;\n}\n\npublic class DerivedClass extends SuperClass {\n    public int number;\n}\n\npublic class Array extends SuperClass {\n    public List<SuperClass> list = new ArrayList<SuperClass>();\n}\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\n\u5b9f\u884c\u7d50\u679c\n\n{\n    \"id\": 0,\n    \"address\": \"address\",\n    \"list\": [\n        \"java.util.ArrayList\",\n        [\n            {\n                \"classType\": \"SubClass\",\n                \"id\": 1234,\n                \"address\": \"address\",\n                \"name\": \"aiueo\"\n            },\n            {\n                \"classType\": \"DerivedClass\",\n                \"id\": 5678,\n                \"address\": \"address\",\n                \"number\": 1\n            }\n        ]\n    ]\n}\n\ndesirialize success ?\ntrue\n\nmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n\u304c\u6709\u52b9\u306b\u52b9\u3044\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u70ba\u3001\u9069\u5f53\u306a\u5024\u3092JSON\u306b\u633f\u5165\n\n{\n    \"unknwon\": \"fugafuga\",\n    \"id\": 0,\n    \"address\": \"address\",\n    \"list\": [\n        \"java.util.ArrayList\",\n        [\n            {\n                \"classType\": \"SubClass\",\n                \"id\": 1234,\n                \"address\": \"address\",\n                \"name\": \"aiueo\"\n            },\n            {\n                \"classType\": \"DerivedClass\",\n                \"id\": 5678,\n                \"address\": \"address\",\n                \"number\": 1\n            }\n        ]\n    ]\n}\n\ndesirialize success ?\ntrue\n\n\n\n\n\u5236\u9650\n\u4e00\u5fdc\u3001\u3053\u3053\u306b\u66f8\u3044\u305f\u30c6\u30b9\u30c8\u306f\u901a\u308a\u307e\u3059\u304c\u3001\u65e2\u306b\u5206\u304b\u3063\u3066\u3044\u308b\u5236\u9650\u3068\u3057\u3066\u3001\n\u300c\u5faa\u74b0\u53c2\u7167\u300d\u3092\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3042\u308b\u3068\u5931\u6557\u3057\u307e\u3059\u3002\n2017/02/20 \u8ffd\u8a18\nJsonIgnoreAnnotationIgnoreInterceptor \u306e\u5b9f\u88c5\u3092\u4ee5\u4e0b\u306e\u69d8\u306b\u5909\u66f4\u3059\u308b\u4e8b\u3067\u3001\u5faa\u74b0\u53c2\u7167\u3082\u554f\u984c\u306a\u304f\u3067\u304d\u307e\u3057\u305f\u3002\n\uff08\u3064\u3044\u3067\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e \uff20JsonTypeInfo \u3092\u7121\u8996\u3059\u308b\u8a2d\u5b9a\u3082\u8ffd\u52a0 \uff09\nrivate static class JsonIgnoreAnnotationIgnoreInterceptor \n            extends JacksonAnnotationIntrospector {\n        /** */\n        private static final long serialVersionUID = 1L;\n\n        /**\n         * @JsonIgnore \u3092\u7121\u8996\n         **/\n        @Override\n        public boolean _isIgnorable(Annotated a) {\n            return false;\n        }\n\n        /**\n         * @JsonTypeInfo \u3092\u7121\u8996\n         **/\n        @Override\n        protected TypeResolverBuilder<?> _findTypeResolver(MapperConfig<?> config,\n                Annotated ann, JavaType baseType) {\n            TypeResolverBuilder<?> builder = super._findTypeResolver(config, ann, baseType);\n            if (builder == null) {\n                return null;\n            }\n            builder.init(JsonTypeInfo.Id.CLASS, null);\n            builder.inclusion(JsonTypeInfo.As.PROPERTY);\n            builder.typeProperty(\"classType\");\n            return builder;\n        }\n\n        /**\n         * \u5faa\u74b0\u53c2\u7167\u5bfe\u7b56\u3068\u3057\u3066\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eID\u3092\u672c\u6587\u306b\u57cb\u3081\u8fbc\u307f\n         **/\n        @Override\n        public ObjectIdInfo findObjectIdInfo(final Annotated ann) {\n            return new ObjectIdInfo(\n                    PropertyName.construct(\"@id\", null),\n                    null,\n                    ObjectIdGenerators.IntSequenceGenerator.class,\n                    null);\n        }\n    }\n\n\u305d\u308c\u4ee5\u5916\u306f\u5272\u3068\u4e0a\u624b\u304f\u3044\u3063\u3066\u3044\u308b\u6c17\u304c\u3057\u307e\u3059\u304c\u3001\u4f55\u306e\u4fdd\u8a3c\u3082\u7121\u3044\u306e\u3067\u4f7f\u3046\u5834\u5408\u306f\u81ea\u5df1\u8cac\u4efb\u3067\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n# Jackson \u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6/\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3092\u4f5c\u3063\u3066\u307f\u308b\n\nJackson\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3059\u3002\n\u901a\u5e38\u306e ObjectMapper \u306e\u8a2d\u5b9a\u306e\u307e\u307e\u3060\u3068 getter \u306b\u5bfe\u3059\u308b setter \u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3001\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u304c\u6271\u3048\u306a\u304b\u3063\u305f\u308a\u3068\u8272\u3005\u6761\u4ef6\u304c\u3042\u308b\u306e\u3067\u3001ObjectMapper \u306b\u6b21\u306e\u8a2d\u5b9a\u3092\u65bd\u3057\u3066\u5b9f\u65bd\u3057\u307e\u3059\u3002\n\n> * \u5168\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u306e\u307f\u5bfe\u8c61\u3068\u3059\u308b\uff08getter/setter \u306f\u5bfe\u8c61\u3068\u3057\u306a\u3044\uff09\n* \u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u70ba\u3001\u81ea\u8eab\u306e\u578b\u3092\u57cb\u3081\u8fbc\u3080\n* @JsonIgnore\u304c\u4ed8\u3044\u3066\u3044\u3066\u3082\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u8c61\u306b\u3059\u308b\n* null \u306f\u51fa\u529b\u3057\u306a\u3044\uff08\u30c7\u30fc\u30bf\u91cf\u524a\u6e1b\uff09\n\nObjectMapper \u5074\u3067\u8272\u3005\u8a2d\u5b9a\u3059\u308b\u4e8b\u3067\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5074\u306f\u7279\u306b\u5b9f\u88c5\u306e\u5909\u66f4\u3092\u5fc5\u8981\u3068\u3057\u306a\u3044\u70b9\u304c\u30df\u30bd\u3067\u3059\u3002\n\n### \u30b7\u30ea\u30a2\u30e9\u30a4\u30b6/\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u30bd\u30fc\u30b9\n\n```java:JacksonSerializer.java\npublic class JacksonSerializer {\n    private static final ObjectMapper mapper = new  ObjectMapper();\n    static {\n        // Field\u306e\u307f\u5bfe\u8c61\u306b\u8a2d\u5b9a\n        mapper.setVisibility(PropertyAccessor.ALL, Visibility.NONE);\n        mapper.setVisibility(PropertyAccessor.FIELD, Visibility.ANY);\n        // Generics \u5bfe\u5fdc\n        StdTypeResolverBuilder typeResolverBuilder = \n        \t\tnew ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);\n        typeResolverBuilder.init(JsonTypeInfo.Id.CLASS, null);\n        typeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);\n        typeResolverBuilder.typeProperty(\"classType\");\n        mapper.setDefaultTyping(typeResolverBuilder);\n        //@JsonIgnore \u3092\u7121\u8996\n        AnnotationIntrospector introspector = new JsonIgnoreAnnotationIgnoreInterceptor();\n        mapper.setAnnotationIntrospector(introspector);\n        // Null \u3092\u51fa\u529b\u3057\u306a\u3044\n        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        // @JsonSerialize(include=Include.NON_NULL) \u3068\u540c\u3058\u8a2d\u5b9a\n        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    private static class JsonIgnoreAnnotationIgnoreInterceptor \n    \t\textends JacksonAnnotationIntrospector {\n        /** */\n        private static final long serialVersionUID = 1L;\n\n        @Override\n        public boolean _isIgnorable(Annotated a) {\n            return false;\n        }\n    }\n\n    public static byte[] serialize(Object source) throws Throwable {\n        return mapper.writeValueAsBytes(source);\n    }\n\n    public static String serializeAsString(Object source) throws Throwable {\n        return mapper.writeValueAsString(source);\n    }\n\n    public static <T> T deserialize(String json, Class<T> type) throws Throwable {\n        return mapper.readValue(json, type);\n    }\n\n    public static <T> T deserialize(byte[] data, Class<T> type) throws Throwable {\n        return mapper.readValue(data, type);\n    }\n}\n\n```\n\n### \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\n```java\npublic void main() throws Throwable {\n\n   SubClass sub = new SubClass();\n   sub.id = 1234;\n   sub.name = \"aiueo\";\n\n   DerivedClass derived = new DerivedClass();\n   derived.id = 5678;\n   derived.number = 1;\n\n   Array hoge = new Array();\n   hoge.list.add(sub);\n   hoge.list.add(derived);\n\n   String json = JacksonSerializer.serializeAsString(hoge);\n   System.out.println(json);\n\n   // deserialize \u304c\u6210\u529f\u3059\u308b\u304b\u78ba\u8a8d\n   Array hoge2 = JacksonSerializer.deserialize(json, Array.class);\n   String json2 = JacksonSerializer.serializeAsString(hoge2);\n   System.out.println(\"desirialize success ?\");\n   System.out.println(json.equals(json2));\n\n   // \u4f59\u8a08\u306a\u5024\u304c\u5165\u3063\u3066\u3044\u3066\u3082\u7121\u8996\u3057\u3066JSON\u3092\u5909\u63db\u3067\u304d\u308b\u304b\u78ba\u8a8d\n   System.out.println(\"\\nmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\\n\u304c\u6709\u52b9\u306b\u52b9\u3044\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u70ba\u3001\u9069\u5f53\u306a\u5024\u3092JSON\u306b\u633f\u5165\");\n   StringBuilder sb = new StringBuilder(json2);\n   sb.insert(1, \"\\\"unknwon\\\":\\\"fugafuga\\\",\");\n   String customJson = sb.toString();\n   System.out.println(customJson);\n\n   Array hoge3 = JacksonSerializer.deserialize(customJson, Array.class);\n   String json3 = JacksonSerializer.serializeAsString(hoge3);\n   System.out.println(\"desirialize success ?\");\n   System.out.println(json.equals(json3));\n\n}\n\npublic abstract class SuperClass {\n    public int id;\n    @JsonIgnore\n    private String address = \"address\";\n\n    public String getPublic() {\n        return \"public\";\n    }\n}\n\npublic class SubClass extends SuperClass {\n    public String name;\n}\n\npublic class DerivedClass extends SuperClass {\n    public int number;\n}\n\npublic class Array extends SuperClass {\n    public List<SuperClass> list = new ArrayList<SuperClass>();\n}\n    \n```\n\n### \u5b9f\u884c\u7d50\u679c\n\n```text:\u5b9f\u884c\u7d50\u679c\n\n{\n    \"id\": 0,\n    \"address\": \"address\",\n    \"list\": [\n        \"java.util.ArrayList\",\n        [\n            {\n                \"classType\": \"SubClass\",\n                \"id\": 1234,\n                \"address\": \"address\",\n                \"name\": \"aiueo\"\n            },\n            {\n                \"classType\": \"DerivedClass\",\n                \"id\": 5678,\n                \"address\": \"address\",\n                \"number\": 1\n            }\n        ]\n    ]\n}\n\ndesirialize success ?\ntrue\n\nmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n\u304c\u6709\u52b9\u306b\u52b9\u3044\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u70ba\u3001\u9069\u5f53\u306a\u5024\u3092JSON\u306b\u633f\u5165\n\n{\n    \"unknwon\": \"fugafuga\",\n    \"id\": 0,\n    \"address\": \"address\",\n    \"list\": [\n        \"java.util.ArrayList\",\n        [\n            {\n                \"classType\": \"SubClass\",\n                \"id\": 1234,\n                \"address\": \"address\",\n                \"name\": \"aiueo\"\n            },\n            {\n                \"classType\": \"DerivedClass\",\n                \"id\": 5678,\n                \"address\": \"address\",\n                \"number\": 1\n            }\n        ]\n    ]\n}\n\ndesirialize success ?\ntrue\n\n```\n\n    \n## \u5236\u9650\n\n~~\u4e00\u5fdc\u3001\u3053\u3053\u306b\u66f8\u3044\u305f\u30c6\u30b9\u30c8\u306f\u901a\u308a\u307e\u3059\u304c\u3001\u65e2\u306b\u5206\u304b\u3063\u3066\u3044\u308b\u5236\u9650\u3068\u3057\u3066\u3001~~\n~~\u300c<b>\u5faa\u74b0\u53c2\u7167</b>\u300d\u3092\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3042\u308b\u3068\u5931\u6557\u3057\u307e\u3059\u3002~~\n\n2017/02/20 \u8ffd\u8a18\n`JsonIgnoreAnnotationIgnoreInterceptor ` \u306e\u5b9f\u88c5\u3092\u4ee5\u4e0b\u306e\u69d8\u306b\u5909\u66f4\u3059\u308b\u4e8b\u3067\u3001\u5faa\u74b0\u53c2\u7167\u3082\u554f\u984c\u306a\u304f\u3067\u304d\u307e\u3057\u305f\u3002\n\uff08\u3064\u3044\u3067\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e \uff20JsonTypeInfo \u3092\u7121\u8996\u3059\u308b\u8a2d\u5b9a\u3082\u8ffd\u52a0 \uff09\n\n```\nrivate static class JsonIgnoreAnnotationIgnoreInterceptor \n            extends JacksonAnnotationIntrospector {\n        /** */\n        private static final long serialVersionUID = 1L;\n\n        /**\n         * @JsonIgnore \u3092\u7121\u8996\n         **/\n        @Override\n        public boolean _isIgnorable(Annotated a) {\n            return false;\n        }\n\n        /**\n         * @JsonTypeInfo \u3092\u7121\u8996\n         **/\n        @Override\n        protected TypeResolverBuilder<?> _findTypeResolver(MapperConfig<?> config,\n                Annotated ann, JavaType baseType) {\n            TypeResolverBuilder<?> builder = super._findTypeResolver(config, ann, baseType);\n            if (builder == null) {\n                return null;\n            }\n            builder.init(JsonTypeInfo.Id.CLASS, null);\n            builder.inclusion(JsonTypeInfo.As.PROPERTY);\n            builder.typeProperty(\"classType\");\n            return builder;\n        }\n\n        /**\n         * \u5faa\u74b0\u53c2\u7167\u5bfe\u7b56\u3068\u3057\u3066\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eID\u3092\u672c\u6587\u306b\u57cb\u3081\u8fbc\u307f\n         **/\n        @Override\n        public ObjectIdInfo findObjectIdInfo(final Annotated ann) {\n            return new ObjectIdInfo(\n                    PropertyName.construct(\"@id\", null),\n                    null,\n                    ObjectIdGenerators.IntSequenceGenerator.class,\n                    null);\n        }\n    }\n```\n\n~~\u305d\u308c\u4ee5\u5916\u306f\u5272\u3068\u4e0a\u624b\u304f\u3044\u3063\u3066\u3044\u308b\u6c17\u304c\u3057\u307e\u3059\u304c\u3001~~\u4f55\u306e\u4fdd\u8a3c\u3082\u7121\u3044\u306e\u3067\u4f7f\u3046\u5834\u5408\u306f\u81ea\u5df1\u8cac\u4efb\u3067\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n"}