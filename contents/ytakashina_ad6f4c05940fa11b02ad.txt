{"context": "\u6bd4\u8f03\u7684\u5206\u304b\u308a\u3084\u3059\u3044\u3057\u3001\u305d\u308c\u306a\u308a\u306b\u901f\u3044\u3057\u3001\u5b9f\u88c5\u3082\u697d\u3002\u307f\u3093\u306a\u5927\u597d\u304d k-means \u6cd5\u3002\n\u4eca\u56de\u306f\u305d\u3093\u306a k-means \u6cd5\u3092\u3001 C# \u306e LINQ(+MoreLINQ) \u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\nk-means \u6cd5\u306b\u3064\u3044\u3066\n\u7c21\u5358\u306b\u8a00\u3046\u3068\u3001\u5404\u30c7\u30fc\u30bf\u70b9\u306e\u3001\u81ea\u5206\u304c\u6240\u5c5e\u3059\u308b\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u3068\u306e\u4e8c\u4e57\u8aa4\u5dee\u306e\u7dcf\u548c\u3092\u3001\u52fe\u914d\u6cd5\u7684\u306b\u6700\u5c0f\u5316\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002\n\u30af\u30e9\u30b9\u30bf\u6570 kk \u3001\u3042\u308b\u30af\u30e9\u30b9\u30bf ii \u306b\u6240\u5c5e\u3059\u308b\u30c7\u30fc\u30bf\u70b9\u306e\u96c6\u5408 SiS_i \u3068\u3057\u3066\u3001\u5f0f\u3067\u66f8\u304f\u3068\u3053\u3093\u306a\u611f\u3058\u3002\n\\arg \\min \\sum_{i=1}^k \\sum_{x \\in S_i} ||x - \\mu_i||^2\nargmink\u2211i=1\u2211x\u2208Si||x\u2212\u03bci||2{\\arg \\min \\sum_{i=1}^k \\sum_{x \\in S_i} ||x - \\mu_i||^2\n}\n\u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u77e5\u308a\u305f\u3044\u4eba\u306b\u306f\u3001\u795e\u5d8c\u5148\u751f\u306e\u8cc7\u6599\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\u30a4\u30e1\u30fc\u30b8\u3092\u3064\u304b\u3080\u306a\u3089\u3001\u300cK-means \u6cd5\u3092 D3.js \u3067\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u305f\u300d\u304c k-means \u6cd5\u3092 step-by-step \u3067\u5b9f\u884c\u3067\u304d\u3066\u7406\u89e3\u306e\u52a9\u3051\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\nk-means \u6cd5\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\u8a08\u7b97\u306e\u6d41\u308c\u306f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n\u30c7\u30fc\u30bf\u70b9\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b k \u500b\u306e\u70b9\u3092\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u306e\u521d\u671f\u5024\u3068\u3057\u3066\u53d6\u308b\u3002\n\u4ee5\u4e0b\u306e 2 \u30b9\u30c6\u30c3\u30d7\u3092\u53ce\u675f\u3059\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\u3002\n\n\n\u5404\u30c7\u30fc\u30bf\u70b9\u306b\u3064\u3044\u3066\u3001\u81ea\u8eab\u306b\u6700\u3082\u8fd1\u3044\u30af\u30e9\u30b9\u30bf\u306b\u5272\u308a\u5f53\u3066\u308b\u3002\n\u5404\u30af\u30e9\u30b9\u30bf\u306b\u3064\u3044\u3066\u3001\u6240\u5c5e\u3059\u308b\u30c7\u30fc\u30bf\u70b9\u306e\u5e73\u5747\u3092\u8a08\u7b97\u3057\u3066\u65b0\u3057\u3044\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u3068\u3059\u308b\u3002\n\n\n\n\nk-means \u6cd5\u306e\u5b9f\u88c5\n\u4eca\u56de\u5bfe\u8c61\u3068\u3059\u308b\u30c7\u30fc\u30bf\u306f\u3001\u7c21\u5358\u306e\u305f\u3081 double \u578b\u306e 1 \u6b21\u5143\u30c7\u30fc\u30bf\u3068\u3057\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u69cb\u9020\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002n \u306f\u30c7\u30fc\u30bf\u70b9\u306e\u6570\u3001 k \u306f\u30af\u30e9\u30b9\u30bf\u6570\u3067\u3059\u3002\n\n\n\n\u5909\u6570\n\u578b\n\u9577\u3055\n\u4e2d\u8eab\n\n\n\n\ndata\ndouble[]\nn\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u3044\u30c7\u30fc\u30bf\u3002\u4eca\u56de\u306f double \u578b\u306e\u914d\u5217\u3002\n\n\nassignments\nint[]\nn\n\u5404\u30c7\u30fc\u30bf\u70b9\u304c\u3069\u306e\u30af\u30e9\u30b9\u30bf\u306b\u5c5e\u3059\u308b\u304b\u3002 {0, 1, ..., k-1} \u306e\u6574\u6570\u5024\u3092\u53d6\u308b\u3002\n\n\nmeans\ndouble[]\nk\n\u5404\u30af\u30e9\u30b9\u30bf\u306e\u4e2d\u5fc3\u3002\u5404\u30af\u30e9\u30b9\u30bf\u306b\u6240\u5c5e\u3059\u308b\u30c7\u30fc\u30bf\u306e\u5e73\u5747\u3092\u3068\u3063\u305f\u3082\u306e\u3002 data \u540c\u69d8 double \u578b\u306e\u914d\u5217\n\n\n\n\u52a0\u3048\u3066\u3001 data \u3068 assignments \u306b\u3064\u3044\u3066\u306f\u3001\u540c\u3058\u6dfb\u5b57\u306f\u540c\u3058\u30c7\u30fc\u30bf\u70b9\u3092\u6307\u3059\u3053\u3068\u3068\u3057\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\u3002\npublic static Tuple<double[], int[]> KMeans(double[] data, int k)\n{\n    // 1. \u30c7\u30fc\u30bf\u70b9\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b k \u500b\u306e\u30af\u30e9\u30b9\u30bf\u5e73\u5747\u3092\u521d\u671f\u5024\u3068\u3057\u3066\u53d6\u308b\u3002\n    var rand = new Random();\n    var means = data.OrderBy(v => rand.Next()).Take(k).ToList();\n    // 2. \u53ce\u675f\u5224\u5b9a\u306e\u305f\u3081\u306b\u30eb\u30fc\u30d7\u5916\u306b assignments \u5909\u6570\u3092\u6301\u3063\u3066\u304a\u304f\u3002\n    var assignments = new int[data.Length];\n    // 2. \u53ce\u675f\u3059\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\u3002\n    while (true)\n    {\n        // 2. \u53ce\u675f\u5224\u5b9a\u306e\u305f\u3081\u306b 1 \u3064\u524d\u306e\u72b6\u614b\u3092\u30b3\u30d4\u30fc\u3002\n        var prevAssignments = assignments.Select(v => v).ToArray();\n        // 2.1. \u5404\u30c7\u30fc\u30bf\u70b9\u306b\u3064\u3044\u3066\u3001\u81ea\u8eab\u306b\u6700\u3082\u8fd1\u3044\u30af\u30e9\u30b9\u30bf\u306b\u5272\u308a\u5f53\u3066\u308b\u3002\n        assignments = data.Select(v => means.IndexOf(means.MinBy(m => Math.Pow(v - m, 2)))).ToArray();\n        // 2. \u53ce\u675f\u3057\u3066\u3044\u305f\u3089\u8a08\u7b97\u7d42\u4e86\u3002\n        if (Enumerable.Range(0, data.Length).All(i => assignments[i] == prevAssignments[i])) break;\n        // 2.2. \u5404\u30af\u30e9\u30b9\u30bf\u306b\u3064\u3044\u3066\u3001\u6240\u5c5e\u3059\u308b\u30c7\u30fc\u30bf\u70b9\u306e\u5e73\u5747\u3092\u8a08\u7b97\u3057\u3066\u65b0\u3057\u3044\u30af\u30e9\u30b9\u30bf\u5e73\u5747\u3068\u3059\u308b\u3002\n        means = means.Select((m, i) => data.Where((v, j) => i == assignments[j]).DefaultIfEmpty(m).Average()).ToList();\n    }\n    return Tuple.Create(means.ToArray(), assignments);\n}\n\n\u62ec\u5f27\u3001\u30b3\u30e1\u30f3\u30c8\u3001\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u30fb\u623b\u308a\u5024\u3092\u9664\u3044\u305f\u3001\u7d14\u7c8b\u306b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u95a2\u4fc2\u3057\u3066\u3044\u308b\u90e8\u5206\u306f 8 \u884c\u3067\u66f8\u3051\u3066\u3044\u307e\u3059\u3002\n\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n1,2 \u884c\u76ee\n// 1. \u30c7\u30fc\u30bf\u70b9\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b k \u500b\u306e\u30af\u30e9\u30b9\u30bf\u5e73\u5747\u3092\u521d\u671f\u5024\u3068\u3057\u3066\u53d6\u308b\u3002\nvar rand = new Random();\nvar means = data.OrderBy(v => rand.Next()).Take(k).ToList();\n\n\u307e\u305a\u3001\u4e0a\u8a18\u306e\u90e8\u5206\u3067\u306f\u30af\u30e9\u30b9\u30bf\u5e73\u5747\u306e\u521d\u671f\u5024\u3092\u53d6\u3063\u3066\u3044\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001\u307e\u305a data.OrderBy(v => rand.Next()) \u3067\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u306b\u3064\u3044\u3066\u30bd\u30fc\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u5143\u306e data \u306e\u8981\u7d20\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\u3092\u3057\u305f\u914d\u5217\uff08\u6b63\u78ba\u306b\u306f IEnumerable \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u3092\u5f97\u307e\u3059\u3002\u6b21\u306b\u3001 .Take(k) \u3067\u305d\u306e\u6700\u521d\u306e k \u500b\u3092\u53d6\u308b\u3053\u3068\u3067\u3001\u7591\u4f3c\u7684\u306b\u300c\u30c7\u30fc\u30bf\u70b9\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b k \u500b\u306e\u70b9\u3092\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u306e\u521d\u671f\u5024\u3068\u3057\u3066\u53d6\u308b\u300d\u3068\u3044\u3046\u51e6\u7406\u3092\u518d\u73fe\u3057\u3066\u3044\u307e\u3059\uff08\u5b8c\u5168\u306b\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3067\u3059\u304c\u3001 k-means \u6cd5\u3067\u306f\u305d\u308c\u307b\u3069\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3067\u3057\u3087\u3046\uff09\u3002\n(2017/2/7 \u8ffd\u8a18) @ozwk \u3055\u3093\u3088\u308a\u3054\u6307\u6458\u3092\u53d7\u3051\u307e\u3057\u305f\u304c\u3001\u4e71\u6570\u306e\u751f\u6210\u306b Guid \u3092\u4f7f\u3046\u3068\u3001\u4e71\u6570\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u5909\u6570\u306b\u6301\u3063\u3066\u304a\u304f\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b 1 \u884c\u3067\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nvar means = data.OrderBy(v => Guid.NewGuid()).Take(k).ToList();\n\n\n3 \u884c\u76ee\n// 2. \u53ce\u675f\u5224\u5b9a\u306e\u305f\u3081\u306b\u30eb\u30fc\u30d7\u5916\u306b assignments \u5909\u6570\u3092\u6301\u3063\u3066\u304a\u304f\u3002\nvar assignments = new int[data.Length];\n\n\u4eca\u56de\u306f\u30c7\u30fc\u30bf\u70b9\u306b\u5bfe\u3059\u308b\u30af\u30e9\u30b9\u30bf\u3078\u306e\u5272\u308a\u5f53\u3066 (assignments) \u304c\u5909\u5316\u3057\u306a\u304f\u306a\u3063\u305f\u3089\u53ce\u675f\u3057\u305f\u3068\u307f\u306a\u3059\u306e\u3067\u3001\u53ce\u675f\u5224\u5b9a\u306e\u305f\u3081\u306b\u30eb\u30fc\u30d7\u5916\u3067 assignments \u3092\u5ba3\u8a00\u3057\u3066\u3044\u307e\u3059\u3002 means \u3092\u53ce\u675f\u5224\u5b9a\u306b\u4f7f\u7528\u3057\u3066\u3082\u3088\u3044\u306e\u3067\u3059\u304c\u3001\u305d\u3046\u3059\u308b\u3068\u5224\u5b9a\u306e\u3068\u304d\u306e\u5f0f\u304c\u53b3\u5bc6\u3067\u306f\u306a\u304f\u306a\u308b\u306e\u3067\u3053\u3061\u3089\u306e\u65b9\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n\n4 \u884c\u76ee\n// 2. \u53ce\u675f\u3059\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\u3002\nwhile (true)\n\n\u7e70\u308a\u8fd4\u3057\u90e8\u5206\u3067\u3059\u3002\u4eca\u56de\u306f\u3001 while \u30eb\u30fc\u30d7\u3092\u56de\u3057\u3066\u53ce\u675f\u3057\u305f\u3089 break \u3059\u308b\u5f62\u306b\u3057\u307e\u3059\u3002\n\n5 \u884c\u76ee\n// 2. \u53ce\u675f\u5224\u5b9a\u306e\u305f\u3081\u306b 1 \u3064\u524d\u306e\u72b6\u614b\u3092\u30b3\u30d4\u30fc\u3002\nvar prevAssignments = assignments.Select(v => v).ToArray();\n\n\u53ce\u675f\u5224\u5b9a\u306e\u6e96\u5099\u3067\u3059\u3002\u5358\u7d14\u306b\u4ee3\u5165\u3057\u305f\u3060\u3051\u3060\u3068 shallow copy \u306b\u306a\u3063\u3066\u3057\u307e\u3046 (assignments \u3092\u5909\u66f4\u3059\u308b\u3068 prevAssignments \u3082\u5909\u66f4\u3055\u308c\u308b) \u306e\u3067\u3001 deep \u306b\u3059\u308b\u305f\u3081\u306b .Select(v => v) \u3092\u631f\u3093\u3067\u3044\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001 assignments \u3068\u306f\u5225\u306e\u914d\u5217\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u4f5c\u3089\u308c\u307e\u3059\u3002\n\n6 \u884c\u76ee\n// 2.1. \u5404\u30c7\u30fc\u30bf\u70b9\u306b\u3064\u3044\u3066\u3001\u81ea\u8eab\u306b\u6700\u3082\u8fd1\u3044\u30af\u30e9\u30b9\u30bf\u306b\u5272\u308a\u5f53\u3066\u308b\u3002\nassignments = data.Select(v => means.IndexOf(means.MinBy(m => Math.Pow(v - m, 2)))).ToArray();\n\n\u5404\u30c7\u30fc\u30bf\u70b9\u306b\u3064\u3044\u3066\u3001 means.IndexOf(means.MinBy(m => Math.Pow(v - m, 2))) \u3067\u3001\u4e2d\u5fc3\u3068\u306e\u8ddd\u96e2\u304c\u6700\u5c0f\u306b\u306a\u308b\u3088\u3046\u306a\u30af\u30e9\u30b9\u30bf\u306e means \u914d\u5217\u5185\u3067\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002 MinBy \u306b\u306f MoreLinq \u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n7 \u884c\u76ee\n// 2. \u53ce\u675f\u3057\u3066\u3044\u305f\u3089\u8a08\u7b97\u7d42\u4e86\u3002\nif (Enumerable.Range(0, data.Length).All(i => assignments[i] == prevAssignments[i])) break;\n\n\u53ce\u675f\u5224\u5b9a\u306e\u90e8\u5206\u3067\u3059\u3002\u5168\u3066\u306e\u30c7\u30fc\u30bf\u70b9\u306b\u3064\u3044\u3066\u3001\u3069\u306e\u70b9\u3067\u3082\u5272\u308a\u5f53\u3066\u3089\u308c\u308b\u30af\u30e9\u30b9\u30bf\u304c\u5909\u5316\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089 (\u53ce\u675f\u3057\u3066\u3044\u305f\u3089) \u3001\u30eb\u30fc\u30d7\u3092\u629c\u3051\u307e\u3059\u3002\n\n8 \u884c\u76ee\n// 2.2. \u5404\u30af\u30e9\u30b9\u30bf\u306b\u3064\u3044\u3066\u3001\u6240\u5c5e\u3059\u308b\u30c7\u30fc\u30bf\u70b9\u306e\u5e73\u5747\u3092\u8a08\u7b97\u3057\u3066\u65b0\u3057\u3044\u30af\u30e9\u30b9\u30bf\u5e73\u5747\u3068\u3059\u308b\u3002\nmeans = means.Select((m, i) => data.Where((v, j) => i == assignments[j]).DefaultIfEmpty(m).Average()).ToList();\n\n\u6700\u5f8c\u306b\u3001 means.Select((m, i) => \u3067\u3001\u5404\u30af\u30e9\u30b9\u30bf\u306e\u4e2d\u5fc3 m \u3068\u6dfb\u5b57 i \u306b\u3064\u3044\u3066\u3001data.Where((v, j) => i == assignments[j]) \u3067 i \u756a\u76ee\u306e\u30af\u30e9\u30b9\u30bf\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u70b9\u3092\u62bd\u51fa\u3057\u3001 .Average() \u3067\u5e73\u5747\u3092\u53d6\u308a\u3001\u65b0\u305f\u306a\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u3068\u3057\u307e\u3059\u3002 .DefaultIfEmpty(m) \u306f\u3001\u3082\u3057\u3069\u306e\u70b9\u3082\u5272\u308a\u5f53\u3066\u3089\u308c\u306a\u3044\u3088\u3046\u306a\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u304c\u3067\u304d\u3066\u3057\u307e\u3063\u305f\u3089\u3001\u305d\u306e\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u306b\u3064\u3044\u3066\u306f 1 \u3064\u524d\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u4fdd\u6301\u3059\u308b\u3068\u3044\u3046\u8a2d\u5b9a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u7d50\u679c\n\u4e0a\u8a18\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3067\u3001\u3072\u3068\u307e\u305a double \u578b\u306b\u3064\u3044\u3066\u306f\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3055\u3063\u305d\u304f\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u4f8b\nvar data = new double[] {1, 2, 3, 3, 5, 6, 8, 9, 100};\nvar results = KMeans(data, 4);\nvar assignments = results.Item2;\nfor (var i = 0; i < data.Length; i++)\n{\n    Console.WriteLine($\"value:{data[i],3}, cluster:{assignments[i],2}\");\n}\n\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u51fa\u307e\u3057\u305f\u3002 value \u304c\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u5bfe\u8c61\u306e\u5b9f\u6570\u5024\u3001 cluster \u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u308b\u30af\u30e9\u30b9\u30bf\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u3057\u307e\u3059\u3002\u4e00\u5fdc\u304d\u3061\u3093\u3068\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u304d\u3066\u3044\u305d\u3046\u3067\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\nvalue:   1, cluster: 3\nvalue:   2, cluster: 2\nvalue:   3, cluster: 2\nvalue:   3, cluster: 2\nvalue:   5, cluster: 1\nvalue:   6, cluster: 1\nvalue:   8, cluster: 1\nvalue:   9, cluster: 1\nvalue: 100, cluster: 0\n\n\n\n\u304a\u307e\u3051(2\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u306e\u5834\u5408)\n1 \u6b21\u5143\u30c7\u30fc\u30bf\u3060\u3051\u3060\u3068\u3084\u306f\u308a\u6620\u3048\u306a\u3044\u306e\u3067 2 \u6b21\u5143\u306e System.Numerics.Vector2 \u578b\u306e\u3082\u306e\u3082\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\u3053\u306e\u5834\u5408\u3001\u81ea\u5206\u3067\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001 8 \u884c\u3067\u306f\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u2026\u2026\u3002\n// Vector2 \u306b\u306f System.Numerics.Vectors \u304c\u5fc5\u8981\uff08\u30e9\u30a4\u30bb\u30f3\u30b9\u306b\u540c\u610f\u3059\u308b\u5fc5\u8981\u3042\u308a\uff09\u3002\npublic static Tuple<Vector2[], int[]> KMeans(Vector2[] data, int k)\n{\n    var rand = new Random();\n    var means = data.OrderBy(v => rand.Next()).Take(k).ToList();\n    var assignments = new int[data.Length];\n    while (true)\n    {\n        var prevAssignments = assignments.Select(v => v).ToArray();\n        assignments = data.Select(v => means.IndexOf(means.MinBy(m => (v - m).LengthSquared()))).ToArray();\n        if (Enumerable.Range(0, assignments.Length).All(i => assignments[i] == prevAssignments[i])) break;\n        means = means.Select((m, i) => data.Where((v, j) => i == assignments[j]).DefaultIfEmpty(m).Average()).ToList();\n    }\n    return Tuple.Create(means.ToArray(), assignments);\n}\n\npublic static class Extensions\n{\n    public static Vector2 Average(this IEnumerable<Vector2> self)\n    {\n        var array = self as Vector2[] ?? self.ToArray();\n        return array.Aggregate(Vector2.Zero, (v1, v2) => v1 + v2)/array.Length;\n    }\n}\n\n\u4ee5\u4e0b\u306e\u6761\u4ef6\u3067\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u7d50\u679c\u306f\u4e0b\u56f3\u306e\u3088\u3046\u306a\u611f\u3058\u3002\n- \u30c7\u30fc\u30bf\u6570: 200\n- \u30af\u30e9\u30b9\u30bf\u6570: 5\n\n\u554f\u984c\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\n\u304a\u308f\u308a\u306b\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001 8 \u884c\u3067 k-means \u6cd5\u306e\u5b9f\u88c5\u3067\u3057\u305f\u3002\n\u304a\u304b\u3057\u306a\u3068\u3053\u308d\u7b49\u3042\u308c\u3070\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\uff01\n\u6bd4\u8f03\u7684\u5206\u304b\u308a\u3084\u3059\u3044\u3057\u3001\u305d\u308c\u306a\u308a\u306b\u901f\u3044\u3057\u3001\u5b9f\u88c5\u3082\u697d\u3002\u307f\u3093\u306a\u5927\u597d\u304d k-means \u6cd5\u3002\n\u4eca\u56de\u306f\u305d\u3093\u306a k-means \u6cd5\u3092\u3001 C# \u306e LINQ(+MoreLINQ) \u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n## k-means \u6cd5\u306b\u3064\u3044\u3066\n\u7c21\u5358\u306b\u8a00\u3046\u3068\u3001\u5404\u30c7\u30fc\u30bf\u70b9\u306e\u3001\u81ea\u5206\u304c\u6240\u5c5e\u3059\u308b\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u3068\u306e\u4e8c\u4e57\u8aa4\u5dee\u306e\u7dcf\u548c\u3092\u3001\u52fe\u914d\u6cd5\u7684\u306b\u6700\u5c0f\u5316\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002\n\n\u30af\u30e9\u30b9\u30bf\u6570 $k$ \u3001\u3042\u308b\u30af\u30e9\u30b9\u30bf $i$ \u306b\u6240\u5c5e\u3059\u308b\u30c7\u30fc\u30bf\u70b9\u306e\u96c6\u5408 $S_i$ \u3068\u3057\u3066\u3001\u5f0f\u3067\u66f8\u304f\u3068\u3053\u3093\u306a\u611f\u3058\u3002\n\n```math\n\\arg \\min \\sum_{i=1}^k \\sum_{x \\in S_i} ||x - \\mu_i||^2\n```\n\n\u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u77e5\u308a\u305f\u3044\u4eba\u306b\u306f\u3001[\u795e\u5d8c\u5148\u751f\u306e\u8cc7\u6599](http://www.kamishima.net/jp/clustering/)\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\u30a4\u30e1\u30fc\u30b8\u3092\u3064\u304b\u3080\u306a\u3089\u3001\u300c[K-means \u6cd5\u3092 D3.js \u3067\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u305f](http://tech.nitoyon.com/ja/blog/2013/11/07/k-means/)\u300d\u304c k-means \u6cd5\u3092 step-by-step \u3067\u5b9f\u884c\u3067\u304d\u3066\u7406\u89e3\u306e\u52a9\u3051\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n## k-means \u6cd5\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\u8a08\u7b97\u306e\u6d41\u308c\u306f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n1. \u30c7\u30fc\u30bf\u70b9\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b k \u500b\u306e\u70b9\u3092\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u306e\u521d\u671f\u5024\u3068\u3057\u3066\u53d6\u308b\u3002\n1. \u4ee5\u4e0b\u306e 2 \u30b9\u30c6\u30c3\u30d7\u3092\u53ce\u675f\u3059\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\u3002\n    1. \u5404\u30c7\u30fc\u30bf\u70b9\u306b\u3064\u3044\u3066\u3001\u81ea\u8eab\u306b\u6700\u3082\u8fd1\u3044\u30af\u30e9\u30b9\u30bf\u306b\u5272\u308a\u5f53\u3066\u308b\u3002\n    1. \u5404\u30af\u30e9\u30b9\u30bf\u306b\u3064\u3044\u3066\u3001\u6240\u5c5e\u3059\u308b\u30c7\u30fc\u30bf\u70b9\u306e\u5e73\u5747\u3092\u8a08\u7b97\u3057\u3066\u65b0\u3057\u3044\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u3068\u3059\u308b\u3002\n\n## k-means \u6cd5\u306e\u5b9f\u88c5\n\u4eca\u56de\u5bfe\u8c61\u3068\u3059\u308b\u30c7\u30fc\u30bf\u306f\u3001\u7c21\u5358\u306e\u305f\u3081 double \u578b\u306e 1 \u6b21\u5143\u30c7\u30fc\u30bf\u3068\u3057\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u69cb\u9020\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002n \u306f\u30c7\u30fc\u30bf\u70b9\u306e\u6570\u3001 k \u306f\u30af\u30e9\u30b9\u30bf\u6570\u3067\u3059\u3002\n\n| \u5909\u6570 | \u578b | \u9577\u3055 | \u4e2d\u8eab |\n|---|---|---|---|\n| data | double[] | n | \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u3044\u30c7\u30fc\u30bf\u3002\u4eca\u56de\u306f double \u578b\u306e\u914d\u5217\u3002 |\n| assignments | int[] | n | \u5404\u30c7\u30fc\u30bf\u70b9\u304c\u3069\u306e\u30af\u30e9\u30b9\u30bf\u306b\u5c5e\u3059\u308b\u304b\u3002 {0, 1, ..., k-1} \u306e\u6574\u6570\u5024\u3092\u53d6\u308b\u3002 |\n| means | double[] | k | \u5404\u30af\u30e9\u30b9\u30bf\u306e\u4e2d\u5fc3\u3002\u5404\u30af\u30e9\u30b9\u30bf\u306b\u6240\u5c5e\u3059\u308b\u30c7\u30fc\u30bf\u306e\u5e73\u5747\u3092\u3068\u3063\u305f\u3082\u306e\u3002 data \u540c\u69d8 double \u578b\u306e\u914d\u5217 |\n\n\u52a0\u3048\u3066\u3001 data \u3068 assignments \u306b\u3064\u3044\u3066\u306f\u3001**\u540c\u3058\u6dfb\u5b57\u306f\u540c\u3058\u30c7\u30fc\u30bf\u70b9\u3092\u6307\u3059**\u3053\u3068\u3068\u3057\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```csharp\npublic static Tuple<double[], int[]> KMeans(double[] data, int k)\n{\n    // 1. \u30c7\u30fc\u30bf\u70b9\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b k \u500b\u306e\u30af\u30e9\u30b9\u30bf\u5e73\u5747\u3092\u521d\u671f\u5024\u3068\u3057\u3066\u53d6\u308b\u3002\n    var rand = new Random();\n    var means = data.OrderBy(v => rand.Next()).Take(k).ToList();\n    // 2. \u53ce\u675f\u5224\u5b9a\u306e\u305f\u3081\u306b\u30eb\u30fc\u30d7\u5916\u306b assignments \u5909\u6570\u3092\u6301\u3063\u3066\u304a\u304f\u3002\n    var assignments = new int[data.Length];\n    // 2. \u53ce\u675f\u3059\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\u3002\n    while (true)\n    {\n        // 2. \u53ce\u675f\u5224\u5b9a\u306e\u305f\u3081\u306b 1 \u3064\u524d\u306e\u72b6\u614b\u3092\u30b3\u30d4\u30fc\u3002\n        var prevAssignments = assignments.Select(v => v).ToArray();\n        // 2.1. \u5404\u30c7\u30fc\u30bf\u70b9\u306b\u3064\u3044\u3066\u3001\u81ea\u8eab\u306b\u6700\u3082\u8fd1\u3044\u30af\u30e9\u30b9\u30bf\u306b\u5272\u308a\u5f53\u3066\u308b\u3002\n        assignments = data.Select(v => means.IndexOf(means.MinBy(m => Math.Pow(v - m, 2)))).ToArray();\n        // 2. \u53ce\u675f\u3057\u3066\u3044\u305f\u3089\u8a08\u7b97\u7d42\u4e86\u3002\n        if (Enumerable.Range(0, data.Length).All(i => assignments[i] == prevAssignments[i])) break;\n        // 2.2. \u5404\u30af\u30e9\u30b9\u30bf\u306b\u3064\u3044\u3066\u3001\u6240\u5c5e\u3059\u308b\u30c7\u30fc\u30bf\u70b9\u306e\u5e73\u5747\u3092\u8a08\u7b97\u3057\u3066\u65b0\u3057\u3044\u30af\u30e9\u30b9\u30bf\u5e73\u5747\u3068\u3059\u308b\u3002\n        means = means.Select((m, i) => data.Where((v, j) => i == assignments[j]).DefaultIfEmpty(m).Average()).ToList();\n    }\n    return Tuple.Create(means.ToArray(), assignments);\n}\n```\n\n\u62ec\u5f27\u3001\u30b3\u30e1\u30f3\u30c8\u3001\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u30fb\u623b\u308a\u5024\u3092\u9664\u3044\u305f\u3001\u7d14\u7c8b\u306b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u95a2\u4fc2\u3057\u3066\u3044\u308b\u90e8\u5206\u306f 8 \u884c\u3067\u66f8\u3051\u3066\u3044\u307e\u3059\u3002\n\n\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n### 1,2 \u884c\u76ee\n\n```csharp\n// 1. \u30c7\u30fc\u30bf\u70b9\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b k \u500b\u306e\u30af\u30e9\u30b9\u30bf\u5e73\u5747\u3092\u521d\u671f\u5024\u3068\u3057\u3066\u53d6\u308b\u3002\nvar rand = new Random();\nvar means = data.OrderBy(v => rand.Next()).Take(k).ToList();\n```\n\n\u307e\u305a\u3001\u4e0a\u8a18\u306e\u90e8\u5206\u3067\u306f\u30af\u30e9\u30b9\u30bf\u5e73\u5747\u306e\u521d\u671f\u5024\u3092\u53d6\u3063\u3066\u3044\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001\u307e\u305a `data.OrderBy(v => rand.Next())` \u3067\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u306b\u3064\u3044\u3066\u30bd\u30fc\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u5143\u306e data \u306e\u8981\u7d20\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\u3092\u3057\u305f\u914d\u5217\uff08\u6b63\u78ba\u306b\u306f IEnumerable \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u3092\u5f97\u307e\u3059\u3002\u6b21\u306b\u3001 `.Take(k)` \u3067\u305d\u306e\u6700\u521d\u306e k \u500b\u3092\u53d6\u308b\u3053\u3068\u3067\u3001\u7591\u4f3c\u7684\u306b\u300c\u30c7\u30fc\u30bf\u70b9\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b k \u500b\u306e\u70b9\u3092\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u306e\u521d\u671f\u5024\u3068\u3057\u3066\u53d6\u308b\u300d\u3068\u3044\u3046\u51e6\u7406\u3092\u518d\u73fe\u3057\u3066\u3044\u307e\u3059\uff08\u5b8c\u5168\u306b\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3067\u3059\u304c\u3001 k-means \u6cd5\u3067\u306f\u305d\u308c\u307b\u3069\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3067\u3057\u3087\u3046\uff09\u3002\n\n(2017/2/7 \u8ffd\u8a18) @ozwk \u3055\u3093\u3088\u308a\u3054\u6307\u6458\u3092\u53d7\u3051\u307e\u3057\u305f\u304c\u3001\u4e71\u6570\u306e\u751f\u6210\u306b Guid \u3092\u4f7f\u3046\u3068\u3001\u4e71\u6570\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u5909\u6570\u306b\u6301\u3063\u3066\u304a\u304f\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b 1 \u884c\u3067\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```csharp\nvar means = data.OrderBy(v => Guid.NewGuid()).Take(k).ToList();\n```\n\n### 3 \u884c\u76ee\n\n```csharp\n// 2. \u53ce\u675f\u5224\u5b9a\u306e\u305f\u3081\u306b\u30eb\u30fc\u30d7\u5916\u306b assignments \u5909\u6570\u3092\u6301\u3063\u3066\u304a\u304f\u3002\nvar assignments = new int[data.Length];\n```\n\n\u4eca\u56de\u306f\u30c7\u30fc\u30bf\u70b9\u306b\u5bfe\u3059\u308b\u30af\u30e9\u30b9\u30bf\u3078\u306e\u5272\u308a\u5f53\u3066 (assignments) \u304c\u5909\u5316\u3057\u306a\u304f\u306a\u3063\u305f\u3089\u53ce\u675f\u3057\u305f\u3068\u307f\u306a\u3059\u306e\u3067\u3001\u53ce\u675f\u5224\u5b9a\u306e\u305f\u3081\u306b\u30eb\u30fc\u30d7\u5916\u3067 assignments \u3092\u5ba3\u8a00\u3057\u3066\u3044\u307e\u3059\u3002 means \u3092\u53ce\u675f\u5224\u5b9a\u306b\u4f7f\u7528\u3057\u3066\u3082\u3088\u3044\u306e\u3067\u3059\u304c\u3001\u305d\u3046\u3059\u308b\u3068\u5224\u5b9a\u306e\u3068\u304d\u306e\u5f0f\u304c\u53b3\u5bc6\u3067\u306f\u306a\u304f\u306a\u308b\u306e\u3067\u3053\u3061\u3089\u306e\u65b9\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n\n### 4 \u884c\u76ee\n\n```csharp\n// 2. \u53ce\u675f\u3059\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\u3002\nwhile (true)\n```\n\n\u7e70\u308a\u8fd4\u3057\u90e8\u5206\u3067\u3059\u3002\u4eca\u56de\u306f\u3001 while \u30eb\u30fc\u30d7\u3092\u56de\u3057\u3066\u53ce\u675f\u3057\u305f\u3089 break \u3059\u308b\u5f62\u306b\u3057\u307e\u3059\u3002\n\n### 5 \u884c\u76ee\n\n```csharp\n// 2. \u53ce\u675f\u5224\u5b9a\u306e\u305f\u3081\u306b 1 \u3064\u524d\u306e\u72b6\u614b\u3092\u30b3\u30d4\u30fc\u3002\nvar prevAssignments = assignments.Select(v => v).ToArray();\n```\n\n\u53ce\u675f\u5224\u5b9a\u306e\u6e96\u5099\u3067\u3059\u3002\u5358\u7d14\u306b\u4ee3\u5165\u3057\u305f\u3060\u3051\u3060\u3068 shallow copy \u306b\u306a\u3063\u3066\u3057\u307e\u3046 (assignments \u3092\u5909\u66f4\u3059\u308b\u3068 prevAssignments \u3082\u5909\u66f4\u3055\u308c\u308b) \u306e\u3067\u3001 deep \u306b\u3059\u308b\u305f\u3081\u306b `.Select(v => v)` \u3092\u631f\u3093\u3067\u3044\u307e\u3059\u3002\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001 assignments \u3068\u306f\u5225\u306e\u914d\u5217\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u4f5c\u3089\u308c\u307e\u3059\u3002\n\n### 6 \u884c\u76ee\n\n```csharp\n// 2.1. \u5404\u30c7\u30fc\u30bf\u70b9\u306b\u3064\u3044\u3066\u3001\u81ea\u8eab\u306b\u6700\u3082\u8fd1\u3044\u30af\u30e9\u30b9\u30bf\u306b\u5272\u308a\u5f53\u3066\u308b\u3002\nassignments = data.Select(v => means.IndexOf(means.MinBy(m => Math.Pow(v - m, 2)))).ToArray();\n```\n\n\u5404\u30c7\u30fc\u30bf\u70b9\u306b\u3064\u3044\u3066\u3001 `means.IndexOf(means.MinBy(m => Math.Pow(v - m, 2)))` \u3067\u3001\u4e2d\u5fc3\u3068\u306e\u8ddd\u96e2\u304c\u6700\u5c0f\u306b\u306a\u308b\u3088\u3046\u306a\u30af\u30e9\u30b9\u30bf\u306e means \u914d\u5217\u5185\u3067\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002 `MinBy` \u306b\u306f MoreLinq \u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n### 7 \u884c\u76ee\n\n```csharp\n// 2. \u53ce\u675f\u3057\u3066\u3044\u305f\u3089\u8a08\u7b97\u7d42\u4e86\u3002\nif (Enumerable.Range(0, data.Length).All(i => assignments[i] == prevAssignments[i])) break;\n```\n\n\u53ce\u675f\u5224\u5b9a\u306e\u90e8\u5206\u3067\u3059\u3002\u5168\u3066\u306e\u30c7\u30fc\u30bf\u70b9\u306b\u3064\u3044\u3066\u3001\u3069\u306e\u70b9\u3067\u3082\u5272\u308a\u5f53\u3066\u3089\u308c\u308b\u30af\u30e9\u30b9\u30bf\u304c\u5909\u5316\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089 (\u53ce\u675f\u3057\u3066\u3044\u305f\u3089) \u3001\u30eb\u30fc\u30d7\u3092\u629c\u3051\u307e\u3059\u3002\n\n### 8 \u884c\u76ee\n\n```csharp\n// 2.2. \u5404\u30af\u30e9\u30b9\u30bf\u306b\u3064\u3044\u3066\u3001\u6240\u5c5e\u3059\u308b\u30c7\u30fc\u30bf\u70b9\u306e\u5e73\u5747\u3092\u8a08\u7b97\u3057\u3066\u65b0\u3057\u3044\u30af\u30e9\u30b9\u30bf\u5e73\u5747\u3068\u3059\u308b\u3002\nmeans = means.Select((m, i) => data.Where((v, j) => i == assignments[j]).DefaultIfEmpty(m).Average()).ToList();\n```\n\n\u6700\u5f8c\u306b\u3001 `means.Select((m, i) =>` \u3067\u3001\u5404\u30af\u30e9\u30b9\u30bf\u306e\u4e2d\u5fc3 m \u3068\u6dfb\u5b57 i \u306b\u3064\u3044\u3066\u3001`data.Where((v, j) => i == assignments[j])` \u3067 i \u756a\u76ee\u306e\u30af\u30e9\u30b9\u30bf\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u70b9\u3092\u62bd\u51fa\u3057\u3001 `.Average()` \u3067\u5e73\u5747\u3092\u53d6\u308a\u3001\u65b0\u305f\u306a\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u3068\u3057\u307e\u3059\u3002 `.DefaultIfEmpty(m)` \u306f\u3001\u3082\u3057\u3069\u306e\u70b9\u3082\u5272\u308a\u5f53\u3066\u3089\u308c\u306a\u3044\u3088\u3046\u306a\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u304c\u3067\u304d\u3066\u3057\u307e\u3063\u305f\u3089\u3001\u305d\u306e\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u306b\u3064\u3044\u3066\u306f 1 \u3064\u524d\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u4fdd\u6301\u3059\u308b\u3068\u3044\u3046\u8a2d\u5b9a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u7d50\u679c\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3067\u3001\u3072\u3068\u307e\u305a double \u578b\u306b\u3064\u3044\u3066\u306f\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3055\u3063\u305d\u304f\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```csharp:\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u4f8b\nvar data = new double[] {1, 2, 3, 3, 5, 6, 8, 9, 100};\nvar results = KMeans(data, 4);\nvar assignments = results.Item2;\nfor (var i = 0; i < data.Length; i++)\n{\n    Console.WriteLine($\"value:{data[i],3}, cluster:{assignments[i],2}\");\n}\n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u51fa\u307e\u3057\u305f\u3002 value \u304c\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u5bfe\u8c61\u306e\u5b9f\u6570\u5024\u3001 cluster \u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u308b\u30af\u30e9\u30b9\u30bf\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u3057\u307e\u3059\u3002\u4e00\u5fdc\u304d\u3061\u3093\u3068\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u304d\u3066\u3044\u305d\u3046\u3067\u3059\u3002\n\n```shell-session:\u5b9f\u884c\u7d50\u679c\nvalue:   1, cluster: 3\nvalue:   2, cluster: 2\nvalue:   3, cluster: 2\nvalue:   3, cluster: 2\nvalue:   5, cluster: 1\nvalue:   6, cluster: 1\nvalue:   8, cluster: 1\nvalue:   9, cluster: 1\nvalue: 100, cluster: 0\n```\n\n## \u304a\u307e\u3051(2\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u306e\u5834\u5408)\n1 \u6b21\u5143\u30c7\u30fc\u30bf\u3060\u3051\u3060\u3068\u3084\u306f\u308a\u6620\u3048\u306a\u3044\u306e\u3067 2 \u6b21\u5143\u306e `System.Numerics.Vector2` \u578b\u306e\u3082\u306e\u3082\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\u3053\u306e\u5834\u5408\u3001\u81ea\u5206\u3067\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001 8 \u884c\u3067\u306f\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u2026\u2026\u3002\n\n```csharp\n// Vector2 \u306b\u306f System.Numerics.Vectors \u304c\u5fc5\u8981\uff08\u30e9\u30a4\u30bb\u30f3\u30b9\u306b\u540c\u610f\u3059\u308b\u5fc5\u8981\u3042\u308a\uff09\u3002\npublic static Tuple<Vector2[], int[]> KMeans(Vector2[] data, int k)\n{\n    var rand = new Random();\n    var means = data.OrderBy(v => rand.Next()).Take(k).ToList();\n    var assignments = new int[data.Length];\n    while (true)\n    {\n        var prevAssignments = assignments.Select(v => v).ToArray();\n        assignments = data.Select(v => means.IndexOf(means.MinBy(m => (v - m).LengthSquared()))).ToArray();\n        if (Enumerable.Range(0, assignments.Length).All(i => assignments[i] == prevAssignments[i])) break;\n        means = means.Select((m, i) => data.Where((v, j) => i == assignments[j]).DefaultIfEmpty(m).Average()).ToList();\n    }\n    return Tuple.Create(means.ToArray(), assignments);\n}\n```\n\n```csharp\npublic static class Extensions\n{\n    public static Vector2 Average(this IEnumerable<Vector2> self)\n    {\n        var array = self as Vector2[] ?? self.ToArray();\n        return array.Aggregate(Vector2.Zero, (v1, v2) => v1 + v2)/array.Length;\n    }\n}\n```\n\n\u4ee5\u4e0b\u306e\u6761\u4ef6\u3067\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u7d50\u679c\u306f\u4e0b\u56f3\u306e\u3088\u3046\u306a\u611f\u3058\u3002\n- \u30c7\u30fc\u30bf\u6570: 200\n- \u30af\u30e9\u30b9\u30bf\u6570: 5\n\n![170204_123609.png](https://qiita-image-store.s3.amazonaws.com/0/117994/006ba770-abf8-e5e3-fcf6-12b7a857b1d8.png)\n\n\u554f\u984c\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\n## \u304a\u308f\u308a\u306b\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001 8 \u884c\u3067 k-means \u6cd5\u306e\u5b9f\u88c5\u3067\u3057\u305f\u3002\n\u304a\u304b\u3057\u306a\u3068\u3053\u308d\u7b49\u3042\u308c\u3070\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\uff01\n", "tags": ["C#", "LINQ", "\u6a5f\u68b0\u5b66\u7fd2"]}