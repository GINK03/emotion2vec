{"context": " More than 1 year has passed since last update.\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\n\u6c34\u5e73\u65b9\u5411\u30671\u30da\u30fc\u30b8\u305a\u3064\u8868\u793a\u3059\u308b\n\u30b9\u30ef\u30a4\u30d7\u3067\u5de6\u53f3\u306b\u79fb\u52d5\u3059\u308b\n\u30da\u30fc\u30b8\u306e\u5883\u754c\u7dda\u306b\u30b9\u30ca\u30c3\u30d7\u3059\u308b\n\n\n\u3084\u3063\u3066\u307f\u305f\u3053\u3068\n\nLinearLayoutManager\u3067\u3067\u304d\u308b\u3060\u3051\u30b7\u30f3\u30d7\u30eb\u306b\u3059\u308b\n1\u30da\u30fc\u30b8\u306e\u5927\u304d\u3055\u3092\u753b\u9762\u306e\u5e45\u306b\u5408\u308f\u305b\u308b\n\u30b9\u30af\u30ed\u30fc\u30eb\u306b\u52a0\u901f\u5ea6\u304c\u3064\u304f\u306e\u3067\u3001\u901f\u3055\u3092\u6291\u3048\u308b\n\u30b9\u30ca\u30c3\u30d7\u3059\u308b\u3088\u3046\u306b\u3059\u308b\n\n\n\u69cb\u6210\n\nImageAdapter: 1\u679a\u306e\u753b\u50cf\u3092\u753b\u9762\u306e\u5e45\u306b\u5408\u308f\u305b\u3066\u8868\u793a\u3059\u308b\u30a2\u30c0\u30d7\u30bf\nHorizontalSnapLayoutManager: \u30ec\u30a4\u30a2\u30a6\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\nMainActivity: \u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\n\n\nImageAdapter\n1\u30da\u30fc\u30b8\u6bce\u306b\u8868\u793a\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u3053\u306eadapter\u304c\u751f\u6210\u3059\u308bview\u306e\u5e45\u3092\u753b\u9762\u306e\u5e45\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304c\u3001RecyclerView\u81ea\u4f53\u306e\u5e45\u306f\u5927\u304d\u3044\u306e\u3067\u3001\u30ec\u30a4\u30a2\u30a6\u30c8XML\u3067match_parent\u3092\u6307\u5b9a\u3057\u3066\u3082\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3002\u305d\u306e\u305f\u3081\u3001\u751f\u6210\u6642\u306b\u5e45\u306b\u5408\u308f\u305b\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\u5e45\u3092\u3074\u3063\u305f\u308a\u306b\u3059\u308b\u3053\u3068\u3067\u30b9\u30ca\u30c3\u30d7\u306e\u51e6\u7406\u3082\u5358\u7d14\u306b\u306a\u308b\u3002\n\nImageAdapter.java\npublic class ImageAdapter extends RecyclerView.Adapter<ImageAdapter.ViewHolder> {\n    private LayoutInflater mLayoutInflater;\n    private List<Integer> mDataList;\n\n    public ImageAdapter(Context context, List<Integer> dataList) {\n        super();\n        mDataList = dataList;\n        mLayoutInflater = LayoutInflater.from(context);\n    }\n\n    @Override\n    public ImageAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View v = mLayoutInflater.inflate(R.layout.list_image, parent, false);\n\n        // resize\n        ViewGroup.LayoutParams params = v.getLayoutParams();\n        params.width = parent.getMeasuredWidth();\n        params.height = parent.getMeasuredHeight();\n        v.setLayoutParams(params);\n\n        return new ViewHolder(v);\n    }\n\n    @Override\n    public int getItemCount() {\n        return mDataList.size();\n    }\n\n    @Override\n    public void onBindViewHolder(ViewHolder holder, int position) {\n        holder.image.setImageResource(mDataList.get(position));\n    }\n\n    static class ViewHolder extends RecyclerView.ViewHolder {\n        ImageView image;\n\n        public ViewHolder(View v) {\n            super(v);\n            image = (ImageView) v.findViewById(R.id.imageView);\n        }\n    }\n}\n\n\n\nHorizontalSnapLayoutManager\n\u4f55\u3082\u3044\u3058\u3089\u306a\u3044\u3068\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u304c\u5927\u304d\u304f\u3059\u3079\u3063\u3066\u3044\u304f\u306e\u3067\u3001\u6291\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u305f\u3002\nscrollHorizontallyBy\u30a4\u30d9\u30f3\u30c8\u3067\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u3092\u6c7a\u3081\u308b\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\u4e0e\u3048\u3089\u308c\u305f\u79fb\u52d5\u4fc2\u6570dx\u304b\u3089\u79fb\u52d5\u91cftravel\u3092\u8a08\u7b97\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u307e\u3058\u3081\u306b\u8a08\u7b97\u3059\u308b\u306e\u306f\u5927\u5909\u305d\u3046\u306a\u306e\u3067\u3001\u89aa\u30af\u30e9\u30b9\u306btraval\u3092\u8a08\u7b97\u3055\u305b\u3066\u3001\u4e0a\u9650\u3068\u4e0b\u9650\u3092\u8a2d\u5b9a\u3057\u3066\u307f\u305f\u3002\u3053\u308c\u3067\u901f\u5ea6\u304c\u6291\u3048\u3089\u308c\u305f\u3002\n\u30b9\u30af\u30ed\u30fc\u30eb\u304c\u6b62\u307e\u3063\u305f\u3042\u3068\u3001\u30b9\u30ca\u30c3\u30d7\u3055\u305b\u308b\u3068\u304d\u306b\u306f\u3053\u306e\u4e0a\u9650\u4e0b\u9650\u3092\u5916\u3059\u3002\n\nHorizontalSnapLayoutManager.java\npublic class HorizontalSnapLayoutManager extends LinearLayoutManager {\n    final static int MAX_VELOCITY = 100;\n    private boolean mSnapping;\n\n    public boolean isSnapping() { return mSnapping; }\n    public void setSnapping(boolean snapping) { mSnapping = snapping; }\n\n    public HorizontalSnapLayoutManager(Context context) {\n        super(context, LinearLayoutManager.HORIZONTAL, false);\n    }\n\n    @Override\n    public int scrollHorizontallyBy(int dx, final RecyclerView.Recycler recycler, RecyclerView.State state) {\n        int travel = super.scrollHorizontallyBy(dx, recycler, state);\n        if (!isSnapping()) {\n           travel = Math.max(-MAX_VELOCITY, travel);\n           travel = Math.min(MAX_VELOCITY, travel);\n        }\n        return travel;\n    }\n}\n\n\n\nMainActivity\nRecyclerView\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u5b8c\u4e86\u3067\u30b9\u30ca\u30c3\u30d7\u3059\u308b\u3002\u76f4\u524d\u306e\u65b9\u5411\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304d\u3001\u30b9\u30af\u30ed\u30fc\u30eb\u3059\u308b\u65b9\u5411\u306b1/4\u4ee5\u4e0a\u9032\u3093\u3067\u3044\u305f\u5834\u5408\u306f\u305d\u306e\u65b9\u5411\u306b\u30b9\u30ca\u30c3\u30d7\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u305f\u3002\n\nMainActivity.java\npublic class MainActivity extends ActionBarActivity {\n    final static Integer ResourceIds[] = { R.drawable.earth, R.drawable.lunar_module, R.drawable.columbia };\n    final static int SNAP_THRESHOLD = 4;\n\n    private HorizontalSnapLayoutManager mLayoutManager;\n    private RecyclerView mRecyclerView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        mLayoutManager = new HorizontalSnapLayoutManager(this);\n        mRecyclerView = (RecyclerView) findViewById(R.id.recyclerview);\n        mRecyclerView.setLayoutManager(mLayoutManager);\n        mRecyclerView.setHasFixedSize(true);\n        mRecyclerView.setAdapter(new ImageAdapter(this, Arrays.asList(ResourceIds)));\n        mRecyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\n            private int mDirection;\n\n            @Override\n            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {\n                mDirection = dx;\n            }\n\n            @Override\n            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {\n                if (newState == RecyclerView.SCROLL_STATE_IDLE) {\n                    onScrollStopped(mDirection);\n                }\n            }\n        });\n    }\n\n    void onScrollStopped(int direction) {\n        int latter_pos = mLayoutManager.findLastVisibleItemPosition();\n        if (latter_pos == RecyclerView.NO_POSITION) {\n            return;\n        }\n\n        if (mLayoutManager.isSnapping()) {\n            // snapping is finished\n            mLayoutManager.setSnapping(false);\n            return;\n        }\n\n        View a = mLayoutManager.getChildAt(0);      // former\n        View b = mLayoutManager.getChildAt(1);      // latter\n\n        int diff_a = a != null ? Math.abs(mLayoutManager.getDecoratedLeft(a)) : 0;\n        int diff_b = b != null ? Math.abs(mLayoutManager.getDecoratedLeft(b)) : 0;\n        if (diff_a > 0 && diff_b > 0) {\n            int snap_to;\n            if (direction < 0) {\n                // left\n                snap_to = (latter_pos > 0 && diff_a < diff_b * SNAP_THRESHOLD) ? (latter_pos - 1) : latter_pos;\n            } else {\n                snap_to = (latter_pos > 0 && diff_a * SNAP_THRESHOLD < diff_b) ? (latter_pos - 1) : latter_pos;\n            }\n\n            mLayoutManager.setSnapping(true);\n            mRecyclerView.smoothScrollToPosition(snap_to);\n        }\n    }\n}\n\n\n\nlist_image.xml\n1\u30da\u30fc\u30b8\u306b\u8868\u793a\u3059\u308b\u30ec\u30a4\u30a2\u30a6\u30c8\u3002\u3068\u308a\u3042\u3048\u305a\u753b\u50cf\u3060\u3051\u306b\u3057\u305f\u304c\u3082\u3061\u308d\u3093\u4f55\u3092\u7f6e\u3044\u3066\u3082\u3088\u3044\u3002\n\nlist_image.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<FrameLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\" android:layout_height=\"fill_parent\">\n    <ImageView\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        android:id=\"@+id/imageView\"\n        android:scaleType=\"centerCrop\" />\n</FrameLayout>\n\n\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u4e00\u5f0f\u3053\u3053\u306b\u7f6e\u304d\u307e\u3057\u305f\u3002\nhttps://github.com/firewood/horizontal_snappy\n\n## \u3084\u308a\u305f\u3044\u3053\u3068\n\n- \u6c34\u5e73\u65b9\u5411\u30671\u30da\u30fc\u30b8\u305a\u3064\u8868\u793a\u3059\u308b\n- \u30b9\u30ef\u30a4\u30d7\u3067\u5de6\u53f3\u306b\u79fb\u52d5\u3059\u308b\n- \u30da\u30fc\u30b8\u306e\u5883\u754c\u7dda\u306b\u30b9\u30ca\u30c3\u30d7\u3059\u308b\n\n## \u3084\u3063\u3066\u307f\u305f\u3053\u3068\n\n- LinearLayoutManager\u3067\u3067\u304d\u308b\u3060\u3051\u30b7\u30f3\u30d7\u30eb\u306b\u3059\u308b\n- 1\u30da\u30fc\u30b8\u306e\u5927\u304d\u3055\u3092\u753b\u9762\u306e\u5e45\u306b\u5408\u308f\u305b\u308b\n- \u30b9\u30af\u30ed\u30fc\u30eb\u306b\u52a0\u901f\u5ea6\u304c\u3064\u304f\u306e\u3067\u3001\u901f\u3055\u3092\u6291\u3048\u308b\n- \u30b9\u30ca\u30c3\u30d7\u3059\u308b\u3088\u3046\u306b\u3059\u308b\n\n## \u69cb\u6210\n\n- ImageAdapter: 1\u679a\u306e\u753b\u50cf\u3092\u753b\u9762\u306e\u5e45\u306b\u5408\u308f\u305b\u3066\u8868\u793a\u3059\u308b\u30a2\u30c0\u30d7\u30bf\n- HorizontalSnapLayoutManager: \u30ec\u30a4\u30a2\u30a6\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\n- MainActivity: \u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\n\n## ImageAdapter\n\n1\u30da\u30fc\u30b8\u6bce\u306b\u8868\u793a\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u3053\u306eadapter\u304c\u751f\u6210\u3059\u308bview\u306e\u5e45\u3092\u753b\u9762\u306e\u5e45\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304c\u3001RecyclerView\u81ea\u4f53\u306e\u5e45\u306f\u5927\u304d\u3044\u306e\u3067\u3001\u30ec\u30a4\u30a2\u30a6\u30c8XML\u3067match_parent\u3092\u6307\u5b9a\u3057\u3066\u3082\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3002\u305d\u306e\u305f\u3081\u3001\u751f\u6210\u6642\u306b\u5e45\u306b\u5408\u308f\u305b\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\u5e45\u3092\u3074\u3063\u305f\u308a\u306b\u3059\u308b\u3053\u3068\u3067\u30b9\u30ca\u30c3\u30d7\u306e\u51e6\u7406\u3082\u5358\u7d14\u306b\u306a\u308b\u3002\n\n```java:ImageAdapter.java\npublic class ImageAdapter extends RecyclerView.Adapter<ImageAdapter.ViewHolder> {\n    private LayoutInflater mLayoutInflater;\n    private List<Integer> mDataList;\n\n    public ImageAdapter(Context context, List<Integer> dataList) {\n        super();\n        mDataList = dataList;\n        mLayoutInflater = LayoutInflater.from(context);\n    }\n\n    @Override\n    public ImageAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View v = mLayoutInflater.inflate(R.layout.list_image, parent, false);\n\n        // resize\n        ViewGroup.LayoutParams params = v.getLayoutParams();\n        params.width = parent.getMeasuredWidth();\n        params.height = parent.getMeasuredHeight();\n        v.setLayoutParams(params);\n\n        return new ViewHolder(v);\n    }\n\n    @Override\n    public int getItemCount() {\n        return mDataList.size();\n    }\n\n    @Override\n    public void onBindViewHolder(ViewHolder holder, int position) {\n        holder.image.setImageResource(mDataList.get(position));\n    }\n\n    static class ViewHolder extends RecyclerView.ViewHolder {\n        ImageView image;\n\n        public ViewHolder(View v) {\n            super(v);\n            image = (ImageView) v.findViewById(R.id.imageView);\n        }\n    }\n}\n```\n\n## HorizontalSnapLayoutManager\n\n\u4f55\u3082\u3044\u3058\u3089\u306a\u3044\u3068\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u304c\u5927\u304d\u304f\u3059\u3079\u3063\u3066\u3044\u304f\u306e\u3067\u3001\u6291\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u305f\u3002\nscrollHorizontallyBy\u30a4\u30d9\u30f3\u30c8\u3067\u30b9\u30af\u30ed\u30fc\u30eb\u91cf\u3092\u6c7a\u3081\u308b\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\u4e0e\u3048\u3089\u308c\u305f\u79fb\u52d5\u4fc2\u6570dx\u304b\u3089\u79fb\u52d5\u91cftravel\u3092\u8a08\u7b97\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u307e\u3058\u3081\u306b\u8a08\u7b97\u3059\u308b\u306e\u306f\u5927\u5909\u305d\u3046\u306a\u306e\u3067\u3001\u89aa\u30af\u30e9\u30b9\u306btraval\u3092\u8a08\u7b97\u3055\u305b\u3066\u3001\u4e0a\u9650\u3068\u4e0b\u9650\u3092\u8a2d\u5b9a\u3057\u3066\u307f\u305f\u3002\u3053\u308c\u3067\u901f\u5ea6\u304c\u6291\u3048\u3089\u308c\u305f\u3002\n\u30b9\u30af\u30ed\u30fc\u30eb\u304c\u6b62\u307e\u3063\u305f\u3042\u3068\u3001\u30b9\u30ca\u30c3\u30d7\u3055\u305b\u308b\u3068\u304d\u306b\u306f\u3053\u306e\u4e0a\u9650\u4e0b\u9650\u3092\u5916\u3059\u3002\n\n```java:HorizontalSnapLayoutManager.java\npublic class HorizontalSnapLayoutManager extends LinearLayoutManager {\n    final static int MAX_VELOCITY = 100;\n    private boolean mSnapping;\n\n    public boolean isSnapping() { return mSnapping; }\n    public void setSnapping(boolean snapping) { mSnapping = snapping; }\n\n    public HorizontalSnapLayoutManager(Context context) {\n        super(context, LinearLayoutManager.HORIZONTAL, false);\n    }\n\n    @Override\n    public int scrollHorizontallyBy(int dx, final RecyclerView.Recycler recycler, RecyclerView.State state) {\n        int travel = super.scrollHorizontallyBy(dx, recycler, state);\n        if (!isSnapping()) {\n           travel = Math.max(-MAX_VELOCITY, travel);\n           travel = Math.min(MAX_VELOCITY, travel);\n        }\n        return travel;\n    }\n}\n```\n\n## MainActivity\n\nRecyclerView\u306e\u30b9\u30af\u30ed\u30fc\u30eb\u5b8c\u4e86\u3067\u30b9\u30ca\u30c3\u30d7\u3059\u308b\u3002\u76f4\u524d\u306e\u65b9\u5411\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304d\u3001\u30b9\u30af\u30ed\u30fc\u30eb\u3059\u308b\u65b9\u5411\u306b1/4\u4ee5\u4e0a\u9032\u3093\u3067\u3044\u305f\u5834\u5408\u306f\u305d\u306e\u65b9\u5411\u306b\u30b9\u30ca\u30c3\u30d7\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u305f\u3002\n\n```java:MainActivity.java\npublic class MainActivity extends ActionBarActivity {\n    final static Integer ResourceIds[] = { R.drawable.earth, R.drawable.lunar_module, R.drawable.columbia };\n    final static int SNAP_THRESHOLD = 4;\n\n    private HorizontalSnapLayoutManager mLayoutManager;\n    private RecyclerView mRecyclerView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        mLayoutManager = new HorizontalSnapLayoutManager(this);\n        mRecyclerView = (RecyclerView) findViewById(R.id.recyclerview);\n        mRecyclerView.setLayoutManager(mLayoutManager);\n        mRecyclerView.setHasFixedSize(true);\n        mRecyclerView.setAdapter(new ImageAdapter(this, Arrays.asList(ResourceIds)));\n        mRecyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\n            private int mDirection;\n\n            @Override\n            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {\n                mDirection = dx;\n            }\n\n            @Override\n            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {\n                if (newState == RecyclerView.SCROLL_STATE_IDLE) {\n                    onScrollStopped(mDirection);\n                }\n            }\n        });\n    }\n\n    void onScrollStopped(int direction) {\n        int latter_pos = mLayoutManager.findLastVisibleItemPosition();\n        if (latter_pos == RecyclerView.NO_POSITION) {\n            return;\n        }\n\n        if (mLayoutManager.isSnapping()) {\n            // snapping is finished\n            mLayoutManager.setSnapping(false);\n            return;\n        }\n\n        View a = mLayoutManager.getChildAt(0);      // former\n        View b = mLayoutManager.getChildAt(1);      // latter\n\n        int diff_a = a != null ? Math.abs(mLayoutManager.getDecoratedLeft(a)) : 0;\n        int diff_b = b != null ? Math.abs(mLayoutManager.getDecoratedLeft(b)) : 0;\n        if (diff_a > 0 && diff_b > 0) {\n            int snap_to;\n            if (direction < 0) {\n                // left\n                snap_to = (latter_pos > 0 && diff_a < diff_b * SNAP_THRESHOLD) ? (latter_pos - 1) : latter_pos;\n            } else {\n                snap_to = (latter_pos > 0 && diff_a * SNAP_THRESHOLD < diff_b) ? (latter_pos - 1) : latter_pos;\n            }\n\n            mLayoutManager.setSnapping(true);\n            mRecyclerView.smoothScrollToPosition(snap_to);\n        }\n    }\n}\n```\n\n## list_image.xml\n\n1\u30da\u30fc\u30b8\u306b\u8868\u793a\u3059\u308b\u30ec\u30a4\u30a2\u30a6\u30c8\u3002\u3068\u308a\u3042\u3048\u305a\u753b\u50cf\u3060\u3051\u306b\u3057\u305f\u304c\u3082\u3061\u308d\u3093\u4f55\u3092\u7f6e\u3044\u3066\u3082\u3088\u3044\u3002\n\n```xml:list_image.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<FrameLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\" android:layout_height=\"fill_parent\">\n    <ImageView\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        android:id=\"@+id/imageView\"\n        android:scaleType=\"centerCrop\" />\n</FrameLayout>\n\n```\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n\u4e00\u5f0f\u3053\u3053\u306b\u7f6e\u304d\u307e\u3057\u305f\u3002\nhttps://github.com/firewood/horizontal_snappy\n\n", "tags": ["RecyclerView", "Android"]}