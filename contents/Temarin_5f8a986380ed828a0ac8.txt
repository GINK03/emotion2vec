{"context": " More than 1 year has passed since last update.WebAPI\u3092\u53e9\u3044\u305f\u308a\u3001\u3069\u3053\u304b\u3089Web\u30da\u30fc\u30b8\u304b\u3089HTML\u3092\u53d6\u3063\u3066\u304d\u305f\u308a\u3059\u308b\u51e6\u7406\u306bRx\u3092\u4f7f\u3046\u3068\u826f\u3044\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u4ed5\u8fbc\u307f\nusing System;\nusing System.IO;\nusing System.Net;\nusing System.Reactive;\nusing System.Reactive.Concurrency;\nusing System.Reactive.Disposables;\nusing System.Reactive.Linq;\nusing System.Text;\nnamespace TestSpace {\n    public static class RxEx {\n        // http\u3067\u4f55\u304b\u53d6\u3063\u3066\u304f\u308b\u3084\u3064\n        public static IObservable<HttpWebResponse> HttpGet( string url ) {\n            if( url == null )\n                throw new ArgumentNullException( nameof( url ) );\n\n            return Observable.Create<HttpWebResponse>( o => {\n                try {\n                    var req = WebRequest.CreateHttp( url );\n                    using( var res = (HttpWebResponse)req.GetResponse() )\n                        o.OnNext( res );\n                    o.OnCompleted();\n                } catch( Exception e ) {\n                    o.OnError( e );\n                }\n                return Disposable.Empty;\n            } );\n        }\n\n        // OnNext\u3067\u6d41\u308c\u8fbc\u3093\u3067\u304d\u305f\u5024\u3092\u30ea\u30bd\u30fc\u30b9\u3068\u3057\u3066\u84c4\u7a4d\u3001OnError\u3001OnCompleted\u3001Dispose \u3067\u307e\u3068\u3081\u3066\u89e3\u653e\n        public static IObservable<T> Using<T>( this IObservable<T> source ) where T : IDisposable {\n            if( source == null )\n                throw new ArgumentNullException( nameof( source ) );\n\n            return new AnonymousObservable<T>( o => {\n                var resource = new CompositeDisposable();\n                var tmp = source\n                    .Subscribe( x => {\n                        resource.Add( x );\n                        o.OnNext( x );\n                    } , o.OnError , o.OnCompleted );\n                resource.Add( tmp );\n                return resource;\n            } );\n        }\n\n        // HttpWebResponse \u2192 Stream.\n        public static IObservable<Stream> AsResponseStream( this IObservable<HttpWebResponse> source ) => source.Select( x => x.GetResponseStream() ).Using();\n\n        // Stream \u2192 String.\n        public static IObservable<string> AsString( this IObservable<Stream> source , Encoding encode = null ) {\n            if( source == null )\n                throw new ArgumentNullException( nameof( source ) );\n            return new AnonymousObservable<string>( \n                o => source.Subscribe( x => o.OnNext( new StreamReader( x , encode ?? Encoding.UTF8 ).Using( n => n.ReadToEnd() ) ) , o.OnError , o.OnCompleted )\n            );\n        }\n\n        // func\u5b9f\u884c\u5f8c\u3001Dispose\u3059\u308b\u3060\u3051...\n        public static TResult Using<TSource, TResult>( this TSource source , Func<TSource , TResult> func ) where TSource : IDisposable {\n            using( source )\n                return func( source );\n        }\n    }\n}\n\n\n\u4f7f\u3044\u65b9\n\"test\" \u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u30b0\u30b0\u308b\u3002\nRxEx.HttpGet( \"http://www.google.co.jp/?q=test\" )\n    .AsResponseStream()\n    .AsString()\n    .Subscribe( Console.WriteLine );\n\n\n\u975e\u540c\u671f\u5316\u3057\u305f\u3044\nRxEx.HttpGet( \"http://www.google.co.jp/?q=test\" )\n    .SubscribeOn( ThreadPoolScheduler.Instance )\n    .AsResponseStream()\n    .AsString()\n    .Subscribe( Console.WriteLine );\n\n\n3\u56de\u307e\u3067\u30ea\u30c8\u30e9\u30a4\u3057\u305f\u3044\nRxEx.HttpGet( \"http://www.google.co.jp/?q=test\" )\n    .SubscribeOn( ThreadPoolScheduler.Instance )\n    .AsResponseStream()\n    .AsString()\n    .Retry( 3 )\n    .Subscribe( Console.WriteLine );\n\n\n10\u79d2\u5f85\u3063\u3066\u3082\u3053\u306a\u3051\u308c\u3070\u30a8\u30e9\u30fc\u306b\u3057\u305f\u3044\nRxEx.HttpGet( \"http://www.google.co.jp/?q=test\" )\n    .SubscribeOn( ThreadPoolScheduler.Instance )\n    .AsResponseStream()\n    .AsString()\n    .Timeout( TimeSpan.FromSeconds( 10 ) )\n    .Subscribe( Console.WriteLine );\n\n\n\u3068\u308a\u3042\u3048\u305a\u5fdc\u7b54\u30d8\u30c3\u30c0\u3060\u3051\u6b32\u3057\u3044\u3001\u672c\u6587\u306f\u3044\u3089\u306a\u3044\nRxEx.HttpGet( \"http://www.google.co.jp/?q=test\" )\n    .Subscribe( x => Console.WriteLine( x.LastModified ) );\n\nAsString\u306e\u4ed6\u306bAsJSON\u3068\u304bAsXML\u3068\u304b\u3001AsBytes\u3068\u304b\u4f5c\u3063\u3066\u304a\u304f\u3068\u826f\u3044\u611f\u3058\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\nWebAPI\u3092\u53e9\u3044\u305f\u308a\u3001\u3069\u3053\u304b\u3089Web\u30da\u30fc\u30b8\u304b\u3089HTML\u3092\u53d6\u3063\u3066\u304d\u305f\u308a\u3059\u308b\u51e6\u7406\u306bRx\u3092\u4f7f\u3046\u3068\u826f\u3044\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n### \u4ed5\u8fbc\u307f\n\n```csharp\nusing System;\nusing System.IO;\nusing System.Net;\nusing System.Reactive;\nusing System.Reactive.Concurrency;\nusing System.Reactive.Disposables;\nusing System.Reactive.Linq;\nusing System.Text;\nnamespace TestSpace {\n\tpublic static class RxEx {\n\t\t// http\u3067\u4f55\u304b\u53d6\u3063\u3066\u304f\u308b\u3084\u3064\n\t\tpublic static IObservable<HttpWebResponse> HttpGet( string url ) {\n\t\t\tif( url == null )\n\t\t\t\tthrow new ArgumentNullException( nameof( url ) );\n\n\t\t\treturn Observable.Create<HttpWebResponse>( o => {\n\t\t\t\ttry {\n\t\t\t\t\tvar req = WebRequest.CreateHttp( url );\n\t\t\t\t\tusing( var res = (HttpWebResponse)req.GetResponse() )\n\t\t\t\t\t\to.OnNext( res );\n\t\t\t\t\to.OnCompleted();\n\t\t\t\t} catch( Exception e ) {\n\t\t\t\t\to.OnError( e );\n\t\t\t\t}\n\t\t\t\treturn Disposable.Empty;\n\t\t\t} );\n\t\t}\n\n\t\t// OnNext\u3067\u6d41\u308c\u8fbc\u3093\u3067\u304d\u305f\u5024\u3092\u30ea\u30bd\u30fc\u30b9\u3068\u3057\u3066\u84c4\u7a4d\u3001OnError\u3001OnCompleted\u3001Dispose \u3067\u307e\u3068\u3081\u3066\u89e3\u653e\n\t\tpublic static IObservable<T> Using<T>( this IObservable<T> source ) where T : IDisposable {\n\t\t\tif( source == null )\n\t\t\t\tthrow new ArgumentNullException( nameof( source ) );\n\n\t\t\treturn new AnonymousObservable<T>( o => {\n\t\t\t\tvar resource = new CompositeDisposable();\n\t\t\t\tvar tmp = source\n\t\t\t\t\t.Subscribe( x => {\n\t\t\t\t\t\tresource.Add( x );\n\t\t\t\t\t\to.OnNext( x );\n\t\t\t\t\t} , o.OnError , o.OnCompleted );\n\t\t\t\tresource.Add( tmp );\n\t\t\t\treturn resource;\n\t\t\t} );\n\t\t}\n\n\t\t// HttpWebResponse \u2192 Stream.\n\t\tpublic static IObservable<Stream> AsResponseStream( this IObservable<HttpWebResponse> source ) => source.Select( x => x.GetResponseStream() ).Using();\n\t\t\n\t\t// Stream \u2192 String.\n\t\tpublic static IObservable<string> AsString( this IObservable<Stream> source , Encoding encode = null ) {\n\t\t\tif( source == null )\n\t\t\t\tthrow new ArgumentNullException( nameof( source ) );\n\t\t\treturn new AnonymousObservable<string>( \n\t\t\t\to => source.Subscribe( x => o.OnNext( new StreamReader( x , encode ?? Encoding.UTF8 ).Using( n => n.ReadToEnd() ) ) , o.OnError , o.OnCompleted )\n\t\t\t);\n\t\t}\n\n\t\t// func\u5b9f\u884c\u5f8c\u3001Dispose\u3059\u308b\u3060\u3051...\n\t\tpublic static TResult Using<TSource, TResult>( this TSource source , Func<TSource , TResult> func ) where TSource : IDisposable {\n\t\t\tusing( source )\n\t\t\t\treturn func( source );\n\t\t}\n\t}\n}\n```\n\n### \u4f7f\u3044\u65b9\n\n\"test\" \u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u30b0\u30b0\u308b\u3002\n\n```csharp\nRxEx.HttpGet( \"http://www.google.co.jp/?q=test\" )\n\t.AsResponseStream()\n\t.AsString()\n\t.Subscribe( Console.WriteLine );\n```\n\n#### \u975e\u540c\u671f\u5316\u3057\u305f\u3044\n\n```csharp\nRxEx.HttpGet( \"http://www.google.co.jp/?q=test\" )\n\t.SubscribeOn( ThreadPoolScheduler.Instance )\n\t.AsResponseStream()\n\t.AsString()\n\t.Subscribe( Console.WriteLine );\n```\n\n### 3\u56de\u307e\u3067\u30ea\u30c8\u30e9\u30a4\u3057\u305f\u3044\n\n```csharp\nRxEx.HttpGet( \"http://www.google.co.jp/?q=test\" )\n\t.SubscribeOn( ThreadPoolScheduler.Instance )\n\t.AsResponseStream()\n\t.AsString()\n\t.Retry( 3 )\n\t.Subscribe( Console.WriteLine );\n```\n\n### 10\u79d2\u5f85\u3063\u3066\u3082\u3053\u306a\u3051\u308c\u3070\u30a8\u30e9\u30fc\u306b\u3057\u305f\u3044\n\n```csharp\nRxEx.HttpGet( \"http://www.google.co.jp/?q=test\" )\n\t.SubscribeOn( ThreadPoolScheduler.Instance )\n\t.AsResponseStream()\n\t.AsString()\n\t.Timeout( TimeSpan.FromSeconds( 10 ) )\n\t.Subscribe( Console.WriteLine );\n```\n\n### \u3068\u308a\u3042\u3048\u305a\u5fdc\u7b54\u30d8\u30c3\u30c0\u3060\u3051\u6b32\u3057\u3044\u3001\u672c\u6587\u306f\u3044\u3089\u306a\u3044\n\n```csharp\nRxEx.HttpGet( \"http://www.google.co.jp/?q=test\" )\n\t.Subscribe( x => Console.WriteLine( x.LastModified ) );\n```\n\nAsString\u306e\u4ed6\u306bAsJSON\u3068\u304bAsXML\u3068\u304b\u3001AsBytes\u3068\u304b\u4f5c\u3063\u3066\u304a\u304f\u3068\u826f\u3044\u611f\u3058\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n", "tags": ["Rx", "C#"]}