{"context": "\u5c0f\u898f\u6a21\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u5b66\u7fd2\u3092\u3055\u305b\u308b\u6642\u3001\u5927\u307e\u304b\u306a\u50be\u5411\u3092\u898b\u308b\u305f\u3081\u306b\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u632f\u308a\u305f\u3044\u6642\u304c\u3042\u308a\u307e\u3059\u3002scikit-learn\u306b\u306fGrid Search\u3068Cross Validation\u3092\u540c\u6642\u306b\u884c\u3046GridSearchCV\u3068\u3044\u3046\u540d\u524d\u305d\u306e\u307e\u3093\u307e\u306a\u4fbf\u5229\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u304c\u3001\n\n\u3053\u308c\u3092TensorFlow\u3067\u3082\u3001\n\u30ea\u30e2\u30fc\u30c8\u3067\u4e26\u5217\u306b\u3001\n\u305d\u3057\u3066\u9762\u5012\u306a\u5206\u6563\u51e6\u7406\u30b3\u30fc\u30c9\u3092\u66f8\u304b\u305a\u306b\nJupyter Notebook\u304b\u3089\u7c21\u5358\u306b\n\n\n\u3084\u308a\u305f\u3044\u3067\u3059\u3088\u306d\u3002\n\u306f\u3044\u3001Google Cloud Dataflow\u306a\u3089\u305d\u308c\u304c\u3067\u304d\u308b\u3093\u3067\u3059\uff01\n\n\u6e96\u5099\n\u3053\u3053\u306f\u524d\u56de\u306e\u8a18\u4e8b\u3068\u307b\u307c\u540c\u3058\u3067\u3059\u304c\u3001\u30e2\u30c7\u30eb\u306b\u3088\u3063\u3066\u306f\u30de\u30b7\u30f3\u30bf\u30a4\u30d7\u3092\u5909\u3048\u305f\u65b9\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002worker_options.machine_type\u306e\u90e8\u5206\u3067\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u307e\u305fnum_workers\u3092\u6307\u5b9a\u3059\u308b\u3068autoscale\u304c\u7121\u52b9\u306b\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\u4eca\u56de\u306f6\u3092\u8a2d\u5b9a\u3057\u305f\u306e\u3067\u3001worker\u304c6\u3064\u4e00\u6c17\u306b\u751f\u6210\u3055\u308c\u307e\u3057\u305f\u3002\n\nOption\u306e\u8a2d\u5b9a\nimport apache_beam as beam\nimport apache_beam.transforms.window as window\n\noptions = beam.utils.pipeline_options.PipelineOptions()\n\ngoogle_cloud_options = options.view_as(beam.utils.pipeline_options.GoogleCloudOptions)\ngoogle_cloud_options.project = '{PROJECTID}'\ngoogle_cloud_options.job_name = 'tensorflow-gs'\ngoogle_cloud_options.staging_location = 'gs://{BUCKET_NAME}/binaries'\ngoogle_cloud_options.temp_location = 'gs://{BUCKET_NAME}/temp'\n\nworker_options = options.view_as(beam.utils.pipeline_options.WorkerOptions)\nworker_options.max_num_workers = 6\nworker_options.num_workers = 6\nworker_options.disk_size_gb = 20\n# worker_options.machine_type = 'n1-standard-16'\n\n# options.view_as(beam.utils.pipeline_options.StandardOptions).runner = 'DirectRunner'\noptions.view_as(beam.utils.pipeline_options.StandardOptions).runner = 'DataflowRunner'\n\np = beam.Pipeline(options=options)\n\n\n\nGrid\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u751f\u6210\n\u7d44\u307f\u5408\u308f\u305b\u3092\u5168\u3066\u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3067\u5217\u6319\u3059\u308b\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u3001GridSearchCV\u306e\u3088\u3046\u306b\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u632f\u308a\u305f\u3044\u5024\u304b\u3089\u3001\u91cd\u8907\u3057\u306a\u3044\u7d44\u307f\u5408\u308f\u305b\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\nGrid\u30d1\u30e9\u30e1\u30fc\u30bf\u751f\u6210\nimport itertools\n\n# DNN\u306e\u8a2d\u5b9a\u3068\u3057\u3066\u306f\u7121\u610f\u5473\u3002\u3053\u3053\u306f\u3042\u304f\u307e\u3067\u4f8b\nparam_grid = {'hidden_units': [[10, 20, 10], [20, 40, 20], [100, 200, 100]],\n              'dropout': [0.1, 0.2, 0.5, 0.8],\n              'steps': [20000, 50000, 100000]}\n\ndef dict_product(param):\n    return (dict(itertools.izip(param, x)) for x in itertools.product(*param.itervalues()))\n\nparams = list(dict_product(param_grid))\n\n\n\u3059\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306a36\u901a\u308a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u7d44\u307f\u5408\u308f\u305b\u304c\u751f\u6210\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n[{'dropout': 0.1, 'hidden_units': [10, 20, 10], 'steps': 20000},\n {'dropout': 0.1, 'hidden_units': [20, 40, 20], 'steps': 20000},\n {'dropout': 0.1, 'hidden_units': [100, 200, 100], 'steps': 20000},\n {'dropout': 0.2, 'hidden_units': [10, 20, 10], 'steps': 20000},\n {'dropout': 0.2, 'hidden_units': [20, 40, 20], 'steps': 20000},\n# ... \u4e2d\u7565\n {'dropout': 0.5, 'hidden_units': [20, 40, 20], 'steps': 100000},\n {'dropout': 0.5, 'hidden_units': [100, 200, 100], 'steps': 100000},\n {'dropout': 0.8, 'hidden_units': [10, 20, 10], 'steps': 100000},\n {'dropout': 0.8, 'hidden_units': [20, 40, 20], 'steps': 100000},\n {'dropout': 0.8, 'hidden_units': [100, 200, 100], 'steps': 100000}]\n\n\u3042\u308b\u7a0b\u5ea6\u8ca0\u8377\u3092\u304b\u3051\u305f\u304b\u3063\u305f\u306e\u3067step\u6570\u309210000\u4ee5\u4e0a\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001iris\u3060\u3063\u305f\u3089\u6570\u5343\u3067\u5341\u5206\u53ce\u675f\u3057\u307e\u3059\u3002\u307e\u305fdropout\u306f\u5b66\u7fd2\u6642\u9593\u304c\u5897\u3048\u308b\u305f\u3081\u3001over fitting \u304c\u78ba\u8a8d\u3055\u308c\u3066\u304b\u3089\u5f90\u3005\u306b\u9069\u7528\u3059\u308b\u65b9\u304c\u826f\u3044\u3068\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u90e8\u5206\nparam\u306b\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u7d44\u307f\u5408\u308f\u305b\u306e\u4e00\u3064\u304c\u5165\u308a\u307e\u3059\u3002\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306f\u30e6\u30cb\u30fc\u30afID\u3092\u4ed8\u3051\u3066GCS\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002\n\n\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\ndef train(param):\n    import uuid\n    import json\n    import tensorflow as tf\n    from sklearn import cross_validation\n\n    model_id = str(uuid.uuid4())\n\n    # \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9\n    iris = tf.contrib.learn.datasets.base.load_iris()\n    train_x, test_x, train_y, test_y = cross_validation.train_test_split(\n        iris.data, iris.target, test_size=0.2, random_state=0\n    )\n\n    # https://www.tensorflow.org/get_started/tflearn\n    feature_columns = [tf.contrib.layers.real_valued_column(\"\", dimension=4)]\n    classifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,\n                                                hidden_units=param['hidden_units'],\n                                                dropout=param['dropout'],\n                                                n_classes=3,\n                                                model_dir='gs://{BUCKET_NAME}/models/%s'% model_id)\n    classifier.fit(x=train_x,\n                   y=train_y,\n                   steps=param['steps'],\n                   batch_size=50)\n    result = classifier.evaluate(x=test_x, y=test_y)\n\n    ret = {'accuracy': float(result['accuracy']),\n           'loss': float(result['loss']),\n           'model_id': model_id,\n           'param': json.dumps(param)}\n\n    return ret\n\n\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u5b9f\u884c\n\u7d50\u679c\u306fBigQuery\u306b\u5165\u529b\u3057\u307e\u3059\u3002\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u5b9f\u884c\n(p | 'init' >> beam.Create(params)\n   | 'train' >> beam.Map(train)\n   | 'output' >> beam.Write(beam.io.BigQuerySink('project:dataset.table',\n                              schema=\"accuracy:FLOAT, loss:FLOAT, model_id:STRING, param:STRING\",\n                              write_disposition=beam.io.BigQueryDisposition.WRITE_APPEND,\n                              create_disposition=beam.io.BigQueryDisposition.CREATE_IF_NEEDED))\n)\n\np.run()\n\n\n\nJob\u306e\u78ba\u8a8d\nCloud Console\u304b\u3089\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002num_workers=6\u306e\u5834\u5408\u300120\u52061\u79d2\u3067\u7d42\u308f\u308a\u307e\u3057\u305f\u3002num_workers=18\u306b\u4e0a\u3052\u3066\u307f\u305f\u3068\u3053\u308d\u300110\u520641\u79d2\u3067\u3057\u305f\u3002\u307b\u307c\u4f55\u3082\u51e6\u7406\u3057\u306a\u3044\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3067\u30825\u5206\u7a0b\u5ea6\u304b\u304b\u308b\u3053\u3068\u304b\u3089\u3001\u5b9f\u8cea15\u5206->5\u5206\u3068\u51e6\u7406\u6642\u9593\u306f\u4e26\u5217\u6570\u306b\u304d\u3061\u3093\u3068\u53cd\u6bd4\u4f8b\u3057\u3066\u3044\u307e\u3059\u306d\u3002\n\n\n\u7d50\u679c\u3092BigQuery\u3067\u78ba\u8a8d\n36\u7d44\u307f\u5408\u308f\u305b\u306eaccuracy, loss, \u305d\u306e\u30e2\u30c7\u30eb\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30ea\u30b9\u30c8\u3067\u4fdd\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306firis\u306e\u30c7\u30fc\u30bf\u306a\u306e\u3067accuracy\u304c\u3082\u30461.0\u306b\u5f35\u308a\u4ed8\u3044\u3066\u3044\u307e\u3059\u306d\u3002\n\n\ntensorboard\u3067\u5404\u30e2\u30c7\u30eb\u3092\u78ba\u8a8d\nCloud Shell\u304b\u3089tensorboard\u3092\u8d77\u52d5\u3057\u3001GCS\u306b\u4fdd\u5b58\u3055\u308c\u305f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\ntensorboard --logdir=gs://{BUCKET_NAME}/models/{model_id} --port=8080\n\n\n\nPricing\u306b\u3064\u3044\u3066\nDataflow\u306fGCE\u3088\u308a\u3084\u3084\u5272\u9ad8\u306e\u6599\u91d1\u8a2d\u5b9a\u304c\u3055\u308c\u3066\u3044\u307e\u3059\u30022017\u5e743\u67086\u65e5\u73fe\u5728\n\u3057\u304b\u3057Dataflow\u306b\u306fGCE\u306b\u3042\u308b10\u5206\u306eminimum charge\u304c\u7121\u3044\u306e\u3067\u3001\u4e26\u5217\u3067\u7acb\u3061\u4e0a\u3052\u3066\u77ed\u6642\u9593\u3067\u30b5\u30af\u30c3\u3068\u7d42\u308f\u3089\u305b\u308b\u5834\u5408\u306f\u304a\u5f97\u3067\u3059\u3002(\u4eca\u56de\u306eJob\u306f13\u5186\u4f4d\uff09\nn1-standard-1\u306e\u5834\u5408\u306e\u640d\u76ca\u5206\u5c90\u70b9\u306f7\u5206\u4f4d\u3067\u3059\u3002\n\n\n\n\nvCPU\nMemory(GB)\n\n\n\n\nDataflow\n$0.056\n$0.003557\n\n\nGCE\n$0.03492\n$0.00468\n\n\n\n*Dataflow\u306fBatch, GCE\u306fsustained use discounts\u3092\u9069\u7528\u3057\u306a\u3044\u5834\u5408 \n\n\u307e\u3068\u3081\n\u99c6\u3051\u8db3\u3067\u3059\u304cDataflow\u3067TensorFlow\u306eGrid Search\u3092\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u81a8\u5927\u3060\u3063\u305f\u308a\u3001CNN\u3092\u4f7f\u3046\u5834\u5408\u306fCloud ML\u3092\u4f7f\u3046\u65b9\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u5c0f\u898f\u6a21\u3067\u3042\u3063\u305f\u308a\u5927\u91cf\u306b\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u5834\u5408\u306a\u3069\u3001Dataflow\u306e\u65b9\u304c\u826f\u3044\u30b1\u30fc\u30b9\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u540c\u3058\u3084\u308a\u65b9\u3067scikit-learn\u306e\u30e2\u30c7\u30eb\u3067\u5b66\u7fd2\u304c\u3067\u304d\u308b\u306e\u3082\u3044\u3044\u70b9\u3067\u3059\u306d\u3002\n\n\u95a2\u9023\u30ea\u30f3\u30af\n\n[Cloud ML Hyperparameter Tuning]  https://cloud.google.com/ml/docs/how-tos/using-hyperparameter-tuning\n\n[\u4e2d\u4e95\u5148\u751f\u306eDataflow\u4e26\u5217Prediction] http://enakai00.hatenablog.com/entry/2016/12/09/104913\n\n\n\u5c0f\u898f\u6a21\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u5b66\u7fd2\u3092\u3055\u305b\u308b\u6642\u3001\u5927\u307e\u304b\u306a\u50be\u5411\u3092\u898b\u308b\u305f\u3081\u306b\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u632f\u308a\u305f\u3044\u6642\u304c\u3042\u308a\u307e\u3059\u3002`scikit-learn`\u306b\u306fGrid Search\u3068Cross Validation\u3092\u540c\u6642\u306b\u884c\u3046[GridSearchCV](http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html)\u3068\u3044\u3046\u540d\u524d\u305d\u306e\u307e\u3093\u307e\u306a\u4fbf\u5229\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u304c\u3001\n\n- \u3053\u308c\u3092TensorFlow\u3067\u3082\u3001\n- \u30ea\u30e2\u30fc\u30c8\u3067\u4e26\u5217\u306b\u3001\n- \u305d\u3057\u3066\u9762\u5012\u306a\u5206\u6563\u51e6\u7406\u30b3\u30fc\u30c9\u3092\u66f8\u304b\u305a\u306b\n- Jupyter Notebook\u304b\u3089\u7c21\u5358\u306b  \n\n\u3084\u308a\u305f\u3044\u3067\u3059\u3088\u306d\u3002\n**\u306f\u3044\u3001Google Cloud Dataflow\u306a\u3089\u305d\u308c\u304c\u3067\u304d\u308b\u3093\u3067\u3059\uff01**\n\n# \u6e96\u5099\n\u3053\u3053\u306f[\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/hayatoy/items/0fdcf0019643fb1842b0)\u3068\u307b\u307c\u540c\u3058\u3067\u3059\u304c\u3001\u30e2\u30c7\u30eb\u306b\u3088\u3063\u3066\u306f\u30de\u30b7\u30f3\u30bf\u30a4\u30d7\u3092\u5909\u3048\u305f\u65b9\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002`worker_options.machine_type`\u306e\u90e8\u5206\u3067\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f`num_workers`\u3092\u6307\u5b9a\u3059\u308b\u3068autoscale\u304c\u7121\u52b9\u306b\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\u4eca\u56de\u306f6\u3092\u8a2d\u5b9a\u3057\u305f\u306e\u3067\u3001worker\u304c6\u3064\u4e00\u6c17\u306b\u751f\u6210\u3055\u308c\u307e\u3057\u305f\u3002\n\n```py:Option\u306e\u8a2d\u5b9a\nimport apache_beam as beam\nimport apache_beam.transforms.window as window\n\noptions = beam.utils.pipeline_options.PipelineOptions()\n\ngoogle_cloud_options = options.view_as(beam.utils.pipeline_options.GoogleCloudOptions)\ngoogle_cloud_options.project = '{PROJECTID}'\ngoogle_cloud_options.job_name = 'tensorflow-gs'\ngoogle_cloud_options.staging_location = 'gs://{BUCKET_NAME}/binaries'\ngoogle_cloud_options.temp_location = 'gs://{BUCKET_NAME}/temp'\n\nworker_options = options.view_as(beam.utils.pipeline_options.WorkerOptions)\nworker_options.max_num_workers = 6\nworker_options.num_workers = 6\nworker_options.disk_size_gb = 20\n# worker_options.machine_type = 'n1-standard-16'\n\n# options.view_as(beam.utils.pipeline_options.StandardOptions).runner = 'DirectRunner'\noptions.view_as(beam.utils.pipeline_options.StandardOptions).runner = 'DataflowRunner'\n\np = beam.Pipeline(options=options)\n```\n\n# Grid\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u751f\u6210\n\u7d44\u307f\u5408\u308f\u305b\u3092\u5168\u3066\u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3067\u5217\u6319\u3059\u308b\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u3001GridSearchCV\u306e\u3088\u3046\u306b\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u632f\u308a\u305f\u3044\u5024\u304b\u3089\u3001\u91cd\u8907\u3057\u306a\u3044\u7d44\u307f\u5408\u308f\u305b\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n```py:Grid\u30d1\u30e9\u30e1\u30fc\u30bf\u751f\u6210\nimport itertools\n\n# DNN\u306e\u8a2d\u5b9a\u3068\u3057\u3066\u306f\u7121\u610f\u5473\u3002\u3053\u3053\u306f\u3042\u304f\u307e\u3067\u4f8b\nparam_grid = {'hidden_units': [[10, 20, 10], [20, 40, 20], [100, 200, 100]],\n              'dropout': [0.1, 0.2, 0.5, 0.8],\n              'steps': [20000, 50000, 100000]}\n\ndef dict_product(param):\n    return (dict(itertools.izip(param, x)) for x in itertools.product(*param.itervalues()))\n\nparams = list(dict_product(param_grid))\n```\n\u3059\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306a36\u901a\u308a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u7d44\u307f\u5408\u308f\u305b\u304c\u751f\u6210\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\n```py\n[{'dropout': 0.1, 'hidden_units': [10, 20, 10], 'steps': 20000},\n {'dropout': 0.1, 'hidden_units': [20, 40, 20], 'steps': 20000},\n {'dropout': 0.1, 'hidden_units': [100, 200, 100], 'steps': 20000},\n {'dropout': 0.2, 'hidden_units': [10, 20, 10], 'steps': 20000},\n {'dropout': 0.2, 'hidden_units': [20, 40, 20], 'steps': 20000},\n# ... \u4e2d\u7565\n {'dropout': 0.5, 'hidden_units': [20, 40, 20], 'steps': 100000},\n {'dropout': 0.5, 'hidden_units': [100, 200, 100], 'steps': 100000},\n {'dropout': 0.8, 'hidden_units': [10, 20, 10], 'steps': 100000},\n {'dropout': 0.8, 'hidden_units': [20, 40, 20], 'steps': 100000},\n {'dropout': 0.8, 'hidden_units': [100, 200, 100], 'steps': 100000}]\n```\n\n*\u3042\u308b\u7a0b\u5ea6\u8ca0\u8377\u3092\u304b\u3051\u305f\u304b\u3063\u305f\u306e\u3067step\u6570\u309210000\u4ee5\u4e0a\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001iris\u3060\u3063\u305f\u3089\u6570\u5343\u3067\u5341\u5206\u53ce\u675f\u3057\u307e\u3059\u3002\u307e\u305fdropout\u306f\u5b66\u7fd2\u6642\u9593\u304c\u5897\u3048\u308b\u305f\u3081\u3001over fitting \u304c\u78ba\u8a8d\u3055\u308c\u3066\u304b\u3089\u5f90\u3005\u306b\u9069\u7528\u3059\u308b\u65b9\u304c\u826f\u3044\u3068\u3055\u308c\u3066\u3044\u307e\u3059\u3002*\n\n\n# \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u90e8\u5206\nparam\u306b\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u7d44\u307f\u5408\u308f\u305b\u306e\u4e00\u3064\u304c\u5165\u308a\u307e\u3059\u3002\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306f\u30e6\u30cb\u30fc\u30afID\u3092\u4ed8\u3051\u3066`GCS`\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002\n\n```py:\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\ndef train(param):\n    import uuid\n    import json\n    import tensorflow as tf\n    from sklearn import cross_validation\n    \n    model_id = str(uuid.uuid4())\n    \n    # \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9\n    iris = tf.contrib.learn.datasets.base.load_iris()\n    train_x, test_x, train_y, test_y = cross_validation.train_test_split(\n        iris.data, iris.target, test_size=0.2, random_state=0\n    )\n    \n    # https://www.tensorflow.org/get_started/tflearn\n    feature_columns = [tf.contrib.layers.real_valued_column(\"\", dimension=4)]\n    classifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,\n                                                hidden_units=param['hidden_units'],\n                                                dropout=param['dropout'],\n                                                n_classes=3,\n                                                model_dir='gs://{BUCKET_NAME}/models/%s'% model_id)\n    classifier.fit(x=train_x,\n                   y=train_y,\n                   steps=param['steps'],\n                   batch_size=50)\n    result = classifier.evaluate(x=test_x, y=test_y)\n    \n    ret = {'accuracy': float(result['accuracy']),\n           'loss': float(result['loss']),\n           'model_id': model_id,\n           'param': json.dumps(param)}\n    \n    return ret\n```\n\n# \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u5b9f\u884c\n\u7d50\u679c\u306fBigQuery\u306b\u5165\u529b\u3057\u307e\u3059\u3002\n\n\n```py:\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u5b9f\u884c\n(p | 'init' >> beam.Create(params)\n   | 'train' >> beam.Map(train)\n   | 'output' >> beam.Write(beam.io.BigQuerySink('project:dataset.table',\n                              schema=\"accuracy:FLOAT, loss:FLOAT, model_id:STRING, param:STRING\",\n                              write_disposition=beam.io.BigQueryDisposition.WRITE_APPEND,\n                              create_disposition=beam.io.BigQueryDisposition.CREATE_IF_NEEDED))\n)\n\np.run()\n```\n\n# Job\u306e\u78ba\u8a8d\nCloud Console\u304b\u3089\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002`num_workers=6`\u306e\u5834\u5408\u300120\u52061\u79d2\u3067\u7d42\u308f\u308a\u307e\u3057\u305f\u3002`num_workers=18`\u306b\u4e0a\u3052\u3066\u307f\u305f\u3068\u3053\u308d\u300110\u520641\u79d2\u3067\u3057\u305f\u3002\u307b\u307c\u4f55\u3082\u51e6\u7406\u3057\u306a\u3044\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3067\u30825\u5206\u7a0b\u5ea6\u304b\u304b\u308b\u3053\u3068\u304b\u3089\u3001\u5b9f\u8cea15\u5206->5\u5206\u3068\u51e6\u7406\u6642\u9593\u306f\u4e26\u5217\u6570\u306b\u304d\u3061\u3093\u3068\u53cd\u6bd4\u4f8b\u3057\u3066\u3044\u307e\u3059\u306d\u3002\n<img width=\"1143\" alt=\"df.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/162369/79dd5b8f-645e-336c-d30c-aef0bb212784.png\">\n\n# \u7d50\u679c\u3092BigQuery\u3067\u78ba\u8a8d\n36\u7d44\u307f\u5408\u308f\u305b\u306eaccuracy, loss, \u305d\u306e\u30e2\u30c7\u30eb\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30ea\u30b9\u30c8\u3067\u4fdd\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306firis\u306e\u30c7\u30fc\u30bf\u306a\u306e\u3067accuracy\u304c\u3082\u30461.0\u306b\u5f35\u308a\u4ed8\u3044\u3066\u3044\u307e\u3059\u306d\u3002\n\n<img width=\"1137\" alt=\"bq.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/162369/ac292e87-ae60-447a-963c-b5b8d0f50029.png\">\n\n# tensorboard\u3067\u5404\u30e2\u30c7\u30eb\u3092\u78ba\u8a8d\nCloud Shell\u304b\u3089tensorboard\u3092\u8d77\u52d5\u3057\u3001GCS\u306b\u4fdd\u5b58\u3055\u308c\u305f\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```\ntensorboard --logdir=gs://{BUCKET_NAME}/models/{model_id} --port=8080\n```\n<img width=\"1131\" alt=\"tf.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/162369/1e317a39-6e9c-479f-e280-1d82fbc7a398.png\">\n\n# Pricing\u306b\u3064\u3044\u3066\nDataflow\u306fGCE\u3088\u308a[\u3084\u3084\u5272\u9ad8\u306e\u6599\u91d1\u8a2d\u5b9a](https://cloud.google.com/dataflow/pricing)\u304c\u3055\u308c\u3066\u3044\u307e\u3059\u3002**2017\u5e743\u67086\u65e5\u73fe\u5728**\n\u3057\u304b\u3057Dataflow\u306b\u306fGCE\u306b\u3042\u308b10\u5206\u306eminimum charge\u304c\u7121\u3044\u306e\u3067\u3001\u4e26\u5217\u3067\u7acb\u3061\u4e0a\u3052\u3066\u77ed\u6642\u9593\u3067\u30b5\u30af\u30c3\u3068\u7d42\u308f\u3089\u305b\u308b\u5834\u5408\u306f\u304a\u5f97\u3067\u3059\u3002(\u4eca\u56de\u306eJob\u306f13\u5186\u4f4d\uff09\nn1-standard-1\u306e\u5834\u5408\u306e\u640d\u76ca\u5206\u5c90\u70b9\u306f7\u5206\u4f4d\u3067\u3059\u3002\n\n|  | vCPU | Memory(GB) |\n|:-:|:-:|:-:|\n| Dataflow | $0.056  | $0.003557 |\n| GCE  | $0.03492 | $0.00468 |\n*Dataflow\u306fBatch, GCE\u306fsustained use discounts\u3092\u9069\u7528\u3057\u306a\u3044\u5834\u5408 \n\n# \u307e\u3068\u3081\n\u99c6\u3051\u8db3\u3067\u3059\u304cDataflow\u3067TensorFlow\u306eGrid Search\u3092\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u81a8\u5927\u3060\u3063\u305f\u308a\u3001CNN\u3092\u4f7f\u3046\u5834\u5408\u306fCloud ML\u3092\u4f7f\u3046\u65b9\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u5c0f\u898f\u6a21\u3067\u3042\u3063\u305f\u308a\u5927\u91cf\u306b\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u5834\u5408\u306a\u3069\u3001Dataflow\u306e\u65b9\u304c\u826f\u3044\u30b1\u30fc\u30b9\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u540c\u3058\u3084\u308a\u65b9\u3067scikit-learn\u306e\u30e2\u30c7\u30eb\u3067\u5b66\u7fd2\u304c\u3067\u304d\u308b\u306e\u3082\u3044\u3044\u70b9\u3067\u3059\u306d\u3002\n\n### \u95a2\u9023\u30ea\u30f3\u30af\n\n- [Cloud ML Hyperparameter Tuning]  https://cloud.google.com/ml/docs/how-tos/using-hyperparameter-tuning\n- [\u4e2d\u4e95\u5148\u751f\u306eDataflow\u4e26\u5217Prediction] http://enakai00.hatenablog.com/entry/2016/12/09/104913\n", "tags": ["GoogleCloudDataflow", "GoogleCloudPlatform", "TensorFlow", "\u6a5f\u68b0\u5b66\u7fd2", "MachineLearning"]}