{"tags": ["AndroidStudio", "gradle"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\u30ea\u30ea\u30fc\u30b9\u7528\u306eAPK\u3092\u5fc5\u305a\u540c\u3058\u5834\u6240\u306b\u914d\u7f6e\u3057\u305f\u3044\u5834\u5408\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001AndroidStudio/gradle\u306a\u3089\u5c02\u7528\u30bf\u30b9\u30af\u3092\u4f5c\u308b\u3053\u3068\u3067\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\u53c2\u8003: http://stackoverflow.com/questions/21434554/copying-apk-file-in-android-gradle-project/21533902#21533902\n\nbuild.gradle\napply plugin: 'com.android.application'\n\nandroid {\n...\n    def publish = project.tasks.create(\"publishAll\")\n    android.applicationVariants.all { variant ->\n        if (variant.buildType.name.equals(\"release\")) {\n            def task = project.tasks.create(\"publish${variant.name.capitalize()}Apk\", Copy)\n            task.from(variant.outputFile)\n            task.into(deployTo)\n\n            task.dependsOn variant.assemble\n            publish.dependsOn task\n\n            // copyXxxMappingTxt\n            if (variant.buildType.runProguard) {\n                def copyTask = project.tasks.create(\"copy${variant.name.capitalize()}MappingTxt\", Copy)\n\n                // variant.outputFile = \"build/outputs/apk/xxx.apk\"\n                // from: \"build/outputs/proguard/free/release/mapping.txt\"\n                // into: \"proguard-outputs/free-release-mapping.txt\"\n\n                def flavorName = variant.productFlavors[0].name\n                def buildTypeName = variant.buildType.name\n\n                copyTask.from(variant.outputFile.parent + \"/../proguard/${flavorName}/${buildTypeName}/mapping.txt\")\n                copyTask.rename('(.*)', \"${flavorName}-proguard-\\$1\")\n                copyTask.into(variant.outputFile.parent + \"/../../../proguard-outputs\")\n\n                System.println(\"* copy mapping txt : [${flavorName}][${buildTypeName}]\")\n\n                copyTask.dependsOn variant.assemble\n                task.dependsOn copyTask\n            }\n        }\n    }\n...\n}\n...\n\n\n\ngradle.properties\ndeployTo=D:\\\\hoge\\\\fuga\n\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u304a\u304f\u3068\u3001\"publishAll\" \u3068\u3044\u3046 task \u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067 release \u306e assemble \u304c\u5b9f\u884c\u3055\u308c\u305f\u3042\u3068\u306b \"D:\\hoge\\fuga\" \u306bAPK\u304c\u914d\u7f6e\u3055\u308c\u307e\u3059\u3002\n\u8907\u6570\u306e ProductFlavor \u304c\u3042\u308b\u5834\u5408\u3082 release \u7248\u3060\u3051\u304c\u5168\u90e8\u5b9f\u884c\u3055\u308c\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002\n\u3064\u3044\u3067\u306b copyXxxMappingTxt \u306e\u3088\u3046\u306a\u30bf\u30b9\u30af\u3067 mapping.txt \u3092\u7279\u5b9a\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30b3\u30d4\u30fc\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3082 \"publishAll\" \u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\u30ea\u30ea\u30fc\u30b9\u7528\u306eAPK\u3092\u5fc5\u305a\u540c\u3058\u5834\u6240\u306b\u914d\u7f6e\u3057\u305f\u3044\u5834\u5408\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001AndroidStudio/gradle\u306a\u3089\u5c02\u7528\u30bf\u30b9\u30af\u3092\u4f5c\u308b\u3053\u3068\u3067\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\n\u53c2\u8003: http://stackoverflow.com/questions/21434554/copying-apk-file-in-android-gradle-project/21533902#21533902\n\n```groovy:build.gradle\napply plugin: 'com.android.application'\n\nandroid {\n...\n    def publish = project.tasks.create(\"publishAll\")\n    android.applicationVariants.all { variant ->\n        if (variant.buildType.name.equals(\"release\")) {\n            def task = project.tasks.create(\"publish${variant.name.capitalize()}Apk\", Copy)\n            task.from(variant.outputFile)\n            task.into(deployTo)\n\n            task.dependsOn variant.assemble\n            publish.dependsOn task\n\n            // copyXxxMappingTxt\n            if (variant.buildType.runProguard) {\n                def copyTask = project.tasks.create(\"copy${variant.name.capitalize()}MappingTxt\", Copy)\n\n                // variant.outputFile = \"build/outputs/apk/xxx.apk\"\n                // from: \"build/outputs/proguard/free/release/mapping.txt\"\n                // into: \"proguard-outputs/free-release-mapping.txt\"\n\n                def flavorName = variant.productFlavors[0].name\n                def buildTypeName = variant.buildType.name\n\n                copyTask.from(variant.outputFile.parent + \"/../proguard/${flavorName}/${buildTypeName}/mapping.txt\")\n                copyTask.rename('(.*)', \"${flavorName}-proguard-\\$1\")\n                copyTask.into(variant.outputFile.parent + \"/../../../proguard-outputs\")\n\n                System.println(\"* copy mapping txt : [${flavorName}][${buildTypeName}]\")\n\n                copyTask.dependsOn variant.assemble\n                task.dependsOn copyTask\n            }\n        }\n    }\n...\n}\n...\n```\n\n```properties:gradle.properties\ndeployTo=D:\\\\hoge\\\\fuga\n```\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u304a\u304f\u3068\u3001\"publishAll\" \u3068\u3044\u3046 task \u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067 release \u306e assemble \u304c\u5b9f\u884c\u3055\u308c\u305f\u3042\u3068\u306b \"D:\\\\hoge\\\\fuga\" \u306bAPK\u304c\u914d\u7f6e\u3055\u308c\u307e\u3059\u3002\n\n\u8907\u6570\u306e ProductFlavor \u304c\u3042\u308b\u5834\u5408\u3082 release \u7248\u3060\u3051\u304c\u5168\u90e8\u5b9f\u884c\u3055\u308c\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002\n\n\n\u3064\u3044\u3067\u306b copyXxxMappingTxt \u306e\u3088\u3046\u306a\u30bf\u30b9\u30af\u3067 mapping.txt \u3092\u7279\u5b9a\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30b3\u30d4\u30fc\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3082 \"publishAll\" \u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n"}