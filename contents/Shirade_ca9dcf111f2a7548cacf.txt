{"context": " More than 1 year has passed since last update.\n\niBeacon Receiver in Swift 2.0\niBeacon\u3092\u5229\u7528\u3057\u305f\u30a2\u30d7\u30ea\u3092\u958b\u767a\u3059\u308b\u969b\u306b\u8272\u3005\u3068\u8abf\u67fb\u304c\u5fc5\u8981\u3067\u9762\u5012\u3060\u3063\u305f\u306e\u3067\uff0c\u6700\u5c0f\u9650\u306eiBeacon\u53d7\u4fe1\u7528\u306e\u5b9f\u88c5(ViewController.swift)\u3092\u516c\u958b\u3057\u307e\u3059\uff0e\n\nViewController.swift\n\nViewController.swift\nimport UIKit\nimport CoreLocation\n\nclass FirstViewController: UIViewController, UIWebViewDelegate, CLLocationManagerDelegate {\n\n    let manager: CLLocationManager = CLLocationManager()\n    // replace uuid and identifier\n    let region: CLBeaconRegion = CLBeaconRegion(proximityUUID: NSUUID(UUIDString: \"ef5b1eff-7a78-4e1c-a63d-60b54c077561\")!, identifier: \"com.example\")\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        manager.delegate = self\n        // AlwaysAuthorization is required to receive iBeacon\n        let status = CLLocationManager.authorizationStatus()\n        if status != CLAuthorizationStatus.AuthorizedAlways {\n            manager.requestAlwaysAuthorization()\n        }\n    }\n\n    // MARK: - CLLocationManagerDelegate\n    func locationManager(manager: CLLocationManager, didChangeAuthorizationStatus status: CLAuthorizationStatus) {\n        // checking authorization status for using user location to start or stop monitoring for region\n        switch status {\n        case CLAuthorizationStatus.AuthorizedAlways:\n            print(\"didChangeAuthorizationStatus: startMonitoringForRegion\")\n            manager.startMonitoringForRegion(self.region)\n        default:\n            print(\"didChangeAuthorizationStatus: stopMonitoringForRegion\")\n            manager.stopMonitoringForRegion(self.region)\n        }\n    }\n\n    func locationManager(manager: CLLocationManager, didDetermineState state: CLRegionState, forRegion region: CLRegion) {\n        // checking if you are inside or outside of designated regions to start or stop ranging beacons in the region \n        switch state {\n        case CLRegionState.Inside:\n            print(\"didDetermineState: startRangingBeaconsInRegion\")\n            manager.startRangingBeaconsInRegion(self.region)\n        case CLRegionState.Outside, CLRegionState.Unknown:\n            print(\"didDetermineState: stopRangingBeaconsInRegion\")\n            manager.stopRangingBeaconsInRegion(self.region)\n        }\n\n    }\n\n    func locationManager(manager: CLLocationManager, didRangeBeacons beacons: [CLBeacon], inRegion region: CLBeaconRegion) {\n        // implement whatever you wanna do with recwived iBeacons like\n        print(beacons)\n    }\n}\n\n\n\n\u4f7f\u3044\u65b9\nSingle View Application \u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u7acb\u3061\u4e0a\u3052\u308b\u3068\u3059\u3050\u306b\u3042\u308b\uff0cViewController.swift\u306b\u3053\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u3059\u308c\u3070\u52d5\u304f\u306f\u305a\u3067\u3059\uff0e\n\n\u5f8c\u3067\u8abf\u67fb\n\ndidDetermineState\u3067\u3069\u306eCLBeaconRegion\u3092\u7528\u3044\u308c\u3070\u3044\u3044\u306e\u304b\u7c21\u5358\u306b\u5224\u5225\u3059\u308b\u65b9\u6cd5\n\u73fe\u5728\u306eDelegate\u304b\u3089\u6e21\u3055\u308c\u308b\u5f15\u6570\u306eregion\u304b\u3089\u306f\u5224\u5225\u3067\u304d\u306a\u3044\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\uff0e\n\nP.S. #1\n\n\u4f7f\u3044\u65b9\n\u4f4d\u7f6e\u60c5\u5831\u3092\u5229\u7528\u3059\u308b\u306b\u5f53\u305f\u308a\uff0c\u5229\u7528\u76ee\u7684\u3092Info.plist\u306b\u767b\u9332\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\nKey: NSLocationAlwaysUsageDescription\nType: String\nValue: Your usage description is here ...\n\nBug\n\u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3057\u305f\u969b\u306b\u4ee5\u4e0b\u306e\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u3066\u3044\u3066\u3082\uff0ciPad\u306fiBeacon\u53d7\u4fe1\u3092\u81ea\u52d5\u3067\u958b\u59cb\u3057\u306a\u3044\uff0e\n - \u4f4d\u7f6e\u60c5\u5831\u306e\u5229\u7528\u304c\u8a31\u53ef\u3055\u308c\u3066\u3044\u308b\n - Bluetooth\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u3067\u3042\u308b\n\n## iBeacon Receiver in Swift 2.0\niBeacon\u3092\u5229\u7528\u3057\u305f\u30a2\u30d7\u30ea\u3092\u958b\u767a\u3059\u308b\u969b\u306b\u8272\u3005\u3068\u8abf\u67fb\u304c\u5fc5\u8981\u3067\u9762\u5012\u3060\u3063\u305f\u306e\u3067\uff0c\u6700\u5c0f\u9650\u306eiBeacon\u53d7\u4fe1\u7528\u306e\u5b9f\u88c5(ViewController.swift)\u3092\u516c\u958b\u3057\u307e\u3059\uff0e\n\n## ViewController.swift\n```swift:ViewController.swift\nimport UIKit\nimport CoreLocation\n\nclass FirstViewController: UIViewController, UIWebViewDelegate, CLLocationManagerDelegate {\n    \n    let manager: CLLocationManager = CLLocationManager()\n    // replace uuid and identifier\n    let region: CLBeaconRegion = CLBeaconRegion(proximityUUID: NSUUID(UUIDString: \"ef5b1eff-7a78-4e1c-a63d-60b54c077561\")!, identifier: \"com.example\")\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        manager.delegate = self\n        // AlwaysAuthorization is required to receive iBeacon\n        let status = CLLocationManager.authorizationStatus()\n        if status != CLAuthorizationStatus.AuthorizedAlways {\n        \tmanager.requestAlwaysAuthorization()\n        }\n    }\n    \n    // MARK: - CLLocationManagerDelegate\n    func locationManager(manager: CLLocationManager, didChangeAuthorizationStatus status: CLAuthorizationStatus) {\n    \t// checking authorization status for using user location to start or stop monitoring for region\n        switch status {\n        case CLAuthorizationStatus.AuthorizedAlways:\n            print(\"didChangeAuthorizationStatus: startMonitoringForRegion\")\n            manager.startMonitoringForRegion(self.region)\n        default:\n            print(\"didChangeAuthorizationStatus: stopMonitoringForRegion\")\n            manager.stopMonitoringForRegion(self.region)\n        }\n    }\n    \n    func locationManager(manager: CLLocationManager, didDetermineState state: CLRegionState, forRegion region: CLRegion) {\n    \t// checking if you are inside or outside of designated regions to start or stop ranging beacons in the region \n        switch state {\n        case CLRegionState.Inside:\n            print(\"didDetermineState: startRangingBeaconsInRegion\")\n            manager.startRangingBeaconsInRegion(self.region)\n        case CLRegionState.Outside, CLRegionState.Unknown:\n            print(\"didDetermineState: stopRangingBeaconsInRegion\")\n            manager.stopRangingBeaconsInRegion(self.region)\n        }\n        \n    }\n    \n    func locationManager(manager: CLLocationManager, didRangeBeacons beacons: [CLBeacon], inRegion region: CLBeaconRegion) {\n        // implement whatever you wanna do with recwived iBeacons like\n        print(beacons)\n    }\n}\n```\n\n## \u4f7f\u3044\u65b9\nSingle View Application \u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u7acb\u3061\u4e0a\u3052\u308b\u3068\u3059\u3050\u306b\u3042\u308b\uff0cViewController.swift\u306b\u3053\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u3059\u308c\u3070\u52d5\u304f\u306f\u305a\u3067\u3059\uff0e\n\n## \u5f8c\u3067\u8abf\u67fb\n### didDetermineState\u3067\u3069\u306eCLBeaconRegion\u3092\u7528\u3044\u308c\u3070\u3044\u3044\u306e\u304b\u7c21\u5358\u306b\u5224\u5225\u3059\u308b\u65b9\u6cd5\n\u73fe\u5728\u306eDelegate\u304b\u3089\u6e21\u3055\u308c\u308b\u5f15\u6570\u306eregion\u304b\u3089\u306f\u5224\u5225\u3067\u304d\u306a\u3044\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\uff0e\n\n##P.S. #1\n### \u4f7f\u3044\u65b9\n\u4f4d\u7f6e\u60c5\u5831\u3092\u5229\u7528\u3059\u308b\u306b\u5f53\u305f\u308a\uff0c\u5229\u7528\u76ee\u7684\u3092Info.plist\u306b\u767b\u9332\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\nKey: `NSLocationAlwaysUsageDescription`\nType: `String`\nValue: `Your usage description is here ...`\n\n### Bug\n\u30a2\u30d7\u30ea\u3092\u8d77\u52d5\u3057\u305f\u969b\u306b\u4ee5\u4e0b\u306e\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u3066\u3044\u3066\u3082\uff0ciPad\u306fiBeacon\u53d7\u4fe1\u3092\u81ea\u52d5\u3067\u958b\u59cb\u3057\u306a\u3044\uff0e\n - \u4f4d\u7f6e\u60c5\u5831\u306e\u5229\u7528\u304c\u8a31\u53ef\u3055\u308c\u3066\u3044\u308b\n - Bluetooth\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u3067\u3042\u308b\n", "tags": ["iBeacon", "Swift"]}