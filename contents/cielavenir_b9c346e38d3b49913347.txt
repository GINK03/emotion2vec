{"context": "Crystal\u3067\u30e1\u30e2\u5316\u518d\u5e30\u3092\u884c\u3046\n\nIn Ruby, to perform memoized recursion, we usually declare $memo={}.\nCrystal also accepted this method (actually type config is required, so like $memo={} of Int32 => Int64).\nHowever, this stopped working in 0.19.0. @memo and @@memo are also invalid at top-level.\n\n\nhttps://github.com/crystal-lang/crystal/issues/3139\n\n\nThe best way for memoized recursion is now to use class.\nhttps://yukicoder.me/submissions/144799\n\n\nyukicoder287_class.cr\nclass Solve\n    @memo={} of Tuple(Int32,Int32) => Int64\n    def perform(n,d,u)\n        if d==1\n            0<=n&&n<=u ? 1 : 0\n        else\n            @memo[{n,d}]||=(0..u).reduce(0_i64){|s,i|s+perform(n-i,d-1,u)}\n        end\n    end\n    def run\n        n=gets.not_nil!.to_i\n        p perform(6*n,8,n)\n    end\nend\nSolve.new.run\n\n\n\nHowever, this is a little bit over-work for competitive programming.\nWith checking the issue, the most problematic point is initializing. Now we can utilize the fact that in (Ruby and) Crystal, contants are just un-reassignable and destructive updating is possible. In short, we use Memo.\nNow we are able to build the program.\nhttps://yukicoder.me/submissions/144800\n\n\nyukicoder287_const.cr\nMemo={} of Tuple(Int32,Int32) => Int64\ndef perform(n,d,u)\n    if d==1\n        0<=n&&n<=u ? 1 : 0\n    else\n        Memo[{n,d}]||=(0..u).reduce(0_i64){|s,i|s+perform(n-i,d-1,u)}\n    end\nend\nn=gets.not_nil!.to_i\np perform(6*n,8,n)\n\n\n\n\nRuby\u3067\u30e1\u30e2\u5316\u518d\u5e30\u3092\u884c\u3046\u306b\u306f\u3001\u5148\u982d\u3067$memo={}\u3068\u3059\u308b\u306e\u304c\u4e00\u822c\u7684\u3067\u3042\u308b\u3002\nCrystal\u3067\u3082\u3053\u306e\u65b9\u6cd5\u306f\u4ee5\u524d\u306f\u6709\u52b9\u3067\u3042\u3063\u305f(\u5b9f\u969b\u306b\u306f\u578b\u6307\u5b9a\u304c\u5fc5\u8981\u306a\u306e\u3067\u3001$memo={} of Int32 => Int64\u306a\u3069\u3068\u3059\u308b)\u3002\n\u3057\u304b\u3057\u3001\u3053\u306e\u65b9\u6cd5\u306f0.19.0\u3067\u4f7f\u3048\u306a\u304f\u306a\u3063\u305f\u3002@memo\u3084@@memo\u3082\u52b9\u304b\u306a\u3044\u3002\n\n\nhttps://github.com/crystal-lang/crystal/issues/3139\n\n\n\u73fe\u5728\u30e1\u30e2\u5316\u518d\u5e30\u3092\u884c\u3046\u306e\u306b\u6700\u3082\u826f\u3044\u65b9\u6cd5\u306f\u30af\u30e9\u30b9\u3067\u56f2\u3046\u3053\u3068\u3067\u3042\u308d\u3046\u3002\n\u3057\u304b\u3057\u3001\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f\u3001\u3053\u308c\u306f\u591a\u5c11\u30aa\u30fc\u30d0\u30fc\u30ef\u30fc\u30af\u3067\u3042\u308b\u3002\n\u3053\u306eissue\u3092\u898b\u308b\u3068\u3001\u521d\u671f\u5316\u306b\u554f\u984c\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\u305d\u3053\u3067\u3001(Ruby\u3084)Crystal\u3067\u306f\u3001\u5b9a\u6570\u3068\u306f\u518d\u4ee3\u5165\u4e0d\u53ef\u306a\u3082\u306e\u3067\u3042\u308a\u7834\u58ca\u7684\u5909\u66f4\u306f\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\u3002\u3064\u307e\u308a\u3001Memo\u3092\u5ba3\u8a00\u3059\u308b\u3002\n\u3053\u308c\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u901a\u3059\u3053\u3068\u304c\u3067\u304d\u305f\u3002\n\n\nCrystal\u3067\u30e1\u30e2\u5316\u518d\u5e30\u3092\u884c\u3046\n\n- In Ruby, to perform memoized recursion, we usually declare `$memo={}`.\n- Crystal also accepted this method (actually type config is required, so like `$memo={} of Int32 => Int64`).\n- However, this stopped working in 0.19.0. `@memo` and `@@memo` are also invalid at top-level.\n  - https://github.com/crystal-lang/crystal/issues/3139\n- The best way for memoized recursion is now to use class.\n- https://yukicoder.me/submissions/144799\n\n```cr:yukicoder287_class.cr\nclass Solve\n\t@memo={} of Tuple(Int32,Int32) => Int64\n\tdef perform(n,d,u)\n\t\tif d==1\n\t\t\t0<=n&&n<=u ? 1 : 0\n\t\telse\n\t\t\t@memo[{n,d}]||=(0..u).reduce(0_i64){|s,i|s+perform(n-i,d-1,u)}\n\t\tend\n\tend\n\tdef run\n\t\tn=gets.not_nil!.to_i\n\t\tp perform(6*n,8,n)\n\tend\nend\nSolve.new.run\n```\n\n- However, this is a little bit over-work for competitive programming.\n- With checking the issue, the most problematic point is initializing. Now we can utilize the fact that in (Ruby and) Crystal, contants are just un-reassignable and destructive updating is possible. In short, we use `Memo`.\n- Now we are able to build the program.\n- https://yukicoder.me/submissions/144800\n\n```cr:yukicoder287_const.cr\nMemo={} of Tuple(Int32,Int32) => Int64\ndef perform(n,d,u)\n\tif d==1\n\t\t0<=n&&n<=u ? 1 : 0\n\telse\n\t\tMemo[{n,d}]||=(0..u).reduce(0_i64){|s,i|s+perform(n-i,d-1,u)}\n\tend\nend\nn=gets.not_nil!.to_i\np perform(6*n,8,n)\n```\n\n----\n\n- Ruby\u3067\u30e1\u30e2\u5316\u518d\u5e30\u3092\u884c\u3046\u306b\u306f\u3001\u5148\u982d\u3067`$memo={}`\u3068\u3059\u308b\u306e\u304c\u4e00\u822c\u7684\u3067\u3042\u308b\u3002\n- Crystal\u3067\u3082\u3053\u306e\u65b9\u6cd5\u306f\u4ee5\u524d\u306f\u6709\u52b9\u3067\u3042\u3063\u305f(\u5b9f\u969b\u306b\u306f\u578b\u6307\u5b9a\u304c\u5fc5\u8981\u306a\u306e\u3067\u3001`$memo={} of Int32 => Int64`\u306a\u3069\u3068\u3059\u308b)\u3002\n- \u3057\u304b\u3057\u3001\u3053\u306e\u65b9\u6cd5\u306f0.19.0\u3067\u4f7f\u3048\u306a\u304f\u306a\u3063\u305f\u3002`@memo`\u3084`@@memo`\u3082\u52b9\u304b\u306a\u3044\u3002\n  - https://github.com/crystal-lang/crystal/issues/3139\n- \u73fe\u5728\u30e1\u30e2\u5316\u518d\u5e30\u3092\u884c\u3046\u306e\u306b\u6700\u3082\u826f\u3044\u65b9\u6cd5\u306f\u30af\u30e9\u30b9\u3067\u56f2\u3046\u3053\u3068\u3067\u3042\u308d\u3046\u3002\n- \u3057\u304b\u3057\u3001\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f\u3001\u3053\u308c\u306f\u591a\u5c11\u30aa\u30fc\u30d0\u30fc\u30ef\u30fc\u30af\u3067\u3042\u308b\u3002\n- \u3053\u306eissue\u3092\u898b\u308b\u3068\u3001\u521d\u671f\u5316\u306b\u554f\u984c\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\u305d\u3053\u3067\u3001(Ruby\u3084)Crystal\u3067\u306f\u3001\u5b9a\u6570\u3068\u306f\u518d\u4ee3\u5165\u4e0d\u53ef\u306a\u3082\u306e\u3067\u3042\u308a\u7834\u58ca\u7684\u5909\u66f4\u306f\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\u3002\u3064\u307e\u308a\u3001`Memo`\u3092\u5ba3\u8a00\u3059\u308b\u3002\n- \u3053\u308c\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u901a\u3059\u3053\u3068\u304c\u3067\u304d\u305f\u3002\n", "tags": ["crystal", "\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0"]}