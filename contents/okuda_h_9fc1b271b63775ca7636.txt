{"context": " More than 1 year has passed since last update.\n\n\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\n\u53c2\u8003\n\u30b9\u30c8\u30ea\u30fc\u30e0\u30c7\u30fc\u30bf\u51e6\u7406\u30b5\u30fc\u30d3\u30b9Amazon Kinesis\u306b\u3064\u3044\u3066\u8abf\u3079\u305f\u7d50\u679c\n\u516c\u5f0f\nGetting Started\nDeveloping Record Consumer Applications with the Amazon Kinesis Client Library\n\n\u6e96\u5099\n\nAmazon Kinesis Client Library\nKinesis\u306estream\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8a18\u8ff0\u3059\u308b\u305f\u3081\u306bAmazon Kinesis Client Library\ngithub\u3088\u308a\u30af\u30ed\u30fc\u30f3\ngit clone https://github.com/awslabs/amazon-kinesis-client.git\nmaven\u30b3\u30de\u30f3\u30c9\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\nmvn clean install -Dgpg.skip=true\n\nAmazon Kinesis stream\u306e\u4f5c\u6210\nServices > Analytics > Kinesis\u3092\u9078\u629e\u3057\u3001Amazon Kinesis\u306e\u753b\u9762\u3078\u3002\nCreate Stream\u3092\u62bc\u4e0b\u3002\n\nStream Name\u3068Number of Shards\u3092\u8a2d\u5b9a\u3057\u3001Create\u3092\u62bc\u4e0b\u3002\u3053\u3053\u3067\u306f\u3001Shard\u6570\u306f\uff11\u306b\u8a2d\u5b9a\n\n\u3057\u3070\u3089\u304f\u3059\u308b\u3068ACTIVE\u306b\u306a\u308c\u3070\u3001\u6e96\u5099\u5b8c\u4e86\u3002\n\n\n\u4f9d\u5b58\u95a2\u4fc2\u306e\u8a2d\u5b9a\n\npom.xml\n    <dependencies>\n        <dependency>\n            <groupId>com.amazonaws</groupId>\n            <artifactId>aws-java-sdk</artifactId>\n            <version>${aws-java-sdk.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>commons-lang</groupId>\n            <artifactId>commons-lang</artifactId>\n            <version>2.3</version>\n        </dependency>\n        <dependency>\n            <groupId>com.amazonaws</groupId>\n            <artifactId>amazon-kinesis-client</artifactId>\n            <version>1.1.0</version>\n        </dependency>\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>[1.0,)</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-simple</artifactId>\n            <version>[1.7,)</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>jcl-over-slf4j</artifactId>\n            <version>[1.7,)</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>log4j-over-slf4j</artifactId>\n            <version>[1.7,)</version>\n        </dependency>\n    </dependencies>\n\n\n\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5b9f\u88c5\n\nClient.java\n\n    /* slf4j */\n    private static final Logger LOG = LoggerFactory.getLogger(Client.class);\n\n    /**\n     * kinesis \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\n     *\n     * @param args\n     * @throws Exception\n     */\n    public static void main(String[] args) throws Exception {\n\n        // \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u540d\n        final String streamName = \"samplestream\";\n\n        // kinesis \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u521d\u671f\u5316\n        // ClasspathPropertiesFileCredentialsProvider()\n        AWSCredentialsProvider credentialsProvider = null;\n        try {\n            credentialsProvider = new InstanceProfileCredentialsProvider();\n            credentialsProvider.getCredentials();\n        } catch (AmazonClientException e) {\n            credentialsProvider = new ClasspathPropertiesFileCredentialsProvider();\n            credentialsProvider.getCredentials();\n        }\n        final AmazonKinesis kinesis = new AmazonKinesisClient(\n                credentialsProvider);\n\n        // \u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57\u5217\u3092\u751f\u6210\u3057\u3066PutRecordRequest\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306bput\n        while (true) {\n            final String key = RandomStringUtils.randomAlphanumeric(10);\n            final String data = \"KEY_\"\n                    + Calendar.getInstance().getTime().getTime() + \":\" + key;\n\n            final PutRecordRequest request = new PutRecordRequest();\n            request.setStreamName(streamName);\n            request.setData(ByteBuffer.wrap(data.getBytes(\"UTF-8\")));\n            request.setPartitionKey(key);\n            final PutRecordResult putRecord = kinesis.putRecord(request);\n\n            LOG.info(\"key:{} ,record:{}\", key, data, putRecord);\n            LOG.info(\"--------\");\n\n        }\n    }\n\n\n\n\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5b9f\u88c5\n\nSampleRecordProcessorFactory.java\n    private static final Logger LOG = LoggerFactory.getLogger(SampleRecordProcessorFactory.class);\n\n    public SampleRecordProcessorFactory() {\n        super();\n    }\n\n    @Override\n    public IRecordProcessor createProcessor() {\n        return new SampleRecordProcessor();\n    }\n\n\n\nSampleRecordProcessor.java\n\n    private static final Logger LOG = LoggerFactory.getLogger(SampleRecordProcessor.class);\n\n    private final CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder();\n    private static final long CHECKPOINT_INTERVAL_MILLIS = 60000L;\n    private long nextCheckpointTimeInMillis;\n    private String sId = null;\n\n    /**\n     *\n     */\n    public SampleRecordProcessor() {\n        // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n    }\n\n    /*\n     * (\u975e Javadoc)\n     *\n     * @see\n     * com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessor\n     * #initialize(java.lang.String)\n     */\n    @Override\n    public void initialize(String shardId) {\n        // \u521d\u671f\u5316\n        sId = shardId;\n    }\n\n    /*\n     * (\u975e Javadoc)\n     *\n     * @see\n     * com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessor\n     * #processRecords(java.util.List,\n     * com.amazonaws.services.kinesis.clientlibrary\n     * .interfaces.IRecordProcessorCheckpointer)\n     */\n    @Override\n    public void processRecords(List<Record> records,\n            IRecordProcessorCheckpointer checkpointer) {\n\n        // Stream\u3092\u4f5c\u308a\u76f4\u3059\u3068\u524d\u56de\u306eAppName\u304c\u4f7f\u7528\u3067\u304d\u306a\u304f\u306a\u308b\n\n        if (records.isEmpty()) {\n            return;\n        }\n        try {\n            for (Record record : records) {\n\n                // records\u51e6\u7406\n                String data = null;\n                try {\n                    data = decoder.decode(record.getData()).toString() + \"\\n\";\n                } catch (CharacterCodingException e) {\n                    e.printStackTrace();\n                }\n                LOG.info(\"ShardId : {} ,Data : {}\", sId, data);\n\n            }\n            checkpointer.checkpoint();\n        } catch (KinesisClientLibDependencyException | InvalidStateException\n                | ThrottlingException | ShutdownException e) {\n        }\n        if (System.currentTimeMillis() > nextCheckpointTimeInMillis) {\n            try {\n                checkpointer.checkpoint();\n            } catch (KinesisClientLibDependencyException\n                    | InvalidStateException | ThrottlingException\n                    | ShutdownException e) {\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000// \u4f55\u304b\u51e6\u7406\n            }\n            nextCheckpointTimeInMillis = System.currentTimeMillis()\n                    + CHECKPOINT_INTERVAL_MILLIS;\n        }\n    }\n\n    /*\n     * (\u975e Javadoc)\n     *\n     * @see\n     * com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessor\n     * #shutdown(com.amazonaws.services.kinesis.clientlibrary.interfaces.\n     * IRecordProcessorCheckpointer,\n     * com.amazonaws.services.kinesis.clientlibrary.types.ShutdownReason)\n     */\n    @Override\n    public void shutdown(IRecordProcessorCheckpointer checkpointer,\n            ShutdownReason reason) {\n        if (reason == ShutdownReason.TERMINATE) {\n            try {\n                checkpointer.checkpoint();\n            } catch (KinesisClientLibDependencyException\n                    | InvalidStateException | ThrottlingException\n                    | ShutdownException e) {\n                // \u4f55\u304b\u51e6\u7406\n            }\n        }\n    }\n\n\n\nApps.java\n\n    private static final Logger LOG = LoggerFactory.getLogger(Apps.class);\n\n    private static KinesisClientLibConfiguration kinesisClientLibConfiguration;\n\n    private static String streamName = \"pipeline\";\n    private static String applicationName = \"kinesis-apps\";\n    private static int maxShardCount = 1;\n    private static int taskIndex = 0;\n\n    /**\n     * @param args\n     */\n    public static void main(String[] args) {\n        String workerId = null;\n        try {\n            workerId = InetAddress.getLocalHost().getCanonicalHostName() + \":\"\n                    + UUID.randomUUID();\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n        }\n\n        AWSCredentialsProvider credentialsProvider = null;\n        try {\n            credentialsProvider = new InstanceProfileCredentialsProvider();\n            credentialsProvider.getCredentials();\n        } catch (AmazonClientException e) {\n            credentialsProvider = new ClasspathPropertiesFileCredentialsProvider();\n            credentialsProvider.getCredentials();\n        }\n\n        LOG.info(\"Using credentials with access key id: \"\n                + credentialsProvider.getCredentials().getAWSAccessKeyId());\n        kinesisClientLibConfiguration = new KinesisClientLibConfiguration(\n                applicationName, streamName, credentialsProvider, workerId);\n        SampleRecordProcessorFactory recordProcessorFactory = new SampleRecordProcessorFactory();\n        Worker worker = new Worker(recordProcessorFactory,\n                kinesisClientLibConfiguration);\n        int exitCode = 0;\n        try {\n            worker.run();\n        } catch (Throwable t) {\n            exitCode = 1;\n        }\n        System.exit(exitCode);\n\n    }\n\n\n\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\n\u30af\u30e9\u30b9\u30d1\u30b9\u4e0a\u306bAWSCredentials.properties\u304c\u3042\u308b\u5834\u5408\u3001new ClasspathPropertiesFileCredentialsProvider()#getCredentials\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002\n\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u304b\u3089\u5b9f\u884c\u3059\u308b\u5834\u5408\u3000\u53c8\u306f\u3001EC2\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4e0a\u3060\u304c\u3001IAM \u30ed\u30fc\u30eb\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3044\u5834\u5408 \u306b\u306f\u5fc5\u8981\u3002\nEC2\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u30ed\u30fc\u30eb\u3092\u8a2d\u5b9a\u3059\u3079\u304d\u304b\u3068\u601d\u3046\u3002\nAwsCredentials.properties\nsecretKey={\u767a\u884c\u3057\u305f\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc}\naccessKey={\u767a\u884c\u3057\u305f\u30a2\u30af\u30bb\u30b9\u30ad\u30fc}\n\n\n\u5b9f\u884c\u7d50\u679c\nclient\u5074\u30ed\u30b0\n2014-7-22 18:43:17.043 INFO   jp.co.opst.kinesis.sample.Client - key:Wjls8vv6JE ,record:KEY_1406022196819:Wjls8vv6JE\n2014-7-22 18:43:17.044 INFO   jp.co.opst.kinesis.sample.Client - --------\n2014-7-22 18:43:17.267 INFO   jp.co.opst.kinesis.sample.Client - key:gXThptVxac ,record:KEY_1406022197044:gXThptVxac\n2014-7-22 18:43:17.268 INFO   jp.co.opst.kinesis.sample.Client - --------\n2014-7-22 18:43:17.496 INFO   jp.co.opst.kinesis.sample.Client - key:2u3XvnmZxJ ,record:KEY_1406022197268:2u3XvnmZxJ\n2014-7-22 18:43:17.497 INFO   jp.co.opst.kinesis.sample.Client - --------\n2014-7-22 18:43:17.723 INFO   jp.co.opst.kinesis.sample.Client - key:IQgEmGiFfi ,record:KEY_1406022197497:IQgEmGiFfi\n2014-7-22 18:43:17.723 INFO   jp.co.opst.kinesis.sample.Client - --------\n2014-7-22 18:43:17.944 INFO   jp.co.opst.kinesis.sample.Client - key:2Krh9Wtyi6 ,record:KEY_1406022197724:2Krh9Wtyi6\n2014-7-22 18:43:17.945 INFO   jp.co.opst.kinesis.sample.Client - --------\n2014-7-22 18:43:18.168 INFO   jp.co.opst.kinesis.sample.Client - key:l3GQX1KOV4 ,record:KEY_1406022197945:l3GQX1KOV4\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u30ed\u30b0\n2014-7-22 18:43:19.746 INFO   jp.co.opst.kinesis.sample.SampleRecordProcessor - ShardId : shardId-000000000000 ,Data : KEY_1406022197044:gXThptVxac\n2014-7-22 18:43:20.679 INFO   jp.co.opst.kinesis.sample.SampleRecordProcessor - ShardId : shardId-000000000000 ,Data : KEY_1406022196374:wuTdy5QSnG\n2014-7-22 18:43:21.744 INFO   jp.co.opst.kinesis.sample.SampleRecordProcessor - ShardId : shardId-000000000000 ,Data : KEY_1406022197268:2u3XvnmZxJ\n2014-7-22 18:43:21.745 INFO   jp.co.opst.kinesis.sample.SampleRecordProcessor - ShardId : shardId-000000000000 ,Data : KEY_1406022198169:HypveQeovT\n2014-7-22 18:43:21.745 INFO   jp.co.opst.kinesis.sample.SampleRecordProcessor - ShardId : shardId-000000000000 ,Data : KEY_1406022197945:l3GQX1KOV4\n2014-7-22 18:43:21.745 INFO   jp.co.opst.kinesis.sample.SampleRecordProcessor - ShardId : shardId-000000000000 ,Data : KEY_1406022197497:IQgEmGiFfi\n\n\u7d9a\u304f\u3002\u3002\u3002\n#\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\n\n\u53c2\u8003\n[\u30b9\u30c8\u30ea\u30fc\u30e0\u30c7\u30fc\u30bf\u51e6\u7406\u30b5\u30fc\u30d3\u30b9Amazon Kinesis\u306b\u3064\u3044\u3066\u8abf\u3079\u305f\u7d50\u679c](http://d.hatena.ne.jp/kimutansk/20131225/1387925700)\n\u516c\u5f0f\n[Getting Started](http://docs.aws.amazon.com/kinesis/latest/dev/getting-started.html)\n[Developing Record Consumer Applications with the Amazon Kinesis Client Library](http://docs.aws.amazon.com/kinesis/latest/dev/kinesis-record-processor-app.html)\n\n\n## \u6e96\u5099\n### Amazon Kinesis Client Library\n\nKinesis\u306estream\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8a18\u8ff0\u3059\u308b\u305f\u3081\u306bAmazon Kinesis Client Library\ngithub\u3088\u308a\u30af\u30ed\u30fc\u30f3\n`git clone https://github.com/awslabs/amazon-kinesis-client.git`\n\nmaven\u30b3\u30de\u30f3\u30c9\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n`mvn clean install -Dgpg.skip=true`\n\n### Amazon Kinesis stream\u306e\u4f5c\u6210\nServices > Analytics > Kinesis\u3092\u9078\u629e\u3057\u3001Amazon Kinesis\u306e\u753b\u9762\u3078\u3002\nCreate Stream\u3092\u62bc\u4e0b\u3002\n![kinesis1.JPG](https://qiita-image-store.s3.amazonaws.com/0/36221/769df280-f852-05e4-64e8-044d96f2d4a4.jpeg)\n\nStream Name\u3068Number of Shards\u3092\u8a2d\u5b9a\u3057\u3001Create\u3092\u62bc\u4e0b\u3002\u3053\u3053\u3067\u306f\u3001Shard\u6570\u306f\uff11\u306b\u8a2d\u5b9a\n![kinesis2.JPG](https://qiita-image-store.s3.amazonaws.com/0/36221/a3f9945a-8fe9-3219-cee5-d39f094c364a.jpeg)\n\n\u3057\u3070\u3089\u304f\u3059\u308b\u3068ACTIVE\u306b\u306a\u308c\u3070\u3001\u6e96\u5099\u5b8c\u4e86\u3002\n![kinesis3.JPG](https://qiita-image-store.s3.amazonaws.com/0/36221/5780a827-cb19-4aa5-2a25-bd74bddbfc22.jpeg)\n\n### \u4f9d\u5b58\u95a2\u4fc2\u306e\u8a2d\u5b9a\n\n```pom.xml\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>com.amazonaws</groupId>\n\t\t\t<artifactId>aws-java-sdk</artifactId>\n\t\t\t<version>${aws-java-sdk.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>commons-lang</groupId>\n\t\t\t<artifactId>commons-lang</artifactId>\n\t\t\t<version>2.3</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.amazonaws</groupId>\n\t\t\t<artifactId>amazon-kinesis-client</artifactId>\n\t\t\t<version>1.1.0</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>ch.qos.logback</groupId>\n\t\t\t<artifactId>logback-classic</artifactId>\n\t\t\t<version>[1.0,)</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t<artifactId>slf4j-simple</artifactId>\n\t\t\t<version>[1.7,)</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t<artifactId>jcl-over-slf4j</artifactId>\n\t\t\t<version>[1.7,)</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t<artifactId>log4j-over-slf4j</artifactId>\n\t\t\t<version>[1.7,)</version>\n\t\t</dependency>\n\t</dependencies>\n\n```\n## \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5b9f\u88c5\n\n```Client.java\n\n\t/* slf4j */\n\tprivate static final Logger LOG = LoggerFactory.getLogger(Client.class);\n\n\t/**\n\t * kinesis \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\n\t *\n\t * @param args\n\t * @throws Exception\n\t */\n\tpublic static void main(String[] args) throws Exception {\n\n\t\t// \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u540d\n\t\tfinal String streamName = \"samplestream\";\n\n\t\t// kinesis \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u521d\u671f\u5316\n\t\t// ClasspathPropertiesFileCredentialsProvider()\n\t\tAWSCredentialsProvider credentialsProvider = null;\n\t\ttry {\n\t\t\tcredentialsProvider = new InstanceProfileCredentialsProvider();\n\t\t\tcredentialsProvider.getCredentials();\n\t\t} catch (AmazonClientException e) {\n\t\t\tcredentialsProvider = new ClasspathPropertiesFileCredentialsProvider();\n\t\t\tcredentialsProvider.getCredentials();\n\t\t}\n\t\tfinal AmazonKinesis kinesis = new AmazonKinesisClient(\n\t\t\t\tcredentialsProvider);\n\n\t\t// \u30e9\u30f3\u30c0\u30e0\u306a\u6587\u5b57\u5217\u3092\u751f\u6210\u3057\u3066PutRecordRequest\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306bput\n\t\twhile (true) {\n\t\t\tfinal String key = RandomStringUtils.randomAlphanumeric(10);\n\t\t\tfinal String data = \"KEY_\"\n\t\t\t\t\t+ Calendar.getInstance().getTime().getTime() + \":\" + key;\n\n\t\t\tfinal PutRecordRequest request = new PutRecordRequest();\n\t\t\trequest.setStreamName(streamName);\n\t\t\trequest.setData(ByteBuffer.wrap(data.getBytes(\"UTF-8\")));\n\t\t\trequest.setPartitionKey(key);\n\t\t\tfinal PutRecordResult putRecord = kinesis.putRecord(request);\n\n\t\t\tLOG.info(\"key:{} ,record:{}\", key, data, putRecord);\n\t\t\tLOG.info(\"--------\");\n\n\t\t}\n\t}\n\n\n```\n## \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5b9f\u88c5\n```SampleRecordProcessorFactory.java\n\tprivate static final Logger LOG = LoggerFactory.getLogger(SampleRecordProcessorFactory.class);\n\n\tpublic SampleRecordProcessorFactory() {\n\t\tsuper();\n\t}\n\n\t@Override\n\tpublic IRecordProcessor createProcessor() {\n\t\treturn new SampleRecordProcessor();\n\t}\n```\n\n```SampleRecordProcessor.java\n\n\tprivate static final Logger LOG = LoggerFactory.getLogger(SampleRecordProcessor.class);\n\n\tprivate final CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder();\n\tprivate static final long CHECKPOINT_INTERVAL_MILLIS = 60000L;\n\tprivate long nextCheckpointTimeInMillis;\n\tprivate String sId = null;\n\n\t/**\n\t *\n\t */\n\tpublic SampleRecordProcessor() {\n\t\t// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\t}\n\n\t/*\n\t * (\u975e Javadoc)\n\t *\n\t * @see\n\t * com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessor\n\t * #initialize(java.lang.String)\n\t */\n\t@Override\n\tpublic void initialize(String shardId) {\n\t\t// \u521d\u671f\u5316\n\t\tsId = shardId;\n\t}\n\n\t/*\n\t * (\u975e Javadoc)\n\t *\n\t * @see\n\t * com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessor\n\t * #processRecords(java.util.List,\n\t * com.amazonaws.services.kinesis.clientlibrary\n\t * .interfaces.IRecordProcessorCheckpointer)\n\t */\n\t@Override\n\tpublic void processRecords(List<Record> records,\n\t\t\tIRecordProcessorCheckpointer checkpointer) {\n\n\t\t// Stream\u3092\u4f5c\u308a\u76f4\u3059\u3068\u524d\u56de\u306eAppName\u304c\u4f7f\u7528\u3067\u304d\u306a\u304f\u306a\u308b\n\n\t\tif (records.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tfor (Record record : records) {\n\n\t\t\t\t// records\u51e6\u7406\n\t\t\t\tString data = null;\n\t\t\t\ttry {\n\t\t\t\t\tdata = decoder.decode(record.getData()).toString() + \"\\n\";\n\t\t\t\t} catch (CharacterCodingException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tLOG.info(\"ShardId : {} ,Data : {}\", sId, data);\n\n\t\t\t}\n\t\t\tcheckpointer.checkpoint();\n\t\t} catch (KinesisClientLibDependencyException | InvalidStateException\n\t\t\t\t| ThrottlingException | ShutdownException e) {\n\t\t}\n\t\tif (System.currentTimeMillis() > nextCheckpointTimeInMillis) {\n\t\t\ttry {\n\t\t\t\tcheckpointer.checkpoint();\n\t\t\t} catch (KinesisClientLibDependencyException\n\t\t\t\t\t| InvalidStateException | ThrottlingException\n\t\t\t\t\t| ShutdownException e) {\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000// \u4f55\u304b\u51e6\u7406\n\t\t\t}\n\t\t\tnextCheckpointTimeInMillis = System.currentTimeMillis()\n\t\t\t\t\t+ CHECKPOINT_INTERVAL_MILLIS;\n\t\t}\n\t}\n\n\t/*\n\t * (\u975e Javadoc)\n\t *\n\t * @see\n\t * com.amazonaws.services.kinesis.clientlibrary.interfaces.IRecordProcessor\n\t * #shutdown(com.amazonaws.services.kinesis.clientlibrary.interfaces.\n\t * IRecordProcessorCheckpointer,\n\t * com.amazonaws.services.kinesis.clientlibrary.types.ShutdownReason)\n\t */\n\t@Override\n\tpublic void shutdown(IRecordProcessorCheckpointer checkpointer,\n\t\t\tShutdownReason reason) {\n\t\tif (reason == ShutdownReason.TERMINATE) {\n\t\t\ttry {\n\t\t\t\tcheckpointer.checkpoint();\n\t\t\t} catch (KinesisClientLibDependencyException\n\t\t\t\t\t| InvalidStateException | ThrottlingException\n\t\t\t\t\t| ShutdownException e) {\n\t\t\t\t// \u4f55\u304b\u51e6\u7406\n\t\t\t}\n\t\t}\n\t}\n```\n\n```Apps.java\n\n\tprivate static final Logger LOG = LoggerFactory.getLogger(Apps.class);\n\n\tprivate static KinesisClientLibConfiguration kinesisClientLibConfiguration;\n\n\tprivate static String streamName = \"pipeline\";\n\tprivate static String applicationName = \"kinesis-apps\";\n\tprivate static int maxShardCount = 1;\n\tprivate static int taskIndex = 0;\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tString workerId = null;\n\t\ttry {\n\t\t\tworkerId = InetAddress.getLocalHost().getCanonicalHostName() + \":\"\n\t\t\t\t\t+ UUID.randomUUID();\n\t\t} catch (UnknownHostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tAWSCredentialsProvider credentialsProvider = null;\n\t\ttry {\n\t\t\tcredentialsProvider = new InstanceProfileCredentialsProvider();\n\t\t\tcredentialsProvider.getCredentials();\n\t\t} catch (AmazonClientException e) {\n\t\t\tcredentialsProvider = new ClasspathPropertiesFileCredentialsProvider();\n\t\t\tcredentialsProvider.getCredentials();\n\t\t}\n\n\t\tLOG.info(\"Using credentials with access key id: \"\n\t\t\t\t+ credentialsProvider.getCredentials().getAWSAccessKeyId());\n\t\tkinesisClientLibConfiguration = new KinesisClientLibConfiguration(\n\t\t\t\tapplicationName, streamName, credentialsProvider, workerId);\n\t\tSampleRecordProcessorFactory recordProcessorFactory = new SampleRecordProcessorFactory();\n\t\tWorker worker = new Worker(recordProcessorFactory,\n\t\t\t\tkinesisClientLibConfiguration);\n\t\tint exitCode = 0;\n\t\ttry {\n\t\t\tworker.run();\n\t\t} catch (Throwable t) {\n\t\t\texitCode = 1;\n\t\t}\n\t\tSystem.exit(exitCode);\n\n\t}\n```\n\n## \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\n\u30af\u30e9\u30b9\u30d1\u30b9\u4e0a\u306bAWSCredentials.properties\u304c\u3042\u308b\u5834\u5408\u3001`new ClasspathPropertiesFileCredentialsProvider()#getCredentials`\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002\n**\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u304b\u3089\u5b9f\u884c\u3059\u308b\u5834\u5408**\u3000\u53c8\u306f\u3001**EC2\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4e0a\u3060\u304c\u3001IAM \u30ed\u30fc\u30eb\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3044\u5834\u5408** \u306b\u306f\u5fc5\u8981\u3002\nEC2\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u30ed\u30fc\u30eb\u3092\u8a2d\u5b9a\u3059\u3079\u304d\u304b\u3068\u601d\u3046\u3002\n```AwsCredentials.properties\nsecretKey={\u767a\u884c\u3057\u305f\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc}\naccessKey={\u767a\u884c\u3057\u305f\u30a2\u30af\u30bb\u30b9\u30ad\u30fc}\n```\n\n## \u5b9f\u884c\u7d50\u679c\nclient\u5074\u30ed\u30b0\n\n``` client\u5074\n2014-7-22 18:43:17.043 INFO   jp.co.opst.kinesis.sample.Client - key:Wjls8vv6JE ,record:KEY_1406022196819:Wjls8vv6JE\n2014-7-22 18:43:17.044 INFO   jp.co.opst.kinesis.sample.Client - --------\n2014-7-22 18:43:17.267 INFO   jp.co.opst.kinesis.sample.Client - key:gXThptVxac ,record:KEY_1406022197044:gXThptVxac\n2014-7-22 18:43:17.268 INFO   jp.co.opst.kinesis.sample.Client - --------\n2014-7-22 18:43:17.496 INFO   jp.co.opst.kinesis.sample.Client - key:2u3XvnmZxJ ,record:KEY_1406022197268:2u3XvnmZxJ\n2014-7-22 18:43:17.497 INFO   jp.co.opst.kinesis.sample.Client - --------\n2014-7-22 18:43:17.723 INFO   jp.co.opst.kinesis.sample.Client - key:IQgEmGiFfi ,record:KEY_1406022197497:IQgEmGiFfi\n2014-7-22 18:43:17.723 INFO   jp.co.opst.kinesis.sample.Client - --------\n2014-7-22 18:43:17.944 INFO   jp.co.opst.kinesis.sample.Client - key:2Krh9Wtyi6 ,record:KEY_1406022197724:2Krh9Wtyi6\n2014-7-22 18:43:17.945 INFO   jp.co.opst.kinesis.sample.Client - --------\n2014-7-22 18:43:18.168 INFO   jp.co.opst.kinesis.sample.Client - key:l3GQX1KOV4 ,record:KEY_1406022197945:l3GQX1KOV4\n```\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u30ed\u30b0\n\n``` \n2014-7-22 18:43:19.746 INFO   jp.co.opst.kinesis.sample.SampleRecordProcessor - ShardId : shardId-000000000000 ,Data : KEY_1406022197044:gXThptVxac\n2014-7-22 18:43:20.679 INFO   jp.co.opst.kinesis.sample.SampleRecordProcessor - ShardId : shardId-000000000000 ,Data : KEY_1406022196374:wuTdy5QSnG\n2014-7-22 18:43:21.744 INFO   jp.co.opst.kinesis.sample.SampleRecordProcessor - ShardId : shardId-000000000000 ,Data : KEY_1406022197268:2u3XvnmZxJ\n2014-7-22 18:43:21.745 INFO   jp.co.opst.kinesis.sample.SampleRecordProcessor - ShardId : shardId-000000000000 ,Data : KEY_1406022198169:HypveQeovT\n2014-7-22 18:43:21.745 INFO   jp.co.opst.kinesis.sample.SampleRecordProcessor - ShardId : shardId-000000000000 ,Data : KEY_1406022197945:l3GQX1KOV4\n2014-7-22 18:43:21.745 INFO   jp.co.opst.kinesis.sample.SampleRecordProcessor - ShardId : shardId-000000000000 ,Data : KEY_1406022197497:IQgEmGiFfi\n```\n\n\u7d9a\u304f\u3002\u3002\u3002\n", "tags": ["Amazon", "Kinesis"]}