{"context": " More than 1 year has passed since last update.Elixir \u304b\u3089 Rust \u306e\u95a2\u6570\u3092\u547c\u3076\u3053\u3068\u3067\u3001\u5186\u5468\u7387 \u03c0\u03c0\\pi \u306e\u8fd1\u4f3c\u5024\u3092\u6c42\u3081\u308b\u8a08\u7b97\u3092\u9ad8\u901f\u5316\u3059\u308b\u3002Erlang VM \u306e NIF\uff08Native Implemented Functions\uff09\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067\u5b9f\u73fe\u3059\u308b\u306e\u3067\u3001\u540c\u3058\u65b9\u6cd5\u3067 Erlang \u304b\u3089 Rust \u306e\u95a2\u6570\u3092\u547c\u3076\u3053\u3068\u3082\u3067\u304d\u308b\u3002\nQiita \u3067\u306f\u540c\u3058\u3088\u3046\u306a\u30bf\u30a4\u30c8\u30eb\u306e\u8a18\u4e8b\u304c \u5404\u8a00\u8a9e\u3067\u30b7\u30ea\u30fc\u30ba\u5316(\uff1f) \u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u306b\u4fbf\u4e57\u3055\u305b\u3066\u3082\u3089\u3063\u305f\u3002\u305f\u3060\u305d\u308c\u3089\u3067\u306f\u3001\u91cd\u3044\u51e6\u7406\u3068\u3057\u3066\u518d\u5e30\u578b\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u95a2\u6570\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u3060\u304c\u3001\u305d\u308c\u3060\u3068\u30de\u30eb\u30c1\u30b3\u30a2\u30d7\u30ed\u30bb\u30c3\u30b5\u3067\u4e26\u884c\u8a08\u7b97\uff08parallel \u8a08\u7b97\uff09\u3055\u305b\u308b\u306e\u304c\u96e3\u3057\u3044\u306e\u3067\u3001\u4eca\u56de\u306f\u7c21\u5358\u306b parallel \u5316\u3067\u304d\u308b\u3001\u5186\u5468\u7387\u306e\u8fd1\u4f3c\u8a08\u7b97\u3092\u884c\u3046\u3053\u3068\u306b\u3057\u305f\u3002\n\n\u9032\u3081\u304b\u305f\n\u8a08\u7b97\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3092\u8a08\u308a\u306a\u304c\u3089\u3001\u4ee5\u4e0b\u306e\u6bb5\u53d6\u308a\u3067\u9032\u3081\u3066\u3044\u304f\u3002\n\nElixir\uff1a\u30b7\u30f3\u30b0\u30eb\u30d7\u30ed\u30bb\u30b9\u3067\u8a08\u7b97\nElixir\uff1a\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30b9\u3067\u8a08\u7b97\nElixir\uff1aHiPE \u3067\u30cd\u30a4\u30c6\u30a3\u30d6\u30b3\u30fc\u30c9\u5316\nElixir \u304b\u3089 Rust \u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u547c\u3073\u51fa\u3059\n\n\nElixir \u3068\u306f\uff1f\nQiita - Elixir \u306e\u7279\u5fb4 \u3088\u308a\u3002\n\nElixir \u306f\u30b9\u30b1\u30fc\u30eb\u3057\u3084\u3059\u304f\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3057\u3084\u3059\u3044\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u305f\u3081\u306e\u52d5\u7684\u306a\u95a2\u6570\u578b\u8a00\u8a9e\nErlang VM \u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\nErlang VM \u306f\u4f4e\u30ec\u30a4\u30c6\u30f3\u30b7\u3067\u3001\u5206\u6563\u578b\u304b\u3064\u8010\u969c\u5bb3\u6027\u306e\u3042\u308b\u30b7\u30b9\u30c6\u30e0\u3068\u3057\u3066\u77e5\u3089\u308c\u3066\u304a\u308a\u3001Web \u958b\u767a\u3084\u7d44\u307f\u8fbc\u307f\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u9818\u57df\u3067\u4f7f\u308f\u308c\u3066\u6210\u529f\u3057\u3066\u3044\u308b\n\nElixir \u306e\u6700\u521d\u306e\u5b89\u5b9a\u7248 1.0 \u306f\u30012014\u5e749\u6708\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\u30022016\u5e741\u6708\u73fe\u5728\u306e\u6700\u65b0\u5b89\u5b9a\u7248\u306f 1.2.0\u3002\u300c\u52d5\u7684\u300d\u578b\u4ed8\u3051\u3001\u5f37\u3044\u578b\u4ed8\u3051\u3092\u884c\u3044\u3001\u52d5\u7684\u578b\u4ed8\u3051\u3092\u6d3b\u304b\u3057\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u4e2d\u306b\u4efb\u610f\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30b3\u30fc\u30c9\u3092\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002Erlang VM \u3068 Erlang/OTP \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304b\u3089\u3001\u5805\u7262\u6027\u3068\u30b9\u30b1\u30fc\u30e9\u30d3\u30ea\u30c6\u30a3\u30fc\u3092\u53d7\u3051\u7d99\u3044\u3067\u304a\u308a\u3001\u9ad8\u8ca0\u8377\u306a\u72b6\u6cc1\u3067\u3082\u5b89\u5b9a\u3057\u305f\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3067\u304d\u308b\u3002\n\u3055\u3089\u306b\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u53ef\u80fd\u306a\u8a00\u8a9e\u306b\u3057\u305f\u3053\u3068\u3067\u3001\u30a6\u30a7\u30d6\u30b5\u30fc\u30d3\u30b9\u3092\u4e2d\u5fc3\u3068\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u958b\u767a\u751f\u7523\u6027\u304c\u6975\u3081\u3066\u9ad8\u3044\u306e\u304c\u7279\u5fb4\u3060\u3002\u30a6\u30a7\u30d6\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e Phoenix \u3068\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30af\u30a8\u30ea\u7528 DSL \u8a00\u8a9e\u306e Ecto \u304c\u3001\u30ad\u30e9\u30fc\u30a2\u30d7\u30ea\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\nRust \u3068\u306f\uff1f\nRust \u306f\u5b89\u5168\u6027\u3068\u901f\u5ea6\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u305f\u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5411\u3051\u306e\u8a00\u8a9e\u3067\u3001\u4ee5\u4e0b\u306e\u7279\u5fb4\u3092\u6301\u3064\u3002\n\n\u30bc\u30ed\u30b3\u30b9\u30c8\u62bd\u8c61\u5316\u306b\u3088\u308b\u9ad8\u901f\u6027\u3002\u30e2\u30c0\u30f3\u306a\u8a00\u8a9e\u306b\u898b\u3089\u308c\u308b\u9ad8\u5ea6\u306a\u62bd\u8c61\u5316\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u304c\u3001\u89e3\u6790\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u884c\u306a\u3046\u305f\u3081\u3001\u5b9f\u884c\u6642\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u6975\u3081\u3066\u5c0f\u3055\u3044\u3002C++ \u3067\u66f8\u304b\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u8fd1\u3044\u5b9f\u884c\u52b9\u7387\u306b\u3059\u308b\u3053\u3068\u3092\u76ee\u6a19\u306b\u63b2\u3052\u3066\u3044\u308b\n\u30e1\u30e2\u30ea\u30fc\u3078\u306e\u4e0d\u6b63\u306a\u30a2\u30af\u30bb\u30b9\uff08segfaults\uff09\u3092\u9632\u6b62\u3059\u308b\u305f\u3081\u306e\u30c1\u30a7\u30c3\u30af\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u884c\u3046\n\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3059\u308b\u305f\u3081\u306e\u30c1\u30a7\u30c3\u30af\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u884c\u3046\n\nRust \u306e\u6700\u521d\u306e\u5b89\u5b9a\u7248 1.0 \u306f\u30012015\u5e745\u6708\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\u3070\u304b\u308a\u30022016\u5e741\u6708\u73fe\u5728\u306e\u6700\u65b0\u5b89\u5b9a\u7248\u306f 1.5\u3002GC\uff08\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30bf\uff09\u3092\u6301\u305f\u306a\u3044\u304c\u3001\u6240\u6709\u6a29\u30b7\u30b9\u30c6\u30e0\u3068\u3044\u3046\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30b9\u30bf\u30c3\u30af\u3084\u30d2\u30fc\u30d7\u9818\u57df\u306e\u6240\u6709\u6a29\u3068\u305d\u306e\u501f\u7528\u3001\u305d\u3057\u3066\u5bff\u547d\u3092\u89e3\u6790\u3059\u308b\u3057\u304f\u307f\u306b\u3088\u308a\u3001segfaults \u3092\u672a\u7136\u306b\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u304c\u6700\u5927\u306e\u7279\u5fb4\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\u307e\u305f\u3001SML\u3001OCaml\u3001Haskell \u306a\u3069\u306e\u95a2\u6570\u578b\u8a00\u8a9e\u304b\u3089\u5f37\u3044\u5f71\u97ff\u3092\u53d7\u3051\u3066\u304a\u308a\u3001\u300c\u9759\u7684\u300d\u578b\u4ed8\u3051\u3001\u5f37\u3044\u578b\u4ed8\u3051\u306f\u3082\u3061\u308d\u3093\u3001\u9ad8\u5ea6\u306a\u578b\u63a8\u8ad6\u3092\u884c\u3046\u3002Elixir \u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3084 Haskell \u306e\u578b\u30af\u30e9\u30b9\u306b\u4f3c\u305f\u300c\u30c8\u30ec\u30a4\u30c8\u300d\u306b\u3088\u308a\u3001\u53b3\u683c\u306a\u578b\u30b7\u30b9\u30c6\u30e0\u306e\u4e0b\u3067\u3001\u591a\u76f8\u306a\u95a2\u6570\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u3055\u3089\u306b\u3001Erlang \u306e\u30a2\u30af\u30bf\u30fc\u30e2\u30c7\u30eb\u3084\u3001\u8efd\u91cf\u30d7\u30ed\u30bb\u30b9\u306e\u7570\u5e38\u7d42\u4e86\u691c\u77e5\u30e2\u30c7\u30eb\u3082\u53c2\u8003\u306b\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u3089\u306e\u7279\u5fb4\u304b\u3089\u3001\u30c7\u30fc\u30bf\u306e\u578b\u306e\u5b89\u5168\u6027\u306f\u3082\u3061\u308d\u3093\u3001\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7af6\u5408\u306b\u307e\u3064\u308f\u308b\u5b89\u5168\u6027\u307e\u3067\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u4fdd\u8a3c\u3067\u304d\u308b\u3057\u304f\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u305d\u306e\u4e00\u65b9\u3067\u3001\u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u884c\u3046\u958b\u767a\u8005\u304b\u3089\u656c\u9060\u3055\u308c\u305d\u3046\u306a\u3001\u95a2\u6570\u578b\u8a00\u8a9e\u3063\u307d\u3044\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u306f\u6975\u529b\u6392\u9664\u3055\u308c\u3066\u3044\u308b\u3002\nMozilla \u304c\u30b9\u30dd\u30f3\u30b5\u30fc\u3068\u306a\u3063\u3066\u958b\u767a\u304c\u9032\u3081\u3089\u308c\u3066\u304a\u308a\u3001Mozilla Research \u306e\u7814\u7a76\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u300cServo, Parallel Browser Engine\u300d\u306e\u958b\u767a\u8a00\u8a9e\u306b\u63a1\u7528\u3055\u308c\u3066\u3044\u308b1\u3002\n\n\u4f7f\u7528\u3057\u305f\u74b0\u5883\n\u4eca\u56de\u4f7f\u7528\u3057\u305f\u74b0\u5883\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\nElixir 1.2.0 \uff0b Erlang/OTP 18.2.1\nRust 1.5\nOS\n\n\nFreeBSD 10.2-RELEASE\nArch Linux\n\uff12\u3064\u306e OS \u3067\u540c\u69d8\u306e\u50be\u5411\u304c\u898b\u3089\u308c\u305f\u3002\u672c\u8a18\u4e8b\u306b\u306f FreeBSD \u306e\u7d50\u679c\u3092\u63b2\u8f09\n\n\n\u30de\u30b7\u30f3\n\n\nMac mini\uff08Mid 2012\uff09\n2.60GHz\u52d5\u4f5c\u306e\u30af\u30a2\u30c3\u30c9\u30b3\u30a2 Core i7 3720QM\nHyper Threading \u306b\u3088\u308a\uff18\u3064\u306e\u8ad6\u7406\u30b3\u30a2\u30d7\u30ed\u30bb\u30c3\u30b5\u3068\u3057\u3066\u52d5\u4f5c\u3059\u308b\n16GB RAM\n\u4e0a\u8a18\u306e OS \u306f\u76f4\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3002\uff08Mac OS X \u306e VMware \u3084 xhyve \u3068\u3044\u3063\u305f\u4eee\u60f3\u30de\u30b7\u30f3\u30cf\u30a4\u30d1\u30fc\u30d0\u30a4\u30b6\u30fc\u306f\u4f7f\u3063\u3066\u3044\u306a\u3044\uff09\n\n\n\nErlang/OTP \u306f kerl \u3067\u30d3\u30eb\u30c9\u3057\u3001\u305d\u306e\u969b\u3001\u4ee5\u4e0b\u306e configure \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u305f\u3002\n--enable-dirty-schedulers\n--enable-hipe --enable-native-libs --enable-fp-exceptions\n--enable-smp-support --enable-threads --enable-kernel-poll\n\nElixir \u3068 Rust \u5171\u306b\u3001FreeBSD \u3068 Arch Linux \u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30d0\u30a4\u30ca\u30ea\u30fc\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u5229\u7528\u3057\u305f\u3002\n\u306a\u304a\u3001Rust \u306f x86_68 \u7cfb\u30d7\u30ed\u30bb\u30c3\u30b5\u306e SIMD \u547d\u4ee4\u3092\u7528\u3044\u305f\u6700\u9069\u5316\u304c\u3067\u304d\u308b\u3088\u3046\u3060\u304c\u3001\u4eca\u56de\u751f\u6210\u3055\u308c\u305f\u6a5f\u68b0\u8a9e\u547d\u4ee4\u306b\u306f SIMD \u7cfb\u306e\u547d\u4ee4\u306f\u542b\u307e\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3002SIMD \u306b\u672a\u5bfe\u5fdc\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u3082\u3042\u308b\u306e\u3067\u3001FreeBSD \u3084 Arch Linux \u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30d0\u30a4\u30ca\u30ea\u30fc\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u306f\u3001SIMD \u306e\u30b5\u30dd\u30fc\u30c8\u304c\u7121\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u30602\u3002\n\n\u5186\u5468\u7387\u306e\u6c42\u3081\u304b\u305f\n\u3067\u306f\u3001\u5186\u5468\u7387 \u03c0\u03c0\\pi \u306e\u8fd1\u4f3c\u5024\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u6c42\u3081\u3066\u307f\u3088\u3046\u3002\u03c0\u03c0\\pi \u306e\u5c0f\u6570\u70b9\u4ee5\u4e0b\u6700\u521d\u306e15\u6841\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\\pi = 3.14159\\ 26535\\ 89793\\ \\dotsb\n\u03c0=3.14159\u00a026535\u00a089793\u00a0\u22ef\u03c0=3.14159\u00a026535\u00a089793\u00a0\u22ef{\\pi = 3.14159\\ 26535\\ 89793\\ \\dotsb\n}\n\u6700\u521d\u306b\u65ad\u3063\u3066\u304a\u304f\u3068\u3001\u4eca\u56de\u306f\u7c21\u5358\u306e\u305f\u3081\u306b64\u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\u578b\u306e\u6570\u5024\u3092\u7528\u3044\u308b\u306e\u3067\u3001\u3044\u304f\u3089\u8a08\u7b97\u3092\u7d9a\u3051\u3066\u3082\u5927\u3057\u305f\u7cbe\u5ea6\u306f\u5f97\u3089\u308c\u306a\u3044\u3002\u8a66\u3057\u305f\u7bc4\u56f2\u3067\u306f\u3001\u5c0f\u6570\u70b9\u4ee5\u4e0b\uff18\u6841\u304f\u3089\u3044\u307e\u3067\u304c\u9650\u754c\u306e\u3088\u3046\u3060\u3002\n\u8a08\u7b97\u65b9\u6cd5\u306f\u3001\u6570\u5024\u7a4d\u5206\u6cd5\u306e\u9577\u65b9\u5f62\u8fd1\u4f3c\uff08\u5de6\u70b9\u5247\uff09\u3092\u63a1\u7528\u3059\u308b\u3002\u3053\u3046\u66f8\u304f\u3068\u96e3\u3057\u305d\u3046\u306b\u601d\u3048\u308b\u304c\u3001\u610f\u5916\u306b\u7c21\u5358\u3060\u3002\n\u307e\u305a\u534a\u5f84 r=\uff11r = \uff11 \u306e\u5186\u3092\u8003\u3048\u308b\u3002\u5186\u306e\u9762\u7a4d SS \u3092\u6c42\u3081\u308b\u516c\u5f0f\u306b\u4ee3\u5165\u3059\u308b\u3068\u3001\u3053\u306e\u6761\u4ef6\u3067\u306f S=\u03c0S = \\pi \u306b\u306a\u308b\u3068\u308f\u304b\u308b\u3002\n\\begin{eqnarray}\nS &=& \\pi \\cdot r^2 \\\\\n&=& \\pi \\cdot 1 \\\\\n&=& \\pi\n\\end{eqnarray}\nS=\u03c0\u22c5r2=\u03c0\u22c51=\u03c0{\\begin{eqnarray}\nS &=& \\pi \\cdot r^2 \\\\\n&=& \\pi \\cdot 1 \\\\\n&=& \\pi\n\\end{eqnarray}\n}\n\u3053\u306e\u5186\u3092\u4e2d\u5fc3\u304b\u3089\uff14\u3064\u306b\u5206\u5272\u3057\u3001\u305d\u306e\uff11\u7247\uff08\u56db\u5206\u5186\u3001\u3057\u3076\u3093\u3048\u3093\uff09\u306e\u9762\u7a4d\u3092\u6570\u5024\u7a4d\u5206\u6cd5\u3067\u8fd1\u4f3c\u3059\u308b\u3002\n\n\u6570\u5024\u7a4d\u5206\u6cd5\u306e\u9577\u65b9\u5f62\u8fd1\u4f3c\u306f\u3001\u9762\u7a4d\u3092\u6c42\u3081\u305f\u3044\u7bc4\u56f2\uff08\u56f3\u306e\u56db\u5206\u5186\uff09\u3092 XX \u8ef8\u65b9\u5411\u306b NN \u7b49\u5206\u3057\u3001\u9577\u65b9\u5f62\u3092\u6577\u304d\u8a70\u3081\u3066\u3001\u305d\u308c\u3089\u306e\u9762\u7a4d\u306e\u548c\u3067\u8fd1\u4f3c\u3059\u308b\u65b9\u6cd5\u3002\u5de6\u70b9\u5247\u3067\u306f\u3001\u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u306e\u70b9\u304c\u3001\u5883\u754c\u306b\u63a5\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u3002\u56f3\u3067\u308f\u304b\u308b\u3088\u3046\u306b\u3001\u306f\u307f\u51fa\u3057\u305f\u90e8\u5206\u306f\u8aa4\u5dee\u306b\u306a\u308b\u3002\u5206\u5272\u6570\u3092\u5897\u3084\u3059\u307b\u3069\u8aa4\u5dee\u304c\u5c0f\u3055\u304f\u306a\u308b\u304c\u3001\u305d\u306e\u5206\u3001\u8a08\u7b97\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u5177\u4f53\u7684\u306a\u5f0f\u306b\u843d\u3068\u3057\u3066\u3044\u3053\u3046\u3002\u5186\u306e\u4e2d\u5fc3\uff08\u56f3\u306e\u5de6\u4e0b\uff09\u304c XY XY \u5ea7\u6a19\u306e\u539f\u70b9\u3068\u3059\u308b\u3002NN \u500b\u306b\u5206\u5272\u3057\u305f\u56db\u5206\u5186\u306e\u9762\u7a4d\u3092 S0S_0\u3001\u500b\u3005\u306e\u9577\u65b9\u5f62\u306e\u5e45\u3092 ww\u3001\u5de6\u7aef\u306e\u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u306e\u9802\u70b9\u3092 (x0,y0)(x_0, y_0)\u3001 \u53f3\u7aef\u306e\u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u306e\u9802\u70b9\u3092 (xn\u22121,yn\u22121)(x_{n-1}, y_{n-1}) \u3068\u3059\u308b\u3068\u3001\u5186\u5468\u7387 \u03c0\\pi  \u306f\u3001\u4ee5\u4e0b\u306e\u5f0f\u3067\u6c42\u3081\u3089\u308c\u308b\u3002\n\\begin{eqnarray}\n\\pi &=& 4 \\cdot S_0 \\\\\n&=& 4 \\cdot (w \\cdot y_0 + w \\cdot y_1 + \\dotsb + w \\cdot y_{n-1}) \\\\\n&=& 4 \\cdot w \\cdot (y_0 + y_1 + \\dotsb + y_{n-1})\\\\\n\\end{eqnarray}\n\u03c0=4\u22c5S0=4\u22c5(w\u22c5y0+w\u22c5y1+\u22ef+w\u22c5yn\u22121)=4\u22c5w\u22c5(y0+y1+\u22ef+yn\u22121){\\begin{eqnarray}\n\\pi &=& 4 \\cdot S_0 \\\\\n&=& 4 \\cdot (w \\cdot y_0 + w \\cdot y_1 + \\dotsb + w \\cdot y_{n-1}) \\\\\n&=& 4 \\cdot w \\cdot (y_0 + y_1 + \\dotsb + y_{n-1})\\\\\n\\end{eqnarray}\n}\n\u3042\u3068\u306f xx \u304b\u3089 yy \u3092\u5c0e\u304f\u65b9\u6cd5\u304c\u308f\u304b\u308c\u3070\u3044\u3044\u3002XX \u8ef8\u3068 YY \u8ef8\u306f\u76f4\u89d2\u306b\u4ea4\u308f\u308b\u306e\u3067\u3001\uff13\u3064\u306e\u5ea7\u6a19 (0,0),(xi,0),(xi,yi)(0, 0), (x_i, 0), (x_i, y_i) \u3092\u7d50\u3076\u3068\u3001\u5404\u8fba\u306e\u9577\u3055\u304c xi,\u00a0yi,\u00a0rx_i,\\ y_i,\\ r \u306e\u76f4\u89d2\u4e09\u89d2\u5f62\u304c\u3067\u304d\u308b\u3002\u8fba\u306e\u9577\u3055\u306e\u95a2\u4fc2\u306f\u3001\u4e09\u5e73\u65b9\u306e\u5b9a\u7406\u306b\u3088\u308a\u3001x2+y2=r2x^2 + y^2 = r^2 \u3068\u306a\u308b\u3002r=1r = 1 \u3068\u3057\u3001\u5f0f\u3092\u5909\u5f62\u3059\u308c\u3070\u3044\u3044\u3002\n\\begin{eqnarray}\nx^2 + y^2 &=& r^2 \\\\\nx^2 + y^2 &=& 1 \\\\\ny^2 &=& 1 - x^2 \\\\\ny &=& \\sqrt{1 - x ^ 2}\n\\end{eqnarray}\nx2+y2=r2x2+y2=1y2=1\u2212x2y=\u221a1\u2212x2{\\begin{eqnarray}\nx^2 + y^2 &=& r^2 \\\\\nx^2 + y^2 &=& 1 \\\\\ny^2 &=& 1 - x^2 \\\\\ny &=& \\sqrt{1 - x ^ 2}\n\\end{eqnarray}\n}\n\n\u305d\u306e\uff11\u3000Elixir\uff1a\u30b7\u30f3\u30b0\u30eb\u30d7\u30ed\u30bb\u30b9\u3067\u8a08\u7b97\n\u5186\u5468\u7387\u306e\u6c42\u3081\u65b9\u304c\u308f\u304b\u3063\u305f\u3068\u3053\u308d\u3067\u3001\u65e9\u901f\u3001Elixir \u3067\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3057\u3088\u3046\u3002\u4eca\u56de\u4f7f\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u3053\u3053\u306b \u7f6e\u3044\u3066\u3042\u308b\u3002\n\u30d9\u30fc\u30b9\u3068\u306a\u308b Elixir \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b Elixir \u306e Mix \u3067\u4f5c\u6210\u3057\u305f\u3002\nmix new elixir_rust_interop_demo\n\n\u3059\u308b\u3068\u3001\u3053\u3093\u306a\u69cb\u6210\u306b\u306a\u308b\u3002\nelixir_rust_interop_demo\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 config.exs\n\u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 elixir_rust_interop_demo.exs <-- pi.ex \u306b\u30ea\u30cd\u30fc\u30e0\u3057\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u3044\u304f\n\u251c\u2500\u2500 mix.exs\n\u2514\u2500\u2500 test\n\nlib \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u306b Elixir \u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb elixir_rust_interop_demo.ex \u304c\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u3092 pi.ex \u306b\u30ea\u30cd\u30fc\u30e0\u3057\u3001\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304d\u8fbc\u3080\u3002\n\nlib/pi.ex\ndefmodule Pi do\n\n  @spec calc_pi(n :: non_neg_integer) :: {:ok, pi :: float}\n  def calc_pi(n) do\n    w = 1.0 / n\n    s0 = 0.0\n    s1 = Enum.reduce(0..(n - 1), s0, fn(i, s) ->\n      x = i * w\n      s + :math.sqrt(1.0 - x * x)\n    end)\n    {:ok, 4.0 * w * s1}\n  end\n\nend\n\n\n\u65e9\u901f\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002\n% iex -S mix\nErlang/OTP 18 [erts-7.2.1] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:10] [hipe] [kernel-poll:false]\n\nCompiled lib/pi.ex\nGenerated elixir_rust_interop_demo app\nConsolidated List.Chars\n...\n\nInteractive Elixir (1.2.0) - press Ctrl+C to exit (type h() ENTER for help)\niex(1)> l Pi\n{:module, Pi}\niex(2)> :timer.tc(fn() -> Pi.calc_pi(1_000_000) end)\n{112146, {:ok, 3.141594652413976}}\niex(3)> :timer.tc(fn() -> Pi.calc_pi(1_000_000_000) end)\n{113853091, {:ok, 3.1415926555901215}}\n\n100\u4e07\u500b\u306b\u5206\u5272\u3057\u305f\u5834\u5408\u306f\u3001\u8a08\u7b97\u306b 112,146 \u30de\u30a4\u30af\u30ed\u79d2\uff080.11\u79d2\uff09\u8981\u3057\u3001\u5c0f\u6570\u70b9\u4ee5\u4e0b\uff15\u6841\u7a0b\u5ea6\u306e\u7cbe\u5ea6\u304c\u5f97\u3089\u308c\u305f\u300210\u5104\u500b\u306b\u5206\u5272\u3057\u305f\u5834\u5408\u306f\u3001\u8a08\u7b97\u306b\u7d04\uff11\u520654\u79d2\u8981\u3057\u3001\u5c0f\u6570\u70b9\u4ee5\u4e0b\uff18\u6841\u7a0b\u5ea6\u306e\u7cbe\u5ea6\u304c\u5f97\u3089\u308c\u305f\u3002\u306a\u304a\u3001Elixir \u306e float \u578b\u306f\u300164\u30d3\u30c3\u30c8\u306eIEEE 754\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306a\u306e\u3067\u3001\u4e00\u822c\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e double \u578b\u306b\u76f8\u5f53\u3059\u308b\u3002\n\n\u30eb\u30fc\u30d7\u3092\u52b9\u7387\u5316\u3059\u308b\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f10\u5104\u56de\u306e\u30eb\u30fc\u30d7\u3092\u56de\u3059\u305f\u3081\u306b Range 0..(n - 1) \u306b Enum.reduce/3 \u3092\u9069\u7528\u3057\u305f\u304c\u3001Elixir 1.2 \u306e Range \u306e\u5b9f\u88c5\u3092\u898b\u308b\u3068\u3001\u30eb\u30fc\u30d7\u3092\u3072\u305f\u3059\u3089\u56de\u3059\u3088\u3046\u306a\u7528\u9014\u3067\u306f\u52b9\u7387\u304c\u60aa\u305d\u3046\u3060\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u3088\u308a\u52b9\u7387\u304c\u3044\u3044\u81ea\u4f5c\u306e\u9ad8\u968e\u95a2\u6570 for_each/4 \u3067\u7f6e\u304d\u63db\u3048\u3066\u307f\u305f\u3002\n\nlib/pi.ex\n  @spec calc_pi(n :: non_neg_integer) :: {:ok, pi :: float}\n  def calc_pi(n) do\n    w = 1.0 / n\n    s0 = 0.0\n    s1 = for_each(0, n, s0, fn(i, s) ->    # <- \u3053\u3053\u3092\u5909\u66f4\u3057\u305f\n      x = i * w\n      s + :math.sqrt(1.0 - x * x)\n    end)\n    {:ok, 4.0 * w * s1}\n  end\n\n  # \u3053\u306e\u9ad8\u968e\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u305f\n  @spec for_each(index :: integer,\n                 max :: integer,\n                 init_acc :: term,\n                 ((i :: integer, acc0 :: term) -> acc1 :: term))\n                :: final_acc :: term\n  defp for_each(max, max, acc, _fun) do\n    acc\n  end\n  defp for_each(i, max, acc, fun) do\n    for_each(i + 1, max, fun.(i, acc), fun)\n  end\n\n\n\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002\niex(1)> l Pi\n{:module, Pi}\niex(2)> :timer.tc(fn() -> Pi.calc_pi(1_000_000_000) end)\n{77341972, {:ok, 3.1415926555901215}}\n\n10\u5104\u5206\u5272\u6642\u306e\u8a08\u7b97\u6642\u9593\u306f\u7d0477.3\u79d2\u3068\u306a\u308a\u3001\u5148\u307b\u3069\u3068\u6bd4\u3079\u3066 1.5 \u500d\u307b\u3069\u9ad8\u901f\u5316\u3057\u305f\u3002\n\n\u305d\u306e\uff12\u3000Elixir\uff1a\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30b9\u3067\u8a08\u7b97\n\u305b\u3063\u304b\u304f\u30de\u30b7\u30f3\u304c\uff18\u500b\u306e\u8ad6\u7406\u30b3\u30a2\u3092\u642d\u8f09\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5168\u90e8\u4f7f\u3063\u3066\u307f\u3088\u3046\u3002\u8907\u6570\u306e\u8efd\u91cf\u30d7\u30ed\u30bb\u30b9\u3092\u8d77\u52d5\u3057\u3066\u3001\u9762\u7a4d\u3092\u5206\u5272\u3057\u3066\u6c42\u3081\u308c\u3070\u3044\u3044\u3002Elixir \u306a\u3089\u76f4\u611f\u7684\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u304d\u308b\u3002\n\u307e\u305a\u3001calc_pi/1 \u3092\u5143\u306b\u3001\u56db\u5206\u5186\u306e\u4e00\u90e8\u306e\u7bc4\u56f2\u3060\u3051\u306e\u9762\u7a4d\u3092\u6c42\u3081\u308b\u30d7\u30ed\u30b0\u30e9\u30e0 calc_pi_range/3 \u3092\u8ffd\u52a0\u3059\u308b\u3002\u3053\u306e\u95a2\u6570\u306f\u3001\u5bfe\u8c61\u9818\u57df\u3092 n \u7b49\u5206\u3057\u3066\u3001offset \u756a\u76ee\u304b\u3089 count \u500b\u5206\u306e\u77ed\u5f62\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9762\u7a4d\u3092\u7b97\u51fa\u3059\u308b\u3002\n\nlib/pi.ex\n  @spec calc_pi_range(n :: non_neg_integer,\n                      offset :: non_neg_integer,\n                      count :: non_neg_integer) :: pi :: float\n  def calc_pi_range(n, offset, count) do\n    w = 1.0 / n\n    s0 = 0.0\n    s1 = for_each(offset, offset + count, s0, fn(i, s) ->\n      x = i * w\n      s + :math.sqrt(1.0 - x * x)\n    end)\n    4.0 * w * s1\n  end\n\n\n\u6b21\u306b calc_pi_range/3 \u3092\u547c\u3073\u51fa\u3059\u95a2\u6570 calc_pi_parallel/2 \u3092\u8ffd\u52a0\u3059\u308b\u3002\u3053\u306e\u95a2\u6570\u306f\u3001num_procs \u500b\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u7acb\u3061\u4e0a\u3052\u3001calc_pi_range/3 \u3092 parallel \u306b\u5b9f\u884c\u3059\u308b\u3002\n\nlib/pi.ex\n  @max_procs  1024\n  @timeout  60_000   # 1 minute\n\n  @spec calc_pi_parallel(n :: non_neg_integer,\n                         num_procs :: non_neg_integer) :: {:ok, pi :: float}\n                                                           | {:error, term()}\n  # num_process \u306e\u5024\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u7bc4\u56f2\u5916\u306a\u3089\u30a8\u30e9\u30fc\u3092\u8fd4\u3059\u3002\n  def calc_pi_parallel(_n, num_procs) when num_procs <= 0 or num_procs > @max_procs do\n    {:error,\n     'Invalid num_procs #{num_procs}. It must be > 0 and <= #{@max_procs}'}\n  end\n  def calc_pi_parallel(n, num_procs) when rem(n, num_procs) != 0 do\n    {:error, 'n #{n} must be a multiple of num_procs #{num_procs}'}\n  end\n\n  # num_process \u306e\u5024\u304c\u7bc4\u56f2\u5185\u306a\u306e\u3067\u3001calc_pi_range/3 \u3092 parallel \u306b\u5b9f\u884c\u3059\u308b\u3002\n  def calc_pi_parallel(n, num_procs) do\n    len = div(n, num_procs)\n    pi = 0..(num_procs - 1)\n      |> Enum.map(&(Task.async(fn() -> Pi.calc_pi_range(n, len * &1, len) end)))\n      |> Enum.map(&(Task.await(&1, @timeout)))\n      |> Enum.sum\n    {:ok, pi}\n  end\n\n\n\u30d7\u30ed\u30bb\u30b9\u3092\u7acb\u3061\u4e0a\u3052\u3066\u304b\u3089\u3001\u7d50\u679c\u3092\u8fd4\u3059\u307e\u3067\u306e\u30b3\u30fc\u30c9\u3092\u9806\u306b\u898b\u3066\u307f\u3088\u3046\u3002\u307e\u305a Task.async/1 \u3067\u30d7\u30ed\u30bb\u30b9\u3092\u7acb\u3061\u4e0a\u3052\u3001\n    pi = 0..(num_procs - 1)\n      |> Enum.map(&(Task.async(fn() -> Pi.calc_pi_range(n, len * &1, len) end)))\n\nTask.await/2 \u3067\u7d50\u679c\u3092\u96c6\u3081\u3001\n      |> Enum.map(&(Task.await(&1, @timeout)))\n\nEnum.sum/1 \u3067\u5408\u8a08\u3059\u308b\u3002\n      |> Enum.sum\n\n10\u5104\u5206\u5272\u300110\u30d7\u30ed\u30bb\u30b9\u3067\u306e\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\niex(2)> :timer.tc(fn() -> Pi.calc_pi_parallel(1_000_000_000, 10) end)\n{29298379, {:ok, 3.141592655589816}}\n\n\u7d0429.3\u79d2\u3067\u3001\u30b7\u30f3\u30b0\u30eb\u30d7\u30ed\u30bb\u30b9\u6642\u306e\u7d042.6\u500d\u306e\u901f\u5ea6\u3068\u306a\u3063\u305f\u3002\u8ad6\u7406\u30b3\u30a2\u304c\uff18\u500b\u3068\u306f\u3044\u3048\u3001\u5b9f\u30b3\u30a2\u306f\uff14\u500b\u306a\u306e\u3067\u3001\u3053\u306e\u304f\u3089\u3044\u304c\u73fe\u5b9f\u7684\u306a\u306e\u3060\u308d\u3046\u304b\u3002top \u30b3\u30de\u30f3\u30c9\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u305f\u3002\n  PID USERNAME       THR PRI NICE   SIZE    RES STATE   C   TIME    WCPU COMMAND\n 2921 tatsuya         41  20    0   268M 72688K uwait   2   2:14 710.87% beam.smp\n\n\u305d\u306e\u5f8c\u3001\u30d7\u30ed\u30bb\u30b9\u6570\u309220\u300140\u3068\u5897\u3084\u3057\u3066\u307f\u305f\u304c\u3001\u7d50\u679c\u306f\u540c\u3058\u3060\u3063\u305f\u3002\n\n\u305d\u306e\uff13\u3000Elixir\uff1aHiPE \u3067\u30cd\u30a4\u30c6\u30a3\u30d6\u30b3\u30fc\u30c9\u5316\nElixir \u306e\u307e\u307e\u3001\u3082\u3046\u5c11\u3057\u9811\u5f35\u3063\u3066\u307f\u3088\u3046\u3002\u3068\u3044\u3063\u3066\u3082\u9811\u5f35\u308b\u306e\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3067\u3042\u3063\u3066\u3001\u79c1\u305f\u3061\u3067\u306f\u306a\u3044\u3002\u30b3\u30fc\u30c9\u306e\u5909\u66f4\u306f\u4e0d\u8981\u3060\u3002\nHiPE\uff08High Performance Erlang\uff09\u3092\u4f7f\u3063\u3066\u3001beam\u30d5\u30a1\u30a4\u30eb\u5185\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30b3\u30fc\u30c9\u3092\u3001\u4eee\u60f3\u30de\u30b7\u30f3\u306e\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u304b\u3089\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3059\u308b\u3002\u306a\u304a\u3001\u3053\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u305f\u3081\u306b\u306f\u3001Erlang/OTP \u306e\u30d3\u30eb\u30c9\u6642\u306b\u3001--enable-hipe \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4e0e\u3048\u3066\u304a\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\u307e\u305f\u3001--enable-native-libs \u3082\u6307\u5b9a\u3059\u308b\u3068\u3001Erlang/OTP \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306e\u5927\u534a(\uff1f)\u304c HiPE \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u308b\u3002\n\u3067\u306f\u3001iex \u3092\u7acb\u3061\u4e0a\u3052\u305f\u307e\u307e\u3001\u8a72\u5f53\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u307f HiPE \u5316\u3057\u3088\u3046\u3002\u5225\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3002\ncd elixir_rust_interop_demo\nERL_COMPILER_OPTIONS=\"[native, {hipe, [o3]}]\" elixirc -o _build/dev/lib/elixir_rust_interop_demo/ebin/ lib/pi.ex\n\niex \u304b\u3089\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30ea\u30ed\u30fc\u30c9\u3057\u3066\u3001\u518d\u5ea6\u5b9f\u884c\u3059\u308b\u3002\niex(3)> l Pi\n{:module, Pi}\niex(4)> :code.is_module_native(Pi)\ntrue\niex(5)> :timer.tc(fn() -> Pi.calc_pi_parallel(1_000_000_000, 10) end)\n{15226457, {:ok, 3.141592655589816}}\n\n\u5b9f\u884c\u6642\u9593\u306f\u7d0415\u79d2\u3068\u3044\u3046\u3053\u3068\u3067\u3001HiPE \u524d\u3068\u6bd4\u3079\u308b\u3068\u7d041.9\u500d\u306e\u5b9f\u884c\u901f\u5ea6\u306b\u306a\u3063\u305f\u3002\u3053\u306e\u3088\u3046\u306b\u8a08\u7b97\u304c\u91cd\u3044\uff08CPU bound \u306a\uff09\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001HiPE \u306e\u52b9\u679c\u304c\u5927\u304d\u304f\u3067\u308b\u3002\n\n\u305d\u306e\uff14\u3000Elixir \u304b\u3089 Rust \u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u547c\u3073\u51fa\u3059\n\u3067\u306f\u3044\u3088\u3044\u3088 Rust \u3067\u66f8\u3044\u3066\u307f\u308b\u3002\u307e\u305a\u3001Rust \u95a2\u9023\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u683c\u7d0d\u3059\u308b\u5834\u6240\u3092\u4f5c\u308d\u3046\u3002\n\nrust_src \u3068 priv \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u3092\u8ffd\u52a0\u3059\u308b\nElixir \u3084 Erlang \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067 C\u8a00\u8a9e\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u683c\u7d0d\u3059\u308b\u6642\u306f\u3001c_src \u3068\u3044\u3046\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u3092\u4f7f\u3046\u306e\u304c\u4e00\u822c\u7684\u3060\u3002\u305d\u308c\u306b\u306a\u3089\u3063\u3066\u3001rust_src \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u3092\u4f7f\u3046\u3053\u3068\u306b\u3059\u308b\u3002\nRust \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092 Cargo \u3067\u4f5c\u6210\u3059\u308b\u3002elixir_rust_interop_demo \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u5185\u3067\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3002\ncargo new --name pi rust_src\n\n\u3055\u3089\u306b\u3001Rust \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30d3\u30eb\u30c9\u3067\u4f5c\u6210\u3055\u308c\u308b\u6210\u679c\u7269\uff08\u52d5\u7684\u30ed\u30fc\u30c9\u306e\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\uff09\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306b\u3001priv \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u7528\u610f\u3059\u308b\u3002\nmkdir priv\ntouch priv/.gitsave\n\n\u3053\u306e\u5f8c\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u69cb\u6210\u306b\u306a\u308b\u306f\u305a\u3060\u3002\nelixir_rust_interop_demo\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 _build\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 config.exs\n\u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pi.ex         <-- \u3044\u307e\u307e\u3067\u66f8\u3044\u305f Elixir \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 pi_nif.ex     <-- \u3053\u308c\u304b\u3089\u8ffd\u52a0\u3059\u308b Elixir \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\n\u251c\u2500\u2500 mix.exs\n\u251c\u2500\u2500 priv\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 libpi_nif.so  <-- \u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u306e Rust \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u683c\u7d0d\u3055\u308c\u305f\u3001\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\n\u251c\u2500\u2500 rust_src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Cargo.lock\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Cargo.toml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 lib.rs    <-- \u3053\u308c\u304b\u3089\u8ffd\u52a0\u3059\u308b Rust \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 pi.rs     <-- \u3053\u308c\u304b\u3089\u8ffd\u52a0\u3059\u308b Rust \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 target\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 test\n\n\n\u5186\u5468\u7387\u8fd1\u4f3c\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u79fb\u690d\n\u307e\u305a\u306f\u3001Elixir \u306e\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30b9\u7248\u30d7\u30ed\u30b0\u30e9\u30e0\u3092 Rust \u306b\u79fb\u690d\u3059\u308b\u3002rust_src/src/pi.rs \u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u3044\u3066\u3044\u304f\u304c\u3001\u3053\u308c\u306f\u7c21\u5358\u306a\u4f5c\u696d\u3060\u3002\u3068\u3044\u3046\u306e\u306f\u3001Rust \u306f Elixir \u3068\u540c\u69d8\u306b\u30e2\u30c0\u30f3\u306a\u8a00\u8a9e\u3067\u3001\u3057\u304b\u3082\u95a2\u6570\u578b\u8a00\u8a9e\u306e\u5f71\u97ff\u3092\u5f37\u304f\u53d7\u3051\u3066\u3044\u308b\u304b\u3089\u3060\u3002\u307b\u3068\u3093\u3069\u540c\u3058\u611f\u899a\u3067\u66f8\u3051\u308b\u3002\ncalc_pi_range() \u306f Elixir \u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3002\n\nrust_src/src/pi.rs\nfn calc_pi_range(n: u32, offset: u32, count: u32) -> f64 {\n    let w = 1.0 / (n as f64);\n    let mut s = 0.0;\n    for i in offset..(offset + count) {\n        let x = (i as f64) * w;\n        s += (1.0 - x * x).sqrt();\n    }\n    4.0 * w * s\n}\n\n\n\u3082\u3046\u4e00\u65b9\u306e calc_pi_parallel() \u3082\u3001\u304b\u306a\u308a\u4f3c\u3066\u3044\u308b\u3002\n\nrust_src/src/pi.rs\nuse std::thread;\n\nconst MAX_THREADS: u32 = 64;\n\n#[allow(dead_code)]\npub fn calc_pi_parallel(n: u32, num_threads: u32) -> Result<f64, String> {\n    if num_threads <= 0 || num_threads > MAX_THREADS {\n        Err(format!(\"Invalid num_threads {}. It must be > 0 and <= {}\",\n                    num_threads, MAX_THREADS))\n    } else if n % num_threads != 0 {\n        Err(format!(\"n {} must be a multiple of num_threads {}\",\n                    n, num_threads))\n    } else {\n        let len = n / num_threads;\n        let handles: Vec<_> = (0..num_threads).map(|i| {\n            thread::spawn(move || {\n                calc_pi_range(n, len * i, len)\n            })\n        }).collect();\n\n        let results = handles.into_iter().map(|h| { h.join().unwrap() });\n        // std::iter::Iterator \u306e sum() \u306f Rust 1.5 \u3067\u306f unstable \u306b\n        // \u6307\u5b9a\u3055\u308c\u3066\u304a\u308a\u4f7f\u3048\u306a\u3044\u3002\u4ee3\u308f\u308a\u306b fold() \u3092\u4f7f\u3046\u3002\n        let pi: f64 = results.into_iter().fold(0.0, |acc, p| { acc + p });\n        Ok(pi)\n    }\n}\n\n\n\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306e\u5b9f\u884c\u904e\u7a0b\u306b\u3064\u3044\u3066\u3001Eixir \u3068\u5bfe\u6bd4\u3055\u305b\u3066\u307f\u3088\u3046\u3002\n\u307e\u305a\u3001num_threads \u500b\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u7acb\u3061\u4e0a\u3052\u3001calc_pi_range/3 \u3092 parallel \u306b\u5b9f\u884c\u3059\u308b\u90e8\u5206\u3002\u3069\u3061\u3089\u3082\u30b7\u30fc\u30b1\u30f3\u30b9\u578b\u306b map \u3092\u9069\u7528\u3057\u3001Task.async/1 \u307e\u305f\u306f thread::spawn() \u3067\u30b9\u30ec\u30c3\u30c9\u3092\u8d77\u52d5\u3057\u3066\u3044\u308b\u3002\n\nelixir\n    pi = 0..(num_procs - 1)\n      |> Enum.map(&(Task.async(fn() -> Pi.calc_pi_range(n, len * &1, len) end)))\n\n\n\nrust\n        let handles: Vec<_> = (0..num_threads).map(|i| {\n            thread::spawn(move || {\n                calc_pi_range(n, len * i, len)\n            })\n        }).collect();\n\n\n\u306a\u304a\u3001Rust \u3067\u306f\u8efd\u91cf\u30d7\u30ed\u30bb\u30b9\uff08\u30b0\u30ea\u30fc\u30f3\u30fb\u30b9\u30ec\u30c3\u30c9\uff09\u3067\u306f\u306a\u304f\u3001OS\u304c\u63d0\u4f9b\u3059\u308b\u30cd\u30a4\u30c6\u30a3\u30d6\u30fb\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3001Elixir \u306e\u3088\u3046\u306b\u6570\u767e\u4e07\u500b\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u7a3c\u50cd\u3055\u305b\u308b\u3068\u3044\u3063\u305f\u82b8\u5f53\u306f\u3067\u304d\u306a\u3044\u3002\u4eca\u56de\u306f\u91cd\u3044\u8a08\u7b97\u51e6\u7406\u306a\u306e\u3067\u3001\u8ad6\u7406\u30b3\u30a2\u6570\u3092\u5c11\u3057\u8d85\u3048\u308b\u304f\u3089\u3044\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u8d70\u3089\u305b\u308c\u3070\u5341\u5206\u306a\u306e\u3067\u3001\u3053\u308c\u3067\u554f\u984c\u306a\u3044\u3002\n\u3061\u306a\u307f\u306b\u3001Rust \u306e\u7121\u540d\u95a2\u6570\u30d6\u30ed\u30c3\u30af\u306f\u3001Ruby \u306e\u6587\u6cd5\u3092\u53c2\u8003\u306b\u3057\u305f\u305d\u3046\u3060\u3002\n\u7d50\u679c\u3092\u96c6\u3081\u308b\u90e8\u5206\u3002\u3069\u3061\u3089\u3082\u30b9\u30ec\u30c3\u30c9\u306e\u30cf\u30f3\u30c9\u30eb\u306b map \u3092\u9069\u7528\u3002Task.await/2 \u3068 join() \u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3002\n\nelixir\n      |> Enum.map(&(Task.await(&1, @timeout)))\n\n\n\nrust\n        let results = handles.into_iter().map(|h| { h.join().unwrap() });\n\n\n\u5408\u8a08\u3059\u308b\u90e8\u5206\u3002\n\nelixir\n      |> Enum.sum\n\n\n\nrust\n        // std::iter::Iterator \u306e sum() \u306f Rust 1.5 \u3067\u306f unstable \u306b\n        // \u6307\u5b9a\u3055\u308c\u3066\u304a\u308a\u4f7f\u3048\u306a\u3044\u3002\u4ee3\u308f\u308a\u306b fold() \u3092\u4f7f\u3046\u3002\n        let pi: f64 = results.into_iter().fold(0.0, |acc, p| { acc + p });\n\n\nRust 1.5 \u3067\u306f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4ed5\u69d8\u3068\u5b9f\u88c5\u306e\u5b89\u5b9a\u5316\u306e\u771f\u3063\u6700\u4e2d\u3067\u3001\u975e\u5b89\u5b9a\uff08unstable\uff09\u306b\u6307\u5b9a\u3055\u308c\u305f sum() \u306f\u3001\u5b89\u5b9a\u7248\u306e Rust \u3067\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\u3002\u4eca\u56de\u306f Elixir \u306e reduce/3 \u306b\u76f8\u5f53\u3059\u308b fold() \u3092\u4f7f\u3063\u305f\u304c\u3001\u5b89\u5b9a\u5316\u304c\u9032\u3081\u3070\u3001\u3053\u3053\u306f sum() \u3067\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u3002\ncalc_pi_parallel() \u306f\u7d50\u679c\u3092 Result<f64, String> \u578b\u3067\u8fd4\u3059\u3002\u3053\u306e\u578b\u306f\u5931\u6557\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u51e6\u7406\u3092\u6697\u793a\u3057\u3066\u304a\u308a\u3001\u6210\u529f\u6642\u306f Ok<f64> \u304c\u3001\u5931\u6557\u6642\u306f Err(String) \u304c\u8fd4\u308b\u3002Haskell \u3084 Scala \u306e Either \u578b\u3068\u540c\u3058\u30b3\u30f3\u30bb\u30d7\u30c8\u3060\u3002\n\nRust \u306a\u3069\u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u95a2\u6570\u3092 Elixir \u304b\u3089\u547c\u3073\u51fa\u3059\uff13\u3064\u306e\u65b9\u6cd5\nElixir \u3084 Erlang \u30e2\u30b8\u30e5\u30fc\u30eb\u304b\u3089\u3001Rust \u3084 C \u8a00\u8a9e\u306a\u3069\u3067\u66f8\u304b\u308c\u305f\u30cd\u30a4\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u547c\u3073\u51fa\u306b\u306f\u3001\uff13\u3064\u306e\u65b9\u6cd5\u304b\u3042\u308b\u3002\n\n\nPort Driver\uff1a \u6307\u5b9a\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092 Erlang VM \u3068\u306f\u5225\u306e\u30d7\u30ed\u30bb\u30b9\u3068\u3057\u3066\u7acb\u3061\u4e0a\u3052\u3001\u6a19\u6e96\u5165\u529b\u3068\u6a19\u6e96\u51fa\u529b\u3092\u4ecb\u3057\u3066\u60c5\u5831\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u65b9\u6cd5\u3002\u305f\u3068\u3048\u3070\u3001\u30d3\u30eb\u30c9\u30c4\u30fc\u30eb\u306e Mix \u3084 Rebar \u304c\u5916\u90e8\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306b\u306f\u3053\u306e\u65b9\u6cd5\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\n\nPort Linked-In Driver: \u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092 Erlang VM \u306b\u8aad\u307f\u8fbc\u3093\u3067\u5b9f\u884c\u3059\u308b\u65b9\u6cd5\u306e\u3072\u3068\u3064\u3002\u53e4\u304f\u304b\u3089\u3042\u308a\u5341\u5206\u5b89\u5b9a\u3057\u3066\u3044\u308b\u3002OTP\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3084\u30d5\u30a1\u30a4\u30ebIO\u306e\u30c9\u30e9\u30a4\u30d0\u30fc\u304c\u3053\u306e\u65b9\u5f0f\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002API\u304c\u82e5\u5e72\u8907\u96d1\u3060\u304c\u3001\u975e\u540c\u671f\u6027\u304c\u9ad8\u3044\u64cd\u4f5c\u3092\u5b9f\u88c5\u3057\u3084\u3059\u3044\u3002\n\nNIF (Native Implemented Function): \u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092 Erlang VM \u306b\u8aad\u307f\u8fbc\u3093\u3067\u3001\u5b9f\u884c\u3059\u308b\u3082\u3046\u3072\u3068\u3064\u306e\u65b9\u6cd5\u3002API\u304c\u6bd4\u8f03\u7684\u5358\u7d14\u3067\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u95a2\u6570\u3092\u540c\u671f\u5f0f\u306b\u547c\u3073\u51fa\u3059\u6642\u306b\u4fbf\u5229\u3002\n\nPort Driver \u306f\u901a\u4fe1\u3092\u4ecb\u3059\u306e\u3067\u6027\u80fd\u9762\u3067\u306f\u4e0d\u5229\u3060\u304c\u3001\u5916\u90e8\u30b3\u30de\u30f3\u30c9\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u3066\u3082 Erlang VM \u306b\u5f71\u97ff\u304c\u306a\u3044\u306e\u304c\u5229\u70b9\u3060\u3002\n\u4ed6\u306e\uff12\u3064\u306e\u65b9\u6cd5\u306f\u52b9\u7387\u304c\u3044\u3044\u53cd\u9762\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u3068\u3001Erlang VM \u307e\u3067\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u5b9f\u88c5\u306b\u7d30\u5fc3\u306e\u6ce8\u610f\u3092\u6255\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\u307e\u305f\u3069\u3061\u3089\u3082\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u95a2\u6570\u304c\u547c\u3073\u3060\u3055\u308c\u3066\u304b\u3089 1ms \u4ee5\u5185\u306b Erlang VM \u306b\u5236\u5fa1\u3092\u623b\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u3044\u3046\u5236\u7d04\u304c\u3042\u308b\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u5bfe\u5fdc\u6cd5\u304c\u3042\u308b\u306e\u3060\u304c\u3001\u305d\u308c\u306f\u5f8c\u65e5\u3001\u5225\u306e\u8a18\u4e8b\u306b\u307e\u3068\u3081\u3088\u3046\u3068\u601d\u30463\u3002\n\u4eca\u56de\u306f NIF \u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3059\u308b\u30021ms \u4ee5\u5185\u306b\u8fd4\u7b54\u5236\u7d04\u306e\u5bfe\u7b56\u3068\u3057\u3066\u3001Erlang/OTP 17.0 \u304b\u3089\u5b9f\u9a13\u7684\u306b\u5c0e\u5165\u3055\u308c\u305f\u300cdirty scheduler\u300d\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3002\u3053\u306e\u65b9\u6cd5\u3060\u3068\u30011ms \u306e\u5236\u7d04\u3092\u7121\u8996\u3057\u3066\u3082\u3001\u4e00\u5fdc\u3001\u554f\u984c\u306a\u304f\u52d5\u304f\u3082\u306e\u304c\u3067\u304d\u308b\u3002dirty scheduler \u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3001Erlang/OTP \u306e\u30d3\u30eb\u30c9\u6642\u306b --enable-dirty-schedulers \u3092\u6307\u5b9a\u3059\u308b\u3002\n\nElixir \u5074\u3067 NIF \u3092\u547c\u3073\u51fa\u3059\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\n\u307e\u305a\u3001Elixir \u5074\u3067\u3044\u307e\u307e\u3067 Pi \u3068\u3044\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u3044\u305f\u306e\u3060\u304c\u3001NIF \u7528\u306b\u65b0\u3057\u3044\u30e2\u30b8\u30e5\u30fc\u30eb PiNif \u3092\u7528\u610f\u3059\u308b\u3002\u3068\u3044\u3046\u306e\u306f\u3001HiPE \u3068 NIF \u306e\u76f8\u6027\u304c\u60aa\u304f\u3001HiPE \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3001NIF \u306e\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u30ed\u30fc\u30c9\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u304b\u3089\u30604\u3002HiPE \u7528\u3068\u3001NIF \u7528\u306b Elixir \u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\nlib/pi_nif.ex\ndefmodule PiNif do\n\n  @on_load   :init\n\n  @mod       PiNif\n  @lib_name  'pi_nif'  # char list\n\n  @spec calc_pi_parallel(n :: non_neg_integer,\n                         num_threads :: non_neg_integer)\n                        :: {:ok, pi :: float} | {:error, term()} | no_return\n  def calc_pi_parallel(_n, _num_threads) do\n    :erlang.nif_error({:nif_not_loaded, @mod})\n  end\n\n  def init() do\n    priv_dir = case :code.priv_dir(@app) do\n                 dir when is_list(dir) ->\n                   dir\n                 {:error, :bad_name} ->\n                   case :code.which(@mod) do\n                     :bad_name ->\n                       './priv'\n                     :non_existing ->\n                       './priv'\n                     dir when is_list(dir) ->\n                       :filename.join([:filename.dirname(dir), '../priv'])\n                   end\n               end\n    so_name = :filename.join(priv_dir, 'lib' ++ @lib_name)\n    :erlang.load_nif(so_name, 0)\n  end\n\nend\n\n\n\u307e\u305a\u3001@on_load \u3067\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30ed\u30fc\u30c9\u6642\u306b\u5b9f\u884c\u3055\u308c\u308b\u95a2\u6570\u3092\u6307\u5b9a\u3059\u308b\u3002\u3053\u3053\u3067\u306f\u3001\u3054\u304f\u4e00\u822c\u7684\u306a\u540d\u524d init/0 \u3068\u3057\u305f\u3002init/0 \u306f :erlang.load_nif/2 \u3092\u4f7f\u3063\u3066\u3001Rust \u3067\u66f8\u304b\u308c\u305f libpi_nif.so \u3068\u3044\u3046\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u30ed\u30fc\u30c9\u3059\u308b\u3002\ncalc_pi_parallel/2 \u306f\u3001\u3053\u306e\u5f8c Rust \u5074\u3067\u3001\u3053\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u95a2\u6570\u3092\u66f8\u304f\u306e\u3067\u3001\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u304c\u30ed\u30fc\u30c9\u3055\u308c\u308b\u3068\u3001\u3053\u306e\u95a2\u6570\u306e\u5185\u5bb9\u304c\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306e\u305d\u308c\u3067\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\u3002\u3082\u3057\u3046\u307e\u304f\u30ed\u30fc\u30c9\u3067\u304d\u306a\u304b\u3063\u305f\u6642\u306f\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u305f\u3044\u306e\u3067\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306b :erlang.nif_error/1 \u3092\u547c\u3076\u3088\u3046\u306b\u3057\u305f\u3002\n\nNIF \u306e Glue \u95a2\u6570\u3092\u5b9f\u88c5\u3059\u308b\nglue \u95a2\u6570\uff08\u7cca\u4ed8\u3051\u95a2\u6570\uff09\u3068\u3044\u3046\u306e\u306f\u3001\u3044\u307e\u982d\u306b\u6d6e\u304b\u3093\u3060\u8a00\u8449\u306a\u306e\u3067\u3001\u4e00\u822c\u306b\u901a\u7528\u3059\u308b\u8a00\u8449\u304b\u3069\u3046\u304b\u306f\u308f\u304b\u3089\u306a\u3044\u3002\u304c\u3001\u3053\u3053\u3067\u306f\u3001Elixir \u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u66f8\u3044\u305f\u95a2\u6570\u3068\u3001Rust \u306e\u95a2\u6570\u3092\u304f\u3063\u3064\u3051\u308b\u305f\u3081\u306e\u95a2\u6570\u3092\u30a4\u30e1\u30fc\u30b8\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u306f Rust \u3067\u66f8\u304f\u3002NIF \u306e\u5834\u5408\u3067\u3082\u3001Port Linked-In Driver \u306e\u5834\u5408\u3067\u3082\u3001\u305d\u308c\u305e\u308c\u306e\u30eb\u30fc\u30eb\u306b\u6cbf\u3063\u305f glue \u95a2\u6570\u3092\u66f8\u304b\u306a\u3051\u308c\u3070\u52d5\u304b\u306a\u3044\u3002\n\u3053\u3053\u306f\u4e00\u901a\u308a\u66f8\u304d\u65b9\u304c\u308f\u304b\u308b\u307e\u3067\u3001\u9762\u5012\u306a\u90e8\u5206\u3060\u3002NIF \u306e API\uff08C\u8a00\u8a9e\u306e\u95a2\u6570\uff09\u3084\u3001Rust \u3067 C\u8a00\u8a9e\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u6642\u306e\u4f5c\u6cd5\u3092\u3088\u304f\u7406\u89e3\u3057\u3066\u3044\u306a\u3044\u3046\u3061\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u591a\u767a\u3059\u308b\u3002\u9006\u306b\u3001\u3044\u3063\u305f\u3093\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u901a\u3057\u3066\u3057\u307e\u3048\u3070\u3001\u5b9f\u884c\u6642\u306b\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3053\u3068\u306f\u307e\u305a\u306a\u3044\u306e\u304c Rust \u306e\u3044\u3044\u3068\u3053\u308d\u3060\u3002\n\u307e\u305a\u3001Cargo.toml \u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u3092\u8ffd\u52a0\u3059\u308b\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u3001Mix \u306e mix.exs \u306b\u76f8\u5f53\u3059\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3060\u3002\n\nrust_src/Cargo.toml\n[lib]\nname = \"pi_nif\"\ncrate-type = [\"dylib\"]\n\n[dependencies]\nruster_unsafe = { git = \"https://github.com/tatsuya6502/ruster_unsafe/\", rev = \"nif-2.9-unmerged\" }\nlibc = \">=0.2.4\"\n\n\nlib \u30bb\u30af\u30b7\u30e7\u30f3\u306b\u306f\u3001pi_nif \u3068\u3044\u3046\u540d\u524d\u306e\u52d5\u7684\u30ed\u30fc\u30c9\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc(dylib)\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3092\u6307\u5b9a\u3057\u305f\u3002\ndependencies \u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001ruster_unsafe \u3068\u3044\u3046\u30af\u30ec\u30fc\u30c8\uff08Rust \u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u3053\u3068\uff09\u3068\u3001libc \u30af\u30ec\u30fc\u30c8\u3092\u4f7f\u3046\u3053\u3068\u3092\u6307\u5b9a\u3057\u305f\u3002ruster_unsafe \u306f \"rust\"-\"er\"\uff08Rust \uff0b Erlang \u306e\u610f\u5473\uff09\u3068\u3044\u3046\u540d\u524d\u306e\u901a\u308a\u3001Rust \u304b\u3089 Erlang \u306e NIF API \u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3060\u3002\u672c\u5bb6\u306b\u307e\u3060\u53d6\u308a\u8fbc\u307e\u308c\u3066\u3044\u306a\u3044\u4fee\u6b63\u304c\u3042\u308b\u306e\u3067\u3001\u4eca\u306f\u79c1\u306e\u30d5\u30a9\u30fc\u30af\u3092\u6307\u5b9a\u3057\u3066\u304a\u304f\u3002libc \u306f Rust \u306e\u95a2\u6570\u3068 C\u8a00\u8a9e\u306e\u95a2\u6570\u306e\u76f8\u4e92\u547c\u3073\u51fa\u3057\u306b\u5fc5\u8981\u3060\u3002\n\u6b21\u306b\u3001rust_src/src/lib.rs \u30d5\u30a1\u30a4\u30eb\u306b glue \u95a2\u6570\u3092\u66f8\u3044\u3066\u3044\u304f\u3002\u307e\u305a\u59cb\u3081\u306b ruster_unsafe \u304c\u7528\u610f\u3057\u305f NIF \u306e\u521d\u671f\u5316\u30de\u30af\u30ed\u3092\u4f7f\u3046\u3002\n\nrust_src/src/lib.rs\n#[macro_use]\nextern crate ruster_unsafe;\nuse ruster_unsafe::*;\n\nnif_init!(b\"Elixir.PiNif\\0\",\n          Some(load),    // on load    \uff08\u5fc5\u9808\uff09\n          None,          // on reload\n          Some(upgrade), // on upgrade \uff08\u5fc5\u9808\uff09\n          None,          // on unload\n          nif!(b\"calc_pi_parallel\\0\",\n               2,\n               calc_pi_parallel,\n               ERL_NIF_DIRTY_JOB_CPU_BOUND)\n         );\n\n\nb\"Elixir.PiNif\\0\" \u304c\u3001NIF \u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u3002\u3053\u306e\u540d\u524d\u3068\u3001\u547c\u3073\u51fa\u3057\u5074\u306e Elixir \u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u306f\u540c\u3058\u3067\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002Elixir \u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u306f\u3001defmodule \u3067\u6307\u5b9a\u3057\u305f\u540d\u524d\u306e\u524d\u306b Elixir. \u304c\u4ed8\u304f\u306e\u3067\u3001\u3053\u306e\u540d\u524d\u306b\u306a\u3063\u3066\u3044\u308b\u3002C\u8a00\u8a9e\u306e\u6587\u5b57\u5217\u306a\u306e\u3067 null\u6587\u5b57 \\0 \u3092\u6700\u5f8c\u306b\u3064\u3051\u308b\u3002\n\u7b2c\uff12\u5f15\u6570\u304b\u3089\u7b2c\uff15\u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f\u95a2\u6570\u306f\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30ed\u30fc\u30c9\u6642\u306a\u3069\u306b\u547c\u3070\u308c\u308b \u306e\u3067\u3001\u521d\u671f\u5316\u3084\u3001\u5f8c\u7247\u4ed8\u3051\u304c\u5fc5\u8981\u306a\u6642\u306f\u5b9f\u88c5\u3059\u308b \u3002\u4eca\u56de\u306f\u30ed\u30fc\u30c9\u6642\u306b load() \u95a2\u6570\u3092\u547c\u3076\u3088\u3046\u306b\u3057\u3066\u3001\u4ed6\u306f None \u3068\u3059\u308b\u3053\u3068\u3067\u3001\u306a\u306b\u3082\u547c\u3070\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3002\u30002015\u5e741\u670818\u65e5\u4fee\u6b63\uff1a\u3055\u3089\u306b\u3001\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u6642\u306f upgrade() \u95a2\u6570\u3092\u547c\u3076\u3088\u3046\u306b\u3057\u305f\u3002\u4ed6\u306f None \u3068\u3059\u308b\u3053\u3068\u3067\u3001\u306a\u306b\u3082\u547c\u3070\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3002\uff08\u7b2c\uff12\u5f15\u6570 on load \u3068\u7b2c\uff14\u5f15\u6570 on upgrade \u306f Option \u578b\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001\u5fc5\u9808 \u3067\u3057\u305f\uff09\n\u305d\u306e\u6b21\u306e nif!(b\"calc_pi_parallel\\0\" \u304c\u3001Elixir \u306e calc_pi_parallel/2 \u306b\u5bfe\u5fdc\u3059\u308b Rust \u95a2\u6570\u306e\u60c5\u5831\u306b\u306a\u308b\u3002\n\nElixir \u5074\u306e\u95a2\u6570\u540d\u304c \"calc_pi_parallel\\0\"\uff08C\u8a00\u8a9e\u306e\u6587\u5b57\u5217\u3067\u8868\u73fe\uff09\u3067\u3001arity \u304c 2\n\n\u5bfe\u5fdc\u3059\u308b Rust \u95a2\u6570\u304c calc_pi_parallel\n\nCPU bound \u7528\u306e dirty scheduler \u3067\u5b9f\u884c\u3059\u308b\uff08ERL_NIF_DIRTY_JOB_CPU_BOUND\uff09\n\n\u3082\u3057\u3001\u4ed6\u306b\u3082\u95a2\u6570\u304c\u3042\u308b\u306e\u306a\u3089 nif!(...) \u3092\u7d9a\u3051\u3066\u66f8\u3044\u3066\u3044\u3051\u3070\u3044\u3044\u3002\n\u6b21\u306b\u3001load() \u306e\u5b9f\u88c5\u3002calc_pi_parallel() \u304c\u623b\u308a\u5024\u3092\u8fd4\u3059\u6642\u306b\u4f7f\u3046 :ok \u30a2\u30c8\u30e0\u3068 :error \u30a2\u30c8\u30e0\u3092\u521d\u671f\u5316\u3059\u308b\u3002\u306a\u304a\u3001NIF API \u306e\u95a2\u6570\u306f\u3001\u540d\u524d\u304c enif_ \u3067\u59cb\u307e\u308b\u3002\n\nrust_src/src/lib.rs\nextern crate libc;\nuse libc::c_double;\n\nstatic mut ok_atom:    ERL_NIF_TERM = 0 as ERL_NIF_TERM;\nstatic mut error_atom: ERL_NIF_TERM = 0 as ERL_NIF_TERM;\n\n/// static \u306a\u5909\u6570\u306b\u30a2\u30c8\u30e0\u3092\u8a2d\u5b9a\u3059\u308b\u3002\nextern \"C\" fn load(env: *mut ErlNifEnv,\n                   _priv_data: *mut *mut c_void,\n                   _load_info: ERL_NIF_TERM)-> c_int {\n    unsafe {\n        ok_atom    = enif_make_atom(env, b\"ok\\0\"    as *const u8);\n        error_atom = enif_make_atom(env, b\"error\\0\" as *const u8)\n    }\n    0\n}\n\n\nupgrade() \u306f\u4f55\u3082\u305b\u305a\u3001\u5358\u306b\u6210\u529f\u3092\u8868\u3059 0 \u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u305f\u3002\n\nrust_src/src/lib.rs\nextern \"C\" fn upgrade(_env: *mut ErlNifEnv,\n                      _priv_data: *mut *mut c_void,\n                      _old_priv_data: *mut *mut c_void,\n                      _load_info: ERL_NIF_TERM)-> c_int {\n    0\n}\n\n\n\u7d9a\u3044\u3066 calc_pi_parallel() \u306e\u5b9f\u88c5\u3002\u307e\u305a\u3001mod pi; \u3067\u3001pi \u30e2\u30b8\u30e5\u30fc\u30eb\uff08rust_src/src/pi.rs\uff09\u306b\u66f8\u3044\u305f\u5186\u5468\u7387\u8a08\u7b97\u306e public \u95a2\u6570\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3002\nglue \u95a2\u6570\u306b\u306f calc_pi_parallel() \u306e\u3088\u3046\u306b\u3001\uff13\u3064\u306e\u5f15\u6570\u304c\u6e21\u3055\u308c\u308b\u3002env \u304c Erlang \u306e VM \u74b0\u5883\uff08\u30e9\u30f3\u30bf\u30a4\u30e0\uff09\u3092\u8868\u3059\u69cb\u9020\u4f53\u3001argc \u304c\u5f15\u6570\u306e\u6570\u3001args \u304c\u5f15\u6570\u306e\u5165\u3063\u305f\u69cb\u9020\u4f53\u3060\u3002\u623b\u308a\u5024\u306f Erlang \u306e\u30c7\u30fc\u30bf\u3092\u8868\u3059 C\u8a00\u8a9e\u306e\u69cb\u9020\u4f53\u3067\u3001calc_pi_parallel() \u3067\u306f\u3001\u5f15\u6570\u306e\u5024\u306b\u3088\u3063\u3066\u4ee5\u4e0b\u306e\u3069\u308c\u304b\u306b\u306a\u308b\u3002\n\n{:ok, pi\u306e\u8fd1\u4f3c\u5024\uff08float \u578b\uff09}\n{:error, \u30a8\u30e9\u30fc\u306e\u5185\u5bb9\u3092\u793a\u3059\u6587\u5b57\u5217}\nBadArgumentError\n\n\nrust_src/src/lib.rs\n\nuse std::mem::uninitialized;\n\nmod pi;\n\n/// Elixir: @spec calc_pi_parallel(n :: non_neg_integer,\n///                                num_threads :: non_neg_integer)\n///                               :: {:ok, pi :: float} | {:error, term()} | no_return\nextern \"C\" fn calc_pi_parallel(env: *mut ErlNifEnv,\n                               argc: c_int,\n                               args: *const ERL_NIF_TERM) -> ERL_NIF_TERM {\n    let mut n: c_int = unsafe { uninitialized() };\n    let mut num_threads: c_int = unsafe { uninitialized() };\n    if argc != 2\n        || 0 == unsafe { enif_get_int(env, *args, &mut n) }\n        || 0 == unsafe { enif_get_int(env, *args.offset(1), &mut num_threads) }\n        || n <= 0 {\n        return unsafe { enif_make_badarg(env) };\n    }\n\n    match pi::calc_pi_parallel(n as u32, num_threads as u32) {\n        Ok(pi) =>\n            make_ok_result(env, unsafe { &enif_make_double(env, pi as c_double) }),\n        Err(reason) =>\n            make_error_result(env, &reason),\n    }\n}\n\n\n\u6700\u521d\u306e if \u5f0f\u307e\u3067\u3067\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308a\u3001\u5f15\u6570\u306e\u578b\u306a\u3069\u304c\u59a5\u5f53\u304b\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u308b\u3002\nNIF \u306e C API \u3068\u3084\u308a\u3068\u308a\u3092\u3059\u308b\u305f\u3081\u3001unsafe { ... } \u30d6\u30ed\u30c3\u30af\u304c\u4f55\u5ea6\u3082\u4f7f\u308f\u308c\u3066\u3044\u308b\u3002Rust \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u304c\u5b89\u5168\u6027\u3092\u691c\u8a3c\u3067\u304d\u308b\u306e\u306f\u3001Rust \u3067\u66f8\u304b\u308c\u305f\u90e8\u5206\u306e\u307f\u306a\u306e\u3067\u3001\u5916\u90e8\u306e\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u3084\u3001C\u8a00\u8a9e\u306e\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\u304c\u793a\u3059\u756a\u5730\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306a\u3069\u306f\u3001\u5bfe\u8c61\u5916\u3068\u306a\u308b\u3002\u3082\u3057 unsafe \u3067\u56f2\u307e\u306a\u3044\u3068\u3001\u5b89\u5168\u6027\u304c\u78ba\u8a8d\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u3063\u3066\u3057\u307e\u3046\u3002\nunsafe \u3067\u56f2\u3080\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u304c\u3001\u56f2\u3093\u3060\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u306e\u5b89\u5168\u6027\u306b\u3064\u3044\u3066\u306f\u3001\u958b\u767a\u8005\u81ea\u8eab\u304c\u78ba\u8a8d\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\u6700\u5f8c\u306e match \u5f0f\u3067\u306f\u3001pi\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u65b9\u306e calc_pi_parallel() \u3092\u547c\u3073\u51fa\u3057\u3001\u7d50\u679c\u3092\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3067\u53d6\u308a\u51fa\u3057\u3066\u3044\u308b\u3002\u3082\u3057 Ok(pi) \u306a\u3089\u3001make_ok_result() \u3092\u547c\u3093\u3067\u3001{:ok, pi} \u306e\u30bf\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u8fd4\u3059\u3002\u3082\u3057 Err(reason) \u306a\u3089 make_error_result() \u3092\u547c\u3093\u3067\u3001{:error, result} \u306e\u30bf\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u8fd4\u3059\u3002\nmake_ok_result() \u3068 make_error_result() \u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\u96f0\u56f2\u6c17\u306f\u3064\u304b\u3081\u308b\u3060\u308d\u3046\u304b\u3002\n\nrust_src/src/lib.rs\nfn make_ok_result(env: *mut ErlNifEnv, result: *const ERL_NIF_TERM) -> ERL_NIF_TERM {\n    let tuple_elements = unsafe { [ok_atom, *result] };\n    unsafe { enif_make_tuple_from_array(env, tuple_elements.as_ptr(), 2) }\n}\n\nfn make_error_result(env: *mut ErlNifEnv, reason: &str) -> ERL_NIF_TERM {\n    let reason_str = unsafe { enif_make_string_len(env, reason.as_ptr(), reason.len(),\n                                                   ErlNifCharEncoding::ERL_NIF_LATIN1) };\n    let tuple_elements = [unsafe { error_atom }, reason_str];\n    unsafe { enif_make_tuple_from_array(env, tuple_elements.as_ptr(), 2) }\n}\n\n\n\nmix compile \u3067 cargo build --release \u3092\u547c\u3073\u51fa\u3059\n\u3067\u306f\u3001Rust \u306b\u3088\u308b\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u30d3\u30eb\u30c9\u3057\u3088\u3046\u3002rust_src \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u3067\u3001cargo build --release \u3068\u3057\u3066\u3082\u3044\u3044\u304c\u3001\u3053\u3053\u3067\u306f\u3001Mix \u304b\u3089\u3001Rust \u30b3\u30fc\u30c9\u3068 Elixir \u30b3\u30fc\u30c9\u3092\u4e00\u62ec\u3057\u3066\u30d3\u30eb\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\nmix.exs \u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3002\n\nmix.exs\ndefmodule Pi.Mixfile do\n  use Mix.Project\n\n  def project do\n    [app: :elixir_rust_interop_demo,\n     version: \"0.0.1\",\n     elixir: \"~> 1.2\",\n     compilers: [:cargo, :elixir, :app],    # <-- \u3053\u306e\u884c\u3092\u8ffd\u52a0\u3057\u305f\u3002\n     build_embedded: Mix.env == :prod,\n     start_permanent: Mix.env == :prod,\n     deps: deps]\n  end\n\n  def application do\n    [applications: [:logger]]\n  end\n\n  defp deps do\n    []\n  end\nend\n\n\n####################\n# Rust Cargo Tasks #\n####################\n\ndefmodule Mix.Tasks.Compile.Cargo do        # <-- \u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8ffd\u52a0\u3057\u305f\u3002\n  @shortdoc \"Compiles helper in rust_src\"\n\n  def run(_) do\n    case System.cmd(\"cargo\", [\"build\", \"--release\"],\n                    cd: \"rust_src\",\n                    stderr_to_stdout: true) do\n      {result, 0} ->\n        if result != \"\" do\n          Mix.shell.info result\n        end\n        # @TODO: Skip coping the file if it is up-to-date.\n        case System.cmd(\"cp\", [\"-p\", \"rust_src/target/release/libpi_nif.so\", \"priv\"],\n                        stderr_to_stdout: true) do\n          {\"\", 0} ->\n            :ok\n          {result, 0} ->\n            Mix.shell.info result\n            :ok\n          {result, _error_code} ->\n            Mix.shell.error result\n            raise \"copying libpi_nif.so failed\"\n        end\n      {result, _error_code} ->\n        Mix.shell.error result\n        raise \"cargo build --release failed.\"\n    end\n  end\nend\n\ndefmodule Mix.Tasks.Clean.Cargo do          # <-- \u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8ffd\u52a0\u3057\u305f\u3002\n  @shortdoc \"Cleans helper in rust_src\"\n\n  def run(_) do\n    case System.cmd(\"cargo\", [\"clean\"],\n                    cd: \"rust_src\",\n                    stderr_to_stdout: true) do\n      {result, 0} ->\n        Mix.shell.info result\n        :ok\n      {result, _error_code} ->\n        Mix.shell.error result\n        :ok\n    end\n  end\nend\n\n\n\u3053\u308c\u3067\u3001mix compile \u307e\u305f\u306f iex -S mix \u3068\u3057\u305f\u6642\u306b\u3001Rust \u5074\u3082 cargo build --release \u3067\u30d3\u30eb\u30c9\u3055\u308c\u308b\u3002\u3067\u304d\u3042\u304c\u3063\u305f\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc libpi_nif.so \u306f\u3001priv \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u3078\u30b3\u30d4\u30fc\u3055\u308c\u308b\u3002\n\u8a66\u3057\u306b\u30d3\u30eb\u30c9\u3057\u3066\u307f\u3088\u3046\u3002\nmix compile\n   Compiling ruster_unsafe v0.2.0 (https://github.com/tatsuya6502/ruster_unsafe/?rev=nif-2.9-unmerged#250957b5)\n   Compiling libc v0.2.4\n   Compiling pi v0.1.0 (file:///usr/home/tatsuya/workhub/dev/elixir_rust_interop_demo/rust_src)\n\nCompiled lib/pi_nif.ex\nCompiled lib/pi.ex\nGenerated elixir_rust_interop_demo app\nConsolidated List.Chars\n...\n\n\n\u5b9f\u884c\u3059\u308b\n\u5b9f\u306f\u79c1\u306f Rust \u306e\u8d85\u521d\u5fc3\u8005\u306a\u306e\u30675\u3001C\u95a2\u6570\u3068\u306e\u3084\u308a\u53d6\u308a\u306e\u4f5c\u6cd5\u304c\u3088\u304f\u308f\u304b\u3089\u305a\u3001glue \u95a2\u6570\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u901a\u3059\u306e\u306b\u3001\u305a\u3044\u3076\u3093\u82e6\u52b4\u3057\u3066\u3057\u307e\u3063\u305f\u3002\u3044\u3084\u30fc\u3001\u9577\u304b\u3063\u305f\u3002\u3067\u3082\u3001\u3053\u306e\u82e6\u52b4\u306f\u7121\u99c4\u306b\u306a\u3089\u306a\u3044\u3060\u308d\u3046\u3002\n\u3067\u306f\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002iex \u3092\u7acb\u3061\u4e0a\u3052\u308b\u3002\n% iex -S mix\nErlang/OTP 18 [erts-7.2.1] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:10] [hipe] [kernel-poll:false]\n\nInteractive Elixir (1.2.0) - press Ctrl+C to exit (type h() ENTER for help)\n\n\u307e\u305a\u3001dirty scheduler \u304c\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002iex \u306e\u7acb\u3061\u4e0a\u3052\u6642\u306b [ds:8:8:10] \u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u308c\u3070 OK \u3060\u3002\u3053\u308c\u306f\u3001\u5de6\u304b\u3089\u9806\u306b\u3001dirty CPU scheduler \u306e\u6700\u5927\u672c\u6570\u3001\u30aa\u30f3\u30e9\u30a4\u30f3\u4e2d\u306edirty CPU scheduler\u306e\u672c\u6570\u3001dirty IO scheduler \u306e\u672c\u6570\u3092\u8868\u3057\u3066\u3044\u308b\u3002\n\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u3066\u5b9f\u884c\u3057\u3088\u3046\u3002\niex(1)> l PiNif\n{:module, PiNif}\niex(2)> :timer.tc(fn() -> PiNif.calc_pi_parallel(1_000_000_000, 10) end)\n{1262147, {:ok, 3.141592655589816}}\n\n\u304a\u3049\u3001\u901f\u3044\u3063\uff01 \u7d041.3\u79d2\u3067\u7d42\u4e86\u3002Elixir \u3067 HiPE \u3092\u4f7f\u7528\u3057\u305f\u6642\u3068\u6bd4\u3079\u308b\u3068\u3001\u7d0412.1\u500d\u306e\u901f\u5ea6\u3068\u306a\u3063\u305f\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u516815\u6841\u304c Elixir \u306e\u8a08\u7b97\u7d50\u679c\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3061\u3083\u3093\u3068\u8a08\u7b97\u3057\u3066\u3044\u308b\u3088\u3046\u3060 \n\u3061\u306a\u307f\u306b\u3001\u30b3\u30fc\u30c9\u306e\u63b2\u8f09\u306f\u7701\u7565\u3057\u305f\u304c\u3001\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u7248\u3082\u3042\u308b\u3002\niex(3)> :timer.tc(fn() -> PiNif.calc_pi(1_000_000_000) end)\n{4134014, {:ok, 3.1415926555901215}}\n\n\u3053\u308c\u306b\u3088\u308a\u3001\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u7248\u306f\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u7248\u3088\u308a\u3082\u3001\u7d043.28\u500d\u901f\u3044\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\n\nSIMD \u547d\u4ee4\u306b\u3055\u3089\u306b\u671f\u5f85\n\u524d\u306b\u3082\u66f8\u3044\u305f\u3088\u3046\u306b\u3001\u73fe\u72b6\u306f Rust \u306e\u95a2\u6570\u3092 SIMD \u547d\u4ee4\u3078\u306e\u6700\u9069\u5316\u304c\u3055\u308c\u3066\u306a\u3044\u72b6\u614b\u3067\u5b9f\u884c\u3057\u3066\u3044\u308b\u3002\u4eee\u306b\u6700\u9069\u5316\u304c\u3055\u308c\u305f\u306a\u3089\u3001\u3053\u306e\u30de\u30b7\u30f3\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\uff08AVX \u547d\u4ee4\u306b\u5bfe\u5fdc\uff09\u306a\u3089\u3001\uff14\u7d44\u306e64\u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\u304c\u3001\uff11\u5ea6\u306b\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b6\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5834\u5408\u3001sqrt \u8a08\u7b97\u3092\u7e70\u308a\u8fd4\u3059\u306e\u3067\u3001SIMD \u306e\u52b9\u679c\u304c\u5927\u304d\u305d\u3046\u3060\u3002\u5f8c\u65e5\u3001\u6311\u6226\u3057\u3066\u307f\u305f\u3044\u3002\n\n\u6e2c\u5b9a\u7d50\u679c\n\u305d\u306e\u5f8c\u3001FreeBSD \u3067\u518d\u5ea6\u6e2c\u5b9a\u3057\u305f\u3002\u305d\u308c\u305e\u308c\u306e\u95a2\u6570\u3092\uff13\u56de\u305a\u3064\u5b9f\u884c\u3057\u3001\u305d\u306e\u4e2d\u592e\u5024\uff08\uff12\u756a\u76ee\u306b\u901f\u304b\u3063\u305f\u5024\uff09\u3092\u63a1\u7528\u3057\u305f\u3002\n\\pi = 3.14159\\ 26535\\ 89793\\ \\dotsb\n\u03c0=3.14159\u00a026535\u00a089793\u00a0\u22ef{\\pi = 3.14159\\ 26535\\ 89793\\ \\dotsb\n}\n\n\n\n#\n\u8a00\u8a9e\nproc/thr\u6570\n\u30d7\u30ed\u30b0\u30e9\u30e0\n\u8a08\u7b97\u7d50\u679c\n\u6240\u8981\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09\n\u76f8\u5bfe\u901f\u5ea6\n\u76f8\u5bfe\u901f\u5ea6\n\n\n\n\n1\nElixir\n1\nEnum.reduce/3\n3.1415926555901215\n113,853,091\n0.68\n0.13\n\n\n2\n\n1\n(HiPE)\n3.1415926555901215\n111,940,965\n0.70\n0.14\n\n\n3\n\n1\nfor_each/4\n3.1415926555901215\n77,914,595\n1.00\n0.20\n\n\n4\n\n1\n(HiPE)\n3.1415926555901215\n45,786,441\n1.70\n0.33\n\n\n5\n\n10\nparallel\n3.1415926555898160\n29,319,387\n2.66\n0.52\n\n\n6\n\n10\n(HiPE)\n3.1415926555898160\n15,226,457\n5.12\n1.00\n\n\n7\nRust\n1\nNIF\n3.1415926555901215\n4,134,014\n18.85\n3.68\n\n\n8\n\n10\nparallel NIF\n3.1415926555898160\n1,209,160\n64.44\n12.60\n\n\n\n\n\u307e\u3068\u3081\n\nElixir \u306f\u5805\u7262\u3067\u30b9\u30b1\u30fc\u30e9\u30d6\u30eb\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u958b\u767a\u751f\u7523\u6027\u3092\u9ad8\u3081\u308b\u52d5\u7684\u578b\u4ed8\u3051\u8a00\u8a9e\nRust \u306f\u5b89\u5168\u6027\u3068\u30b9\u30d4\u30fc\u30c9\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u305f\u3001\u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5411\u3051\u306e\u9759\u7684\u578b\u4ed8\u3051\u8a00\u8a9e\n\u3069\u3061\u3089\u306e\u8a00\u8a9e\u3082\u30e2\u30c0\u30f3\u306a\u8a00\u8a9e\u306e\u7279\u5fb4\u3092\u53d6\u308a\u8fbc\u3093\u3067\u304a\u308a\u3001\u3088\u304f\u4f3c\u305f\u30b9\u30bf\u30a4\u30eb\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u66f8\u3051\u308b\n\u3069\u3061\u3089\u306e\u8a00\u8a9e\u3082\u30de\u30eb\u30c1\u30b3\u30a2\u30d7\u30ed\u30bb\u30c3\u30b5\u306b\u9069\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7c21\u5358\u306b\u66f8\u3051\u308b\n\uff12\u3064\u306e\u8a00\u8a9e\u306e\u4f7f\u3044\u3069\u3053\u308d\u3092\u898b\u6975\u3081\u3001\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u5e78\u305b\u306b\u306a\u308c\u305d\u3046\n\n\n\n\n\n\nRust\u306eFAQ\u306b\u3088\u308b\u3068\u3001Servo\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u884c\u6570\u306f\u73fe\u6642\u70b9\u3067\uff13\u4e07\u884c\u5f37\u3068\u306e\u3053\u3068\u3002\u3061\u306a\u307f\u306bRust\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u306fRust\u81ea\u8eab\u3067\u66f8\u304b\u308c\u3066\u304a\u308a\u3001\u305d\u306e\u884c\u6570\u306f\u73fe\u6642\u70b9\u3067\uff16\u4e07\u884c\u5f37\u3002\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3068\u3057\u3066LLVM\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u00a0\u21a9\n\n\n\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3001\u300ccompiler target triple\u300d\u3068\u3044\u3046\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u306e\u30d3\u30eb\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5909\u66f4\u3057\u3001Rust\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3068\u30e9\u30a4\u30d6\u30e9\u30ea\u4e00\u5f0f\u3092\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304b\u3089\u30d3\u30eb\u30c9\u3059\u308c\u3070\u3044\u3044\u3088\u3046\u3060\u3002SIMD \u306e\u30b5\u30dd\u30fc\u30c8\u3068\u306f\u7121\u95a2\u4fc2\u3060\u304c\u3001\u30d3\u30eb\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5909\u66f4\u306b\u3064\u3044\u3066\u306f \u3053\u3061\u3089\u306e\u8a18\u4e8b \u3067\u8a73\u3057\u304f\u89e3\u8aac\u3055\u308c\u3066\u3044\u308b\u3002\u5f8c\u65e5\u3001\u6311\u6226\u3057\u3066\u307f\u305f\u3044\u00a0\u21a9\n\n\n\u5225\u8a18\u4e8b\u306f\uff11\u30f6\u6708\u304f\u3089\u3044\u304b\u304b\u308b\u304b\u3082\u3002\u5f85\u3066\u306a\u3044\u4eba\u306f\u3001\u3053\u3061\u3089 \u306e\u30b3\u30fc\u30c9\u3068\u30d7\u30ec\u30bc\u30f3\uff08PDF\uff09\u3092\u8aad\u3080\u306e\u304c\u304a\u3059\u3059\u3081\u3002\u00a0\u21a9\n\n\nHiPE \u306e\u958b\u767a\u7d42\u4e86\u5f8c\u3057\u3070\u3089\u304f\u3057\u3066\u304b\u3089NIF\u304c\u5c0e\u5165\u3055\u308c\u305f\u305f\u3081\u3001HiPE\u306ebeam\u30ed\u30fc\u30c0\u30fc\u304cNIF\u306b\u5bfe\u5fdc\u3057\u3066\u306a\u3044\u306e\u304c\u539f\u56e0\u306e\u3088\u3046\u3060\u3002HiPE\u306e\u958b\u767a\u306b\u643a\u308f\u3063\u305f\u30c1\u30fc\u30e0\u306e\u30e1\u30f3\u30d0\u30fc\u306f\u307f\u306aEricsson\u793e\u3092\u9000\u793e\u3057\u3066\u3044\u308b\u305f\u3081\u3001VM\u30c1\u30fc\u30e0\u306bHiPE\u306b\u8a73\u3057\u3044\u4eba\u304c\u3044\u306a\u3044\u3089\u3057\u3044\u3002\u305f\u3060\u3001HiPE\u306e\u8a2d\u8a08\u8005\u306f\u3001erang-user\u30e1\u30fc\u30ea\u30f3\u30b0\u30ea\u30b9\u30c8\u3067\u3001\u3044\u3064\u3082\u8cea\u554f\u306b\u56de\u7b54\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3060\u3002\u00a0\u21a9\n\n\n\u79c1\u304c Rust \u3092\u77e5\u3063\u305f\u306e\u306f\u3001@voluntas \u3055\u3093\u306e\u3001\u300c\u79c1\u7684\u306a 2015 \u5e74\u6280\u8853\u7684\u306a\u632f\u308a\u8fd4\u308a\u300d\u3067 \u7d39\u4ecb\u3055\u308c\u3066\u3044\u305f\u306e\u304c\u304d\u3063\u304b\u3051\u3060\u3063\u305f\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002Erlang \u3068\u4e00\u7dd2\u306b\u4f7f\u3048\u308b\u3001\u3053\u3093\u306a\u8a00\u8a9e\u304c\u6b32\u3057\u304b\u3063\u305f\u306e\u3067\u3059\u00a0\u21a9\n\n\nRust 1.5.0 \u3067\u306e SIMD \u5bfe\u5fdc\u72b6\u6cc1\u306f\u306f\u3063\u304d\u308a\u308f\u304b\u3089\u306a\u3044\u306e\u3060\u304c\u3001\u4eca\u306e\u3068\u3053\u308d\u81ea\u52d5\u6700\u9069\u5316\u306f SSE \u307e\u3067\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002simd \u30af\u30ec\u30fc\u30c8\u306e\u65b9\u306f\u3001\u30d5\u30a9\u30fc\u30af\u3057\u3066 AVX \u547d\u4ee4\u306b\u5bfe\u5fdc\u3055\u305b\u305f\u4eba\u3082\u3044\u308b\u306e\u3067\u3001\u3053\u3061\u3089\u3082\u8a66\u3057\u3066\u307f\u305f\u3044\u3002\u00a0\u21a9\n\n\n\nElixir \u304b\u3089 Rust \u306e\u95a2\u6570\u3092\u547c\u3076\u3053\u3068\u3067\u3001\u5186\u5468\u7387 $\\pi$ \u306e\u8fd1\u4f3c\u5024\u3092\u6c42\u3081\u308b\u8a08\u7b97\u3092\u9ad8\u901f\u5316\u3059\u308b\u3002Erlang VM \u306e NIF\uff08Native Implemented Functions\uff09\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3067\u5b9f\u73fe\u3059\u308b\u306e\u3067\u3001\u540c\u3058\u65b9\u6cd5\u3067 Erlang \u304b\u3089 Rust \u306e\u95a2\u6570\u3092\u547c\u3076\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\nQiita \u3067\u306f\u540c\u3058\u3088\u3046\u306a\u30bf\u30a4\u30c8\u30eb\u306e\u8a18\u4e8b\u304c [\u5404\u8a00\u8a9e\u3067\u30b7\u30ea\u30fc\u30ba\u5316](http://qiita.com/search?utf8=%E2%9C%93&sort=rel&q=%E3%81%AF%E3%82%84%E3%81%84)(\uff1f) \u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u306b\u4fbf\u4e57\u3055\u305b\u3066\u3082\u3089\u3063\u305f\u3002\u305f\u3060\u305d\u308c\u3089\u3067\u306f\u3001\u91cd\u3044\u51e6\u7406\u3068\u3057\u3066\u518d\u5e30\u578b\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u95a2\u6570\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u3060\u304c\u3001\u305d\u308c\u3060\u3068\u30de\u30eb\u30c1\u30b3\u30a2\u30d7\u30ed\u30bb\u30c3\u30b5\u3067\u4e26\u884c\u8a08\u7b97\uff08parallel \u8a08\u7b97\uff09\u3055\u305b\u308b\u306e\u304c\u96e3\u3057\u3044\u306e\u3067\u3001\u4eca\u56de\u306f\u7c21\u5358\u306b parallel \u5316\u3067\u304d\u308b\u3001\u5186\u5468\u7387\u306e\u8fd1\u4f3c\u8a08\u7b97\u3092\u884c\u3046\u3053\u3068\u306b\u3057\u305f\u3002\n\n\n## \u9032\u3081\u304b\u305f\n\n\u8a08\u7b97\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3092\u8a08\u308a\u306a\u304c\u3089\u3001\u4ee5\u4e0b\u306e\u6bb5\u53d6\u308a\u3067\u9032\u3081\u3066\u3044\u304f\u3002\n\n1. Elixir\uff1a\u30b7\u30f3\u30b0\u30eb\u30d7\u30ed\u30bb\u30b9\u3067\u8a08\u7b97\n2. Elixir\uff1a\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30b9\u3067\u8a08\u7b97\n3. Elixir\uff1aHiPE \u3067\u30cd\u30a4\u30c6\u30a3\u30d6\u30b3\u30fc\u30c9\u5316\n4. Elixir \u304b\u3089 Rust \u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u547c\u3073\u51fa\u3059\n\n\n## Elixir \u3068\u306f\uff1f\n\n[Qiita - Elixir \u306e\u7279\u5fb4](http://qiita.com/niku/items/7c61d6a6af38896ac603) \u3088\u308a\u3002\n\n- Elixir \u306f\u30b9\u30b1\u30fc\u30eb\u3057\u3084\u3059\u304f\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3057\u3084\u3059\u3044\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u305f\u3081\u306e\u52d5\u7684\u306a\u95a2\u6570\u578b\u8a00\u8a9e\n- Erlang VM \u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\n- Erlang VM \u306f\u4f4e\u30ec\u30a4\u30c6\u30f3\u30b7\u3067\u3001\u5206\u6563\u578b\u304b\u3064\u8010\u969c\u5bb3\u6027\u306e\u3042\u308b\u30b7\u30b9\u30c6\u30e0\u3068\u3057\u3066\u77e5\u3089\u308c\u3066\u304a\u308a\u3001Web \u958b\u767a\u3084\u7d44\u307f\u8fbc\u307f\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u9818\u57df\u3067\u4f7f\u308f\u308c\u3066\u6210\u529f\u3057\u3066\u3044\u308b\n\nElixir \u306e\u6700\u521d\u306e\u5b89\u5b9a\u7248 1.0 \u306f\u30012014\u5e749\u6708\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\u30022016\u5e741\u6708\u73fe\u5728\u306e\u6700\u65b0\u5b89\u5b9a\u7248\u306f 1.2.0\u3002\u300c**\u52d5\u7684**\u300d\u578b\u4ed8\u3051\u3001\u5f37\u3044\u578b\u4ed8\u3051\u3092\u884c\u3044\u3001\u52d5\u7684\u578b\u4ed8\u3051\u3092\u6d3b\u304b\u3057\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u4e2d\u306b\u4efb\u610f\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30b3\u30fc\u30c9\u3092\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002Erlang VM \u3068 Erlang/OTP \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304b\u3089\u3001\u5805\u7262\u6027\u3068\u30b9\u30b1\u30fc\u30e9\u30d3\u30ea\u30c6\u30a3\u30fc\u3092\u53d7\u3051\u7d99\u3044\u3067\u304a\u308a\u3001\u9ad8\u8ca0\u8377\u306a\u72b6\u6cc1\u3067\u3082\u5b89\u5b9a\u3057\u305f\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3067\u304d\u308b\u3002\n\n\u3055\u3089\u306b\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u53ef\u80fd\u306a\u8a00\u8a9e\u306b\u3057\u305f\u3053\u3068\u3067\u3001\u30a6\u30a7\u30d6\u30b5\u30fc\u30d3\u30b9\u3092\u4e2d\u5fc3\u3068\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u958b\u767a\u751f\u7523\u6027\u304c\u6975\u3081\u3066\u9ad8\u3044\u306e\u304c\u7279\u5fb4\u3060\u3002\u30a6\u30a7\u30d6\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e Phoenix \u3068\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30af\u30a8\u30ea\u7528 DSL \u8a00\u8a9e\u306e Ecto \u304c\u3001\u30ad\u30e9\u30fc\u30a2\u30d7\u30ea\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\n## Rust \u3068\u306f\uff1f\n\n[Rust](https://www.rust-lang.org/) \u306f\u5b89\u5168\u6027\u3068\u901f\u5ea6\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u305f\u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5411\u3051\u306e\u8a00\u8a9e\u3067\u3001\u4ee5\u4e0b\u306e\u7279\u5fb4\u3092\u6301\u3064\u3002\n\n- \u30bc\u30ed\u30b3\u30b9\u30c8\u62bd\u8c61\u5316\u306b\u3088\u308b\u9ad8\u901f\u6027\u3002\u30e2\u30c0\u30f3\u306a\u8a00\u8a9e\u306b\u898b\u3089\u308c\u308b\u9ad8\u5ea6\u306a\u62bd\u8c61\u5316\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u304c\u3001\u89e3\u6790\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u884c\u306a\u3046\u305f\u3081\u3001\u5b9f\u884c\u6642\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u6975\u3081\u3066\u5c0f\u3055\u3044\u3002C++ \u3067\u66f8\u304b\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u8fd1\u3044\u5b9f\u884c\u52b9\u7387\u306b\u3059\u308b\u3053\u3068\u3092\u76ee\u6a19\u306b\u63b2\u3052\u3066\u3044\u308b\n- \u30e1\u30e2\u30ea\u30fc\u3078\u306e\u4e0d\u6b63\u306a\u30a2\u30af\u30bb\u30b9\uff08segfaults\uff09\u3092\u9632\u6b62\u3059\u308b\u305f\u3081\u306e\u30c1\u30a7\u30c3\u30af\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u884c\u3046\n- \u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3059\u308b\u305f\u3081\u306e\u30c1\u30a7\u30c3\u30af\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u884c\u3046\n\nRust \u306e\u6700\u521d\u306e\u5b89\u5b9a\u7248 1.0 \u306f\u30012015\u5e745\u6708\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f\u3070\u304b\u308a\u30022016\u5e741\u6708\u73fe\u5728\u306e\u6700\u65b0\u5b89\u5b9a\u7248\u306f 1.5\u3002GC\uff08\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30bf\uff09\u3092\u6301\u305f\u306a\u3044\u304c\u3001[\u6240\u6709\u6a29\u30b7\u30b9\u30c6\u30e0](http://qiita.com/kondei/items/9aa83e5ea24d6fe33023)\u3068\u3044\u3046\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30b9\u30bf\u30c3\u30af\u3084\u30d2\u30fc\u30d7\u9818\u57df\u306e\u6240\u6709\u6a29\u3068\u305d\u306e\u501f\u7528\u3001\u305d\u3057\u3066\u5bff\u547d\u3092\u89e3\u6790\u3059\u308b\u3057\u304f\u307f\u306b\u3088\u308a\u3001segfaults \u3092\u672a\u7136\u306b\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u304c\u6700\u5927\u306e\u7279\u5fb4\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u307e\u305f\u3001SML\u3001OCaml\u3001Haskell \u306a\u3069\u306e\u95a2\u6570\u578b\u8a00\u8a9e\u304b\u3089\u5f37\u3044\u5f71\u97ff\u3092\u53d7\u3051\u3066\u304a\u308a\u3001\u300c**\u9759\u7684**\u300d\u578b\u4ed8\u3051\u3001\u5f37\u3044\u578b\u4ed8\u3051\u306f\u3082\u3061\u308d\u3093\u3001\u9ad8\u5ea6\u306a\u578b\u63a8\u8ad6\u3092\u884c\u3046\u3002Elixir \u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3084 Haskell \u306e\u578b\u30af\u30e9\u30b9\u306b\u4f3c\u305f\u300c\u30c8\u30ec\u30a4\u30c8\u300d\u306b\u3088\u308a\u3001\u53b3\u683c\u306a\u578b\u30b7\u30b9\u30c6\u30e0\u306e\u4e0b\u3067\u3001\u591a\u76f8\u306a\u95a2\u6570\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u3055\u3089\u306b\u3001Erlang \u306e\u30a2\u30af\u30bf\u30fc\u30e2\u30c7\u30eb\u3084\u3001\u8efd\u91cf\u30d7\u30ed\u30bb\u30b9\u306e\u7570\u5e38\u7d42\u4e86\u691c\u77e5\u30e2\u30c7\u30eb\u3082\u53c2\u8003\u306b\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u3089\u306e\u7279\u5fb4\u304b\u3089\u3001\u30c7\u30fc\u30bf\u306e\u578b\u306e\u5b89\u5168\u6027\u306f\u3082\u3061\u308d\u3093\u3001\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7af6\u5408\u306b\u307e\u3064\u308f\u308b\u5b89\u5168\u6027\u307e\u3067\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u4fdd\u8a3c\u3067\u304d\u308b\u3057\u304f\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u305d\u306e\u4e00\u65b9\u3067\u3001\u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u884c\u3046\u958b\u767a\u8005\u304b\u3089\u656c\u9060\u3055\u308c\u305d\u3046\u306a\u3001\u95a2\u6570\u578b\u8a00\u8a9e\u3063\u307d\u3044\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u306f\u6975\u529b\u6392\u9664\u3055\u308c\u3066\u3044\u308b\u3002\n\nMozilla \u304c\u30b9\u30dd\u30f3\u30b5\u30fc\u3068\u306a\u3063\u3066\u958b\u767a\u304c\u9032\u3081\u3089\u308c\u3066\u304a\u308a\u3001Mozilla Research \u306e\u7814\u7a76\u958b\u767a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u300c[Servo, Parallel Browser Engine](https://servo.org/)\u300d\u306e\u958b\u767a\u8a00\u8a9e\u306b\u63a1\u7528\u3055\u308c\u3066\u3044\u308b[^1]\u3002\n\n[^1]: Rust\u306e[FAQ](https://doc.rust-lang.org/stable/complement-lang-faq.html#are-there-any-big-programs-written-in-it-yet-i-want-to-read-big-samples)\u306b\u3088\u308b\u3068\u3001Servo\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u884c\u6570\u306f\u73fe\u6642\u70b9\u3067\uff13\u4e07\u884c\u5f37\u3068\u306e\u3053\u3068\u3002\u3061\u306a\u307f\u306bRust\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u306fRust\u81ea\u8eab\u3067\u66f8\u304b\u308c\u3066\u304a\u308a\u3001\u305d\u306e\u884c\u6570\u306f\u73fe\u6642\u70b9\u3067\uff16\u4e07\u884c\u5f37\u3002\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3068\u3057\u3066LLVM\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\n\n\n## \u4f7f\u7528\u3057\u305f\u74b0\u5883\n\n\u4eca\u56de\u4f7f\u7528\u3057\u305f\u74b0\u5883\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n- Elixir 1.2.0 \uff0b Erlang/OTP 18.2.1\n- Rust 1.5\n- OS\n  * FreeBSD 10.2-RELEASE\n  * Arch Linux\n  * \uff12\u3064\u306e OS \u3067\u540c\u69d8\u306e\u50be\u5411\u304c\u898b\u3089\u308c\u305f\u3002\u672c\u8a18\u4e8b\u306b\u306f FreeBSD \u306e\u7d50\u679c\u3092\u63b2\u8f09\n- \u30de\u30b7\u30f3\n  * Mac mini\uff08Mid 2012\uff09\n  * 2.60GHz\u52d5\u4f5c\u306e\u30af\u30a2\u30c3\u30c9\u30b3\u30a2 Core i7 3720QM\n  * Hyper Threading \u306b\u3088\u308a\uff18\u3064\u306e\u8ad6\u7406\u30b3\u30a2\u30d7\u30ed\u30bb\u30c3\u30b5\u3068\u3057\u3066\u52d5\u4f5c\u3059\u308b\n  * 16GB RAM\n  * \u4e0a\u8a18\u306e OS \u306f\u76f4\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3002\uff08Mac OS X \u306e VMware \u3084 xhyve \u3068\u3044\u3063\u305f\u4eee\u60f3\u30de\u30b7\u30f3\u30cf\u30a4\u30d1\u30fc\u30d0\u30a4\u30b6\u30fc\u306f\u4f7f\u3063\u3066\u3044\u306a\u3044\uff09\n\nErlang/OTP \u306f kerl \u3067\u30d3\u30eb\u30c9\u3057\u3001\u305d\u306e\u969b\u3001\u4ee5\u4e0b\u306e configure \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u305f\u3002\n\n```\n--enable-dirty-schedulers\n--enable-hipe --enable-native-libs --enable-fp-exceptions\n--enable-smp-support --enable-threads --enable-kernel-poll\n```\n\nElixir \u3068 Rust \u5171\u306b\u3001FreeBSD \u3068 Arch Linux \u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30d0\u30a4\u30ca\u30ea\u30fc\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u5229\u7528\u3057\u305f\u3002\n\n\u306a\u304a\u3001Rust \u306f x86_68 \u7cfb\u30d7\u30ed\u30bb\u30c3\u30b5\u306e SIMD \u547d\u4ee4\u3092\u7528\u3044\u305f\u6700\u9069\u5316\u304c\u3067\u304d\u308b\u3088\u3046\u3060\u304c\u3001\u4eca\u56de\u751f\u6210\u3055\u308c\u305f\u6a5f\u68b0\u8a9e\u547d\u4ee4\u306b\u306f SIMD \u7cfb\u306e\u547d\u4ee4\u306f\u542b\u307e\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u3002SIMD \u306b\u672a\u5bfe\u5fdc\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\u3082\u3042\u308b\u306e\u3067\u3001FreeBSD \u3084 Arch Linux \u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30d0\u30a4\u30ca\u30ea\u30fc\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u306f\u3001SIMD \u306e\u30b5\u30dd\u30fc\u30c8\u304c\u7121\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3060[^2]\u3002\n\n[^2]: \u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3001\u300ccompiler target triple\u300d\u3068\u3044\u3046\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u306e\u30d3\u30eb\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5909\u66f4\u3057\u3001Rust\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3068\u30e9\u30a4\u30d6\u30e9\u30ea\u4e00\u5f0f\u3092\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304b\u3089\u30d3\u30eb\u30c9\u3059\u308c\u3070\u3044\u3044\u3088\u3046\u3060\u3002SIMD \u306e\u30b5\u30dd\u30fc\u30c8\u3068\u306f\u7121\u95a2\u4fc2\u3060\u304c\u3001\u30d3\u30eb\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5909\u66f4\u306b\u3064\u3044\u3066\u306f [\u3053\u3061\u3089\u306e\u8a18\u4e8b](http://www.randomhacks.net/2015/11/11/bare-metal-rust-custom-target-kernel-space/) \u3067\u8a73\u3057\u304f\u89e3\u8aac\u3055\u308c\u3066\u3044\u308b\u3002\u5f8c\u65e5\u3001\u6311\u6226\u3057\u3066\u307f\u305f\u3044\n\n\n## \u5186\u5468\u7387\u306e\u6c42\u3081\u304b\u305f\n\n\u3067\u306f\u3001\u5186\u5468\u7387 $\\pi$ \u306e\u8fd1\u4f3c\u5024\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u6c42\u3081\u3066\u307f\u3088\u3046\u3002$\\pi$ \u306e\u5c0f\u6570\u70b9\u4ee5\u4e0b\u6700\u521d\u306e15\u6841\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```math\n\\pi = 3.14159\\ 26535\\ 89793\\ \\dotsb\n```\n\n\u6700\u521d\u306b\u65ad\u3063\u3066\u304a\u304f\u3068\u3001\u4eca\u56de\u306f\u7c21\u5358\u306e\u305f\u3081\u306b64\u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\u578b\u306e\u6570\u5024\u3092\u7528\u3044\u308b\u306e\u3067\u3001\u3044\u304f\u3089\u8a08\u7b97\u3092\u7d9a\u3051\u3066\u3082\u5927\u3057\u305f\u7cbe\u5ea6\u306f\u5f97\u3089\u308c\u306a\u3044\u3002\u8a66\u3057\u305f\u7bc4\u56f2\u3067\u306f\u3001\u5c0f\u6570\u70b9\u4ee5\u4e0b\uff18\u6841\u304f\u3089\u3044\u307e\u3067\u304c\u9650\u754c\u306e\u3088\u3046\u3060\u3002\n\n\u8a08\u7b97\u65b9\u6cd5\u306f\u3001\u6570\u5024\u7a4d\u5206\u6cd5\u306e\u9577\u65b9\u5f62\u8fd1\u4f3c\uff08\u5de6\u70b9\u5247\uff09\u3092\u63a1\u7528\u3059\u308b\u3002\u3053\u3046\u66f8\u304f\u3068\u96e3\u3057\u305d\u3046\u306b\u601d\u3048\u308b\u304c\u3001\u610f\u5916\u306b\u7c21\u5358\u3060\u3002\n\n\u307e\u305a\u534a\u5f84 $r = \uff11$ \u306e\u5186\u3092\u8003\u3048\u308b\u3002\u5186\u306e\u9762\u7a4d $S$ \u3092\u6c42\u3081\u308b\u516c\u5f0f\u306b\u4ee3\u5165\u3059\u308b\u3068\u3001\u3053\u306e\u6761\u4ef6\u3067\u306f $S = \\pi$ \u306b\u306a\u308b\u3068\u308f\u304b\u308b\u3002\n\n```math\n\\begin{eqnarray}\nS &=& \\pi \\cdot r^2 \\\\\n&=& \\pi \\cdot 1 \\\\\n&=& \\pi\n\\end{eqnarray}\n```\n\n\u3053\u306e\u5186\u3092\u4e2d\u5fc3\u304b\u3089\uff14\u3064\u306b\u5206\u5272\u3057\u3001\u305d\u306e\uff11\u7247\uff08\u56db\u5206\u5186\u3001\u3057\u3076\u3093\u3048\u3093\uff09\u306e\u9762\u7a4d\u3092\u6570\u5024\u7a4d\u5206\u6cd5\u3067\u8fd1\u4f3c\u3059\u308b\u3002\n\n![circle_area.png](https://qiita-image-store.s3.amazonaws.com/0/9516/9e9bf3ce-9e6b-a419-f893-fc65bd2a9c6b.png \"\u56db\u5206\u5186\u309215\u7b49\u5206\u3057\u305f\u3068\u3053\u308d\")\n\n\u6570\u5024\u7a4d\u5206\u6cd5\u306e\u9577\u65b9\u5f62\u8fd1\u4f3c\u306f\u3001\u9762\u7a4d\u3092\u6c42\u3081\u305f\u3044\u7bc4\u56f2\uff08\u56f3\u306e\u56db\u5206\u5186\uff09\u3092 $X$ \u8ef8\u65b9\u5411\u306b $N$ \u7b49\u5206\u3057\u3001\u9577\u65b9\u5f62\u3092\u6577\u304d\u8a70\u3081\u3066\u3001\u305d\u308c\u3089\u306e\u9762\u7a4d\u306e\u548c\u3067\u8fd1\u4f3c\u3059\u308b\u65b9\u6cd5\u3002\u5de6\u70b9\u5247\u3067\u306f\u3001\u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u306e\u70b9\u304c\u3001\u5883\u754c\u306b\u63a5\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u3002\u56f3\u3067\u308f\u304b\u308b\u3088\u3046\u306b\u3001\u306f\u307f\u51fa\u3057\u305f\u90e8\u5206\u306f\u8aa4\u5dee\u306b\u306a\u308b\u3002\u5206\u5272\u6570\u3092\u5897\u3084\u3059\u307b\u3069\u8aa4\u5dee\u304c\u5c0f\u3055\u304f\u306a\u308b\u304c\u3001\u305d\u306e\u5206\u3001\u8a08\u7b97\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\u5177\u4f53\u7684\u306a\u5f0f\u306b\u843d\u3068\u3057\u3066\u3044\u3053\u3046\u3002\u5186\u306e\u4e2d\u5fc3\uff08\u56f3\u306e\u5de6\u4e0b\uff09\u304c $ XY$ \u5ea7\u6a19\u306e\u539f\u70b9\u3068\u3059\u308b\u3002$N$ \u500b\u306b\u5206\u5272\u3057\u305f\u56db\u5206\u5186\u306e\u9762\u7a4d\u3092 $S_0$\u3001\u500b\u3005\u306e\u9577\u65b9\u5f62\u306e\u5e45\u3092 $w$\u3001\u5de6\u7aef\u306e\u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u306e\u9802\u70b9\u3092 $(x_0, y_0)$\u3001 \u53f3\u7aef\u306e\u9577\u65b9\u5f62\u306e\u5de6\u4e0a\u306e\u9802\u70b9\u3092 $(x_{n-1}, y_{n-1})$ \u3068\u3059\u308b\u3068\u3001\u5186\u5468\u7387 $\\pi $ \u306f\u3001\u4ee5\u4e0b\u306e\u5f0f\u3067\u6c42\u3081\u3089\u308c\u308b\u3002\n\n```math\n\\begin{eqnarray}\n\\pi &=& 4 \\cdot S_0 \\\\\n&=& 4 \\cdot (w \\cdot y_0 + w \\cdot y_1 + \\dotsb + w \\cdot y_{n-1}) \\\\\n&=& 4 \\cdot w \\cdot (y_0 + y_1 + \\dotsb + y_{n-1})\\\\\n\\end{eqnarray}\n```\n\n\u3042\u3068\u306f $x$ \u304b\u3089 $y$ \u3092\u5c0e\u304f\u65b9\u6cd5\u304c\u308f\u304b\u308c\u3070\u3044\u3044\u3002$X$ \u8ef8\u3068 $Y$ \u8ef8\u306f\u76f4\u89d2\u306b\u4ea4\u308f\u308b\u306e\u3067\u3001\uff13\u3064\u306e\u5ea7\u6a19 $(0, 0), (x_i, 0), (x_i, y_i)$ \u3092\u7d50\u3076\u3068\u3001\u5404\u8fba\u306e\u9577\u3055\u304c $x_i,\\ y_i,\\ r$ \u306e\u76f4\u89d2\u4e09\u89d2\u5f62\u304c\u3067\u304d\u308b\u3002\u8fba\u306e\u9577\u3055\u306e\u95a2\u4fc2\u306f\u3001\u4e09\u5e73\u65b9\u306e\u5b9a\u7406\u306b\u3088\u308a\u3001$x^2 + y^2 = r^2$ \u3068\u306a\u308b\u3002$r = 1$ \u3068\u3057\u3001\u5f0f\u3092\u5909\u5f62\u3059\u308c\u3070\u3044\u3044\u3002\n\n```math\n\\begin{eqnarray}\nx^2 + y^2 &=& r^2 \\\\\nx^2 + y^2 &=& 1 \\\\\ny^2 &=& 1 - x^2 \\\\\ny &=& \\sqrt{1 - x ^ 2}\n\\end{eqnarray}\n```\n\n\n## \u305d\u306e\uff11\u3000Elixir\uff1a\u30b7\u30f3\u30b0\u30eb\u30d7\u30ed\u30bb\u30b9\u3067\u8a08\u7b97\n\n\u5186\u5468\u7387\u306e\u6c42\u3081\u65b9\u304c\u308f\u304b\u3063\u305f\u3068\u3053\u308d\u3067\u3001\u65e9\u901f\u3001Elixir \u3067\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3057\u3088\u3046\u3002\u4eca\u56de\u4f7f\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001[\u3053\u3053\u306b](https://github.com/tatsuya6502/elixir_rust_interop_demo) \u7f6e\u3044\u3066\u3042\u308b\u3002\n\n\u30d9\u30fc\u30b9\u3068\u306a\u308b Elixir \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b Elixir \u306e Mix \u3067\u4f5c\u6210\u3057\u305f\u3002\n\n```shell-session\nmix new elixir_rust_interop_demo\n```\n\n\u3059\u308b\u3068\u3001\u3053\u3093\u306a\u69cb\u6210\u306b\u306a\u308b\u3002\n\n```\nelixir_rust_interop_demo\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 config.exs\n\u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 elixir_rust_interop_demo.exs <-- pi.ex \u306b\u30ea\u30cd\u30fc\u30e0\u3057\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u3044\u304f\n\u251c\u2500\u2500 mix.exs\n\u2514\u2500\u2500 test\n```\n\n`lib` \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u306b Elixir \u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb `elixir_rust_interop_demo.ex` \u304c\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u3092 `pi.ex` \u306b\u30ea\u30cd\u30fc\u30e0\u3057\u3001\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304d\u8fbc\u3080\u3002\n\n```Elixir:lib/pi.ex\ndefmodule Pi do\n\n  @spec calc_pi(n :: non_neg_integer) :: {:ok, pi :: float}\n  def calc_pi(n) do\n    w = 1.0 / n\n    s0 = 0.0\n    s1 = Enum.reduce(0..(n - 1), s0, fn(i, s) ->\n      x = i * w\n      s + :math.sqrt(1.0 - x * x)\n    end)\n    {:ok, 4.0 * w * s1}\n  end\n\nend\n```\n\n\u65e9\u901f\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002\n\n```iex\n% iex -S mix\nErlang/OTP 18 [erts-7.2.1] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:10] [hipe] [kernel-poll:false]\n\nCompiled lib/pi.ex\nGenerated elixir_rust_interop_demo app\nConsolidated List.Chars\n...\n\nInteractive Elixir (1.2.0) - press Ctrl+C to exit (type h() ENTER for help)\niex(1)> l Pi\n{:module, Pi}\niex(2)> :timer.tc(fn() -> Pi.calc_pi(1_000_000) end)\n{112146, {:ok, 3.141594652413976}}\niex(3)> :timer.tc(fn() -> Pi.calc_pi(1_000_000_000) end)\n{113853091, {:ok, 3.1415926555901215}}\n```\n\n100\u4e07\u500b\u306b\u5206\u5272\u3057\u305f\u5834\u5408\u306f\u3001\u8a08\u7b97\u306b 112,146 \u30de\u30a4\u30af\u30ed\u79d2\uff080.11\u79d2\uff09\u8981\u3057\u3001\u5c0f\u6570\u70b9\u4ee5\u4e0b\uff15\u6841\u7a0b\u5ea6\u306e\u7cbe\u5ea6\u304c\u5f97\u3089\u308c\u305f\u300210\u5104\u500b\u306b\u5206\u5272\u3057\u305f\u5834\u5408\u306f\u3001\u8a08\u7b97\u306b\u7d04\uff11\u520654\u79d2\u8981\u3057\u3001\u5c0f\u6570\u70b9\u4ee5\u4e0b\uff18\u6841\u7a0b\u5ea6\u306e\u7cbe\u5ea6\u304c\u5f97\u3089\u308c\u305f\u3002\u306a\u304a\u3001Elixir \u306e float \u578b\u306f\u300164\u30d3\u30c3\u30c8\u306eIEEE 754\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306a\u306e\u3067\u3001\u4e00\u822c\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e double \u578b\u306b\u76f8\u5f53\u3059\u308b\u3002\n\n\n### \u30eb\u30fc\u30d7\u3092\u52b9\u7387\u5316\u3059\u308b\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f10\u5104\u56de\u306e\u30eb\u30fc\u30d7\u3092\u56de\u3059\u305f\u3081\u306b Range `0..(n - 1)` \u306b `Enum.reduce/3` \u3092\u9069\u7528\u3057\u305f\u304c\u3001Elixir 1.2 \u306e Range \u306e\u5b9f\u88c5\u3092\u898b\u308b\u3068\u3001\u30eb\u30fc\u30d7\u3092\u3072\u305f\u3059\u3089\u56de\u3059\u3088\u3046\u306a\u7528\u9014\u3067\u306f\u52b9\u7387\u304c\u60aa\u305d\u3046\u3060\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u3088\u308a\u52b9\u7387\u304c\u3044\u3044\u81ea\u4f5c\u306e\u9ad8\u968e\u95a2\u6570 `for_each/4` \u3067\u7f6e\u304d\u63db\u3048\u3066\u307f\u305f\u3002\n\n```elixir:lib/pi.ex\n  @spec calc_pi(n :: non_neg_integer) :: {:ok, pi :: float}\n  def calc_pi(n) do\n    w = 1.0 / n\n    s0 = 0.0\n    s1 = for_each(0, n, s0, fn(i, s) ->    # <- \u3053\u3053\u3092\u5909\u66f4\u3057\u305f\n      x = i * w\n      s + :math.sqrt(1.0 - x * x)\n    end)\n    {:ok, 4.0 * w * s1}\n  end\n\n  # \u3053\u306e\u9ad8\u968e\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u305f\n  @spec for_each(index :: integer,\n                 max :: integer,\n                 init_acc :: term,\n                 ((i :: integer, acc0 :: term) -> acc1 :: term))\n                :: final_acc :: term\n  defp for_each(max, max, acc, _fun) do\n    acc\n  end\n  defp for_each(i, max, acc, fun) do\n    for_each(i + 1, max, fun.(i, acc), fun)\n  end\n```\n\n\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002\n\n```iex\niex(1)> l Pi\n{:module, Pi}\niex(2)> :timer.tc(fn() -> Pi.calc_pi(1_000_000_000) end)\n{77341972, {:ok, 3.1415926555901215}}\n```\n\n10\u5104\u5206\u5272\u6642\u306e\u8a08\u7b97\u6642\u9593\u306f\u7d0477.3\u79d2\u3068\u306a\u308a\u3001\u5148\u307b\u3069\u3068\u6bd4\u3079\u3066 1.5 \u500d\u307b\u3069\u9ad8\u901f\u5316\u3057\u305f\u3002\n\n\n## \u305d\u306e\uff12\u3000Elixir\uff1a\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30b9\u3067\u8a08\u7b97\n\n\u305b\u3063\u304b\u304f\u30de\u30b7\u30f3\u304c\uff18\u500b\u306e\u8ad6\u7406\u30b3\u30a2\u3092\u642d\u8f09\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5168\u90e8\u4f7f\u3063\u3066\u307f\u3088\u3046\u3002\u8907\u6570\u306e\u8efd\u91cf\u30d7\u30ed\u30bb\u30b9\u3092\u8d77\u52d5\u3057\u3066\u3001\u9762\u7a4d\u3092\u5206\u5272\u3057\u3066\u6c42\u3081\u308c\u3070\u3044\u3044\u3002Elixir \u306a\u3089\u76f4\u611f\u7684\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u304d\u308b\u3002\n\n\u307e\u305a\u3001`calc_pi/1` \u3092\u5143\u306b\u3001\u56db\u5206\u5186\u306e\u4e00\u90e8\u306e\u7bc4\u56f2\u3060\u3051\u306e\u9762\u7a4d\u3092\u6c42\u3081\u308b\u30d7\u30ed\u30b0\u30e9\u30e0 `calc_pi_range/3` \u3092\u8ffd\u52a0\u3059\u308b\u3002\u3053\u306e\u95a2\u6570\u306f\u3001\u5bfe\u8c61\u9818\u57df\u3092 `n` \u7b49\u5206\u3057\u3066\u3001`offset` \u756a\u76ee\u304b\u3089 `count` \u500b\u5206\u306e\u77ed\u5f62\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u9762\u7a4d\u3092\u7b97\u51fa\u3059\u308b\u3002\n\n```elixir:lib/pi.ex\n  @spec calc_pi_range(n :: non_neg_integer,\n                      offset :: non_neg_integer,\n                      count :: non_neg_integer) :: pi :: float\n  def calc_pi_range(n, offset, count) do\n    w = 1.0 / n\n    s0 = 0.0\n    s1 = for_each(offset, offset + count, s0, fn(i, s) ->\n      x = i * w\n      s + :math.sqrt(1.0 - x * x)\n    end)\n    4.0 * w * s1\n  end\n```\n\n\u6b21\u306b `calc_pi_range/3` \u3092\u547c\u3073\u51fa\u3059\u95a2\u6570 `calc_pi_parallel/2` \u3092\u8ffd\u52a0\u3059\u308b\u3002\u3053\u306e\u95a2\u6570\u306f\u3001`num_procs` \u500b\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u7acb\u3061\u4e0a\u3052\u3001`calc_pi_range/3` \u3092 parallel \u306b\u5b9f\u884c\u3059\u308b\u3002\n\n```elixir:lib/pi.ex\n  @max_procs  1024\n  @timeout  60_000   # 1 minute\n\n  @spec calc_pi_parallel(n :: non_neg_integer,\n                         num_procs :: non_neg_integer) :: {:ok, pi :: float}\n                                                           | {:error, term()}\n  # num_process \u306e\u5024\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u7bc4\u56f2\u5916\u306a\u3089\u30a8\u30e9\u30fc\u3092\u8fd4\u3059\u3002\n  def calc_pi_parallel(_n, num_procs) when num_procs <= 0 or num_procs > @max_procs do\n    {:error,\n     'Invalid num_procs #{num_procs}. It must be > 0 and <= #{@max_procs}'}\n  end\n  def calc_pi_parallel(n, num_procs) when rem(n, num_procs) != 0 do\n    {:error, 'n #{n} must be a multiple of num_procs #{num_procs}'}\n  end\n\n  # num_process \u306e\u5024\u304c\u7bc4\u56f2\u5185\u306a\u306e\u3067\u3001calc_pi_range/3 \u3092 parallel \u306b\u5b9f\u884c\u3059\u308b\u3002\n  def calc_pi_parallel(n, num_procs) do\n    len = div(n, num_procs)\n    pi = 0..(num_procs - 1)\n      |> Enum.map(&(Task.async(fn() -> Pi.calc_pi_range(n, len * &1, len) end)))\n      |> Enum.map(&(Task.await(&1, @timeout)))\n      |> Enum.sum\n    {:ok, pi}\n  end\n```\n\n\u30d7\u30ed\u30bb\u30b9\u3092\u7acb\u3061\u4e0a\u3052\u3066\u304b\u3089\u3001\u7d50\u679c\u3092\u8fd4\u3059\u307e\u3067\u306e\u30b3\u30fc\u30c9\u3092\u9806\u306b\u898b\u3066\u307f\u3088\u3046\u3002\u307e\u305a `Task.async/1` \u3067\u30d7\u30ed\u30bb\u30b9\u3092\u7acb\u3061\u4e0a\u3052\u3001\n\n```elixir\n    pi = 0..(num_procs - 1)\n      |> Enum.map(&(Task.async(fn() -> Pi.calc_pi_range(n, len * &1, len) end)))\n```\n\n`Task.await/2` \u3067\u7d50\u679c\u3092\u96c6\u3081\u3001\n\n```elixir\n      |> Enum.map(&(Task.await(&1, @timeout)))\n```\n\n`Enum.sum/1` \u3067\u5408\u8a08\u3059\u308b\u3002\n\n```elixir\n      |> Enum.sum\n```\n\n10\u5104\u5206\u5272\u300110\u30d7\u30ed\u30bb\u30b9\u3067\u306e\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n```iex\niex(2)> :timer.tc(fn() -> Pi.calc_pi_parallel(1_000_000_000, 10) end)\n{29298379, {:ok, 3.141592655589816}}\n```\n\n\u7d0429.3\u79d2\u3067\u3001\u30b7\u30f3\u30b0\u30eb\u30d7\u30ed\u30bb\u30b9\u6642\u306e\u7d042.6\u500d\u306e\u901f\u5ea6\u3068\u306a\u3063\u305f\u3002\u8ad6\u7406\u30b3\u30a2\u304c\uff18\u500b\u3068\u306f\u3044\u3048\u3001\u5b9f\u30b3\u30a2\u306f\uff14\u500b\u306a\u306e\u3067\u3001\u3053\u306e\u304f\u3089\u3044\u304c\u73fe\u5b9f\u7684\u306a\u306e\u3060\u308d\u3046\u304b\u3002`top` \u30b3\u30de\u30f3\u30c9\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u305f\u3002\n\n```shell-session\n  PID USERNAME       THR PRI NICE   SIZE    RES STATE   C   TIME    WCPU COMMAND\n 2921 tatsuya         41  20    0   268M 72688K uwait   2   2:14 710.87% beam.smp\n```\n\n\u305d\u306e\u5f8c\u3001\u30d7\u30ed\u30bb\u30b9\u6570\u309220\u300140\u3068\u5897\u3084\u3057\u3066\u307f\u305f\u304c\u3001\u7d50\u679c\u306f\u540c\u3058\u3060\u3063\u305f\u3002\n\n\n## \u305d\u306e\uff13\u3000Elixir\uff1aHiPE \u3067\u30cd\u30a4\u30c6\u30a3\u30d6\u30b3\u30fc\u30c9\u5316\n\nElixir \u306e\u307e\u307e\u3001\u3082\u3046\u5c11\u3057\u9811\u5f35\u3063\u3066\u307f\u3088\u3046\u3002\u3068\u3044\u3063\u3066\u3082\u9811\u5f35\u308b\u306e\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3067\u3042\u3063\u3066\u3001\u79c1\u305f\u3061\u3067\u306f\u306a\u3044\u3002\u30b3\u30fc\u30c9\u306e\u5909\u66f4\u306f\u4e0d\u8981\u3060\u3002\n\nHiPE\uff08High Performance Erlang\uff09\u3092\u4f7f\u3063\u3066\u3001beam\u30d5\u30a1\u30a4\u30eb\u5185\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30b3\u30fc\u30c9\u3092\u3001\u4eee\u60f3\u30de\u30b7\u30f3\u306e\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u304b\u3089\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3059\u308b\u3002\u306a\u304a\u3001\u3053\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u305f\u3081\u306b\u306f\u3001Erlang/OTP \u306e\u30d3\u30eb\u30c9\u6642\u306b\u3001`--enable-hipe` \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4e0e\u3048\u3066\u304a\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\u307e\u305f\u3001`--enable-native-libs` \u3082\u6307\u5b9a\u3059\u308b\u3068\u3001Erlang/OTP \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306e\u5927\u534a(\uff1f)\u304c HiPE \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u308b\u3002\n\n\u3067\u306f\u3001iex \u3092\u7acb\u3061\u4e0a\u3052\u305f\u307e\u307e\u3001\u8a72\u5f53\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u307f HiPE \u5316\u3057\u3088\u3046\u3002\u5225\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3002\n\n```shell-session\ncd elixir_rust_interop_demo\nERL_COMPILER_OPTIONS=\"[native, {hipe, [o3]}]\" elixirc -o _build/dev/lib/elixir_rust_interop_demo/ebin/ lib/pi.ex\n```\n\niex \u304b\u3089\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30ea\u30ed\u30fc\u30c9\u3057\u3066\u3001\u518d\u5ea6\u5b9f\u884c\u3059\u308b\u3002\n\n```iex\niex(3)> l Pi\n{:module, Pi}\niex(4)> :code.is_module_native(Pi)\ntrue\niex(5)> :timer.tc(fn() -> Pi.calc_pi_parallel(1_000_000_000, 10) end)\n{15226457, {:ok, 3.141592655589816}}\n```\n\n\u5b9f\u884c\u6642\u9593\u306f\u7d0415\u79d2\u3068\u3044\u3046\u3053\u3068\u3067\u3001HiPE \u524d\u3068\u6bd4\u3079\u308b\u3068\u7d041.9\u500d\u306e\u5b9f\u884c\u901f\u5ea6\u306b\u306a\u3063\u305f\u3002\u3053\u306e\u3088\u3046\u306b\u8a08\u7b97\u304c\u91cd\u3044\uff08CPU bound \u306a\uff09\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001HiPE \u306e\u52b9\u679c\u304c\u5927\u304d\u304f\u3067\u308b\u3002\n\n\n## \u305d\u306e\uff14\u3000Elixir \u304b\u3089 Rust \u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u547c\u3073\u51fa\u3059\n\n\u3067\u306f\u3044\u3088\u3044\u3088 Rust \u3067\u66f8\u3044\u3066\u307f\u308b\u3002\u307e\u305a\u3001Rust \u95a2\u9023\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u683c\u7d0d\u3059\u308b\u5834\u6240\u3092\u4f5c\u308d\u3046\u3002\n\n\n### rust_src \u3068 priv \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u3092\u8ffd\u52a0\u3059\u308b\n\nElixir \u3084 Erlang \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067 C\u8a00\u8a9e\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u683c\u7d0d\u3059\u308b\u6642\u306f\u3001`c_src` \u3068\u3044\u3046\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u3092\u4f7f\u3046\u306e\u304c\u4e00\u822c\u7684\u3060\u3002\u305d\u308c\u306b\u306a\u3089\u3063\u3066\u3001`rust_src` \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u3092\u4f7f\u3046\u3053\u3068\u306b\u3059\u308b\u3002\n\nRust \u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092 Cargo \u3067\u4f5c\u6210\u3059\u308b\u3002`elixir_rust_interop_demo` \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u5185\u3067\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3002\n\n```shell-session\ncargo new --name pi rust_src\n```\n\n\u3055\u3089\u306b\u3001Rust \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30d3\u30eb\u30c9\u3067\u4f5c\u6210\u3055\u308c\u308b\u6210\u679c\u7269\uff08\u52d5\u7684\u30ed\u30fc\u30c9\u306e\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\uff09\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306b\u3001`priv` \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u7528\u610f\u3059\u308b\u3002\n\n```shell-session\nmkdir priv\ntouch priv/.gitsave\n```\n\n\u3053\u306e\u5f8c\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u69cb\u6210\u306b\u306a\u308b\u306f\u305a\u3060\u3002\n\n```\nelixir_rust_interop_demo\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 _build\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 config.exs\n\u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pi.ex         <-- \u3044\u307e\u307e\u3067\u66f8\u3044\u305f Elixir \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 pi_nif.ex     <-- \u3053\u308c\u304b\u3089\u8ffd\u52a0\u3059\u308b Elixir \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\n\u251c\u2500\u2500 mix.exs\n\u251c\u2500\u2500 priv\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 libpi_nif.so  <-- \u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u306e Rust \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u683c\u7d0d\u3055\u308c\u305f\u3001\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\n\u251c\u2500\u2500 rust_src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Cargo.lock\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Cargo.toml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 lib.rs    <-- \u3053\u308c\u304b\u3089\u8ffd\u52a0\u3059\u308b Rust \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 pi.rs     <-- \u3053\u308c\u304b\u3089\u8ffd\u52a0\u3059\u308b Rust \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 target\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 test\n```\n\n\n### \u5186\u5468\u7387\u8fd1\u4f3c\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u79fb\u690d\n\n\u307e\u305a\u306f\u3001Elixir \u306e\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30b9\u7248\u30d7\u30ed\u30b0\u30e9\u30e0\u3092 Rust \u306b\u79fb\u690d\u3059\u308b\u3002`rust_src/src/pi.rs` \u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u3044\u3066\u3044\u304f\u304c\u3001\u3053\u308c\u306f\u7c21\u5358\u306a\u4f5c\u696d\u3060\u3002\u3068\u3044\u3046\u306e\u306f\u3001Rust \u306f Elixir \u3068\u540c\u69d8\u306b\u30e2\u30c0\u30f3\u306a\u8a00\u8a9e\u3067\u3001\u3057\u304b\u3082\u95a2\u6570\u578b\u8a00\u8a9e\u306e\u5f71\u97ff\u3092\u5f37\u304f\u53d7\u3051\u3066\u3044\u308b\u304b\u3089\u3060\u3002\u307b\u3068\u3093\u3069\u540c\u3058\u611f\u899a\u3067\u66f8\u3051\u308b\u3002\n\n`calc_pi_range()` \u306f Elixir \u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3002\n\n```rust:rust_src/src/pi.rs\nfn calc_pi_range(n: u32, offset: u32, count: u32) -> f64 {\n    let w = 1.0 / (n as f64);\n    let mut s = 0.0;\n    for i in offset..(offset + count) {\n        let x = (i as f64) * w;\n        s += (1.0 - x * x).sqrt();\n    }\n    4.0 * w * s\n}\n```\n\n\u3082\u3046\u4e00\u65b9\u306e `calc_pi_parallel()` \u3082\u3001\u304b\u306a\u308a\u4f3c\u3066\u3044\u308b\u3002\n\n```rust:rust_src/src/pi.rs\nuse std::thread;\n\nconst MAX_THREADS: u32 = 64;\n\n#[allow(dead_code)]\npub fn calc_pi_parallel(n: u32, num_threads: u32) -> Result<f64, String> {\n    if num_threads <= 0 || num_threads > MAX_THREADS {\n        Err(format!(\"Invalid num_threads {}. It must be > 0 and <= {}\",\n                    num_threads, MAX_THREADS))\n    } else if n % num_threads != 0 {\n        Err(format!(\"n {} must be a multiple of num_threads {}\",\n                    n, num_threads))\n    } else {\n        let len = n / num_threads;\n        let handles: Vec<_> = (0..num_threads).map(|i| {\n            thread::spawn(move || {\n                calc_pi_range(n, len * i, len)\n            })\n        }).collect();\n\n        let results = handles.into_iter().map(|h| { h.join().unwrap() });\n        // std::iter::Iterator \u306e sum() \u306f Rust 1.5 \u3067\u306f unstable \u306b\n        // \u6307\u5b9a\u3055\u308c\u3066\u304a\u308a\u4f7f\u3048\u306a\u3044\u3002\u4ee3\u308f\u308a\u306b fold() \u3092\u4f7f\u3046\u3002\n        let pi: f64 = results.into_iter().fold(0.0, |acc, p| { acc + p });\n        Ok(pi)\n    }\n}\n```\n\n\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306e\u5b9f\u884c\u904e\u7a0b\u306b\u3064\u3044\u3066\u3001Eixir \u3068\u5bfe\u6bd4\u3055\u305b\u3066\u307f\u3088\u3046\u3002\n\n\u307e\u305a\u3001`num_threads` \u500b\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u7acb\u3061\u4e0a\u3052\u3001`calc_pi_range/3` \u3092 parallel \u306b\u5b9f\u884c\u3059\u308b\u90e8\u5206\u3002\u3069\u3061\u3089\u3082\u30b7\u30fc\u30b1\u30f3\u30b9\u578b\u306b map \u3092\u9069\u7528\u3057\u3001`Task.async/1` \u307e\u305f\u306f `thread::spawn()` \u3067\u30b9\u30ec\u30c3\u30c9\u3092\u8d77\u52d5\u3057\u3066\u3044\u308b\u3002\n\n```elixir:elixir\n    pi = 0..(num_procs - 1)\n      |> Enum.map(&(Task.async(fn() -> Pi.calc_pi_range(n, len * &1, len) end)))\n```\n\n```rust:rust\n        let handles: Vec<_> = (0..num_threads).map(|i| {\n            thread::spawn(move || {\n                calc_pi_range(n, len * i, len)\n            })\n        }).collect();\n```\n\n\u306a\u304a\u3001Rust \u3067\u306f\u8efd\u91cf\u30d7\u30ed\u30bb\u30b9\uff08\u30b0\u30ea\u30fc\u30f3\u30fb\u30b9\u30ec\u30c3\u30c9\uff09\u3067\u306f\u306a\u304f\u3001OS\u304c\u63d0\u4f9b\u3059\u308b\u30cd\u30a4\u30c6\u30a3\u30d6\u30fb\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3001Elixir \u306e\u3088\u3046\u306b\u6570\u767e\u4e07\u500b\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u7a3c\u50cd\u3055\u305b\u308b\u3068\u3044\u3063\u305f\u82b8\u5f53\u306f\u3067\u304d\u306a\u3044\u3002\u4eca\u56de\u306f\u91cd\u3044\u8a08\u7b97\u51e6\u7406\u306a\u306e\u3067\u3001\u8ad6\u7406\u30b3\u30a2\u6570\u3092\u5c11\u3057\u8d85\u3048\u308b\u304f\u3089\u3044\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u8d70\u3089\u305b\u308c\u3070\u5341\u5206\u306a\u306e\u3067\u3001\u3053\u308c\u3067\u554f\u984c\u306a\u3044\u3002\n\n\u3061\u306a\u307f\u306b\u3001Rust \u306e\u7121\u540d\u95a2\u6570\u30d6\u30ed\u30c3\u30af\u306f\u3001Ruby \u306e\u6587\u6cd5\u3092\u53c2\u8003\u306b\u3057\u305f\u305d\u3046\u3060\u3002\n\n\u7d50\u679c\u3092\u96c6\u3081\u308b\u90e8\u5206\u3002\u3069\u3061\u3089\u3082\u30b9\u30ec\u30c3\u30c9\u306e\u30cf\u30f3\u30c9\u30eb\u306b map \u3092\u9069\u7528\u3002`Task.await/2` \u3068 `join()` \u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3002\n\n```elixir:elixir\n      |> Enum.map(&(Task.await(&1, @timeout)))\n```\n\n```rust:rust\n        let results = handles.into_iter().map(|h| { h.join().unwrap() });\n```\n\n\u5408\u8a08\u3059\u308b\u90e8\u5206\u3002\n\n```elixir:elixir\n      |> Enum.sum\n```\n\n```rust:rust\n        // std::iter::Iterator \u306e sum() \u306f Rust 1.5 \u3067\u306f unstable \u306b\n        // \u6307\u5b9a\u3055\u308c\u3066\u304a\u308a\u4f7f\u3048\u306a\u3044\u3002\u4ee3\u308f\u308a\u306b fold() \u3092\u4f7f\u3046\u3002\n        let pi: f64 = results.into_iter().fold(0.0, |acc, p| { acc + p });\n```\n\nRust 1.5 \u3067\u306f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4ed5\u69d8\u3068\u5b9f\u88c5\u306e\u5b89\u5b9a\u5316\u306e\u771f\u3063\u6700\u4e2d\u3067\u3001\u975e\u5b89\u5b9a\uff08unstable\uff09\u306b\u6307\u5b9a\u3055\u308c\u305f `sum()` \u306f\u3001\u5b89\u5b9a\u7248\u306e Rust \u3067\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\u3002\u4eca\u56de\u306f Elixir \u306e `reduce/3` \u306b\u76f8\u5f53\u3059\u308b `fold()` \u3092\u4f7f\u3063\u305f\u304c\u3001\u5b89\u5b9a\u5316\u304c\u9032\u3081\u3070\u3001\u3053\u3053\u306f `sum()` \u3067\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n`calc_pi_parallel()` \u306f\u7d50\u679c\u3092 `Result<f64, String>` \u578b\u3067\u8fd4\u3059\u3002\u3053\u306e\u578b\u306f\u5931\u6557\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u51e6\u7406\u3092\u6697\u793a\u3057\u3066\u304a\u308a\u3001\u6210\u529f\u6642\u306f `Ok<f64>` \u304c\u3001\u5931\u6557\u6642\u306f `Err(String)` \u304c\u8fd4\u308b\u3002Haskell \u3084 Scala \u306e `Either` \u578b\u3068\u540c\u3058\u30b3\u30f3\u30bb\u30d7\u30c8\u3060\u3002\n\n\n### Rust \u306a\u3069\u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u95a2\u6570\u3092 Elixir \u304b\u3089\u547c\u3073\u51fa\u3059\uff13\u3064\u306e\u65b9\u6cd5\n\nElixir \u3084 Erlang \u30e2\u30b8\u30e5\u30fc\u30eb\u304b\u3089\u3001Rust \u3084 C \u8a00\u8a9e\u306a\u3069\u3067\u66f8\u304b\u308c\u305f\u30cd\u30a4\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u547c\u3073\u51fa\u306b\u306f\u3001\uff13\u3064\u306e\u65b9\u6cd5\u304b\u3042\u308b\u3002\n\n- **Port Driver**\uff1a \u6307\u5b9a\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092 Erlang VM \u3068\u306f\u5225\u306e\u30d7\u30ed\u30bb\u30b9\u3068\u3057\u3066\u7acb\u3061\u4e0a\u3052\u3001\u6a19\u6e96\u5165\u529b\u3068\u6a19\u6e96\u51fa\u529b\u3092\u4ecb\u3057\u3066\u60c5\u5831\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u65b9\u6cd5\u3002\u305f\u3068\u3048\u3070\u3001\u30d3\u30eb\u30c9\u30c4\u30fc\u30eb\u306e Mix \u3084 Rebar \u304c\u5916\u90e8\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306b\u306f\u3053\u306e\u65b9\u6cd5\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\n- **Port Linked-In Driver**: \u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092 Erlang VM \u306b\u8aad\u307f\u8fbc\u3093\u3067\u5b9f\u884c\u3059\u308b\u65b9\u6cd5\u306e\u3072\u3068\u3064\u3002\u53e4\u304f\u304b\u3089\u3042\u308a\u5341\u5206\u5b89\u5b9a\u3057\u3066\u3044\u308b\u3002OTP\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3084\u30d5\u30a1\u30a4\u30ebIO\u306e\u30c9\u30e9\u30a4\u30d0\u30fc\u304c\u3053\u306e\u65b9\u5f0f\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002API\u304c\u82e5\u5e72\u8907\u96d1\u3060\u304c\u3001\u975e\u540c\u671f\u6027\u304c\u9ad8\u3044\u64cd\u4f5c\u3092\u5b9f\u88c5\u3057\u3084\u3059\u3044\u3002\n- **NIF (Native Implemented Function)**: \u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092 Erlang VM \u306b\u8aad\u307f\u8fbc\u3093\u3067\u3001\u5b9f\u884c\u3059\u308b\u3082\u3046\u3072\u3068\u3064\u306e\u65b9\u6cd5\u3002API\u304c\u6bd4\u8f03\u7684\u5358\u7d14\u3067\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u95a2\u6570\u3092\u540c\u671f\u5f0f\u306b\u547c\u3073\u51fa\u3059\u6642\u306b\u4fbf\u5229\u3002\n\nPort Driver \u306f\u901a\u4fe1\u3092\u4ecb\u3059\u306e\u3067\u6027\u80fd\u9762\u3067\u306f\u4e0d\u5229\u3060\u304c\u3001\u5916\u90e8\u30b3\u30de\u30f3\u30c9\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u3066\u3082 Erlang VM \u306b\u5f71\u97ff\u304c\u306a\u3044\u306e\u304c\u5229\u70b9\u3060\u3002\n\n\u4ed6\u306e\uff12\u3064\u306e\u65b9\u6cd5\u306f\u52b9\u7387\u304c\u3044\u3044\u53cd\u9762\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u3068\u3001Erlang VM \u307e\u3067\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u5b9f\u88c5\u306b\u7d30\u5fc3\u306e\u6ce8\u610f\u3092\u6255\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\u307e\u305f\u3069\u3061\u3089\u3082\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u95a2\u6570\u304c\u547c\u3073\u3060\u3055\u308c\u3066\u304b\u3089 1ms \u4ee5\u5185\u306b Erlang VM \u306b\u5236\u5fa1\u3092\u623b\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u3044\u3046\u5236\u7d04\u304c\u3042\u308b\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u5bfe\u5fdc\u6cd5\u304c\u3042\u308b\u306e\u3060\u304c\u3001\u305d\u308c\u306f\u5f8c\u65e5\u3001\u5225\u306e\u8a18\u4e8b\u306b\u307e\u3068\u3081\u3088\u3046\u3068\u601d\u3046[^3]\u3002\n\n[^3]: \u5225\u8a18\u4e8b\u306f\uff11\u30f6\u6708\u304f\u3089\u3044\u304b\u304b\u308b\u304b\u3082\u3002\u5f85\u3066\u306a\u3044\u4eba\u306f\u3001[\u3053\u3061\u3089](https://github.com/vinoski/bitwise) \u306e\u30b3\u30fc\u30c9\u3068\u30d7\u30ec\u30bc\u30f3\uff08PDF\uff09\u3092\u8aad\u3080\u306e\u304c\u304a\u3059\u3059\u3081\u3002\n\n\u4eca\u56de\u306f NIF \u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3059\u308b\u30021ms \u4ee5\u5185\u306b\u8fd4\u7b54\u5236\u7d04\u306e\u5bfe\u7b56\u3068\u3057\u3066\u3001Erlang/OTP 17.0 \u304b\u3089\u5b9f\u9a13\u7684\u306b\u5c0e\u5165\u3055\u308c\u305f\u300cdirty scheduler\u300d\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3002\u3053\u306e\u65b9\u6cd5\u3060\u3068\u30011ms \u306e\u5236\u7d04\u3092\u7121\u8996\u3057\u3066\u3082\u3001\u4e00\u5fdc\u3001\u554f\u984c\u306a\u304f\u52d5\u304f\u3082\u306e\u304c\u3067\u304d\u308b\u3002dirty scheduler \u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3001Erlang/OTP \u306e\u30d3\u30eb\u30c9\u6642\u306b `--enable-dirty-schedulers` \u3092\u6307\u5b9a\u3059\u308b\u3002\n\n\n### Elixir \u5074\u3067 NIF \u3092\u547c\u3073\u51fa\u3059\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\n\n\u307e\u305a\u3001Elixir \u5074\u3067\u3044\u307e\u307e\u3067 `Pi` \u3068\u3044\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u3044\u305f\u306e\u3060\u304c\u3001NIF \u7528\u306b\u65b0\u3057\u3044\u30e2\u30b8\u30e5\u30fc\u30eb `PiNif` \u3092\u7528\u610f\u3059\u308b\u3002\u3068\u3044\u3046\u306e\u306f\u3001HiPE \u3068 NIF \u306e\u76f8\u6027\u304c\u60aa\u304f\u3001HiPE \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3001NIF \u306e\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u30ed\u30fc\u30c9\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u304b\u3089\u3060[^4]\u3002HiPE \u7528\u3068\u3001NIF \u7528\u306b Elixir \u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n[^4]: HiPE \u306e\u958b\u767a\u7d42\u4e86\u5f8c\u3057\u3070\u3089\u304f\u3057\u3066\u304b\u3089NIF\u304c\u5c0e\u5165\u3055\u308c\u305f\u305f\u3081\u3001HiPE\u306ebeam\u30ed\u30fc\u30c0\u30fc\u304cNIF\u306b\u5bfe\u5fdc\u3057\u3066\u306a\u3044\u306e\u304c\u539f\u56e0\u306e\u3088\u3046\u3060\u3002HiPE\u306e\u958b\u767a\u306b\u643a\u308f\u3063\u305f\u30c1\u30fc\u30e0\u306e\u30e1\u30f3\u30d0\u30fc\u306f\u307f\u306aEricsson\u793e\u3092\u9000\u793e\u3057\u3066\u3044\u308b\u305f\u3081\u3001VM\u30c1\u30fc\u30e0\u306bHiPE\u306b\u8a73\u3057\u3044\u4eba\u304c\u3044\u306a\u3044\u3089\u3057\u3044\u3002\u305f\u3060\u3001HiPE\u306e\u8a2d\u8a08\u8005\u306f\u3001erang-user\u30e1\u30fc\u30ea\u30f3\u30b0\u30ea\u30b9\u30c8\u3067\u3001\u3044\u3064\u3082\u8cea\u554f\u306b\u56de\u7b54\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3060\u3002\n\n```elixir:lib/pi_nif.ex\ndefmodule PiNif do\n\n  @on_load   :init\n\n  @mod       PiNif\n  @lib_name  'pi_nif'  # char list\n\n  @spec calc_pi_parallel(n :: non_neg_integer,\n                         num_threads :: non_neg_integer)\n                        :: {:ok, pi :: float} | {:error, term()} | no_return\n  def calc_pi_parallel(_n, _num_threads) do\n    :erlang.nif_error({:nif_not_loaded, @mod})\n  end\n\n  def init() do\n    priv_dir = case :code.priv_dir(@app) do\n                 dir when is_list(dir) ->\n                   dir\n                 {:error, :bad_name} ->\n                   case :code.which(@mod) do\n                     :bad_name ->\n                       './priv'\n                     :non_existing ->\n                       './priv'\n                     dir when is_list(dir) ->\n                       :filename.join([:filename.dirname(dir), '../priv'])\n                   end\n               end\n    so_name = :filename.join(priv_dir, 'lib' ++ @lib_name)\n    :erlang.load_nif(so_name, 0)\n  end\n\nend\n```\n\n\u307e\u305a\u3001`@on_load` \u3067\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30ed\u30fc\u30c9\u6642\u306b\u5b9f\u884c\u3055\u308c\u308b\u95a2\u6570\u3092\u6307\u5b9a\u3059\u308b\u3002\u3053\u3053\u3067\u306f\u3001\u3054\u304f\u4e00\u822c\u7684\u306a\u540d\u524d `init/0` \u3068\u3057\u305f\u3002`init/0` \u306f `:erlang.load_nif/2` \u3092\u4f7f\u3063\u3066\u3001Rust \u3067\u66f8\u304b\u308c\u305f `libpi_nif.so` \u3068\u3044\u3046\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u30ed\u30fc\u30c9\u3059\u308b\u3002\n\n`calc_pi_parallel/2` \u306f\u3001\u3053\u306e\u5f8c Rust \u5074\u3067\u3001\u3053\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u95a2\u6570\u3092\u66f8\u304f\u306e\u3067\u3001\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u304c\u30ed\u30fc\u30c9\u3055\u308c\u308b\u3068\u3001\u3053\u306e\u95a2\u6570\u306e\u5185\u5bb9\u304c\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306e\u305d\u308c\u3067\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\u3002\u3082\u3057\u3046\u307e\u304f\u30ed\u30fc\u30c9\u3067\u304d\u306a\u304b\u3063\u305f\u6642\u306f\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u305f\u3044\u306e\u3067\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306b `:erlang.nif_error/1` \u3092\u547c\u3076\u3088\u3046\u306b\u3057\u305f\u3002\n\n\n### NIF \u306e Glue \u95a2\u6570\u3092\u5b9f\u88c5\u3059\u308b\n\nglue \u95a2\u6570\uff08\u7cca\u4ed8\u3051\u95a2\u6570\uff09\u3068\u3044\u3046\u306e\u306f\u3001\u3044\u307e\u982d\u306b\u6d6e\u304b\u3093\u3060\u8a00\u8449\u306a\u306e\u3067\u3001\u4e00\u822c\u306b\u901a\u7528\u3059\u308b\u8a00\u8449\u304b\u3069\u3046\u304b\u306f\u308f\u304b\u3089\u306a\u3044\u3002\u304c\u3001\u3053\u3053\u3067\u306f\u3001Elixir \u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u66f8\u3044\u305f\u95a2\u6570\u3068\u3001Rust \u306e\u95a2\u6570\u3092\u304f\u3063\u3064\u3051\u308b\u305f\u3081\u306e\u95a2\u6570\u3092\u30a4\u30e1\u30fc\u30b8\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u306f Rust \u3067\u66f8\u304f\u3002NIF \u306e\u5834\u5408\u3067\u3082\u3001Port Linked-In Driver \u306e\u5834\u5408\u3067\u3082\u3001\u305d\u308c\u305e\u308c\u306e\u30eb\u30fc\u30eb\u306b\u6cbf\u3063\u305f glue \u95a2\u6570\u3092\u66f8\u304b\u306a\u3051\u308c\u3070\u52d5\u304b\u306a\u3044\u3002\n\n\u3053\u3053\u306f\u4e00\u901a\u308a\u66f8\u304d\u65b9\u304c\u308f\u304b\u308b\u307e\u3067\u3001\u9762\u5012\u306a\u90e8\u5206\u3060\u3002NIF \u306e API\uff08C\u8a00\u8a9e\u306e\u95a2\u6570\uff09\u3084\u3001Rust \u3067 C\u8a00\u8a9e\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u6642\u306e\u4f5c\u6cd5\u3092\u3088\u304f\u7406\u89e3\u3057\u3066\u3044\u306a\u3044\u3046\u3061\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u591a\u767a\u3059\u308b\u3002\u9006\u306b\u3001\u3044\u3063\u305f\u3093\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u901a\u3057\u3066\u3057\u307e\u3048\u3070\u3001\u5b9f\u884c\u6642\u306b\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3053\u3068\u306f\u307e\u305a\u306a\u3044\u306e\u304c Rust \u306e\u3044\u3044\u3068\u3053\u308d\u3060\u3002\n\n\u307e\u305a\u3001`Cargo.toml` \u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u3092\u8ffd\u52a0\u3059\u308b\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u3001Mix \u306e `mix.exs` \u306b\u76f8\u5f53\u3059\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3060\u3002\n\n```toml:rust_src/Cargo.toml\n[lib]\nname = \"pi_nif\"\ncrate-type = [\"dylib\"]\n\n[dependencies]\nruster_unsafe = { git = \"https://github.com/tatsuya6502/ruster_unsafe/\", rev = \"nif-2.9-unmerged\" }\nlibc = \">=0.2.4\"\n```\n\nlib \u30bb\u30af\u30b7\u30e7\u30f3\u306b\u306f\u3001`pi_nif` \u3068\u3044\u3046\u540d\u524d\u306e\u52d5\u7684\u30ed\u30fc\u30c9\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc(dylib)\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3092\u6307\u5b9a\u3057\u305f\u3002\n\ndependencies \u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001ruster_unsafe \u3068\u3044\u3046\u30af\u30ec\u30fc\u30c8\uff08Rust \u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u3053\u3068\uff09\u3068\u3001libc \u30af\u30ec\u30fc\u30c8\u3092\u4f7f\u3046\u3053\u3068\u3092\u6307\u5b9a\u3057\u305f\u3002ruster_unsafe \u306f \"rust\"-\"er\"\uff08Rust \uff0b Erlang \u306e\u610f\u5473\uff09\u3068\u3044\u3046\u540d\u524d\u306e\u901a\u308a\u3001Rust \u304b\u3089 Erlang \u306e NIF API \u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3060\u3002\u672c\u5bb6\u306b\u307e\u3060\u53d6\u308a\u8fbc\u307e\u308c\u3066\u3044\u306a\u3044\u4fee\u6b63\u304c\u3042\u308b\u306e\u3067\u3001\u4eca\u306f\u79c1\u306e\u30d5\u30a9\u30fc\u30af\u3092\u6307\u5b9a\u3057\u3066\u304a\u304f\u3002libc \u306f Rust \u306e\u95a2\u6570\u3068 C\u8a00\u8a9e\u306e\u95a2\u6570\u306e\u76f8\u4e92\u547c\u3073\u51fa\u3057\u306b\u5fc5\u8981\u3060\u3002\n\n\u6b21\u306b\u3001`rust_src/src/lib.rs` \u30d5\u30a1\u30a4\u30eb\u306b glue \u95a2\u6570\u3092\u66f8\u3044\u3066\u3044\u304f\u3002\u307e\u305a\u59cb\u3081\u306b ruster_unsafe \u304c\u7528\u610f\u3057\u305f NIF \u306e\u521d\u671f\u5316\u30de\u30af\u30ed\u3092\u4f7f\u3046\u3002\n\n```rust:rust_src/src/lib.rs\n#[macro_use]\nextern crate ruster_unsafe;\nuse ruster_unsafe::*;\n\nnif_init!(b\"Elixir.PiNif\\0\",\n          Some(load),    // on load    \uff08\u5fc5\u9808\uff09\n          None,          // on reload\n          Some(upgrade), // on upgrade \uff08\u5fc5\u9808\uff09\n          None,          // on unload\n          nif!(b\"calc_pi_parallel\\0\",\n               2,\n               calc_pi_parallel,\n               ERL_NIF_DIRTY_JOB_CPU_BOUND)\n         );\n```\n\n`b\"Elixir.PiNif\\0\"` \u304c\u3001NIF \u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u3002\u3053\u306e\u540d\u524d\u3068\u3001\u547c\u3073\u51fa\u3057\u5074\u306e Elixir \u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u306f\u540c\u3058\u3067\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002Elixir \u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u306f\u3001`defmodule` \u3067\u6307\u5b9a\u3057\u305f\u540d\u524d\u306e\u524d\u306b `Elixir.` \u304c\u4ed8\u304f\u306e\u3067\u3001\u3053\u306e\u540d\u524d\u306b\u306a\u3063\u3066\u3044\u308b\u3002C\u8a00\u8a9e\u306e\u6587\u5b57\u5217\u306a\u306e\u3067 null\u6587\u5b57 `\\0` \u3092\u6700\u5f8c\u306b\u3064\u3051\u308b\u3002\n\n\u7b2c\uff12\u5f15\u6570\u304b\u3089\u7b2c\uff15\u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f\u95a2\u6570\u306f\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30ed\u30fc\u30c9\u6642\u306a\u3069\u306b\u547c\u3070\u308c\u308b ~~\u306e\u3067\u3001\u521d\u671f\u5316\u3084\u3001\u5f8c\u7247\u4ed8\u3051\u304c\u5fc5\u8981\u306a\u6642\u306f\u5b9f\u88c5\u3059\u308b~~ \u3002\u4eca\u56de\u306f\u30ed\u30fc\u30c9\u6642\u306b `load()` \u95a2\u6570\u3092\u547c\u3076\u3088\u3046\u306b\u3057\u3066\u3001~~\u4ed6\u306f `None` \u3068\u3059\u308b\u3053\u3068\u3067\u3001\u306a\u306b\u3082\u547c\u3070\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3002~~\u3000**2015\u5e741\u670818\u65e5\u4fee\u6b63\uff1a**\u3055\u3089\u306b\u3001\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u6642\u306f `upgrade()` \u95a2\u6570\u3092\u547c\u3076\u3088\u3046\u306b\u3057\u305f\u3002\u4ed6\u306f `None` \u3068\u3059\u308b\u3053\u3068\u3067\u3001\u306a\u306b\u3082\u547c\u3070\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3002\uff08\u7b2c\uff12\u5f15\u6570 on load \u3068\u7b2c\uff14\u5f15\u6570 on upgrade \u306f Option \u578b\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u3001**\u5fc5\u9808** \u3067\u3057\u305f\uff09\n\n\u305d\u306e\u6b21\u306e `nif!(b\"calc_pi_parallel\\0\"` \u304c\u3001Elixir \u306e `calc_pi_parallel/2` \u306b\u5bfe\u5fdc\u3059\u308b Rust \u95a2\u6570\u306e\u60c5\u5831\u306b\u306a\u308b\u3002\n\n- Elixir \u5074\u306e\u95a2\u6570\u540d\u304c `\"calc_pi_parallel\\0\"`\uff08C\u8a00\u8a9e\u306e\u6587\u5b57\u5217\u3067\u8868\u73fe\uff09\u3067\u3001arity \u304c `2`\n- \u5bfe\u5fdc\u3059\u308b Rust \u95a2\u6570\u304c `calc_pi_parallel`\n- CPU bound \u7528\u306e dirty scheduler \u3067\u5b9f\u884c\u3059\u308b\uff08`ERL_NIF_DIRTY_JOB_CPU_BOUND`\uff09\n\n\u3082\u3057\u3001\u4ed6\u306b\u3082\u95a2\u6570\u304c\u3042\u308b\u306e\u306a\u3089 `nif!(...)` \u3092\u7d9a\u3051\u3066\u66f8\u3044\u3066\u3044\u3051\u3070\u3044\u3044\u3002\n\n\u6b21\u306b\u3001`load()` \u306e\u5b9f\u88c5\u3002`calc_pi_parallel()` \u304c\u623b\u308a\u5024\u3092\u8fd4\u3059\u6642\u306b\u4f7f\u3046 `:ok` \u30a2\u30c8\u30e0\u3068 `:error` \u30a2\u30c8\u30e0\u3092\u521d\u671f\u5316\u3059\u308b\u3002\u306a\u304a\u3001NIF API \u306e\u95a2\u6570\u306f\u3001\u540d\u524d\u304c `enif_` \u3067\u59cb\u307e\u308b\u3002\n\n```rust:rust_src/src/lib.rs\nextern crate libc;\nuse libc::c_double;\n\nstatic mut ok_atom:    ERL_NIF_TERM = 0 as ERL_NIF_TERM;\nstatic mut error_atom: ERL_NIF_TERM = 0 as ERL_NIF_TERM;\n\n/// static \u306a\u5909\u6570\u306b\u30a2\u30c8\u30e0\u3092\u8a2d\u5b9a\u3059\u308b\u3002\nextern \"C\" fn load(env: *mut ErlNifEnv,\n                   _priv_data: *mut *mut c_void,\n                   _load_info: ERL_NIF_TERM)-> c_int {\n    unsafe {\n        ok_atom    = enif_make_atom(env, b\"ok\\0\"    as *const u8);\n        error_atom = enif_make_atom(env, b\"error\\0\" as *const u8)\n    }\n    0\n}\n```\n\n`upgrade()` \u306f\u4f55\u3082\u305b\u305a\u3001\u5358\u306b\u6210\u529f\u3092\u8868\u3059 `0` \u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u305f\u3002\n\n```rust:rust_src/src/lib.rs\nextern \"C\" fn upgrade(_env: *mut ErlNifEnv,\n                      _priv_data: *mut *mut c_void,\n                      _old_priv_data: *mut *mut c_void,\n                      _load_info: ERL_NIF_TERM)-> c_int {\n    0\n}\n```\n\n\u7d9a\u3044\u3066 `calc_pi_parallel()` \u306e\u5b9f\u88c5\u3002\u307e\u305a\u3001`mod pi;` \u3067\u3001pi \u30e2\u30b8\u30e5\u30fc\u30eb\uff08`rust_src/src/pi.rs`\uff09\u306b\u66f8\u3044\u305f\u5186\u5468\u7387\u8a08\u7b97\u306e public \u95a2\u6570\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\nglue \u95a2\u6570\u306b\u306f `calc_pi_parallel()` \u306e\u3088\u3046\u306b\u3001\uff13\u3064\u306e\u5f15\u6570\u304c\u6e21\u3055\u308c\u308b\u3002`env` \u304c Erlang \u306e VM \u74b0\u5883\uff08\u30e9\u30f3\u30bf\u30a4\u30e0\uff09\u3092\u8868\u3059\u69cb\u9020\u4f53\u3001`argc` \u304c\u5f15\u6570\u306e\u6570\u3001`args` \u304c\u5f15\u6570\u306e\u5165\u3063\u305f\u69cb\u9020\u4f53\u3060\u3002\u623b\u308a\u5024\u306f Erlang \u306e\u30c7\u30fc\u30bf\u3092\u8868\u3059 C\u8a00\u8a9e\u306e\u69cb\u9020\u4f53\u3067\u3001`calc_pi_parallel()` \u3067\u306f\u3001\u5f15\u6570\u306e\u5024\u306b\u3088\u3063\u3066\u4ee5\u4e0b\u306e\u3069\u308c\u304b\u306b\u306a\u308b\u3002\n\n- `{:ok, pi\u306e\u8fd1\u4f3c\u5024\uff08float \u578b\uff09}`\n- `{:error, \u30a8\u30e9\u30fc\u306e\u5185\u5bb9\u3092\u793a\u3059\u6587\u5b57\u5217}`\n- `BadArgumentError`\n\n```rust:rust_src/src/lib.rs\n\nuse std::mem::uninitialized;\n\nmod pi;\n\n/// Elixir: @spec calc_pi_parallel(n :: non_neg_integer,\n///                                num_threads :: non_neg_integer)\n///                               :: {:ok, pi :: float} | {:error, term()} | no_return\nextern \"C\" fn calc_pi_parallel(env: *mut ErlNifEnv,\n                               argc: c_int,\n                               args: *const ERL_NIF_TERM) -> ERL_NIF_TERM {\n\tlet mut n: c_int = unsafe { uninitialized() };\n    let mut num_threads: c_int = unsafe { uninitialized() };\n    if argc != 2\n        || 0 == unsafe { enif_get_int(env, *args, &mut n) }\n        || 0 == unsafe { enif_get_int(env, *args.offset(1), &mut num_threads) }\n        || n <= 0 {\n        return unsafe { enif_make_badarg(env) };\n    }\n\n    match pi::calc_pi_parallel(n as u32, num_threads as u32) {\n        Ok(pi) =>\n            make_ok_result(env, unsafe { &enif_make_double(env, pi as c_double) }),\n        Err(reason) =>\n            make_error_result(env, &reason),\n    }\n}\n```\n\n\u6700\u521d\u306e `if` \u5f0f\u307e\u3067\u3067\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308a\u3001\u5f15\u6570\u306e\u578b\u306a\u3069\u304c\u59a5\u5f53\u304b\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u308b\u3002\n\nNIF \u306e C API \u3068\u3084\u308a\u3068\u308a\u3092\u3059\u308b\u305f\u3081\u3001`unsafe { ... }` \u30d6\u30ed\u30c3\u30af\u304c\u4f55\u5ea6\u3082\u4f7f\u308f\u308c\u3066\u3044\u308b\u3002Rust \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u304c\u5b89\u5168\u6027\u3092\u691c\u8a3c\u3067\u304d\u308b\u306e\u306f\u3001Rust \u3067\u66f8\u304b\u308c\u305f\u90e8\u5206\u306e\u307f\u306a\u306e\u3067\u3001\u5916\u90e8\u306e\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u3084\u3001C\u8a00\u8a9e\u306e\u751f\u30dd\u30a4\u30f3\u30bf\u30fc\u304c\u793a\u3059\u756a\u5730\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306a\u3069\u306f\u3001\u5bfe\u8c61\u5916\u3068\u306a\u308b\u3002\u3082\u3057 `unsafe` \u3067\u56f2\u307e\u306a\u3044\u3068\u3001\u5b89\u5168\u6027\u304c\u78ba\u8a8d\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\n`unsafe` \u3067\u56f2\u3080\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u304c\u3001\u56f2\u3093\u3060\u90e8\u5206\u306e\u30b3\u30fc\u30c9\u306e\u5b89\u5168\u6027\u306b\u3064\u3044\u3066\u306f\u3001\u958b\u767a\u8005\u81ea\u8eab\u304c\u78ba\u8a8d\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\n\u6700\u5f8c\u306e `match` \u5f0f\u3067\u306f\u3001pi\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u65b9\u306e `calc_pi_parallel()` \u3092\u547c\u3073\u51fa\u3057\u3001\u7d50\u679c\u3092\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3067\u53d6\u308a\u51fa\u3057\u3066\u3044\u308b\u3002\u3082\u3057 `Ok(pi)` \u306a\u3089\u3001`make_ok_result()` \u3092\u547c\u3093\u3067\u3001`{:ok, pi}` \u306e\u30bf\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u8fd4\u3059\u3002\u3082\u3057 `Err(reason)` \u306a\u3089 `make_error_result()` \u3092\u547c\u3093\u3067\u3001`{:error, result}` \u306e\u30bf\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u8fd4\u3059\u3002\n\n`make_ok_result()` \u3068 `make_error_result()` \u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\u96f0\u56f2\u6c17\u306f\u3064\u304b\u3081\u308b\u3060\u308d\u3046\u304b\u3002\n\n```rust:rust_src/src/lib.rs\nfn make_ok_result(env: *mut ErlNifEnv, result: *const ERL_NIF_TERM) -> ERL_NIF_TERM {\n    let tuple_elements = unsafe { [ok_atom, *result] };\n    unsafe { enif_make_tuple_from_array(env, tuple_elements.as_ptr(), 2) }\n}\n\nfn make_error_result(env: *mut ErlNifEnv, reason: &str) -> ERL_NIF_TERM {\n    let reason_str = unsafe { enif_make_string_len(env, reason.as_ptr(), reason.len(),\n                                                   ErlNifCharEncoding::ERL_NIF_LATIN1) };\n    let tuple_elements = [unsafe { error_atom }, reason_str];\n    unsafe { enif_make_tuple_from_array(env, tuple_elements.as_ptr(), 2) }\n}\n```\n\n\n### mix compile \u3067 cargo build --release \u3092\u547c\u3073\u51fa\u3059\n\n\u3067\u306f\u3001Rust \u306b\u3088\u308b\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u30d3\u30eb\u30c9\u3057\u3088\u3046\u3002`rust_src` \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u3067\u3001`cargo build --release` \u3068\u3057\u3066\u3082\u3044\u3044\u304c\u3001\u3053\u3053\u3067\u306f\u3001Mix \u304b\u3089\u3001Rust \u30b3\u30fc\u30c9\u3068 Elixir \u30b3\u30fc\u30c9\u3092\u4e00\u62ec\u3057\u3066\u30d3\u30eb\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n`mix.exs` \u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3002\n\n```elixir:mix.exs\ndefmodule Pi.Mixfile do\n  use Mix.Project\n\n  def project do\n    [app: :elixir_rust_interop_demo,\n     version: \"0.0.1\",\n     elixir: \"~> 1.2\",\n     compilers: [:cargo, :elixir, :app],    # <-- \u3053\u306e\u884c\u3092\u8ffd\u52a0\u3057\u305f\u3002\n     build_embedded: Mix.env == :prod,\n     start_permanent: Mix.env == :prod,\n     deps: deps]\n  end\n\n  def application do\n    [applications: [:logger]]\n  end\n\n  defp deps do\n    []\n  end\nend\n\n\n####################\n# Rust Cargo Tasks #\n####################\n\ndefmodule Mix.Tasks.Compile.Cargo do        # <-- \u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8ffd\u52a0\u3057\u305f\u3002\n  @shortdoc \"Compiles helper in rust_src\"\n\n  def run(_) do\n    case System.cmd(\"cargo\", [\"build\", \"--release\"],\n                    cd: \"rust_src\",\n                    stderr_to_stdout: true) do\n      {result, 0} ->\n        if result != \"\" do\n          Mix.shell.info result\n        end\n        # @TODO: Skip coping the file if it is up-to-date.\n        case System.cmd(\"cp\", [\"-p\", \"rust_src/target/release/libpi_nif.so\", \"priv\"],\n                        stderr_to_stdout: true) do\n          {\"\", 0} ->\n            :ok\n          {result, 0} ->\n            Mix.shell.info result\n            :ok\n          {result, _error_code} ->\n            Mix.shell.error result\n            raise \"copying libpi_nif.so failed\"\n        end\n      {result, _error_code} ->\n        Mix.shell.error result\n        raise \"cargo build --release failed.\"\n    end\n  end\nend\n\ndefmodule Mix.Tasks.Clean.Cargo do          # <-- \u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8ffd\u52a0\u3057\u305f\u3002\n  @shortdoc \"Cleans helper in rust_src\"\n\n  def run(_) do\n    case System.cmd(\"cargo\", [\"clean\"],\n                    cd: \"rust_src\",\n                    stderr_to_stdout: true) do\n      {result, 0} ->\n        Mix.shell.info result\n        :ok\n      {result, _error_code} ->\n        Mix.shell.error result\n        :ok\n    end\n  end\nend\n```\n\n\u3053\u308c\u3067\u3001`mix compile` \u307e\u305f\u306f `iex -S mix` \u3068\u3057\u305f\u6642\u306b\u3001Rust \u5074\u3082 `cargo build --release` \u3067\u30d3\u30eb\u30c9\u3055\u308c\u308b\u3002\u3067\u304d\u3042\u304c\u3063\u305f\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc `libpi_nif.so` \u306f\u3001`priv` \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fc\u3078\u30b3\u30d4\u30fc\u3055\u308c\u308b\u3002\n\n\u8a66\u3057\u306b\u30d3\u30eb\u30c9\u3057\u3066\u307f\u3088\u3046\u3002\n\n```iex\nmix compile\n   Compiling ruster_unsafe v0.2.0 (https://github.com/tatsuya6502/ruster_unsafe/?rev=nif-2.9-unmerged#250957b5)\n   Compiling libc v0.2.4\n   Compiling pi v0.1.0 (file:///usr/home/tatsuya/workhub/dev/elixir_rust_interop_demo/rust_src)\n\nCompiled lib/pi_nif.ex\nCompiled lib/pi.ex\nGenerated elixir_rust_interop_demo app\nConsolidated List.Chars\n...\n```\n\n\n### \u5b9f\u884c\u3059\u308b\n\n\u5b9f\u306f\u79c1\u306f Rust \u306e\u8d85\u521d\u5fc3\u8005\u306a\u306e\u3067[^5]\u3001C\u95a2\u6570\u3068\u306e\u3084\u308a\u53d6\u308a\u306e\u4f5c\u6cd5\u304c\u3088\u304f\u308f\u304b\u3089\u305a\u3001glue \u95a2\u6570\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u901a\u3059\u306e\u306b\u3001\u305a\u3044\u3076\u3093\u82e6\u52b4\u3057\u3066\u3057\u307e\u3063\u305f\u3002\u3044\u3084\u30fc\u3001\u9577\u304b\u3063\u305f\u3002\u3067\u3082\u3001\u3053\u306e\u82e6\u52b4\u306f\u7121\u99c4\u306b\u306a\u3089\u306a\u3044\u3060\u308d\u3046\u3002\n\n[^5]: \u79c1\u304c Rust \u3092\u77e5\u3063\u305f\u306e\u306f\u3001@voluntas \u3055\u3093\u306e\u3001\u300c\u79c1\u7684\u306a 2015 \u5e74\u6280\u8853\u7684\u306a\u632f\u308a\u8fd4\u308a\u300d\u3067 [\u7d39\u4ecb\u3055\u308c\u3066\u3044\u305f](http://qiita.com/voluntas/items/74c40cd0b76d68fb9360#rust)\u306e\u304c\u304d\u3063\u304b\u3051\u3060\u3063\u305f\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002Erlang \u3068\u4e00\u7dd2\u306b\u4f7f\u3048\u308b\u3001\u3053\u3093\u306a\u8a00\u8a9e\u304c\u6b32\u3057\u304b\u3063\u305f\u306e\u3067\u3059\n\n\u3067\u306f\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046\u3002iex \u3092\u7acb\u3061\u4e0a\u3052\u308b\u3002\n\n```iex\n% iex -S mix\nErlang/OTP 18 [erts-7.2.1] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:10] [hipe] [kernel-poll:false]\n\nInteractive Elixir (1.2.0) - press Ctrl+C to exit (type h() ENTER for help)\n```\n\n\u307e\u305a\u3001dirty scheduler \u304c\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002iex \u306e\u7acb\u3061\u4e0a\u3052\u6642\u306b `[ds:8:8:10]` \u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u308c\u3070 OK \u3060\u3002\u3053\u308c\u306f\u3001\u5de6\u304b\u3089\u9806\u306b\u3001dirty CPU scheduler \u306e\u6700\u5927\u672c\u6570\u3001\u30aa\u30f3\u30e9\u30a4\u30f3\u4e2d\u306edirty CPU scheduler\u306e\u672c\u6570\u3001dirty IO scheduler \u306e\u672c\u6570\u3092\u8868\u3057\u3066\u3044\u308b\u3002\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u3066\u5b9f\u884c\u3057\u3088\u3046\u3002\n\n```iex\niex(1)> l PiNif\n{:module, PiNif}\niex(2)> :timer.tc(fn() -> PiNif.calc_pi_parallel(1_000_000_000, 10) end)\n{1262147, {:ok, 3.141592655589816}}\n```\n\n\u304a\u3049\u3001\u901f\u3044\u3063\uff01 \u7d041.3\u79d2\u3067\u7d42\u4e86\u3002Elixir \u3067 HiPE \u3092\u4f7f\u7528\u3057\u305f\u6642\u3068\u6bd4\u3079\u308b\u3068\u3001\u7d0412.1\u500d\u306e\u901f\u5ea6\u3068\u306a\u3063\u305f\u3002\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u516815\u6841\u304c Elixir \u306e\u8a08\u7b97\u7d50\u679c\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3061\u3083\u3093\u3068\u8a08\u7b97\u3057\u3066\u3044\u308b\u3088\u3046\u3060 :+1:\n\n\u3061\u306a\u307f\u306b\u3001\u30b3\u30fc\u30c9\u306e\u63b2\u8f09\u306f\u7701\u7565\u3057\u305f\u304c\u3001\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u7248\u3082\u3042\u308b\u3002\n\n```iex\niex(3)> :timer.tc(fn() -> PiNif.calc_pi(1_000_000_000) end)\n{4134014, {:ok, 3.1415926555901215}}\n```\n\n\u3053\u308c\u306b\u3088\u308a\u3001\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u7248\u306f\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u7248\u3088\u308a\u3082\u3001\u7d043.28\u500d\u901f\u3044\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\n\n\n## SIMD \u547d\u4ee4\u306b\u3055\u3089\u306b\u671f\u5f85\n\n\u524d\u306b\u3082\u66f8\u3044\u305f\u3088\u3046\u306b\u3001\u73fe\u72b6\u306f Rust \u306e\u95a2\u6570\u3092 SIMD \u547d\u4ee4\u3078\u306e\u6700\u9069\u5316\u304c\u3055\u308c\u3066\u306a\u3044\u72b6\u614b\u3067\u5b9f\u884c\u3057\u3066\u3044\u308b\u3002\u4eee\u306b\u6700\u9069\u5316\u304c\u3055\u308c\u305f\u306a\u3089\u3001\u3053\u306e\u30de\u30b7\u30f3\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u30fc\uff08AVX \u547d\u4ee4\u306b\u5bfe\u5fdc\uff09\u306a\u3089\u3001\uff14\u7d44\u306e64\u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\u304c\u3001\uff11\u5ea6\u306b\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b[^6]\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5834\u5408\u3001sqrt \u8a08\u7b97\u3092\u7e70\u308a\u8fd4\u3059\u306e\u3067\u3001SIMD \u306e\u52b9\u679c\u304c\u5927\u304d\u305d\u3046\u3060\u3002\u5f8c\u65e5\u3001\u6311\u6226\u3057\u3066\u307f\u305f\u3044\u3002\n\n[^6]: Rust 1.5.0 \u3067\u306e SIMD \u5bfe\u5fdc\u72b6\u6cc1\u306f\u306f\u3063\u304d\u308a\u308f\u304b\u3089\u306a\u3044\u306e\u3060\u304c\u3001\u4eca\u306e\u3068\u3053\u308d\u81ea\u52d5\u6700\u9069\u5316\u306f SSE \u307e\u3067\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002simd \u30af\u30ec\u30fc\u30c8\u306e\u65b9\u306f\u3001\u30d5\u30a9\u30fc\u30af\u3057\u3066 [AVX \u547d\u4ee4\u306b\u5bfe\u5fdc\u3055\u305b\u305f](https://github.com/rekka/simd/tree/avx)\u4eba\u3082\u3044\u308b\u306e\u3067\u3001\u3053\u3061\u3089\u3082\u8a66\u3057\u3066\u307f\u305f\u3044\u3002\n\n\n## \u6e2c\u5b9a\u7d50\u679c\n\n\u305d\u306e\u5f8c\u3001FreeBSD \u3067\u518d\u5ea6\u6e2c\u5b9a\u3057\u305f\u3002\u305d\u308c\u305e\u308c\u306e\u95a2\u6570\u3092\uff13\u56de\u305a\u3064\u5b9f\u884c\u3057\u3001\u305d\u306e\u4e2d\u592e\u5024\uff08\uff12\u756a\u76ee\u306b\u901f\u304b\u3063\u305f\u5024\uff09\u3092\u63a1\u7528\u3057\u305f\u3002\n\n```math\n\\pi = 3.14159\\ 26535\\ 89793\\ \\dotsb\n```\n\n| # | \u8a00\u8a9e    | proc/thr\u6570 | \u30d7\u30ed\u30b0\u30e9\u30e0 | \u8a08\u7b97\u7d50\u679c | \u6240\u8981\u6642\u9593\uff08\u30de\u30a4\u30af\u30ed\u79d2\uff09 | \u76f8\u5bfe\u901f\u5ea6  | \u76f8\u5bfe\u901f\u5ea6  |\n|--:|:-------|:-----------:|:---------|:--------|-------------------:|---------:|---------:|\n| 1 | Elixir |  1 | Enum.reduce/3 | 3.1415926555901215 | 113,853,091 |     0.68 |     0.13 |\n| 2 |        |  1 | (HiPE)        | 3.1415926555901215 | 111,940,965 |     0.70 |     0.14 |\n| 3 |        |  1 | for_each/4    | 3.1415926555901215 |  77,914,595 | **1.00** |     0.20 |\n| 4 |        |  1 | (HiPE)        | 3.1415926555901215 |  45,786,441 |     1.70 |     0.33 |\n| 5 |        | 10 | parallel      | 3.1415926555898160 |  29,319,387 |     2.66 |     0.52 |\n| 6 |        | 10 | (HiPE)        | 3.1415926555898160 |  15,226,457 |     5.12 | **1.00** |\n| 7 | Rust   |  1 | NIF           | 3.1415926555901215 |   4,134,014 |    18.85 |     3.68 |\n| 8 |        | 10 | parallel NIF  | 3.1415926555898160 |   1,209,160 |    64.44 |    12.60 |\n\n\n## \u307e\u3068\u3081\n\n- Elixir \u306f\u5805\u7262\u3067\u30b9\u30b1\u30fc\u30e9\u30d6\u30eb\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u958b\u767a\u751f\u7523\u6027\u3092\u9ad8\u3081\u308b\u52d5\u7684\u578b\u4ed8\u3051\u8a00\u8a9e\n- Rust \u306f\u5b89\u5168\u6027\u3068\u30b9\u30d4\u30fc\u30c9\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u305f\u3001\u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5411\u3051\u306e\u9759\u7684\u578b\u4ed8\u3051\u8a00\u8a9e\n- \u3069\u3061\u3089\u306e\u8a00\u8a9e\u3082\u30e2\u30c0\u30f3\u306a\u8a00\u8a9e\u306e\u7279\u5fb4\u3092\u53d6\u308a\u8fbc\u3093\u3067\u304a\u308a\u3001\u3088\u304f\u4f3c\u305f\u30b9\u30bf\u30a4\u30eb\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u66f8\u3051\u308b\n- \u3069\u3061\u3089\u306e\u8a00\u8a9e\u3082\u30de\u30eb\u30c1\u30b3\u30a2\u30d7\u30ed\u30bb\u30c3\u30b5\u306b\u9069\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7c21\u5358\u306b\u66f8\u3051\u308b\n- \uff12\u3064\u306e\u8a00\u8a9e\u306e\u4f7f\u3044\u3069\u3053\u308d\u3092\u898b\u6975\u3081\u3001\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u5e78\u305b\u306b\u306a\u308c\u305d\u3046\n\n* * *\n", "tags": ["Elixir", "rust", "Erlang"]}