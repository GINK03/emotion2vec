{"context": "\n\n\u8ffd\u8a18\uff1a Dec-11. 2016\nAlchemy Vision \u306f\u3001Visual Recognition \u306b\u7d71\u5408\u3055\u308c\u307e\u3057\u305f\u3002\n\n\u8ffd\u8a18\uff1a Dec-26. 2016\n\u672c\u7a3f\u306e\u30a2\u30d7\u30ea\u3092\u3001Visual Recognition\u304a\u3088\u3073Swift 3.0\u3092\u4f7f\u7528\u3057\u3066\u3001\u4f5c\u308a\u76f4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nhttp://qiita.com/y-some/items/45e2c99b91485638e05b\n\n\u306f\u3058\u3081\u306b\n\n\u52d5\u753b\u306f\u3053\u3061\u3089\nAlchemyVisionAPI\u306f\u3001AlchemyAPI\u306e\u4e2d\u306e\u753b\u50cf\u8a8d\u8b58\u95a2\u9023\u306eAPI\u3067\u3059\u3002\nAlchemyAPI\u306b\u306f\u3001\u305d\u306e\u4ed6\u306b\u30c6\u30ad\u30b9\u30c8\u89e3\u8aad\u306a\u3069\u306e\u6a5f\u80fd\u3082\u3042\u308a\u307e\u3059\u3002\n\u5143\u3005\u306fAlchemyAPI\u793e\u304c\u958b\u767a\u3057\u305f\u6280\u8853\u3067\u30012015\u5e743\u6708\u306bIBM\u304c\u8cb7\u53ce\u3057\u307e\u3057\u305f\u3002\n\u73fe\u5728\u306fWatson\u306e\u6a5f\u80fd\u306e\u4e00\u3064\u3068\u3057\u3066Bluemix\u4e0a\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nAlchemyAPI\u306e\u8a73\u7d30\u3068Free API key\uff08\u7121\u6599\u30c8\u30e9\u30a4\u30a2\u30eb\uff09\u306e\u53d6\u5f97\u65b9\u6cd5\u306f\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\u4eca\u56de\u306f\u3001\u9854\u8a8d\u8b58\u306eAPI\u300cImageGetRankedImageFaceTags\u300d\u3092\u4f7f\u3063\u3066\u3001iOS\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u9854\u304c\u542b\u307e\u308c\u308b\u753b\u50cf\u3092\u89e3\u6790\u3057\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u60c5\u5831\u3092\u8fd4\u3057\u3066\u304f\u308c\u308bAPI\u3067\u3059\u3002\n\n\u691c\u51fa\u3055\u308c\u305f\u9854\u306e\u5ea7\u6a19\n\u6027\u5225\u3068\u78ba\u7387\n\u5e74\u9f62\u3068\u78ba\u7387\n\u540d\u524d\u3001\u8077\u696d\u306a\u3069\u306e\u30bf\u30b0\n\u8907\u6570\u4eba\u306e\u5834\u5408\u306f\u914d\u5217\u3068\u306a\u3063\u3066\u3044\u308b\n\n\u6709\u540d\u4eba\u3067\u306f\u306a\u3044\u5834\u5408\u3001\u540d\u524d\u3068\u30bf\u30b0\u3092\u9664\u304f\u9805\u76ee\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\n\u6027\u5225\u30fb\u5e74\u9f62\u306e\u89e3\u6790\u7d50\u679c\u306f\u7d50\u69cb\u6b63\u78ba\u3067\u3001\u81ea\u5206\u3001\u4e21\u89aa\u3001\u59bb\u3001\u5b50\u4f9b\u306a\u3069\u306e\u5199\u771f\u3067\u8a66\u3057\u305f\u3068\u3053\u308d\u3001\u307b\u3068\u3093\u3069\u6b63\u89e3\u3067\u3057\u305f\u3002\n\u305f\u3060\u3057\u3001\u81ea\u5206\u306e\u9854\u3092\u9001\u3063\u305f\u3089\"Naoto Kan\"\uff08\u83c5\u76f4\u4eba\uff09\u3068\u540d\u524d\u304c\u8fd4\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\u4eca\u307e\u3067\u4f3c\u3066\u308b\u3068\u8a00\u308f\u308c\u305f\u3053\u3068\u306a\u3044\u3067\u3059\uff08\u7b11\uff09\n\u9854\u89e3\u6790\u4ee5\u5916\u306b\u3082\u3044\u308d\u3044\u308d\u306a\u753b\u50cf\u89e3\u6790API\u304c\u3042\u308a\u307e\u3059\u3002\n\u98f2\u98df\u5e97\u306e\u53e3\u30b3\u30df\u30b5\u30fc\u30d3\u30b9\u3067\u3001\u5199\u771f\u304b\u3089\u6599\u7406\u540d\u3092\u89e3\u6790\u3057\u3066\u30bf\u30b0\u4ed8\u3051\u3057\u305f\u308a\u3068\u304b\u3001\u305d\u3093\u306a\u4f7f\u3044\u9053\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\nAlchemyVisionAPI\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\nFree API key\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u30011\u65e5\u3042\u305f\u308a1000\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3068\u3044\u3046\u5236\u9650\u304c\u3042\u308a\u307e\u3059\u3002\n\u300c\u30ea\u30af\u30a8\u30b9\u30c81000\u56de\u300d\u3067\u306f\u306a\u304fAPI\u5185\u90e8\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\u307e\u305f\u5546\u7528\u5229\u7528\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u6271\u3044\u306b\u3064\u3044\u3066\u306f\u672a\u8abf\u67fb\u3067\u3059\u3002\n\nAPI\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3002\u2192AlchemyVisionAPI\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167\n\u305f\u3060\u3057\u3001\u30dc\u30c7\u30a3\u306b\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30ca\u30ea\u306e\u307e\u307e\u30a8\u30f3\u30b3\u30fc\u30c9\u306a\u3057\u3067\u30bb\u30c3\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3002\n\u3053\u308c\u306f\u3001curl\u30b3\u30de\u30f3\u30c9\u306e\"--data-binary\"\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\n\u30ec\u30b9\u30dd\u30f3\u30b9\uff08JSON\uff09\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n{\n  \"usage\" : \"By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http:\\/\\/www.alchemyapi.com\\/company\\/terms.html\",\n  \"NOTICE\" : \"THIS API FUNCTIONALITY IS DEPRECATED AND HAS BEEN MIGRATED TO WATSON VISUAL RECOGNITION. THIS API WILL BE DISABLED ON MAY 19, 2017.\",\n  \"status\" : \"OK\",\n  \"totalTransactions\" : \"4\",\n  \"imageFaces\" : [\n    {\n      \"gender\" : {\n        \"score\" : \"0.99593\",\n        \"gender\" : \"MALE\"\n      },\n      \"height\" : \"175\",\n      \"positionX\" : \"200\",\n      \"age\" : {\n        \"score\" : \"0.43953\",\n        \"ageRange\" : \"55-64\"\n      },\n      \"width\" : \"175\",\n      \"positionY\" : \"65\",\n      \"identity\" : {\n        \"name\" : \"Barack Obama\",\n        \"score\" : \"0.970688\",\n        \"disambiguated\" : {\n          \"website\" : \"http:\\/\\/www.whitehouse.gov\\/\",\n          \"yago\" : \"http:\\/\\/yago-knowledge.org\\/resource\\/Barack_Obama\",\n          \"subType\" : [\n            \"Person\",\n            \"Politician\",\n            \"President\",\n            \"Appointer\",\n            \"AwardWinner\",\n            \"Celebrity\",\n            \"PoliticalAppointer\",\n            \"U.S.Congressperson\",\n            \"USPresident\",\n            \"TVActor\"\n          ],\n          \"dbpedia\" : \"http:\\/\\/dbpedia.org\\/resource\\/Barack_Obama\",\n          \"name\" : \"Barack Obama\",\n          \"freebase\" : \"http:\\/\\/rdf.freebase.com\\/ns\\/m.02mjmr\"\n        }\n      }\n    }\n  ]\n}\n\n\n\u958b\u767a\u74b0\u5883\nXcode7.3\n\n\u4f7f\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\nJSON\u3092\u6271\u3044\u6613\u304f\u3057\u3066\u304f\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u300cSwiftyJson\u300d\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\u30e9\u30a4\u30d6\u30e9\u30ea\u7ba1\u7406\u30c4\u30fc\u30eb\u3068\u3057\u3066\u300cCarthage\u300d\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\nAPI\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u3064\u3044\u3066\u300cAlamofire\u300d\u3092\u4f7f\u3063\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u4e0a\u624b\u304f\u3044\u304b\u305a\u8ae6\u3081\u307e\u3057\u305f\u3002\nPOST\u306f\u6b63\u5e38\u306b\u3067\u304d\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u3042\u308c\u3053\u308c\u8a66\u3057\u3066\u3082\u89e3\u6790\u7d50\u679c\u304cnull\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\uff03Alamofire\u306fcurl\u30b3\u30de\u30f3\u30c9\u306e\"--data-binary\"\u306b\u76f8\u5f53\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6301\u3063\u3066\u3044\u306a\u3044\uff1f\n\u6700\u7d42\u7684\u306b\u306f\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n\u30b9\u30c8\u30fc\u30ea\u30fc\u30dc\u30fc\u30c9\n\n\nMainViewController\n\u6700\u521d\u306e\u753b\u9762\u3067\u3059\u3002\n\n\u30d5\u30a9\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306eUIImageView\n\u30d5\u30a9\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8d77\u52d5\u3059\u308b\u305f\u3081\u306eUIButton\n\u89e3\u6790\uff08API\u9023\u643a\uff09\u3092\u958b\u59cb\u3059\u308b\u305f\u3081\u306eUIButton\n\u89e3\u6790\u5f85\u3061\u7528UIActivityIndicatorView\nSegue: Identifier=\"next\"\n\n\nSubViewController\n\u89e3\u6790\u7d50\u679c\u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u753b\u9762\u3067\u3059\u3002\n\n\u89e3\u6790\u7d50\u679c\u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306eUIImageView\n\u753b\u50cf\u3092\u30ba\u30fc\u30e0\u3059\u308b\u305f\u3081\u306eUIScrollView\n\n\n\u30b3\u30fc\u30c9\n\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306f\u7518\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u30fc\u30c7\u30b6\u30a4\u30f3\uff08MV?\uff09\u3082\u3001\u5927\u3057\u305f\u898f\u6a21\u3067\u306f\u306a\u3044\u306e\u3067\u3042\u3048\u3066\u7121\u8996\u3057\u3066\u3044\u307e\u3059\u3002\n\nAppDelegate.swift\nimport UIKit\n\n// \u89e3\u6790\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u30af\u30e9\u30b9\nclass AnalyzedFace {\n    var height: String?\n    var width: String?\n    var positionX: String?\n    var positionY: String?\n    var gender: String?\n    var genderScore: String?\n    var ageRange: String?\n    var ageScore: String?\n    var name: String?\n}\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    //ViewController\u9593\u3067\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u6e21\u3057\u3059\u308b\u305f\u3081\u306e\u5909\u6570\n    var analyzedImage: UIImage?\n    var analyzedFaces: Array<AnalyzedFace> = []\n\n(\u4ee5\u4e0b\u7565)\n\n\n\nMainViewController.swift\nimport UIKit\nimport SwiftyJSON\nimport Photos\n\nclass MainViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n\n    // \u9078\u629e\u3055\u308c\u305f\u753b\u50cf\n    @IBOutlet weak var selectedImageView: UIImageView!\n    // \u89e3\u6790\u4e2d\u306e\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\n    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!\n\n    // MARK: Event\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n\n    // MARK: Action\n\n    /// \u753b\u50cf\u9078\u629e\u30dc\u30bf\u30f3Tap\n    @IBAction func SelectPicButtonTapped(sender: AnyObject) {\n        if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.PhotoLibrary) {\n            let controller = UIImagePickerController()\n            controller.delegate = self\n            controller.sourceType = UIImagePickerControllerSourceType.PhotoLibrary\n            self.presentViewController(controller, animated: true, completion: nil)\n        }\n    }\n\n    /// \u89e3\u6790\u958b\u59cb\u30dc\u30bf\u30f3Tap\n    @IBAction func goButtonTaped(sender: UIButton) {\n        if self.selectedImageView.image == nil {\n            return\n        }\n        callAlchemyAPI(self.selectedImageView.image!)\n    }\n\n    // MARK: Delegate\n\n    /// UIImagePickerControllerDelegate\uff1a\u753b\u50cf\u9078\u629e\u6642\n    func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) {\n        picker.dismissViewControllerAnimated(true, completion: nil)\n        guard let image = info[UIImagePickerControllerOriginalImage] else {\n            return\n        }\n        self.selectedImageView.image = image as? UIImage\n    }\n\n    // MARK: Method\n\n    /// AlchemyAPI\u9023\u643a\n    /// - parameter image: \u89e3\u6790\u5bfe\u8c61\u753b\u50cf\u30a4\u30e1\u30fc\u30b8\n    func callAlchemyAPI(image: UIImage) {\n        let APIKey = \"(AlchemyVision\u306eAPIKey)\"\n        let url = \"https://gateway-a.watsonplatform.net/calls/image/ImageGetRankedImageFaceTags?imagePostMode=raw&outputMode=json&apikey=\" + APIKey\n\n        let destURL = NSURL(string: url)!\n\n        // API\u4ed5\u69d8\u306e\u753b\u50cf\u30b5\u30a4\u30ba\uff081MB\uff09\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b\n        let maxSize:Double = 1024 * 768\n        var ratio: CGFloat = 1\n        if Double(image.size.width * image.size.height) > maxSize {\n            ratio = CGFloat(maxSize / Double(image.size.width * image.size.height))\n        }        \n        let imageData = UIImageJPEGRepresentation(image, ratio)\n\n        let request = NSMutableURLRequest(URL: destURL)\n        request.HTTPMethod = \"POST\"\n        request.setValue(\"application/x-www-form-urlencoded\", forHTTPHeaderField: \"Content-Type\")\n        request.HTTPBody = imageData\n\n        self.activityIndicator.startAnimating()\n\n        let task = NSURLSession.sharedSession().dataTaskWithRequest(request) {\n            data, response, error in\n\n            if error == nil {\n                let json = JSON(data: data!)\n                print(json)\n\n                // \u89e3\u6790\u7d50\u679c\u306fAppDelegate\u306e\u5909\u6570\u3092\u7d4c\u7531\u3057\u3066SubView\u306b\u6e21\u3059\n                let appDelegate: AppDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n                appDelegate.analyzedFaces = []\n                // \u30ec\u30b9\u30dd\u30f3\u30b9\u306eimageFaces\u8981\u7d20\u306f\u914d\u5217\u3068\u306a\u3063\u3066\u3044\u308b\uff08\u8907\u6570\u4eba\u304c\u6620\u3063\u305f\u753b\u50cf\u306e\u89e3\u6790\u304c\u53ef\u80fd\uff09\n                let facesJson = json[\"imageFaces\"].arrayValue\n                for faceJson in facesJson {\n                    let face = AnalyzedFace()\n                    face.height = faceJson[\"height\"].string\n                    face.width = faceJson[\"width\"].string\n                    face.positionX = faceJson[\"positionX\"].string\n                    face.positionY = faceJson[\"positionY\"].string\n                    face.gender = faceJson[\"gender\"][\"gender\"].string\n                    face.genderScore = faceJson[\"gender\"][\"score\"].string\n                    face.ageRange = faceJson[\"age\"][\"ageRange\"].string\n                    face.ageScore = faceJson[\"age\"][\"score\"].string\n                    if faceJson[\"identity\"][\"name\"].string != nil {\n                        face.name = faceJson[\"identity\"][\"name\"].string\n                    } else {\n                        face.name = \"\"\n                    }\n                    appDelegate.analyzedFaces.append(face)\n                }\n                appDelegate.analyzedImage = UIImage.init(data: imageData!)\n\n                // \u30ea\u30af\u30a8\u30b9\u30c8\u306f\u975e\u540c\u671f\u306e\u305f\u3081\u753b\u9762\u9077\u79fb\u3092mainQueue\u3067\u884c\u308f\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\n                NSOperationQueue.mainQueue().addOperationWithBlock(\n                    {\n                        self.activityIndicator.stopAnimating()\n                        if appDelegate.analyzedFaces.count > 0 {\n                            self.performSegueWithIdentifier(\"next\", sender: self)\n                        } else {\n                            let actionSheet = UIAlertController(title:\"\u30a8\u30e9\u30fc\", message: \"\u9854\u691c\u51fa\u3055\u308c\u307e\u305b\u3093\u3067\u3057\u305f\", preferredStyle: UIAlertControllerStyle.Alert)\n                            let actionCancel = UIAlertAction(title: \"\u30ad\u30e3\u30f3\u30bb\u30eb\", style: UIAlertActionStyle.Cancel, handler: {action in\n                            })\n                            actionSheet.addAction(actionCancel)\n                            self.presentViewController(actionSheet, animated: true, completion: nil)\n                        }\n                    }\n                )\n            }\n        }\n        task.resume()\n    }\n\n }\n\n\n\n\nSubViewController.swift\nimport UIKit\n\nclass SubViewController: UIViewController, UIScrollViewDelegate {\n\n    // \u89e3\u6790\u7d50\u679cImageView\u306e\u89aa\u3067\u3042\u308bScrollView\n    @IBOutlet weak var resultScrollView: UIScrollView!\n    // \u89e3\u6790\u7d50\u679c\u753b\u50cf\u306eImageView\n    @IBOutlet weak var resultImageView: UIImageView!\n\n    // MARK: Event\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.resultScrollView.delegate = self\n        self.resultScrollView.maximumZoomScale = 4.0\n        self.resultScrollView.minimumZoomScale = 0.4\n        self.setResult()\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n\n    // MARK: Delegate\n\n    /// UIScrollViewDelegate\uff1a\u89e3\u6790\u7d50\u679cImageView\u306e\u89aa\u3067\u3042\u308bScrollView\u306eZoom\u6642\n    func viewForZoomingInScrollView(scrollView: UIScrollView) -> UIView? {\n        return self.resultImageView\n    }\n\n    // MARK: Method\n\n    /// \u89e3\u6790\u5bfe\u8c61\u753b\u50cf\u3068\u89e3\u6790\u7d50\u679c\uff08\u30c6\u30ad\u30b9\u30c8\u3068\u9854\u306e\u77e9\u5f62\uff09\u3092\u5408\u6210\u3059\u308b\n    func setResult() {\n\n        // \u89e3\u6790\u7d50\u679c\u306fAppDelegate\u306e\u5909\u6570\u3092\u7d4c\u7531\u3057\u3066\u53d7\u3051\u53d6\u308b\n        let appDelegate: AppDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n        let drawImage = appDelegate.analyzedImage!\n\n        let imageWidth = appDelegate.analyzedImage!.size.width\n        let imageHeight = appDelegate.analyzedImage!.size.height\n        let rect = CGRectMake(0, 0, imageWidth, imageHeight)\n\n        UIGraphicsBeginImageContext(appDelegate.analyzedImage!.size)\n        drawImage.drawInRect(rect)\n\n        let analyzedFaces = appDelegate.analyzedFaces\n        var outputText: String\n        let font = UIFont.boldSystemFontOfSize(30)\n        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle\n        let textFontAttributes = [\n            NSFontAttributeName: font,\n            NSForegroundColorAttributeName: UIColor.orangeColor(),\n            NSParagraphStyleAttributeName: textStyle\n        ]\n\n        for i in 0...analyzedFaces.count - 1 {\n            // \u9854\u306e\u77e9\u5f62\u63cf\u753b\n            let roundRect = UIBezierPath(\n                roundedRect: CGRectMake(\n                    CGFloat(Double(analyzedFaces[i].positionX!)!),\n                    CGFloat(Double(analyzedFaces[i].positionY!)!),\n                    CGFloat(Double(analyzedFaces[i].width!)!),\n                    CGFloat(Double(analyzedFaces[i].height!)!)),\n                cornerRadius: 10)\n            UIColor.orangeColor().setStroke()\n            roundRect.lineWidth = 6\n            roundRect.stroke()\n\n            // \u30c6\u30ad\u30b9\u30c8\u306e\u63cf\u753b\n            outputText = \"\"\n            if let gender = analyzedFaces[i].gender {\n                if gender == \"MALE\" {\n                    outputText += \"\u7537\u6027 \"\n                } else {\n                    outputText += \"\u5973\u6027 \"\n                }\n            }\n            if let genderScore = analyzedFaces[i].genderScore {\n                let outputGenderScore: Double = floor(Double(genderScore)! * 1000) / 10\n                outputText += \"\\(outputGenderScore)\" + \"%\\n\"\n            }\n            if let ageRange = analyzedFaces[i].ageRange {\n                outputText += \"\\(ageRange)\" + \"\u624d \"\n            }\n            if let ageScore = analyzedFaces[i].ageScore {\n                let outputAgeScore: Double = floor(Double(ageScore)! * 1000) / 10\n                outputText += \"\\(outputAgeScore)\" + \"%\\n\"\n            }\n            if let name = analyzedFaces[i].name {\n                outputText += \"\\(name)\"\n            }\n            let margin: Double = 10 //\u77e9\u5f62\u3068\u30c6\u30ad\u30b9\u30c8\u306e\u30de\u30fc\u30b8\u30f3\n            let textRect = CGRectMake(\n                CGFloat(Double(analyzedFaces[i].positionX!)!),\n                CGFloat(Double(analyzedFaces[i].positionY!)! + Double(analyzedFaces[i].height!)! + margin),\n                250,\n                250)\n\n            outputText.drawInRect(textRect, withAttributes: textFontAttributes)\n        }\n\n        let newImage = UIGraphicsGetImageFromCurrentImageContext()\n        UIGraphicsEndImageContext()\n        self.resultImageView.image = newImage\n    }\n}\n\n\n\n\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\nhttps://github.com/y-some/AlchemyTest\n# \u8ffd\u8a18\uff1a Dec-11. 2016\n\nAlchemy Vision \u306f\u3001[Visual Recognition](http://www.ibm.com/watson/developercloud/doc/visual-recognition/) \u306b\u7d71\u5408\u3055\u308c\u307e\u3057\u305f\u3002\n\n# \u8ffd\u8a18\uff1a Dec-26. 2016\n\n\u672c\u7a3f\u306e\u30a2\u30d7\u30ea\u3092\u3001Visual Recognition\u304a\u3088\u3073Swift 3.0\u3092\u4f7f\u7528\u3057\u3066\u3001\u4f5c\u308a\u76f4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nhttp://qiita.com/y-some/items/45e2c99b91485638e05b\n\n# \u306f\u3058\u3081\u306b\n\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/122917/a5787e45-0c70-ae55-c395-bd574dd0c14f.gif\" width=\"400\" alt=\"AlchemyTest_6s.gif\">\n\n[\u52d5\u753b\u306f\u3053\u3061\u3089](https://youtu.be/j_CD3K_Fuik)\n\nAlchemyVisionAPI\u306f\u3001AlchemyAPI\u306e\u4e2d\u306e\u753b\u50cf\u8a8d\u8b58\u95a2\u9023\u306eAPI\u3067\u3059\u3002\nAlchemyAPI\u306b\u306f\u3001\u305d\u306e\u4ed6\u306b\u30c6\u30ad\u30b9\u30c8\u89e3\u8aad\u306a\u3069\u306e\u6a5f\u80fd\u3082\u3042\u308a\u307e\u3059\u3002\n\n\u5143\u3005\u306fAlchemyAPI\u793e\u304c\u958b\u767a\u3057\u305f\u6280\u8853\u3067\u30012015\u5e743\u6708\u306bIBM\u304c\u8cb7\u53ce\u3057\u307e\u3057\u305f\u3002\n\u73fe\u5728\u306fWatson\u306e\u6a5f\u80fd\u306e\u4e00\u3064\u3068\u3057\u3066Bluemix\u4e0a\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nAlchemyAPI\u306e\u8a73\u7d30\u3068Free API key\uff08\u7121\u6599\u30c8\u30e9\u30a4\u30a2\u30eb\uff09\u306e\u53d6\u5f97\u65b9\u6cd5\u306f[\u3053\u3061\u3089\u306e\u8a18\u4e8b](http://qiita.com/y_some/items/e637d30a835655894a59)\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n\u4eca\u56de\u306f\u3001\u9854\u8a8d\u8b58\u306eAPI\u300cImageGetRankedImageFaceTags\u300d\u3092\u4f7f\u3063\u3066\u3001iOS\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u9854\u304c\u542b\u307e\u308c\u308b\u753b\u50cf\u3092\u89e3\u6790\u3057\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u60c5\u5831\u3092\u8fd4\u3057\u3066\u304f\u308c\u308bAPI\u3067\u3059\u3002\n\n- \u691c\u51fa\u3055\u308c\u305f\u9854\u306e\u5ea7\u6a19\n- \u6027\u5225\u3068\u78ba\u7387\n- \u5e74\u9f62\u3068\u78ba\u7387\n- \u540d\u524d\u3001\u8077\u696d\u306a\u3069\u306e\u30bf\u30b0\n- \u8907\u6570\u4eba\u306e\u5834\u5408\u306f\u914d\u5217\u3068\u306a\u3063\u3066\u3044\u308b\n\n\u6709\u540d\u4eba\u3067\u306f\u306a\u3044\u5834\u5408\u3001\u540d\u524d\u3068\u30bf\u30b0\u3092\u9664\u304f\u9805\u76ee\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\n\n\u6027\u5225\u30fb\u5e74\u9f62\u306e\u89e3\u6790\u7d50\u679c\u306f\u7d50\u69cb\u6b63\u78ba\u3067\u3001\u81ea\u5206\u3001\u4e21\u89aa\u3001\u59bb\u3001\u5b50\u4f9b\u306a\u3069\u306e\u5199\u771f\u3067\u8a66\u3057\u305f\u3068\u3053\u308d\u3001\u307b\u3068\u3093\u3069\u6b63\u89e3\u3067\u3057\u305f\u3002\n\u305f\u3060\u3057\u3001\u81ea\u5206\u306e\u9854\u3092\u9001\u3063\u305f\u3089\"Naoto Kan\"\uff08\u83c5\u76f4\u4eba\uff09\u3068\u540d\u524d\u304c\u8fd4\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\u4eca\u307e\u3067\u4f3c\u3066\u308b\u3068\u8a00\u308f\u308c\u305f\u3053\u3068\u306a\u3044\u3067\u3059\uff08\u7b11\uff09\n\n\u9854\u89e3\u6790\u4ee5\u5916\u306b\u3082\u3044\u308d\u3044\u308d\u306a\u753b\u50cf\u89e3\u6790API\u304c\u3042\u308a\u307e\u3059\u3002\n\u98f2\u98df\u5e97\u306e\u53e3\u30b3\u30df\u30b5\u30fc\u30d3\u30b9\u3067\u3001\u5199\u771f\u304b\u3089\u6599\u7406\u540d\u3092\u89e3\u6790\u3057\u3066\u30bf\u30b0\u4ed8\u3051\u3057\u305f\u308a\u3068\u304b\u3001\u305d\u3093\u306a\u4f7f\u3044\u9053\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n[AlchemyVisionAPI\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9](https://watson-api-explorer.mybluemix.net/apis/alchemy-vision-v1)\n\nFree API key\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u30011\u65e5\u3042\u305f\u308a1000\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3068\u3044\u3046\u5236\u9650\u304c\u3042\u308a\u307e\u3059\u3002\n\u300c\u30ea\u30af\u30a8\u30b9\u30c81000\u56de\u300d\u3067\u306f\u306a\u304fAPI\u5185\u90e8\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\u307e\u305f\u5546\u7528\u5229\u7528\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u6271\u3044\u306b\u3064\u3044\u3066\u306f\u672a\u8abf\u67fb\u3067\u3059\u3002\n\n# API\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3002\u2192[AlchemyVisionAPI\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9](https://watson-api-explorer.mybluemix.net/apis/alchemy-vision-v1)\u3092\u53c2\u7167\n\u305f\u3060\u3057\u3001\u30dc\u30c7\u30a3\u306b\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30ca\u30ea\u306e\u307e\u307e\u30a8\u30f3\u30b3\u30fc\u30c9\u306a\u3057\u3067\u30bb\u30c3\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3002\n\u3053\u308c\u306f\u3001curl\u30b3\u30de\u30f3\u30c9\u306e\"--data-binary\"\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\n\n\u30ec\u30b9\u30dd\u30f3\u30b9\uff08JSON\uff09\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n```\n{\n  \"usage\" : \"By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http:\\/\\/www.alchemyapi.com\\/company\\/terms.html\",\n  \"NOTICE\" : \"THIS API FUNCTIONALITY IS DEPRECATED AND HAS BEEN MIGRATED TO WATSON VISUAL RECOGNITION. THIS API WILL BE DISABLED ON MAY 19, 2017.\",\n  \"status\" : \"OK\",\n  \"totalTransactions\" : \"4\",\n  \"imageFaces\" : [\n    {\n      \"gender\" : {\n        \"score\" : \"0.99593\",\n        \"gender\" : \"MALE\"\n      },\n      \"height\" : \"175\",\n      \"positionX\" : \"200\",\n      \"age\" : {\n        \"score\" : \"0.43953\",\n        \"ageRange\" : \"55-64\"\n      },\n      \"width\" : \"175\",\n      \"positionY\" : \"65\",\n      \"identity\" : {\n        \"name\" : \"Barack Obama\",\n        \"score\" : \"0.970688\",\n        \"disambiguated\" : {\n          \"website\" : \"http:\\/\\/www.whitehouse.gov\\/\",\n          \"yago\" : \"http:\\/\\/yago-knowledge.org\\/resource\\/Barack_Obama\",\n          \"subType\" : [\n            \"Person\",\n            \"Politician\",\n            \"President\",\n            \"Appointer\",\n            \"AwardWinner\",\n            \"Celebrity\",\n            \"PoliticalAppointer\",\n            \"U.S.Congressperson\",\n            \"USPresident\",\n            \"TVActor\"\n          ],\n          \"dbpedia\" : \"http:\\/\\/dbpedia.org\\/resource\\/Barack_Obama\",\n          \"name\" : \"Barack Obama\",\n          \"freebase\" : \"http:\\/\\/rdf.freebase.com\\/ns\\/m.02mjmr\"\n        }\n      }\n    }\n  ]\n}\n```\n\n# \u958b\u767a\u74b0\u5883\n\nXcode7.3\n\n# \u4f7f\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\n\nJSON\u3092\u6271\u3044\u6613\u304f\u3057\u3066\u304f\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u300cSwiftyJson\u300d\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\u30e9\u30a4\u30d6\u30e9\u30ea\u7ba1\u7406\u30c4\u30fc\u30eb\u3068\u3057\u3066\u300cCarthage\u300d\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\nAPI\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u3064\u3044\u3066\u300cAlamofire\u300d\u3092\u4f7f\u3063\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u4e0a\u624b\u304f\u3044\u304b\u305a\u8ae6\u3081\u307e\u3057\u305f\u3002\nPOST\u306f\u6b63\u5e38\u306b\u3067\u304d\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u3042\u308c\u3053\u308c\u8a66\u3057\u3066\u3082\u89e3\u6790\u7d50\u679c\u304cnull\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\uff03Alamofire\u306fcurl\u30b3\u30de\u30f3\u30c9\u306e\"--data-binary\"\u306b\u76f8\u5f53\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6301\u3063\u3066\u3044\u306a\u3044\uff1f\n\n\u6700\u7d42\u7684\u306b\u306f[\u3053\u3061\u3089\u306e\u8a18\u4e8b](http://qiita.com/Godai_Aoki/items/475c7eb344571cf25882)\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n# \u30b9\u30c8\u30fc\u30ea\u30fc\u30dc\u30fc\u30c9\n\n<img width=\"1440\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-05-13 6.15.52.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/122917/3fef60e9-c4bd-583c-749c-22a8186b040e.png\">\n\n### MainViewController\n\n\u6700\u521d\u306e\u753b\u9762\u3067\u3059\u3002\n\n- \u30d5\u30a9\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u9078\u629e\u3055\u308c\u305f\u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306eUIImageView\n- \u30d5\u30a9\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8d77\u52d5\u3059\u308b\u305f\u3081\u306eUIButton\n- \u89e3\u6790\uff08API\u9023\u643a\uff09\u3092\u958b\u59cb\u3059\u308b\u305f\u3081\u306eUIButton\n- \u89e3\u6790\u5f85\u3061\u7528UIActivityIndicatorView\n- Segue: Identifier=\"next\"\n\n### SubViewController\n\n\u89e3\u6790\u7d50\u679c\u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u753b\u9762\u3067\u3059\u3002\n\n- \u89e3\u6790\u7d50\u679c\u753b\u50cf\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306eUIImageView\n- \u753b\u50cf\u3092\u30ba\u30fc\u30e0\u3059\u308b\u305f\u3081\u306eUIScrollView\n\n# \u30b3\u30fc\u30c9\n\n\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306f\u7518\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u30fc\u30c7\u30b6\u30a4\u30f3\uff08MV?\uff09\u3082\u3001\u5927\u3057\u305f\u898f\u6a21\u3067\u306f\u306a\u3044\u306e\u3067\u3042\u3048\u3066\u7121\u8996\u3057\u3066\u3044\u307e\u3059\u3002\n\n```lang:AppDelegate.swift\nimport UIKit\n\n// \u89e3\u6790\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u30af\u30e9\u30b9\nclass AnalyzedFace {\n    var height: String?\n    var width: String?\n    var positionX: String?\n    var positionY: String?\n    var gender: String?\n    var genderScore: String?\n    var ageRange: String?\n    var ageScore: String?\n    var name: String?\n}\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n    \n    //ViewController\u9593\u3067\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u6e21\u3057\u3059\u308b\u305f\u3081\u306e\u5909\u6570\n    var analyzedImage: UIImage?\n    var analyzedFaces: Array<AnalyzedFace> = []\n\n(\u4ee5\u4e0b\u7565)\n```\n\n```lang:MainViewController.swift\nimport UIKit\nimport SwiftyJSON\nimport Photos\n\nclass MainViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n\n    // \u9078\u629e\u3055\u308c\u305f\u753b\u50cf\n    @IBOutlet weak var selectedImageView: UIImageView!\n    // \u89e3\u6790\u4e2d\u306e\u30a4\u30f3\u30b8\u30b1\u30fc\u30bf\n    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!\n\n    // MARK: Event\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n\n    // MARK: Action\n    \n    /// \u753b\u50cf\u9078\u629e\u30dc\u30bf\u30f3Tap\n    @IBAction func SelectPicButtonTapped(sender: AnyObject) {\n        if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.PhotoLibrary) {\n            let controller = UIImagePickerController()\n            controller.delegate = self\n            controller.sourceType = UIImagePickerControllerSourceType.PhotoLibrary\n            self.presentViewController(controller, animated: true, completion: nil)\n        }\n    }\n    \n    /// \u89e3\u6790\u958b\u59cb\u30dc\u30bf\u30f3Tap\n    @IBAction func goButtonTaped(sender: UIButton) {\n        if self.selectedImageView.image == nil {\n            return\n        }\n        callAlchemyAPI(self.selectedImageView.image!)\n    }\n    \n    // MARK: Delegate\n    \n    /// UIImagePickerControllerDelegate\uff1a\u753b\u50cf\u9078\u629e\u6642\n    func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) {\n        picker.dismissViewControllerAnimated(true, completion: nil)\n        guard let image = info[UIImagePickerControllerOriginalImage] else {\n            return\n        }\n        self.selectedImageView.image = image as? UIImage\n    }\n\n    // MARK: Method\n    \n    /// AlchemyAPI\u9023\u643a\n    /// - parameter image: \u89e3\u6790\u5bfe\u8c61\u753b\u50cf\u30a4\u30e1\u30fc\u30b8\n    func callAlchemyAPI(image: UIImage) {\n        let APIKey = \"(AlchemyVision\u306eAPIKey)\"\n        let url = \"https://gateway-a.watsonplatform.net/calls/image/ImageGetRankedImageFaceTags?imagePostMode=raw&outputMode=json&apikey=\" + APIKey\n        \n        let destURL = NSURL(string: url)!\n        \n        // API\u4ed5\u69d8\u306e\u753b\u50cf\u30b5\u30a4\u30ba\uff081MB\uff09\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b\n        let maxSize:Double = 1024 * 768\n        var ratio: CGFloat = 1\n        if Double(image.size.width * image.size.height) > maxSize {\n            ratio = CGFloat(maxSize / Double(image.size.width * image.size.height))\n        }        \n        let imageData = UIImageJPEGRepresentation(image, ratio)\n        \n        let request = NSMutableURLRequest(URL: destURL)\n        request.HTTPMethod = \"POST\"\n        request.setValue(\"application/x-www-form-urlencoded\", forHTTPHeaderField: \"Content-Type\")\n        request.HTTPBody = imageData\n\n        self.activityIndicator.startAnimating()\n        \n        let task = NSURLSession.sharedSession().dataTaskWithRequest(request) {\n            data, response, error in\n            \n            if error == nil {\n                let json = JSON(data: data!)\n                print(json)\n                \n                // \u89e3\u6790\u7d50\u679c\u306fAppDelegate\u306e\u5909\u6570\u3092\u7d4c\u7531\u3057\u3066SubView\u306b\u6e21\u3059\n                let appDelegate: AppDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n                appDelegate.analyzedFaces = []\n                // \u30ec\u30b9\u30dd\u30f3\u30b9\u306eimageFaces\u8981\u7d20\u306f\u914d\u5217\u3068\u306a\u3063\u3066\u3044\u308b\uff08\u8907\u6570\u4eba\u304c\u6620\u3063\u305f\u753b\u50cf\u306e\u89e3\u6790\u304c\u53ef\u80fd\uff09\n                let facesJson = json[\"imageFaces\"].arrayValue\n                for faceJson in facesJson {\n                    let face = AnalyzedFace()\n                    face.height = faceJson[\"height\"].string\n                    face.width = faceJson[\"width\"].string\n                    face.positionX = faceJson[\"positionX\"].string\n                    face.positionY = faceJson[\"positionY\"].string\n                    face.gender = faceJson[\"gender\"][\"gender\"].string\n                    face.genderScore = faceJson[\"gender\"][\"score\"].string\n                    face.ageRange = faceJson[\"age\"][\"ageRange\"].string\n                    face.ageScore = faceJson[\"age\"][\"score\"].string\n                    if faceJson[\"identity\"][\"name\"].string != nil {\n                        face.name = faceJson[\"identity\"][\"name\"].string\n                    } else {\n                        face.name = \"\"\n                    }\n                    appDelegate.analyzedFaces.append(face)\n                }\n                appDelegate.analyzedImage = UIImage.init(data: imageData!)\n                \n                // \u30ea\u30af\u30a8\u30b9\u30c8\u306f\u975e\u540c\u671f\u306e\u305f\u3081\u753b\u9762\u9077\u79fb\u3092mainQueue\u3067\u884c\u308f\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\n                NSOperationQueue.mainQueue().addOperationWithBlock(\n                    {\n                        self.activityIndicator.stopAnimating()\n                        if appDelegate.analyzedFaces.count > 0 {\n                            self.performSegueWithIdentifier(\"next\", sender: self)\n                        } else {\n                            let actionSheet = UIAlertController(title:\"\u30a8\u30e9\u30fc\", message: \"\u9854\u691c\u51fa\u3055\u308c\u307e\u305b\u3093\u3067\u3057\u305f\", preferredStyle: UIAlertControllerStyle.Alert)\n                            let actionCancel = UIAlertAction(title: \"\u30ad\u30e3\u30f3\u30bb\u30eb\", style: UIAlertActionStyle.Cancel, handler: {action in\n                            })\n                            actionSheet.addAction(actionCancel)\n                            self.presentViewController(actionSheet, animated: true, completion: nil)\n                        }\n                    }\n                )\n            }\n        }\n        task.resume()\n    }\n    \n }\n\n```\n\n```lang:SubViewController.swift\nimport UIKit\n\nclass SubViewController: UIViewController, UIScrollViewDelegate {\n\n    // \u89e3\u6790\u7d50\u679cImageView\u306e\u89aa\u3067\u3042\u308bScrollView\n    @IBOutlet weak var resultScrollView: UIScrollView!\n    // \u89e3\u6790\u7d50\u679c\u753b\u50cf\u306eImageView\n    @IBOutlet weak var resultImageView: UIImageView!\n    \n    // MARK: Event\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.resultScrollView.delegate = self\n        self.resultScrollView.maximumZoomScale = 4.0\n        self.resultScrollView.minimumZoomScale = 0.4\n        self.setResult()\n    }\n    \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n    \n    // MARK: Delegate\n\n    /// UIScrollViewDelegate\uff1a\u89e3\u6790\u7d50\u679cImageView\u306e\u89aa\u3067\u3042\u308bScrollView\u306eZoom\u6642\n    func viewForZoomingInScrollView(scrollView: UIScrollView) -> UIView? {\n        return self.resultImageView\n    }\n    \n    // MARK: Method\n    \n    /// \u89e3\u6790\u5bfe\u8c61\u753b\u50cf\u3068\u89e3\u6790\u7d50\u679c\uff08\u30c6\u30ad\u30b9\u30c8\u3068\u9854\u306e\u77e9\u5f62\uff09\u3092\u5408\u6210\u3059\u308b\n    func setResult() {\n        \n        // \u89e3\u6790\u7d50\u679c\u306fAppDelegate\u306e\u5909\u6570\u3092\u7d4c\u7531\u3057\u3066\u53d7\u3051\u53d6\u308b\n        let appDelegate: AppDelegate = UIApplication.sharedApplication().delegate as! AppDelegate\n        let drawImage = appDelegate.analyzedImage!\n        \n        let imageWidth = appDelegate.analyzedImage!.size.width\n        let imageHeight = appDelegate.analyzedImage!.size.height\n        let rect = CGRectMake(0, 0, imageWidth, imageHeight)\n        \n        UIGraphicsBeginImageContext(appDelegate.analyzedImage!.size)\n        drawImage.drawInRect(rect)\n\n        let analyzedFaces = appDelegate.analyzedFaces\n        var outputText: String\n        let font = UIFont.boldSystemFontOfSize(30)\n        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle\n        let textFontAttributes = [\n            NSFontAttributeName: font,\n            NSForegroundColorAttributeName: UIColor.orangeColor(),\n            NSParagraphStyleAttributeName: textStyle\n        ]\n\n        for i in 0...analyzedFaces.count - 1 {\n            // \u9854\u306e\u77e9\u5f62\u63cf\u753b\n            let roundRect = UIBezierPath(\n                roundedRect: CGRectMake(\n                    CGFloat(Double(analyzedFaces[i].positionX!)!),\n                    CGFloat(Double(analyzedFaces[i].positionY!)!),\n                    CGFloat(Double(analyzedFaces[i].width!)!),\n                    CGFloat(Double(analyzedFaces[i].height!)!)),\n                cornerRadius: 10)\n            UIColor.orangeColor().setStroke()\n            roundRect.lineWidth = 6\n            roundRect.stroke()\n            \n            // \u30c6\u30ad\u30b9\u30c8\u306e\u63cf\u753b\n            outputText = \"\"\n            if let gender = analyzedFaces[i].gender {\n                if gender == \"MALE\" {\n                    outputText += \"\u7537\u6027 \"\n                } else {\n                    outputText += \"\u5973\u6027 \"\n                }\n            }\n            if let genderScore = analyzedFaces[i].genderScore {\n                let outputGenderScore: Double = floor(Double(genderScore)! * 1000) / 10\n                outputText += \"\\(outputGenderScore)\" + \"%\\n\"\n            }\n            if let ageRange = analyzedFaces[i].ageRange {\n                outputText += \"\\(ageRange)\" + \"\u624d \"\n            }\n            if let ageScore = analyzedFaces[i].ageScore {\n                let outputAgeScore: Double = floor(Double(ageScore)! * 1000) / 10\n                outputText += \"\\(outputAgeScore)\" + \"%\\n\"\n            }\n            if let name = analyzedFaces[i].name {\n                outputText += \"\\(name)\"\n            }\n            let margin: Double = 10 //\u77e9\u5f62\u3068\u30c6\u30ad\u30b9\u30c8\u306e\u30de\u30fc\u30b8\u30f3\n            let textRect = CGRectMake(\n                CGFloat(Double(analyzedFaces[i].positionX!)!),\n                CGFloat(Double(analyzedFaces[i].positionY!)! + Double(analyzedFaces[i].height!)! + margin),\n                250,\n                250)\n            \n            outputText.drawInRect(textRect, withAttributes: textFontAttributes)\n        }\n        \n        let newImage = UIGraphicsGetImageFromCurrentImageContext()\n        UIGraphicsEndImageContext()\n        self.resultImageView.image = newImage\n    }\n}\n```\n\n# \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\n\nhttps://github.com/y-some/AlchemyTest\n", "tags": ["Bluemix", "Watson", "Alchemy", "\u4eba\u5de5\u77e5\u80fd", "Swift"]}