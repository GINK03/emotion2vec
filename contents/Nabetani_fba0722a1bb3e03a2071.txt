{"tags": ["Python", "\u3069\u3046\u66f8\u304f", "yhpg"], "context": " More than 1 year has passed since last update.\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\nhttp://atnd.org/events/40389\n\u306e\u3001\u53c2\u8003\u554f\u984c(\u9053\u306a\u308a\u306e\u4e80)\nhttp://nabetani.sakura.ne.jp/hena/ord12aloroturtle/\n\u306e\u5b9f\u88c5\u4f8b\u3002ruby\u3002\n\u4ed6\u306e\u8a00\u8a9e\u306a\u3069\u306e\u89e3\u7b54\u4f8b\u306f\nhttp://qiita.com/Nabetani/items/1de39df381dfeee305ab\n\u304b\u3089\u8fbf\u308c\u307e\u3059\u3002\n\u3067\u3002\n\u6163\u308c\u306a\u3044 python \u3067\u66f8\u3044\u3066\u307f\u305f\u3002\npython 3.3 \u3068 python 2.7 \u306e\u4e21\u65b9\u3067\u52d5\u304f\u3002\n\u3053\u3093\u306a\u611f\u3058\u3002\n#coding:utf-8\nimport re\n\nMAP =  [\n    range(i*11, i*11+11) for i in range(0,3)\n  ] + [\n    range(33+i*3, 33+i*3+3) for i in range(0,9)\n  ]\n\ndef chars( start, len ) : \n  return [ chr(c) for c in range(ord(start),ord(start)+len) ]\n\nNAMES=chars( \"A\", 26 ) + chars( \"a\", 26 ) + chars( \"0\", 10  )\n\ndef turn( d, r ):\n  return [r*d[1],-r*d[0]]\n\ndef name( t ):\n  return NAMES[ MAP[ t[0][1] & 0xff][ t[0][0]  & 0xff] & 0xff]\n\ndef move(t):\n  n=name(t)\n  for warp in [[2,11,\"efg\"], [10,2,\"567\"]]:\n    if n in warp[2] and t[1][1]==1 :\n      t[0]=[warp[0]-warp[2].index(n),warp[1]]\n      t[1]=[0,-1]\n      break\n  else:\n    t[0][0]+=t[1][0]\n    t[0][1]+=t[1][1]\n\ndef solve( src ):\n  t=[[0,0],[1,0]]\n  r=\"A\"\n  try:\n    for c in src :\n      if c==\"L\" or c==\"R\":\n        t[1]=turn(t[1], 1 if c==\"L\" else -1)\n      else:\n        for i in range(int(c,16)):\n          move(t)\n          r+=name(t)\n  except IndexError:\n    r+=\"?\"\n  return r\n\ndef test( samples ) :\n  for line in samples.splitlines():\n    a=re.split( \"\\s+\", line ) # num, input, expected\n    if 2<len(a):\n      actual = solve( a[1] )\n      ok=actual==a[2]\n      print( [ \"ok\" if ok else \"***NG***\", a[1:3], actual ] )\n\ntest( \"\"\"\n0   2RcL3LL22   ABCNYjmpsvy147edcbcdef\n1   L3R4L5RR5R3L5   A?\n40  6LR2R1LR5LRLRL484L63    ABCDEFGHITe741yxw?\"\"\" )\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\u5b9f\u88c5\u65b9\u91dd\u3068\u3057\u3066\u306f\u3001\u76f4\u4ea4\u5ea7\u6a19\u7cfb\u306b\u306a\u308b\u3088\u3046\u306b\u5730\u56f3\u3092\u8aad\u307f\u66ff\u3048\u3001\u5fc5\u8981\u306a\u5834\u6240\u3067\u30ef\u30fc\u30d7\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3002\n\u30c6\u30b9\u30c8\u3092\u9664\u3044\u3066 45\u884c\u3002\u9577\u3044\u3088\u3046\u306a\u305d\u3046\u3067\u3082\u306a\u3044\u3088\u3046\u306a\u3002\nname \u30e1\u30bd\u30c3\u30c9\u306e & 0xff \u306f\u3001\u8ca0\u306e index \u3092\u4e0d\u6b63\u306a index \u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3002\u90aa\u60aa\u306a\u611f\u3058\u3002\n\u4eca\u56de\u306f\u521d\u3081\u3066 for \u6587\u306e else \u3068 \u4f8b\u5916\u3092\u4f7f\u3063\u3066\u307f\u305f\u3002\n\u7279\u306b\u4f8b\u5916\u306f\u3088\u308d\u3057\u304f\u306a\u3044\u4f7f\u3044\u65b9\u3060\u3068\u601d\u3046\u3002\n\u3057\u304b\u3057\u4f55\u5ea6\u66f8\u3044\u3066\u3082 if \u5f0f\u306f\u6c17\u6301\u3061\u60aa\u3044\u3002\n\n\n\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\nhttp://atnd.org/events/40389\n\u306e\u3001\u53c2\u8003\u554f\u984c(\u9053\u306a\u308a\u306e\u4e80)\nhttp://nabetani.sakura.ne.jp/hena/ord12aloroturtle/\n\u306e\u5b9f\u88c5\u4f8b\u3002ruby\u3002\n\n\u4ed6\u306e\u8a00\u8a9e\u306a\u3069\u306e\u89e3\u7b54\u4f8b\u306f\nhttp://qiita.com/Nabetani/items/1de39df381dfeee305ab\n\u304b\u3089\u8fbf\u308c\u307e\u3059\u3002\n\n\u3067\u3002\n\u6163\u308c\u306a\u3044 python \u3067\u66f8\u3044\u3066\u307f\u305f\u3002\npython 3.3 \u3068 python 2.7 \u306e\u4e21\u65b9\u3067\u52d5\u304f\u3002\n\n\u3053\u3093\u306a\u611f\u3058\u3002\n\n```python\n#coding:utf-8\nimport re\n\nMAP =  [\n    range(i*11, i*11+11) for i in range(0,3)\n  ] + [\n    range(33+i*3, 33+i*3+3) for i in range(0,9)\n  ]\n\ndef chars( start, len ) : \n  return [ chr(c) for c in range(ord(start),ord(start)+len) ]\n\nNAMES=chars( \"A\", 26 ) + chars( \"a\", 26 ) + chars( \"0\", 10  )\n\ndef turn( d, r ):\n  return [r*d[1],-r*d[0]]\n\ndef name( t ):\n  return NAMES[ MAP[ t[0][1] & 0xff][ t[0][0]  & 0xff] & 0xff]\n\ndef move(t):\n  n=name(t)\n  for warp in [[2,11,\"efg\"], [10,2,\"567\"]]:\n    if n in warp[2] and t[1][1]==1 :\n      t[0]=[warp[0]-warp[2].index(n),warp[1]]\n      t[1]=[0,-1]\n      break\n  else:\n    t[0][0]+=t[1][0]\n    t[0][1]+=t[1][1]\n\ndef solve( src ):\n  t=[[0,0],[1,0]]\n  r=\"A\"\n  try:\n    for c in src :\n      if c==\"L\" or c==\"R\":\n        t[1]=turn(t[1], 1 if c==\"L\" else -1)\n      else:\n        for i in range(int(c,16)):\n          move(t)\n          r+=name(t)\n  except IndexError:\n    r+=\"?\"\n  return r\n\ndef test( samples ) :\n  for line in samples.splitlines():\n    a=re.split( \"\\s+\", line ) # num, input, expected\n    if 2<len(a):\n      actual = solve( a[1] )\n      ok=actual==a[2]\n      print( [ \"ok\" if ok else \"***NG***\", a[1:3], actual ] )\n\ntest( \"\"\"\n0   2RcL3LL22   ABCNYjmpsvy147edcbcdef\n1   L3R4L5RR5R3L5   A?\n40  6LR2R1LR5LRLRL484L63    ABCDEFGHITe741yxw?\"\"\" )\n```\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\n\u5b9f\u88c5\u65b9\u91dd\u3068\u3057\u3066\u306f\u3001\u76f4\u4ea4\u5ea7\u6a19\u7cfb\u306b\u306a\u308b\u3088\u3046\u306b\u5730\u56f3\u3092\u8aad\u307f\u66ff\u3048\u3001\u5fc5\u8981\u306a\u5834\u6240\u3067\u30ef\u30fc\u30d7\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3002\n\n\u30c6\u30b9\u30c8\u3092\u9664\u3044\u3066 45\u884c\u3002\u9577\u3044\u3088\u3046\u306a\u305d\u3046\u3067\u3082\u306a\u3044\u3088\u3046\u306a\u3002\n\nname \u30e1\u30bd\u30c3\u30c9\u306e `& 0xff` \u306f\u3001\u8ca0\u306e index \u3092\u4e0d\u6b63\u306a index \u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3002\u90aa\u60aa\u306a\u611f\u3058\u3002\n\n\u4eca\u56de\u306f\u521d\u3081\u3066 for \u6587\u306e else \u3068 \u4f8b\u5916\u3092\u4f7f\u3063\u3066\u307f\u305f\u3002\n\u7279\u306b\u4f8b\u5916\u306f\u3088\u308d\u3057\u304f\u306a\u3044\u4f7f\u3044\u65b9\u3060\u3068\u601d\u3046\u3002\n\n\u3057\u304b\u3057\u4f55\u5ea6\u66f8\u3044\u3066\u3082 if \u5f0f\u306f\u6c17\u6301\u3061\u60aa\u3044\u3002"}