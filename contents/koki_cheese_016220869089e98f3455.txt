{"context": " More than 1 year has passed since last update.Retrofit\u306fAPI Client\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u3060\u3051\u3067\u4f5c\u308c\u308b\u306e\u3067\u3068\u3066\u3082\u697d\u3061\u3093\u3067\u3059\u3002\n\u307e\u305fRetrofit\u306fRxJava\u3092\u4f7f\u3063\u3066\u975e\u540c\u671f\u306e\u51e6\u7406\u3092\u3044\u3044\u611f\u3058\u306b\u66f8\u304f\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3057HTTP\u901a\u4fe1\u306b\u306fOkHttp\u3092JSON\u306e\u30d1\u30fc\u30b9\u306b\u306fmoshi\u3092\u4f7f\u3063\u3066API\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u5b9f\u969b\u3069\u3046\u3084\u3063\u3066\u4f7f\u3046\u306e\u304b\u3092\u3084\u3063\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u74b0\u5883\nMac OSX\nAndroid Studio 2.0\nKotlin 1.0.0-beta-2423\nKotlin plugin\u3092Android Studio\u306b\u5165\u308c\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\u3068\u308a\u3042\u3048\u305aBlankActivity\u306e\u3042\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u9069\u5f53\u306b\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u4f5c\u6210\u3055\u308c\u305fJava\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u3092Kotlin\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\u4e0a\u306e\u30e1\u30cb\u30e5\u30fc\u304b\u3089Code->Convert Java File to Kotlin File\u3067\u5909\u63db\u3067\u304d\u307e\u3059\u3002\napp/build.gradle\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3057\u307e\u3059\n\nbuild.gradle\n+apply plugin: 'kotlin-android'\n\ndependencies {\n    ...\n+    compile \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n+    compile 'io.reactivex:rxkotlin:0.24.100'\n+    compile 'io.reactivex:rxandroid:1.0.1'\n+    compile 'io.reactivex:rxjava:1.0.15'\n+    compile 'com.squareup.okhttp:okhttp:2.0.0'\n+    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'\n+    compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'\n+    compile 'com.squareup.retrofit:adapter-rxjava:2.0.0-beta2'\n+    compile 'com.squareup.retrofit:converter-moshi:2.0.0-beta2'\n\n}\n\n+buildscript {\n+    ext.kotlin_version = '1.0.0-beta-2423'\n+    repositories {\n+        mavenCentral()\n+    }\n+    dependencies {\n+        classpath \"org.jetbrains.kotlin:kotlin-gradle-+plugin:$kotlin_version\"\n+        classpath \"org.jetbrains.kotlin:kotlin-android-+extensions:$kotlin_version\"\n+    }\n+}\n\n\n\u3068\u308a\u3042\u3048\u305a\u30d3\u30eb\u30c9\u304c\u901a\u308b\u3068\u3053\u308d\u307e\u3067\u306f\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\n\n\u5b9f\u88c5\nRetrofit\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306fRx\u3092\u4f7f\u3046\u306e\u304c\u76ee\u7684\u306a\u306e\u3067\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3082Rx\u7528\u306b\u3057\u307e\u3059\u3002\ninterface SplatoonService {\n    @GET(\"/schedule.json\")\n    fun schedule(): Observable<ScheduleResponse>\n}\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u623b\u308a\u5024\u304crx.Observable\u3067\u3042\u308b\u3053\u3068\u3067\u3059\u3002\nScheduleResponse\u306f\u30a4\u30ab\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\ndata class ScheduleResponse(\n        var updateTime: Long,\n        var schedule: List<Schedule>\n) : Serializable\n\ndata class Schedule(\n        var startTime: Long,\n        var endTime: Long,\n        var regular: Match,\n        var ranked: Match\n): Serializable\n\ndata class Match(\n        var maps: List<Map>,\n        var rulesJP: String = \"\u30ca\u30ef\u30d0\u30ea\u30d0\u30c8\u30eb\",\n        var rulesEN: String = \"Turf War\"\n): Serializable\n\ndata class Map(\n        var nameJP: String,\n        var nameEN: String\n): Serializable\n\nAPI\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\nfun client(): SplatoonService {\n        val moshi = Moshi.Builder()\n                .build()\n\n        val okClient = OkHttpClient()\n\n        val builder = Retrofit.Builder()\n                .client(okClient)\n                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\n                .addConverterFactory(MoshiConverterFactory.create(moshi))\n                .baseUrl(\"https://splatoon.ink\")\n                .build()\n\n        return builder.create(SplatoonService::class.java)\n}\n\n\n\u4f7f\u3044\u65b9\n\u4f7f\u3044\u65b9\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\nclient().schedule().\n       subscribeOn(Schedulers.newThread()).\n       observeOn(AndroidSchedulers.mainThread()).\n       subscribe(object : Subscriber<ScheduleResponse>(){\n           override fun onNext(r: ScheduleResponse?) {\n               ...\n           }\n\n           override fun onError(e: Throwable?) {\n               ...\n           }\n       })\n\n\n\u3053\u306e\u30b3\u30fc\u30c9\u306fUIThread\u3067\u5b9f\u884c\u3055\u308c\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\n.subscribeOn(Schedulers.newThread())\u3067\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3057\n.observeOn(AndroidSchedulers.mainThread())\u3067\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092MainThread\u3067\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5197\u9577\u306a\u3068\u3053\u308d\u3092\u3061\u3087\u3063\u3068\u826f\u304f\u3057\u3066\u307f\u308b\n\u305f\u3060\u3053\u308c\u3060\u3068\u305b\u3063\u304b\u304f\u306ekotlin\u306a\u306e\u306bsubscribe\u306e\u3068\u3053\u308d\u304c\u5197\u9577\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u30e9\u30e0\u30c0\u5f0f\u4f7f\u3063\u3066\u3082\u3063\u3068\u3044\u3044\u611f\u3058\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u62e1\u5f35\u95a2\u6570\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\npublic fun <T> Observable<T>.onError(block : (Throwable) -> Unit): KSubscription<T> {\n    return KSubscription(this).onError(block)\n}\n\npublic fun <T> Observable<T>.onCompleted(block : () -> Unit): KSubscription<T> {\n    return KSubscription(this).onCompleted(block)\n}\n\npublic fun <T> Observable<T>.onNext(block : (T) -> Unit): KSubscription<T> {\n    return KSubscription(this).onNext(block)\n}\n\npublic fun Subscription.onError(block: (Throwable) -> Unit): Subscription {\n    return this\n}\n\npublic class KSubscription<T>(val observable: Observable<T>) {\n\n    private var error: (Throwable) -> Unit = { throw it }\n    private var completed: () -> Unit = {}\n    private var next: (T) -> Unit = {}\n\n    fun onError(block: (Throwable) -> Unit): KSubscription<T> {\n        error = block\n        return this\n    }\n\n    fun onCompleted(block: () -> Unit): KSubscription<T> {\n        completed = block\n        return this\n    }\n\n    fun onNext(block: (T) -> Unit): KSubscription<T> {\n        next = block\n        return this\n    }\n\n    fun subscribe(): Subscription = observable.subscribe(object : Subscriber<T>(){\n            override fun onError(e: Throwable?) {\n                if ( e == null ) {\n                    return\n                }\n\n                error.invoke(e)\n            }\n\n            override fun onCompleted() {\n                completed.invoke()\n            }\n\n            override fun onNext(t: T) {\n                next.invoke(t)\n            }\n        })\n}\n\n\u3055\u3063\u304d\u306e\u30b3\u30fc\u30c9\u3092\u3053\u3093\u306a\u98a8\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nclient().schedule().\n       subscribeOn(Schedulers.newThread()).\n       observeOn(AndroidSchedulers.mainThread()).\n       onNext {\n           ...\n       }.\n       onError {\n           ...\n       }.\n       subscribe()\n\n\n\u307e\u3068\u3081\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u50c5\u304b\u306a\u30b3\u30fc\u30c9\u3067API\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u307e\u3041\u3061\u3083\u3093\u3068\u4f7f\u3046\u5834\u5408\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u3066\u308b\u304b\u306e\u78ba\u8a8d\u3084AccessToken\u304c\u3042\u308b\u304b\u306a\u3044\u304b\u78ba\u8a8d\u3057\u3066\u3000\u3059\u3079\u3066onError\u306b\u5165\u308c\u305f\u304b\u3063\u305f\u308a\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u304c\n\u3053\u308c\u3092Java\u3067\u3084\u308d\u3046\u3068\u3059\u308b\u3068\u30e1\u30bd\u30c3\u30c9\u3067\u4e00\u65e6\u5f15\u6570\u3068\u3057\u3066Observable\u6e21\u3055\u306a\u304d\u3083\u3044\u3051\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u3057\n\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3092\u4f5c\u308d\u3046\u3068\u601d\u3063\u305f\u3089Class\u3092\u7d99\u627f\u3057\u3066\u30e9\u30c3\u30d7\u3057\u3066\u307f\u305f\u3044\u306a\u3053\u3068\u3092\u3057\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u306e\u3092\nKotlin\u306a\u3089\u30ab\u30b8\u30e5\u30a2\u30eb\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3067\u304d\u308b\u306e\u306f\u4fbf\u5229\u3067\u3059\u306d\u3002\nRetrofit\u306fAPI Client\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u3060\u3051\u3067\u4f5c\u308c\u308b\u306e\u3067\u3068\u3066\u3082\u697d\u3061\u3093\u3067\u3059\u3002\n\n\u307e\u305fRetrofit\u306fRxJava\u3092\u4f7f\u3063\u3066\u975e\u540c\u671f\u306e\u51e6\u7406\u3092\u3044\u3044\u611f\u3058\u306b\u66f8\u304f\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3057HTTP\u901a\u4fe1\u306b\u306fOkHttp\u3092JSON\u306e\u30d1\u30fc\u30b9\u306b\u306fmoshi\u3092\u4f7f\u3063\u3066API\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n\u5b9f\u969b\u3069\u3046\u3084\u3063\u3066\u4f7f\u3046\u306e\u304b\u3092\u3084\u3063\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u74b0\u5883\nMac OSX\nAndroid Studio 2.0\nKotlin 1.0.0-beta-2423\n\nKotlin plugin\u3092Android Studio\u306b\u5165\u308c\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\n\n# \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\u3068\u308a\u3042\u3048\u305aBlankActivity\u306e\u3042\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u9069\u5f53\u306b\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u4f5c\u6210\u3055\u308c\u305fJava\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u3092Kotlin\u306b\u5909\u63db\u3057\u307e\u3059\u3002\b\n\u4e0a\u306e\u30e1\u30cb\u30e5\u30fc\u304b\u3089Code->Convert Java File to Kotlin File\u3067\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n`app/build.gradle`\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3057\u307e\u3059\n\n```diff:build.gradle\n+apply plugin: 'kotlin-android'\n\ndependencies {\n    ...\n+    compile \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n+    compile 'io.reactivex:rxkotlin:0.24.100'\n+    compile 'io.reactivex:rxandroid:1.0.1'\n+    compile 'io.reactivex:rxjava:1.0.15'\n+    compile 'com.squareup.okhttp:okhttp:2.0.0'\n+    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'\n+    compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'\n+    compile 'com.squareup.retrofit:adapter-rxjava:2.0.0-beta2'\n+    compile 'com.squareup.retrofit:converter-moshi:2.0.0-beta2'\n\n}\n\n+buildscript {\n+    ext.kotlin_version = '1.0.0-beta-2423'\n+    repositories {\n+        mavenCentral()\n+    }\n+    dependencies {\n+        classpath \"org.jetbrains.kotlin:kotlin-gradle-+plugin:$kotlin_version\"\n+        classpath \"org.jetbrains.kotlin:kotlin-android-+extensions:$kotlin_version\"\n+    }\n+}\n```\n\n\u3068\u308a\u3042\u3048\u305a\u30d3\u30eb\u30c9\u304c\u901a\u308b\u3068\u3053\u308d\u307e\u3067\u306f\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\n\n# \u5b9f\u88c5\nRetrofit\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306fRx\u3092\u4f7f\u3046\u306e\u304c\u76ee\u7684\u306a\u306e\u3067\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3082Rx\u7528\u306b\u3057\u307e\u3059\u3002\n\n```kotlin\ninterface SplatoonService {\n    @GET(\"/schedule.json\")\n    fun schedule(): Observable<ScheduleResponse>\n}\n```\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u623b\u308a\u5024\u304crx.Observable\u3067\u3042\u308b\u3053\u3068\u3067\u3059\u3002\nScheduleResponse\u306f\u30a4\u30ab\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\n\n```kotlin\ndata class ScheduleResponse(\n        var updateTime: Long,\n        var schedule: List<Schedule>\n) : Serializable\n\ndata class Schedule(\n        var startTime: Long,\n        var endTime: Long,\n        var regular: Match,\n        var ranked: Match\n): Serializable\n\ndata class Match(\n        var maps: List<Map>,\n        var rulesJP: String = \"\u30ca\u30ef\u30d0\u30ea\u30d0\u30c8\u30eb\",\n        var rulesEN: String = \"Turf War\"\n): Serializable\n\ndata class Map(\n        var nameJP: String,\n        var nameEN: String\n): Serializable\n```\n\nAPI\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n```kotlin\nfun client(): SplatoonService {\n        val moshi = Moshi.Builder()\n                .build()\n\n        val okClient = OkHttpClient()\n\n        val builder = Retrofit.Builder()\n                .client(okClient)\n                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\n                .addConverterFactory(MoshiConverterFactory.create(moshi))\n                .baseUrl(\"https://splatoon.ink\")\n                .build()\n\n        return builder.create(SplatoonService::class.java)\n}\n```\n\n# \u4f7f\u3044\u65b9\n\n\u4f7f\u3044\u65b9\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n```kotlin\nclient().schedule().\n       subscribeOn(Schedulers.newThread()).\n       observeOn(AndroidSchedulers.mainThread()).\n       subscribe(object : Subscriber<ScheduleResponse>(){\n           override fun onNext(r: ScheduleResponse?) {\n               ...\n           }\n\n           override fun onError(e: Throwable?) {\n               ...\n           }\n       })\n\n```\n\n\u3053\u306e\u30b3\u30fc\u30c9\u306fUIThread\u3067\u5b9f\u884c\u3055\u308c\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\n`.subscribeOn(Schedulers.newThread())`\u3067\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3057\n`.observeOn(AndroidSchedulers.mainThread())`\u3067\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092MainThread\u3067\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u5197\u9577\u306a\u3068\u3053\u308d\u3092\u3061\u3087\u3063\u3068\u826f\u304f\u3057\u3066\u307f\u308b\n\n\u305f\u3060\u3053\u308c\u3060\u3068\u305b\u3063\u304b\u304f\u306ekotlin\u306a\u306e\u306bsubscribe\u306e\u3068\u3053\u308d\u304c\u5197\u9577\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u30e9\u30e0\u30c0\u5f0f\u4f7f\u3063\u3066\u3082\u3063\u3068\u3044\u3044\u611f\u3058\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u62e1\u5f35\u95a2\u6570\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n```kotlin\npublic fun <T> Observable<T>.onError(block : (Throwable) -> Unit): KSubscription<T> {\n    return KSubscription(this).onError(block)\n}\n\npublic fun <T> Observable<T>.onCompleted(block : () -> Unit): KSubscription<T> {\n    return KSubscription(this).onCompleted(block)\n}\n\npublic fun <T> Observable<T>.onNext(block : (T) -> Unit): KSubscription<T> {\n    return KSubscription(this).onNext(block)\n}\n\npublic fun Subscription.onError(block: (Throwable) -> Unit): Subscription {\n    return this\n}\n\npublic class KSubscription<T>(val observable: Observable<T>) {\n\n    private var error: (Throwable) -> Unit = { throw it }\n    private var completed: () -> Unit = {}\n    private var next: (T) -> Unit = {}\n\n    fun onError(block: (Throwable) -> Unit): KSubscription<T> {\n        error = block\n        return this\n    }\n\n    fun onCompleted(block: () -> Unit): KSubscription<T> {\n        completed = block\n        return this\n    }\n\n    fun onNext(block: (T) -> Unit): KSubscription<T> {\n        next = block\n        return this\n    }\n\n    fun subscribe(): Subscription = observable.subscribe(object : Subscriber<T>(){\n            override fun onError(e: Throwable?) {\n                if ( e == null ) {\n                    return\n                }\n\n                error.invoke(e)\n            }\n\n            override fun onCompleted() {\n                completed.invoke()\n            }\n\n            override fun onNext(t: T) {\n                next.invoke(t)\n            }\n        })\n}\n```\n\n\u3055\u3063\u304d\u306e\u30b3\u30fc\u30c9\u3092\u3053\u3093\u306a\u98a8\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```kotlin\nclient().schedule().\n       subscribeOn(Schedulers.newThread()).\n       observeOn(AndroidSchedulers.mainThread()).\n       onNext {\n           ...\n       }.\n       onError {\n           ...\n       }.\n       subscribe()\n```\n\n# \u307e\u3068\u3081\n\n![Screenshot_20151204-031131.jpg](https://qiita-image-store.s3.amazonaws.com/0/15818/f7d54c42-3499-a5d9-1995-8c0633408923.jpeg)\n\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u50c5\u304b\u306a\u30b3\u30fc\u30c9\u3067API\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u307e\u3041\u3061\u3083\u3093\u3068\u4f7f\u3046\u5834\u5408\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u3064\u306a\u304c\u3063\u3066\u308b\u304b\u306e\u78ba\u8a8d\u3084AccessToken\u304c\u3042\u308b\u304b\u306a\u3044\u304b\u78ba\u8a8d\u3057\u3066\u3000\u3059\u3079\u3066onError\u306b\u5165\u308c\u305f\u304b\u3063\u305f\u308a\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u304c\n\u3053\u308c\u3092Java\u3067\u3084\u308d\u3046\u3068\u3059\u308b\u3068\u30e1\u30bd\u30c3\u30c9\u3067\u4e00\u65e6\u5f15\u6570\u3068\u3057\u3066Observable\u6e21\u3055\u306a\u304d\u3083\u3044\u3051\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u3057\n\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3092\u4f5c\u308d\u3046\u3068\u601d\u3063\u305f\u3089Class\u3092\u7d99\u627f\u3057\u3066\u30e9\u30c3\u30d7\u3057\u3066\u307f\u305f\u3044\u306a\u3053\u3068\u3092\u3057\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u306e\u3092\nKotlin\u306a\u3089\u30ab\u30b8\u30e5\u30a2\u30eb\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3067\u304d\u308b\u306e\u306f\u4fbf\u5229\u3067\u3059\u306d\u3002\n\n", "tags": ["Kotlin", "Android", "Retrofit", "RxJava"]}