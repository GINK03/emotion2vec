{"context": " More than 1 year has passed since last update.\u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u300c\u3069\u3046\u66f8\u304f\u300d\u3092\u3084\u308b\u30a4\u30d9\u30f3\u30c8( http://atnd.org/events/45016 )\u306e\u3001\u5b9f\u88c5\u3002\n\u554f\u984c\u306f\u300c\u5883\u754c\u7dda\u5206\u300d\u3068\u3044\u3046\u540d\u524d\u3067\u3001\u8a73\u7d30\u306f\nhttp://nabetani.sakura.ne.jp/hena/ord16boseg/\n\u3067\u3059\u3002\n\u4ed6\u306e\u65b9\u306e\u89e3\u7b54\u306f\nhttp://qiita.com/Nabetani/items/6a9f5593d0f3d7e0568c\n\u304b\u3089\u8fbf\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n#!ruby\n#tested with \"ruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-darwin12.4.0]\"\n\ndef horz_segments( val )\n  vh = val ^ ( val>>6 )\n  (\"%030b\" % (vh & 0o7777777777))\n    .chars\n    .each_slice(6)\n    .map{ |s| s.join.scan( /1+/ ).map{ |e| e.size } }\n    .flatten\nend\n\ndef flip_xy( val )\n  ( \"%036b\" % val ).chars.each_slice(6).to_a.transpose.flatten.join.to_i(2)\nend\n\ndef solve( src )\n  val = src.to_i(8)\n  r=horz_segments( val ) + horz_segments( flip_xy( val ) )\n  (1..6).map{ |x| r.count(x) }.join(\",\")\nend\n\nDATA.map{ |line|\n  num, src, expected = line.split( /\\s+/ )\n  actual = solve( src )\n  ok = actual == expected\n  puts [ (ok ? nil : \"***NG***\" ), src, actual, ( ok ? nil : expected ) ].compact.join(\"  \")\n  ok\n}.all?.tap{ |x| puts( x ? \"succeeded.\" : \"***FAIL***\" ) }\n\n__END__\n0 060276724276  6,2,1,1,0,1 \n1 770175454177  2,3,0,3,1,0 \n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\u554f\u984c\u5236\u4f5c\u306e\u305f\u3081\u306b\u6700\u521d\u306b\u66f8\u3044\u305f\u5b9f\u88c5\u3002\n\u4f1a\u5834\u3067\u306f C++ \u3067\u306e\u5b9f\u88c5\u3092\u8a66\u307f\u305f\u3093\u3060\u3051\u3069\u300120\u5206\u3067\u306f\u66f8\u3051\u306a\u304b\u3063\u305f\u3002\n\u6094\u3057\u3044\u3002\n\u4e0a\u306e\u884c\u3068 xor \u3092\u53d6\u308b\u3068\u3001\u5883\u754c\u7dda\u304c 1 \u306b\u306a\u308b\u30022\u9032\u657036\u6841\u306b\u3057\u3066\u304b\u30896\u6841\u305a\u3064\u306b\u5206\u5272\u3057\u30011\u306e\u9023\u306a\u308a\u3092\u62bd\u51fa\u3002\u9023\u306a\u308a\u306e\u9577\u3055\u3092\u96c6\u3081\u308b\u3002\n\u3068\u3044\u3046\u3082\u306e\u3002\n\u305d\u308c\u3060\u3051\u3060\u3068\u7e26\u306e\u7dda\u5206\u304c\u53ce\u96c6\u3067\u304d\u306a\u3044\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001transpose \u3067\u5411\u304d\u3092\u5909\u3048\u3066\u3082\u3046\u4e00\u56de\u3002\nruby\u4fbf\u5229\u3002\n\n\u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u300c\u3069\u3046\u66f8\u304f\u300d\u3092\u3084\u308b\u30a4\u30d9\u30f3\u30c8( http://atnd.org/events/45016 )\u306e\u3001\u5b9f\u88c5\u3002\n\n\u554f\u984c\u306f\u300c\u5883\u754c\u7dda\u5206\u300d\u3068\u3044\u3046\u540d\u524d\u3067\u3001\u8a73\u7d30\u306f\nhttp://nabetani.sakura.ne.jp/hena/ord16boseg/\n\u3067\u3059\u3002\n\n\u4ed6\u306e\u65b9\u306e\u89e3\u7b54\u306f\n\nhttp://qiita.com/Nabetani/items/6a9f5593d0f3d7e0568c\n\n\u304b\u3089\u8fbf\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```ruby\n#!ruby\n#tested with \"ruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-darwin12.4.0]\"\n\ndef horz_segments( val )\n  vh = val ^ ( val>>6 )\n  (\"%030b\" % (vh & 0o7777777777))\n    .chars\n    .each_slice(6)\n    .map{ |s| s.join.scan( /1+/ ).map{ |e| e.size } }\n    .flatten\nend\n\ndef flip_xy( val )\n  ( \"%036b\" % val ).chars.each_slice(6).to_a.transpose.flatten.join.to_i(2)\nend\n\ndef solve( src )\n  val = src.to_i(8)\n  r=horz_segments( val ) + horz_segments( flip_xy( val ) )\n  (1..6).map{ |x| r.count(x) }.join(\",\")\nend\n\nDATA.map{ |line|\n  num, src, expected = line.split( /\\s+/ )\n  actual = solve( src )\n  ok = actual == expected\n  puts [ (ok ? nil : \"***NG***\" ), src, actual, ( ok ? nil : expected ) ].compact.join(\"  \")\n  ok\n}.all?.tap{ |x| puts( x ? \"succeeded.\" : \"***FAIL***\" ) }\n\n__END__\n0 060276724276  6,2,1,1,0,1 \n1 770175454177  2,3,0,3,1,0 \n```\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\n\u554f\u984c\u5236\u4f5c\u306e\u305f\u3081\u306b\u6700\u521d\u306b\u66f8\u3044\u305f\u5b9f\u88c5\u3002\n\n\u4f1a\u5834\u3067\u306f C++ \u3067\u306e\u5b9f\u88c5\u3092\u8a66\u307f\u305f\u3093\u3060\u3051\u3069\u300120\u5206\u3067\u306f\u66f8\u3051\u306a\u304b\u3063\u305f\u3002\n\u6094\u3057\u3044\u3002\n\n\u4e0a\u306e\u884c\u3068 xor \u3092\u53d6\u308b\u3068\u3001\u5883\u754c\u7dda\u304c 1 \u306b\u306a\u308b\u30022\u9032\u657036\u6841\u306b\u3057\u3066\u304b\u30896\u6841\u305a\u3064\u306b\u5206\u5272\u3057\u30011\u306e\u9023\u306a\u308a\u3092\u62bd\u51fa\u3002\u9023\u306a\u308a\u306e\u9577\u3055\u3092\u96c6\u3081\u308b\u3002\n\u3068\u3044\u3046\u3082\u306e\u3002\n\n\u305d\u308c\u3060\u3051\u3060\u3068\u7e26\u306e\u7dda\u5206\u304c\u53ce\u96c6\u3067\u304d\u306a\u3044\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001transpose \u3067\u5411\u304d\u3092\u5909\u3048\u3066\u3082\u3046\u4e00\u56de\u3002\n\nruby\u4fbf\u5229\u3002\n\n", "tags": ["\u3069\u3046\u66f8\u304f", "Ruby", "yhpg"]}