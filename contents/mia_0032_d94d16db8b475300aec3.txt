{"tags": ["Edison", "Eaglet", "GroveSystem", "Python", "Kinesis"], "context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306fIoT\u30d0\u30c3\u30af\u30a8\u30f3\u30c9 Advent Calendar 2015\u306e20\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\nIoT\u3063\u307d\u304fAmazon Kinesis\u30b9\u30c8\u30ea\u30fc\u30e0\u3078Edison\u304b\u3089\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u30fc\u306e\u5024\u3092\u9001\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n1. \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u6e96\u5099\nIntel Edison + \u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9\u7248Eaglet\n\nIntel Edison\u306eI/O\u306f1.8V\u3067\u3059\u304c\u3001Eaglet\u306b\u306f3.3V\u3078\u306e\u5909\u63db\u56de\u8def\u304c\u642d\u8f09\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4e00\u822c\u7684\u306b\u8ca9\u58f2\u3055\u308c\u3066\u3044\u308b\u30bb\u30f3\u30b5\u30fc\u306e\u591a\u304f\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\u3055\u3089\u306bEaglet\u306b\u306fGROVE\u3092\u63a5\u7d9a\u3067\u304d\u308b\u30b3\u30cd\u30af\u30bf\u304c\u642d\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u30fc\u3068\u3057\u3066GROVE\u306e\u3082\u306e\u3092\u4f7f\u3044\u307e\u3059\u3002\nGROVE - I2C \u4e09\u8ef8\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5 ADXL345\u642d\u8f09\n\n\u63a5\u7d9a\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\u3059\u3002Grove\u30b3\u30cd\u30af\u30bf\u540c\u58eb\u3092\u30bb\u30f3\u30b5\u30fc\u306b\u4ed8\u5c5e\u306e\u30b1\u30fc\u30d6\u30eb\u3067\u63a5\u7d9a\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\u9006\u306b\u306f\u523a\u3055\u3089\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u5b89\u5fc3\u3057\u307e\u3057\u3087\u3046\u3002\n\n\n2. Edison\u3078\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068\u8a2d\u5b9a\n\u524d\u56de\u30fb\u524d\u3005\u56de\u306e\u8a18\u4e8b\u306e\u90e8\u5206\u306f\u3084\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\nEaglet\u304b\u3089Intel Edison\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3068\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u6700\u65b0\u5316 - Qiita\nIntel Edison\u306b\u6642\u523b\u3084SSH\u63a5\u7d9a\u3092\u8a2d\u5b9a - Qiita\n\nEdison\u306bSSH\u3067\u30ed\u30b0\u30a4\u30f3\u3057\u307e\u3059\u3002\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092Python\u3067\u958b\u767a\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n# Python\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nroot@my-edison:~# opkg install python-pip\n# AWSCLI\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nroot@my-edison:~# pip install awscli\n# Python\u306eAWS\u7528\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nroot@my-edison:~# pip install boto3 \n\nAWS\u3078\u63a5\u7d9a\u3059\u308b\u305f\u3081\u306b\u63a5\u7d9a\u8a2d\u5b9a\u3092\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nroot@my-edison:~# aws configure\nAWS Access Key ID [None]: <Edison\u7528\u306e\u30ad\u30fc>\nAWS Secret Access Key [None]: <Edison\u7528\u306e\u30ad\u30fc>\nDefault region name [None]: <\u5229\u7528\u3057\u305f\u3044\u30ea\u30fc\u30b8\u30e7\u30f3>\nDefault output format [None]: <\u304a\u597d\u304d\u306b>\n\n\n3. Kinesis\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u4f5c\u6210\n\u30c7\u30fc\u30bf\u3092\u6d41\u3059\u305f\u3081\u306eKinesis\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306fAWSCLI\u304b\u3089\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u304c\u3001AWS\u30de\u30cd\u30b8\u30e1\u30f3\u30c8\u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089\u884c\u3063\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\n\u30b9\u30c8\u30ea\u30fc\u30e0\u540d\u3092Sample-Edison-Stream\u3068\u3057\u3066\u9032\u3081\u307e\u3059\u3002\u9069\u5b9c\u597d\u304d\u306a\u540d\u524d\u306b\u7f6e\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n$ aws kinesis create-stream --stream-name Sample-Edison-Stream --shard-count 1\n\n\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u3067\u304d\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3002\n$ aws kinesis describe-stream --stream-name Sample-Edison-Stream\n{\n    \"StreamDescription\": {\n        \"RetentionPeriodHours\": 24,\n        \"StreamStatus\": \"CREATING\",\n...\n\nStreamStatus\u304cACTIVE\u306b\u306a\u308c\u3070\u5b8c\u4e86\u3067\u3059\u3002CREATING\u306e\u5834\u5408\u306f\u3057\u3070\u3089\u304f\u5f85\u3061\u307e\u3057\u3087\u3046\u3002\n\n4. Kinesis\u306b\u30c7\u30fc\u30bf\u3092\u9001\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\n\u7d040.1\u79d2\u306b1\u56de\u3001\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u30fc\u306e\u5024\u3092Kinesis\u3078\u9001\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u4f5c\u6210\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u4ee5\u4e0b\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002\nhttps://github.com/mia-0032/edison-adxl345-to-kinesis\nEdison\u306b\u306f\u6700\u521d\u304b\u3089upm(Useful Packages & Modules)\u3068\u3044\u3046\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u304a\u308a\u3001\u3053\u308c\u3092\u4f7f\u3046\u3053\u3068\u3067\u30bb\u30f3\u30b5\u30fc\u306a\u3069\u3092\u7c21\u5358\u306b\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nsender.py\n# -*- coding: utf-8 -*-\n\nimport boto3\nimport json\nimport pyupm_adxl345 as adxl345\n\nfrom socket import gethostname\nfrom sys import argv\nfrom time import sleep\n\n# Kinesis\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u540d\u306f\u5f15\u6570\u3067\u6307\u5b9a\nstream_name = argv[1]\n\n# Eaglet\u306eGrove\u30b3\u30cd\u30af\u30bf\u306fI2C 6\u756a\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u306e\u30676\u3092\u6307\u5b9a\nadxl = adxl345.Adxl345(6)\n\nkinesis = boto3.client('kinesis')\n\nwhile True:\n    # \u52a0\u901f\u5ea6\u3092\u53d6\u5f97\u3059\u308b\n    adxl.update()\n    force = adxl.getAcceleration()\n    data = {'X': force[0], 'Y': force[1], 'Z': force[2]}\n\n    # Kinesis\u3078\u30c7\u30fc\u30bf\u3092\u9001\u308b\n    res = kinesis.put_record(\n        StreamName=stream_name,\n        Data=json.dumps(data),\n        PartitionKey=gethostname()  # \u4eca\u56de\u306f\u30b7\u30e3\u30fc\u30c9\u304c1\u500b\u306a\u306e\u3067\u3042\u307e\u308a\u95a2\u4fc2\u306a\u3057\n    )\n\n    sleep(0.1)\n\n\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\nroot@my-edison:~# python sender.py Sample-Edison-Stream\n\n\n5. Kinesis\u306b\u30c7\u30fc\u30bf\u304c\u9001\u3089\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\nKinesis\u3078\u30c7\u30fc\u30bf\u304c\u6d41\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\u78ba\u8a8d\u7528\u306ePython\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u306e\u3067\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002\n\nreceiver.py\n# -*- coding: utf-8 -*-\n\nimport boto3\nimport logging\n\nfrom sys import argv\nfrom time import sleep\n\n# \u30ed\u30ac\u30fc\u306e\u751f\u6210\nlogging.basicConfig()\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n# Kinesis\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u540d\u306f\u5f15\u6570\u3067\u6307\u5b9a\nstream_name = argv[1]\nlogger.info(\"Stream Name: {0}\".format(stream_name))\n\nkinesis = boto3.client('kinesis')\n\n# \u30b7\u30e3\u30fc\u30c9ID\u3092\u53d6\u5f97\nstream = kinesis.describe_stream(\n    StreamName=stream_name\n)\n\n# \u4eca\u56de\u306f\u30b7\u30e3\u30fc\u30c9\u65701\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u6210\u3057\u3066\u3044\u308b\u305f\u3081\u5148\u982d\u306e\u30b7\u30e3\u30fc\u30c9ID\u3092\u4f7f\u3046\nshard_id = stream['StreamDescription']['Shards'][0]['ShardId']\n\n# \u6700\u521d\u306e\u30b7\u30e3\u30fc\u30c9\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\nshard_iterator = kinesis.get_shard_iterator(\n    StreamName=stream_name,\n    ShardId=shard_id,\n    ShardIteratorType='TRIM_HORIZON'\n)['ShardIterator']\n\n# \u30eb\u30fc\u30d7\u3067\u3072\u305f\u3059\u3089\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\nwhile True:\n    res = kinesis.get_records(\n        ShardIterator=shard_iterator,\n        Limit=100\n    )\n    for r in res['Records']:\n        logger.info(\n            'Time: {0}, Data: {1}'.format(\n                r['ApproximateArrivalTimestamp'],\n                r['Data']\n            )\n        )\n    shard_iterator = res['NextShardIterator']\n    sleep(1)\n\n\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\nroot@my-edison:~# python receiver.py Sample-Edison-Stream\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u30ec\u30b3\u30fc\u30c9\u304c\u6d41\u308c\u3066\u304f\u308c\u3070\u6210\u529f\u3067\u3059\u3002\nINFO:root:Time: 2015-12-20 14:40:59.522000+09:00, Data: {\"Y\": -0.10188677161931992, \"X\": -0.075471684336662292, \"Z\": 0.95703125}\nINFO:root:Time: 2015-12-20 14:40:59.675000+09:00, Data: {\"Y\": -0.056603759527206421, \"X\": 0.0037735840305685997, \"Z\": 0.94921875}\nINFO:root:Time: 2015-12-20 14:40:59.833000+09:00, Data: {\"Y\": -0.24150937795639038, \"X\": 0.018867921084165573, \"Z\": 0.90625}\nINFO:root:Time: 2015-12-20 14:40:59.983000+09:00, Data: {\"Y\": -0.22264145314693451, \"X\": -0.0037735840305685997, \"Z\": 0.9296875}\nINFO:root:Time: 2015-12-20 14:41:00.133000+09:00, Data: {\"Y\": -0.15094336867332458, \"X\": 0.011320752091705799, \"Z\": 0.9375}\n\n\u4ee5\u4e0a\u3067Kinesis\u306b\u30c7\u30fc\u30bf\u3092\u9001\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\uff01\u304a\u75b2\u308c\u69d8\u3067\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306f[IoT\u30d0\u30c3\u30af\u30a8\u30f3\u30c9 Advent Calendar 2015](http://qiita.com/advent-calendar/2015/iotbackend)\u306e20\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\nIoT\u3063\u307d\u304fAmazon Kinesis\u30b9\u30c8\u30ea\u30fc\u30e0\u3078Edison\u304b\u3089\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u30fc\u306e\u5024\u3092\u9001\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n## 1. \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u6e96\u5099\n\n[Intel Edison](https://www.switch-science.com/catalog/1956/) + [\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9\u7248Eaglet](https://www.switch-science.com/catalog/2070/)\n![edsion-eaglet.png](https://qiita-image-store.s3.amazonaws.com/0/59581/4ceab52b-e77c-5e1a-c60e-f14680931665.png)\n\nIntel Edison\u306eI/O\u306f1.8V\u3067\u3059\u304c\u3001Eaglet\u306b\u306f3.3V\u3078\u306e\u5909\u63db\u56de\u8def\u304c\u642d\u8f09\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4e00\u822c\u7684\u306b\u8ca9\u58f2\u3055\u308c\u3066\u3044\u308b\u30bb\u30f3\u30b5\u30fc\u306e\u591a\u304f\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\u3055\u3089\u306bEaglet\u306b\u306f[GROVE](https://www.switch-science.com/catalog/list/145/)\u3092\u63a5\u7d9a\u3067\u304d\u308b\u30b3\u30cd\u30af\u30bf\u304c\u642d\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u30fc\u3068\u3057\u3066GROVE\u306e\u3082\u306e\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n[GROVE - I2C \u4e09\u8ef8\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5 ADXL345\u642d\u8f09](https://www.switch-science.com/catalog/972/)\n![grove_ ADXL345.png](https://qiita-image-store.s3.amazonaws.com/0/59581/0ec459e8-b8bc-b06b-14f7-3b237540473d.png)\n\n\u63a5\u7d9a\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\u3059\u3002Grove\u30b3\u30cd\u30af\u30bf\u540c\u58eb\u3092\u30bb\u30f3\u30b5\u30fc\u306b\u4ed8\u5c5e\u306e\u30b1\u30fc\u30d6\u30eb\u3067\u63a5\u7d9a\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\u9006\u306b\u306f\u523a\u3055\u3089\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u5b89\u5fc3\u3057\u307e\u3057\u3087\u3046\u3002\n\n![edison-grove-connect.png](https://qiita-image-store.s3.amazonaws.com/0/59581/768b6eb4-a352-988c-1c17-931bbe6dda72.png)\n\n## 2. Edison\u3078\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068\u8a2d\u5b9a\n\n\u524d\u56de\u30fb\u524d\u3005\u56de\u306e\u8a18\u4e8b\u306e\u90e8\u5206\u306f\u3084\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n- [Eaglet\u304b\u3089Intel Edison\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3068\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u6700\u65b0\u5316 - Qiita](http://qiita.com/mia_0032/items/239bafa11044af28dec0)\n- [Intel Edison\u306b\u6642\u523b\u3084SSH\u63a5\u7d9a\u3092\u8a2d\u5b9a - Qiita](http://qiita.com/mia_0032/items/1b8a390af5bd7167e57c)\n\nEdison\u306bSSH\u3067\u30ed\u30b0\u30a4\u30f3\u3057\u307e\u3059\u3002\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092Python\u3067\u958b\u767a\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```bash\n# Python\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nroot@my-edison:~# opkg install python-pip\n# AWSCLI\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nroot@my-edison:~# pip install awscli\n# Python\u306eAWS\u7528\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nroot@my-edison:~# pip install boto3 \n```\n\nAWS\u3078\u63a5\u7d9a\u3059\u308b\u305f\u3081\u306b\u63a5\u7d9a\u8a2d\u5b9a\u3092\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```bash\nroot@my-edison:~# aws configure\nAWS Access Key ID [None]: <Edison\u7528\u306e\u30ad\u30fc>\nAWS Secret Access Key [None]: <Edison\u7528\u306e\u30ad\u30fc>\nDefault region name [None]: <\u5229\u7528\u3057\u305f\u3044\u30ea\u30fc\u30b8\u30e7\u30f3>\nDefault output format [None]: <\u304a\u597d\u304d\u306b>\n```\n\n## 3. Kinesis\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u4f5c\u6210\n\n\u30c7\u30fc\u30bf\u3092\u6d41\u3059\u305f\u3081\u306eKinesis\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306fAWSCLI\u304b\u3089\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u304c\u3001AWS\u30de\u30cd\u30b8\u30e1\u30f3\u30c8\u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089\u884c\u3063\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u30b9\u30c8\u30ea\u30fc\u30e0\u540d\u3092`Sample-Edison-Stream`\u3068\u3057\u3066\u9032\u3081\u307e\u3059\u3002\u9069\u5b9c\u597d\u304d\u306a\u540d\u524d\u306b\u7f6e\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n```bash\n$ aws kinesis create-stream --stream-name Sample-Edison-Stream --shard-count 1\n```\n\n\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u3067\u304d\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3002\n\n```bash\n$ aws kinesis describe-stream --stream-name Sample-Edison-Stream\n{\n    \"StreamDescription\": {\n        \"RetentionPeriodHours\": 24,\n        \"StreamStatus\": \"CREATING\",\n...\n```\n\n`StreamStatus`\u304c`ACTIVE`\u306b\u306a\u308c\u3070\u5b8c\u4e86\u3067\u3059\u3002`CREATING`\u306e\u5834\u5408\u306f\u3057\u3070\u3089\u304f\u5f85\u3061\u307e\u3057\u3087\u3046\u3002\n\n## 4. Kinesis\u306b\u30c7\u30fc\u30bf\u3092\u9001\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\n\n\u7d040.1\u79d2\u306b1\u56de\u3001\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u30fc\u306e\u5024\u3092Kinesis\u3078\u9001\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u4f5c\u6210\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u4ee5\u4e0b\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002\nhttps://github.com/mia-0032/edison-adxl345-to-kinesis\n\nEdison\u306b\u306f\u6700\u521d\u304b\u3089[upm(Useful Packages & Modules)](https://github.com/intel-iot-devkit/upm)\u3068\u3044\u3046\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u304a\u308a\u3001\u3053\u308c\u3092\u4f7f\u3046\u3053\u3068\u3067\u30bb\u30f3\u30b5\u30fc\u306a\u3069\u3092\u7c21\u5358\u306b\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```python:sender.py\n# -*- coding: utf-8 -*-\n\nimport boto3\nimport json\nimport pyupm_adxl345 as adxl345\n\nfrom socket import gethostname\nfrom sys import argv\nfrom time import sleep\n\n# Kinesis\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u540d\u306f\u5f15\u6570\u3067\u6307\u5b9a\nstream_name = argv[1]\n\n# Eaglet\u306eGrove\u30b3\u30cd\u30af\u30bf\u306fI2C 6\u756a\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u306e\u30676\u3092\u6307\u5b9a\nadxl = adxl345.Adxl345(6)\n\nkinesis = boto3.client('kinesis')\n\nwhile True:\n    # \u52a0\u901f\u5ea6\u3092\u53d6\u5f97\u3059\u308b\n    adxl.update()\n    force = adxl.getAcceleration()\n    data = {'X': force[0], 'Y': force[1], 'Z': force[2]}\n\n    # Kinesis\u3078\u30c7\u30fc\u30bf\u3092\u9001\u308b\n    res = kinesis.put_record(\n        StreamName=stream_name,\n        Data=json.dumps(data),\n        PartitionKey=gethostname()  # \u4eca\u56de\u306f\u30b7\u30e3\u30fc\u30c9\u304c1\u500b\u306a\u306e\u3067\u3042\u307e\u308a\u95a2\u4fc2\u306a\u3057\n    )\n\n    sleep(0.1)\n```\n\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\n```bash\nroot@my-edison:~# python sender.py Sample-Edison-Stream\n```\n\n## 5. Kinesis\u306b\u30c7\u30fc\u30bf\u304c\u9001\u3089\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n\nKinesis\u3078\u30c7\u30fc\u30bf\u304c\u6d41\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\u78ba\u8a8d\u7528\u306ePython\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u306e\u3067\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002\n\n```python:receiver.py\n# -*- coding: utf-8 -*-\n\nimport boto3\nimport logging\n\nfrom sys import argv\nfrom time import sleep\n\n# \u30ed\u30ac\u30fc\u306e\u751f\u6210\nlogging.basicConfig()\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n# Kinesis\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u540d\u306f\u5f15\u6570\u3067\u6307\u5b9a\nstream_name = argv[1]\nlogger.info(\"Stream Name: {0}\".format(stream_name))\n\nkinesis = boto3.client('kinesis')\n\n# \u30b7\u30e3\u30fc\u30c9ID\u3092\u53d6\u5f97\nstream = kinesis.describe_stream(\n    StreamName=stream_name\n)\n\n# \u4eca\u56de\u306f\u30b7\u30e3\u30fc\u30c9\u65701\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u6210\u3057\u3066\u3044\u308b\u305f\u3081\u5148\u982d\u306e\u30b7\u30e3\u30fc\u30c9ID\u3092\u4f7f\u3046\nshard_id = stream['StreamDescription']['Shards'][0]['ShardId']\n\n# \u6700\u521d\u306e\u30b7\u30e3\u30fc\u30c9\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97\nshard_iterator = kinesis.get_shard_iterator(\n    StreamName=stream_name,\n    ShardId=shard_id,\n    ShardIteratorType='TRIM_HORIZON'\n)['ShardIterator']\n\n# \u30eb\u30fc\u30d7\u3067\u3072\u305f\u3059\u3089\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\nwhile True:\n    res = kinesis.get_records(\n        ShardIterator=shard_iterator,\n        Limit=100\n    )\n    for r in res['Records']:\n        logger.info(\n            'Time: {0}, Data: {1}'.format(\n                r['ApproximateArrivalTimestamp'],\n                r['Data']\n            )\n        )\n    shard_iterator = res['NextShardIterator']\n    sleep(1)\n```\n\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\n```bash\nroot@my-edison:~# python receiver.py Sample-Edison-Stream\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u30ec\u30b3\u30fc\u30c9\u304c\u6d41\u308c\u3066\u304f\u308c\u3070\u6210\u529f\u3067\u3059\u3002\n\n```\nINFO:root:Time: 2015-12-20 14:40:59.522000+09:00, Data: {\"Y\": -0.10188677161931992, \"X\": -0.075471684336662292, \"Z\": 0.95703125}\nINFO:root:Time: 2015-12-20 14:40:59.675000+09:00, Data: {\"Y\": -0.056603759527206421, \"X\": 0.0037735840305685997, \"Z\": 0.94921875}\nINFO:root:Time: 2015-12-20 14:40:59.833000+09:00, Data: {\"Y\": -0.24150937795639038, \"X\": 0.018867921084165573, \"Z\": 0.90625}\nINFO:root:Time: 2015-12-20 14:40:59.983000+09:00, Data: {\"Y\": -0.22264145314693451, \"X\": -0.0037735840305685997, \"Z\": 0.9296875}\nINFO:root:Time: 2015-12-20 14:41:00.133000+09:00, Data: {\"Y\": -0.15094336867332458, \"X\": 0.011320752091705799, \"Z\": 0.9375}\n```\n\n\u4ee5\u4e0a\u3067Kinesis\u306b\u30c7\u30fc\u30bf\u3092\u9001\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\uff01\u304a\u75b2\u308c\u69d8\u3067\u3059\u3002\n"}