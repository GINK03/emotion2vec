{"context": " More than 1 year has passed since last update.\n$GPRMC\u3067\u306f\u3058\u307e\u308b\u884c\u3067\u306f\u3001\u7def\u5ea6(Latitude)\u3001\u7d4c\u5ea6(Longitude)\u3068\u901f\u5ea6(knot)\u3001\u9032\u884c\u65b9\u5411(TrackAngle)\u304c\u53d6\u5f97\u3067\u304d\u308b\u3002\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u5143\u306b\u3001\u77e2\u5370\u3092\u8868\u793a\u3001\u63cf\u3044\u3066\u307f\u3088\u3046\u3002\n\u3061\u3087\u3063\u3068\u305d\u306e\u524d\u306b\u3001\u307e\u305a\u306f\u3001\n\nGPS\u306e\u30c7\u30fc\u30bf\u30c1\u30a7\u30c3\u30af\ngrep\u306e\u30d5\u30a3\u30eb\u30bf\u3060\u3051\u3067\u306f\u3001\u629c\u3051\u3066\u304f\u308b\u306e\u3082\u3042\u308b\u306e\u3067\u3001\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u306e\u8a08\u7b97\u3057\u3066\u3001\u306f\u3058\u3044\u305f\u307b\u3046\u304c\u3044\u3044\u306e\u3067\u3001\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\nR\u306e\u304a\u4f5c\u6cd5\u3092\u77e5\u3089\u306a\u3044\u306e\u3067\u3001\u3046\u3054\u304d\u3083\u30fc\u3044\u3044\u3068\u306a\u3063\u3066\u308b\u305f\u3081\u3001\u30b3\u30e1\u30f3\u30c8\u306a\u3069\u3067\u3001\u3054\u6307\u5c0e\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\u3002\n\u3084\u3063\u3066\u308b\u3053\u3068\u306f\u3001\u5de6\u7aef1\u6587\u5b57\u76ee\u306f\"$\" \u53f3\u7aef\uff13\u6587\u5b57\u306f\"XX\"\u3068\u306a\u308b\u3068\u3057\u3066\u30012\u6587\u5b57\u76ee\u304b\u3089(length(line)-3)\u6587\u5b57\u76ee\u307e\u3067\u3001ASCII\u30b3\u30fc\u30c9\u306e\u5024\u3067XOR\u3057\u3066\u3044\u304d\u3001\u7d50\u679c\u3092\u3001\"\"\u5f8c\u306e2\u6587\u5b57\u306eCheckSum\u306e\u5024\u3068\u6bd4\u8f03\u3059\u308b\u3001\u3067\u3059\u3002\nbitXor\u306e\u305f\u3081\u306b\u3001\"bitops\"\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u5165\u308c\u3066\u304f\u3060\u3055\u3044\u3002\n> install.packages(\"bitops\")\n\nGPS\u306e\u884c\u30c7\u30fc\u30bf\u30c1\u30a7\u30c3\u30af\n\nlibrary(bitops)\n\nis_valid_gps_nmea_checksum <-function(gpsstr) {\n     len <- nchar(gpsstr)\n     result = strtoi(substr(gpsstr, len-1,len), 16L)\n\n     len <- len - 3\n     tbl<-rep(0, len)\n\n     for (k in 1:len) {\n       ch = substr(gpsstr, k,k)\n       tbl[k] = strtoi(charToRaw(ch), 16L)\n     }\n\n     chksum <- tbl[2]\n     for (k in 3:len) {\n        chksum <- bitXor(chksum, tbl[k])\n     }\n     return (chksum == result )\n}\n\nget_gps_valid_lines = function(lines) {\n     valid <- 0\n     i <- 0\n     for (k in 1:length(lines)) { \n          if(is_valid_gps_nmea_checksum(lines[k])) {\n               i<-i+1\n               valid[i] = k\n          }\n     }\n     return(valid)\n}\n\n\n\n\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\u4eca\u56de\u3082\u3001\u524d\u56de\u4f7f\u7528\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u30c7\u30fc\u30bf\u3092\u304a\u501f\u308a\u3057\u307e\u3059\u3002\n(http://www.oiccam.com/reno/gps/tahoe/nmea/2005-09-25-north-tahoe_nmea.txt)\n\u306a\u3093\u3069\u3082\u4f7f\u3046\u5834\u5408\u306f\u3001\u30ed\u30fc\u30ab\u30eb\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3068\u3044\u305f\u307b\u3046\u304c\u3088\u308d\u3057\u3044\u304b\u3068\u3002\n\n\u30c7\u30fc\u30bfrt0\u306e\u6e96\u5099\n\n# \u4eca\u56de\u3082`RgoogleMaps`\u306b\u304a\u4e16\u8a71\u306b\u306a\u308a\u307e\u3059\u3002\nlibrary(RgoogleMaps)\nlibrary(bitops)\n\n# \u4f5c\u696d\u30d5\u30a9\u30eb\u30c0\u3078\u79fb\u52d5\nsetwd(\"C:/R_de_gpslog_asobu/\")\n\n#1. \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\nlines = readLines(\"2005-09-25-north-tahoe_nmea.txt\")\n\n#2. \"GPRMC\"\u3067\u30d5\u30a3\u30eb\u30bf. \u3067\u3001\u305d\u306e\u6570\u3092\u8868\u793a\nlines_GPRMC <- lines[grep(\"GPRMC\", lines)];  length(lines_GPRMC)\n\n#3. CheckSum\u3067\u30d5\u30a3\u30eb\u30bf. \u3067\u3001\u305d\u306e\u6570\u3092\u8868\u793a(\u6e1b\u3063\u305f\u304b\u306a\uff1f)\nlines_GPRMC <- lines_GPRMC[get_gps_valid_lines(lines_GPRMC)] ; length(lines_GPRMC)\n\n#4. \u30c6\u30fc\u30d6\u30eb\u306b\u5909\u63db\ntbl_GPRMC = read.table( text =lines_GPRMC , sep=\",\", header=FALSE)\n\n#5. \u884c\u540d\u3092\u3064\u3051\u308b\ncolnames(tbl_GPRMC) <- (c(\"SentenceId\", \"TimeUTC\", \"Status\",  \"Latitude\", \"LatitudeHemisphere\", \"Longitude\", \"LongitudeHemisphere\", \"SpeedInKnots\", \"TrackAngle\", \"Date\", \"MagneticVariation\", \"MV\", \"_CheckSum\"))\n\n#6. \u6355\u6349\u3055\u308c\u3066\u308b\u30c7\u30fc\u30bf\u306e\u307f\ntbl_GPRMC = tbl_GPRMC[tbl_GPRMC$Status == \"A\", ]\n\n#7. tbl_GPRMC\u304b\u3089\u3001rt0 (\u6642\u9593\u3001\u6642\u901fkm\u3001 \u6642\u901fmile\u3001\u7def\u5ea6\u3001\u7d4c\u5ea6\u3001\u65b9\u89d2)\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\n\nrt0 <- data.frame(\n    time = as.integer(tbl_GPRMC$Date/10000)*86400 + as.integer(tbl_GPRMC$TimeUTC / 10000) *3600 + (as.integer(tbl_GPRMC$TimeUTC / 100) - as.integer(tbl_GPRMC$TimeUTC / 10000)*100) * 60 +  as.integer(tbl_GPRMC$TimeUTC) - as.integer(tbl_GPRMC$TimeUTC / 100)*100 ,\n    speed_kmph = tbl_GPRMC$SpeedInKnots *  1.85200 , \n    speed_miph =  tbl_GPRMC$SpeedInKnots * 1.15077945,\n    Latitude  = ifelse(tbl_GPRMC$LatitudeHemisphere  == \"N\",  1, -1) * (as.integer(tbl_GPRMC$Latitude /100) +  (tbl_GPRMC$Latitude /100 - as.integer(tbl_GPRMC$Latitude /100)) * 100/60),\n    Longitude = ifelse(tbl_GPRMC$LongitudeHemisphere == \"E\",  1, -1) * (as.integer(tbl_GPRMC$Longitude/100) +  (tbl_GPRMC$Longitude/100 - as.integer(tbl_GPRMC$Longitude/100)) * 100/60),\n    TrackAngle = tbl_GPRMC$TrackAngle \n)\n\n# \u6642\u9593\u306e\u5358\u4f4d\u79d2\u306b\u3057\u3066\u3001\u65e5\u4ed8*86400 + \u6642*3600 + \u5206*60 + \u79d2\n# \u901f\u5ea6\u306f\u3001\u30b0\u30fc\u3050\u308b\u5148\u751f\u306b\u3088\u308b\u3068\n# 1 knot = 1.15077945 mile per hour`\n# 1 knot = 1.85200 kilometer per hour`\n#\u7def\u5ea6\u7d4c\u5ea6\u5909\u63db\u306f\u524d\u56de\u306e\u3092\u3053\u3074\u307a\n\n\n\nRgoogleMaps\u3067\u30d7\u30ed\u30c3\u30c8\n\n\u524d\u56de\u306e\u5fa9\u7fd2(PlotOnStaticMap)\n\u524d\u56de\u3068\u540c\u69d8\u306e\u30d7\u30ed\u30c3\u30c8\n\nPlotOnStaticMap\u4f7f\u7528\nrt <- rt0\nlat <- as.vector(rt$Latitude)\nlon <- as.vector(rt$Longitude)\ncenter = c ((max(lat)+min(lat))/2, (max(lon)+min(lon))/2)\nzoom <- min(MaxZoom(range(lat), range(lon)))\n\nMyMap <- GetMap(center=center, zoom=zoom, size=c(640, 640), destfile = \"./dest.png\", maptype = 'terrain',  hl = \"ja\")\n\ntmp <- PlotOnStaticMap(MyMap,\n                       lat = lat,\n                       lon = lon,\n                       destfile = \"./dest.png\",\n                       cex=1.0,\n                       pch=20,\n                       col='red',\n                       add=FALSE,\n                       NEWMAP = FALSE\n                      )\n\ndev.print(png, file = \"./result1.png\",width = 640, height=640)\n\n\n\n\n\u77e2\u5370\u3067PlotArrowsOnStaticMap (\u305d\u306e1)\nPlotArrowsOnStaticMap \u3067\u3001Arrow\u304c\u63cf\u3051\u308b\u3002\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3067 (lat0, lon0) \u304b\u3089\u3001(lat1, lon1)\u306b\u5411\u304b\u3063\u3066\u77e2\u5370\u304c\u304b\u3051\u308b\u306e\u3067\u3001lat1, lon1\u3092\u901f\u5ea6\u3068\u65b9\u89d2\u304b\u3089\u3046\u307e\u304f\u8a08\u7b97\u3059\u308b\u3002\n\nPlotArrowsOnStaticMap\u305d\u306e1\nrt <- rt0\n\n#\nlat <- as.vector(rt$Latitude)\nlon <- as.vector(rt$Longitude)\ncenter = c ((max(lat)+min(lat))/2, (max(lon)+min(lon))/2)\nzoom <- min(MaxZoom(range(lat), range(lon)))\n\n# lat1, lon1\u306e\u8a08\u7b97\narrow_size = 0.007 #\u77e2\u306e\u9577\u3055\narrow_length = 0.04 #\u77e2\u306e\u5098\u306e\u5927\u304d\u3055\nlat1 <- cos(rt$TrackAngle *pi/180)*arrow_size *rt$speed_miph/mean(rt$speed_miph)\nlon1 <- sin(rt$TrackAngle *pi/180)*arrow_size *rt$speed_miph/mean(rt$speed_miph)\nlat1 <- lat + lat1\nlon1 <- lon + lon1\n\n\n#maptype: roadmap, satellite, hybrid, terrain\nMyMap <- GetMap(center=center, zoom=zoom, size=c(640, 640), destfile = \"./dest.png\", maptype = 'terrain',  hl = \"ja\")\n\ntmp <-PlotArrowsOnStaticMap(MyMap,\n                            lat0 = lat,\n                            lon0 = lon,\n                            lat1 = lat1,\n                            lon1 = lon1,\n                            cex=1.0,\n                            pch=20,\n                            col='red',\n                            add=FALSE,\n                            length = arrow_length \n                           )\n\ndev.print(png, file = \"./result2.png\",width = 640, height=640)\n\n\n\n\uff01\uff01\uff01\n\u30c7\u30fc\u30bf\u304c\u591a\u3059\u304e\u308b...\n\n\u77e2\u5370\u3067PlotArrowsOnStaticMap (\u305d\u306e2)\nrt\u3092\u4f5c\u308b\u969b\u3001\u30c7\u30fc\u30bf\u3092\u9593\u5f15\u304d\u3059\u308b\u3002\n\n\u30c7\u30fc\u30bf\u9593\u5f15\u304d\nstep <- 15 # 15\u6bce\u306b\u3072\u3068\u3064\u3002\nrt <- rt0[0:(length(rt0[,1])/step) *step +1, ]\n\n# \u4ee5\u4e0b\u3001\u305d\u306e1\u3068\u540c\u3058\n\n# \u3084\u3063\u3066\u308b\u3053\u3068\u306f\u3001\n# 0 \u304b\u3089\u3001\u30c7\u30fc\u30bf\u6570/step \u307e\u3067\u306eVector\u4f5c\u6210\u3057\u3066\u3001step\u304b\u3051\u3066\u3001+1\n# \u4f8b:\u30c7\u30fc\u30bf\u6570=5236, step=15\n# 5236/15 = 349.0667..\n# 0:349 :=  0 1 2 3 4 ... 348 349\n# (0:349) * 15 :=  0 15 30 45  ... 5220 5235  (15\u6bce)\n# (0:349) * 15 +1 := 1 16 31 46 ... 5221 5236 \n#\u3000\u2191\u3067\u5217\u30d5\u30a3\u30eb\u30bf\u3000data[(0:349) * 15 +1, ]\u3000:= data[1, ], data[16,] ... data[5236, ]\n\n\n\n\n![\u56f3](https://qiita-image-store.s3.amazonaws.com/0/75594/d0f0d9e8-d788-4e3e-99c3-b4af80dcd5b3.png)\n\n\n$GPRMC\u3067\u306f\u3058\u307e\u308b\u884c\u3067\u306f\u3001\u7def\u5ea6(Latitude)\u3001\u7d4c\u5ea6(Longitude)\u3068\u901f\u5ea6(knot)\u3001\u9032\u884c\u65b9\u5411(TrackAngle)\u304c\u53d6\u5f97\u3067\u304d\u308b\u3002\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u5143\u306b\u3001\u77e2\u5370\u3092\u8868\u793a\u3001\u63cf\u3044\u3066\u307f\u3088\u3046\u3002\n\n\u3061\u3087\u3063\u3068\u305d\u306e\u524d\u306b\u3001\u307e\u305a\u306f\u3001\n## GPS\u306e\u30c7\u30fc\u30bf\u30c1\u30a7\u30c3\u30af\n\ngrep\u306e\u30d5\u30a3\u30eb\u30bf\u3060\u3051\u3067\u306f\u3001\u629c\u3051\u3066\u304f\u308b\u306e\u3082\u3042\u308b\u306e\u3067\u3001\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u306e\u8a08\u7b97\u3057\u3066\u3001\u306f\u3058\u3044\u305f\u307b\u3046\u304c\u3044\u3044\u306e\u3067\u3001\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\nR\u306e\u304a\u4f5c\u6cd5\u3092\u77e5\u3089\u306a\u3044\u306e\u3067\u3001\u3046\u3054\u304d\u3083\u30fc\u3044\u3044\u3068\u306a\u3063\u3066\u308b\u305f\u3081\u3001\u30b3\u30e1\u30f3\u30c8\u306a\u3069\u3067\u3001\u3054\u6307\u5c0e\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\u3002\n\u3084\u3063\u3066\u308b\u3053\u3068\u306f\u3001\u5de6\u7aef1\u6587\u5b57\u76ee\u306f\"$\" \u53f3\u7aef\uff13\u6587\u5b57\u306f\"*XX\"\u3068\u306a\u308b\u3068\u3057\u3066\u30012\u6587\u5b57\u76ee\u304b\u3089(length(line)-3)\u6587\u5b57\u76ee\u307e\u3067\u3001ASCII\u30b3\u30fc\u30c9\u306e\u5024\u3067XOR\u3057\u3066\u3044\u304d\u3001\u7d50\u679c\u3092\u3001\"*\"\u5f8c\u306e2\u6587\u5b57\u306eCheckSum\u306e\u5024\u3068\u6bd4\u8f03\u3059\u308b\u3001\u3067\u3059\u3002\nbitXor\u306e\u305f\u3081\u306b\u3001\"bitops\"\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u5165\u308c\u3066\u304f\u3060\u3055\u3044\u3002\n`> install.packages(\"bitops\")`\n\n```r:GPS\u306e\u884c\u30c7\u30fc\u30bf\u30c1\u30a7\u30c3\u30af\n\nlibrary(bitops)\n\nis_valid_gps_nmea_checksum <-function(gpsstr) {\n     len <- nchar(gpsstr)\n     result = strtoi(substr(gpsstr, len-1,len), 16L)\n\n     len <- len - 3\n     tbl<-rep(0, len)\n\n     for (k in 1:len) {\n       ch = substr(gpsstr, k,k)\n       tbl[k] = strtoi(charToRaw(ch), 16L)\n     }\n\n     chksum <- tbl[2]\n     for (k in 3:len) {\n        chksum <- bitXor(chksum, tbl[k])\n     }\n     return (chksum == result )\n}\n\nget_gps_valid_lines = function(lines) {\n     valid <- 0\n     i <- 0\n     for (k in 1:length(lines)) { \n          if(is_valid_gps_nmea_checksum(lines[k])) {\n               i<-i+1\n               valid[i] = k\n          }\n     }\n     return(valid)\n}\n```\n\n\n## \u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\u4eca\u56de\u3082\u3001\u524d\u56de\u4f7f\u7528\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u30c7\u30fc\u30bf\u3092\u304a\u501f\u308a\u3057\u307e\u3059\u3002\n(http://www.oiccam.com/reno/gps/tahoe/nmea/2005-09-25-north-tahoe_nmea.txt)\n\u306a\u3093\u3069\u3082\u4f7f\u3046\u5834\u5408\u306f\u3001\u30ed\u30fc\u30ab\u30eb\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3068\u3044\u305f\u307b\u3046\u304c\u3088\u308d\u3057\u3044\u304b\u3068\u3002\n\n\n```r:\u30c7\u30fc\u30bfrt0\u306e\u6e96\u5099\n\n# \u4eca\u56de\u3082`RgoogleMaps`\u306b\u304a\u4e16\u8a71\u306b\u306a\u308a\u307e\u3059\u3002\nlibrary(RgoogleMaps)\nlibrary(bitops)\n\n# \u4f5c\u696d\u30d5\u30a9\u30eb\u30c0\u3078\u79fb\u52d5\nsetwd(\"C:/R_de_gpslog_asobu/\")\n\n#1. \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\nlines = readLines(\"2005-09-25-north-tahoe_nmea.txt\")\n\n#2. \"GPRMC\"\u3067\u30d5\u30a3\u30eb\u30bf. \u3067\u3001\u305d\u306e\u6570\u3092\u8868\u793a\nlines_GPRMC <- lines[grep(\"GPRMC\", lines)];  length(lines_GPRMC)\n\n#3. CheckSum\u3067\u30d5\u30a3\u30eb\u30bf. \u3067\u3001\u305d\u306e\u6570\u3092\u8868\u793a(\u6e1b\u3063\u305f\u304b\u306a\uff1f)\nlines_GPRMC <- lines_GPRMC[get_gps_valid_lines(lines_GPRMC)] ; length(lines_GPRMC)\n \n#4. \u30c6\u30fc\u30d6\u30eb\u306b\u5909\u63db\ntbl_GPRMC = read.table( text =lines_GPRMC , sep=\",\", header=FALSE)\n\n#5. \u884c\u540d\u3092\u3064\u3051\u308b\ncolnames(tbl_GPRMC) <- (c(\"SentenceId\", \"TimeUTC\", \"Status\",  \"Latitude\", \"LatitudeHemisphere\", \"Longitude\", \"LongitudeHemisphere\", \"SpeedInKnots\", \"TrackAngle\", \"Date\", \"MagneticVariation\", \"MV\", \"_CheckSum\"))\n\n#6. \u6355\u6349\u3055\u308c\u3066\u308b\u30c7\u30fc\u30bf\u306e\u307f\ntbl_GPRMC = tbl_GPRMC[tbl_GPRMC$Status == \"A\", ]\n\n#7. tbl_GPRMC\u304b\u3089\u3001rt0 (\u6642\u9593\u3001\u6642\u901fkm\u3001 \u6642\u901fmile\u3001\u7def\u5ea6\u3001\u7d4c\u5ea6\u3001\u65b9\u89d2)\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\n\nrt0 <- data.frame(\n\ttime = as.integer(tbl_GPRMC$Date/10000)*86400 + as.integer(tbl_GPRMC$TimeUTC / 10000) *3600 + (as.integer(tbl_GPRMC$TimeUTC / 100) - as.integer(tbl_GPRMC$TimeUTC / 10000)*100) * 60 +  as.integer(tbl_GPRMC$TimeUTC) - as.integer(tbl_GPRMC$TimeUTC / 100)*100 ,\n\tspeed_kmph = tbl_GPRMC$SpeedInKnots *  1.85200 , \n\tspeed_miph =  tbl_GPRMC$SpeedInKnots * 1.15077945,\n\tLatitude  = ifelse(tbl_GPRMC$LatitudeHemisphere  == \"N\",  1, -1) * (as.integer(tbl_GPRMC$Latitude /100) +  (tbl_GPRMC$Latitude /100 - as.integer(tbl_GPRMC$Latitude /100)) * 100/60),\n\tLongitude = ifelse(tbl_GPRMC$LongitudeHemisphere == \"E\",  1, -1) * (as.integer(tbl_GPRMC$Longitude/100) +  (tbl_GPRMC$Longitude/100 - as.integer(tbl_GPRMC$Longitude/100)) * 100/60),\n\tTrackAngle = tbl_GPRMC$TrackAngle \n)\n\n# \u6642\u9593\u306e\u5358\u4f4d\u79d2\u306b\u3057\u3066\u3001\u65e5\u4ed8*86400 + \u6642*3600 + \u5206*60 + \u79d2\n# \u901f\u5ea6\u306f\u3001\u30b0\u30fc\u3050\u308b\u5148\u751f\u306b\u3088\u308b\u3068\n# 1 knot = 1.15077945 mile per hour`\n# 1 knot = 1.85200 kilometer per hour`\n#\u7def\u5ea6\u7d4c\u5ea6\u5909\u63db\u306f\u524d\u56de\u306e\u3092\u3053\u3074\u307a\n```\n\n## `RgoogleMaps`\u3067\u30d7\u30ed\u30c3\u30c8\n\n### \u524d\u56de\u306e\u5fa9\u7fd2(`PlotOnStaticMap`)\n\u524d\u56de\u3068\u540c\u69d8\u306e\u30d7\u30ed\u30c3\u30c8\n\n```r:PlotOnStaticMap\u4f7f\u7528\nrt <- rt0\nlat <- as.vector(rt$Latitude)\nlon <- as.vector(rt$Longitude)\ncenter = c ((max(lat)+min(lat))/2, (max(lon)+min(lon))/2)\nzoom <- min(MaxZoom(range(lat), range(lon)))\n\nMyMap <- GetMap(center=center, zoom=zoom, size=c(640, 640), destfile = \"./dest.png\", maptype = 'terrain',  hl = \"ja\")\n\ntmp <- PlotOnStaticMap(MyMap,\n                       lat = lat,\n                       lon = lon,\n                       destfile = \"./dest.png\",\n                       cex=1.0,\n                       pch=20,\n                       col='red',\n                       add=FALSE,\n                       NEWMAP = FALSE\n                      )\n\ndev.print(png, file = \"./result1.png\",width = 640, height=640)\n```\n![result1.png](https://qiita-image-store.s3.amazonaws.com/0/75594/91826e83-f966-b9eb-3773-769e3c248e7d.png)\n\n\n\n### \u77e2\u5370\u3067`PlotArrowsOnStaticMap` (\u305d\u306e1)\n\n`PlotArrowsOnStaticMap` \u3067\u3001Arrow\u304c\u63cf\u3051\u308b\u3002\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3067 (lat0, lon0) \u304b\u3089\u3001(lat1, lon1)\u306b\u5411\u304b\u3063\u3066\u77e2\u5370\u304c\u304b\u3051\u308b\u306e\u3067\u3001lat1, lon1\u3092\u901f\u5ea6\u3068\u65b9\u89d2\u304b\u3089\u3046\u307e\u304f\u8a08\u7b97\u3059\u308b\u3002\n\n\n```r:PlotArrowsOnStaticMap\u305d\u306e1\nrt <- rt0\n\n#\nlat <- as.vector(rt$Latitude)\nlon <- as.vector(rt$Longitude)\ncenter = c ((max(lat)+min(lat))/2, (max(lon)+min(lon))/2)\nzoom <- min(MaxZoom(range(lat), range(lon)))\n\n# lat1, lon1\u306e\u8a08\u7b97\narrow_size = 0.007 #\u77e2\u306e\u9577\u3055\narrow_length = 0.04 #\u77e2\u306e\u5098\u306e\u5927\u304d\u3055\nlat1 <- cos(rt$TrackAngle *pi/180)*arrow_size *rt$speed_miph/mean(rt$speed_miph)\nlon1 <- sin(rt$TrackAngle *pi/180)*arrow_size *rt$speed_miph/mean(rt$speed_miph)\nlat1 <- lat + lat1\nlon1 <- lon + lon1\n\n\n#maptype: roadmap, satellite, hybrid, terrain\nMyMap <- GetMap(center=center, zoom=zoom, size=c(640, 640), destfile = \"./dest.png\", maptype = 'terrain',  hl = \"ja\")\n\ntmp <-PlotArrowsOnStaticMap(MyMap,\n                            lat0 = lat,\n                            lon0 = lon,\n                            lat1 = lat1,\n                            lon1 = lon1,\n                            cex=1.0,\n                            pch=20,\n                            col='red',\n                            add=FALSE,\n                            length = arrow_length \n                           )\n\ndev.print(png, file = \"./result2.png\",width = 640, height=640)\n```\n![result2.png](https://qiita-image-store.s3.amazonaws.com/0/75594/34ebd835-8965-5ade-71ed-3f7c500e3716.png)\n\n\n\uff01\uff01\uff01\n\u30c7\u30fc\u30bf\u304c\u591a\u3059\u304e\u308b...\n\n\n\n### \u77e2\u5370\u3067`PlotArrowsOnStaticMap` (\u305d\u306e2)\n\nrt\u3092\u4f5c\u308b\u969b\u3001\u30c7\u30fc\u30bf\u3092\u9593\u5f15\u304d\u3059\u308b\u3002\n\n```r:\u30c7\u30fc\u30bf\u9593\u5f15\u304d\nstep <- 15 # 15\u6bce\u306b\u3072\u3068\u3064\u3002\nrt <- rt0[0:(length(rt0[,1])/step) *step +1, ]\n\n# \u4ee5\u4e0b\u3001\u305d\u306e1\u3068\u540c\u3058\n\n# \u3084\u3063\u3066\u308b\u3053\u3068\u306f\u3001\n# 0 \u304b\u3089\u3001\u30c7\u30fc\u30bf\u6570/step \u307e\u3067\u306eVector\u4f5c\u6210\u3057\u3066\u3001step\u304b\u3051\u3066\u3001+1\n# \u4f8b:\u30c7\u30fc\u30bf\u6570=5236, step=15\n# 5236/15 = 349.0667..\n# 0:349 :=  0 1 2 3 4 ... 348 349\n# (0:349) * 15 :=  0 15 30 45  ... 5220 5235  (15\u6bce)\n# (0:349) * 15 +1 := 1 16 31 46 ... 5221 5236 \n#\u3000\u2191\u3067\u5217\u30d5\u30a3\u30eb\u30bf\u3000data[(0:349) * 15 +1, ]\u3000:= data[1, ], data[16,] ... data[5236, ]\n\n```\n![result3.png](https://qiita-image-store.s3.amazonaws.com/0/75594/c2f1be5a-02f5-42a8-b07a-51157d24cc6e.png)\n", "tags": ["GPS", "R"]}