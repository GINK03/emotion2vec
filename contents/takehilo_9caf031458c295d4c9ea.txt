{"tags": ["Node.js", "Express", "promise", "mongoose"], "context": "Express\u30a2\u30d7\u30ea\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u308b\u3068\u304d\u3001Promise\u5468\u308a\u3067\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3053\u3068\u304c\u3042\u3063\u305f\u3002\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u3042\u308b\u3002\napp.get('/users/:id', (req, res) => {\n  return User.findById(req.params.id)\n    .then((user) => {\n      if (!user) {\n        return res.status(404).json({message: 'Not found'});\n      }\n      return user;\n    })\n    .then((user) => {\n      return doSomething(user);\n    })\n    .then(() => {\n      return res.status(200).json({message: 'Successfully processed'})\n    })\n    .catch((err) => {\n      if (err.name === 'CastError') {\n        return res.status(404).json({message: 'Not found'});\n      }\n      return res.status(500).json({message: 'Server error'});\n    });\n});\n\n\u30e6\u30fc\u30b6ID\u3067\u30e6\u30fc\u30b6\u3092\u691c\u7d22\u3057\u3001\u30e6\u30fc\u30b6\u304c\u5b58\u5728\u3059\u308c\u3070\u305d\u306e\u307e\u307e\u51e6\u7406\u3092\u7d99\u7d9a\u3001\u30e6\u30fc\u30b6\u304c\u5b58\u5728\u3057\u306a\u3051\u308c\u3070 404 Not found \u3092\u8fd4\u3059\u3068\u3044\u3046\u51e6\u7406\u3002\nUser\u30e2\u30c7\u30eb\u306fmongoose\u3092\u4f7f\u3063\u3066\u3044\u308b\u60f3\u5b9a\u3067\u3001mongoose\u306fID\u304c\u5b58\u5728\u3057\u306a\u3051\u308c\u3070then\u306bnull\u3092\u6e21\u3057\u3001\u5b58\u5728\u3059\u308c\u3070user\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3059\u3002\n\u307e\u305f\u3001ID\u304cMongoDB\u306eObjectID\u306e\u5f62\u5f0f\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306frejected\u3068\u306a\u308a\u3001CastError\u3092\u6e21\u3059\u3002\n\u3053\u3053\u3067\u554f\u984c\u306a\u306e\u306f\u3001ID\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u3001\uff15\u884c\u76ee\u306eres.json()\u3067\u51e6\u7406\u3092\u7d42\u4e86\u3057\u305f\u3044\u306e\u3060\u304c\u3001Promise\u30c1\u30a7\u30fc\u30f3\u306f\u3053\u3053\u3067\u7d42\u4e86\u305b\u305a\u6b21\u306ethen\u306b\u9032\u3093\u3067\u3057\u307e\u3046\u3053\u3068\u3002\nPromise\u30c1\u30a7\u30fc\u30f3\u3092\u9014\u4e2d\u3067\u7d42\u4e86\u3055\u305b\u308b\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u3088\u3044\u306e\u304b\uff1f\n\nthrow\u3059\u308b\nPromise\u30c1\u30a7\u30fc\u30f3\u306ftry-catch\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u306e\u3067\u3001Promise\u30c1\u30a7\u30fc\u30f3\u3092\u7d42\u4e86\u3055\u305b\u305f\u3044\u5834\u6240\u3067throw\u3059\u308c\u3070catch\u306b\u51e6\u7406\u304c\u79fb\u308b\u3002catch\u3067\u306f\u30a8\u30e9\u30fc\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u5909\u3048\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u826f\u3044\u3002\napp.get('/users/:id', (req, res) => {\n  return User.findById(req.params.id)\n    .then((user) => {\n      if (!user) {\n        throw new NotFound();\n      }\n      return user;\n    })\n    .then((user) => {\n      return doSomething(user);\n    })\n    .then(() => {\n      return res.status(200).json({message: 'Successfully processed'})\n    })\n    .catch((err) => {\n      if (err instanceof NotFound) {\n        return res.status(404).json(err);\n      } else if (err.name === 'CastError') {\n        return res.status(404).json({message: 'Not found'});\n      }\n      return res.status(500).json({message: 'Server error'});\n    });\n});\n\nclass NotFound extends Error {\n  constructor(message) {\n    super(message);\n    this.description = message;\n    this.name = 'NotFound';\n    this.status = 404;\n  }\n}\n\n\u3053\u3053\u3067\u306f\u30ab\u30b9\u30bf\u30e0\u30a8\u30e9\u30fc\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u3044\u3066\u3001instanceof\u3067\u30a8\u30e9\u30fc\u30af\u30e9\u30b9\u3092\u5224\u5b9a\u3057\u3066\u51e6\u7406\u3092\u308f\u3051\u308b\u3068\u3044\u3046\u65b9\u6cd5\u3092\u3068\u3063\u3066\u3044\u308b\u3002\n\nbluebird\u3092\u4f7f\u3046\nNative Promise\u306b\u306f\u306a\u3044bluebird\u306eFiltered Catch\u3092\u4f7f\u3046\u3068\u3001Java\u306a\u3069\u306e\u4ed6\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u898b\u308b\u3088\u3046\u306a\u66f8\u304d\u304b\u305f\u304c\u3067\u304d\u308b\u3002\n...\nconst mongoose = require('mongoose');\nconst bluebird = require('bluebird');\nmongoose.Promise = bluebird;  // Promise\u306bbluebird\u3092\u4f7f\u3046\n...\n\napp.get('/users/:id', (req, res) => {\n  return User.findById(req.params.id)\n    .then((user) => {\n      if (!user) {\n        throw new NotFound();\n      }\n      return user;\n    })\n    .then((user) => {\n      return doSomething(user);\n    })\n    .then(() => {\n      return res.status(200).json({message: 'Successfully processed'})\n    })\n    .catch(NotFound, (err) => {\n      return res.status(404).json(err);\n    })\n    .catch({name: 'CastError'}, (err) => {\n      return res.status(404).json({message: 'Not found'});\n    })\n    .catch((err) => {\n      return res.status(500).json({message: 'Server error'});\n    });\n});\n\nFiltered Catch\u306fcatch(ErrorClass, handler)\u3068\u3044\u3046\u66f8\u304d\u65b9\u304c\u3067\u304d\u3066\u3001catch\u3057\u305f\u30a8\u30e9\u30fc\u304cErrorClass\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3060\u3063\u305f\u3089\u3001handler\u3092\u5b9f\u884c\u3059\u308b\u3002\u305d\u3057\u3066\u3001\u4e00\u3064\u306ecatch\u304c\u5b9f\u884c\u3055\u308c\u305f\u3089\u3001\u305d\u306e\u5f8c\u306ecatch\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\u3002\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u3044\u3048\u3070\u3001NotFound\u306b\u30de\u30c3\u30c1\u3057\u305f\u3089\u3001\u305d\u306e\u5f8c\u306e\uff12\u3064\u306ecatch\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\u3002\n\u306a\u304a\u3001catch({name: 'CastError'}, handler)\u306f\u3001catch\u306b\u6e21\u3055\u308c\u305f\u30a8\u30e9\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8err\u306ename\u30d7\u30ed\u30d1\u30c6\u30a3\u304cCastError\u3060\u3063\u305f\u3089\u3001\u305d\u306ehandler\u3092\u5b9f\u884c\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u3002\n\n\u53c2\u8003\n\nhttp://stackoverflow.com/questions/26076511/handling-multiple-catches-in-promise-chain\nhttp://bluebirdjs.com/docs/api/catch.html#filtered-catch\n\nExpress\u30a2\u30d7\u30ea\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u308b\u3068\u304d\u3001Promise\u5468\u308a\u3067\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3053\u3068\u304c\u3042\u3063\u305f\u3002\n\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u3042\u308b\u3002\n\n```js\napp.get('/users/:id', (req, res) => {\n  return User.findById(req.params.id)\n    .then((user) => {\n      if (!user) {\n        return res.status(404).json({message: 'Not found'});\n      }\n      return user;\n    })\n    .then((user) => {\n      return doSomething(user);\n    })\n    .then(() => {\n      return res.status(200).json({message: 'Successfully processed'})\n    })\n    .catch((err) => {\n      if (err.name === 'CastError') {\n        return res.status(404).json({message: 'Not found'});\n      }\n      return res.status(500).json({message: 'Server error'});\n    });\n});\n```\n\n\u30e6\u30fc\u30b6ID\u3067\u30e6\u30fc\u30b6\u3092\u691c\u7d22\u3057\u3001\u30e6\u30fc\u30b6\u304c\u5b58\u5728\u3059\u308c\u3070\u305d\u306e\u307e\u307e\u51e6\u7406\u3092\u7d99\u7d9a\u3001\u30e6\u30fc\u30b6\u304c\u5b58\u5728\u3057\u306a\u3051\u308c\u3070 `404 Not found` \u3092\u8fd4\u3059\u3068\u3044\u3046\u51e6\u7406\u3002\n\n`User`\u30e2\u30c7\u30eb\u306fmongoose\u3092\u4f7f\u3063\u3066\u3044\u308b\u60f3\u5b9a\u3067\u3001mongoose\u306fID\u304c\u5b58\u5728\u3057\u306a\u3051\u308c\u3070then\u306bnull\u3092\u6e21\u3057\u3001\u5b58\u5728\u3059\u308c\u3070user\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3059\u3002\n\u307e\u305f\u3001ID\u304cMongoDB\u306eObjectID\u306e\u5f62\u5f0f\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306frejected\u3068\u306a\u308a\u3001`CastError`\u3092\u6e21\u3059\u3002\n\n\u3053\u3053\u3067\u554f\u984c\u306a\u306e\u306f\u3001ID\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u3001\uff15\u884c\u76ee\u306e`res.json()`\u3067\u51e6\u7406\u3092\u7d42\u4e86\u3057\u305f\u3044\u306e\u3060\u304c\u3001Promise\u30c1\u30a7\u30fc\u30f3\u306f\u3053\u3053\u3067\u7d42\u4e86\u305b\u305a\u6b21\u306ethen\u306b\u9032\u3093\u3067\u3057\u307e\u3046\u3053\u3068\u3002\n\nPromise\u30c1\u30a7\u30fc\u30f3\u3092\u9014\u4e2d\u3067\u7d42\u4e86\u3055\u305b\u308b\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u3088\u3044\u306e\u304b\uff1f\n\n## throw\u3059\u308b\nPromise\u30c1\u30a7\u30fc\u30f3\u306f`try-catch`\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u306e\u3067\u3001Promise\u30c1\u30a7\u30fc\u30f3\u3092\u7d42\u4e86\u3055\u305b\u305f\u3044\u5834\u6240\u3067throw\u3059\u308c\u3070catch\u306b\u51e6\u7406\u304c\u79fb\u308b\u3002catch\u3067\u306f\u30a8\u30e9\u30fc\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u5909\u3048\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u826f\u3044\u3002\n\n```js\napp.get('/users/:id', (req, res) => {\n  return User.findById(req.params.id)\n    .then((user) => {\n      if (!user) {\n        throw new NotFound();\n      }\n      return user;\n    })\n    .then((user) => {\n      return doSomething(user);\n    })\n    .then(() => {\n      return res.status(200).json({message: 'Successfully processed'})\n    })\n    .catch((err) => {\n      if (err instanceof NotFound) {\n        return res.status(404).json(err);\n      } else if (err.name === 'CastError') {\n        return res.status(404).json({message: 'Not found'});\n      }\n      return res.status(500).json({message: 'Server error'});\n    });\n});\n\nclass NotFound extends Error {\n  constructor(message) {\n    super(message);\n    this.description = message;\n    this.name = 'NotFound';\n    this.status = 404;\n  }\n}\n```\n\n\u3053\u3053\u3067\u306f\u30ab\u30b9\u30bf\u30e0\u30a8\u30e9\u30fc\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u3044\u3066\u3001`instanceof`\u3067\u30a8\u30e9\u30fc\u30af\u30e9\u30b9\u3092\u5224\u5b9a\u3057\u3066\u51e6\u7406\u3092\u308f\u3051\u308b\u3068\u3044\u3046\u65b9\u6cd5\u3092\u3068\u3063\u3066\u3044\u308b\u3002\n\n## bluebird\u3092\u4f7f\u3046\nNative Promise\u306b\u306f\u306a\u3044bluebird\u306eFiltered Catch\u3092\u4f7f\u3046\u3068\u3001Java\u306a\u3069\u306e\u4ed6\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u898b\u308b\u3088\u3046\u306a\u66f8\u304d\u304b\u305f\u304c\u3067\u304d\u308b\u3002\n\n```js\n...\nconst mongoose = require('mongoose');\nconst bluebird = require('bluebird');\nmongoose.Promise = bluebird;  // Promise\u306bbluebird\u3092\u4f7f\u3046\n...\n\napp.get('/users/:id', (req, res) => {\n  return User.findById(req.params.id)\n    .then((user) => {\n      if (!user) {\n        throw new NotFound();\n      }\n      return user;\n    })\n    .then((user) => {\n      return doSomething(user);\n    })\n    .then(() => {\n      return res.status(200).json({message: 'Successfully processed'})\n    })\n    .catch(NotFound, (err) => {\n      return res.status(404).json(err);\n    })\n    .catch({name: 'CastError'}, (err) => {\n      return res.status(404).json({message: 'Not found'});\n    })\n    .catch((err) => {\n      return res.status(500).json({message: 'Server error'});\n    });\n});\n```\n\nFiltered Catch\u306f`catch(ErrorClass, handler)`\u3068\u3044\u3046\u66f8\u304d\u65b9\u304c\u3067\u304d\u3066\u3001catch\u3057\u305f\u30a8\u30e9\u30fc\u304c`ErrorClass`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3060\u3063\u305f\u3089\u3001handler\u3092\u5b9f\u884c\u3059\u308b\u3002\u305d\u3057\u3066\u3001\u4e00\u3064\u306ecatch\u304c\u5b9f\u884c\u3055\u308c\u305f\u3089\u3001\u305d\u306e\u5f8c\u306ecatch\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\u3002\n\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u3044\u3048\u3070\u3001`NotFound`\u306b\u30de\u30c3\u30c1\u3057\u305f\u3089\u3001\u305d\u306e\u5f8c\u306e\uff12\u3064\u306ecatch\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\u3002\n\n\u306a\u304a\u3001`catch({name: 'CastError'}, handler)`\u306f\u3001catch\u306b\u6e21\u3055\u308c\u305f\u30a8\u30e9\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8err\u306ename\u30d7\u30ed\u30d1\u30c6\u30a3\u304c`CastError`\u3060\u3063\u305f\u3089\u3001\u305d\u306ehandler\u3092\u5b9f\u884c\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u3002\n\n## \u53c2\u8003\n* http://stackoverflow.com/questions/26076511/handling-multiple-catches-in-promise-chain\n* http://bluebirdjs.com/docs/api/catch.html#filtered-catch\n"}