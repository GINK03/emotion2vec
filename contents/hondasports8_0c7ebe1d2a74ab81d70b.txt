{"context": "\n\n\u4f7f\u7528\u30b5\u30fc\u30d3\u30b9\n\nAWS API Gateway\nAWS Lambda\nLINE Message API\n\n\n\u958b\u767a\u74b0\u5883\u7b49\n\nJava 1.8\nEclipse\nMaven\n\n\n\u76ee\u7684\n\nLine Message API\u3068\u306e\u8a71\u306e\u4ed5\u65b9\u3092\u77e5\u308a\u305f\u3044\nAWS Lambda\u306e\u4f7f\u3044\u65b9\u3092\u77e5\u308a\u305f\u3044\u3002\n\n\n\u3053\u306e\u8a18\u4e8b\u3067\u8aac\u660e\u3092\u7701\u3044\u3066\u3044\u308b\u3053\u3068\n\nLINE\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u958b\u8a2d\u3084Webhook URL\u306e\u8a2d\u5b9a\nAPI Gateway\u306e\u8a2d\u5b9a\u306e\u4ed5\u65b9\nLine Message API\u5074\u3067\"Server IP Whitelist\"\u3092\u8a2d\u5b9a\u3057\u3001AWS\u5074\u3067\u3082\u8a8d\u8a3c\u3055\u305b\u308b\u4ed5\u7d44\u307f\n\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u9001\u4fe1\u5143\u304cLINE\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u7f72\u540d\u691c\u8a3c\nLine\u3067\u8a2d\u5b9a\u3055\u308c\u308bChannel Access Token\u306fLambda\u306e\u74b0\u5883\u5909\u6570\u304b\u3089\u53d6\u5f97\u3059\u308b\u4ed5\u7d44\u307f\n\n\n\u624b\u9806\n\n1. LINE Message API\n\n\u30a2\u30ab\u30a6\u30f3\u30c8\u958b\u8a2d\nWebhook URL\u306e\u8a2d\u5b9a\n\n\n2. AWS API Gateway\n\n\u30ea\u30bd\u30fc\u30b9\u4f5c\u6210\n\u4f5c\u6210\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u3068Lambda Function\u3092\u9023\u643a\n\n\n3. Lambda Function\n3.1. JSON\u3092POJO\u3067\u53d7\u3051\u53d6\u308b\u305f\u3081\u306eInput\u30af\u30e9\u30b9\u4f5c\u6210\n3.2. Output\u30af\u30e9\u30b9\u4f5c\u6210\n3.3. Input\u304b\u3089replyToken, text\u53d6\u5f97\u3057\u3001Output\u306b\u683c\u7d0d\u3002\u5408\u308f\u305b\u3066Reply Message\u306b\u5fc5\u8981\u306a\u60c5\u5831\u3082\u30bb\u30c3\u30c8\u3002\n3.4. Output\u3092JSON\u306b\u5909\u63db\n3.5. \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u751f\u6210\u3057\u9001\u4fe1\n3.6. \u5168\u4f53\u30b3\u30fc\u30c9\n\n3.1. JSON\u3092POJO\u3067\u53d7\u3051\u53d6\u308b\u305f\u3081\u306eInput\u30af\u30e9\u30b9\u4f5c\u6210\n\u4e0b\u8a18\u306eJSON\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u9001\u4fe1\u3055\u308c\u308b\u306e\u3067\u3001Input\u30af\u30e9\u30b9\u3082\u305d\u308c\u306b\u5408\u308f\u305b\u3066\u69cb\u7bc9\u3059\u308b\n{\n  \"events\": [\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"message\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"U206d25c2ea6bd87c17655609a1c37cb8\"\n      },\n      \"message\": {\n        \"id\": \"325708\",\n        \"type\": \"text\",\n        \"text\": \"Hello, world\"\n      }\n    },\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"follow\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"U206d25c2ea6bd87c17655609a1c37cb8\"\n      }\n    }\n  ]\n}\n\n\nInput.java\npackage jp.linebot;\n\nimport java.util.List;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Input {\n\n    private Events[] events;\n\n}\n\n\n\nEvents.java\npackage jp.linebot;\n\nimport org.joda.time.DateTime;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Events {\n    private String replyToken;\n    private String type;\n    private Long timestamp;\n    private Source source;\n    private Message message;    \n}\n\n\n\nSource.java\npackage jp.linebot;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Source {\n    private String type;\n    private String userId;\n}\n\n\n\nMessage.java\npackage jp.linebot;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Message {\n    private String id;\n    private String type;\n    private String text;    \n}\n\n\n\n3.2. Output\u30af\u30e9\u30b9\u4f5c\u6210\n\nOutput.java\npackage jp.linebot;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport lombok.Data;\n\n@Data\npublic class Output {\n\n    private String replyToken;\n    private List<Messages> messages = new ArrayList<>();\n}\n\n\n\nMessages.java\npackage jp.linebot;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Messages {\n\n    private String type;\n    private String text;\n}\n\n\n\n3.3. Input\u304b\u3089replyToken, text\u53d6\u5f97\u3057\u3001Output\u306b\u683c\u7d0d\u3002\u5408\u308f\u305b\u3066Reply Message\u306b\u5fc5\u8981\u306a\u60c5\u5831\u3082\u30bb\u30c3\u30c8\u3002\nOutput output = new Output();\noutput.setReplyToken(input.getEvents()[0].getReplyToken());\nMessages outMessage = new Messages();\noutMessage.setType(\"text\");\noutMessage.setText(input.getEvents()[0].getMessage().getText() + \"?\");\noutput.getMessages().add(outMessage);\n\n\n3.4. Output\u3092JSON\u306b\u5909\u63db\nGson gson = new Gson();\ncontext.getLogger().log(gson.toJson(output));\n\n\n3.5. \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u751f\u6210\u3057\u9001\u4fe1\nhttpPost = new HttpPost(\"https://api.line.me/v2/bot/message/reply\");\nhttpPost.setHeader(\"Content-Type\", \"application/json\");\nhttpPost.setHeader(\"Authorization\", \"Bearer \" + \"{Channel Access Token}\");\nStringEntity entity = new StringEntity(gson.toJson(output), StandardCharsets.UTF_8);\nhttpPost.setEntity(entity);\n\ntry (CloseableHttpClient client = HttpClients.createDefault();\n     CloseableHttpResponse resp = client.execute(httpPost);\n     BufferedReader br = new BufferedReader(new InputStreamReader(resp.getEntity().getContent(), StandardCharsets.UTF_8)))\n{\n        int statusCode = resp.getStatusLine().getStatusCode();\n        switch (statusCode) {\n        case 200:\n            br.readLine();\n            break;\n        default:\n        }\n    } catch (final ClientProtocolException e) {\n    } catch (final IOException e) {\n}\nreturn null;\n\n\n3.6. \u5168\u4f53\u30b3\u30fc\u30c9\n\nLambdaFunctionHandler.java\npackage jp.linebot;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.UnsupportedEncodingException;\nimport java.nio.charset.StandardCharsets;\n\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.google.gson.Gson;\n\npublic class LambdaFunctionHandler implements RequestHandler<Input, Object> {\n\n    @Override\n    public Object handleRequest(Input input, Context context) {\n        // TODO Auto-generated method stub\n\n        context.getLogger().log(\"token : \" + input.getEvents()[0].getReplyToken());\n        context.getLogger().log(\"text : \" + input.getEvents()[0].getMessage().getText());\n\n        Output output = new Output();\n        output.setReplyToken(input.getEvents()[0].getReplyToken());\n        Messages outMessage = new Messages();\n        outMessage.setType(\"text\");\n        outMessage.setText(input.getEvents()[0].getMessage().getText() + \"?\");\n        output.getMessages().add(outMessage);\n\n        HttpPost httpPost = new HttpPost(\"https://api.line.me/v2/bot/message/reply\");\n        httpPost.setHeader(\"Content-Type\", \"application/json\");\n        httpPost.setHeader(\"Authorization\", \"Bearer \" + \"{Channel Access Token}\");\n\n        Gson gson = new Gson();\n        context.getLogger().log(gson.toJson(output));\n        StringEntity entity = new StringEntity(gson.toJson(output), StandardCharsets.UTF_8);\n        httpPost.setEntity(entity);\n        try (CloseableHttpClient client = HttpClients.createDefault();\n                CloseableHttpResponse resp = client.execute(httpPost);\n                BufferedReader br = new BufferedReader(new InputStreamReader(resp.getEntity().getContent(), StandardCharsets.UTF_8)))\n        {\n            int statusCode = resp.getStatusLine().getStatusCode();\n            switch (statusCode) {\n            case 200:\n                br.readLine();\n                break;\n            default:\n            }\n        } catch (final ClientProtocolException e) {\n        } catch (final IOException e) {\n        }\n        return null;\n    }\n\n}\n\n\n\n\u53c2\u8003\u30ea\u30f3\u30af\n\n\nLine Message API \nJackson \u3067 JSON \u30c7\u30fc\u30bf\u3092 POJO \u306b\u683c\u7d0d\n\u3010Java\u3011LINE\u306eMessaging API\u3092\u30b5\u30fc\u30d6\u30ec\u30c3\u30c8\u3067\u3055\u304f\u3063\u3068\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3089\u672a\u6765\u304c\u62d3\u3051\u305f\n\n# \u4f7f\u7528\u30b5\u30fc\u30d3\u30b9\n * AWS API Gateway\n * AWS Lambda\n * LINE Message API\n\n# \u958b\u767a\u74b0\u5883\u7b49\n * Java 1.8\n * Eclipse\n * Maven\n\n# \u76ee\u7684\n\n* Line Message API\u3068\u306e\u8a71\u306e\u4ed5\u65b9\u3092\u77e5\u308a\u305f\u3044\n* AWS Lambda\u306e\u4f7f\u3044\u65b9\u3092\u77e5\u308a\u305f\u3044\u3002\n\n# \u3053\u306e\u8a18\u4e8b\u3067\u8aac\u660e\u3092\u7701\u3044\u3066\u3044\u308b\u3053\u3068\n * LINE\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u958b\u8a2d\u3084Webhook URL\u306e\u8a2d\u5b9a\n\n * API Gateway\u306e\u8a2d\u5b9a\u306e\u4ed5\u65b9\n\n * Line Message API\u5074\u3067\"Server IP Whitelist\"\u3092\u8a2d\u5b9a\u3057\u3001AWS\u5074\u3067\u3082\u8a8d\u8a3c\u3055\u305b\u308b\u4ed5\u7d44\u307f\n\n * \u30ea\u30af\u30a8\u30b9\u30c8\u306e\u9001\u4fe1\u5143\u304cLINE\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u7f72\u540d\u691c\u8a3c\n\n * Line\u3067\u8a2d\u5b9a\u3055\u308c\u308bChannel Access Token\u306fLambda\u306e\u74b0\u5883\u5909\u6570\u304b\u3089\u53d6\u5f97\u3059\u308b\u4ed5\u7d44\u307f\n\n# \u624b\u9806\n## 1. LINE Message API\n 1. \u30a2\u30ab\u30a6\u30f3\u30c8\u958b\u8a2d\n 2. Webhook URL\u306e\u8a2d\u5b9a\n\n## 2. AWS API Gateway\n 1. \u30ea\u30bd\u30fc\u30b9\u4f5c\u6210\n 2. \u4f5c\u6210\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u3068Lambda Function\u3092\u9023\u643a\n\n## 3. Lambda Function\n\n3.1. JSON\u3092POJO\u3067\u53d7\u3051\u53d6\u308b\u305f\u3081\u306eInput\u30af\u30e9\u30b9\u4f5c\u6210\n3.2. Output\u30af\u30e9\u30b9\u4f5c\u6210\n3.3. Input\u304b\u3089replyToken, text\u53d6\u5f97\u3057\u3001Output\u306b\u683c\u7d0d\u3002\u5408\u308f\u305b\u3066Reply Message\u306b\u5fc5\u8981\u306a\u60c5\u5831\u3082\u30bb\u30c3\u30c8\u3002\n3.4. Output\u3092JSON\u306b\u5909\u63db\n3.5. \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u751f\u6210\u3057\u9001\u4fe1\n3.6. \u5168\u4f53\u30b3\u30fc\u30c9\n\n### 3.1. JSON\u3092POJO\u3067\u53d7\u3051\u53d6\u308b\u305f\u3081\u306eInput\u30af\u30e9\u30b9\u4f5c\u6210\n\n\u4e0b\u8a18\u306eJSON\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u9001\u4fe1\u3055\u308c\u308b\u306e\u3067\u3001Input\u30af\u30e9\u30b9\u3082\u305d\u308c\u306b\u5408\u308f\u305b\u3066\u69cb\u7bc9\u3059\u308b\n\n```js\n{\n  \"events\": [\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"message\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"U206d25c2ea6bd87c17655609a1c37cb8\"\n      },\n      \"message\": {\n        \"id\": \"325708\",\n        \"type\": \"text\",\n        \"text\": \"Hello, world\"\n      }\n    },\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"follow\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"U206d25c2ea6bd87c17655609a1c37cb8\"\n      }\n    }\n  ]\n}\n```\n\n```Input.java\npackage jp.linebot;\n\nimport java.util.List;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Input {\n\t\n\tprivate Events[] events;\n\t\n}\n```\n\n```Events.java\npackage jp.linebot;\n\nimport org.joda.time.DateTime;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Events {\n\tprivate String replyToken;\n\tprivate String type;\n\tprivate Long timestamp;\n\tprivate Source source;\n\tprivate Message message;\t\n}\n````\n\n```Source.java\npackage jp.linebot;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Source {\n\tprivate String type;\n\tprivate String userId;\n}\n```\n\n```Message.java\npackage jp.linebot;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Message {\n\tprivate String id;\n\tprivate String type;\n\tprivate String text;\t\n}\n```\n\n### 3.2. Output\u30af\u30e9\u30b9\u4f5c\u6210\n\n```Output.java\npackage jp.linebot;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport lombok.Data;\n\n@Data\npublic class Output {\n\n\tprivate String replyToken;\n\tprivate List<Messages> messages = new ArrayList<>();\n}\n```\n\n```Messages.java\npackage jp.linebot;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Messages {\n\n\tprivate String type;\n\tprivate String text;\n}\n```\n\n### 3.3. Input\u304b\u3089replyToken, text\u53d6\u5f97\u3057\u3001Output\u306b\u683c\u7d0d\u3002\u5408\u308f\u305b\u3066Reply Message\u306b\u5fc5\u8981\u306a\u60c5\u5831\u3082\u30bb\u30c3\u30c8\u3002\n \n```Java\nOutput output = new Output();\noutput.setReplyToken(input.getEvents()[0].getReplyToken());\nMessages outMessage = new Messages();\noutMessage.setType(\"text\");\noutMessage.setText(input.getEvents()[0].getMessage().getText() + \"?\");\noutput.getMessages().add(outMessage);\n```\n\n### 3.4. Output\u3092JSON\u306b\u5909\u63db\n\n```java\nGson gson = new Gson();\ncontext.getLogger().log(gson.toJson(output));\n```\n\n### 3.5. \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u751f\u6210\u3057\u9001\u4fe1\n \n```Java\nhttpPost = new HttpPost(\"https://api.line.me/v2/bot/message/reply\");\nhttpPost.setHeader(\"Content-Type\", \"application/json\");\nhttpPost.setHeader(\"Authorization\", \"Bearer \" + \"{Channel Access Token}\");\nStringEntity entity = new StringEntity(gson.toJson(output), StandardCharsets.UTF_8);\nhttpPost.setEntity(entity);\n\ntry (CloseableHttpClient client = HttpClients.createDefault();\n     CloseableHttpResponse resp = client.execute(httpPost);\n     BufferedReader br = new BufferedReader(new InputStreamReader(resp.getEntity().getContent(), StandardCharsets.UTF_8)))\n{\n        int statusCode = resp.getStatusLine().getStatusCode();\n        switch (statusCode) {\n        case 200:\n            br.readLine();\n            break;\n        default:\n        }\n    } catch (final ClientProtocolException e) {\n    } catch (final IOException e) {\n}\nreturn null;\n```\n\n### 3.6. \u5168\u4f53\u30b3\u30fc\u30c9\n\n```LambdaFunctionHandler.java\npackage jp.linebot;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.UnsupportedEncodingException;\nimport java.nio.charset.StandardCharsets;\n\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.google.gson.Gson;\n\npublic class LambdaFunctionHandler implements RequestHandler<Input, Object> {\n\n\t@Override\n\tpublic Object handleRequest(Input input, Context context) {\n\t\t// TODO Auto-generated method stub\n\n\t\tcontext.getLogger().log(\"token : \" + input.getEvents()[0].getReplyToken());\n\t\tcontext.getLogger().log(\"text : \" + input.getEvents()[0].getMessage().getText());\n\t\t\n\t\tOutput output = new Output();\n\t\toutput.setReplyToken(input.getEvents()[0].getReplyToken());\n\t\tMessages outMessage = new Messages();\n\t\toutMessage.setType(\"text\");\n\t\toutMessage.setText(input.getEvents()[0].getMessage().getText() + \"?\");\n\t\toutput.getMessages().add(outMessage);\n\n\t\tHttpPost httpPost = new HttpPost(\"https://api.line.me/v2/bot/message/reply\");\n\t\thttpPost.setHeader(\"Content-Type\", \"application/json\");\n\t\thttpPost.setHeader(\"Authorization\", \"Bearer \" + \"{Channel Access Token}\");\n\n\t\tGson gson = new Gson();\n\t\tcontext.getLogger().log(gson.toJson(output));\n\t\tStringEntity entity = new StringEntity(gson.toJson(output), StandardCharsets.UTF_8);\n\t\thttpPost.setEntity(entity);\n\t\ttry (CloseableHttpClient client = HttpClients.createDefault();\n                CloseableHttpResponse resp = client.execute(httpPost);\n                BufferedReader br = new BufferedReader(new InputStreamReader(resp.getEntity().getContent(), StandardCharsets.UTF_8)))\n        {\n            int statusCode = resp.getStatusLine().getStatusCode();\n            switch (statusCode) {\n            case 200:\n                br.readLine();\n                break;\n            default:\n            }\n        } catch (final ClientProtocolException e) {\n        } catch (final IOException e) {\n        }\n\t\treturn null;\n\t}\n\t\n}\n```\n\n# \u53c2\u8003\u30ea\u30f3\u30af\n* [Line Message API](https://devdocs.line.me/ja/) \n* [Jackson \u3067 JSON \u30c7\u30fc\u30bf\u3092 POJO \u306b\u683c\u7d0d](http://blog.kymmt.com/entry/jackson_pojo)\n* [\u3010Java\u3011LINE\u306eMessaging API\u3092\u30b5\u30fc\u30d6\u30ec\u30c3\u30c8\u3067\u3055\u304f\u3063\u3068\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3089\u672a\u6765\u304c\u62d3\u3051\u305f](http://www.maytry.net/java-line-messaging-api/)\n", "tags": ["AWS", "lambda", "Java", "Line"]}