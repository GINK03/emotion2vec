{"context": " More than 1 year has passed since last update.\n\u6ce8\u610f\n\u30bf\u30a4\u30c8\u30eb\u306b MATLAB \u3068\u3042\u308b\u3051\u3069\u5b9f\u969b\u306f MATLAB \u306e\u30b3\u30fc\u30c9\u306f\u4e00\u5207\u51fa\u3066\u304d\u307e\u305b\u3093\n\n\u5143\u30cd\u30bf\u306f Grayscale to Red-Green-Blue (MATLAB Jet) color scale \u304b\u3089\u3002\n\u753b\u50cf\u51fa\u529b\u3057\u3066\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3002\u7d50\u8ad6\u304b\u3089\u8a00\u3046\u3068\u4ee5\u4e0b\u306e\u8868\u793a\u306b\u306a\u308b\u3002\njet.png \u306e\u7d50\u679c\n\nhot-to-cold.png \u306e\u7d50\u679c (jet \u3088\u308a\u30de\u30a4\u30eb\u30c9)\n\n\u753b\u50cf\u51fa\u529b\u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3092\u7528\u3044\u305f\u3002stb_image_write.h \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u6bd4\u8f03\u7684\u65b0\u3057\u3044\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3042\u308c\u3070\u30b3\u30f3\u30d1\u30a4\u30eb\u901a\u308b\u306f\u305a (VS2013 \u3067\u8a66\u3057\u305f)\u3002\n#include <cstdint>\n\n#define STB_IMAGE_WRITE_IMPLEMENTATION\n#include \"stb_image_write.h\"\n\nnamespace {\n\n/* code from http://stackoverflow.com/a/7811134 */\n\ntypedef struct {\n    double r,g,b;\n} COLOUR;\n\nCOLOUR GetColour(double v,double vmin,double vmax)\n{\n    COLOUR c = {1.0,1.0,1.0}; // white\n    double dv;\n\n    if (v < vmin)\n        v = vmin;\n    if (v > vmax)\n        v = vmax;\n    dv = vmax - vmin;\n\n    if (v < (vmin + 0.25 * dv)) {\n        c.r = 0;\n        c.g = 4 * (v - vmin) / dv;\n    } else if (v < (vmin + 0.5 * dv)) {\n        c.r = 0;\n        c.b = 1 + 4 * (vmin + 0.25 * dv - v) / dv;\n    } else if (v < (vmin + 0.75 * dv)) {\n        c.r = 4 * (v - vmin - 0.5 * dv) / dv;\n        c.b = 0;\n    } else {\n        c.g = 1 + 4 * (vmin + 0.75 * dv - v) / dv;\n        c.b = 0;\n    }\n\n    return(c);\n}\n\n/* code from http://stackoverflow.com/a/7706668 */\n\ndouble interpolate( double val, double y0, double x0, double y1, double x1 ) {\n    return (val-x0)*(y1-y0)/(x1-x0) + y0;\n}\n\ndouble base( double val ) {\n    if ( val <= -0.75 ) return 0;\n    else if ( val <= -0.25 ) return interpolate( val, 0.0, -0.75, 1.0, -0.25 );\n    else if ( val <= 0.25 ) return 1.0;\n    else if ( val <= 0.75 ) return interpolate( val, 1.0, 0.25, 0.0, 0.75 );\n    else return 0.0;\n}\n\ndouble red( double gray ) {\n    return base( gray - 0.5 );\n}\ndouble green( double gray ) {\n    return base( gray );\n}\ndouble blue( double gray ) {\n    return base( gray + 0.5 );\n}\n\n} /* anonymous namespace */\n\nint main()\n{\n    static const int width = 256;\n    static const int height = 128;\n    static const int components = 4;\n    static const int stride = width * components;\n    uint8_t buffer[width * height * components];\n    for (int i = 0; i < width; i++) {\n        const float max = width - 1.0f;\n        COLOUR c = GetColour(i / max, 0.0f, 1.0f);\n        for (int j = 0; j < height; j++) {\n            int offset = i * components + j * stride;\n            buffer[offset + 0] = uint8_t(c.r * 0xff);\n            buffer[offset + 1] = uint8_t(c.g * 0xff);\n            buffer[offset + 2] = uint8_t(c.b * 0xff);\n            buffer[offset + 3] = 0xff;\n        }\n    }\n    stbi_write_png(\"hot-to-cold.png\", width, height, components, buffer, stride);\n    for (int i = 0; i < width; i++) {\n        const float max = (width * 0.5f) - 1.0f;\n        const float gray = (i - max) / max;\n        for (int j = 0; j < height; j++) {\n            int offset = i * components + j * stride;\n            buffer[offset + 0] = uint8_t(red(gray) * 0xff);\n            buffer[offset + 1] = uint8_t(green(gray) * 0xff);\n            buffer[offset + 2] = uint8_t(blue(gray) * 0xff);\n            buffer[offset + 3] = 0xff;\n        }\n    }\n    stbi_write_png(\"jet.png\", width, height, components, buffer, stride);\n    return 0;\n}\n\n\u3061\u306a\u307f\u306b\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b libigl (MPL) \u306b\u3082 jet \u3068\u3044\u3046\u95a2\u6570\u304c\u3042\u308a\u3001Eigen \u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u4f7f\u3046\u306a\u3089\u305d\u3061\u3089\u306e\u307b\u3046\u304c\u4fbf\u5229\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n2015/5/25 \u8ffd\u8a18 (5/30 \u66f4\u65b0)\n\u5225\u306e\u9078\u629e\u80a2\u3068\u3057\u3066 GLSL \u306e\u30b7\u30a7\u30fc\u30c0\u5b9f\u88c5\u3068 C++ \u306e\u5b9f\u88c5\u306e\u4e21\u65b9\u304c\u5165\u3063\u3066\u308b glsl-colormap \u304c\u3042\u308b\u3002\u3053\u3061\u3089\u306e\u307b\u3046\u304c\u7a2e\u985e\u304c\u8c4a\u5bcc\u3067 MATLAB \u306e Jet \u3084\u305d\u306e\u4ed6\u306e\u30ab\u30e9\u30fc\u30de\u30c3\u30d7\u3001gnuplot \u3084 transform \u5f62\u5f0f\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3002\n\n> \u6ce8\u610f\n> \u30bf\u30a4\u30c8\u30eb\u306b MATLAB \u3068\u3042\u308b\u3051\u3069\u5b9f\u969b\u306f MATLAB \u306e\u30b3\u30fc\u30c9\u306f\u4e00\u5207\u51fa\u3066\u304d\u307e\u305b\u3093\n\n\u5143\u30cd\u30bf\u306f [Grayscale to Red-Green-Blue (MATLAB Jet) color scale](http://stackoverflow.com/questions/7706339/grayscale-to-red-green-blue-matlab-jet-color-scale) \u304b\u3089\u3002\n\n\u753b\u50cf\u51fa\u529b\u3057\u3066\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3002\u7d50\u8ad6\u304b\u3089\u8a00\u3046\u3068\u4ee5\u4e0b\u306e\u8868\u793a\u306b\u306a\u308b\u3002\n\n`jet.png` \u306e\u7d50\u679c\n![jet.png](https://qiita-image-store.s3.amazonaws.com/0/3984/8d5c93da-8530-44b0-a3e5-b7141603ab11.png \"jet.png\")\n\n\n`hot-to-cold.png` \u306e\u7d50\u679c (jet \u3088\u308a\u30de\u30a4\u30eb\u30c9)\n![hot-to-cold.png](https://qiita-image-store.s3.amazonaws.com/0/3984/d0e8b1fe-7bbe-3060-2c06-3e814c3fcdab.png \"hot-to-cold.png\")\n\n\n\u753b\u50cf\u51fa\u529b\u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3092\u7528\u3044\u305f\u3002[stb_image_write.h](https://github.com/nothings/stb/blob/master/stb_image_write.h) \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u6bd4\u8f03\u7684\u65b0\u3057\u3044\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3042\u308c\u3070\u30b3\u30f3\u30d1\u30a4\u30eb\u901a\u308b\u306f\u305a (VS2013 \u3067\u8a66\u3057\u305f)\u3002\n\n```c++\n#include <cstdint>\n\n#define STB_IMAGE_WRITE_IMPLEMENTATION\n#include \"stb_image_write.h\"\n\nnamespace {\n\n/* code from http://stackoverflow.com/a/7811134 */\n\ntypedef struct {\n    double r,g,b;\n} COLOUR;\n\nCOLOUR GetColour(double v,double vmin,double vmax)\n{\n    COLOUR c = {1.0,1.0,1.0}; // white\n    double dv;\n\n    if (v < vmin)\n        v = vmin;\n    if (v > vmax)\n        v = vmax;\n    dv = vmax - vmin;\n\n    if (v < (vmin + 0.25 * dv)) {\n        c.r = 0;\n        c.g = 4 * (v - vmin) / dv;\n    } else if (v < (vmin + 0.5 * dv)) {\n        c.r = 0;\n        c.b = 1 + 4 * (vmin + 0.25 * dv - v) / dv;\n    } else if (v < (vmin + 0.75 * dv)) {\n        c.r = 4 * (v - vmin - 0.5 * dv) / dv;\n        c.b = 0;\n    } else {\n        c.g = 1 + 4 * (vmin + 0.75 * dv - v) / dv;\n        c.b = 0;\n    }\n\n    return(c);\n}\n\n/* code from http://stackoverflow.com/a/7706668 */\n\ndouble interpolate( double val, double y0, double x0, double y1, double x1 ) {\n    return (val-x0)*(y1-y0)/(x1-x0) + y0;\n}\n\ndouble base( double val ) {\n    if ( val <= -0.75 ) return 0;\n    else if ( val <= -0.25 ) return interpolate( val, 0.0, -0.75, 1.0, -0.25 );\n    else if ( val <= 0.25 ) return 1.0;\n    else if ( val <= 0.75 ) return interpolate( val, 1.0, 0.25, 0.0, 0.75 );\n    else return 0.0;\n}\n\ndouble red( double gray ) {\n    return base( gray - 0.5 );\n}\ndouble green( double gray ) {\n    return base( gray );\n}\ndouble blue( double gray ) {\n    return base( gray + 0.5 );\n}\n\n} /* anonymous namespace */\n\nint main()\n{\n    static const int width = 256;\n    static const int height = 128;\n    static const int components = 4;\n    static const int stride = width * components;\n    uint8_t buffer[width * height * components];\n    for (int i = 0; i < width; i++) {\n        const float max = width - 1.0f;\n        COLOUR c = GetColour(i / max, 0.0f, 1.0f);\n        for (int j = 0; j < height; j++) {\n            int offset = i * components + j * stride;\n            buffer[offset + 0] = uint8_t(c.r * 0xff);\n            buffer[offset + 1] = uint8_t(c.g * 0xff);\n            buffer[offset + 2] = uint8_t(c.b * 0xff);\n            buffer[offset + 3] = 0xff;\n        }\n    }\n    stbi_write_png(\"hot-to-cold.png\", width, height, components, buffer, stride);\n    for (int i = 0; i < width; i++) {\n        const float max = (width * 0.5f) - 1.0f;\n        const float gray = (i - max) / max;\n        for (int j = 0; j < height; j++) {\n            int offset = i * components + j * stride;\n            buffer[offset + 0] = uint8_t(red(gray) * 0xff);\n            buffer[offset + 1] = uint8_t(green(gray) * 0xff);\n            buffer[offset + 2] = uint8_t(blue(gray) * 0xff);\n            buffer[offset + 3] = 0xff;\n        }\n    }\n    stbi_write_png(\"jet.png\", width, height, components, buffer, stride);\n    return 0;\n}\n```\n\n\u3061\u306a\u307f\u306b\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b [libigl](https://github.com/libigl/libigl) (MPL) \u306b\u3082 [jet](https://github.com/libigl/libigl/blob/master/include/igl/jet.h) \u3068\u3044\u3046\u95a2\u6570\u304c\u3042\u308a\u3001[Eigen](http://eigen.tuxfamily.org/index.php?title=Main_Page) \u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u4f7f\u3046\u306a\u3089\u305d\u3061\u3089\u306e\u307b\u3046\u304c\u4fbf\u5229\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n## 2015/5/25 \u8ffd\u8a18 (5/30 \u66f4\u65b0)\n\n\u5225\u306e\u9078\u629e\u80a2\u3068\u3057\u3066 GLSL \u306e\u30b7\u30a7\u30fc\u30c0\u5b9f\u88c5\u3068 C++ \u306e\u5b9f\u88c5\u306e\u4e21\u65b9\u304c\u5165\u3063\u3066\u308b [glsl-colormap](https://github.com/kbinani/glsl-colormap/) \u304c\u3042\u308b\u3002\u3053\u3061\u3089\u306e\u307b\u3046\u304c\u7a2e\u985e\u304c\u8c4a\u5bcc\u3067 MATLAB \u306e Jet \u3084\u305d\u306e\u4ed6\u306e\u30ab\u30e9\u30fc\u30de\u30c3\u30d7\u3001gnuplot \u3084 transform \u5f62\u5f0f\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3002\n", "tags": ["C++", "C", "GLSL"]}