{"context": " More than 1 year has passed since last update.AWS \u306b Cloud Watch \u3068\u3044\u3046\u30b5\u30fc\u30d3\u30b9\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30a4\u30d9\u30f3\u30c8\u306e\u901a\u77e5\u306b\u7279\u5316\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3001\u30ed\u30b0\u305d\u306e\u3082\u306e\u3092\u53d6\u308a\u6271\u3046\u306b\u306f\u6700\u60aa\u306a UI \u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3057\u304b\u3057 Cloud Watch \u306b\u3082 API \u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002API \u3092\u4f7f\u3063\u3066\u30ed\u30b0\u3092\u4e38\u3005 get \u3057\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\n\nop.py\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport codecs\nimport boto.logs\nimport time\nfrom datetime import datetime\nfrom datetime import timedelta\n\nsys.stdout = codecs.getwriter('utf-8')(sys.stdout)\n\naws_region = '\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u8a2d\u5b9a'\nlog_group = 'Log Group \u3092\u8a2d\u5b9a'\n\nepoc = datetime(1970, 1, 1)\ntimestamp = (datetime.strptime(sys.argv[1], '%Y-%m-%dT%H:%M:%S') - epoc).total_seconds() * 1000\n\nlogs = boto.logs.connect_to_region(aws_region)\n\ndef find_streams(token, timestamp):\n    def is_valid_stream(stream):\n        return timestamp < stream.get('lastIngestionTime')\n\n    data = logs.describe_log_streams(log_group_name = log_group, next_token = token)\n\n    streams = filter(is_valid_stream, data['logStreams'])\n    if 'nextToken' not in data:\n        return streams\n\n    # \u30ec\u30fc\u30c8\u5236\u9650\n    time.sleep(0.5)\n\n    for stream in streams:\n        print u'%s, %s' % (stream['logStreamName'],  datetime.utcfromtimestamp(stream.get('lastIngestionTime') / 1000))\n    streams.extend(find_streams(data['nextToken'], timestamp))\n    return streams\n\nstreams = [stream['logStreamName'] for stream in find_streams(None, timestamp)]\nfor stream in streams:\n    print u'*-*-*-*-*-*-*-*-*-*- %s -*-*-*-*-*-*-*-*-*-*' % stream\n    def find_event(token, last_token):\n        data = logs.get_log_events(log_group_name = log_group, log_stream_name = stream, start_from_head = True, next_token = token)\n        event = data['events']\n\n        if data['nextForwardToken'] != last_token:\n            # \u30ec\u30fc\u30c8\u5236\u9650\n            time.sleep(0.5)\n            event.extend(find_event(data['nextForwardToken'], token))\n\n        return event\n\n    events = find_event(None, None)\n    for e in events:\n        print u'%s' % e['message']\n\n\n\u3053\u306e Python \u30b9\u30af\u30ea\u30d7\u30c8\u306f\u3001\u300cLast Ingestion Time\u300d\u304c\u6307\u5b9a\u3055\u308c\u305f\u65e5\u6642\u4ee5\u964d\u306e Log Stream \u3092\u3072\u305f\u3059\u3089get\u3057\u307e\u3059\u3002\u6642\u523b\u306f UTC \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\nop.py 2015-03-01T07:00:00\n\n\u51fa\u529b\u306e\u524d\u6bb5\u3067\u306f\u5bfe\u8c61\u3068\u306a\u308b LogStream \u306e\u540d\u524d\u3068\u3001Last Ingestion Time \u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u51fa\u529b\u306e\u5f8c\u6bb5\u3067\u306f Log Stream \u306e message \u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\u30ed\u30fc\u30ab\u30eb\u306b\u6301\u3063\u3066\u304f\u308c\u3070\u3053\u3063\u3061\u306e\u3082\u3093\u3067\u3059\u3002\u597d\u304d\u306a\u30c4\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u89e3\u6790\u3057\u307e\u3057\u3087\u3046\u3002\nAWS \u306b Cloud Watch \u3068\u3044\u3046\u30b5\u30fc\u30d3\u30b9\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30a4\u30d9\u30f3\u30c8\u306e\u901a\u77e5\u306b\u7279\u5316\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3001\u30ed\u30b0\u305d\u306e\u3082\u306e\u3092\u53d6\u308a\u6271\u3046\u306b\u306f\u6700\u60aa\u306a UI \u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3057\u304b\u3057 Cloud Watch \u306b\u3082 API \u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002API \u3092\u4f7f\u3063\u3066\u30ed\u30b0\u3092\u4e38\u3005 get \u3057\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\n \n```py:op.py\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport codecs\nimport boto.logs\nimport time\nfrom datetime import datetime\nfrom datetime import timedelta\n\nsys.stdout = codecs.getwriter('utf-8')(sys.stdout)\n\naws_region = '\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u8a2d\u5b9a'\nlog_group = 'Log Group \u3092\u8a2d\u5b9a'\n\nepoc = datetime(1970, 1, 1)\ntimestamp = (datetime.strptime(sys.argv[1], '%Y-%m-%dT%H:%M:%S') - epoc).total_seconds() * 1000\n\nlogs = boto.logs.connect_to_region(aws_region)\n\ndef find_streams(token, timestamp):\n\tdef is_valid_stream(stream):\n\t\treturn timestamp < stream.get('lastIngestionTime')\n\n\tdata = logs.describe_log_streams(log_group_name = log_group, next_token = token)\n\n\tstreams = filter(is_valid_stream, data['logStreams'])\n\tif 'nextToken' not in data:\n\t\treturn streams\n\n\t# \u30ec\u30fc\u30c8\u5236\u9650\n\ttime.sleep(0.5)\n\n\tfor stream in streams:\n\t\tprint u'%s, %s' % (stream['logStreamName'],  datetime.utcfromtimestamp(stream.get('lastIngestionTime') / 1000))\n\tstreams.extend(find_streams(data['nextToken'], timestamp))\n\treturn streams\n\nstreams = [stream['logStreamName'] for stream in find_streams(None, timestamp)]\nfor stream in streams:\n\tprint u'*-*-*-*-*-*-*-*-*-*- %s -*-*-*-*-*-*-*-*-*-*' % stream\n\tdef find_event(token, last_token):\n\t\tdata = logs.get_log_events(log_group_name = log_group, log_stream_name = stream, start_from_head = True, next_token = token)\n\t\tevent = data['events']\n\n\t\tif data['nextForwardToken'] != last_token:\n\t\t\t# \u30ec\u30fc\u30c8\u5236\u9650\n\t\t\ttime.sleep(0.5)\n\t\t\tevent.extend(find_event(data['nextForwardToken'], token))\n\n\t\treturn event\n\n\tevents = find_event(None, None)\n\tfor e in events:\n\t\tprint u'%s' % e['message']\n```\n \n \n\u3053\u306e Python \u30b9\u30af\u30ea\u30d7\u30c8\u306f\u3001\u300cLast Ingestion Time\u300d\u304c\u6307\u5b9a\u3055\u308c\u305f\u65e5\u6642\u4ee5\u964d\u306e Log Stream \u3092\u3072\u305f\u3059\u3089get\u3057\u307e\u3059\u3002\u6642\u523b\u306f UTC \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```bash\nop.py 2015-03-01T07:00:00\n```\n \n\u51fa\u529b\u306e\u524d\u6bb5\u3067\u306f\u5bfe\u8c61\u3068\u306a\u308b LogStream \u306e\u540d\u524d\u3068\u3001Last Ingestion Time \u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u51fa\u529b\u306e\u5f8c\u6bb5\u3067\u306f Log Stream \u306e message \u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\u30ed\u30fc\u30ab\u30eb\u306b\u6301\u3063\u3066\u304f\u308c\u3070\u3053\u3063\u3061\u306e\u3082\u3093\u3067\u3059\u3002\u597d\u304d\u306a\u30c4\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u89e3\u6790\u3057\u307e\u3057\u3087\u3046\u3002\n", "tags": ["AWS", "CloudWatch", "Python"]}