{"context": "\u300eOn Lisp\u300f\u3092\u8aad\u3093\u3067\u3044\u3066\u51fa\u3066\u304d\u305f\u300c\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed\u300d(\u3042\u308b\u7a2e\u306e\"\u4e0d\u5065\u5168\u306a\"\u30de\u30af\u30ed)\u3092Clojure\u3067\u3082\u66f8\u3044\u3066\u307f\u305f\u3002\n\u3064\u3044\u3067\u306b\u3001Common Lisp\u3068Clojure\u3067\u306e\u30de\u30af\u30ed\u306e\u300c\u5909\u6570\u6355\u6349\u300d\u306b\u3064\u3044\u3066\u3082\u78ba\u304b\u3081\u3066\u307f\u305f\u3002\n\n\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed\n\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed(anaphoric macro; \u524d\u65b9\u7167\u5fdc\u7684\u306a\u30de\u30af\u30ed)\u3068\u306f\u3001\u901a\u5e38\u306f\u6709\u5bb3\u306a\u30de\u30af\u30ed\u306e\u300c\u5909\u6570\u6355\u6349\u300d(variable capture)\u3092\u610f\u56f3\u7684\u306b\u767a\u751f\u3055\u305b\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u524d\u65b9\u7167\u5fdc\u7684\u306a\u30b7\u30f3\u30dc\u30eb(\u2252 \u81ea\u7136\u8a00\u8a9e\u306b\u304a\u3051\u308b\u4ee3\u540d\u8a5e)\u3092\u6271\u3048\u308b\u3088\u3046\u306b\u3057\u305f\u30de\u30af\u30ed\u306e\u3053\u3068\u3002\n\u3061\u306a\u307f\u306b\u3001\u5909\u6570\u6355\u6349\u3092\u8d77\u3053\u3057\u3048\u306a\u3044\u5b89\u5168\u306a\u30de\u30af\u30ed\u306f\u300c\u5065\u5168\u306a\u30de\u30af\u30ed(hygienic macro)\u300d\u3068\u547c\u3070\u308c\u308b\u3002\n\n\u30de\u30af\u30ed\u306e\u5909\u6570\u6355\u6349\n\u58ca\u308c\u305f if-not / unless\u30de\u30af\u30ed\u3092\u901a\u3057\u3066\u30de\u30af\u30ed\u306e\u5909\u6570\u6355\u6349\u304c\u767a\u751f\u3059\u308b\u4ed5\u7d44\u307f\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3002\n\nCommon Lisp\u306e\u5834\u5408\nCommon Lisp\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3057\u305f\u3068\u3059\u308b\u3002\n;; Common Lisp\n\n(defmacro if-not (test then else)\n  `(let ((x ,test))  ; \u901a\u5e38\u3053\u3053\u3067let\u306f\u5fc5\u8981\u306a\u3044\u304c\u30b7\u30f3\u30d7\u30eb\u306a\u30de\u30af\u30ed\u306e\u4f8b\u3068\u3057\u3066\n     (if (not x)\n         ,then\n         ,else)))\n\n\u5b9a\u7fa9\u3057\u305f\u30de\u30af\u30ed\u3092\u6b21\u306e\u3088\u3046\u306b\u5229\u7528\u3057\u3066\u307f\u308b\u3068\u3001\n;; Common Lisp\n\n> (let ((x 10))\n    (if-not nil\n            (format t \"x: ~a~%\" x)\n            (princ \"TRUE\")))\n\nx: NIL  ; \u6a19\u6e96\u51fa\u529b\nNIL     ; \u8a55\u4fa1\u7d50\u679c\n\n\u30de\u30af\u30ed\u5229\u7528\u8005\u306e\u671f\u5f85\u306b\u53cd\u3057\u3066\u3001\u5909\u6570 x \u306e\u5024\u304c nil \u3068\u51fa\u529b\u3055\u308c\u3066\u3057\u307e\u3046\u3002\n\u539f\u56e0\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u3053\u306e\u5f0f\u3092\u518d\u5e30\u7684\u306b\u30de\u30af\u30ed\u5c55\u958b\u3057\u3066\u307f\u308b\u3068\u3001\n;; Common Lisp\n\n> (macroexpand-all '(let ((x 10))\n                      (if-not nil \n                              (format t \"x: ~a~%\" x)\n                              (princ \"TRUE\"))))\n\n(LET ((X 10))\n  (LET ((X NIL))\n    (IF (NOT X)\n        (FORMAT T \"x: ~a~%\" X)\n        (PRINC \"TRUE\"))))\n\n\u30de\u30af\u30ed\u5229\u7528\u6642\u306b\u4f7f\u3063\u3066\u3044\u308b\u5909\u6570 x \u3068if-not\u30de\u30af\u30ed\u306e\u5b9a\u7fa9\u3067\u5229\u7528\u3057\u305f\u5909\u6570 x \u304c\u885d\u7a81\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3053\u306e\u6319\u52d5\u306e\u539f\u56e0\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\u3053\u306e\u3088\u3046\u306a\u73fe\u8c61\u3092\u30de\u30af\u30ed\u306e\u5909\u6570\u6355\u6349(variable capture)\u3068\u3044\u3046\u3002\n\u203b Common Lisp\u3067\u306e\u5909\u6570\u6355\u6349\u306e\u305d\u306e\u4ed6\u306e\u4f8b\u3068\u56de\u907f\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u300eOn Lisp\u300f\u7b2c9\u7ae0\u306a\u3069\u3092\u53c2\u7167\u3002\n\nClojure\u306e\u5834\u5408\nClojure\u3067\u3082\u540c\u69d8\u306e\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u308b\u3002\n;; Clojure\n\n(defmacro unless [test then else]\n  `(let [x# ~test]  ; \u901a\u5e38\u3053\u3053\u3067let\u306f\u5fc5\u8981\u306a\u3044\u304c\u30b7\u30f3\u30d7\u30eb\u306a\u30de\u30af\u30ed\u306e\u4f8b\u3068\u3057\u3066\n     (if (not x#)\n       ~then\n       ~else)))\n\n\u3053\u308c\u3092\u5148\u307b\u3069\u306eCommon Lisp\u306e\u4f8b\u3068\u540c\u3058\u3088\u3046\u306b\u5229\u7528\u3057\u3066\u307f\u308b\u3068\u3001\n;; Clojure\n\n> (let [x 10]\n    (unless false\n      (printf \"x: %s%n\" x)\n      (println \"TRUE\")))\n\nx: 10  ; \u6a19\u6e96\u51fa\u529b\nnil    ; \u8a55\u4fa1\u7d50\u679c\n\n\u30de\u30af\u30ed\u5229\u7528\u8005\u306e\u671f\u5f85\u901a\u308a\u306e\u7d50\u679c\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n\u3053\u308c\u306f\u3001Clojure\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30de\u30af\u30ed\u5c55\u958b\u3055\u308c\u308b\u305f\u3081\u3002\n;; Clojure\n\n> (macroexpand-all '(let [x 10]\n                      (unless false\n                        (printf \"x: %s%n\" x)\n                        (println \"TRUE\"))))\n\n(let* [x 10]\n  (let* [x__1291__auto__ false]\n    (if (clojure.core/not x__1291__auto__)\n      (printf \"x: %s%n\" x)\n      (println \"TRUE\"))))\n\n\u5909\u6570 x \u306e\u885d\u7a81\u306f\u672a\u7136\u306b\u56de\u907f\u3055\u308c\u3066\u3044\u308b\u3002\nClojure\u306e\u30de\u30af\u30ed\u3067\u306f\u3001\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30af\u30a9\u30fc\u30c8\u3059\u308b\u3068\u3001\n\n\u30b7\u30f3\u30dc\u30eb\u304c\u305d\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u57fa\u3065\u304f\u540d\u524d\u7a7a\u9593\u3067\u4fee\u98fe\u3055\u308c\u308b\n\n\ne.g. \u4e0a\u8a18\u306e clojure.core/not\n\n\n\n\n\u30b7\u30f3\u30dc\u30eb# \u3068\u3044\u3046\u5f62\u5f0f\u306e\u30ed\u30fc\u30ab\u30eb\u306a\u675f\u7e1b\u304cauto-gensym\u3055\u308c\u308b\n\n\ne.g. \u4e0a\u8a18\u306e x__1291__auto__\n\n\n\n\n\u3053\u306e\u4ed5\u7d44\u307f\u306b\u3088\u308a\u3001Clojure\u3067\u306f\u30de\u30af\u30ed\u306e\u5909\u6570\u6355\u6349\u304c\u767a\u751f\u3057\u306b\u304f\u304f\u306a\u3063\u3066\u3044\u308b\u3002\n\nClojure\u3067\u5909\u6570\u6355\u6349\n\u5148\u307b\u3069\u306e unless \u30de\u30af\u30ed\u3092\u5c11\u3057\u66f8\u304d\u63db\u3048\u305f unless' \u3092\u65b0\u305f\u306b\u5b9a\u7fa9\u3057\u3066\u307f\u308b\u3002\n;; Clojure\n\n(defmacro unless' [test then else]\n  `(let [~'x ~test]  ; \u901a\u5e38\u3053\u3053\u3067let\u306f\u5fc5\u8981\u306a\u3044\u304c\u30b7\u30f3\u30d7\u30eb\u306a\u30de\u30af\u30ed\u306e\u4f8b\u3068\u3057\u3066\n     (if (not ~'x)\n       ~then\n       ~else)))\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u30ed\u30fc\u30ab\u30eb\u306a\u675f\u7e1b\u3092 ~'\u30b7\u30f3\u30dc\u30eb \u3068\u3044\u3046\u5f62\u5f0f(\u3064\u307e\u308a\u3001\u30af\u30a9\u30fc\u30c8\u3057\u3066\u30a2\u30f3\u30af\u30a9\u30fc\u30c8)\u3067\u5b9a\u7fa9\u3059\u308b\u3068(\u3053\u3053\u3067\u306f ~'x)\u3001\n;; Clojure\n\n> (macroexpand-all '(let [x 10]\n                      (unless' false\n                        (printf \"x: %s%n\" x)\n                        (println \"TRUE\"))))\n\n(let* [x 10]\n  (let* [x false]\n    (if (clojure.core/not x)\n      (printf \"x: %s%n\" x)\n      (println \"TRUE\"))))\n\n\u5909\u6570 x \u304c\u540d\u524d\u7a7a\u9593\u3067\u4fee\u98fe\u3055\u308c\u308b\u3053\u3068\u3082auto-gensym\u3055\u308c\u308b\u3053\u3068\u3082\u306a\u304f\u305d\u306e\u307e\u307e\u306e\u5f62\u3067\u30de\u30af\u30ed\u5c55\u958b\u7d50\u679c\u306b\u73fe\u308c\u308b\u3002\n\u3053\u306e\u5f0f\u3092\u5b9f\u969b\u306b\u8a55\u4fa1\u3057\u3066\u307f\u308b\u3068\u3001\n;; Clojure\n\n> (let [x 10]\n    (unless' false\n      (printf \"x: %s%n\" x)\n      (println \"TRUE\")))\n\nx: false  ; \u6a19\u6e96\u51fa\u529b\nnil       ; \u8a55\u4fa1\u7d50\u679c\n\n\u4e0a\u8ff0\u306eCommon Lisp\u30b3\u30fc\u30c9\u3068\u540c\u69d8\u306b\u5909\u6570\u6355\u6349\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\n\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u306a if (= aif)\n\u901a\u5e38\u306f\u30d0\u30b0\u306e\u539f\u56e0\u306b\u306a\u308a\u3046\u308b\u30de\u30af\u30ed\u306e\u5909\u6570\u6355\u6349\u3092\u610f\u56f3\u7684\u306b\u767a\u751f\u3055\u305b\u3001\u6709\u52b9\u5229\u7528\u3059\u308b\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed(anaphoric macro)\u3092\u66f8\u3044\u3066\u307f\u308b\u3002\n\u300eOn Lisp\u300f\u7b2c14\u7ae0\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed\u306e\u3072\u3068\u3064 aif \u306f\n(let ((x (f)))\n  (if x\n      (g x)\n      (h)))\n\n\u306e\u3088\u3046\u306a\u30d1\u30bf\u30fc\u30f3\u3092\u62bd\u8c61\u5316\u3057\u3001\n(aif (f)\n     (g it)\n     (h))\n\n\u3068\u66f8\u3051\u308b\u3088\u3046\u306b\u3059\u308b\u3082\u306e\u3002\n\u3064\u307e\u308a\u3001\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u5f0f(\u3053\u3053\u3067\u306f (f))\u3092\u30de\u30af\u30ed\u3067\u6697\u9ed9\u306b\u5b9a\u7fa9\u3055\u308c\u308b it \u3067\u53d7\u3051\u3066\u518d\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\u3053\u306e aif \u306fCommon Lisp\u3067\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3002\n;; Common Lisp\n\n(defmacro aif (test then &optional else)\n  `(let ((it ,test))\n     (if it\n         ,then\n         ,else)))\n\n\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30af\u30a9\u30fc\u30c8\u5185\u3067\u30ed\u30fc\u30ab\u30eb\u675f\u7e1b\u3057\u3066\u3044\u308b\u30b7\u30f3\u30dc\u30eb it \u304c\u5909\u6570\u6355\u6349\u3055\u308c\u308b\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001\u4ee3\u540d\u8a5e\u306e\u3088\u3046\u306b\u4f7f\u3046\u3053\u3068\u3092\u53ef\u80fd\u306b\u3057\u3066\u3044\u308b\u3002\naif \u3092Clojure\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3068\u3001\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n;; Clojure\n\n(defmacro aif\n  ([test then]\n   `(aif ~test ~then nil))\n  ([test then else]\n   `(let [~'it ~test]\n      (if ~'it\n        ~then\n        ~else))))\n\n\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30af\u30a9\u30fc\u30c8\u5185\u3067 ~'it \u3068\u3059\u308b\u3053\u3068\u3067\u610f\u56f3\u7684\u306b\u5909\u6570\u6355\u6349\u3092\u767a\u751f\u3055\u305b\u3066\u3044\u308b\u3002\n\u3053\u308c\u3092\u5229\u7528\u3059\u308c\u3070\u3001\n(let [x (f)]\n  (if x\n    (g x)\n    (h)))\n\n\u306e\u3088\u3046\u306a\u30d1\u30bf\u30fc\u30f3\u3092\n(aif (f)\n  (g it)\n  (h))\n\n\u3068\u66f8\u3051\u308b\u3002\n\u5b9f\u969b\u306b\u306f\u3001 clojure.core/if-let \u30de\u30af\u30ed\u3092\u5229\u7528\u3059\u308c\u3070\n(if-let [it (f)]\n  (g it)\n  (h))\n\n\u3068\u3001\u30e6\u30fc\u30b6\u5074\u3067\u660e\u793a\u7684\u306b\u4efb\u610f\u306e\u540d\u524d(\u3053\u3053\u3067\u306f\u305f\u307e\u305f\u307e it)\u3067\u675f\u7e1b\u3092\u4f5c\u3063\u3066\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u3001 Clojure\u3067\u306f\u4e00\u822c\u306b\u3053\u3061\u3089\u306e\u30b9\u30bf\u30a4\u30eb\u304c\u597d\u307e\u308c\u308b\u3002\n\n\u305d\u306e\u4ed6\u306e\u5178\u578b\u4f8b\n\n\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u306a when (= awhen)\n;; Common Lisp\n\n(defmacro awhen (test &body body)\n  `(aif ,test\n        (progn ,@body)))\n\n;; Clojure\n\n(defmacro awhen [test & body]\n  `(aif ~test\n     (do ~@body)))\n\n;; \u5229\u7528\u4f8b\n(awhen (:fr {:en \"Hello\" :fr \"Bonjour\" :ru \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\"})\n  (str it \", Clojure!\"))\n;; => \"Bonjour, Clojure!\"\n\ncf. \u660e\u793a\u7684\u306a\u540d\u524d\u675f\u7e1b\u3067\u540c\u7b49\u306e\u3053\u3068\u304c\u3067\u304d\u308b\u30de\u30af\u30ed: clojure.core/when-let\n\n\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u306a lambda (= alambda)\n;; Common Lisp\n\n(defmacro alambda (params &body body)\n  `(labels ((self ,params\n              ,@body))\n     #'self))\n\n;; Clojure\n\n(defmacro alambda [params & body]\n  `(letfn [(~'self ~params\n             ~@body)]\n     ~'self))\n\n;; \u5229\u7528\u4f8b\n(def fib (alambda [n]\n           (if (< n 2)\n             1\n             (+ (self (- n 2))\n                (self (- n 1))))))\n(map fib (range 10))\n;; => (1 1 2 3 5 8 13 21 34 55)\n\ncf. \u660e\u793a\u7684\u306a\u540d\u524d\u675f\u7e1b\u3067\u540c\u7b49\u306e\u3053\u3068\u304c\u3067\u304d\u308b\u30de\u30af\u30ed: clojure.core/fn\n\n\u5fdc\u7528\u4f8b\nClojure\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306ethreading macro clojure.core/-> \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n;; Clojure\n\n(defmacro ->\n  \"Threads the expr through the forms. Inserts x as the\n  second item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  second item in second form, etc.\"\n  {:added \"1.0\"}\n  [x & forms]\n  (loop [x x, forms forms]\n    (if forms\n      (let [form (first forms)\n            threaded (if (seq? form)\n                       (with-meta `(~(first form) ~x ~@(next form)) (meta form))\n                       (list form x))]\n        (recur threaded (next forms)))\n      x)))\n\n\u3053\u306e\u30de\u30af\u30ed\u5b9a\u7fa9\u3092\u3082\u3068\u306b\u3001\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u306a -> \u3092\u66f8\u3044\u3066\u307f\u305f(\u4eee\u306b => \u3068\u547d\u540d\u3059\u308b)\u3002\n;; Clojure\n\n(defmacro => [x & forms]\n  (loop [x x\n         forms forms]\n    (if forms\n      (let [form (first forms)\n            threaded (if (seq? form)\n                       (with-meta (if (->> form\n                                           flatten\n                                           (some #{'it}))\n                                    `(let [~'it ~x]\n                                       ~form)\n                                    `(~(first form) ~x ~@(next form)))\n                                  (meta form))\n                       (list form x))]\n        (recur threaded (next forms)))\n      x)))\n\n;; \u5229\u7528\u4f8b\n(=> (range 2)\n    (concat [2 3])\n    (map inc it)\n    (concat it [5] (reverse it)))\n;; => (1 2 3 4 5 4 3 2 1)\n\ncf. \u660e\u793a\u7684\u306a\u540d\u524d\u675f\u7e1b\u3067\u540c\u7b49\u306e\u3053\u3068\u304c\u3067\u304d\u308b\u30de\u30af\u30ed: clojure.core/as->\n\u57fa\u672c\u7684\u306b\u306f clojure.core/-> \u3068\u540c\u3058\u3088\u3046\u306b\u632f\u308b\u821e\u3046\u304c\u3001\u30b7\u30f3\u30dc\u30eb it \u304c\u542b\u307e\u308c\u308b\u30ea\u30b9\u30c8\u3092\u898b\u3064\u3051\u305f\u3089\u3001 it \u3092\u76f4\u524d\u306e\u5f0f\u306e\u5024\u306b\u7f6e\u304d\u63db\u3048\u308b\u3068\u3044\u3046\u3082\u306e\u3002\n\n\u307e\u3068\u3081\n\nClojure\u3067\u3082 ~'\u30b7\u30f3\u30dc\u30eb \u3068\u3044\u3046\u5f62\u5f0f\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3067\u304d\u308b\n\u4e00\u822c\u306b\u306f if-let, when-let \u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u5074\u3067\u660e\u793a\u7684\u306a\u675f\u7e1b\u3092\u4f5c\u308b\u30de\u30af\u30ed\u306e\u307b\u3046\u304c\u597d\u307e\u308c\u308b\u304c\u3001\u30e9\u30a4\u30d6\u30e9\u30ea/DSL\u69cb\u7bc9\u306e\u305f\u3081\u306e\u5b9f\u88c5\u6280\u8853\u3068\u3057\u3066\u5f79\u306b\u7acb\u3064(\u304b\u3082)\n\n\nFurther Reading\n\n\u66f8\u7c4d\n\n\n\u300eOn Lisp\u300f\n\n\u7b2c9\u7ae0 \u5909\u6570\u6355\u6349\n\u7b2c14\u7ae0 \u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed\n\n\n\nThe Joy of Clojure, Second Edition\n\n8.5 Using macros to control symbolic resolution time\n\n\n\n\n\u30d6\u30ed\u30b0\u8a18\u4e8b\n\n\u30de\u30af\u30ed\u3092\u4f7f\u3046\u3079\u304d\u304b\u3069\u3046\u306a\u306e\u304b - Qiita\nLisp\u3067\u30de\u30af\u30ed - (lisping :at now)\nScheme:\u30de\u30af\u30ed:CommonLisp\u3068\u306e\u6bd4\u8f03\nUnhygienic (\"anaphoric\") Clojure macros for fun and profit\nfogus: Monkeying with Clojure\u2019s defmethod Macro\n\n[\u300eOn Lisp\u300f](https://estore.ohmsha.co.jp/titles/978427406637P)\u3092\u8aad\u3093\u3067\u3044\u3066\u51fa\u3066\u304d\u305f\u300c\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed\u300d(\u3042\u308b\u7a2e\u306e\"\u4e0d\u5065\u5168\u306a\"\u30de\u30af\u30ed)\u3092Clojure\u3067\u3082\u66f8\u3044\u3066\u307f\u305f\u3002\n\u3064\u3044\u3067\u306b\u3001Common Lisp\u3068Clojure\u3067\u306e\u30de\u30af\u30ed\u306e\u300c\u5909\u6570\u6355\u6349\u300d\u306b\u3064\u3044\u3066\u3082\u78ba\u304b\u3081\u3066\u307f\u305f\u3002\n\n\n# \u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed\n\n**\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed**(anaphoric macro; \u524d\u65b9\u7167\u5fdc\u7684\u306a\u30de\u30af\u30ed)\u3068\u306f\u3001\u901a\u5e38\u306f\u6709\u5bb3\u306a\u30de\u30af\u30ed\u306e\u300c**\u5909\u6570\u6355\u6349**\u300d(variable capture)\u3092\u610f\u56f3\u7684\u306b\u767a\u751f\u3055\u305b\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u524d\u65b9\u7167\u5fdc\u7684\u306a\u30b7\u30f3\u30dc\u30eb(\u2252 \u81ea\u7136\u8a00\u8a9e\u306b\u304a\u3051\u308b\u4ee3\u540d\u8a5e)\u3092\u6271\u3048\u308b\u3088\u3046\u306b\u3057\u305f\u30de\u30af\u30ed\u306e\u3053\u3068\u3002\n\u3061\u306a\u307f\u306b\u3001\u5909\u6570\u6355\u6349\u3092\u8d77\u3053\u3057\u3048\u306a\u3044\u5b89\u5168\u306a\u30de\u30af\u30ed\u306f\u300c[**\u5065\u5168\u306a\u30de\u30af\u30ed**](https://ja.wikipedia.org/wiki/%E5%81%A5%E5%85%A8%E3%81%AA%E3%83%9E%E3%82%AF%E3%83%AD)(hygienic macro)\u300d\u3068\u547c\u3070\u308c\u308b\u3002\n\n\n# \u30de\u30af\u30ed\u306e\u5909\u6570\u6355\u6349\n\n\u58ca\u308c\u305f `if-not` / `unless`\u30de\u30af\u30ed\u3092\u901a\u3057\u3066\u30de\u30af\u30ed\u306e\u5909\u6570\u6355\u6349\u304c\u767a\u751f\u3059\u308b\u4ed5\u7d44\u307f\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3002\n\n## Common Lisp\u306e\u5834\u5408\n\nCommon Lisp\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3057\u305f\u3068\u3059\u308b\u3002\n\n```lisp\n;; Common Lisp\n\n(defmacro if-not (test then else)\n  `(let ((x ,test))  ; \u901a\u5e38\u3053\u3053\u3067let\u306f\u5fc5\u8981\u306a\u3044\u304c\u30b7\u30f3\u30d7\u30eb\u306a\u30de\u30af\u30ed\u306e\u4f8b\u3068\u3057\u3066\n     (if (not x)\n         ,then\n         ,else)))\n```\n\n\u5b9a\u7fa9\u3057\u305f\u30de\u30af\u30ed\u3092\u6b21\u306e\u3088\u3046\u306b\u5229\u7528\u3057\u3066\u307f\u308b\u3068\u3001\n\n```lisp\n;; Common Lisp\n\n> (let ((x 10))\n    (if-not nil\n            (format t \"x: ~a~%\" x)\n            (princ \"TRUE\")))\n\nx: NIL  ; \u6a19\u6e96\u51fa\u529b\nNIL     ; \u8a55\u4fa1\u7d50\u679c\n```\n\n\u30de\u30af\u30ed\u5229\u7528\u8005\u306e\u671f\u5f85\u306b\u53cd\u3057\u3066\u3001\u5909\u6570 `x` \u306e\u5024\u304c `nil` \u3068\u51fa\u529b\u3055\u308c\u3066\u3057\u307e\u3046\u3002\n\u539f\u56e0\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u3053\u306e\u5f0f\u3092\u518d\u5e30\u7684\u306b\u30de\u30af\u30ed\u5c55\u958b\u3057\u3066\u307f\u308b\u3068\u3001\n\n```lisp\n;; Common Lisp\n\n> (macroexpand-all '(let ((x 10))\n                      (if-not nil \n                              (format t \"x: ~a~%\" x)\n                              (princ \"TRUE\"))))\n\n(LET ((X 10))\n  (LET ((X NIL))\n    (IF (NOT X)\n        (FORMAT T \"x: ~a~%\" X)\n        (PRINC \"TRUE\"))))\n```\n\n\u30de\u30af\u30ed\u5229\u7528\u6642\u306b\u4f7f\u3063\u3066\u3044\u308b\u5909\u6570 `x` \u3068if-not\u30de\u30af\u30ed\u306e\u5b9a\u7fa9\u3067\u5229\u7528\u3057\u305f\u5909\u6570 `x` \u304c\u885d\u7a81\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3053\u306e\u6319\u52d5\u306e\u539f\u56e0\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\u3053\u306e\u3088\u3046\u306a\u73fe\u8c61\u3092\u30de\u30af\u30ed\u306e\u5909\u6570\u6355\u6349(variable capture)\u3068\u3044\u3046\u3002\n\u203b Common Lisp\u3067\u306e\u5909\u6570\u6355\u6349\u306e\u305d\u306e\u4ed6\u306e\u4f8b\u3068\u56de\u907f\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f[\u300eOn Lisp\u300f\u7b2c9\u7ae0](http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/variableCapture.html)\u306a\u3069\u3092\u53c2\u7167\u3002\n\n## Clojure\u306e\u5834\u5408\n\nClojure\u3067\u3082\u540c\u69d8\u306e\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u308b\u3002\n\n```clojure\n;; Clojure\n\n(defmacro unless [test then else]\n  `(let [x# ~test]  ; \u901a\u5e38\u3053\u3053\u3067let\u306f\u5fc5\u8981\u306a\u3044\u304c\u30b7\u30f3\u30d7\u30eb\u306a\u30de\u30af\u30ed\u306e\u4f8b\u3068\u3057\u3066\n     (if (not x#)\n       ~then\n       ~else)))\n```\n\n\u3053\u308c\u3092\u5148\u307b\u3069\u306eCommon Lisp\u306e\u4f8b\u3068\u540c\u3058\u3088\u3046\u306b\u5229\u7528\u3057\u3066\u307f\u308b\u3068\u3001\n\n```clojure\n;; Clojure\n\n> (let [x 10]\n    (unless false\n      (printf \"x: %s%n\" x)\n      (println \"TRUE\")))\n\nx: 10  ; \u6a19\u6e96\u51fa\u529b\nnil    ; \u8a55\u4fa1\u7d50\u679c\n```\n\n\u30de\u30af\u30ed\u5229\u7528\u8005\u306e\u671f\u5f85\u901a\u308a\u306e\u7d50\u679c\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n\u3053\u308c\u306f\u3001Clojure\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30de\u30af\u30ed\u5c55\u958b\u3055\u308c\u308b\u305f\u3081\u3002\n\n```clojure\n;; Clojure\n\n> (macroexpand-all '(let [x 10]\n                      (unless false\n                        (printf \"x: %s%n\" x)\n                        (println \"TRUE\"))))\n\n(let* [x 10]\n  (let* [x__1291__auto__ false]\n    (if (clojure.core/not x__1291__auto__)\n      (printf \"x: %s%n\" x)\n      (println \"TRUE\"))))\n```\n\n\u5909\u6570 `x` \u306e\u885d\u7a81\u306f\u672a\u7136\u306b\u56de\u907f\u3055\u308c\u3066\u3044\u308b\u3002\nClojure\u306e\u30de\u30af\u30ed\u3067\u306f\u3001\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30af\u30a9\u30fc\u30c8\u3059\u308b\u3068\u3001\n\n- \u30b7\u30f3\u30dc\u30eb\u304c\u305d\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u57fa\u3065\u304f\u540d\u524d\u7a7a\u9593\u3067\u4fee\u98fe\u3055\u308c\u308b\n  - e.g. \u4e0a\u8a18\u306e `clojure.core/not`\n- `\u30b7\u30f3\u30dc\u30eb#` \u3068\u3044\u3046\u5f62\u5f0f\u306e\u30ed\u30fc\u30ab\u30eb\u306a\u675f\u7e1b\u304cauto-gensym\u3055\u308c\u308b\n  - e.g. \u4e0a\u8a18\u306e `x__1291__auto__`\n\n\u3053\u306e\u4ed5\u7d44\u307f\u306b\u3088\u308a\u3001Clojure\u3067\u306f\u30de\u30af\u30ed\u306e\u5909\u6570\u6355\u6349\u304c\u767a\u751f\u3057\u306b\u304f\u304f\u306a\u3063\u3066\u3044\u308b\u3002\n\n## Clojure\u3067\u5909\u6570\u6355\u6349\n\n\u5148\u307b\u3069\u306e `unless` \u30de\u30af\u30ed\u3092\u5c11\u3057\u66f8\u304d\u63db\u3048\u305f `unless'` \u3092\u65b0\u305f\u306b\u5b9a\u7fa9\u3057\u3066\u307f\u308b\u3002\n\n```clojure\n;; Clojure\n\n(defmacro unless' [test then else]\n  `(let [~'x ~test]  ; \u901a\u5e38\u3053\u3053\u3067let\u306f\u5fc5\u8981\u306a\u3044\u304c\u30b7\u30f3\u30d7\u30eb\u306a\u30de\u30af\u30ed\u306e\u4f8b\u3068\u3057\u3066\n     (if (not ~'x)\n       ~then\n       ~else)))\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u30ed\u30fc\u30ab\u30eb\u306a\u675f\u7e1b\u3092 `~'\u30b7\u30f3\u30dc\u30eb` \u3068\u3044\u3046\u5f62\u5f0f(\u3064\u307e\u308a\u3001\u30af\u30a9\u30fc\u30c8\u3057\u3066\u30a2\u30f3\u30af\u30a9\u30fc\u30c8)\u3067\u5b9a\u7fa9\u3059\u308b\u3068(\u3053\u3053\u3067\u306f `~'x`)\u3001\n\n```clojure\n;; Clojure\n\n> (macroexpand-all '(let [x 10]\n                      (unless' false\n                        (printf \"x: %s%n\" x)\n                        (println \"TRUE\"))))\n\n(let* [x 10]\n  (let* [x false]\n    (if (clojure.core/not x)\n      (printf \"x: %s%n\" x)\n      (println \"TRUE\"))))\n```\n\n\u5909\u6570 `x` \u304c\u540d\u524d\u7a7a\u9593\u3067\u4fee\u98fe\u3055\u308c\u308b\u3053\u3068\u3082auto-gensym\u3055\u308c\u308b\u3053\u3068\u3082\u306a\u304f\u305d\u306e\u307e\u307e\u306e\u5f62\u3067\u30de\u30af\u30ed\u5c55\u958b\u7d50\u679c\u306b\u73fe\u308c\u308b\u3002\n\u3053\u306e\u5f0f\u3092\u5b9f\u969b\u306b\u8a55\u4fa1\u3057\u3066\u307f\u308b\u3068\u3001\n\n```clojure\n;; Clojure\n\n> (let [x 10]\n    (unless' false\n      (printf \"x: %s%n\" x)\n      (println \"TRUE\")))\n\nx: false  ; \u6a19\u6e96\u51fa\u529b\nnil       ; \u8a55\u4fa1\u7d50\u679c\n```\n\n\u4e0a\u8ff0\u306eCommon Lisp\u30b3\u30fc\u30c9\u3068\u540c\u69d8\u306b\u5909\u6570\u6355\u6349\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002\n\n\n# \u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u306a `if` (= `aif`)\n\n\u901a\u5e38\u306f\u30d0\u30b0\u306e\u539f\u56e0\u306b\u306a\u308a\u3046\u308b\u30de\u30af\u30ed\u306e\u5909\u6570\u6355\u6349\u3092\u610f\u56f3\u7684\u306b\u767a\u751f\u3055\u305b\u3001\u6709\u52b9\u5229\u7528\u3059\u308b\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed(anaphoric macro)\u3092\u66f8\u3044\u3066\u307f\u308b\u3002\n\n[\u300eOn Lisp\u300f\u7b2c14\u7ae0](http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/anaphoricMacros.html)\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed\u306e\u3072\u3068\u3064 `aif` \u306f\n\n```lisp\n(let ((x (f)))\n  (if x\n      (g x)\n      (h)))\n```\n\n\u306e\u3088\u3046\u306a\u30d1\u30bf\u30fc\u30f3\u3092\u62bd\u8c61\u5316\u3057\u3001\n\n```lisp\n(aif (f)\n     (g it)\n     (h))\n```\n\n\u3068\u66f8\u3051\u308b\u3088\u3046\u306b\u3059\u308b\u3082\u306e\u3002\n\u3064\u307e\u308a\u3001\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u5f0f(\u3053\u3053\u3067\u306f `(f)`)\u3092\u30de\u30af\u30ed\u3067\u6697\u9ed9\u306b\u5b9a\u7fa9\u3055\u308c\u308b `it` \u3067\u53d7\u3051\u3066\u518d\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\u3053\u306e `aif` \u306fCommon Lisp\u3067\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3002\n\n```lisp\n;; Common Lisp\n\n(defmacro aif (test then &optional else)\n  `(let ((it ,test))\n     (if it\n         ,then\n         ,else)))\n```\n\n\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30af\u30a9\u30fc\u30c8\u5185\u3067\u30ed\u30fc\u30ab\u30eb\u675f\u7e1b\u3057\u3066\u3044\u308b\u30b7\u30f3\u30dc\u30eb `it` \u304c\u5909\u6570\u6355\u6349\u3055\u308c\u308b\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001\u4ee3\u540d\u8a5e\u306e\u3088\u3046\u306b\u4f7f\u3046\u3053\u3068\u3092\u53ef\u80fd\u306b\u3057\u3066\u3044\u308b\u3002\n`aif` \u3092Clojure\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3068\u3001\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```clojure\n;; Clojure\n\n(defmacro aif\n  ([test then]\n   `(aif ~test ~then nil))\n  ([test then else]\n   `(let [~'it ~test]\n      (if ~'it\n        ~then\n        ~else))))\n```\n\n\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30af\u30a9\u30fc\u30c8\u5185\u3067 `~'it` \u3068\u3059\u308b\u3053\u3068\u3067\u610f\u56f3\u7684\u306b\u5909\u6570\u6355\u6349\u3092\u767a\u751f\u3055\u305b\u3066\u3044\u308b\u3002\n\u3053\u308c\u3092\u5229\u7528\u3059\u308c\u3070\u3001\n\n\n```clojure\n(let [x (f)]\n  (if x\n    (g x)\n    (h)))\n```\n\n\u306e\u3088\u3046\u306a\u30d1\u30bf\u30fc\u30f3\u3092\n\n```clojure\n(aif (f)\n  (g it)\n  (h))\n```\n\n\u3068\u66f8\u3051\u308b\u3002\n\u5b9f\u969b\u306b\u306f\u3001 [`clojure.core/if-let`](https://github.com/clojure/clojure/blob/clojure-1.8.0/src/clj/clojure/core.clj#L1749-L1767) \u30de\u30af\u30ed\u3092\u5229\u7528\u3059\u308c\u3070\n\n```clojure\n(if-let [it (f)]\n  (g it)\n  (h))\n```\n\n\u3068\u3001\u30e6\u30fc\u30b6\u5074\u3067\u660e\u793a\u7684\u306b\u4efb\u610f\u306e\u540d\u524d(\u3053\u3053\u3067\u306f\u305f\u307e\u305f\u307e `it`)\u3067\u675f\u7e1b\u3092\u4f5c\u3063\u3066\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u3001 Clojure\u3067\u306f\u4e00\u822c\u306b\u3053\u3061\u3089\u306e\u30b9\u30bf\u30a4\u30eb\u304c\u597d\u307e\u308c\u308b\u3002\n\n\n# \u305d\u306e\u4ed6\u306e\u5178\u578b\u4f8b\n\n#### \u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u306a `when` (= `awhen`)\n\n```lisp\n;; Common Lisp\n\n(defmacro awhen (test &body body)\n  `(aif ,test\n        (progn ,@body)))\n```\n\n```clojure\n;; Clojure\n\n(defmacro awhen [test & body]\n  `(aif ~test\n     (do ~@body)))\n\n;; \u5229\u7528\u4f8b\n(awhen (:fr {:en \"Hello\" :fr \"Bonjour\" :ru \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\"})\n  (str it \", Clojure!\"))\n;; => \"Bonjour, Clojure!\"\n```\ncf. \u660e\u793a\u7684\u306a\u540d\u524d\u675f\u7e1b\u3067\u540c\u7b49\u306e\u3053\u3068\u304c\u3067\u304d\u308b\u30de\u30af\u30ed: [`clojure.core/when-let`](https://github.com/clojure/clojure/blob/clojure-1.8.0/src/clj/clojure/core.clj#L1769-L1782)\n\n#### \u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u306a `lambda` (= `alambda`)\n\n```lisp\n;; Common Lisp\n\n(defmacro alambda (params &body body)\n  `(labels ((self ,params\n              ,@body))\n     #'self))\n```\n\n```clojure\n;; Clojure\n\n(defmacro alambda [params & body]\n  `(letfn [(~'self ~params\n             ~@body)]\n     ~'self))\n\n;; \u5229\u7528\u4f8b\n(def fib (alambda [n]\n           (if (< n 2)\n             1\n             (+ (self (- n 2))\n                (self (- n 1))))))\n(map fib (range 10))\n;; => (1 1 2 3 5 8 13 21 34 55)\n```\ncf. \u660e\u793a\u7684\u306a\u540d\u524d\u675f\u7e1b\u3067\u540c\u7b49\u306e\u3053\u3068\u304c\u3067\u304d\u308b\u30de\u30af\u30ed: [`clojure.core/fn`](https://github.com/clojure/clojure/blob/clojure-1.8.0/src/clj/clojure/core.clj#L4357-L4417)\n\n\n# \u5fdc\u7528\u4f8b\n\nClojure\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306ethreading macro [`clojure.core/->`](https://github.com/clojure/clojure/blob/clojure-1.8.0/src/clj/clojure/core.clj#L1586-L1600) \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\n```clojure\n;; Clojure\n\n(defmacro ->\n  \"Threads the expr through the forms. Inserts x as the\n  second item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  second item in second form, etc.\"\n  {:added \"1.0\"}\n  [x & forms]\n  (loop [x x, forms forms]\n    (if forms\n      (let [form (first forms)\n            threaded (if (seq? form)\n                       (with-meta `(~(first form) ~x ~@(next form)) (meta form))\n                       (list form x))]\n        (recur threaded (next forms)))\n      x)))\n```\n\n\n\u3053\u306e\u30de\u30af\u30ed\u5b9a\u7fa9\u3092\u3082\u3068\u306b\u3001\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u306a `->` \u3092\u66f8\u3044\u3066\u307f\u305f(\u4eee\u306b `=>` \u3068\u547d\u540d\u3059\u308b)\u3002\n\n```clojure\n;; Clojure\n\n(defmacro => [x & forms]\n  (loop [x x\n         forms forms]\n    (if forms\n      (let [form (first forms)\n            threaded (if (seq? form)\n                       (with-meta (if (->> form\n                                           flatten\n                                           (some #{'it}))\n                                    `(let [~'it ~x]\n                                       ~form)\n                                    `(~(first form) ~x ~@(next form)))\n                                  (meta form))\n                       (list form x))]\n        (recur threaded (next forms)))\n      x)))\n\n;; \u5229\u7528\u4f8b\n(=> (range 2)\n    (concat [2 3])\n    (map inc it)\n    (concat it [5] (reverse it)))\n;; => (1 2 3 4 5 4 3 2 1)\n```\ncf. \u660e\u793a\u7684\u306a\u540d\u524d\u675f\u7e1b\u3067\u540c\u7b49\u306e\u3053\u3068\u304c\u3067\u304d\u308b\u30de\u30af\u30ed: [`clojure.core/as->`](https://github.com/clojure/clojure/blob/clojure-1.8.0/src/clj/clojure/core.clj#L7274-L7284)\n\n\u57fa\u672c\u7684\u306b\u306f `clojure.core/->` \u3068\u540c\u3058\u3088\u3046\u306b\u632f\u308b\u821e\u3046\u304c\u3001\u30b7\u30f3\u30dc\u30eb `it` \u304c\u542b\u307e\u308c\u308b\u30ea\u30b9\u30c8\u3092\u898b\u3064\u3051\u305f\u3089\u3001 `it` \u3092\u76f4\u524d\u306e\u5f0f\u306e\u5024\u306b\u7f6e\u304d\u63db\u3048\u308b\u3068\u3044\u3046\u3082\u306e\u3002\n\n\n# \u307e\u3068\u3081\n\n- Clojure\u3067\u3082 `~'\u30b7\u30f3\u30dc\u30eb` \u3068\u3044\u3046\u5f62\u5f0f\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3067\u304d\u308b\n- \u4e00\u822c\u306b\u306f `if-let`, `when-let` \u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u5074\u3067\u660e\u793a\u7684\u306a\u675f\u7e1b\u3092\u4f5c\u308b\u30de\u30af\u30ed\u306e\u307b\u3046\u304c\u597d\u307e\u308c\u308b\u304c\u3001\u30e9\u30a4\u30d6\u30e9\u30ea/DSL\u69cb\u7bc9\u306e\u305f\u3081\u306e\u5b9f\u88c5\u6280\u8853\u3068\u3057\u3066\u5f79\u306b\u7acb\u3064(\u304b\u3082)\n\n\n# Further Reading\n\n#### \u66f8\u7c4d\n- [\u300eOn Lisp\u300f](https://estore.ohmsha.co.jp/titles/978427406637P)\n  - [\u7b2c9\u7ae0 \u5909\u6570\u6355\u6349](http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/variableCapture.html)\n  - [\u7b2c14\u7ae0 \u30a2\u30ca\u30d5\u30a9\u30ea\u30c3\u30af\u30de\u30af\u30ed](http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/anaphoricMacros.html)\n- [*The Joy of Clojure, Second Edition*](https://www.manning.com/books/the-joy-of-clojure-second-edition)\n  - 8.5 Using macros to control symbolic resolution time\n\n#### \u30d6\u30ed\u30b0\u8a18\u4e8b\n- [\u30de\u30af\u30ed\u3092\u4f7f\u3046\u3079\u304d\u304b\u3069\u3046\u306a\u306e\u304b - Qiita](http://qiita.com/ypsilon-takai/items/e74beb147e80dc821e32)\n- [Lisp\u3067\u30de\u30af\u30ed - (lisping :at now)](http://riktor.hatenablog.com/entry/2012/08/14/235214)\n- [Scheme:\u30de\u30af\u30ed:CommonLisp\u3068\u306e\u6bd4\u8f03](https://practical-scheme.net/wiliki/wiliki.cgi?Scheme%3A%E3%83%9E%E3%82%AF%E3%83%AD%3ACommonLisp%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83)\n- [Unhygienic (\"anaphoric\") Clojure macros for fun and profit](http://hubpages.com/technology/Unhygenic-anaphoric-Clojure-macros-for-fun-and-profit)\n- [fogus: Monkeying with Clojure\u2019s defmethod Macro](http://blog.fogus.me/2010/08/10/monkeying-with-clojures-defmethod-macro/)\n", "tags": ["Clojure", "common-lisp", "lisp", "macro"]}