{"context": " More than 1 year has passed since last update.\u554f\u984c\u5185\u5bb9\u7b49\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u3002\nhttp://nabetani.sakura.ne.jp/hena/ord16lcove/\n\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u30c7\u30fc\u30bf\u306b\u3057\u307e\u3057\u305f\u3002\n#include <stdio.h>\n\n#define WIDTH  (10)\n#define HEIGHT (10)\n#define min(a, b) ((a) < (b) ? (a) : (b))\n#define max(a, b) ((a) > (b) ? (a) : (b))\n#define swap(type, a, b) {type t = (a); (a) = (b); (b) = t;}\n\nvoid reverseX(int *m, int w, int h)\n{   /* m[y] is bitmap data of x */\n    int x, y, r;\n    for (y = 0; y < h; y++) {\n        r = 0;\n        for (x = 0; x < w; x++) r = (r << 1) | ((m[y] >> x) & 1);\n        m[y] = r;\n    }\n}\n\nvoid reverseY(int *m, int h)\n{\n    int y = h / 2;\n    while (--y >= 0) swap(int, m[y], m[h - 1 - y]);\n}\n\nint cut(int *m, int w, int h)\n{   /* search a maximum rectangle area on 0 at the left upper corner */\n    int area = 0, x = w, y;\n    for (y = 0; y < h; y++) {\n        if (m[y] & ((1 << x) - 1)) {\n            area = max(area, x * y);\n            while (m[y] & ((1 << x) - 1)) x--;\n        }\n    }\n    return area;\n}\n\nint solve(char *data)\n{\n    int m[HEIGHT] = {0}, x, y, w, h, area, c;\n    int min_x = WIDTH, min_y = HEIGHT, max_x = 0, max_y = 0;\n    for (; *data; data++) {\n        if (isdigit(*data)) {\n            x = *data - '0'; y = *++data - '0';\n            m[y] |= 1 << x;\n            min_x = min(min_x, x); min_y = min(min_y, y);\n            max_x = max(max_x, x); max_y = max(max_y, y);\n        }\n    }\n    w = max_x - min_x + 1; h = max_y - min_y + 1;\n    area = w * h;\n    if (area == 1) return 3;\n    for (y = 0; y < h; y++) m[y] = m[y + min_y] >> min_x; /* move origin */\n    c = cut(m, w, h);                              /* upper left  corner */\n    reverseY(m,    h); c = max(c, cut(m, w, h));   /* lower left  corner */\n    reverseX(m, w, h); c = max(c, cut(m, w, h));   /* lower right corner */\n    reverseY(m,    h); c = max(c, cut(m, w, h));   /* upper right corner */\n    return c > 0 ? area - c : area < WIDTH * HEIGHT ? area + 1 : 0;\n}\n\nvoid test(char *data, char *correct)\n{\n    int answer = solve(data);\n    printf(\"%s %d %s %s\\n\", answer==atoi(correct)?\"OK\":\"NG\", answer, correct, data);\n}\n\nint main()\n{\n    /*0*/ test( \"41,33,26,55,74,58,68\", \"39\" );\n    /*1*/ test( \"00,99,09,90\", \"-\" );\n    /*2*/ test( \"09\", \"3\" );\n    /*3*/ test( \"05,05,05\", \"3\" );\n    /*4*/ test( \"45\", \"3\" );\n    /*5*/ test( \"38,39\", \"3\" );\n    /*6*/ test( \"38,47\", \"3\" );\n    /*7*/ test( \"45,66\", \"4\" );\n    /*8*/ test( \"12,34,56,78\", \"33\" );\n    /*9*/ test( \"12,34,56,78,45\", \"37\" );\n    /*10*/ test( \"00,09,00\", \"11\" );\n    /*11*/ test( \"00,90\", \"11\" );\n    /*12*/ test( \"99,09\", \"11\" );\n    /*13*/ test( \"99,90\", \"11\" );\n    /*14*/ test( \"11,12,21,22\", \"5\" );\n    /*15*/ test( \"42,45,92,95,83,62\", \"25\" );\n    /*16*/ test( \"42,45,92,83,62\", \"14\" );\n    /*17*/ test( \"34,38,78,74,56,35,77,48,54\", \"26\" );\n    /*18*/ test( \"38,78,74,56,35,77,48,54\", \"23\" );\n    /*19*/ test( \"31,41,21,71,21\", \"7\" );\n    /*20*/ test( \"46,45,42,44,45\", \"6\" );\n    /*21*/ test( \"00,99,09\", \"19\" );\n    /*22*/ test( \"99,09,90,24\", \"64\" );\n    /*23*/ test( \"99,16,61,34,17,24,42,26,18,71,19,91,81,43,33,62,52,25\", \"75\" );\n    /*24*/ test( \"55,43,16,91,61,19,24,18,33,34,71,81,42,62,52,26,17,25\", \"53\" );\n    /*25*/ test( \"71,26,81,62,17,16,25,42,33,52,19,18,91,24,61,34,43\", \"45\" );  \n    /*26*/ test( \"39,49,19,93,78,58,48,91,95,29,68,92,86,87,94,77\", \"39\" );\n    /*27*/ test( \"69,89,25,26,58,12,37,36,68,24,11,13,48,14,79\", \"37\" );\n    /*28*/ test( \"58,67,92,38,83,29,91,76,84,57,75,48,85,19,66\", \"51\" );\n    /*29*/ test( \"00,83,76,85,48,19,75,29,92,57,66,67,91,58,38,84\", \"91\" );\n    /*30*/ test( \"11,92,57,38,58,66,91,67,84,48,83,19,75,85,76,29\", \"72\" );\n    /*31*/ test( \"36,07,45\", \"9\" );\n    /*32*/ test( \"57,23,24,74\", \"21\" );\n    /*33*/ test( \"92,20,32,12,65\", \"39\" );\n    /*34*/ test( \"24,54,66,48,54,15\", \"21\" );\n    /*35*/ test( \"05,17,42,20,48,22,13\", \"39\" );\n    /*36*/ test( \"53,84,55,56,25,14,84,43\", \"26\" );\n    /*37*/ test( \"06,77,56,59,15,24,09,66,71\", \"51\" );\n    /*38*/ test( \"53,36,47,45,45,67,66,46,63,75\", \"21\" );\n    /*39*/ test( \"35,53,93,33,02,84,83,48,54,32,28\", \"50\" );\n    /*40*/ test( \"55,74,32,84,41,64,24,44,15,14,26,53\", \"39\" );\n    /*41*/ test( \"47,60,34,32,19,67,24,83,94,38,47,05,79\", \"88\" );\n    /*42*/ test( \"63,32,42,74,66,64,35,41,74,25,48,62,44,54\", \"42\" );\n    /*43*/ test( \"00,86,16,19,09,92,51,10,68,23,14,63,21,46,03\", \"91\" );\n    /*44*/ test( \"56,46,54,14,15,25,53,84,58,85,44,37,54,76,26,76\", \"42\" );\n    /*45*/ test( \"71,87,39,43,76,38,91,69,98,33,43,26,56,69,73,52,89\", \"66\" );  \n    /*46*/ test( \"43,26,84,64,52,48,36,23,66,53,41,57,76,36,84,57,35,41\", \"47\" );\n    /*47*/ test( \"81,02,85,93,36,46,80,27,72,28,02,99,13,41,36,40,18,97,38\", \"91\" );\n    /*48*/ test( \"63,46,75,58,42,26,58,37,14,75,35,63,32,36,52,46,85,14,48,23\", \"47\" );\n    /*49*/ test( \"66,92,64,12,17,33,10,28,75,05,81,05,42,86,52,57,56,78,87,81,10\", \"82\" );\n    /*50*/ test( \"48,25,58,76,15,74,43,44,24,62,33,67,34,34,42,48,37,33,51,43,46,67\", \"50\" );\n    return 0;\n}\n\n\u554f\u984c\u5185\u5bb9\u7b49\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u3002\nhttp://nabetani.sakura.ne.jp/hena/ord16lcove/\n\n\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u30c7\u30fc\u30bf\u306b\u3057\u307e\u3057\u305f\u3002\n\n```c\n#include <stdio.h>\n\n#define WIDTH  (10)\n#define HEIGHT (10)\n#define min(a, b) ((a) < (b) ? (a) : (b))\n#define max(a, b) ((a) > (b) ? (a) : (b))\n#define swap(type, a, b) {type t = (a); (a) = (b); (b) = t;}\n\nvoid reverseX(int *m, int w, int h)\n{   /* m[y] is bitmap data of x */\n    int x, y, r;\n    for (y = 0; y < h; y++) {\n        r = 0;\n        for (x = 0; x < w; x++) r = (r << 1) | ((m[y] >> x) & 1);\n        m[y] = r;\n    }\n}\n\nvoid reverseY(int *m, int h)\n{\n    int y = h / 2;\n    while (--y >= 0) swap(int, m[y], m[h - 1 - y]);\n}\n\nint cut(int *m, int w, int h)\n{   /* search a maximum rectangle area on 0 at the left upper corner */\n    int area = 0, x = w, y;\n    for (y = 0; y < h; y++) {\n        if (m[y] & ((1 << x) - 1)) {\n            area = max(area, x * y);\n            while (m[y] & ((1 << x) - 1)) x--;\n        }\n    }\n    return area;\n}\n\nint solve(char *data)\n{\n    int m[HEIGHT] = {0}, x, y, w, h, area, c;\n    int min_x = WIDTH, min_y = HEIGHT, max_x = 0, max_y = 0;\n    for (; *data; data++) {\n        if (isdigit(*data)) {\n            x = *data - '0'; y = *++data - '0';\n            m[y] |= 1 << x;\n            min_x = min(min_x, x); min_y = min(min_y, y);\n            max_x = max(max_x, x); max_y = max(max_y, y);\n        }\n    }\n    w = max_x - min_x + 1; h = max_y - min_y + 1;\n    area = w * h;\n    if (area == 1) return 3;\n    for (y = 0; y < h; y++) m[y] = m[y + min_y] >> min_x; /* move origin */\n    c = cut(m, w, h);                              /* upper left  corner */\n    reverseY(m,    h); c = max(c, cut(m, w, h));   /* lower left  corner */\n    reverseX(m, w, h); c = max(c, cut(m, w, h));   /* lower right corner */\n    reverseY(m,    h); c = max(c, cut(m, w, h));   /* upper right corner */\n    return c > 0 ? area - c : area < WIDTH * HEIGHT ? area + 1 : 0;\n}\n\nvoid test(char *data, char *correct)\n{\n    int answer = solve(data);\n    printf(\"%s %d %s %s\\n\", answer==atoi(correct)?\"OK\":\"NG\", answer, correct, data);\n}\n\nint main()\n{\n    /*0*/ test( \"41,33,26,55,74,58,68\", \"39\" );\n    /*1*/ test( \"00,99,09,90\", \"-\" );\n    /*2*/ test( \"09\", \"3\" );\n    /*3*/ test( \"05,05,05\", \"3\" );\n    /*4*/ test( \"45\", \"3\" );\n    /*5*/ test( \"38,39\", \"3\" );\n    /*6*/ test( \"38,47\", \"3\" );\n    /*7*/ test( \"45,66\", \"4\" );\n    /*8*/ test( \"12,34,56,78\", \"33\" );\n    /*9*/ test( \"12,34,56,78,45\", \"37\" );\n    /*10*/ test( \"00,09,00\", \"11\" );\n    /*11*/ test( \"00,90\", \"11\" );\n    /*12*/ test( \"99,09\", \"11\" );\n    /*13*/ test( \"99,90\", \"11\" );\n    /*14*/ test( \"11,12,21,22\", \"5\" );\n    /*15*/ test( \"42,45,92,95,83,62\", \"25\" );\n    /*16*/ test( \"42,45,92,83,62\", \"14\" );\n    /*17*/ test( \"34,38,78,74,56,35,77,48,54\", \"26\" );\n    /*18*/ test( \"38,78,74,56,35,77,48,54\", \"23\" );\n    /*19*/ test( \"31,41,21,71,21\", \"7\" );\n    /*20*/ test( \"46,45,42,44,45\", \"6\" );\n    /*21*/ test( \"00,99,09\", \"19\" );\n    /*22*/ test( \"99,09,90,24\", \"64\" );\n    /*23*/ test( \"99,16,61,34,17,24,42,26,18,71,19,91,81,43,33,62,52,25\", \"75\" );\n    /*24*/ test( \"55,43,16,91,61,19,24,18,33,34,71,81,42,62,52,26,17,25\", \"53\" );\n    /*25*/ test( \"71,26,81,62,17,16,25,42,33,52,19,18,91,24,61,34,43\", \"45\" );  \n    /*26*/ test( \"39,49,19,93,78,58,48,91,95,29,68,92,86,87,94,77\", \"39\" );\n    /*27*/ test( \"69,89,25,26,58,12,37,36,68,24,11,13,48,14,79\", \"37\" );\n    /*28*/ test( \"58,67,92,38,83,29,91,76,84,57,75,48,85,19,66\", \"51\" );\n    /*29*/ test( \"00,83,76,85,48,19,75,29,92,57,66,67,91,58,38,84\", \"91\" );\n    /*30*/ test( \"11,92,57,38,58,66,91,67,84,48,83,19,75,85,76,29\", \"72\" );\n    /*31*/ test( \"36,07,45\", \"9\" );\n    /*32*/ test( \"57,23,24,74\", \"21\" );\n    /*33*/ test( \"92,20,32,12,65\", \"39\" );\n    /*34*/ test( \"24,54,66,48,54,15\", \"21\" );\n    /*35*/ test( \"05,17,42,20,48,22,13\", \"39\" );\n    /*36*/ test( \"53,84,55,56,25,14,84,43\", \"26\" );\n    /*37*/ test( \"06,77,56,59,15,24,09,66,71\", \"51\" );\n    /*38*/ test( \"53,36,47,45,45,67,66,46,63,75\", \"21\" );\n    /*39*/ test( \"35,53,93,33,02,84,83,48,54,32,28\", \"50\" );\n    /*40*/ test( \"55,74,32,84,41,64,24,44,15,14,26,53\", \"39\" );\n    /*41*/ test( \"47,60,34,32,19,67,24,83,94,38,47,05,79\", \"88\" );\n    /*42*/ test( \"63,32,42,74,66,64,35,41,74,25,48,62,44,54\", \"42\" );\n    /*43*/ test( \"00,86,16,19,09,92,51,10,68,23,14,63,21,46,03\", \"91\" );\n    /*44*/ test( \"56,46,54,14,15,25,53,84,58,85,44,37,54,76,26,76\", \"42\" );\n    /*45*/ test( \"71,87,39,43,76,38,91,69,98,33,43,26,56,69,73,52,89\", \"66\" );  \n    /*46*/ test( \"43,26,84,64,52,48,36,23,66,53,41,57,76,36,84,57,35,41\", \"47\" );\n    /*47*/ test( \"81,02,85,93,36,46,80,27,72,28,02,99,13,41,36,40,18,97,38\", \"91\" );\n    /*48*/ test( \"63,46,75,58,42,26,58,37,14,75,35,63,32,36,52,46,85,14,48,23\", \"47\" );\n    /*49*/ test( \"66,92,64,12,17,33,10,28,75,05,81,05,42,86,52,57,56,78,87,81,10\", \"82\" );\n    /*50*/ test( \"48,25,58,76,15,74,43,44,24,62,33,67,34,34,42,48,37,33,51,43,46,67\", \"50\" );\n    return 0;\n}\n```\n", "tags": ["C", "\u3069\u3046\u66f8\u304f", "yhpg"]}