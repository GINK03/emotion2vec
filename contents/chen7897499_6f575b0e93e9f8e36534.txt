{"context": "http://stackoverflow.com/questions/27660713/including-header-file-from-static-library\nhttp://stackoverflow.com/questions/6016815/how-to-include-needed-c-library-using-gcc\ngcc \u4e0d\u80fdinclude\u5f53\u524d\u8def\u5f84\u4e3aheader\u7684\u641c\u7d22\u8def\u5f84\nvagrant@precise64:~/data/libmagic$ gcc -Isrc -o 4 4.c -Lsrc/.libs/ -lmagic\n\n#include <stdio.h>\n#include \"magic.h\"\n\nint main(int argc, char **argv){\n  const char *mime;\n  magic_t magic;\n\n  printf(\"Getting magic from %s\\n\", argv[1]);\n\n  //magic = magic_open(MAGIC_MIME|MAGIC_DEVICES|MAGIC_DEBUG); \n  //magic = magic_open(MAGIC_CONTINUE|MAGIC_MIME);\n  magic = magic_open(MAGIC_ERROR/*|MAGIC_DEBUG*/|MAGIC_MIME);\n  magic_load(magic, NULL);\n  magic_compile(magic, NULL);\n  mime = magic_file(magic, argv[1]);\n\n  printf(\"%s\\n\", mime);\n  magic_close(magic);\n\n  return 0;\n}\n\n#include <stdio.h>\n#include \"magic.h\"\n\nint main(int argc, char **argv){\n  const char *mime;\n  magic_t magic;\n\n  printf(\"Getting magic from %d\\n\", magic_version());\n  return 0;\n}\n\nhttps://github.com/blackwinter/ruby-filemagic\n#include <stdio.h>\n#include <stdlib.h>\n#include \"magic.h\"\n\nint main(int argc, char **argv){\n  const char *mime;\n  magic_t magic;\n\n  printf(\"Getting magic from %s\\n\", argv[1]);\n\n    FILE *f = fopen(argv[1], \"rb\");\n    fseek(f, 0, SEEK_END);\n    long fsize = ftell(f);\n    fseek(f, 0, SEEK_SET);\n\n    char *string = malloc(fsize + 1);\n    fread(string, fsize, 1, f);\n\n    string[fsize] = 0;\n\n  magic = magic_open(MAGIC_ERROR/*|MAGIC_DEBUG*/|MAGIC_MIME);\n  magic_load(magic, NULL);\n  magic_compile(magic, NULL);\n  mime = magic_buffer(magic, string, (size_t)fsize);\n\n  printf(\"%s\\n\", mime);\n  magic_close(magic);\n\n  free(string);\n  fclose(f);\n\n    return 0;\n}\n\nhttp://stackoverflow.com/questions/51572/determine-file-type-in-ruby\nvagrant@precise64:~/data$ grep -rn \"magic_buffer\" ruby-filemagic/\nruby-filemagic/test/mahoro.c:90:        if(!(msg = magic_buffer(cookie, StringValuePtr(input),\nruby-filemagic/ext/filemagic/filemagic.h:22:#define RB_MAGIC_TYPE_BUFFER     magic_buffer(ms, StringValuePtr(arg), RSTRING_LEN(arg))\nruby-filemagic/ext/filemagic/filemagic.h:86:static VALUE rb_magic_buffer(int, VALUE*, VALUE);\nruby-filemagic/ext/filemagic/filemagic.c:231:  rb_define_method(cFileMagic, \"buffer\",     rb_magic_buffer,     -1);\n\nruby-filemagic\u7528\u7684\u662fruby.h\u81ea\u5e26\u7684\u65b9\u6cd5 rstring_len stringvalueptr\n\u4e0a\u9762\u90a3\u79cdmagic_buffer\u7684\u5199\u6cd5\u9047\u5230\u5927\u6587\u4ef6\u4f1asegment fault\n\u7528getdelim\u5c31\u4e0d\u4f1a \nruby\u91cc\u9762File.read\u9047\u5230\u5927\u6587\u4ef6\u4e5f\u4f1a\u5361\u4f4f\nhttp://stackoverflow.com/questions/174531/easiest-way-to-get-files-contents-in-c\n#include <stdio.h>\n#include <stdlib.h>\n#include \"magic.h\"\n\nint main(int argc, char **argv){\n  const char *mime;\n  magic_t magic;\n\n  printf(\"Getting magic from %s\\n\", argv[1]);\n\n    FILE *f = fopen(argv[1], \"rb\");\n    size_t fsize;\n\n    char *string = NULL;\n    size_t bytes_read = getdelim(&string, &fsize, '\\0', f);\n\n  magic = magic_open(MAGIC_ERROR|MAGIC_CONTINUE|MAGIC_MIME);\n  magic_load(magic, NULL);\n  magic_compile(magic, NULL);\n  mime = magic_buffer(magic, string, fsize);\n\n  printf(\"%s\\n\", mime);\n  printf(\"%zu\\n\", bytes_read);\n  magic_close(magic);\n\n  fclose(f);\n\n    return 0;\n}\n\nMAGIC_CONTINUE \nhttps://github.com/ahupp/python-magic/pull/28\nmagic_check\n#include <stdio.h>\n#include \"magic.h\"\n\nint main(int argc, char **argv){\n  const char *mime;\n  magic_t magic;\n  int result;\n\n  printf(\"Getting magic from %s\\n\", argv[1]);\n\n  //magic = magic_open(MAGIC_MIME|MAGIC_DEVICES|MAGIC_DEBUG); \n  //magic = magic_open(MAGIC_CONTINUE|MAGIC_MIME);\n  magic = magic_open(MAGIC_ERROR/*|MAGIC_DEBUG*/|MAGIC_MIME);\n  magic_load(magic, NULL);\n  magic_compile(magic, NULL);\n  result = magic_check(magic, argv[1]);\n\n  printf(\"%i\\n\", result);\n  magic_close(magic);\n\n  return 0;\n}\n\n\n     -c, --checking-printout\n             Cause a checking printout of the parsed form of the magic file.  This is usually used in conjunction with the -m flag to debug a new magic file before\n             installing it.\n\n\nmagic_check\nmagic_list\n\n#include <stdio.h>\n#include \"magic.h\"\n\nint main(int argc, char **argv){\n  const char *mime;\n  magic_t magic;\n  int result;\n\n  printf(\"Getting magic from %s\\n\", argv[1]);\n\n  //magic = magic_open(MAGIC_MIME|MAGIC_DEVICES|MAGIC_DEBUG); \n  //magic = magic_open(MAGIC_CONTINUE|MAGIC_MIME);\n  magic = magic_open(MAGIC_CHECK/*|MAGIC_DEBUG*/|MAGIC_MIME);\n  magic_load(magic, argv[2]);\n  magic_compile(magic, argv[2]);\n  result = magic_list(magic, argv[1]);\n\n  printf(\"%i\\n\", result);\n  magic_close(magic);\n\n  return 0;\n}\n\nvagrant@precise64:~/data/libmagic$ ./5 /tmp/magic.binwalk \nvagrant@precise64:~/data/libmagic$ ./5 /usr/share/misc/magic.mgc \n\nhttps://www.cs.swarthmore.edu/~newhall/unixhelp/howto_C_libraries.html\nhttp://stackoverflow.com/questions/27660713/including-header-file-from-static-library\n\nhttp://stackoverflow.com/questions/6016815/how-to-include-needed-c-library-using-gcc\n\ngcc \u4e0d\u80fdinclude\u5f53\u524d\u8def\u5f84\u4e3aheader\u7684\u641c\u7d22\u8def\u5f84\n\n```bash\nvagrant@precise64:~/data/libmagic$ gcc -Isrc -o 4 4.c -Lsrc/.libs/ -lmagic\n```\n\n```c\n#include <stdio.h>\n#include \"magic.h\"\n\nint main(int argc, char **argv){\n  const char *mime;\n  magic_t magic;\n\n  printf(\"Getting magic from %s\\n\", argv[1]);\n\n  //magic = magic_open(MAGIC_MIME|MAGIC_DEVICES|MAGIC_DEBUG); \n  //magic = magic_open(MAGIC_CONTINUE|MAGIC_MIME);\n  magic = magic_open(MAGIC_ERROR/*|MAGIC_DEBUG*/|MAGIC_MIME);\n  magic_load(magic, NULL);\n  magic_compile(magic, NULL);\n  mime = magic_file(magic, argv[1]);\n\n  printf(\"%s\\n\", mime);\n  magic_close(magic);\n\n  return 0;\n}\n```\n\n```c\n#include <stdio.h>\n#include \"magic.h\"\n\nint main(int argc, char **argv){\n  const char *mime;\n  magic_t magic;\n\n  printf(\"Getting magic from %d\\n\", magic_version());\n  return 0;\n}\n```\n\nhttps://github.com/blackwinter/ruby-filemagic\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include \"magic.h\"\n\nint main(int argc, char **argv){\n  const char *mime;\n  magic_t magic;\n\n  printf(\"Getting magic from %s\\n\", argv[1]);\n\n\tFILE *f = fopen(argv[1], \"rb\");\n\tfseek(f, 0, SEEK_END);\n\tlong fsize = ftell(f);\n\tfseek(f, 0, SEEK_SET);\n\n\tchar *string = malloc(fsize + 1);\n\tfread(string, fsize, 1, f);\n\n\tstring[fsize] = 0;\n\n  magic = magic_open(MAGIC_ERROR/*|MAGIC_DEBUG*/|MAGIC_MIME);\n  magic_load(magic, NULL);\n  magic_compile(magic, NULL);\n  mime = magic_buffer(magic, string, (size_t)fsize);\n\n  printf(\"%s\\n\", mime);\n  magic_close(magic);\n\n  free(string);\n  fclose(f);\n\n\treturn 0;\n}\n```\n\nhttp://stackoverflow.com/questions/51572/determine-file-type-in-ruby\n\n\n```bash\nvagrant@precise64:~/data$ grep -rn \"magic_buffer\" ruby-filemagic/\nruby-filemagic/test/mahoro.c:90:        if(!(msg = magic_buffer(cookie, StringValuePtr(input),\nruby-filemagic/ext/filemagic/filemagic.h:22:#define RB_MAGIC_TYPE_BUFFER     magic_buffer(ms, StringValuePtr(arg), RSTRING_LEN(arg))\nruby-filemagic/ext/filemagic/filemagic.h:86:static VALUE rb_magic_buffer(int, VALUE*, VALUE);\nruby-filemagic/ext/filemagic/filemagic.c:231:  rb_define_method(cFileMagic, \"buffer\",     rb_magic_buffer,     -1);\n```\n\nruby-filemagic\u7528\u7684\u662fruby.h\u81ea\u5e26\u7684\u65b9\u6cd5 rstring_len stringvalueptr\n\n\u4e0a\u9762\u90a3\u79cdmagic_buffer\u7684\u5199\u6cd5\u9047\u5230\u5927\u6587\u4ef6\u4f1asegment fault\n\u7528getdelim\u5c31\u4e0d\u4f1a \nruby\u91cc\u9762File.read\u9047\u5230\u5927\u6587\u4ef6\u4e5f\u4f1a\u5361\u4f4f\n\nhttp://stackoverflow.com/questions/174531/easiest-way-to-get-files-contents-in-c\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include \"magic.h\"\n\nint main(int argc, char **argv){\n  const char *mime;\n  magic_t magic;\n\n  printf(\"Getting magic from %s\\n\", argv[1]);\n\n\tFILE *f = fopen(argv[1], \"rb\");\n\tsize_t fsize;\n\t\n\tchar *string = NULL;\n\tsize_t bytes_read = getdelim(&string, &fsize, '\\0', f);\n\n  magic = magic_open(MAGIC_ERROR|MAGIC_CONTINUE|MAGIC_MIME);\n  magic_load(magic, NULL);\n  magic_compile(magic, NULL);\n  mime = magic_buffer(magic, string, fsize);\n\n  printf(\"%s\\n\", mime);\n  printf(\"%zu\\n\", bytes_read);\n  magic_close(magic);\n\n  fclose(f);\n\n\treturn 0;\n}\n```\n\nMAGIC_CONTINUE \n\nhttps://github.com/ahupp/python-magic/pull/28\n\nmagic_check\n\n```c\n#include <stdio.h>\n#include \"magic.h\"\n\nint main(int argc, char **argv){\n  const char *mime;\n  magic_t magic;\n  int result;\n\n  printf(\"Getting magic from %s\\n\", argv[1]);\n\n  //magic = magic_open(MAGIC_MIME|MAGIC_DEVICES|MAGIC_DEBUG); \n  //magic = magic_open(MAGIC_CONTINUE|MAGIC_MIME);\n  magic = magic_open(MAGIC_ERROR/*|MAGIC_DEBUG*/|MAGIC_MIME);\n  magic_load(magic, NULL);\n  magic_compile(magic, NULL);\n  result = magic_check(magic, argv[1]);\n\n  printf(\"%i\\n\", result);\n  magic_close(magic);\n\n  return 0;\n}\n```\n\n```bash\n\n     -c, --checking-printout\n             Cause a checking printout of the parsed form of the magic file.  This is usually used in conjunction with the -m flag to debug a new magic file before\n             installing it.\n\n```\n\nmagic_check\n\n\nmagic_list\n\n```c\n\n#include <stdio.h>\n#include \"magic.h\"\n\nint main(int argc, char **argv){\n  const char *mime;\n  magic_t magic;\n  int result;\n\n  printf(\"Getting magic from %s\\n\", argv[1]);\n\n  //magic = magic_open(MAGIC_MIME|MAGIC_DEVICES|MAGIC_DEBUG); \n  //magic = magic_open(MAGIC_CONTINUE|MAGIC_MIME);\n  magic = magic_open(MAGIC_CHECK/*|MAGIC_DEBUG*/|MAGIC_MIME);\n  magic_load(magic, argv[2]);\n  magic_compile(magic, argv[2]);\n  result = magic_list(magic, argv[1]);\n\n  printf(\"%i\\n\", result);\n  magic_close(magic);\n\n  return 0;\n}\n```\n\n```bash\nvagrant@precise64:~/data/libmagic$ ./5 /tmp/magic.binwalk \nvagrant@precise64:~/data/libmagic$ ./5 /usr/share/misc/magic.mgc \n```\n\nhttps://www.cs.swarthmore.edu/~newhall/unixhelp/howto_C_libraries.html\n", "tags": ["GCC"]}