{"context": " More than 1 year has passed since last update.\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306eitertools, functools \u3092\u62e1\u5f35\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308btoolz\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n$ pip install toolz\n\n\u3088\u308a\u9ad8\u901f\u306b\u52d5\u4f5c\u3059\u308bCython\u7248\u3082\u3042\u308a\u307e\u3059\u3002\n$ pip install cytoolz\n\n\n\u4f7f\u3044\u65b9\ntoolz \u306b\u3088\u308a\u63d0\u4f9b\u3055\u308c\u308b\u95a2\u6570\u306f\u6b21\u306e3\u3064\u306b\u5927\u5225\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u3046\u3061Itertoolz \u3001Functoolz \u306f\u3001\u305d\u308c\u305e\u308citertools \u3001functools \u306e\u62e1\u5f35\u306b\u76f8\u5f53\u3059\u308b\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\nItertoolz\nFunctoolz\nDicttoolz\n\ntoolz\u306fmap\u3000\u3001reduce \u3001filter \u306a\u3069\u6a19\u6e96\u3067\u4f7f\u7528\u3067\u304d\u308b\u95a2\u6570\u3082\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3068map \u3067\u3042\u308c\u3070itertools.imap \u306e\u3088\u3046\u306bIterable\u3092\u6271\u3048\u308b\u95a2\u6570\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u306f\u5143\u306e\u3082\u306e\u3068\u307b\u307c\u540c\u3058\u306a\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u3001\u3088\u304f\u4f7f\u3044\u305d\u3046\u306a\u95a2\u6570\u3092\u7d39\u4ecb\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nItertoolz\nitertools \u76f8\u5f53\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002itertools\u306e\u30ec\u30b7\u30d4\u306b\u8f09\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u95a2\u6570\u3082\u3042\u308a\u307e\u3059\u3002\n\n\u8981\u7d20\u306e\u53d6\u5f97 - get, pluck\n\nget\nget \u306f\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u3084\u8f9e\u66f8\u304b\u3089\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u304b\u3089\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n>>> from toolz import get\n>>> get(1, range(5))\n1\n\n\u30ad\u30fc\u3092\u6e21\u3057\u3066\u8f9e\u66f8\u304b\u3089\u5024\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n>>> get('a', {'a': 'A', 'b': 'B', 'c': 'C'})\n'A'\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5916\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3084\u30ad\u30fc\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n>>> get(10, range(5), 0)\n0\n>>> get('d', {'a': 'A', 'b': 'B', 'c': 'C'}, 'None')\n'None'\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3084\u30ad\u30fc\u3092\u30ea\u30b9\u30c8\u3067\u6e21\u3059\u3068\u8907\u6570\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n>>> get([1, 3, 5], range(5), 0)\n(1, 3, 0)\n>>> get(['b', 'd', 'a'], {'a': 'A', 'b': 'B', 'c': 'C'}, 'None')\n('B', 'None', 'A')\n\n\npluck\npluck \u306f\u3001get \u3092map \u3059\u308b\u306e\u306b\u76f8\u5f53\u3059\u308b\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\n>>> from toolz import pluck\n>>> mat = [[(i, j) for i in range(5)] for j in range(5)]\n>>> for r in mat:\n...     print r\n... \n[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n[(0, 1), (1, 1), (2, 1), (3, 1), (4, 1)]\n[(0, 2), (1, 2), (2, 2), (3, 2), (4, 2)]\n[(0, 3), (1, 3), (2, 3), (3, 3), (4, 3)]\n[(0, 4), (1, 4), (2, 4), (3, 4), (4, 4)]\n>>> for r in pluck([2, 4], mat):\n...     print r\n... \n((2, 0), (4, 0))\n((2, 1), (4, 1))\n((2, 2), (4, 2))\n((2, 3), (4, 3))\n((2, 4), (4, 4))\n\n\n\u7d2f\u7a4d\u306e\u8a08\u7b97 - accumulate\naccumulate \u306freduce \u3068\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u7d2f\u7a4d\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3057\u307e\u3059\u3002\nPython3.2\u4ee5\u964d\u3067\u306fitertools \u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n>>> from toolz import accumulate\n>>> from operator import add\n>>> list(accumulate(add, range(5)))\n[0, 1, 3, 6, 10]\n>>> xs = [randint(1, 10) for n in range(10)]\n>>> xs\n[7, 3, 4, 2, 9, 4, 1, 10, 8, 1]\n>>> list(accumulate(max, xs))\n[7, 7, 7, 7, 9, 9, 9, 10, 10, 10]\n\n\n\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0 - groupby, countby, reduceby\ngroupby \u306f\u3001\u30ad\u30fc\u95a2\u6570\u306e\u5024\u3067\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u306e\u8981\u7d20\u3092\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u307e\u3059\u3002\ncountby \u306f\u3001\u5404\u30b0\u30eb\u30fc\u30d7\u306e\u8981\u7d20\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u307e\u3059\u3002\nreduceby \u306f\u3001\u5404\u30b0\u30eb\u30fc\u30d7\u3067reduce \u3092\u5b9f\u884c\u3057\u305f\u306e\u306b\u76f8\u5f53\u3059\u308b\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\n>>> from toolz import groupby, countby, reduceby\n>>> from operator import add\n>>> xs = range(10)\n>>> is_even = lambda n: n % 2 == 0\n>>> groupby(is_even, xs)\n{False: [1, 3, 5, 7, 9], True: [0, 2, 4, 6, 8]}\n>>> countby(is_even, xs)\n{False: 5, True: 5}\n>>> reduceby(is_even, add, xs)\n{False: 25, True: 20}\n\nitertools.groupby \u304c\u9023\u7d9a\u3057\u305f\u8981\u7d20\u3092\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3059\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001toolz.groupby \u306f\u8981\u7d20\u306e\u4e26\u3073\u306b\u95a2\u4fc2\u306a\u304f\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u307e\u3059\u3002\n>>> import toolz as tz\n>>> import itertools as it\n>>> xs = range(10)\n>>> is_even = lambda n: n % 2 == 0\n>>> tz.groupby(is_even, xs)\n{False: [1, 3, 5, 7, 9], True: [0, 2, 4, 6, 8]}\n>>> [(k, list(g)) for k, g in it.groupby(xs, is_even)]\n[(True, [0]), (False, [1]), (True, [2]), (False, [3]), (True, [4]), (False, [5]), (True, [6]), (False, [7]), (True, [8]), (False, [9])]\n\n\n\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u3078\u306e\u8981\u7d20\u306e\u8ffd\u52a0\u30fb\u9023\u7d50 - cons, concat, concatv\ncons \u306f\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u306e\u5148\u982d\u306b\u8981\u7d20\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\nconcat \u306f\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u3092\u9023\u7d50\u3057\u307e\u3059\u3002\nconcatv \u306fconcatv \u3092\u53ef\u5909\u9577\u5f15\u6570\u3092\u3068\u308b\u3088\u3046\u306b\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n>>> from toolz import cons, concat, concatv\n>>> xs = range(10)\n>>> cons(-1, xs)\n>>> list(concat([xs, xs]))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> list(concatv(xs, xs))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u306e\u5206\u5272 - partition, partition_all, partitionby\npartition \u3001partition_all \u306f\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u3092\u6307\u5b9a\u3055\u308c\u305f\u9577\u3055\u306e\u30bf\u30d7\u30eb\u306b\u5206\u5272\u3057\u307e\u3059\u3002\u4f59\u308a\u304c\u3067\u305f\u969b\u306e\u52d5\u4f5c\u304c\u7570\u306a\u308a\u307e\u3059\u3002\n\n\npartition \u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u6307\u5b9a\u3057\u306a\u3044\u3002\u4f59\u3063\u305f\u5206\u306f\u51fa\u529b\u3055\u308c\u306a\u3044\u3002\n\npartition \u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u6307\u5b9a\u3059\u308b\u3002\u4f59\u308a\u3082\u51fa\u529b\u3059\u308b\u3002\u5024\u304c\u306a\u3044\u3068\u3053\u308d\u3092\u6307\u5b9a\u3055\u308c\u305f\u5024\u3067\u30d1\u30c7\u30a3\u30f3\u30b0\u3002\n\npartition_all \u306f\u3001\u6700\u5f8c\u306e\u8981\u7d20\u304c\u77ed\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308b\u3002\n\npartitionby \u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u95a2\u6570\u3067\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u3092\u5206\u5272\u3057\u307e\u3059\u3002\n>>> from toolz import partition, partition_all, partition by\n>>> xs = range(10)\n>>> list(partition(3, xs))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8)]\n>>> list(partition(3, xs, None))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, None, None)]\n>>> list(partition_all(3, xs))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9,)]\n>>> list(partitionby(lambda x: x < 5, xs))\n[(0, 1, 2, 3, 4), (5, 6, 7, 8, 9)]\n\n\nsliding_window - \u30b9\u30e9\u30a4\u30c7\u30a3\u30f3\u30b0\u30a6\u30a3\u30f3\u30c9\u30a6\nsliding_window \u306f\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30921\u3064\u305a\u3064\u305a\u3089\u3057\u306a\u304c\u3089\u6307\u5b9a\u3057\u305f\u9577\u3055\u306e\u30bf\u30d7\u30eb\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n>>> from toolz import sliding_sindow\n>>> list(sliding_window(3, range(10)))\n[(0, 1, 2), (1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7), (6, 7, 8), (7, 8, 9)]\n\n\n\u8907\u6570\u306e\u30bd\u30fc\u30c8\u3055\u308c\u305f\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u3092\u30de\u30fc\u30b8 - merge_sorted\nmerge_sorted \u306f\u3001\u8907\u6570\u306e\u30bd\u30fc\u30c8\u3055\u308c\u305f\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u3092\u5f15\u6570\u306b\u3068\u308a\u30de\u30fc\u30b8\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002\n>>> from toolz import merge_sorted\n>>> from random import randint\n>>> xs = sorted([randint(1, 10) for _ in range(5)])\n>>> ys = sorted([randint(1, 10) for _ in range(5)])\n>>> zs = sorted([randint(1, 10) for _ in range(5)])\n>>> xs\n[3, 6, 6, 6, 9]\n>>> ys\n[3, 4, 5, 7, 8]\n>>> zs\n[1, 2, 4, 5, 8]\n>>> list(merge_sorted(xs, ys, zs))\n[1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 9]\n\n\u5165\u529b\u3055\u308c\u308b\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u304c\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u7d50\u679c\u306f\u9806\u756a\u306b\u4e26\u3070\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002\n>>> from toolz import merge_sorted\n>>> from random import randint\n>>> xs = [randint(1, 10) for _ in range(5)]\n>>> ys = [randint(1, 10) for _ in range(5)]\n>>> zs = [randint(1, 10) for _ in range(5)]\n>>> xs\n[4, 3, 10, 7, 3]\n>>> ys\n[7, 8, 1, 10, 2]\n>>> zs\n[2, 6, 2, 4, 10]\n>>> list(merge_sorted(xs, ys, zs))\n[2, 4, 3, 6, 2, 4, 7, 8, 1, 10, 7, 3, 10, 2, 10]\n\n\u5165\u529b\u304c\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306b\u306f\u3001\u9023\u7d50\u3057\u3066\u30bd\u30fc\u30c8\u3059\u308c\u3070\u9806\u756a\u306b\u306a\u3089\u3093\u3060\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u3002\n>>> from toolz import concatv\n>>> sorted(concatv(xs, ys, zs))\n[1, 2, 2, 2, 3, 3, 4, 4, 6, 7, 7, 8, 10, 10, 10]\n\n\njoin - \u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u306e\u7d50\u5408\n\u30ad\u30fc\u95a2\u6570\u306e\u5024\u30672\u3064\u306e\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u3092\u7d50\u5408\u3059\u308b\u3002\n>>> from toolz import join\n>>> from toolz.curried import get # \u30ab\u30ea\u30fc\u5316\u3055\u308c\u305fget\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\n>>> carts = [('Taro', 'Apple'), ('Taro', 'Banana'), ('Jiro', 'Apple'), ('Jiro', 'Orange'), ('Sabu', 'Banana'), ('Sabu', 'Banana')]\n>>> prices = [('Apple', 100), ('Banana', 80), ('Orange', 150)]\n>>> for x in join(get(1), carts, get(0), prices):\n...     print x\n... \n(('Taro', 'Apple'), ('Apple', 100))\n(('Jiro', 'Apple'), ('Apple', 100))\n(('Taro', 'Banana'), ('Banana', 80))\n(('Sabu', 'Banana'), ('Banana', 80))\n(('Sabu', 'Banana'), ('Banana', 80))\n(('Jiro', 'Orange'), ('Orange', 150))\n\n\nFunctoolz\n\n\u30ab\u30ea\u30fc\u5316 - curry\n\ncurry\ncurry \u95a2\u6570\u3092\u4f7f\u3063\u3066\u30ab\u30ea\u30fc\u5316\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n>>> from tools import curry\n>>> from operator import add\n>>> curried_add = curry(add)\n>>> curried_add(3)(4)\n7\n\ncurry \u306f\u30c7\u30b3\u30ec\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n>>> from tools import curry\n>>> @curry\n... def add(a, b):\n...     return a+b\n... \n>>> add(3)(4)\n7\n\n\ntoolz\u304c\u63d0\u4f9b\u3059\u308b\u95a2\u6570\u306e\u30ab\u30ea\u30fc\u5316\ntoolz \u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b\u95a2\u6570\u306b\u3064\u3044\u3066\u306ftoolz.curried \u304b\u3089\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3068\u30ab\u30ea\u30fc\u5316\u3055\u308c\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\u4f8b\u3068\u3057\u3066map \u95a2\u6570\u306e\u5834\u5408\u3092\u898b\u3066\u307f\u307e\u3059\u3002\ntoolz \u304b\u3089map \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u95a2\u6570\u306e\u307f\u3092\u6e21\u3059\u3068\u5f15\u6570\u304c\u8db3\u308a\u306a\u3044\u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u3067\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n>>> from toolz import map as not_curried_map\n>>> list(not_curried_map(lambda x: x + 1)([1, 2, 3]))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: imap() must have at least two arguments.\n\ncurry \u3092\u4f7f\u3063\u3066\u30ab\u30ea\u30fc\u5316\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n>>> list(curry(not_curried_map)(lambda x: x + 1)([1, 2, 3]))\n[2, 3, 4]\n\ntoolz.curried \u304b\u3089\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3068\u30ab\u30ea\u30fc\u5316\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u305d\u306e\u307e\u307e\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n>>> from toolz.curried import map as curried_map\n>>> list(curried_map(lambda x: x + 1)([1, 2, 3]))\n[2, 3, 4]\n\n\n\u95a2\u6570\u5408\u6210 - compose, pipe, thread_first, thread_last\n\ncompose\ncompose \u3092\u4f7f\u3063\u3066\u8907\u6570\u306e\u95a2\u6570\u3092\u5408\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\ncompose(f, g, h)(x)\u306f f(g(h(x))) \u3068\u540c\u3058\u3067\u3059\u3002\n>>> from toolz import compose, curry\n>>> from operators import add, mul\n>>> compose(curry(mul)(2), curry(add)(1))(3)\n8\n\n\npipe, thread_first, thread_last\npipe \u3082compose \u3068\u540c\u3058\u3088\u3046\u306b\u30c7\u30fc\u30bf\u306b\u8907\u6570\u306e\u95a2\u6570\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\ncompose\u3068\u5f15\u6570\u306e\u9806\u756a\u304c\u9006\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u30b7\u30a7\u30eb\u306e\u30d1\u30a4\u30d7\u306e\u3088\u3046\u306b\u30c7\u30fc\u30bf\u306e\u6d41\u308c\u3068\u540c\u3058\u304f\u5de6\u304b\u3089\u53f3\u3078\u3068\u8a55\u4fa1\u3055\u308c\u3066\u3044\u304d\u307e\u3059\u3002\npipe(x, f, g, h) \u306f h(g(f(x))) \u3068\u306a\u308a\u307e\u3059\u3002\n>>> from toolz import pipe\n>>> from toolz.curried import get\n>>> pipe('hello world', str.split, get(0), str.upper)\n'HELLO'\n\nthread_first \u3001thread_last \u306f1\u5f15\u6570\u306e\u95a2\u6570\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u306b\u306fpipe \u3068\u540c\u69d8\u306e\u52d5\u304d\u3092\u3057\u307e\u3059\u3002\n>>> from toolz import thread_first, thread_last\n>>> from toolz.curried import get\n>>> thread_first('hello world', str.split, get(0), str.upper)\n'HELLO'\n>>> thread_last('hello world', str.split, get(0), str.upper)\n'HELLO'\n\n2\u3064\u4ee5\u4e0a\u306e\u5f15\u6570\u3092\u3068\u308b\u95a2\u6570\u3092\u30bf\u30d7\u30eb\u3092\u4f7f\u3063\u3066\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u3001\u305d\u306e\u969b\u306e\u52d5\u4f5c\u304c\u7570\u306a\u308a\u307e\u3059\u3002\nthread_first \u306e\u5834\u5408\u306b\u306f\u3001\u524d\u306e\u95a2\u6570\u304b\u3089\u6e21\u3055\u308c\u308b\u7d50\u679c\u304c\u6700\u521d\u306e\u5f15\u6570\u3068\u306a\u308a\u3001\nthread_last \u306e\u5834\u5408\u306b\u306f\u6700\u5f8c\u306e\u5f15\u6570\u3068\u306a\u308a\u307e\u3059\u3002\n>>> thread_first('hello world', str.split, get(0), str.upper, (add, 'WORLD'))\n'HELLOWORLD'\n>>> thread_last('hello world', str.split, get(0), str.upper, (add, 'WORLD'))\n'WORLDHELLO'\n\n\n\u30e1\u30e2\u5316 - memoize\nmemoize \u3092\u4f7f\u3046\u3068\u30e1\u30e2\u5316\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nmemoize \u306f\u30c7\u30b3\u30ec\u30fc\u30bf\u3068\u3057\u3066\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n>>> def tarai(x, y, z):\n...     if x <= y:\n...         return y\n...     return tarai(tarai(x-1, y, z), tarai(y-1, z, x), tarai(z-1, x, y))\n... \n>>> tarai(12, 6, 0)\n12\n>>> t = memoize(tarai)\n>>> t(12, 6, 0)\n12\n\n\n\u540c\u3058\u5f15\u6570\u306b\u8907\u6570\u306e\u95a2\u6570\u3092\u9069\u7528 - juxt\n>>> from toolz import juxt\n>>> from operator import add, mul\n>>> juxt(add, mul)(3, 4)\n(7, 12)\n\n\n\u6052\u7b49\u95a2\u6570 - identity\nidentity \u306f\u5f15\u6570\u3092\u305d\u306e\u307e\u307e\u8fd4\u3057\u307e\u3059\u3002\n>>> from toolz import identity\n>>> identity(3)\n3\n\n\n\u526f\u4f5c\u7528\u306b\u3088\u308b\u51e6\u7406 - do\ndo \u306f\u95a2\u6570\u3092\u5b9f\u884c\u3057\u5f15\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u95a2\u6570\u306e\u5b9f\u884c\u7d50\u679c\u306f\u6368\u3066\u3089\u308c\u308b\u306e\u3067\u526f\u4f5c\u7528\u3067\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u306a\u3069\u306e\u7528\u9014\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306flog \u306b\u5f15\u6570\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n>>> from toolz import compose\n>>> from toolz.curried import do\n>>> log = []\n>>> map(compose(str, do(log.append)), range(5))\n['0', '1', '2', '3', '4']\n>>> log\n[0, 1, 2, 3, 4]\n\n\nDicttoolz\n\n\u30cd\u30b9\u30c8\u3055\u308c\u305f\u8f9e\u66f8\u306e\u53c2\u7167\u30fb\u66f4\u65b0 - get_in, update_in\nget_in \u3092\u5229\u7528\u3059\u308b\u3068\u5f15\u6570\u306b\u30ad\u30fc\u306e\u30ea\u30b9\u30c8\u3092\u6e21\u3059\u3053\u3068\u3067\u30cd\u30b9\u30c8\u3055\u308c\u305f\u8f9e\u66f8\u3092\u7c21\u5358\u306b\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u6307\u5b9a\u3082\u53ef\u80fd\u3067\u3059\u3002\n>>> from toolz import get_in\n>>> d = {\"a\": {\"b\": {\"c\": 1}}}\n>>> d\n{'a': {'b': {'c': 1}}}\n>>> get_in([\"a\", \"b\", \"c\"], d)\n1\n>>> get_in([\"a\", \"b\", \"e\"], d, 'None')\n'None'\n\nupdate_in \u3092\u5229\u7528\u3059\u308b\u3068\u5f15\u6570\u306b\u30ad\u30fc\u306e\u30ea\u30b9\u30c8\u3092\u6e21\u3059\u3053\u3068\u3067\u30cd\u30b9\u30c8\u3055\u308c\u305f\u8f9e\u66f8\u3092\u7c21\u5358\u306b\u66f4\u65b0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u66f4\u65b0\u306f\u66f4\u65b0\u7528\u306e\u95a2\u6570\u3092\u6e21\u3059\u3053\u3068\u3067\u884c\u3044\u307e\u3059\u3002\n\u5143\u306e\u8f9e\u66f8\u306b\u5909\u66f4\u306f\u52a0\u3048\u3089\u308c\u305a\u95a2\u6570\u3092\u9069\u7528\u3057\u3066\u66f4\u65b0\u3055\u308c\u305f\u8f9e\u66f8\u3092\u8fd4\u3057\u307e\u3059\u3002\n>>> from toolz import update_in\n>>> d = {\"a\": {\"b\": {\"c\": 1}}}\n>>> update_in(d, [\"a\", \"b\", \"c\"], lambda x: x+1)\n{'a': {'b': {'c': 2}}}\n>>> d\n{'a': {'b': {'c': 1}}}\n\n\u30ad\u30fc\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u4f7f\u3063\u3066\u65b0\u3057\u304f\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n>>> update_in(d, [\"a\", \"b\", \"e\"], lambda x: x+1, 0)\n{'a': {'b': {'c': 1, 'e': 1}}}\n\n\n\u6700\u5f8c\u306b\n\u591a\u304f\u306e\u6a5f\u80fd\u306fitertools \u3001functools \u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u305d\u308c\u3089\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u4f7f\u3044\u65b9\u3068\u3057\u3066\u3082\u53c2\u8003\u306b\u306a\u308b\u3068\u91cd\u3044\u307e\u3059\u3002\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e```itertools```, ```functools``` \u3092\u62e1\u5f35\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b[toolz](https://github.com/pytoolz/toolz)\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\npip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n\n```bash\n$ pip install toolz\n```\n\n\u3088\u308a\u9ad8\u901f\u306b\u52d5\u4f5c\u3059\u308bCython\u7248\u3082\u3042\u308a\u307e\u3059\u3002\n\n```bash\n$ pip install cytoolz\n```\n\n# \u4f7f\u3044\u65b9\n\n```toolz``` \u306b\u3088\u308a\u63d0\u4f9b\u3055\u308c\u308b\u95a2\u6570\u306f\u6b21\u306e3\u3064\u306b\u5927\u5225\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u3046\u3061```Itertoolz``` \u3001```Functoolz``` \u306f\u3001\u305d\u308c\u305e\u308c```itertools``` \u3001```functools``` \u306e\u62e1\u5f35\u306b\u76f8\u5f53\u3059\u308b\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\n* Itertoolz\n* Functoolz\n* Dicttoolz\n\n```toolz```\u306f```map```\u3000\u3001```reduce``` \u3001```filter``` \u306a\u3069\u6a19\u6e96\u3067\u4f7f\u7528\u3067\u304d\u308b\u95a2\u6570\u3082\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3068```map``` \u3067\u3042\u308c\u3070```itertools.imap``` \u306e\u3088\u3046\u306bIterable\u3092\u6271\u3048\u308b\u95a2\u6570\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u306f\u5143\u306e\u3082\u306e\u3068\u307b\u307c\u540c\u3058\u306a\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u3001\u3088\u304f\u4f7f\u3044\u305d\u3046\u306a\u95a2\u6570\u3092\u7d39\u4ecb\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n## Itertoolz\n\n```itertools``` \u76f8\u5f53\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002[itertools\u306e\u30ec\u30b7\u30d4](http://docs.python.jp/2.7/library/itertools.html#itertools-recipes)\u306b\u8f09\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u95a2\u6570\u3082\u3042\u308a\u307e\u3059\u3002\n\n### \u8981\u7d20\u306e\u53d6\u5f97 - get, pluck\n\n#### get\n\n```get``` \u306f\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u3084\u8f9e\u66f8\u304b\u3089\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u304b\u3089\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```pycon\n>>> from toolz import get\n>>> get(1, range(5))\n1\n```\n\n\u30ad\u30fc\u3092\u6e21\u3057\u3066\u8f9e\u66f8\u304b\u3089\u5024\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```pycon\n>>> get('a', {'a': 'A', 'b': 'B', 'c': 'C'})\n'A'\n```\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5916\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3084\u30ad\u30fc\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n```pycon\n>>> get(10, range(5), 0)\n0\n>>> get('d', {'a': 'A', 'b': 'B', 'c': 'C'}, 'None')\n'None'\n```\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3084\u30ad\u30fc\u3092\u30ea\u30b9\u30c8\u3067\u6e21\u3059\u3068\u8907\u6570\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```pycon\n>>> get([1, 3, 5], range(5), 0)\n(1, 3, 0)\n>>> get(['b', 'd', 'a'], {'a': 'A', 'b': 'B', 'c': 'C'}, 'None')\n('B', 'None', 'A')\n```\n\n#### pluck\n\n```pluck``` \u306f\u3001```get``` \u3092```map``` \u3059\u308b\u306e\u306b\u76f8\u5f53\u3059\u308b\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```pycon\n>>> from toolz import pluck\n>>> mat = [[(i, j) for i in range(5)] for j in range(5)]\n>>> for r in mat:\n...     print r\n... \n[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\n[(0, 1), (1, 1), (2, 1), (3, 1), (4, 1)]\n[(0, 2), (1, 2), (2, 2), (3, 2), (4, 2)]\n[(0, 3), (1, 3), (2, 3), (3, 3), (4, 3)]\n[(0, 4), (1, 4), (2, 4), (3, 4), (4, 4)]\n>>> for r in pluck([2, 4], mat):\n...     print r\n... \n((2, 0), (4, 0))\n((2, 1), (4, 1))\n((2, 2), (4, 2))\n((2, 3), (4, 3))\n((2, 4), (4, 4))\n```\n\n### \u7d2f\u7a4d\u306e\u8a08\u7b97 - accumulate \n\n```accumulate``` \u306f```reduce``` \u3068\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u7d2f\u7a4d\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3057\u307e\u3059\u3002\nPython3.2\u4ee5\u964d\u3067\u306f```itertools``` \u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```pycon\n>>> from toolz import accumulate\n>>> from operator import add\n>>> list(accumulate(add, range(5)))\n[0, 1, 3, 6, 10]\n>>> xs = [randint(1, 10) for n in range(10)]\n>>> xs\n[7, 3, 4, 2, 9, 4, 1, 10, 8, 1]\n>>> list(accumulate(max, xs))\n[7, 7, 7, 7, 9, 9, 9, 10, 10, 10]\n```\n\n### \u30b0\u30eb\u30fc\u30d4\u30f3\u30b0 - groupby, countby, reduceby\n\n```groupby``` \u306f\u3001\u30ad\u30fc\u95a2\u6570\u306e\u5024\u3067\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u306e\u8981\u7d20\u3092\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u307e\u3059\u3002\n```countby``` \u306f\u3001\u5404\u30b0\u30eb\u30fc\u30d7\u306e\u8981\u7d20\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u307e\u3059\u3002\n```reduceby``` \u306f\u3001\u5404\u30b0\u30eb\u30fc\u30d7\u3067```reduce``` \u3092\u5b9f\u884c\u3057\u305f\u306e\u306b\u76f8\u5f53\u3059\u308b\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```pycon\n>>> from toolz import groupby, countby, reduceby\n>>> from operator import add\n>>> xs = range(10)\n>>> is_even = lambda n: n % 2 == 0\n>>> groupby(is_even, xs)\n{False: [1, 3, 5, 7, 9], True: [0, 2, 4, 6, 8]}\n>>> countby(is_even, xs)\n{False: 5, True: 5}\n>>> reduceby(is_even, add, xs)\n{False: 25, True: 20}\n```\n\n```itertools.groupby``` \u304c\u9023\u7d9a\u3057\u305f\u8981\u7d20\u3092\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3059\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001```toolz.groupby``` \u306f\u8981\u7d20\u306e\u4e26\u3073\u306b\u95a2\u4fc2\u306a\u304f\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u307e\u3059\u3002\n\n```pycon\n>>> import toolz as tz\n>>> import itertools as it\n>>> xs = range(10)\n>>> is_even = lambda n: n % 2 == 0\n>>> tz.groupby(is_even, xs)\n{False: [1, 3, 5, 7, 9], True: [0, 2, 4, 6, 8]}\n>>> [(k, list(g)) for k, g in it.groupby(xs, is_even)]\n[(True, [0]), (False, [1]), (True, [2]), (False, [3]), (True, [4]), (False, [5]), (True, [6]), (False, [7]), (True, [8]), (False, [9])]\n```\n\n### \u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u3078\u306e\u8981\u7d20\u306e\u8ffd\u52a0\u30fb\u9023\u7d50 - cons, concat, concatv\n\n```cons``` \u306f\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u306e\u5148\u982d\u306b\u8981\u7d20\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n```concat``` \u306f\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u3092\u9023\u7d50\u3057\u307e\u3059\u3002\n```concatv``` \u306f```concatv``` \u3092\u53ef\u5909\u9577\u5f15\u6570\u3092\u3068\u308b\u3088\u3046\u306b\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n```pycon\n>>> from toolz import cons, concat, concatv\n>>> xs = range(10)\n>>> cons(-1, xs)\n>>> list(concat([xs, xs]))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> list(concatv(xs, xs))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### \u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u306e\u5206\u5272 - partition, partition_all, partitionby \n\n```partition``` \u3001```partition_all``` \u306f\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u3092\u6307\u5b9a\u3055\u308c\u305f\u9577\u3055\u306e\u30bf\u30d7\u30eb\u306b\u5206\u5272\u3057\u307e\u3059\u3002\u4f59\u308a\u304c\u3067\u305f\u969b\u306e\u52d5\u4f5c\u304c\u7570\u306a\u308a\u307e\u3059\u3002\n\n* ```partition``` \u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u6307\u5b9a\u3057\u306a\u3044\u3002\u4f59\u3063\u305f\u5206\u306f\u51fa\u529b\u3055\u308c\u306a\u3044\u3002\n* ```partition``` \u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u6307\u5b9a\u3059\u308b\u3002\u4f59\u308a\u3082\u51fa\u529b\u3059\u308b\u3002\u5024\u304c\u306a\u3044\u3068\u3053\u308d\u3092\u6307\u5b9a\u3055\u308c\u305f\u5024\u3067\u30d1\u30c7\u30a3\u30f3\u30b0\u3002\n* ```partition_all``` \u306f\u3001\u6700\u5f8c\u306e\u8981\u7d20\u304c\u77ed\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308b\u3002\n\n```partitionby``` \u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u95a2\u6570\u3067\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u3092\u5206\u5272\u3057\u307e\u3059\u3002\n\n```pycon\n>>> from toolz import partition, partition_all, partition by\n>>> xs = range(10)\n>>> list(partition(3, xs))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8)]\n>>> list(partition(3, xs, None))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, None, None)]\n>>> list(partition_all(3, xs))\n[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9,)]\n>>> list(partitionby(lambda x: x < 5, xs))\n[(0, 1, 2, 3, 4), (5, 6, 7, 8, 9)]\n```\n\n### sliding_window - \u30b9\u30e9\u30a4\u30c7\u30a3\u30f3\u30b0\u30a6\u30a3\u30f3\u30c9\u30a6\n\n```sliding_window``` \u306f\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30921\u3064\u305a\u3064\u305a\u3089\u3057\u306a\u304c\u3089\u6307\u5b9a\u3057\u305f\u9577\u3055\u306e\u30bf\u30d7\u30eb\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\n```pycon\n>>> from toolz import sliding_sindow\n>>> list(sliding_window(3, range(10)))\n[(0, 1, 2), (1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7), (6, 7, 8), (7, 8, 9)]\n```\n\n### \u8907\u6570\u306e\u30bd\u30fc\u30c8\u3055\u308c\u305f\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u3092\u30de\u30fc\u30b8 - merge_sorted\n\n```merge_sorted``` \u306f\u3001\u8907\u6570\u306e\u30bd\u30fc\u30c8\u3055\u308c\u305f\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u3092\u5f15\u6570\u306b\u3068\u308a\u30de\u30fc\u30b8\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002\n\n```pylon\n>>> from toolz import merge_sorted\n>>> from random import randint\n>>> xs = sorted([randint(1, 10) for _ in range(5)])\n>>> ys = sorted([randint(1, 10) for _ in range(5)])\n>>> zs = sorted([randint(1, 10) for _ in range(5)])\n>>> xs\n[3, 6, 6, 6, 9]\n>>> ys\n[3, 4, 5, 7, 8]\n>>> zs\n[1, 2, 4, 5, 8]\n>>> list(merge_sorted(xs, ys, zs))\n[1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 9]\n```\n\n\u5165\u529b\u3055\u308c\u308b\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u304c\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u7d50\u679c\u306f\u9806\u756a\u306b\u4e26\u3070\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002\n\n```pycon\n>>> from toolz import merge_sorted\n>>> from random import randint\n>>> xs = [randint(1, 10) for _ in range(5)]\n>>> ys = [randint(1, 10) for _ in range(5)]\n>>> zs = [randint(1, 10) for _ in range(5)]\n>>> xs\n[4, 3, 10, 7, 3]\n>>> ys\n[7, 8, 1, 10, 2]\n>>> zs\n[2, 6, 2, 4, 10]\n>>> list(merge_sorted(xs, ys, zs))\n[2, 4, 3, 6, 2, 4, 7, 8, 1, 10, 7, 3, 10, 2, 10]\n```\n\n\u5165\u529b\u304c\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306b\u306f\u3001\u9023\u7d50\u3057\u3066\u30bd\u30fc\u30c8\u3059\u308c\u3070\u9806\u756a\u306b\u306a\u3089\u3093\u3060\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u3002\n\n```pycon\n>>> from toolz import concatv\n>>> sorted(concatv(xs, ys, zs))\n[1, 2, 2, 2, 3, 3, 4, 4, 6, 7, 7, 8, 10, 10, 10]\n```\n\n### join - \u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u306e\u7d50\u5408\n\n\u30ad\u30fc\u95a2\u6570\u306e\u5024\u30672\u3064\u306e\u30b7\u30fc\u30af\u30a8\u30f3\u30b9\u3092\u7d50\u5408\u3059\u308b\u3002\n\n```pycon\n>>> from toolz import join\n>>> from toolz.curried import get # \u30ab\u30ea\u30fc\u5316\u3055\u308c\u305fget\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\n>>> carts = [('Taro', 'Apple'), ('Taro', 'Banana'), ('Jiro', 'Apple'), ('Jiro', 'Orange'), ('Sabu', 'Banana'), ('Sabu', 'Banana')]\n>>> prices = [('Apple', 100), ('Banana', 80), ('Orange', 150)]\n>>> for x in join(get(1), carts, get(0), prices):\n...     print x\n... \n(('Taro', 'Apple'), ('Apple', 100))\n(('Jiro', 'Apple'), ('Apple', 100))\n(('Taro', 'Banana'), ('Banana', 80))\n(('Sabu', 'Banana'), ('Banana', 80))\n(('Sabu', 'Banana'), ('Banana', 80))\n(('Jiro', 'Orange'), ('Orange', 150))\n```\n\n## Functoolz\n\n### \u30ab\u30ea\u30fc\u5316 - curry\n\n#### curry\n\n```curry``` \u95a2\u6570\u3092\u4f7f\u3063\u3066\u30ab\u30ea\u30fc\u5316\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```py\n>>> from tools import curry\n>>> from operator import add\n>>> curried_add = curry(add)\n>>> curried_add(3)(4)\n7\n```\n\n```curry``` \u306f\u30c7\u30b3\u30ec\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```pycon\n>>> from tools import curry\n>>> @curry\n... def add(a, b):\n...     return a+b\n... \n>>> add(3)(4)\n7\n```\n\n#### toolz\u304c\u63d0\u4f9b\u3059\u308b\u95a2\u6570\u306e\u30ab\u30ea\u30fc\u5316\n\n```toolz``` \u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b\u95a2\u6570\u306b\u3064\u3044\u3066\u306f```toolz.curried``` \u304b\u3089\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3068\u30ab\u30ea\u30fc\u5316\u3055\u308c\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n\u4f8b\u3068\u3057\u3066```map``` \u95a2\u6570\u306e\u5834\u5408\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n```toolz``` \u304b\u3089```map``` \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u95a2\u6570\u306e\u307f\u3092\u6e21\u3059\u3068\u5f15\u6570\u304c\u8db3\u308a\u306a\u3044\u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u3067\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n```pycon\n>>> from toolz import map as not_curried_map\n>>> list(not_curried_map(lambda x: x + 1)([1, 2, 3]))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: imap() must have at least two arguments.\n```\n\n```curry``` \u3092\u4f7f\u3063\u3066\u30ab\u30ea\u30fc\u5316\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```pycon\n>>> list(curry(not_curried_map)(lambda x: x + 1)([1, 2, 3]))\n[2, 3, 4]\n```\n\n```toolz.curried``` \u304b\u3089\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3068\u30ab\u30ea\u30fc\u5316\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u305d\u306e\u307e\u307e\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\n```pycon\n>>> from toolz.curried import map as curried_map\n>>> list(curried_map(lambda x: x + 1)([1, 2, 3]))\n[2, 3, 4]\n```\n\n### \u95a2\u6570\u5408\u6210 - compose, pipe, thread_first, thread_last\n\n#### compose\n\n```compose``` \u3092\u4f7f\u3063\u3066\u8907\u6570\u306e\u95a2\u6570\u3092\u5408\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```compose(f, g, h)(x)```\u306f ```f(g(h(x)))``` \u3068\u540c\u3058\u3067\u3059\u3002\n\n```pycon\n>>> from toolz import compose, curry\n>>> from operators import add, mul\n>>> compose(curry(mul)(2), curry(add)(1))(3)\n8\n```\n\n#### pipe, thread_first, thread_last\n\n```pipe``` \u3082```compose``` \u3068\u540c\u3058\u3088\u3046\u306b\u30c7\u30fc\u30bf\u306b\u8907\u6570\u306e\u95a2\u6570\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\n```compose```\u3068\u5f15\u6570\u306e\u9806\u756a\u304c\u9006\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u30b7\u30a7\u30eb\u306e\u30d1\u30a4\u30d7\u306e\u3088\u3046\u306b\u30c7\u30fc\u30bf\u306e\u6d41\u308c\u3068\u540c\u3058\u304f\u5de6\u304b\u3089\u53f3\u3078\u3068\u8a55\u4fa1\u3055\u308c\u3066\u3044\u304d\u307e\u3059\u3002\n```pipe(x, f, g, h)``` \u306f ```h(g(f(x)))``` \u3068\u306a\u308a\u307e\u3059\u3002\n\n```pycon\n>>> from toolz import pipe\n>>> from toolz.curried import get\n>>> pipe('hello world', str.split, get(0), str.upper)\n'HELLO'\n```\n\n```thread_first``` \u3001```thread_last``` \u306f1\u5f15\u6570\u306e\u95a2\u6570\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u306b\u306f```pipe``` \u3068\u540c\u69d8\u306e\u52d5\u304d\u3092\u3057\u307e\u3059\u3002\n\n```pycon\n>>> from toolz import thread_first, thread_last\n>>> from toolz.curried import get\n>>> thread_first('hello world', str.split, get(0), str.upper)\n'HELLO'\n>>> thread_last('hello world', str.split, get(0), str.upper)\n'HELLO'\n```\n\n2\u3064\u4ee5\u4e0a\u306e\u5f15\u6570\u3092\u3068\u308b\u95a2\u6570\u3092\u30bf\u30d7\u30eb\u3092\u4f7f\u3063\u3066\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u3001\u305d\u306e\u969b\u306e\u52d5\u4f5c\u304c\u7570\u306a\u308a\u307e\u3059\u3002\n```thread_first``` \u306e\u5834\u5408\u306b\u306f\u3001\u524d\u306e\u95a2\u6570\u304b\u3089\u6e21\u3055\u308c\u308b\u7d50\u679c\u304c\u6700\u521d\u306e\u5f15\u6570\u3068\u306a\u308a\u3001\n```thread_last``` \u306e\u5834\u5408\u306b\u306f\u6700\u5f8c\u306e\u5f15\u6570\u3068\u306a\u308a\u307e\u3059\u3002\n\n```pycon\n>>> thread_first('hello world', str.split, get(0), str.upper, (add, 'WORLD'))\n'HELLOWORLD'\n>>> thread_last('hello world', str.split, get(0), str.upper, (add, 'WORLD'))\n'WORLDHELLO'\n```\n\n### \u30e1\u30e2\u5316 - memoize\n\n```memoize``` \u3092\u4f7f\u3046\u3068\u30e1\u30e2\u5316\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n```memoize``` \u306f\u30c7\u30b3\u30ec\u30fc\u30bf\u3068\u3057\u3066\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\n```pycon\n>>> def tarai(x, y, z):\n...     if x <= y:\n...         return y\n...     return tarai(tarai(x-1, y, z), tarai(y-1, z, x), tarai(z-1, x, y))\n... \n>>> tarai(12, 6, 0)\n12\n>>> t = memoize(tarai)\n>>> t(12, 6, 0)\n12\n```\n\n## \u540c\u3058\u5f15\u6570\u306b\u8907\u6570\u306e\u95a2\u6570\u3092\u9069\u7528 - juxt\n\n```pycon\n>>> from toolz import juxt\n>>> from operator import add, mul\n>>> juxt(add, mul)(3, 4)\n(7, 12)\n```\n\n### \u6052\u7b49\u95a2\u6570 - identity\n\n```identity``` \u306f\u5f15\u6570\u3092\u305d\u306e\u307e\u307e\u8fd4\u3057\u307e\u3059\u3002\n\n```pycon\n>>> from toolz import identity\n>>> identity(3)\n3\n```\n\n### \u526f\u4f5c\u7528\u306b\u3088\u308b\u51e6\u7406 - do\n\n```do``` \u306f\u95a2\u6570\u3092\u5b9f\u884c\u3057\u5f15\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u95a2\u6570\u306e\u5b9f\u884c\u7d50\u679c\u306f\u6368\u3066\u3089\u308c\u308b\u306e\u3067\u526f\u4f5c\u7528\u3067\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u306a\u3069\u306e\u7528\u9014\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f```log``` \u306b\u5f15\u6570\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\n```pycon\n>>> from toolz import compose\n>>> from toolz.curried import do\n>>> log = []\n>>> map(compose(str, do(log.append)), range(5))\n['0', '1', '2', '3', '4']\n>>> log\n[0, 1, 2, 3, 4]\n```\n\n## Dicttoolz\n\n### \u30cd\u30b9\u30c8\u3055\u308c\u305f\u8f9e\u66f8\u306e\u53c2\u7167\u30fb\u66f4\u65b0 - get_in, update_in\n\n```get_in``` \u3092\u5229\u7528\u3059\u308b\u3068\u5f15\u6570\u306b\u30ad\u30fc\u306e\u30ea\u30b9\u30c8\u3092\u6e21\u3059\u3053\u3068\u3067\u30cd\u30b9\u30c8\u3055\u308c\u305f\u8f9e\u66f8\u3092\u7c21\u5358\u306b\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u6307\u5b9a\u3082\u53ef\u80fd\u3067\u3059\u3002\n\n```pycon\n>>> from toolz import get_in\n>>> d = {\"a\": {\"b\": {\"c\": 1}}}\n>>> d\n{'a': {'b': {'c': 1}}}\n>>> get_in([\"a\", \"b\", \"c\"], d)\n1\n>>> get_in([\"a\", \"b\", \"e\"], d, 'None')\n'None'\n```\n\n```update_in``` \u3092\u5229\u7528\u3059\u308b\u3068\u5f15\u6570\u306b\u30ad\u30fc\u306e\u30ea\u30b9\u30c8\u3092\u6e21\u3059\u3053\u3068\u3067\u30cd\u30b9\u30c8\u3055\u308c\u305f\u8f9e\u66f8\u3092\u7c21\u5358\u306b\u66f4\u65b0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u66f4\u65b0\u306f\u66f4\u65b0\u7528\u306e\u95a2\u6570\u3092\u6e21\u3059\u3053\u3068\u3067\u884c\u3044\u307e\u3059\u3002\n\u5143\u306e\u8f9e\u66f8\u306b\u5909\u66f4\u306f\u52a0\u3048\u3089\u308c\u305a\u95a2\u6570\u3092\u9069\u7528\u3057\u3066\u66f4\u65b0\u3055\u308c\u305f\u8f9e\u66f8\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```pycon\n>>> from toolz import update_in\n>>> d = {\"a\": {\"b\": {\"c\": 1}}}\n>>> update_in(d, [\"a\", \"b\", \"c\"], lambda x: x+1)\n{'a': {'b': {'c': 2}}}\n>>> d\n{'a': {'b': {'c': 1}}}\n```\n\n\u30ad\u30fc\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u4f7f\u3063\u3066\u65b0\u3057\u304f\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n\n```pycon\n>>> update_in(d, [\"a\", \"b\", \"e\"], lambda x: x+1, 0)\n{'a': {'b': {'c': 1, 'e': 1}}}\n```\n\n# \u6700\u5f8c\u306b\n\n\u591a\u304f\u306e\u6a5f\u80fd\u306f```itertools``` \u3001```functools``` \u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u305d\u308c\u3089\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u4f7f\u3044\u65b9\u3068\u3057\u3066\u3082\u53c2\u8003\u306b\u306a\u308b\u3068\u91cd\u3044\u307e\u3059\u3002\n", "tags": ["Python", "\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0"]}