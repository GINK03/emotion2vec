{"context": "\n\n\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\n\n\u62bc\u3055\u308c\u305f\u30dc\u30bf\u30f3\u306e\u72b6\u614b\u3092MQTT\u3067\u9001\u4fe1\u3059\u308b\u3001IoT\u30c7\u30d0\u30a4\u30b9\"DC-01\"\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3001\u3053\u306e\u30c7\u30d0\u30a4\u30b9\u3092\u300c\u30ef\u30a4\u30e4\u30ec\u30b9MIDI\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u300d\u3068\u3057\u3066\u4f7f\u7528\u3057\u305f\u969b\u306e\u6280\u8853\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n\u30b7\u30b9\u30c6\u30e0\u6982\u8981\n\n\u3053\u306e\u30b7\u30b9\u30c6\u30e0\u306f\u3001\u5927\u304d\u304f\u5206\u3051\u30663\u3064\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304b\u3089\u6210\u308a\u7acb\u3061\u307e\u3059\u3002\n\n\uff11\uff0e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30c7\u30d0\u30a4\u30b9\u300cDC-01\u300d\n\nESPr Developer\u306b\u30dc\u30bf\u30f3\u304c\u5099\u308f\u3063\u3066\u304a\u308a\u3001\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f/\u96e2\u3057\u305f\u969b\u306bMQTT\u30c8\u30d4\u30c3\u30af\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\n\u30c8\u30d4\u30c3\u30af\u306fdc-01/button/* (*\u306f\u30dc\u30bf\u30f3\u306e\u756a\u53f7)\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306f1(\u62bc\u3055\u308c\u305f\u969b)\u304b0(\u96e2\u3057\u305f\u969b)\u3067\u3059\u3002\n\n\uff12\uff0eVPS\n\nMQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u3068\u3057\u3066Mosquitto\u3092\u904b\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u5c06\u6765\u7684\u306b\u306f\u3001fluentd\u3067\u30dc\u30bf\u30f3\u306e\u4f7f\u7528\u72b6\u6cc1\u3092\u30ed\u30b0\u3068\u3057\u3066\u8caf\u3081\u3066\u304a\u3053\u3046\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\n\uff13\uff0e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8PC\n\n\u4f5c\u66f2\u30bd\u30d5\u30c8\u300cCubase\u300d\u306bMIDI\u4fe1\u53f7\u3092\u9001\u4fe1\u3059\u308b\u305f\u3081\u3001MQTT\u30c8\u30d4\u30c3\u30af\u3092MIDI\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092C#\u3067\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\nMIDI\u4fe1\u53f7\u306f\u3001\u30d0\u30fc\u30c1\u30e3\u30ebMIDI\u30c7\u30d0\u30a4\u30b9\u300cloopMIDI\u300d\u3092\u4f7f\u7528\u3057\u3066Cubase\u306b\u4f1d\u3048\u307e\u3059\u3002\nCubase\u5074\u3067\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30c9\u30e9\u30e0\u306e\u30ad\u30c3\u30af\u3084\u30b9\u30cd\u30a2\u3092\u9cf4\u3089\u3059\u30c9\u30e9\u30e0\u30de\u30b7\u30f3\u3068\u3057\u3066\u4f7f\u3063\u305f\u308a\u3001\n\u518d\u751f\u3084\u505c\u6b62\u6a5f\u80fd\u3092\u6301\u305f\u305b\u305f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3068\u3057\u3066\u4f7f\u3063\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u56de\u8def\u56f3\nfritzing\u306bESPr Developer\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u306a\u3044\u305f\u3081\u3001\u540c\u30c1\u30c3\u30d7\u3092\u642d\u8f09\u3057\u305fAdafruit\u793e\u88fd\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u63cf\u304d\u307e\u3057\u305f\u3002\n\n5\u3064\u306e\u4e09\u548c\u88fd\u30dc\u30bf\u30f3\u30011\u3064\u306eLED\u3092ESPr Developer\u306b\u53d6\u308a\u4ed8\u3051\u307e\u3059\u3002\n\u30dc\u30bf\u30f3\u306fIO16,5,4,14,12\u756a\u30dd\u30fc\u30c8\u3092\u3001LED\u306f13\u756a\u30dd\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u30dc\u30bf\u30f3\u306b\u306f\u305d\u308c\u305e\u308c\u30d7\u30eb\u30c0\u30a6\u30f3\u62b5\u629710k\u03a9\u3092\u3001LED\u306b\u306f\u30d7\u30eb\u30a2\u30c3\u30d7\u62b5\u6297270\u03a9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30fb\u30b9\u30b1\u30c3\u30c1\u89e3\u8aac\n\nESPr Developer\n\u4e0a\u8a18\u56de\u8def\u56f3\u3067\u7d44\u3093\u3060IoT\u30c7\u30d0\u30a4\u30b9\u306e\u30b9\u30b1\u30c3\u30c1\u3067\u3059\u3002\n\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066PubSubClient\u3092\u4f7f\u7528\u3057\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u308c\u306eExample\u3092\u57fa\u306b\u4f5c\u308a\u307e\u3057\u305f\u3002\n\nDC-01.ino\n\n#include <ESP8266WiFi.h>\n#include <PubSubClient.h>\n\n#define BUTTON_NUM 5\n\nint pin[BUTTON_NUM] = {16, 5, 4, 14, 12};\nconst int play = 100;\nint ct[BUTTON_NUM], pt[BUTTON_NUM];\nbool flag[BUTTON_NUM];\nbool connect_complete = false;\n\nconst char* ssid = \"... your ssid ...\";\nconst char* password = \"... your password ...\";\nconst char* mqtt_server = \"... your mqtt server address ...\";\nconst char* mqtt_user = \"... your mqtt username ...\";\nconst char* mqtt_pass = \"... your mqtt password ...\";\n\nWiFiClient espClient;\nPubSubClient client(espClient);\n\nvoid setup() {\n  for (int i = 0; i < BUTTON_NUM; i++) {\n    ct[i] = 0; pt[i] = 0;\n    flag[i] = false;\n    pinMode(pin[i], INPUT);\n  }\n  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output\n  pinMode(13, OUTPUT);\n  digitalWrite(13, HIGH);\n  Serial.begin(115200);\n  setup_wifi();\n  client.setServer(mqtt_server, 1883);\n  client.setCallback(callback);\n}\n\nvoid setup_wifi() {\n\n  delay(10);\n  // We start by connecting to a WiFi network\n  Serial.println();\n  Serial.print(\"Connecting to \");\n  Serial.println(ssid);\n\n  WiFi.begin(ssid, password);\n\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n\n  connect_complete = true;\n  digitalWrite(13, LOW);\n\n  Serial.println(\"\");\n  Serial.println(\"WiFi connected\");\n  Serial.println(\"IP address: \");\n  Serial.println(WiFi.localIP());\n}\n\nvoid callback(char* topic, byte* payload, unsigned int length) {\n  Serial.print(\"Message arrived [\");\n  Serial.print(topic);\n  Serial.print(\"] \");\n  for (int i = 0; i < length; i++) {\n    Serial.print((char)payload[i]);\n  }\n  Serial.println();\n\n  // Switch on the LED if an 1 was received as first character\n  if ((char)payload[0] == '1') {\n    digitalWrite(BUILTIN_LED, LOW);   // Turn the LED on (Note that LOW is the voltage level\n    // but actually the LED is on; this is because\n    // it is acive low on the ESP-01)\n  } else {\n    digitalWrite(BUILTIN_LED, HIGH);  // Turn the LED off by making the voltage HIGH\n  }\n\n}\n\nvoid reconnect() {\n  // Loop until we're reconnected\n  while (!client.connected()) {\n    Serial.print(\"Attempting MQTT connection...\");\n    // Attempt to connect\n    if (client.connect(\"ESP8266Client\", mqtt_user, mqtt_pass)) {\n      connect_complete = true;\n      digitalWrite(13, LOW);\n      Serial.println(\"connected\");\n      // Once connected, publish an announcement...\n      //client.publish(\"outTopic\", \"hello world\");\n      // ... and resubscribe\n      //client.subscribe(\"inTopic\");\n    } else {\n      Serial.print(\"failed, rc=\");\n      Serial.print(client.state());\n      Serial.println(\" try again in 5 seconds\");\n      // Wait 5 seconds before retrying\n      delay(5000);\n    }\n  }\n}\nvoid loop() {\n\n  if (!client.connected()) {\n    connect_complete = false;\n    digitalWrite(13, HIGH);\n    reconnect();\n  }\n\n  if (connect_complete == true) digitalWrite(13, LOW);\n  client.loop();\n\n  for (int i = 0; i < BUTTON_NUM; i++) {\n    //\u30dc\u30bf\u30f3\u62bc\u4e0b\u5224\u5b9a\n    if (digitalRead(pin[i]) != flag[i]) {\n      //\u30c1\u30e3\u30bf\u30ea\u30f3\u30b0\u5224\u5b9a\n      ct[i] = millis();\n      if ((ct[i] - pt[i]) > play) {\n        //\u30dc\u30bf\u30f3ONOFF\u6642\u306e\u52d5\u4f5c\n        if (connect_complete == true) digitalWrite(13, HIGH);\n        flag[i] = digitalRead(pin[i]);\n        char msg[50];\n        char topic[50];\n        sprintf(msg, \"%d\", flag[i]);\n        sprintf(topic, \"dc01/button/%d\", i);\n        Serial.print(\"changed. current is \");\n        Serial.println(flag[i]);\n        client.publish(topic, msg);\n        pt[i] = ct[i];\n      }\n    }\n  }\n}\n\n\nsetup()\u95a2\u6570\u3067\u306f\u30dc\u30bf\u30f3\u7528\u5909\u6570\u306e\u521d\u671f\u5316\u30fbWifi\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30fbMQTT\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u884c\u3044\u307e\u3059\u3002\nloop()\u95a2\u6570\u3067\u306fMQTT\u63a5\u7d9a\u306e\u30c1\u30a7\u30c3\u30af\u3068\u3001\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u5834\u5408\u306f\u5bfe\u5fdc\u3059\u308b\u756a\u53f7\u306e\u30c8\u30d4\u30c3\u30af\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\nLED\u306f\u3001MQTT\u63a5\u7d9a\u304c\u78ba\u7acb\u3055\u308c\u3066\u306a\u3044\u3068\u304d\u306f\u5e38\u706f\u3057\u3001\u63a5\u7d9a\u5b8c\u4e86\u3068\u306a\u308b\u3068\u6d88\u706f\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001MQTT\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3059\u308b\u969b\u3001\u4e00\u77ac\u70b9\u6ec5\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nC#\u30d7\u30ed\u30b0\u30e9\u30e0\nESPr Developer\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092Subscribe\u3057\u3001MIDI\u30ce\u30fc\u30c8\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\nMQTT\u901a\u4fe1\u306b\u306fM2MQtt\u3092\u3001MIDI\u306b\u306fNextMIDI\u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\u3001\u30b5\u30f3\u30d7\u30eb\u3092\u57fa\u306b\u4f5c\u308a\u307e\u3057\u305f\u3002\n\nProgram.cs\nusing NextMidi.DataElement;\nusing NextMidi.MidiPort.Output;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing uPLibrary.Networking.M2Mqtt;\nusing uPLibrary.Networking.M2Mqtt.Messages;\n\nnamespace MQTT_MIDI_Converter_CUI\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // MIDI \u30dd\u30fc\u30c8\u540d\u3092\u6307\u5b9a\u3057\u3066 MIDI \u30dd\u30fc\u30c8\u3092\u958b\u304f\n            if (args.Length != 1)\n            {\n                Console.WriteLine(\"1 port name required\");\n                return;\n            }\n            var port = new MidiOutPort(args[0]);\n            try\n            {\n                port.Open();\n            }\n            catch\n            {\n                Console.WriteLine(\"no such port exists\");\n                return;\n            }\n\n            MqttClient client;\n            client = new MqttClient(@const.MyTopic.address);\n            client.MqttMsgPublishReceived += (sender, eventArgs) =>\n            {\n                String msg = Encoding.UTF8.GetString(eventArgs.Message);\n                String topic = eventArgs.Topic;\n\n                #if DEBUG\n                Console.WriteLine(topic.Split('/')[2] + \", \" + msg);\n                #endif\n                byte note = (byte)(60 + int.Parse(topic.Split('/')[2]));\n\n                if (msg.Equals(\"1\"))\n                {\n                    port.Send(new NoteOnEvent(note, 127));\n                }\n                else\n                {\n                    port.Send(new NoteOffEvent(note));\n                }\n            };\n\n            string clientId = Guid.NewGuid().ToString();\n            byte ret = client.Connect(clientId, @const.MyTopic.user, @const.MyTopic.pass);\n            Console.WriteLine(\"Connected with result code {0}\", ret);\n\n            client.Subscribe(new[] { \"dc01/button/0\" }, new[] { MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE });\n            client.Subscribe(new[] { \"dc01/button/1\" }, new[] { MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE });\n            client.Subscribe(new[] { \"dc01/button/2\" }, new[] { MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE });\n            client.Subscribe(new[] { \"dc01/button/3\" }, new[] { MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE });\n            client.Subscribe(new[] { \"dc01/button/4\" }, new[] { MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE });\n            client.Subscribe(new[] { \"dc01/button/5\" }, new[] { MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE });\n            while (client.IsConnected)\n            {\n\n            }\n        }\n    }\n}\n\n\n\n\nconst.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace MQTT_MIDI_Converter_CUI\n{\n    class @const\n    {\n        public struct MyTopic\n        {\n            public static string address = \"... your mqtt server address ...\";\n            public static string user = \"... your mqtt username ...\";\n            public static string pass = \"... your mqtt password\";\n        }\n    }\n}\n\n\n\u3053\u3053\u3067\u306f\u3001\u30c8\u30d4\u30c3\u30afdc01/button/[0,1,2,3,4,5]\u306b\u5bfe\u3057\u3001\n\u30e1\u30c3\u30bb\u30fc\u30b8\u304c1\u306e\u969b\u306f\u3001\u305d\u308c\u305e\u308cMIDI\u30ce\u30fc\u30c8[60,61,62,63,64,65]\u3092\u30d9\u30ed\u30b7\u30c6\u30a3127\u3067\u9001\u4fe1\u3057\u3066\u3044\u307e\u3059\u3002\n\u30e1\u30c3\u30bb\u30fc\u30b8\u304c0\u306e\u969b\u306f\u3001\u30ce\u30fc\u30c8\u30aa\u30d5\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\n\n\u4f7f\u7528\u65b9\u6cd5\n\u4e0a\u8a18\u306e\u56de\u8def\u56f3\u3068\u3057\u3066\u8a2d\u8a08\u3055\u308c\u305fESPr Developer\u304c\u5fc5\u8981\u3067\u3059\u3002\n\nVPS\u3067Mosquitto\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001MQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u3068\u3057\u3066\u6a5f\u80fd\u3055\u305b\u307e\u3059\u3002\nESPr Developer\u306e\u30b9\u30b1\u30c3\u30c1\u3092\u66f8\u304d\u8fbc\u307f\u3001\u96fb\u6e90\u3092\u30aa\u30f3\u306b\u3057\u307e\u3059\u3002\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8PC\u3067\u3001MIDI\u30c7\u30d0\u30a4\u30b9\u300cloopMIDI\u300d\u3068C#\u3067\u66f8\u3044\u305fMIDI\u5909\u63db\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7acb\u3061\u4e0a\u3052\u3001\u4f5c\u66f2\u30bd\u30d5\u30c8\u3092\u7acb\u3061\u4e0a\u3052\u307e\u3059\u3002\nESPr Developer\u306e\u30dc\u30bf\u30f3\u3092\u62bc\u305b\u3070\u3001\u4f5c\u66f2\u30bd\u30d5\u30c8\u3067\u53cd\u5fdc\u304c\u3042\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u8a73\u3057\u3044\u4f7f\u3044\u65b9\u3084\u7d44\u307f\u7acb\u3066\u65b9\u3001\u4f7f\u3063\u305f\u969b\u306e\u30c7\u30e2\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u3082\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4eca\u5f8c\u306e\u8ab2\u984c\n\u73fe\u72b6\u3067\u306f\u300c\u305f\u3060\u30c7\u30fc\u30bf\u3092\u6d41\u3059\u3060\u3051\u300d\u306e\u30b7\u30b9\u30c6\u30e0\u306a\u306e\u3067\u3001\u30a4\u30de\u30a4\u30c1IoT\u3063\u307d\u304f\u3042\u308a\u307e\u305b\u3093\u306d\u3002\n\u4eca\u5f8c\u306ffluentd\u306b\u30ed\u30b0\u3092\u8caf\u3081\u3066\u3001\u30e9\u30a4\u30d5\u30ed\u30b0\u3092\u53ef\u8996\u5316\u3057\u305f\u308a\u3068\u306a\u306b\u304b\u9762\u767d\u3044\u3053\u3068\u304c\u51fa\u6765\u306a\u3044\u304b\u8003\u3048\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n#\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\n![20161217_064523512_iOS.jpg](https://qiita-image-store.s3.amazonaws.com/0/150284/3cb0bf32-478f-7ecd-d5c2-c5cd4ca17996.jpeg)\n\n\u62bc\u3055\u308c\u305f\u30dc\u30bf\u30f3\u306e\u72b6\u614b\u3092MQTT\u3067\u9001\u4fe1\u3059\u308b\u3001IoT\u30c7\u30d0\u30a4\u30b9\"DC-01\"\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3001\u3053\u306e\u30c7\u30d0\u30a4\u30b9\u3092\u300c\u30ef\u30a4\u30e4\u30ec\u30b9MIDI\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u300d\u3068\u3057\u3066\u4f7f\u7528\u3057\u305f\u969b\u306e\u6280\u8853\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n#\u30b7\u30b9\u30c6\u30e0\u6982\u8981\n![\u30b9\u30e9\u30a4\u30c91.PNG](https://qiita-image-store.s3.amazonaws.com/0/150284/af755b04-aa9b-05bf-6a1f-a96064f2c5e3.png)\n\u3053\u306e\u30b7\u30b9\u30c6\u30e0\u306f\u3001\u5927\u304d\u304f\u5206\u3051\u30663\u3064\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304b\u3089\u6210\u308a\u7acb\u3061\u307e\u3059\u3002\n\n##\uff11\uff0e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30c7\u30d0\u30a4\u30b9\u300cDC-01\u300d\n![one.PNG](https://qiita-image-store.s3.amazonaws.com/0/150284/1ef1fddb-5d6f-2019-6846-2ed5d718aee5.png)\nESPr Developer\u306b\u30dc\u30bf\u30f3\u304c\u5099\u308f\u3063\u3066\u304a\u308a\u3001\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f/\u96e2\u3057\u305f\u969b\u306bMQTT\u30c8\u30d4\u30c3\u30af\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\n\u30c8\u30d4\u30c3\u30af\u306fdc-01/button/* (*\u306f\u30dc\u30bf\u30f3\u306e\u756a\u53f7)\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306f1(\u62bc\u3055\u308c\u305f\u969b)\u304b0(\u96e2\u3057\u305f\u969b)\u3067\u3059\u3002\n\n##\uff12\uff0eVPS\n![two.PNG](https://qiita-image-store.s3.amazonaws.com/0/150284/baced3a5-0cf0-bdf7-8ce5-c6ef5414fdc0.png)\nMQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u3068\u3057\u3066Mosquitto\u3092\u904b\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u5c06\u6765\u7684\u306b\u306f\u3001fluentd\u3067\u30dc\u30bf\u30f3\u306e\u4f7f\u7528\u72b6\u6cc1\u3092\u30ed\u30b0\u3068\u3057\u3066\u8caf\u3081\u3066\u304a\u3053\u3046\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\n##\uff13\uff0e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8PC\n![three.PNG](https://qiita-image-store.s3.amazonaws.com/0/150284/683dd680-6b8e-a9a9-a94d-b4724e5241c8.png)\n\u4f5c\u66f2\u30bd\u30d5\u30c8\u300cCubase\u300d\u306bMIDI\u4fe1\u53f7\u3092\u9001\u4fe1\u3059\u308b\u305f\u3081\u3001MQTT\u30c8\u30d4\u30c3\u30af\u3092MIDI\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092C#\u3067\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\nMIDI\u4fe1\u53f7\u306f\u3001\u30d0\u30fc\u30c1\u30e3\u30ebMIDI\u30c7\u30d0\u30a4\u30b9\u300cloopMIDI\u300d\u3092\u4f7f\u7528\u3057\u3066Cubase\u306b\u4f1d\u3048\u307e\u3059\u3002\n\nCubase\u5074\u3067\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30c9\u30e9\u30e0\u306e\u30ad\u30c3\u30af\u3084\u30b9\u30cd\u30a2\u3092\u9cf4\u3089\u3059\u30c9\u30e9\u30e0\u30de\u30b7\u30f3\u3068\u3057\u3066\u4f7f\u3063\u305f\u308a\u3001\n\u518d\u751f\u3084\u505c\u6b62\u6a5f\u80fd\u3092\u6301\u305f\u305b\u305f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3068\u3057\u3066\u4f7f\u3063\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n#\u56de\u8def\u56f3\nfritzing\u306bESPr Developer\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u306a\u3044\u305f\u3081\u3001\u540c\u30c1\u30c3\u30d7\u3092\u642d\u8f09\u3057\u305fAdafruit\u793e\u88fd\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u63cf\u304d\u307e\u3057\u305f\u3002\n![dc01_\u56de\u8def\u56f3.png](https://qiita-image-store.s3.amazonaws.com/0/150284/ac2a3f4f-7445-c032-8a53-19c739796ac7.png)\n\n5\u3064\u306e\u4e09\u548c\u88fd\u30dc\u30bf\u30f3\u30011\u3064\u306eLED\u3092ESPr Developer\u306b\u53d6\u308a\u4ed8\u3051\u307e\u3059\u3002\n\u30dc\u30bf\u30f3\u306fIO16,5,4,14,12\u756a\u30dd\u30fc\u30c8\u3092\u3001LED\u306f13\u756a\u30dd\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u30dc\u30bf\u30f3\u306b\u306f\u305d\u308c\u305e\u308c\u30d7\u30eb\u30c0\u30a6\u30f3\u62b5\u629710k\u03a9\u3092\u3001LED\u306b\u306f\u30d7\u30eb\u30a2\u30c3\u30d7\u62b5\u6297270\u03a9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n#\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30fb\u30b9\u30b1\u30c3\u30c1\u89e3\u8aac\n##ESPr Developer\n\u4e0a\u8a18\u56de\u8def\u56f3\u3067\u7d44\u3093\u3060IoT\u30c7\u30d0\u30a4\u30b9\u306e\u30b9\u30b1\u30c3\u30c1\u3067\u3059\u3002\n\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066[PubSubClient](https://github.com/knolleary/pubsubclient)\u3092\u4f7f\u7528\u3057\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u308c\u306eExample\u3092\u57fa\u306b\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n```c++:DC-01.ino\n\n#include <ESP8266WiFi.h>\n#include <PubSubClient.h>\n\n#define BUTTON_NUM 5\n\nint pin[BUTTON_NUM] = {16, 5, 4, 14, 12};\nconst int play = 100;\nint ct[BUTTON_NUM], pt[BUTTON_NUM];\nbool flag[BUTTON_NUM];\nbool connect_complete = false;\n\nconst char* ssid = \"... your ssid ...\";\nconst char* password = \"... your password ...\";\nconst char* mqtt_server = \"... your mqtt server address ...\";\nconst char* mqtt_user = \"... your mqtt username ...\";\nconst char* mqtt_pass = \"... your mqtt password ...\";\n\nWiFiClient espClient;\nPubSubClient client(espClient);\n\nvoid setup() {\n  for (int i = 0; i < BUTTON_NUM; i++) {\n    ct[i] = 0; pt[i] = 0;\n    flag[i] = false;\n    pinMode(pin[i], INPUT);\n  }\n  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output\n  pinMode(13, OUTPUT);\n  digitalWrite(13, HIGH);\n  Serial.begin(115200);\n  setup_wifi();\n  client.setServer(mqtt_server, 1883);\n  client.setCallback(callback);\n}\n\nvoid setup_wifi() {\n\n  delay(10);\n  // We start by connecting to a WiFi network\n  Serial.println();\n  Serial.print(\"Connecting to \");\n  Serial.println(ssid);\n\n  WiFi.begin(ssid, password);\n\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n\n  connect_complete = true;\n  digitalWrite(13, LOW);\n\n  Serial.println(\"\");\n  Serial.println(\"WiFi connected\");\n  Serial.println(\"IP address: \");\n  Serial.println(WiFi.localIP());\n}\n\nvoid callback(char* topic, byte* payload, unsigned int length) {\n  Serial.print(\"Message arrived [\");\n  Serial.print(topic);\n  Serial.print(\"] \");\n  for (int i = 0; i < length; i++) {\n    Serial.print((char)payload[i]);\n  }\n  Serial.println();\n\n  // Switch on the LED if an 1 was received as first character\n  if ((char)payload[0] == '1') {\n    digitalWrite(BUILTIN_LED, LOW);   // Turn the LED on (Note that LOW is the voltage level\n    // but actually the LED is on; this is because\n    // it is acive low on the ESP-01)\n  } else {\n    digitalWrite(BUILTIN_LED, HIGH);  // Turn the LED off by making the voltage HIGH\n  }\n\n}\n\nvoid reconnect() {\n  // Loop until we're reconnected\n  while (!client.connected()) {\n    Serial.print(\"Attempting MQTT connection...\");\n    // Attempt to connect\n    if (client.connect(\"ESP8266Client\", mqtt_user, mqtt_pass)) {\n      connect_complete = true;\n      digitalWrite(13, LOW);\n      Serial.println(\"connected\");\n      // Once connected, publish an announcement...\n      //client.publish(\"outTopic\", \"hello world\");\n      // ... and resubscribe\n      //client.subscribe(\"inTopic\");\n    } else {\n      Serial.print(\"failed, rc=\");\n      Serial.print(client.state());\n      Serial.println(\" try again in 5 seconds\");\n      // Wait 5 seconds before retrying\n      delay(5000);\n    }\n  }\n}\nvoid loop() {\n\n  if (!client.connected()) {\n    connect_complete = false;\n    digitalWrite(13, HIGH);\n    reconnect();\n  }\n\n  if (connect_complete == true) digitalWrite(13, LOW);\n  client.loop();\n\n  for (int i = 0; i < BUTTON_NUM; i++) {\n    //\u30dc\u30bf\u30f3\u62bc\u4e0b\u5224\u5b9a\n    if (digitalRead(pin[i]) != flag[i]) {\n      //\u30c1\u30e3\u30bf\u30ea\u30f3\u30b0\u5224\u5b9a\n      ct[i] = millis();\n      if ((ct[i] - pt[i]) > play) {\n        //\u30dc\u30bf\u30f3ONOFF\u6642\u306e\u52d5\u4f5c\n        if (connect_complete == true) digitalWrite(13, HIGH);\n        flag[i] = digitalRead(pin[i]);\n        char msg[50];\n        char topic[50];\n        sprintf(msg, \"%d\", flag[i]);\n        sprintf(topic, \"dc01/button/%d\", i);\n        Serial.print(\"changed. current is \");\n        Serial.println(flag[i]);\n        client.publish(topic, msg);\n        pt[i] = ct[i];\n      }\n    }\n  }\n}\n```\n\nsetup()\u95a2\u6570\u3067\u306f\u30dc\u30bf\u30f3\u7528\u5909\u6570\u306e\u521d\u671f\u5316\u30fbWifi\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30fbMQTT\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u884c\u3044\u307e\u3059\u3002\nloop()\u95a2\u6570\u3067\u306fMQTT\u63a5\u7d9a\u306e\u30c1\u30a7\u30c3\u30af\u3068\u3001\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u5834\u5408\u306f\u5bfe\u5fdc\u3059\u308b\u756a\u53f7\u306e\u30c8\u30d4\u30c3\u30af\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\n\nLED\u306f\u3001MQTT\u63a5\u7d9a\u304c\u78ba\u7acb\u3055\u308c\u3066\u306a\u3044\u3068\u304d\u306f\u5e38\u706f\u3057\u3001\u63a5\u7d9a\u5b8c\u4e86\u3068\u306a\u308b\u3068\u6d88\u706f\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001MQTT\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3059\u308b\u969b\u3001\u4e00\u77ac\u70b9\u6ec5\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n##C#\u30d7\u30ed\u30b0\u30e9\u30e0\nESPr Developer\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092Subscribe\u3057\u3001MIDI\u30ce\u30fc\u30c8\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\nMQTT\u901a\u4fe1\u306b\u306f[M2MQtt](https://m2mqtt.wordpress.com/)\u3092\u3001MIDI\u306b\u306f[NextMIDI](http://starway.s234.xrea.com/wordpress/)\u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\u3001\u30b5\u30f3\u30d7\u30eb\u3092\u57fa\u306b\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n```C#:Program.cs\nusing NextMidi.DataElement;\nusing NextMidi.MidiPort.Output;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing uPLibrary.Networking.M2Mqtt;\nusing uPLibrary.Networking.M2Mqtt.Messages;\n\nnamespace MQTT_MIDI_Converter_CUI\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // MIDI \u30dd\u30fc\u30c8\u540d\u3092\u6307\u5b9a\u3057\u3066 MIDI \u30dd\u30fc\u30c8\u3092\u958b\u304f\n            if (args.Length != 1)\n            {\n                Console.WriteLine(\"1 port name required\");\n                return;\n            }\n            var port = new MidiOutPort(args[0]);\n            try\n            {\n                port.Open();\n            }\n            catch\n            {\n                Console.WriteLine(\"no such port exists\");\n                return;\n            }\n\n            MqttClient client;\n            client = new MqttClient(@const.MyTopic.address);\n            client.MqttMsgPublishReceived += (sender, eventArgs) =>\n            {\n                String msg = Encoding.UTF8.GetString(eventArgs.Message);\n                String topic = eventArgs.Topic;\n\n                #if DEBUG\n                Console.WriteLine(topic.Split('/')[2] + \", \" + msg);\n                #endif\n                byte note = (byte)(60 + int.Parse(topic.Split('/')[2]));\n\n                if (msg.Equals(\"1\"))\n                {\n                    port.Send(new NoteOnEvent(note, 127));\n                }\n                else\n                {\n                    port.Send(new NoteOffEvent(note));\n                }\n            };\n            \n            string clientId = Guid.NewGuid().ToString();\n            byte ret = client.Connect(clientId, @const.MyTopic.user, @const.MyTopic.pass);\n            Console.WriteLine(\"Connected with result code {0}\", ret);\n\n            client.Subscribe(new[] { \"dc01/button/0\" }, new[] { MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE });\n            client.Subscribe(new[] { \"dc01/button/1\" }, new[] { MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE });\n            client.Subscribe(new[] { \"dc01/button/2\" }, new[] { MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE });\n            client.Subscribe(new[] { \"dc01/button/3\" }, new[] { MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE });\n            client.Subscribe(new[] { \"dc01/button/4\" }, new[] { MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE });\n            client.Subscribe(new[] { \"dc01/button/5\" }, new[] { MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE });\n            while (client.IsConnected)\n            {\n\n            }\n        }\n    }\n}\n\n```\n\n```C#:const.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace MQTT_MIDI_Converter_CUI\n{\n    class @const\n    {\n        public struct MyTopic\n        {\n            public static string address = \"... your mqtt server address ...\";\n            public static string user = \"... your mqtt username ...\";\n            public static string pass = \"... your mqtt password\";\n        }\n    }\n}\n```\n\n\u3053\u3053\u3067\u306f\u3001\u30c8\u30d4\u30c3\u30afdc01/button/[0,1,2,3,4,5]\u306b\u5bfe\u3057\u3001\n\u30e1\u30c3\u30bb\u30fc\u30b8\u304c1\u306e\u969b\u306f\u3001\u305d\u308c\u305e\u308cMIDI\u30ce\u30fc\u30c8[60,61,62,63,64,65]\u3092\u30d9\u30ed\u30b7\u30c6\u30a3127\u3067\u9001\u4fe1\u3057\u3066\u3044\u307e\u3059\u3002\n\u30e1\u30c3\u30bb\u30fc\u30b8\u304c0\u306e\u969b\u306f\u3001\u30ce\u30fc\u30c8\u30aa\u30d5\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\n\n#\u4f7f\u7528\u65b9\u6cd5\n\u4e0a\u8a18\u306e\u56de\u8def\u56f3\u3068\u3057\u3066\u8a2d\u8a08\u3055\u308c\u305fESPr Developer\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n1. VPS\u3067Mosquitto\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001MQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u3068\u3057\u3066\u6a5f\u80fd\u3055\u305b\u307e\u3059\u3002\n2. ESPr Developer\u306e\u30b9\u30b1\u30c3\u30c1\u3092\u66f8\u304d\u8fbc\u307f\u3001\u96fb\u6e90\u3092\u30aa\u30f3\u306b\u3057\u307e\u3059\u3002\n3. \u30af\u30e9\u30a4\u30a2\u30f3\u30c8PC\u3067\u3001MIDI\u30c7\u30d0\u30a4\u30b9\u300cloopMIDI\u300d\u3068C#\u3067\u66f8\u3044\u305fMIDI\u5909\u63db\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7acb\u3061\u4e0a\u3052\u3001\u4f5c\u66f2\u30bd\u30d5\u30c8\u3092\u7acb\u3061\u4e0a\u3052\u307e\u3059\u3002\n4. ESPr Developer\u306e\u30dc\u30bf\u30f3\u3092\u62bc\u305b\u3070\u3001\u4f5c\u66f2\u30bd\u30d5\u30c8\u3067\u53cd\u5fdc\u304c\u3042\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u8a73\u3057\u3044\u4f7f\u3044\u65b9\u3084\u7d44\u307f\u7acb\u3066\u65b9\u3001\u4f7f\u3063\u305f\u969b\u306e\u30c7\u30e2\u306b\u3064\u3044\u3066\u306f[\u3053\u3061\u3089\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b](http://ikada.net/blog/make/wireless-midi-controller/)\u3082\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n#\u4eca\u5f8c\u306e\u8ab2\u984c\n\u73fe\u72b6\u3067\u306f\u300c\u305f\u3060\u30c7\u30fc\u30bf\u3092\u6d41\u3059\u3060\u3051\u300d\u306e\u30b7\u30b9\u30c6\u30e0\u306a\u306e\u3067\u3001\u30a4\u30de\u30a4\u30c1IoT\u3063\u307d\u304f\u3042\u308a\u307e\u305b\u3093\u306d\u3002\n\u4eca\u5f8c\u306ffluentd\u306b\u30ed\u30b0\u3092\u8caf\u3081\u3066\u3001\u30e9\u30a4\u30d5\u30ed\u30b0\u3092\u53ef\u8996\u5316\u3057\u305f\u308a\u3068\u306a\u306b\u304b\u9762\u767d\u3044\u3053\u3068\u304c\u51fa\u6765\u306a\u3044\u304b\u8003\u3048\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["ESPr_Developer", "ESP-WROOM-02", "mqtt"]}