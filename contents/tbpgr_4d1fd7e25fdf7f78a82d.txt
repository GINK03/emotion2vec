{"context": " More than 1 year has passed since last update.\n\n\u30c6\u30b9\u30c8\u99c6\u52d5 Elixir ( Test Driven Elixir ) #elixir #tdd\n\n \u6982\u8981\nElixir \u3067\u30c6\u30b9\u30c8\u99c6\u52d5\u958b\u767a\u3092\u3057\u307e\u3059\n\n \u4ed5\u69d8\nFizzBuzz\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3059\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f Fizzbuzz.fizzbuzz(from, to)\nfrom, to \u3068\u3082\u306b Integer \u306e\u307f\u8a31\u5bb9\n\n\nInteger \u4ee5\u5916\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001RuntimeError \u3092\u6295\u3052\u308b\n\n\nfrom \u304b\u3089 to \u307e\u3067\u306e FizzBuzz \u306e\u7d50\u679c\u3092\u914d\u5217\u3068\u3057\u3066\u8fd4\u5374\n15 \u306e\u500d\u6570\u306f \"FizzBuzz\"\n3 \u306e\u500d\u6570\u306f \"Fizz\"\n5 \u306e\u500d\u6570\u306f \"Buzz\"\n3/5/15 \u306e\u500d\u6570\u4ee5\u5916\u306f \u5165\u529b\u6570\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u5374\n\n\n \u624b\u9806\n\n \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\nmix \u30b3\u30de\u30f3\u30c9\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f\n\nlib/fizzbuzz.ex\ntest/fizzbuzz_test.ex\n\n\u306e\u307f\u3092\u7de8\u96c6\u3057\u307e\u3059\u3002\n$ mix new fizzbuzz\n* creating README.md\n* creating .gitignore\n* creating mix.exs\n* creating config\n* creating config/config.exs\n* creating lib\n* creating lib/fizzbuzz.ex\n* creating test\n* creating test/test_helper.exs\n* creating test/fizzbuzz_test.exs\n\n\n \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u81ea\u52d5\u751f\u6210\u76f4\u5f8c\u306f\u3001\u7a7a\u306e\u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\u3068\u6210\u529f\u3059\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\n1\u4ef6\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3059\u3002\n$ mix test\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n.\n\nFinished in 0.04 seconds (0.04s on load, 0.00s on tests)\n1 tests, 0 failures\n\n\n \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff1a\u6570\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u5374\u3059\u308b\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\n\ntest/fizzbuzz_test.exs\n\ndefmodule FizzbuzzTest do\n  use ExUnit.Case\n\n  test \"only other numbers\" do\n    assert Fizzbuzz.fizzbuzz(1, 2) ==  [1, 2]\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n$ mix test --trace\n\nFizzbuzzTest\n  * only other numbers (7.0ms)\n\n  1) test only other numbers (FizzbuzzTest)\n     test/fizzbuzz_test.exs:4\n     ** (UndefinedFunctionError) undefined function: Fizzbuzz.fizzbuzz/2\n     stacktrace:\n       (fizzbuzz) Fizzbuzz.fizzbuzz(1, 2)\n       test/fizzbuzz_test.exs:5\n\n\n\nFinished in 0.03 seconds (0.03s on load, 0.00s on tests)\n1 tests, 1 failures\n\nRandomized with seed 708312\n\n\n \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1a\u6570\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u5374\u3059\u308b\u30b1\u30fc\u30b9\u3092\u5b9f\u88c5\n\nlib/fizzbuzz.ex\n\ndefmodule Fizzbuzz do\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(&1))\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * only other numbers (8.8ms)\n\n\nFinished in 0.04 seconds (0.03s on load, 0.01s on tests)\n1 tests, 0 failures\n\nRandomized with seed 229617\n\n\n \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff1aFizz \u306e\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\n\ntest/fizzbuzz_test.exs\n\ndefmodule FizzbuzzTest do\n  use ExUnit.Case\n\n  test \"only other numbers\" do\n    assert Fizzbuzz.fizzbuzz(1, 2) ==  [1, 2]\n  end\n\n  test \"only Fizz\" do\n    assert Fizzbuzz.fizzbuzz(3, 3) ==  [\"Fizz\"]\n    assert Fizzbuzz.fizzbuzz(6, 6) ==  [\"Fizz\"]\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n$ mix test --trace\n\nFizzbuzzTest\n  * only other numbers (7.5ms)\n  * only Fizz (5.6ms)\n\n  1) test only Fizz (FizzbuzzTest)\n     test/fizzbuzz_test.exs:8\n     Assertion with == failed\n     code: Fizzbuzz.fizzbuzz(3, 3) == [\"Fizz\"]\n     lhs:  [3]\n     rhs:  [\"Fizz\"]\n     stacktrace:\n       test/fizzbuzz_test.exs:9\n\n\n\nFinished in 0.05 seconds (0.04s on load, 0.01s on tests)\n2 tests, 1 failures\n\n\n\u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aFizz \u3092\u5b9f\u88c5\n\nlib/fizzbuzz.ex\n\ndefmodule Fizzbuzz do\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(num) when rem(num, 3) == 0  do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(num), do: num\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * only other numbers (8.3ms)\n  * only Fizz (1.4ms)\n\n\nFinished in 0.05 seconds (0.04s on load, 0.01s on tests)\n2 tests, 0 failures\n\nRandomized with seed 309998\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff1aBuzz \u306e\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\n\ntest/fizzbuzz_test.exs\n\ndefmodule FizzbuzzTest do\n  use ExUnit.Case\n\n  test \"only other numbers\" do\n    assert Fizzbuzz.fizzbuzz(1, 2) ==  [1, 2]\n  end\n\n  test \"only Fizz\" do\n    assert Fizzbuzz.fizzbuzz(3, 3) ==  [\"Fizz\"]\n    assert Fizzbuzz.fizzbuzz(6, 6) ==  [\"Fizz\"]\n  end\n\n  test \"only Buzz\" do\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n    assert Fizzbuzz.fizzbuzz(10, 10) ==  [\"Buzz\"]\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n$ mix test --trace\n\nFizzbuzzTest\n  * only Buzz (12.4ms)\n\n  1) test only Buzz (FizzbuzzTest)\n     test/fizzbuzz_test.exs:13\n     Assertion with == failed\n     code: Fizzbuzz.fizzbuzz(5, 5) == [\"Buzz\"]\n     lhs:  [5]\n     rhs:  [\"Buzz\"]\n     stacktrace:\n       test/fizzbuzz_test.exs:14\n\n  * only Fizz (0.06ms)\n  * only other numbers (0.2ms)\n\n\nFinished in 0.05 seconds (0.04s on load, 0.01s on tests)\n3 tests, 1 failures\n\nRandomized with seed 643604\n\n\n \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aBuzz \u3092\u5b9f\u88c5\n\nlib/fizzbuzz.ex\n\ndefmodule Fizzbuzz do\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(num) when rem(num, 5) == 0  do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 3) == 0  do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(num), do: num\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * only Fizz (9.4ms)\n  * only Buzz (0.04ms)\n  * only other numbers (0.02ms)\n\n\nFinished in 0.05 seconds (0.04s on load, 0.01s on tests)\n3 tests, 0 failures\n\nRandomized with seed 850025\n\n\n \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff1aFizzBuzz \u306e\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\n\ntest/fizzbuzz_test.exs\n\ndefmodule FizzbuzzTest do\n  use ExUnit.Case\n\n  test \"only other numbers\" do\n    assert Fizzbuzz.fizzbuzz(1, 2) ==  [1, 2]\n  end\n\n  test \"only Fizz\" do\n    assert Fizzbuzz.fizzbuzz(3, 3) ==  [\"Fizz\"]\n    assert Fizzbuzz.fizzbuzz(6, 6) ==  [\"Fizz\"]\n  end\n\n  test \"only Buzz\" do\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n  end\n\n  test \"only FizzBuzz\" do\n    assert Fizzbuzz.fizzbuzz(15, 15) ==  [\"FizzBuzz\"]\n    assert Fizzbuzz.fizzbuzz(30, 30) ==  [\"FizzBuzz\"]\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n$ mix test --trace\n\nFizzbuzzTest\n  * only Fizz (9.5ms)\n  * only Buzz (0.04ms)\n  * only FizzBuzz (3.0ms)\n\n  1) test only FizzBuzz (FizzbuzzTest)\n     test/fizzbuzz_test.exs:18\n     Assertion with == failed\n     code: Fizzbuzz.fizzbuzz(15, 15) == [\"FizzBuzz\"]\n     lhs:  [\"Buzz\"]\n     rhs:  [\"FizzBuzz\"]\n     stacktrace:\n       test/fizzbuzz_test.exs:19\n\n  * only other numbers (0.01ms)\n\n\nFinished in 0.06 seconds (0.05s on load, 0.01s on tests)\n4 tests, 1 failures\n\nRandomized with seed 335109\n\n\n \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aFizzBuzz \u3092\u5b9f\u88c5\n\nlib/fizzbuzz.ex\n\ndefmodule Fizzbuzz do\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(num) when rem(num, 15) == 0 do\n    \"FizzBuzz\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 5) == 0 do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(num), do: num\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * only Buzz (10.2ms)\n  * only Fizz (0.05ms)\n  * only other numbers (0.03ms)\n  * only FizzBuzz (0.3ms)\n\n\nFinished in 0.06 seconds (0.05s on load, 0.01s on tests)\n4 tests, 0 failures\n\nRandomized with seed 629014\n\n\n \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff1aFizz / Buzz / FizzBuzz / \u305d\u306e\u4ed6\u6df7\u5728\u306e\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\n\ntest/fizzbuzz_test.exs\n\ndefmodule FizzbuzzTest do\n  use ExUnit.Case\n\n  test \"only other numbers\" do\n    assert Fizzbuzz.fizzbuzz(1, 2) ==  [1, 2]\n  end\n\n  test \"only Fizz\" do\n    assert Fizzbuzz.fizzbuzz(3, 3) ==  [\"Fizz\"]\n    assert Fizzbuzz.fizzbuzz(6, 6) ==  [\"Fizz\"]\n  end\n\n  test \"only Buzz\" do\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n  end\n\n  test \"only FizzBuzz\" do\n    assert Fizzbuzz.fizzbuzz(15, 15) ==  [\"FizzBuzz\"]\n    assert Fizzbuzz.fizzbuzz(30, 30) ==  [\"FizzBuzz\"]\n  end\n\n  test \"mix Fizz / Buzz / FizzBuzz / Other\" do\n    assert Fizzbuzz.fizzbuzz(1, 30) ==  [\n      1, 2, \"Fizz\", 4, \"Buzz\",\n      \"Fizz\", 7, 8, \"Fizz\", \"Buzz\",\n      11, \"Fizz\", 13, 14, \"FizzBuzz\",\n      16, 17, \"Fizz\", 19, \"Buzz\",\n      \"Fizz\", 22, 23, \"Fizz\", \"Buzz\",\n      26, \"Fizz\", 28, 29, \"FizzBuzz\"\n    ]\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * only Buzz (9.9ms)\n  * only Fizz (0.04ms)\n  * only other numbers (0.03ms)\n  * only FizzBuzz (0.09ms)\n  * mix Fizz / Buzz / FizzBuzz / Other (0.03ms)\n\n\nFinished in 0.06 seconds (0.05s on load, 0.01s on tests)\n5 tests, 0 failures\n\nRandomized with seed 572980\n\n\n \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff1afrom \u306b\u4e0d\u6b63\u306a\u5f15\u6570( Integer \u4ee5\u5916)\u3092\u6307\u5b9a\u3059\u308b\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\n\ntest/fizzbuzz_test.exs\n\ndefmodule FizzbuzzTest do\n  use ExUnit.Case\n\n  test \"only other numbers\" do\n    assert Fizzbuzz.fizzbuzz(1, 2) ==  [1, 2]\n  end\n\n  test \"only Fizz\" do\n    assert Fizzbuzz.fizzbuzz(3, 3) ==  [\"Fizz\"]\n    assert Fizzbuzz.fizzbuzz(6, 6) ==  [\"Fizz\"]\n  end\n\n  test \"only Buzz\" do\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n  end\n\n  test \"only FizzBuzz\" do\n    assert Fizzbuzz.fizzbuzz(15, 15) ==  [\"FizzBuzz\"]\n    assert Fizzbuzz.fizzbuzz(30, 30) ==  [\"FizzBuzz\"]\n  end\n\n  test \"mix Fizz / Buzz / FizzBuzz / Other\" do\n    expected = [\n      1, 2, \"Fizz\", 4, \"Buzz\",\n      \"Fizz\", 7, 8, \"Fizz\", \"Buzz\",\n      11, \"Fizz\", 13, 14, \"FizzBuzz\",\n      16, 17, \"Fizz\", 19, \"Buzz\",\n      \"Fizz\", 22, 23, \"Fizz\", \"Buzz\",\n      26, \"Fizz\", 28, 29, \"FizzBuzz\"\n    ]\n    assert Fizzbuzz.fizzbuzz(1, 30) == expected\n  end\n\n  test \"from is not integer\" do\n    assert_raise RuntimeError, \"invalid argument\", fn ->\n      Fizzbuzz.fizzbuzz(\"1\", 15)\n    end\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n$ mix test --trace\n\nFizzbuzzTest\n  * mix Fizz / Buzz / FizzBuzz / Other (9.0ms)\n  * only Buzz (1.2ms)\n  * from is not integer (10.1ms)\n\n  1) test from is not integer (FizzbuzzTest)\n     test/fizzbuzz_test.exs:35\n     Expected exception RuntimeError but got Protocol.UndefinedError (protocol Range.Iterator not implemented for \"1\")\n     stacktrace:\n       test/fizzbuzz_test.exs:36\n\n  * only other numbers (0.03ms)\n  * only Fizz (0.1ms)\n  * only FizzBuzz (0.02ms)\n\n\nFinished in 0.09 seconds (0.07s on load, 0.02s on tests)\n6 tests, 1 failures\n\nRandomized with seed 505334\n\n\n \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1afrom \u306b\u4e0d\u6b63\u306a\u5f15\u6570( Integer \u4ee5\u5916)\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u3001RuntimeError \u3092\u6295\u3052\u308b\u3088\u3046\u306b\u5b9f\u88c5\n\nlib/fizzbuzz.ex\n\ndefmodule Fizzbuzz do\n  def fizzbuzz(from, to) when is_integer(from) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  def fizzbuzz(_from, _to) do\n    raise \"invalid argument\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 15) == 0 do\n    \"FizzBuzz\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 5) == 0 do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(num), do: num\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * only other numbers (8.5ms)\n  * only FizzBuzz (1.4ms)\n  * from is not integer (2.7ms)\n  * only Fizz (0.07ms)\n  * mix Fizz / Buzz / FizzBuzz / Other (0.02ms)\n  * only Buzz (0.08ms)\n\n\nFinished in 0.07 seconds (0.06s on load, 0.01s on tests)\n6 tests, 0 failures\n\nRandomized with seed 92177\n\n\n \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff1ato \u306b\u4e0d\u6b63\u306a\u5f15\u6570( Integer \u4ee5\u5916)\u3092\u6307\u5b9a\u3059\u308b\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\n\ntest/fizzbuzz_test.exs\n\ndefmodule FizzbuzzTest do\n  use ExUnit.Case\n\n  test \"only other numbers\" do\n    assert Fizzbuzz.fizzbuzz(1, 2) ==  [1, 2]\n  end\n\n  test \"only Fizz\" do\n    assert Fizzbuzz.fizzbuzz(3, 3) ==  [\"Fizz\"]\n    assert Fizzbuzz.fizzbuzz(6, 6) ==  [\"Fizz\"]\n  end\n\n  test \"only Buzz\" do\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n  end\n\n  test \"only FizzBuzz\" do\n    assert Fizzbuzz.fizzbuzz(15, 15) ==  [\"FizzBuzz\"]\n    assert Fizzbuzz.fizzbuzz(30, 30) ==  [\"FizzBuzz\"]\n  end\n\n  test \"mix Fizz / Buzz / FizzBuzz / Other\" do\n    expected = [\n      1, 2, \"Fizz\", 4, \"Buzz\",\n      \"Fizz\", 7, 8, \"Fizz\", \"Buzz\",\n      11, \"Fizz\", 13, 14, \"FizzBuzz\",\n      16, 17, \"Fizz\", 19, \"Buzz\",\n      \"Fizz\", 22, 23, \"Fizz\", \"Buzz\",\n      26, \"Fizz\", 28, 29, \"FizzBuzz\"\n    ]\n    assert Fizzbuzz.fizzbuzz(1, 30) == expected\n  end\n\n  test \"from is not integer\" do\n    assert_raise RuntimeError, \"invalid argument\", fn ->\n      Fizzbuzz.fizzbuzz(\"1\", 15)\n    end\n  end\n\n  test \"to is not integer\" do\n    assert_raise RuntimeError, \"invalid argument\", fn ->\n      Fizzbuzz.fizzbuzz(1, \"15\")\n    end\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n$ mix test --trace\n\nFizzbuzzTest\n  * only other numbers (8.0ms)\n  * from is not integer (5.2ms)\n  * only FizzBuzz (0.03ms)\n  * only Fizz (0.04ms)\n  * only Buzz (0.04ms)\n  * mix Fizz / Buzz / FizzBuzz / Other (0.02ms)\n  * to is not integer (4.9ms)\n\n  1) test to is not integer (FizzbuzzTest)\n     test/fizzbuzz_test.exs:41\n     Expected exception RuntimeError but got FunctionClauseError (no function clause matching in Range.Iterator.Integer.next/2)\n     stacktrace:\n       test/fizzbuzz_test.exs:42\n\n\n\nFinished in 0.09 seconds (0.07s on load, 0.02s on tests)\n7 tests, 1 failures\n\nRandomized with seed 685563\n\n\n \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1ato \u306b\u4e0d\u6b63\u306a\u5f15\u6570( Integer \u4ee5\u5916)\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u3001RuntimeError \u3092\u6295\u3052\u308b\u3088\u3046\u306b\u5b9f\u88c5\n\nlib/fizzbuzz.ex\n\ndefmodule Fizzbuzz do\n  def fizzbuzz(from, to) when is_integer(from) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  def fizzbuzz(_from, _to) do\n    raise \"invalid argument\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 15) == 0 do\n    \"FizzBuzz\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 5) == 0 do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(num), do: num\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * to is not integer (9.2ms)\n  * from is not integer (0.06ms)\n  * only other numbers (4.8ms)\n  * mix Fizz / Buzz / FizzBuzz / Other (0.03ms)\n  * only FizzBuzz (0.2ms)\n  * only Buzz (0.02ms)\n  * only Fizz (0.08ms)\n\n\nFinished in 0.09 seconds (0.08s on load, 0.01s on tests)\n7 tests, 0 failures\n\nRandomized with seed 201398\n\n\n \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1a\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\n\u5404\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u95a2\u6570\u306e\u51e6\u7406\u304c\u77ed\u3044\u306e\u30671\u884c\u3067\u8a18\u8ff0\u3059\u308b\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3059\n\nlib/fizzbuzz.ex\n\ndefmodule Fizzbuzz do\n  def fizzbuzz(from, to) when is_integer(from) and is_integer(to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  def fizzbuzz(_from, _to), do: raise \"invalid argument\"\n  defp fizzbuzz(num) when rem(num, 15) == 0, do: \"FizzBuzz\"\n  defp fizzbuzz(num) when rem(num, 5) == 0, do: \"Buzz\"\n  defp fizzbuzz(num) when rem(num, 3) == 0, do: \"Fizz\"\n  defp fizzbuzz(num), do: num\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\u3002\n\u30c6\u30b9\u30c8\u3092\u58ca\u3055\u305a\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * to is not integer (7.5ms)\n  * only Buzz (4.1ms)\n  * only Fizz (0.2ms)\n  * from is not integer (0.1ms)\n  * only FizzBuzz (0.2ms)\n  * only other numbers (0.02ms)\n  * mix Fizz / Buzz / FizzBuzz / Other (0.09ms)\n\n\nFinished in 0.07 seconds (0.06s on load, 0.01s on tests)\n7 tests, 0 failures\n\nRandomized with seed 797885\n\n\n \u5b8c\u6210\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u5b9f\u884c\n$ mix run -e 'IO.inspect Fizzbuzz.fizzbuzz(1, 30)'\n[1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14,\n \"FizzBuzz\", 16, 17, \"Fizz\", 19, \"Buzz\", \"Fizz\", 22, 23, \"Fizz\", \"Buzz\", 26,\n \"Fizz\", 28, 29, \"FizzBuzz\"]\n\n$ mix run -e 'IO.inspect Fizzbuzz.fizzbuzz(\"1\", 30)'\n** (RuntimeError) invalid argument\n    (fizzbuzz) lib/fizzbuzz.ex:6: Fizzbuzz.fizzbuzz/2\n    (stdlib) erl_eval.erl:657: :erl_eval.do_apply/6\n    (stdlib) erl_eval.erl:865: :erl_eval.expr_list/6\n    (stdlib) erl_eval.erl:407: :erl_eval.expr/5\n    (elixir) src/elixir.erl:175: :elixir.erl_eval/3\n    (elixir) src/elixir.erl:163: :elixir.eval_forms/4\n    (elixir) lib/code.ex:140: Code.eval_string/3\n    (elixir) lib/enum.ex:537: Enum.\"-each/2-lists^foreach/1-0-\"/2\n\n$ mix run -e 'IO.inspect Fizzbuzz.fizzbuzz(1, \"30\")'\n** (RuntimeError) invalid argument\n    (fizzbuzz) lib/fizzbuzz.ex:6: Fizzbuzz.fizzbuzz/2\n    (stdlib) erl_eval.erl:657: :erl_eval.do_apply/6\n    (stdlib) erl_eval.erl:865: :erl_eval.expr_list/6\n    (stdlib) erl_eval.erl:407: :erl_eval.expr/5\n    (elixir) src/elixir.erl:175: :elixir.erl_eval/3\n    (elixir) src/elixir.erl:163: :elixir.eval_forms/4\n    (elixir) lib/code.ex:140: Code.eval_string/3\n    (elixir) lib/enum.ex:537: Enum.\"-each/2-lists^foreach/1-0-\"/2\n\n$ mix run -e 'IO.inspect Fizzbuzz.fizzbuzz(15, 1)'\n[\"FizzBuzz\", 14, 13, \"Fizz\", 11, \"Buzz\", \"Fizz\", 8, 7, \"Fizz\", \"Buzz\", 4, \"Fizz\", 2, 1]\n\n\n Complete!\n# \u30c6\u30b9\u30c8\u99c6\u52d5 Elixir ( Test Driven Elixir ) #elixir #tdd\n## <i class=\"fa fa-cubes\" style=\"font-size:1em;\"></i> \u6982\u8981\nElixir \u3067\u30c6\u30b9\u30c8\u99c6\u52d5\u958b\u767a\u3092\u3057\u307e\u3059\n## <i class=\"fa fa-file-o\" style=\"font-size:1em;\"></i> \u4ed5\u69d8\nFizzBuzz\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3059\n\n* \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f Fizzbuzz.fizzbuzz(from, to)\n* from, to \u3068\u3082\u306b Integer \u306e\u307f\u8a31\u5bb9\n    * Integer \u4ee5\u5916\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001RuntimeError \u3092\u6295\u3052\u308b\n* from \u304b\u3089 to \u307e\u3067\u306e FizzBuzz \u306e\u7d50\u679c\u3092\u914d\u5217\u3068\u3057\u3066\u8fd4\u5374\n* 15 \u306e\u500d\u6570\u306f \"FizzBuzz\"\n* 3 \u306e\u500d\u6570\u306f \"Fizz\"\n* 5 \u306e\u500d\u6570\u306f \"Buzz\"\n* 3/5/15 \u306e\u500d\u6570\u4ee5\u5916\u306f \u5165\u529b\u6570\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u5374\n\n## <i class=\"fa fa-files-o\" style=\"font-size:1em;\"></i> \u624b\u9806\n### <i class=\"fa fa-plus-square\" style=\"font-size:1em;\"></i> \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n`mix` \u30b3\u30de\u30f3\u30c9\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f\n\n* lib/fizzbuzz.ex\n* test/fizzbuzz_test.ex\n\n\u306e\u307f\u3092\u7de8\u96c6\u3057\u307e\u3059\u3002\n\n~~~bash\n$ mix new fizzbuzz\n* creating README.md\n* creating .gitignore\n* creating mix.exs\n* creating config\n* creating config/config.exs\n* creating lib\n* creating lib/fizzbuzz.ex\n* creating test\n* creating test/test_helper.exs\n* creating test/fizzbuzz_test.exs\n~~~\n\n### <i class=\"fa fa-play\" style=\"font-size:1em;\"></i> \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\n\u81ea\u52d5\u751f\u6210\u76f4\u5f8c\u306f\u3001\u7a7a\u306e\u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\u3068\u6210\u529f\u3059\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\n1\u4ef6\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3059\u3002\n\n~~~bash\n$ mix test\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n.\n\nFinished in 0.04 seconds (0.04s on load, 0.00s on tests)\n1 tests, 0 failures\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff1a\u6570\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u5374\u3059\u308b\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\n\n* test/fizzbuzz_test.exs\n\n~~~elixir\ndefmodule FizzbuzzTest do\n  use ExUnit.Case\n\n  test \"only other numbers\" do\n    assert Fizzbuzz.fizzbuzz(1, 2) ==  [1, 2]\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n~~~bash\n$ mix test --trace\n\nFizzbuzzTest\n  * only other numbers (7.0ms)\n\n  1) test only other numbers (FizzbuzzTest)\n     test/fizzbuzz_test.exs:4\n     ** (UndefinedFunctionError) undefined function: Fizzbuzz.fizzbuzz/2\n     stacktrace:\n       (fizzbuzz) Fizzbuzz.fizzbuzz(1, 2)\n       test/fizzbuzz_test.exs:5\n\n\n\nFinished in 0.03 seconds (0.03s on load, 0.00s on tests)\n1 tests, 1 failures\n\nRandomized with seed 708312\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1a\u6570\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u5374\u3059\u308b\u30b1\u30fc\u30b9\u3092\u5b9f\u88c5\n\n* lib/fizzbuzz.ex\n\n~~~elixir\ndefmodule Fizzbuzz do\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(&1))\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n~~~bash\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * only other numbers (8.8ms)\n\n\nFinished in 0.04 seconds (0.03s on load, 0.01s on tests)\n1 tests, 0 failures\n\nRandomized with seed 229617\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff1aFizz \u306e\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\n\n* test/fizzbuzz_test.exs\n\n~~~\ndefmodule FizzbuzzTest do\n  use ExUnit.Case\n\n  test \"only other numbers\" do\n    assert Fizzbuzz.fizzbuzz(1, 2) ==  [1, 2]\n  end\n\n  test \"only Fizz\" do\n    assert Fizzbuzz.fizzbuzz(3, 3) ==  [\"Fizz\"]\n    assert Fizzbuzz.fizzbuzz(6, 6) ==  [\"Fizz\"]\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n~~~bash\n$ mix test --trace\n\nFizzbuzzTest\n  * only other numbers (7.5ms)\n  * only Fizz (5.6ms)\n\n  1) test only Fizz (FizzbuzzTest)\n     test/fizzbuzz_test.exs:8\n     Assertion with == failed\n     code: Fizzbuzz.fizzbuzz(3, 3) == [\"Fizz\"]\n     lhs:  [3]\n     rhs:  [\"Fizz\"]\n     stacktrace:\n       test/fizzbuzz_test.exs:9\n\n\n\nFinished in 0.05 seconds (0.04s on load, 0.01s on tests)\n2 tests, 1 failures\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i>\u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aFizz \u3092\u5b9f\u88c5\n\n* lib/fizzbuzz.ex\n\n~~~elixir\ndefmodule Fizzbuzz do\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(num) when rem(num, 3) == 0  do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(num), do: num\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n~~~bash\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * only other numbers (8.3ms)\n  * only Fizz (1.4ms)\n\n\nFinished in 0.05 seconds (0.04s on load, 0.01s on tests)\n2 tests, 0 failures\n\nRandomized with seed 309998\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i>\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff1aBuzz \u306e\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\n\n* test/fizzbuzz_test.exs\n\n~~~\ndefmodule FizzbuzzTest do\n  use ExUnit.Case\n\n  test \"only other numbers\" do\n    assert Fizzbuzz.fizzbuzz(1, 2) ==  [1, 2]\n  end\n\n  test \"only Fizz\" do\n    assert Fizzbuzz.fizzbuzz(3, 3) ==  [\"Fizz\"]\n    assert Fizzbuzz.fizzbuzz(6, 6) ==  [\"Fizz\"]\n  end\n\n  test \"only Buzz\" do\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n    assert Fizzbuzz.fizzbuzz(10, 10) ==  [\"Buzz\"]\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n~~~bash\n$ mix test --trace\n\nFizzbuzzTest\n  * only Buzz (12.4ms)\n\n  1) test only Buzz (FizzbuzzTest)\n     test/fizzbuzz_test.exs:13\n     Assertion with == failed\n     code: Fizzbuzz.fizzbuzz(5, 5) == [\"Buzz\"]\n     lhs:  [5]\n     rhs:  [\"Buzz\"]\n     stacktrace:\n       test/fizzbuzz_test.exs:14\n\n  * only Fizz (0.06ms)\n  * only other numbers (0.2ms)\n\n\nFinished in 0.05 seconds (0.04s on load, 0.01s on tests)\n3 tests, 1 failures\n\nRandomized with seed 643604\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aBuzz \u3092\u5b9f\u88c5\n\n* lib/fizzbuzz.ex\n\n~~~elixir\ndefmodule Fizzbuzz do\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(num) when rem(num, 5) == 0  do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 3) == 0  do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(num), do: num\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n~~~bash\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * only Fizz (9.4ms)\n  * only Buzz (0.04ms)\n  * only other numbers (0.02ms)\n\n\nFinished in 0.05 seconds (0.04s on load, 0.01s on tests)\n3 tests, 0 failures\n\nRandomized with seed 850025\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff1aFizzBuzz \u306e\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\n\n* test/fizzbuzz_test.exs\n\n~~~\ndefmodule FizzbuzzTest do\n  use ExUnit.Case\n\n  test \"only other numbers\" do\n    assert Fizzbuzz.fizzbuzz(1, 2) ==  [1, 2]\n  end\n\n  test \"only Fizz\" do\n    assert Fizzbuzz.fizzbuzz(3, 3) ==  [\"Fizz\"]\n    assert Fizzbuzz.fizzbuzz(6, 6) ==  [\"Fizz\"]\n  end\n\n  test \"only Buzz\" do\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n  end\n\n  test \"only FizzBuzz\" do\n    assert Fizzbuzz.fizzbuzz(15, 15) ==  [\"FizzBuzz\"]\n    assert Fizzbuzz.fizzbuzz(30, 30) ==  [\"FizzBuzz\"]\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n~~~bash\n$ mix test --trace\n\nFizzbuzzTest\n  * only Fizz (9.5ms)\n  * only Buzz (0.04ms)\n  * only FizzBuzz (3.0ms)\n\n  1) test only FizzBuzz (FizzbuzzTest)\n     test/fizzbuzz_test.exs:18\n     Assertion with == failed\n     code: Fizzbuzz.fizzbuzz(15, 15) == [\"FizzBuzz\"]\n     lhs:  [\"Buzz\"]\n     rhs:  [\"FizzBuzz\"]\n     stacktrace:\n       test/fizzbuzz_test.exs:19\n\n  * only other numbers (0.01ms)\n\n\nFinished in 0.06 seconds (0.05s on load, 0.01s on tests)\n4 tests, 1 failures\n\nRandomized with seed 335109\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aFizzBuzz \u3092\u5b9f\u88c5\n\n* lib/fizzbuzz.ex\n\n~~~elixir\ndefmodule Fizzbuzz do\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(num) when rem(num, 15) == 0 do\n    \"FizzBuzz\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 5) == 0 do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(num), do: num\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n~~~bash\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * only Buzz (10.2ms)\n  * only Fizz (0.05ms)\n  * only other numbers (0.03ms)\n  * only FizzBuzz (0.3ms)\n\n\nFinished in 0.06 seconds (0.05s on load, 0.01s on tests)\n4 tests, 0 failures\n\nRandomized with seed 629014\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff1aFizz / Buzz / FizzBuzz / \u305d\u306e\u4ed6\u6df7\u5728\u306e\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\n\n* test/fizzbuzz_test.exs\n\n~~~\ndefmodule FizzbuzzTest do\n  use ExUnit.Case\n\n  test \"only other numbers\" do\n    assert Fizzbuzz.fizzbuzz(1, 2) ==  [1, 2]\n  end\n\n  test \"only Fizz\" do\n    assert Fizzbuzz.fizzbuzz(3, 3) ==  [\"Fizz\"]\n    assert Fizzbuzz.fizzbuzz(6, 6) ==  [\"Fizz\"]\n  end\n\n  test \"only Buzz\" do\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n  end\n\n  test \"only FizzBuzz\" do\n    assert Fizzbuzz.fizzbuzz(15, 15) ==  [\"FizzBuzz\"]\n    assert Fizzbuzz.fizzbuzz(30, 30) ==  [\"FizzBuzz\"]\n  end\n\n  test \"mix Fizz / Buzz / FizzBuzz / Other\" do\n    assert Fizzbuzz.fizzbuzz(1, 30) ==  [\n      1, 2, \"Fizz\", 4, \"Buzz\",\n      \"Fizz\", 7, 8, \"Fizz\", \"Buzz\",\n      11, \"Fizz\", 13, 14, \"FizzBuzz\",\n      16, 17, \"Fizz\", 19, \"Buzz\",\n      \"Fizz\", 22, 23, \"Fizz\", \"Buzz\",\n      26, \"Fizz\", 28, 29, \"FizzBuzz\"\n    ]\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n~~~bash\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * only Buzz (9.9ms)\n  * only Fizz (0.04ms)\n  * only other numbers (0.03ms)\n  * only FizzBuzz (0.09ms)\n  * mix Fizz / Buzz / FizzBuzz / Other (0.03ms)\n\n\nFinished in 0.06 seconds (0.05s on load, 0.01s on tests)\n5 tests, 0 failures\n\nRandomized with seed 572980\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff1afrom \u306b\u4e0d\u6b63\u306a\u5f15\u6570( Integer \u4ee5\u5916)\u3092\u6307\u5b9a\u3059\u308b\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\n\n* test/fizzbuzz_test.exs\n\n~~~\ndefmodule FizzbuzzTest do\n  use ExUnit.Case\n\n  test \"only other numbers\" do\n    assert Fizzbuzz.fizzbuzz(1, 2) ==  [1, 2]\n  end\n\n  test \"only Fizz\" do\n    assert Fizzbuzz.fizzbuzz(3, 3) ==  [\"Fizz\"]\n    assert Fizzbuzz.fizzbuzz(6, 6) ==  [\"Fizz\"]\n  end\n\n  test \"only Buzz\" do\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n  end\n\n  test \"only FizzBuzz\" do\n    assert Fizzbuzz.fizzbuzz(15, 15) ==  [\"FizzBuzz\"]\n    assert Fizzbuzz.fizzbuzz(30, 30) ==  [\"FizzBuzz\"]\n  end\n\n  test \"mix Fizz / Buzz / FizzBuzz / Other\" do\n    expected = [\n      1, 2, \"Fizz\", 4, \"Buzz\",\n      \"Fizz\", 7, 8, \"Fizz\", \"Buzz\",\n      11, \"Fizz\", 13, 14, \"FizzBuzz\",\n      16, 17, \"Fizz\", 19, \"Buzz\",\n      \"Fizz\", 22, 23, \"Fizz\", \"Buzz\",\n      26, \"Fizz\", 28, 29, \"FizzBuzz\"\n    ]\n    assert Fizzbuzz.fizzbuzz(1, 30) == expected\n  end\n\n  test \"from is not integer\" do\n    assert_raise RuntimeError, \"invalid argument\", fn ->\n      Fizzbuzz.fizzbuzz(\"1\", 15)\n    end\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n~~~bash\n$ mix test --trace\n\nFizzbuzzTest\n  * mix Fizz / Buzz / FizzBuzz / Other (9.0ms)\n  * only Buzz (1.2ms)\n  * from is not integer (10.1ms)\n\n  1) test from is not integer (FizzbuzzTest)\n     test/fizzbuzz_test.exs:35\n     Expected exception RuntimeError but got Protocol.UndefinedError (protocol Range.Iterator not implemented for \"1\")\n     stacktrace:\n       test/fizzbuzz_test.exs:36\n\n  * only other numbers (0.03ms)\n  * only Fizz (0.1ms)\n  * only FizzBuzz (0.02ms)\n\n\nFinished in 0.09 seconds (0.07s on load, 0.02s on tests)\n6 tests, 1 failures\n\nRandomized with seed 505334\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1afrom \u306b\u4e0d\u6b63\u306a\u5f15\u6570( Integer \u4ee5\u5916)\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u3001RuntimeError \u3092\u6295\u3052\u308b\u3088\u3046\u306b\u5b9f\u88c5\n\n* lib/fizzbuzz.ex\n\n~~~elixir\ndefmodule Fizzbuzz do\n  def fizzbuzz(from, to) when is_integer(from) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  def fizzbuzz(_from, _to) do\n    raise \"invalid argument\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 15) == 0 do\n    \"FizzBuzz\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 5) == 0 do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(num), do: num\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n~~~bash\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * only other numbers (8.5ms)\n  * only FizzBuzz (1.4ms)\n  * from is not integer (2.7ms)\n  * only Fizz (0.07ms)\n  * mix Fizz / Buzz / FizzBuzz / Other (0.02ms)\n  * only Buzz (0.08ms)\n\n\nFinished in 0.07 seconds (0.06s on load, 0.01s on tests)\n6 tests, 0 failures\n\nRandomized with seed 92177\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff1ato \u306b\u4e0d\u6b63\u306a\u5f15\u6570( Integer \u4ee5\u5916)\u3092\u6307\u5b9a\u3059\u308b\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\n\n* test/fizzbuzz_test.exs\n\n~~~\ndefmodule FizzbuzzTest do\n  use ExUnit.Case\n\n  test \"only other numbers\" do\n    assert Fizzbuzz.fizzbuzz(1, 2) ==  [1, 2]\n  end\n\n  test \"only Fizz\" do\n    assert Fizzbuzz.fizzbuzz(3, 3) ==  [\"Fizz\"]\n    assert Fizzbuzz.fizzbuzz(6, 6) ==  [\"Fizz\"]\n  end\n\n  test \"only Buzz\" do\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n    assert Fizzbuzz.fizzbuzz(5, 5) ==  [\"Buzz\"]\n  end\n\n  test \"only FizzBuzz\" do\n    assert Fizzbuzz.fizzbuzz(15, 15) ==  [\"FizzBuzz\"]\n    assert Fizzbuzz.fizzbuzz(30, 30) ==  [\"FizzBuzz\"]\n  end\n\n  test \"mix Fizz / Buzz / FizzBuzz / Other\" do\n    expected = [\n      1, 2, \"Fizz\", 4, \"Buzz\",\n      \"Fizz\", 7, 8, \"Fizz\", \"Buzz\",\n      11, \"Fizz\", 13, 14, \"FizzBuzz\",\n      16, 17, \"Fizz\", 19, \"Buzz\",\n      \"Fizz\", 22, 23, \"Fizz\", \"Buzz\",\n      26, \"Fizz\", 28, 29, \"FizzBuzz\"\n    ]\n    assert Fizzbuzz.fizzbuzz(1, 30) == expected\n  end\n\n  test \"from is not integer\" do\n    assert_raise RuntimeError, \"invalid argument\", fn ->\n      Fizzbuzz.fizzbuzz(\"1\", 15)\n    end\n  end\n\n  test \"to is not integer\" do\n    assert_raise RuntimeError, \"invalid argument\", fn ->\n      Fizzbuzz.fizzbuzz(1, \"15\")\n    end\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n~~~bash\n$ mix test --trace\n\nFizzbuzzTest\n  * only other numbers (8.0ms)\n  * from is not integer (5.2ms)\n  * only FizzBuzz (0.03ms)\n  * only Fizz (0.04ms)\n  * only Buzz (0.04ms)\n  * mix Fizz / Buzz / FizzBuzz / Other (0.02ms)\n  * to is not integer (4.9ms)\n\n  1) test to is not integer (FizzbuzzTest)\n     test/fizzbuzz_test.exs:41\n     Expected exception RuntimeError but got FunctionClauseError (no function clause matching in Range.Iterator.Integer.next/2)\n     stacktrace:\n       test/fizzbuzz_test.exs:42\n\n\n\nFinished in 0.09 seconds (0.07s on load, 0.02s on tests)\n7 tests, 1 failures\n\nRandomized with seed 685563\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1ato \u306b\u4e0d\u6b63\u306a\u5f15\u6570( Integer \u4ee5\u5916)\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u3001RuntimeError \u3092\u6295\u3052\u308b\u3088\u3046\u306b\u5b9f\u88c5\n\n* lib/fizzbuzz.ex\n\n~~~elixir\ndefmodule Fizzbuzz do\n  def fizzbuzz(from, to) when is_integer(from) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  def fizzbuzz(_from, _to) do\n    raise \"invalid argument\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 15) == 0 do\n    \"FizzBuzz\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 5) == 0 do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(num) when rem(num, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(num), do: num\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n~~~bash\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * to is not integer (9.2ms)\n  * from is not integer (0.06ms)\n  * only other numbers (4.8ms)\n  * mix Fizz / Buzz / FizzBuzz / Other (0.03ms)\n  * only FizzBuzz (0.2ms)\n  * only Buzz (0.02ms)\n  * only Fizz (0.08ms)\n\n\nFinished in 0.09 seconds (0.08s on load, 0.01s on tests)\n7 tests, 0 failures\n\nRandomized with seed 201398\n~~~\n\n### <i class=\"fa fa-repeat\" style=\"font-size:1em;\"></i> \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1a\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\n\u5404\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u95a2\u6570\u306e\u51e6\u7406\u304c\u77ed\u3044\u306e\u30671\u884c\u3067\u8a18\u8ff0\u3059\u308b\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3059\n\n* lib/fizzbuzz.ex\n\n~~~elixir\ndefmodule Fizzbuzz do\n  def fizzbuzz(from, to) when is_integer(from) and is_integer(to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  def fizzbuzz(_from, _to), do: raise \"invalid argument\"\n  defp fizzbuzz(num) when rem(num, 15) == 0, do: \"FizzBuzz\"\n  defp fizzbuzz(num) when rem(num, 5) == 0, do: \"Buzz\"\n  defp fizzbuzz(num) when rem(num, 3) == 0, do: \"Fizz\"\n  defp fizzbuzz(num), do: num\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\u3002\n\u30c6\u30b9\u30c8\u3092\u58ca\u3055\u305a\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\n~~~bash\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * to is not integer (7.5ms)\n  * only Buzz (4.1ms)\n  * only Fizz (0.2ms)\n  * from is not integer (0.1ms)\n  * only FizzBuzz (0.2ms)\n  * only other numbers (0.02ms)\n  * mix Fizz / Buzz / FizzBuzz / Other (0.09ms)\n\n\nFinished in 0.07 seconds (0.06s on load, 0.01s on tests)\n7 tests, 0 failures\n\nRandomized with seed 797885\n~~~\n\n### <i class=\"fa fa-play\" style=\"font-size:1em;\"></i> \u5b8c\u6210\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u5b9f\u884c\n\n~~~bash\n$ mix run -e 'IO.inspect Fizzbuzz.fizzbuzz(1, 30)'\n[1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14,\n \"FizzBuzz\", 16, 17, \"Fizz\", 19, \"Buzz\", \"Fizz\", 22, 23, \"Fizz\", \"Buzz\", 26,\n \"Fizz\", 28, 29, \"FizzBuzz\"]\n\n$ mix run -e 'IO.inspect Fizzbuzz.fizzbuzz(\"1\", 30)'\n** (RuntimeError) invalid argument\n    (fizzbuzz) lib/fizzbuzz.ex:6: Fizzbuzz.fizzbuzz/2\n    (stdlib) erl_eval.erl:657: :erl_eval.do_apply/6\n    (stdlib) erl_eval.erl:865: :erl_eval.expr_list/6\n    (stdlib) erl_eval.erl:407: :erl_eval.expr/5\n    (elixir) src/elixir.erl:175: :elixir.erl_eval/3\n    (elixir) src/elixir.erl:163: :elixir.eval_forms/4\n    (elixir) lib/code.ex:140: Code.eval_string/3\n    (elixir) lib/enum.ex:537: Enum.\"-each/2-lists^foreach/1-0-\"/2\n\n$ mix run -e 'IO.inspect Fizzbuzz.fizzbuzz(1, \"30\")'\n** (RuntimeError) invalid argument\n    (fizzbuzz) lib/fizzbuzz.ex:6: Fizzbuzz.fizzbuzz/2\n    (stdlib) erl_eval.erl:657: :erl_eval.do_apply/6\n    (stdlib) erl_eval.erl:865: :erl_eval.expr_list/6\n    (stdlib) erl_eval.erl:407: :erl_eval.expr/5\n    (elixir) src/elixir.erl:175: :elixir.erl_eval/3\n    (elixir) src/elixir.erl:163: :elixir.eval_forms/4\n    (elixir) lib/code.ex:140: Code.eval_string/3\n    (elixir) lib/enum.ex:537: Enum.\"-each/2-lists^foreach/1-0-\"/2\n\n$ mix run -e 'IO.inspect Fizzbuzz.fizzbuzz(15, 1)'\n[\"FizzBuzz\", 14, 13, \"Fizz\", 11, \"Buzz\", \"Fizz\", 8, 7, \"Fizz\", \"Buzz\", 4, \"Fizz\", 2, 1]\n~~~\n\n## <i class=\"fa fa-trophy\" style=\"font-size:1em;\"></i> Complete!\n", "tags": ["Elixir", "TDD"]}