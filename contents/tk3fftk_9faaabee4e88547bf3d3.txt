{"context": " More than 1 year has passed since last update.Java8\u306eStream API\u3001\u4f7f\u3063\u3066\u307f\u305f\u304f\u3066\u30b0\u30b0\u3063\u305f\u3089\u8272\u3005\u51fa\u3066\u304d\u307e\u3059\u304c\u3001\n\u4eca\u56de\u306ffor\u6587\u3084\u62e1\u5f35for\u6587\u3092Stream\u306b\u66f8\u304d\u63db\u3048\u308b\u3060\u3051\u306e\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3055\u3089\u306b\u3001\u3053\u308c\u3060\u3051\u3067\u306f\u7279\u306b\u304a\u3044\u3057\u3044\u90e8\u5206\u304c\u8584\u3044\u306e\u3067\u4e26\u5217\u5316\u3059\u308b\u65b9\u6cd5\u3082\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nfor\u6587\nfor(int i=0;i<100;i++){\n  System.out.println(i);\n}\n\n\u2193\nIntStream intStream = IntStream.range(0, 100);\nintStream.forEach(i -> {\n  System.out.println(i);\n});\n\n\n\u62e1\u5f35for\u6587 (for-each)\n// List\nList<String> list = Arrays.asList(\"a\",\"b\",\"c\");\nfor(String s: list){\n  System.out.println(s);\n}\n\n// \u914d\u5217\nString[] array = {\"a\", \"b\", \"c\"};\nfor(String s: array){\n  System.out.println(s);\n}\n\n\u2193\n// List\nList<String> list = Arrays.asList(\"a\",\"b\",\"c\");\nStream<String> listStream = list.stream();\nlistStream.forEach(s -> {\n  System.out.println(s);\n});\n\n// \u914d\u5217\nString[] array = {\"a\", \"b\", \"c\"};\n// \u3069\u3061\u3089\u3082\u51fa\u6765\u308b\u3082\u306e\u306f\u540c\u3058\nStream<String> arrayStream01 = Arrays.stream(array);\nStream<String> arrayStream02 = Stream.of(array);\n\narrayStream01.forEach(s -> {\n  System.out.println(s);\n});\n\narrayStream02.forEach(s -> {\n  System.out.println(s);\n});\n\n\n\n\u4e26\u5217\u5316\n\n\u4f5c\u6210\u3057\u305fStream\u3067.parallel()\u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\n\u305f\u3060\u3057\u3001\u9806\u756a\u306f\u4fdd\u8a3c\u3055\u308c\u306a\u3044(\u9806\u756a\u306b\u5b9f\u884c\u3059\u308bforEachOrdered()\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u304c\u4e26\u5217\u5316\u306e\u610f\u5473\u304c\u2026)\n\n\n(\u8ffd\u8a18)Stream\u5143\u3084\u51e6\u7406\u306b\u3088\u3063\u3066\u306fparallel()+forEachOrdered()\u306e\u65b9\u304c\u65e9\u3044\u305d\u3046\u3067\u3059\n\n\n\nIntStream intStream = IntStream.range(0, 100).parallel();\nStream<String> listStream = list.stream().parallel();\n\n\n\u304a\u308f\u308a\u306b\nfor\u6587\u3092\u5358\u7d14\u306bStream API\u3092\u4f7f\u7528\u3057\u3066\u7f6e\u304d\u63db\u3048\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\n\u3053\u308c\u3089\u3092\u4f7f\u3063\u3066\u307f\u3064\u3064\u3001\u3084\u308a\u305f\u3044\u3053\u3068\u30d9\u30fc\u30b9\u3067\u4e2d\u9593\u51e6\u7406\u3068\u304b\u672b\u7aef\u51e6\u7406\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u8abf\u3079\u3066\u3044\u3051\u3070\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u500b\u4eba\u7684\u306b\u306f\u4e26\u5217\u51e6\u7406\u304c\u30e1\u30bd\u30c3\u30c9\u4e00\u3064\u3067\u96e3\u3057\u3044\u3053\u3068\u3092\u8003\u3048\u305a\u306b\u6c17\u8efd\u306b\u4f7f\u3048\u308b\u306e\u304c\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n\n\u53c2\u8003\n\nJava Stream\u30e1\u30e2(Hishidama's Java8 Stream Memo) \nStream API\u306e\u4e3b\u306a\u30e1\u30bd\u30c3\u30c9\u3068\u51e6\u7406\u7d50\u679c\u306eOptional\u30af\u30e9\u30b9\u306e\u4f7f\u3044\u65b9\n\nJava8\u306eStream API\u3001\u4f7f\u3063\u3066\u307f\u305f\u304f\u3066\u30b0\u30b0\u3063\u305f\u3089\u8272\u3005\u51fa\u3066\u304d\u307e\u3059\u304c\u3001\n\u4eca\u56de\u306ffor\u6587\u3084\u62e1\u5f35for\u6587\u3092Stream\u306b\u66f8\u304d\u63db\u3048\u308b\u3060\u3051\u306e\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3055\u3089\u306b\u3001\u3053\u308c\u3060\u3051\u3067\u306f\u7279\u306b\u304a\u3044\u3057\u3044\u90e8\u5206\u304c\u8584\u3044\u306e\u3067\u4e26\u5217\u5316\u3059\u308b\u65b9\u6cd5\u3082\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n# for\u6587\n```java\nfor(int i=0;i<100;i++){\n  System.out.println(i);\n}\n```\n\n\u2193\n\n``` java\nIntStream intStream = IntStream.range(0, 100);\nintStream.forEach(i -> {\n  System.out.println(i);\n});\n```\n\n# \u62e1\u5f35for\u6587 (for-each)\n```java\n// List\nList<String> list = Arrays.asList(\"a\",\"b\",\"c\");\nfor(String s: list){\n  System.out.println(s);\n}\n\n// \u914d\u5217\nString[] array = {\"a\", \"b\", \"c\"};\nfor(String s: array){\n  System.out.println(s);\n}\n```\n\n\u2193\n\n``` java\n// List\nList<String> list = Arrays.asList(\"a\",\"b\",\"c\");\nStream<String> listStream = list.stream();\nlistStream.forEach(s -> {\n  System.out.println(s);\n});\n\n// \u914d\u5217\nString[] array = {\"a\", \"b\", \"c\"};\n// \u3069\u3061\u3089\u3082\u51fa\u6765\u308b\u3082\u306e\u306f\u540c\u3058\nStream<String> arrayStream01 = Arrays.stream(array);\nStream<String> arrayStream02 = Stream.of(array);\n\narrayStream01.forEach(s -> {\n  System.out.println(s);\n});\n\narrayStream02.forEach(s -> {\n  System.out.println(s);\n});\n\n```\n\n\n# \u4e26\u5217\u5316\n- \u4f5c\u6210\u3057\u305fStream\u3067.parallel()\u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\n- \u305f\u3060\u3057\u3001\u9806\u756a\u306f\u4fdd\u8a3c\u3055\u308c\u306a\u3044(\u9806\u756a\u306b\u5b9f\u884c\u3059\u308bforEachOrdered()\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u304c\u4e26\u5217\u5316\u306e\u610f\u5473\u304c\u2026)\n - (\u8ffd\u8a18)Stream\u5143\u3084\u51e6\u7406\u306b\u3088\u3063\u3066\u306fparallel()+forEachOrdered()\u306e\u65b9\u304c\u65e9\u3044\u305d\u3046\u3067\u3059\n\n```java\nIntStream intStream = IntStream.range(0, 100).parallel();\nStream<String> listStream = list.stream().parallel();\n```\n\n# \u304a\u308f\u308a\u306b\nfor\u6587\u3092\u5358\u7d14\u306bStream API\u3092\u4f7f\u7528\u3057\u3066\u7f6e\u304d\u63db\u3048\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\n\u3053\u308c\u3089\u3092\u4f7f\u3063\u3066\u307f\u3064\u3064\u3001\u3084\u308a\u305f\u3044\u3053\u3068\u30d9\u30fc\u30b9\u3067\u4e2d\u9593\u51e6\u7406\u3068\u304b\u672b\u7aef\u51e6\u7406\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u8abf\u3079\u3066\u3044\u3051\u3070\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u500b\u4eba\u7684\u306b\u306f\u4e26\u5217\u51e6\u7406\u304c\u30e1\u30bd\u30c3\u30c9\u4e00\u3064\u3067\u96e3\u3057\u3044\u3053\u3068\u3092\u8003\u3048\u305a\u306b\u6c17\u8efd\u306b\u4f7f\u3048\u308b\u306e\u304c\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n\n## \u53c2\u8003\n- [Java Stream\u30e1\u30e2(Hishidama's Java8 Stream Memo) ](http://www.ne.jp/asahi/hishidama/home/tech/java/stream.html)\n- [Stream API\u306e\u4e3b\u306a\u30e1\u30bd\u30c3\u30c9\u3068\u51e6\u7406\u7d50\u679c\u306eOptional\u30af\u30e9\u30b9\u306e\u4f7f\u3044\u65b9](http://www.atmarkit.co.jp/ait/articles/1405/20/news032.html)\n", "tags": ["Java", "java8"]}