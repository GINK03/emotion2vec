{"context": "\n\n\u306f\u3058\u3081\u306b\nJava8\u306e\u65b0\u6a5f\u80fd\u3001Stream API\u3092\u4f7f\u3044\u59cb\u3081\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u683c\u6bb5\u306b\u697d\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u5099\u5fd8\u9332\u7684\u306b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u51fa\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u5c11\u3057\u305a\u3064\u8ffd\u52a0\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3067\u3059\u3002\nJava\u306f\u4f7f\u3063\u305f\u3053\u3068\u3042\u308b\u3051\u3069\u30e9\u30e0\u30c0\u5f0f\u3084Stream API\u306f\u3088\u304f\u77e5\u3089\u306a\u3044\u3068\u3044\u3046\u65b9\u306f\u3001\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u30d0\u30ea\u30d0\u30ea\u4f7f\u3063\u3066\u3044\u308b\u65b9\u306f\u3001\u3053\u3093\u306a\u4f7f\u3044\u65b9\u3082\u3042\u308b\u3088\uff01\u3068\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002\n\u3061\u306a\u307f\u306b\u30aa\u30e9\u30a4\u30ea\u30fc\u793e\u306eJava\u306b\u3088\u308b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 \u2015Java 8\u30e9\u30e0\u30c0\u5f0f\u3068Stream\u304c\u3068\u3066\u3082\u53c2\u8003\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\n\u3010\u524d\u63d0\u6761\u4ef6\u3011Stream API\u306e\u8aac\u660e\u306b\u4f7f\u7528\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\nPerson.java\npublic class Person {\n  private String name;\n  private int age;\n  private List<Person> children;\n\n  public Person(String name){/*...*/}\n  public Person(String name, int age){/*...*/}\n  public Person(String name, int age, Person... children){/*...*/}\n\n  @Override\n  public String toString() {/* name(age) [children...] */}\n\n  // getter, setter...\n}\n\n\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3001\u914d\u5217\u3001Map\u3092Stream\u30af\u30e9\u30b9\u306b\u5909\u63db(Arrays#stream,Stream#of)\n\nStream.java\n  // \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\n  List<String> list = new ArrayList<>();\n  Stream<String> listStream = list.stream();\n\n  // \u914d\u5217\n  String[] ary = new String[] {\"AA\",\"BB\",\"CC\"};\n  Stream<String> aryStream1 = Arrays.stream(ary);\n  Stream<String> aryStream2 = Stream.of(ary);\n\n  // MAP\n  Map<String,String> map = new HashMap<>();\n  Stream<Entry<String, String>> mapStream = map.entrySet().stream();\n\n\n\n\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u30fb\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u53c2\u7167(Class::method)\n\nReference.java\n  String[] names = new String[] {\"Tom\",\"Bob\",\"Alice\"};\n\n    Stream.of(names)\n      // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u53c2\u7167\n      .map(Person::new) // name -> new Person(name)\n      // \u30e1\u30bd\u30c3\u30c9\u53c2\u7167\n      .forEach(System.out::println); // person -> System.out.println(person)\n      // Tom(0)\n      // Bob(0)\n      // Alice(0)\n\n\n\nPerson\u30ea\u30b9\u30c8\u304b\u3089name\u30ea\u30b9\u30c8\u4f5c\u6210(Stream#collect,Collectors#toList)\n\nNameList.java\n  List<Person> persons = new ArrayList<>();\n  persons.add(new Person(\"Tom\",  21));\n  persons.add(new Person(\"Bob\",  25));\n  persons.add(new Person(\"Alice\",19));\n\n  List<String> nameList =\n    persons.stream()\n      .map(Person::getName)\n      .collect(Collectors.toList());\n\n  nameList.steram().forEach(System.out::println);  \n    // \"Tom\"\n    // \"Bob\"\n    // \"Alice\"\n\n\n\nPerson\u30ea\u30b9\u30c8\u304b\u3089name\u306eCSV\u4f5c\u6210(Stream#collect,Collectors#joining)\n\nNameCSV.java\n  List<Person> persons = new ArrayList<>();\n  persons.add(new Person(\"Tom\",  21));\n  persons.add(new Person(\"Bob\",  25));\n  persons.add(new Person(\"Alice\",19));\n\n  String nameCSV =\n    persons.stream()\n      .map(p -> String.format(\"\\\"%s\\\"\", p.getName()))\n      .collect(Collectors.joining(\",\"));\n\n  System.out.println(nameCSV);\n  // \"Tom\",\"Bob\",\"Alice\"\n\n\n\nPerson\u30ea\u30b9\u30c8\u304b\u3089age\u306e\u91cd\u8907\u306a\u3057\u30ea\u30b9\u30c8\u4f5c\u6210(Stream#distinct)\n\nAgeDistinctList.java\n  List<Person> persons = new ArrayList<>();\n  persons.add(new Person(\"Tom\",  21));\n  persons.add(new Person(\"Bob\",  25));\n  persons.add(new Person(\"Alice\",19));\n  persons.add(new Person(\"Mike\", 19));\n\n  List<Integer> ageDistinctList =\n    persons.stream()\n      .map(Person::getAge)\n      .distinct()\n      .collect(Collectors.toList());\n\n  ageDistinctList.stream().forEach(System.out::println);\n  // 21\n  // 25\n  // 19\n\n\n\nPerson\u30ea\u30b9\u30c8\u3092age\u9806\u306b\u30bd\u30fc\u30c8(Stream#sorted,Comparator#comparingInt)\n\nSort.java\n  List<Person> persons = new ArrayList<>();\n  persons.add(new Person(\"Tom\",  21));\n  persons.add(new Person(\"Bob\",  25));\n  persons.add(new Person(\"Alice\",19));\n\n  persons.stream()\n    .sorted(Comparator.comparingInt(Person::getAge))\n    .forEach(System.out::println);\n    // Alice(19)\n    // Tom(21)\n    // Bob(25)\n\n\n\n\nPerson\u30ea\u30b9\u30c8\u3092name\u982d\u6587\u5b57\u3067\u30b0\u30eb\u30fc\u30d7\u5316(Comparator#groupingBy)\n\nNameIndex.java\n  List<Person> persons = new ArrayList<>();\n  persons.add(new Person(\"Tom\",  21));\n  persons.add(new Person(\"John\", 18));\n  persons.add(new Person(\"Jack\", 19));\n\n  Map<Object,List<Person>> nameIndex =\n    persons.stream()\n      .collect(Collectors.groupingBy(p -> p.getName().charAt(0)));\n\n    System.out.println(nameIndex);\n    // {J=[John(18), Jack(19)], T=[Tom(21)]}\n\n\n\nPerson\u30ea\u30b9\u30c8\u304b\u3089children\u30ea\u30b9\u30c8\u4f5c\u6210(Stream#flatMap)\n\nChildrenList.java\n  List<Person> persons = new ArrayList<>();\n  persons.add(new Person(\"Tom\", 21,\n                  new Person(\"Tomas\", 1), \n                  new Person(\"Tommy\", 0)));\n  persons.add(new Person(\"Bob\", 25,\n                  new Person(\"Bobby\", 2)));\n  persons.add(new Person(\"Alice\", 19));\n\n  persons.stream()\n    .flatMap(person -> person.getChildren().stream())\n    .forEach(System.out::println);\n    // Tomas(1)\n    // Tommy(0)\n    // Bobby(2)    \n\n\n##\u306f\u3058\u3081\u306b\nJava8\u306e\u65b0\u6a5f\u80fd\u3001Stream API\u3092\u4f7f\u3044\u59cb\u3081\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u683c\u6bb5\u306b\u697d\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u5099\u5fd8\u9332\u7684\u306b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u51fa\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u5c11\u3057\u305a\u3064\u8ffd\u52a0\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3067\u3059\u3002\nJava\u306f\u4f7f\u3063\u305f\u3053\u3068\u3042\u308b\u3051\u3069\u30e9\u30e0\u30c0\u5f0f\u3084Stream API\u306f\u3088\u304f\u77e5\u3089\u306a\u3044\u3068\u3044\u3046\u65b9\u306f\u3001\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u30d0\u30ea\u30d0\u30ea\u4f7f\u3063\u3066\u3044\u308b\u65b9\u306f\u3001\u3053\u3093\u306a\u4f7f\u3044\u65b9\u3082\u3042\u308b\u3088\uff01\u3068\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u30aa\u30e9\u30a4\u30ea\u30fc\u793e\u306e[Java\u306b\u3088\u308b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 \u2015Java 8\u30e9\u30e0\u30c0\u5f0f\u3068Stream](http://amzn.to/2jc4eDG)\u304c\u3068\u3066\u3082\u53c2\u8003\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n<a href=\"https://www.amazon.co.jp/Java%E3%81%AB%E3%82%88%E3%82%8B%E9%96%A2%E6%95%B0%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-_Java-8%E3%83%A9%E3%83%A0%E3%83%80%E5%BC%8F%E3%81%A8Stream-Venkat-Subramaniam/dp/4873117046/ref=as_li_ss_il?ie=UTF8&qid=1484016396&sr=8-1&keywords=Java%E3%81%AB%E3%82%88%E3%82%8B%E9%96%A2%E6%95%B0%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0&linkCode=li1&tag=nesheep5-22&linkId=a80381fa2e7e102520379c5deee46112\" target=\"_blank\"><img border=\"0\" src=\"//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4873117046&Format=_SL110_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=nesheep5-22\" ></a><img src=\"https://ir-jp.amazon-adsystem.com/e/ir?t=nesheep5-22&l=li1&o=9&a=4873117046\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\n\n#### \u3010\u524d\u63d0\u6761\u4ef6\u3011Stream API\u306e\u8aac\u660e\u306b\u4f7f\u7528\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n```java:Person.java\npublic class Person {\n  private String name;\n  private int age;\n  private List<Person> children;\n\n  public Person(String name){/*...*/}\n  public Person(String name, int age){/*...*/}\n  public Person(String name, int age, Person... children){/*...*/}\n  \n  @Override\n  public String toString() {/* name(age) [children...] */}\n  \n  // getter, setter...\n}\n```\n\n#### \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3001\u914d\u5217\u3001Map\u3092Stream\u30af\u30e9\u30b9\u306b\u5909\u63db(Arrays#stream,Stream#of)\n```java:Stream.java\n  // \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\n  List<String> list = new ArrayList<>();\n  Stream<String> listStream = list.stream();\n\n  // \u914d\u5217\n  String[] ary = new String[] {\"AA\",\"BB\",\"CC\"};\n  Stream<String> aryStream1 = Arrays.stream(ary);\n  Stream<String> aryStream2 = Stream.of(ary);\n\n  // MAP\n  Map<String,String> map = new HashMap<>();\n  Stream<Entry<String, String>> mapStream = map.entrySet().stream();\n```\n\n#### \u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u30fb\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u53c2\u7167(Class::method)\n```java:Reference.java\n  String[] names = new String[] {\"Tom\",\"Bob\",\"Alice\"};\n\n    Stream.of(names)\n      // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u53c2\u7167\n      .map(Person::new) // name -> new Person(name)\n      // \u30e1\u30bd\u30c3\u30c9\u53c2\u7167\n      .forEach(System.out::println); // person -> System.out.println(person)\n      // Tom(0)\n      // Bob(0)\n      // Alice(0)\n```\n\n#### Person\u30ea\u30b9\u30c8\u304b\u3089name\u30ea\u30b9\u30c8\u4f5c\u6210(Stream#collect,Collectors#toList)\n```java:NameList.java\n  List<Person> persons = new ArrayList<>();\n  persons.add(new Person(\"Tom\",  21));\n  persons.add(new Person(\"Bob\",  25));\n  persons.add(new Person(\"Alice\",19));\n\n  List<String> nameList =\n    persons.stream()\n      .map(Person::getName)\n      .collect(Collectors.toList());\n \n  nameList.steram().forEach(System.out::println);  \n    // \"Tom\"\n    // \"Bob\"\n    // \"Alice\"\n```\n\n#### Person\u30ea\u30b9\u30c8\u304b\u3089name\u306eCSV\u4f5c\u6210(Stream#collect,Collectors#joining)\n```java:NameCSV.java\n  List<Person> persons = new ArrayList<>();\n  persons.add(new Person(\"Tom\",  21));\n  persons.add(new Person(\"Bob\",  25));\n  persons.add(new Person(\"Alice\",19));\n\n  String nameCSV =\n    persons.stream()\n      .map(p -> String.format(\"\\\"%s\\\"\", p.getName()))\n      .collect(Collectors.joining(\",\"));\n\n  System.out.println(nameCSV);\n  // \"Tom\",\"Bob\",\"Alice\"\n```\n\n#### Person\u30ea\u30b9\u30c8\u304b\u3089age\u306e\u91cd\u8907\u306a\u3057\u30ea\u30b9\u30c8\u4f5c\u6210(Stream#distinct)\n```java:AgeDistinctList.java\n  List<Person> persons = new ArrayList<>();\n  persons.add(new Person(\"Tom\",  21));\n  persons.add(new Person(\"Bob\",  25));\n  persons.add(new Person(\"Alice\",19));\n  persons.add(new Person(\"Mike\", 19));\n\n  List<Integer> ageDistinctList =\n    persons.stream()\n      .map(Person::getAge)\n      .distinct()\n      .collect(Collectors.toList());\n\t\n  ageDistinctList.stream().forEach(System.out::println);\n  // 21\n  // 25\n  // 19\n```\n\n#### Person\u30ea\u30b9\u30c8\u3092age\u9806\u306b\u30bd\u30fc\u30c8(Stream#sorted,Comparator#comparingInt)\n```java:Sort.java\n  List<Person> persons = new ArrayList<>();\n  persons.add(new Person(\"Tom\",  21));\n  persons.add(new Person(\"Bob\",  25));\n  persons.add(new Person(\"Alice\",19));\n\n  persons.stream()\n    .sorted(Comparator.comparingInt(Person::getAge))\n    .forEach(System.out::println);\n    // Alice(19)\n    // Tom(21)\n    // Bob(25)\n    \n```\n\n\n#### Person\u30ea\u30b9\u30c8\u3092name\u982d\u6587\u5b57\u3067\u30b0\u30eb\u30fc\u30d7\u5316(Comparator#groupingBy)\n```java:NameIndex.java\n  List<Person> persons = new ArrayList<>();\n  persons.add(new Person(\"Tom\",  21));\n  persons.add(new Person(\"John\", 18));\n  persons.add(new Person(\"Jack\", 19));\n\n  Map<Object,List<Person>> nameIndex =\n    persons.stream()\n      .collect(Collectors.groupingBy(p -> p.getName().charAt(0)));\n\n    System.out.println(nameIndex);\n    // {J=[John(18), Jack(19)], T=[Tom(21)]}\n```\n\n\n\n#### Person\u30ea\u30b9\u30c8\u304b\u3089children\u30ea\u30b9\u30c8\u4f5c\u6210(Stream#flatMap)\n```java:ChildrenList.java\n  List<Person> persons = new ArrayList<>();\n  persons.add(new Person(\"Tom\", 21,\n                  new Person(\"Tomas\", 1), \n                  new Person(\"Tommy\", 0)));\n  persons.add(new Person(\"Bob\", 25,\n                  new Person(\"Bobby\", 2)));\n  persons.add(new Person(\"Alice\", 19));\n\n  persons.stream()\n    .flatMap(person -> person.getChildren().stream())\n    .forEach(System.out::println);\n    // Tomas(1)\n    // Tommy(0)\n    // Bobby(2)    \n```\n\n", "tags": ["Java", "java8"]}