{"context": "http://rest-term.com/archives/2999/\nhttp://algorithm.joho.info/programming/python-numpy-sample-code/\n\u306b\u826f\u3044\u307e\u3068\u3081\u304c\u3042\u308b\u306e\u3067\u305d\u308c\u3089\u3092\u898b\u308c\u3070\u4e8b\u8db3\u308a\u308b\u306e\u3060\u304c\u3001\u8a18\u61b6\u306e\u5b9a\u7740\u306e\u305f\u3081\u306b\u81ea\u5206\u7528\u306b\u3082\u30e1\u30e2\u3057\u3066\u304a\u304f\u3002(\u8af8\u4e8b\u60c5\u306b\u3088\u308a\u9069\u5f53\u306a\u82f1\u8a9e\u3082\u4f75\u8a18)\n\n\nNumpy\n\n\u914d\u5217\u3092\u4f5c\u308b / Creating Array\n\n 1\u6b21\u5143\u914d\u5217\u3092\u4f5c\u308b / Make a one-dimensional array\n>>> import numpy as np\n>>> x = np.array([1, 2, 3])\n>>> x\narray([1, 2, 3])\n\n\n 2\u6b21\u5143\u914d\u5217\u3092\u4f5c\u308b / Make a two-dimensional array\n>>> y = np.array([[1, 2, 3], [4, 5, 6]])\n>>> y\narray([[1, 2, 3],\n       [4, 5, 6]])\n\n\n \u914d\u5217\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\u3059\u308b / Confirm the size of an array\n>>> y.shape\n(2, 3)\n\n\n \u4e0b\u9650\u5024\u3001\u4e0a\u9650\u5024\u3001\u30b9\u30ad\u30c3\u30d7\u9593\u9694\u3092\u6307\u5b9a\u3057\u3066\u914d\u5217\u3092\u4f5c\u308b / Make an array with the lower limit, upper limit, skip interval\n>>> m = np.arange(0, 30, 2)\n>>> m\narray([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28])\n\n\n \u4e0b\u9650\u5024\u3001\u4e0a\u9650\u5024\u3001\u500b\u6570\u3092\u6307\u5b9a\u3057\u3066\u914d\u5217\u3092\u4f5c\u308b / Make an array with the lower limit, upper limit and elements count.\n>>> np.linspace(1, 4, 9)\narray([ 1.   ,  1.375,  1.75 ,  2.125,  2.5  ,  2.875,  3.25 ,  3.625,  4.   ])\n\n\n \u914d\u5217\u306e\u5f62\u3092\u5909\u3048\u308b / Change the shape of array\n>>> m = np.arange(0, 30, 2)\n>>> m.reshape(3, 5)\narray([[ 0,  2,  4,  6,  8],\n       [10, 12, 14, 16, 18],\n       [20, 22, 24, 26, 28]])\n>>> m\narray([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28])\n\n\u203b m\u81ea\u4f53\u306f\u5909\u308f\u3063\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\n\n \u914d\u5217\u306e\u5f62\u3068\u30b5\u30a4\u30ba\u3092\u5909\u3048\u308b / Change the shape and size of array\n>>> m = np.arange(0, 30, 2)\n>>> m.resize(3, 3)\n>>> m\narray([[ 0,  2,  4],\n       [ 6,  8, 10],\n       [12, 14, 16]])\n\n\u203b m\u81ea\u4f53\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\n\n \u5f62\u3092\u6307\u5b9a\u3057\u3066\u5168\u3066\u306e\u8981\u7d20\u304c1\u3067\u3042\u308b\u914d\u5217\u3092\u4f5c\u308b / Make a two-dimensional array (all elements are 1) with the shape\n>>> np.ones((4, 3))\narray([[ 1.,  1.,  1.],\n       [ 1.,  1.,  1.],\n       [ 1.,  1.,  1.],\n       [ 1.,  1.,  1.]])\n>>>\n>>> np.ones((2, 3), int)\narray([[1, 1, 1],\n       [1, 1, 1]])\n\n\n \u5f62\u3092\u6307\u5b9a\u3057\u3066\u5168\u3066\u306e\u8981\u7d20\u304c0\u3067\u3042\u308b\u914d\u5217\u3092\u4f5c\u308b / Make a two-dimensional array (all elements are 0) with the shape\n>>> np.zeros((4, 3))\narray([[ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.]])\n\n\n \u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u3066\u5358\u4f4d\u884c\u5217\u7684\u306a2\u6b21\u5143\u914d\u5217\u3092\u4f5c\u308b / Make a two-dimensional array like an identity matrix with the size.\n>>> np.eye(5)\narray([[ 1.,  0.,  0.,  0.,  0.],\n       [ 0.,  1.,  0.,  0.,  0.],\n       [ 0.,  0.,  1.,  0.,  0.],\n       [ 0.,  0.,  0.,  1.,  0.],\n       [ 0.,  0.,  0.,  0.,  1.]])\n\n\n 2\u6b21\u5143\u914d\u5217\u306e\u5bfe\u89d2\u7dda\u8981\u7d20\u3092\u53d6\u5f97 / Get diagonal elements of a two-dimensional array\n>>> np.diag([[ 1,  3,  5], [ 7,  9, 11], [13, 15, 17]])\narray([ 1,  9, 17])\n\n\n \u7e70\u308a\u8fd4\u3057\u540c\u3058\u8981\u7d20\u304c\u767b\u5834\u3059\u308b\u914d\u5217\u3092\u4f5c\u308b / Make an array with repeating\n>>> np.array([1, 2, 3] * 3)\narray([1, 2, 3, 1, 2, 3, 1, 2, 3])\n\n>>> np.repeat([1, 2, 3], 3)\narray([1, 1, 1, 2, 2, 2, 3, 3, 3])\n\n\n 2\u3064\u306e\u914d\u5217\u3092\u7e26\u65b9\u5411\u306b\u7d50\u5408\u3059\u308b / Combine two arrays vertically\n>>> x = np.array([[1, 2, 3]])\n>>> y = np.array([[4, 5, 6], [7, 8, 9]])\n>>> np.vstack([x, y])\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n\n 2\u3064\u306e\u914d\u5217\u3092\u6a2a\u65b9\u5411\u306b\u7d50\u5408\u3059\u308b / Combine two arrays horizontally\n>>> x = np.array([[1, 2], [3, 4]])\n>>> y = np.array([[5, 6, 7], [8, 9, 0]])\n>>> np.hstack([x, y])\narray([[1, 2, 5, 6, 7],\n       [3, 4, 8, 9, 0]])\n\n\n \u4e71\u6570\u3092\u4f7f\u3063\u3066\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b / Make an array using random numbers\n>>> np.random.randint(0, 10, (4, 3))\narray([[6, 7, 8],\n       [5, 4, 9],\n       [5, 4, 9],\n       [5, 9, 2]])\n>>> np.random.randint(0, 10, (4, 3))\narray([[5, 7, 5],\n       [8, 4, 3],\n       [2, 9, 6],\n       [7, 9, 5]])\n\n\n\u914d\u5217\u306e\u64cd\u4f5c / Operating Array\n\n \u914d\u5217\u306e\u8db3\u3057\u7b97 / Addition of arrays\n>>> x = np.array([[1, 2, 3], [4, 5, 6]])\n>>> x\narray([[1, 2, 3],\n       [4, 5, 6]])\n>>> y = np.array([[7, 8, 9], [10, 11, 12]])\n>>> y\narray([[ 7,  8,  9],\n       [10, 11, 12]])\n>>> x + y\narray([[ 8, 10, 12],\n       [14, 16, 18]])\n>>> x + x + y\narray([[ 9, 12, 15],\n       [18, 21, 24]])\n\n\n \u914d\u5217\u306e\u639b\u3051\u7b97 / Multiplication of arrays\n>>> x * y\narray([[ 7, 16, 27],\n       [40, 55, 72]])\n\n\n \u914d\u5217\u306e\u7d2f\u4e57 / Power of a array\n>>> x ** 2\narray([[ 1,  4,  9],\n       [16, 25, 36]])\n>>> x ** 3\narray([[  1,   8,  27],\n       [ 64, 125, 216]])\n\n\n \u914d\u5217\u3092\u884c\u5217\u3068\u3057\u3066\u6271\u3063\u3066\u5185\u7a4d\u3092\u51fa\u3059 / Inner product of arrays\n>>> x.dot(y)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: shapes (2,3) and (2,3) not aligned: 3 (dim 1) != 2 (dim 0)\n>>>\n>>> z = np.array([[1], [2], [3]])\n>>> z\narray([[1],\n       [2],\n       [3]])\n>>> x.dot(z)\narray([[14],\n       [32]])\n\n\u203b \u5f53\u7136\u3001\u5185\u7a4d\u3092\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u306b\u7e26\u6a2a\u306e\u6570\u3092\u63c3\u3048\u3066\u3084\u3089\u306a\u3044\u3068\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3002\n\n \u914d\u5217\u306e\u7e26\u6a2a\u5909\u63db / Transpose an array\n>>> x\narray([[1, 2, 3],\n       [4, 5, 6]])\n>>> x.T\narray([[1, 4],\n       [2, 5],\n       [3, 6]])\n>>> x.T.T\narray([[1, 2, 3],\n       [4, 5, 6]])\n>>>\n>>> z\narray([[1],\n       [2],\n       [3]])\n>>> z.T\narray([[1, 2, 3]])\n\n\n \u914d\u5217\u306e\u8981\u7d20\u306e\u578b\u3092\u78ba\u8a8d&\u5909\u66f4\u3059\u308b / Confirm and change the type of array elements\n>>> x\narray([[1, 2, 3],\n       [4, 5, 6]])\n>>>\n>>> x.dtype\ndtype('int64')\n>>>\n>>> x.astype('f')\narray([[ 1.,  2.,  3.],\n       [ 4.,  5.,  6.]], dtype=float32)\n\n\n \u914d\u5217\u306e\u6700\u5927\u5024/\u6700\u5c0f\u5024/\u5408\u8a08/\u5e73\u5747/\u6a19\u6e96\u504f\u5dee\u3092\u6c42\u3081\u308b / Calculate maximum, minimum, summation, average and standard deviation value of array elements\n>>> x\narray([[1, 2, 3],\n       [4, 5, 6]])\n>>> x.max()\n6\n>>> np.max(x)\n6\n>>> x.min()\n1\n>>> np.min(x)\n1\n>>> x.sum()\n21\n>>> np.sum(x)\n21\n>>> x.mean()\n3.5\n>>> np.mean(x)\n3.5\n>>> np.average(x)\n3.5\n>>> x.std()\n1.707825127659933\n>>> np.std(x)\n1.707825127659933\n\n\n \u914d\u5217\u5185\u306e\u6700\u5927\u5024/\u6700\u5c0f\u5024\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6c42\u3081\u308b / Get the index of maximum and minimum value in an array.\n>>> x\narray([[1, 2, 3],\n       [4, 5, 6]])\n>>> x.argmax()\n5\n>>> x.argmin()\n0\n>>>\n>>> y = np.array([[1, 2, 3], [1, 2, 3]])\n>>> y\narray([[1, 2, 3],\n       [1, 2, 3]])\n>>> y.argmax()\n2\n>>> y.argmin()\n0\n\n\u203b \u6700\u5927\u5024/\u6700\u5c0f\u5024\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u6700\u521d\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\u3002\n\n\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u30b9\u30e9\u30a4\u30b9 / Indexing and Slicing\n\n \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3057\u3066\u3001\u914d\u5217\u304b\u3089\u8981\u7d20\u3092\u62bd\u51fa\u3059\u308b / Extract elements from an array by index\n>>> s = np.arange(13) ** 2\n>>> s\narray([  0,   1,   4,   9,  16,  25,  36,  49,  64,  81, 100, 121, 144])\n>>> s[0]\n0\n>>> s[11]\n121\n>>> s[0:3]\narray([0, 1, 4])\n>>> s[0], s[11], s[0:3]\n(0, 121, array([0, 1, 4]))\n>>> s[-4:]\narray([ 81, 100, 121, 144])\n>>> s[-4:-1]\narray([ 81, 100, 121])\n>>> s[-4::-1]\narray([81, 64, 49, 36, 25, 16,  9,  4,  1,  0])\n\n\n \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3057\u3066\u30012\u6b21\u5143\u914d\u5217\u304b\u3089\u8981\u7d20\u3092\u62bd\u51fa\u3059\u308b / Extract elements from a two-dimensional array by index\n>>> r = np.arange(36)\n>>> r.resize((6, 6))\n>>> r\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35]])\n>>>\n>>> r[2, 2]\n14\n>>> r[3, 3:6]\narray([21, 22, 23])\n>>> r[3, 3:7]\narray([21, 22, 23])\n>>> r[:2, :-1]\narray([[ 0,  1,  2,  3,  4],\n       [ 6,  7,  8,  9, 10]])\n>>> r[:-1, ::2]\narray([[ 0,  2,  4],\n       [ 6,  8, 10],\n       [12, 14, 16],\n       [18, 20, 22],\n       [24, 26, 28]])\n\n\n \u6761\u4ef6\u3092\u6307\u5b9a\u3057\u3066\u30012\u6b21\u5143\u914d\u5217\u304b\u3089\u8981\u7d20\u3092\u62bd\u51fa/\u7de8\u96c6\u3059\u308b / Extract and edit elements in a two-dimensional array by condition\n>>> r[r > 30]\narray([31, 32, 33, 34, 35])\n>>> r[r > 20]\narray([21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])\n>>> r[r > 20] = 20\n>>> r\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 20, 20, 20],\n       [20, 20, 20, 20, 20, 20],\n       [20, 20, 20, 20, 20, 20]])\n\n\n\u914d\u5217\u306e\u53c2\u7167\u6e21\u3057\u3068\u30b3\u30d4\u30fc / Reference and copy of an array\n\n \u914d\u5217\u306e\u53c2\u7167\u6e21\u3057 / Reference of an array\n>>> r = np.arange(36)\n>>> r.resize((6, 6))\n>>> r\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35]])\n>>> \n>>> r2 = r[2:4, 2:4]\n>>> r2\narray([[14, 15],\n       [20, 21]])\n>>> \n>>> r2[:] = -1\n>>> r2\narray([[-1, -1],\n       [-1, -1]])\n>>> r\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, -1, -1, 16, 17],\n       [18, 19, -1, -1, 22, 23],\n       [24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35]])\n\n\u203b r2 = r[2:4, 2:4]\u3067\u306fr2\u306b\u53c2\u7167\u3092\u6e21\u3057\u3066\u3044\u308b\u306e\u3067\u3001r2\u3092\u7de8\u96c6\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u3001r\u3092\u7de8\u96c6\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u308b\u3002\n\n \u914d\u5217\u306e\u30b3\u30d4\u30fc / Copy of an array\n>>> r = np.arange(36)\n>>> r.resize((6, 6))\n>>> r\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35]])\n>>> \n>>> r2 = r[2:4, 2:4].copy()\n>>> r2\narray([[14, 15],\n       [20, 21]])\n>>> \n>>> r2[:] = -1\n>>> r2\narray([[-1, -1],\n       [-1, -1]])\n>>> r\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35]])\n\n\u203b r2 = r[2:4, 2:4].copy()\u3067\u306fr\u304b\u3089\u30b3\u30d4\u30fc\u3055\u308c\u305f\u65b0\u3057\u3044\u914d\u5217\u304cr2\u306b\u6e21\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001r2\u3068r\u306f\u5225\u500b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002r2\u3092\u7de8\u96c6\u3057\u3066\u3082r\u306b\u5f71\u97ff\u306f\u306a\u3044\u3002\n\n\u914d\u5217\u3067\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u51e6\u7406\u3092\u3059\u308b / Iterating over Arrays\n\n \u914d\u5217\u3092\u30a4\u30c6\u30ec\u30fc\u30c8\u3059\u308b / Iterate an array\n>>> r = np.random.randint(0, 10, (4, 3))\n>>> r\narray([[1, 6, 3],\n       [3, 6, 0],\n       [4, 9, 3],\n       [5, 9, 3]])\n>>>\n>>> for row in r:\n...     print(row)\n... \n[1 6 3]\n[3 6 0]\n[4 9 3]\n[5 9 3]\n>>>\n>>> for i, row in enumerate(r):\n...     print(i, ' : ', row)\n... \n0  :  [1 6 3]\n1  :  [3 6 0]\n2  :  [4 9 3]\n3  :  [5 9 3]\n\n\n \u8907\u6570\u306e\u914d\u5217\u3092\u540c\u6642\u306b\u30a4\u30c6\u30ec\u30fc\u30c8\u3059\u308b / Iterate multiple arrays in same time\n>>> r\narray([[1, 6, 3],\n       [3, 6, 0],\n       [4, 9, 3],\n       [5, 9, 3]])\n>>> r2 = r ** 2\n>>> r2\narray([[ 1, 36,  9],\n       [ 9, 36,  0],\n       [16, 81,  9],\n       [25, 81,  9]])\n>>> for x, y, z in zip(r, r2, r):\n...     print(x, y, z)\n... \n[1 6 3] [ 1 36  9] [1 6 3]\n[3 6 0] [ 9 36  0] [3 6 0]\n[4 9 3] [16 81  9] [4 9 3]\n[5 9 3] [25 81  9] [5 9 3]\n\n\n\nPandas\n\nSeries\n\n \u30b9\u30ab\u30e9\u30fc\u5024\u306eSeries\u3092\u9806\u5e8f\u6709\u308a\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306eSeries\u306b\u5909\u63db\u3059\u308b / Convert a series from ratio scale to ordinal scale\n>>> s = pd.Series([168, 180, 174, 190, 170, 185, 179, 181, 175, 169, 182, 177, 180, 171])\n>>> \n>>> pd.cut(s, 3)\n0     (167.978, 175.333]\n1     (175.333, 182.667]\n2     (167.978, 175.333]\n3         (182.667, 190]\n4     (167.978, 175.333]\n5         (182.667, 190]\n6     (175.333, 182.667]\n7     (175.333, 182.667]\n8     (167.978, 175.333]\n9     (167.978, 175.333]\n10    (175.333, 182.667]\n11    (175.333, 182.667]\n12    (175.333, 182.667]\n13    (167.978, 175.333]\ndtype: category\nCategories (3, object): [(167.978, 175.333] < (175.333, 182.667] < (182.667, 190]]\n>>> \n>>> pd.cut(s, 3, labels=['Small', 'Medium', 'Large'])\n0      Small\n1     Medium\n2      Small\n3      Large\n4      Small\n5      Large\n6     Medium\n7     Medium\n8      Small\n9      Small\n10    Medium\n11    Medium\n12    Medium\n13     Small\ndtype: category\nCategories (3, object): [Small < Medium < Large]\n\n\nDataframe\n\n\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0 / Filtering\n\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3068\u3057\u3066All-time Olympic Games medal table\u3092\u4f7f\u7528\u3002\n\n \u3042\u308b\u30ab\u30e9\u30e0\u306e\u5024\u304c\u6700\u5927\u3067\u3042\u308b\u884c\u306e\u30e9\u30d9\u30eb\u3092\u53d6\u5f97\u3059\u308b / Get a row label which column value is maximum\n>>> df[df['Gold'] == max(df['Gold'])].index[0]\n'United States'\n\n\n Dataframe \u3092\u8907\u6570\u6761\u4ef6\u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b / Filter a dataframe with multiple conditions\n>>> df[(df['Gold'] > 0) & (df['Gold.1'] > 0)]\n\n\n\u7d50\u5408 / Merging\n\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4e0b\u8a18\u3092\u4f7f\u7528\u3059\u308b\u3002 / Sample data is as follow:\n>>> import pandas as pd\n>>> staff_df = pd.DataFrame([{'Name': 'Kelly', 'Role': 'Director of HR'},\n...                          {'Name': 'Sally', 'Role': 'Course liasion'},\n...                          {'Name': 'James', 'Role': 'Grader'}])\n>>> staff_df = staff_df.set_index('Name')\n>>> student_df = pd.DataFrame([{'Name': 'James', 'School': 'Business'},\n...                            {'Name': 'Mike', 'School': 'Law'},\n...                            {'Name': 'Sally', 'School': 'Engineering'}])\n>>> student_df = student_df.set_index('Name')\n>>> \n>>> staff_df\n                 Role\nName                 \nKelly  Director of HR\nSally  Course liasion\nJames          Grader\n>>> \n>>> student_df\n            School\nName              \nJames     Business\nMike           Law\nSally  Engineering\n\n\n \u5916\u90e8\u7d50\u5408 / Outer merging\n\u30b9\u30bf\u30c3\u30d5\u3082\u3057\u304f\u306f\u5b66\u751f\u3067\u3042\u308b\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b / Get data of who is student or staff\n>>> pd.merge(staff_df, student_df, how='outer', left_index=True, right_index=True)\n                 Role       School\nName                              \nJames          Grader     Business\nKelly  Director of HR          NaN\nMike              NaN          Law\nSally  Course liasion  Engineering\n\n\n \u5185\u90e8\u7d50\u5408 / Inner merging\n\u30b9\u30bf\u30c3\u30d5\u3082\u3057\u304f\u306f\u5b66\u751f\u3067\u3042\u308b\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b / Get data of who is student and staff\n>>> pd.merge(staff_df, student_df, how='inner', left_index=True, right_index=True)\n                 Role       School\nName                              \nJames          Grader     Business\nSally  Course liasion  Engineering\n\n\n \u5de6\u5916\u90e8\u7d50\u5408 / Left merging\n\u30b9\u30bf\u30c3\u30d5\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3002\u3082\u3057\u3001\u305d\u306e\u30b9\u30bf\u30c3\u30d5\u304c\u5b66\u751f\u3067\u3082\u3042\u308b\u5834\u5408\u306f\u3001School\u30c7\u30fc\u30bf\u3082\u53d6\u5f97\u3059\u308b\u3002 / Get data of who is staff. If the staff is also student, get the data of school.\n>>> pd.merge(staff_df, student_df, how='left', left_index=True, right_index=True)\n                 Role       School\nName                              \nKelly  Director of HR          NaN\nSally  Course liasion  Engineering\nJames          Grader     Business\n\n\n \u53f3\u5916\u90e8\u7d50\u5408 / Right merging\n\u5b66\u751f\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3002\u3082\u3057\u3001\u305d\u306e\u5b66\u751f\u304c\u30b9\u30bf\u30c3\u30d5\u3067\u3082\u3042\u308b\u5834\u5408\u306f\u3001Role\u30c7\u30fc\u30bf\u3082\u53d6\u5f97\u3059\u308b\u3002 / Get data of who is student. If the student is also staff, get the data of role.\n>>> pd.merge(staff_df, student_df, how='right', left_index=True, right_index=True)\n                 Role       School\nName                              \nJames          Grader     Business\nMike              NaN          Law\nSally  Course liasion  Engineering\n\n\n \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u4ee5\u5916\u306e\u30ab\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u7d50\u5408\u3059\u308b / Merging not using index\n>>> products = pd.DataFrame([{'Product ID': 4109, 'Price': 5.0, 'Product': 'Suchi Roll'},\n...                          {'Product ID': 1412, 'Price': 0.5, 'Product': 'Egg'},\n...                          {'Product ID': 8931, 'Price': 1.5, 'Product': 'Bagel'}])\n>>> products = products.set_index('Product ID')\n>>> products\n            Price     Product\nProduct ID                   \n4109          5.0  Suchi Roll\n1412          0.5         Egg\n8931          1.5       Bagel\n>>> invoices = pd.DataFrame([{'Customer': 'Ali', 'Product ID': 4109, 'Quantity': 1},\n...                          {'Customer': 'Eric', 'Product ID': 1412, 'Quantity': 12},\n...                          {'Customer': 'Anda', 'Product ID': 8931, 'Quantity': 6},\n...                          {'Customer': 'Sam', 'Product ID': 4109, 'Quantity': 2}])\n>>> invoices\n  Customer  Product ID  Quantity\n0      Ali        4109         1\n1     Eric        1412        12\n2     Anda        8931         6\n3      Sam        4109         2\n>>>\n>>> pd.merge(products, invoices, how='right', left_index=True, right_on='Product ID')\n   Price     Product Customer  Product ID  Quantity\n0    5.0  Suchi Roll      Ali        4109         1\n1    0.5         Egg     Eric        1412        12\n2    1.5       Bagel     Anda        8931         6\n3    5.0  Suchi Roll      Sam        4109         2\n\n\n \u8907\u6570\u306e\u30ab\u30e9\u30e0\u3092\u30ad\u30fc\u3068\u3057\u3066\u7d50\u5408\u3059\u308b / Merging with multiple keys\n>>> staff_df = pd.DataFrame([{'First Name': 'Kelly', 'Last Name': 'Desjardins', 'Role': 'Director of HR'},\n...                          {'First Name': 'Sally', 'Last Name': 'Brooks', 'Role': 'Course liasion'},\n...                          {'First Name': 'James', 'Last Name': 'Wilde', 'Role': 'Grader'}])\n>>> student_df = pd.DataFrame([{'First Name': 'James', 'Last Name': 'Hammond', 'School': 'Business'},\n...                            {'First Name': 'Mike', 'Last Name': 'Smith', 'School': 'Law'},\n...                            {'First Name': 'Sally', 'Last Name': 'Brooks', 'School': 'Engineering'}])\n>>> staff_df\n  First Name   Last Name            Role\n0      Kelly  Desjardins  Director of HR\n1      Sally      Brooks  Course liasion\n2      James       Wilde          Grader\n>>> student_df\n  First Name Last Name       School\n0      James   Hammond     Business\n1       Mike     Smith          Law\n2      Sally    Brooks  Engineering\n>>> pd.merge(staff_df, student_df, how='inner', left_on=['First Name','Last Name'], right_on=['First Name','Last Name'])\n  First Name Last Name            Role       School\n0      Sally    Brooks  Course liasion  Engineering\n\n\n\u96c6\u7d04 / Grouping\n\n \u30ab\u30e9\u30e0A\u3067\u96c6\u7d04\u3057\u3066\u3001\u4ed6\u306e\u30ab\u30e9\u30e0\u306e\u5408\u8a08\u5024\u3092\u51fa\u3059 / Group by column 'A' and calculate sum of other columns\n>>> df.groupby('A').agg('sum')\n\n>>> df.groupby('A').agg({'B': sum})\n\nhttp://rest-term.com/archives/2999/\nhttp://algorithm.joho.info/programming/python-numpy-sample-code/\n\u306b\u826f\u3044\u307e\u3068\u3081\u304c\u3042\u308b\u306e\u3067\u305d\u308c\u3089\u3092\u898b\u308c\u3070\u4e8b\u8db3\u308a\u308b\u306e\u3060\u304c\u3001\u8a18\u61b6\u306e\u5b9a\u7740\u306e\u305f\u3081\u306b\u81ea\u5206\u7528\u306b\u3082\u30e1\u30e2\u3057\u3066\u304a\u304f\u3002(\u8af8\u4e8b\u60c5\u306b\u3088\u308a\u9069\u5f53\u306a\u82f1\u8a9e\u3082\u4f75\u8a18)\n\n---\n\n## Numpy\n\n#### \u914d\u5217\u3092\u4f5c\u308b / Creating Array\n\n##### :white_check_mark: 1\u6b21\u5143\u914d\u5217\u3092\u4f5c\u308b / Make a one-dimensional array\n\n```pycon\n>>> import numpy as np\n>>> x = np.array([1, 2, 3])\n>>> x\narray([1, 2, 3])\n```\n\n##### :white_check_mark: 2\u6b21\u5143\u914d\u5217\u3092\u4f5c\u308b / Make a two-dimensional array\n\n```pycon\n>>> y = np.array([[1, 2, 3], [4, 5, 6]])\n>>> y\narray([[1, 2, 3],\n       [4, 5, 6]])\n```\n\n##### :white_check_mark: \u914d\u5217\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\u3059\u308b / Confirm the size of an array\n\n```pycon\n>>> y.shape\n(2, 3)\n```\n\n##### :white_check_mark: \u4e0b\u9650\u5024\u3001\u4e0a\u9650\u5024\u3001\u30b9\u30ad\u30c3\u30d7\u9593\u9694\u3092\u6307\u5b9a\u3057\u3066\u914d\u5217\u3092\u4f5c\u308b / Make an array with the lower limit, upper limit, skip interval\n```pycon\n>>> m = np.arange(0, 30, 2)\n>>> m\narray([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28])\n```\n\n##### :white_check_mark: \u4e0b\u9650\u5024\u3001\u4e0a\u9650\u5024\u3001\u500b\u6570\u3092\u6307\u5b9a\u3057\u3066\u914d\u5217\u3092\u4f5c\u308b / Make an array with the lower limit, upper limit and elements count.\n```pycon\n>>> np.linspace(1, 4, 9)\narray([ 1.   ,  1.375,  1.75 ,  2.125,  2.5  ,  2.875,  3.25 ,  3.625,  4.   ])\n```\n\n##### :white_check_mark: \u914d\u5217\u306e\u5f62\u3092\u5909\u3048\u308b / Change the shape of array\n```pycon\n>>> m = np.arange(0, 30, 2)\n>>> m.reshape(3, 5)\narray([[ 0,  2,  4,  6,  8],\n       [10, 12, 14, 16, 18],\n       [20, 22, 24, 26, 28]])\n>>> m\narray([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28])\n```\n\u203b m\u81ea\u4f53\u306f\u5909\u308f\u3063\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\n\n##### :white_check_mark: \u914d\u5217\u306e\u5f62\u3068\u30b5\u30a4\u30ba\u3092\u5909\u3048\u308b / Change the shape and size of array\n\n```pycon\n>>> m = np.arange(0, 30, 2)\n>>> m.resize(3, 3)\n>>> m\narray([[ 0,  2,  4],\n       [ 6,  8, 10],\n       [12, 14, 16]])\n```\n\u203b m\u81ea\u4f53\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\n\n##### :white_check_mark: \u5f62\u3092\u6307\u5b9a\u3057\u3066\u5168\u3066\u306e\u8981\u7d20\u304c1\u3067\u3042\u308b\u914d\u5217\u3092\u4f5c\u308b / Make a two-dimensional array (all elements are 1) with the shape\n```pycon\n>>> np.ones((4, 3))\narray([[ 1.,  1.,  1.],\n       [ 1.,  1.,  1.],\n       [ 1.,  1.,  1.],\n       [ 1.,  1.,  1.]])\n>>>\n>>> np.ones((2, 3), int)\narray([[1, 1, 1],\n       [1, 1, 1]])\n```\n\n##### :white_check_mark: \u5f62\u3092\u6307\u5b9a\u3057\u3066\u5168\u3066\u306e\u8981\u7d20\u304c0\u3067\u3042\u308b\u914d\u5217\u3092\u4f5c\u308b / Make a two-dimensional array (all elements are 0) with the shape\n\n```pycon\n>>> np.zeros((4, 3))\narray([[ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.]])\n```\n\n##### :white_check_mark: \u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u3066\u5358\u4f4d\u884c\u5217\u7684\u306a2\u6b21\u5143\u914d\u5217\u3092\u4f5c\u308b / Make a two-dimensional array like an identity matrix with the size.\n\n```pycon\n>>> np.eye(5)\narray([[ 1.,  0.,  0.,  0.,  0.],\n       [ 0.,  1.,  0.,  0.,  0.],\n       [ 0.,  0.,  1.,  0.,  0.],\n       [ 0.,  0.,  0.,  1.,  0.],\n       [ 0.,  0.,  0.,  0.,  1.]])\n```\n\n##### :white_check_mark: 2\u6b21\u5143\u914d\u5217\u306e\u5bfe\u89d2\u7dda\u8981\u7d20\u3092\u53d6\u5f97 / Get diagonal elements of a two-dimensional array\n```pycon\n>>> np.diag([[ 1,  3,  5], [ 7,  9, 11], [13, 15, 17]])\narray([ 1,  9, 17])\n```\n\n##### :white_check_mark: \u7e70\u308a\u8fd4\u3057\u540c\u3058\u8981\u7d20\u304c\u767b\u5834\u3059\u308b\u914d\u5217\u3092\u4f5c\u308b / Make an array with repeating\n```pycon\n>>> np.array([1, 2, 3] * 3)\narray([1, 2, 3, 1, 2, 3, 1, 2, 3])\n```\n\n```pycon\n>>> np.repeat([1, 2, 3], 3)\narray([1, 1, 1, 2, 2, 2, 3, 3, 3])\n```\n\n##### :white_check_mark: 2\u3064\u306e\u914d\u5217\u3092\u7e26\u65b9\u5411\u306b\u7d50\u5408\u3059\u308b / Combine two arrays vertically\n\n```pycon\n>>> x = np.array([[1, 2, 3]])\n>>> y = np.array([[4, 5, 6], [7, 8, 9]])\n>>> np.vstack([x, y])\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n```\n\n##### :white_check_mark: 2\u3064\u306e\u914d\u5217\u3092\u6a2a\u65b9\u5411\u306b\u7d50\u5408\u3059\u308b / Combine two arrays horizontally\n\n```pycon\n>>> x = np.array([[1, 2], [3, 4]])\n>>> y = np.array([[5, 6, 7], [8, 9, 0]])\n>>> np.hstack([x, y])\narray([[1, 2, 5, 6, 7],\n       [3, 4, 8, 9, 0]])\n```\n\n##### :white_check_mark: \u4e71\u6570\u3092\u4f7f\u3063\u3066\u914d\u5217\u3092\u4f5c\u6210\u3059\u308b / Make an array using random numbers\n\n```pycon\n>>> np.random.randint(0, 10, (4, 3))\narray([[6, 7, 8],\n       [5, 4, 9],\n       [5, 4, 9],\n       [5, 9, 2]])\n>>> np.random.randint(0, 10, (4, 3))\narray([[5, 7, 5],\n       [8, 4, 3],\n       [2, 9, 6],\n       [7, 9, 5]])\n```\n\n#### \u914d\u5217\u306e\u64cd\u4f5c / Operating Array\n\n##### :white_check_mark: \u914d\u5217\u306e\u8db3\u3057\u7b97 / Addition of arrays\n\n```pycon\n>>> x = np.array([[1, 2, 3], [4, 5, 6]])\n>>> x\narray([[1, 2, 3],\n       [4, 5, 6]])\n>>> y = np.array([[7, 8, 9], [10, 11, 12]])\n>>> y\narray([[ 7,  8,  9],\n       [10, 11, 12]])\n>>> x + y\narray([[ 8, 10, 12],\n       [14, 16, 18]])\n>>> x + x + y\narray([[ 9, 12, 15],\n       [18, 21, 24]])\n```\n\n##### :white_check_mark: \u914d\u5217\u306e\u639b\u3051\u7b97 / Multiplication of arrays\n\n```pycon\n>>> x * y\narray([[ 7, 16, 27],\n       [40, 55, 72]])\n```\n\n##### :white_check_mark: \u914d\u5217\u306e\u7d2f\u4e57 / Power of a array\n\n```pycon\n>>> x ** 2\narray([[ 1,  4,  9],\n       [16, 25, 36]])\n>>> x ** 3\narray([[  1,   8,  27],\n       [ 64, 125, 216]])\n```\n\n##### :white_check_mark: \u914d\u5217\u3092\u884c\u5217\u3068\u3057\u3066\u6271\u3063\u3066\u5185\u7a4d\u3092\u51fa\u3059 / Inner product of arrays\n```pycon\n>>> x.dot(y)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: shapes (2,3) and (2,3) not aligned: 3 (dim 1) != 2 (dim 0)\n>>>\n>>> z = np.array([[1], [2], [3]])\n>>> z\narray([[1],\n       [2],\n       [3]])\n>>> x.dot(z)\narray([[14],\n       [32]])\n```\n\u203b \u5f53\u7136\u3001\u5185\u7a4d\u3092\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u306b\u7e26\u6a2a\u306e\u6570\u3092\u63c3\u3048\u3066\u3084\u3089\u306a\u3044\u3068\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3002\n\n##### :white_check_mark: \u914d\u5217\u306e\u7e26\u6a2a\u5909\u63db / Transpose an array\n\n```pycon\n>>> x\narray([[1, 2, 3],\n       [4, 5, 6]])\n>>> x.T\narray([[1, 4],\n       [2, 5],\n       [3, 6]])\n>>> x.T.T\narray([[1, 2, 3],\n       [4, 5, 6]])\n>>>\n>>> z\narray([[1],\n       [2],\n       [3]])\n>>> z.T\narray([[1, 2, 3]])\n```\n\n##### :white_check_mark: \u914d\u5217\u306e\u8981\u7d20\u306e\u578b\u3092\u78ba\u8a8d&\u5909\u66f4\u3059\u308b / Confirm and change the type of array elements\n\n```pycon\n>>> x\narray([[1, 2, 3],\n       [4, 5, 6]])\n>>>\n>>> x.dtype\ndtype('int64')\n>>>\n>>> x.astype('f')\narray([[ 1.,  2.,  3.],\n       [ 4.,  5.,  6.]], dtype=float32)\n```\n\n##### :white_check_mark: \u914d\u5217\u306e\u6700\u5927\u5024/\u6700\u5c0f\u5024/\u5408\u8a08/\u5e73\u5747/\u6a19\u6e96\u504f\u5dee\u3092\u6c42\u3081\u308b / Calculate maximum, minimum, summation, average and standard deviation value of array elements\n\n```pycon\n>>> x\narray([[1, 2, 3],\n       [4, 5, 6]])\n>>> x.max()\n6\n>>> np.max(x)\n6\n>>> x.min()\n1\n>>> np.min(x)\n1\n>>> x.sum()\n21\n>>> np.sum(x)\n21\n>>> x.mean()\n3.5\n>>> np.mean(x)\n3.5\n>>> np.average(x)\n3.5\n>>> x.std()\n1.707825127659933\n>>> np.std(x)\n1.707825127659933\n```\n\n##### :white_check_mark: \u914d\u5217\u5185\u306e\u6700\u5927\u5024/\u6700\u5c0f\u5024\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6c42\u3081\u308b / Get the index of maximum and minimum value in an array.\n```pycon\n>>> x\narray([[1, 2, 3],\n       [4, 5, 6]])\n>>> x.argmax()\n5\n>>> x.argmin()\n0\n>>>\n>>> y = np.array([[1, 2, 3], [1, 2, 3]])\n>>> y\narray([[1, 2, 3],\n       [1, 2, 3]])\n>>> y.argmax()\n2\n>>> y.argmin()\n0\n```\n\n\u203b \u6700\u5927\u5024/\u6700\u5c0f\u5024\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u6700\u521d\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\u3002\n\n#### \u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u30b9\u30e9\u30a4\u30b9 / Indexing and Slicing\n\n##### :white_check_mark: \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3057\u3066\u3001\u914d\u5217\u304b\u3089\u8981\u7d20\u3092\u62bd\u51fa\u3059\u308b / Extract elements from an array by index\n\n```pycon\n>>> s = np.arange(13) ** 2\n>>> s\narray([  0,   1,   4,   9,  16,  25,  36,  49,  64,  81, 100, 121, 144])\n>>> s[0]\n0\n>>> s[11]\n121\n>>> s[0:3]\narray([0, 1, 4])\n>>> s[0], s[11], s[0:3]\n(0, 121, array([0, 1, 4]))\n>>> s[-4:]\narray([ 81, 100, 121, 144])\n>>> s[-4:-1]\narray([ 81, 100, 121])\n>>> s[-4::-1]\narray([81, 64, 49, 36, 25, 16,  9,  4,  1,  0])\n```\n\n##### :white_check_mark: \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6307\u5b9a\u3057\u3066\u30012\u6b21\u5143\u914d\u5217\u304b\u3089\u8981\u7d20\u3092\u62bd\u51fa\u3059\u308b / Extract elements from a two-dimensional array by index\n\n```pycon\n>>> r = np.arange(36)\n>>> r.resize((6, 6))\n>>> r\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35]])\n>>>\n>>> r[2, 2]\n14\n>>> r[3, 3:6]\narray([21, 22, 23])\n>>> r[3, 3:7]\narray([21, 22, 23])\n>>> r[:2, :-1]\narray([[ 0,  1,  2,  3,  4],\n       [ 6,  7,  8,  9, 10]])\n>>> r[:-1, ::2]\narray([[ 0,  2,  4],\n       [ 6,  8, 10],\n       [12, 14, 16],\n       [18, 20, 22],\n       [24, 26, 28]])\n```\n\n##### :white_check_mark: \u6761\u4ef6\u3092\u6307\u5b9a\u3057\u3066\u30012\u6b21\u5143\u914d\u5217\u304b\u3089\u8981\u7d20\u3092\u62bd\u51fa/\u7de8\u96c6\u3059\u308b / Extract and edit elements in a two-dimensional array by condition\n\n```pycon\n>>> r[r > 30]\narray([31, 32, 33, 34, 35])\n>>> r[r > 20]\narray([21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])\n>>> r[r > 20] = 20\n>>> r\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 20, 20, 20],\n       [20, 20, 20, 20, 20, 20],\n       [20, 20, 20, 20, 20, 20]])\n```\n\n#### \u914d\u5217\u306e\u53c2\u7167\u6e21\u3057\u3068\u30b3\u30d4\u30fc / Reference and copy of an array\n\n##### :white_check_mark: \u914d\u5217\u306e\u53c2\u7167\u6e21\u3057 / Reference of an array\n\n```pycon\n>>> r = np.arange(36)\n>>> r.resize((6, 6))\n>>> r\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35]])\n>>> \n>>> r2 = r[2:4, 2:4]\n>>> r2\narray([[14, 15],\n       [20, 21]])\n>>> \n>>> r2[:] = -1\n>>> r2\narray([[-1, -1],\n       [-1, -1]])\n>>> r\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, -1, -1, 16, 17],\n       [18, 19, -1, -1, 22, 23],\n       [24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35]])\n```\n\n\u203b `r2 = r[2:4, 2:4]`\u3067\u306f`r2`\u306b\u53c2\u7167\u3092\u6e21\u3057\u3066\u3044\u308b\u306e\u3067\u3001`r2`\u3092\u7de8\u96c6\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u3001`r`\u3092\u7de8\u96c6\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u308b\u3002\n\n##### :white_check_mark: \u914d\u5217\u306e\u30b3\u30d4\u30fc / Copy of an array\n\n```pycon\n>>> r = np.arange(36)\n>>> r.resize((6, 6))\n>>> r\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35]])\n>>> \n>>> r2 = r[2:4, 2:4].copy()\n>>> r2\narray([[14, 15],\n       [20, 21]])\n>>> \n>>> r2[:] = -1\n>>> r2\narray([[-1, -1],\n       [-1, -1]])\n>>> r\narray([[ 0,  1,  2,  3,  4,  5],\n       [ 6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35]])\n```\n\n\u203b `r2 = r[2:4, 2:4].copy()`\u3067\u306f`r`\u304b\u3089\u30b3\u30d4\u30fc\u3055\u308c\u305f\u65b0\u3057\u3044\u914d\u5217\u304c`r2`\u306b\u6e21\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001`r2`\u3068`r`\u306f\u5225\u500b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002`r2`\u3092\u7de8\u96c6\u3057\u3066\u3082`r`\u306b\u5f71\u97ff\u306f\u306a\u3044\u3002\n\n#### \u914d\u5217\u3067\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u51e6\u7406\u3092\u3059\u308b / Iterating over Arrays\n\n##### :white_check_mark: \u914d\u5217\u3092\u30a4\u30c6\u30ec\u30fc\u30c8\u3059\u308b / Iterate an array\n\n```pycon\n>>> r = np.random.randint(0, 10, (4, 3))\n>>> r\narray([[1, 6, 3],\n       [3, 6, 0],\n       [4, 9, 3],\n       [5, 9, 3]])\n>>>\n>>> for row in r:\n...     print(row)\n... \n[1 6 3]\n[3 6 0]\n[4 9 3]\n[5 9 3]\n>>>\n>>> for i, row in enumerate(r):\n...     print(i, ' : ', row)\n... \n0  :  [1 6 3]\n1  :  [3 6 0]\n2  :  [4 9 3]\n3  :  [5 9 3]\n```\n\n##### :white_check_mark: \u8907\u6570\u306e\u914d\u5217\u3092\u540c\u6642\u306b\u30a4\u30c6\u30ec\u30fc\u30c8\u3059\u308b / Iterate multiple arrays in same time\n```pycon\n>>> r\narray([[1, 6, 3],\n       [3, 6, 0],\n       [4, 9, 3],\n       [5, 9, 3]])\n>>> r2 = r ** 2\n>>> r2\narray([[ 1, 36,  9],\n       [ 9, 36,  0],\n       [16, 81,  9],\n       [25, 81,  9]])\n>>> for x, y, z in zip(r, r2, r):\n...     print(x, y, z)\n... \n[1 6 3] [ 1 36  9] [1 6 3]\n[3 6 0] [ 9 36  0] [3 6 0]\n[4 9 3] [16 81  9] [4 9 3]\n[5 9 3] [25 81  9] [5 9 3]\n```\n\n---\n\n## Pandas\n\n### Series\n\n##### :white_check_mark: \u30b9\u30ab\u30e9\u30fc\u5024\u306eSeries\u3092\u9806\u5e8f\u6709\u308a\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306eSeries\u306b\u5909\u63db\u3059\u308b / Convert a series from ratio scale to ordinal scale\n\n```pycon\n>>> s = pd.Series([168, 180, 174, 190, 170, 185, 179, 181, 175, 169, 182, 177, 180, 171])\n>>> \n>>> pd.cut(s, 3)\n0     (167.978, 175.333]\n1     (175.333, 182.667]\n2     (167.978, 175.333]\n3         (182.667, 190]\n4     (167.978, 175.333]\n5         (182.667, 190]\n6     (175.333, 182.667]\n7     (175.333, 182.667]\n8     (167.978, 175.333]\n9     (167.978, 175.333]\n10    (175.333, 182.667]\n11    (175.333, 182.667]\n12    (175.333, 182.667]\n13    (167.978, 175.333]\ndtype: category\nCategories (3, object): [(167.978, 175.333] < (175.333, 182.667] < (182.667, 190]]\n>>> \n>>> pd.cut(s, 3, labels=['Small', 'Medium', 'Large'])\n0      Small\n1     Medium\n2      Small\n3      Large\n4      Small\n5      Large\n6     Medium\n7     Medium\n8      Small\n9      Small\n10    Medium\n11    Medium\n12    Medium\n13     Small\ndtype: category\nCategories (3, object): [Small < Medium < Large]\n```\n\n### Dataframe\n\n#### \u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0 / Filtering\n\n\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3068\u3057\u3066[All-time Olympic Games medal table](https://en.wikipedia.org/wiki/All-time_Olympic_Games_medal_table)\u3092\u4f7f\u7528\u3002\n\n##### :white_check_mark: \u3042\u308b\u30ab\u30e9\u30e0\u306e\u5024\u304c\u6700\u5927\u3067\u3042\u308b\u884c\u306e\u30e9\u30d9\u30eb\u3092\u53d6\u5f97\u3059\u308b / Get a row label which column value is maximum\n\n```pycon\n>>> df[df['Gold'] == max(df['Gold'])].index[0]\n'United States'\n```\n\n##### :white_check_mark: Dataframe \u3092\u8907\u6570\u6761\u4ef6\u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b / Filter a dataframe with multiple conditions\n\n```pycon\n>>> df[(df['Gold'] > 0) & (df['Gold.1'] > 0)]\n```\n\n#### \u7d50\u5408 / Merging\n\n\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4e0b\u8a18\u3092\u4f7f\u7528\u3059\u308b\u3002 / Sample data is as follow:\n\n```pycon\n>>> import pandas as pd\n>>> staff_df = pd.DataFrame([{'Name': 'Kelly', 'Role': 'Director of HR'},\n...                          {'Name': 'Sally', 'Role': 'Course liasion'},\n...                          {'Name': 'James', 'Role': 'Grader'}])\n>>> staff_df = staff_df.set_index('Name')\n>>> student_df = pd.DataFrame([{'Name': 'James', 'School': 'Business'},\n...                            {'Name': 'Mike', 'School': 'Law'},\n...                            {'Name': 'Sally', 'School': 'Engineering'}])\n>>> student_df = student_df.set_index('Name')\n>>> \n>>> staff_df\n                 Role\nName                 \nKelly  Director of HR\nSally  Course liasion\nJames          Grader\n>>> \n>>> student_df\n            School\nName              \nJames     Business\nMike           Law\nSally  Engineering\n```\n\n##### :white_check_mark: \u5916\u90e8\u7d50\u5408 / Outer merging\n\n\u30b9\u30bf\u30c3\u30d5\u3082\u3057\u304f\u306f\u5b66\u751f\u3067\u3042\u308b\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b / Get data of who is student or staff\n\n```pycon\n>>> pd.merge(staff_df, student_df, how='outer', left_index=True, right_index=True)\n                 Role       School\nName                              \nJames          Grader     Business\nKelly  Director of HR          NaN\nMike              NaN          Law\nSally  Course liasion  Engineering\n```\n\n##### :white_check_mark: \u5185\u90e8\u7d50\u5408 / Inner merging\n\n\u30b9\u30bf\u30c3\u30d5\u3082\u3057\u304f\u306f\u5b66\u751f\u3067\u3042\u308b\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b / Get data of who is student and staff\n\n```pycon\n>>> pd.merge(staff_df, student_df, how='inner', left_index=True, right_index=True)\n                 Role       School\nName                              \nJames          Grader     Business\nSally  Course liasion  Engineering\n```\n\n##### :white_check_mark: \u5de6\u5916\u90e8\u7d50\u5408 / Left merging\n\n\u30b9\u30bf\u30c3\u30d5\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3002\u3082\u3057\u3001\u305d\u306e\u30b9\u30bf\u30c3\u30d5\u304c\u5b66\u751f\u3067\u3082\u3042\u308b\u5834\u5408\u306f\u3001School\u30c7\u30fc\u30bf\u3082\u53d6\u5f97\u3059\u308b\u3002 / Get data of who is staff. If the staff is also student, get the data of school.\n\n```pycon\n>>> pd.merge(staff_df, student_df, how='left', left_index=True, right_index=True)\n                 Role       School\nName                              \nKelly  Director of HR          NaN\nSally  Course liasion  Engineering\nJames          Grader     Business\n```\n\n##### :white_check_mark: \u53f3\u5916\u90e8\u7d50\u5408 / Right merging\n\n\u5b66\u751f\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3002\u3082\u3057\u3001\u305d\u306e\u5b66\u751f\u304c\u30b9\u30bf\u30c3\u30d5\u3067\u3082\u3042\u308b\u5834\u5408\u306f\u3001Role\u30c7\u30fc\u30bf\u3082\u53d6\u5f97\u3059\u308b\u3002 / Get data of who is student. If the student is also staff, get the data of role.\n\n```pycon\n>>> pd.merge(staff_df, student_df, how='right', left_index=True, right_index=True)\n                 Role       School\nName                              \nJames          Grader     Business\nMike              NaN          Law\nSally  Course liasion  Engineering\n```\n\n##### :white_check_mark: \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u4ee5\u5916\u306e\u30ab\u30e9\u30e0\u3092\u4f7f\u3063\u3066\u7d50\u5408\u3059\u308b / Merging not using index\n\n```pycon\n>>> products = pd.DataFrame([{'Product ID': 4109, 'Price': 5.0, 'Product': 'Suchi Roll'},\n...                          {'Product ID': 1412, 'Price': 0.5, 'Product': 'Egg'},\n...                          {'Product ID': 8931, 'Price': 1.5, 'Product': 'Bagel'}])\n>>> products = products.set_index('Product ID')\n>>> products\n            Price     Product\nProduct ID                   \n4109          5.0  Suchi Roll\n1412          0.5         Egg\n8931          1.5       Bagel\n>>> invoices = pd.DataFrame([{'Customer': 'Ali', 'Product ID': 4109, 'Quantity': 1},\n...                          {'Customer': 'Eric', 'Product ID': 1412, 'Quantity': 12},\n...                          {'Customer': 'Anda', 'Product ID': 8931, 'Quantity': 6},\n...                          {'Customer': 'Sam', 'Product ID': 4109, 'Quantity': 2}])\n>>> invoices\n  Customer  Product ID  Quantity\n0      Ali        4109         1\n1     Eric        1412        12\n2     Anda        8931         6\n3      Sam        4109         2\n>>>\n>>> pd.merge(products, invoices, how='right', left_index=True, right_on='Product ID')\n   Price     Product Customer  Product ID  Quantity\n0    5.0  Suchi Roll      Ali        4109         1\n1    0.5         Egg     Eric        1412        12\n2    1.5       Bagel     Anda        8931         6\n3    5.0  Suchi Roll      Sam        4109         2\n```\n\n##### :white_check_mark: \u8907\u6570\u306e\u30ab\u30e9\u30e0\u3092\u30ad\u30fc\u3068\u3057\u3066\u7d50\u5408\u3059\u308b / Merging with multiple keys\n\n```pycon\n>>> staff_df = pd.DataFrame([{'First Name': 'Kelly', 'Last Name': 'Desjardins', 'Role': 'Director of HR'},\n...                          {'First Name': 'Sally', 'Last Name': 'Brooks', 'Role': 'Course liasion'},\n...                          {'First Name': 'James', 'Last Name': 'Wilde', 'Role': 'Grader'}])\n>>> student_df = pd.DataFrame([{'First Name': 'James', 'Last Name': 'Hammond', 'School': 'Business'},\n...                            {'First Name': 'Mike', 'Last Name': 'Smith', 'School': 'Law'},\n...                            {'First Name': 'Sally', 'Last Name': 'Brooks', 'School': 'Engineering'}])\n>>> staff_df\n  First Name   Last Name            Role\n0      Kelly  Desjardins  Director of HR\n1      Sally      Brooks  Course liasion\n2      James       Wilde          Grader\n>>> student_df\n  First Name Last Name       School\n0      James   Hammond     Business\n1       Mike     Smith          Law\n2      Sally    Brooks  Engineering\n>>> pd.merge(staff_df, student_df, how='inner', left_on=['First Name','Last Name'], right_on=['First Name','Last Name'])\n  First Name Last Name            Role       School\n0      Sally    Brooks  Course liasion  Engineering\n```\n\n#### \u96c6\u7d04 / Grouping\n\n##### :white_check_mark: \u30ab\u30e9\u30e0A\u3067\u96c6\u7d04\u3057\u3066\u3001\u4ed6\u306e\u30ab\u30e9\u30e0\u306e\u5408\u8a08\u5024\u3092\u51fa\u3059 / Group by column 'A' and calculate sum of other columns\n\n```pycon\n>>> df.groupby('A').agg('sum')\n```\n\n```pycon\n>>> df.groupby('A').agg({'B': sum})\n```\n\n\n", "tags": ["Python", "numpy", "pandas"]}