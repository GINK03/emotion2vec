{"context": "\u3053\u3093\u306b\u3061\u306f\u3002\nA* search algorithm \u306e Javascript \u5b9f\u88c5\uff08\u4e0b\u8a18\uff09\u3092\u5229\u7528\u3057\u3001\u6700\u77ed\u7d4c\u8def\u63a2\u7d22\u3092\u884c\u3063\u3066\u307f\u307e\u3057\u305f1 2\u3002\uff08\u4eca\u56de\u306e\u5730\u56f3\u8868\u793a\u306f d3.mapzoom \u3092\u5229\u7528\u3002MapboxGL\u5229\u7528\u7248\u306f\u300cA* search algorithm\uff08\u30b0\u30e9\u30d5\u63a2\u7d22\u3001MapboxGL\uff09\u300d\uff09\n\n\nA* Search Algorithm in JavaScript (Updated) - Brian Grinstead\n\n\njavascript-astar (demo)\nhttps://github.com/bgrins/javascript-astar\n\n\n\n\u59cb\u70b9\u306f Paris\u3001\u7d42\u70b9\u306f Cannes \u306e\u6761\u4ef6\u3092\u4e0e\u3048\u308b\u3068\u4e0b\u8a18\u306e\u7d50\u679c\uff08\u304a\u3088\u3073\u8a08\u7b97\u6642\u9593\uff09\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\n\nastar.html\n<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n<meta charset=\"utf-8\" />\n<meta http-equiv=\"content-language\" content=\"ja\">\n<title>A-star</title>\n<!-- A* (A-star) route finding on a zoomable map using javascript-astar (astar.js) by Brian Grinstead and d3.mapzoom by Simon Jacobs\n- astar.js (https://github.com/bgrins/javascript-astar)\n- d3.mapzoom.js (http://bl.ocks.org/sdjacobs) -->\n<script src=\"astar.js\"></script>\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n<script src=\"http://d3js.org/d3.geo.tile.v0.min.js\"></script>\n<script src=\"d3.mapzoom.js\"></script>\n<style>\ncircle {\n  fill: #ccc;\n  stroke: #333;\n  stroke-width: 1.5px;\n}\n</style>\n</head>\n<body>\n<div id=\"canvas\"></div>\n<script>\n  var width = 800, height = 600;\n  var MILE=1609, KM=1000, RE=6371*KM, DEGREE=Math.PI/180;\n  var query, nodes, links, mapCenter, mapScale, unitDistance=KM;\n\n  mapCenter = [8.0, 47.0], mapScale = 1800;\n  query = {\"start\": \"Paris\", \"end\": \"Cannes\"};\n  nodes = [\n    {name: \"Paris\", lon: 2.3508, lat: 48.8567},\n    {name: \"Lyon\", lon: 4.84, lat: 45.76},\n    {name: \"Marseille\", lon: 5.37, lat: 43.2964},\n    {name: \"Bordeaux\", lon: -0.58, lat: 44.84},\n    {name: \"Cannes\", lon: 7.0128, lat: 43.5513},\n    {name: \"Toulouse\", lon: 1.444, lat: 43.6045},\n    {name: \"Reims\", lon: 4.0347, lat: 49.2628}\n  ];\n  links = [\n    {source:\"Paris\", target:\"Lyon\", distance:464},\n    {source:\"Paris\", target:\"Bordeaux\", distance:582},\n    {source:\"Paris\", target:\"Reims\", distance:144},\n    {source:\"Lyon\", target:\"Marseille\", distance:314},\n    {source:\"Marseille\", target:\"Cannes\", distance:175},\n    {source:\"Marseille\", target:\"Toulouse\", distance:403},\n    {source:\"Bordeaux\", target:\"Toulouse\", distance:245}\n  ];\n\n  links = links.concat(createReverseLinks(links));\n  var result = astarRouting(nodes, links);\n\n  document.write(result.route.join(', ')+\" (\"+String(result.calculationTime)+\" ms)<br>\");\n\n  markRoute(result.path);\n  drawMap(nodes, links);\n\n\n  function createReverseLinks(links) {\n    return links.map(function(d) {return {\"source\":d.target, \"target\":d.source, \"distance\":d.distance}})\n  }\n  function markRoute(routePath) {\n    routePath.forEach(function(i) {links[i.index][\"route\"]=true;});\n  }\n\n  function astarRouting(nodes, links) {\n\n    function GeoGraph(nodes, links) {\n      this.nodes = {};\n      this.links = links;\n      for (var i = 0; i < nodes.length; ++i) {\n        var node = nodes[i],\n            obj = new GeoNode(node.name, +node.lon, +node.lat);\n        this.nodes[obj.name] = obj;\n      }\n      this.init();\n    }\n\n    GeoGraph.prototype.init = function() {\n      this.dirtyNodes = [];\n      for (var k in this.nodes) {\n        astar.cleanNode(this.nodes[k]);\n      }\n    };\n    GeoGraph.prototype.cleanDirty = Graph.prototype.cleanDirty;\n    GeoGraph.prototype.markDirty = Graph.prototype.markDirty;\n\n    GeoGraph.prototype.neighbors = function(node) {\n      var nodes=this.nodes, \n          neighs=createNeighbors(node,this.links);\n      return neighs.map(function(name) {return nodes[name];});\n    };\n\n    createNeighbors = function(node, links) {\n    var neighs = node.neighbors;\n    if (!Object.keys(neighs).length) {\n      for (var n,i=links.length-1; i>=0; i--) {\n        if (links[i].source==node.name) {\n          n=links[i].target;\n          neighs[n] = new Neighbor(i, links[i].distance*unitDistance);\n        }\n      }\n      node.neighbors = neighs;    \n      }\n    return Object.keys(neighs);\n    };\n\n    function Neighbor(index, cost) {\n      this.index = index;\n      this.cost = cost;\n    }\n\n    function GeoNode(name, lon, lat) {\n      this.name = name;\n      this.lon = lon*DEGREE;\n      this.lat = lat*DEGREE;\n      this.neighbors = {};\n    }\n\n    GeoNode.prototype.weight = 1;\n    GeoNode.prototype.isWall = function() {\n      return this.weight === 0;\n    };\n    GeoNode.prototype.getCost = function(nodeSource) {\n      return nodeSource.neighbors[this.name].cost;\n    };\n\n    GeoNode.prototype.getLinks = function(node) {\n      return this.neighbors[node.name];\n    };\n\n    var GeoDistance = function(p, q) {\n      var y=p.lat-q.lat, x=(p.lon-q.lon)*Math.cos((p.lat+q.lat)/2)\n      return Math.sqrt(x*x+y*y)*RE;\n    };\n\n    var graph = new GeoGraph(nodes, links);\n    var startEnd = [\"start\", \"end\"].map(function(x) {return graph.nodes[query[x]];});\n    var sTime = new Date();\n    var result = astar.search(graph, startEnd[0], startEnd[1], {heuristic: GeoDistance});\n    var deltaTime = new Date() - sTime;\n    var route = [query[\"start\"]].concat(result.map(function(x) {return x.name}));\n    var path = result.map(function(x) {return x.parent.getLinks(x);});\n    return {\"route\": route, \"path\": path, \"calculationTime\": deltaTime};\n  }\n\n  function drawMap(nodes, links) {\n    var mapzoom = d3.mapzoom()\n        .center(mapCenter)\n        .scale(mapScale);\n    var svg = d3.select(\"body\").append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .call(mapzoom);\n    var frame = svg.append(\"g\");\n\n    mapzoom.addTileLayer(frame, \"tiles.mapbox.com/v4/mapbox.light/\", \".png\");\n\n    var projection = mapzoom.projection(), nodesByName = {};\n\n    nodes.forEach(function(d) {\n      d.coord = [+d.lon, +d.lat]\n      nodesByName[d.name] = d;\n      d.links = [];\n    });\n    links.forEach(function(d) {\n      d.source = nodesByName[d.source]\n      d.target = nodesByName[d.target]\n      d.distance = +d.distance;\n    });\n\n    var link = svg.append(\"g\").selectAll(\".link\")\n      .data(links)\n      .enter().append(\"path\")\n      .attr(\"class\", \"link\")\n      .style(\"stroke\", \"#00c000\")\n      .style(\"stroke-width\", 1);\n\n    var node = svg.append(\"g\").selectAll(\".node\")\n        .data(nodes)\n        .enter().append(\"circle\")\n        .attr(\"class\", \"node\")\n        .attr(\"r\", 3)\n        .attr(\"fill\", \"grey\")\n\n    node.append(\"title\")\n        .text(function(d) { return d.name; });\n\n    midPoint = function(a,b) {\n      var n=7;\n      return [(a[0]*n+b[0])/(n+1),(a[1]*n+b[1])/(n+1)];\n    }\n\n    mapzoom.addLayer(function() {\n        node\n            .each(function(d) {d.proj = projection(d.coord);})\n            .attr(\"transform\", function(d) { return \"translate(\" + d.proj + \")\" })\n        link\n            .attr(\"d\", function(d) { return \"M \" + d.source.proj + \" L \" + midPoint(d.source.proj,d.target.proj) + \" L \" + d.target.proj })\n            .attr(\"marker-mid\", function(d) {if(d.route===true) return 'url(#arrowhead)';});\n     });\n\n    svg.append('defs').append('marker')\n        .attr({'id':'arrowhead',\n               'viewBox':'0 -5 10 10',\n               'refX':0,\n               'refY':0,\n               'orient':'auto',\n               'markerWidth':10,\n               'markerHeight':10,\n               'xoverflow':'visible'})\n        .append('svg:path')\n            .attr('d', 'M 2,0 L 0,-3 L 10,0 L 0,3')\n            .attr('fill', '#0080ff');\n  }\n</script>\n</body>\n</html>\n\n\n\n\n\n\npathfinding (wikipedia) or route finding\u3002\u00a0\u21a9\n\n\n\u300cAStar.js(A*\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0)\u3092\u4f7f\u3063\u3066\u307f\u305f\u300d\u00a0\u21a9\n\n\n\n\u3053\u3093\u306b\u3061\u306f\u3002\n[A* search algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm#Variants_of_A.2A) \u306e Javascript \u5b9f\u88c5\uff08\u4e0b\u8a18\uff09\u3092\u5229\u7528\u3057\u3001\u6700\u77ed\u7d4c\u8def\u63a2\u7d22\u3092\u884c\u3063\u3066\u307f\u307e\u3057\u305f[^1] [^2]\u3002\uff08\u4eca\u56de\u306e\u5730\u56f3\u8868\u793a\u306f [d3.mapzoom](http://bl.ocks.org/sdjacobs) \u3092\u5229\u7528\u3002MapboxGL\u5229\u7528\u7248\u306f\u300c[A* search algorithm\uff08\u30b0\u30e9\u30d5\u63a2\u7d22\u3001MapboxGL\uff09](http://qiita.com/kkdd/items/21cdc9611fd7e85f75ec#_reference-0f2d4e6f01a65575c77c])\u300d\uff09\n\n- [A* Search Algorithm in JavaScript (Updated)](http://www.briangrinstead.com/blog/astar-search-algorithm-in-javascript-updated) - Brian Grinstead\n - [javascript-astar (demo)] (http://bgrins.github.io/javascript-astar/demo)\n - https://github.com/bgrins/javascript-astar\n\n\u59cb\u70b9\u306f Paris\u3001\u7d42\u70b9\u306f Cannes \u306e\u6761\u4ef6\u3092\u4e0e\u3048\u308b\u3068\u4e0b\u8a18\u306e\u7d50\u679c\uff08\u304a\u3088\u3073\u8a08\u7b97\u6642\u9593\uff09\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n[^1]: [pathfinding](https://en.wikipedia.org/wiki/Pathfinding) (wikipedia) or route finding\u3002\n[^2]: \u300c[AStar.js(A*\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0)\u3092\u4f7f\u3063\u3066\u307f\u305f](http://qiita.com/YFukuyama/items/bd11950d59f7680bee53)\u300d\n[^3]: \n\n<img width=\"457\" alt=\"astar.jpg\" src=\"https://qiita-image-store.s3.amazonaws.com/0/54617/f6a9a67f-1934-a514-7b0a-37331940ae2d.jpeg\">\n\n```astar.html\n<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n<meta charset=\"utf-8\" />\n<meta http-equiv=\"content-language\" content=\"ja\">\n<title>A-star</title>\n<!-- A* (A-star) route finding on a zoomable map using javascript-astar (astar.js) by Brian Grinstead and d3.mapzoom by Simon Jacobs\n- astar.js (https://github.com/bgrins/javascript-astar)\n- d3.mapzoom.js (http://bl.ocks.org/sdjacobs) -->\n<script src=\"astar.js\"></script>\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n<script src=\"http://d3js.org/d3.geo.tile.v0.min.js\"></script>\n<script src=\"d3.mapzoom.js\"></script>\n<style>\ncircle {\n  fill: #ccc;\n  stroke: #333;\n  stroke-width: 1.5px;\n}\n</style>\n</head>\n<body>\n<div id=\"canvas\"></div>\n<script>\n  var width = 800, height = 600;\n  var MILE=1609, KM=1000, RE=6371*KM, DEGREE=Math.PI/180;\n  var query, nodes, links, mapCenter, mapScale, unitDistance=KM;\n\n  mapCenter = [8.0, 47.0], mapScale = 1800;\n  query = {\"start\": \"Paris\", \"end\": \"Cannes\"};\n  nodes = [\n    {name: \"Paris\", lon: 2.3508, lat: 48.8567},\n    {name: \"Lyon\", lon: 4.84, lat: 45.76},\n    {name: \"Marseille\", lon: 5.37, lat: 43.2964},\n    {name: \"Bordeaux\", lon: -0.58, lat: 44.84},\n    {name: \"Cannes\", lon: 7.0128, lat: 43.5513},\n    {name: \"Toulouse\", lon: 1.444, lat: 43.6045},\n    {name: \"Reims\", lon: 4.0347, lat: 49.2628}\n  ];\n  links = [\n    {source:\"Paris\", target:\"Lyon\", distance:464},\n    {source:\"Paris\", target:\"Bordeaux\", distance:582},\n    {source:\"Paris\", target:\"Reims\", distance:144},\n    {source:\"Lyon\", target:\"Marseille\", distance:314},\n    {source:\"Marseille\", target:\"Cannes\", distance:175},\n    {source:\"Marseille\", target:\"Toulouse\", distance:403},\n    {source:\"Bordeaux\", target:\"Toulouse\", distance:245}\n  ];\n\n  links = links.concat(createReverseLinks(links));\n  var result = astarRouting(nodes, links);\n\n  document.write(result.route.join(', ')+\" (\"+String(result.calculationTime)+\" ms)<br>\");\n\n  markRoute(result.path);\n  drawMap(nodes, links);\n\n\n  function createReverseLinks(links) {\n    return links.map(function(d) {return {\"source\":d.target, \"target\":d.source, \"distance\":d.distance}})\n  }\n  function markRoute(routePath) {\n    routePath.forEach(function(i) {links[i.index][\"route\"]=true;});\n  }\n  \n  function astarRouting(nodes, links) {\n  \n    function GeoGraph(nodes, links) {\n      this.nodes = {};\n      this.links = links;\n      for (var i = 0; i < nodes.length; ++i) {\n        var node = nodes[i],\n            obj = new GeoNode(node.name, +node.lon, +node.lat);\n        this.nodes[obj.name] = obj;\n      }\n      this.init();\n    }\n  \n    GeoGraph.prototype.init = function() {\n      this.dirtyNodes = [];\n      for (var k in this.nodes) {\n        astar.cleanNode(this.nodes[k]);\n      }\n    };\n    GeoGraph.prototype.cleanDirty = Graph.prototype.cleanDirty;\n    GeoGraph.prototype.markDirty = Graph.prototype.markDirty;\n  \n    GeoGraph.prototype.neighbors = function(node) {\n      var nodes=this.nodes, \n          neighs=createNeighbors(node,this.links);\n      return neighs.map(function(name) {return nodes[name];});\n    };\n  \n    createNeighbors = function(node, links) {\n    var neighs = node.neighbors;\n    if (!Object.keys(neighs).length) {\n      for (var n,i=links.length-1; i>=0; i--) {\n        if (links[i].source==node.name) {\n          n=links[i].target;\n          neighs[n] = new Neighbor(i, links[i].distance*unitDistance);\n        }\n      }\n      node.neighbors = neighs;    \n      }\n    return Object.keys(neighs);\n    };\n  \n    function Neighbor(index, cost) {\n      this.index = index;\n      this.cost = cost;\n    }\n  \n    function GeoNode(name, lon, lat) {\n      this.name = name;\n      this.lon = lon*DEGREE;\n      this.lat = lat*DEGREE;\n      this.neighbors = {};\n    }\n  \n    GeoNode.prototype.weight = 1;\n    GeoNode.prototype.isWall = function() {\n      return this.weight === 0;\n    };\n    GeoNode.prototype.getCost = function(nodeSource) {\n      return nodeSource.neighbors[this.name].cost;\n    };\n  \n    GeoNode.prototype.getLinks = function(node) {\n      return this.neighbors[node.name];\n    };\n  \n    var GeoDistance = function(p, q) {\n      var y=p.lat-q.lat, x=(p.lon-q.lon)*Math.cos((p.lat+q.lat)/2)\n      return Math.sqrt(x*x+y*y)*RE;\n    };\n  \n    var graph = new GeoGraph(nodes, links);\n    var startEnd = [\"start\", \"end\"].map(function(x) {return graph.nodes[query[x]];});\n    var sTime = new Date();\n    var result = astar.search(graph, startEnd[0], startEnd[1], {heuristic: GeoDistance});\n    var deltaTime = new Date() - sTime;\n    var route = [query[\"start\"]].concat(result.map(function(x) {return x.name}));\n    var path = result.map(function(x) {return x.parent.getLinks(x);});\n    return {\"route\": route, \"path\": path, \"calculationTime\": deltaTime};\n  }\n  \n  function drawMap(nodes, links) {\n    var mapzoom = d3.mapzoom()\n        .center(mapCenter)\n        .scale(mapScale);\n    var svg = d3.select(\"body\").append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .call(mapzoom);\n    var frame = svg.append(\"g\");\n    \n    mapzoom.addTileLayer(frame, \"tiles.mapbox.com/v4/mapbox.light/\", \".png\");\n    \n    var projection = mapzoom.projection(), nodesByName = {};\n    \n    nodes.forEach(function(d) {\n      d.coord = [+d.lon, +d.lat]\n      nodesByName[d.name] = d;\n      d.links = [];\n    });\n    links.forEach(function(d) {\n      d.source = nodesByName[d.source]\n      d.target = nodesByName[d.target]\n      d.distance = +d.distance;\n    });\n  \n    var link = svg.append(\"g\").selectAll(\".link\")\n      .data(links)\n      .enter().append(\"path\")\n      .attr(\"class\", \"link\")\n      .style(\"stroke\", \"#00c000\")\n      .style(\"stroke-width\", 1);\n  \n    var node = svg.append(\"g\").selectAll(\".node\")\n        .data(nodes)\n        .enter().append(\"circle\")\n        .attr(\"class\", \"node\")\n        .attr(\"r\", 3)\n        .attr(\"fill\", \"grey\")\n  \n    node.append(\"title\")\n        .text(function(d) { return d.name; });\n  \n    midPoint = function(a,b) {\n      var n=7;\n      return [(a[0]*n+b[0])/(n+1),(a[1]*n+b[1])/(n+1)];\n    }\n\n    mapzoom.addLayer(function() {\n        node\n            .each(function(d) {d.proj = projection(d.coord);})\n            .attr(\"transform\", function(d) { return \"translate(\" + d.proj + \")\" })\n        link\n            .attr(\"d\", function(d) { return \"M \" + d.source.proj + \" L \" + midPoint(d.source.proj,d.target.proj) + \" L \" + d.target.proj })\n            .attr(\"marker-mid\", function(d) {if(d.route===true) return 'url(#arrowhead)';});\n     });\n  \n    svg.append('defs').append('marker')\n        .attr({'id':'arrowhead',\n               'viewBox':'0 -5 10 10',\n               'refX':0,\n               'refY':0,\n               'orient':'auto',\n               'markerWidth':10,\n               'markerHeight':10,\n               'xoverflow':'visible'})\n        .append('svg:path')\n            .attr('d', 'M 2,0 L 0,-3 L 10,0 L 0,3')\n            .attr('fill', '#0080ff');\n  }\n</script>\n</body>\n</html>\n```\n", "tags": ["JavaScript", "GIS", "d3.js", "\u30b0\u30e9\u30d5\u63a2\u7d22", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}