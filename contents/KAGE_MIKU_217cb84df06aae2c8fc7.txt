{"tags": ["lisp", "Scheme", "ProjectEuler", "Racket"], "context": "\u3053\u306e\u8a18\u4e8b\u306fLisp Advent Calendar 2016\u306e3\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\uff0e\n2\u65e5\u76ee\u306e\u8a18\u4e8b\u306f\u300cR7RS-large\u306b\u3064\u3044\u3066\u300d\u3067\u3057\u305f\uff0e\n\u672c\u8a18\u4e8b\u306fProject Euler\u306eProblem1\u301c5\u306e\u30cd\u30bf\u30d0\u30ec\u3092\u542b\u307f\u307e\u3059\uff0e\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\n\n\u521d\u3081\u306b\n\u4eca\u307e\u3067LISP\u306f\u98df\u308f\u305a\u5acc\u3044\u7684\u306b\u656c\u9060\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\uff0c\u6700\u8fd1\u5927\u5b66\u306e\u6388\u696d\u3067Scheme\u3092\u4f7f\u3046\u6a5f\u4f1a\u304c\u3042\u308a\uff0c\u3044\u3056\u3061\u3083\u3093\u3068\u52c9\u5f37\u3057\u3066\u307f\u308b\u3068\u7d50\u69cb\u9762\u767d\u304f\u3066\uff0c\u305a\u3076\u305a\u3076\u3068\u6cbc\u306b\u30cf\u30de\u3063\u3066\u3044\u304f\u97f3\u304c\u805e\u3053\u3048\u3066\u304d\u307e\u3057\u305f\uff0e\u3061\u306a\u307f\u306b\u6700\u8fd1LoL\u672c\u8cb7\u3063\u3061\u3083\u3044\u307e\u3057\u305f\ud83d\ude09\nScheme\u3092\u6700\u521d\u306b\u89e6\u3063\u3066\u304b\u30891\u30f6\u6708\u304f\u3089\u3044\u7d4c\u3063\u305f\u3042\u305f\u308a\u3067\u306a\u3093\u3068\u306a\u304fProject Euler\u3092\u89e3\u3044\u3066\u3044\u305f\u306e\u3067\uff0c\u3053\u306e\u8a18\u4e8b\u3067\u306f\u305d\u306e\u30b3\u30fc\u30c9\u7247\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u306a\u304a\uff0c\u672c\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9\u306f\u5168\u3066GitHub\u306b\u3042\u3052\u3066\u3044\u307e\u3059(\u4eca\u5f8c\u3082\u7d99\u7d9a\u7684\u306bcommit\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3067\u3059)\uff0e\n\nkagemiku/project-euler\n\n(\u30ab\u30ec\u30f3\u30c0\u30fc\u306b\u767b\u9332\u3057\u3066\u304b\u3089\u6628\u5e74\u306eLisp Advent Calendar\u3092\u898b\u305f\u306e\u3067\u3059\u304c\uff0c\u305d\u306e\u3042\u307e\u308a\u306e\u30ec\u30d9\u30eb\u306e\u9ad8\u3055\u306b\u767b\u9332\u3057\u3066\u3057\u307e\u3063\u305f\u3053\u3068\u3092\u82e5\u5e72\u5f8c\u6094\u3057\u3066\u3044\u305f\u306e\u306f\u3053\u3053\u3060\u3051\u306e\u79d8\u5bc6\u3067\u3059)\n\nProject Euler\u3068\u306f\nProject Euler\u3068\u306f\uff0c\u304b\u306a\u308a\u3056\u3063\u304f\u308a\u8aac\u660e\u3059\u308b\u3068\uff0c\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u89e3\u304f\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u305f\u6570\u5b66\u7684\u306a\u554f\u984c\u96c6\u300d\u3067\u3059\uff0e\n\u6642\u9593\u304c\u3067\u304d\u305f\u3068\u304d\u306b\u30b3\u30c4\u30b3\u30c4\u7684\u306a\u611f\u3058\u3067\u3084\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u7b46\u8005\u306f\u307e\u30605\u554f\u307b\u3069\u3057\u304b\u89e3\u3051\u3066\u3044\u307e\u305b\u3093\uff0e\n\n\u5fc3\u306e\u3069\u3053\u304b\u306b\u7559\u3081\u3066\u304a\u3044\u3066\u6b32\u3057\u3044\u3053\u3068\n\n\u7b46\u8005\u306f\u6570\u5f31\n\u7b46\u8005\u306f\u7af6\u30d7\u30ed\u5f31\u8005\n\u7b46\u8005\u306fScheme\u5f31\u8005(\u6545\u306b\u8eca\u8f2a\u306e\u518d\u767a\u660e\u306a\u95a2\u6570\u3092\u66f8\u3044\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059)\n\u51e6\u7406\u7cfb\u306fRacket\u3092\u4f7f\u7528\n\u554f\u984c\u6587\u306f\u3086\u308b\u3075\u308f\u548c\u8a33\n\n\u30de\u30b5\u30ab\u30ea\u542b\u3080\u30a2\u30c9\u30d0\u30a4\u30b9\u306f\u5927\u6b53\u8fce\u3067\u3059(\u6ce3\u3044\u3066\u559c\u3073\u307e\u3059\ud83d\ude02)\n\n\n\u30b3\u30fc\u30c9\n\n[Problem 1] Multiples of 3 and 5\n\n1000\u672a\u6e80\u306e\u6574\u6570\u3067\uff0c3\u307e\u305f\u306f5\u306e\u500d\u6570\u3067\u3042\u308b\u5024\u3092\u5168\u3066\u8db3\u3057\u5408\u308f\u305b\u308b\u3068\u3044\u304f\u3089\u304b?\n\n#lang racket\n\n; x\u304cy\u306e\u500d\u6570\u306a\u3089#t\n(define (divisor? x y)\n  (= (remainder x y) 0))\n\n; [bgn, end)\u306e\u7bc4\u56f2\u3067\u6574\u6570\u5217\u3092\u751f\u6210\n(define (range-list bgn end)\n  (if (>= bgn end)\n    '()\n    (cons bgn (range-list (+ bgn 1) end))))\n\n; \u30bd\u30eb\u30d0\n; num\u672a\u6e80\u306e\u6574\u6570\u3067\uff0c3\u307e\u305f\u306f5\u306e\u500d\u6570\u3067\u3042\u308b\u5024\u306esum\u3092\u8fd4\u5374\n(define (solver num)\n  (apply + (filter\n             (lambda (x) (or (divisor? x 3) (divisor? x 5)))\n             (range-list 2 num))))\n\n(solver 1000)\n\nProblem 1\u306f\u3068\u308a\u3042\u3048\u305a\u3084\u308b\u3060\u3051\u7684\u306a\u554f\u984c\u3067\u3059\uff0e\n\n[Problem 2] Even Fibonacci numbers\n\n4,000,000\u3092\u8d85\u3048\u306a\u3044\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u9805\u306e\u4e2d\u304b\u3089\uff0c\u5076\u6570\u3067\u3042\u308b\u9805\u3092\u5168\u3066\u8db3\u3057\u5408\u308f\u305b\u308b\u3068\u3044\u304f\u3089\u304b?\n\n#lang racket\n\n; \u30bd\u30eb\u30d0\n; num\u4ee5\u4e0b\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u5404\u9805\u306e\u5185\uff0c\u5076\u6570\u3067\u3042\u308b\u9805\u306esum\u3092\u8fd4\u5374\n(define (solver num)\n  (let loop((n1 1) (n2 2) (ret 2))\n    (let ((n3 (+ n1 n2)))\n      (cond\n        ((> n3 num) ret)\n        ((even? n3) (loop n2 n3 (+ ret n3)))\n        (else (loop n2 n3 ret))))))\n\n(solver 4000000)\n\n\u30eb\u30fc\u30d7\u4f7f\u3063\u3066\u611a\u76f4\u306b\u89e3\u304d\u307e\u3057\u305f\uff0e\u307e\u3060\u9045\u5ef6\u30ea\u30b9\u30c8\u3068\u304b\u77e5\u3089\u306a\u3044\u6642\u671f\u306b\u66f8\u3044\u305f\u3082\u306e\u306a\u306e\u3067\u6539\u5584\u306e\u4f59\u5730\u306f\u3081\u3061\u3083\u304f\u3061\u3083\u3042\u308a\u305d\u3046\uff0e\n\n[Problem 3] Largest prime factor\n\n600851475143\u306e\u7d20\u56e0\u6570\u306e\u4e2d\u3067\u6700\u3082\u5927\u304d\u3044\u7d20\u56e0\u6570\u306f\u3044\u304f\u3089\u304b?\n\n#lang racket\n\n; x\u304cy\u306e\u500d\u6570\u306a\u3089#t\n(define (divisor? x y)\n  (= (remainder x y) 0))\n\n; \u30bd\u30eb\u30d0\n; num\u306e\u7d20\u56e0\u6570\u306e\u6700\u5927\u5024\u3092\u8fd4\u5374\n(define (solver num)\n  (let loop((x num) (factor 2))\n    (cond\n      ((= x 1) factor)\n      ((divisor? x factor) (loop (/ x factor) factor))\n      (else (loop x (+ factor 1))))))\n\n(solver 600851475143)\n\n\u540c\u3058\u5024\u3067\u5272\u308a\u5207\u308c\u306a\u304f\u306a\u308b\u307e\u3067\u5272\u308a\u7d9a\u3051\u3066\uff0c\u5272\u308c\u5207\u308c\u306a\u304f\u306a\u3063\u305f\u3089\u9664\u6570\u306e\u5024\u3092\u5897\u3084\u3059\u611f\u3058\u3067\u3059\uff0e\n\n[Problem 4] Largest palindrome product\n\n3\u6841\u306e\u6574\u6570\u30922\u3064\u639b\u3051\u5408\u308f\u305b\u3066\u3067\u304d\u308b\u56de\u6587\u6570(9009\u307f\u305f\u3044\u306b\u4e0a\u4f4d\u6841\u304b\u3089\u898b\u3066\u3082\u4e0b\u4f4d\u6841\u304b\u3089\u307f\u3066\u3082\u6570\u5b57\u306e\u4e26\u3073\u304c\u540c\u3058\u6570)\u306e\u3046\u3061\uff0c\u6700\u5927\u306e\u5024\u306f\u3044\u304f\u3089\u304b?\n\n#lang racket\n\n; \u6574\u6570\u3067\u3042\u308bnumber\u3092\u5404\u6841\u306e\u5024\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db( 123 -> (1 2 3) )\n(define (number->list number)\n  (string->list (number->string number)))\n\n; num\u304c\u56de\u6587\u6570\u306a\u3089#t\n(define (palindromic? num)\n  (let loop((ls0 (number->list num)) (ls1 (reverse (number->list num))) (cnt (truncate (/ (length (number->list num)) 2))))\n    (cond\n      ((<= cnt 0) #t)\n      ((eqv? (car ls0) (car ls1)) (loop (cdr ls0) (cdr ls1) (- cnt 1)))\n      (else #f))))\n\n; max-num\u4ee5\u4e0b\u306e2\u3064\u306e\u6574\u6570\u306e\u7a4d\u3092\u5168\u3066\u8a08\u7b97\u3057\u3066\u30ea\u30b9\u30c8\u306b\u5165\u308c\u3066\u8fd4\u5374\n(define (gen-muls max-num)\n  (let loop((x max-num) (y max-num) (ret '()))\n    (cond\n      ((= y 0) ret)\n      ((= x 0) (loop max-num (- y 1) ret))\n      (else (loop (- x 1) y (cons (* x y) ret))))))\n\n; \u30bd\u30eb\u30d0\n; max-num\u4ee5\u4e0b\u306e2\u3064\u306e\u6574\u6570\u3092\u639b\u3051\u5408\u308f\u305b\u3066\u3067\u304d\u308b\u6700\u5927\u306e\u56de\u6587\u6570\u3092\u8fd4\u5374\n(define (solver max-num)\n  (apply max (filter palindromic? (gen-muls max-num))))\n\n(solver 999)\n\n\u3053\u306e\u3042\u305f\u308a\u304b\u3089\u3061\u3087\u3063\u3068\u96e3\u3057\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f\uff0e\u305d\u3057\u3066\u30b3\u30fc\u30c9\u3082\u7d20\u76f4\u306b\u66f8\u304d\u3059\u304e\u3066\u3044\u3066\u306a\u304b\u306a\u304b\u306b\u3072\u3069\u3044\u3067\u3059\u2026   $O(mn^2)$\u306f\u3068\u3063\u3066\u3082\u30e4\u30d0\u30a4\uff0e\n\n[Problem 5] Smallest multiple\n\n1\u304b\u308920\u306e\u9593\u306e\u6574\u6570\u5168\u3066\u3067\u5272\u308a\u5207\u308b\u3053\u3068\u306e\u3067\u304d\u308b\u6700\u5c0f\u306e\u6574\u6570\u306f\u3044\u304f\u3089\u304b?\n\n#lang racket\n\n(require scheme/mpair)\n\n; x\u304cy\u306e\u500d\u6570\u306a\u3089#t\n(define (divisor? x y)\n  (= (remainder x y) 0))\n\n; [bgn, end)\u306e\u7bc4\u56f2\u3067mutable\u306a\u6574\u6570\u5217\u3092\u751f\u6210\n(define (mrange-list bgn end)\n  (if (>= bgn end)\n    '()\n    (mcons bgn (mrange-list (+ bgn 1) end))))\n\n; \u30ea\u30b9\u30c8mls\u306eidx\u756a\u76ee\u306e\u5024\u3092val\u306b\u5909\u66f4\n(define (change-elem! mls idx val)\n  (if (<= idx 0)\n    (set-mcar! mls val)\n    (change-elem! (mcdr mls) (- idx 1) val)))\n\n; change-elem!\u3092step\u306e\u5e45\u3067\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\n(define (change-elems! mls bgn step val)\n  (when (and (< bgn (mlength mls)) (>= step 0))\n    (change-elem! mls bgn val)\n    (change-elems! mls (+ bgn step) step val)))\n\n; max-prime\u4ee5\u4e0b\u306e\u7d20\u6570\u5217\u3092\u751f\u6210\n(define (gen-primes max-prime)\n  (let loop((prime 2) (ret (mrange-list 2 (+ max-prime 1))))\n    (cond\n      ((>= prime max-prime) (filter number? (mlist->list ret)))\n      ((number? (mlist-ref ret (- prime 2))) (change-elems! ret (+ (- prime 2) prime) prime #f) (loop (+ prime 1) ret))\n      (else (loop (+ prime 1) ret)))))\n\n; num\u306e\u7d20\u56e0\u6570\u5217\u3092\u751f\u6210\n(define (gen-factors num primes)\n  (let loop((n num) (factors primes) (ret '(1)))\n    (cond\n      ((= n 1) (reverse ret))\n      ((divisor? n (car factors)) (loop (/ n (car factors)) factors (cons (car factors) ret)))\n      (else (loop n (cdr factors) ret)))))\n\n; \u30ea\u30b9\u30c8ls\u4e2d\u306eval\u306e\u500b\u6570\u3092\u8fd4\u5374\n(define (count-vals ls val)\n  (count (lambda (x) (= x val)) ls))\n\n; \u7d20\u56e0\u6570\u5217\u3092\u5404\u7d20\u56e0\u6570\u306e\u51aa\u6570\u5217\u306b\u5909\u63db\n; e.g. (2 2 2 3 5 5 11 11) -> (3 1 2 0 2)\n(define (factors->powers factors primes)\n  (if (null? primes)\n    '()\n    (cons (count-vals factors (car primes)) (factors->powers factors (cdr primes)))))\n\n; \u30bd\u30eb\u30d0\n; 2\u304b\u3089max-num\u306e\u9593\u306e\u6574\u6570\u5168\u3066\u3067\u5272\u308a\u5207\u308b\u3053\u3068\u306e\u3067\u304d\u308b\u6700\u5c0f\u306e\u5024\u3092\u8fd4\u5374\n(define (solver max-num)\n  (let ((primes (gen-primes max-num)))\n    (let loop((num 2) (ret (make-list (length primes) 0)))\n      (if (> num max-num)\n        (apply * (map expt primes ret))\n        (loop (+ num 1) (map max ret (factors->powers (gen-factors num primes) primes)))))))\n\n(solver 20)\n\n\u3060\u3044\u3076\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3061\u3083\u3063\u3066\u307e\u3059\u306d\uff0e(\u6050\u3089\u304f)\u9ad8\u68211\u5e74\u306e\u6570\u5b66\u3067\u7fd2\u3046\uff0c\u6700\u5c0f\u516c\u500d\u6570\u306e\u6c42\u3081\u65b9\u3092\u5229\u7528\u3057\u3066\u89e3\u304d\u307e\u3057\u305f\uff0e\u9014\u4e2d\u7121\u99c4\u306a\u51e6\u7406\u304c\u591a\u3044\u304b\u3082\uff0e\n\n\u7d42\u308f\u308a\u306b\nScheme\u3084\u308b\u524d\u306f\u300c\u5c0f\u30ab\u30c3\u30b3\u3067\u3042\u3075\u308c\u308b\u30b3\u30fc\u30c9\u3068\u304b\u30ad\u30e2\u3059\u304e\u3060\u308d\ud83d\ude05\u300d\u7684\u306b\u601d\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\uff0c\u3057\u3070\u3089\u304f\u66f8\u3044\u3066\u6163\u308c\u3066\u304f\u308b\u3068\uff0c\u3080\u3057\u308d\u307e\u308b\u307e\u308b\u3063\u3068\u3057\u3066\u3044\u3066\u53ef\u611b\u3055\u3055\u3048\u611f\u3058\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\u3042\u3068\u306f\u526f\u4f5c\u7528\u3068\u3057\u3066\uff0c\u677f\u66f8\u3068\u304b\u3067\u30ab\u30c3\u30b3\u306e\u6570\u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u304b\u5426\u304b\u3092\u77ac\u6642\u306b\u5224\u65ad\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0eLISP\u306f\u795e\u3067\u3059\uff0e\n\u4eca\u5f8c\u3082\u3067\u304d\u308b\u3060\u3051\u554f\u984c\u306e\u6d88\u5316\u306f\u7d9a\u3051\u3066\uff0c1\u5e74\u5f8c\u306eLisp Advent Calendar\u3067\u306f\u5727\u5012\u7684\u6210\u9577\u3092\u3057\u305f\u89e3\u7b54\u3092\u8f09\u305b\u305f\u3044\u3067\u3059\ud83d\udcaa\u3000\u30de\u30af\u30ed\u3068\u304b\u9045\u5ef6\u30ea\u30b9\u30c8\u3068\u304b\u7d99\u7d9a\u3092\u3061\u3083\u3093\u3068\u4f7f\u3044\u305f\u3055\uff0e\n\u660e\u65e5\uff0c4\u65e5\u76ee\u306f\u300ccommon lisp\u3067\u914d\u5e03\u3059\u308b\u30a2\u30d7\u30ea\u30fc\u30b1\u30b7\u30e7\u30f3\u306e\u66f8\u304d\u304b\u305f\u300d\u3067\u3059\uff0e\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u81f4\u3057\u307e\u3059\ud83d\ude4f\n\u3053\u306e\u8a18\u4e8b\u306f[Lisp Advent Calendar 2016](http://qiita.com/advent-calendar/2016/lisp)\u306e3\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\uff0e\n\n2\u65e5\u76ee\u306e\u8a18\u4e8b\u306f[\u300cR7RS-large\u306b\u3064\u3044\u3066\u300d](http://compassoftime.blogspot.jp/2016/12/r7rs-large.html)\u3067\u3057\u305f\uff0e\n\n**\u672c\u8a18\u4e8b\u306fProject Euler\u306eProblem1\u301c5\u306e\u30cd\u30bf\u30d0\u30ec\u3092\u542b\u307f\u307e\u3059\uff0e\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044**\n\n\n# \u521d\u3081\u306b\n\u4eca\u307e\u3067LISP\u306f\u98df\u308f\u305a\u5acc\u3044\u7684\u306b\u656c\u9060\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\uff0c\u6700\u8fd1\u5927\u5b66\u306e\u6388\u696d\u3067Scheme\u3092\u4f7f\u3046\u6a5f\u4f1a\u304c\u3042\u308a\uff0c\u3044\u3056\u3061\u3083\u3093\u3068\u52c9\u5f37\u3057\u3066\u307f\u308b\u3068\u7d50\u69cb\u9762\u767d\u304f\u3066\uff0c\u305a\u3076\u305a\u3076\u3068\u6cbc\u306b\u30cf\u30de\u3063\u3066\u3044\u304f\u97f3\u304c\u805e\u3053\u3048\u3066\u304d\u307e\u3057\u305f\uff0e\u3061\u306a\u307f\u306b\u6700\u8fd1LoL\u672c\u8cb7\u3063\u3061\u3083\u3044\u307e\u3057\u305f\ud83d\ude09\n\nScheme\u3092\u6700\u521d\u306b\u89e6\u3063\u3066\u304b\u30891\u30f6\u6708\u304f\u3089\u3044\u7d4c\u3063\u305f\u3042\u305f\u308a\u3067\u306a\u3093\u3068\u306a\u304f[Project Euler](https://projecteuler.net/)\u3092\u89e3\u3044\u3066\u3044\u305f\u306e\u3067\uff0c\u3053\u306e\u8a18\u4e8b\u3067\u306f\u305d\u306e\u30b3\u30fc\u30c9\u7247\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u306a\u304a\uff0c\u672c\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9\u306f\u5168\u3066GitHub\u306b\u3042\u3052\u3066\u3044\u307e\u3059(\u4eca\u5f8c\u3082\u7d99\u7d9a\u7684\u306bcommit\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3067\u3059)\uff0e\n\n* [kagemiku/project-euler](https://github.com/kagemiku/project-euler/tree/scheme)\n\n(\u30ab\u30ec\u30f3\u30c0\u30fc\u306b\u767b\u9332\u3057\u3066\u304b\u3089[\u6628\u5e74\u306eLisp Advent Calendar](http://qiita.com/advent-calendar/2015/lisp)\u3092\u898b\u305f\u306e\u3067\u3059\u304c\uff0c\u305d\u306e\u3042\u307e\u308a\u306e\u30ec\u30d9\u30eb\u306e\u9ad8\u3055\u306b\u767b\u9332\u3057\u3066\u3057\u307e\u3063\u305f\u3053\u3068\u3092\u82e5\u5e72\u5f8c\u6094\u3057\u3066\u3044\u305f\u306e\u306f\u3053\u3053\u3060\u3051\u306e\u79d8\u5bc6\u3067\u3059)\n\n\n# Project Euler\u3068\u306f\n[Project Euler](https://projecteuler.net/)\u3068\u306f\uff0c\u304b\u306a\u308a\u3056\u3063\u304f\u308a\u8aac\u660e\u3059\u308b\u3068\uff0c\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u89e3\u304f\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u305f\u6570\u5b66\u7684\u306a\u554f\u984c\u96c6\u300d\u3067\u3059\uff0e\n\n\u6642\u9593\u304c\u3067\u304d\u305f\u3068\u304d\u306b\u30b3\u30c4\u30b3\u30c4\u7684\u306a\u611f\u3058\u3067\u3084\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u7b46\u8005\u306f\u307e\u30605\u554f\u307b\u3069\u3057\u304b\u89e3\u3051\u3066\u3044\u307e\u305b\u3093\uff0e\n\n# \u5fc3\u306e\u3069\u3053\u304b\u306b\u7559\u3081\u3066\u304a\u3044\u3066\u6b32\u3057\u3044\u3053\u3068\n* \u7b46\u8005\u306f\u6570\u5f31\n* \u7b46\u8005\u306f\u7af6\u30d7\u30ed\u5f31\u8005\n* \u7b46\u8005\u306fScheme\u5f31\u8005(\u6545\u306b\u8eca\u8f2a\u306e\u518d\u767a\u660e\u306a\u95a2\u6570\u3092\u66f8\u3044\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059)\n* \u51e6\u7406\u7cfb\u306f**Racket**\u3092\u4f7f\u7528\n* \u554f\u984c\u6587\u306f\u3086\u308b\u3075\u308f\u548c\u8a33\n* **\u30de\u30b5\u30ab\u30ea\u542b\u3080\u30a2\u30c9\u30d0\u30a4\u30b9\u306f\u5927\u6b53\u8fce\u3067\u3059**(\u6ce3\u3044\u3066\u559c\u3073\u307e\u3059\ud83d\ude02)\n\n\n# \u30b3\u30fc\u30c9\n## [Problem 1] Multiples of 3 and 5\n\n> 1000\u672a\u6e80\u306e\u6574\u6570\u3067\uff0c3\u307e\u305f\u306f5\u306e\u500d\u6570\u3067\u3042\u308b\u5024\u3092\u5168\u3066\u8db3\u3057\u5408\u308f\u305b\u308b\u3068\u3044\u304f\u3089\u304b?\n\n```scheme\n#lang racket\n\n; x\u304cy\u306e\u500d\u6570\u306a\u3089#t\n(define (divisor? x y)\n  (= (remainder x y) 0))\n\n; [bgn, end)\u306e\u7bc4\u56f2\u3067\u6574\u6570\u5217\u3092\u751f\u6210\n(define (range-list bgn end)\n  (if (>= bgn end)\n    '()\n    (cons bgn (range-list (+ bgn 1) end))))\n\n; \u30bd\u30eb\u30d0\n; num\u672a\u6e80\u306e\u6574\u6570\u3067\uff0c3\u307e\u305f\u306f5\u306e\u500d\u6570\u3067\u3042\u308b\u5024\u306esum\u3092\u8fd4\u5374\n(define (solver num)\n  (apply + (filter\n             (lambda (x) (or (divisor? x 3) (divisor? x 5)))\n             (range-list 2 num))))\n\n(solver 1000)\n```\nProblem 1\u306f\u3068\u308a\u3042\u3048\u305a\u3084\u308b\u3060\u3051\u7684\u306a\u554f\u984c\u3067\u3059\uff0e\n\n\n## [Problem 2] Even Fibonacci numbers\n> 4,000,000\u3092\u8d85\u3048\u306a\u3044\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u9805\u306e\u4e2d\u304b\u3089\uff0c\u5076\u6570\u3067\u3042\u308b\u9805\u3092\u5168\u3066\u8db3\u3057\u5408\u308f\u305b\u308b\u3068\u3044\u304f\u3089\u304b?\n\n```scheme\n#lang racket\n\n; \u30bd\u30eb\u30d0\n; num\u4ee5\u4e0b\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u5404\u9805\u306e\u5185\uff0c\u5076\u6570\u3067\u3042\u308b\u9805\u306esum\u3092\u8fd4\u5374\n(define (solver num)\n  (let loop((n1 1) (n2 2) (ret 2))\n    (let ((n3 (+ n1 n2)))\n      (cond\n        ((> n3 num) ret)\n        ((even? n3) (loop n2 n3 (+ ret n3)))\n        (else (loop n2 n3 ret))))))\n\n(solver 4000000)\n```\n\n\u30eb\u30fc\u30d7\u4f7f\u3063\u3066\u611a\u76f4\u306b\u89e3\u304d\u307e\u3057\u305f\uff0e\u307e\u3060\u9045\u5ef6\u30ea\u30b9\u30c8\u3068\u304b\u77e5\u3089\u306a\u3044\u6642\u671f\u306b\u66f8\u3044\u305f\u3082\u306e\u306a\u306e\u3067\u6539\u5584\u306e\u4f59\u5730\u306f\u3081\u3061\u3083\u304f\u3061\u3083\u3042\u308a\u305d\u3046\uff0e\n\n\n## [Problem 3] Largest prime factor\n> 600851475143\u306e\u7d20\u56e0\u6570\u306e\u4e2d\u3067\u6700\u3082\u5927\u304d\u3044\u7d20\u56e0\u6570\u306f\u3044\u304f\u3089\u304b?\n\n```scheme\n#lang racket\n\n; x\u304cy\u306e\u500d\u6570\u306a\u3089#t\n(define (divisor? x y)\n  (= (remainder x y) 0))\n\n; \u30bd\u30eb\u30d0\n; num\u306e\u7d20\u56e0\u6570\u306e\u6700\u5927\u5024\u3092\u8fd4\u5374\n(define (solver num)\n  (let loop((x num) (factor 2))\n    (cond\n      ((= x 1) factor)\n      ((divisor? x factor) (loop (/ x factor) factor))\n      (else (loop x (+ factor 1))))))\n\n(solver 600851475143)\n```\n\n\u540c\u3058\u5024\u3067\u5272\u308a\u5207\u308c\u306a\u304f\u306a\u308b\u307e\u3067\u5272\u308a\u7d9a\u3051\u3066\uff0c\u5272\u308c\u5207\u308c\u306a\u304f\u306a\u3063\u305f\u3089\u9664\u6570\u306e\u5024\u3092\u5897\u3084\u3059\u611f\u3058\u3067\u3059\uff0e\n\n\n## [Problem 4] Largest palindrome product\n> 3\u6841\u306e\u6574\u6570\u30922\u3064\u639b\u3051\u5408\u308f\u305b\u3066\u3067\u304d\u308b\u56de\u6587\u6570(9009\u307f\u305f\u3044\u306b\u4e0a\u4f4d\u6841\u304b\u3089\u898b\u3066\u3082\u4e0b\u4f4d\u6841\u304b\u3089\u307f\u3066\u3082\u6570\u5b57\u306e\u4e26\u3073\u304c\u540c\u3058\u6570)\u306e\u3046\u3061\uff0c\u6700\u5927\u306e\u5024\u306f\u3044\u304f\u3089\u304b?\n\n```scheme\n#lang racket\n\n; \u6574\u6570\u3067\u3042\u308bnumber\u3092\u5404\u6841\u306e\u5024\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db( 123 -> (1 2 3) )\n(define (number->list number)\n  (string->list (number->string number)))\n\n; num\u304c\u56de\u6587\u6570\u306a\u3089#t\n(define (palindromic? num)\n  (let loop((ls0 (number->list num)) (ls1 (reverse (number->list num))) (cnt (truncate (/ (length (number->list num)) 2))))\n    (cond\n      ((<= cnt 0) #t)\n      ((eqv? (car ls0) (car ls1)) (loop (cdr ls0) (cdr ls1) (- cnt 1)))\n      (else #f))))\n\n; max-num\u4ee5\u4e0b\u306e2\u3064\u306e\u6574\u6570\u306e\u7a4d\u3092\u5168\u3066\u8a08\u7b97\u3057\u3066\u30ea\u30b9\u30c8\u306b\u5165\u308c\u3066\u8fd4\u5374\n(define (gen-muls max-num)\n  (let loop((x max-num) (y max-num) (ret '()))\n    (cond\n      ((= y 0) ret)\n      ((= x 0) (loop max-num (- y 1) ret))\n      (else (loop (- x 1) y (cons (* x y) ret))))))\n\n; \u30bd\u30eb\u30d0\n; max-num\u4ee5\u4e0b\u306e2\u3064\u306e\u6574\u6570\u3092\u639b\u3051\u5408\u308f\u305b\u3066\u3067\u304d\u308b\u6700\u5927\u306e\u56de\u6587\u6570\u3092\u8fd4\u5374\n(define (solver max-num)\n  (apply max (filter palindromic? (gen-muls max-num))))\n\n(solver 999)\n```\n\n\u3053\u306e\u3042\u305f\u308a\u304b\u3089\u3061\u3087\u3063\u3068\u96e3\u3057\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f\uff0e\u305d\u3057\u3066\u30b3\u30fc\u30c9\u3082\u7d20\u76f4\u306b\u66f8\u304d\u3059\u304e\u3066\u3044\u3066\u306a\u304b\u306a\u304b\u306b\u3072\u3069\u3044\u3067\u3059\u2026   $O(mn^2)$\u306f\u3068\u3063\u3066\u3082\u30e4\u30d0\u30a4\uff0e\n\n\n## [Problem 5] Smallest multiple\n> 1\u304b\u308920\u306e\u9593\u306e\u6574\u6570\u5168\u3066\u3067\u5272\u308a\u5207\u308b\u3053\u3068\u306e\u3067\u304d\u308b\u6700\u5c0f\u306e\u6574\u6570\u306f\u3044\u304f\u3089\u304b?\n\n```scheme\n#lang racket\n\n(require scheme/mpair)\n\n; x\u304cy\u306e\u500d\u6570\u306a\u3089#t\n(define (divisor? x y)\n  (= (remainder x y) 0))\n\n; [bgn, end)\u306e\u7bc4\u56f2\u3067mutable\u306a\u6574\u6570\u5217\u3092\u751f\u6210\n(define (mrange-list bgn end)\n  (if (>= bgn end)\n    '()\n    (mcons bgn (mrange-list (+ bgn 1) end))))\n\n; \u30ea\u30b9\u30c8mls\u306eidx\u756a\u76ee\u306e\u5024\u3092val\u306b\u5909\u66f4\n(define (change-elem! mls idx val)\n  (if (<= idx 0)\n    (set-mcar! mls val)\n    (change-elem! (mcdr mls) (- idx 1) val)))\n\n; change-elem!\u3092step\u306e\u5e45\u3067\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\n(define (change-elems! mls bgn step val)\n  (when (and (< bgn (mlength mls)) (>= step 0))\n    (change-elem! mls bgn val)\n    (change-elems! mls (+ bgn step) step val)))\n\n; max-prime\u4ee5\u4e0b\u306e\u7d20\u6570\u5217\u3092\u751f\u6210\n(define (gen-primes max-prime)\n  (let loop((prime 2) (ret (mrange-list 2 (+ max-prime 1))))\n    (cond\n      ((>= prime max-prime) (filter number? (mlist->list ret)))\n      ((number? (mlist-ref ret (- prime 2))) (change-elems! ret (+ (- prime 2) prime) prime #f) (loop (+ prime 1) ret))\n      (else (loop (+ prime 1) ret)))))\n\n; num\u306e\u7d20\u56e0\u6570\u5217\u3092\u751f\u6210\n(define (gen-factors num primes)\n  (let loop((n num) (factors primes) (ret '(1)))\n    (cond\n      ((= n 1) (reverse ret))\n      ((divisor? n (car factors)) (loop (/ n (car factors)) factors (cons (car factors) ret)))\n      (else (loop n (cdr factors) ret)))))\n\n; \u30ea\u30b9\u30c8ls\u4e2d\u306eval\u306e\u500b\u6570\u3092\u8fd4\u5374\n(define (count-vals ls val)\n  (count (lambda (x) (= x val)) ls))\n\n; \u7d20\u56e0\u6570\u5217\u3092\u5404\u7d20\u56e0\u6570\u306e\u51aa\u6570\u5217\u306b\u5909\u63db\n; e.g. (2 2 2 3 5 5 11 11) -> (3 1 2 0 2)\n(define (factors->powers factors primes)\n  (if (null? primes)\n    '()\n    (cons (count-vals factors (car primes)) (factors->powers factors (cdr primes)))))\n\n; \u30bd\u30eb\u30d0\n; 2\u304b\u3089max-num\u306e\u9593\u306e\u6574\u6570\u5168\u3066\u3067\u5272\u308a\u5207\u308b\u3053\u3068\u306e\u3067\u304d\u308b\u6700\u5c0f\u306e\u5024\u3092\u8fd4\u5374\n(define (solver max-num)\n  (let ((primes (gen-primes max-num)))\n    (let loop((num 2) (ret (make-list (length primes) 0)))\n      (if (> num max-num)\n        (apply * (map expt primes ret))\n        (loop (+ num 1) (map max ret (factors->powers (gen-factors num primes) primes)))))))\n\n(solver 20)\n```\n\n\u3060\u3044\u3076\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3061\u3083\u3063\u3066\u307e\u3059\u306d\uff0e(\u6050\u3089\u304f)\u9ad8\u68211\u5e74\u306e\u6570\u5b66\u3067\u7fd2\u3046\uff0c\u6700\u5c0f\u516c\u500d\u6570\u306e\u6c42\u3081\u65b9\u3092\u5229\u7528\u3057\u3066\u89e3\u304d\u307e\u3057\u305f\uff0e\u9014\u4e2d\u7121\u99c4\u306a\u51e6\u7406\u304c\u591a\u3044\u304b\u3082\uff0e\n\n\n# \u7d42\u308f\u308a\u306b\nScheme\u3084\u308b\u524d\u306f\u300c\u5c0f\u30ab\u30c3\u30b3\u3067\u3042\u3075\u308c\u308b\u30b3\u30fc\u30c9\u3068\u304b\u30ad\u30e2\u3059\u304e\u3060\u308d\ud83d\ude05\u300d\u7684\u306b\u601d\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\uff0c\u3057\u3070\u3089\u304f\u66f8\u3044\u3066\u6163\u308c\u3066\u304f\u308b\u3068\uff0c\u3080\u3057\u308d\u307e\u308b\u307e\u308b\u3063\u3068\u3057\u3066\u3044\u3066\u53ef\u611b\u3055\u3055\u3048\u611f\u3058\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\n\u3042\u3068\u306f\u526f\u4f5c\u7528\u3068\u3057\u3066\uff0c\u677f\u66f8\u3068\u304b\u3067\u30ab\u30c3\u30b3\u306e\u6570\u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u304b\u5426\u304b\u3092\u77ac\u6642\u306b\u5224\u65ad\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0eLISP\u306f\u795e\u3067\u3059\uff0e\n\n\u4eca\u5f8c\u3082\u3067\u304d\u308b\u3060\u3051\u554f\u984c\u306e\u6d88\u5316\u306f\u7d9a\u3051\u3066\uff0c1\u5e74\u5f8c\u306eLisp Advent Calendar\u3067\u306f\u5727\u5012\u7684\u6210\u9577\u3092\u3057\u305f\u89e3\u7b54\u3092\u8f09\u305b\u305f\u3044\u3067\u3059\ud83d\udcaa\u3000\u30de\u30af\u30ed\u3068\u304b\u9045\u5ef6\u30ea\u30b9\u30c8\u3068\u304b\u7d99\u7d9a\u3092\u3061\u3083\u3093\u3068\u4f7f\u3044\u305f\u3055\uff0e\n\n\u660e\u65e5\uff0c4\u65e5\u76ee\u306f\u300ccommon lisp\u3067\u914d\u5e03\u3059\u308b\u30a2\u30d7\u30ea\u30fc\u30b1\u30b7\u30e7\u30f3\u306e\u66f8\u304d\u304b\u305f\u300d\u3067\u3059\uff0e\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u81f4\u3057\u307e\u3059\ud83d\ude4f\n"}