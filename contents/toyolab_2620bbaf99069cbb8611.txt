{"context": "Bash on Ubuntu on Windows\u3067TensorFlow\u3092\u4f7f\u3046\u305f\u3081\u306e\u30e1\u30e2\n\u3067\u3001TensorFlow\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3060\u304c\u3001\u3044\u307e\u3044\u3061\u4f7f\u3044\u65b9\u304c\u308f\u304b\u3089\u306a\u3044\u3002\nTFLearn\u3063\u3066\u3044\u3046\u3001TensorFlow\u3092\u3082\u3063\u3068\u7c21\u5358\u306b\u4f7f\u3048\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u3001\u305d\u308c\u3082\u5165\u308c\u3066\u307f\u305f\u3002\n$ pip install tflearn\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u773a\u3081\u3066\u3044\u308b\u3068\u3001logical.py\u3063\u3066\u3044\u3046\u8ad6\u7406\u6f14\u7b97\u3092\u5b66\u7fd2\u3055\u305b\u308b\u3089\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5165\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u4eca\u56de\u305d\u308c\u3092\u8a66\u3057\u3066\u307f\u305f\u3002\n\nOR\u306e\u5b66\u7fd2\nlogical.py\u306f\u3001\u8907\u6570\u306e\u8ad6\u7406\u6f14\u7b97\u306e\u5b66\u7fd2\u304c\u3072\u3068\u307e\u3068\u3081\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u95a2\u9023\u3059\u308b\u3068\u3053\u308d\u3060\u3051\u3092\u629c\u304d\u51fa\u3057\u3066\u307f\u305f\u3002\nimport tensorflow as tf\nimport tflearn\n\n# Logical OR operator\nX = [[0., 0.], [0., 1.], [1., 0.], [1., 1.]]\nY = [[0.], [1.], [1.], [1.]]\n\n# Graph definition\nwith tf.Graph().as_default():\n    g = tflearn.input_data(shape=[None, 2])\n    g = tflearn.fully_connected(g, 128, activation='linear')\n    g = tflearn.fully_connected(g, 128, activation='linear')\n    g = tflearn.fully_connected(g, 1, activation='sigmoid')\n    g = tflearn.regression(g, optimizer='sgd', learning_rate=2.,\n                           loss='mean_square')\n\n    # Model training\n    m = tflearn.DNN(g)\n    m.fit(X, Y, n_epoch=100, snapshot_epoch=False)\n\n    # Test model\n    print(\"Testing OR operator\")\n    print(\"0 or 0:\", m.predict([[0., 0.]]))\n    print(\"0 or 1:\", m.predict([[0., 1.]]))\n    print(\"1 or 0:\", m.predict([[1., 0.]]))\n    print(\"1 or 1:\", m.predict([[1., 1.]]))\n\n\u521d\u898b\u3060\u3051\u3069\u306a\u3093\u3068\u306a\u304f\u610f\u5473\u306f\u308f\u304b\u308b\u3002\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u3068\u306a\u3063\u305f\u3002\n--\nTraining Step: 100  | total loss: 0.00227\n| SGD | epoch: 100 | loss: 0.00227 -- iter: 4/4\n\n--\nTesting OR operator\n0 or 0: [[0.031054211780428886]]\n0 or 1: [[0.9823662638664246]]\n1 or 0: [[0.9786670207977295]]\n1 or 1: [[0.9999874830245972]]\n\n0\u304b1\u3068\u3044\u3046\u30c7\u30a3\u30b8\u30bf\u30eb\u3067\u898b\u308c\u3070\u3001OR\u306e\u5b66\u7fd2\u306f\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\u3068\u3053\u308d\u3067\u3001\u6700\u521d\u306e\u30b3\u30fc\u30c9\u3060\u3068128\u500b\u306e\u4e2d\u9593\u5c64\u304c\uff12\u5c64\u3082\u3064\u306a\u304c\u3063\u3066\u3044\u308b\u3002OR\u306e\u5b66\u7fd2\u3054\u3068\u304d\u3067\u4e2d\u9593\u5c64\u306f\u8981\u3089\u306a\u3044\u3060\u308d\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4e2d\u9593\u5c64\u306f\u524a\u9664\u3057\u3066\u307f\u305f\u3002\u305d\u306e\u4ee3\u308f\u308a\u3001\u5b66\u7fd2\u56de\u6570\u30922000\u56de\u306b\u5897\u3084\u3057\u3066\u307f\u305f\u3002\nimport tensorflow as tf\nimport tflearn\n\n# Logical OR operator\nX = [[0., 0.], [0., 1.], [1., 0.], [1., 1.]]\nY = [[0.], [1.], [1.], [1.]]\n\n# Graph definition\nwith tf.Graph().as_default():\n    g = tflearn.input_data(shape=[None, 2])\n    g = tflearn.fully_connected(g, 1, activation='sigmoid')\n    g = tflearn.regression(g, optimizer='sgd', learning_rate=2., loss='mean_square')\n\n    # Model training\n    m = tflearn.DNN(g)\n    m.fit(X, Y, n_epoch=2000, snapshot_epoch=False)\n\n    # Test model\n    print(\"Testing OR operator\")\n    print(\"0 or 0:\", m.predict([[0., 0.]]))\n    print(\"0 or 1:\", m.predict([[0., 1.]]))\n    print(\"1 or 0:\", m.predict([[1., 0.]]))\n    print(\"1 or 1:\", m.predict([[1., 1.]]))\n\n\u3053\u308c\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3002\n--\nTraining Step: 2000  | total loss: 0.00098\n| SGD | epoch: 2000 | loss: 0.00098 -- iter: 4/4\n--\nTesting OR operator\n0 or 0: [[0.041201911866664886]]\n0 or 1: [[0.9756871461868286]]\n1 or 0: [[0.9764388799667358]]\n1 or 1: [[0.9999741315841675]]\n\n\u3061\u3083\u3093\u3068OR\u306e\u5b66\u7fd2\u306f\u3067\u304d\u305f\u6a21\u69d8\u3002\n\nAND\u306e\u5b66\u7fd2\n\u7d9a\u3044\u3066AND\u306e\u5b66\u7fd2\u3092\u3084\u3063\u3066\u307f\u305f\u3002\u30b3\u30fc\u30c9\u306f\u6559\u5e2b\u4fe1\u53f7\u3092AND\u306b\u5909\u3048\u308b\u3060\u3051\u3067\u3042\u3068\u306f\u540c\u3058\u3002\nimport tensorflow as tf\nimport tflearn\n\n# Logical AND operator\nX = [[0., 0.], [0., 1.], [1., 0.], [1., 1.]]\nY = [[0.], [0.], [0.], [1.]]\n\n# Graph definition\nwith tf.Graph().as_default():\n    g = tflearn.input_data(shape=[None, 2])\n    g = tflearn.fully_connected(g, 1, activation='sigmoid')\n    g = tflearn.regression(g, optimizer='sgd', learning_rate=2., loss='mean_square')\n\n    # Model training\n    m = tflearn.DNN(g)\n    m.fit(X, Y, n_epoch=2000, snapshot_epoch=False)\n\n    # Test model\n    print(\"Testing AND operator\")\n    print(\"0 and 0:\", m.predict([[0., 0.]]))\n    print(\"0 and 1:\", m.predict([[0., 1.]]))\n    print(\"1 and 0:\", m.predict([[1., 0.]]))\n    print(\"1 and 1:\", m.predict([[1., 1.]]))\n\n\u3053\u308c\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3002\n--\nTraining Step: 2000  | total loss: 0.00137\n| SGD | epoch: 2000 | loss: 0.00137 -- iter: 4/4\n--\nTesting AND operator\n0 and 0: [[8.591794176027179e-05]]\n0 and 1: [[0.04014528915286064]]\n1 and 0: [[0.03964542970061302]]\n1 and 1: [[0.9525935053825378]]\n\n\u78ba\u304b\u306bAND\u306b\u306a\u3063\u305f\u3002\n\nXOR\u306e\u5b66\u7fd2\nOR, AND\u306f\u7dda\u5f62\u5206\u96e2\u3067\u304d\u308b\u306e\u3067\u4e2d\u9593\u5c64\u306f\u4e0d\u8981\u3060\u3051\u3069\u3001XOR\u306f\u7dda\u5f62\u5206\u96e2\u3067\u304d\u306a\u3044\u306e\u3067\u4e2d\u9593\u5c64\u304c\u5fc5\u8981\u3002\u3057\u304b\u3057\u3001\u30b5\u30f3\u30d7\u30eb\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001XOR\u3092\u76f4\u63a5\u5b66\u7fd2\u3055\u305b\u308b\u306e\u3067\u306f\u306a\u304f\u3001NAND\u3068OR\u3092\u5b66\u7fd2\u3055\u305b\u3066\u305d\u308c\u3092\u5408\u6210\u3057\u3066\u4f7f\u3063\u3066\u3044\u308b\u3002\n\u3069\u3046\u3057\u3066\u76f4\u63a5\u5b66\u7fd2\u3055\u305b\u306a\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001XOR\u3092\u76f4\u63a5\u5b66\u7fd2\u3055\u305b\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u305f\u3002\nimport tensorflow as tf\nimport tflearn\n\n# Logical XOR operator\nX = [[0., 0.], [0., 1.], [1., 0.], [1., 1.]]\nY = [[0.], [1.], [1.], [0.]]\n\n# Graph definition\nwith tf.Graph().as_default():\n    g = tflearn.input_data(shape=[None, 2])\n    g = tflearn.fully_connected(g, 2, activation='sigmoid')\n    g = tflearn.fully_connected(g, 1, activation='sigmoid')\n    g = tflearn.regression(g, optimizer='sgd', learning_rate=2., loss='mean_square')\n\n    # Model training\n    m = tflearn.DNN(g)\n    m.fit(X, Y, n_epoch=2000, snapshot_epoch=False)\n\n    # Test model\n    print(\"Testing XOR operator\")\n    print(\"0 xor 0:\", m.predict([[0., 0.]]))\n    print(\"0 xor 1:\", m.predict([[0., 1.]]))\n    print(\"1 xor 0:\", m.predict([[1., 0.]]))\n    print(\"1 xor 1:\", m.predict([[1., 1.]]))\n\n\u3053\u308c\u306f\u3001\u6559\u5e2b\u4fe1\u53f7\u3092XOR\u306b\u3057\u3066\u3001\uff12\u500b\u306e\u4e2d\u9593\u5c64\u3092\u8ffd\u52a0\u3057\u305f\u3060\u3051\u3002\n\u3067\u3001\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3053\u3046\u306a\u3063\u305f\u3002\n--\nTraining Step: 2000  | total loss: 0.25000\n| SGD | epoch: 2000 | loss: 0.25000 -- iter: 4/4\n--\nTesting XOR operator\n0 xor 0: [[0.5000224709510803]]\n0 xor 1: [[0.5000009536743164]]\n1 xor 0: [[0.49999910593032837]]\n1 xor 1: [[0.4999775290489197]]\n\n\u3042\u308c\u3001\u5b66\u7fd2\u3067\u304d\u3066\u306a\u3044\u3002\n\u3067\u3001\u30b0\u30b0\u308b\u3068\u3001\u6b21\u306e\u30da\u30fc\u30b8\u304c\u5f15\u3063\u639b\u304b\u3063\u305f\u3002\u3044\u3064\u3082\u306eStackOverflow\u306e\u30b5\u30a4\u30c8\u3060\u3002\ntflearn / tensorflow does not learn xor\n\u3053\u308c\u306b\u3088\u308b\u3068\u3001\u6a19\u6e96\u306e\u8a2d\u5b9a\u3060\u3068\u3001\u91cd\u307f\u306e\u521d\u671f\u5024\u304c\u6a19\u6e96\u504f\u5dee0.02\u3068\u5e45\u304c\u304b\u306a\u308a\u72ed\u3044\u3089\u3057\u3044\u3002\u306a\u306e\u3067\u3001\u91cd\u307f\u306e\u521d\u671f\u5024\u306e\u5e45\u3092-1\u304b\u30891\u307e\u3067\u306b\u5e83\u3052\u3066\u3084\u308b\u3068\u3088\u3044\u3089\u3057\u3044\u3002\nimport tensorflow as tf\nimport tflearn\n\n# Logical XOR operator\nX = [[0., 0.], [0., 1.], [1., 0.], [1., 1.]]\nY = [[0.], [1.], [1.], [0.]]\n\n# Graph definition\nwith tf.Graph().as_default():\n    tnorm = tflearn.initializations.uniform(minval=-1.0, maxval=1.0)\n    g = tflearn.input_data(shape=[None, 2])\n    g = tflearn.fully_connected(g, 2, activation='sigmoid', weights_init=tnorm)\n    g = tflearn.fully_connected(g, 1, activation='sigmoid', weights_init=tnorm)\n    g = tflearn.regression(g, optimizer='sgd', learning_rate=2., loss='mean_square')\n\n    # Model training\n    m = tflearn.DNN(g)\n    m.fit(X, Y, n_epoch=2000, snapshot_epoch=False)\n\n    # Test model\n    print(\"Testing XOR operator\")\n    print(\"0 xor 0:\", m.predict([[0., 0.]]))\n    print(\"0 xor 1:\", m.predict([[0., 1.]]))\n    print(\"1 xor 0:\", m.predict([[1., 0.]]))\n    print(\"1 xor 1:\", m.predict([[1., 1.]]))\n\n\u3053\u306e\u3088\u3046\u306b\u91cd\u307f\u306e\u521d\u671f\u5024\u306e\u8a2d\u5b9a\u3092\u5909\u3048\u3066\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3002\n--\nTraining Step: 2000  | total loss: 0.00131\n| SGD | epoch: 2000 | loss: 0.00131 -- iter: 4/4\n--\nTesting XOR operator\n0 xor 0: [[0.03527239337563515]]\n0 xor 1: [[0.9663047790527344]]\n1 xor 0: [[0.9607295393943787]]\n1 xor 1: [[0.03082425333559513]]\n\n\u7121\u4e8b\u306bXOR\u3092\u5b66\u7fd2\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u3002\n\nTFLearn\u3092\u3044\u3058\u3063\u3066\u307f\u305f\u611f\u60f3\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8003\u3048\u65b9\u306b\u30b3\u30fc\u30c9\u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3067\u308f\u304b\u308a\u3084\u3059\u3044\u3002TensorFlow\u306e\u7d30\u304b\u3044\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306f\u3067\u304d\u306a\u3044\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3051\u3069\u3001\u305d\u3082\u305d\u3082TensorFlow\u3067\u4f55\u304c\u3067\u304d\u308b\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u4eba\u306b\u3068\u3063\u3066\u306f\u3001TFLearn\u304b\u3089\u59cb\u3081\u308b\u306e\u3082\u3044\u3044\u306e\u3067\u306f\uff1f\n[Bash on Ubuntu on Windows\u3067TensorFlow\u3092\u4f7f\u3046\u305f\u3081\u306e\u30e1\u30e2](http://qiita.com/toyolab/items/bccd03d4cb7795112ab6)\n\u3067\u3001TensorFlow\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3060\u304c\u3001\u3044\u307e\u3044\u3061\u4f7f\u3044\u65b9\u304c\u308f\u304b\u3089\u306a\u3044\u3002\n\n[TFLearn](http://tflearn.org/)\u3063\u3066\u3044\u3046\u3001TensorFlow\u3092\u3082\u3063\u3068\u7c21\u5358\u306b\u4f7f\u3048\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u3001\u305d\u308c\u3082\u5165\u308c\u3066\u307f\u305f\u3002\n\n````bash\n$ pip install tflearn\n````\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u773a\u3081\u3066\u3044\u308b\u3068\u3001logical.py\u3063\u3066\u3044\u3046\u8ad6\u7406\u6f14\u7b97\u3092\u5b66\u7fd2\u3055\u305b\u308b\u3089\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5165\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u4eca\u56de\u305d\u308c\u3092\u8a66\u3057\u3066\u307f\u305f\u3002\n\n# OR\u306e\u5b66\u7fd2\n\nlogical.py\u306f\u3001\u8907\u6570\u306e\u8ad6\u7406\u6f14\u7b97\u306e\u5b66\u7fd2\u304c\u3072\u3068\u307e\u3068\u3081\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u95a2\u9023\u3059\u308b\u3068\u3053\u308d\u3060\u3051\u3092\u629c\u304d\u51fa\u3057\u3066\u307f\u305f\u3002\n\n````py\nimport tensorflow as tf\nimport tflearn\n\n# Logical OR operator\nX = [[0., 0.], [0., 1.], [1., 0.], [1., 1.]]\nY = [[0.], [1.], [1.], [1.]]\n\n# Graph definition\nwith tf.Graph().as_default():\n    g = tflearn.input_data(shape=[None, 2])\n    g = tflearn.fully_connected(g, 128, activation='linear')\n    g = tflearn.fully_connected(g, 128, activation='linear')\n    g = tflearn.fully_connected(g, 1, activation='sigmoid')\n    g = tflearn.regression(g, optimizer='sgd', learning_rate=2.,\n                           loss='mean_square')\n\n    # Model training\n    m = tflearn.DNN(g)\n    m.fit(X, Y, n_epoch=100, snapshot_epoch=False)\n\n    # Test model\n    print(\"Testing OR operator\")\n    print(\"0 or 0:\", m.predict([[0., 0.]]))\n    print(\"0 or 1:\", m.predict([[0., 1.]]))\n    print(\"1 or 0:\", m.predict([[1., 0.]]))\n    print(\"1 or 1:\", m.predict([[1., 1.]]))\n````\n\n\u521d\u898b\u3060\u3051\u3069\u306a\u3093\u3068\u306a\u304f\u610f\u5473\u306f\u308f\u304b\u308b\u3002\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u3068\u306a\u3063\u305f\u3002\n\n````\n--\nTraining Step: 100  | total loss: 0.00227\n| SGD | epoch: 100 | loss: 0.00227 -- iter: 4/4\n\n--\nTesting OR operator\n0 or 0: [[0.031054211780428886]]\n0 or 1: [[0.9823662638664246]]\n1 or 0: [[0.9786670207977295]]\n1 or 1: [[0.9999874830245972]]\n````\n0\u304b1\u3068\u3044\u3046\u30c7\u30a3\u30b8\u30bf\u30eb\u3067\u898b\u308c\u3070\u3001OR\u306e\u5b66\u7fd2\u306f\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\n\u3068\u3053\u308d\u3067\u3001\u6700\u521d\u306e\u30b3\u30fc\u30c9\u3060\u3068128\u500b\u306e\u4e2d\u9593\u5c64\u304c\uff12\u5c64\u3082\u3064\u306a\u304c\u3063\u3066\u3044\u308b\u3002OR\u306e\u5b66\u7fd2\u3054\u3068\u304d\u3067\u4e2d\u9593\u5c64\u306f\u8981\u3089\u306a\u3044\u3060\u308d\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4e2d\u9593\u5c64\u306f\u524a\u9664\u3057\u3066\u307f\u305f\u3002\u305d\u306e\u4ee3\u308f\u308a\u3001\u5b66\u7fd2\u56de\u6570\u30922000\u56de\u306b\u5897\u3084\u3057\u3066\u307f\u305f\u3002\n\n````py\nimport tensorflow as tf\nimport tflearn\n\n# Logical OR operator\nX = [[0., 0.], [0., 1.], [1., 0.], [1., 1.]]\nY = [[0.], [1.], [1.], [1.]]\n\n# Graph definition\nwith tf.Graph().as_default():\n    g = tflearn.input_data(shape=[None, 2])\n    g = tflearn.fully_connected(g, 1, activation='sigmoid')\n    g = tflearn.regression(g, optimizer='sgd', learning_rate=2., loss='mean_square')\n\n    # Model training\n    m = tflearn.DNN(g)\n    m.fit(X, Y, n_epoch=2000, snapshot_epoch=False)\n\n    # Test model\n    print(\"Testing OR operator\")\n    print(\"0 or 0:\", m.predict([[0., 0.]]))\n    print(\"0 or 1:\", m.predict([[0., 1.]]))\n    print(\"1 or 0:\", m.predict([[1., 0.]]))\n    print(\"1 or 1:\", m.predict([[1., 1.]]))\n````\n\u3053\u308c\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3002\n\n````\n--\nTraining Step: 2000  | total loss: 0.00098\n| SGD | epoch: 2000 | loss: 0.00098 -- iter: 4/4\n--\nTesting OR operator\n0 or 0: [[0.041201911866664886]]\n0 or 1: [[0.9756871461868286]]\n1 or 0: [[0.9764388799667358]]\n1 or 1: [[0.9999741315841675]]\n````\n\u3061\u3083\u3093\u3068OR\u306e\u5b66\u7fd2\u306f\u3067\u304d\u305f\u6a21\u69d8\u3002\n\n# AND\u306e\u5b66\u7fd2\n\n\u7d9a\u3044\u3066AND\u306e\u5b66\u7fd2\u3092\u3084\u3063\u3066\u307f\u305f\u3002\u30b3\u30fc\u30c9\u306f\u6559\u5e2b\u4fe1\u53f7\u3092AND\u306b\u5909\u3048\u308b\u3060\u3051\u3067\u3042\u3068\u306f\u540c\u3058\u3002\n\n````py\nimport tensorflow as tf\nimport tflearn\n\n# Logical AND operator\nX = [[0., 0.], [0., 1.], [1., 0.], [1., 1.]]\nY = [[0.], [0.], [0.], [1.]]\n\n# Graph definition\nwith tf.Graph().as_default():\n    g = tflearn.input_data(shape=[None, 2])\n    g = tflearn.fully_connected(g, 1, activation='sigmoid')\n    g = tflearn.regression(g, optimizer='sgd', learning_rate=2., loss='mean_square')\n\n    # Model training\n    m = tflearn.DNN(g)\n    m.fit(X, Y, n_epoch=2000, snapshot_epoch=False)\n\n    # Test model\n    print(\"Testing AND operator\")\n    print(\"0 and 0:\", m.predict([[0., 0.]]))\n    print(\"0 and 1:\", m.predict([[0., 1.]]))\n    print(\"1 and 0:\", m.predict([[1., 0.]]))\n    print(\"1 and 1:\", m.predict([[1., 1.]]))\n````\n\u3053\u308c\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3002\n\n````\n--\nTraining Step: 2000  | total loss: 0.00137\n| SGD | epoch: 2000 | loss: 0.00137 -- iter: 4/4\n--\nTesting AND operator\n0 and 0: [[8.591794176027179e-05]]\n0 and 1: [[0.04014528915286064]]\n1 and 0: [[0.03964542970061302]]\n1 and 1: [[0.9525935053825378]]\n````\n\u78ba\u304b\u306bAND\u306b\u306a\u3063\u305f\u3002\n\n# XOR\u306e\u5b66\u7fd2\n\nOR, AND\u306f\u7dda\u5f62\u5206\u96e2\u3067\u304d\u308b\u306e\u3067\u4e2d\u9593\u5c64\u306f\u4e0d\u8981\u3060\u3051\u3069\u3001XOR\u306f\u7dda\u5f62\u5206\u96e2\u3067\u304d\u306a\u3044\u306e\u3067\u4e2d\u9593\u5c64\u304c\u5fc5\u8981\u3002\u3057\u304b\u3057\u3001\u30b5\u30f3\u30d7\u30eb\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001XOR\u3092\u76f4\u63a5\u5b66\u7fd2\u3055\u305b\u308b\u306e\u3067\u306f\u306a\u304f\u3001NAND\u3068OR\u3092\u5b66\u7fd2\u3055\u305b\u3066\u305d\u308c\u3092\u5408\u6210\u3057\u3066\u4f7f\u3063\u3066\u3044\u308b\u3002\n\n\u3069\u3046\u3057\u3066\u76f4\u63a5\u5b66\u7fd2\u3055\u305b\u306a\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001XOR\u3092\u76f4\u63a5\u5b66\u7fd2\u3055\u305b\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u305f\u3002\n\n````py\nimport tensorflow as tf\nimport tflearn\n\n# Logical XOR operator\nX = [[0., 0.], [0., 1.], [1., 0.], [1., 1.]]\nY = [[0.], [1.], [1.], [0.]]\n\n# Graph definition\nwith tf.Graph().as_default():\n    g = tflearn.input_data(shape=[None, 2])\n    g = tflearn.fully_connected(g, 2, activation='sigmoid')\n    g = tflearn.fully_connected(g, 1, activation='sigmoid')\n    g = tflearn.regression(g, optimizer='sgd', learning_rate=2., loss='mean_square')\n\n    # Model training\n    m = tflearn.DNN(g)\n    m.fit(X, Y, n_epoch=2000, snapshot_epoch=False)\n\n    # Test model\n    print(\"Testing XOR operator\")\n    print(\"0 xor 0:\", m.predict([[0., 0.]]))\n    print(\"0 xor 1:\", m.predict([[0., 1.]]))\n    print(\"1 xor 0:\", m.predict([[1., 0.]]))\n    print(\"1 xor 1:\", m.predict([[1., 1.]]))\n````\n\n\u3053\u308c\u306f\u3001\u6559\u5e2b\u4fe1\u53f7\u3092XOR\u306b\u3057\u3066\u3001\uff12\u500b\u306e\u4e2d\u9593\u5c64\u3092\u8ffd\u52a0\u3057\u305f\u3060\u3051\u3002\n\u3067\u3001\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3053\u3046\u306a\u3063\u305f\u3002\n\n````\n--\nTraining Step: 2000  | total loss: 0.25000\n| SGD | epoch: 2000 | loss: 0.25000 -- iter: 4/4\n--\nTesting XOR operator\n0 xor 0: [[0.5000224709510803]]\n0 xor 1: [[0.5000009536743164]]\n1 xor 0: [[0.49999910593032837]]\n1 xor 1: [[0.4999775290489197]]\n````\n\n\u3042\u308c\u3001\u5b66\u7fd2\u3067\u304d\u3066\u306a\u3044\u3002\n\u3067\u3001\u30b0\u30b0\u308b\u3068\u3001\u6b21\u306e\u30da\u30fc\u30b8\u304c\u5f15\u3063\u639b\u304b\u3063\u305f\u3002\u3044\u3064\u3082\u306eStackOverflow\u306e\u30b5\u30a4\u30c8\u3060\u3002\n\n[tflearn / tensorflow does not learn xor](http://stackoverflow.com/questions/37166268/tflearn-tensorflow-does-not-learn-xor)\n\n\u3053\u308c\u306b\u3088\u308b\u3068\u3001\u6a19\u6e96\u306e\u8a2d\u5b9a\u3060\u3068\u3001\u91cd\u307f\u306e\u521d\u671f\u5024\u304c\u6a19\u6e96\u504f\u5dee0.02\u3068\u5e45\u304c\u304b\u306a\u308a\u72ed\u3044\u3089\u3057\u3044\u3002\u306a\u306e\u3067\u3001\u91cd\u307f\u306e\u521d\u671f\u5024\u306e\u5e45\u3092-1\u304b\u30891\u307e\u3067\u306b\u5e83\u3052\u3066\u3084\u308b\u3068\u3088\u3044\u3089\u3057\u3044\u3002\n\n````py\nimport tensorflow as tf\nimport tflearn\n\n# Logical XOR operator\nX = [[0., 0.], [0., 1.], [1., 0.], [1., 1.]]\nY = [[0.], [1.], [1.], [0.]]\n\n# Graph definition\nwith tf.Graph().as_default():\n    tnorm = tflearn.initializations.uniform(minval=-1.0, maxval=1.0)\n    g = tflearn.input_data(shape=[None, 2])\n    g = tflearn.fully_connected(g, 2, activation='sigmoid', weights_init=tnorm)\n    g = tflearn.fully_connected(g, 1, activation='sigmoid', weights_init=tnorm)\n    g = tflearn.regression(g, optimizer='sgd', learning_rate=2., loss='mean_square')\n\n    # Model training\n    m = tflearn.DNN(g)\n    m.fit(X, Y, n_epoch=2000, snapshot_epoch=False)\n\n    # Test model\n    print(\"Testing XOR operator\")\n    print(\"0 xor 0:\", m.predict([[0., 0.]]))\n    print(\"0 xor 1:\", m.predict([[0., 1.]]))\n    print(\"1 xor 0:\", m.predict([[1., 0.]]))\n    print(\"1 xor 1:\", m.predict([[1., 1.]]))\n````\n\n\u3053\u306e\u3088\u3046\u306b\u91cd\u307f\u306e\u521d\u671f\u5024\u306e\u8a2d\u5b9a\u3092\u5909\u3048\u3066\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3002\n\n````\n--\nTraining Step: 2000  | total loss: 0.00131\n| SGD | epoch: 2000 | loss: 0.00131 -- iter: 4/4\n--\nTesting XOR operator\n0 xor 0: [[0.03527239337563515]]\n0 xor 1: [[0.9663047790527344]]\n1 xor 0: [[0.9607295393943787]]\n1 xor 1: [[0.03082425333559513]]\n````\n\u7121\u4e8b\u306bXOR\u3092\u5b66\u7fd2\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u3002\n\n# TFLearn\u3092\u3044\u3058\u3063\u3066\u307f\u305f\u611f\u60f3\n\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8003\u3048\u65b9\u306b\u30b3\u30fc\u30c9\u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u306e\u3067\u308f\u304b\u308a\u3084\u3059\u3044\u3002TensorFlow\u306e\u7d30\u304b\u3044\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306f\u3067\u304d\u306a\u3044\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3051\u3069\u3001\u305d\u3082\u305d\u3082TensorFlow\u3067\u4f55\u304c\u3067\u304d\u308b\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u4eba\u306b\u3068\u3063\u3066\u306f\u3001TFLearn\u304b\u3089\u59cb\u3081\u308b\u306e\u3082\u3044\u3044\u306e\u3067\u306f\uff1f\n", "tags": ["Python", "TensorFlow", "TFLearn", "\u8ad6\u7406\u6f14\u7b97", "\u5b66\u7fd2"]}