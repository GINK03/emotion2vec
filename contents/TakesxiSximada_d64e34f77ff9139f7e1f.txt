{"context": "\n\nDjango\u3067graphene_django\u3092\u4f7f\u3063\u3066GraphQL API\n\u3053\u306e\u8a18\u4e8b\u306f Django Advent Calendar 2016 19\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\nGraphQL\u306e\u305f\u3081\u306ePython\u88fd\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306b graphene \u304c\u3042\u308a\u307e\u3059\u3002graphene\u306b\u306fO/R Mapper\u3067\u4f7f\u3044\u3084\u3059\u304f\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u305d\u306e\u4e2d\u306e1\u3064 graphene-django \u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nvenv\u74b0\u5883\u3092\u4f5c\u3063\u3066activate\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n$ ~/ng/home/src/develop/pyvm/pythons/Python-3.5.2/bin/python3 -m venv env\n$ source env/bin/activate\n(env) $\n\npip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n(env) $ pip install graphene_django\nCollecting graphene-django\n  Using cached graphene-django-1.2.1.tar.gz\nCollecting six>=1.10.0 (from graphene-django)\nCollecting graphene>=1.1.3 (from graphene-django)\n  Using cached graphene-1.1.3.tar.gz\nCollecting Django>=1.6.0 (from graphene-django)\n  Using cached Django-1.10.4-py2.py3-none-any.whl\nCollecting iso8601 (from graphene-django)\n  Using cached iso8601-0.1.11-py2.py3-none-any.whl\nCollecting singledispatch>=3.4.0.3 (from graphene-django)\n  Using cached singledispatch-3.4.0.3-py2.py3-none-any.whl\nCollecting graphql-core>=1.0.1 (from graphene>=1.1.3->graphene-django)\n  Using cached graphql-core-1.0.1.tar.gz\nCollecting graphql-relay>=0.4.5 (from graphene>=1.1.3->graphene-django)\n  Using cached graphql-relay-0.4.5.tar.gz\nCollecting promise>=1.0.1 (from graphene>=1.1.3->graphene-django)\n  Using cached promise-1.0.1.tar.gz\nCollecting typing (from promise>=1.0.1->graphene>=1.1.3->graphene-django)\n  Using cached typing-3.5.2.2.tar.gz\nInstalling collected packages: six, typing, promise, graphql-core, graphql-relay, graphene, Django, iso8601, singledispatch, graphene-django\n  Running setup.py install for typing ... done\n  Running setup.py install for promise ... done\n  Running setup.py install for graphql-core ... done\n  Running setup.py install for graphql-relay ... done\n  Running setup.py install for graphene ... done\n  Running setup.py install for graphene-django ... done\nSuccessfully installed Django-1.10.4 graphene-1.1.3 graphene-django-1.2.1 graphql-core-1.0.1 graphql-relay-0.4.5 iso8601-0.1.11 promise-1.0.1 singledispatch-3.4.0.3 six-1.10.0 typing-3.5.2.2\n\n\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\ndjango-admin startprojet \u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a myproj \u3068\u304b\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n(env) $ django-admin startproject myproj .\n\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n(env) $ tree myproj\nmyproj\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 settings.py\n\u251c\u2500\u2500 urls.py\n\u2514\u2500\u2500 wsgi.py\n\n\nschema\u3092\u5b9a\u7fa9\u3059\u308b\nmyproj/schema.py\u306bAPI\u306e\u30b9\u30ad\u30fc\u30de\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3059\u3002\nimport graphene\nfrom graphene_django import DjangoObjectType\nfrom django.contrib.auth import models as auth_models\n\n\nclass User(DjangoObjectType):\n    class Meta:\n        model = auth_models.User\n\n\nclass Query(graphene.ObjectType):\n    users = graphene.List(User)\n\n    @graphene.resolve_only_args\n    def resolve_users(self):\n        return auth_models.User.objects.all()\n\n\nschema = graphene.Schema(query=Query)\n\n\n\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u306e\u3067 django.contrib.auth.models.User() \u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\n\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3059\u308b\ngraphene_django\u306e\u305f\u3081\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nINSTALL_APPS \u306b graphene_django \u3092\u8ffd\u52a0\u3059\u308b\nmyproj/settings.py::\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'graphene_django',  # <- \u8ffd\u52a0\n]\n\n\n\nGRAPHENE \u306b\u30b9\u30ad\u30fc\u30de\u3078\u306edotted name\u3092\u8a2d\u5b9a\u3059\u308b\nsettings.py\u306b\u5148\u307b\u3069\u4f5c\u6210\u3057\u305fschema.py\u306e\u4e2d\u306eschema\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307e\u3067\u306edotted name (foo.bar.baz\u307f\u305f\u3044\u306a\u3084\u3064) \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\nmyproj/settings.py::\nGRAPHENE = {\n    'SCHEMA': 'myproj.schema.schema'\n}\n\n\ngraphql\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u4ed8\u3051\u308b\u305f\u3081\u306eURL\u3092\u8ffd\u52a0\u3059\u308b\nfrom django.conf.urls import url\nfrom django.contrib import admin\n\nfrom graphene_django.views import GraphQLView  # <- \u8ffd\u52a0\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'^graphql/', GraphQLView.as_view(graphiql=True)),  # <- \u8ffd\u52a0\n]\n\n\nhttp://localhost:8000/graphql/ \u304cAPI\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u4ed8\u3051\u308bURL\u306b\u306a\u308a\u307e\u3059\u3002\ngraphql\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u7d44\u307f\u305f\u3081\u306egraphiql\u3068\u3044\u3046\u753b\u9762\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\ngraphiql=True \u3092\u6307\u5b9a\u3059\u308b\u3068\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u8d77\u52d5\u3059\u308b\nmigrate \u3057\u305f\u5f8c\u3001\u8d77\u52d5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n(env) $ python manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying sessions.0001_initial... OK\n(env) $\n\n\u8d77\u52d5\u3057\u307e\u3059\u3002\n(env) $ python manage.py runserver\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\nDecember 20, 2016 - 13:28:32\nDjango version 1.10.4, using settings 'myproj.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n\n\n\u30d6\u30e9\u30a6\u30b6\u3067 http://localhost:8000/graphql/ \u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u53d6\u5f97\u3059\u308b\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304c\u7a7a\u306e\u72b6\u614b\u306e\u305f\u3081\u30e6\u30fc\u30b6\u3092\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n(env) $ python manage.py createsuperuser\nUsername (leave blank to use 'sximada'): foo\nEmail address: test@example.com\nPassword:\nPassword (again):\nSuperuser created successfully.\n\n\n\u3067\u306fgraphiql\u753b\u9762\u3067query\u3092\u767a\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u5de6\u5074\u306e\u30da\u30a4\u30f3\u306b\u4ee5\u4e0b\u306e\u30af\u30a8\u30ea\u3092\u5165\u529b\u3057\u307e\u3059\u3002\nquery {\n  users {\n    id\n    username\n    email\n    isSuperuser\n        isStaff\n  }\n}\n\n\u5165\u529b\u3057\u305f\u3089\u5de6\u4e0a\u90e8\u306b\u3042\u308b\u518d\u751f\u30de\u30fc\u30af\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002\n\u3059\u308b\u3068\u53f3\u5074\u306e\u30da\u30a4\u30f3\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"id\": \"1\",\n        \"username\": \"foo\",\n        \"email\": \"test@example.com\",\n        \"isSuperuser\": true,\n        \"isStaff\": true\n      }\n    ]\n  }\n}\n\n\u30e6\u30fc\u30b6\u306e\u60c5\u5831\u304c\u53d6\u5f97\u3067\u304d\u307e\u3057\u305f\u3002\u30e6\u30fc\u30b6\u304c\u8907\u6570\u3044\u308b\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"id\": \"1\",\n        \"username\": \"foo\",\n        \"email\": \"test@example.com\",\n        \"isSuperuser\": true,\n        \"isStaff\": true\n      },\n      {\n        \"id\": \"2\",\n        \"username\": \"bar\",\n        \"email\": \"test2@example.com\",\n        \"isSuperuser\": true,\n        \"isStaff\": true\n      }\n    ]\n  }\n}\n\nproj.schema.Query.resolve_users()\u3067\u5168\u3066\u306e\u30e6\u30fc\u30b6\u3092\u8fd4\u3057\u3066\u3044\u308b\u306e\u3067\n\u5168\u30e6\u30fc\u30b6\u304c\u4e00\u89a7\u306b\u306a\u3063\u3066\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n    @graphene.resolve_only_args\n    def resolve_users(self):\n        return auth_models.User.objects.all()  # <- \u30b3\u30b3\n\n\n\nid\u6307\u5b9a\u3067\u30e6\u30fc\u30b6\u6307\u5b9a\u3057\u3066\u53d6\u5f97\u3059\u308b\nid\u3092\u6307\u5b9a\u3057\u3066\u30e6\u30fc\u30b6\u3092\u6307\u5b9a\u3057\u305f\u3044\u306e\u3067\u3001\nmyproj/schema.py \u306eQuery\u30af\u30e9\u30b9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\nmyproj/schema.py::\nclass Query(graphene.ObjectType):\n    user = graphene.Field(User, id=graphene.String())  # <- \u8ffd\u52a0\n    users = graphene.List(User)\n\n    @graphene.resolve_only_args                                # <- \u8ffd\u52a0\n    def resolve_user(self, id):                                # <- \u8ffd\u52a0\n        return auth_models.User.objects.filter(pk=id).first()  # <- \u8ffd\u52a0\n\n    @graphene.resolve_only_args\n    def resolve_users(self):\n        return auth_models.User.objects.all()\n\n\n\n\u958b\u767a\u30b5\u30fc\u30d0\u3092\u518d\u8d77\u52d5\u3057\u3001\u4ee5\u4e0b\u306equery\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\nquery {\n  user(id: \"1\") {\n    id\n    username\n    email\n    isSuperuser\n        isStaff\n  }\n}\n\n\u5b9f\u884c\u3059\u308b\u3068\u6b21\u306e\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"1\",\n      \"username\": \"foo\",\n      \"email\": \"test@example.com\",\n      \"isSuperuser\": true,\n      \"isStaff\": true\n    }\n  }\n}\n\n\u4eca\u5ea6\u306fid\u3067\u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u304c\u53d6\u5f97\u3067\u304d\u307e\u3057\u305f\u3002\n\u3082\u3057email\u304c\u5fc5\u8981\u306a\u3051\u308c\u3070query\u304b\u3089email\u3092\u524a\u9664\u3057\u3066\u3057\u307e\u3048\u3070API\u30b5\u30fc\u30d0\u306femail\u3092\u8fd4\u3057\u307e\u305b\u3093\u3002\n\u3069\u306e\u60c5\u5831\u3092\u8fd4\u3057\u3066\u6b32\u3057\u3044\u304b (\u4f8b\u3048\u3070email\u304c\u6b32\u3057\u3044\u306a\u3069) \u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u3067\u6307\u5b9a\u3067\u304d\u308b\u306e\u3067\n\u89e3\u6790\u3082\u697d\u306b\u306a\u308a\u307e\u3059\u3057\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306e\u4ed5\u69d8\u5909\u66f4\u3067\u65b0\u3057\u3044field\u3092\u53d6\u5f97\u3057\u305f\u3044\u5834\u5408\u306b\u3082\nAPI\u5074\u306e\u4fee\u6b63\u3092\u3057\u306a\u304f\u3066\u3059\u307f\u305d\u3046\u3067\u3059\u3002\u307e\u305f\u5fc5\u8981\u306e\u306a\u3044\u30c7\u30fc\u30bf\u306e\u3084\u308a\u53d6\u308a\u306e\u3057\u306a\u304f\u3066\u3059\u307f\u307e\u3059\u3002\n\u6c17\u3092\u3064\u3051\u308b\u3068\u3053\u308d\u3068\u3057\u3066\u306f \u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u306e\u3042\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304c\u3001\n\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u304c\u7701\u7565\u3055\u308clower\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u306b\u306a\u308b\u3053\u3068\u3067\u3059\u3002\n\u4f8b)\n\n\nauth_user.is_superuser \u2192 isSuperuser\n\n\nauth_user.is_staff \u2192 iStaffr\n\n\n\u5b58\u5728\u3057\u306a\u3044id\u306e\u5834\u5408\u306f .first() \u3067None\u306b\u306a\u308b\u306e\u3067null\u306b\u306a\u308a\u307e\u3059\u3002\n\u30af\u30a8\u30ea::\nquery {\n  user(id: \"6589645936543\") {\n    id\n    username\n    email\n    isSuperuser\n    isStaff\n  }\n}\n\n\u7d50\u679c::\n{\n  \"data\": {\n    \"user\": null\n  }\n}\n\n\n\u4e21\u65b9\u3092\u540c\u6642\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\n\u30af\u30a8\u30ea::\nquery {\n  user(id: \"1\") {\n    id\n    username\n    email\n    isSuperuser\n    isStaff\n  }\n  users {\n    id\n    username\n    lastLogin\n  }\n}\n\n\n\u7d50\u679c::\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"1\",\n      \"username\": \"foo\",\n      \"email\": \"test@example.com\",\n      \"isSuperuser\": true,\n      \"isStaff\": true\n    },\n    \"users\": [\n      {\n        \"id\": \"1\",\n        \"username\": \"foo\",\n        \"lastLogin\": null\n      },\n      {\n        \"id\": \"2\",\n        \"username\": \"bar\",\n        \"lastLogin\": null\n      }\n    ]\n  }\n}\n\n\n\u30d5\u30a3\u30eb\u30bf\u30fc\u3059\u308b\n\u5b9f\u969b\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306a\u3069\u3067\u306f\u30ec\u30b3\u30fc\u30c9\u3092\u5168\u3066\u53d6\u5f97\u3059\u308b\u3088\u308a\u3082\u3001\n\u6761\u4ef6\u3092\u3064\u3051\u3066\u30d5\u30a3\u30eb\u30bf\u30fc\u3059\u308b\u3053\u3068\u306e\u65b9\u304c\u591a\u3044\u3067\u3057\u3087\u3046\u3002\n\u5148\u307b\u3069\u306eusers\u3092filter\u3067\u304d\u308b\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\nimport graphene\nfrom graphene_django import DjangoObjectType\nfrom graphene_django.filter import DjangoFilterConnectionField  # <- \u8ffd\u52a0\n\nfrom django.contrib.auth import models as auth_models\n\n\nclass User(DjangoObjectType):\n    class Meta:\n        model = auth_models.User\n        filter_fields = ('username', 'email', 'is_staff')  # <- \u8ffd\u52a0\n        interfaces = (graphene.relay.Node,)                # <- \u8ffd\u52a0\n\n\nclass Query(graphene.ObjectType):\n    user = graphene.Field(User, id=graphene.String())\n    users = DjangoFilterConnectionField(User)  # <- \u5909\u66f4\n\n    @graphene.resolve_only_args\n    def resolve_user(self, id):\n        return auth_models.User.objects.filter(pk=id).first()\n\n    # resolve_users()\u30e1\u30bd\u30c3\u30c9\u306f\u524a\u9664\n\nschema = graphene.Schema(query=Query)\n\nfilter_fields \u306b\u30e2\u30c7\u30eb\u306e\u5c5e\u6027\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u6307\u5b9a\u3057\u305f\u5c5e\u6027\u3067\u30d5\u30a3\u30eb\u30bf\u30fc\u3067\u304d\u307e\u3059\u3002\n\u958b\u767a\u30b5\u30fc\u30d0\u3092\u518d\u8d77\u52d5\u3057\u3066\u6b21\u306e\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\nquery {\n  users(isStaff: true) {\n    edges {\n      node {\n        username\n        email\n        isStaff\n      }\n    }\n  }\n}\n\nisStaff: true \u3068\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u30b9\u30bf\u30c3\u30d5\u5c5e\u6027\u304c\u3064\u3044\u3066\u3044\u308b\u30e6\u30fc\u30b6\u3060\u3051\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\n{\n  \"data\": {\n    \"users\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"username\": \"foo\",\n            \"email\": \"test@example.com\",\n            \"isStaff\": true\n          }\n        },\n        {\n          \"node\": {\n            \"username\": \"bar\",\n            \"email\": \"test2@example.com\",\n            \"isStaff\": true\n          }\n        }\n      ]\n    }\n  }\n}\n\nfoo \u30e6\u30fc\u30b6\u306e\u30b9\u30bf\u30c3\u30d5\u5c5e\u6027\u3092\u5916\u3059\u3068\u4ee5\u4e0b\u306e\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002\n{\n  \"data\": {\n    \"users\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"username\": \"bar\",\n            \"email\": \"test2@example.com\",\n            \"isStaff\": true\n          }\n        }\n      ]\n    }\n  }\n}\n\n\n\u6240\u7ba1\n\u8efd\u304f\u89e6\u3063\u3066\u307f\u305f\u611f\u60f3\u3067\u3059\u304c\u7d50\u69cb\u7656\u304c\u3042\u308b\u306a\u3042\u3068\u611f\u3058\u307e\u3057\u305f\u3002\n\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u3067\u4f7f\u3046\u306b\u306f\u3001GraphQL\u306b\u3064\u3044\u3066\u77e5\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u306f\u3082\u3061\u308d\u3093\u3067\u3059\u304c\u3001\ngraphene\u306e\u4f7f\u3044\u65b9\u3001graphene_django\u306e\u4f7f\u3044\u65b9\u3082\u4e00\u901a\u308a\u62bc\u3055\u3048\u3066\u304a\u304b\u306a\u3044\u3068\n\u30cf\u30de\u3063\u3066\u629c\u3051\u51fa\u305b\u306a\u3044\u3068\u3046\u72b6\u6cc1\u306b\u9665\u308a\u305d\u3046\u3067\u3059\u3002\n\u305f\u3060\u4f7f\u3044\u3069\u3053\u308d\u306b\u3088\u3063\u3066\u306f\u3059\u3054\u304f\u4fbf\u5229\u3060\u306a\u3042\u3068\u3082\u601d\u3044\u307e\u3057\u305f\u3002\nAPI\u3092\u4f55\u767a\u3082\u6483\u3063\u3066\u8868\u793a\u3057\u3066\u3044\u305f\u3068\u3053\u308d\u30921\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u6e08\u3080\u306e\u3067\u826f\u3044\u3067\u3059\u3002\nGraphQL\u306ffacebook\u304c\u516c\u958b\u3057\u305f\u4ed5\u69d8\u3067\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3067\u306fRelay\u3067\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u305d\u3063\u3061\u3082\u5408\u308f\u305b\u3066\u3082\u3046\u3061\u3087\u3063\u3068\u904a\u3093\u3067\u307f\u305f\u3044\u6c17\u306b\u306f\u306a\u308a\u307e\u3057\u305f\u306d\u3002\n# Django\u3067graphene_django\u3092\u4f7f\u3063\u3066GraphQL API\n\n\u3053\u306e\u8a18\u4e8b\u306f [Django Advent Calendar 2016](http://qiita.com/advent-calendar/2016/django) 19\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\nGraphQL\u306e\u305f\u3081\u306ePython\u88fd\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306b [graphene](http://graphene-python.org/) \u304c\u3042\u308a\u307e\u3059\u3002graphene\u306b\u306fO/R Mapper\u3067\u4f7f\u3044\u3084\u3059\u304f\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u305d\u306e\u4e2d\u306e1\u3064 [graphene-django](https://github.com/graphql-python/graphene-django/) \u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\n## \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nvenv\u74b0\u5883\u3092\u4f5c\u3063\u3066activate\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n```\n$ ~/ng/home/src/develop/pyvm/pythons/Python-3.5.2/bin/python3 -m venv env\n$ source env/bin/activate\n(env) $\n```\n\npip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```\n(env) $ pip install graphene_django\nCollecting graphene-django\n  Using cached graphene-django-1.2.1.tar.gz\nCollecting six>=1.10.0 (from graphene-django)\nCollecting graphene>=1.1.3 (from graphene-django)\n  Using cached graphene-1.1.3.tar.gz\nCollecting Django>=1.6.0 (from graphene-django)\n  Using cached Django-1.10.4-py2.py3-none-any.whl\nCollecting iso8601 (from graphene-django)\n  Using cached iso8601-0.1.11-py2.py3-none-any.whl\nCollecting singledispatch>=3.4.0.3 (from graphene-django)\n  Using cached singledispatch-3.4.0.3-py2.py3-none-any.whl\nCollecting graphql-core>=1.0.1 (from graphene>=1.1.3->graphene-django)\n  Using cached graphql-core-1.0.1.tar.gz\nCollecting graphql-relay>=0.4.5 (from graphene>=1.1.3->graphene-django)\n  Using cached graphql-relay-0.4.5.tar.gz\nCollecting promise>=1.0.1 (from graphene>=1.1.3->graphene-django)\n  Using cached promise-1.0.1.tar.gz\nCollecting typing (from promise>=1.0.1->graphene>=1.1.3->graphene-django)\n  Using cached typing-3.5.2.2.tar.gz\nInstalling collected packages: six, typing, promise, graphql-core, graphql-relay, graphene, Django, iso8601, singledispatch, graphene-django\n  Running setup.py install for typing ... done\n  Running setup.py install for promise ... done\n  Running setup.py install for graphql-core ... done\n  Running setup.py install for graphql-relay ... done\n  Running setup.py install for graphene ... done\n  Running setup.py install for graphene-django ... done\nSuccessfully installed Django-1.10.4 graphene-1.1.3 graphene-django-1.2.1 graphql-core-1.0.1 graphql-relay-0.4.5 iso8601-0.1.11 promise-1.0.1 singledispatch-3.4.0.3 six-1.10.0 typing-3.5.2.2\n\n```\n\n## \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\n\n`django-admin startprojet` \u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a `myproj` \u3068\u304b\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```\n(env) $ django-admin startproject myproj .\n```\n\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n```\n(env) $ tree myproj\nmyproj\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 settings.py\n\u251c\u2500\u2500 urls.py\n\u2514\u2500\u2500 wsgi.py\n```\n\n## schema\u3092\u5b9a\u7fa9\u3059\u308b\n\nmyproj/schema.py\u306bAPI\u306e\u30b9\u30ad\u30fc\u30de\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\nimport graphene\nfrom graphene_django import DjangoObjectType\nfrom django.contrib.auth import models as auth_models\n\n\nclass User(DjangoObjectType):\n    class Meta:\n        model = auth_models.User\n\n\nclass Query(graphene.ObjectType):\n    users = graphene.List(User)\n\n    @graphene.resolve_only_args\n    def resolve_users(self):\n        return auth_models.User.objects.all()\n\n\nschema = graphene.Schema(query=Query)\n\n```\n\n\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u306e\u3067 `django.contrib.auth.models.User()` \u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\n## \u8a2d\u5b9a\u3092\u8ffd\u52a0\u3059\u308b\n\ngraphene_django\u306e\u305f\u3081\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n### INSTALL_APPS \u306b `graphene_django` \u3092\u8ffd\u52a0\u3059\u308b\n\nmyproj/settings.py::\n\n```\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'graphene_django',  # <- \u8ffd\u52a0\n]\n\n```\n\n### GRAPHENE \u306b\u30b9\u30ad\u30fc\u30de\u3078\u306edotted name\u3092\u8a2d\u5b9a\u3059\u308b\n\nsettings.py\u306b\u5148\u307b\u3069\u4f5c\u6210\u3057\u305fschema.py\u306e\u4e2d\u306eschema\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307e\u3067\u306edotted name (foo.bar.baz\u307f\u305f\u3044\u306a\u3084\u3064) \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nmyproj/settings.py::\n\n```\nGRAPHENE = {\n    'SCHEMA': 'myproj.schema.schema'\n}\n```\n\n## graphql\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u4ed8\u3051\u308b\u305f\u3081\u306eURL\u3092\u8ffd\u52a0\u3059\u308b\n\n```\nfrom django.conf.urls import url\nfrom django.contrib import admin\n\nfrom graphene_django.views import GraphQLView  # <- \u8ffd\u52a0\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'^graphql/', GraphQLView.as_view(graphiql=True)),  # <- \u8ffd\u52a0\n]\n\n```\n\n`http://localhost:8000/graphql/` \u304cAPI\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u4ed8\u3051\u308bURL\u306b\u306a\u308a\u307e\u3059\u3002\ngraphql\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u7d44\u307f\u305f\u3081\u306egraphiql\u3068\u3044\u3046\u753b\u9762\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n`graphiql=True` \u3092\u6307\u5b9a\u3059\u308b\u3068\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n## \u8d77\u52d5\u3059\u308b\n\n`migrate` \u3057\u305f\u5f8c\u3001\u8d77\u52d5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```\n(env) $ python manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying sessions.0001_initial... OK\n(env) $\n```\n\n\u8d77\u52d5\u3057\u307e\u3059\u3002\n\n```\n(env) $ python manage.py runserver\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\nDecember 20, 2016 - 13:28:32\nDjango version 1.10.4, using settings 'myproj.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n\n```\n\n\u30d6\u30e9\u30a6\u30b6\u3067 http://localhost:8000/graphql/ \u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n## \u53d6\u5f97\u3059\u308b\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304c\u7a7a\u306e\u72b6\u614b\u306e\u305f\u3081\u30e6\u30fc\u30b6\u3092\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n```\n(env) $ python manage.py createsuperuser\nUsername (leave blank to use 'sximada'): foo\nEmail address: test@example.com\nPassword:\nPassword (again):\nSuperuser created successfully.\n\n```\n\n\u3067\u306fgraphiql\u753b\u9762\u3067query\u3092\u767a\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u5de6\u5074\u306e\u30da\u30a4\u30f3\u306b\u4ee5\u4e0b\u306e\u30af\u30a8\u30ea\u3092\u5165\u529b\u3057\u307e\u3059\u3002\n\n```\nquery {\n  users {\n    id\n    username\n    email\n    isSuperuser\n        isStaff\n  }\n}\n```\n\n\u5165\u529b\u3057\u305f\u3089\u5de6\u4e0a\u90e8\u306b\u3042\u308b\u518d\u751f\u30de\u30fc\u30af\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002\n\u3059\u308b\u3068\u53f3\u5074\u306e\u30da\u30a4\u30f3\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\n```\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"id\": \"1\",\n        \"username\": \"foo\",\n        \"email\": \"test@example.com\",\n        \"isSuperuser\": true,\n        \"isStaff\": true\n      }\n    ]\n  }\n}\n```\n\n\u30e6\u30fc\u30b6\u306e\u60c5\u5831\u304c\u53d6\u5f97\u3067\u304d\u307e\u3057\u305f\u3002\u30e6\u30fc\u30b6\u304c\u8907\u6570\u3044\u308b\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"id\": \"1\",\n        \"username\": \"foo\",\n        \"email\": \"test@example.com\",\n        \"isSuperuser\": true,\n        \"isStaff\": true\n      },\n      {\n        \"id\": \"2\",\n        \"username\": \"bar\",\n        \"email\": \"test2@example.com\",\n        \"isSuperuser\": true,\n        \"isStaff\": true\n      }\n    ]\n  }\n}\n```\n\nproj.schema.Query.resolve_users()\u3067\u5168\u3066\u306e\u30e6\u30fc\u30b6\u3092\u8fd4\u3057\u3066\u3044\u308b\u306e\u3067\n\u5168\u30e6\u30fc\u30b6\u304c\u4e00\u89a7\u306b\u306a\u3063\u3066\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n```\n    @graphene.resolve_only_args\n    def resolve_users(self):\n        return auth_models.User.objects.all()  # <- \u30b3\u30b3\n\n```\n\n## id\u6307\u5b9a\u3067\u30e6\u30fc\u30b6\u6307\u5b9a\u3057\u3066\u53d6\u5f97\u3059\u308b\n\nid\u3092\u6307\u5b9a\u3057\u3066\u30e6\u30fc\u30b6\u3092\u6307\u5b9a\u3057\u305f\u3044\u306e\u3067\u3001\nmyproj/schema.py \u306eQuery\u30af\u30e9\u30b9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\n\nmyproj/schema.py::\n\n```\nclass Query(graphene.ObjectType):\n    user = graphene.Field(User, id=graphene.String())  # <- \u8ffd\u52a0\n    users = graphene.List(User)\n\n    @graphene.resolve_only_args                                # <- \u8ffd\u52a0\n    def resolve_user(self, id):                                # <- \u8ffd\u52a0\n        return auth_models.User.objects.filter(pk=id).first()  # <- \u8ffd\u52a0\n\n    @graphene.resolve_only_args\n    def resolve_users(self):\n        return auth_models.User.objects.all()\n\n\n```\n\n\u958b\u767a\u30b5\u30fc\u30d0\u3092\u518d\u8d77\u52d5\u3057\u3001\u4ee5\u4e0b\u306equery\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```\nquery {\n  user(id: \"1\") {\n    id\n    username\n    email\n    isSuperuser\n        isStaff\n  }\n}\n```\n\n\u5b9f\u884c\u3059\u308b\u3068\u6b21\u306e\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\n```\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"1\",\n      \"username\": \"foo\",\n      \"email\": \"test@example.com\",\n      \"isSuperuser\": true,\n      \"isStaff\": true\n    }\n  }\n}\n```\n\n\u4eca\u5ea6\u306fid\u3067\u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u304c\u53d6\u5f97\u3067\u304d\u307e\u3057\u305f\u3002\n\u3082\u3057email\u304c\u5fc5\u8981\u306a\u3051\u308c\u3070query\u304b\u3089email\u3092\u524a\u9664\u3057\u3066\u3057\u307e\u3048\u3070API\u30b5\u30fc\u30d0\u306femail\u3092\u8fd4\u3057\u307e\u305b\u3093\u3002\n\u3069\u306e\u60c5\u5831\u3092\u8fd4\u3057\u3066\u6b32\u3057\u3044\u304b (\u4f8b\u3048\u3070email\u304c\u6b32\u3057\u3044\u306a\u3069) \u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u3067\u6307\u5b9a\u3067\u304d\u308b\u306e\u3067\n\u89e3\u6790\u3082\u697d\u306b\u306a\u308a\u307e\u3059\u3057\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306e\u4ed5\u69d8\u5909\u66f4\u3067\u65b0\u3057\u3044field\u3092\u53d6\u5f97\u3057\u305f\u3044\u5834\u5408\u306b\u3082\nAPI\u5074\u306e\u4fee\u6b63\u3092\u3057\u306a\u304f\u3066\u3059\u307f\u305d\u3046\u3067\u3059\u3002\u307e\u305f\u5fc5\u8981\u306e\u306a\u3044\u30c7\u30fc\u30bf\u306e\u3084\u308a\u53d6\u308a\u306e\u3057\u306a\u304f\u3066\u3059\u307f\u307e\u3059\u3002\n\n\u6c17\u3092\u3064\u3051\u308b\u3068\u3053\u308d\u3068\u3057\u3066\u306f \u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u306e\u3042\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304c\u3001\n\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u304c\u7701\u7565\u3055\u308clower\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u306b\u306a\u308b\u3053\u3068\u3067\u3059\u3002\n\n\u4f8b)\n\n- `auth_user.is_superuser` \u2192 `isSuperuser`\n- `auth_user.is_staff` \u2192 `iStaffr`\n\n\n\u5b58\u5728\u3057\u306a\u3044id\u306e\u5834\u5408\u306f `.first()` \u3067None\u306b\u306a\u308b\u306e\u3067null\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30af\u30a8\u30ea::\n\n```\nquery {\n  user(id: \"6589645936543\") {\n    id\n    username\n    email\n    isSuperuser\n    isStaff\n  }\n}\n```\n\n\u7d50\u679c::\n\n```\n{\n  \"data\": {\n    \"user\": null\n  }\n}\n```\n\n## \u4e21\u65b9\u3092\u540c\u6642\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\n\n\n\u30af\u30a8\u30ea::\n\n```\nquery {\n  user(id: \"1\") {\n    id\n    username\n    email\n    isSuperuser\n    isStaff\n  }\n  users {\n    id\n    username\n    lastLogin\n  }\n}\n\n```\n\n\u7d50\u679c::\n\n```\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"1\",\n      \"username\": \"foo\",\n      \"email\": \"test@example.com\",\n      \"isSuperuser\": true,\n      \"isStaff\": true\n    },\n    \"users\": [\n      {\n        \"id\": \"1\",\n        \"username\": \"foo\",\n        \"lastLogin\": null\n      },\n      {\n        \"id\": \"2\",\n        \"username\": \"bar\",\n        \"lastLogin\": null\n      }\n    ]\n  }\n}\n```\n\n## \u30d5\u30a3\u30eb\u30bf\u30fc\u3059\u308b\n\n\u5b9f\u969b\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306a\u3069\u3067\u306f\u30ec\u30b3\u30fc\u30c9\u3092\u5168\u3066\u53d6\u5f97\u3059\u308b\u3088\u308a\u3082\u3001\n\u6761\u4ef6\u3092\u3064\u3051\u3066\u30d5\u30a3\u30eb\u30bf\u30fc\u3059\u308b\u3053\u3068\u306e\u65b9\u304c\u591a\u3044\u3067\u3057\u3087\u3046\u3002\n\n\u5148\u307b\u3069\u306eusers\u3092filter\u3067\u304d\u308b\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n```\nimport graphene\nfrom graphene_django import DjangoObjectType\nfrom graphene_django.filter import DjangoFilterConnectionField  # <- \u8ffd\u52a0\n\nfrom django.contrib.auth import models as auth_models\n\n\nclass User(DjangoObjectType):\n    class Meta:\n        model = auth_models.User\n        filter_fields = ('username', 'email', 'is_staff')  # <- \u8ffd\u52a0\n        interfaces = (graphene.relay.Node,)                # <- \u8ffd\u52a0\n\n\nclass Query(graphene.ObjectType):\n    user = graphene.Field(User, id=graphene.String())\n    users = DjangoFilterConnectionField(User)  # <- \u5909\u66f4\n\n    @graphene.resolve_only_args\n    def resolve_user(self, id):\n        return auth_models.User.objects.filter(pk=id).first()\n\n    # resolve_users()\u30e1\u30bd\u30c3\u30c9\u306f\u524a\u9664\n\nschema = graphene.Schema(query=Query)\n```\n\n`filter_fields` \u306b\u30e2\u30c7\u30eb\u306e\u5c5e\u6027\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u6307\u5b9a\u3057\u305f\u5c5e\u6027\u3067\u30d5\u30a3\u30eb\u30bf\u30fc\u3067\u304d\u307e\u3059\u3002\n\n\u958b\u767a\u30b5\u30fc\u30d0\u3092\u518d\u8d77\u52d5\u3057\u3066\u6b21\u306e\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n\n```\nquery {\n  users(isStaff: true) {\n    edges {\n      node {\n        username\n        email\n        isStaff\n      }\n    }\n  }\n}\n```\n\n`isStaff: true` \u3068\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u30b9\u30bf\u30c3\u30d5\u5c5e\u6027\u304c\u3064\u3044\u3066\u3044\u308b\u30e6\u30fc\u30b6\u3060\u3051\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\n\n\n```\n{\n  \"data\": {\n    \"users\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"username\": \"foo\",\n            \"email\": \"test@example.com\",\n            \"isStaff\": true\n          }\n        },\n        {\n          \"node\": {\n            \"username\": \"bar\",\n            \"email\": \"test2@example.com\",\n            \"isStaff\": true\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n`foo` \u30e6\u30fc\u30b6\u306e\u30b9\u30bf\u30c3\u30d5\u5c5e\u6027\u3092\u5916\u3059\u3068\u4ee5\u4e0b\u306e\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n```\n{\n  \"data\": {\n    \"users\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"username\": \"bar\",\n            \"email\": \"test2@example.com\",\n            \"isStaff\": true\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n## \u6240\u7ba1\n\n\u8efd\u304f\u89e6\u3063\u3066\u307f\u305f\u611f\u60f3\u3067\u3059\u304c\u7d50\u69cb\u7656\u304c\u3042\u308b\u306a\u3042\u3068\u611f\u3058\u307e\u3057\u305f\u3002\n\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u3067\u4f7f\u3046\u306b\u306f\u3001GraphQL\u306b\u3064\u3044\u3066\u77e5\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u306f\u3082\u3061\u308d\u3093\u3067\u3059\u304c\u3001\ngraphene\u306e\u4f7f\u3044\u65b9\u3001graphene_django\u306e\u4f7f\u3044\u65b9\u3082\u4e00\u901a\u308a\u62bc\u3055\u3048\u3066\u304a\u304b\u306a\u3044\u3068\n\u30cf\u30de\u3063\u3066\u629c\u3051\u51fa\u305b\u306a\u3044\u3068\u3046\u72b6\u6cc1\u306b\u9665\u308a\u305d\u3046\u3067\u3059\u3002\n\n\u305f\u3060\u4f7f\u3044\u3069\u3053\u308d\u306b\u3088\u3063\u3066\u306f\u3059\u3054\u304f\u4fbf\u5229\u3060\u306a\u3042\u3068\u3082\u601d\u3044\u307e\u3057\u305f\u3002\nAPI\u3092\u4f55\u767a\u3082\u6483\u3063\u3066\u8868\u793a\u3057\u3066\u3044\u305f\u3068\u3053\u308d\u30921\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u6e08\u3080\u306e\u3067\u826f\u3044\u3067\u3059\u3002\nGraphQL\u306ffacebook\u304c\u516c\u958b\u3057\u305f\u4ed5\u69d8\u3067\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3067\u306fRelay\u3067\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u305d\u3063\u3061\u3082\u5408\u308f\u305b\u3066\u3082\u3046\u3061\u3087\u3063\u3068\u904a\u3093\u3067\u307f\u305f\u3044\u6c17\u306b\u306f\u306a\u308a\u307e\u3057\u305f\u306d\u3002\n", "tags": ["Python", "Django", "GraphQL"]}