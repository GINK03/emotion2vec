{"context": " More than 1 year has passed since last update.\n\n 4\u8272\u554f\u984c\u3092\u89e3\u304f\n\u7d44\u5408\u305b\u6700\u9069\u5316\u3092\u4f7f\u3046\u30684\u8272\u554f\u984c\u3082\u89e3\u3051\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u753b\u50cf\u304b\u3089\u81ea\u52d5\u7684\u306b\u554f\u984c\u3092\u8aad\u307f\u53d6\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u554f\u984c\u306f\u3001\u30cb\u30b3\u30ea\u69d8\u304b\u3089\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n \u5b9a\u5f0f\u5316\n\u8907\u6570\u306e\u30a8\u30ea\u30a2\u304c\u3042\u308a\u3001\u96a3\u63a5\u3057\u305f\u30a8\u30ea\u30a2\u540c\u58eb\u306f\u3001\u7570\u306a\u308b\u8272\u3067\u5857\u308b\u3053\u3068\u3068\u3057\u307e\u3059\u3002\n\n\nvariables\\mbox{variables}\nvij\u2208{0,1}\u00a0\u2200i,jv_{ij} \\in \\{0, 1\\} ~ \\forall i, j\n\u30a8\u30ea\u30a2i\u304c\u8272j\u304b\u3069\u3046\u304b (1)\n\n\nsubject to\\mbox{subject to}\n\u2211jvij=1\u00a0\u2200i\\sum_j{v_{ij}} = 1 ~ \\forall i\n\u8272\u30921\u3064\u9078\u3076 (2)\n\n\n\n\u96a3\u308a\u5408\u3046\u30a8\u30ea\u30a2\u306f\u7570\u306a\u308b\u8272\u306b\u3059\u308b (3)\n\n\n\n Python\u3067\u89e3\u304f\n\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u8fbc\u307f\u307e\u3059\u3002\n\npython\nimport networkx as nx\nfrom urllib import request\nfrom PIL import Image, ImageDraw\nfrom collections import Counter\nfrom itertools import product\nfrom random import seed, shuffle\nfrom pulp import *\n\n# \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u8fbc\u307f\nwith request.urlopen('https://dl.dropboxusercontent.com/u/35689878/tmp/4c.png') as fd:\n    im = Image.open(fd)\n\n\n\n\n\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308b\u4ee3\u8868\u8272\u3092\u983b\u5ea6\u306e\u591a\u3044\u8272\u3068\u3057\u3066\u62bd\u51fa\u3057\u307e\u3059\u3002\u4ee3\u8868\u8272\u3067\u5857\u308a\u3064\u3076\u3055\u308c\u305f\u3082\u306e\u304c\u30a8\u30ea\u30a2\u3067\u3059\u3002\n\u7d50\u679c\u306e\u8272\u3067\u30a8\u30ea\u30a2\u3092\u5857\u308b\u305f\u3081\u306b\u3001\u4e00\u65e6\u3001\u30a8\u30ea\u30a2\u3092\u308f\u304b\u308a\u3084\u3059\u3044\u8272(\u8d64\u304c0\u3001\u7dd1\u304c1\u3001\u9752\u304c\u30a8\u30ea\u30a2\u756a\u53f7)\u3067\u5857\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\u6700\u521d\u306b RGB=(0,1,?)\u306e\u8272\u306eG(\u7dd1)\u30920\u306b\u3057\u307e\u3059\u3002\n\u4ee3\u8868\u8272\u306e\u30a8\u30ea\u30a2\u3092RGB=(0,1,\u901a\u3057\u756a\u53f7)\u3067\u5857\u308a\u3064\u3076\u3057\u307e\u3059\u3002\n\u5883\u754c\u3092\u5c11\u3057\u5e83\u3052\u307e\u3059\n\n\n\u30e9\u30f3\u30c0\u30e0\u306b\u30dd\u30a4\u30f3\u30c8\u3092\u9078\u3073\u3001\u305d\u306e\u8272\u304c\u30a8\u30ea\u30a2\u30671\u30d4\u30af\u30bb\u30eb\u96a3\u308a\u304c\u3069\u306e\u30a8\u30ea\u30a2\u3067\u3082\u306a\u3051\u308c\u3070\u305d\u306e\u30a8\u30ea\u30a2\u306b\u3057\u307e\u3059\u3002\n\n\n\n\npython\n# \u4ee3\u8868\u8272(\u6700\u3082\u4f7f\u7528\u983b\u5ea6\u306e\u591a\u3044\u8272)\u3092\u62bd\u51fa\ncc = sorted([(v, k) for k, v in Counter(im.getdata()).items()])[-1][1]\n\n# RGB=(0,1,?)\u306e\u8272\u3092\u306a\u304f\u3059\nfor y, x in product(range(im.height), range(im.width)):\n    R, G, B = im.getpixel((x, y))[:3]\n    if (R, G) == (0, 1):\n        im.putpixel(0, 0, B)\n\n# \u4ee3\u8868\u8272\u306e\u30a8\u30ea\u30a2\u3092RGB=(0,1,\u901a\u3057\u756a\u53f7)\u3067\u5857\u308a\u3064\u3076\u3059\nn = 0\nfor y, x in product(range(im.height), range(im.width)):\n    if im.getpixel((x, y)) != cc:\n        continue\n    ImageDraw.floodfill(im, (x, y), (0, 1, n))\n    n += 1\n\n# \u5883\u754c\u3092\u5c11\u3057\u5e83\u3052\u308b\nseed(1)\ndd = [(-1, 0), (0, -1), (0, 1), (1, 0)]\nfor h in range(1):\n    l = list(product(range(1, im.height-1), range(1, im.width-1)))\n    shuffle(l)\n    for y, x in l:\n        c = im.getpixel((x, y))\n        if c[:2] == (0, 1):\n            for i, j in dd:\n                if im.getpixel((x+i, y+j))[:2] != (0, 1):\n                    im.putpixel((x+i, y+j), c)\n\n\n\u30a8\u30ea\u30a2\u3092\u70b9\u3068\u3057\u3001\u30d4\u30af\u30bb\u30eb\u304c\u96a3\u308a\u5408\u3046\u30a8\u30ea\u30a2\u306e\u9593\u3092\u8fba\u3068\u3059\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\npython\n# \u96a3\u308a\u5408\u3046\u304b\u3069\u3046\u304b\u3092\u30b0\u30e9\u30d5\u3067\u8868\u3059\ng = nx.Graph()\nfor y, x in product(range(im.height-1), range(im.width-1)):\n    c1 = im.getpixel((x, y))\n    if c1[:2] != (0, 1):\n        continue\n    c2 = im.getpixel((x+1, y))\n    c3 = im.getpixel((x, y+1))\n    if c2[:2] == (0, 1) and c1[2] != c2[2]:\n        g.add_edge(c1[2], c2[2])\n    if c3[:2] == (0, 1) and c1[2] != c3[2]:\n        g.add_edge(c1[2], c3[2])\n\n\n\u5b9a\u5f0f\u5316\u3057\u3066\u89e3\u304d\u307e\u3059\u3002\n\npython\n# 4\u8272\u554f\u984c\u3092\u89e3\u304f\nr4 = range(4)\nm = LpProblem() # \u6570\u7406\u30e2\u30c7\u30eb\n# \u30a8\u30ea\u30a2i\u3092\u8272j\u306b\u3059\u308b\u304b\u3069\u3046\u304b (1)\nv = [[LpVariable('v%d_%d'%(i, j), cat=LpBinary) for j in r4] for i in g.nodes()]\nfor i in g.nodes():\n    m += lpSum(v[i]) == 1 # (2)\nfor i, j in g.edges():\n    for k in r4:\n        m += v[i][k] + v[j][k] <= 1 # (3)\nm.solve()\nco = [(97, 132, 219), (228, 128, 109), (255, 241, 164), (121, 201, 164)] # 4\u8272\nrr = [int(value(lpDot(r4, i))) for i in v] # \u7d50\u679c\nfor y, x in product(range(im.height-1), range(im.width-1)):\n    c = im.getpixel((x, y))\n    if c[:2] == (0, 1): # \u30a8\u30ea\u30a2\u306a\u3089\u3070\u3001\u7d50\u679c\u3067\u5857\u308b\n        ImageDraw.floodfill(im, (x, y), co[rr[c[2]]])\nim.save('result.png')\n\n\n\n\u5b9f\u969b\u306b\u8a66\u3057\u3066\u307f\u305f\u3089OK\u3067\u3057\u305f\u3002\n\n\u4ee5\u4e0a\n# <i class='fa fa-image' /> 4\u8272\u554f\u984c\u3092\u89e3\u304f\n[\u7d44\u5408\u305b\u6700\u9069\u5316](http://qiita.com/Tsutomu-KKE@github/items/bfbf4c185ed7004b5721)\u3092\u4f7f\u3046\u30684\u8272\u554f\u984c\u3082\u89e3\u3051\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u753b\u50cf\u304b\u3089\u81ea\u52d5\u7684\u306b\u554f\u984c\u3092\u8aad\u307f\u53d6\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u554f\u984c\u306f\u3001[\u30cb\u30b3\u30ea\u69d8](http://www.nikoli.com/ja/take_a_break/four_color_problem/)\u304b\u3089\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n\n# <i class='fa fa-image' /> \u5b9a\u5f0f\u5316\n\u8907\u6570\u306e\u30a8\u30ea\u30a2\u304c\u3042\u308a\u3001\u96a3\u63a5\u3057\u305f\u30a8\u30ea\u30a2\u540c\u58eb\u306f\u3001\u7570\u306a\u308b\u8272\u3067\u5857\u308b\u3053\u3068\u3068\u3057\u307e\u3059\u3002\n\n<table>\n<tr><td>$\\mbox{variables}$</td><td>$v_{ij} \\in \\{0, 1\\} ~ \\forall i, j$</td><td>\u30a8\u30ea\u30a2i\u304c\u8272j\u304b\u3069\u3046\u304b (1)</td></tr>\n<tr><td>$\\mbox{subject to}$</td><td>$\\sum_j{v_{ij}} = 1 ~ \\forall i$</td><td>\u8272\u30921\u3064\u9078\u3076 (2)</td></tr>\n<tr><td></td><td colspan=\"2\">\u96a3\u308a\u5408\u3046\u30a8\u30ea\u30a2\u306f\u7570\u306a\u308b\u8272\u306b\u3059\u308b (3)</td></tr>\n</table>\n\n\n# <i class='fa fa-image' /> Python\u3067\u89e3\u304f\n\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u8fbc\u307f\u307e\u3059\u3002\n\n```py3:python\nimport networkx as nx\nfrom urllib import request\nfrom PIL import Image, ImageDraw\nfrom collections import Counter\nfrom itertools import product\nfrom random import seed, shuffle\nfrom pulp import *\n\n# \u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u8fbc\u307f\nwith request.urlopen('https://dl.dropboxusercontent.com/u/35689878/tmp/4c.png') as fd:\n    im = Image.open(fd)\n```\n\n![4c.png](https://qiita-image-store.s3.amazonaws.com/0/13955/8df50989-747d-cc7f-a28d-e2d6691a6fa0.png)\n\n\n- \u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308b\u4ee3\u8868\u8272\u3092\u983b\u5ea6\u306e\u591a\u3044\u8272\u3068\u3057\u3066\u62bd\u51fa\u3057\u307e\u3059\u3002\u4ee3\u8868\u8272\u3067\u5857\u308a\u3064\u3076\u3055\u308c\u305f\u3082\u306e\u304c\u30a8\u30ea\u30a2\u3067\u3059\u3002\n- \u7d50\u679c\u306e\u8272\u3067\u30a8\u30ea\u30a2\u3092\u5857\u308b\u305f\u3081\u306b\u3001\u4e00\u65e6\u3001\u30a8\u30ea\u30a2\u3092\u308f\u304b\u308a\u3084\u3059\u3044\u8272(\u8d64\u304c0\u3001\u7dd1\u304c1\u3001\u9752\u304c\u30a8\u30ea\u30a2\u756a\u53f7)\u3067\u5857\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n- \u6700\u521d\u306b RGB=(0,1,?)\u306e\u8272\u306eG(\u7dd1)\u30920\u306b\u3057\u307e\u3059\u3002\n- \u4ee3\u8868\u8272\u306e\u30a8\u30ea\u30a2\u3092RGB=(0,1,\u901a\u3057\u756a\u53f7)\u3067\u5857\u308a\u3064\u3076\u3057\u307e\u3059\u3002\n- \u5883\u754c\u3092\u5c11\u3057\u5e83\u3052\u307e\u3059\n  - \u30e9\u30f3\u30c0\u30e0\u306b\u30dd\u30a4\u30f3\u30c8\u3092\u9078\u3073\u3001\u305d\u306e\u8272\u304c\u30a8\u30ea\u30a2\u30671\u30d4\u30af\u30bb\u30eb\u96a3\u308a\u304c\u3069\u306e\u30a8\u30ea\u30a2\u3067\u3082\u306a\u3051\u308c\u3070\u305d\u306e\u30a8\u30ea\u30a2\u306b\u3057\u307e\u3059\u3002\n\n```py3:python\n# \u4ee3\u8868\u8272(\u6700\u3082\u4f7f\u7528\u983b\u5ea6\u306e\u591a\u3044\u8272)\u3092\u62bd\u51fa\ncc = sorted([(v, k) for k, v in Counter(im.getdata()).items()])[-1][1]\n\n# RGB=(0,1,?)\u306e\u8272\u3092\u306a\u304f\u3059\nfor y, x in product(range(im.height), range(im.width)):\n    R, G, B = im.getpixel((x, y))[:3]\n    if (R, G) == (0, 1):\n        im.putpixel(0, 0, B)\n\n# \u4ee3\u8868\u8272\u306e\u30a8\u30ea\u30a2\u3092RGB=(0,1,\u901a\u3057\u756a\u53f7)\u3067\u5857\u308a\u3064\u3076\u3059\nn = 0\nfor y, x in product(range(im.height), range(im.width)):\n    if im.getpixel((x, y)) != cc:\n        continue\n    ImageDraw.floodfill(im, (x, y), (0, 1, n))\n    n += 1\n\n# \u5883\u754c\u3092\u5c11\u3057\u5e83\u3052\u308b\nseed(1)\ndd = [(-1, 0), (0, -1), (0, 1), (1, 0)]\nfor h in range(1):\n    l = list(product(range(1, im.height-1), range(1, im.width-1)))\n    shuffle(l)\n    for y, x in l:\n        c = im.getpixel((x, y))\n        if c[:2] == (0, 1):\n            for i, j in dd:\n                if im.getpixel((x+i, y+j))[:2] != (0, 1):\n                    im.putpixel((x+i, y+j), c)\n```\n\n\u30a8\u30ea\u30a2\u3092\u70b9\u3068\u3057\u3001\u30d4\u30af\u30bb\u30eb\u304c\u96a3\u308a\u5408\u3046\u30a8\u30ea\u30a2\u306e\u9593\u3092\u8fba\u3068\u3059\u308b\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```py3:python\n# \u96a3\u308a\u5408\u3046\u304b\u3069\u3046\u304b\u3092\u30b0\u30e9\u30d5\u3067\u8868\u3059\ng = nx.Graph()\nfor y, x in product(range(im.height-1), range(im.width-1)):\n    c1 = im.getpixel((x, y))\n    if c1[:2] != (0, 1):\n        continue\n    c2 = im.getpixel((x+1, y))\n    c3 = im.getpixel((x, y+1))\n    if c2[:2] == (0, 1) and c1[2] != c2[2]:\n        g.add_edge(c1[2], c2[2])\n    if c3[:2] == (0, 1) and c1[2] != c3[2]:\n        g.add_edge(c1[2], c3[2])\n```\n\n\u5b9a\u5f0f\u5316\u3057\u3066\u89e3\u304d\u307e\u3059\u3002\n\n```py3:python\n# 4\u8272\u554f\u984c\u3092\u89e3\u304f\nr4 = range(4)\nm = LpProblem() # \u6570\u7406\u30e2\u30c7\u30eb\n# \u30a8\u30ea\u30a2i\u3092\u8272j\u306b\u3059\u308b\u304b\u3069\u3046\u304b (1)\nv = [[LpVariable('v%d_%d'%(i, j), cat=LpBinary) for j in r4] for i in g.nodes()]\nfor i in g.nodes():\n    m += lpSum(v[i]) == 1 # (2)\nfor i, j in g.edges():\n    for k in r4:\n        m += v[i][k] + v[j][k] <= 1 # (3)\nm.solve()\nco = [(97, 132, 219), (228, 128, 109), (255, 241, 164), (121, 201, 164)] # 4\u8272\nrr = [int(value(lpDot(r4, i))) for i in v] # \u7d50\u679c\nfor y, x in product(range(im.height-1), range(im.width-1)):\n    c = im.getpixel((x, y))\n    if c[:2] == (0, 1): # \u30a8\u30ea\u30a2\u306a\u3089\u3070\u3001\u7d50\u679c\u3067\u5857\u308b\n        ImageDraw.floodfill(im, (x, y), co[rr[c[2]]])\nim.save('result.png')\n```\n\n![result.png](https://qiita-image-store.s3.amazonaws.com/0/13955/8d95f45c-2d32-e080-d75f-63d70436fd86.png)\n\n\n\u5b9f\u969b\u306b\u8a66\u3057\u3066\u307f\u305f\u3089OK\u3067\u3057\u305f\u3002\n\n![cong.png](https://qiita-image-store.s3.amazonaws.com/0/13955/946741a6-88ea-fe03-902b-f2097a8fb38d.png)\n\n\u4ee5\u4e0a\n", "tags": ["\u7d44\u5408\u305b\u6700\u9069\u5316", "\u6700\u9069\u5316", "\u6570\u5b66", "\u30d1\u30ba\u30eb", "Python"]}