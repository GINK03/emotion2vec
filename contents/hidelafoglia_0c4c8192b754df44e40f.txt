{"context": " More than 1 year has passed since last update.\n\n\u30de\u30c3\u30d7\u306e\u79fb\u52d5\u30a4\u30d9\u30f3\u30c8\u304c\u591a\u3059\u304e\n\nMapView \u306e RegionChange \u3067\u30a4\u30d9\u30f3\u30c8\u3092\u62fe\u3046\nOnMapMoved\u3067\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3068\u304b\u30eb\u30fc\u30c8\u63cf\u753b\u3059\u308b\u304c\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u591a\u304f\u52d5\u4f5c\u304c\u91cd\u3044\n\nclass MapDelegate : MKMapViewDelegate\n{\n  public override void RegionChanged (MKMapView mapView, bool animated)\n  {\n      OnMapMoved (mapView);\n  }\n}\n\n\n\u7c21\u6613\u30b8\u30e7\u30d6\u30ad\u30e5\u30fc\u3067\u51e6\u7406\u3092\u5148\u9001\u308a\u3055\u305b\u308b\n\n1.5\u79d2\n\nusing System.Collections.Concurrent;\nConcurrentQueue<Point> MoveEventQueue = new ConcurrentQueue<Point> ();\n\npublic void OnMapMoved(MKMapView map)\n{\n  MoveEventQueue.Enqueue (map.CenterCoordinate.ToPoint ());\n\n  System.Threading.Tasks\n    .Task.Delay (System.TimeSpan.FromSeconds (1.5))\n    .ContinueWith (\n    (task) => {\n        // UI Thread\n        InvokeOnMainThread (() => { MapMovedTo (map); });\n    }\n  );\n}\n\n\n\u30ad\u30e5\u30fc\u304c\u7a4d\u307e\u308c\u3066\u3044\u308b\u306a\u3089\u3070\u51e6\u7406\u3057\u306a\u3044\n\n\u6700\u5f8c\u306e\u30a4\u30d9\u30f3\u30c8\u3060\u3051\u51e6\u7406\u3055\u305b\u308b\n\npublic void MapMovedTo(MKMapView map)\n{\n  Point pt;\n\n  MoveEventQueue.TryDequeue (out pt);\n  if (pt != null && MoveEventQueue.Count () > 0) {\n    return;\n  }\n  RedrawAnnotaions(map);\n}\n\n\n## \u30de\u30c3\u30d7\u306e\u79fb\u52d5\u30a4\u30d9\u30f3\u30c8\u304c\u591a\u3059\u304e\n\n- MapView \u306e RegionChange \u3067\u30a4\u30d9\u30f3\u30c8\u3092\u62fe\u3046\n- OnMapMoved\u3067\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3068\u304b\u30eb\u30fc\u30c8\u63cf\u753b\u3059\u308b\u304c\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u591a\u304f\u52d5\u4f5c\u304c\u91cd\u3044\n\n~~~csharp\nclass MapDelegate : MKMapViewDelegate\n{\n  public override void RegionChanged (MKMapView mapView, bool animated)\n  {\n      OnMapMoved (mapView);\n  }\n}\n~~~\n\n## \u7c21\u6613\u30b8\u30e7\u30d6\u30ad\u30e5\u30fc\u3067\u51e6\u7406\u3092\u5148\u9001\u308a\u3055\u305b\u308b\n\n- 1.5\u79d2\n\n~~~csharp\nusing System.Collections.Concurrent;\nConcurrentQueue<Point> MoveEventQueue = new ConcurrentQueue<Point> ();\n~~~\n\n~~~csharp\npublic void OnMapMoved(MKMapView map)\n{\n  MoveEventQueue.Enqueue (map.CenterCoordinate.ToPoint ());\n\n  System.Threading.Tasks\n    .Task.Delay (System.TimeSpan.FromSeconds (1.5))\n    .ContinueWith (\n    (task) => {\n        // UI Thread\n        InvokeOnMainThread (() => { MapMovedTo (map); });\n    }\n  );\n}\n~~~\n\n##  \u30ad\u30e5\u30fc\u304c\u7a4d\u307e\u308c\u3066\u3044\u308b\u306a\u3089\u3070\u51e6\u7406\u3057\u306a\u3044\n\n- \u6700\u5f8c\u306e\u30a4\u30d9\u30f3\u30c8\u3060\u3051\u51e6\u7406\u3055\u305b\u308b\n\n~~~csharp\npublic void MapMovedTo(MKMapView map)\n{\n  Point pt;\n\n  MoveEventQueue.TryDequeue (out pt);\n  if (pt != null && MoveEventQueue.Count () > 0) {\n    return;\n  }\n  RedrawAnnotaions(map);\n}\n~~~\n", "tags": ["iOS", "Xamarin"]}