{"context": "Originally posted in http://espinosa.io/blog/2016-03-31-whole-jenkins-in-code.html\nThere various pieces in configuration management to manage a Jenkins\ninstallation. You have the Job DSL plugin 1, a Chef cookbook 2, the\nScript Console 3. There are others you can use, but I will focus on using\nthe three to provide a zero-to-Jenkins setup without clicking on forms or\nwriting XML files. I will make details on the following steps to get it done:\n\nSecure Jenkins\nUpdate plugins\nDisable unnecessary plugins\nInstall other plugins\nCreate a seed job\n\n\nSecure Jenkins\nFirst we setup Chef to load a private key so that the chef-client can be\nauthenticated when connecting to Jenkins. In the code below, this uses the\nchef-client's client key:\nruby_block 'load jenkins credential' do\n  block do\n    require 'openssl'\n    require 'net/ssh'\n\n    key = ::OpenSSL::PKey::RSA.new ::File.read Chef::Config[:client_key]\n\n    node.run_state[:jenkins_private_key] = key.to_pem\n\n    jenkins = resources('jenkins_user[chef]')\n    jenkins.public_keys [\"#{key.ssh_type} #{[key.to_blob].pack('m0')}\"]\n  end\nend\n\nNext is to create a Jenkins user for the chef-client by and specify its public\nkey from the private key above.\njenkins_user 'chef' do\n  id \"chef@#{Chef::Config[:node_name]}\"\n  full_name \"Chef\"\nend\n\nFinally we lock down Jenkins to authenticate with GitHub:\nimport jenkins.model.Jenkins;\nimport org.jenkinsci.plugins.GithubSecurityRealm;\n\nJenkins.instance.securityRealm = new GithubSecurityRealm(\n    'https://github.com', 'https://api.github.com', 'x', 'y')\n\npermissions = new hudson.security.GlobalMatrixAuthorizationStrategy()\n\npermissions.add(Jenkins.ADMINISTER, 'aespinosa')\npermissions.add(Jenkins.ADMINISTER, '#{resources('jenkins_user[chef]').id}')\npermissions.add(hudson.model.View.READ, 'anonymous')\npermissions.add(hudson.model.Item.READ, 'anonymous')\npermissions.add(Jenkins.READ, 'anonymous')\n\nJenkins.instance.authorizationStrategy = permissions\n\nJenkins.instance.save()\n\n\nUpdate plugins\nWhen using the LTS version of Jenkins, some of the plugins are out of date. The\nfollowing Groovy script:\nFirst, we have to get the list of latest packages from the update center. The\nnot_if guard makes sure that we only check for updates once a day even if the\nchef-client tried to converge every 30 minutes.\njenkins_script 'get list of latest plugins' do\n  command <<-eos.gsub(/^\\s+/, '')\n    pm = jenkins.model.instance.pluginManager\n    pm.doCheckUpdatesServer()\n  eos\n\n  not_if do\n    update_frequency = 86_400 # daily\n    update_file = '/var/lib/jenkins/updates/default.json'\n    ::File.exists?(update_file) &&\n      ::File.mtime(update_file) > Time.now - update_frequency\n  end\nend\n\nNext, we finally download the plugins. Note the check between the version in\nthe updateCenter and the pluginManager so that updates are made\nidempotently.\nimport jenkins.model.Jenkins;\n\npm = Jenkins.instance.pluginManager\n\nuc = Jenkins.instance.updateCenter\nupdated = false\npm.plugins.each { plugin ->\n  if (uc.getPlugin(plugin.shortName).version != plugin.version) {\n    update = uc.getPlugin(plugin.shortName).deploy(true)\n    update.get()\n    updated = true\n  }\n}\nif (updated) {\n  Jenkins.instance.restart()\n}\n\n\nInstall plugins\nNext in the plugin setup phase, we disable the plugins we don't need and\ninstall only the plugins we need. This is similar to what I described earlier\nin a previous post.\nimport jenkins.model.Jenkins;\n\npm = Jenkins.instance.pluginManager\n\nuc = Jenkins.instance.updateCenter\npm.plugins.each { plugin ->\nplugin.disable()\n}\n\ndeployed = false\ndef activatePlugin(plugin) {\nif (! plugin.isEnabled()) {\n  plugin.enable()\n  deployed = true\n}\n\nplugin.getDependencies().each {\n  activatePlugin(pm.getPlugin(it.shortName))\n}\n}\n\n[\"git\", \"workflow-aggregator\", \"github-oauth\", \"job-dsl\", \"extended-read-permission\"].each {\nif (! pm.getPlugin(it)) {\n  deployment = uc.getPlugin(it).deploy(true)\n  deployment.get()\n}\nactivatePlugin(pm.getPlugin(it))\n}\n\nif (deployed) {\nJenkins.instance.restart()\n}\n\n\nCreate the Seed job\nThe Job DSL plugin lets us specify our Jenkins job. But how to you set up the\nseed job automatically? The Groovy script below uses the Script console to\ncreate the Seed Job.  The samples.groovy file can then be deployed in any way\nyou see fit like Git or as a Chef File resource.\nimport jenkins.model.Jenkins;\nimport hudson.model.FreeStyleProject;\n\njob = Jenkins.instance.createProject(FreeStyleProject, 'seed-job')\njob.displayName = 'Seed Job'\n\nbuilder = new javaposse.jobdsl.plugin.ExecuteDslScripts(\n  new javaposse.jobdsl.plugin.ExecuteDslScripts.ScriptLocation(\n      'false',\n      'samples.groovy',\n      null),\n  false,\n  javaposse.jobdsl.plugin.RemovedJobAction.DELETE, \n  javaposse.jobdsl.plugin.RemovedViewAction.DELETE, \n  javaposse.jobdsl.plugin.LookupStrategy.JENKINS_ROOT\n)\njob.buildersList.add(builder)\n\njob.save()\n\n\n\n\n\nhttps://wiki.jenkins-ci.org/display/JENKINS/Job+DSL+Plugin\u00a0\u21a9\n\n\nhttps://supermarket.chef.io/cookbooks/jenkins\u00a0\u21a9\n\n\nhttps://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Script+Console\u00a0\u21a9\n\n\n\nOriginally posted in http://espinosa.io/blog/2016-03-31-whole-jenkins-in-code.html\n\nThere various pieces in configuration management to manage a Jenkins\ninstallation. You have the Job DSL plugin [^1], a Chef cookbook [^2], the\nScript Console [^3]. There are others you can use, but I will focus on using\nthe three to provide a zero-to-Jenkins setup without clicking on forms or\nwriting XML files. I will make details on the following steps to get it done:\n\n1. Secure Jenkins\n2. Update plugins\n3. Disable unnecessary plugins\n4. Install other plugins\n5. Create a seed job\n\n## Secure Jenkins\n\nFirst we setup Chef to load a private key so that the chef-client can be\nauthenticated when connecting to Jenkins. In the code below, this uses the\nchef-client's client key:\n\n```\nruby_block 'load jenkins credential' do\n  block do\n    require 'openssl'\n    require 'net/ssh'\n\n    key = ::OpenSSL::PKey::RSA.new ::File.read Chef::Config[:client_key]\n\n    node.run_state[:jenkins_private_key] = key.to_pem\n\n    jenkins = resources('jenkins_user[chef]')\n    jenkins.public_keys [\"#{key.ssh_type} #{[key.to_blob].pack('m0')}\"]\n  end\nend\n```\n\nNext is to create a Jenkins user for the chef-client by and specify its public\nkey from the private key above.\n\n```\njenkins_user 'chef' do\n  id \"chef@#{Chef::Config[:node_name]}\"\n  full_name \"Chef\"\nend\n```\n\nFinally we lock down Jenkins to authenticate with GitHub:\n\n```\nimport jenkins.model.Jenkins;\nimport org.jenkinsci.plugins.GithubSecurityRealm;\n\nJenkins.instance.securityRealm = new GithubSecurityRealm(\n    'https://github.com', 'https://api.github.com', 'x', 'y')\n\npermissions = new hudson.security.GlobalMatrixAuthorizationStrategy()\n\npermissions.add(Jenkins.ADMINISTER, 'aespinosa')\npermissions.add(Jenkins.ADMINISTER, '#{resources('jenkins_user[chef]').id}')\npermissions.add(hudson.model.View.READ, 'anonymous')\npermissions.add(hudson.model.Item.READ, 'anonymous')\npermissions.add(Jenkins.READ, 'anonymous')\n\nJenkins.instance.authorizationStrategy = permissions\n\nJenkins.instance.save()\n```\n\n## Update plugins\n\nWhen using the LTS version of Jenkins, some of the plugins are out of date. The\nfollowing Groovy script:\n\nFirst, we have to get the list of latest packages from the update center. The\n`not_if` guard makes sure that we only check for updates once a day even if the\nchef-client tried to converge every 30 minutes.\n\n```\njenkins_script 'get list of latest plugins' do\n  command <<-eos.gsub(/^\\s+/, '')\n    pm = jenkins.model.instance.pluginManager\n    pm.doCheckUpdatesServer()\n  eos\n\n  not_if do\n    update_frequency = 86_400 # daily\n    update_file = '/var/lib/jenkins/updates/default.json'\n    ::File.exists?(update_file) &&\n      ::File.mtime(update_file) > Time.now - update_frequency\n  end\nend\n```\n\nNext, we finally download the plugins. Note the check between the version in\nthe `updateCenter` and the `pluginManager` so that updates are made\nidempotently.\n\n```\nimport jenkins.model.Jenkins;\n\npm = Jenkins.instance.pluginManager\n\nuc = Jenkins.instance.updateCenter\nupdated = false\npm.plugins.each { plugin ->\n  if (uc.getPlugin(plugin.shortName).version != plugin.version) {\n    update = uc.getPlugin(plugin.shortName).deploy(true)\n    update.get()\n    updated = true\n  }\n}\nif (updated) {\n  Jenkins.instance.restart()\n}\n```\n\n## Install plugins\n\nNext in the plugin setup phase, we disable the plugins we don't need and\ninstall only the plugins we need. This is similar to what I described earlier\nin a [previous post](/blog/2014-10-17-jenkins-plugin-management-in-groovy.html).\n\n```\nimport jenkins.model.Jenkins;\n\npm = Jenkins.instance.pluginManager\n\nuc = Jenkins.instance.updateCenter\npm.plugins.each { plugin ->\nplugin.disable()\n}\n\ndeployed = false\ndef activatePlugin(plugin) {\nif (! plugin.isEnabled()) {\n  plugin.enable()\n  deployed = true\n}\n\nplugin.getDependencies().each {\n  activatePlugin(pm.getPlugin(it.shortName))\n}\n}\n\n[\"git\", \"workflow-aggregator\", \"github-oauth\", \"job-dsl\", \"extended-read-permission\"].each {\nif (! pm.getPlugin(it)) {\n  deployment = uc.getPlugin(it).deploy(true)\n  deployment.get()\n}\nactivatePlugin(pm.getPlugin(it))\n}\n\nif (deployed) {\nJenkins.instance.restart()\n}\n```\n\n## Create the Seed job\n\nThe Job DSL plugin lets us specify our Jenkins job. But how to you set up the\nseed job automatically? The Groovy script below uses the Script console to\ncreate the Seed Job.  The `samples.groovy` file can then be deployed in any way\nyou see fit like Git or as a Chef File resource.\n\n```\nimport jenkins.model.Jenkins;\nimport hudson.model.FreeStyleProject;\n\njob = Jenkins.instance.createProject(FreeStyleProject, 'seed-job')\njob.displayName = 'Seed Job'\n\nbuilder = new javaposse.jobdsl.plugin.ExecuteDslScripts(\n  new javaposse.jobdsl.plugin.ExecuteDslScripts.ScriptLocation(\n      'false',\n      'samples.groovy',\n      null),\n  false,\n  javaposse.jobdsl.plugin.RemovedJobAction.DELETE, \n  javaposse.jobdsl.plugin.RemovedViewAction.DELETE, \n  javaposse.jobdsl.plugin.LookupStrategy.JENKINS_ROOT\n)\njob.buildersList.add(builder)\n\njob.save()\n```\n\n[^1]: <https://wiki.jenkins-ci.org/display/JENKINS/Job+DSL+Plugin>\n[^2]: <https://supermarket.chef.io/cookbooks/jenkins>\n[^3]: <https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Script+Console>\n", "tags": ["Jenkins", "chef", "Ruby", "Groovy"]}