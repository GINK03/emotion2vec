{"context": "\u8fb2\u696d\u3068\u304b\u8b66\u5099\u3068\u304b\u753b\u50cf\u8a8d\u8b58\u51fa\u6765\u308b\u60c5\u5831\u53ce\u96c6\u30c9\u30ed\u30fc\u30f3\u306b\n\u8208\u5473\u3042\u308b\u4eba\u8ab0\u304b\u3044\u307e\u305b\u3093\u304b\u306d\u301c\uff1f\n\u500b\u4eba\u3067\u306e\u7d99\u7d9a\u306f\u5bc2\u3057\u3044\u3082\u306e\u3067\u3059\u3002\n\u524d\u56de\u306b\u7d9a\u3044\u3066\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u5185\u306e\u30c9\u30ed\u30fc\u30f3\u3092\u30a6\u30a7\u30d6\u3068GUI\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304b\u3089\u64cd\u4f5c\u51fa\u6765\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\u53c2\u8003\u306b\u3057\u305f\u306e\u306f\u3053\u3061\u3089\u306e\u65b9\nAR drone 2.0 Simulator \u30a6\u30a3\u30ad\u30da\u30fc\u30b8\n\u74b0\u5883\u306f\u524d\u56de\u3068\u5909\u308f\u3089\u305a\nUbuntu 14.04\n\u203bROS\u306ecatkin_ws\u306f~/catkin_ws\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n~/catkin_ws/src\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4e0a\u3067\nroslibjs\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ git clone https://github.com/RobotWebTools/roslibjs\n\n\n\u53c2\u8003\u30da\u30fc\u30b8\u306b\u5f93\u3063\u3066\u3053\u306e\u6642\u70b9\u3067websocket\u3092\u5b9f\u884c\u3059\u308b\u3068rosauth\n\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n~/catkin_ws/src\u306brosauth\u3092\u5165\u308c\u305f\u4e0a\u3067\nbuild\u3057\u307e\u3059\u3002\n$ git clone https://github.com/GT-RAIL/rosauth.git\n$ catkin_make\n\ndrone.html\u306e\u540d\u524d\u3067\u4e0b\u8a18\u306ehtml\u30d5\u30a1\u30a4\u30eb\u3092\n\u4e0b\u8a18\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4fdd\u5b58\n\u25bc\u4fdd\u5b58\u5148\n\n~/catkin_ws/src/roslibjs/examples\n\n\u25bc\u30d5\u30a1\u30a4\u30eb\u5185\u5bb9\n <!DOCTYPE html> \n <html> \n <head> \n <meta charset=\"utf-8\" /> \n <script src=\"http://cdn.robotwebtools.org/EventEmitter2/current/eventemitter2.min.js\"></script> \n <script src=\"../build/roslib.js\"></script> \n\n <script> \n  // Connecting to ROS \n  // ----------------- \n  var ros = new ROSLIB.Ros(); \n\n  // If there is an error on the backend, an 'error' emit will be emitted. \n  ros.on('error', function(error) { \n    document.getElementById('connecting').style.display = 'none'; \n    document.getElementById('connected').style.display = 'none'; \n    document.getElementById('closed').style.display = 'none'; \n    document.getElementById('error').style.display = 'inline'; \n    console.log(error); \n  }); \n\n  // Find out exactly when we made a connection. \n  ros.on('connection', function() { \n    console.log('Connection made!'); \n    document.getElementById('connecting').style.display = 'none'; \n    document.getElementById('error').style.display = 'none'; \n    document.getElementById('closed').style.display = 'none'; \n    document.getElementById('connected').style.display = 'inline'; \n  }); \n\n  ros.on('close', function() { \n    console.log('Connection closed.'); \n    document.getElementById('connecting').style.display = 'none'; \n    document.getElementById('connected').style.display = 'none'; \n    document.getElementById('closed').style.display = 'inline'; \n  }); \n\n  // Create a connection to the rosbridge WebSocket server. \n  ros.connect('ws://localhost:9090'); \n\n // Write your code here, to publish or subscribe in topics\n\n function Takeoff() { \n // First, we create a Topic object with details of the topic's name and message type. \n  var takeoff = new ROSLIB.Topic({ \n    ros : ros, \n    name : 'ardrone/takeoff', \n    messageType : 'std_msgs/Empty' \n  }); \n\n  // Then we create the payload to be published. The object we pass in to ros.Message matches the \n  // fields defined in the geometry_msgs/Twist.msg definition. \n  var msg = new ROSLIB.Message(''); \n\n  // And finally, publish. \n  takeoff.publish(msg); \n } \n\n function Land() { \n // First, we create a Topic object with details of the topic's name and message type. \n  var land = new ROSLIB.Topic({ \n    ros : ros, \n    name : 'ardrone/land', \n    messageType : 'std_msgs/Empty' \n  }); \n\n  // Then we create the payload to be published. The object we pass in to ros.Message matches the \n  // fields defined in the geometry_msgs/Twist.msg definition. \n  var msg = new ROSLIB.Message(''); \n\n  // And finally, publish. \n  land.publish(msg); \n } \n\n function GoTo(){ \n var TheForm; \n TheForm = document.movingForm; \n\n  var coordinate = new ROSLIB.Topic({ \n    ros : ros, \n    name : 'tum_ardrone/com', \n    messageType : 'std_msgs/String' \n  }); \n\n  // Then we create the payload to be published. The object we pass in to ros.Message matches the \n  // fields defined in the geometry_msgs/Twist.msg definition. \n  var msg = new ROSLIB.Message({data : \"c goto 20 20 5 2\"}); \n  // And finally, publish. \n  coordinate.publish(msg); \n } \n </script> \n </head> \n\n <body> \n   <h1>Drone Application</h1> \n <input type=\"button\" value= \"Takeoff\" onclick=\"Takeoff()\" style=\"width:150px\"/> \n <br> \n <input type=\"button\" value= \"Land\" onclick=\"Land()\" style=\"width:150px\"/> \n <form name=movingForm> \n    <input type=\"text\" name= \"coordinate\" style=\"width:142px\"/> \n    <br> \n    <input type=\"button\" value= \"Go to\" onclick=\"GoTo()\" style=\"width:150px\"/> \n <form/> \n <br> \n  <div id=\"statusIndicator\"> \n    <p id=\"connecting\"> \n      Connecting to rosbridge... \n    </p> \n    <p id=\"connected\" style=\"color:#00D600; display:none\"> \n      Connected \n    </p> \n    <p id=\"error\" style=\"color:#FF0000; display:none\"> \n      Error in the backend! \n    </p> \n    <p id=\"closed\" style=\"display:none\"> \n      Connection closed. \n    </p> \n  </div> \n </body> \n </html>\n\n\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u30a6\u30a7\u30d6\u30bd\u30b1\u30c3\u30c8\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\n\n$ roslaunch rosbridge_server rosbridge_websocket.launch\n\n\u6210\u529f\u3059\u308b\u3068\u30dd\u30fc\u30c89090\u3067\u30b5\u30fc\u30d0\u30fc\u304c\u30b9\u30bf\u30fc\u30c8\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u8868\u793a\u304c\u78ba\u8a8d\u51fa\u6765\u307e\u3059\u3002\n\n[INFO] [WallTime: 1455515889.569402] Rosbridge WebSocket server started on port 9090 \n\n\u524d\u56de\u6e96\u5099\u3057\u305fAR drone 2.0\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u74b0\u5883\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u3055\u3044\u3002\n$roslaunch cvg_sim_gazebo ardrone_testworld.launch\n\n\u3055\u3066\u3001\u3053\u308c\u3067drone.html\u3092\u30d6\u30e9\u30a6\u30b6\u3067\u958b\u304f\u3068\nConnected!\u3068\u3044\u3046\u8868\u793a\u3067\u30a6\u30a7\u30d6\u30bd\u30b1\u30c3\u30c8\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u63a5\u7d9a\u3055\u308c\u3066\nTakeoff, Land, Go to\u306e\u30dc\u30bf\u30f3\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u7b48\u3067\u3059\u3002\n\u79c1\u304c\u8a66\u9a13\u3057\u305f\u6240\u3001Takeoff\u3068Land\u3067\u96e2\u9678\u3001\u7740\u9678\u306f\u30dc\u30bf\u30f3\u3067\u78ba\u8a8d\u51fa\u6765\u307e\u3057\u305f\u304cGo To\u3067\u306e\u884c\u304d\u5148\u306e\u6307\u5b9a\u306e\u4ed5\u65b9\u304c\u3044\u307e\u3044\u3061\u5206\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u305d\u3053\u3067\u5225\u306eGUI\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3082\u8a66\u3057\u307e\u3059\u3002\n~/catkin_ws/src\u3078\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n$git clone http://www.ros.org/wiki/tum_ardrone\n\ntum_ardrone\u914d\u4e0b\u306e\ntum_ardrone.launch\u3092\u4f7f\u3063\u3066\u5b9f\u884c\u3057\u307e\u3057\u305f\u3002\n$ cd ~/catkin_ws/src/tum_ardrone/launch\n$ roslaunch tum_ardrone tum_ardrone.launch \n\n\u3053\u3093\u306a\u611f\u3058\u3067GUI\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3001\u30c9\u30ed\u30fc\u30f3\u30ab\u30e1\u30e9\u6620\u50cf\u3001\u98db\u884c\u5ea7\u6a19\u306e\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u60c5\u5831\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u958b\u304f\u7b48\u3067\u3059\u3002\n\u8a66\u3057\u306bGUI\u306eControl Source\u3092 Keyboard\u306b\u6307\u5b9a\u3057\u3066\u52d5\u304b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\ni:\u524d\u9032\nk:\u5f8c\u9000\nl:\u53f3\u65cb\u56de\nj:\u5de6\u65cb\u56de\ns:\u96e2\u9678\nd:\u7740\u9678\n\u52d5\u304d\u307e\u3057\u305f\uff01\n\u6b21\u56de\u306f\u9332\u753b\u3057\u305f\u52d5\u753b\u304b\u3089\u8a8d\u8b58\u306b\u304b\u3051\u3066\n\u4eba\u9593\u3001\u5bb3\u7363\u3001\u5bb3\u866b\u3001\u4f5c\u7269\u306a\u3069\u5fc5\u8981\u60c5\u5831\u3092\u8a8d\u8b58\u51fa\u6765\u308b\u3088\u3046\u306b\u51fa\u6765\u305f\u3089\u3044\u3044\u306a\u3041\ndarknet\u3068\u3044\u3046\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u3059\u3054\u304f\u304a\u624b\u8efd\u3067\u3042\u308a\u3064\u3064\n\u9ad8\u6027\u80fd\u306a\u6a5f\u80fd\u3092\u5b9f\u73fe\u51fa\u6765\u3066\u4fbf\u5229\u3067\u3059\u3002\ndarknet\n\u5b9f\u969b\u306b\u53ce\u96c6\u3057\u305f\uff13D\u30c7\u30fc\u30bf\u3067\u4f5c\u3063\u305f\u4eee\u60f3\u7a7a\u9593\u3067\n\u81ea\u52d5\u5bb3\u866b\u9664\u53bb\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3057\u305f\u3044\u3067\u3059\u3002\n\u4e0b\u8a18\u306e\u30da\u30fc\u30b8\u3068\u304b\u826f\u3055\u305d\u3046\nNo.3-3:\u74b0\u5883\u3092\u3064\u304f\u308d\u3046 ! (Digital Elevation Models \u7de8)\n\u8fb2\u696d\u3068\u304b\u8b66\u5099\u3068\u304b\u753b\u50cf\u8a8d\u8b58\u51fa\u6765\u308b\u60c5\u5831\u53ce\u96c6\u30c9\u30ed\u30fc\u30f3\u306b\n\u8208\u5473\u3042\u308b\u4eba\u8ab0\u304b\u3044\u307e\u305b\u3093\u304b\u306d\u301c\uff1f\n\u500b\u4eba\u3067\u306e\u7d99\u7d9a\u306f\u5bc2\u3057\u3044\u3082\u306e\u3067\u3059\u3002\n\n[\u524d\u56de](http://qiita.com/manjiroukeigo/items/c019ac33ea6ece2b06de)\u306b\u7d9a\u3044\u3066\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u5185\u306e\u30c9\u30ed\u30fc\u30f3\u3092\u30a6\u30a7\u30d6\u3068GUI\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304b\u3089\u64cd\u4f5c\u51fa\u6765\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n\n\u53c2\u8003\u306b\u3057\u305f\u306e\u306f\u3053\u3061\u3089\u306e\u65b9\n[AR drone 2.0 Simulator \u30a6\u30a3\u30ad\u30da\u30fc\u30b8](http://wiki.coins-lab.org/index.php?title=Simulation_of_AR_Parrot_2)\n\n\u74b0\u5883\u306f\u524d\u56de\u3068\u5909\u308f\u3089\u305a\nUbuntu 14.04\n\n\u203bROS\u306ecatkin_ws\u306f~/catkin_ws\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n~/catkin_ws/src\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4e0a\u3067\nroslibjs\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```\n$ git clone https://github.com/RobotWebTools/roslibjs\n\n```\n\n\u53c2\u8003\u30da\u30fc\u30b8\u306b\u5f93\u3063\u3066\u3053\u306e\u6642\u70b9\u3067websocket\u3092\u5b9f\u884c\u3059\u308b\u3068rosauth\n\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n~/catkin_ws/src\u306brosauth\u3092\u5165\u308c\u305f\u4e0a\u3067\nbuild\u3057\u307e\u3059\u3002\n\n```\n$ git clone https://github.com/GT-RAIL/rosauth.git\n$ catkin_make\n```\n\ndrone.html\u306e\u540d\u524d\u3067\u4e0b\u8a18\u306ehtml\u30d5\u30a1\u30a4\u30eb\u3092\n\u4e0b\u8a18\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4fdd\u5b58\n\n\u25bc\u4fdd\u5b58\u5148\n```\n~/catkin_ws/src/roslibjs/examples\n```\n\u25bc\u30d5\u30a1\u30a4\u30eb\u5185\u5bb9\n\n```\n <!DOCTYPE html> \n <html> \n <head> \n <meta charset=\"utf-8\" /> \n <script src=\"http://cdn.robotwebtools.org/EventEmitter2/current/eventemitter2.min.js\"></script> \n <script src=\"../build/roslib.js\"></script> \n \n <script> \n  // Connecting to ROS \n  // ----------------- \n  var ros = new ROSLIB.Ros(); \n \n  // If there is an error on the backend, an 'error' emit will be emitted. \n  ros.on('error', function(error) { \n    document.getElementById('connecting').style.display = 'none'; \n    document.getElementById('connected').style.display = 'none'; \n    document.getElementById('closed').style.display = 'none'; \n    document.getElementById('error').style.display = 'inline'; \n    console.log(error); \n  }); \n \n  // Find out exactly when we made a connection. \n  ros.on('connection', function() { \n    console.log('Connection made!'); \n    document.getElementById('connecting').style.display = 'none'; \n    document.getElementById('error').style.display = 'none'; \n    document.getElementById('closed').style.display = 'none'; \n    document.getElementById('connected').style.display = 'inline'; \n  }); \n \n  ros.on('close', function() { \n    console.log('Connection closed.'); \n    document.getElementById('connecting').style.display = 'none'; \n    document.getElementById('connected').style.display = 'none'; \n    document.getElementById('closed').style.display = 'inline'; \n  }); \n \n  // Create a connection to the rosbridge WebSocket server. \n  ros.connect('ws://localhost:9090'); \n \n // Write your code here, to publish or subscribe in topics\n \n function Takeoff() { \n // First, we create a Topic object with details of the topic's name and message type. \n  var takeoff = new ROSLIB.Topic({ \n    ros : ros, \n    name : 'ardrone/takeoff', \n    messageType : 'std_msgs/Empty' \n  }); \n \n  // Then we create the payload to be published. The object we pass in to ros.Message matches the \n  // fields defined in the geometry_msgs/Twist.msg definition. \n  var msg = new ROSLIB.Message(''); \n \n  // And finally, publish. \n  takeoff.publish(msg); \n } \n \n function Land() { \n // First, we create a Topic object with details of the topic's name and message type. \n  var land = new ROSLIB.Topic({ \n    ros : ros, \n    name : 'ardrone/land', \n    messageType : 'std_msgs/Empty' \n  }); \n \n  // Then we create the payload to be published. The object we pass in to ros.Message matches the \n  // fields defined in the geometry_msgs/Twist.msg definition. \n  var msg = new ROSLIB.Message(''); \n \n  // And finally, publish. \n  land.publish(msg); \n } \n \n function GoTo(){ \n var TheForm; \n TheForm = document.movingForm; \n \n  var coordinate = new ROSLIB.Topic({ \n    ros : ros, \n    name : 'tum_ardrone/com', \n    messageType : 'std_msgs/String' \n  }); \n \n  // Then we create the payload to be published. The object we pass in to ros.Message matches the \n  // fields defined in the geometry_msgs/Twist.msg definition. \n  var msg = new ROSLIB.Message({data : \"c goto 20 20 5 2\"}); \n  // And finally, publish. \n  coordinate.publish(msg); \n } \n </script> \n </head> \n \n <body> \n   <h1>Drone Application</h1> \n <input type=\"button\" value= \"Takeoff\" onclick=\"Takeoff()\" style=\"width:150px\"/> \n <br> \n <input type=\"button\" value= \"Land\" onclick=\"Land()\" style=\"width:150px\"/> \n <form name=movingForm> \n\t<input type=\"text\" name= \"coordinate\" style=\"width:142px\"/> \n\t<br> \n\t<input type=\"button\" value= \"Go to\" onclick=\"GoTo()\" style=\"width:150px\"/> \n <form/> \n <br> \n  <div id=\"statusIndicator\"> \n    <p id=\"connecting\"> \n      Connecting to rosbridge... \n    </p> \n    <p id=\"connected\" style=\"color:#00D600; display:none\"> \n      Connected \n    </p> \n    <p id=\"error\" style=\"color:#FF0000; display:none\"> \n      Error in the backend! \n    </p> \n    <p id=\"closed\" style=\"display:none\"> \n      Connection closed. \n    </p> \n  </div> \n </body> \n </html>\n```\n\n\n\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u30a6\u30a7\u30d6\u30bd\u30b1\u30c3\u30c8\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\n```\n$ roslaunch rosbridge_server rosbridge_websocket.launch\n```\n\n\u6210\u529f\u3059\u308b\u3068\u30dd\u30fc\u30c89090\u3067\u30b5\u30fc\u30d0\u30fc\u304c\u30b9\u30bf\u30fc\u30c8\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u8868\u793a\u304c\u78ba\u8a8d\u51fa\u6765\u307e\u3059\u3002\n```\n[INFO] [WallTime: 1455515889.569402] Rosbridge WebSocket server started on port 9090 \n```\n[\u524d\u56de](http://qiita.com/manjiroukeigo/items/c019ac33ea6ece2b06de)\u6e96\u5099\u3057\u305fAR drone 2.0\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u74b0\u5883\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n```\n$roslaunch cvg_sim_gazebo ardrone_testworld.launch\n```\n\n\u3055\u3066\u3001\u3053\u308c\u3067drone.html\u3092\u30d6\u30e9\u30a6\u30b6\u3067\u958b\u304f\u3068\nConnected!\u3068\u3044\u3046\u8868\u793a\u3067\u30a6\u30a7\u30d6\u30bd\u30b1\u30c3\u30c8\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u63a5\u7d9a\u3055\u308c\u3066\nTakeoff, Land, Go to\u306e\u30dc\u30bf\u30f3\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u7b48\u3067\u3059\u3002\n\u79c1\u304c\u8a66\u9a13\u3057\u305f\u6240\u3001Takeoff\u3068Land\u3067\u96e2\u9678\u3001\u7740\u9678\u306f\u30dc\u30bf\u30f3\u3067\u78ba\u8a8d\u51fa\u6765\u307e\u3057\u305f\u304cGo To\u3067\u306e\u884c\u304d\u5148\u306e\u6307\u5b9a\u306e\u4ed5\u65b9\u304c\u3044\u307e\u3044\u3061\u5206\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u305d\u3053\u3067\u5225\u306eGUI\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3082\u8a66\u3057\u307e\u3059\u3002\n\n~/catkin_ws/src\u3078\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```\n$git clone http://www.ros.org/wiki/tum_ardrone\n```\n\ntum_ardrone\u914d\u4e0b\u306e\ntum_ardrone.launch\u3092\u4f7f\u3063\u3066\u5b9f\u884c\u3057\u307e\u3057\u305f\u3002\n\n```\n$ cd ~/catkin_ws/src/tum_ardrone/launch\n$ roslaunch tum_ardrone tum_ardrone.launch \n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067GUI\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3001\u30c9\u30ed\u30fc\u30f3\u30ab\u30e1\u30e9\u6620\u50cf\u3001\u98db\u884c\u5ea7\u6a19\u306e\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u60c5\u5831\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u958b\u304f\u7b48\u3067\u3059\u3002\n\u8a66\u3057\u306bGUI\u306eControl Source\u3092 Keyboard\u306b\u6307\u5b9a\u3057\u3066\u52d5\u304b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n![Screenshot from 2016-12-09 09:42:45.png](https://qiita-image-store.s3.amazonaws.com/0/104856/25ba3132-d404-879f-fc43-4a026ee5ae4c.png)\n\ni:\u524d\u9032\nk:\u5f8c\u9000\nl:\u53f3\u65cb\u56de\nj:\u5de6\u65cb\u56de\ns:\u96e2\u9678\nd:\u7740\u9678\n\n\n\n\n\u52d5\u304d\u307e\u3057\u305f\uff01\n\n\u6b21\u56de\u306f\u9332\u753b\u3057\u305f\u52d5\u753b\u304b\u3089\u8a8d\u8b58\u306b\u304b\u3051\u3066\n\u4eba\u9593\u3001\u5bb3\u7363\u3001\u5bb3\u866b\u3001\u4f5c\u7269\u306a\u3069\u5fc5\u8981\u60c5\u5831\u3092\u8a8d\u8b58\u51fa\u6765\u308b\u3088\u3046\u306b\u51fa\u6765\u305f\u3089\u3044\u3044\u306a\u3041\ndarknet\u3068\u3044\u3046\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u3059\u3054\u304f\u304a\u624b\u8efd\u3067\u3042\u308a\u3064\u3064\n\u9ad8\u6027\u80fd\u306a\u6a5f\u80fd\u3092\u5b9f\u73fe\u51fa\u6765\u3066\u4fbf\u5229\u3067\u3059\u3002\n[darknet](http://ch.nicovideo.jp/akiba-cyberspacecowboys/blomaga/ar1116319)\n\n\u5b9f\u969b\u306b\u53ce\u96c6\u3057\u305f\uff13D\u30c7\u30fc\u30bf\u3067\u4f5c\u3063\u305f\u4eee\u60f3\u7a7a\u9593\u3067\n\u81ea\u52d5\u5bb3\u866b\u9664\u53bb\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3057\u305f\u3044\u3067\u3059\u3002\n\u4e0b\u8a18\u306e\u30da\u30fc\u30b8\u3068\u304b\u826f\u3055\u305d\u3046\n\n[No.3-3:\u74b0\u5883\u3092\u3064\u304f\u308d\u3046 ! (Digital Elevation Models \u7de8)]\n(http://cir-kit.github.io/blog/2015/02/03/gazebo-digital-elevation-models/)\n\n\n\n", "tags": ["GitHub", "ROS", "Gazebo", "Ubuntu14.04", "drone"]}