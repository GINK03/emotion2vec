{"context": "\u6a5f\u68b0\u5b66\u7fd2\u3068\u3044\u3046\u3068\u6df1\u5c64\u5b66\u7fd2\uff08\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\uff09\u3092\u9023\u60f3\u3055\u308c\u304c\u3061\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306b\u3082\u6ca2\u5c71\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u30c7\u30a3\u30fc\u30d7\u3058\u3083\u7121\u3044\u304b\u3089\u30c0\u30e1\u304b\u3068\u3044\u3046\u3068\u305d\u3046\u3067\u3082\u3042\u308a\u307e\u305b\u3093\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u524d\u56de\u306e\u8a18\u4e8b\u306e\u30c7\u30fc\u30bf\u3092\u5225\u306e\u6a5f\u68b0\u5b66\u7fd2\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u524d\u56de\u306e\u8a18\u4e8b\uff1aTensorFlow (\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0)\u3067\u70ba\u66ff(FX)\u306e\u4e88\u6e2c\u3092\u3057\u3066\u307f\u308b\n\n\n\nTL;DR\n\n\u8cc7\u7523\u306e\u5897\u6e1b\u3092\u30b0\u30e9\u30d5\u306b\u3057\u307e\u3057\u305f\u3002\u534a\u5e74\u307b\u3069\u306712%\u306e\u5229\u76ca\u306b\u306a\u3063\u3066\u307e\u3059\u304c\u3001\u5b66\u7fd2\u306e\u6761\u4ef6\u306b\u5bfe\u3057\u3066\u7d50\u679c\u304c\u30ed\u30d0\u30b9\u30c8\u3067\u306f\u7121\u3044\u306e\u3067\u4eca\u5f8c\u3082\u3046\u307e\u304f\u3044\u304f\u3068\u306f\u9650\u308a\u307e\u305b\u3093\u3002\nGitHub\u306bNotebook\u3092\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\u3002\nFork\u3057\u3066\u904a\u3093\u3067\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nhttps://github.com/hayatoy/ml-forex-prediction\n\nScikit-learn\nPython\u3067\u6a5f\u68b0\u5b66\u7fd2\u3059\u308b\u306a\u3089\u307e\u305a\u3053\u308c\u3067\u3057\u3087\u3046\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306fpip\u306a\u3089\npip install -U scikit-learn\n\n\u3067\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nClassifier\u306e\u9078\u629e\n\u5168\u90e8\u8a66\u3057\u3066\u3082\u3044\u3044\u3093\u3067\u3059\u304c\u3001\u3042\u307e\u308a\u7dda\u5f62\u306a\u306e\u306f\u30ce\u30a4\u30b8\u30fc\u306a\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3044\u3044\u7d50\u679c\u304c\u51fa\u306a\u3044\u304b\u306a\u3068\u4e88\u60f3\u3057\u307e\u3059\u3002\n\n\u5206\u985e\u306e\u4f8b\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u30591\u3002\nSVM(RBF), Naive Bayes\u8fba\u308a\u304c\u826f\u3055\u305d\u3046\u3002\n\n\u30c7\u30fc\u30bf\u306e\u52a0\u5de5\n\u540c\u3058Shape\u3067fit\u3057\u3066\u304f\u308c\u305d\u3046\u306a\u306e\u3067\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u3059\u3002\n\u2026\u3068\u601d\u3063\u305f\u3089\u30af\u30e9\u30b9\u304c1hot-vector\u306e\u307e\u307e\u3060\u3068\u6012\u3089\u308c\u3061\u3083\u3044\u307e\u3057\u305f\u3002\uff08\u4f55\u304b\u30aa\u30d7\u30b7\u30e7\u30f3\u6709\u3063\u305f\u3063\u3051\uff1f\uff09\n1hot-vector\u304b\u3089binary\u306b\u5909\u63db\u3067\u3059\u304c\u3001\u4eca\u56de\u306f2\u30af\u30e9\u30b9\u306a\u306e\u3067\u53d6\u3063\u3066\u304f\u308b\u5834\u6240\u3092\u5909\u3048\u308b\u3060\u3051\u3067\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n>> train_y\n[[ 0.  1.]\n [ 0.  1.]\n [ 1.  0.]\n [ 0.  1.]\n [ 0.  1.]\n [ 0.  1.]\n [ 1.  0.]\n [ 0.  1.]\n [ 1.  0.]\n [ 0.  1.]]\n>> train_y[:,1]\n[ 1.  1.  0.  1.  1.  1.  0.  1.  0.  1.]\n\n\u591a\u30af\u30e9\u30b9\u3060\u3068\u3053\u306e\u65b9\u6cd5\u306f\u4f7f\u3048\u306a\u3044\u3067\u3059\u306d\u3002\u4f55\u304b\u30ab\u30c3\u30b3\u30a4\u30a4\u3084\u308a\u65b9\u7121\u3044\u304b\u306a\u3002\n\n\u5b66\u7fd2\u3055\u305b\u3066\u307f\u308b\n\u524d\u56de\u540c\u69d8\u3001\u524d\u534a90%\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3001\u5f8c\u534a10%\u3092\u30c6\u30b9\u30c8\u306b\u4f7f\u3044\u307e\u3059\u30020.502118\u3092\u4e0b\u56de\u308b\u3068\u30e9\u30f3\u30c0\u30e0\u306b\u4e88\u6e2c\u3059\u308b\u3088\u308a\u60aa\u3044\u4e8b\u306b\u306a\u308a\u307e\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u516c\u5e73\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u5b9f\u65bd\u3002\n\nSVM (RBF)\nfrom sklearn import svm\ntrain_len = int(len(train_x)*0.9)\nclf = svm.SVC(kernel='ref')\nclf.fit(train_x[:train_len], train_y[:train_len,1])\nclf.score(train_x[train_len:], train_y[train_len:,1])\n\n\u7d50\u679c\uff1a0.49694435509810231\n\nGradient Boosting\nfrom sklearn.ensemble import GradientBoostingClassifier\nclf = GradientBoostingClassifier()\nclf.fit(train_x[:train_len], train_y[:train_len,1])\nclf.score(train_x[train_len:], train_y[train_len:,1])\n\n\u7d50\u679c\uff1a0.52331939530395621\n\nRandom Forest\nfrom sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(random_state=0)\nclf.fit(train_x[:train_len], train_y[:train_len,1])\nclf.score(train_x[train_len:], train_y[train_len:,1])\n\n\u7d50\u679c\uff1a0.49726600192988096\n\nNaive Bayes\nfrom sklearn.naive_bayes import GaussianNB\nclf = GaussianNB()\nclf.fit(train_x[:train_len], train_y[:train_len,1])\nclf.score(train_x[train_len:], train_y[train_len:,1])\n\n\u7d50\u679c\uff1a0.50112576391122543\n\nNearest Neighbors\nfrom sklearn.neighbors import KNeighborsClassifier\nclf = KNeighborsClassifier()\nclf.fit(train_x[:train_len], train_y[:train_len,1])\nclf.score(train_x[train_len:], train_y[train_len:,1])\n\n\u7d50\u679c\uff1a0.49726600192988096\n\nQDA\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis as QDA\nclf = QDA()\nclf.fit(train_x[:train_len], train_y[:train_len,1])\nclf.score(train_x[train_len:], train_y[train_len:,1])\n\n\u7d50\u679c\uff1a0.50981022836925061\n\n\u307e\u3068\u3081\n\n\n\n\u9806\u4f4d\n\u30e2\u30c7\u30eb\nAccuracy\n\n\n\n\n1\nBiRNN(LSTM)\n0.528883\n\n\n2\nGradient Boosting\n0.523319\n\n\n3\nQDA\n0.509810\n\n\n\n\u591a\u3044\u30af\u30e9\u30b9\u306e\u5272\u5408\n0.502118\n\n\n4\nNaive Bayes\n0.501126\n\n\n5\nRandom Forest\n0.497266\n\n\n6\nNearest Neighbors\n0.497266\n\n\n7\nSVM (RBF)\n0.496944\n\n\n\n\u524d\u56de\u306eLSTM\u304c\u3084\u3063\u3071\u308a1\u4f4d\u30022\u4f4d\u306fKaggle\u3067\u3082\u4eba\u6c17\u306eGradient Boosting\u3067\u3057\u305f\u3002\n\u2026\u3063\u3066\u3001\u3042\u308c\uff1f\u30d1\u30e9\u30e1\u30fc\u30bf\u8abf\u6574\u3057\u3066\u3044\u306a\u3044\u3068\u306f\u3044\u3048\u3001SVM\u304c\u6700\u4e0b\u4f4d\uff1f\u305d\u3093\u306a\u306f\u305a\u306f\u30fb\u30fb\u307e\u305f\u306e\u6a5f\u4f1a\u306bGrid Search\u3067\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u7d22\u3057\u3066\u307f\u307e\u3059\u3002\n\nPnL (Profit & Loss)\u3092\u8a08\u7b97\n\u6b63\u89e3\u7387\u304c\u60aa\u3044\u304b\u3089\u3068\u3044\u3063\u3066\u3001\u640d\u76ca\u304c\u60aa\u304f\u306a\u308b\u3068\u306f\u9650\u308a\u307e\u305b\u3093\u300250%\u306e\u6b63\u89e3\u7387\u3067\u3082\u5229\u76ca > \u640d\u5931\u306a\u3089\u826f\u3044\u308f\u3051\u3067\u3059\u304b\u3089\u306d\u3002\n\u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306f\u6b21\u306e\u671f\u9593\u306e\u7d42\u5024\u304c\u4e0a\u304c\u308b\u304b\u4e0b\u304c\u308b\u304b\u3092\u4e88\u6e2c\u3057\u307e\u3057\u305f\u3002\n\u306a\u306e\u3067\n(\u6b21\u306e\u7d42\u5024 - \u73fe\u5728\u306e\u7d42\u5024) * \u30ed\u30c3\u30c8 - \u30b3\u30df\u30c3\u30b7\u30e7\u30f3\n\u3092\u640d\u76ca\u3068\u3057\u3066\u8a08\u7b97\u3057\u307e\u3057\u305f\u3002\n(\u5b9f\u969b\u306b\u306f\u73fe\u5728\u306e\u7d42\u5024\u304c\u78ba\u5b9a\u3057\u305f\u6642\u70b9\u3067Predict\u3059\u308b\u306e\u3067\u3001\u7d42\u5024\u3067\u30dd\u30b8\u30b7\u30e7\u30f3\u306f\u53d6\u308c\u307e\u305b\u3093\u3002\u9031\u306e\u4e2d\u65e5\u306a\u3089\u591a\u5c11\u4e0a\u4e0b\u3059\u308b\u3060\u3051\u3067\u3059\u304c\u9031\u672b\u3092\u631f\u3080\u3068\u5927\u304d\u304f\u5024\u304c\u52d5\u3044\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059)\ngithub\u7248\u306eEUR/USD\u65e5\u8db3\u30c7\u30fc\u30bf\u3067\u3059\u3002\u7dd1\u306e\u30e9\u30a4\u30f3\u306f\u6b63\u89e3\u3001\u8d64\u306e\u30e9\u30a4\u30f3\u306f\u4e0d\u6b63\u89e3\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n\n\u521d\u671f\u8cc7\u7523\u306f10000\u30c9\u30eb\u3001\u53d6\u5f15\u5358\u4f4d\u306f10000\u901a\u8ca8\u3001\u30b3\u30df\u30c3\u30b7\u30e7\u30f3\uff08\u30b9\u30d7\u30ec\u30c3\u30c9\uff09\u306f0\u3067\u3001\u6700\u7d42\u5229\u76ca\u306f\u30d7\u30e9\u30b91197\u30c9\u30eb\u3068\u306a\u308a\u307e\u3057\u305f\u3002\u30b9\u30d7\u30ec\u30c3\u30c9\u3092\u5e73\u57472pips\u306b\u8a2d\u5b9a\u3057\u3066\u3082\u307e\u3060\u30d7\u30e9\u30b9900\u30c9\u30eb\u4f4d\u3042\u308b\u8a08\u7b97\u3067\u3059\u3002\n\u4e00\u898b\u826f\u3055\u305d\u3046\u3067\u3059\u304c\u30fb\u30fb\u30fb\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u671f\u9593\u3092\u5909\u3048\u308b\u3068\u3059\u3050\u306b\u30c0\u30e1\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u30e2\u30c7\u30eb\u3068\u30c7\u30fc\u30bf\u9078\u629e\u304c\u826f\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u304f\u5076\u3005\u3044\u3044\u611f\u3058\u306b\u30d5\u30a3\u30c3\u30c8\u3057\u305f\u3060\u3051\u306e\u3088\u3046\u3067\u3059\u3002\nGitHub\u306bNotebook\u3092\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u304a\u8a66\u3057\u3042\u308c\u3002\nhttps://github.com/hayatoy/ml-forex-prediction\n\n\n\n\n\u51fa\u5178\uff1ahttp://scikit-learn.org/stable/auto_examples/classification/plot_classifier_comparison.html\u00a0\u21a9\n\n\n\n\u6a5f\u68b0\u5b66\u7fd2\u3068\u3044\u3046\u3068\u6df1\u5c64\u5b66\u7fd2\uff08\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\uff09\u3092\u9023\u60f3\u3055\u308c\u304c\u3061\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306b\u3082\u6ca2\u5c71\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u30c7\u30a3\u30fc\u30d7\u3058\u3083\u7121\u3044\u304b\u3089\u30c0\u30e1\u304b\u3068\u3044\u3046\u3068\u305d\u3046\u3067\u3082\u3042\u308a\u307e\u305b\u3093\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001[\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/hayatoy/items/b9ddf4d6d8e026dc15e5)\u306e\u30c7\u30fc\u30bf\u3092\u5225\u306e\u6a5f\u68b0\u5b66\u7fd2\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\n- \u524d\u56de\u306e\u8a18\u4e8b\uff1a[TensorFlow (\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0)\u3067\u70ba\u66ff(FX)\u306e\u4e88\u6e2c\u3092\u3057\u3066\u307f\u308b](http://qiita.com/hayatoy/items/b9ddf4d6d8e026dc15e5)\n\n# TL;DR\n![equity.png](https://qiita-image-store.s3.amazonaws.com/0/162369/79a7a5bf-0927-b681-afbf-021c67ebfcbc.png)\n\u8cc7\u7523\u306e\u5897\u6e1b\u3092\u30b0\u30e9\u30d5\u306b\u3057\u307e\u3057\u305f\u3002\u534a\u5e74\u307b\u3069\u3067<font color=\"#D81B60\">12%\u306e\u5229\u76ca</font>\u306b\u306a\u3063\u3066\u307e\u3059\u304c\u3001\u5b66\u7fd2\u306e\u6761\u4ef6\u306b\u5bfe\u3057\u3066\u7d50\u679c\u304c\u30ed\u30d0\u30b9\u30c8\u3067\u306f\u7121\u3044\u306e\u3067\u4eca\u5f8c\u3082\u3046\u307e\u304f\u3044\u304f\u3068\u306f\u9650\u308a\u307e\u305b\u3093\u3002\n\n**GitHub\u306bNotebook\u3092\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\u3002**\nFork\u3057\u3066\u904a\u3093\u3067\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nhttps://github.com/hayatoy/ml-forex-prediction\n\n# Scikit-learn\nPython\u3067\u6a5f\u68b0\u5b66\u7fd2\u3059\u308b\u306a\u3089\u307e\u305a\u3053\u308c\u3067\u3057\u3087\u3046\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f`pip`\u306a\u3089\n\n```bash\npip install -U scikit-learn\n```\n\u3067\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## Classifier\u306e\u9078\u629e\n\u5168\u90e8\u8a66\u3057\u3066\u3082\u3044\u3044\u3093\u3067\u3059\u304c\u3001\u3042\u307e\u308a\u7dda\u5f62\u306a\u306e\u306f\u30ce\u30a4\u30b8\u30fc\u306a\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3044\u3044\u7d50\u679c\u304c\u51fa\u306a\u3044\u304b\u306a\u3068\u4e88\u60f3\u3057\u307e\u3059\u3002\n\n![sphx_glr_plot_classifier_comparison_001.png](https://qiita-image-store.s3.amazonaws.com/0/162369/0fab5e94-7a71-3cdb-55c0-9cb1227123ec.png)\n\u5206\u985e\u306e\u4f8b\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059[^1]\u3002\n[^1]: \u51fa\u5178\uff1ahttp://scikit-learn.org/stable/auto_examples/classification/plot_classifier_comparison.html\n\nSVM(RBF), Naive Bayes\u8fba\u308a\u304c\u826f\u3055\u305d\u3046\u3002\n\n## \u30c7\u30fc\u30bf\u306e\u52a0\u5de5\n\u540c\u3058Shape\u3067`fit`\u3057\u3066\u304f\u308c\u305d\u3046\u306a\u306e\u3067\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u3059\u3002\n\u2026\u3068\u601d\u3063\u305f\u3089\u30af\u30e9\u30b9\u304c1hot-vector\u306e\u307e\u307e\u3060\u3068\u6012\u3089\u308c\u3061\u3083\u3044\u307e\u3057\u305f\u3002\uff08\u4f55\u304b\u30aa\u30d7\u30b7\u30e7\u30f3\u6709\u3063\u305f\u3063\u3051\uff1f\uff09\n1hot-vector\u304b\u3089binary\u306b\u5909\u63db\u3067\u3059\u304c\u3001\u4eca\u56de\u306f2\u30af\u30e9\u30b9\u306a\u306e\u3067\u53d6\u3063\u3066\u304f\u308b\u5834\u6240\u3092\u5909\u3048\u308b\u3060\u3051\u3067\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\n```py\n>> train_y\n[[ 0.  1.]\n [ 0.  1.]\n [ 1.  0.]\n [ 0.  1.]\n [ 0.  1.]\n [ 0.  1.]\n [ 1.  0.]\n [ 0.  1.]\n [ 1.  0.]\n [ 0.  1.]]\n>> train_y[:,1]\n[ 1.  1.  0.  1.  1.  1.  0.  1.  0.  1.]\n```\n\u591a\u30af\u30e9\u30b9\u3060\u3068\u3053\u306e\u65b9\u6cd5\u306f\u4f7f\u3048\u306a\u3044\u3067\u3059\u306d\u3002\u4f55\u304b\u30ab\u30c3\u30b3\u30a4\u30a4\u3084\u308a\u65b9\u7121\u3044\u304b\u306a\u3002\n\n# \u5b66\u7fd2\u3055\u305b\u3066\u307f\u308b\n\u524d\u56de\u540c\u69d8\u3001\u524d\u534a90%\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3001\u5f8c\u534a10%\u3092\u30c6\u30b9\u30c8\u306b\u4f7f\u3044\u307e\u3059\u3002`0.502118`\u3092\u4e0b\u56de\u308b\u3068\u30e9\u30f3\u30c0\u30e0\u306b\u4e88\u6e2c\u3059\u308b\u3088\u308a\u60aa\u3044\u4e8b\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u516c\u5e73\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u5b9f\u65bd\u3002\n\n### SVM (RBF)\n\n```py\nfrom sklearn import svm\ntrain_len = int(len(train_x)*0.9)\nclf = svm.SVC(kernel='ref')\nclf.fit(train_x[:train_len], train_y[:train_len,1])\nclf.score(train_x[train_len:], train_y[train_len:,1])\n```\n<font color=\"#D81B60\">\u7d50\u679c\uff1a0.49694435509810231</font>\n\n### Gradient Boosting\n\n```py\nfrom sklearn.ensemble import GradientBoostingClassifier\nclf = GradientBoostingClassifier()\nclf.fit(train_x[:train_len], train_y[:train_len,1])\nclf.score(train_x[train_len:], train_y[train_len:,1])\n```\n<font color=\"#00897B\">\u7d50\u679c\uff1a0.52331939530395621</font>\n\n### Random Forest\n\n```py\nfrom sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(random_state=0)\nclf.fit(train_x[:train_len], train_y[:train_len,1])\nclf.score(train_x[train_len:], train_y[train_len:,1])\n```\n<font color=\"#D81B60\">\u7d50\u679c\uff1a0.49726600192988096</font>\n\n### Naive Bayes\n\n```py\nfrom sklearn.naive_bayes import GaussianNB\nclf = GaussianNB()\nclf.fit(train_x[:train_len], train_y[:train_len,1])\nclf.score(train_x[train_len:], train_y[train_len:,1])\n```\n<font color=\"#D81B60\">\u7d50\u679c\uff1a0.50112576391122543</font>\n\n### Nearest Neighbors\n\n```py\nfrom sklearn.neighbors import KNeighborsClassifier\nclf = KNeighborsClassifier()\nclf.fit(train_x[:train_len], train_y[:train_len,1])\nclf.score(train_x[train_len:], train_y[train_len:,1])\n```\n<font color=\"#D81B60\">\u7d50\u679c\uff1a0.49726600192988096</font>\n\n### QDA\n\n```py\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis as QDA\nclf = QDA()\nclf.fit(train_x[:train_len], train_y[:train_len,1])\nclf.score(train_x[train_len:], train_y[train_len:,1])\n```\n<font color=\"#00897B\">\u7d50\u679c\uff1a0.50981022836925061</font>\n\n### \u307e\u3068\u3081\n| \u9806\u4f4d | \u30e2\u30c7\u30eb | Accuracy |\n|:-:| :-- |:-- |\n| **1** | **BiRNN(LSTM)**  | **0.528883** |\n| 2 | Gradient Boosting | 0.523319 |\n| 3 | QDA | 0.509810 |\n|   | \u591a\u3044\u30af\u30e9\u30b9\u306e\u5272\u5408 | 0.502118 |\n| 4 | Naive Bayes | 0.501126 |\n| 5 | Random Forest | 0.497266 |\n| 6 | Nearest Neighbors | 0.497266 |\n| 7 | SVM (RBF) | 0.496944 |\n\n\u524d\u56de\u306eLSTM\u304c\u3084\u3063\u3071\u308a1\u4f4d\u30022\u4f4d\u306fKaggle\u3067\u3082\u4eba\u6c17\u306eGradient Boosting\u3067\u3057\u305f\u3002\n\u2026\u3063\u3066\u3001\u3042\u308c\uff1f\u30d1\u30e9\u30e1\u30fc\u30bf\u8abf\u6574\u3057\u3066\u3044\u306a\u3044\u3068\u306f\u3044\u3048\u3001SVM\u304c\u6700\u4e0b\u4f4d\uff1f\u305d\u3093\u306a\u306f\u305a\u306f\u30fb\u30fb\u307e\u305f\u306e\u6a5f\u4f1a\u306b`Grid Search`\u3067\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u7d22\u3057\u3066\u307f\u307e\u3059\u3002\n\n# PnL (Profit & Loss)\u3092\u8a08\u7b97\n\u6b63\u89e3\u7387\u304c\u60aa\u3044\u304b\u3089\u3068\u3044\u3063\u3066\u3001\u640d\u76ca\u304c\u60aa\u304f\u306a\u308b\u3068\u306f\u9650\u308a\u307e\u305b\u3093\u300250%\u306e\u6b63\u89e3\u7387\u3067\u3082`\u5229\u76ca > \u640d\u5931`\u306a\u3089\u826f\u3044\u308f\u3051\u3067\u3059\u304b\u3089\u306d\u3002\n\n\u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306f\u6b21\u306e\u671f\u9593\u306e\u7d42\u5024\u304c\u4e0a\u304c\u308b\u304b\u4e0b\u304c\u308b\u304b\u3092\u4e88\u6e2c\u3057\u307e\u3057\u305f\u3002\n\u306a\u306e\u3067\n`(\u6b21\u306e\u7d42\u5024 - \u73fe\u5728\u306e\u7d42\u5024) * \u30ed\u30c3\u30c8 - \u30b3\u30df\u30c3\u30b7\u30e7\u30f3`\n\u3092\u640d\u76ca\u3068\u3057\u3066\u8a08\u7b97\u3057\u307e\u3057\u305f\u3002\n<font color=\"#888\">(\u5b9f\u969b\u306b\u306f\u73fe\u5728\u306e\u7d42\u5024\u304c\u78ba\u5b9a\u3057\u305f\u6642\u70b9\u3067Predict\u3059\u308b\u306e\u3067\u3001\u7d42\u5024\u3067\u30dd\u30b8\u30b7\u30e7\u30f3\u306f\u53d6\u308c\u307e\u305b\u3093\u3002\u9031\u306e\u4e2d\u65e5\u306a\u3089\u591a\u5c11\u4e0a\u4e0b\u3059\u308b\u3060\u3051\u3067\u3059\u304c\u9031\u672b\u3092\u631f\u3080\u3068\u5927\u304d\u304f\u5024\u304c\u52d5\u3044\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059)</font>\n\ngithub\u7248\u306eEUR/USD\u65e5\u8db3\u30c7\u30fc\u30bf\u3067\u3059\u3002\u7dd1\u306e\u30e9\u30a4\u30f3\u306f\u6b63\u89e3\u3001\u8d64\u306e\u30e9\u30a4\u30f3\u306f\u4e0d\u6b63\u89e3\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n![equity.png](https://qiita-image-store.s3.amazonaws.com/0/162369/79a7a5bf-0927-b681-afbf-021c67ebfcbc.png)\n\u521d\u671f\u8cc7\u7523\u306f10000\u30c9\u30eb\u3001\u53d6\u5f15\u5358\u4f4d\u306f10000\u901a\u8ca8\u3001\u30b3\u30df\u30c3\u30b7\u30e7\u30f3\uff08\u30b9\u30d7\u30ec\u30c3\u30c9\uff09\u306f0\u3067\u3001\u6700\u7d42\u5229\u76ca\u306f\u30d7\u30e9\u30b91197\u30c9\u30eb\u3068\u306a\u308a\u307e\u3057\u305f\u3002\u30b9\u30d7\u30ec\u30c3\u30c9\u3092\u5e73\u57472pips\u306b\u8a2d\u5b9a\u3057\u3066\u3082\u307e\u3060\u30d7\u30e9\u30b9900\u30c9\u30eb\u4f4d\u3042\u308b\u8a08\u7b97\u3067\u3059\u3002\n\n\u4e00\u898b\u826f\u3055\u305d\u3046\u3067\u3059\u304c\u30fb\u30fb\u30fb\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u671f\u9593\u3092\u5909\u3048\u308b\u3068\u3059\u3050\u306b\u30c0\u30e1\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u30e2\u30c7\u30eb\u3068\u30c7\u30fc\u30bf\u9078\u629e\u304c\u826f\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u304f\u5076\u3005\u3044\u3044\u611f\u3058\u306b\u30d5\u30a3\u30c3\u30c8\u3057\u305f\u3060\u3051\u306e\u3088\u3046\u3067\u3059\u3002\n\nGitHub\u306bNotebook\u3092\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u304a\u8a66\u3057\u3042\u308c\u3002\nhttps://github.com/hayatoy/ml-forex-prediction\n", "tags": ["\u6a5f\u68b0\u5b66\u7fd2", "scikit-learn", "FX", "Python", "MachineLearning"]}