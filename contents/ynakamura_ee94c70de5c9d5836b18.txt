{"context": "\u66f8\u7c4d\u3078\u306e\u30ea\u30f3\u30af\nhttp://www.amazon.co.jp/C%E8%A8%80%E8%AA%9E%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-Computer-Science-Textbook-%E3%83%8F%E3%83%BC%E3%83%99%E3%82%A4%E3%83%BBM/dp/4894710293/ref=sr_1_1?s=books&ie=UTF8&qid=1458996011&sr=8-1&keywords=%E3%83%80%E3%82%A4%E3%83%86%E3%83%AB\n14.2 \u53ef\u5909\u9577\u5f15\u6570\u3092\u6d3b\u7528\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <stdarg.h>\n\nint product(int, ...);\n\nint main()\n{\n    printf(\"%d\\n\", product(2, 3, 5));\n    printf(\"%d\\n\", product(3, 5, 5, 5));\n    printf(\"%d\\n\", product(5, 1, 3, 4, 5, 5));\n\n    getch();\n    return 0;\n}\n\nint product(int i, ...)\n{ \n    int total = 1;\n    int j;\n    va_list ap;\n\n\n    va_start(ap, i);\n\n\n    for (j = 1; j <= i; j++)\n    {\n       total *= va_arg(ap, int);\n    }\n\n    va_end(ap);\n\n    return total;\n}  \n\n14.3 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u8868\u793a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(int argc, char *argv[])\n{\n    int i;\n\n\n    printf(\"\u30b3\u30de\u30f3\u30c9\u884c\u3092\u30d7\u30ea\u30f3\u30c8\u3057\u307e\u3059\\n\");\n\n    for (i = 0; argv[i] != NULL; i++)\n    {\n        printf(\"%s\\n\", argv[i]);\n    }\n    getch();\n    return 0;\n}\n\n\n14.4 \u95a2\u6570(\u914d\u5217\u8981\u7d20\u3092\u6607\u30fb\u964d\u9806\u306b\u6574\u5217)\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3068\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u9069\u7528\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n\nvoid sortDecendArray(int [], int);\nvoid sortAcentArray(int [], int);\nvoid printArray(int [], int);\n\nint main(int argc, char *argv[])\n{     \n    int array[10];\n    char option = '\\0'; // \u30ca\u30eb\u6587\u5b57\u3067\u521d\u671f\u5316\n    int i;\n    void (*f[4])(int [], int);\n\n    f[0] = sortAcentArray;\n    f[3] = sortDecendArray;\n\n\n    // \u30bd\u30fc\u30c8\u524d\n    printf(\"\u30bd\u30fc\u30c8\u524d\\n\");\n    printArray(array, 10);\n\n    for (i = 0; argv[i] != NULL; i++)\n    {\n        if (*argv[i] == '-')\n        {\n            if (*(argv[i] + 1) == 'a')\n            {\n                option = 'a';\n            }\n            else if (*(argv[i] + 1) == 'd')\n            {\n                option = 'd';\n            }\n        } \n    }\n\n    // \u30aa\u30d7\u30b7\u30e7\u30f3\u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u308b\u306a\u3089\u3070\n    if (option)\n    {  \n        printf(\"%c\", option);\n        // \u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u5fdc\u3058\u305f\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\n        (*f[option - 'a'])(array, 10);\n\n        // \u30bd\u30fc\u30c8\u5f8c\n        printf(\"\u30bd\u30fc\u30c8\u5f8c\\n\");\n        printArray(array, 10);\n    } \n    getch();\n    return 0;\n}\n\n// \u964d\u9806\u306b\u914d\u5217\u3092\u30bd\u30fc\u30c8\nvoid sortDecendArray(int a[], int size)\n{\n    int position;\n    int count;\n    int tmp;\n\n\n    for (count = 1; count <= size - 1; count++)\n    {\n       for (position = 0; position <= size - 2; position++)\n       {\n          if (a[position] > a[position + 1]) \n          {\n              tmp = a[position];\n              a[position] = a[position + 1];\n              a[position + 1] = tmp;\n          }\n       }\n    }\n\n}\n\nvoid sortAcentArray(int a[], int size)\n{\n    int position;\n    int count;\n    int tmp;\n\n\n    for (count = 1; count <= size - 1; count++)\n    {\n       for (position = 0; position <= size - 2; position++)\n       {\n          if (a[position] < a[position + 1]) \n          {\n              tmp = a[position];\n              a[position] = a[position + 1];\n              a[position + 1] = tmp;\n          }\n       }\n    }\n}\n\nvoid printArray(int a[], int size)\n{\n    int i;\n\n\n    for (i = 0; i < size; i++)\n    {\n        printf(\"%d\\n\", a[i]);\n    }\n}\n\n14.5 \u30d5\u30a1\u30a4\u30eb\u4f4d\u7f6e\u30dd\u30a4\u30f3\u30bf\u3092\u64cd\u4f5c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n\nvoid fileCopy(FILE *, FILE *);\n\nint main(int argc, char *argv[])\n{\n    char c;\n    FILE *source;\n    FILE *tmp;\n\n    if (argv[1] == NULL)\n    {\n        fprintf(stderr, \"\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\\n\");\n        return -1;\n    }\n\n    if ((source = fopen(argv[1], \"r+\")) == NULL)\n    {\n         fprintf(stderr, \"%s\u304c\u958b\u3051\u307e\u305b\u3093\u3067\u3057\u305f\\n\", argv[1]);\n         return -1;\n    }\n\n    if ((tmp = fopen (\"tmp.txt\", \"w+\")) == NULL)\n    {\n         fprintf(stderr, \"tmp.txt\u306e\u751f\u6210\u306b\u5931\u6557\u3057\u307e\u3057\u305f\\n\");\n         return -1;\n    }\n\n    while ((c = fgetc(source)) != EOF)\n    {\n         // \u6587\u5b57\u3092\u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\n         fputc(c, tmp);\n\n         // \u5404\u6587\u5b57\u306e\u9593\u306b\u30b9\u30da\u30fc\u30b9\u3092\u5165\u308c\u308b\n         fputc(' ', tmp);\n    }\n\n    // \u30d5\u30a1\u30a4\u30eb\u4f4d\u7f6e\u30dd\u30a4\u30f3\u30bf\u3092\u5148\u982d\u306b\u623b\u3059\n    rewind(source);\n    rewind(tmp);\n\n    // \u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\u3059\u308b\n    fileCopy(tmp, source);\n\n    // \u30d5\u30a1\u30a4\u30eb\u30af\u30ed\u30fc\u30ba\n    fclose(tmp);\n    fclose(source);\n\n    getch();\n    return 0;\n}\n\nvoid fileCopy(FILE *from, FILE *to)\n{\n    char c;\n\n\n    while ((c = fgetc(from)) != EOF)\n    {\n         putc(c, to);\n    }\n}\n\n14.6 \u30b7\u30b0\u30ca\u30eb\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <signal.h>\n\nvoid signalHandler(void);\nvoid signalHandler1(void);\n\nint main()\n{\n    signal(SIGINT, signalHandler);\n    signal(SIGABRT, signalHandler1);\n\n    // \u308f\u3056\u3068\u4e2d\u65ad\n    abort();\n\n    // \u30eb\u30fc\u30d7\u306e\u4e2d\u3067SIGINT\u5272\u308a\u8fbc\u307f\u3092\u8d77\u3053\u3059\n    while(1);\n\n\n    getch();\n    return 0;\n}\n\nvoid signalHandler(void)\n{\n    printf(\"SIGINT\u304c\u88dc\u8db3\u3055\u308c\u307e\u3057\u305f\\n\");\n}\n\nvoid signalHandler1(void)\n{\n    printf(\"SIGABRT\u304c\u88dc\u8db3\u3055\u308c\u307e\u3057\u305f\\n\");\n}\n\n14.7 realloc\u306b\u3088\u308a\u914d\u5217\u3092\u518d\u78ba\u4fdd\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <signal.h>\n\nvoid inputArray(int [], int);\nvoid printArray(int [], int);\n\nint main()\n{\n    int size;\n    int *arrayPtr;\n\n    // srand(time(NULL));\n    printf(\"\u914d\u5217\u306e\u30b5\u30a4\u30ba\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\\n\");\n    scanf(\"%d\", &size);\n\n    if ((arrayPtr = (int *)malloc(size)) == NULL)\n    {\n        fprintf(stderr, \"\u914d\u5217\u3092\u78ba\u4fdd\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\\n\");\n        return -1;\n    }\n\n    // \u914d\u5217\u306b\u5024\u3092\u5165\u529b\n    inputArray(arrayPtr, size);\n\n    // \u914d\u5217\u306b\u683c\u7d0d\u3055\u308c\u305f\u5024\u3092\u8868\u793a\n    printArray(arrayPtr, size);\n\n    printf(\"\u914d\u5217\u3092\u518d\u78ba\u4fdd\u3057\u307e\u3059\\n\");\n\n    if ((arrayPtr = (int *)realloc(arrayPtr, size / 2)) == NULL)\n    {\n        fprintf(stderr, \"\u914d\u5217\u306e\u518d\u78ba\u4fdd\u306b\u5931\u6557\u3057\u307e\u3057\u305f\\n\");\n        return -1;\n    }\n\n    // \u914d\u5217\u306b\u683c\u7d0d\u3055\u308c\u305f\u5024\u3092\u8868\u793a\n    printArray(arrayPtr, size / 2);\n    getch();\n    return 0;\n}\n\nvoid inputArray(int a[], int size)\n{\n    int i;\n\n\n    printf(\"\u914d\u5217\u306b\u5024\u3092\u5165\u308c\u307e\u3059\\n\");\n\n    for (i = 0; i < size; i++)\n    {\n        a[i] = rand() % RAND_MAX; \n    }\n}\n\nvoid printArray(int a[], int size)\n{\n    int i;\n\n\n    for (i = 0; i < size; i++)\n    {\n        printf(\"%d\\n\", a[i]);\n    }\n}\n\n14.8 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306b\u3088\u308a\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u3001\u9006\u3055\u306b\u5225\u306e\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3080\u30d7\u30ed\u30b0\u30e9\u30e0\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <signal.h>\n\n#define FILE_SIZE 10000\n\nint main(int argc, char *argv[])\n{\n    FILE *readPtr; \n    FILE *writePtr;\n    char fileBuf[FILE_SIZE];\n    char c;\n    int i;\n    int endFlag = 0; // \u30a8\u30f3\u30c9\u30d5\u30e9\u30b0\n\n\n    // \u30d5\u30a1\u30a4\u30eb\u304c\u6307\u5b9a\u3055\u308c\u3066\u306a\u3044\u306a\u3089\u3070\u30a8\u30e9\u30fc\u8868\u793a\u3092\u8868\u793a\u3057\u3066\u7d42\u4e86\n    if (argv[1] == NULL || argv[2] == NULL)\n    {\n        fprintf(stderr, \"\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\\n\");\n        return -1;\n    }\n\n    // \u30d5\u30a1\u30a4\u30eb1\u304c\u30aa\u30fc\u30d7\u30f3\u3067\u304d\u306a\u3044\u306a\u3089\u3070\u30a8\u30e9\u30fc\u3092\u8868\u793a\u3057\u3066\u7d42\u4e86\n    if ((readPtr = fopen(argv[1], \"r+\")) == NULL)\n    {\n         fprintf(stderr, \"\u30d5\u30a1\u30a4\u30eb1\u3092\u30aa\u30fc\u30d7\u30f3\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\\n\");\n         return -1;\n    }\n\n    // \u30d5\u30a1\u30a4\u30eb2\u304c\u30aa\u30fc\u30d7\u30f3\u3067\u304d\u306a\u3044\u306a\u3089\u3070\u30a8\u30e9\u30fc\u3092\u8868\u793a\u3057\u3066\u7d42\u4e86\n    if ((writePtr = fopen(argv[2], \"w\")) == NULL)\n    {\n         fprintf(stderr, \"\u30d5\u30a1\u30a4\u30eb2\u3092\u30aa\u30fc\u30d7\u30f3\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\\n\");\n         return -1;\n    }\n    // \u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3088\u308a\u5c11\u306a\u304f,\u30a8\u30f3\u30c9\u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u306a\u3044\u306a\u3089\u3070\u30eb\u30fc\u30d7\n    for (i = 0; i < FILE_SIZE && endFlag == 0; i++)\n    {\n        // EOF\u3067\u306a\u3044\u306a\u3089\u3070\u30d5\u30a1\u30a4\u30eb\u30d0\u30c3\u30d5\u30a1\u306b\u30d5\u30a1\u30a4\u30eb\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\n        if ((c = fgetc(readPtr)) != EOF)\n        {\n             fileBuf[i] = c;\n        } \n        // EOF\u306a\u3089\u3070\u30a8\u30f3\u30c9\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u3066\u30eb\u30fc\u30d7\u3092\u629c\u3051\u308b\n        else\n        {\n             endFlag= 1;\n        }\n    }\n\n    // \u8aad\u307f\u8fbc\u307e\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u30c7\u30fc\u30bf\u9006\u3055\u306b\u66f8\u304d\u51fa\u3059\n    for (; (i - 1) >= 0; i--)\n    {\n        fputc(fileBuf[i], writePtr);\n    }\n\n\n    getch();\n    return 0;\n}\n\n\n\n14.9 goto\u6587\u306b\u3066for\u6587\u3092\u8868\u73fe\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <signal.h>\n\nint main()\n{\n    int i = 0;\n    int j = 0;\n\nPRINT1: printf(\"*\");\n        printf(\"*\");\n        printf(\"*\");\n        printf(\"*\");\n        printf(\"*\");\n        printf(\"\\n\");\n\n        i++;\n\n        if (i >= 2)\n        {\n            goto END;\n        }\n        else if(i == 1)\n        {\n            goto PRINT2;\n        }\n\nPRINT2: printf(\"*\");\n        printf(\" \");\n        printf(\" \");\n        printf(\" \");\n        printf(\"*\");\n        printf(\"\\n\");\n        j++;\n\n        if (j <3)\n        {\n            goto PRINT2;\n        }\n        else\n        {\n            goto PRINT1;\n        }\n\n\nEND:\n    getch();\n    return 0;\n}\n\n\u66f8\u7c4d\u3078\u306e\u30ea\u30f3\u30af\nhttp://www.amazon.co.jp/C%E8%A8%80%E8%AA%9E%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-Computer-Science-Textbook-%E3%83%8F%E3%83%BC%E3%83%99%E3%82%A4%E3%83%BBM/dp/4894710293/ref=sr_1_1?s=books&ie=UTF8&qid=1458996011&sr=8-1&keywords=%E3%83%80%E3%82%A4%E3%83%86%E3%83%AB\n\n14.2 \u53ef\u5909\u9577\u5f15\u6570\u3092\u6d3b\u7528\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\n\n```c\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <stdarg.h>\n\nint product(int, ...);\n\nint main()\n{\n    printf(\"%d\\n\", product(2, 3, 5));\n    printf(\"%d\\n\", product(3, 5, 5, 5));\n    printf(\"%d\\n\", product(5, 1, 3, 4, 5, 5));\n\n    getch();\n    return 0;\n}\n\nint product(int i, ...)\n{ \n    int total = 1;\n    int j;\n    va_list ap;\n\n\n    va_start(ap, i);\n\n  \n    for (j = 1; j <= i; j++)\n    {\n       total *= va_arg(ap, int);\n    }\n    \n    va_end(ap);\n\n    return total;\n}  \n```\n\n14.3 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u8868\u793a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n\n\n```c\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main(int argc, char *argv[])\n{\n    int i;\n\n\n    printf(\"\u30b3\u30de\u30f3\u30c9\u884c\u3092\u30d7\u30ea\u30f3\u30c8\u3057\u307e\u3059\\n\");\n\n    for (i = 0; argv[i] != NULL; i++)\n    {\n        printf(\"%s\\n\", argv[i]);\n    }\n    getch();\n    return 0;\n}\n\n```\n\n14.4 \u95a2\u6570(\u914d\u5217\u8981\u7d20\u3092\u6607\u30fb\u964d\u9806\u306b\u6574\u5217)\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3068\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u9069\u7528\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\n\n```c\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n\nvoid sortDecendArray(int [], int);\nvoid sortAcentArray(int [], int);\nvoid printArray(int [], int);\n\nint main(int argc, char *argv[])\n{     \n    int array[10];\n    char option = '\\0'; // \u30ca\u30eb\u6587\u5b57\u3067\u521d\u671f\u5316\n    int i;\n    void (*f[4])(int [], int);\n\n    f[0] = sortAcentArray;\n    f[3] = sortDecendArray;\n\n \n    // \u30bd\u30fc\u30c8\u524d\n    printf(\"\u30bd\u30fc\u30c8\u524d\\n\");\n    printArray(array, 10);\n\n    for (i = 0; argv[i] != NULL; i++)\n    {\n        if (*argv[i] == '-')\n        {\n            if (*(argv[i] + 1) == 'a')\n            {\n                option = 'a';\n            }\n            else if (*(argv[i] + 1) == 'd')\n            {\n                option = 'd';\n            }\n        } \n    }\n\n    // \u30aa\u30d7\u30b7\u30e7\u30f3\u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u308b\u306a\u3089\u3070\n    if (option)\n    {  \n        printf(\"%c\", option);\n        // \u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u5fdc\u3058\u305f\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\n        (*f[option - 'a'])(array, 10);\n \n        // \u30bd\u30fc\u30c8\u5f8c\n        printf(\"\u30bd\u30fc\u30c8\u5f8c\\n\");\n        printArray(array, 10);\n    } \n    getch();\n    return 0;\n}\n\n// \u964d\u9806\u306b\u914d\u5217\u3092\u30bd\u30fc\u30c8\nvoid sortDecendArray(int a[], int size)\n{\n    int position;\n    int count;\n    int tmp;\n\n\n    for (count = 1; count <= size - 1; count++)\n    {\n       for (position = 0; position <= size - 2; position++)\n       {\n          if (a[position] > a[position + 1]) \n          {\n              tmp = a[position];\n              a[position] = a[position + 1];\n              a[position + 1] = tmp;\n          }\n       }\n    }\n    \n}\n\nvoid sortAcentArray(int a[], int size)\n{\n    int position;\n    int count;\n    int tmp;\n\n\n    for (count = 1; count <= size - 1; count++)\n    {\n       for (position = 0; position <= size - 2; position++)\n       {\n          if (a[position] < a[position + 1]) \n          {\n              tmp = a[position];\n              a[position] = a[position + 1];\n              a[position + 1] = tmp;\n          }\n       }\n    }\n}\n\nvoid printArray(int a[], int size)\n{\n    int i;\n\n\n    for (i = 0; i < size; i++)\n    {\n        printf(\"%d\\n\", a[i]);\n    }\n}\n```\n\n14.5 \u30d5\u30a1\u30a4\u30eb\u4f4d\u7f6e\u30dd\u30a4\u30f3\u30bf\u3092\u64cd\u4f5c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n\n```c\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n\nvoid fileCopy(FILE *, FILE *);\n\nint main(int argc, char *argv[])\n{\n    char c;\n    FILE *source;\n    FILE *tmp;\n \n    if (argv[1] == NULL)\n    {\n        fprintf(stderr, \"\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\\n\");\n        return -1;\n    }\n\n    if ((source = fopen(argv[1], \"r+\")) == NULL)\n    {\n         fprintf(stderr, \"%s\u304c\u958b\u3051\u307e\u305b\u3093\u3067\u3057\u305f\\n\", argv[1]);\n         return -1;\n    }\n\n    if ((tmp = fopen (\"tmp.txt\", \"w+\")) == NULL)\n    {\n         fprintf(stderr, \"tmp.txt\u306e\u751f\u6210\u306b\u5931\u6557\u3057\u307e\u3057\u305f\\n\");\n         return -1;\n    }\n\n    while ((c = fgetc(source)) != EOF)\n    {\n         // \u6587\u5b57\u3092\u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\n         fputc(c, tmp);\n \n         // \u5404\u6587\u5b57\u306e\u9593\u306b\u30b9\u30da\u30fc\u30b9\u3092\u5165\u308c\u308b\n         fputc(' ', tmp);\n    }\n\n    // \u30d5\u30a1\u30a4\u30eb\u4f4d\u7f6e\u30dd\u30a4\u30f3\u30bf\u3092\u5148\u982d\u306b\u623b\u3059\n    rewind(source);\n    rewind(tmp);\n\n    // \u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\u3059\u308b\n    fileCopy(tmp, source);\n\n    // \u30d5\u30a1\u30a4\u30eb\u30af\u30ed\u30fc\u30ba\n    fclose(tmp);\n    fclose(source);\n\n    getch();\n    return 0;\n}\n\nvoid fileCopy(FILE *from, FILE *to)\n{\n    char c;\n\n    \n    while ((c = fgetc(from)) != EOF)\n    {\n         putc(c, to);\n    }\n}\n```\n\n14.6 \u30b7\u30b0\u30ca\u30eb\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\n\n\n```c\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <signal.h>\n\nvoid signalHandler(void);\nvoid signalHandler1(void);\n\nint main()\n{\n    signal(SIGINT, signalHandler);\n    signal(SIGABRT, signalHandler1);\n\n    // \u308f\u3056\u3068\u4e2d\u65ad\n    abort();\n\n    // \u30eb\u30fc\u30d7\u306e\u4e2d\u3067SIGINT\u5272\u308a\u8fbc\u307f\u3092\u8d77\u3053\u3059\n    while(1);\n    \n\n    getch();\n    return 0;\n}\n\nvoid signalHandler(void)\n{\n    printf(\"SIGINT\u304c\u88dc\u8db3\u3055\u308c\u307e\u3057\u305f\\n\");\n}\n\nvoid signalHandler1(void)\n{\n    printf(\"SIGABRT\u304c\u88dc\u8db3\u3055\u308c\u307e\u3057\u305f\\n\");\n}\n```\n\n14.7 realloc\u306b\u3088\u308a\u914d\u5217\u3092\u518d\u78ba\u4fdd\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n\n\n```c\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <signal.h>\n\nvoid inputArray(int [], int);\nvoid printArray(int [], int);\n\nint main()\n{\n    int size;\n    int *arrayPtr;\n\n    // srand(time(NULL));\n    printf(\"\u914d\u5217\u306e\u30b5\u30a4\u30ba\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\\n\");\n    scanf(\"%d\", &size);\n\n    if ((arrayPtr = (int *)malloc(size)) == NULL)\n    {\n        fprintf(stderr, \"\u914d\u5217\u3092\u78ba\u4fdd\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\\n\");\n        return -1;\n    }\n\n    // \u914d\u5217\u306b\u5024\u3092\u5165\u529b\n    inputArray(arrayPtr, size);\n\n    // \u914d\u5217\u306b\u683c\u7d0d\u3055\u308c\u305f\u5024\u3092\u8868\u793a\n    printArray(arrayPtr, size);\n    \n    printf(\"\u914d\u5217\u3092\u518d\u78ba\u4fdd\u3057\u307e\u3059\\n\");\n\n    if ((arrayPtr = (int *)realloc(arrayPtr, size / 2)) == NULL)\n    {\n        fprintf(stderr, \"\u914d\u5217\u306e\u518d\u78ba\u4fdd\u306b\u5931\u6557\u3057\u307e\u3057\u305f\\n\");\n        return -1;\n    }\n\n    // \u914d\u5217\u306b\u683c\u7d0d\u3055\u308c\u305f\u5024\u3092\u8868\u793a\n    printArray(arrayPtr, size / 2);\n    getch();\n    return 0;\n}\n\nvoid inputArray(int a[], int size)\n{\n    int i;\n\n\n    printf(\"\u914d\u5217\u306b\u5024\u3092\u5165\u308c\u307e\u3059\\n\");\n\n    for (i = 0; i < size; i++)\n    {\n        a[i] = rand() % RAND_MAX; \n    }\n}\n\nvoid printArray(int a[], int size)\n{\n    int i;\n\n \n    for (i = 0; i < size; i++)\n    {\n        printf(\"%d\\n\", a[i]);\n    }\n}\n```\n\n14.8 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306b\u3088\u308a\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u3001\u9006\u3055\u306b\u5225\u306e\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3080\u30d7\u30ed\u30b0\u30e9\u30e0\n\n```c\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <signal.h>\n\n#define FILE_SIZE 10000\n\nint main(int argc, char *argv[])\n{\n    FILE *readPtr; \n    FILE *writePtr;\n    char fileBuf[FILE_SIZE];\n    char c;\n    int i;\n    int endFlag = 0; // \u30a8\u30f3\u30c9\u30d5\u30e9\u30b0\n\n \n    // \u30d5\u30a1\u30a4\u30eb\u304c\u6307\u5b9a\u3055\u308c\u3066\u306a\u3044\u306a\u3089\u3070\u30a8\u30e9\u30fc\u8868\u793a\u3092\u8868\u793a\u3057\u3066\u7d42\u4e86\n    if (argv[1] == NULL || argv[2] == NULL)\n    {\n        fprintf(stderr, \"\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\\n\");\n        return -1;\n    }\n\n    // \u30d5\u30a1\u30a4\u30eb1\u304c\u30aa\u30fc\u30d7\u30f3\u3067\u304d\u306a\u3044\u306a\u3089\u3070\u30a8\u30e9\u30fc\u3092\u8868\u793a\u3057\u3066\u7d42\u4e86\n    if ((readPtr = fopen(argv[1], \"r+\")) == NULL)\n    {\n         fprintf(stderr, \"\u30d5\u30a1\u30a4\u30eb1\u3092\u30aa\u30fc\u30d7\u30f3\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\\n\");\n         return -1;\n    }\n\n    // \u30d5\u30a1\u30a4\u30eb2\u304c\u30aa\u30fc\u30d7\u30f3\u3067\u304d\u306a\u3044\u306a\u3089\u3070\u30a8\u30e9\u30fc\u3092\u8868\u793a\u3057\u3066\u7d42\u4e86\n    if ((writePtr = fopen(argv[2], \"w\")) == NULL)\n    {\n         fprintf(stderr, \"\u30d5\u30a1\u30a4\u30eb2\u3092\u30aa\u30fc\u30d7\u30f3\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\\n\");\n         return -1;\n    }\n    // \u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3088\u308a\u5c11\u306a\u304f,\u30a8\u30f3\u30c9\u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u306a\u3044\u306a\u3089\u3070\u30eb\u30fc\u30d7\n    for (i = 0; i < FILE_SIZE && endFlag == 0; i++)\n    {\n        // EOF\u3067\u306a\u3044\u306a\u3089\u3070\u30d5\u30a1\u30a4\u30eb\u30d0\u30c3\u30d5\u30a1\u306b\u30d5\u30a1\u30a4\u30eb\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\n        if ((c = fgetc(readPtr)) != EOF)\n        {\n             fileBuf[i] = c;\n        } \n        // EOF\u306a\u3089\u3070\u30a8\u30f3\u30c9\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u3066\u30eb\u30fc\u30d7\u3092\u629c\u3051\u308b\n        else\n        {\n             endFlag= 1;\n        }\n    }\n\n    // \u8aad\u307f\u8fbc\u307e\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u30c7\u30fc\u30bf\u9006\u3055\u306b\u66f8\u304d\u51fa\u3059\n    for (; (i - 1) >= 0; i--)\n    {\n        fputc(fileBuf[i], writePtr);\n    }\n    \n    \n    getch();\n    return 0;\n}\n\n\n```\n\n14.9 goto\u6587\u306b\u3066for\u6587\u3092\u8868\u73fe\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n\n```c\n#include <stdio.h>\n#include <conio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <signal.h>\n\nint main()\n{\n    int i = 0;\n    int j = 0;\n \nPRINT1: printf(\"*\");\n        printf(\"*\");\n        printf(\"*\");\n        printf(\"*\");\n        printf(\"*\");\n        printf(\"\\n\");\n\n        i++;\n\n        if (i >= 2)\n        {\n            goto END;\n        }\n        else if(i == 1)\n        {\n            goto PRINT2;\n        }\n\nPRINT2: printf(\"*\");\n        printf(\" \");\n        printf(\" \");\n        printf(\" \");\n        printf(\"*\");\n        printf(\"\\n\");\n        j++;\n\n        if (j <3)\n        {\n            goto PRINT2;\n        }\n        else\n        {\n            goto PRINT1;\n        }\n\n\nEND:\n    getch();\n    return 0;\n}\n```\n\n\n\n", "tags": ["C\u8a00\u8a9e", "\u30c0\u30a4\u30c6\u30ebC", "\u53ef\u5909\u9577\u5f15\u6570", "\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570", "\u95a2\u6570\u30dd\u30a4\u30f3\u30bf"]}