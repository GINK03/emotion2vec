{"context": " More than 1 year has passed since last update.\u300c\u5c71\u6298\u308a\u8c37\u6298\u308a\u300d\u3092Erlang\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u4ed6\u306e\u7686\u69d8\u306b\u3088\u308b\u5b9f\u88c5\u306f \u7b2c18\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u53c2\u8003\u554f\u984c \u304b\u3089\u8fbf\u308c\u307e\u3059\u3002\n\nmafovafo.erl\n-module(mafovafo).\n-compile(export_all).\n\nsolve(Data) -> to_s(lists:foldl(fun unfold/2, [] , lists:reverse(Data))).\n\nto_s(L) -> [case C of 0 -> $V; 1 -> $m end || C <- L].\n\nunfold($L, L) -> rev(L) ++ [0] ++ L;\nunfold($J, L) -> L ++ [0] ++ rev(L);\nunfold($Z, L) -> L ++ [1] ++ rev(L) ++ [0] ++ L;\nunfold($U, L) -> rev(L) ++ [0] ++ L ++ [0] ++ rev(L);\nunfold($S, L) -> L ++ [0] ++ rev(L) ++ [1] ++ L.\n\nrev(L) -> [1 - X || X <- lists:reverse(L)].\n\ntest(Data, Expected) -> test(Data, solve(Data), Expected).\ntest(Data, Result, Expected) -> io:fwrite(\"~s: ~s -> ~s~n\",\n  [case Result =:= Expected of true -> ok; false -> ng end, Data, Result]).\n\ntests() ->\n  test(\"JZ\", \"mVVmV\"), %0\n  test(\"J\", \"V\"), %1\n  test(\"L\", \"V\"), %2\n  test(\"Z\", \"mV\"), %3\n  test(\"U\", \"VV\"), %4\n  test(\"S\", \"Vm\"), %5\n  test(\"JL\", \"VVm\"), %6\n  test(\"JS\", \"VmVVm\"), %7\n  test(\"JU\", \"VVVmm\"), %8\n  test(\"LU\", \"mmVVV\"), %9\n  test(\"SL\", \"VVmmV\"), %10\n  test(\"SS\", \"VmVVmmVm\"), %11\n  test(\"SU\", \"VVVmmmVV\"), %12\n  test(\"SZ\", \"mVVmVmmV\"), %13\n  test(\"UL\", \"mVVVm\"), %14\n  test(\"UU\", \"mmVVVVmm\"), %15\n  test(\"UZ\", \"mVVmVVmV\"), %16\n  test(\"ZJ\", \"VmmVV\"), %17\n  test(\"ZS\", \"VmmVmVVm\"), %18\n  test(\"ZZ\", \"mVmmVVmV\"), %19\n  test(\"JJJ\", \"VVmVVmm\"), %20\n  test(\"JJZ\", \"mVVmVVmVmmV\"), %21\n  test(\"JSJ\", \"VVmmVVmVVmm\"), %22\n  test(\"JSS\", \"VmVVmmVmVVmVVmmVm\"), %23\n  test(\"JUS\", \"VmVVmVVmVVmmVmmVm\"), %24\n  test(\"JUU\", \"mmVVVVmmVVVmmmmVV\"), %25\n  test(\"JUZ\", \"mVVmVVmVVmVmmVmmV\"), %26\n  test(\"LJJ\", \"VmmVVVm\"), %27\n  test(\"LLS\", \"VmmVmVVmVVm\"), %28\n  test(\"LLU\", \"mmmVVVmmVVV\"), %29\n  test(\"LLZ\", \"mVmmVVmVVmV\"), %30\n  test(\"LSU\", \"mmVVVmmmVVVVmmmVV\"), %31\n  test(\"LSZ\", \"mVVmVmmVVmVVmVmmV\"), %32\n  test(\"LZL\", \"mmVVmVVmmVV\"), %33\n  test(\"LZS\", \"VmmVmVVmVVmmVmVVm\"), %34\n  test(\"LZU\", \"mmmVVVmmVVVmmmVVV\"), %35\n  test(\"SJL\", \"VVmVVmmmVVm\"), %36\n  test(\"SLU\", \"mmVVVVmmmVVmmmVVV\"), %37\n  test(\"SLZ\", \"mVVmVVmVmmVmmVVmV\"), %38\n  test(\"SSU\", \"VVVmmmVVVmmVVVmmmmVVVmmmVV\"), %39\n  test(\"SUJ\", \"mVVVmVVmmmVmmVVVm\"), %40\n  test(\"SUS\", \"VmVVmVVmVVmmVmmVmmVmVVmVVm\"), %41\n  test(\"SZZ\", \"mVmmVVmVVmVmmVVmVmmVmmVVmV\"), %42\n  test(\"UJJ\", \"VmmVVVmVVmm\"), %43\n  test(\"ULU\", \"mmmVVVmmVVVVmmmVV\"), %44\n  test(\"ULZ\", \"mVmmVVmVVmVVmVmmV\"), %45\n  test(\"UUU\", \"VVmmmmVVVmmVVVVmmVVVmmmmVV\"), %46\n  test(\"ZJU\", \"VVVmmmVVmmmVVVVmm\"), %47\n  test(\"ZLS\", \"VmVVmmVmmVmVVmVVm\"), %48\n  test(\"ZSJ\", \"VVmmVmmVVmmVVVmmV\"), %49\n  test(\"ZUJ\", \"mVVVmmVmmmVVmVVVm\"), %50\n  test(\"JJLJ\", \"mVVVmmVVmVVmmmV\"), %51\n  test(\"JLJJ\", \"VmmVVVmVVmmmVVm\"), %52\n  test(\"JLJL\", \"VmmVVVmVVmmmVVm\"), %53\n  test(\"LJJL\", \"VVmmVmmVVVmVVmm\"), %54\n  test(\"LLJJ\", \"VmmmVVmVVmmVVVm\"), %55\n  test(\"SZUS\", \"VmVVmVVmmVmmVmmVmVVmVVmVVmVVmmVmmVmmVmVVmVVmVVmmVmmVmmVmVVmVVmmVmmVmmVmVVmVVmVVm\"), %56\n  test(\"ULLS\", \"VmmVmmVmVVmVVmmVmVVmVVmVVmmVmmVmVVm\"), %57\n  test(\"JJJJZJ\", \"VmmVVVmmVVmVVmmVVmmmVVmVVmmVVVmmVVmmVmmVVmmmVVmVVmmVVVmmVVmVVmmVVmmmVVmmVmmVVVmmVVmmVmmVVmmmVVm\"), %58\n  test(\"JULLLJ\", \"mmVmmVVmmmVVmVVVmmVmmVVVmmVVmVVVmmVmmVVmmmVVmVVVmmVmmVVVmmVVmVVmmmVmmVVmmmVVmVVmmmVmmVVVmmVVmVV\"), %59\n  test(\"LJJJUL\", \"mVVVmVVmmmVVmVVVmmVmmmVmmVVVmVVmmmVmmVVVmmVmmmVVmVVVmVVmmmVVmVVVmmVmmmVVmVVVmVVmmmVmmVVVmmVmmmV\"), %60\n  test(\"LJSJJL\", \"VVmVVmmVVVmmVmmmVVmVVmmmVVmmVmmVVVmVVmmmVVmmVmmVVVmVVmmVVVmmVmmmVVmVVmmVVVmmVmmVVVmVVmmmVVmmVmm\"), %61\n  test(\"LZLLLJ\", \"mmVmmVVmmmVVmVVmmmVmmVVVmmVVmVVVmmVmmVVmmmVVmVVVmmVmmVVVmmVVmVVmmmVmmVVmmmVVmVVVmmVmmVVVmmVVmVV\"), %62\n  test(\"SJJJJL\", \"VVmVVmmVVVmmVmmVVVmVVmmmVVmmVmmVVVmVVmmVVVmmVmmmVVmVVmmmVVmmVmmmVVmVVmmVVVmmVmmVVVmVVmmmVVmmVmm\"), %63\n  test(\"ZLJLJL\", \"VmmVVVmmVmmmVVmVVmmVVVmVVmmmVVmmVmmVVVmmVmmmVVmmVmmVVVmVVmmmVVmVVmmVVVmmVmmmVVmVVmmVVVmVVmmmVVm\"). %64\n\n\n\u7d19\u3092\u6298\u3063\u3066\u3044\u304f\u554f\u984c\u3067\u3059\u304c\u3001\u767a\u60f3\u3092\u8ee2\u63db\u3057\u3001\u6298\u3089\u308c\u3066\u3044\u306a\u3044\u7d19\u3092\u8584\u304f\u88c2\u304d\u306a\u304c\u3089\u958b\u3044\u3066\u3044\u304f\u3053\u3068\u3092\u8003\u3048\u307e\u3057\u305f\u3002\nErlang\u306f\u95a2\u6570\u30b7\u30b0\u30cb\u30c1\u30e3\u3067\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u304c\u4f7f\u3048\u308b\u306e\u3067\u3001\u6761\u4ef6\u5206\u5c90(if\u3084case)\u304c\u6e1b\u3063\u3066\u3059\u3063\u304d\u308a\u3068\u66f8\u3051\u307e\u3057\u305f\u3002\n\u300c[\u5c71\u6298\u308a\u8c37\u6298\u308a](http://nabetani.sakura.ne.jp/hena/ord18mafovafo/)\u300d\u3092Erlang\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u4ed6\u306e\u7686\u69d8\u306b\u3088\u308b\u5b9f\u88c5\u306f [\u7b2c18\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u53c2\u8003\u554f\u984c](http://qiita.com/Nabetani/items/373105e7fafd12f5e9fd) \u304b\u3089\u8fbf\u308c\u307e\u3059\u3002\n\n```erlang:mafovafo.erl\n-module(mafovafo).\n-compile(export_all).\n\nsolve(Data) -> to_s(lists:foldl(fun unfold/2, [] , lists:reverse(Data))).\n\nto_s(L) -> [case C of 0 -> $V; 1 -> $m end || C <- L].\n\nunfold($L, L) -> rev(L) ++ [0] ++ L;\nunfold($J, L) -> L ++ [0] ++ rev(L);\nunfold($Z, L) -> L ++ [1] ++ rev(L) ++ [0] ++ L;\nunfold($U, L) -> rev(L) ++ [0] ++ L ++ [0] ++ rev(L);\nunfold($S, L) -> L ++ [0] ++ rev(L) ++ [1] ++ L.\n\nrev(L) -> [1 - X || X <- lists:reverse(L)].\n\ntest(Data, Expected) -> test(Data, solve(Data), Expected).\ntest(Data, Result, Expected) -> io:fwrite(\"~s: ~s -> ~s~n\",\n  [case Result =:= Expected of true -> ok; false -> ng end, Data, Result]).\n\ntests() ->\n  test(\"JZ\", \"mVVmV\"), %0\n  test(\"J\", \"V\"), %1\n  test(\"L\", \"V\"), %2\n  test(\"Z\", \"mV\"), %3\n  test(\"U\", \"VV\"), %4\n  test(\"S\", \"Vm\"), %5\n  test(\"JL\", \"VVm\"), %6\n  test(\"JS\", \"VmVVm\"), %7\n  test(\"JU\", \"VVVmm\"), %8\n  test(\"LU\", \"mmVVV\"), %9\n  test(\"SL\", \"VVmmV\"), %10\n  test(\"SS\", \"VmVVmmVm\"), %11\n  test(\"SU\", \"VVVmmmVV\"), %12\n  test(\"SZ\", \"mVVmVmmV\"), %13\n  test(\"UL\", \"mVVVm\"), %14\n  test(\"UU\", \"mmVVVVmm\"), %15\n  test(\"UZ\", \"mVVmVVmV\"), %16\n  test(\"ZJ\", \"VmmVV\"), %17\n  test(\"ZS\", \"VmmVmVVm\"), %18\n  test(\"ZZ\", \"mVmmVVmV\"), %19\n  test(\"JJJ\", \"VVmVVmm\"), %20\n  test(\"JJZ\", \"mVVmVVmVmmV\"), %21\n  test(\"JSJ\", \"VVmmVVmVVmm\"), %22\n  test(\"JSS\", \"VmVVmmVmVVmVVmmVm\"), %23\n  test(\"JUS\", \"VmVVmVVmVVmmVmmVm\"), %24\n  test(\"JUU\", \"mmVVVVmmVVVmmmmVV\"), %25\n  test(\"JUZ\", \"mVVmVVmVVmVmmVmmV\"), %26\n  test(\"LJJ\", \"VmmVVVm\"), %27\n  test(\"LLS\", \"VmmVmVVmVVm\"), %28\n  test(\"LLU\", \"mmmVVVmmVVV\"), %29\n  test(\"LLZ\", \"mVmmVVmVVmV\"), %30\n  test(\"LSU\", \"mmVVVmmmVVVVmmmVV\"), %31\n  test(\"LSZ\", \"mVVmVmmVVmVVmVmmV\"), %32\n  test(\"LZL\", \"mmVVmVVmmVV\"), %33\n  test(\"LZS\", \"VmmVmVVmVVmmVmVVm\"), %34\n  test(\"LZU\", \"mmmVVVmmVVVmmmVVV\"), %35\n  test(\"SJL\", \"VVmVVmmmVVm\"), %36\n  test(\"SLU\", \"mmVVVVmmmVVmmmVVV\"), %37\n  test(\"SLZ\", \"mVVmVVmVmmVmmVVmV\"), %38\n  test(\"SSU\", \"VVVmmmVVVmmVVVmmmmVVVmmmVV\"), %39\n  test(\"SUJ\", \"mVVVmVVmmmVmmVVVm\"), %40\n  test(\"SUS\", \"VmVVmVVmVVmmVmmVmmVmVVmVVm\"), %41\n  test(\"SZZ\", \"mVmmVVmVVmVmmVVmVmmVmmVVmV\"), %42\n  test(\"UJJ\", \"VmmVVVmVVmm\"), %43\n  test(\"ULU\", \"mmmVVVmmVVVVmmmVV\"), %44\n  test(\"ULZ\", \"mVmmVVmVVmVVmVmmV\"), %45\n  test(\"UUU\", \"VVmmmmVVVmmVVVVmmVVVmmmmVV\"), %46\n  test(\"ZJU\", \"VVVmmmVVmmmVVVVmm\"), %47\n  test(\"ZLS\", \"VmVVmmVmmVmVVmVVm\"), %48\n  test(\"ZSJ\", \"VVmmVmmVVmmVVVmmV\"), %49\n  test(\"ZUJ\", \"mVVVmmVmmmVVmVVVm\"), %50\n  test(\"JJLJ\", \"mVVVmmVVmVVmmmV\"), %51\n  test(\"JLJJ\", \"VmmVVVmVVmmmVVm\"), %52\n  test(\"JLJL\", \"VmmVVVmVVmmmVVm\"), %53\n  test(\"LJJL\", \"VVmmVmmVVVmVVmm\"), %54\n  test(\"LLJJ\", \"VmmmVVmVVmmVVVm\"), %55\n  test(\"SZUS\", \"VmVVmVVmmVmmVmmVmVVmVVmVVmVVmmVmmVmmVmVVmVVmVVmmVmmVmmVmVVmVVmmVmmVmmVmVVmVVmVVm\"), %56\n  test(\"ULLS\", \"VmmVmmVmVVmVVmmVmVVmVVmVVmmVmmVmVVm\"), %57\n  test(\"JJJJZJ\", \"VmmVVVmmVVmVVmmVVmmmVVmVVmmVVVmmVVmmVmmVVmmmVVmVVmmVVVmmVVmVVmmVVmmmVVmmVmmVVVmmVVmmVmmVVmmmVVm\"), %58\n  test(\"JULLLJ\", \"mmVmmVVmmmVVmVVVmmVmmVVVmmVVmVVVmmVmmVVmmmVVmVVVmmVmmVVVmmVVmVVmmmVmmVVmmmVVmVVmmmVmmVVVmmVVmVV\"), %59\n  test(\"LJJJUL\", \"mVVVmVVmmmVVmVVVmmVmmmVmmVVVmVVmmmVmmVVVmmVmmmVVmVVVmVVmmmVVmVVVmmVmmmVVmVVVmVVmmmVmmVVVmmVmmmV\"), %60\n  test(\"LJSJJL\", \"VVmVVmmVVVmmVmmmVVmVVmmmVVmmVmmVVVmVVmmmVVmmVmmVVVmVVmmVVVmmVmmmVVmVVmmVVVmmVmmVVVmVVmmmVVmmVmm\"), %61\n  test(\"LZLLLJ\", \"mmVmmVVmmmVVmVVmmmVmmVVVmmVVmVVVmmVmmVVmmmVVmVVVmmVmmVVVmmVVmVVmmmVmmVVmmmVVmVVVmmVmmVVVmmVVmVV\"), %62\n  test(\"SJJJJL\", \"VVmVVmmVVVmmVmmVVVmVVmmmVVmmVmmVVVmVVmmVVVmmVmmmVVmVVmmmVVmmVmmmVVmVVmmVVVmmVmmVVVmVVmmmVVmmVmm\"), %63\n  test(\"ZLJLJL\", \"VmmVVVmmVmmmVVmVVmmVVVmVVmmmVVmmVmmVVVmmVmmmVVmmVmmVVVmVVmmmVVmVVmmVVVmmVmmmVVmVVmmVVVmVVmmmVVm\"). %64\n```\n\n\u7d19\u3092\u6298\u3063\u3066\u3044\u304f\u554f\u984c\u3067\u3059\u304c\u3001\u767a\u60f3\u3092\u8ee2\u63db\u3057\u3001\u6298\u3089\u308c\u3066\u3044\u306a\u3044\u7d19\u3092\u8584\u304f\u88c2\u304d\u306a\u304c\u3089\u958b\u3044\u3066\u3044\u304f\u3053\u3068\u3092\u8003\u3048\u307e\u3057\u305f\u3002\n\nErlang\u306f\u95a2\u6570\u30b7\u30b0\u30cb\u30c1\u30e3\u3067\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u304c\u4f7f\u3048\u308b\u306e\u3067\u3001\u6761\u4ef6\u5206\u5c90(if\u3084case)\u304c\u6e1b\u3063\u3066\u3059\u3063\u304d\u308a\u3068\u66f8\u3051\u307e\u3057\u305f\u3002\n", "tags": ["\u3069\u3046\u66f8\u304f", "Erlang", "yhpg"]}