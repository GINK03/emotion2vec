{"tags": ["Vert.x"], "context": " More than 1 year has passed since last update.\u63a2\u3057\u3066\u898b\u3064\u3051\u306b\u304f\u304b\u3063\u305f\u306e\u3067\u30e1\u30e2\u3002\nVert.x\u3067\u8907\u6570\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u307e\u305f\u304c\u3063\u305f\u30c7\u30fc\u30bf\u5171\u6709\u3092\u3057\u305f\u3044\u5834\u5408\u3001Vert.x 3\u7cfb\u3067\u306f\u3001io.vertx.core.shareddata \u3092\u4f7f\u3044\u307e\u3059\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3042\u308a\u307e\u3059\u3002\nCluster wide maps which can be accessed from any node of the cluster\nCluster wide locks which can be used to give exclusive access to resources across the cluster\nCluster wide counters used to maintain counts consistently across the cluster\nLocal maps for sharing data safely in the same Vert.x instance\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u30af\u30e9\u30b9\u30bf\u30ef\u30a4\u30c9\u306a\u30de\u30c3\u30d7\u3068\u30ed\u30c3\u30af\u3001\u30ab\u30a6\u30f3\u30bf\u30fc\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u307b\u304b\u3001Vert.x\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5185\u3067\u4f7f\u3048\u308b\u30ed\u30fc\u30ab\u30eb\u30de\u30c3\u30d7\u3082\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002\n\uff082015/11/25\u8ffd\u8a18\uff09\n\u4ee5\u4e0b\u306f\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002sharedData\u306f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u4e2d\u3067\u6271\u3046\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001verticle\u306b\u306a\u3058\u307f\u306e\u306a\u3044\u65b9\u306b\u306f\u3061\u3087\u3063\u3068\u898b\u306b\u304f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u5931\u6557\u30c1\u30a7\u30c3\u30af\u3092\u3057\u306a\u3044\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u4e2d\u3067AsyncMap\u3092\u53d6\u5f97\u3001put\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u3001\u5b8c\u4e86\u5f85\u3061\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u8a18\u8ff0\u3057\u3066\u304a\u304f\u3001\u3068\u3044\u3046\u591a\u6bb5\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n            SharedData sd = vertx.sharedData();\n            sd.getClusterWideMap(\"shared_data\", (AsyncResult<AsyncMap<String,String>> res) -> {\n                AsyncMap<String,String> amap = res.result();\n                amap.put(param1, param2, (AsyncResult<Void> comp) -> {\n                    JsonObject err = new JsonObject().put(\"status\", \"ok\");\n                    req.response().headers().set(\"Content-Type\", \"application/json\");\n                    req.response().end(err.encode());\n                });\n            }\n\n\u5931\u6557\u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002AsyncResult\u306f\u3001\u307e\u305afailed()\u3067\u30c1\u30a7\u30c3\u30af\u3059\u308b\u306e\u3067\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3054\u3068\u306b\u30c1\u30a7\u30c3\u30af\u3092\u66f8\u304f\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n            SharedData sd = vertx.sharedData();\n            sd.getClusterWideMap(\"shared_data\", (AsyncResult<AsyncMap<String,String>> res) -> {\n                if (res.failed()) {\n                    JsonObject err = new JsonObject().put(\"status\", \"error\");\n                    req.response().headers().set(\"Content-Type\", \"application/json\");\n                    req.response().end(err.encode());\n                } else {\n                    AsyncMap<String,String> amap = res.result();\n                    amap.put(param1, param2, (AsyncResult<Void> comp) -> {\n                        if (comp.failed()) {\n                            JsonObject err = new JsonObject()\n                                .put(\"status\", \"error\")\n                                .put(\"description\", \"write failed\");\n                            req.response().headers().set(\"Content-Type\", \"application/json\");\n                            req.response().end(err.encode());\n                        }else {\n                            JsonObject err = new JsonObject().put(\"status\", \"ok\");\n                            req.response().headers().set(\"Content-Type\", \"application/json\");\n                            req.response().end(err.encode());\n                        }\n                    });\n                }\n\n\u3053\u306eVerticle\u5168\u4f53\u306fGist\u3067\u516c\u958b\u4e2d\u3067\u3059\u3002\nhttps://gist.github.com/masatoshiitoh/f10a77fd62670ea4a529\nhttp://vertx.io/docs/apidocs/\n\u63a2\u3057\u3066\u898b\u3064\u3051\u306b\u304f\u304b\u3063\u305f\u306e\u3067\u30e1\u30e2\u3002\n\nVert.x\u3067\u8907\u6570\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u307e\u305f\u304c\u3063\u305f\u30c7\u30fc\u30bf\u5171\u6709\u3092\u3057\u305f\u3044\u5834\u5408\u3001Vert.x 3\u7cfb\u3067\u306f\u3001<b>io.vertx.core.shareddata</b> \u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3042\u308a\u307e\u3059\u3002\n\n```\nCluster wide maps which can be accessed from any node of the cluster\nCluster wide locks which can be used to give exclusive access to resources across the cluster\nCluster wide counters used to maintain counts consistently across the cluster\nLocal maps for sharing data safely in the same Vert.x instance\n```\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u30af\u30e9\u30b9\u30bf\u30ef\u30a4\u30c9\u306a\u30de\u30c3\u30d7\u3068\u30ed\u30c3\u30af\u3001\u30ab\u30a6\u30f3\u30bf\u30fc\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u307b\u304b\u3001Vert.x\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5185\u3067\u4f7f\u3048\u308b\u30ed\u30fc\u30ab\u30eb\u30de\u30c3\u30d7\u3082\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002\n\n\uff082015/11/25\u8ffd\u8a18\uff09\n\n\u4ee5\u4e0b\u306f\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002sharedData\u306f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u4e2d\u3067\u6271\u3046\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001verticle\u306b\u306a\u3058\u307f\u306e\u306a\u3044\u65b9\u306b\u306f\u3061\u3087\u3063\u3068\u898b\u306b\u304f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u5931\u6557\u30c1\u30a7\u30c3\u30af\u3092\u3057\u306a\u3044\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u4e2d\u3067AsyncMap\u3092\u53d6\u5f97\u3001put\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u3001\u5b8c\u4e86\u5f85\u3061\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u8a18\u8ff0\u3057\u3066\u304a\u304f\u3001\u3068\u3044\u3046\u591a\u6bb5\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```\n            SharedData sd = vertx.sharedData();\n            sd.getClusterWideMap(\"shared_data\", (AsyncResult<AsyncMap<String,String>> res) -> {\n                AsyncMap<String,String> amap = res.result();\n                amap.put(param1, param2, (AsyncResult<Void> comp) -> {\n                    JsonObject err = new JsonObject().put(\"status\", \"ok\");\n                    req.response().headers().set(\"Content-Type\", \"application/json\");\n                    req.response().end(err.encode());\n                });\n            }\n```\n\n\u5931\u6557\u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002AsyncResult\u306f\u3001\u307e\u305afailed()\u3067\u30c1\u30a7\u30c3\u30af\u3059\u308b\u306e\u3067\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3054\u3068\u306b\u30c1\u30a7\u30c3\u30af\u3092\u66f8\u304f\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\n            SharedData sd = vertx.sharedData();\n            sd.getClusterWideMap(\"shared_data\", (AsyncResult<AsyncMap<String,String>> res) -> {\n                if (res.failed()) {\n                    JsonObject err = new JsonObject().put(\"status\", \"error\");\n                    req.response().headers().set(\"Content-Type\", \"application/json\");\n                    req.response().end(err.encode());\n                } else {\n                    AsyncMap<String,String> amap = res.result();\n                    amap.put(param1, param2, (AsyncResult<Void> comp) -> {\n                        if (comp.failed()) {\n                            JsonObject err = new JsonObject()\n                                .put(\"status\", \"error\")\n                                .put(\"description\", \"write failed\");\n                            req.response().headers().set(\"Content-Type\", \"application/json\");\n                            req.response().end(err.encode());\n                        }else {\n                            JsonObject err = new JsonObject().put(\"status\", \"ok\");\n                            req.response().headers().set(\"Content-Type\", \"application/json\");\n                            req.response().end(err.encode());\n                        }\n                    });\n                }\n```\n\n\u3053\u306eVerticle\u5168\u4f53\u306fGist\u3067\u516c\u958b\u4e2d\u3067\u3059\u3002\n\nhttps://gist.github.com/masatoshiitoh/f10a77fd62670ea4a529\n\nhttp://vertx.io/docs/apidocs/\n\n"}