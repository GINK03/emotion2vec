{"context": "\n\n\u3053\u306e\u8a18\u4e8b\n\u30c7\u30fc\u30bf\u5206\u6790\u306e\u52c9\u5f37\u306e\u305f\u3081\u306bkaggle\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u305f\u30e1\u30e2\u3002\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u3042\u308b\u300ctitanic\u300d\u3092\u8a66\u3057\u305f\u304c\uff0cpandas\u3068\u304bscikit\u3068\u304b\uff0c\u308f\u304b\u3089\u306a\u3044\u3053\u3068\u304c\u591a\u3059\u304e\u308b\u3002\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u3044\u3051\u308b\u3068\u601d\u3063\u305f\u3051\u3069\uff0c\u30b9\u30b3\u30a2\u304c\u826f\u304f\u306a\u3044\u3002\n\n\u554f\u984c\n\uff08\u8aa4\u89e3\u3092\u6050\u308c\u305a\u306b\u3056\u3063\u304f\u308a\u8aac\u660e\u3059\u308b\u3068\uff09\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u306e\u4e57\u7d44\u54e1\u3067\u751f\u304d\u6b8b\u3063\u305f\u4eba\u306f\u3069\u3093\u306a\u4eba\u305f\u3061\u304b\u3092\u8003\u3048\u308b\u554f\u984c\u3002\n\u4e0e\u3048\u3089\u308c\u308b\u306e\u306ftrain\u30c7\u30fc\u30bf\u3068test\u30c7\u30fc\u30bf\u3067,\u3069\u3061\u3089\u306e\u30c7\u30fc\u30bf\u306b\u3082\u6027\u5225\u3084\u5e74\u9f62\u306a\u3069\u306e\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u3002\u305f\u3060\u3057\uff0ctrain\u30c7\u30fc\u30bf\u306b\u306f\u751f\u5b58\u30c7\u30fc\u30bf\uff080/1\uff09\u304c\u3042\u308b\u304ctest\u30c7\u30fc\u30bf\u306b\u306f\u306a\u3044\u3002\u3064\u307e\u308a\uff0ctrain\u30c7\u30fc\u30bf\u304b\u3089\u751f\u5b58\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066test\u30c7\u30fc\u30bf\u306e\u751f\u5b58\u3092\u4e88\u6e2c\u3059\u308b\u554f\u984c\u3002\uff08\u6b63\u8aa4\u306f\u4e88\u6e2c\u30c7\u30fc\u30bf\u3092web\u30b5\u30a4\u30c8\u3067\u63d0\u51fa\u3057\u3066\u78ba\u8a8d\u3067\u304d\u308b\u3002\uff09\n\n\u30b3\u30fc\u30c9\n# \u4e0b\u3054\u3057\u3089\u3048\ndef df_cleaner(df):\n    # \u8db3\u308a\u306a\u3044\u90e8\u5206\u306f\u88dc\u304a\u3046\n    # \u5e74\u9f62\n    median_age = np.median(df[(df['Age'].notnull())]['Age'])\n    for passenger in df[(df['Age'].isnull())].index: #.index = \u914d\u5217\u5185\u306enull\u306e\u5834\u6240\n        df.loc[passenger, 'Age'] = median_age\n    # fare\n    median_fare = np.median(df[(df['Fare'].notnull())]['Fare'])\n    for passenger in df[(df['Fare'].isnull())].index:\n        df.loc[passenger, 'Fare'] = median_fare\n\n    # \u6587\u5b57\u5217\u30c7\u30fc\u30bf\u3092\u6570\u5024\u30c7\u30fc\u30bf\u3078\n    df.loc[(df['Sex'] == 'male'),'Sex'] = 0\n    df.loc[(df['Sex'] == 'female'),'Sex'] = 1\n    df.loc[(df['Sex'].isnull()),'Sex'] = 2\n    df.loc[(df['Embarked'] == 'S'),'Embarked'] = 0\n    df.loc[(df['Embarked'] == 'C'),'Embarked'] = 1\n    df.loc[(df['Embarked'] == 'Q'),'Embarked'] = 2\n    df.loc[(df['Embarked'].isnull()),'Embarked'] = 3\n\n    return df\n\n# \u63d0\u51fa\u7528csv\u3092\u4f5c\u308a\u307e\u3057\u3087\ndef make_csv(file_path, passengerId, predicts):\n    f = open(file_path, \"wb\")\n    writer = csv.writer(f)\n    writer.writerow([\"PassengerId\", \"Survived\"])\n    for row, survived in zip(passengerId, predicts):\n        writer.writerow([row, survived])\n\n# \u4f5c\u3063\u305f\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3092\u3057\u308c\u3079\u307e\u3057\u3087\ndef getScore(answer, predicts):\n    sum_p = 0.0\n    total = 0.0\n    for (row, predict) in zip(answer,predicts):\n        if row == predict:\n            sum_p += 1.0\n        total += 1.0\n    return sum_p/total\n\ndef main():\n    # Read in the training data.\n    train = pd.read_csv('./data/train.csv')\n    test = pd.read_csv(\"./data/test.csv\")\n    # \u3044\u3089\u306a\u3044\u30c7\u30fc\u30bf(\u4e88\u60f3)\u306f\u6d88\u3057\u307e\u3057\u3087\u3046\n    train.drop(['Name', 'PassengerId', 'Ticket', 'Cabin'], axis=1, inplace=True)\n    test.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)\n\n    # \u4e0b\u3054\u3057\u3089\u3048\u3092\u3059\u308b\n    train = df_cleaner(train)\n    test = df_cleaner(test)\n    x_train = train[:][['Pclass', 'Sex','Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]\n    y_train = train[:][['Survived']]\n    # \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u30e2\u30c7\u30eb\u3092\u4f5c\u308d\u3046\n    scores =[]\n    for trees in range(1,100):\n        model = RandomForestClassifier(n_estimators=trees)\n        model.fit(x_train, np.ravel(y_train))\n        # \u4e00\u81f4\u7387\u3092\u898b\u3088\u3046\n        pre = model.predict(x_train)\n        scores.append(getScore(y_train['Survived'],pre))\n    plt.plot(scores,'-r')\n    plt.show()\n\n    # \u672c\u756a\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u304a\u5316\u7ca7\u76f4\u3057\n    x_test = test[:][['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]\n    label = test[:][['PassengerId']]\n    # model\u3092\u4f7f\u3063\u3066\u4e88\u6e2c\u3057\u3088\u3046\n    output = model.predict(x_test)\n    # \u63d0\u51fa\u7528csv\u3092\u4f5c\u308d\u3046\n    make_csv(\"./output/random_forest.csv\", label['PassengerId'], output.astype(int))\n\nif __name__ == '__main__':\n    main()\n\n\ngithub\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n\u30b9\u30b3\u30a2\n\u4e0a\u306e\u30b3\u30fc\u30c9\uff1a0.75120\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u30b3\u30d4\u30da\uff1a0.76555\n\n\u611f\u60f3\n\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u65b9\u304c\u60aa\u3044\u3002\u3002\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u3057\u3066\u306f\u9593\u9055\u3063\u3066\u3044\u306a\u3044\u3068\u601d\u3046\u306e\u3067\uff0cscikit\u306erandom forest\u306e\u90e8\u5206\u3092\u3082\u3046\u5c11\u3057\u8abf\u3079\u3066\u307f\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3002\n\n\u5225\u4ef6\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8996\u899a\u5316\u3057\u3066\u7406\u89e3\u3059\u308b\u30b5\u30a4\u30c8\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u306e\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u30b5\u30f3\u30d5\u30e9\u30f3\u30b7\u30b9\u30b3\u306e\u554f\u984c\u306f\u95a2\u4fc2\u3042\u308b\u306e\u3067\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\nLibrary of Algorithms\uff1a\u8996\u899a\u7684\u306b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7406\u89e3\u3059\u308b\u30b5\u30a4\u30c8\n#\u3053\u306e\u8a18\u4e8b\n\u30c7\u30fc\u30bf\u5206\u6790\u306e\u52c9\u5f37\u306e\u305f\u3081\u306bkaggle\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u305f\u30e1\u30e2\u3002\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u3042\u308b\u300ctitanic\u300d\u3092\u8a66\u3057\u305f\u304c\uff0cpandas\u3068\u304bscikit\u3068\u304b\uff0c\u308f\u304b\u3089\u306a\u3044\u3053\u3068\u304c\u591a\u3059\u304e\u308b\u3002\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u3044\u3051\u308b\u3068\u601d\u3063\u305f\u3051\u3069\uff0c\u30b9\u30b3\u30a2\u304c\u826f\u304f\u306a\u3044\u3002\n\n#\u554f\u984c\n\uff08\u8aa4\u89e3\u3092\u6050\u308c\u305a\u306b\u3056\u3063\u304f\u308a\u8aac\u660e\u3059\u308b\u3068\uff09\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u306e\u4e57\u7d44\u54e1\u3067\u751f\u304d\u6b8b\u3063\u305f\u4eba\u306f\u3069\u3093\u306a\u4eba\u305f\u3061\u304b\u3092\u8003\u3048\u308b\u554f\u984c\u3002\n\u4e0e\u3048\u3089\u308c\u308b\u306e\u306ftrain\u30c7\u30fc\u30bf\u3068test\u30c7\u30fc\u30bf\u3067,\u3069\u3061\u3089\u306e\u30c7\u30fc\u30bf\u306b\u3082\u6027\u5225\u3084\u5e74\u9f62\u306a\u3069\u306e\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u3002\u305f\u3060\u3057\uff0ctrain\u30c7\u30fc\u30bf\u306b\u306f\u751f\u5b58\u30c7\u30fc\u30bf\uff080/1\uff09\u304c\u3042\u308b\u304ctest\u30c7\u30fc\u30bf\u306b\u306f\u306a\u3044\u3002***\u3064\u307e\u308a\uff0ctrain\u30c7\u30fc\u30bf\u304b\u3089\u751f\u5b58\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066test\u30c7\u30fc\u30bf\u306e\u751f\u5b58\u3092\u4e88\u6e2c\u3059\u308b\u554f\u984c\u3002***\uff08\u6b63\u8aa4\u306f\u4e88\u6e2c\u30c7\u30fc\u30bf\u3092web\u30b5\u30a4\u30c8\u3067\u63d0\u51fa\u3057\u3066\u78ba\u8a8d\u3067\u304d\u308b\u3002\uff09\n\n#\u30b3\u30fc\u30c9\n\n```py\n# \u4e0b\u3054\u3057\u3089\u3048\ndef df_cleaner(df):\n    # \u8db3\u308a\u306a\u3044\u90e8\u5206\u306f\u88dc\u304a\u3046\n    # \u5e74\u9f62\n    median_age = np.median(df[(df['Age'].notnull())]['Age'])\n    for passenger in df[(df['Age'].isnull())].index: #.index = \u914d\u5217\u5185\u306enull\u306e\u5834\u6240\n    \tdf.loc[passenger, 'Age'] = median_age\n    # fare\n    median_fare = np.median(df[(df['Fare'].notnull())]['Fare'])\n    for passenger in df[(df['Fare'].isnull())].index:\n        df.loc[passenger, 'Fare'] = median_fare\n\n    # \u6587\u5b57\u5217\u30c7\u30fc\u30bf\u3092\u6570\u5024\u30c7\u30fc\u30bf\u3078\n    df.loc[(df['Sex'] == 'male'),'Sex'] = 0\n    df.loc[(df['Sex'] == 'female'),'Sex'] = 1\n    df.loc[(df['Sex'].isnull()),'Sex'] = 2\n    df.loc[(df['Embarked'] == 'S'),'Embarked'] = 0\n    df.loc[(df['Embarked'] == 'C'),'Embarked'] = 1\n    df.loc[(df['Embarked'] == 'Q'),'Embarked'] = 2\n    df.loc[(df['Embarked'].isnull()),'Embarked'] = 3\n\n    return df\n\n# \u63d0\u51fa\u7528csv\u3092\u4f5c\u308a\u307e\u3057\u3087\ndef make_csv(file_path, passengerId, predicts):\n    f = open(file_path, \"wb\")\n    writer = csv.writer(f)\n    writer.writerow([\"PassengerId\", \"Survived\"])\n    for row, survived in zip(passengerId, predicts):\n        writer.writerow([row, survived])\n\n# \u4f5c\u3063\u305f\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3092\u3057\u308c\u3079\u307e\u3057\u3087\ndef getScore(answer, predicts):\n    sum_p = 0.0\n    total = 0.0\n    for (row, predict) in zip(answer,predicts):\n        if row == predict:\n            sum_p += 1.0\n        total += 1.0\n    return sum_p/total\n\ndef main():\n    # Read in the training data.\n    train = pd.read_csv('./data/train.csv')\n    test = pd.read_csv(\"./data/test.csv\")\n    # \u3044\u3089\u306a\u3044\u30c7\u30fc\u30bf(\u4e88\u60f3)\u306f\u6d88\u3057\u307e\u3057\u3087\u3046\n    train.drop(['Name', 'PassengerId', 'Ticket', 'Cabin'], axis=1, inplace=True)\n    test.drop(['Name', 'Ticket', 'Cabin'], axis=1, inplace=True)\n\n    # \u4e0b\u3054\u3057\u3089\u3048\u3092\u3059\u308b\n    train = df_cleaner(train)\n    test = df_cleaner(test)\n    x_train = train[:][['Pclass', 'Sex','Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]\n    y_train = train[:][['Survived']]\n    # \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u30e2\u30c7\u30eb\u3092\u4f5c\u308d\u3046\n    scores =[]\n    for trees in range(1,100):\n        model = RandomForestClassifier(n_estimators=trees)\n        model.fit(x_train, np.ravel(y_train))\n        # \u4e00\u81f4\u7387\u3092\u898b\u3088\u3046\n        pre = model.predict(x_train)\n        scores.append(getScore(y_train['Survived'],pre))\n    plt.plot(scores,'-r')\n    plt.show()\n    \n    # \u672c\u756a\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u304a\u5316\u7ca7\u76f4\u3057\n    x_test = test[:][['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]\n    label = test[:][['PassengerId']]\n    # model\u3092\u4f7f\u3063\u3066\u4e88\u6e2c\u3057\u3088\u3046\n    output = model.predict(x_test)\n    # \u63d0\u51fa\u7528csv\u3092\u4f5c\u308d\u3046\n    make_csv(\"./output/random_forest.csv\", label['PassengerId'], output.astype(int))\n\nif __name__ == '__main__':\n    main()\n```\n\n#github\n[\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9](https://github.com/Tsunehiko511/kaggle/tree/master/titanic)\n\n# \u30b9\u30b3\u30a2\n\u4e0a\u306e\u30b3\u30fc\u30c9\uff1a0.75120\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u30b3\u30d4\u30da\uff1a0.76555\n\n##\u611f\u60f3\n\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u65b9\u304c\u60aa\u3044\u3002\u3002\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u3057\u3066\u306f\u9593\u9055\u3063\u3066\u3044\u306a\u3044\u3068\u601d\u3046\u306e\u3067\uff0cscikit\u306erandom forest\u306e\u90e8\u5206\u3092\u3082\u3046\u5c11\u3057\u8abf\u3079\u3066\u307f\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3002\n\n#\u5225\u4ef6\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8996\u899a\u5316\u3057\u3066\u7406\u89e3\u3059\u308b\u30b5\u30a4\u30c8\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u306e\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u30b5\u30f3\u30d5\u30e9\u30f3\u30b7\u30b9\u30b3\u306e\u554f\u984c\u306f\u95a2\u4fc2\u3042\u308b\u306e\u3067\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n[Library of Algorithms\uff1a\u8996\u899a\u7684\u306b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7406\u89e3\u3059\u308b\u30b5\u30a4\u30c8](https://library-of-algorithm.herokuapp.com)\n", "tags": ["Kaggle", "Python", "randomForest"]}