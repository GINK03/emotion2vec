{"context": "\n\ndecision tree \u306e hyper parameter\n\ngrid_search_scores.py\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.cross_validation import KFold\nfrom sklearn.grid_search import GridSearchCV\n\n\nclf = DecisionTreeClassifier(criterion='entropy', max_depth=2, min_samples_leaf=2)\n\nparam_grid = {'max_depth': [2, 3, 4, 5], 'min_samples_leaf': [2, 3, 4, 5]}\ncv = KFold(len(y), 5, shuffle=True, random_state=0)\n\ngrid_search = GridSearchCV(clf, param_grid, cv=cv, n_jobs=-1, verbose=1)\ngrid_search.fit(X, y)\n\ngrid_search.best_score_, grid_search.best_params_\ngrid_search.grid_scores_\n\n[mean: 0.76880, std: 0.02381, params: {'max_depth': 2, 'min_samples_leaf': 2},\n mean: 0.76880, std: 0.02381, params: {'max_depth': 2, 'min_samples_leaf': 3},\n mean: 0.76880, std: 0.02381, params: {'max_depth': 2, 'min_samples_leaf': 4},\n mean: 0.76880, std: 0.02381, params: {'max_depth': 2, 'min_samples_leaf': 5},\n mean: 0.80471, std: 0.01474, params: {'max_depth': 3, 'min_samples_leaf': 2},\n...\n]\n\n\n\npandas.Series.apply\u3067DataFrame\u3092\u8fd4\u3059\ndict\u306elist\u3092\u898b\u305f\u3089\u3001DataFrame\u3067\u5305\u3093\u3067\u898b\u3084\u3059\u304f\u3057\u305f\u304f\u306a\u308b\u306e\u3067\u3084\u3063\u3066\u307f\u305f\n\n\u554f\u984c\u70b9\nflat\u3058\u3083\u306a\u3044\u306e\u3067\u3001params\u306ecolumn\u306bdict\u304c\u5165\u3063\u3066\u3044\u3066\u898b\u3065\u3089\u3044\n\n\u89e3\u6c7a\u307e\u3067\u306e\u6d41\u308c\n\nSeries.apply \u306e document\u306b\u7279\u306b\u8a18\u8f09\u304c\u306a\u304b\u3063\u305f\nSeries\u304b\u3089DataFrame\u3068\u3044\u3048\u3070\u3001 pandas.Series.str.split(\"sep\", expand=True) . \u63a2\u3057\u3066\u307f\u308b\u3082\u81ea\u5206\u306epandas core\u529b\u304c\u4f4e\u304f\u3066\u65ad\u5ff5\npandas committer \u306eblog\u306bapply\u6642\u306bSeries\u3067\u8fd4\u3059\u3068\u3088\u3044\u3068\u66f8\u3044\u3066\u3042\u3063\u305f\napply\u306ecode\u3092\u898b\u3066\u307f\u308b\u3068Series\u306e\u5834\u5408\u306bDataFrame\u3067\u5305\u3093\u3067\u8fd4\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u304c\u3042\u3063\u305f\n\n\na.py\ngs_df = pd.DataFrame(grid_search.grid_scores_)\n#pd.DataFrame(gs_df.parameters)\nparams_df = gs_df.parameters.apply(\n    lambda p: pd.Series(list(p.values()), p.keys()))\n# list\u306b\u3057\u306a\u3044\u3068tuple\u3067\u8fd4\u3063\u3066\u304f\u308b\npd.concat([\n    gs_df.drop([\"parameters\", \"cv_validation_scores\"], axis=1),\n    params_df\n], axis=1).head()\n\n    mean_validation_score   max_depth   min_samples_leaf\n0   0.768799    2   2\n1   0.768799    2   3\n\n\n\n\u53c2\u8003\n\nhttps://github.com/pydata/pandas/blob/e1aa2d94b416ee31da705b186facc707710671e6/pandas/core/strings.py#L1365\nhttps://github.com/pydata/pandas/blob/5e11243a11cf09007f774b3605e32ee8aa3f9592/pandas/core/series.py#L2197\nhttp://sinhrks.hatenablog.com/entry/2015/06/18/221747\n\n\n## decision tree \u306e hyper parameter\n```py3:grid_search_scores.py\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.cross_validation import KFold\nfrom sklearn.grid_search import GridSearchCV\n\n\nclf = DecisionTreeClassifier(criterion='entropy', max_depth=2, min_samples_leaf=2)\n\nparam_grid = {'max_depth': [2, 3, 4, 5], 'min_samples_leaf': [2, 3, 4, 5]}\ncv = KFold(len(y), 5, shuffle=True, random_state=0)\n\ngrid_search = GridSearchCV(clf, param_grid, cv=cv, n_jobs=-1, verbose=1)\ngrid_search.fit(X, y)\n\ngrid_search.best_score_, grid_search.best_params_\ngrid_search.grid_scores_\n\n[mean: 0.76880, std: 0.02381, params: {'max_depth': 2, 'min_samples_leaf': 2},\n mean: 0.76880, std: 0.02381, params: {'max_depth': 2, 'min_samples_leaf': 3},\n mean: 0.76880, std: 0.02381, params: {'max_depth': 2, 'min_samples_leaf': 4},\n mean: 0.76880, std: 0.02381, params: {'max_depth': 2, 'min_samples_leaf': 5},\n mean: 0.80471, std: 0.01474, params: {'max_depth': 3, 'min_samples_leaf': 2},\n...\n]\n```\n\n## pandas.Series.apply\u3067DataFrame\u3092\u8fd4\u3059\ndict\u306elist\u3092\u898b\u305f\u3089\u3001DataFrame\u3067\u5305\u3093\u3067\u898b\u3084\u3059\u304f\u3057\u305f\u304f\u306a\u308b\u306e\u3067\u3084\u3063\u3066\u307f\u305f\n\n### \u554f\u984c\u70b9\nflat\u3058\u3083\u306a\u3044\u306e\u3067\u3001params\u306ecolumn\u306bdict\u304c\u5165\u3063\u3066\u3044\u3066\u898b\u3065\u3089\u3044\n\n### \u89e3\u6c7a\u307e\u3067\u306e\u6d41\u308c\n- Series.apply \u306e document\u306b\u7279\u306b\u8a18\u8f09\u304c\u306a\u304b\u3063\u305f\n- Series\u304b\u3089DataFrame\u3068\u3044\u3048\u3070\u3001 `pandas.Series.str.split(\"sep\", expand=True)` . \u63a2\u3057\u3066\u307f\u308b\u3082\u81ea\u5206\u306epandas core\u529b\u304c\u4f4e\u304f\u3066\u65ad\u5ff5\n- pandas committer \u306eblog\u306bapply\u6642\u306bSeries\u3067\u8fd4\u3059\u3068\u3088\u3044\u3068\u66f8\u3044\u3066\u3042\u3063\u305f\n- apply\u306ecode\u3092\u898b\u3066\u307f\u308b\u3068Series\u306e\u5834\u5408\u306bDataFrame\u3067\u5305\u3093\u3067\u8fd4\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u304c\u3042\u3063\u305f\n\n```py3:a.py\ngs_df = pd.DataFrame(grid_search.grid_scores_)\n#pd.DataFrame(gs_df.parameters)\nparams_df = gs_df.parameters.apply(\n    lambda p: pd.Series(list(p.values()), p.keys()))\n# list\u306b\u3057\u306a\u3044\u3068tuple\u3067\u8fd4\u3063\u3066\u304f\u308b\npd.concat([\n    gs_df.drop([\"parameters\", \"cv_validation_scores\"], axis=1),\n    params_df\n], axis=1).head()\n\n\tmean_validation_score\tmax_depth\tmin_samples_leaf\n0\t0.768799\t2\t2\n1\t0.768799\t2\t3\n```\n\n### \u53c2\u8003\n- https://github.com/pydata/pandas/blob/e1aa2d94b416ee31da705b186facc707710671e6/pandas/core/strings.py#L1365\n- https://github.com/pydata/pandas/blob/5e11243a11cf09007f774b3605e32ee8aa3f9592/pandas/core/series.py#L2197\n- http://sinhrks.hatenablog.com/entry/2015/06/18/221747\n", "tags": ["memo"]}