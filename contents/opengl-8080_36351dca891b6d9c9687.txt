{"context": "Kotolin \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u306e\u30e1\u30e2\u3002\n\nKotlin \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\nKotlin \u306b\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u3001\u305d\u306e\u4e2d\u306b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3082\u5b58\u5728\u3059\u308b\u3002\n\n\u7279\u5fb4\n\nKotlin \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306f\u3001\u300c\u8aad\u307f\u53d6\u308a\u5c02\u7528\u300d\u3068\u300c\u66f8\u304d\u8fbc\u307f\u53ef\u300d\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u660e\u78ba\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u3002\n\nlistOf(), mapOf() \u306a\u3069\u3001\u95a2\u6570\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3002\nStream API \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306a filter() \u306a\u3069\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u3001 Iterable \u306a\u3069\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u7a2e\u985e\n\nList\nMap\nSet\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u95a2\u4fc2\n\nkotlin.collections \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u4e0b\u306b\u3042\u308b\u5404\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u3069\u306e\u3088\u3046\u306a\u95a2\u4fc2\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u3001\u30af\u30e9\u30b9\u56f3\u3067\u8868\u73fe\u3057\u305f\u3002\n\u57fa\u672c\u306f JDK \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u540c\u3058\u69cb\u6210\u3060\u304c\u3001 MutableIterable \u306a\u3069\u66f8\u304d\u8fbc\u307f\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u533a\u5225\u3059\u308b\u305f\u3081\u306b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u3002\nList \u306a\u3069\u306e Mutable \u304c\u4ed8\u3044\u3066\u3044\u306a\u3044\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u306f\u3001\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u72b6\u614b\u3092\u5909\u66f4\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3002\n\u3053\u308c\u3089\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u3042\u304f\u307e\u3067\u8aad\u307f\u53d6\u308a\u5c02\u7528\u3067\u3057\u304b\u306a\u3044\u3002\n\n\u8aad\u307f\u53d6\u308a\u5c02\u7528\u3068\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306e\u9055\u3044\nTwitter \u3067\u6307\u6458\u3092\u53d7\u3051\u305f\u306e\u3067\u4fee\u6b63\u3057\u307e\u3059\uff08\u5b8c\u5168\u306b\u52d8\u9055\u3044\u3057\u3066\u307e\u3057\u305f\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff09\u3002\nKotlin \u306e List \u3084 Set \u306f\u3042\u304f\u307e\u3067\u300c\u8aad\u307f\u53d6\u308a\u5c02\u7528\u300d\u3067\u3042\u308a\u3001\u300c\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u300d\u3067\u306f\u306a\u3044\u3002\n\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u3001\u7c21\u5358\u306b List \u306e\u4e2d\u8eab\u3092\u5909\u66f4\u3067\u304d\u3066\u3057\u307e\u3046\u3002\nfun main(args: Array<String>) {\n    val mutableList = mutableListOf(1, 2, 3)\n    val list: List<Int> = mutableList\n\n    mutableList.add(9)\n\n    println(mutableList)\n    println(list)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 9]\n[1, 2, 3, 9]\n\n\nMutableList \u306f List \u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u306e\u3067\u3001 MutableList \u3092 List \u306e\u5909\u6570\u306b\u4ee3\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u7d50\u679c\u3001 List \u306e\u4e2d\u8eab\u306f\u3069\u3053\u304b\u5225\u306e\u5834\u6240\u3067\u66f8\u304d\u63db\u3048\u3089\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\u3042\u304f\u307e\u3067\u300c\u8aad\u307f\u53d6\u308a\u5c02\u7528\u300d\u3067\u3042\u3063\u3066\u3001\u300c\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u300d\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u306e\u306f\u3001\u3053\u3046\u3044\u3046\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u308b\u3002\n\nJava \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3068 Kotlin \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u30de\u30c3\u30d4\u30f3\u30b0\nJava \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\uff08java.util.List \u306a\u3069\uff09\u3092 Kotlin \u304b\u3089\u4f7f\u3046\u5834\u5408\u3001\u3044\u304f\u3064\u304b\u306e\u578b\u306f\u81ea\u52d5\u7684\u306b Kotlin \u306e\u578b\u306b\u5909\u63db\u3055\u308c\u308b\u3002\n\u4f8b\u3048\u3070\u3001 java.util.Iterator \u578b\u306f Kotlin \u5074\u306e\u30b3\u30fc\u30c9\u3067\u4f7f\u7528\u3059\u308b\u969b\u306f kotlin.collection.Iterator \u306b\u5909\u63db\u3055\u308c\u308b\u3002\n\u3053\u306e\u305f\u3081\u3001 Java \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3082\u3001 Kotlin \u306b\u7528\u610f\u3055\u308c\u305f\u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9\uff08all(), filter() \u306a\u3069\uff09\u3092\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\nJava \u306e\u3069\u306e\u578b\u304c\u3001 Kotlin \u306e\u3069\u306e\u578b\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u308b\u304b\u306f\u3001\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u306b\u66f8\u3044\u3066\u3042\u308b\u3002\nMapped types | Calling Java code from Kotlin\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u751f\u6210\nKotlin \u3067\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u3001\u5c02\u7528\u306e\u30d5\u30a1\u30af\u30c8\u30ea\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3002\n\n\u8aad\u307f\u53d6\u308a\u5c02\u7528\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3059\u308b\nval list = listOf(1, 2, 3)\nval map = mapOf(\"foo\" to \"FOO\", \"bar\" to \"BAR\")\nval set = setOf(9, 8, 7)\n\n\n\nlistOf(), mapOf(), setOf() \u95a2\u6570\u3067\u3001\u305d\u308c\u305e\u308c\u8aad\u307f\u53d6\u308a\u5c02\u7528\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3067\u304d\u308b\u3002\n\n\nnull \u3092\u9664\u3044\u305f List \u3092\u751f\u6210\u3059\u308b\nfun main(args: Array<String>) {\n    val list = listOf(null, 1, 2, 3, null)\n    val notNullList = listOfNotNull(null, 1, 2, 3, null)\n\n    println(list)\n    println(notNullList)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[null, 1, 2, 3, null]\n[1, 2, 3]\n\n\n\n\nlistOfNotNull() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3001 null \u3092\u53d6\u308a\u9664\u3044\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u751f\u6210\u3055\u308c\u308b\u3002\n\n\n\u66f8\u304d\u8fbc\u307f\u53ef\u80fd\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3059\u308b\nval list = mutableListOf(1, 2, 3)\nval map = mutableMapOf(\"foo\" to \"FOO\", \"bar\" to \"BAR\")\nval set = mutableSetOf(9, 8, 7)\n\n\n\nmutableListOf(), mutableMapOf(), mutableSetOf() \u95a2\u6570\u3067\u3001\u305d\u308c\u305e\u308c\u66f8\u304d\u8fbc\u307f\u53ef\u80fd\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3067\u304d\u308b\u3002\n\n\nJava \u6a19\u6e96\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3059\u308b\nfun main(args: Array<String>) {\n    printClass(\"arrayListOf\", arrayListOf<Int>())\n\n    printClass(\"hashSetOf\", hashSetOf<Int>())\n    printClass(\"linkedSetOf\", linkedSetOf<Int>())\n    printClass(\"sortedSetOf\", sortedSetOf<Int>())\n\n    printClass(\"hashMapOf\", hashMapOf<Int, Int>())\n    printClass(\"linkedMapOf\", linkedMapOf<Int, Int>())\n    printClass(\"sortedMapOf\", sortedMapOf<Int, Int>())\n}\n\nfun printClass(functionName: String, collection: Any) {\n    println(\"$functionName = ${collection.javaClass}\")\n}\n\n\n\u5b9f\u884c\u7d50\u679c\narrayListOf = class java.util.ArrayList\n\nhashSetOf = class java.util.HashSet\nlinkedSetOf = class java.util.LinkedHashSet\nsortedSetOf = class java.util.TreeSet\n\nhashMapOf = class java.util.HashMap\nlinkedMapOf = class java.util.LinkedHashMap\nsortedMapOf = class java.util.TreeMap\n\n\n\n\narrayListOf() \u306a\u3069\u3001 Java \u6a19\u6e96\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3067\u304d\u308b\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\n\nindices\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 3)\n\n    val indices: IntRange = list.indices\n    println(indices)\n\n    for (i in list.indices) {\n        println(list[i])\n    }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n0..2\n1\n2\n3\n\n\n\n\nArray \u307e\u305f\u306f Collection \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u3002\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7bc4\u56f2\u3092\u8868\u3059 IntRange \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002\n\nindices \u306f index \u306e\u8907\u6570\u5f62\u3002\n\n\nlastIndex\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 3)\n\n    println(list.lastIndex)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n2\n\n\n\n\nArray \u307e\u305f\u306f List \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u3002\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u6700\u5f8c\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n\n\n\u7279\u5b9a\u306e\u30eb\u30fc\u30eb\u3067\u547d\u540d\u3055\u308c\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u306b\u306f\u3001\u3042\u308b\u7279\u5b9a\u306e\u30eb\u30fc\u30eb\u3067\u540d\u524d\u304c\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u5b58\u5728\u3059\u308b\u3002\n\nTo\uff1a\u51e6\u7406\u7d50\u679c\u3092\u66f8\u304d\u8fbc\u307f\u53ef\u80fd\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u8ffd\u52a0\u3059\u308b\u30e1\u30bd\u30c3\u30c9\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    val result = mutableListOf(\"<9>\")\n    iterable.mapTo(result) { \"<$it>\" }\n\n    println(result)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[<9>, <1>, <2>, <3>, <4>, <5>]\n\n\n\n\u672b\u5c3e\u306b To \u304c\u3064\u3044\u305f\u30e1\u30bd\u30c3\u30c9\u306b\u306f\u3001\u66f8\u304d\u8fbc\u307f\u53ef\u80fd\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u51e6\u7406\u7d50\u679c\u306f\u3001\u5f15\u6570\u3067\u6e21\u3057\u305f\u66f8\u304d\u8fbc\u307f\u53ef\u80fd\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u8ffd\u52a0\u3055\u308c\u308b\u3002\n\n\nIndexed\uff1a\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u306b\u30eb\u30fc\u30d7\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3082\u6e21\u3059\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    iterable.forEachIndexed { index, value -> println(\"[$index] = $value\") }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[0] = 1\n[1] = 2\n[2] = 3\n[3] = 4\n[4] = 5\n\n\n\n\u30e1\u30bd\u30c3\u30c9\u540d\u306b Indexed \u304c\u542b\u307e\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u306b\u30eb\u30fc\u30d7\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u6e21\u3055\u308c\u308b\u3002\n\n\n\u30e1\u30bd\u30c3\u30c9\u9006\u5f15\u304d\nStream API \u306e\u3042\u308c\u3001 Kotlin \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3060\u3068\u3069\u308c\uff1f\n\n\n\nJava\nKotlin Collections\n\n\n\n\nStream.allMatch()\n\nIterable.all(), Map.all()\n\n\n\nStream.anyMatch()\n\nIterable.any(), Map.any()\n\n\n\nStream.count()\n\nIterable.count(), Map.count()\n\n\n\nStream.distinct()\nIterable.distinct()\n\n\nStream.filter()\n\nIterable.filter(), Map.filter()\n\n\n\nStream.findFirst()\n\nIterable.first(), Iterable.firstOrNull()\n\n\n\nStream.flatMap()\n\nIterable.flatMap(), Map.flatMap()\n\n\n\nStream.forEach()\n\nIterable.forEach(), Map.forEach()\n\n\n\nStream.limit()\nIterable.take()\n\n\nStream.map()\n\nIterable.map(), Map.map()\n\n\n\nStream.max()\n\nIterable.max(), Map.maxBy()\n\n\n\nStream.min()\n\nIterable.min(), Map.minBy()\n\n\n\nStream.noneMatch()\n\nIterable.none(), Map.none()\n\n\n\nStream.peek()\n\u306a\u3057\uff1f\n\n\nStream.reduce()\nIterable.reduce()\n\n\nStream.sorted()\nIterable.sorted()\n\n\nStream.skip()\n\u306a\u3057\uff1f\n\n\nStream.collect(toList())\n\nIterable.toList(), Map.toList()\n\n\n\nStream.collect(toMap())\nIterable.toMap()\n\n\nStream.collect(toSet())\nIterable.toSet()\n\n\nStream.collect(joining())\nIterable.joinToString()\n\n\nStream.collect(partitioningBy())\nIterable.partition()\n\n\nStream.collect(groupingBy())\nIterable.groupBy()\n\n\nStream.collect(reducing())\nIterable.fold()\n\n\nIntStream.sum()\nIterable.sum()\n\n\nIntStream.average()\nIterable.average()\n\n\n\n\nIterable \u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\n\nIterable \u306e\u30e1\u30bd\u30c3\u30c9\n\nall()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.all { it < 4 })\n    println(iterable.all { it < 3 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n\n\n\n\u5168\u3066\u306e\u8981\u7d20\u304c\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u5834\u5408\u306b true \u3092\u8fd4\u3059\u3002\n\n\nany()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.any { it < 4 })\n    println(iterable.any { it < 0 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n\n\n\n\u3044\u305a\u308c\u304b\u306e\u8981\u7d20\u304c\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u5834\u5408\u306b true \u3092\u8fd4\u3059\u3002\n\n\nassociate()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    val map = iterable.associate { it to it*10 }\n\n    println(map)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n{1=10, 2=20, 3=30}\n\n\n\n\u5404\u8981\u7d20\u3054\u3068\u306b Pair \u3092\u8fd4\u3059\u3053\u3068\u3067\u3001 Map \u306b\u5909\u63db\u3057\u305f\u7d50\u679c\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n\n\nassociateBy()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    val map = iterable.associateBy { it*10 }\n\n    println(map)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n{10=1, 20=2, 30=3}\n\n\n\n\u5404\u8981\u7d20\u306b\u5bfe\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u304c\u5b9f\u884c\u3055\u308c\u3001\u30ad\u30fc:\u30d0\u30ea\u30e5\u30fc \u304c \u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024:\u5404\u8981\u7d20\u306e\u3082\u3068\u306e\u5024 \u3068\u306a\u308b Map \u304c\u8fd4\u3055\u308c\u308b\u3002\n\n\naverage()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    val average = iterable.average()\n\n    println(average)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n2.0\n\n\n\n\nIterable \u306e\u5404\u8981\u7d20\u306e\u5e73\u5747\u5024\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001 Iterable \u306e\u578b\u5f15\u6570\u304c Int \u3084 Float \u306a\u3069\u6570\u5024\u8a08\u7b97\u304c\u53ef\u80fd\u306a\u578b\u306e\u5834\u5408\u306b\u306e\u307f\u4f7f\u7528\u3067\u304d\u308b\u3002\n\nIterable<String> \u3067\u4f7f\u7528\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n\n\ncontains()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.contains(2))\n    println(iterable.contains(4))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n\n\n\n\u6307\u5b9a\u3057\u305f\u8981\u7d20\u304c Iterable \u5185\u306b\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002\n\n\ncount()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.count())\n    println(iterable.count {it % 2 == 1})\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n3\n2\n\n\n\n\u8981\u7d20\u6570\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n\nboolean \u3092\u8fd4\u3059\u30e9\u30e0\u30c0\u5f0f\u3092\u5f15\u6570\u306b\u6e21\u3059\u3053\u3068\u3067\u3001\u6761\u4ef6\u306b\u4e00\u81f4\u3057\u305f\u8981\u7d20\u306e\u6570\u3060\u3051\u3092\u30ab\u30a6\u30f3\u30c8\u3067\u304d\u308b\u3002\n\n\ndistinct()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 1, 2, 2, 3, 1, 3)\n\n    println(iterable.distinct())\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n\n\n\n\u91cd\u8907\u3059\u308b\u8981\u7d20\u3092\u524a\u9664\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3059\u3002\n\n\ndistinctBy()\nfun main(args: Array<String>) {\n    val iterable = listOf(\"foo\", \"bar\", \"fizz\", \"buzz\", \"hoge\")\n\n    println(iterable.distinctBy { it.length })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[foo, fizz]\n\n\n\n\u91cd\u8907\u3092\u5224\u65ad\u3059\u305f\u3081\u306e\u6761\u4ef6\u3092\u3001\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3059\u308b\u3002\n\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u304c\u7b49\u3057\u3044\u8981\u7d20\u306f\u91cd\u8907\u3068\u5224\u65ad\u3055\u308c\u308b\u3002\n\n\ndrop()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.drop(2))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[3, 4, 5]\n\n\n\n\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u6570\u3060\u3051\u5148\u982d\u304b\u3089\u8981\u7d20\u3092\u524a\u9664\u3057\u3066\u3001\u6b8b\u3063\u305f\u8981\u7d20\u3092\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u8fd4\u3059\u3002\n\n\ndropWhile()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.dropWhile { it != 4 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[4, 5]\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u304c true \u3092\u8fd4\u3059\u307e\u3067\u306e\u8981\u7d20\u3092\u524a\u9664\u3057\u3066\u3001\u6b8b\u3063\u305f\u8981\u7d20\u3092\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u8fd4\u3059\u3002\n\n\nelementAt()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.elementAt(2))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n3\n\n\n\n\u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u7bc4\u56f2\u5916\u3060\u3063\u305f\u5834\u5408\u306f IndexOutOfBoundsException \u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3002\n\n\nelementAtOrElse()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.elementAtOrElse(0, { it * 10 }))\n    println(iterable.elementAtOrElse(5, { it * 10 }))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n1\n50\n\n\n\n\u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u7bc4\u56f2\u5916\u3060\u3063\u305f\u5834\u5408\u306b\u8fd4\u3059\u5024\u3092\u3001\u7b2c\u4e8c\u5f15\u6570\u306e\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3059\u308b\u3002\n\n\nelementAtOrNull()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.elementAtOrNull(0))\n    println(iterable.elementAtOrNull(5))\n}\n\n\n\u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u7bc4\u56f2\u5916\u3060\u3063\u305f\u5834\u5408\u306b null \u3092\u8fd4\u3059\u3002\n\n\nfilter()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.filter { it % 2 != 0 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 3]\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u3060\u3051\u3092\u62bd\u51fa\u3057\u3066\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u8fd4\u3059\u3002\n\n\nfilterIsInstance()\nfun main(args: Array<String>) {\n    val iterable: Iterable<*> = listOf(1, \"foo\", 2.4, false)\n\n    println(iterable.filterIsInstance<Number>())\n    println(iterable.filterIsInstance(String::class.java))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2.4]\n\n\n\n\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u6307\u5b9a\u3057\u305f\u578b\u3068\u4e92\u63db\u306e\u3042\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3060\u3051\u3092\u62bd\u51fa\u3057\u3066\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u8fd4\u3059\u3002\n\u5f15\u6570\u306b Class \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3059\u3053\u3068\u3067\u578b\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\nfilterNot()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.filterNot { it % 2 == 0 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 3, 5]\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3057\u306a\u3044\u8981\u7d20\u3060\u3051\u3092\u62bd\u51fa\u3057\u3066\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u8fd4\u3059\u3002\n\n\nfilterNotNull()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, null, 3, null, 5)\n\n    println(iterable.filterNotNull())\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 3, 5]\n\n\n\n\nnull \u8981\u7d20\u3092\u53d6\u308a\u9664\u3044\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u8fd4\u3059\u3002\n\n\nfind()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.find { it % 2 == 0 })\n    println(iterable.find { it % 6 == 0 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n2\nnull\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3057\u305f\u6700\u521d\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f null \u3092\u8fd4\u3059\u3002\n\n\nfindLast()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.findLast { it % 2 == 0 })\n    println(iterable.findLast { it % 6 == 0 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n4\nnull\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3057\u305f\u6700\u5f8c\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f null \u3092\u8fd4\u3059\u3002\n\n\nfirst()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.first())\n    println(iterable.first { it % 2 == 0 })\n    println(iterable.first { it % 6 == 0 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n1\n2\nException in thread \"main\" java.util.NoSuchElementException: No element matching predicate was found.\n\n\n\n\u5148\u982d\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u30e9\u30e0\u30c0\u5f0f\u3067\u6761\u4ef6\u3092\u7d5e\u308a\u8fbc\u3081\u308b\u3002\n\u8a72\u5f53\u3059\u308b\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u4f8b\u5916\u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3002\n\n\nfirstOrNull()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.firstOrNull())\n    println(iterable.firstOrNull { it % 2 == 0 })\n    println(iterable.firstOrNull { it % 6 == 0 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n1\n2\nnull\n\n\n\n\u5148\u982d\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u30e9\u30e0\u30c0\u5f0f\u3067\u6761\u4ef6\u3092\u7d5e\u308a\u8fbc\u3081\u308b\u3002\n\u8a72\u5f53\u3059\u308b\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f null \u304c\u8fd4\u3055\u308c\u308b\u3002\n\n\nlast()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.last())\n    println(iterable.last { it % 2 == 0 })\n    println(iterable.last { it % 6 == 0 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n5\n4\nException in thread \"main\" java.util.NoSuchElementException: Collection doesn't contain any element matching the predicate.\n\n\n\n\u6700\u5f8c\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u5f15\u6570\u306e\u30e9\u30e0\u30c0\u5f0f\u3067\u3001\u53d6\u5f97\u3059\u308b\u6761\u4ef6\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n\u5bfe\u5fdc\u3059\u308b\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u4f8b\u5916\u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3002\n\n\nlastOrNull()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.lastOrNull())\n    println(iterable.lastOrNull { it % 2 == 0 })\n    println(iterable.lastOrNull { it % 6 == 0 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n5\n4\nnull\n\n\n\n\u6700\u5f8c\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u5f15\u6570\u306e\u30e9\u30e0\u30c0\u5f0f\u3067\u3001\u53d6\u5f97\u3059\u308b\u6761\u4ef6\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n\u5bfe\u5fdc\u3059\u308b\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u3001 null \u304c\u8fd4\u3055\u308c\u308b\u3002\n\n\nflatMap()\nfun main(args: Array<String>) {\n    val iterable: Iterable<Iterable<Int>> = listOf(\n        listOf(1, 2, 3),\n        listOf(4, 5, 6),\n        listOf(7, 8, 9)\n    )\n\n    println(iterable.flatMap { it })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f Iterable \u3092\u9023\u7d50\u3057\u3066\u8fd4\u3059\u3002\n\n\nflatten()\nfun main(args: Array<String>) {\n    val iterable: Iterable<Iterable<Int>> = listOf(\n        listOf(1, 2, 3),\n        listOf(4, 5, 6),\n        listOf(7, 8, 9)\n    )\n\n    println(iterable.flatten())\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\u5165\u308c\u5b50\u306e Iterable \u3092\u3001\u5358\u4e00\u306e Iterable \u306b\u8a70\u3081\u66ff\u3048\u76f4\u3059\uff08\u30d5\u30e9\u30c3\u30c8\u306b\u3059\u308b\uff09\u3002\n\n\nfold()\nfun main(args: Array<String>) {\n    val iterable = listOf(\"a\", \"b\", \"c\")\n\n    println(iterable.fold(\"Z\", { buf, value -> buf + value }))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nZabc\n\n\n\n\u7b2c\u4e00\u5f15\u6570\u3067\u521d\u671f\u5024\u3092\u6307\u5b9a\u3059\u308b\u3002\n\u30e9\u30e0\u30c0\u5f0f\u304c\u5404\u8981\u7d20\u3054\u3068\u306b\u30b3\u30fc\u30eb\u3055\u308c\u308b\u3002\n\n\n\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u3001\u521d\u671f\u5024\u3067\u6307\u5b9a\u3057\u305f\u5024\u304c\u6700\u521d\u306b\u6e21\u3055\u308c\u3001\u4ee5\u5f8c\u306f\u524d\u56de\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u304c\u6e21\u3055\u308c\u308b\u3002\n\u7b2c\u4e8c\u5f15\u6570\u306b\u306f\u3001 Iterable \u306e\u5404\u8981\u7d20\u304c\u6e21\u3055\u308c\u308b\u3002\n\n\n\n\nforEach()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    iterable.forEach { println(it) }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n1\n2\n3\n\n\n\n\u5404\u8981\u7d20\u3092\u51e6\u7406\u3059\u308b\u3002\n\n\ngroupBy()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5, 6, 7)\n\n    val result1: Map<String, List<Int>> =\n        iterable.groupBy { if (it % 2 == 0) \"\u5076\u6570\" else \"\u5947\u6570\" }\n\n    println(result1)\n\n\n    val result2: Map<String, List<String>> =\n        iterable.groupBy(\n            { if (it % 2 == 0) \"\u5076\u6570\" else \"\u5947\u6570\" },\n            { \"<$it>\"}\n        )\n\n    println(result2)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n{\u5947\u6570=[1, 3, 5, 7], \u5076\u6570=[2, 4, 6]}\n{\u5947\u6570=[<1>, <3>, <5>, <7>], \u5076\u6570=[<2>, <4>, <6>]}\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3054\u3068\u306b\u5404\u8981\u7d20\u3092\u5206\u985e\u3057\u3066\u3001 Map \u8a70\u3081\u3066\u8fd4\u3059\u3002\n\u7b2c\u4e8c\u5f15\u6570\u306b\u30e9\u30e0\u30c0\u5f0f\u3092\u8ffd\u52a0\u3059\u308c\u3070\u3001\u5404\u8981\u7d20\u3092\u4efb\u610f\u306e\u5024\u306b\u5909\u63db\u3067\u304d\u308b\u3002\n\n\nindexOfFirst()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.indexOfFirst { it % 2 == 0 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n1\n\n\n\n\u6307\u5b9a\u3057\u305f\u30e9\u30e0\u30c0\u5f0f\u306e\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u6700\u521d\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\u3002\n\n\nindextOfLast()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.indexOfLast { it % 2 == 0 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n3\n\n\n\n\u6307\u5b9a\u3057\u305f\u30e9\u30e0\u30c0\u5f0f\u306e\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u6700\u5f8c\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\u3002\n\n\nintersect()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n    val other = listOf(2, 3, 5, 2)\n\n    val result: Set<Int> = iterable.intersect(other)\n\n    println(result)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[2, 3, 5]\n\n\n\n\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f Iterable \u3068\u91cd\u8907\u3059\u308b\u8981\u7d20\u3060\u3051\u3092\u62bd\u51fa\u3057\u3066\u3001 Set \u306b\u8a70\u3081\u3066\u8fd4\u3059\u3002\n\n\njoinTo()\n\n\u57fa\u672c\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n    val buffer: Appendable = StringBuilder()\n\n    iterable.joinTo(buffer)\n\n    println(buffer)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n1, 2, 3, 4, 5\n\n\n\n\u5404\u8981\u7d20\u3092\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u3092\u3001\u6307\u5b9a\u3057\u305f Appendable \u306b\u8a2d\u5b9a\u3059\u308b\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u5404\u8981\u7d20\u3092\u534a\u89d2\u30ab\u30f3\u30de\u533a\u5207\u308a\u3067\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u304c\u8a2d\u5b9a\u3055\u308c\u308b\u3002\n\n\n\u9023\u7d50\u65b9\u6cd5\u3092\u8abf\u6574\u3059\u308b\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n    val buffer: Appendable = StringBuilder()\n\n    iterable.joinTo(\n        buffer = buffer,\n        separator = \" - \",\n        prefix = \"{\",\n        postfix = \"}\",\n        limit = 3,\n        truncated = \"(ry\",\n        transform = { \"<$it>\" }\n    )\n\n    println(buffer)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n{<1> - <2> - <3> - (ry}\n\n\n\n\n\n\u5f15\u6570\n\u8aac\u660e\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\n\n\n\n\nseparator\n\u533a\u5207\u308a\u6587\u5b57\n,\n\n\nprefix\n\u5148\u982d\u306b\u8a2d\u5b9a\u3059\u308b\u6587\u5b57\u5217\n\"\"\n\n\npostfix\n\u672b\u5c3e\u306b\u8a2d\u5b9a\u3059\u308b\u6587\u5b57\u5217\n\"\"\n\n\nlimit\n\u9023\u7d50\u3059\u308b\u8981\u7d20\u306e\u6700\u5927\u5024\n-1\n\n\ntruncated\n\u7701\u7565\u3055\u308c\u305f\u8981\u7d20\u306e\u8868\u8a18\n...\n\n\ntransform\n\u5404\u8981\u7d20\u3092\u4efb\u610f\u306e\u5024\u306b\u5909\u63db\u3059\u308b\u51e6\u7406\nnull\n\n\n\n\njoinToString()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.joinToString())\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n1, 2, 3, 4, 5\n\n\n\n\njoinTo() \u30e1\u30bd\u30c3\u30c9\u306e\u7d50\u679c\u3092 Appendable \u306b\u8a2d\u5b9a\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u305d\u306e\u307e\u307e\u6587\u5b57\u5217\u3068\u3057\u3066\u8fd4\u5374\u3059\u308b\u3002\n\nseparator \u306a\u3069\u306e\u5f15\u6570\u306f\u3001 joinTo() \u3068\u540c\u3058\u3088\u3046\u306b\u6307\u5b9a\u3067\u304d\u308b\u3002\n\n\nmap()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.map { it * 10 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[10, 20, 30, 40, 50]\n\n\n\n\u5404\u8981\u7d20\u3092\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3067\u7f6e\u304d\u63db\u3048\u305f\u65b0\u3057\u3044\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u3002\n\n\nmapNotNull()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.mapNotNull { if (it % 2 == 0) it else null })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[2, 4]\n\n\n\n\u5404\u8981\u7d20\u3092\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3067\u7f6e\u304d\u63db\u3048\u305f\u65b0\u3057\u3044\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u3002\n\u305f\u3060\u3057\u3001\u30e9\u30e0\u30c0\u5f0f\u304c null \u3092\u8fd4\u3057\u305f\u5834\u5408\u306f\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u308b\u3002\n\n\nmax(), min()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.max())\n    println(iterable.min())\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n5\n1\n\n\n\n\nmax() \u3067\u6700\u5927\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n\nmin() \u3067\u6700\u5c0f\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u8981\u7d20\u306f Comparable \u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\nmaxBy(), minBy()\nfun main(args: Array<String>) {\n    val iterable = listOf(\"zz\", \"yyy\", \"xxxx\")\n\n    println(iterable.maxBy { it.length })\n    println(iterable.minBy { it.length })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nxxxx\nzz\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3067\u5927\u5c0f\u3092\u6bd4\u8f03\u3059\u308b\u3002\n\nmaxBy() \u3067\u6700\u5927\u3001 minBy() \u3067\u6700\u5c0f\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n\nmaxWith(), minWith()\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.maxWith(Comparator { a, b -> b - a }))\n    println(iterable.minWith(Comparator { a, b -> b - a }))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n1\n5\n\n\n\n\u5f15\u6570\u306b Comparator \u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u5927\u5c0f\u6bd4\u8f03\u306e\u65b9\u6cd5\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n\nmaxWith() \u3067\u6700\u5927\u3001 minWith() \u3067\u6700\u5c0f\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n\nminus()\nfun main(args: Array<String>) {\n    val iterable1 = listOf(1, 1, 2, 2, 3, 4, 5)\n    val iterable2 = listOf(2, 4, 5);\n\n    println(iterable1.minus(1))\n    println(iterable1.minus(iterable2))\n    println(iterable1 - iterable2)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 2, 3, 4, 5]\n[1, 1, 3]\n[1, 1, 3]\n\n\n\n\u6307\u5b9a\u3057\u305f\u8981\u7d20\u3092\u53d6\u308a\u9664\u3044\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u3002\n\u8981\u7d20\uff11\u3064\u3060\u3051\u3092\u5f15\u6570\u306b\u6e21\u3057\u305f\u5834\u5408\u306f\u3001\u8a72\u5f53\u3059\u308b\u6700\u521d\u306e\u8981\u7d20\u3060\u3051\u304c\u9664\u53bb\u3055\u308c\u308b\u3002\n\nIterable \u3084 List, Sequence \u3092\u6e21\u3059\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n- \u6f14\u7b97\u5b50\u3067\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\nplus()\nfun main(args: Array<String>) {\n    val iterable1 = listOf(1, 2, 3)\n    val iterable2 = listOf(3, 5)\n\n    println(iterable1.plus(6))\n    println(iterable1.plus(iterable2))\n    println(iterable1 + iterable2)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 6]\n[1, 2, 3, 3, 5]\n[1, 2, 3, 3, 5]\n\n\n\n\u6307\u5b9a\u3057\u305f\u8981\u7d20\u3092\u8ffd\u52a0\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u3002\n\u4ed6\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n+ \u6f14\u7b97\u5b50\u3067\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\nnone()\nfun main(args: Array<String>) {\n    val iterable1 = listOf(1, 2, 3)\n    val iterable2 = listOf<Int>();\n\n    println(iterable1.none())\n    println(iterable2.none())\n\n    println(iterable1.none {it < 2})\n    println(iterable1.none {it < 1})\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nfalse\ntrue\nfalse\ntrue\n\n\n\n\u8981\u7d20\u3092\u6301\u305f\u306a\u3044\u5834\u5408\u306b true \u3092\u8fd4\u3059\u3002\n\u30e9\u30e0\u30c0\u5f0f\u3067\u6761\u4ef6\u3092\u7d5e\u308a\u8fbc\u3081\u308b\u3002\n\n\npartition()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    val pair: Pair<Iterable<Int>, Iterable<Int>> = iterable.partition { it % 2 == 0 }\n\n    println(pair)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n([2, 4], [1, 3, 5])\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u3067\u8981\u7d20\u3092\u4e8c\u5206\u3057\u3066 Pair \u3067\u8fd4\u3059\u3002\n\u6761\u4ef6\u304c true \u3068\u306a\u3063\u305f\u8981\u7d20\u304c first \u306b\u3001 false \u3068\u306a\u3063\u305f\u8981\u7d20\u304c second \u306b\u30bb\u30c3\u30c8\u3055\u308c\u308b\u3002\n\n\nreduce()\nfun main(args: Array<String>) {\n    val iterable = listOf(\"a\", \"b\", \"c\")\n\n    println(iterable.reduce {tmp, value ->\n        println(\"tmp=$tmp, value=$value\")\n        tmp + \":\" + value\n    })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\ntmp=a, value=b\ntmp=a:b, value=c\na:b:c\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u306b\u3088\u308b\u5909\u63db\u3092\u7a4d\u307f\u91cd\u306d\u306a\u304c\u3089\u5404\u8981\u7d20\u3092\u51e6\u7406\u3059\u308b\u3002\n\u30e9\u30e0\u30c0\u5f0f\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u3001\u521d\u56de\u306f\u5148\u982d\u8981\u7d20\u304c\u6e21\u3055\u308c\u3001\u4ee5\u5f8c\u306f\u524d\u56de\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u304c\u6e21\u3055\u308c\u308b\u3002\n\n\nrequireNoNulls()\nfun main(args: Array<String>) {\n    val iterable = listOf(\"a\", \"b\", null, \"c\")\n\n    println(iterable.requireNoNulls())\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nException in thread \"main\" java.lang.IllegalArgumentException: null element found in [a, b, null, c].\n    at kotlin.collections.CollectionsKt___CollectionsKt.requireNoNulls(_Collections.kt:1583)\n\n\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u5185\u306b null \u304c\u5b58\u5728\u3057\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002\n\nnull \u304c\u5b58\u5728\u3057\u305f\u5834\u5408\u306f IllegalArgumentException \u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3002\n\n\nreversed()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4)\n\n    println(iterable.reversed())\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[4, 3, 2, 1]\n\n\n\n\u4e2d\u8eab\u3092\u9006\u9806\u5e8f\u306b\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u3002\n\n\nsingle()\nfun main(args: Array<String>) {\n    val iterable1 = listOf(9)\n    val iterable2 = listOf(1, 2, 3, 4)\n\n    println(iterable1.single())\n    println(iterable2.single {it == 3})\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n9\n3\n\n\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u6301\u3064\u552f\u4e00\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u30e9\u30e0\u30c0\u5f0f\u3067\u6761\u4ef6\u3092\u7d5e\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u8a72\u5f53\u3059\u308b\u8981\u7d20\u304c\uff10\u307e\u305f\u306f\uff12\u4ef6\u4ee5\u4e0a\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u4f8b\u5916\u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3002\n\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4)\n\n    println(iterable.single())\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nException in thread \"main\" java.lang.IllegalArgumentException: Collection has more than one element.\n    at kotlin.collections.CollectionsKt___CollectionsKt.single(_Collections.kt:487)\n\n\n\nsingleOrNull()\nfun main(args: Array<String>) {\n    val iterable1 = listOf(9)\n    val iterable2 = listOf(1, 2, 3, 4)\n\n\n    println(iterable1.singleOrNull())\n\n    println(iterable2.singleOrNull {it == 4})\n    println(iterable2.singleOrNull())\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n9\n4\nnull\n\n\n\n\u57fa\u672c\u306f single() \u3068\u540c\u3058\u3060\u304c\u3001\u8a72\u5f53\u3059\u308b\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f null \u3092\u8fd4\u3059\u70b9\u304c\u7570\u306a\u308b\u3002\n\n\nsorted(), sortedDescending()\nfun main(args: Array<String>) {\n    val iterable = listOf(3, 1, 2, 4)\n\n    println(iterable.sorted())\n    println(iterable.sortedDescending())\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 4]\n[4, 3, 2, 1]\n\n\n\n\u8981\u7d20\u3092\u30bd\u30fc\u30c8\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u3002\n\nsorted() \u306f\u6607\u9806\u30bd\u30fc\u30c8\u3001 sortedDescending() \u306f\u964d\u9806\u30bd\u30fc\u30c8\u3002\n\n\nsortedBy(), sortedByDescending()\nfun main(args: Array<String>) {\n    val iterable = listOf(3, 1, 2, 4)\n\n    println(iterable.sortedBy { it * -1 })\n    println(iterable.sortedByDescending { it * -1 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[4, 3, 2, 1]\n[1, 2, 3, 4]\n\n\n\n\u30bd\u30fc\u30c8\u306e\u5224\u5b9a\u306b\u4f7f\u7528\u3059\u308b\u5024\u3092\u8fd4\u3059\u30e9\u30e0\u30c0\u5f0f\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u30bd\u30fc\u30c8\u65b9\u6cd5\u3092\u8abf\u6574\u3067\u304d\u308b\u3002\n\nsortedBy() \u306f\u6607\u9806\u30bd\u30fc\u30c8\u3001 sortedByDescending() \u306f\u964d\u9806\u30bd\u30fc\u30c8\u3002\n\n\nsortedWith()\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val iterable = listOf(3, 1, 2, 4)\n\n    println(iterable.sortedWith(Comparator { left, right -> right - left }))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[4, 3, 2, 1]\n\n\n\n\u30bd\u30fc\u30c8\u65b9\u6cd5\u3092 Comparator \u3067\u5b9f\u88c5\u3057\u3066\u6e21\u3059\u3002\n\n\nsubtract()\nfun main(args: Array<String>) {\n    val iterable1 = listOf(1, 1, 2, 2, 3, 4, 5)\n    val iterable2 = listOf(2, 3, 4)\n\n    println(iterable1.subtract(iterable2))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 5]\n\n\n\n\u6307\u5b9a\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u5b58\u5728\u3057\u306a\u3044\u8981\u7d20\u3060\u3051\u3092\u62bd\u51fa\u3057\u3066 Set \u3067\u8fd4\u3059\u3002\n\u91cd\u8907\u306f\u9664\u53bb\u3055\u308c\u308b\u3002\n\n\nsum()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.sum())\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n6\n\n\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u5404\u8981\u7d20\u306e\u5408\u8a08\u3092\u8fd4\u3059\u3002\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u8981\u7d20\u306f\u6570\u5024\u8a08\u7b97\u304c\u53ef\u80fd\u306a\u578b\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\nsumBy()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.sumBy { it * 10 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n60\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3067\u5408\u8a08\u3092\u8a08\u7b97\u3059\u308b\u3002\n\n\nsumByDouble()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.sumByDouble { it * 1.5 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n9.0\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3059 Double \u5024\u3067\u5408\u8a08\u3092\u7b97\u51fa\u3059\u308b\u3002\n\n\ntake()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.take(3))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n\n\n\n\u5148\u982d\u304b\u3089\u6307\u5b9a\u3057\u305f\u6570\u3060\u3051\u8981\u7d20\u3092\u53d6\u5f97\u3057\u3066 List \u3067\u8fd4\u3059\u3002\n\n\ntakeWhile()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.takeWhile { it < 5 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 4]\n\n\n\n\u5148\u982d\u304b\u3089\u3001\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u306a\u304f\u306a\u308b\u307e\u3067\u8981\u7d20\u3092\u53d6\u5f97\u3057\u3066 List \u3067\u8fd4\u3059\u3002\n\n\ntoCollection()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    val result: MutableCollection<Int> = mutableListOf(9)\n\n    iterable.toCollection(result)\n\n    println(result)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[9, 1, 2, 3]\n\n\n\n\u6307\u5b9a\u3057\u305f MutableCollection \u306b\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\n\ntoHashSet()\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 1, 2, 2, 2, 3, 3)\n\n    val result: HashSet<Int> = iterable.toHashSet()\n\n    println(result)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n\n\n\n\nHashSet \u306b\u5909\u63db\u3059\u308b\u3002\n\n\ntoList()\nfun main(args: Array<String>) {\n    val iterable = setOf(1, 2, 3)\n\n    val list: List<Int> = iterable.toList()\n\n    println(list)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n\n\n\n\nList \u306b\u5909\u63db\u3059\u308b\u3002\n\n\ntoMap()\nfun main(args: Array<String>) {\n    val iterable = listOf(\"foo\" to \"FOO\", \"bar\" to \"BAR\")\n\n    val map: Map<String, String> = iterable.toMap()\n\n    println(map)\n\n    val result = mutableMapOf(\"fizz\" to \"FIZZ\")\n\n    iterable.toMap(result)\n\n    println(result)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n{foo=FOO, bar=BAR}\n{fizz=FIZZ, foo=FOO, bar=BAR}\n\n\n\n\nIterable<Pair<K, V>> \u3092 Map<K, V> \u306b\u5909\u63db\u3059\u308b\u3002\n\u5f15\u6570\u306b MutableMap \u3092\u6e21\u3059\u3068\u3001\u305d\u306e Map \u306b\u8ffd\u52a0\u3055\u308c\u308b\u3002\n\n\ntoMutableList()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    val result: MutableList<Int> = iterable.toMutableList()\n\n    println(result)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n\n\n\n\nMutableList \u306b\u5909\u63db\u3059\u308b\u3002\n\n\ntoMutableSet()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 1, 2, 3, 3)\n\n    val result: MutableSet<Int> = iterable.toMutableSet()\n\n    println(result)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n\n\n\n\nMutableSet \u306b\u5909\u63db\u3059\u308b\u3002\n\n\ntoSet()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 1, 2, 3, 3)\n\n    val result: Set<Int> = iterable.toSet()\n\n    println(result)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n\n\n\n\nSet \u306b\u5909\u63db\u3059\u308b\u3002\n\n\ntoSortedSet()\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val iterable = listOf(3, 1, 2, 3, 1, 4)\n\n    val result: SortedSet<Int> = iterable.toSortedSet()\n\n    println(result)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 4]\n\n\n\n\nSortedSet \u306b\u5909\u63db\u3059\u308b\u3002\n\n\nunion()\nfun main(args: Array<String>) {\n    val iterable1 = listOf(1, 2, 3, 4)\n    val iterable2 = listOf(2, 4, 5, 6)\n\n    val result: Set<Int> = iterable1.union(iterable2)\n\n    println(result)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 4, 5, 6]\n\n\n\n\uff12\u3064\u306e Iterable \u306e\u8981\u7d20\u3092\u5408\u8a08\u3057\u3066 Set \u3067\u8fd4\u3059\u3002\n\n\nunzip()\nfun main(args: Array<String>) {\n    val iterable = listOf(\"one\" to 1, \"two\" to 2, \"three\" to 3)\n\n    val result: Pair<List<String>, List<Int>> = iterable.unzip()\n\n    println(result)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n([one, two, three], [1, 2, 3])\n\n\n\n\nList<Pair<T, U>> \u3092 Pair<List<T>, List<U>> \u306b\u5909\u63db\u3059\u308b\u3002\n\n\nwithIndex()\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    val result: Iterable<IndexedValue<Int>> = iterable.withIndex()\n\n    result.forEach { println(\"index=${it.index}, value=${it.value}\") }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nindex=0, value=1\nindex=1, value=2\nindex=2, value=3\nindex=3, value=4\nindex=4, value=5\n\n\n\n\nIterable<IndexedValue<T>> \u306b\u5909\u63db\u3059\u308b\u3002\n\n\nzip()\nfun main(args: Array<String>) {\n    val iterable1 = listOf(1, 2, 3)\n\n    val iterable2 = listOf(\"one\", \"two\", \"three\", \"four\")\n    val result1: List<Pair<Int, String>> = iterable1.zip(iterable2)\n    println(result1)\n\n    val array = arrayOf(1.1, 2.2)\n    val result2: List<Pair<Int, Double>> = iterable1.zip(array)\n    println(result2)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[(1, one), (2, two), (3, three)]\n[(1, 1.1), (2, 2.2)]\n\n\n\n\uff12\u3064\u306e Iterable\uff08\u307e\u305f\u306f Array\uff09 \u306e\u5404\u8981\u7d20\u3092\uff11\u3064\u306e Pair \u306b\u3057\u3066\u3001 List \u306b\u8a70\u3081\u3066\u8fd4\u3059\u3002\n\u8981\u7d20\u6570\u304c\u5408\u308f\u306a\u3044\u5834\u5408\u306f\u3001\u5c11\u306a\u3044\u307b\u3046\u306b\u5408\u308f\u305b\u3089\u308c\u308b\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30e9\u30e0\u30c0\u5f0f\u3067\u5404\u8981\u7d20\u3092\u5909\u63db\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\nfun main(args: Array<String>) {\n    val iterable1 = listOf(1, 2, 3)\n\n    val iterable2 = listOf(\"one\", \"two\", \"three\", \"four\")\n    val result1: List<String> = iterable1.zip(iterable2, {a, b -> \"$b($a)\"})\n    println(result1)\n\n    val array = arrayOf(1.1, 2.2)\n    val result2: List<Int> = iterable1.zip(array, {a, b -> (a + b*10).toInt()})\n    println(result2)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[one(1), two(2), three(3)]\n[12, 24]\n\n\n\nCollection \u306e\u30e1\u30bd\u30c3\u30c9\n\ncontainsAll()\nfun main(args: Array<String>) {\n    val collection1 = listOf(1, 2, 3, 4)\n    val collection2 = listOf(2, 3)\n    val collection3 = listOf(4, 5)\n\n    println(collection1.containsAll(collection2))\n    println(collection1.containsAll(collection3))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n\n\n\n\u6307\u5b9a\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u542b\u307e\u308c\u308b\u5168\u3066\u306e\u8981\u7d20\u3092\u6301\u3064\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3002\n\n\nisNotEmpty()\nfun main(args: Array<String>) {\n    val collection1 = listOf(1, 2, 3, 4)\n    val collection2 = listOf<Int>()\n\n    println(collection1.isEmpty())\n    println(collection2.isEmpty())\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nfalse\ntrue\n\n\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u304b\u3089\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3002\n\n\norEmpty()\nfun main(args: Array<String>) {\n    val collection1 = listOf(1, 2, 3, 4)\n    val collection2: Collection<Int>? = null\n\n    println(collection1.orEmpty())\n    println(collection2.orEmpty())\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 4]\n[]\n\n\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u578b\u304c null \u53ef\u3067\u3001\u304b\u3064\u5b9f\u969b null \u3060\u3063\u305f\u5834\u5408\u306f\u7a7a\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u3002\n\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f\u3001\u81ea\u5206\u81ea\u8eab\u3092\u305d\u306e\u307e\u307e\u5e30\u3059\u3002\n\n\nto***Array()\nfun main(args: Array<String>) {\n    val collection = listOf(1, 2, 3, 4)\n\n    val array: IntArray = collection.toIntArray()\n\n    array.forEach { println(it) }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n1\n2\n3\n4\n\n\n\n\n***Array \u306b\u5909\u63db\u3059\u308b\u3002\n\nBoolean, Byte, Char, Double, Float, Int, Long, Short \u304c\u3042\u308b\u3002\n\n\ntoTypedArray()\nfun main(args: Array<String>) {\n    val collection = listOf(1, 2, 3, 4)\n\n    val array: Array<Int> = collection.toTypedArray()\n\n    array.forEach { println(it) }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n1\n2\n3\n4\n\n\n\n\nArray<T> \u306b\u5909\u63db\u3059\u308b\u3002\n\n\nList \u306e\u30e1\u30bd\u30c3\u30c9\n\nasReversed()\nfun main(args: Array<String>) {\n    val list = mutableListOf(1, 2, 3)\n\n    println(\"[before] list = $list\")\n\n    val asReversed = list.asReversed()\n\n    println(\"[after asReversed] list = $list\")\n    println(\"[after asReversed] asReversed = $asReversed\")\n\n    list += 9\n    asReversed += 99\n\n    println(\"[after modify] list = $list\")\n    println(\"[after modify] asReversed = $asReversed\")\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[before] list = [1, 2, 3]\n[after asReversed] list = [1, 2, 3]\n[after asReversed] asReversed = [3, 2, 1]\n[after modify] list = [99, 1, 2, 3, 9]\n[after modify] asReversed = [9, 3, 2, 1, 99]\n\n\n\n\u9806\u5e8f\u3092\u9006\u8ee2\u3055\u305b\u305f List \u3092\u8fd4\u3059\u3002\n\nreversed() \u3068\u306e\u9055\u3044\u306f\u3001 MutableList \u306e\u5834\u5408\u306f MutableList \u3092\u8fd4\u3059\u3068\u3044\u3046\u70b9\u3002\n\n\n\nreversed() \u306e\u5834\u5408\u306f List \u3092\u8fd4\u3059\u3002\n\n\n\u8fd4\u3055\u308c\u305f List \u3068\u5143\u306e List \u306f\u95a2\u9023\u3057\u3066\u304a\u308a\u3001\u4e00\u65b9\u3092\u5909\u66f4\u3059\u308b\u3068\u4ed6\u65b9\u306b\u3082\u5909\u66f4\u304c\u53cd\u6620\u3055\u308c\u308b\u3002\n\n\nbinarySearch()\n\n\u57fa\u672c\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 2, 3, 3, 3)\n\n    println(list.binarySearch(3))\n    println(list.binarySearch(9))\n    println(list.binarySearch(element = 3, fromIndex = 0, toIndex = 2))\n    println(list.binarySearch(element = 3, comparator = Comparator { a, b -> a - b }))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n4\n-7\n-3\n4\n\n\n\n\u30d0\u30a4\u30ca\u30ea\u30b5\u30fc\u30c1\u3067\u6307\u5b9a\u3057\u305f\u8981\u7d20\u3092\u691c\u7d22\u3057\u3001\u8a72\u5f53\u3057\u305f\u5834\u6240\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\u3002\n\n\n\u8981\u7d20\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u8ca0\u6570\u304c\u8fd4\u3055\u308c\u308b\u3002\n\n\n\nList \u306f\u3042\u3089\u304b\u3058\u3081\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\n\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u30c7\u30bf\u30e9\u30e1\u306a\u5024\u3092\u8fd4\u3059\u3002\n\n\n\u7b2c\u4e8c\u5f15\u6570\uff08fromIndex\uff09\u3068\u7b2c\u4e09\u5f15\u6570\uff08toIndex\uff09\u3067\u3001\u691c\u7d22\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n\ncomparator \u3067\u3001\u8981\u7d20\u306e\u6bd4\u8f03\u65b9\u6cd5\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n\n\nbinarySearchBy()\nfun main(args: Array<String>) {\n    val list = listOf(\"I\", \"he\", \"her\", \"you\")\n\n    println(list.binarySearchBy(\"Thank you\", selector = { \"Thank $it\" }))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n3\n\n\n\n\u5404\u8981\u7d20\u3092 selector \u3067\u5909\u63db\u3057\u3066\u3001\u305d\u306e\u5024\u306b\u4e00\u81f4\u3059\u308b\u9805\u76ee\u3092\u691c\u7d22\u3057\u3001\u8a72\u5f53\u3059\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\u3002\n\nList \u306f\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\ncomponent*()\nfun main(args: Array<String>) {\n    val list = listOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n\n    println(list.component1())\n    println(list.component2())\n    println(list.component3())\n    println(list.component4())\n    println(list.component5())\n}\n\n\n\u5b9f\u884c\u7d50\u679c\none\ntwo\nthree\nfour\nfive\n\n\n\n\uff11\uff5e\uff15\u756a\u76ee\u307e\u3067\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u4f7f\u3044\u30c9\u30b3\u30ed\u306f\u30fb\u30fb\u30fb\u4e0d\u660e\u3002\n\n\ndropLast()\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 3, 4, 5)\n\n    println(list.dropLast(2))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n\n\n\n\u6307\u5b9a\u3057\u305f\u6570\u3060\u3051\u3001\u8981\u7d20\u3092\u5f8c\u308d\u304b\u3089\u524a\u9664\u3057\u305f\u7d50\u679c\u3092 List \u3067\u8fd4\u3059\u3002\n\n\ndropLastWhile()\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 3, 4, 5)\n\n    println(list.dropLastWhile { it > 2 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2]\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u304c true \u3092\u8fd4\u3059\u9593\u3001\u672b\u5c3e\u304b\u3089\u8981\u7d20\u3092\u524a\u9664\u3057\u3001\u6b8b\u3063\u305f\u8981\u7d20\u3092 List \u306b\u8a70\u3081\u3066\u8fd4\u3059\u3002\n\n\nfoldRight()\nfun main(args: Array<String>) {\n    val list = listOf(\"a\", \"b\", \"c\")\n\n    println(list.foldRight(\"Z\", { value, buf -> buf + value }))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nZcba\n\n\n\n\u672b\u5c3e\u304b\u3089\u9806\u756a\u306b\u8981\u7d20\u3092\u51e6\u7406\u3057\u3001\u7d50\u679c\u3092\u84c4\u7a4d\u3057\u3066\u3044\u304f\u3002\n\u30e9\u30e0\u30c0\u5f0f\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u306f\u3001\u521d\u56de\u306f\u7b2c\u4e00\u5f15\u6570\u3067\u6e21\u3057\u305f\u521d\u671f\u5024\u304c\u6e21\u3055\u308c\u3001\u4e8c\u56de\u76ee\u4ee5\u964d\u306f\u524d\u56de\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u304c\u6e21\u3055\u308c\u308b\u3002\n\u7b2c\u4e00\u5f15\u6570\u3067\u521d\u671f\u5024\u3092\u6307\u5b9a\u3059\u308b\u3002\n\n\u30e9\u30e0\u30c0\u5f0f\u304c\u5404\u8981\u7d20\u3054\u3068\u306b\u30b3\u30fc\u30eb\u3055\u308c\u308b\u3002\n\n\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u3001\u521d\u671f\u5024\u3067\u6307\u5b9a\u3057\u305f\u5024\u304c\u6700\u521d\u306b\u6e21\u3055\u308c\u3001\u4ee5\u5f8c\u306f\u524d\u56de\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u304c\u6e21\u3055\u308c\u308b\u3002\n\u7b2c\u4e8c\u5f15\u6570\u306b\u306f\u3001 Iterable \u306e\u5404\u8981\u7d20\u304c\u672b\u5c3e\u304b\u3089\u9806\u756a\u306b\u6e21\u3055\u308c\u308b\u3002\n\n\n\n\ngetOrElse()\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 3)\n\n    println(list.getOrElse(0, { 9 }))\n    println(list.getOrElse(4, { 9 }))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n1\n9\n\n\n\n\u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u7bc4\u56f2\u5916\u306e\u5834\u5408\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3059\u5024\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3068\u3057\u3066\u8fd4\u3059\u3002\n\n\ngetOrNull()\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 3)\n\n    println(list.getOrNull(0))\n    println(list.getOrNull(4))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n1\nnull\n\n\n\n\u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u7bc4\u56f2\u5916\u306e\u5834\u5408\u306f\u3001 null \u3092\u8fd4\u3059\u3002\n\n\nreduceRight()\nfun main(args: Array<String>) {\n    val list = listOf(\"a\", \"b\", \"c\")\n\n    println(list.reduceRight { value, tmp ->\n        println(\"value=$value, tmp=$tmp\")\n        tmp + \":\" + value\n    })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nvalue=b, tmp=c\nvalue=a, tmp=c:b\nc:b:a\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u306b\u3088\u308b\u5909\u63db\u3092\u7a4d\u307f\u91cd\u306d\u306a\u304c\u3089\u5404\u8981\u7d20\u3092\u672b\u5c3e\u304b\u3089\u9806\u756a\u306b\u51e6\u7406\u3059\u308b\u3002\n\u30e9\u30e0\u30c0\u5f0f\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u3001\u521d\u56de\u306f\u672b\u5c3e\u306e\u8981\u7d20\u304c\u6e21\u3055\u308c\u3001\u4ee5\u5f8c\u306f\u524d\u56de\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u304c\u6e21\u3055\u308c\u308b\u3002\n\n\nslice()\nfun main(args: Array<String>) {\n    val list = listOf(\"0:one\", \"1:two\", \"2:three\", \"3:four\", \"4:five\")\n    println(list.slice(2..4))\n\n    val indices = listOf(1, 3, 4)\n    println(list.slice(indices))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[2:three, 3:four, 4:five]\n[1:two, 3:four, 4:five]\n\n\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6307\u5b9a\u3067\u8981\u7d20\u3092\u629c\u304d\u53d6\u308b\u3002\n\nIntRange \u3092\u4f7f\u3046\u3068\u3001\u7bc4\u56f2\u6307\u5b9a\u3067\u8981\u7d20\u3092\u629c\u304d\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nIterable \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u8981\u7d20\u3060\u3051\u3092\u629c\u304d\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\ntakeLast()\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 3, 4, 5)\n\n    println(list.takeLast(2))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[4, 5]\n\n\n\n\u6307\u5b9a\u3057\u305f\u6570\u3060\u3051\u672b\u5c3e\u304b\u3089\u8981\u7d20\u3092\u53d6\u5f97\u3057\u3001 List \u306b\u3057\u3066\u8fd4\u3059\u3002\n\n\ntakeLastWhile()\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 3, 4, 5)\n\n    println(list.takeLastWhile { it > 2 })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[3, 4, 5]\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u304c true \u3092\u8fd4\u3059\u9593\u3001\u672b\u5c3e\u304b\u3089\u9806\u756a\u306b\u8981\u7d20\u3092\u53d6\u5f97\u3057\u3001 List \u306b\u8a70\u3081\u3066\u8fd4\u3059\u3002\n\n\nMutableIterable \u306e\u30e1\u30bd\u30c3\u30c9\n\nremoveAll()\nfun main(args: Array<String>) {\n    val mutableIterable = mutableListOf(1, 2, 3, 1, 2, 3)\n\n    mutableIterable.removeAll { it == 3 }\n\n    println(mutableIterable)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 1, 2]\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u3092\u5168\u3066\u524a\u9664\u3059\u308b\u3002\n\n\nretainAll()\nfun main(args: Array<String>) {\n    val mutableIterable = mutableListOf(1, 2, 3, 1, 2, 3)\n\n    mutableIterable.retainAll { it == 3 }\n\n    println(mutableIterable)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[3, 3]\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u3060\u3051\u3092\u6b8b\u3057\u3001\u6b8b\u308a\u3092\u5168\u3066\u524a\u9664\u3059\u308b\u3002\n\n\nMutableCollection \u306e\u30e1\u30bd\u30c3\u30c9\n\naddAll()\nfun main(args: Array<String>) {\n    val mutableCollection = mutableListOf(1, 2, 3)\n    val iterable = listOf(7, 8, 9)\n\n    mutableCollection.addAll(iterable)\n\n    println(mutableCollection)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 7, 8, 9]\n\n\n\n\u6307\u5b9a\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u8981\u7d20\u3092\u5168\u3066\u8ffd\u52a0\u3059\u308b\u3002\n\n\nminusAssign()\nfun main(args: Array<String>) {\n    val mutableCollection = mutableListOf(1, 2, 3, 4, 5)\n    val iterable = listOf(2, 4)\n\n    mutableCollection.minusAssign(iterable)\n    println(mutableCollection)\n\n    mutableCollection -= 5\n    println(mutableCollection)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 3, 5]\n[1, 3]\n\n\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u307e\u305f\u306f\u5358\u72ec\u3067\u6307\u5b9a\u3057\u305f\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3002\n\n-= \u3067\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\nplusAssign()\nfun main(args: Array<String>) {\n    val mutableCollection = mutableListOf(1, 2, 3)\n    val iterable = listOf(7, 8)\n\n    mutableCollection.plusAssign(iterable)\n    println(mutableCollection)\n\n    mutableCollection += 9\n    println(mutableCollection)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 7, 8]\n[1, 2, 3, 7, 8, 9]\n\n\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u307e\u305f\u306f\u5358\u72ec\u3067\u6307\u5b9a\u3057\u305f\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\n+= \u3067\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\nremove()\nfun main(args: Array<String>) {\n    val mutableCollection = mutableListOf(1, 2, 3)\n\n    mutableCollection.remove(2)\n\n    println(mutableCollection)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 3]\n\n\n\n\u6307\u5b9a\u3057\u305f\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3002\n\n\nMutableList \u306e\u30e1\u30bd\u30c3\u30c9\n\nreverse()\nfun main(args: Array<String>) {\n    val mutableList = mutableListOf(1, 2, 3)\n\n    mutableList.reverse()\n\n    println(mutableList)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[3, 2, 1]\n\n\n\n\u9806\u5e8f\u3092\u9006\u306b\u3059\u308b\u3002\n\n\nsort(), sortDescending()\nfun main(args: Array<String>) {\n    val mutableList = mutableListOf(3, 1, 2)\n\n    mutableList.sort()\n    println(mutableList)\n\n    mutableList.sortDescending()\n    println(mutableList)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n[3, 2, 1]\n\n\n\n\u8981\u7d20\u3092\u30bd\u30fc\u30c8\u3059\u308b\u3002\n\nsort() \u304c\u6607\u9806\u3001 sortDescending() \u304c\u964d\u9806\u3002\n\n\nsortBy(), sortByDescending()\nfun main(args: Array<String>) {\n    val mutableList = mutableListOf(\"aaa\", \"bb\", \"c\")\n\n    mutableList.sortBy { it.length }\n    println(mutableList)\n\n    mutableList.sortByDescending { it.length }\n    println(mutableList)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[c, bb, aaa]\n[aaa, bb, c]\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3067\u30bd\u30fc\u30c8\u3059\u308b\u3002\n\nsortBy() \u304c\u6607\u9806\u3001 sortByDescending() \u304c\u964d\u9806\u3002\n\n\nsortWith()\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val mutableList = mutableListOf(2, 3, 1)\n\n    mutableList.sortWith(Comparator { a, b ->  b - a})\n    println(mutableList)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[3, 2, 1]\n\n\n\n\nComparator \u3092\u6307\u5b9a\u3057\u3066\u30bd\u30fc\u30c8\u3059\u308b\u3002\n\n\nMap \u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\n\nMap \u306e\u30e1\u30bd\u30c3\u30c9\n\nall()\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.all { it.key is String })\n    println(map.all { it.key.contains(\"o\") })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n\n\n\n\u5168\u3066\u306e\u30a8\u30f3\u30c8\u30ea\u306b\u5bfe\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u304c true \u3092\u8fd4\u3057\u305f\u5834\u5408\u306b true \u3092\u8fd4\u3059\u3002\n\n\nany()\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.any { it.key.contains(\"o\") })\n    println(map.any { it.key.isEmpty() })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n\n\n\n\u3044\u305a\u308c\u304b\u306e\u30a8\u30f3\u30c8\u30ea\u306b\u5bfe\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u304c true \u3092\u8fd4\u3057\u305f\u5834\u5408\u306b true \u3092\u8fd4\u3059\u3002\n\n\ncontains()\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.contains(\"one\"))\n    println(map.contains(\"ONE\"))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n\n\n\n\u6307\u5b9a\u3057\u305f\u30ad\u30fc\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u6301\u3064\u304b\u78ba\u8a8d\u3059\u308b\u3002\n\ncontainsKey() \u3068\u540c\u3058\u3002\n\n\ncontainsKey()\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.containsKey(\"one\"))\n    println(map.containsKey(\"ONE\"))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n\n\n\n\u6307\u5b9a\u3057\u305f\u30ad\u30fc\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u6301\u3064\u304b\u78ba\u8a8d\u3059\u308b\u3002\n\ncontains() \u3068\u540c\u3058\u3002\n\n\ncontainsValue()\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.containsValue(\"one\"))\n    println(map.containsValue(\"ONE\"))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nfalse\ntrue\n\n\n\n\u6307\u5b9a\u3057\u305f\u30d0\u30ea\u30e5\u30fc\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u6301\u3064\u304b\u78ba\u8a8d\u3059\u308b\u3002\n\n\ncount()\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.count())\n    println(map.count { it.key.contains(\"t\") })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n3\n2\n\n\n\n\u30a8\u30f3\u30c8\u30ea\u306e\u6570\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u30e9\u30e0\u30c0\u5f0f\u3067\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u30a8\u30f3\u30c8\u30ea\u3092\u7d5e\u308a\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\nfilter(), filterNot()\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.filter { it.key.contains(\"t\") })\n    println(map.filterNot { it.key.contains(\"t\") })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n{two=TWO, three=THREE}\n{one=ONE}\n\n\n\n\nfilter() \u306f\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u30a8\u30f3\u30c8\u30ea\u3060\u3051\u3092\u62bd\u51fa\u3059\u308b\u3002\n\nfilterNot() \u306f\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3057\u306a\u3044\u30a8\u30f3\u30c8\u30ea\u3060\u3051\u3092\u62bd\u51fa\u3059\u308b\u3002\n\u30e9\u30e0\u30c0\u5f0f\u306b\u306f\u5404\u30a8\u30f3\u30c8\u30ea\u304c\u6e21\u3055\u308c\u308b\u3002\n\n\nfilterKeys(), filterValues()\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.filterKeys { key -> key.contains(\"o\") })\n    println(map.filterValues { value -> value.contains(\"T\") })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n{one=ONE, two=TWO}\n{two=TWO, three=THREE}\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u30a8\u30f3\u30c8\u30ea\u3060\u3051\u3092\u62bd\u51fa\u3059\u308b\u3002\n\nfilterKeys() \u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u306b\u5404\u30a8\u30f3\u30c8\u30ea\u306e\u30ad\u30fc\u304c\u6e21\u3055\u308c\u308b\u3002\n\nfilterValues() \u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u306b\u5404\u30a8\u30f3\u30c8\u30ea\u306e\u30d0\u30ea\u30e5\u30fc\u304c\u6e21\u3055\u308c\u308b\u3002\n\n\nflatMap()\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.flatMap { listOf(it.key, it.value) })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[one, ONE, two, TWO, three, THREE]\n\n\n\n\u5404\u8981\u7d20\u3054\u3068\u306b\u30e9\u30e0\u30c0\u5f0f\u304c\u30b3\u30fc\u30eb\u3055\u308c\u308b\u3002\n\u305d\u3057\u3066\u3001\u5404\u30e9\u30e0\u30c0\u5f0f\u306e\u30b3\u30fc\u30eb\u3067\u8fd4\u3055\u308c\u305f Iterable \u3092\uff11\u3064\u306e List \u306b\u8a70\u3081\u3066\u8fd4\u3059\u3002\n\n\nforEach()\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    map.forEach { println(\"key=${it.key}, value=${it.value}\") }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nkey=one, value=ONE\nkey=two, value=TWO\nkey=three, value=THREE\n\n\n\n\u5404\u30a8\u30f3\u30c8\u30ea\u3092\u51e6\u7406\u3059\u308b\u3002\n\n\ngetOrElse()\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.getOrElse(\"one\", {\"DEFAULT\"}))\n    println(map.getOrElse(\"nine\", {\"DEFAULT\"}))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nONE\nDEFAULT\n\n\n\n\u6307\u5b9a\u3057\u305f\u30ad\u30fc\u306b\u8a72\u5f53\u3059\u308b\u30a8\u30f3\u30c8\u30ea\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3059\u5024\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3068\u3057\u3066\u8fd4\u3059\u3002\n\n\nisEmpty(), isNotEmpty()\nfun main(args: Array<String>) {\n    val map = mapOf<String, String>()\n\n    println(map.isEmpty())\n    println(map.isNotEmpty())\n}\n\n\n\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n\n\n\n\nMap \u7a7a\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3067\u304d\u308b\u3002\n\n\nnone()\nfun main(args: Array<String>) {\n    val map1 = mapOf(\"one\" to \"ONE\")\n    val map2 = mapOf<String, String>()\n\n    println(map1.none())\n    println(map2.none())\n\n    println(map1.none {it.key == \"two\"})\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nfalse\ntrue\ntrue\n\n\n\n\nMap \u304c\u7a7a\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002\n\u30e9\u30e0\u30c0\u5f0f\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u6761\u4ef6\u3092\u7d5e\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\norEmpty()\nfun main(args: Array<String>) {\n    val map1 = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n    val map2: Map<String, String>? = null\n\n    println(map1.orEmpty())\n    println(map2.orEmpty())\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n{one=ONE, two=TWO, three=THREE}\n{}\n\n\n\n\nMap \u306e\u578b\u304c null \u53ef\u3067\u3001\u304b\u3064\u5b9f\u969b\u306b null \u3060\u3063\u305f\u5834\u5408\u306f\u7a7a\u306e Map \u3092\u8fd4\u3059\u3002\n\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f\u3001\u81ea\u5206\u81ea\u8eab\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u3002\n\n\nmap(), mapNotNull()\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.map { if (it.key == \"two\") null else \"${it.key}=${it.value}\" })\n    println(map.mapNotNull { if (it.key == \"two\") null else \"${it.key}=${it.value}\" })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[one=ONE, null, three=THREE]\n[one=ONE, three=THREE]\n\n\n\n\u5404\u30a8\u30f3\u30c8\u30ea\u3054\u3068\u306b\u30e9\u30e0\u30c0\u5f0f\u304c\u30b3\u30fc\u30eb\u3055\u308c\u308b\u3002\n\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u304c List \u306b\u8a70\u3081\u3089\u308c\u3066\u8fd4\u3055\u308c\u308b\u3002\n\nmap() \u306f\u3001 null \u304c\u8fd4\u3055\u308c\u305f\u5834\u5408\u306b\u305d\u308c\u3092\u305d\u306e\u307e\u307e List \u306b\u8a70\u3081\u308b\u3002\n\nmapNotNull() \u306f\u3001 null \u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3002\n\n\nmapKeys(), mapValues()\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.mapKeys { \"<${it.key}>\" })\n    println(map.mapValues { \"<${it.value}>\" })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n{<one>=ONE, <two>=TWO, <three>=THREE}\n{one=<ONE>, two=<TWO>, three=<THREE>}\n\n\n\n\u5404\u30a8\u30f3\u30c8\u30ea\u3054\u3068\u306b\u30e9\u30e0\u30c0\u5f0f\u304c\u30b3\u30fc\u30eb\u3055\u308c\u308b\u3002\n\nmapKeys() \u306f\u3001\u5404\u30a8\u30f3\u30c8\u30ea\u306e\u30ad\u30fc\u304c\u30e9\u30e0\u30c0\u5f0f\u306e\u8fd4\u3057\u305f\u5024\u3067\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\u3002\n\nmapValues() \u306f\u3001\u5404\u30a8\u30f3\u30c8\u30ea\u306e\u30d0\u30ea\u30e5\u30fc\u304c\u30e9\u30e0\u30c0\u5f0f\u306e\u8fd4\u3057\u305f\u5024\u3067\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\u3002\n\n\nmaxBy(), minBy()\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.maxBy { it.key })\n    println(map.minBy { it.key })\n}\n\n\n\u5b9f\u884c\u7d50\u679c\ntwo=TWO\none=ONE\n\n\n\n\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3067\u5404\u30a8\u30f3\u30c8\u30ea\u306e\u5927\u5c0f\u3092\u6bd4\u8f03\u3057\u3001\u6700\u5927\u6700\u5c0f\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n\nmaxWith(), minWith()\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    val comparator = Comparator<Map.Entry<String, String>> { a, b -> a.key.compareTo(b.key) }\n\n    println(map.maxWith(comparator))\n    println(map.minWith(comparator))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\ntwo=TWO\none=ONE\n\n\n\n\nComparator \u3067\u6bd4\u8f03\u65b9\u6cd5\u3092\u6307\u5b9a\u3057\u3066\u6700\u5927\u3001\u6700\u5c0f\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n\nplus()\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.plus(mapOf(\"four\" to \"FOUR\")))\n    println(map.plus(\"five\" to \"FIVE\"))\n    println(map.plus(listOf(\"six\" to \"SIX\")))\n\n    println(map + (\"seven\" to \"SEVEN\"))\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n{one=ONE, two=TWO, three=THREE, four=FOUR}\n{one=ONE, two=TWO, three=THREE, five=FIVE}\n{one=ONE, two=TWO, three=THREE, six=SIX}\n{one=ONE, two=TWO, three=THREE, seven=SEVEN}\n\n\n\n\nMap, Pair, List<Pair> \u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u8981\u7d20\u3092\u8ffd\u52a0\u3057\u305f\u65b0\u3057\u3044 Map \u3092\u8fd4\u3059\u3002\n\n+ \u6f14\u7b97\u5b50\u306b\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\ntoList()\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n    val list: List<Pair<String, String>> = map.toList()\n\n    println(list)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n[(one, ONE), (two, TWO), (three, THREE)]\n\n\n\n\nMap<K, V> \u3092 List<Pair<K, V>> \u306b\u5909\u63db\u3059\u308b\u3002\n\n\ntoProperties()\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n    val properties: Properties = map.toProperties()\n\n    println(properties)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n{two=TWO, one=ONE, three=THREE}\n\n\n\n\njava.util.Properties \u306b\u5909\u63db\u3059\u308b\u3002\n\n\ntoSortedMap()\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n    val sortedMap: SortedMap<String, String> = map.toSortedMap()\n\n    println(sortedMap)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n{one=ONE, three=THREE, two=TWO}\n\n\n\n\njava.util.SortedMap \u306b\u5909\u63db\u3059\u308b\u3002\n\n\nMutableMap \u306e\u30e1\u30bd\u30c3\u30c9\n\ngetOrPut\nfun main(args: Array<String>) {\n    val mutableMap = mutableMapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(mutableMap.getOrPut(\"one\", {\"DEFAULT\"}))\n    println(mutableMap)\n    println(mutableMap.getOrPut(\"four\", {\"DEFAULT\"}))\n    println(mutableMap)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nONE\n{one=ONE, two=TWO, three=THREE}\nDEFAULT\n{one=ONE, two=TWO, three=THREE, four=DEFAULT}\n\n\n\n\u6307\u5b9a\u3057\u305f\u30ad\u30fc\u306b\u8a72\u5f53\u3059\u308b\u30a8\u30f3\u30c8\u30ea\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3092\u8fd4\u3059\u3002\n\u3055\u3089\u306b\u3001\u6307\u5b9a\u3057\u305f\u30ad\u30fc\u3068\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3067\u30a8\u30f3\u30c8\u30ea\u304c\u8ffd\u52a0\u3055\u308c\u308b\u3002\n\n\nputAll\nfun main(args: Array<String>) {\n    val mutableMap = mutableMapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    mutableMap.putAll(mapOf(\"four\" to \"FOUR\", \"five\" to \"FIVE\"))\n    println(mutableMap)\n\n    mutableMap.putAll(listOf(\"six\" to \"SIX\"))\n    println(mutableMap)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n{one=ONE, two=TWO, three=THREE, four=FOUR, five=FIVE}\n{one=ONE, two=TWO, three=THREE, four=FOUR, five=FIVE, six=SIX}\n\n\n\n\nMap \u307e\u305f\u306f Pair \u3092\u6301\u3063\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u5168\u3066\u30a8\u30f3\u30c8\u30ea\u3068\u3057\u3066\u8ffd\u52a0\u3059\u308b\u3002\n\n\nplusAssign\nfun main(args: Array<String>) {\n    val mutableMap = mutableMapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    mutableMap.plusAssign(mapOf(\"four\" to \"FOUR\"))\n    mutableMap.plusAssign(\"five\" to \"FIVE\")\n    mutableMap.plusAssign(listOf(\"six\" to \"SIX\"))\n\n    mutableMap += \"seven\" to \"SEVEN\"\n\n    println(mutableMap)\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n{one=ONE, two=TWO, three=THREE, four=FOUR, five=FIVE, six=SIX, seven=SEVEN}\n\n\n\n\nputAll() \u3068\u3060\u3044\u305f\u3044\u540c\u3058\u3002\n\nPair \u5358\u72ec\u3067\u6307\u5b9a\u53ef\u80fd\u3060\u3063\u305f\u308a\u3001 += \u3067\u7f6e\u304d\u63db\u3048\u53ef\u80fd\u3060\u3063\u305f\u308a\u3059\u308b\u70b9\u304c\u7570\u306a\u308b\u3002\n\n\n\u53c2\u8003\n\nkotlin-rev-solution/keyword-for-kotlin.md at master \u00b7 yyYank/kotlin-rev-solution\nGenerics - Kotlin Programming Language\n\nKotolin \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u306e\u30e1\u30e2\u3002\n\n# Kotlin \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\nKotlin \u306b\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u3001\u305d\u306e\u4e2d\u306b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3082\u5b58\u5728\u3059\u308b\u3002\n\n## \u7279\u5fb4\n- Kotlin \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306f\u3001\u300c\u8aad\u307f\u53d6\u308a\u5c02\u7528\u300d\u3068\u300c\u66f8\u304d\u8fbc\u307f\u53ef\u300d\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u660e\u78ba\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u3002\n- `listOf()`, `mapOf()` \u306a\u3069\u3001\u95a2\u6570\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3002\n- Stream API \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306a `filter()` \u306a\u3069\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u3001 `Iterable` \u306a\u3069\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\n\n## \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u7a2e\u985e\n- [List](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html)\n- [Map](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-map/index.html)\n- [Set](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/index.html)\n\n## \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u95a2\u4fc2\n![kotlin.collections.png](https://qiita-image-store.s3.amazonaws.com/0/28302/cfb98f23-45ee-f275-0f65-80dbf8e2d04a.png)\n\n`kotlin.collections` \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u4e0b\u306b\u3042\u308b\u5404\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u3069\u306e\u3088\u3046\u306a\u95a2\u4fc2\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u3001\u30af\u30e9\u30b9\u56f3\u3067\u8868\u73fe\u3057\u305f\u3002\n\n\u57fa\u672c\u306f JDK \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u540c\u3058\u69cb\u6210\u3060\u304c\u3001 `MutableIterable` \u306a\u3069\u66f8\u304d\u8fbc\u307f\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u533a\u5225\u3059\u308b\u305f\u3081\u306b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u3002\n\n`List` \u306a\u3069\u306e `Mutable` \u304c\u4ed8\u3044\u3066\u3044\u306a\u3044\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u306f\u3001\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u72b6\u614b\u3092\u5909\u66f4\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3002\n\u3053\u308c\u3089\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u3042\u304f\u307e\u3067\u8aad\u307f\u53d6\u308a\u5c02\u7528\u3067\u3057\u304b\u306a\u3044\u3002\n\n### \u8aad\u307f\u53d6\u308a\u5c02\u7528\u3068\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306e\u9055\u3044\n[Twitter \u3067\u6307\u6458](https://twitter.com/kmizu/status/739150557391118337)\u3092\u53d7\u3051\u305f\u306e\u3067\u4fee\u6b63\u3057\u307e\u3059\uff08\u5b8c\u5168\u306b\u52d8\u9055\u3044\u3057\u3066\u307e\u3057\u305f\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff09\u3002\n\nKotlin \u306e `List` \u3084 `Set` \u306f\u3042\u304f\u307e\u3067\u300c\u8aad\u307f\u53d6\u308a\u5c02\u7528\u300d\u3067\u3042\u308a\u3001\u300c\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u300d\u3067\u306f\u306a\u3044\u3002\n\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3068\u3001\u7c21\u5358\u306b `List` \u306e\u4e2d\u8eab\u3092\u5909\u66f4\u3067\u304d\u3066\u3057\u307e\u3046\u3002\n\n```kotlin\nfun main(args: Array<String>) {\n    val mutableList = mutableListOf(1, 2, 3)\n    val list: List<Int> = mutableList\n\n    mutableList.add(9)\n\n    println(mutableList)\n    println(list)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 9]\n[1, 2, 3, 9]\n```\n\n`MutableList` \u306f `List` \u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u306e\u3067\u3001 `MutableList` \u3092 `List` \u306e\u5909\u6570\u306b\u4ee3\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u7d50\u679c\u3001 `List` \u306e\u4e2d\u8eab\u306f\u3069\u3053\u304b\u5225\u306e\u5834\u6240\u3067\u66f8\u304d\u63db\u3048\u3089\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\n\u3042\u304f\u307e\u3067\u300c\u8aad\u307f\u53d6\u308a\u5c02\u7528\u300d\u3067\u3042\u3063\u3066\u3001\u300c\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u300d\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u306e\u306f\u3001\u3053\u3046\u3044\u3046\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u308b\u3002\n\n\n## Java \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3068 Kotlin \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u30de\u30c3\u30d4\u30f3\u30b0\nJava \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\uff08`java.util.List` \u306a\u3069\uff09\u3092 Kotlin \u304b\u3089\u4f7f\u3046\u5834\u5408\u3001\u3044\u304f\u3064\u304b\u306e\u578b\u306f\u81ea\u52d5\u7684\u306b Kotlin \u306e\u578b\u306b\u5909\u63db\u3055\u308c\u308b\u3002\n\n\u4f8b\u3048\u3070\u3001 `java.util.Iterator` \u578b\u306f Kotlin \u5074\u306e\u30b3\u30fc\u30c9\u3067\u4f7f\u7528\u3059\u308b\u969b\u306f `kotlin.collection.Iterator` \u306b\u5909\u63db\u3055\u308c\u308b\u3002\n\u3053\u306e\u305f\u3081\u3001 Java \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3082\u3001 Kotlin \u306b\u7528\u610f\u3055\u308c\u305f\u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9\uff08`all()`, `filter()` \u306a\u3069\uff09\u3092\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\nJava \u306e\u3069\u306e\u578b\u304c\u3001 Kotlin \u306e\u3069\u306e\u578b\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u308b\u304b\u306f\u3001\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u306b\u66f8\u3044\u3066\u3042\u308b\u3002\n\n[Mapped types | Calling Java code from Kotlin](https://kotlinlang.org/docs/reference/java-interop.html#mapped-types)\n\n\n#\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u751f\u6210\nKotlin \u3067\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u3001\u5c02\u7528\u306e\u30d5\u30a1\u30af\u30c8\u30ea\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3002\n\n## \u8aad\u307f\u53d6\u308a\u5c02\u7528\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3059\u308b\n```kotlin\nval list = listOf(1, 2, 3)\nval map = mapOf(\"foo\" to \"FOO\", \"bar\" to \"BAR\")\nval set = setOf(9, 8, 7)\n```\n\n- `listOf()`, `mapOf()`, `setOf()` \u95a2\u6570\u3067\u3001\u305d\u308c\u305e\u308c\u8aad\u307f\u53d6\u308a\u5c02\u7528\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3067\u304d\u308b\u3002\n\n### null \u3092\u9664\u3044\u305f List \u3092\u751f\u6210\u3059\u308b\n```kotlin\nfun main(args: Array<String>) {\n    val list = listOf(null, 1, 2, 3, null)\n    val notNullList = listOfNotNull(null, 1, 2, 3, null)\n\n    println(list)\n    println(notNullList)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[null, 1, 2, 3, null]\n[1, 2, 3]\n```\n\n- `listOfNotNull()` \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3001 `null` \u3092\u53d6\u308a\u9664\u3044\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u751f\u6210\u3055\u308c\u308b\u3002\n\n## \u66f8\u304d\u8fbc\u307f\u53ef\u80fd\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3059\u308b\n```kotlin\nval list = mutableListOf(1, 2, 3)\nval map = mutableMapOf(\"foo\" to \"FOO\", \"bar\" to \"BAR\")\nval set = mutableSetOf(9, 8, 7)\n```\n\n- `mutableListOf()`, `mutableMapOf()`, `mutableSetOf()` \u95a2\u6570\u3067\u3001\u305d\u308c\u305e\u308c\u66f8\u304d\u8fbc\u307f\u53ef\u80fd\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3067\u304d\u308b\u3002\n\n## Java \u6a19\u6e96\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3059\u308b\n```kotlin\nfun main(args: Array<String>) {\n    printClass(\"arrayListOf\", arrayListOf<Int>())\n\n    printClass(\"hashSetOf\", hashSetOf<Int>())\n    printClass(\"linkedSetOf\", linkedSetOf<Int>())\n    printClass(\"sortedSetOf\", sortedSetOf<Int>())\n    \n    printClass(\"hashMapOf\", hashMapOf<Int, Int>())\n    printClass(\"linkedMapOf\", linkedMapOf<Int, Int>())\n    printClass(\"sortedMapOf\", sortedMapOf<Int, Int>())\n}\n\nfun printClass(functionName: String, collection: Any) {\n    println(\"$functionName = ${collection.javaClass}\")\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\narrayListOf = class java.util.ArrayList\n\nhashSetOf = class java.util.HashSet\nlinkedSetOf = class java.util.LinkedHashSet\nsortedSetOf = class java.util.TreeSet\n\nhashMapOf = class java.util.HashMap\nlinkedMapOf = class java.util.LinkedHashMap\nsortedMapOf = class java.util.TreeMap\n```\n\n- `arrayListOf()` \u306a\u3069\u3001 Java \u6a19\u6e96\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3067\u304d\u308b\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n\n# \u30d7\u30ed\u30d1\u30c6\u30a3\n## indices\n```kotlin\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 3)\n\n    val indices: IntRange = list.indices\n    println(indices)\n\n    for (i in list.indices) {\n        println(list[i])\n    }\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n0..2\n1\n2\n3\n```\n\n- `Array` \u307e\u305f\u306f `Collection` \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u3002\n- \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7bc4\u56f2\u3092\u8868\u3059 `IntRange` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002\n- `indices` \u306f `index` \u306e\u8907\u6570\u5f62\u3002\n\n## lastIndex\n```kotlin\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 3)\n\n    println(list.lastIndex)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n2\n```\n\n- `Array` \u307e\u305f\u306f `List` \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u3002\n- \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u6700\u5f8c\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n\n\n# \u7279\u5b9a\u306e\u30eb\u30fc\u30eb\u3067\u547d\u540d\u3055\u308c\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u306b\u306f\u3001\u3042\u308b\u7279\u5b9a\u306e\u30eb\u30fc\u30eb\u3067\u540d\u524d\u304c\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u5b58\u5728\u3059\u308b\u3002\n\n## To\uff1a\u51e6\u7406\u7d50\u679c\u3092\u66f8\u304d\u8fbc\u307f\u53ef\u80fd\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u8ffd\u52a0\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    val result = mutableListOf(\"<9>\")\n    iterable.mapTo(result) { \"<$it>\" }\n\n    println(result)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[<9>, <1>, <2>, <3>, <4>, <5>]\n```\n\n- \u672b\u5c3e\u306b `To` \u304c\u3064\u3044\u305f\u30e1\u30bd\u30c3\u30c9\u306b\u306f\u3001\u66f8\u304d\u8fbc\u307f\u53ef\u80fd\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n- \u51e6\u7406\u7d50\u679c\u306f\u3001\u5f15\u6570\u3067\u6e21\u3057\u305f\u66f8\u304d\u8fbc\u307f\u53ef\u80fd\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u8ffd\u52a0\u3055\u308c\u308b\u3002\n\n## Indexed\uff1a\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u306b\u30eb\u30fc\u30d7\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3082\u6e21\u3059\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    iterable.forEachIndexed { index, value -> println(\"[$index] = $value\") }\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[0] = 1\n[1] = 2\n[2] = 3\n[3] = 4\n[4] = 5\n```\n\n- \u30e1\u30bd\u30c3\u30c9\u540d\u306b `Indexed` \u304c\u542b\u307e\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u306b\u30eb\u30fc\u30d7\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u6e21\u3055\u308c\u308b\u3002\n\n# \u30e1\u30bd\u30c3\u30c9\u9006\u5f15\u304d\nStream API \u306e\u3042\u308c\u3001 Kotlin \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3060\u3068\u3069\u308c\uff1f\n\n|                Java                |                         Kotlin Collections                         |\n|------------------------------------|--------------------------------------------------------------------|\n| `Stream.allMatch()`                | [Iterable.all()](#all), [Map.all()](#all-1)                        |\n| `Stream.anyMatch()`                | [Iterable.any()](#any), [Map.any()](#any-1)                        |\n| `Stream.count()`                   | [Iterable.count()](#count), [Map.count()](#count-1)                |\n| `Stream.distinct()`                | [Iterable.distinct()](#distinct)                                   |\n| `Stream.filter()`                  | [Iterable.filter()](#filter), [Map.filter()](#filter-filternot)    |\n| `Stream.findFirst()`               | [Iterable.first()](#first), [Iterable.firstOrNull()](#firstornull) |\n| `Stream.flatMap()`                 | [Iterable.flatMap()](#flatmap), [Map.flatMap()](#flatmap-1)        |\n| `Stream.forEach()`                 | [Iterable.forEach()](#foreach), [Map.forEach()](#foreach-1)        |\n| `Stream.limit()`                   | [Iterable.take()](#take)                                           |\n| `Stream.map()`                     | [Iterable.map()](#map), [Map.map()](#map-mapnotnull)               |\n| `Stream.max()`                     | [Iterable.max()](#max-min), [Map.maxBy()](#maxby-minby-1)          |\n| `Stream.min()`                     | [Iterable.min()](#max-min), [Map.minBy()](#maxby-minby-1)          |\n| `Stream.noneMatch()`               | [Iterable.none()](#none), [Map.none()](#none-1)                    |\n| `Stream.peek()`                    | \u306a\u3057\uff1f                                                             |\n| `Stream.reduce()`                  | [Iterable.reduce()](#reduce)                                       |\n| `Stream.sorted()`                  | [Iterable.sorted()](#sorted-sorteddescending)                      |\n| `Stream.skip()`                    | \u306a\u3057\uff1f                                                             |\n| `Stream.collect(toList())`         | [Iterable.toList()](#tolist), [Map.toList()](#tolist-1)            |\n| `Stream.collect(toMap())`          | [Iterable.toMap()](#tomap)                                         |\n| `Stream.collect(toSet())`          | [Iterable.toSet()](#toset)                                         |\n| `Stream.collect(joining())`        | [Iterable.joinToString()](#jointostring)                           |\n| `Stream.collect(partitioningBy())` | [Iterable.partition()](#partition)                                 |\n| `Stream.collect(groupingBy())`     | [Iterable.groupBy()](#groupby)                                     |\n| `Stream.collect(reducing())`       | [Iterable.fold()](#fold)                                           |\n| `IntStream.sum()`                  | [Iterable.sum()](#sum)                                             |\n| `IntStream.average()`              | [Iterable.average()](#average)                                     |\n\n\n# Iterable \u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\n## Iterable \u306e\u30e1\u30bd\u30c3\u30c9\n### all()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.all { it < 4 })\n    println(iterable.all { it < 3 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n```\n\n- \u5168\u3066\u306e\u8981\u7d20\u304c\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u5834\u5408\u306b `true` \u3092\u8fd4\u3059\u3002\n\n### any()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.any { it < 4 })\n    println(iterable.any { it < 0 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n```\n\n- \u3044\u305a\u308c\u304b\u306e\u8981\u7d20\u304c\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u5834\u5408\u306b `true` \u3092\u8fd4\u3059\u3002\n\n### associate()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    val map = iterable.associate { it to it*10 }\n\n    println(map)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n{1=10, 2=20, 3=30}\n```\n\n- \u5404\u8981\u7d20\u3054\u3068\u306b `Pair` \u3092\u8fd4\u3059\u3053\u3068\u3067\u3001 `Map` \u306b\u5909\u63db\u3057\u305f\u7d50\u679c\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n\n### associateBy()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    val map = iterable.associateBy { it*10 }\n\n    println(map)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n{10=1, 20=2, 30=3}\n```\n\n- \u5404\u8981\u7d20\u306b\u5bfe\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u304c\u5b9f\u884c\u3055\u308c\u3001`\u30ad\u30fc:\u30d0\u30ea\u30e5\u30fc` \u304c `\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024:\u5404\u8981\u7d20\u306e\u3082\u3068\u306e\u5024` \u3068\u306a\u308b `Map` \u304c\u8fd4\u3055\u308c\u308b\u3002\n\n### average()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    val average = iterable.average()\n\n    println(average)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n2.0\n```\n\n- `Iterable` \u306e\u5404\u8981\u7d20\u306e\u5e73\u5747\u5024\u3092\u53d6\u5f97\u3059\u308b\u3002\n- \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001 `Iterable` \u306e\u578b\u5f15\u6570\u304c `Int` \u3084 `Float` \u306a\u3069\u6570\u5024\u8a08\u7b97\u304c\u53ef\u80fd\u306a\u578b\u306e\u5834\u5408\u306b\u306e\u307f\u4f7f\u7528\u3067\u304d\u308b\u3002\n- `Iterable<String>` \u3067\u4f7f\u7528\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n\n### contains()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.contains(2))\n    println(iterable.contains(4))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n```\n\n- \u6307\u5b9a\u3057\u305f\u8981\u7d20\u304c `Iterable` \u5185\u306b\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002\n\n### count()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.count())\n    println(iterable.count {it % 2 == 1})\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n3\n2\n```\n\n- \u8981\u7d20\u6570\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n- `boolean` \u3092\u8fd4\u3059\u30e9\u30e0\u30c0\u5f0f\u3092\u5f15\u6570\u306b\u6e21\u3059\u3053\u3068\u3067\u3001\u6761\u4ef6\u306b\u4e00\u81f4\u3057\u305f\u8981\u7d20\u306e\u6570\u3060\u3051\u3092\u30ab\u30a6\u30f3\u30c8\u3067\u304d\u308b\u3002\n\n### distinct()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 1, 2, 2, 3, 1, 3)\n\n    println(iterable.distinct())\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n```\n\n- \u91cd\u8907\u3059\u308b\u8981\u7d20\u3092\u524a\u9664\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3059\u3002\n\n### distinctBy()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(\"foo\", \"bar\", \"fizz\", \"buzz\", \"hoge\")\n\n    println(iterable.distinctBy { it.length })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[foo, fizz]\n```\n\n- \u91cd\u8907\u3092\u5224\u65ad\u3059\u305f\u3081\u306e\u6761\u4ef6\u3092\u3001\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3059\u308b\u3002\n- \u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u304c\u7b49\u3057\u3044\u8981\u7d20\u306f\u91cd\u8907\u3068\u5224\u65ad\u3055\u308c\u308b\u3002\n\n### drop()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.drop(2))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[3, 4, 5]\n```\n\n- \u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u6570\u3060\u3051\u5148\u982d\u304b\u3089\u8981\u7d20\u3092\u524a\u9664\u3057\u3066\u3001\u6b8b\u3063\u305f\u8981\u7d20\u3092\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u8fd4\u3059\u3002\n\n### dropWhile()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.dropWhile { it != 4 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[4, 5]\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u304c `true` \u3092\u8fd4\u3059\u307e\u3067\u306e\u8981\u7d20\u3092\u524a\u9664\u3057\u3066\u3001\u6b8b\u3063\u305f\u8981\u7d20\u3092\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u8fd4\u3059\u3002\n\n### elementAt()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.elementAt(2))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n3\n```\n\n- \u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n- \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u7bc4\u56f2\u5916\u3060\u3063\u305f\u5834\u5408\u306f `IndexOutOfBoundsException` \u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3002\n\n### elementAtOrElse()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.elementAtOrElse(0, { it * 10 }))\n    println(iterable.elementAtOrElse(5, { it * 10 }))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n1\n50\n```\n\n- \u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u7bc4\u56f2\u5916\u3060\u3063\u305f\u5834\u5408\u306b\u8fd4\u3059\u5024\u3092\u3001\u7b2c\u4e8c\u5f15\u6570\u306e\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3059\u308b\u3002\n\n### elementAtOrNull()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.elementAtOrNull(0))\n    println(iterable.elementAtOrNull(5))\n}\n```\n\n- \u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u7bc4\u56f2\u5916\u3060\u3063\u305f\u5834\u5408\u306b `null` \u3092\u8fd4\u3059\u3002\n\n### filter()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.filter { it % 2 != 0 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 3]\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u3060\u3051\u3092\u62bd\u51fa\u3057\u3066\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u8fd4\u3059\u3002\n\n### filterIsInstance()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable: Iterable<*> = listOf(1, \"foo\", 2.4, false)\n\n    println(iterable.filterIsInstance<Number>())\n    println(iterable.filterIsInstance(String::class.java))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2.4]\n```\n\n- \u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u6307\u5b9a\u3057\u305f\u578b\u3068\u4e92\u63db\u306e\u3042\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3060\u3051\u3092\u62bd\u51fa\u3057\u3066\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u8fd4\u3059\u3002\n- \u5f15\u6570\u306b `Class` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3059\u3053\u3068\u3067\u578b\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\n### filterNot()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n    \n    println(iterable.filterNot { it % 2 == 0 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 3, 5]\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3057\u306a\u3044\u8981\u7d20\u3060\u3051\u3092\u62bd\u51fa\u3057\u3066\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u8fd4\u3059\u3002\n\n### filterNotNull()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, null, 3, null, 5)\n\n    println(iterable.filterNotNull())\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 3, 5]\n```\n\n- `null` \u8981\u7d20\u3092\u53d6\u308a\u9664\u3044\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u8fd4\u3059\u3002\n\n### find()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.find { it % 2 == 0 })\n    println(iterable.find { it % 6 == 0 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n2\nnull\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3057\u305f\u6700\u521d\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n- \u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f `null` \u3092\u8fd4\u3059\u3002\n\n### findLast()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.findLast { it % 2 == 0 })\n    println(iterable.findLast { it % 6 == 0 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n4\nnull\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3057\u305f\u6700\u5f8c\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n- \u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f `null` \u3092\u8fd4\u3059\u3002\n\n### first()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.first())\n    println(iterable.first { it % 2 == 0 })\n    println(iterable.first { it % 6 == 0 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n1\n2\nException in thread \"main\" java.util.NoSuchElementException: No element matching predicate was found.\n```\n\n- \u5148\u982d\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n- \u30e9\u30e0\u30c0\u5f0f\u3067\u6761\u4ef6\u3092\u7d5e\u308a\u8fbc\u3081\u308b\u3002\n- \u8a72\u5f53\u3059\u308b\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u4f8b\u5916\u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3002\n\n### firstOrNull()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.firstOrNull())\n    println(iterable.firstOrNull { it % 2 == 0 })\n    println(iterable.firstOrNull { it % 6 == 0 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n1\n2\nnull\n```\n\n- \u5148\u982d\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n- \u30e9\u30e0\u30c0\u5f0f\u3067\u6761\u4ef6\u3092\u7d5e\u308a\u8fbc\u3081\u308b\u3002\n- \u8a72\u5f53\u3059\u308b\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f null \u304c\u8fd4\u3055\u308c\u308b\u3002\n\n\n### last()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.last())\n    println(iterable.last { it % 2 == 0 })\n    println(iterable.last { it % 6 == 0 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n5\n4\nException in thread \"main\" java.util.NoSuchElementException: Collection doesn't contain any element matching the predicate.\n```\n\n- \u6700\u5f8c\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n- \u5f15\u6570\u306e\u30e9\u30e0\u30c0\u5f0f\u3067\u3001\u53d6\u5f97\u3059\u308b\u6761\u4ef6\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n- \u5bfe\u5fdc\u3059\u308b\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u4f8b\u5916\u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3002\n\n### lastOrNull()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.lastOrNull())\n    println(iterable.lastOrNull { it % 2 == 0 })\n    println(iterable.lastOrNull { it % 6 == 0 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n5\n4\nnull\n```\n\n- \u6700\u5f8c\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n- \u5f15\u6570\u306e\u30e9\u30e0\u30c0\u5f0f\u3067\u3001\u53d6\u5f97\u3059\u308b\u6761\u4ef6\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n- \u5bfe\u5fdc\u3059\u308b\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u3001 null \u304c\u8fd4\u3055\u308c\u308b\u3002\n\n\n### flatMap()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable: Iterable<Iterable<Int>> = listOf(\n        listOf(1, 2, 3),\n        listOf(4, 5, 6),\n        listOf(7, 8, 9)\n    )\n\n    println(iterable.flatMap { it })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f `Iterable` \u3092\u9023\u7d50\u3057\u3066\u8fd4\u3059\u3002\n\n### flatten()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable: Iterable<Iterable<Int>> = listOf(\n        listOf(1, 2, 3),\n        listOf(4, 5, 6),\n        listOf(7, 8, 9)\n    )\n\n    println(iterable.flatten())\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n- \u5165\u308c\u5b50\u306e `Iterable` \u3092\u3001\u5358\u4e00\u306e `Iterable` \u306b\u8a70\u3081\u66ff\u3048\u76f4\u3059\uff08\u30d5\u30e9\u30c3\u30c8\u306b\u3059\u308b\uff09\u3002\n\n### fold()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(\"a\", \"b\", \"c\")\n\n    println(iterable.fold(\"Z\", { buf, value -> buf + value }))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\nZabc\n```\n\n- \u7b2c\u4e00\u5f15\u6570\u3067\u521d\u671f\u5024\u3092\u6307\u5b9a\u3059\u308b\u3002\n- \u30e9\u30e0\u30c0\u5f0f\u304c\u5404\u8981\u7d20\u3054\u3068\u306b\u30b3\u30fc\u30eb\u3055\u308c\u308b\u3002\n    - \u7b2c\u4e00\u5f15\u6570\u306b\u306f\u3001\u521d\u671f\u5024\u3067\u6307\u5b9a\u3057\u305f\u5024\u304c\u6700\u521d\u306b\u6e21\u3055\u308c\u3001\u4ee5\u5f8c\u306f\u524d\u56de\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u304c\u6e21\u3055\u308c\u308b\u3002\n    - \u7b2c\u4e8c\u5f15\u6570\u306b\u306f\u3001 `Iterable` \u306e\u5404\u8981\u7d20\u304c\u6e21\u3055\u308c\u308b\u3002\n\n### forEach()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    iterable.forEach { println(it) }\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n1\n2\n3\n```\n\n- \u5404\u8981\u7d20\u3092\u51e6\u7406\u3059\u308b\u3002\n\n### groupBy()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5, 6, 7)\n\n    val result1: Map<String, List<Int>> =\n        iterable.groupBy { if (it % 2 == 0) \"\u5076\u6570\" else \"\u5947\u6570\" }\n\n    println(result1)\n\n\n    val result2: Map<String, List<String>> =\n        iterable.groupBy(\n            { if (it % 2 == 0) \"\u5076\u6570\" else \"\u5947\u6570\" },\n            { \"<$it>\"}\n        )\n\n    println(result2)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n{\u5947\u6570=[1, 3, 5, 7], \u5076\u6570=[2, 4, 6]}\n{\u5947\u6570=[<1>, <3>, <5>, <7>], \u5076\u6570=[<2>, <4>, <6>]}\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3054\u3068\u306b\u5404\u8981\u7d20\u3092\u5206\u985e\u3057\u3066\u3001 `Map` \u8a70\u3081\u3066\u8fd4\u3059\u3002\n- \u7b2c\u4e8c\u5f15\u6570\u306b\u30e9\u30e0\u30c0\u5f0f\u3092\u8ffd\u52a0\u3059\u308c\u3070\u3001\u5404\u8981\u7d20\u3092\u4efb\u610f\u306e\u5024\u306b\u5909\u63db\u3067\u304d\u308b\u3002\n\n### indexOfFirst()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.indexOfFirst { it % 2 == 0 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n1\n```\n\n- \u6307\u5b9a\u3057\u305f\u30e9\u30e0\u30c0\u5f0f\u306e\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u6700\u521d\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\u3002\n\n### indextOfLast()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.indexOfLast { it % 2 == 0 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n3\n```\n\n- \u6307\u5b9a\u3057\u305f\u30e9\u30e0\u30c0\u5f0f\u306e\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u6700\u5f8c\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\u3002\n\n### intersect()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n    val other = listOf(2, 3, 5, 2)\n\n    val result: Set<Int> = iterable.intersect(other)\n\n    println(result)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[2, 3, 5]\n```\n\n- \u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f `Iterable` \u3068\u91cd\u8907\u3059\u308b\u8981\u7d20\u3060\u3051\u3092\u62bd\u51fa\u3057\u3066\u3001 `Set` \u306b\u8a70\u3081\u3066\u8fd4\u3059\u3002\n\n### joinTo()\n#### \u57fa\u672c\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n    val buffer: Appendable = StringBuilder()\n\n    iterable.joinTo(buffer)\n\n    println(buffer)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n1, 2, 3, 4, 5\n```\n\n- \u5404\u8981\u7d20\u3092\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u3092\u3001\u6307\u5b9a\u3057\u305f `Appendable` \u306b\u8a2d\u5b9a\u3059\u308b\u3002\n- \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u5404\u8981\u7d20\u3092\u534a\u89d2\u30ab\u30f3\u30de\u533a\u5207\u308a\u3067\u9023\u7d50\u3057\u305f\u6587\u5b57\u5217\u304c\u8a2d\u5b9a\u3055\u308c\u308b\u3002\n\n#### \u9023\u7d50\u65b9\u6cd5\u3092\u8abf\u6574\u3059\u308b\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n    val buffer: Appendable = StringBuilder()\n\n    iterable.joinTo(\n        buffer = buffer,\n        separator = \" - \",\n        prefix = \"{\",\n        postfix = \"}\",\n        limit = 3,\n        truncated = \"(ry\",\n        transform = { \"<$it>\" }\n    )\n\n    println(buffer)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n{<1> - <2> - <3> - (ry}\n```\n\n|\u5f15\u6570|\u8aac\u660e|\u30c7\u30d5\u30a9\u30eb\u30c8\u5024|\n|---|---|---|\n|`separator`|\u533a\u5207\u308a\u6587\u5b57          |`, ` |\n|`prefix`   |\u5148\u982d\u306b\u8a2d\u5b9a\u3059\u308b\u6587\u5b57\u5217 |`\"\"` |\n|`postfix`  |\u672b\u5c3e\u306b\u8a2d\u5b9a\u3059\u308b\u6587\u5b57\u5217 |`\"\"` |\n|`limit`    |\u9023\u7d50\u3059\u308b\u8981\u7d20\u306e\u6700\u5927\u5024 |-1   |\n|`truncated`|\u7701\u7565\u3055\u308c\u305f\u8981\u7d20\u306e\u8868\u8a18 |`...`|\n|`transform`|\u5404\u8981\u7d20\u3092\u4efb\u610f\u306e\u5024\u306b\u5909\u63db\u3059\u308b\u51e6\u7406|`null`|\n\n### joinToString()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n    \n    println(iterable.joinToString())\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n1, 2, 3, 4, 5\n```\n\n- `joinTo()` \u30e1\u30bd\u30c3\u30c9\u306e\u7d50\u679c\u3092 `Appendable` \u306b\u8a2d\u5b9a\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u305d\u306e\u307e\u307e\u6587\u5b57\u5217\u3068\u3057\u3066\u8fd4\u5374\u3059\u308b\u3002\n- `separator` \u306a\u3069\u306e\u5f15\u6570\u306f\u3001 `joinTo()` \u3068\u540c\u3058\u3088\u3046\u306b\u6307\u5b9a\u3067\u304d\u308b\u3002\n\n### map()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.map { it * 10 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[10, 20, 30, 40, 50]\n```\n\n- \u5404\u8981\u7d20\u3092\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3067\u7f6e\u304d\u63db\u3048\u305f\u65b0\u3057\u3044\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u3002\n\n### mapNotNull()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.mapNotNull { if (it % 2 == 0) it else null })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[2, 4]\n```\n\n- \u5404\u8981\u7d20\u3092\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3067\u7f6e\u304d\u63db\u3048\u305f\u65b0\u3057\u3044\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u3002\n- \u305f\u3060\u3057\u3001\u30e9\u30e0\u30c0\u5f0f\u304c `null` \u3092\u8fd4\u3057\u305f\u5834\u5408\u306f\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u308b\u3002\n\n### max(), min()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.max())\n    println(iterable.min())\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n5\n1\n```\n\n- `max()` \u3067\u6700\u5927\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n- `min()` \u3067\u6700\u5c0f\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n- \u8981\u7d20\u306f `Comparable` \u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n### maxBy(), minBy()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(\"zz\", \"yyy\", \"xxxx\")\n\n    println(iterable.maxBy { it.length })\n    println(iterable.minBy { it.length })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\nxxxx\nzz\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3067\u5927\u5c0f\u3092\u6bd4\u8f03\u3059\u308b\u3002\n- `maxBy()` \u3067\u6700\u5927\u3001 `minBy()` \u3067\u6700\u5c0f\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n### maxWith(), minWith()\n```kotlin\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.maxWith(Comparator { a, b -> b - a }))\n    println(iterable.minWith(Comparator { a, b -> b - a }))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n1\n5\n```\n\n- \u5f15\u6570\u306b `Comparator` \u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u5927\u5c0f\u6bd4\u8f03\u306e\u65b9\u6cd5\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n- `maxWith()` \u3067\u6700\u5927\u3001 `minWith()` \u3067\u6700\u5c0f\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n### minus()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable1 = listOf(1, 1, 2, 2, 3, 4, 5)\n    val iterable2 = listOf(2, 4, 5);\n\n    println(iterable1.minus(1))\n    println(iterable1.minus(iterable2))\n    println(iterable1 - iterable2)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 2, 3, 4, 5]\n[1, 1, 3]\n[1, 1, 3]\n```\n\n- \u6307\u5b9a\u3057\u305f\u8981\u7d20\u3092\u53d6\u308a\u9664\u3044\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u3002\n- \u8981\u7d20\uff11\u3064\u3060\u3051\u3092\u5f15\u6570\u306b\u6e21\u3057\u305f\u5834\u5408\u306f\u3001\u8a72\u5f53\u3059\u308b\u6700\u521d\u306e\u8981\u7d20\u3060\u3051\u304c\u9664\u53bb\u3055\u308c\u308b\u3002\n- `Iterable` \u3084 `List`, `Sequence` \u3092\u6e21\u3059\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n- `-` \u6f14\u7b97\u5b50\u3067\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\n### plus()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable1 = listOf(1, 2, 3)\n    val iterable2 = listOf(3, 5)\n\n    println(iterable1.plus(6))\n    println(iterable1.plus(iterable2))\n    println(iterable1 + iterable2)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 6]\n[1, 2, 3, 3, 5]\n[1, 2, 3, 3, 5]\n```\n\n- \u6307\u5b9a\u3057\u305f\u8981\u7d20\u3092\u8ffd\u52a0\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u3002\n- \u4ed6\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n- `+` \u6f14\u7b97\u5b50\u3067\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n### none()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable1 = listOf(1, 2, 3)\n    val iterable2 = listOf<Int>();\n\n    println(iterable1.none())\n    println(iterable2.none())\n\n    println(iterable1.none {it < 2})\n    println(iterable1.none {it < 1})\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\nfalse\ntrue\nfalse\ntrue\n```\n\n- \u8981\u7d20\u3092\u6301\u305f\u306a\u3044\u5834\u5408\u306b `true` \u3092\u8fd4\u3059\u3002\n- \u30e9\u30e0\u30c0\u5f0f\u3067\u6761\u4ef6\u3092\u7d5e\u308a\u8fbc\u3081\u308b\u3002\n\n### partition()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    val pair: Pair<Iterable<Int>, Iterable<Int>> = iterable.partition { it % 2 == 0 }\n\n    println(pair)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n([2, 4], [1, 3, 5])\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u3067\u8981\u7d20\u3092\u4e8c\u5206\u3057\u3066 `Pair` \u3067\u8fd4\u3059\u3002\n- \u6761\u4ef6\u304c `true` \u3068\u306a\u3063\u305f\u8981\u7d20\u304c `first` \u306b\u3001 `false` \u3068\u306a\u3063\u305f\u8981\u7d20\u304c `second` \u306b\u30bb\u30c3\u30c8\u3055\u308c\u308b\u3002\n\n### reduce()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(\"a\", \"b\", \"c\")\n\n    println(iterable.reduce {tmp, value ->\n        println(\"tmp=$tmp, value=$value\")\n        tmp + \":\" + value\n    })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\ntmp=a, value=b\ntmp=a:b, value=c\na:b:c\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u306b\u3088\u308b\u5909\u63db\u3092\u7a4d\u307f\u91cd\u306d\u306a\u304c\u3089\u5404\u8981\u7d20\u3092\u51e6\u7406\u3059\u308b\u3002\n- \u30e9\u30e0\u30c0\u5f0f\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u3001\u521d\u56de\u306f\u5148\u982d\u8981\u7d20\u304c\u6e21\u3055\u308c\u3001\u4ee5\u5f8c\u306f\u524d\u56de\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u304c\u6e21\u3055\u308c\u308b\u3002\n\n### requireNoNulls()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(\"a\", \"b\", null, \"c\")\n\n    println(iterable.requireNoNulls())\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\nException in thread \"main\" java.lang.IllegalArgumentException: null element found in [a, b, null, c].\n    at kotlin.collections.CollectionsKt___CollectionsKt.requireNoNulls(_Collections.kt:1583)\n```\n\n- \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u5185\u306b `null` \u304c\u5b58\u5728\u3057\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002\n- `null` \u304c\u5b58\u5728\u3057\u305f\u5834\u5408\u306f `IllegalArgumentException` \u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3002\n\n### reversed()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4)\n\n    println(iterable.reversed())\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[4, 3, 2, 1]\n```\n\n- \u4e2d\u8eab\u3092\u9006\u9806\u5e8f\u306b\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u3002\n\n### single()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable1 = listOf(9)\n    val iterable2 = listOf(1, 2, 3, 4)\n\n    println(iterable1.single())\n    println(iterable2.single {it == 3})\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n9\n3\n```\n\n- \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u6301\u3064\u552f\u4e00\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n- \u30e9\u30e0\u30c0\u5f0f\u3067\u6761\u4ef6\u3092\u7d5e\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n- \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u8a72\u5f53\u3059\u308b\u8981\u7d20\u304c\uff10\u307e\u305f\u306f\uff12\u4ef6\u4ee5\u4e0a\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u4f8b\u5916\u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3002\n\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4)\n\n    println(iterable.single())\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\nException in thread \"main\" java.lang.IllegalArgumentException: Collection has more than one element.\n    at kotlin.collections.CollectionsKt___CollectionsKt.single(_Collections.kt:487)\n```\n\n### singleOrNull()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable1 = listOf(9)\n    val iterable2 = listOf(1, 2, 3, 4)\n\n\n    println(iterable1.singleOrNull())\n    \n    println(iterable2.singleOrNull {it == 4})\n    println(iterable2.singleOrNull())\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n9\n4\nnull\n```\n\n- \u57fa\u672c\u306f `single()` \u3068\u540c\u3058\u3060\u304c\u3001\u8a72\u5f53\u3059\u308b\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f `null` \u3092\u8fd4\u3059\u70b9\u304c\u7570\u306a\u308b\u3002\n\n### sorted(), sortedDescending()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(3, 1, 2, 4)\n\n    println(iterable.sorted())\n    println(iterable.sortedDescending())\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 4]\n[4, 3, 2, 1]\n```\n\n- \u8981\u7d20\u3092\u30bd\u30fc\u30c8\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u3002\n- `sorted()` \u306f\u6607\u9806\u30bd\u30fc\u30c8\u3001 `sortedDescending()` \u306f\u964d\u9806\u30bd\u30fc\u30c8\u3002\n\n### sortedBy(), sortedByDescending()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(3, 1, 2, 4)\n\n    println(iterable.sortedBy { it * -1 })\n    println(iterable.sortedByDescending { it * -1 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[4, 3, 2, 1]\n[1, 2, 3, 4]\n```\n\n- \u30bd\u30fc\u30c8\u306e\u5224\u5b9a\u306b\u4f7f\u7528\u3059\u308b\u5024\u3092\u8fd4\u3059\u30e9\u30e0\u30c0\u5f0f\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u30bd\u30fc\u30c8\u65b9\u6cd5\u3092\u8abf\u6574\u3067\u304d\u308b\u3002\n- `sortedBy()` \u306f\u6607\u9806\u30bd\u30fc\u30c8\u3001 `sortedByDescending()` \u306f\u964d\u9806\u30bd\u30fc\u30c8\u3002\n\n### sortedWith()\n```kotlin\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val iterable = listOf(3, 1, 2, 4)\n\n    println(iterable.sortedWith(Comparator { left, right -> right - left }))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[4, 3, 2, 1]\n```\n\n- \u30bd\u30fc\u30c8\u65b9\u6cd5\u3092 `Comparator` \u3067\u5b9f\u88c5\u3057\u3066\u6e21\u3059\u3002\n\n### subtract()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable1 = listOf(1, 1, 2, 2, 3, 4, 5)\n    val iterable2 = listOf(2, 3, 4)\n\n    println(iterable1.subtract(iterable2))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 5]\n```\n\n- \u6307\u5b9a\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u5b58\u5728\u3057\u306a\u3044\u8981\u7d20\u3060\u3051\u3092\u62bd\u51fa\u3057\u3066 `Set` \u3067\u8fd4\u3059\u3002\n- \u91cd\u8907\u306f\u9664\u53bb\u3055\u308c\u308b\u3002\n\n### sum()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.sum())\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n6\n```\n\n- \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u5404\u8981\u7d20\u306e\u5408\u8a08\u3092\u8fd4\u3059\u3002\n- \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u8981\u7d20\u306f\u6570\u5024\u8a08\u7b97\u304c\u53ef\u80fd\u306a\u578b\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n### sumBy()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.sumBy { it * 10 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n60\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3067\u5408\u8a08\u3092\u8a08\u7b97\u3059\u308b\u3002\n\n### sumByDouble()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    println(iterable.sumByDouble { it * 1.5 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n9.0\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3059 `Double` \u5024\u3067\u5408\u8a08\u3092\u7b97\u51fa\u3059\u308b\u3002\n\n### take()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.take(3))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n```\n\n- \u5148\u982d\u304b\u3089\u6307\u5b9a\u3057\u305f\u6570\u3060\u3051\u8981\u7d20\u3092\u53d6\u5f97\u3057\u3066 `List` \u3067\u8fd4\u3059\u3002\n\n### takeWhile()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    println(iterable.takeWhile { it < 5 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 4]\n```\n\n- \u5148\u982d\u304b\u3089\u3001\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u306a\u304f\u306a\u308b\u307e\u3067\u8981\u7d20\u3092\u53d6\u5f97\u3057\u3066 `List` \u3067\u8fd4\u3059\u3002\n\n### toCollection()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    val result: MutableCollection<Int> = mutableListOf(9)\n\n    iterable.toCollection(result)\n\n    println(result)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[9, 1, 2, 3]\n```\n\n- \u6307\u5b9a\u3057\u305f `MutableCollection` \u306b\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\n### toHashSet()\n```kotlin\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 1, 2, 2, 2, 3, 3)\n\n    val result: HashSet<Int> = iterable.toHashSet()\n\n    println(result)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n```\n\n- `HashSet` \u306b\u5909\u63db\u3059\u308b\u3002\n\n### toList()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = setOf(1, 2, 3)\n\n    val list: List<Int> = iterable.toList()\n\n    println(list)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n```\n\n- `List` \u306b\u5909\u63db\u3059\u308b\u3002\n\n### toMap()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(\"foo\" to \"FOO\", \"bar\" to \"BAR\")\n\n    val map: Map<String, String> = iterable.toMap()\n\n    println(map)\n\n    val result = mutableMapOf(\"fizz\" to \"FIZZ\")\n\n    iterable.toMap(result)\n\n    println(result)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n{foo=FOO, bar=BAR}\n{fizz=FIZZ, foo=FOO, bar=BAR}\n```\n\n- `Iterable<Pair<K, V>>` \u3092 `Map<K, V>` \u306b\u5909\u63db\u3059\u308b\u3002\n- \u5f15\u6570\u306b `MutableMap` \u3092\u6e21\u3059\u3068\u3001\u305d\u306e `Map` \u306b\u8ffd\u52a0\u3055\u308c\u308b\u3002\n\n### toMutableList()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3)\n\n    val result: MutableList<Int> = iterable.toMutableList()\n\n    println(result)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n```\n\n- `MutableList` \u306b\u5909\u63db\u3059\u308b\u3002\n\n\n### toMutableSet()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 1, 2, 3, 3)\n\n    val result: MutableSet<Int> = iterable.toMutableSet()\n\n    println(result)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n```\n\n- `MutableSet` \u306b\u5909\u63db\u3059\u308b\u3002\n\n### toSet()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 1, 2, 3, 3)\n\n    val result: Set<Int> = iterable.toSet()\n\n    println(result)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n```\n\n- `Set` \u306b\u5909\u63db\u3059\u308b\u3002\n\n### toSortedSet()\n```kotlin\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val iterable = listOf(3, 1, 2, 3, 1, 4)\n\n    val result: SortedSet<Int> = iterable.toSortedSet()\n\n    println(result)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 4]\n```\n\n- `SortedSet` \u306b\u5909\u63db\u3059\u308b\u3002\n\n### union()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable1 = listOf(1, 2, 3, 4)\n    val iterable2 = listOf(2, 4, 5, 6)\n\n    val result: Set<Int> = iterable1.union(iterable2)\n\n    println(result)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 4, 5, 6]\n```\n\n- \uff12\u3064\u306e `Iterable` \u306e\u8981\u7d20\u3092\u5408\u8a08\u3057\u3066 `Set` \u3067\u8fd4\u3059\u3002\n\n### unzip()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(\"one\" to 1, \"two\" to 2, \"three\" to 3)\n\n    val result: Pair<List<String>, List<Int>> = iterable.unzip()\n\n    println(result)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n([one, two, three], [1, 2, 3])\n```\n\n- `List<Pair<T, U>>` \u3092 `Pair<List<T>, List<U>>` \u306b\u5909\u63db\u3059\u308b\u3002\n\n### withIndex()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable = listOf(1, 2, 3, 4, 5)\n\n    val result: Iterable<IndexedValue<Int>> = iterable.withIndex()\n\n    result.forEach { println(\"index=${it.index}, value=${it.value}\") }\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\nindex=0, value=1\nindex=1, value=2\nindex=2, value=3\nindex=3, value=4\nindex=4, value=5\n```\n\n- `Iterable<IndexedValue<T>>` \u306b\u5909\u63db\u3059\u308b\u3002\n\n### zip()\n```kotlin\nfun main(args: Array<String>) {\n    val iterable1 = listOf(1, 2, 3)\n\n    val iterable2 = listOf(\"one\", \"two\", \"three\", \"four\")\n    val result1: List<Pair<Int, String>> = iterable1.zip(iterable2)\n    println(result1)\n\n    val array = arrayOf(1.1, 2.2)\n    val result2: List<Pair<Int, Double>> = iterable1.zip(array)\n    println(result2)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[(1, one), (2, two), (3, three)]\n[(1, 1.1), (2, 2.2)]\n```\n\n- \uff12\u3064\u306e `Iterable`\uff08\u307e\u305f\u306f `Array`\uff09 \u306e\u5404\u8981\u7d20\u3092\uff11\u3064\u306e `Pair` \u306b\u3057\u3066\u3001 `List` \u306b\u8a70\u3081\u3066\u8fd4\u3059\u3002\n- \u8981\u7d20\u6570\u304c\u5408\u308f\u306a\u3044\u5834\u5408\u306f\u3001\u5c11\u306a\u3044\u307b\u3046\u306b\u5408\u308f\u305b\u3089\u308c\u308b\u3002\n- \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30e9\u30e0\u30c0\u5f0f\u3067\u5404\u8981\u7d20\u3092\u5909\u63db\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n```kotlin\nfun main(args: Array<String>) {\n    val iterable1 = listOf(1, 2, 3)\n\n    val iterable2 = listOf(\"one\", \"two\", \"three\", \"four\")\n    val result1: List<String> = iterable1.zip(iterable2, {a, b -> \"$b($a)\"})\n    println(result1)\n\n    val array = arrayOf(1.1, 2.2)\n    val result2: List<Int> = iterable1.zip(array, {a, b -> (a + b*10).toInt()})\n    println(result2)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[one(1), two(2), three(3)]\n[12, 24]\n```\n\n## Collection \u306e\u30e1\u30bd\u30c3\u30c9\n### containsAll()\n```kotlin\nfun main(args: Array<String>) {\n    val collection1 = listOf(1, 2, 3, 4)\n    val collection2 = listOf(2, 3)\n    val collection3 = listOf(4, 5)\n\n    println(collection1.containsAll(collection2))\n    println(collection1.containsAll(collection3))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n```\n\n- \u6307\u5b9a\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u542b\u307e\u308c\u308b\u5168\u3066\u306e\u8981\u7d20\u3092\u6301\u3064\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3002\n\n### isNotEmpty()\n```kotlin\nfun main(args: Array<String>) {\n    val collection1 = listOf(1, 2, 3, 4)\n    val collection2 = listOf<Int>()\n\n    println(collection1.isEmpty())\n    println(collection2.isEmpty())\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\nfalse\ntrue\n```\n\n- \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u304b\u3089\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3002\n\n### orEmpty()\n```kotlin\nfun main(args: Array<String>) {\n    val collection1 = listOf(1, 2, 3, 4)\n    val collection2: Collection<Int>? = null\n\n    println(collection1.orEmpty())\n    println(collection2.orEmpty())\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 4]\n[]\n```\n\n- \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u578b\u304c `null` \u53ef\u3067\u3001\u304b\u3064\u5b9f\u969b `null` \u3060\u3063\u305f\u5834\u5408\u306f\u7a7a\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u3002\n- \u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f\u3001\u81ea\u5206\u81ea\u8eab\u3092\u305d\u306e\u307e\u307e\u5e30\u3059\u3002\n\n### to***Array()\n```kotlin\nfun main(args: Array<String>) {\n    val collection = listOf(1, 2, 3, 4)\n\n    val array: IntArray = collection.toIntArray()\n\n    array.forEach { println(it) }\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n1\n2\n3\n4\n```\n\n- `***Array` \u306b\u5909\u63db\u3059\u308b\u3002\n- `Boolean`, `Byte`, `Char`, `Double`, `Float`, `Int`, `Long`, `Short` \u304c\u3042\u308b\u3002\n\n### toTypedArray()\n```kotlin\nfun main(args: Array<String>) {\n    val collection = listOf(1, 2, 3, 4)\n\n    val array: Array<Int> = collection.toTypedArray()\n\n    array.forEach { println(it) }\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n1\n2\n3\n4\n```\n\n- `Array<T>` \u306b\u5909\u63db\u3059\u308b\u3002\n\n## List \u306e\u30e1\u30bd\u30c3\u30c9\n### asReversed()\n```kotlin\nfun main(args: Array<String>) {\n    val list = mutableListOf(1, 2, 3)\n\n    println(\"[before] list = $list\")\n\n    val asReversed = list.asReversed()\n\n    println(\"[after asReversed] list = $list\")\n    println(\"[after asReversed] asReversed = $asReversed\")\n\n    list += 9\n    asReversed += 99\n\n    println(\"[after modify] list = $list\")\n    println(\"[after modify] asReversed = $asReversed\")\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[before] list = [1, 2, 3]\n[after asReversed] list = [1, 2, 3]\n[after asReversed] asReversed = [3, 2, 1]\n[after modify] list = [99, 1, 2, 3, 9]\n[after modify] asReversed = [9, 3, 2, 1, 99]\n```\n\n- \u9806\u5e8f\u3092\u9006\u8ee2\u3055\u305b\u305f `List` \u3092\u8fd4\u3059\u3002\n- `reversed()` \u3068\u306e\u9055\u3044\u306f\u3001 `MutableList` \u306e\u5834\u5408\u306f `MutableList` \u3092\u8fd4\u3059\u3068\u3044\u3046\u70b9\u3002\n    - `reversed()` \u306e\u5834\u5408\u306f `List` \u3092\u8fd4\u3059\u3002\n- \u8fd4\u3055\u308c\u305f `List` \u3068\u5143\u306e `List` \u306f\u95a2\u9023\u3057\u3066\u304a\u308a\u3001\u4e00\u65b9\u3092\u5909\u66f4\u3059\u308b\u3068\u4ed6\u65b9\u306b\u3082\u5909\u66f4\u304c\u53cd\u6620\u3055\u308c\u308b\u3002\n\n### binarySearch()\n#### \u57fa\u672c\n```kotlin\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 2, 3, 3, 3)\n\n    println(list.binarySearch(3))\n    println(list.binarySearch(9))\n    println(list.binarySearch(element = 3, fromIndex = 0, toIndex = 2))\n    println(list.binarySearch(element = 3, comparator = Comparator { a, b -> a - b }))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n4\n-7\n-3\n4\n```\n\n- \u30d0\u30a4\u30ca\u30ea\u30b5\u30fc\u30c1\u3067\u6307\u5b9a\u3057\u305f\u8981\u7d20\u3092\u691c\u7d22\u3057\u3001\u8a72\u5f53\u3057\u305f\u5834\u6240\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\u3002\n    - \u8981\u7d20\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u8ca0\u6570\u304c\u8fd4\u3055\u308c\u308b\u3002\n- `List` \u306f\u3042\u3089\u304b\u3058\u3081\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n    - \u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u30c7\u30bf\u30e9\u30e1\u306a\u5024\u3092\u8fd4\u3059\u3002\n- \u7b2c\u4e8c\u5f15\u6570\uff08`fromIndex`\uff09\u3068\u7b2c\u4e09\u5f15\u6570\uff08`toIndex`\uff09\u3067\u3001\u691c\u7d22\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n- `comparator` \u3067\u3001\u8981\u7d20\u306e\u6bd4\u8f03\u65b9\u6cd5\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n\n### binarySearchBy()\n```kotlin\nfun main(args: Array<String>) {\n    val list = listOf(\"I\", \"he\", \"her\", \"you\")\n\n    println(list.binarySearchBy(\"Thank you\", selector = { \"Thank $it\" }))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n3\n```\n\n- \u5404\u8981\u7d20\u3092 `selector` \u3067\u5909\u63db\u3057\u3066\u3001\u305d\u306e\u5024\u306b\u4e00\u81f4\u3059\u308b\u9805\u76ee\u3092\u691c\u7d22\u3057\u3001\u8a72\u5f53\u3059\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\u3002\n- `List` \u306f\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n### component*()\n```kotlin\nfun main(args: Array<String>) {\n    val list = listOf(\"one\", \"two\", \"three\", \"four\", \"five\")\n\n    println(list.component1())\n    println(list.component2())\n    println(list.component3())\n    println(list.component4())\n    println(list.component5())\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\none\ntwo\nthree\nfour\nfive\n```\n\n- \uff11\uff5e\uff15\u756a\u76ee\u307e\u3067\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n- \u4f7f\u3044\u30c9\u30b3\u30ed\u306f\u30fb\u30fb\u30fb\u4e0d\u660e\u3002\n\n### dropLast()\n```kotlin\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 3, 4, 5)\n\n    println(list.dropLast(2))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n```\n\n- \u6307\u5b9a\u3057\u305f\u6570\u3060\u3051\u3001\u8981\u7d20\u3092\u5f8c\u308d\u304b\u3089\u524a\u9664\u3057\u305f\u7d50\u679c\u3092 `List` \u3067\u8fd4\u3059\u3002\n\n### dropLastWhile()\n```kotlin\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 3, 4, 5)\n\n    println(list.dropLastWhile { it > 2 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2]\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u304c `true` \u3092\u8fd4\u3059\u9593\u3001\u672b\u5c3e\u304b\u3089\u8981\u7d20\u3092\u524a\u9664\u3057\u3001\u6b8b\u3063\u305f\u8981\u7d20\u3092 `List` \u306b\u8a70\u3081\u3066\u8fd4\u3059\u3002\n\n### foldRight()\n```kotlin\nfun main(args: Array<String>) {\n    val list = listOf(\"a\", \"b\", \"c\")\n\n    println(list.foldRight(\"Z\", { value, buf -> buf + value }))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\nZcba\n```\n\n- \u672b\u5c3e\u304b\u3089\u9806\u756a\u306b\u8981\u7d20\u3092\u51e6\u7406\u3057\u3001\u7d50\u679c\u3092\u84c4\u7a4d\u3057\u3066\u3044\u304f\u3002\n- \u30e9\u30e0\u30c0\u5f0f\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u306f\u3001\u521d\u56de\u306f\u7b2c\u4e00\u5f15\u6570\u3067\u6e21\u3057\u305f\u521d\u671f\u5024\u304c\u6e21\u3055\u308c\u3001\u4e8c\u56de\u76ee\u4ee5\u964d\u306f\u524d\u56de\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u304c\u6e21\u3055\u308c\u308b\u3002\n\n\n- \u7b2c\u4e00\u5f15\u6570\u3067\u521d\u671f\u5024\u3092\u6307\u5b9a\u3059\u308b\u3002\n- \u30e9\u30e0\u30c0\u5f0f\u304c\u5404\u8981\u7d20\u3054\u3068\u306b\u30b3\u30fc\u30eb\u3055\u308c\u308b\u3002\n    - \u7b2c\u4e00\u5f15\u6570\u306b\u306f\u3001\u521d\u671f\u5024\u3067\u6307\u5b9a\u3057\u305f\u5024\u304c\u6700\u521d\u306b\u6e21\u3055\u308c\u3001\u4ee5\u5f8c\u306f\u524d\u56de\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u304c\u6e21\u3055\u308c\u308b\u3002\n    - \u7b2c\u4e8c\u5f15\u6570\u306b\u306f\u3001 `Iterable` \u306e\u5404\u8981\u7d20\u304c\u672b\u5c3e\u304b\u3089\u9806\u756a\u306b\u6e21\u3055\u308c\u308b\u3002\n\n### getOrElse()\n```kotlin\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 3)\n\n    println(list.getOrElse(0, { 9 }))\n    println(list.getOrElse(4, { 9 }))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n1\n9\n```\n\n- \u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n- \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u7bc4\u56f2\u5916\u306e\u5834\u5408\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3059\u5024\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3068\u3057\u3066\u8fd4\u3059\u3002\n\n### getOrNull()\n```kotlin\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 3)\n\n    println(list.getOrNull(0))\n    println(list.getOrNull(4))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n1\nnull\n```\n\n- \u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n- \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u7bc4\u56f2\u5916\u306e\u5834\u5408\u306f\u3001 `null` \u3092\u8fd4\u3059\u3002\n\n### reduceRight()\n```kotlin\nfun main(args: Array<String>) {\n    val list = listOf(\"a\", \"b\", \"c\")\n\n    println(list.reduceRight { value, tmp ->\n        println(\"value=$value, tmp=$tmp\")\n        tmp + \":\" + value\n    })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\nvalue=b, tmp=c\nvalue=a, tmp=c:b\nc:b:a\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u306b\u3088\u308b\u5909\u63db\u3092\u7a4d\u307f\u91cd\u306d\u306a\u304c\u3089\u5404\u8981\u7d20\u3092\u672b\u5c3e\u304b\u3089\u9806\u756a\u306b\u51e6\u7406\u3059\u308b\u3002\n- \u30e9\u30e0\u30c0\u5f0f\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u3001\u521d\u56de\u306f\u672b\u5c3e\u306e\u8981\u7d20\u304c\u6e21\u3055\u308c\u3001\u4ee5\u5f8c\u306f\u524d\u56de\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u304c\u6e21\u3055\u308c\u308b\u3002\n\n### slice()\n```kotlin\nfun main(args: Array<String>) {\n    val list = listOf(\"0:one\", \"1:two\", \"2:three\", \"3:four\", \"4:five\")\n    println(list.slice(2..4))\n\n    val indices = listOf(1, 3, 4)\n    println(list.slice(indices))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[2:three, 3:four, 4:five]\n[1:two, 3:four, 4:five]\n```\n\n- \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6307\u5b9a\u3067\u8981\u7d20\u3092\u629c\u304d\u53d6\u308b\u3002\n- `IntRange` \u3092\u4f7f\u3046\u3068\u3001\u7bc4\u56f2\u6307\u5b9a\u3067\u8981\u7d20\u3092\u629c\u304d\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n- `Iterable` \u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u8981\u7d20\u3060\u3051\u3092\u629c\u304d\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n### takeLast()\n```kotlin\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 3, 4, 5)\n\n    println(list.takeLast(2))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[4, 5]\n```\n\n- \u6307\u5b9a\u3057\u305f\u6570\u3060\u3051\u672b\u5c3e\u304b\u3089\u8981\u7d20\u3092\u53d6\u5f97\u3057\u3001 `List` \u306b\u3057\u3066\u8fd4\u3059\u3002\n\n### takeLastWhile()\n```kotlin\nfun main(args: Array<String>) {\n    val list = listOf(1, 2, 3, 4, 5)\n\n    println(list.takeLastWhile { it > 2 })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[3, 4, 5]\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u304c `true` \u3092\u8fd4\u3059\u9593\u3001\u672b\u5c3e\u304b\u3089\u9806\u756a\u306b\u8981\u7d20\u3092\u53d6\u5f97\u3057\u3001 `List` \u306b\u8a70\u3081\u3066\u8fd4\u3059\u3002\n\n## MutableIterable \u306e\u30e1\u30bd\u30c3\u30c9\n### removeAll()\n```kotlin\nfun main(args: Array<String>) {\n    val mutableIterable = mutableListOf(1, 2, 3, 1, 2, 3)\n\n    mutableIterable.removeAll { it == 3 }\n\n    println(mutableIterable)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 1, 2]\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u3092\u5168\u3066\u524a\u9664\u3059\u308b\u3002\n\n### retainAll()\n```kotlin\nfun main(args: Array<String>) {\n    val mutableIterable = mutableListOf(1, 2, 3, 1, 2, 3)\n\n    mutableIterable.retainAll { it == 3 }\n\n    println(mutableIterable)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[3, 3]\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u3060\u3051\u3092\u6b8b\u3057\u3001\u6b8b\u308a\u3092\u5168\u3066\u524a\u9664\u3059\u308b\u3002\n\n## MutableCollection \u306e\u30e1\u30bd\u30c3\u30c9\n### addAll()\n```kotlin\nfun main(args: Array<String>) {\n    val mutableCollection = mutableListOf(1, 2, 3)\n    val iterable = listOf(7, 8, 9)\n\n    mutableCollection.addAll(iterable)\n\n    println(mutableCollection)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 7, 8, 9]\n```\n\n- \u6307\u5b9a\u3057\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u8981\u7d20\u3092\u5168\u3066\u8ffd\u52a0\u3059\u308b\u3002\n\n### minusAssign()\n```kotlin\nfun main(args: Array<String>) {\n    val mutableCollection = mutableListOf(1, 2, 3, 4, 5)\n    val iterable = listOf(2, 4)\n\n    mutableCollection.minusAssign(iterable)\n    println(mutableCollection)\n\n    mutableCollection -= 5\n    println(mutableCollection)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 3, 5]\n[1, 3]\n```\n\n- \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u307e\u305f\u306f\u5358\u72ec\u3067\u6307\u5b9a\u3057\u305f\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3002\n- `-=` \u3067\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n### plusAssign()\n```kotlin\nfun main(args: Array<String>) {\n    val mutableCollection = mutableListOf(1, 2, 3)\n    val iterable = listOf(7, 8)\n\n    mutableCollection.plusAssign(iterable)\n    println(mutableCollection)\n\n    mutableCollection += 9\n    println(mutableCollection)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3, 7, 8]\n[1, 2, 3, 7, 8, 9]\n```\n\n- \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u307e\u305f\u306f\u5358\u72ec\u3067\u6307\u5b9a\u3057\u305f\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3002\n- `+=` \u3067\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\n### remove()\n```kotlin\nfun main(args: Array<String>) {\n    val mutableCollection = mutableListOf(1, 2, 3)\n\n    mutableCollection.remove(2)\n\n    println(mutableCollection)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 3]\n```\n\n- \u6307\u5b9a\u3057\u305f\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3002\n\n## MutableList \u306e\u30e1\u30bd\u30c3\u30c9\n### reverse()\n```kotlin\nfun main(args: Array<String>) {\n    val mutableList = mutableListOf(1, 2, 3)\n\n    mutableList.reverse()\n\n    println(mutableList)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[3, 2, 1]\n```\n\n- \u9806\u5e8f\u3092\u9006\u306b\u3059\u308b\u3002\n\n### sort(), sortDescending()\n```kotlin\nfun main(args: Array<String>) {\n    val mutableList = mutableListOf(3, 1, 2)\n\n    mutableList.sort()\n    println(mutableList)\n\n    mutableList.sortDescending()\n    println(mutableList)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[1, 2, 3]\n[3, 2, 1]\n```\n\n- \u8981\u7d20\u3092\u30bd\u30fc\u30c8\u3059\u308b\u3002\n- `sort()` \u304c\u6607\u9806\u3001 `sortDescending()` \u304c\u964d\u9806\u3002\n\n### sortBy(), sortByDescending()\n```kotlin\nfun main(args: Array<String>) {\n    val mutableList = mutableListOf(\"aaa\", \"bb\", \"c\")\n\n    mutableList.sortBy { it.length }\n    println(mutableList)\n\n    mutableList.sortByDescending { it.length }\n    println(mutableList)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[c, bb, aaa]\n[aaa, bb, c]\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3067\u30bd\u30fc\u30c8\u3059\u308b\u3002\n- `sortBy()` \u304c\u6607\u9806\u3001 `sortByDescending()` \u304c\u964d\u9806\u3002\n\n### sortWith()\n```kotlin\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val mutableList = mutableListOf(2, 3, 1)\n\n    mutableList.sortWith(Comparator { a, b ->  b - a})\n    println(mutableList)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[3, 2, 1]\n```\n\n- `Comparator` \u3092\u6307\u5b9a\u3057\u3066\u30bd\u30fc\u30c8\u3059\u308b\u3002\n\n# Map \u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\n## Map \u306e\u30e1\u30bd\u30c3\u30c9\n### all()\n```kotlin\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.all { it.key is String })\n    println(map.all { it.key.contains(\"o\") })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n```\n\n- \u5168\u3066\u306e\u30a8\u30f3\u30c8\u30ea\u306b\u5bfe\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u304c `true` \u3092\u8fd4\u3057\u305f\u5834\u5408\u306b `true` \u3092\u8fd4\u3059\u3002\n\n### any()\n```kotlin\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.any { it.key.contains(\"o\") })\n    println(map.any { it.key.isEmpty() })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n```\n\n- \u3044\u305a\u308c\u304b\u306e\u30a8\u30f3\u30c8\u30ea\u306b\u5bfe\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u304c `true` \u3092\u8fd4\u3057\u305f\u5834\u5408\u306b `true` \u3092\u8fd4\u3059\u3002\n\n### contains()\n```kotlin\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.contains(\"one\"))\n    println(map.contains(\"ONE\"))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n```\n\n- \u6307\u5b9a\u3057\u305f\u30ad\u30fc\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u6301\u3064\u304b\u78ba\u8a8d\u3059\u308b\u3002\n- `containsKey()` \u3068\u540c\u3058\u3002\n\n### containsKey()\n```kotlin\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.containsKey(\"one\"))\n    println(map.containsKey(\"ONE\"))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n```\n\n- \u6307\u5b9a\u3057\u305f\u30ad\u30fc\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u6301\u3064\u304b\u78ba\u8a8d\u3059\u308b\u3002\n- `contains()` \u3068\u540c\u3058\u3002\n\n### containsValue()\n```kotlin\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.containsValue(\"one\"))\n    println(map.containsValue(\"ONE\"))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\nfalse\ntrue\n```\n\n- \u6307\u5b9a\u3057\u305f\u30d0\u30ea\u30e5\u30fc\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u6301\u3064\u304b\u78ba\u8a8d\u3059\u308b\u3002\n\n### count()\n```kotlin\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.count())\n    println(map.count { it.key.contains(\"t\") })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n3\n2\n```\n\n- \u30a8\u30f3\u30c8\u30ea\u306e\u6570\u3092\u53d6\u5f97\u3059\u308b\u3002\n- \u30e9\u30e0\u30c0\u5f0f\u3067\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u30a8\u30f3\u30c8\u30ea\u3092\u7d5e\u308a\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n### filter(), filterNot()\n```kotlin\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.filter { it.key.contains(\"t\") })\n    println(map.filterNot { it.key.contains(\"t\") })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n{two=TWO, three=THREE}\n{one=ONE}\n```\n\n- `filter()` \u306f\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u30a8\u30f3\u30c8\u30ea\u3060\u3051\u3092\u62bd\u51fa\u3059\u308b\u3002\n- `filterNot()` \u306f\u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3057\u306a\u3044\u30a8\u30f3\u30c8\u30ea\u3060\u3051\u3092\u62bd\u51fa\u3059\u308b\u3002\n- \u30e9\u30e0\u30c0\u5f0f\u306b\u306f\u5404\u30a8\u30f3\u30c8\u30ea\u304c\u6e21\u3055\u308c\u308b\u3002\n\n### filterKeys(), filterValues()\n```kotlin\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.filterKeys { key -> key.contains(\"o\") })\n    println(map.filterValues { value -> value.contains(\"T\") })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n{one=ONE, two=TWO}\n{two=TWO, three=THREE}\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u3067\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u30a8\u30f3\u30c8\u30ea\u3060\u3051\u3092\u62bd\u51fa\u3059\u308b\u3002\n- `filterKeys()` \u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u306b\u5404\u30a8\u30f3\u30c8\u30ea\u306e\u30ad\u30fc\u304c\u6e21\u3055\u308c\u308b\u3002\n- `filterValues()` \u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u306b\u5404\u30a8\u30f3\u30c8\u30ea\u306e\u30d0\u30ea\u30e5\u30fc\u304c\u6e21\u3055\u308c\u308b\u3002\n\n### flatMap()\n```kotlin\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.flatMap { listOf(it.key, it.value) })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[one, ONE, two, TWO, three, THREE]\n```\n\n- \u5404\u8981\u7d20\u3054\u3068\u306b\u30e9\u30e0\u30c0\u5f0f\u304c\u30b3\u30fc\u30eb\u3055\u308c\u308b\u3002\n- \u305d\u3057\u3066\u3001\u5404\u30e9\u30e0\u30c0\u5f0f\u306e\u30b3\u30fc\u30eb\u3067\u8fd4\u3055\u308c\u305f `Iterable` \u3092\uff11\u3064\u306e `List` \u306b\u8a70\u3081\u3066\u8fd4\u3059\u3002\n\n### forEach()\n```kotlin\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    map.forEach { println(\"key=${it.key}, value=${it.value}\") }\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\nkey=one, value=ONE\nkey=two, value=TWO\nkey=three, value=THREE\n```\n\n- \u5404\u30a8\u30f3\u30c8\u30ea\u3092\u51e6\u7406\u3059\u308b\u3002\n\n### getOrElse()\n```kotlin\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.getOrElse(\"one\", {\"DEFAULT\"}))\n    println(map.getOrElse(\"nine\", {\"DEFAULT\"}))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\nONE\nDEFAULT\n```\n\n- \u6307\u5b9a\u3057\u305f\u30ad\u30fc\u306b\u8a72\u5f53\u3059\u308b\u30a8\u30f3\u30c8\u30ea\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3059\u5024\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3068\u3057\u3066\u8fd4\u3059\u3002\n\n### isEmpty(), isNotEmpty()\n```kotlin\nfun main(args: Array<String>) {\n    val map = mapOf<String, String>()\n\n    println(map.isEmpty())\n    println(map.isNotEmpty())\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\ntrue\nfalse\n```\n\n- `Map` \u7a7a\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3067\u304d\u308b\u3002\n\n### none()\n```kotlin\nfun main(args: Array<String>) {\n    val map1 = mapOf(\"one\" to \"ONE\")\n    val map2 = mapOf<String, String>()\n\n    println(map1.none())\n    println(map2.none())\n\n    println(map1.none {it.key == \"two\"})\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\nfalse\ntrue\ntrue\n```\n\n- `Map` \u304c\u7a7a\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002\n- \u30e9\u30e0\u30c0\u5f0f\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u6761\u4ef6\u3092\u7d5e\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n### orEmpty()\n```kotlin\nfun main(args: Array<String>) {\n    val map1 = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n    val map2: Map<String, String>? = null\n\n    println(map1.orEmpty())\n    println(map2.orEmpty())\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n{one=ONE, two=TWO, three=THREE}\n{}\n```\n\n- `Map` \u306e\u578b\u304c `null` \u53ef\u3067\u3001\u304b\u3064\u5b9f\u969b\u306b `null` \u3060\u3063\u305f\u5834\u5408\u306f\u7a7a\u306e `Map` \u3092\u8fd4\u3059\u3002\n- \u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f\u3001\u81ea\u5206\u81ea\u8eab\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u3002\n\n### map(), mapNotNull()\n```kotlin\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.map { if (it.key == \"two\") null else \"${it.key}=${it.value}\" })\n    println(map.mapNotNull { if (it.key == \"two\") null else \"${it.key}=${it.value}\" })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[one=ONE, null, three=THREE]\n[one=ONE, three=THREE]\n```\n\n- \u5404\u30a8\u30f3\u30c8\u30ea\u3054\u3068\u306b\u30e9\u30e0\u30c0\u5f0f\u304c\u30b3\u30fc\u30eb\u3055\u308c\u308b\u3002\n- \u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u304c `List` \u306b\u8a70\u3081\u3089\u308c\u3066\u8fd4\u3055\u308c\u308b\u3002\n- `map()` \u306f\u3001 `null` \u304c\u8fd4\u3055\u308c\u305f\u5834\u5408\u306b\u305d\u308c\u3092\u305d\u306e\u307e\u307e `List` \u306b\u8a70\u3081\u308b\u3002\n- `mapNotNull()` \u306f\u3001 `null` \u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3002\n\n### mapKeys(), mapValues()\n```kotlin\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.mapKeys { \"<${it.key}>\" })\n    println(map.mapValues { \"<${it.value}>\" })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n{<one>=ONE, <two>=TWO, <three>=THREE}\n{one=<ONE>, two=<TWO>, three=<THREE>}\n```\n\n- \u5404\u30a8\u30f3\u30c8\u30ea\u3054\u3068\u306b\u30e9\u30e0\u30c0\u5f0f\u304c\u30b3\u30fc\u30eb\u3055\u308c\u308b\u3002\n- `mapKeys()` \u306f\u3001\u5404\u30a8\u30f3\u30c8\u30ea\u306e\u30ad\u30fc\u304c\u30e9\u30e0\u30c0\u5f0f\u306e\u8fd4\u3057\u305f\u5024\u3067\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\u3002\n- `mapValues()` \u306f\u3001\u5404\u30a8\u30f3\u30c8\u30ea\u306e\u30d0\u30ea\u30e5\u30fc\u304c\u30e9\u30e0\u30c0\u5f0f\u306e\u8fd4\u3057\u305f\u5024\u3067\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\u3002\n\n### maxBy(), minBy()\n```kotlin\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.maxBy { it.key })\n    println(map.minBy { it.key })\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\ntwo=TWO\none=ONE\n```\n\n- \u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3067\u5404\u30a8\u30f3\u30c8\u30ea\u306e\u5927\u5c0f\u3092\u6bd4\u8f03\u3057\u3001\u6700\u5927\u6700\u5c0f\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n### maxWith(), minWith()\n```kotlin\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    val comparator = Comparator<Map.Entry<String, String>> { a, b -> a.key.compareTo(b.key) }\n\n    println(map.maxWith(comparator))\n    println(map.minWith(comparator))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\ntwo=TWO\none=ONE\n```\n\n- `Comparator` \u3067\u6bd4\u8f03\u65b9\u6cd5\u3092\u6307\u5b9a\u3057\u3066\u6700\u5927\u3001\u6700\u5c0f\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n### plus()\n```kotlin\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(map.plus(mapOf(\"four\" to \"FOUR\")))\n    println(map.plus(\"five\" to \"FIVE\"))\n    println(map.plus(listOf(\"six\" to \"SIX\")))\n\n    println(map + (\"seven\" to \"SEVEN\"))\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n{one=ONE, two=TWO, three=THREE, four=FOUR}\n{one=ONE, two=TWO, three=THREE, five=FIVE}\n{one=ONE, two=TWO, three=THREE, six=SIX}\n{one=ONE, two=TWO, three=THREE, seven=SEVEN}\n```\n\n- `Map`, `Pair`, `List<Pair>` \u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u8981\u7d20\u3092\u8ffd\u52a0\u3057\u305f\u65b0\u3057\u3044 `Map` \u3092\u8fd4\u3059\u3002\n- `+` \u6f14\u7b97\u5b50\u306b\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n### toList()\n```kotlin\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n    val list: List<Pair<String, String>> = map.toList()\n    \n    println(list)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n[(one, ONE), (two, TWO), (three, THREE)]\n```\n\n- `Map<K, V>` \u3092 `List<Pair<K, V>>` \u306b\u5909\u63db\u3059\u308b\u3002\n\n### toProperties()\n```kotlin\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n    val properties: Properties = map.toProperties()\n\n    println(properties)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n{two=TWO, one=ONE, three=THREE}\n```\n\n- `java.util.Properties` \u306b\u5909\u63db\u3059\u308b\u3002\n\n### toSortedMap()\n```kotlin\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val map = mapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n    val sortedMap: SortedMap<String, String> = map.toSortedMap()\n\n    println(sortedMap)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n{one=ONE, three=THREE, two=TWO}\n```\n\n- `java.util.SortedMap` \u306b\u5909\u63db\u3059\u308b\u3002\n\n\n## MutableMap \u306e\u30e1\u30bd\u30c3\u30c9\n### getOrPut\n```kotlin\nfun main(args: Array<String>) {\n    val mutableMap = mutableMapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    println(mutableMap.getOrPut(\"one\", {\"DEFAULT\"}))\n    println(mutableMap)\n    println(mutableMap.getOrPut(\"four\", {\"DEFAULT\"}))\n    println(mutableMap)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\nONE\n{one=ONE, two=TWO, three=THREE}\nDEFAULT\n{one=ONE, two=TWO, three=THREE, four=DEFAULT}\n```\n\n- \u6307\u5b9a\u3057\u305f\u30ad\u30fc\u306b\u8a72\u5f53\u3059\u308b\u30a8\u30f3\u30c8\u30ea\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3092\u8fd4\u3059\u3002\n- \u3055\u3089\u306b\u3001\u6307\u5b9a\u3057\u305f\u30ad\u30fc\u3068\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u3057\u305f\u5024\u3067\u30a8\u30f3\u30c8\u30ea\u304c\u8ffd\u52a0\u3055\u308c\u308b\u3002\n\n### putAll\n```kotlin\nfun main(args: Array<String>) {\n    val mutableMap = mutableMapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    mutableMap.putAll(mapOf(\"four\" to \"FOUR\", \"five\" to \"FIVE\"))\n    println(mutableMap)\n\n    mutableMap.putAll(listOf(\"six\" to \"SIX\"))\n    println(mutableMap)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n{one=ONE, two=TWO, three=THREE, four=FOUR, five=FIVE}\n{one=ONE, two=TWO, three=THREE, four=FOUR, five=FIVE, six=SIX}\n```\n\n- `Map` \u307e\u305f\u306f `Pair` \u3092\u6301\u3063\u305f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u5168\u3066\u30a8\u30f3\u30c8\u30ea\u3068\u3057\u3066\u8ffd\u52a0\u3059\u308b\u3002\n\n### plusAssign\n```kotlin\nfun main(args: Array<String>) {\n    val mutableMap = mutableMapOf(\"one\" to \"ONE\", \"two\" to \"TWO\", \"three\" to \"THREE\")\n\n    mutableMap.plusAssign(mapOf(\"four\" to \"FOUR\"))\n    mutableMap.plusAssign(\"five\" to \"FIVE\")\n    mutableMap.plusAssign(listOf(\"six\" to \"SIX\"))\n\n    mutableMap += \"seven\" to \"SEVEN\"\n\n    println(mutableMap)\n}\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n{one=ONE, two=TWO, three=THREE, four=FOUR, five=FIVE, six=SIX, seven=SEVEN}\n```\n\n- `putAll()` \u3068\u3060\u3044\u305f\u3044\u540c\u3058\u3002\n- `Pair` \u5358\u72ec\u3067\u6307\u5b9a\u53ef\u80fd\u3060\u3063\u305f\u308a\u3001 `+=` \u3067\u7f6e\u304d\u63db\u3048\u53ef\u80fd\u3060\u3063\u305f\u308a\u3059\u308b\u70b9\u304c\u7570\u306a\u308b\u3002\n\n\n\n# \u53c2\u8003\n- [kotlin-rev-solution/keyword-for-kotlin.md at master \u00b7 yyYank/kotlin-rev-solution](https://github.com/yyYank/kotlin-rev-solution/blob/master/docs/keyword-for-kotlin.md#to)\n- [Generics - Kotlin Programming Language](https://kotlinlang.org/docs/reference/generics.html#variance)\n\n\n\n", "tags": ["Kotlin", "Java", "StreamAPI"]}