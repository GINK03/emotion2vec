{"context": " More than 1 year has passed since last update.\n\nHello\n\nCOMMAND\n\n\n\nByte\n\u6570\u5024\n\u540d\u524d\n\u610f\u5473\n\n\n\n\n0\n0x00\nhilen\nMessage type: command\n\n\n1\n0x00\nlolen\nMinimum payload length\n\n\n2\n0x00\nclass\nMessage class: System\n\n\n3\n0x01\nmethod\nMessage ID\n\n\n\nCOMMAND\u9001\u4fe1\u306f\u3001normal mode\u3068packet mode\u3067\u5909\u308f\u3063\u3066\u304f\u308b\u3002packet mode\u306e\u5834\u5408\u306f\u3001\u9001\u4fe1\u30d0\u30a4\u30c8\u6570\u30921\u30d0\u30a4\u30c8\u76ee\u306b\u8a18\u8f09\u3059\u308b\u3002\nnormal mode\n\n0x00 0x00 0x00 0x01 \n\npacket mode\n\n0x04 0x00 0x00 0x00 0x01 \n\n\nRESPONSE\n\n\n\nByte\n\u6570\u5024\n\u540d\u524d\n\u610f\u5473\n\n\n\n\n0\n0x00\nhilen\nMessage type: response\n\n\n1\n0x00\nlolen\nMinimum payload length\n\n\n2\n0x00\nclass\nMessage class: System\n\n\n3\n0x01\nmethod\nMessage ID\n\n\n\n\nSet Mode\nBLUEGIGA BLUETOOTH SMART SOFTWARE V.1.3 API DOCUMENTATION Wednesday, 28 May 2014 Version 3.2 (P101) \u3088\u308a\n\nCommand\n\n\n\nByte\n\u6570\u5024\n\u540d\u524d\n\u610f\u5473\n\n\n\n\n0\n0x00\nhilen\ncommand\n\n\n1\n0x02\nlolen\npayload  length\n\n\n2\n0x06\nclass\nGeneric Access Profile\n\n\n3\n0x01\nmethod\nMessage ID\n\n\n4\nuint8\ndiscover\nGAP Discoverable Mode\n\n\n5\nuint8\nconnect\nGAP Connectable Mode\n\n\n\n\n\n\nValue\nName\nDescription\n\n\n\n\n0\ngap_non_discoverable\nNon-discoverable mode: the LE Limited Discoverable Mode and the LE General Discoverable Mode bits are NOT set in the Flags AD type. A Master can still connect to the advertising Slave.\n\n\n1\ngap_limited_discoverable\nDiscoverable using limited scanning mode: the advertisement packets will carry the LE Limited Discoverable Mode bit set in the Flags AD type.\n\n\n2\ngap_general_discoverable\nDiscoverable using general scanning mode: the advertisement packets will carry the LE General Discoverable Mode bit set in the Flags AD type.\n\n\n3\ngap_broadcast\nSame as gap_non_discoverable above.\n\n\n4\ngap_user_data\nSend advertisement data defined by user. User is responsible to build the advertising packet so to also contain the appropriate desired Flags AD type.\n\n\n0x80\ngap_enhanced_broadcasting\nWhen turning the most highest bit on, the scanning devices are reported back to the application through Scan Response event.\n\n\n\n\n\n\nValue\nName\nDescription\n\n\n\n\n0\ngap_non_connectable\nNot connectable\n\n\n1\ngap_directed_connectable\nDirect Connectable\n\n\n2\ngap_undirected_connectable\nUndirected connectable\n\n\n3\ngap_scannable_connectable\nSame as undirected connectable, but uses ADV_SCAN_IND packets\n\n\n\n\u4f8b)\n\n[0x00, 0x02, 0x06, 0x01, 0x04, 0x00]\n\n\nResponse\n\n\n\nByte\n\u6570\u5024\n\u540d\u524d\n\u610f\u5473\n\n\n\n\n0\n0x00\nhilen\ncommand\n\n\n1\n0x02\nlolen\npayload  length\n\n\n2\n0x06\nclass\nGeneric Access Profile\n\n\n3\n0x01\nmethod\nMessage ID\n\n\n4-5\nuint16\nresult\n\n\n\n\n\u4f8b)\n\n[0x00, 0x02, 0x06, 0x01, 0x00, 0x00]\n\n\nSet Adv Data\nBLUEGIGA BLUETOOTH SMART SOFTWARE V.1.3 API DOCUMENTATION Wednesday, 28 May 2014 Version 3.2 (P95) \u3088\u308a\n\nCommand\n\n\n\nByte\n\u6570\u5024\n\u540d\u524d\n\u610f\u5473\n\n\n\n\n0\n0x00\nhilen\ncommand\n\n\n1\n0x02\nlolen\npayload  length\n\n\n2\n0x06\nclass\nGeneric Access Profile\n\n\n3\n0x09\nmethod\nMessage ID\n\n\n4\nuint8\nset_scanrsp\n0 : sets advertisement data1 : sets scan response data\n\n\n\n5\nadv_data\nadv_data\nAdvertisement data to send\n\n\n\n\u4f8b)\n\n[0x00, 0x02, 0x06, 0x09, 0x00, 0x02, 0x01, 0x06, 0x1A, 0xFF, 0x4C, 0x00, 0x02, 0x15, 0xCB, 0x86, 0xBC, 0x31, 0x05, 0xBD, 0x40, 0xCC, 0x90, 0x3D, 0x1C, 0x9B, 0xD1, 0x3D, 0x96, 0x6B, 0x00, 0x71, 0x00, 0x71, 0xC9]\n\n\nResponse\n\n\n\nByte\n\u6570\u5024\n\u540d\u524d\n\u610f\u5473\n\n\n\n\n0\n0x00\nhilen\ncommand\n\n\n1\n0x02\nlolen\npayload  length\n\n\n2\n0x06\nclass\nGeneric Access Profile\n\n\n3\n0x09\nmethod\nMessage ID\n\n\n4-5\nuint16\nresult\n\n\n\n\n\u4f8b)\n\n[0x00, 0x02, 0x06, 0x09, 0x00, 0x00]\n\nhttps://bluegiga.zendesk.com/entries/22412436--REFERENCE-What-is-the-difference-between-BGScript-BGAPI-and-BGLib-\n\nSample Code\n\nArduinoSample\n\n#include <SoftwareSerial.h>\n\nSoftwareSerial bleShield(12, 13);\n\nbool flag = false;\n\nvoid setup() {\n  // BLE\u3068\u306e\u901a\u4fe1\u7528\n  bleShield.begin(115200);\n  // \u30ed\u30b0\u51fa\u529b\u7528\n  Serial.begin(9600);\n  Serial.write(\"Adv start!\");\n}\n\nvoid loop() {\n\n  if(flag != true){\n    bleShield.write((byte)0x00);\n    bleShield.write((byte)0x02);\n    bleShield.write((byte)0x06);\n    bleShield.write((byte)0x01);\n    bleShield.write((byte)0x04);\n    bleShield.write((byte)0x00);\n    delay(1000);\n    byte value[6];\n    int i = 0;\n    while (bleShield.available()) {\n      if(i<6){\n        value[i] = bleShield.read();\n\n        if( i == 5){\n          if(value[0] == 0x00 && \n             value[1] == 0x02 &&\n             value[2] == 0x06 &&\n             value[3] == 0x01 &&\n             value[4] == 0x00 && \n             value[5] == 0x00)\n            {\n                Serial.println(\"Command OK[1]\");\n                break;\n            }\n        }\n\n        i++;\n      }\n    }\n\n    bleShield.write((byte)0x00);\n    bleShield.write((byte)0x02);\n    bleShield.write((byte)0x06);\n    bleShield.write((byte)0x09);\n    bleShield.write((byte)0x00);\n    bleShield.write((byte)0x02);\n    bleShield.write((byte)0x01);\n    bleShield.write((byte)0x06);\n    bleShield.write((byte)0x1A);\n    bleShield.write((byte)0xFF);\n    bleShield.write((byte)0x4C);\n    bleShield.write((byte)0x00);\n    bleShield.write((byte)0x02);\n    bleShield.write((byte)0x15);\n    bleShield.write((byte)0xCB);\n    bleShield.write((byte)0x86);\n    bleShield.write((byte)0xBC);\n    bleShield.write((byte)0x31);\n    bleShield.write((byte)0x05);\n    bleShield.write((byte)0xBD);\n    bleShield.write((byte)0x40);\n    bleShield.write((byte)0xCC);\n    bleShield.write((byte)0x90);\n    bleShield.write((byte)0x3D);\n    bleShield.write((byte)0x1C);\n    bleShield.write((byte)0x9B);\n    bleShield.write((byte)0xD1);\n    bleShield.write((byte)0x3D);\n    bleShield.write((byte)0x96);\n    bleShield.write((byte)0x6B);\n    bleShield.write((byte)0x00);\n    bleShield.write((byte)0x71);\n    bleShield.write((byte)0x00);\n    bleShield.write((byte)0x71);\n    bleShield.write((byte)0xC9);\n    delay(1000);\n\n    i = 0;\n    while (bleShield.available()) {\n      if(i<6){\n        value[i] = bleShield.read();\n\n        if( i == 5){\n          if(value[0] == 0x00 && \n             value[1] == 0x02 &&\n             value[2] == 0x06 &&\n             value[3] == 0x09 &&\n             value[4] == 0x00 && \n             value[5] == 0x00)\n            {\n                Serial.println(\"Command OK[2]\");\n                break;\n            }\n        }\n\n        i++;\n      }\n    }\n    flag = true;\n  }\n}\n\n\n\nError Code\n\nEvent\n\n\n\nByte\n\u6570\u5024\n\u540d\u524d\n\u610f\u5473\n\n\n\n\n0\n0x80\nhilen\nMessage type: event\n\n\n1\n0x02\nlolen\nMinimum payload length\n\n\n2\n0x00\nclass\nMessage class: System\n\n\n3\n0x06\nmethod\nMessage ID\n\n\n4 - 5\nuint16\nreason Reason for failure\n\n\n\n\n\n[0x80, 0x02, 0x00, 0x06, 0x84, 0x01]\n0x0184 \u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u3002\n0x0184\u306e\u30a8\u30e9\u30fc\u306f\u3001\"Command Not Recognized\"\u306e\u30a8\u30e9\u30fc\u3002\n\n\nBGScript Error\n\n\n\n\u5024\nError\u540d\n\u610f\u5473\n\n\n\n\n0x0180\nInvalid Parameter\nCommand contained invalid parameter\n\n\n0x0181\nDevice in Wrong State\nDevice is in wrong state to receive command\n\n\n0x0182\nOut Of Memory\nDevice has run out of memory\n\n\n0x0183\nFeature Not Implemented\nFeature is not implemented\n\n\n0x0184\nCommand Not Recognized\nCommand was not recognized\n\n\n0x0185\nTimeout\nCommand or Procedure failed due to timeout\n\n\n0x0186\nNot Connected\nConnection handle passed is to command is not a valid handle\n\n\n0x0187\nflow\nCommand would cause either underflow or overflow error\n\n\n0x0188\nUser Attribute\nUser attribute was accessed through API which is not supported\n\n\n0x0189\nInvalid License Key\nNo valid license key found\n\n\n0x018A\nCommand Too Long\nCommand maximum length exceeded\n\n\n0x018B\nOut of Bonds\nBonding procedure can't be started because device has no space left for bond.\n\n\n\n\nBluetooth Errors\n\n\n\n\u5024\nError\u540d\n\u610f\u5473\n\n\n\n\n0x0205\nAuthentication Failure\nPairing or authentication failed due to incorrect results in the pairing or authentication procedure. This could be due to an incorrect PIN or Link Key\n\n\n0x0206\nPin or Key Missing\nPairing failed because of missing PIN, or authentication failed because of missing Key.\n\n\n0x0207\nMemory Capacity Exceeded\nController is out of memory.\n\n\n0x0208\nConnection Timeout\nLink supervision timeout has expired.\n\n\n0x0209\nConnection Limit Exceeded\nController is at limit of connections it can support.\n\n\n0x020C\nCommand Disallowed\nCommand requested cannot be executed because the Controller is in a state where it cannot process this command at this time.\n\n\n0x0212\nInvalid Command Parameters\nCommand contained invalid parameters.\n\n\n0x0213\nRemote User Terminated Connection\nUser on the remote device terminated the connection.\n\n\n0x0216\nConnection Terminated by Local Host\nLocal device terminated the connection.\n\n\n0x0222\nLL Response Timeout\nConnection terminated due to link-layer procedure timeout.\n\n\n0x0228\nLL Instant Passed\nReceived link-layer control packet where instant was in the past.\n\n\n0x023A\nController Busy\nOperation was rejected because the controller is busy and unable to process the request.\n\n\n0x023B\nUnacceptable Connection Interval\nThe Unacceptable Connection Interval error code indicates that the remote device terminated the connection because of an unacceptable connection interval.\n\n\n0x023C\nDirected Advertising Timeout\nDirected advertising completed without a connection being created.\n\n\n0x023D\nMIC Failure\nConnection was terminated because the Message Integrity Check (MIC) failed on a received packet.\n\n\n0x023E\nConnection Failed to be Established\nLL initiated a connection but the connection has failed to be established. Controller did not receive any packets from remote end.\n\n\n\n\nSecurity Manager Protocol Errors\n\n\n\n\u5024\nError\u540d\n\u610f\u5473\n\n\n\n\n0x0301\nPasskey Entry Failed\nThe user input of passkey failed, for example, the user cancelled the operation\n\n\n0x0302\nOOB Data is not available\nOut of Band data is not available for authentication\n\n\n0x0303\nAuthentication Requirements\nThe pairing procedure cannot be performed as authentication requirements cannot be met due to IO capabilities of one or both devices\n\n\n0x0304\nConfirm Value Failed\nThe confirm value does not match the calculated compare value\n\n\n0x0305\nPairing Not Supported\nPairing is not supported by the device\n\n\n0x0306\nEncryption Key Size\nThe resultant encryption key size is insufficient for the security requirements of this device\n\n\n0x0307\nCommand Not Supported\nThe SMP command received is not supported on this device\n\n\n0x0308\nUnspecified Reason\nPairing failed due to an unspecified reason\n\n\n0x0309\nRepeated Attempts\nPairing or authentication procedure is disallowed because too little time has elapsed since last pairing request or security request\n\n\n0x030A\nInvalid Parameters\nThe Invalid Parameters error code indicates: the command length is invalid or a parameter is outside of the specified range.\n\n\n\n\nAttribute Protocol Errors\n\n\n\n\u5024\nError\u540d\n\u610f\u5473\n\n\n\n\n0x0401\nInvalid Handle\nThe attribute handle given was not valid on this server\n\n\n0x0402\nRead Not Permitted\nThe attribute cannot be read\n\n\n0x0403\nWrite Not Permitted\nThe attribute cannot be written\n\n\n0x0404\nInvalid PDU\nThe attribute PDU was invalid\n\n\n0x0405\nInsufficient Authentication\nThe attribute requires authentication before it can be read or written.\n\n\n0x0406\nRequest Not Supported\nAttribute Server does not support the request received from the client.\n\n\n0x0407\nInvalid Offset\nOffset specified was past the end of the attribute\n\n\n0x0408\nInsufficient Authorization\nThe attribute requires authorization before it can be read or written.\n\n\n0x0409\nPrepare Queue Full\nToo many prepare writes have been queueud\n\n\n0x040A\nAttribute Not Found\nNo attribute found within the given attribute handle range.\n\n\n0x040B\nAttribute Not Long\nThe attribute cannot be read or written using the Read Blob Request\n\n\n0x040C\nInsufficient Encryption Key Size\nThe Encryption Key Size used for encrypting this link is insufficient.\n\n\n0x040D\nInvalid Attribute Value Length\nThe attribute value length is invalid for the operation\n\n\n0x040E\nUnlikely Error\nThe attribute request that was requested has encountered an error that was unlikely, and therefore could not be completed as requested.\n\n\n0x040F\nInsufficient Encryption\nThe attribute requires encryption before it can be read or written.\n\n\n0x0410\nUnsupported Group Type\nThe attribute type is not a supported grouping attribute as defined by a higher layer specification.\n\n\n0x0411\nInsufficient Resources\nInsufficient Resources to complete the request\n\n\n0x0480\nApplication Error Codes\nApplication error code defined by a higher layer specification.\n\n\n\n# Hello\n\n## COMMAND\n|Byte|\u6570\u5024|\u540d\u524d|\u610f\u5473|\n|:--|:--|:--|:--|\n| 0 | 0x00 | hilen | Message type: command |\n| 1 | 0x00 | lolen | Minimum payload length |\n| 2 | 0x00 | class | Message class: System | \n| 3 | 0x01 | method | Message ID |\n\nCOMMAND\u9001\u4fe1\u306f\u3001normal mode\u3068packet mode\u3067\u5909\u308f\u3063\u3066\u304f\u308b\u3002packet mode\u306e\u5834\u5408\u306f\u3001\u9001\u4fe1\u30d0\u30a4\u30c8\u6570\u30921\u30d0\u30a4\u30c8\u76ee\u306b\u8a18\u8f09\u3059\u308b\u3002\n\nnormal mode\n> 0x00 0x00 0x00 0x01 \n\npacket mode\n> 0x04 0x00 0x00 0x00 0x01 \n\n## RESPONSE\n|Byte|\u6570\u5024|\u540d\u524d|\u610f\u5473|\n|:--|:--|:--|:--|\n| 0 | 0x00 | hilen | Message type: response |\n| 1 | 0x00 | lolen | Minimum payload length |\n| 2 | 0x00 | class | Message class: System |\n| 3 | 0x01 | method | Message ID |\n\n# Set Mode\n[BLUEGIGA BLUETOOTH SMART SOFTWARE V.1.3 API DOCUMENTATION Wednesday, 28 May 2014 Version 3.2 (P101) ](http://mt-system.ru/sites/default/files/documents/bluetooth_smart_software_v13_api_reference.pdf)\u3088\u308a\n\n## Command\n\n|Byte|\u6570\u5024|\u540d\u524d|\u610f\u5473|\n|:--|:--|:--|:--|\n| 0 | 0x00 | hilen | command |\n| 1 | 0x02 | lolen | payload  length |\n| 2 | 0x06 | class | Generic Access Profile |\n| 3 | 0x01 | method |Message ID |\n| 4 | uint8 | discover |GAP Discoverable Mode|\n| 5 | uint8 | connect |GAP Connectable Mode |\n\n|Value|Name|Description|\n|:--|:--|:--|\n| 0 | gap_non_discoverable | Non-discoverable mode: the LE Limited Discoverable Mode and the LE General Discoverable Mode bits are NOT set in the Flags AD type. A Master can still connect to the advertising Slave. |\n| 1 | gap_limited_discoverable | Discoverable using limited scanning mode: the advertisement packets will carry the LE Limited Discoverable Mode bit set in the Flags AD type.|\n| 2 | gap_general_discoverable | Discoverable using general scanning mode: the advertisement packets will carry the LE General Discoverable Mode bit set in the Flags AD type. |\n| 3 | gap_broadcast  | Same as gap_non_discoverable above. |\n| 4 | gap_user_data | Send advertisement data defined by user. User is responsible to build the advertising packet so to also contain the appropriate desired Flags AD type. |\n| 0x80 | gap_enhanced_broadcasting | When turning the most highest bit on, the scanning devices are reported back to the application through Scan Response event. |\n\n|Value|Name|Description|\n|:--|:--|:--|\n| 0 | gap_non_connectable | Not connectable |\n| 1 | gap_directed_connectable | Direct Connectable |\n| 2 | gap_undirected_connectable | Undirected connectable |\n| 3 | gap_scannable_connectable | Same as undirected connectable, but uses ADV_SCAN_IND packets |\n\n\u4f8b)<br>\n> [0x00, 0x02, 0x06, 0x01, 0x04, 0x00]\n\n## Response\n|Byte|\u6570\u5024|\u540d\u524d|\u610f\u5473|\n|:--|:--|:--|:--|\n| 0 | 0x00 | hilen | command |\n| 1 | 0x02 | lolen | payload  length |\n| 2 | 0x06 | class | Generic Access Profile |\n| 3 | 0x01 | method |Message ID |\n| 4-5| uint16 | result |\n\n\u4f8b)<br>\n> [0x00, 0x02, 0x06, 0x01, 0x00, 0x00]\n\n\n# Set Adv Data\n[BLUEGIGA BLUETOOTH SMART SOFTWARE V.1.3 API DOCUMENTATION Wednesday, 28 May 2014 Version 3.2 (P95) ](http://mt-system.ru/sites/default/files/documents/bluetooth_smart_software_v13_api_reference.pdf)\u3088\u308a\n\n## Command\n|Byte|\u6570\u5024|\u540d\u524d|\u610f\u5473|\n|:--|:--|:--|:--|\n| 0 | 0x00 | hilen | command |\n| 1 | 0x02 | lolen | payload  length |\n| 2 | 0x06 | class | Generic Access Profile |\n| 3 | 0x09 | method |Message ID |\n| 4 | uint8 |set_scanrsp |0 : sets advertisement data<br>1 : sets scan response data<br>|\n| 5 | adv_data | adv_data |Advertisement data to send |\n\n\u4f8b)<br>\n> [0x00, 0x02, 0x06, 0x09, 0x00, 0x02, 0x01, 0x06, 0x1A, 0xFF, 0x4C, 0x00, 0x02, 0x15, 0xCB, 0x86, 0xBC, 0x31, 0x05, 0xBD, 0x40, 0xCC, 0x90, 0x3D, 0x1C, 0x9B, 0xD1, 0x3D, 0x96, 0x6B, 0x00, 0x71, 0x00, 0x71, 0xC9]\n\n## Response\n|Byte|\u6570\u5024|\u540d\u524d|\u610f\u5473|\n|:--|:--|:--|:--|\n| 0 | 0x00 | hilen | command |\n| 1 | 0x02 | lolen | payload  length |\n| 2 | 0x06 | class | Generic Access Profile |\n| 3 | 0x09 | method |Message ID |\n| 4-5| uint16 | result |\n\n\u4f8b)<br>\n> [0x00, 0x02, 0x06, 0x09, 0x00, 0x00]\n\nhttps://bluegiga.zendesk.com/entries/22412436--REFERENCE-What-is-the-difference-between-BGScript-BGAPI-and-BGLib-\n\n# Sample Code\n\n```cpp:ArduinoSample\n\n#include <SoftwareSerial.h>\n\nSoftwareSerial bleShield(12, 13);\n\nbool flag = false;\n\nvoid setup() {\n  // BLE\u3068\u306e\u901a\u4fe1\u7528\n  bleShield.begin(115200);\n  // \u30ed\u30b0\u51fa\u529b\u7528\n  Serial.begin(9600);\n  Serial.write(\"Adv start!\");\n}\n\nvoid loop() {\n\n  if(flag != true){\n    bleShield.write((byte)0x00);\n    bleShield.write((byte)0x02);\n    bleShield.write((byte)0x06);\n    bleShield.write((byte)0x01);\n    bleShield.write((byte)0x04);\n    bleShield.write((byte)0x00);\n    delay(1000);\n    byte value[6];\n    int i = 0;\n    while (bleShield.available()) {\n      if(i<6){\n        value[i] = bleShield.read();\n       \n        if( i == 5){\n          if(value[0] == 0x00 && \n             value[1] == 0x02 &&\n             value[2] == 0x06 &&\n             value[3] == 0x01 &&\n             value[4] == 0x00 && \n             value[5] == 0x00)\n            {\n                Serial.println(\"Command OK[1]\");\n                break;\n            }\n        }\n\n        i++;\n      }\n    }\n\n    bleShield.write((byte)0x00);\n    bleShield.write((byte)0x02);\n    bleShield.write((byte)0x06);\n    bleShield.write((byte)0x09);\n    bleShield.write((byte)0x00);\n    bleShield.write((byte)0x02);\n    bleShield.write((byte)0x01);\n    bleShield.write((byte)0x06);\n    bleShield.write((byte)0x1A);\n    bleShield.write((byte)0xFF);\n    bleShield.write((byte)0x4C);\n    bleShield.write((byte)0x00);\n    bleShield.write((byte)0x02);\n    bleShield.write((byte)0x15);\n    bleShield.write((byte)0xCB);\n    bleShield.write((byte)0x86);\n    bleShield.write((byte)0xBC);\n    bleShield.write((byte)0x31);\n    bleShield.write((byte)0x05);\n    bleShield.write((byte)0xBD);\n    bleShield.write((byte)0x40);\n    bleShield.write((byte)0xCC);\n    bleShield.write((byte)0x90);\n    bleShield.write((byte)0x3D);\n    bleShield.write((byte)0x1C);\n    bleShield.write((byte)0x9B);\n    bleShield.write((byte)0xD1);\n    bleShield.write((byte)0x3D);\n    bleShield.write((byte)0x96);\n    bleShield.write((byte)0x6B);\n    bleShield.write((byte)0x00);\n    bleShield.write((byte)0x71);\n    bleShield.write((byte)0x00);\n    bleShield.write((byte)0x71);\n    bleShield.write((byte)0xC9);\n    delay(1000);\n    \n    i = 0;\n    while (bleShield.available()) {\n      if(i<6){\n        value[i] = bleShield.read();\n        \n        if( i == 5){\n          if(value[0] == 0x00 && \n             value[1] == 0x02 &&\n             value[2] == 0x06 &&\n             value[3] == 0x09 &&\n             value[4] == 0x00 && \n             value[5] == 0x00)\n            {\n                Serial.println(\"Command OK[2]\");\n                break;\n            }\n        }\n\n        i++;\n      }\n    }\n    flag = true;\n  }\n}\n```\n\n# Error Code\n\n## Event\n|Byte|\u6570\u5024|\u540d\u524d|\u610f\u5473|\n|:--|:--|:--|:--|\n| 0 | 0x80 | hilen | Message type: event |\n| 1 | 0x02 | lolen | Minimum payload length |\n| 2 | 0x00 | class | Message class: System |\n| 3 | 0x06 | method | Message ID |\n| 4 - 5 | uint16 | reason Reason for failure |\n\n> [0x80, 0x02, 0x00, 0x06, 0x84, 0x01]\n0x0184 \u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u3002\n0x0184\u306e\u30a8\u30e9\u30fc\u306f\u3001\"Command Not Recognized\"\u306e\u30a8\u30e9\u30fc\u3002\n\n## BGScript Error\n\n| \u5024 | Error\u540d | \u610f\u5473 |\n|:-:|:--|:--|\n| 0x0180 |  Invalid Parameter | Command contained invalid parameter |\n| 0x0181 | Device in Wrong State | Device is in wrong state to receive command |\n| 0x0182 | Out Of Memory | Device has run out of memory |\n| 0x0183 | Feature Not Implemented | Feature is not implemented |\n| 0x0184 | Command Not Recognized  | Command was not recognized |\n| 0x0185 | Timeout | Command or Procedure failed due to timeout |\n| 0x0186 | Not Connected | Connection handle passed is to command is not a valid handle |\n| 0x0187 | flow | Command would cause either underflow or overflow error |\n| 0x0188 | User Attribute |User attribute was accessed through API which is not supported |\n| 0x0189 | Invalid License Key | No valid license key found |\n| 0x018A |Command Too Long | Command maximum length exceeded |\n| 0x018B | Out of Bonds | Bonding procedure can't be started because device has no space left for bond. |\n\n## Bluetooth Errors\n\n| \u5024 | Error\u540d | \u610f\u5473 |\n|:-:|:--|:--|\n| 0x0205 |Authentication Failure|Pairing or authentication failed due to incorrect results in the pairing or authentication procedure. This could be due to an incorrect PIN or Link Key |\n| 0x0206 | Pin or Key Missing | Pairing failed because of missing PIN, or authentication failed because of missing Key. |\n| 0x0207 | Memory Capacity Exceeded | Controller is out of memory. |\n| 0x0208 | Connection Timeout | Link supervision timeout has expired. |\n| 0x0209 | Connection Limit Exceeded | Controller is at limit of connections it can support. |\n| 0x020C | Command Disallowed | Command requested cannot be executed because the Controller is in a state where it cannot process this command at this time. |\n| 0x0212 | Invalid Command Parameters | Command contained invalid parameters. |\n| 0x0213 | Remote User Terminated Connection | User on the remote device terminated the connection. |\n| 0x0216 | Connection Terminated by Local Host | Local device terminated the connection. |\n| 0x0222 | LL Response Timeout | Connection terminated due to link-layer procedure timeout. |\n| 0x0228 | LL Instant Passed | Received link-layer control packet where instant was in the past. |\n|  0x023A | Controller Busy  | Operation was rejected because the controller is busy and unable to process the request. |\n| 0x023B | Unacceptable Connection Interval | The Unacceptable Connection Interval error code indicates that the remote device terminated the connection because of an unacceptable connection interval. |\n|0x023C|Directed Advertising Timeout | Directed advertising completed without a connection being created. |\n|0x023D|MIC Failure | Connection was terminated because the Message Integrity Check (MIC) failed on a received packet.|\n|0x023E| Connection Failed to be Established | LL initiated a connection but the connection has failed to be established. Controller did not receive any packets from remote end. |\n\n## Security Manager Protocol Errors\n\n| \u5024 | Error\u540d | \u610f\u5473 |\n|:-:|:--|:--|\n| 0x0301 | Passkey Entry Failed |The user input of passkey failed, for example, the user cancelled the operation |\n| 0x0302 |  OOB Data is not available | Out of Band data is not available for authentication |\n| 0x0303 | Authentication Requirements | The pairing procedure cannot be performed as authentication requirements cannot be met due to IO capabilities of one or both devices |\n| 0x0304 |  Confirm Value Failed | The confirm value does not match the calculated compare value |\n| 0x0305 |  Pairing Not Supported | Pairing is not supported by the device |\n| 0x0306 | Encryption Key Size | The resultant encryption key size is insufficient for the security requirements of this device |\n| 0x0307 | Command Not Supported | The SMP command received is not supported on this device |\n|0x0308 | Unspecified Reason | Pairing failed due to an unspecified reason|\n|0x0309| Repeated Attempts | Pairing or authentication procedure is disallowed because too little time has elapsed since last pairing request or security request |\n| 0x030A | Invalid Parameters | The Invalid Parameters error code indicates: the command length is invalid or a parameter is outside of the specified range. |\n\n## Attribute Protocol Errors\n\n| \u5024 | Error\u540d | \u610f\u5473 |\n|:-:|:--|:--|\n|0x0401|Invalid Handle|The attribute handle given was not valid on this server|\n|0x0402|Read Not Permitted |The attribute cannot be read|\n|0x0403|Write Not Permitted|The attribute cannot be written|\n|0x0404|Invalid PDU |The attribute PDU was invalid|\n|0x0405|Insufficient Authentication |The attribute requires authentication before it can be read or written.|\n|0x0406|Request Not Supported |Attribute Server does not support the request received from the client.|\n|0x0407 |Invalid Offset |Offset specified was past the end of the attribute|\n|0x0408 |Insufficient Authorization |The attribute requires authorization before it can be read or written.|\n|0x0409|Prepare Queue Full |Too many prepare writes have been queueud|\n|0x040A|Attribute Not Found |No attribute found within the given attribute handle range.|\n|0x040B|Attribute Not Long |The attribute cannot be read or written using the Read Blob Request|\n|0x040C|Insufficient Encryption Key Size |The Encryption Key Size used for encrypting this link is insufficient.|\n|0x040D|Invalid Attribute Value Length |The attribute value length is invalid for the operation|\n|0x040E|Unlikely Error |The attribute request that was requested has encountered an error that was unlikely, and therefore could not be completed as requested.|\n|0x040F|Insufficient Encryption |The attribute requires encryption before it can be read or written.|\n|0x0410|Unsupported Group Type |The attribute type is not a supported grouping attribute as defined by a higher layer specification.|\n|0x0411|Insufficient Resources |Insufficient Resources to complete the request |\n|0x0480|Application Error Codes |Application error code defined by a higher layer specification.|\n", "tags": ["bgapi", "fabo"]}