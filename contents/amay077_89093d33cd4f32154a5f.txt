{"context": " More than 1 year has passed since last update.RxJava \u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u4e2d\u306b TrampolineScheduler \u3068\u3044\u3046\u306e\u304c\u3042\u308a\u3001\u306a\u3093\u3058\u3083\u3053\u308c\uff1f\u3068\u3064\u3076\u3084\u3044\u305f\u3068\u3053\u308d\u3001 Rx.NET \u306e CurrentThreadScheduler \u3068\u540c\u3058\u3063\u307d\u3044 \u3068\u6559\u3048\u3066\u3082\u3089\u3044\u307e\u3057\u305f\u3002\n\u305d\u306e\u6d41\u308c\u3067\u3001\u985e\u4f3c\u306e Scheduler \u3067\u3042\u308b ImmediateScheduler \u3068\u306e\u9055\u3044\u306b\u3064\u3044\u3066\u8a9e\u3089\u308c\u3066\u3044\u308b\u30c8\u30d4\u30c3\u30af\u3092\u7d39\u4ecb\u3057\u3066\u3082\u3089\u3044\u307e\u3057\u305f\u3002\n\n\nCurrentThreadScheduler vs ImmediateScheduler\n\nCurrentThreadScheduler vs ImmediateScheduler\n\n\u7d39\u4ecb\u3057\u3066\u3082\u3089\u3063\u305f\u3053\u306e\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\u3092\u3001\u9811\u5f35\u3063\u3066\u7ffb\u8a33\u3057\u3066\u307f\u307e\u3057\u305f\uff08\u3081\u3061\u3083\u304f\u3061\u3083\u306a\u3068\u3053\u306f\u8a02\u6b63\u9858\u3044\u307e\u3059\uff09\u3002\nRxJava \u3067\u306f CurrentThreadScheduler \u3092 TrampolineScheduler \u306b\u8aad\u307f\u66ff\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\uff0d\uff0d\u8a33\u3053\u3053\u304b\u3089\uff0d\uff0d\n\nOhad \u6c0f\u306e\u8cea\u554f\n\nHi\nImmediateScheduler's Schedule method is pretty straightforward - it simply invokes the action.\nIn contrast, CurrentThreadScheduler seems more involved - it creates something called a trampoline, which in turn iterates over an action queue, sleeping between invocations of items in the queue and so forth\n\n\u3084\u3042\u3001\nImmediateScheduler.Schedule \u30e1\u30bd\u30c3\u30c9\u306f\u5358\u7d14\u3092\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\u5bfe\u7167\u7684\u306b\u3001 CurrentThreadScheduler \u306f\u8907\u96d1\u306b\u898b\u3048\u307e\u3059\u3002\u30c8\u30e9\u30f3\u30dd\u30ea\u30f3\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u3092\u4f5c\u308a\u3001\u305d\u308c\u306f\u30a2\u30af\u30b7\u30e7\u30f3\u30fb\u30ad\u30e5\u30fc\u3067\u3001\u9806\u6b21\u30b9\u30ea\u30fc\u30d7\u306e\u9593\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\nI've been trying to follow the code with reflector but I'm having a hard time understanding the difference. As far as I can tell, CurrentThreadSchedule's schedule method calls Trampoline 's Run method, which will end up blocking the current thread until the queued action is performed (on the current thread as well) - apparently just like in the case of ImmediateScheduler\n\n\u79c1\u306f\u30b3\u30fc\u30c9\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u7406\u89e3\u3059\u308b\u306e\u306b\u82e6\u52b4\u3057\u3066\u3044\u307e\u3059\u3002\u5206\u304b\u308b\u7bc4\u56f2\u3067\u306f\u3001 CurrentThreadSchedule.Schedule \u30e1\u30bd\u30c3\u30c9\u306f Trampoline.Run \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u3001\u30ad\u30e5\u30fc\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u308b\u307e\u3067(\u30ab\u30ec\u30f3\u30c8\u30b9\u30ec\u30c3\u30c9\u3082\u540c\u69d8\u306b)\u30d6\u30ed\u30c3\u30af\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002 - \u3069\u3046\u3082 ImmediateScheduler \u306e\u3088\u3046\u306b\u307f\u3048\u307e\u3059\u3002\n\nI realize I'm missing something, so an explanation would be really appreciated\nThanks !\n\n\u4f55\u304b\u7406\u89e3\u304c\u8db3\u308a\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u3001\u8aac\u660e\u3057\u3066\u3082\u3089\u3048\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002\n\nEDIT - In the meantime I've found a couple of resources that may shed light on the subject, if anyone's interested:\n\n\uff12\u3064\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002\u4f55\u304b\u306e\u624b\u304c\u304b\u308a\u306b\u306a\u308c\u3070\u3002\nhttp://channel9.msdn.com/blogs/j.van.gogh/controlling-concurrency-in-rx\nhttp://community.bartdesmet.net/blogs/bart/archive/2009/11/08/jumping-the-trampoline-in-c-stack-friendly-recursion.aspx\n\nDave \u6c0f\u306e\u56de\u7b54\n\nHi,\nThe trampoline seems to serve three purposes: \n\n\u3084\u3042\u3001\n\u30c8\u30e9\u30f3\u30dd\u30ea\u30f3\u306f\uff13\u3064\u306e\u76ee\u7684\u3092\u6301\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\n1- Prevents dead-locks from scheduler reentrancy.\n\n1- \u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u306e\u5272\u308a\u8fbc\u307f\u304b\u3089\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u3092\u9632\u304e\u307e\u3059\u3002\n\n2- Prevents infinite loops in observables that require recursion through scheduler reentrancy.\n\n2- \u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u306e\u5272\u308a\u8fbc\u307f\u3092\u4f7f\u3063\u305f\u518d\u5e30\u304c\u5fc5\u8981\u306a Observable \u306e\u7121\u9650\u30eb\u30fc\u30d7\u3092\u9632\u304e\u307e\u3059\u3002\n\n3- Cooperative single-threaded multitasking; I guess it's similar to the proposed async/await feature in C# 5.0.  Calling CurrentThreadScheduler.Schedule is sort of like using await when the currently executing code was also scheduled via CurrentThreadScheduler.\n\n3- \u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3067\u306e\u300c\u5354\u8abf\u7684\u30de\u30eb\u30c1\u30bf\u30b9\u30ad\u30f3\u30b0\u300d; \u79c1\u306f C# 5.0 \u306b\u63d0\u6848\u3055\u308c\u3066\u3044\u308b async/await \u306b\u8fd1\u3044\u3082\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002CurrentThreadScheduler.Schedule \u306e\u547c\u3073\u51fa\u3057\u306f\u3001\u73fe\u5728\u5b9f\u884c\u4e2d\u306e\u30b3\u30fc\u30c9\u3082 CurrentThreadScheduler \u3067\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3055\u308c\u3066\u3044\u305f\u3068\u304d\u306b await \u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\uff08\u8a33\u6ce8: C# \u306e async/await \u306f\u5354\u8abf\u7684\u30de\u30eb\u30c1\u30bf\u30b9\u30ad\u30f3\u30b0\u3067\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u308c\u306f async/await \u767b\u5834\u4ee5\u524d\u306b\u4e88\u60f3\u3067\u66f8\u304b\u308c\u305f\u3082\u306e\u304b\u3068\u3002\n\nIn the observable world, calling Subscribe should be an asynchronous operation.  There's a problem if the scheduling of an observable dead-locks or blocks the current thread indefinitely because it attempts to execute immediately and never completes.\n\nObservable \u306e\u4e16\u754c\u3067\u306f\u3001Subscribe \u306e\u547c\u3073\u51fa\u3057\u306f\u3001\u975e\u540c\u671f\u51e6\u7406\u3067\u884c\u308f\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002Observable \u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u304c\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u307e\u305f\u306f\u30ab\u30ec\u30f3\u30c8\u30b9\u30ec\u30c3\u30c9\u3092\u7121\u671f\u9650\u306b\u30d6\u30ed\u30c3\u30af\u3059\u308b\u5834\u5408\u3001\u3059\u3050\u306b\u5b9f\u884c\u3057\u3088\u3046\u3068\u3057\u3066\u3082\u5b8c\u4e86\u3057\u306a\u3044\u306e\u3067\u3001\u554f\u984c\u306b\u306a\u308a\u307e\u3059\u3002\n\nIgnore the type of scheduler for a moment and consider a scheduled action that eventually, through some sequence of method calls, uses the same scheduler to schedule another action.\n\n\u3061\u3087\u3063\u3068\u3053\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u3092\u7121\u8996\u3057\u3066\u3001\u3044\u305a\u308c\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306f\u5225\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3059\u308b\u305f\u3081\u306b\u3001\u540c\u3058\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\nWith the ImmediateScheduler, the inner action is executed immediately.\n\nImmediateScheduler \u3067\u306f\u3001\u201d\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u201d \u306f\u3059\u3050\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\n\nIf the outer action acquires some resource on which the inner action depends, and the inner action cannot acquire this resource until it's released by the outer action, then these actions dead-lock.\n\n\n\n\u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u3001\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30ea\u30bd\u30fc\u30b9\u3092\u53d6\u5f97\u3057\u305f\u5834\u5408\u3001\n\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u30ea\u30bd\u30fc\u30b9\u3092\u958b\u653e\u3059\u308b\u307e\u3067\u305d\u308c\u3092\u53d6\u5f97\u3067\u304d\u305a\u3001\u3053\u308c\u3089\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u3057\u307e\u3059\u3002\n\n\n\nIf the outer action depends upon the inner action, and the inner action depends upon the outer action, then this could result in an infinite loop that never yields control to other actions.\n\n\n\n\u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u5185\u90e8\u30a2\u30af\u30b7\u30e7\u30f3\u306b\u4f9d\u5b58\u3057\u3001\u5185\u90e8\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u5916\u5074\u306e\u884c\u52d5\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u4ed6\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306b\u5236\u5fa1\u304c\u79fb\u3089\u306a\u3044\u7121\u9650\u30eb\u30fc\u30d7\u306b\u306a\u308a\u307e\u3059\u3002\n\n\nFor example: Observable.Return(1).Repeat().Take(1)\n\n\u4f8b: Observable.Return(1).Repeat().Take(1)\n\nBy default, Return uses the ImmediateScheduler to call OnNext(1) then OnCompleted().  Repeat does not introduce any concurrency, so it sees OnCompleted immediately and then immediately resubscribes to Return.  Because there's no trampoline in Return, this pattern repeats itself, blocking the current thread indefinitely.  Calling Subscribe on this observable never returns.  See this discussion for more information.\n\n\u65e2\u5b9a\u3067\u306f\u3001Return \u306f ImmediateScheduler \u3092\u4f7f\u3063\u3066 OnNext(1) \u305d\u3057\u3066 OnCompleted() \u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 Repeat \u306f\u3069\u3093\u306a\u4e26\u5217\u6027\u3082\u4f7f\u7528\u3057\u307e\u305b\u3093\u3001\u306a\u306e\u3067\u3059\u3050\u306b OnCompleted \u3092\u691c\u77e5\u3057\u3066\u3001\u3059\u3050\u306b Return \u3092\u518d\u8cfc\u8aad\u3057\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u3001 Return \u306b\u306f\u30c8\u30e9\u30f3\u30dd\u30ea\u30f3\u304c\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u306f\u81ea\u5206\u81ea\u8eab\u3092\u7e70\u308a\u8fd4\u3057\u3001\u7121\u671f\u9650\u306b\u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u30d6\u30ed\u30c3\u30af\u3057\u7d9a\u3051\u307e\u3059\u3002\u3053\u306e Observable \u3092 Subscribe \u3059\u308b\u3068\u51e6\u7406\u304c\u8fd4\u3063\u3066\u304d\u307e\u305b\u3093\u3002\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u306e\u8aac\u660e\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nWith the CurrentThreadScheduler, the inner action is scheduled (queued) for execution when the outer action ends.  Conceptually, inner actions are bounced on the trampoline until the current thread is ready to execute them.\n\nCurrentThreadScheduler \u3067\u306f\u3001\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u3001\u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u7d42\u4e86\u3055\u308c\u305f\u6642\u306b\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3055\u308c\u307e\u3059\u3002\u30b3\u30f3\u30bb\u30d7\u30c8\u3068\u3057\u3066\u306f\u3001\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u3001\u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u5b9f\u884c\u53ef\u80fd\u306b\u306a\u308b\u307e\u3067\u30c8\u30e9\u30f3\u30dd\u30ea\u30f3\u306e\u4e0a\u3067\u8df3\u306d\u307e\u3059\u3002\n\n\nIf the outer action acquires some resource on which the inner action depends, and the inner action cannot acquire this resource until it's released by the outer action, then these actions do not dead-lock because the inner action is not executed until the outer action completes.\n\n\n\n\u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u3001\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30ea\u30bd\u30fc\u30b9\u3092\u53d6\u5f97\u3057\u3001\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u305d\u308c\u3089\u304c\u89e3\u653e\u3055\u308c\u308b\u307e\u3067\u53d6\u5f97\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u3053\u308c\u3089\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u3057\u307e\u305b\u3093\u3001\u306a\u305c\u306a\u3089\u3002\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u7d42\u4e86\u3059\u308b\u307e\u3067\u5b9f\u884c\u3055\u308c\u306a\u3044\u305f\u3081\u3067\u3059\u3002\n\n\n\nIf the outer action recurses when the inner action completes, then there won't be an immediately infinite loop because the inner action does not complete until the outer action completes first.\n\n\n\n\u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u7d42\u4e86\u3057\u305f\u6642\u306b\u518d\u5e30\u7684\u306a\u5834\u5408\u3001\u7121\u9650\u30eb\u30fc\u30d7\u306b\u306a\u308a\u307e\u305b\u3093\u3002\u306a\u305c\u306a\u3089\u3001\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u5b8c\u4e86\u3059\u308b\u307e\u3067\u5b8c\u4e86\u3057\u306a\u3044\u305f\u3081\u3067\u3059\u3002\n\n\nFor example: Observable.Return(1, Scheduler.CurrentThread).Repeat().Take(1)\n\n\u4f8b: Observable.Return(1, Scheduler.CurrentThread).Repeat().Take(1)\n\nHere, Return is using the CurrentTheadScheduler to call OnNext(1) then OnCompleted().  Repeat does not introduce any concurrency, so it sees OnCompleted immediately and then immediately resubscribes to Return; however, this second subscription to Return schedules its (inner) actions on the trampoline because it's still executing on the OnCompleted callback from the first scheduled (outer) action, thus the repetition does not occur immediately.  This allows Repeat to return a disposable to Take, which eventually calls OnCompleted, cancels the repetition by disposing Repeat, and ultimately the call from Subscribe returns.\n\n\u3053\u3053\u3067\u306f\u3001 Return \u306f CurrentTheadScheduler \u3092\u4f7f\u3063\u3066 OnNext(1) \u305d\u3057\u3066 OnCompleted() \u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 Repeat \u306f\u3069\u3093\u306a\u4e26\u5217\u6027\u3082\u4f7f\u7528\u3057\u307e\u305b\u3093\u3001\u306a\u306e\u3067\u3059\u3050\u306b OnCompleted \u3092\u691c\u77e5\u3057\u3066\u3001\u3059\u3050\u306b Return \u3092\u518d\u8cfc\u8aad\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u306e\uff12\u56de\u76ee\u306e Return \u306e\u8cfc\u8aad\uff08\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\uff09\u306f\u30c8\u30e9\u30f3\u30dd\u30ea\u30f3\u306e\u4e0a\u306b\u3042\u308a\u307e\u3059\u3001\u306a\u305c\u306a\u3089\u3001\u6700\u521d\u306b\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3055\u308c\u305f\u30a2\u30af\u30b7\u30e7\u30f3\uff08\u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\uff09\u306e OnCompleted \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u4e0a\u3067\u307e\u3060\u5b9f\u884c\u4e2d\u3067\u3042\u308b\u304b\u3089\u3067\u3059\u3001\u306a\u306e\u3067\u7e70\u308a\u8fd4\u3057\u306f\u3059\u3050\u306b\u767a\u751f\u3057\u307e\u305b\u3093\u3002\n\u3053\u308c\u306f\u3001Repeat \u306f Take \u306b disposable(subscription) \u3092\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3001\u305d\u308c\u306f\u3084\u304c\u3066 OnCompleted \u3092\u547c\u3073\u51fa\u3057\u3001Subscribe \u306e\u8fd4\u5024\u304b\u3089 Repeat \u306e\u7834\u68c4\u306b\u3088\u308a\u7e70\u308a\u8fd4\u3057\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3057\u307e\u3059\u3002\n\nKeep in mind that the examples with Return and Repeat do not introduce any concurrency.  When you call Subscribe, it will not return until the observable completes regardless of which of these schedulers you choose.  With the ImmediateScheduler, Take calls OnCompleted but it cannot cancel the repetition, so Subscribe blocks indefinitely.  Alternatively, the CurrentThreadScheduler allows for cooperative single-threaded multitasking between the Return and Repeat operators, thus allowing Take to cancel the repetition without having to introduce any concurrency.\n\n\u899a\u3048\u3066\u304a\u3044\u3066\u6b32\u3057\u3044\u306e\u306f\u3001 Return \u2192 Repeat \u306f\u3069\u3093\u306a\u4e26\u5217\u6027\u3082\u4f7f\u7528\u3057\u306a\u3044\u3053\u3068\u3067\u3059\u3002Subscribe \u3092\u547c\u3073\u51fa\u3059\u3068\u3001\u3042\u306a\u305f\u304c\u9078\u629e\u3057\u305f Scheduler \u306b\u95a2\u4fc2\u306a\u304f\u3001Observable \u304c\u7d42\u4e86\u3059\u308b\u307e\u3067\u51e6\u7406\u3092\u8fd4\u3057\u307e\u305b\u3093\u3002 ImmediateScheduler \u3067\u306f\u3001Take \u306f OnCompleted \u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u304c\u3001\u7e70\u308a\u8fd4\u3057\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3067\u304d\u307e\u305b\u3093\u3002\u306a\u306e\u3067 Subscribe \u306f\u7121\u671f\u9650\u306b\u30d6\u30ed\u30c3\u30af\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u4ee3\u308f\u308a\u306b CurrentThreadScheduler \u306f Return \u3068 Repeat \u64cd\u4f5c\u306e\u9593\u3001\u5354\u8abf\u7684\u30de\u30eb\u30c1\u30bf\u30b9\u30ad\u30f3\u30b0\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3001\u306a\u306e\u3067\u3001\u4e26\u884c\u6027\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306a\u304f\u3001\u7e70\u308a\u8fd4\u3057\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\uff0d\uff0d\u8a33\u3053\u3053\u307e\u3067\uff0d\uff0d\n\n\u3064\u307e\u308a\uff1f\nImmediateScheduler \u304c\u51e6\u7406\u3092\u305f\u3060\u5358\u306b(\u5272\u308a\u8fbc\u3093\u3067)\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u3042\u308b\u306e\u306b\u5bfe\u3057\u3001 CurrentScheduler(TrampolineScheduler) \u306f\u3001\u64ec\u4f3c\u7684\u306a\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u3092\u884c\u3046\uff08\u61d0\u304b\u3057\u306e VB \u306e DoEvents \u304b\u3041\uff1f\uff09\u3053\u3068\u3067\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u3092\u9632\u3044\u3067\u3044\u308b\u3001\u3068\u7406\u89e3\u3057\u307e\u3057\u305f\u3002\nDave \u6c0f\u306e\u56de\u7b54\u306b\u3042\u3063\u305f\u4f8b\nObservable.Return(1).Repeat().Take(1).Subscribe(...);\nDebug.WriteLine(\"Hoge\");\n\n\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u78ba\u304b\u306b\u51e6\u7406\u304c\u5e30\u3063\u3066\u3053\u306a\u3044\u3001Debug.WriteLine \u3078\u9032\u307e\u306a\u3044\u3093\u3067\u3059\u3002\n\u3053\u308c\u306f\u30e4\u30d0\u3044\u3001ImmediateScheduler \u30de\u30b8\u3084\u3079\u3048\u3068\u3002\n\u3067\u3001 RxJava \u3067\u3082\u540c\u3058\u3060\u3088\u306d\u3048\u3068\u3001\n// just \u304c ImmediateScheduler \u4f7f\u3046\u306e\u304b\u4e0d\u5b89\u3060\u3063\u305f\u304b\u3089 subscribeOn \u3057\u3066\u3044\u308b\u3088\nObservable.just(1).subscribeOn(Schedulers.immediate()).repeat().take(1).subscribe(...);\nLog.debug(TAG, \"Hoge\");\n\n\u3068\u66f8\u3044\u3066\u5b9f\u884c\u3057\u3066\u307f\u305f\u3089\u3001\u51e6\u7406\u304c\u5e30\u3063\u3066\u304f\u308b\uff01 Log.debug \u3082\u5b9f\u884c\u3055\u308c\u308b\uff01\n\u306a\u3093\u3060\u3053\u306e\u9055\u3044\u306f\uff1f\u6539\u5584\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u3001\u8a66\u3057\u65b9\u304c\u60aa\u3044\u306e\u304b\u3002\u3002\u3002\n\u306a\u3093\u3060\u304b\u30e2\u30e4\u30e2\u30e4\u3057\u305f\u7d42\u308f\u308a\u304b\u305f\u3067\u3059\u304c\u3001\u4eca\u56de\u306f ImmediateScheduler \u306f\u3061\u3087\u3063\u3068\u8981\u6ce8\u610f\u3060\u3068\u3044\u3046\u3068\u3053\u308d\u307e\u3067\u3067\u3059\u3002\n\nIn the observable world, calling Subscribe should be an asynchronous operation.\n\n\u3068\u306e\u8a00\u8449\u901a\u308a\u3001Rx.NET/RxJava \u3092\u4f7f\u3046\u3068\u304d\u306f\u975e\u540c\u671f\u306b\u3057\u305f\u3044\u4e8b\u304c\u5168\u3066\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u30aa\u30da\u30ec\u30fc\u30bf\u306b\u3088\u3063\u3066\u306f\u65e2\u5b9a\u3067 ImmediateScheduler \u3092\u4f7f\u3046\u3082\u306e\u3082\u3042\u308b\u306e\u3067\u3001\u5fc5\u305a subscribeOn/observeOn \u3092\u3059\u308b\u30af\u30bb\u3092\u3064\u3051\u3066\u304a\u3044\u305f\u65b9\u304c\u3044\u3044\u306e\u304b\u306a\uff1f\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\nRxJava \u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u4e2d\u306b [``TrampolineScheduler``](http://reactivex.io/RxJava/javadoc/rx/schedulers/TrampolineScheduler.html) \u3068\u3044\u3046\u306e\u304c\u3042\u308a\u3001[\u306a\u3093\u3058\u3083\u3053\u308c\uff1f](https://twitter.com/amay077/status/693341525464346624)\u3068\u3064\u3076\u3084\u3044\u305f\u3068\u3053\u308d\u3001 [Rx.NET \u306e ``CurrentThreadScheduler`` \u3068\u540c\u3058\u3063\u307d\u3044](http://reactivex.io/RxJava/javadoc/rx/schedulers/TrampolineScheduler.html) \u3068\u6559\u3048\u3066\u3082\u3089\u3044\u307e\u3057\u305f\u3002\n\n\u305d\u306e\u6d41\u308c\u3067\u3001\u985e\u4f3c\u306e Scheduler \u3067\u3042\u308b [ImmediateScheduler](http://reactivex.io/RxJava/javadoc/rx/schedulers/ImmediateScheduler.html) \u3068\u306e\u9055\u3044\u306b\u3064\u3044\u3066\u8a9e\u3089\u308c\u3066\u3044\u308b\u30c8\u30d4\u30c3\u30af\u3092\u7d39\u4ecb\u3057\u3066\u3082\u3089\u3044\u307e\u3057\u305f\u3002\n\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/amay077\">@amay077</a> \u3053\u306e\u8fba\u8aad\u307f\u3068\u304f\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\uff08tranpoline\u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u3082\u767b\u5834\u3057\u307e\u3059\uff09 <a href=\"https://t.co/A5TzOiobsC\">https://t.co/A5TzOiobsC</a></p>&mdash; Atsushi Eno (@atsushieno) <a href=\"https://twitter.com/atsushieno/status/693396949643317248\">2016, 1\u6708 30</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n# CurrentThreadScheduler vs ImmediateScheduler\n\n* [CurrentThreadScheduler vs ImmediateScheduler](https://social.msdn.microsoft.com/Forums/en-US/7f75482f-eff2-4938-9491-47fe870989e8/currentthreadscheduler-vs-immediatescheduler?forum=rx)\n\n\u7d39\u4ecb\u3057\u3066\u3082\u3089\u3063\u305f\u3053\u306e\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\u3092\u3001\u9811\u5f35\u3063\u3066\u7ffb\u8a33\u3057\u3066\u307f\u307e\u3057\u305f\uff08\u3081\u3061\u3083\u304f\u3061\u3083\u306a\u3068\u3053\u306f\u8a02\u6b63\u9858\u3044\u307e\u3059\uff09\u3002\nRxJava \u3067\u306f ``CurrentThreadScheduler`` \u3092 ``TrampolineScheduler`` \u306b\u8aad\u307f\u66ff\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n\uff0d\uff0d\u8a33\u3053\u3053\u304b\u3089\uff0d\uff0d\n\n## Ohad \u6c0f\u306e\u8cea\u554f\n\n> Hi\n> ImmediateScheduler's Schedule method is pretty straightforward - it simply invokes the action.\nIn contrast, CurrentThreadScheduler seems more involved - it creates something called a trampoline, which in turn iterates over an action queue, sleeping between invocations of items in the queue and so forth\n\n\u3084\u3042\u3001\n``ImmediateScheduler.Schedule`` \u30e1\u30bd\u30c3\u30c9\u306f\u5358\u7d14\u3092\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\u5bfe\u7167\u7684\u306b\u3001 ``CurrentThreadScheduler`` \u306f\u8907\u96d1\u306b\u898b\u3048\u307e\u3059\u3002\u30c8\u30e9\u30f3\u30dd\u30ea\u30f3\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u3092\u4f5c\u308a\u3001\u305d\u308c\u306f\u30a2\u30af\u30b7\u30e7\u30f3\u30fb\u30ad\u30e5\u30fc\u3067\u3001\u9806\u6b21\u30b9\u30ea\u30fc\u30d7\u306e\u9593\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\n\n> I've been trying to follow the code with reflector but I'm having a hard time understanding the difference. As far as I can tell, CurrentThreadSchedule's schedule method calls Trampoline 's Run method, which will end up blocking the current thread until the queued action is performed (on the current thread as well) - apparently just like in the case of ImmediateScheduler\n\n\u79c1\u306f\u30b3\u30fc\u30c9\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u7406\u89e3\u3059\u308b\u306e\u306b\u82e6\u52b4\u3057\u3066\u3044\u307e\u3059\u3002\u5206\u304b\u308b\u7bc4\u56f2\u3067\u306f\u3001 ``CurrentThreadSchedule.Schedule`` \u30e1\u30bd\u30c3\u30c9\u306f ``Trampoline.Run`` \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u3001\u30ad\u30e5\u30fc\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u308b\u307e\u3067(\u30ab\u30ec\u30f3\u30c8\u30b9\u30ec\u30c3\u30c9\u3082\u540c\u69d8\u306b)\u30d6\u30ed\u30c3\u30af\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002 - \u3069\u3046\u3082 ``ImmediateScheduler`` \u306e\u3088\u3046\u306b\u307f\u3048\u307e\u3059\u3002\n\n\n> I realize I'm missing something, so an explanation would be really appreciated\n>Thanks !\n\n\u4f55\u304b\u7406\u89e3\u304c\u8db3\u308a\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u3001\u8aac\u660e\u3057\u3066\u3082\u3089\u3048\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002\n\n\n> EDIT - In the meantime I've found a couple of resources that may shed light on the subject, if anyone's interested:\n\n\uff12\u3064\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002\u4f55\u304b\u306e\u624b\u304c\u304b\u308a\u306b\u306a\u308c\u3070\u3002\n\nhttp://channel9.msdn.com/blogs/j.van.gogh/controlling-concurrency-in-rx\n\nhttp://community.bartdesmet.net/blogs/bart/archive/2009/11/08/jumping-the-trampoline-in-c-stack-friendly-recursion.aspx\n\n## Dave \u6c0f\u306e\u56de\u7b54\n\n> Hi,\n> \n> The trampoline seems to serve three purposes: \n\n\u3084\u3042\u3001\n\u30c8\u30e9\u30f3\u30dd\u30ea\u30f3\u306f\uff13\u3064\u306e\u76ee\u7684\u3092\u6301\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\n> 1- Prevents dead-locks from scheduler reentrancy.\n\n1- \u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u306e\u5272\u308a\u8fbc\u307f\u304b\u3089\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u3092\u9632\u304e\u307e\u3059\u3002\n\n> 2- Prevents infinite loops in observables that require recursion through scheduler reentrancy.\n\n2- \u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u306e\u5272\u308a\u8fbc\u307f\u3092\u4f7f\u3063\u305f\u518d\u5e30\u304c\u5fc5\u8981\u306a Observable \u306e\u7121\u9650\u30eb\u30fc\u30d7\u3092\u9632\u304e\u307e\u3059\u3002\n\n> 3- Cooperative single-threaded multitasking; I guess it's similar to the proposed async/await feature in C# 5.0.  Calling CurrentThreadScheduler.Schedule is sort of like using await when the currently executing code was also scheduled via CurrentThreadScheduler.\n\n3- \u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3067\u306e\u300c[\u5354\u8abf\u7684\u30de\u30eb\u30c1\u30bf\u30b9\u30ad\u30f3\u30b0](http://www.sophia-it.com/content/%E3%83%8E%E3%83%B3%E3%83%97%E3%83%AA%E3%82%A8%E3%83%B3%E3%83%97%E3%83%86%E3%82%A3%E3%83%96%E3%83%9E%E3%83%AB%E3%83%81%E3%82%BF%E3%82%B9%E3%82%AF)\u300d; \u79c1\u306f C# 5.0 \u306b\u63d0\u6848\u3055\u308c\u3066\u3044\u308b async/await \u306b\u8fd1\u3044\u3082\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002``CurrentThreadScheduler.Schedule`` \u306e\u547c\u3073\u51fa\u3057\u306f\u3001\u73fe\u5728\u5b9f\u884c\u4e2d\u306e\u30b3\u30fc\u30c9\u3082 ``CurrentThreadScheduler`` \u3067\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3055\u308c\u3066\u3044\u305f\u3068\u304d\u306b await \u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\uff08\u8a33\u6ce8: C# \u306e async/await \u306f\u5354\u8abf\u7684\u30de\u30eb\u30c1\u30bf\u30b9\u30ad\u30f3\u30b0\u3067\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u308c\u306f async/await \u767b\u5834\u4ee5\u524d\u306b\u4e88\u60f3\u3067\u66f8\u304b\u308c\u305f\u3082\u306e\u304b\u3068\u3002\n\n> In the observable world, calling Subscribe should be an asynchronous operation.  There's a problem if the scheduling of an observable dead-locks or blocks the current thread indefinitely because it attempts to execute immediately and never completes.\n\nObservable \u306e\u4e16\u754c\u3067\u306f\u3001``Subscribe`` \u306e\u547c\u3073\u51fa\u3057\u306f\u3001\u975e\u540c\u671f\u51e6\u7406\u3067\u884c\u308f\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002Observable \u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u304c\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u307e\u305f\u306f\u30ab\u30ec\u30f3\u30c8\u30b9\u30ec\u30c3\u30c9\u3092\u7121\u671f\u9650\u306b\u30d6\u30ed\u30c3\u30af\u3059\u308b\u5834\u5408\u3001\u3059\u3050\u306b\u5b9f\u884c\u3057\u3088\u3046\u3068\u3057\u3066\u3082\u5b8c\u4e86\u3057\u306a\u3044\u306e\u3067\u3001\u554f\u984c\u306b\u306a\u308a\u307e\u3059\u3002\n\n> Ignore the type of scheduler for a moment and consider a scheduled action that eventually, through some sequence of method calls, uses the same scheduler to schedule another action.\n\n\u3061\u3087\u3063\u3068\u3053\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u3092\u7121\u8996\u3057\u3066\u3001\u3044\u305a\u308c\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u306f\u5225\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3059\u308b\u305f\u3081\u306b\u3001\u540c\u3058\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n> With the ImmediateScheduler, the inner action is executed immediately.\n\n``ImmediateScheduler`` \u3067\u306f\u3001\u201d\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u201d \u306f\u3059\u3050\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\n> * If the outer action acquires some resource on which the inner action depends, and the inner action cannot acquire this resource until it's released by the outer action, then these actions dead-lock.\n\n* \u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u3001\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30ea\u30bd\u30fc\u30b9\u3092\u53d6\u5f97\u3057\u305f\u5834\u5408\u3001\n\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u30ea\u30bd\u30fc\u30b9\u3092\u958b\u653e\u3059\u308b\u307e\u3067\u305d\u308c\u3092\u53d6\u5f97\u3067\u304d\u305a\u3001\u3053\u308c\u3089\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u3057\u307e\u3059\u3002\n\n> * If the outer action depends upon the inner action, and the inner action depends upon the outer action, then this could result in an infinite loop that never yields control to other actions.\n\n* \u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u5185\u90e8\u30a2\u30af\u30b7\u30e7\u30f3\u306b\u4f9d\u5b58\u3057\u3001\u5185\u90e8\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u5916\u5074\u306e\u884c\u52d5\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u4ed6\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306b\u5236\u5fa1\u304c\u79fb\u3089\u306a\u3044\u7121\u9650\u30eb\u30fc\u30d7\u306b\u306a\u308a\u307e\u3059\u3002\n\n> For example: Observable.Return(1).Repeat().Take(1)\n\n\u4f8b: ``Observable.Return(1).Repeat().Take(1)``\n\n> By default, Return uses the ImmediateScheduler to call OnNext(1) then OnCompleted().  Repeat does not introduce any concurrency, so it sees OnCompleted immediately and then immediately resubscribes to Return.  Because there's no trampoline in Return, this pattern repeats itself, blocking the current thread indefinitely.  Calling Subscribe on this observable never returns.  See [this discussion](https://social.msdn.microsoft.com/Forums/en-US/f9c1a7a6-d6a3-44fd-ba8c-e6845b1717b2/possible-bug-repeat-observables-using-immediate-scheduler?forum=rx) for more information.\n\n\u65e2\u5b9a\u3067\u306f\u3001``Return`` \u306f ``ImmediateScheduler`` \u3092\u4f7f\u3063\u3066 ``OnNext(1)`` \u305d\u3057\u3066 ``OnCompleted()`` \u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 ``Repeat`` \u306f\u3069\u3093\u306a\u4e26\u5217\u6027\u3082\u4f7f\u7528\u3057\u307e\u305b\u3093\u3001\u306a\u306e\u3067\u3059\u3050\u306b ``OnCompleted`` \u3092\u691c\u77e5\u3057\u3066\u3001\u3059\u3050\u306b ``Return`` \u3092\u518d\u8cfc\u8aad\u3057\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u3001 ``Return`` \u306b\u306f\u30c8\u30e9\u30f3\u30dd\u30ea\u30f3\u304c\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u306f\u81ea\u5206\u81ea\u8eab\u3092\u7e70\u308a\u8fd4\u3057\u3001\u7121\u671f\u9650\u306b\u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u30d6\u30ed\u30c3\u30af\u3057\u7d9a\u3051\u307e\u3059\u3002\u3053\u306e Observable \u3092 ``Subscribe`` \u3059\u308b\u3068\u51e6\u7406\u304c\u8fd4\u3063\u3066\u304d\u307e\u305b\u3093\u3002\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001[\u3053\u306e\u8aac\u660e](https://social.msdn.microsoft.com/Forums/en-US/f9c1a7a6-d6a3-44fd-ba8c-e6845b1717b2/possible-bug-repeat-observables-using-immediate-scheduler?forum=rx)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n> With the CurrentThreadScheduler, the inner action is scheduled (queued) for execution when the outer action ends.  Conceptually, inner actions are bounced on the trampoline until the current thread is ready to execute them.\n\n``CurrentThreadScheduler`` \u3067\u306f\u3001\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u3001\u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u7d42\u4e86\u3055\u308c\u305f\u6642\u306b\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3055\u308c\u307e\u3059\u3002\u30b3\u30f3\u30bb\u30d7\u30c8\u3068\u3057\u3066\u306f\u3001\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u3001\u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u5b9f\u884c\u53ef\u80fd\u306b\u306a\u308b\u307e\u3067\u30c8\u30e9\u30f3\u30dd\u30ea\u30f3\u306e\u4e0a\u3067\u8df3\u306d\u307e\u3059\u3002\n\n> * If the outer action acquires some resource on which the inner action depends, and the inner action cannot acquire this resource until it's released by the outer action, then these actions do not dead-lock because the inner action is not executed until the outer action completes.\n\n* \u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u3001\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30ea\u30bd\u30fc\u30b9\u3092\u53d6\u5f97\u3057\u3001\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u305d\u308c\u3089\u304c\u89e3\u653e\u3055\u308c\u308b\u307e\u3067\u53d6\u5f97\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u3053\u308c\u3089\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u3057\u307e\u305b\u3093\u3001\u306a\u305c\u306a\u3089\u3002\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u7d42\u4e86\u3059\u308b\u307e\u3067\u5b9f\u884c\u3055\u308c\u306a\u3044\u305f\u3081\u3067\u3059\u3002\n\n> * If the outer action recurses when the inner action completes, then there won't be an immediately infinite loop because the inner action does not complete until the outer action completes first.\n\n* \u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u7d42\u4e86\u3057\u305f\u6642\u306b\u518d\u5e30\u7684\u306a\u5834\u5408\u3001\u7121\u9650\u30eb\u30fc\u30d7\u306b\u306a\u308a\u307e\u305b\u3093\u3002\u306a\u305c\u306a\u3089\u3001\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u5b8c\u4e86\u3059\u308b\u307e\u3067\u5b8c\u4e86\u3057\u306a\u3044\u305f\u3081\u3067\u3059\u3002\n\n> For example: Observable.Return(1, Scheduler.CurrentThread).Repeat().Take(1)\n\n\u4f8b: ``Observable.Return(1, Scheduler.CurrentThread).Repeat().Take(1)``\n\n> Here, Return is using the CurrentTheadScheduler to call OnNext(1) then OnCompleted().  Repeat does not introduce any concurrency, so it sees OnCompleted immediately and then immediately resubscribes to Return; however, this second subscription to Return schedules its (inner) actions on the trampoline because it's still executing on the OnCompleted callback from the first scheduled (outer) action, thus the repetition does not occur immediately.  This allows Repeat to return a disposable to Take, which eventually calls OnCompleted, cancels the repetition by disposing Repeat, and ultimately the call from Subscribe returns.\n\n\u3053\u3053\u3067\u306f\u3001 ``Return`` \u306f ``CurrentTheadScheduler`` \u3092\u4f7f\u3063\u3066 ``OnNext(1)`` \u305d\u3057\u3066 ``OnCompleted()`` \u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 ``Repeat`` \u306f\u3069\u3093\u306a\u4e26\u5217\u6027\u3082\u4f7f\u7528\u3057\u307e\u305b\u3093\u3001\u306a\u306e\u3067\u3059\u3050\u306b ``OnCompleted`` \u3092\u691c\u77e5\u3057\u3066\u3001\u3059\u3050\u306b ``Return`` \u3092\u518d\u8cfc\u8aad\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u306e\uff12\u56de\u76ee\u306e ``Return`` \u306e\u8cfc\u8aad\uff08\u5185\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\uff09\u306f\u30c8\u30e9\u30f3\u30dd\u30ea\u30f3\u306e\u4e0a\u306b\u3042\u308a\u307e\u3059\u3001\u306a\u305c\u306a\u3089\u3001\u6700\u521d\u306b\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3055\u308c\u305f\u30a2\u30af\u30b7\u30e7\u30f3\uff08\u5916\u5074\u306e\u30a2\u30af\u30b7\u30e7\u30f3\uff09\u306e ``OnCompleted`` \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u4e0a\u3067\u307e\u3060\u5b9f\u884c\u4e2d\u3067\u3042\u308b\u304b\u3089\u3067\u3059\u3001\u306a\u306e\u3067\u7e70\u308a\u8fd4\u3057\u306f\u3059\u3050\u306b\u767a\u751f\u3057\u307e\u305b\u3093\u3002\n\u3053\u308c\u306f\u3001``Repeat`` \u306f ``Take`` \u306b disposable(subscription) \u3092\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3001\u305d\u308c\u306f\u3084\u304c\u3066 ``OnCompleted`` \u3092\u547c\u3073\u51fa\u3057\u3001``Subscribe`` \u306e\u8fd4\u5024\u304b\u3089 ``Repeat`` \u306e\u7834\u68c4\u306b\u3088\u308a\u7e70\u308a\u8fd4\u3057\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3057\u307e\u3059\u3002\n\n> Keep in mind that the examples with Return and Repeat do not introduce any concurrency.  When you call Subscribe, it will not return until the observable completes regardless of which of these schedulers you choose.  With the ImmediateScheduler, Take calls OnCompleted but it cannot cancel the repetition, so Subscribe blocks indefinitely.  Alternatively, the CurrentThreadScheduler allows for cooperative single-threaded multitasking between the Return and Repeat operators, thus allowing Take to cancel the repetition without having to introduce any concurrency.\n\n\u899a\u3048\u3066\u304a\u3044\u3066\u6b32\u3057\u3044\u306e\u306f\u3001 ``Return`` \u2192 ``Repeat`` \u306f\u3069\u3093\u306a\u4e26\u5217\u6027\u3082\u4f7f\u7528\u3057\u306a\u3044\u3053\u3068\u3067\u3059\u3002``Subscribe`` \u3092\u547c\u3073\u51fa\u3059\u3068\u3001\u3042\u306a\u305f\u304c\u9078\u629e\u3057\u305f Scheduler \u306b\u95a2\u4fc2\u306a\u304f\u3001Observable \u304c\u7d42\u4e86\u3059\u308b\u307e\u3067\u51e6\u7406\u3092\u8fd4\u3057\u307e\u305b\u3093\u3002 ``ImmediateScheduler`` \u3067\u306f\u3001``Take`` \u306f ``OnCompleted`` \u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u304c\u3001\u7e70\u308a\u8fd4\u3057\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3067\u304d\u307e\u305b\u3093\u3002\u306a\u306e\u3067 ``Subscribe`` \u306f\u7121\u671f\u9650\u306b\u30d6\u30ed\u30c3\u30af\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u4ee3\u308f\u308a\u306b ``CurrentThreadScheduler`` \u306f ``Return`` \u3068 ``Repeat`` \u64cd\u4f5c\u306e\u9593\u3001\u5354\u8abf\u7684\u30de\u30eb\u30c1\u30bf\u30b9\u30ad\u30f3\u30b0\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3001\u306a\u306e\u3067\u3001\u4e26\u884c\u6027\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306a\u304f\u3001\u7e70\u308a\u8fd4\u3057\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\uff0d\uff0d\u8a33\u3053\u3053\u307e\u3067\uff0d\uff0d\n\n# \u3064\u307e\u308a\uff1f\n\n``ImmediateScheduler`` \u304c\u51e6\u7406\u3092\u305f\u3060\u5358\u306b(\u5272\u308a\u8fbc\u3093\u3067)\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u3042\u308b\u306e\u306b\u5bfe\u3057\u3001 ``CurrentScheduler``(``TrampolineScheduler``) \u306f\u3001\u64ec\u4f3c\u7684\u306a\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u3092\u884c\u3046\uff08\u61d0\u304b\u3057\u306e VB \u306e [``DoEvents``](http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1112681621) \u304b\u3041\uff1f\uff09\u3053\u3068\u3067\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u3092\u9632\u3044\u3067\u3044\u308b\u3001\u3068\u7406\u89e3\u3057\u307e\u3057\u305f\u3002\n\nDave \u6c0f\u306e\u56de\u7b54\u306b\u3042\u3063\u305f\u4f8b\n\n```csharp:\nObservable.Return(1).Repeat().Take(1).Subscribe(...);\nDebug.WriteLine(\"Hoge\");\n```\n\n\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u78ba\u304b\u306b\u51e6\u7406\u304c\u5e30\u3063\u3066\u3053\u306a\u3044\u3001``Debug.WriteLine`` \u3078\u9032\u307e\u306a\u3044\u3093\u3067\u3059\u3002\n\n\u3053\u308c\u306f\u30e4\u30d0\u3044\u3001``ImmediateScheduler`` \u30de\u30b8\u3084\u3079\u3048\u3068\u3002\n\u3067\u3001 RxJava \u3067\u3082\u540c\u3058\u3060\u3088\u306d\u3048\u3068\u3001\n\n```java:\n// just \u304c ImmediateScheduler \u4f7f\u3046\u306e\u304b\u4e0d\u5b89\u3060\u3063\u305f\u304b\u3089 subscribeOn \u3057\u3066\u3044\u308b\u3088\nObservable.just(1).subscribeOn(Schedulers.immediate()).repeat().take(1).subscribe(...);\nLog.debug(TAG, \"Hoge\");\n```\n\n\u3068\u66f8\u3044\u3066\u5b9f\u884c\u3057\u3066\u307f\u305f\u3089\u3001\u51e6\u7406\u304c\u5e30\u3063\u3066\u304f\u308b\uff01 ``Log.debug`` \u3082\u5b9f\u884c\u3055\u308c\u308b\uff01\n\u306a\u3093\u3060\u3053\u306e\u9055\u3044\u306f\uff1f\u6539\u5584\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u3001\u8a66\u3057\u65b9\u304c\u60aa\u3044\u306e\u304b\u3002\u3002\u3002\n\n\u306a\u3093\u3060\u304b\u30e2\u30e4\u30e2\u30e4\u3057\u305f\u7d42\u308f\u308a\u304b\u305f\u3067\u3059\u304c\u3001\u4eca\u56de\u306f ``ImmediateScheduler`` \u306f\u3061\u3087\u3063\u3068\u8981\u6ce8\u610f\u3060\u3068\u3044\u3046\u3068\u3053\u308d\u307e\u3067\u3067\u3059\u3002\n\n> In the observable world, calling Subscribe should be an asynchronous operation.\n\n\u3068\u306e\u8a00\u8449\u901a\u308a\u3001Rx.NET/RxJava \u3092\u4f7f\u3046\u3068\u304d\u306f\u975e\u540c\u671f\u306b\u3057\u305f\u3044\u4e8b\u304c\u5168\u3066\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u30aa\u30da\u30ec\u30fc\u30bf\u306b\u3088\u3063\u3066\u306f\u65e2\u5b9a\u3067 ``ImmediateScheduler`` \u3092\u4f7f\u3046\u3082\u306e\u3082\u3042\u308b\u306e\u3067\u3001\u5fc5\u305a ``subscribeOn/observeOn`` \u3092\u3059\u308b\u30af\u30bb\u3092\u3064\u3051\u3066\u304a\u3044\u305f\u65b9\u304c\u3044\u3044\u306e\u304b\u306a\uff1f\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n", "tags": ["ReactiveExtensions", "RxJava", "ReactiveX"]}