{"context": "Java \u3067 REST\u3092\u306a\u3052\u308b\u30b5\u30fc\u30d3\u30b9\u306e\u958b\u767a\u3092\u3057\u3066\u3044\u3066\u3001\u81ea\u5206\u304c\u306a\u3052\u3066\u3044\u308b\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u3042\u3063\u3066\u308b\u304b\u306a\uff1f\u3063\u3066\u78ba\u8a8d\u3057\u305f\u3044\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u3093\u306a\u3068\u304d\u306f\u30d7\u30ed\u30ad\u30b7\u3092\u901a\u3059\u308f\u3051\u3067\u3059\u304c\u3001\u305d\u306e\u3084\u308a\u304b\u305f\u3092\u8abf\u3079\u305f\u3053\u3068\u304c\u3042\u3063\u3066\u3001\u305d\u306e\u7d50\u679c\u3092\u6574\u7406\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nJava\u306eREST Client\u3068\u3057\u3066\u306f JAX-RS\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u5b9f\u88c5\u306b\u3082\u306a\u3063\u3066\u3044\u308b Jersey\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u90e8\u5206\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u3002\n\u5148\u4eba\u306e\u77e5\u6075\u306b\u306f\u3044\u3064\u3082\u611f\u8b1d\u3067\u3059\u306d\u3002\u57fa\u672c\u7684\u306b\u306f\u3053\u306e\u30b5\u30a4\u30c8\u306e\u60c5\u5831\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nJerseyClient\u3067\u30d7\u30ed\u30ad\u30b7\u3092\u901a\u3059\u65b9\u6cd5\n\u306a\u306e\u3067\u3059\u304c\u3001\u3059\u304f\u306a\u304f\u3068\u3082\u4eca\u56de\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3044\u308bAPI\u3067\u306fSSL\u306e\u4e0b\u8a18\u306e\u30a8\u30e9\u30fc\njavax.ws.rs.ProcessingException: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException:\n PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: \n unable to find valid certification path to requested target\n\n\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3046\u3088\u3046\u3067\u3001\u8ffd\u52a0\u3067\u8abf\u67fb\u3057\u305f\u3068\u3053\u308d\u3092\u4e2d\u5fc3\u306b\u307e\u3068\u3081\u307e\u3059\u3002\n\npom.xml \u306e\u8a2d\u5b9a\n\npom.xml\n<!-- \u3060\u305fJersey \u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u3064\u304b\u3046\u3060\u3051\u306a\u3089 -->\n<dependency>\n  <groupId>org.glassfish.jersey.core</groupId>\n  <artifactId>jersey-client</artifactId>\n  <version>2.25</version>\n</dependency>\n\n<!-- \u3055\u3089\u306bJersey\u3067Proxy\u3092\u4f7f\u3046\u5834\u5408\u3002 -->\n<dependency>\n  <groupId>org.glassfish.jersey.connectors</groupId>\n  <artifactId>jersey-apache-connector</artifactId>\n  <version>2.25</version>\n</dependency>\n\n\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u69cb\u7bc9\n\u30a2\u30af\u30bb\u30b9\u5148\u306fQiita\u306eAPI\nhttps://qiita.com/api/v2/users/qiita/items?per_page=1&page=4\n\n\u3092\u5bfe\u8c61\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u307e\u305a\u306fcurl\u3067\u3002\ncurl 'https://qiita.com/api/v2/users/qiita/items' -d 'per_page=1' -d 'page=4' -G\n\n\u306a\u306b\u304bJSON\u304c\u8fd4\u3063\u3066\u304d\u305f\u3068\u601d\u3044\u307e\u3059\u3002\n\nJava\u3067\n\u3064\u304e\u306bJava\u3067\u3059\u3002\u307e\u305a\u306f\u30d7\u30ed\u30ad\u30b7\u3092\u901a\u3055\u306a\u3044\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\n\u4e0b\u8a18\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u8003\u306b\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nJersey 2.25 User Guide/5. Client API\n\nClientSamples.java\n\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.ClientBuilder;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\n\npublic class ClientSamples {\n\n    public static void main(String[] args) {\n        new ClientSamples().execute();\n    }\n\n    public void execute() {\n        String target = \"https://qiita.com\";\n        String path = \"/api/v2/users/qiita/items\";\n\n        // Client client = createSecureClient();\n        Client client = createClient();\n        Response restResponse = client\n                .target(target)\n                .path(path)\n                .queryParam(\"page\", \"4\")\n                .queryParam(\"per_page\", \"1\")\n                .request(MediaType.APPLICATION_JSON_TYPE)\n                .get();\n\n        System.out.println(restResponse.readEntity(String.class));\n    }\n\n    private Client createClient() {\n        return ClientBuilder.newClient();\n    }\n\n}\n\n\ncurl\u306e\u5834\u5408\u3068\u3001\u304a\u306a\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u30d7\u30ed\u30ad\u30b7\u3092\u901a\u3057\u3066\u307f\u308b\u3002\n\u4e0b\u8a18\u306e\u30da\u30fc\u30b8\u306a\u3089\u3073\u306b\u5148\u307b\u3069\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3068\u66f8\u3044\u305f\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3002\nJerseyClient\u3067\u30d7\u30ed\u30ad\u30b7\u3092\u901a\u3059\u65b9\u6cd5\nJersey 2.25 User Guide/5.9. Securing a Client\n\nClientSamples.java\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.ClientBuilder;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\n\nimport org.glassfish.jersey.apache.connector.ApacheConnectorProvider;\nimport org.glassfish.jersey.client.ClientConfig;\nimport org.glassfish.jersey.client.ClientProperties;\n\npublic class ClientSamples {\n\n    public static void main(String[] args) {\n        new ClientSamples().execute();\n    }\n\n    public void execute() {\n        String target = \"https://qiita.com\";\n        String path = \"/api/v2/users/qiita/items\";\n\n        Client client = createSecureClient();\n        // Client client = createClient();\n        Response restResponse = client\n                .target(target)\n                .path(path)\n                .queryParam(\"page\", \"4\")\n                .queryParam(\"per_page\", \"1\")\n                .request(MediaType.APPLICATION_JSON_TYPE).get();\n\n        System.out.println(restResponse.readEntity(String.class));\n    }\n\n    private Client createSecureClient() {\n        String proxyHost = \"http://127.0.0.1:8080\";\n        ClientConfig config = new ClientConfig();\n\n        // provider\u3092proxy\u5bfe\u5fdc?\u306b\u3059\u308b\n        config.connectorProvider(new ApacheConnectorProvider());\n        config.property(ClientProperties.PROXY_URI, proxyHost);\n        // config.property(ClientProperties.PROXY_USERNAME, \"userName\");\n        // config.property(ClientProperties.PROXY_PASSWORD, \"password\");\n\n        // builder\u306e\u751f\u6210\n        ClientBuilder b = ClientBuilder.newBuilder().withConfig(config);\n        return b.build();\n    }\n\n}\n\n\n\n\u5b9f\u884c\u3057\u305f\u3068\u3053\u308d\u3084\u306f\u308a\u3001\u3001javax.net.ssl.SSLHandshakeException \u304c\u767a\u751f\u3057\u307e\u3059\u3002\u30d7\u30ed\u30ad\u30b7\u3092\u901a\u3057\u305f\u3053\u3068\u3067\u3001\u4fe1\u983c\u3067\u304d\u306a\u3044SSL\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u3066\u3044\u308b\u3063\u307d\u3044\u3067\u3059\u306d\u3002\u306a\u306e\u3067\u3001SSL\u8a3c\u660e\u66f8\u306e\u691c\u8a3c\u51e6\u7406\u306e\u7121\u52b9\u5316\u3001\u30db\u30b9\u30c8\u540d\u691c\u8a3c\u51e6\u7406\u306e\u7121\u52b9\u5316\u3092\u3059\u308b\u4e0b\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u633f\u5165\u3057\u307e\u3059\u3002\n\nClientSamples.java\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\n\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.X509TrustManager;\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.ClientBuilder;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\n\nimport org.glassfish.jersey.apache.connector.ApacheConnectorProvider;\nimport org.glassfish.jersey.client.ClientConfig;\nimport org.glassfish.jersey.client.ClientProperties;\n\n\npublic class ClientSamples {\n\n    public static void main(String[] args) {\n        new ClientSamples().execute();\n    }\n\n    public void execute() {\n        String target = \"https://qiita.com\";\n        String path = \"/api/v2/users/qiita/items\";\n\n        Client client = createSecureClient();\n        // Client client = createClient();\n        Response restResponse = client\n                .target(target)\n                .path(path)\n                .queryParam(\"page\", \"4\")\n                .queryParam(\"per_page\", \"1\")\n                .request(MediaType.APPLICATION_JSON_TYPE)\n                .get();\n\n        System.out.println(restResponse.readEntity(String.class));\n    }\n\n    private Client createClient() {\n        return ClientBuilder.newClient();\n    }\n\n    private Client createSecureClient() {\n        String proxyHost = \"http://127.0.0.1:8080\";\n        ClientConfig config = new ClientConfig();\n\n        // provider\u3092proxy\u5bfe\u5fdc?\u306b\u3059\u308b\n        config.connectorProvider(new ApacheConnectorProvider());\n        config.property(ClientProperties.PROXY_URI, proxyHost);\n        // config.property(ClientProperties.PROXY_USERNAME, \"userName\");\n        // config.property(ClientProperties.PROXY_PASSWORD, \"password\");\n\n        SSLContext sslContext = createSSLContext();\n        HostnameVerifier hostnameVerifier = createHostNameVerifier();\n\n        // builder\u306e\u751f\u6210\n        ClientBuilder b = ClientBuilder.newBuilder().withConfig(config)\n                .sslContext(sslContext).hostnameVerifier(hostnameVerifier);\n        return b.build();\n    }\n\n    private SSLContext createSSLContext() {\n        SSLContext sslContext = null;\n        try {\n            sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null,\n                    new X509TrustManager[] { new X509TrustManager() {\n                        @Override\n                        public void checkClientTrusted(X509Certificate[] chain,String authType) throws CertificateException {}\n                        @Override\n                        public void checkServerTrusted(X509Certificate[] chain,String authType) throws CertificateException {}\n                        @Override\n                        public X509Certificate[] getAcceptedIssuers() {return new X509Certificate[0];}\n                    } }, new SecureRandom());\n            // HttpsURLConnection\n            // .setDefaultSSLSocketFactory(sslContext.getSocketFactory());\n\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (KeyManagementException e) {\n            e.printStackTrace();\n        }\n        return sslContext;\n    }\n\n    private HostnameVerifier createHostNameVerifier() {\n        return new HostnameVerifier() {\n            @Override\n            public boolean verify(String hostname, SSLSession session) {return true;}\n        };\n    }\n}\n\n\n\u3053\u308c\u3067\u3046\u307e\u304f\u3044\u304f\u3088\u3046\u3067\u3059\u3002\u3002\u30c6\u30b9\u30c8\u30b5\u30fc\u30d0\u306b\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u3092\u5165\u308c\u3066\u3044\u308b\u30b1\u30fc\u30b9\u306a\u3069\u306b\u3082\u5bfe\u5fdc\u3067\u304d\u305d\u3046\u3067\u3059\u306d\u3002\n\n\u95a2\u9023\u30ea\u30f3\u30af\nJerseyClient\u3067\u30d7\u30ed\u30ad\u30b7\u3092\u901a\u3059\u65b9\u6cd5\nJersey 2.25 User Guide/5. Client API\nJersey 2.25 User Guide/5.9. Securing a Client\n\n\nJava \u3067 REST\u3092\u306a\u3052\u308b\u30b5\u30fc\u30d3\u30b9\u306e\u958b\u767a\u3092\u3057\u3066\u3044\u3066\u3001\u81ea\u5206\u304c\u306a\u3052\u3066\u3044\u308b\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u3042\u3063\u3066\u308b\u304b\u306a\uff1f\u3063\u3066\u78ba\u8a8d\u3057\u305f\u3044\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u3093\u306a\u3068\u304d\u306f\u30d7\u30ed\u30ad\u30b7\u3092\u901a\u3059\u308f\u3051\u3067\u3059\u304c\u3001\u305d\u306e\u3084\u308a\u304b\u305f\u3092\u8abf\u3079\u305f\u3053\u3068\u304c\u3042\u3063\u3066\u3001\u305d\u306e\u7d50\u679c\u3092\u6574\u7406\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nJava\u306eREST Client\u3068\u3057\u3066\u306f JAX-RS\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u5b9f\u88c5\u306b\u3082\u306a\u3063\u3066\u3044\u308b [Jersey](https://jersey.java.net/)\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u90e8\u5206\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u3002\n\n\u5148\u4eba\u306e\u77e5\u6075\u306b\u306f\u3044\u3064\u3082\u611f\u8b1d\u3067\u3059\u306d\u3002\u57fa\u672c\u7684\u306b\u306f\u3053\u306e\u30b5\u30a4\u30c8\u306e\u60c5\u5831\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n[JerseyClient\u3067\u30d7\u30ed\u30ad\u30b7\u3092\u901a\u3059\u65b9\u6cd5](http://qiita.com/opengl-8080/items/ca33230cb8df1148fb6f)\n\n\u306a\u306e\u3067\u3059\u304c\u3001\u3059\u304f\u306a\u304f\u3068\u3082\u4eca\u56de\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3044\u308bAPI\u3067\u306fSSL\u306e\u4e0b\u8a18\u306e\u30a8\u30e9\u30fc\n\n```java\njavax.ws.rs.ProcessingException: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException:\n PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: \n unable to find valid certification path to requested target\n```\n\n\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3046\u3088\u3046\u3067\u3001\u8ffd\u52a0\u3067\u8abf\u67fb\u3057\u305f\u3068\u3053\u308d\u3092\u4e2d\u5fc3\u306b\u307e\u3068\u3081\u307e\u3059\u3002\n\n\n## pom.xml \u306e\u8a2d\u5b9a\n\n```xml:pom.xml\n<!-- \u3060\u305fJersey \u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u3064\u304b\u3046\u3060\u3051\u306a\u3089 -->\n<dependency>\n  <groupId>org.glassfish.jersey.core</groupId>\n  <artifactId>jersey-client</artifactId>\n  <version>2.25</version>\n</dependency>\n\n<!-- \u3055\u3089\u306bJersey\u3067Proxy\u3092\u4f7f\u3046\u5834\u5408\u3002 -->\n<dependency>\n  <groupId>org.glassfish.jersey.connectors</groupId>\n  <artifactId>jersey-apache-connector</artifactId>\n  <version>2.25</version>\n</dependency>\n```\n\n\n## \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u69cb\u7bc9\n\n\u30a2\u30af\u30bb\u30b9\u5148\u306fQiita\u306eAPI\n\n```\nhttps://qiita.com/api/v2/users/qiita/items?per_page=1&page=4\n```\n\n\u3092\u5bfe\u8c61\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n###\u307e\u305a\u306fcurl\u3067\u3002\n\n```bash\ncurl 'https://qiita.com/api/v2/users/qiita/items' -d 'per_page=1' -d 'page=4' -G\n```\n\n\u306a\u306b\u304bJSON\u304c\u8fd4\u3063\u3066\u304d\u305f\u3068\u601d\u3044\u307e\u3059\u3002\n\n###Java\u3067\n\u3064\u304e\u306bJava\u3067\u3059\u3002\u307e\u305a\u306f\u30d7\u30ed\u30ad\u30b7\u3092\u901a\u3055\u306a\u3044\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\n\n\u4e0b\u8a18\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u8003\u306b\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n[Jersey 2.25 User Guide/5. Client API](https://jersey.java.net/documentation/latest/user-guide.html#d0e4812)\n\n\n\n```java:ClientSamples.java\n\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.ClientBuilder;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\n\npublic class ClientSamples {\n\n    public static void main(String[] args) {\n        new ClientSamples().execute();\n    }\n\n    public void execute() {\n        String target = \"https://qiita.com\";\n        String path = \"/api/v2/users/qiita/items\";\n\n        // Client client = createSecureClient();\n        Client client = createClient();\n        Response restResponse = client\n                .target(target)\n                .path(path)\n                .queryParam(\"page\", \"4\")\n                .queryParam(\"per_page\", \"1\")\n                .request(MediaType.APPLICATION_JSON_TYPE)\n                .get();\n\n        System.out.println(restResponse.readEntity(String.class));\n    }\n\n    private Client createClient() {\n        return ClientBuilder.newClient();\n    }\n\n}\n```\n\ncurl\u306e\u5834\u5408\u3068\u3001\u304a\u306a\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\n\n###\u30d7\u30ed\u30ad\u30b7\u3092\u901a\u3057\u3066\u307f\u308b\u3002\n\u4e0b\u8a18\u306e\u30da\u30fc\u30b8\u306a\u3089\u3073\u306b\u5148\u307b\u3069\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3068\u66f8\u3044\u305f\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3002\n[JerseyClient\u3067\u30d7\u30ed\u30ad\u30b7\u3092\u901a\u3059\u65b9\u6cd5](http://qiita.com/opengl-8080/items/ca33230cb8df1148fb6f)\n[Jersey 2.25 User Guide/5.9. Securing a Client](https://jersey.java.net/documentation/latest/user-guide.html#d0e5228)\n\n\n```java:ClientSamples.java\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.ClientBuilder;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\n\nimport org.glassfish.jersey.apache.connector.ApacheConnectorProvider;\nimport org.glassfish.jersey.client.ClientConfig;\nimport org.glassfish.jersey.client.ClientProperties;\n\npublic class ClientSamples {\n\n    public static void main(String[] args) {\n        new ClientSamples().execute();\n    }\n\n    public void execute() {\n        String target = \"https://qiita.com\";\n        String path = \"/api/v2/users/qiita/items\";\n\n        Client client = createSecureClient();\n        // Client client = createClient();\n        Response restResponse = client\n                .target(target)\n                .path(path)\n                .queryParam(\"page\", \"4\")\n                .queryParam(\"per_page\", \"1\")\n                .request(MediaType.APPLICATION_JSON_TYPE).get();\n\n        System.out.println(restResponse.readEntity(String.class));\n    }\n\n    private Client createSecureClient() {\n        String proxyHost = \"http://127.0.0.1:8080\";\n        ClientConfig config = new ClientConfig();\n\n        // provider\u3092proxy\u5bfe\u5fdc?\u306b\u3059\u308b\n        config.connectorProvider(new ApacheConnectorProvider());\n        config.property(ClientProperties.PROXY_URI, proxyHost);\n        // config.property(ClientProperties.PROXY_USERNAME, \"userName\");\n        // config.property(ClientProperties.PROXY_PASSWORD, \"password\");\n\n        // builder\u306e\u751f\u6210\n        ClientBuilder b = ClientBuilder.newBuilder().withConfig(config);\n        return b.build();\n    }\n\n}\n\n```\n\n\n\u5b9f\u884c\u3057\u305f\u3068\u3053\u308d\u3084\u306f\u308a\u3001\u3001javax.net.ssl.SSLHandshakeException \u304c\u767a\u751f\u3057\u307e\u3059\u3002\u30d7\u30ed\u30ad\u30b7\u3092\u901a\u3057\u305f\u3053\u3068\u3067\u3001\u4fe1\u983c\u3067\u304d\u306a\u3044SSL\u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u3066\u3044\u308b\u3063\u307d\u3044\u3067\u3059\u306d\u3002\u306a\u306e\u3067\u3001SSL\u8a3c\u660e\u66f8\u306e\u691c\u8a3c\u51e6\u7406\u306e\u7121\u52b9\u5316\u3001\u30db\u30b9\u30c8\u540d\u691c\u8a3c\u51e6\u7406\u306e\u7121\u52b9\u5316\u3092\u3059\u308b\u4e0b\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u633f\u5165\u3057\u307e\u3059\u3002\n\n```java:ClientSamples.java\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\n\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.X509TrustManager;\nimport javax.ws.rs.client.Client;\nimport javax.ws.rs.client.ClientBuilder;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\n\nimport org.glassfish.jersey.apache.connector.ApacheConnectorProvider;\nimport org.glassfish.jersey.client.ClientConfig;\nimport org.glassfish.jersey.client.ClientProperties;\n\n\npublic class ClientSamples {\n\n    public static void main(String[] args) {\n        new ClientSamples().execute();\n    }\n\n    public void execute() {\n        String target = \"https://qiita.com\";\n        String path = \"/api/v2/users/qiita/items\";\n\n        Client client = createSecureClient();\n        // Client client = createClient();\n        Response restResponse = client\n                .target(target)\n                .path(path)\n                .queryParam(\"page\", \"4\")\n                .queryParam(\"per_page\", \"1\")\n                .request(MediaType.APPLICATION_JSON_TYPE)\n                .get();\n\n        System.out.println(restResponse.readEntity(String.class));\n    }\n\n    private Client createClient() {\n        return ClientBuilder.newClient();\n    }\n\n    private Client createSecureClient() {\n        String proxyHost = \"http://127.0.0.1:8080\";\n        ClientConfig config = new ClientConfig();\n\n        // provider\u3092proxy\u5bfe\u5fdc?\u306b\u3059\u308b\n        config.connectorProvider(new ApacheConnectorProvider());\n        config.property(ClientProperties.PROXY_URI, proxyHost);\n        // config.property(ClientProperties.PROXY_USERNAME, \"userName\");\n        // config.property(ClientProperties.PROXY_PASSWORD, \"password\");\n\n        SSLContext sslContext = createSSLContext();\n        HostnameVerifier hostnameVerifier = createHostNameVerifier();\n\n        // builder\u306e\u751f\u6210\n        ClientBuilder b = ClientBuilder.newBuilder().withConfig(config)\n                .sslContext(sslContext).hostnameVerifier(hostnameVerifier);\n        return b.build();\n    }\n\n    private SSLContext createSSLContext() {\n        SSLContext sslContext = null;\n        try {\n            sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null,\n                    new X509TrustManager[] { new X509TrustManager() {\n                        @Override\n                        public void checkClientTrusted(X509Certificate[] chain,String authType) throws CertificateException {}\n                        @Override\n                        public void checkServerTrusted(X509Certificate[] chain,String authType) throws CertificateException {}\n                        @Override\n                        public X509Certificate[] getAcceptedIssuers() {return new X509Certificate[0];}\n                    } }, new SecureRandom());\n            // HttpsURLConnection\n            // .setDefaultSSLSocketFactory(sslContext.getSocketFactory());\n\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (KeyManagementException e) {\n            e.printStackTrace();\n        }\n        return sslContext;\n    }\n\n    private HostnameVerifier createHostNameVerifier() {\n        return new HostnameVerifier() {\n            @Override\n            public boolean verify(String hostname, SSLSession session) {return true;}\n        };\n    }\n}\n```\n\n\u3053\u308c\u3067\u3046\u307e\u304f\u3044\u304f\u3088\u3046\u3067\u3059\u3002\u3002\u30c6\u30b9\u30c8\u30b5\u30fc\u30d0\u306b\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u3092\u5165\u308c\u3066\u3044\u308b\u30b1\u30fc\u30b9\u306a\u3069\u306b\u3082\u5bfe\u5fdc\u3067\u304d\u305d\u3046\u3067\u3059\u306d\u3002\n\n##\u95a2\u9023\u30ea\u30f3\u30af\n[JerseyClient\u3067\u30d7\u30ed\u30ad\u30b7\u3092\u901a\u3059\u65b9\u6cd5](http://qiita.com/opengl-8080/items/ca33230cb8df1148fb6f)\n[Jersey 2.25 User Guide/5. Client API](https://jersey.java.net/documentation/latest/user-guide.html#d0e4812)\n[Jersey 2.25 User Guide/5.9. Securing a Client](https://jersey.java.net/documentation/latest/user-guide.html#d0e5228)\n\n\n\n\n\n\n", "tags": ["jersey", "Java", "rest"]}