{"tags": ["Python", "Chainer", "DeepLearning"], "context": "\n\n\u306f\u3058\u3081\u306b\n\u524d\u56de\u306e \u300cDeep Learning\u5165\u9580\uff08\uff11\uff09 - Chainer\u3092\u7406\u89e3\u3057\u3001\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308d\u3046 -\u300d \u306b\u3066\u3001Chainer\u306b\u3064\u3044\u3066\u4f7f\u3044\u65b9\u3092\u307e\u3068\u3081\u3066\u3044\u304d\u307e\u3057\u305f\u3002\n\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u4e00\u901a\u308a\u8ffd\u3048\u308b\u3068\u5927\u4f53\u306e\u4f7f\u3044\u65b9\u304c\u5206\u304b\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\u6a5f\u68b0\u5b66\u7fd2\u3092\u52c9\u5f37\u3059\u308b\u969b\u306b\u306f\u7c21\u5358\u306a\u56de\u5e30\u554f\u984c\u3092\u60f3\u5b9a\u3057\u3001\u305d\u306e\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3067\u304d\u308b\u3068\u3053\u308d\u307e\u3067\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u300c\u7406\u89e3\u3057\u305f\u4f7f\u3048\u308b\uff01\u300d\u3068\u81ea\u5206\u306e\u4e2d\u3067\u6c7a\u3081\u3066\u3044\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001\u4eca\u56de\u306f\u5177\u4f53\u7684\u306b\u3001\u975e\u7dda\u5f62\u306asin\u95a2\u6570\u306e\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3057\u3001\u3053\u306e\u95a2\u6570\u3092Chainer\u3067\u69cb\u7bc9\u3057\u305f\u30e2\u30c7\u30eb\u306b\u3088\u308a\u975e\u7dda\u5f62\u56de\u5e30\u3092\u884c\u3044\u307e\u3059\u3002\n\u3053\u3053\u307e\u3067\u4e00\u901a\u308a\u7d42\u3048\u3089\u308c\u308b\u3068\u3001\u753b\u50cf\u5224\u5225\u306a\u3069\u767a\u5c55\u7248\u306b\u9032\u3093\u3067\u3082\u3001\u7406\u89e3\u3067\u304d\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u958b\u767a\u74b0\u5883\n\u30fbOS: Mac OS X EI Capitan (10.11.5)\n\u30fbPython 2.7.12: Anaconda 4.1.1 (x86_64)\n\u30fbchainer 1.12.0\n\n\u4eca\u56de\u306e\u30b4\u30fc\u30eb\n\u4e0b\u306e\u753b\u50cf\u306e\u3088\u3046\u306b\u3001sin\u95a2\u6570\u3092\u30d0\u30c3\u30c1\u30ea\u6349\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306a\u975e\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002\n\n\n\u975e\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5168\u4f53\u50cf\n\nMyChain.py\n# -*- coding: utf-8 -*-\nfrom chainer import Chain\nimport chainer.links as L\nimport chainer.functions as F\n\nclass MyChain(Chain):\n\n    def __init__(self):\n        super(MyChain, self).__init__(\n            l1 = L.Linear(1, 100),\n            l2 = L.Linear(100, 30),\n            l3 = L.Linear(30, 1)\n        )\n\n    def predict(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        return self.l3(h2)\n\n\n\nexample.py\n# -*- coding: utf-8 -*-\n\n# \u6570\u5024\u8a08\u7b97\u95a2\u9023\nimport math\nimport random\nimport numpy as np\nimport matplotlib.pyplot as plt\n# chainer\nfrom chainer import Chain, Variable\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer import optimizers\nfrom MyChain import MyChain\n\n# \u4e71\u6570\u306e\u30b7\u30fc\u30c9\u3092\u56fa\u5b9a\nrandom.seed(1)\n\n# \u6a19\u672c\u30c7\u30fc\u30bf\u306e\u751f\u6210\n#   \u771f\u306e\u95a2\u6570\u3068\u3057\u3066sin\u95a2\u6570\u3092\nx, y = [], []\nfor i in np.linspace(-3,3,100):\n    x.append([i])\n    y.append([math.sin(i)])  # \u771f\u306e\u95a2\u6570\n# chainer\u306e\u5909\u6570\u3068\u3057\u3066\u518d\u5ea6\u5ba3\u8a00\nx = Variable(np.array(x, dtype=np.float32))\ny = Variable(np.array(y, dtype=np.float32))\n\n# NN\u30e2\u30c7\u30eb\u3092\u5ba3\u8a00\nmodel = MyChain()\n\n# \u640d\u5931\u95a2\u6570\u306e\u8a08\u7b97\n#   \u640d\u5931\u95a2\u6570\u306b\u306f\u81ea\u4e57\u8aa4\u5dee(MSE)\u3092\u4f7f\u7528\ndef forward(x, y, model):\n    t = model.predict(x)\n    loss = F.mean_squared_error(t, y)\n    return loss\n\n# chainer\u306eoptimizer\n#   \u6700\u9069\u5316\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u306f Adam \u3092\u4f7f\u7528\noptimizer = optimizers.Adam()\n# model\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092optimizer\u306b\u6e21\u3059\noptimizer.setup(model)\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b66\u7fd2\u3092\u7e70\u308a\u8fd4\u3059\nfor i in range(0,1000):\n    loss = forward(x, y, model)\n    print(loss.data)  # \u73fe\u72b6\u306eMSE\u3092\u8868\u793a\n    optimizer.update(forward, x, y, model)\n\n# \u30d7\u30ed\u30c3\u30c8\nt = model.predict(x)\nplt.plot(x.data, y.data)\nplt.scatter(x.data, t.data)\nplt.grid(which='major',color='gray',linestyle='-')\nplt.ylim(-1.5, 1.5)\nplt.xlim(-4, 4)\nplt.show()\n\n\n\n\u6a19\u672c\u30c7\u30fc\u30bf\u306e\u751f\u6210\n\u4eca\u56de\u306e\u975e\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u6559\u5e2b\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f\uff11\u5165\u529b\uff11\u51fa\u529b\u306esin\u95a2\u6570\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n# \u6a19\u672c\u30c7\u30fc\u30bf\u306e\u751f\u6210\n#   \u771f\u306e\u95a2\u6570\u3068\u3057\u3066sin\u95a2\u6570\u3092\nx, y = [], []\nfor i in np.linspace(-3,3,100):\n    x.append([i])\n    y.append([math.sin(i)])  # \u771f\u306e\u95a2\u6570\n# chainer\u306e\u5909\u6570\u3068\u3057\u3066\u518d\u5ea6\u5ba3\u8a00\nx = Variable(np.array(x, dtype=np.float32))\ny = Variable(np.array(y, dtype=np.float32))\n\n\n\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\nDeep Learning\u306e\u30e2\u30c7\u30eb\u3092Chainer\u306b\u3088\u308a\u69cb\u7bc9\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f\u5165\u529b\u5c64\u3001\u96a0\u308c\u5c64\uff11\u3001\u96a0\u308c\u5c64\uff12\u3001\u51fa\u529b\u5c64\u306e\uff14\u5c64\u69cb\u6210\u306b\u3057\u307e\u3057\u305f\u3002\n\u30ce\u30fc\u30c9\u306e\u6570\u306f\u9069\u5f53\u306b\u6c7a\u3081\u307e\u3057\u305f\uff08\u3053\u306e\u8fba\u308a\u306f\u524d\u56de\u3082\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u7d4c\u9a13\u3068\u52d8\u3067\u3059\uff09\u3002\n\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u3001\u3053\u3053\u306e\u5024\u3092\u7de8\u96c6\u3057\u3066\u307f\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u96a0\u308c\u5c64\u304c\uff12\u5c64\u3042\u308b\u7406\u7531\u306f\u3001\uff11\u5c64\u3067\u56de\u5e30\u3057\u3066\u307f\u308b\u3068\u3001\u3046\u307e\u304f\u7279\u5fb4\u3092\u6349\u3048\u3089\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u3082\u3046\u4e00\u5c64\u5897\u3084\u3057\u305f\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3059\u3002\n\nMyChain.py\n# -*- coding: utf-8 -*-\nfrom chainer import Chain\nimport chainer.links as L\nimport chainer.functions as F\n\nclass MyChain(Chain):\n\n    def __init__(self):\n        super(MyChain, self).__init__(\n            l1 = L.Linear(1, 100),\n            l2 = L.Linear(100, 30),\n            l3 = L.Linear(30, 1)\n        )\n\n    def predict(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        return self.l3(h2)\n\n\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f\u3001\u6d3b\u6027\u5316\u95a2\u6570\u306brelu\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\u3002\n\u5c11\u3057\u524d\u3060\u3068\u3001\u3053\u306e\u6d3b\u6027\u5316\u95a2\u6570\u306b\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u5b9a\u756a\u3067\u3057\u305f\u304c\u3001\u6700\u8fd1\u3067\u306f\u3001\u8aa4\u5dee\u9006\u4f1d\u64ad\u6cd5\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b66\u7fd2\u3055\u305b\u308b\u969b\u306b\u3001\u5f8c\u308d\u306e\u305d\u3046\u306b\u884c\u304f\u307b\u3069\u5b66\u7fd2\u7387\u304c\u4e0b\u304c\u3063\u3066\u3044\u304f\u554f\u984c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u3001relu\u3092\u3088\u304f\u4f7f\u3046\u305d\u3046\u3067\u3059\u3002\n\u3053\u306e\u8fba\u308a\u306f\u3001\u79c1\u81ea\u8eab\u3082\u611f\u899a\u3067\u3057\u304b\u77e5\u3089\u306a\u3044\u306e\u3067\u3001\u3082\u3046\u5c11\u3057\u52c9\u5f37\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u6d3b\u6027\u5316\u95a2\u6570\u306b\u3064\u3044\u3066\u306f\u3001\u4ed6\u306b\u3082\u8272\u3005\u3068\u89e3\u8aac\u8a18\u4e8b\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u3069\u3046\u305e\u3002\n\u53c2\u8003\uff1a\u3010\u6a5f\u68b0\u5b66\u7fd2\u3011\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0 \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afChainer\u3092\u8a66\u3057\u306a\u304c\u3089\u89e3\u8aac\u3057\u3066\u307f\u308b\u3002\n\n\u672a\u5b66\u7fd2\u306e\u72b6\u6cc1\u3067\u78ba\u8a8d\n\u5168\u304f\u5b66\u7fd2\u3055\u305b\u3066\u3044\u306a\u3044\u72b6\u6cc1\u3067\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u6700\u7d42\u7684\u306b\u51fa\u3066\u304f\u308b\u7d50\u679c\u3060\u3051\u3067\u306a\u304f\u3001\u9014\u4e2d\u7d4c\u904e\u3082\u898b\u308b\u3053\u3068\u3067\u3001\u5168\u4f53\u611f\u3092\u628a\u63e1\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n## NN\u30e2\u30c7\u30eb\u3092\u5ba3\u8a00\nmodel = MyChain()\n\n# \u30d7\u30ed\u30c3\u30c8\nt = model.predict(x)\nplt.plot(x.data, y.data)\nplt.scatter(x.data, t.data)\nplt.grid(which='major',color='gray',linestyle='-')\nplt.ylim(-1.5, 1.5)\nplt.xlim(-4, 4)\nplt.show()\n\n\n\u672a\u5b66\u7fd2\u306e\u72b6\u6cc1\u3060\u3068\u3001\u771f\u306e\u95a2\u6570\u306e\u7279\u5fb4\u3092\u5168\u304f\u6349\u3048\u3089\u308c\u3066\u3044\u306a\u3044\u3068\u3044\u3063\u305f\u3053\u3068\u304c\u308f\u304b\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b66\u7fd2\u3055\u305b\u308b\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b66\u7fd2\u3055\u305b\u308b\u306b\u3042\u305f\u308a\u3001\u307e\u305a\u640d\u5931\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f\u81ea\u4e57\u8aa4\u5dee (MSE; Mean Squared Error) \u3092\u640d\u5931\u95a2\u6570\u3068\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002\n{\\rm MSE} = \\dfrac{1}{N} \\sum_{n=1}^{N} \\left( \\hat{y}_{n} - y_{n} \\right)^{2}\nMSE=1NN\u2211n=1(\u02c6yn\u2212yn)2{{\\rm MSE} = \\dfrac{1}{N} \\sum_{n=1}^{N} \\left( \\hat{y}_{n} - y_{n} \\right)^{2}\n}\n\u203b NN: \u30b5\u30f3\u30d7\u30eb\u6570\u3001 yny_{n}: nn \u756a\u76ee\u306e\u51fa\u529b\u5909\u6570\u3001\u02c6yn\\hat{y}_{n}: nn \u756a\u76ee\u306e\u51fa\u529b\u5909\u6570\u306e\u63a8\u5b9a\u5024\nmnist\u306e\u4f8b\u3060\u3068\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u95a2\u6570\u3092\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u306d\u3002\n# \u640d\u5931\u95a2\u6570\u306e\u8a08\u7b97\n#   \u640d\u5931\u95a2\u6570\u306b\u306f\u81ea\u4e57\u8aa4\u5dee(MSE)\u3092\u4f7f\u7528\ndef forward(x, y, model):\n    t = model.predict(x)\n    loss = F.mean_squared_error(t, y)\n    return loss\n\n\u3053\u306e\u640d\u5931\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3053\u3068\u306b\u3088\u308a\u3001Chainer\u3067\u306f optimizer \u306e\u52fe\u914d\u8a08\u7b97\u3092\u81ea\u52d5\u7684\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n# chainer\u306eoptimizer\n#   \u6700\u9069\u5316\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u306f Adam \u3092\u4f7f\u7528\noptimizer = optimizers.Adam()\n# model\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092optimizer\u306b\u6e21\u3059\noptimizer.setup(model)\n# \u52fe\u914d\u306e\u66f4\u65b0\noptimizer.update(forward, x, y, model)\n\n\u3053\u308c\u3067\u57fa\u672c\u7684\u306a\u6d41\u308c\u306f\u304a\u3057\u307e\u3044\u3067\u3059\u3002\n\n\u5b66\u7fd2\u3092\u7e70\u308a\u8fd4\u3059\n\u3055\u304d\u307b\u3069\u306e optimizer.update() \u3092\u4f55\u5ea6\u304b\u7e70\u308a\u8fd4\u3059\u3053\u3068\u306b\u3088\u308a\u3001\u826f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3078\u3068\u53ce\u675f\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u4eca\u56de\u306f\u6559\u5e2b\u30c7\u30fc\u30bf\u3092\u540c\u3058\u3082\u306e\u3067\u4f55\u5ea6\u3082\u5b66\u7fd2\u3055\u305b\u3066\u3044\u307e\u3059\u304c\u3001\u672c\u6765\u306f\u3001\u30d0\u30c3\u30c1\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u6a19\u672c\u96c6\u56e3\u306e\u4e2d\u304b\u3089\u3044\u304f\u3064\u304b\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u6559\u5e2b\u30c7\u30fc\u30bf\u3068\u3057\u3066\u5b66\u7fd2\u3055\u305b\u3001\u6b21\u306e\u30b5\u30a4\u30af\u30eb\u3067\u306f\u5225\u306e\u6a19\u672c\u3092\u30d0\u30c3\u30c1\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3068\u3044\u3063\u305f\u6d41\u308c\u3067\u3059\u3002\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b66\u7fd2\u3092\u7e70\u308a\u8fd4\u3059\nfor i in range(0,1000):\n    loss = forward(x, y, model)\n    print(loss.data)  # \u73fe\u72b6\u306eMSE\u3092\u8868\u793a\n    optimizer.update(forward, x, y, model)\n\n\n\u5b66\u7fd2\u3092\u7e70\u308a\u8fd4\u3059\u3054\u3068\u306b\u3001\u81ea\u4e57\u8aa4\u5dee\u304c\u5c0f\u3055\u304f\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u308c\u3067\u5b66\u7fd2\u3092\u7d42\u3048\u308c\u3070\u3001\u975e\u5e38\u306b\u306a\u3081\u3089\u304b\u306b\u95a2\u6570\u3092\u8fd1\u4f3c\u51fa\u6765\u307e\u3057\u305f\u3002\n\n\n\u53c2\u8003\n\uff11\uff0eChainer\u306e\u516c\u5f0f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\n\u3000\u8272\u3005\u3068\u65e5\u672c\u8a9e\u3067\u66f8\u3044\u3066\u3042\u308b\u3082\u306e\u3082\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u5909\u66f4\u306a\u3069\u3067\u5bfe\u5fdc\u3067\u304d\u306a\u3044\u90e8\u5206\u306b\u906d\u9047\u3059\u308b\u3053\u3068\u304c\u591a\u304f\u3001\u82f1\u8a9e\u3067\u3059\u304c\u3053\u3061\u3089\u304c\u4e00\u756a\u5b89\u5b9a\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\uff12\uff0eDeep Learning\u5165\u9580\uff08\uff11\uff09 - Chainer\u3092\u7406\u89e3\u3057\u3001\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308d\u3046 -\n\n\u304a\u307e\u3051\n\u30d5\u30a9\u30ed\u30fc\u304a\u5f85\u3061\u3057\u3066\u3044\u307e\u3059\uff01\nQiita: Carat \u5409\u5d0e\ntwitter\uff1a@carat_yoshizaki\n\u306f\u3066\u306a\u30d6\u30ed\u30b0\uff1aCarat COO\u306e\u30d6\u30ed\u30b0\n\u30db\u30fc\u30e0\u30da\u30fc\u30b8\uff1aCarat\n\u6a5f\u68b0\u5b66\u7fd2\u3092\u30de\u30f3\u30c4\u30fc\u30de\u30f3\u3067\u5b66\u3079\u308b\u5bb6\u5ead\u6559\u5e2b\u30b5\u30fc\u30d3\u30b9\u300c\u30ad\u30ab\u30ac\u30af\u300d\n\u300c\u6570\u5b66\u2192\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u2192Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u300d\u307e\u3067\u4e00\u6c17\u306b\u5b66\u3079\u308b\u300c\u30ad\u30ab\u30ac\u30af\u300d\u306b\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u304a\u6c17\u8efd\u306b\u3054\u9023\u7d61\u304f\u3060\u3055\u3044\u3002\n# \u306f\u3058\u3081\u306b\n\n\u524d\u56de\u306e \u300c[Deep Learning\u5165\u9580\uff08\uff11\uff09 - Chainer\u3092\u7406\u89e3\u3057\u3001\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308d\u3046 -](http://qiita.com/carat_yoshizaki/items/01d4b0a74e8b421bc2ed)\u300d \u306b\u3066\u3001Chainer\u306b\u3064\u3044\u3066\u4f7f\u3044\u65b9\u3092\u307e\u3068\u3081\u3066\u3044\u304d\u307e\u3057\u305f\u3002\n\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u4e00\u901a\u308a\u8ffd\u3048\u308b\u3068\u5927\u4f53\u306e\u4f7f\u3044\u65b9\u304c\u5206\u304b\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\u6a5f\u68b0\u5b66\u7fd2\u3092\u52c9\u5f37\u3059\u308b\u969b\u306b\u306f\u7c21\u5358\u306a\u56de\u5e30\u554f\u984c\u3092\u60f3\u5b9a\u3057\u3001\u305d\u306e\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3067\u304d\u308b\u3068\u3053\u308d\u307e\u3067\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u300c\u7406\u89e3\u3057\u305f\u4f7f\u3048\u308b\uff01\u300d\u3068\u81ea\u5206\u306e\u4e2d\u3067\u6c7a\u3081\u3066\u3044\u307e\u3059\u3002\n\n\u305d\u3053\u3067\u3001\u4eca\u56de\u306f\u5177\u4f53\u7684\u306b\u3001\u975e\u7dda\u5f62\u306asin\u95a2\u6570\u306e\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3057\u3001\u3053\u306e\u95a2\u6570\u3092Chainer\u3067\u69cb\u7bc9\u3057\u305f\u30e2\u30c7\u30eb\u306b\u3088\u308a\u975e\u7dda\u5f62\u56de\u5e30\u3092\u884c\u3044\u307e\u3059\u3002\n\u3053\u3053\u307e\u3067\u4e00\u901a\u308a\u7d42\u3048\u3089\u308c\u308b\u3068\u3001\u753b\u50cf\u5224\u5225\u306a\u3069\u767a\u5c55\u7248\u306b\u9032\u3093\u3067\u3082\u3001\u7406\u89e3\u3067\u304d\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n## \u958b\u767a\u74b0\u5883\n\u30fbOS: Mac OS X EI Capitan (10.11.5)\n\u30fbPython 2.7.12: Anaconda 4.1.1 (x86_64)\n\u30fbchainer 1.12.0\n\n## \u4eca\u56de\u306e\u30b4\u30fc\u30eb\n\n\u4e0b\u306e\u753b\u50cf\u306e\u3088\u3046\u306b\u3001sin\u95a2\u6570\u3092\u30d0\u30c3\u30c1\u30ea\u6349\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306a\u975e\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002\n\n<img width=\"649\" alt=\"\u30b4\u30fc\u30eb.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/130181/34cf23e1-f038-b407-1f8b-67b31b67650f.png\">\n\n# \u975e\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\n\n## \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5168\u4f53\u50cf\n\n```py:MyChain.py\n# -*- coding: utf-8 -*-\nfrom chainer import Chain\nimport chainer.links as L\nimport chainer.functions as F\n\nclass MyChain(Chain):\n\n    def __init__(self):\n        super(MyChain, self).__init__(\n            l1 = L.Linear(1, 100),\n            l2 = L.Linear(100, 30),\n            l3 = L.Linear(30, 1)\n        )\n\n    def predict(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        return self.l3(h2)\n```\n\n```py:example.py\n# -*- coding: utf-8 -*-\n\n# \u6570\u5024\u8a08\u7b97\u95a2\u9023\nimport math\nimport random\nimport numpy as np\nimport matplotlib.pyplot as plt\n# chainer\nfrom chainer import Chain, Variable\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer import optimizers\nfrom MyChain import MyChain\n\n# \u4e71\u6570\u306e\u30b7\u30fc\u30c9\u3092\u56fa\u5b9a\nrandom.seed(1)\n\n# \u6a19\u672c\u30c7\u30fc\u30bf\u306e\u751f\u6210\n#   \u771f\u306e\u95a2\u6570\u3068\u3057\u3066sin\u95a2\u6570\u3092\nx, y = [], []\nfor i in np.linspace(-3,3,100):\n    x.append([i])\n    y.append([math.sin(i)])  # \u771f\u306e\u95a2\u6570\n# chainer\u306e\u5909\u6570\u3068\u3057\u3066\u518d\u5ea6\u5ba3\u8a00\nx = Variable(np.array(x, dtype=np.float32))\ny = Variable(np.array(y, dtype=np.float32))\n\n# NN\u30e2\u30c7\u30eb\u3092\u5ba3\u8a00\nmodel = MyChain()\n\n# \u640d\u5931\u95a2\u6570\u306e\u8a08\u7b97\n#   \u640d\u5931\u95a2\u6570\u306b\u306f\u81ea\u4e57\u8aa4\u5dee(MSE)\u3092\u4f7f\u7528\ndef forward(x, y, model):\n    t = model.predict(x)\n    loss = F.mean_squared_error(t, y)\n    return loss\n\n# chainer\u306eoptimizer\n#   \u6700\u9069\u5316\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u306f Adam \u3092\u4f7f\u7528\noptimizer = optimizers.Adam()\n# model\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092optimizer\u306b\u6e21\u3059\noptimizer.setup(model)\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b66\u7fd2\u3092\u7e70\u308a\u8fd4\u3059\nfor i in range(0,1000):\n    loss = forward(x, y, model)\n    print(loss.data)  # \u73fe\u72b6\u306eMSE\u3092\u8868\u793a\n    optimizer.update(forward, x, y, model)\n\n# \u30d7\u30ed\u30c3\u30c8\nt = model.predict(x)\nplt.plot(x.data, y.data)\nplt.scatter(x.data, t.data)\nplt.grid(which='major',color='gray',linestyle='-')\nplt.ylim(-1.5, 1.5)\nplt.xlim(-4, 4)\nplt.show()\n```\n\n## \u6a19\u672c\u30c7\u30fc\u30bf\u306e\u751f\u6210\n\n\u4eca\u56de\u306e\u975e\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u6559\u5e2b\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f\uff11\u5165\u529b\uff11\u51fa\u529b\u306esin\u95a2\u6570\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```py\n# \u6a19\u672c\u30c7\u30fc\u30bf\u306e\u751f\u6210\n#   \u771f\u306e\u95a2\u6570\u3068\u3057\u3066sin\u95a2\u6570\u3092\nx, y = [], []\nfor i in np.linspace(-3,3,100):\n    x.append([i])\n    y.append([math.sin(i)])  # \u771f\u306e\u95a2\u6570\n# chainer\u306e\u5909\u6570\u3068\u3057\u3066\u518d\u5ea6\u5ba3\u8a00\nx = Variable(np.array(x, dtype=np.float32))\ny = Variable(np.array(y, dtype=np.float32))\n```\n\n## \u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\nDeep Learning\u306e\u30e2\u30c7\u30eb\u3092Chainer\u306b\u3088\u308a\u69cb\u7bc9\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f\u5165\u529b\u5c64\u3001\u96a0\u308c\u5c64\uff11\u3001\u96a0\u308c\u5c64\uff12\u3001\u51fa\u529b\u5c64\u306e\uff14\u5c64\u69cb\u6210\u306b\u3057\u307e\u3057\u305f\u3002\n\u30ce\u30fc\u30c9\u306e\u6570\u306f\u9069\u5f53\u306b\u6c7a\u3081\u307e\u3057\u305f\uff08\u3053\u306e\u8fba\u308a\u306f[\u524d\u56de](http://qiita.com/carat_yoshizaki/items/f26ec1b730564bddd165)\u3082\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u7d4c\u9a13\u3068\u52d8\u3067\u3059\uff09\u3002\n\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u3001\u3053\u3053\u306e\u5024\u3092\u7de8\u96c6\u3057\u3066\u307f\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u96a0\u308c\u5c64\u304c\uff12\u5c64\u3042\u308b\u7406\u7531\u306f\u3001\uff11\u5c64\u3067\u56de\u5e30\u3057\u3066\u307f\u308b\u3068\u3001\u3046\u307e\u304f\u7279\u5fb4\u3092\u6349\u3048\u3089\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u3082\u3046\u4e00\u5c64\u5897\u3084\u3057\u305f\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3059\u3002\n\n```py:MyChain.py\n# -*- coding: utf-8 -*-\nfrom chainer import Chain\nimport chainer.links as L\nimport chainer.functions as F\n\nclass MyChain(Chain):\n\n    def __init__(self):\n        super(MyChain, self).__init__(\n            l1 = L.Linear(1, 100),\n            l2 = L.Linear(100, 30),\n            l3 = L.Linear(30, 1)\n        )\n\n    def predict(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        return self.l3(h2)\n```\n\n\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f\u3001\u6d3b\u6027\u5316\u95a2\u6570\u306brelu\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\u3002\n\u5c11\u3057\u524d\u3060\u3068\u3001\u3053\u306e\u6d3b\u6027\u5316\u95a2\u6570\u306b\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u5b9a\u756a\u3067\u3057\u305f\u304c\u3001\u6700\u8fd1\u3067\u306f\u3001\u8aa4\u5dee\u9006\u4f1d\u64ad\u6cd5\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b66\u7fd2\u3055\u305b\u308b\u969b\u306b\u3001\u5f8c\u308d\u306e\u305d\u3046\u306b\u884c\u304f\u307b\u3069\u5b66\u7fd2\u7387\u304c\u4e0b\u304c\u3063\u3066\u3044\u304f\u554f\u984c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u3001relu\u3092\u3088\u304f\u4f7f\u3046\u305d\u3046\u3067\u3059\u3002\n\u3053\u306e\u8fba\u308a\u306f\u3001\u79c1\u81ea\u8eab\u3082\u611f\u899a\u3067\u3057\u304b\u77e5\u3089\u306a\u3044\u306e\u3067\u3001\u3082\u3046\u5c11\u3057\u52c9\u5f37\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u6d3b\u6027\u5316\u95a2\u6570\u306b\u3064\u3044\u3066\u306f\u3001\u4ed6\u306b\u3082\u8272\u3005\u3068\u89e3\u8aac\u8a18\u4e8b\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u3069\u3046\u305e\u3002\n\u53c2\u8003\uff1a[\u3010\u6a5f\u68b0\u5b66\u7fd2\u3011\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0 \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afChainer\u3092\u8a66\u3057\u306a\u304c\u3089\u89e3\u8aac\u3057\u3066\u307f\u308b\u3002](http://qiita.com/kenmatsu4/items/7b8d24d4c5144a686412)\n\n## \u672a\u5b66\u7fd2\u306e\u72b6\u6cc1\u3067\u78ba\u8a8d\n\n\u5168\u304f\u5b66\u7fd2\u3055\u305b\u3066\u3044\u306a\u3044\u72b6\u6cc1\u3067\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u6700\u7d42\u7684\u306b\u51fa\u3066\u304f\u308b\u7d50\u679c\u3060\u3051\u3067\u306a\u304f\u3001\u9014\u4e2d\u7d4c\u904e\u3082\u898b\u308b\u3053\u3068\u3067\u3001\u5168\u4f53\u611f\u3092\u628a\u63e1\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n```py\n## NN\u30e2\u30c7\u30eb\u3092\u5ba3\u8a00\nmodel = MyChain()\n\n# \u30d7\u30ed\u30c3\u30c8\nt = model.predict(x)\nplt.plot(x.data, y.data)\nplt.scatter(x.data, t.data)\nplt.grid(which='major',color='gray',linestyle='-')\nplt.ylim(-1.5, 1.5)\nplt.xlim(-4, 4)\nplt.show()\n```\n\n<img width=\"659\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-08-08 15.49.58.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/130181/5799aa74-89bb-0f0c-e285-f12c78ac8d82.png\">\n\n\u672a\u5b66\u7fd2\u306e\u72b6\u6cc1\u3060\u3068\u3001\u771f\u306e\u95a2\u6570\u306e\u7279\u5fb4\u3092\u5168\u304f\u6349\u3048\u3089\u308c\u3066\u3044\u306a\u3044\u3068\u3044\u3063\u305f\u3053\u3068\u304c\u308f\u304b\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n## \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b66\u7fd2\u3055\u305b\u308b\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b66\u7fd2\u3055\u305b\u308b\u306b\u3042\u305f\u308a\u3001\u307e\u305a\u640d\u5931\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f\u81ea\u4e57\u8aa4\u5dee (MSE; Mean Squared Error) \u3092\u640d\u5931\u95a2\u6570\u3068\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```math\n{\\rm MSE} = \\dfrac{1}{N} \\sum_{n=1}^{N} \\left( \\hat{y}_{n} - y_{n} \\right)^{2}\n```\n\u203b $N$: \u30b5\u30f3\u30d7\u30eb\u6570\u3001 $y_{n}$: $n$ \u756a\u76ee\u306e\u51fa\u529b\u5909\u6570\u3001$\\hat{y}_{n}$: $n$ \u756a\u76ee\u306e\u51fa\u529b\u5909\u6570\u306e\u63a8\u5b9a\u5024\nmnist\u306e\u4f8b\u3060\u3068\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u95a2\u6570\u3092\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u306d\u3002\n\n```py\n# \u640d\u5931\u95a2\u6570\u306e\u8a08\u7b97\n#   \u640d\u5931\u95a2\u6570\u306b\u306f\u81ea\u4e57\u8aa4\u5dee(MSE)\u3092\u4f7f\u7528\ndef forward(x, y, model):\n    t = model.predict(x)\n    loss = F.mean_squared_error(t, y)\n    return loss\n```\n\n\u3053\u306e\u640d\u5931\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3053\u3068\u306b\u3088\u308a\u3001Chainer\u3067\u306f optimizer \u306e\u52fe\u914d\u8a08\u7b97\u3092\u81ea\u52d5\u7684\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```py\n# chainer\u306eoptimizer\n#   \u6700\u9069\u5316\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u306f Adam \u3092\u4f7f\u7528\noptimizer = optimizers.Adam()\n# model\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092optimizer\u306b\u6e21\u3059\noptimizer.setup(model)\n# \u52fe\u914d\u306e\u66f4\u65b0\noptimizer.update(forward, x, y, model)\n```\n\n\u3053\u308c\u3067\u57fa\u672c\u7684\u306a\u6d41\u308c\u306f\u304a\u3057\u307e\u3044\u3067\u3059\u3002\n\n\n## \u5b66\u7fd2\u3092\u7e70\u308a\u8fd4\u3059\n\n\u3055\u304d\u307b\u3069\u306e ```optimizer.update()``` \u3092\u4f55\u5ea6\u304b\u7e70\u308a\u8fd4\u3059\u3053\u3068\u306b\u3088\u308a\u3001\u826f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3078\u3068\u53ce\u675f\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u4eca\u56de\u306f\u6559\u5e2b\u30c7\u30fc\u30bf\u3092\u540c\u3058\u3082\u306e\u3067\u4f55\u5ea6\u3082\u5b66\u7fd2\u3055\u305b\u3066\u3044\u307e\u3059\u304c\u3001\u672c\u6765\u306f\u3001\u30d0\u30c3\u30c1\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u6a19\u672c\u96c6\u56e3\u306e\u4e2d\u304b\u3089\u3044\u304f\u3064\u304b\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u6559\u5e2b\u30c7\u30fc\u30bf\u3068\u3057\u3066\u5b66\u7fd2\u3055\u305b\u3001\u6b21\u306e\u30b5\u30a4\u30af\u30eb\u3067\u306f\u5225\u306e\u6a19\u672c\u3092\u30d0\u30c3\u30c1\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3068\u3044\u3063\u305f\u6d41\u308c\u3067\u3059\u3002\n\n```py\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b66\u7fd2\u3092\u7e70\u308a\u8fd4\u3059\nfor i in range(0,1000):\n    loss = forward(x, y, model)\n    print(loss.data)  # \u73fe\u72b6\u306eMSE\u3092\u8868\u793a\n    optimizer.update(forward, x, y, model)\n```\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-08-08 16.16.36.png](https://qiita-image-store.s3.amazonaws.com/0/130181/9240ab2f-cbe9-df0d-732e-79f7e459ebd0.png)\n\n\u5b66\u7fd2\u3092\u7e70\u308a\u8fd4\u3059\u3054\u3068\u306b\u3001\u81ea\u4e57\u8aa4\u5dee\u304c\u5c0f\u3055\u304f\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u308c\u3067\u5b66\u7fd2\u3092\u7d42\u3048\u308c\u3070\u3001\u975e\u5e38\u306b\u306a\u3081\u3089\u304b\u306b\u95a2\u6570\u3092\u8fd1\u4f3c\u51fa\u6765\u307e\u3057\u305f\u3002\n\n<img width=\"649\" alt=\"\u30b4\u30fc\u30eb.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/130181/34cf23e1-f038-b407-1f8b-67b31b67650f.png\">\n\n\n# \u53c2\u8003\n\uff11\uff0e[Chainer\u306e\u516c\u5f0f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9](http://docs.chainer.org/en/stable/reference/)\n\u3000\u8272\u3005\u3068\u65e5\u672c\u8a9e\u3067\u66f8\u3044\u3066\u3042\u308b\u3082\u306e\u3082\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u5909\u66f4\u306a\u3069\u3067\u5bfe\u5fdc\u3067\u304d\u306a\u3044\u90e8\u5206\u306b\u906d\u9047\u3059\u308b\u3053\u3068\u304c\u591a\u304f\u3001\u82f1\u8a9e\u3067\u3059\u304c\u3053\u3061\u3089\u304c\u4e00\u756a\u5b89\u5b9a\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\uff12\uff0e[Deep Learning\u5165\u9580\uff08\uff11\uff09 - Chainer\u3092\u7406\u89e3\u3057\u3001\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308d\u3046 -](http://qiita.com/carat_yoshizaki/items/01d4b0a74e8b421bc2ed)\n\n# \u304a\u307e\u3051\n\u30d5\u30a9\u30ed\u30fc\u304a\u5f85\u3061\u3057\u3066\u3044\u307e\u3059\uff01\nQiita: [Carat \u5409\u5d0e](http://qiita.com/carat_yoshizaki)\ntwitter\uff1a[@carat_yoshizaki](https://twitter.com/carat_yoshizaki)\n\u306f\u3066\u306a\u30d6\u30ed\u30b0\uff1a[Carat COO\u306e\u30d6\u30ed\u30b0](http://carat-tech.hatenablog.com/)\n\u30db\u30fc\u30e0\u30da\u30fc\u30b8\uff1a[Carat](http://caratinc.jp)\n\n\u6a5f\u68b0\u5b66\u7fd2\u3092\u30de\u30f3\u30c4\u30fc\u30de\u30f3\u3067\u5b66\u3079\u308b\u5bb6\u5ead\u6559\u5e2b\u30b5\u30fc\u30d3\u30b9\u300c[\u30ad\u30ab\u30ac\u30af](https://kikagaku.net)\u300d\n\u300c\u6570\u5b66\u2192\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u2192Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u300d\u307e\u3067\u4e00\u6c17\u306b\u5b66\u3079\u308b\u300c[\u30ad\u30ab\u30ac\u30af](https://kikagaku.net)\u300d\u306b\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u304a\u6c17\u8efd\u306b\u3054\u9023\u7d61\u304f\u3060\u3055\u3044\u3002\n"}