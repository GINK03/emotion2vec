{"tags": ["Java", "test", "\u30c6\u30b9\u30c8", "JUnit", "serialize"], "context": " More than 1 year has passed since last update.java.io.Serializable \u5b9f\u88c5\u30af\u30e9\u30b9\u306b\u5bfe\u3057\u3066\u3069\u306e\u3088\u3046\u306a\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3079\u304d\u306a\u306e\u304b\u3092\u8003\u3048\u308b\u30b7\u30ea\u30fc\u30ba\u306e3\u56de\u76ee\u3067\u3059\u3002\n\u3053\u308c\u307e\u30672\u56de\u306b\u308f\u305f\u308a\u3001Serializable \u5b9f\u88c5\u30af\u30e9\u30b9\u306b\u5bfe\u3057\u3066\u5fc5\u8981\u306a\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u5b9f\u4f8b\u3092\u4ea4\u3048\u3066\u898b\u3066\u304d\u307e\u3057\u305f\u3002\n\n\u30b1\u30fc\u30b9\uff11\uff1a\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6642\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5236\u5fa1\u306b\u3064\u3044\u3066\u30c6\u30b9\u30c8\u3059\u308b\n\u30b1\u30fc\u30b9\uff12\uff1a\u4e0d\u6b63\u306a\u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089\u306e\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3092\u30c6\u30b9\u30c8\u3059\u308b\n\n\u4eca\u56de\u306e\u30c6\u30fc\u30de\u306f\u300c\u30b1\u30fc\u30b9\uff13\uff1a\u305d\u306e\u30af\u30e9\u30b9\u3001\u672c\u5f53\u306b Serializable \u3067\u3059\u304b\uff1f\uff0d \u6700\u4f4e\u9650\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u308b\u300d\u3067\u3059\u3002\n\nSerializable \u3092 implements \u3057\u305f\u3060\u3051\u3067\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u53ef\u80fd\u306b\u306a\u3089\u306a\u3044\u5834\u5408\u304c\u3042\u308b\nSerializable \u3092 implements \u3057\u3055\u3048\u3059\u308c\u3070\u81ea\u52d5\u7684\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u53ef\u80fd\u306b\u306a\u308b\u3068\u3044\u3046\u306e\u306f\u3001\u3088\u304f\u3042\u308b\u5927\u304d\u306a\u8aa4\u89e3\u3067\u3059\u3002\u5b9f\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u5b9f\u4f8b\uff11\n\u6b21\u306e Odd \u30af\u30e9\u30b9\u306f\u3001\u5947\u6570\u5024\u3092\u4fdd\u6301\u3059\u308b\u3060\u3051\u306e\u5358\u7d14\u306a int \u306e\u30e9\u30c3\u30d1\u30fc\u3067\u3059\u3002\n\nOdd.java\uff08\u3042\u307e\u308a\u5f79\u306b\u7acb\u3061\u305d\u3046\u306b\u306a\u3044\u304c\u3001\u5b9f\u88c5\u4e0a\u306e\u554f\u984c\u306f\u306a\u3044\uff09\npublic class Odd {\n    private int n;\n\n    public Odd(int n) {\n        set(n);\n    }\n\n    public final void set(int n) {\n        if (n < 1 || n % 2 == 0) {\n            throw new IllegalArgumentException(\"n must be an odd. n==\" + n);\n        }\n        this.n = n;\n    }\n\n    public int get() {\n        return n;\n    }\n}\n\n\n\u3053\u306e\u307e\u307e\u3067\u306f\u3042\u307e\u308a\u5f79\u306b\u7acb\u305f\u306a\u3044\u306e\u3067\u3001Odd \u3092\u7d99\u627f\u3057\u3066 ExtendedOdd \u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\u5024\u304c\u4f55\u56de\u53c2\u7167\u3055\u308c\u305f\u304b\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\u3068\u3068\u3082\u306b\u3001\u305d\u308c\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3067\u304d\u308b\u3088\u3046\u3001Serializable \u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\nExtendedOdd.java\uff08\u6ce8\u610f\uff01\u3053\u306e\u30af\u30e9\u30b9\u306b\u306f\u554f\u984c\u304c\u3042\u308b\uff09\npublic class ExtendedOdd extends Odd implements Serializable {\n    private AtomicInteger counter = new AtomicInteger();\n\n    public ExtendedOdd(int n) {\n        super(n);\n    }\n\n    @Override\n    public int get() {\n        counter.incrementAndGet();\n        return super.get();\n    }\n\n    public int getCount() {\n        return counter.get();\n    }\n}\n\n\n\u3055\u3066\u3001ExtendedOdd \u30af\u30e9\u30b9\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u53ef\u80fd\u3067\u3057\u3087\u3046\u304b\uff1f \u3044\u3044\u3048\u3001\u3053\u306e\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\u5b9f\u969b\u306b\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nExtendedOddTest.java\uff08\u95a2\u9023\u30bd\u30fc\u30b9\u306f\u672c\u7a3f\u672b\u5c3e\u306b\u63b2\u8f09\uff09\npublic class ExtendedOddTest {\n\n    @Test\n    public void test1() throws ClassNotFoundException, IOException {\n        ExtendedOdd eOdd = new ExtendedOdd(7);\n        byte[] bytes = TestUtil.serialize(eOdd);\n        Object obj = TestUtil.deserialize(bytes);\n\n        assertThat(obj, instanceOf(ExtendedOdd.class));\n    }\n}\n\n\n\u3053\u306e\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001Object obj = TestUtil.deserialize(bytes); \u306e\u884c\u3067\u6b21\u306e\u4f8b\u5916\u304c\u767a\u751f\u3057\u3066\u5931\u6557\u3057\u307e\u3059\u3002\njava.io.InvalidClassException: mypkg.ExtendedOdd; no valid constructor\n\n\u539f\u56e0\u306f\u3001Odd \u304c\u5f15\u6570\u306a\u3057\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u305f\u306a\u3044\u3053\u3068\u3067\u3059\u3002\nOdd \u81ea\u4f53\u306f Serializable \u3067\u306f\u306a\u3044\u306e\u3067\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u305f\u3081\u306b\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u7528\u3044\u308b\u307b\u304b\u3042\u308a\u307e\u305b\u30931\u3002ExtendedOdd \u3092\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u904e\u7a0b\u3067\u3001\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u69cb\u306f\u5f15\u6570\u306a\u3057\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u7528\u3044\u3066 Odd \u90e8\u5206\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5fa9\u5143\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002\u3053\u306e\u305f\u3081\u5931\u6557\u3059\u308b\u308f\u3051\u3067\u3059\u3002\nOdd \u81ea\u4f53\u3092 Serializable \u306b\u3059\u308b\u3053\u3068\u3067\u3053\u306e\u554f\u984c\u306f\u89e3\u6d88\u3057\u307e\u30592\u3002\n\n\u5b9f\u4f8b\uff12\n\u6b21\u306e\u4f8b\u306f\u30aa\u30bb\u30ed\u76e4\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u76e4\u4e0a\u306e\u4f4d\u7f6e\u3092 (i, j) \u3067\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3064\u3064\u3001\u5185\u90e8\u3067\u306f Position \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u30c7\u30fc\u30bf\u3092 HashMap \u3067\u7ba1\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\uff08\u3048\uff1f 2\u6b21\u5143\u914d\u5217\u3067\u5b9f\u88c5\u3059\u308a\u3083\u826f\u3044\u3063\u3066\uff1f \u3044\u3084\u3044\u3084\u3053\u308c\u306f\u4f8b\u3067\u3059\u304b\u3089...\uff09\n\nOthelloBoard.java\uff08\u6ce8\u610f\uff01\u3053\u306e\u30af\u30e9\u30b9\u306b\u306f\u554f\u984c\u304c\u3042\u308b\uff09\npublic class OthelloBoard implements Serializable {\n\n    private final Map<Position, Color> map = new HashMap<>();\n\n    public void put(int i, int j, Color color) {\n        // \u7d19\u5e45\u306e\u95a2\u4fc2\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30a7\u30c3\u30af\u306f\u7701\u7565\uff08\u4ee5\u4e0b\u540c\u69d8\uff09\n        map.put(new Position(i, j), color);\n    }\n\n    public Color get(int i, int j) {\n        return map.get(new Position(i, j));\n    }\n\n    private static class Position {\n        private final int i;\n        private final int j;\n\n        private Position(int i, int j) {\n            this.i = i;\n            this.j = j;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (obj instanceof Position) {\n                Position p = (Position) obj;\n                return i == p.i && j == p.j;\n            }\n            return false;\n        }\n\n        @Override\n        public int hashCode() {\n            return 8 * i + j;\n        }\n    }\n}\n\n\nOthelloBoard \u306f\u6b63\u3057\u304f\u52d5\u304d\u307e\u3059\u304c\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3067\u304d\u307e\u305b\u3093\u3002\n\u5b9f\u969b\u306b\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nOthelloBoardTest.java\npublic class OthelloBoardTest {\n\n    @Test\n    public void test1() throws IOException, ClassNotFoundException {\n        byte[] bytes = TestUtil.serialize(new OthelloBoard());\n        Object obj = TestUtil.deserialize(bytes);\n\n        assertThat(obj, instanceOf(OthelloBoard.class));\n    }\n\n    @Test\n    public void test2() throws IOException, ClassNotFoundException {\n        OthelloBoard board = new OthelloBoard();\n        board.put(3, 4, Color.BLACK);\n        board.put(4, 3, Color.BLACK);\n        board.put(3, 3, Color.WHITE);\n        board.put(4, 4, Color.WHITE);\n\n        byte[] bytes = TestUtil.serialize(board);\n        Object obj = TestUtil.deserialize(bytes);\n\n        assertThat(obj, instanceOf(OthelloBoard.class));\n    }\n}\n\n\ntest1 \u306b\u306f\u5408\u683c\u3057\u307e\u3059\u304c\u3001test2 \u306f byte[] bytes = TestUtil.serialize(board); \u306e\u884c\u3067\u6b21\u306e\u4f8b\u5916\u304c\u767a\u751f\u3057\u3066\u5931\u6557\u3057\u307e\u3059\u3002\njava.io.NotSerializableException: mypkg.OthelloBoard$Position\n\n\u539f\u56e0\u306f\u5185\u90e8\u30af\u30e9\u30b9 Position \u304c Serializable \u3067\u306a\u3044\u3053\u3068\u3067\u3059\u3002\nOthelloBoard \u306e\u30d5\u30a3\u30fc\u30eb\u30c9 map \u306f HashMap \u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308a\u3001\u3053\u308c\u306f Serializable \u3067\u3059\u3002\uff08\u305d\u306e\u305f\u3081\u3001test1 \u306b\u306f\u5408\u683c\u3057\u307e\u3057\u305f\u3002\uff09\n\u3057\u304b\u3057\u3001map \u306e\u5185\u90e8\u304b\u3089\u53c2\u7167\u3057\u3066\u3044\u308b Position \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c Serializable \u3067\u306f\u306a\u3044\u305f\u3081\u3001test2 \u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\n\u3053\u306e\u3088\u3046\u306b\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u69cb\u306f\u57fa\u672c\u7684\u306b\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u8c61\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3060\u3051\u3067\u306a\u304f\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5185\u90e8\u304b\u3089\u53c2\u7167\u3057\u3066\u3044\u308b\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u828b\u3065\u308b\u5f0f\u306b\u3059\u3079\u3066\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b0\u30e9\u30d5\u306e\u4e2d\u306b\u3072\u3068\u3064\u3067\u3082 Serializable \u3067\u306a\u3044\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3042\u308b\u3068\u3001\u5143\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u81ea\u4f53\u304c\u5931\u6557\u3059\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\n\u30b1\u30fc\u30b9\uff13\uff1a\u305d\u306e\u30af\u30e9\u30b9\u3001\u672c\u5f53\u306b Serializable \u3067\u3059\u304b\uff1f\uff0d \u6700\u4f4e\u9650\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u308b\n2\u3064\u306e\u4f8b\u3092\u898b\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u3089\u304b\u3089\u5f97\u3089\u308c\u308b\u6559\u8a13\u306f\u5358\u7d14\u3067\u3059\u3002\nSerializable \u3092\u5b9f\u88c5\u3057\u305f\u306e\u3067\u3042\u308c\u3070\u3001\u4e00\u5ea6\u306f\u5b9f\u969b\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u308b\u3079\u304d\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u95a2\u3059\u308b\u5b9f\u88c5\u306e\u59a5\u5f53\u6027\u306b\u3064\u3044\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u6b86\u3069\u4f55\u3082\u8b66\u544a\u3057\u3066\u304f\u308c\u307e\u305b\u3093\u3002\u4f55\u3089\u306e\u8b66\u544a\u306a\u3057\u306b\u30d3\u30eb\u30c9\u304c\u6210\u529f\u3057\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u3057\u3066\u52d5\u4f5c\u3082\u3057\u3001\u305d\u3057\u3066\u5b9f\u969b\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u3066\u521d\u3081\u3066\u5b9f\u88c5\u306e\u9593\u9055\u3044\u306b\u6c17\u3065\u304f\u306e\u3067\u3059\u3002\n\u3084\u306f\u308a\u6700\u4f4e\u9650\u3001\u5b9f\u969b\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u308b\u3068\u3044\u3046\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3079\u304d\u3067\u3057\u3087\u3046\u3002\n\u3055\u3066 \u6b21\u7a3f \u3067\u306f\u3001\u3053\u308c\u307e\u30673\u56de\u306b\u308f\u305f\u308a\u898b\u3066\u304d\u305f\u5185\u5bb9\u3092\u307e\u3068\u3081\u307e\u3059\u3002\n\n\u304a\u307e\u3051\nOthelloBoard \u306e\u3082\u3046\u5c11\u3057\u30de\u30b7\u306a\u4f8b\u3068\u3057\u3066\u3001\u4ee5\u524d\u306e\u6295\u7a3f\u300e\u30ea\u30d0\u30fc\u30b7\u3067\u904a\u3093\u3067\u899a\u3048\u308b Java 8.\u300f\u3067\u7d39\u4ecb\u3057\u305f\u30bd\u30fc\u30b9\u306e\u4e2d\u306e GitHub: StrictBoard\u30af\u30e9\u30b9\u3078\u306e\u30ea\u30f3\u30af \u3092\u8cbc\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u3078\u306e\u7a81\u3063\u8fbc\u307f\u306a\u3069\u306a\u3069\u3001\u304a\u5f85\u3061\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\u3000\uff5e\u3000\uff5e\u3000\uff5e\n\u3057\u304b\u3057\u6295\u7a3f\u8005\u81ea\u3089\u8a00\u3046\u306e\u3082\u30ca\u30f3\u3067\u3059\u304c\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306e\u30c6\u30b9\u30c8\u3063\u3066 try/catch \u3060\u3068\u304b IOException \u3060\u3068\u304b\u3001\u3068\u306b\u304b\u304f\u9762\u5012\u306a\u5370\u8c61\u3057\u304b\u306a\u3044\u3093\u3067\u3059\u3088\u306d\u3047\u3002\u3002\u3002\u3053\u308c\u3092\u3082\u3063\u3068\u30ab\u30f3\u30bf\u30f3\u306b\u3001\u7701\u529b\u5316\u3067\u304d\u308c\u3070\u3068\u3002\n\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u3001\u7a3f\u3092\u6539\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u21d2 \u6295\u7a3f\u3057\u307e\u3057\u305f\uff1a\u300eJUnit4\u3067\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u691c\u8a3c\u3092\u697d\u30c1\u30f3\u306b\u3059\u308b\uff01\u300f\n\n\u53c2\u8003\n\u672c\u7a3f\u3067\u4f7f\u7528\u3057\u305f\u30bd\u30fc\u30b9\u3092\u63b2\u8f09\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001java \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f java 8 \u3067\u3059\u3002\n\n\u5b9f\u4f8b\uff11\n\nOdd.java\npackage mypkg;\n\npublic class Odd {\n    private int n;\n\n    public Odd(int n) {\n        set(n);\n    }\n\n    public final void set(int n) {\n        if (n < 1 || n % 2 == 0) {\n            throw new IllegalArgumentException(\"n must be an odd. n==\" + n);\n        }\n        this.n = n;\n    }\n\n    public int get() {\n        return n;\n    }\n}\n\n\n\nExtendedOdd.java\npackage mypkg;\n\nimport java.io.Serializable;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class ExtendedOdd extends Odd implements Serializable {\n    private AtomicInteger counter = new AtomicInteger();\n\n    public ExtendedOdd(int n) {\n        super(n);\n    }\n\n    @Override\n    public int get() {\n        counter.incrementAndGet();\n        return super.get();\n    }\n\n    public int getCount() {\n        return counter.get();\n    }\n}\n\n\n\nExtendedOddTest.java\npackage mypkg;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport java.io.IOException;\n\nimport org.junit.Test;\n\npublic class ExtendedOddTest {\n\n    @Test\n    public void test1() throws ClassNotFoundException, IOException {\n        ExtendedOdd eOdd = new ExtendedOdd(7);\n        byte[] bytes = TestUtil.serialize(eOdd);\n        Object obj = TestUtil.deserialize(bytes);\n\n        assertThat(obj, instanceOf(ExtendedOdd.class));\n    }\n}\n\n\n\n\u5b9f\u4f8b\uff12\n\nOthelloBoard.java\npackage mypkg;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class OthelloBoard implements Serializable {\n\n    private final Map<Position, Color> map = new HashMap<>();\n\n    public void put(int i, int j, Color color) {\n        // \u7d19\u5e45\u306e\u95a2\u4fc2\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30a7\u30c3\u30af\u306f\u7701\u7565\uff08\u4ee5\u4e0b\u540c\u69d8\uff09\n        map.put(new Position(i, j), color);\n    }\n\n    public Color get(int i, int j) {\n        return map.get(new Position(i, j));\n    }\n\n    private static class Position {\n        private final int i;\n        private final int j;\n\n        private Position(int i, int j) {\n            this.i = i;\n            this.j = j;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (obj instanceof Position) {\n                Position p = (Position) obj;\n                return i == p.i && j == p.j;\n            }\n            return false;\n        }\n\n        @Override\n        public int hashCode() {\n            return 8 * i + j;\n        }\n    }\n}\n\n\n\nColor.java\npackage mypkg;\n\npublic enum Color {\n    BLACK,\n    WHITE;\n}\n\n\n\nOthelloBoardTest.java\npackage mypkg;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport java.io.IOException;\n\nimport org.junit.Test;\n\npublic class OthelloBoardTest {\n\n    @Test\n    public void test1() throws IOException, ClassNotFoundException {\n        byte[] bytes = TestUtil.serialize(new OthelloBoard());\n        Object obj = TestUtil.deserialize(bytes);\n\n        assertThat(obj, instanceOf(OthelloBoard.class));\n    }\n\n    @Test\n    public void test2() throws IOException, ClassNotFoundException {\n        OthelloBoard board = new OthelloBoard();\n        board.put(3, 4, Color.BLACK);\n        board.put(4, 3, Color.BLACK);\n        board.put(3, 3, Color.WHITE);\n        board.put(4, 4, Color.WHITE);\n\n        byte[] bytes = TestUtil.serialize(board);\n        Object obj = TestUtil.deserialize(bytes);\n\n        assertThat(obj, instanceOf(OthelloBoard.class));\n    }\n}\n\n\n\n\u5171\u901a\npackage mypkg;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.util.Objects;\n\npublic class TestUtil {\n\n    public static byte[] serialize(Object obj) throws IOException {\n        try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n                ObjectOutputStream oos = new ObjectOutputStream(bos)) {\n\n            oos.writeObject(obj);\n            return bos.toByteArray();\n        }\n    }\n\n    public static Object deserialize(byte[] bytes)\n            throws ClassNotFoundException, IOException {\n\n        Objects.requireNonNull(bytes);\n\n        try (ByteArrayInputStream bis = new ByteArrayInputStream(bytes);\n                ObjectInputStream ois = new ObjectInputStream(bis)) {\n\n            return ois.readObject();\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T writeAndRead(T obj)\n            throws IOException, ClassNotFoundException {\n\n        byte[] bytes = serialize(obj);\n        return (T) deserialize(bytes);\n    }\n\n    private TestUtil() {\n    }\n}\n\n\n\u6ce8\u91c8\n\n\n\n\n\u4e00\u65b9\u3001Serializable \u306a\u30af\u30e9\u30b9\u304c\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u308b\u969b\u306b\u306f\u3001\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u306b\u3088\u308a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u76f4\u63a5\u751f\u6210\u3055\u308c\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u8fc2\u56de\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u3053\u3068\u306f\u3001ExtendedOdd \u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30c7\u30d0\u30c3\u30b0\u30ed\u30b0\u51fa\u529b\u30b3\u30fc\u30c9\u3092\u4ed5\u8fbc\u3080\u3053\u3068\u306b\u3088\u308a\u5bb9\u6613\u306b\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u00a0\u21a9\n\n\n\u305f\u3060\u3057\u3001\u3053\u308c\u306f\u3042\u307e\u308a\u3088\u3044\u89e3\u6c7a\u7b56\u3068\u8a00\u3048\u307e\u305b\u3093\u3002Odd \u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u3001\u3042\u308b\u3044\u306f\u3053\u308c\u304b\u3089\u7d99\u627f\u3059\u308b\u4ed6\u306e\u5168\u3066\u306e\u30af\u30e9\u30b9\u306b\u5f71\u97ff\u304c\u53ca\u3076\u305f\u3081\u3067\u3059\u3002\u8a73\u7d30\u306a\u8b70\u8ad6\u306f Amazon:\u300eEffective Java \u7b2c2\u7248\u300f\uff0d\u300c\u9805\u76ee74: Serializable \u3092\u6ce8\u610f\u3057\u3066\u5b9f\u88c5\u3059\u308b\u300d\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u00a0\u21a9\n\n\n\njava.io.Serializable \u5b9f\u88c5\u30af\u30e9\u30b9\u306b\u5bfe\u3057\u3066\u3069\u306e\u3088\u3046\u306a\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3079\u304d\u306a\u306e\u304b\u3092\u8003\u3048\u308b\u30b7\u30ea\u30fc\u30ba\u306e3\u56de\u76ee\u3067\u3059\u3002\n\n\u3053\u308c\u307e\u30672\u56de\u306b\u308f\u305f\u308a\u3001Serializable \u5b9f\u88c5\u30af\u30e9\u30b9\u306b\u5bfe\u3057\u3066\u5fc5\u8981\u306a\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u5b9f\u4f8b\u3092\u4ea4\u3048\u3066\u898b\u3066\u304d\u307e\u3057\u305f\u3002\n\n* [\u30b1\u30fc\u30b9\uff11\uff1a\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6642\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5236\u5fa1\u306b\u3064\u3044\u3066\u30c6\u30b9\u30c8\u3059\u308b](http://qiita.com/nmby/items/1e240eecc3d2bdedc413)\n* [\u30b1\u30fc\u30b9\uff12\uff1a\u4e0d\u6b63\u306a\u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089\u306e\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3092\u30c6\u30b9\u30c8\u3059\u308b](http://qiita.com/nmby/items/e9745634bc4aca62a49e)\n\n\u4eca\u56de\u306e\u30c6\u30fc\u30de\u306f\u300c\u30b1\u30fc\u30b9\uff13\uff1a\u305d\u306e\u30af\u30e9\u30b9\u3001\u672c\u5f53\u306b Serializable \u3067\u3059\u304b\uff1f\uff0d \u6700\u4f4e\u9650\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u308b\u300d\u3067\u3059\u3002\n\n#Serializable \u3092 implements \u3057\u305f\u3060\u3051\u3067\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u53ef\u80fd\u306b\u306a\u3089\u306a\u3044\u5834\u5408\u304c\u3042\u308b\nSerializable \u3092 implements \u3057\u3055\u3048\u3059\u308c\u3070\u81ea\u52d5\u7684\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u53ef\u80fd\u306b\u306a\u308b\u3068\u3044\u3046\u306e\u306f\u3001\u3088\u304f\u3042\u308b\u5927\u304d\u306a\u8aa4\u89e3\u3067\u3059\u3002\u5b9f\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n##\u5b9f\u4f8b\uff11\n\u6b21\u306e Odd \u30af\u30e9\u30b9\u306f\u3001\u5947\u6570\u5024\u3092\u4fdd\u6301\u3059\u308b\u3060\u3051\u306e\u5358\u7d14\u306a int \u306e\u30e9\u30c3\u30d1\u30fc\u3067\u3059\u3002\n\n```java:Odd.java\uff08\u3042\u307e\u308a\u5f79\u306b\u7acb\u3061\u305d\u3046\u306b\u306a\u3044\u304c\u3001\u5b9f\u88c5\u4e0a\u306e\u554f\u984c\u306f\u306a\u3044\uff09\npublic class Odd {\n    private int n;\n    \n    public Odd(int n) {\n        set(n);\n    }\n    \n    public final void set(int n) {\n        if (n < 1 || n % 2 == 0) {\n            throw new IllegalArgumentException(\"n must be an odd. n==\" + n);\n        }\n        this.n = n;\n    }\n    \n    public int get() {\n        return n;\n    }\n}\n```\n\n\u3053\u306e\u307e\u307e\u3067\u306f\u3042\u307e\u308a\u5f79\u306b\u7acb\u305f\u306a\u3044\u306e\u3067\u3001Odd \u3092\u7d99\u627f\u3057\u3066 ExtendedOdd \u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\u5024\u304c\u4f55\u56de\u53c2\u7167\u3055\u308c\u305f\u304b\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\u3068\u3068\u3082\u306b\u3001\u305d\u308c\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3067\u304d\u308b\u3088\u3046\u3001Serializable \u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\n```java:ExtendedOdd.java\uff08\u6ce8\u610f\uff01\u3053\u306e\u30af\u30e9\u30b9\u306b\u306f\u554f\u984c\u304c\u3042\u308b\uff09\npublic class ExtendedOdd extends Odd implements Serializable {\n    private AtomicInteger counter = new AtomicInteger();\n    \n    public ExtendedOdd(int n) {\n        super(n);\n    }\n    \n    @Override\n    public int get() {\n        counter.incrementAndGet();\n        return super.get();\n    }\n    \n    public int getCount() {\n        return counter.get();\n    }\n}\n```\n\n\u3055\u3066\u3001ExtendedOdd \u30af\u30e9\u30b9\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u53ef\u80fd\u3067\u3057\u3087\u3046\u304b\uff1f \u3044\u3044\u3048\u3001\u3053\u306e\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u3053\u3068\u306f**\u3067\u304d\u307e\u305b\u3093**\u3002\n\u5b9f\u969b\u306b\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```java:ExtendedOddTest.java\uff08\u95a2\u9023\u30bd\u30fc\u30b9\u306f\u672c\u7a3f\u672b\u5c3e\u306b\u63b2\u8f09\uff09\npublic class ExtendedOddTest {\n    \n    @Test\n    public void test1() throws ClassNotFoundException, IOException {\n        ExtendedOdd eOdd = new ExtendedOdd(7);\n        byte[] bytes = TestUtil.serialize(eOdd);\n        Object obj = TestUtil.deserialize(bytes);\n        \n        assertThat(obj, instanceOf(ExtendedOdd.class));\n    }\n}\n```\n\n\u3053\u306e\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001`Object obj = TestUtil.deserialize(bytes);` \u306e\u884c\u3067\u6b21\u306e\u4f8b\u5916\u304c\u767a\u751f\u3057\u3066\u5931\u6557\u3057\u307e\u3059\u3002\n\n    java.io.InvalidClassException: mypkg.ExtendedOdd; no valid constructor\n\n\u539f\u56e0\u306f\u3001Odd \u304c**\u5f15\u6570\u306a\u3057\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u305f\u306a\u3044**\u3053\u3068\u3067\u3059\u3002\nOdd \u81ea\u4f53\u306f Serializable \u3067\u306f\u306a\u3044\u306e\u3067\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u305f\u3081\u306b\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u7528\u3044\u308b\u307b\u304b\u3042\u308a\u307e\u305b\u3093[^1]\u3002ExtendedOdd \u3092\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u904e\u7a0b\u3067\u3001\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u69cb\u306f\u5f15\u6570\u306a\u3057\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u7528\u3044\u3066 Odd \u90e8\u5206\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5fa9\u5143\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002\u3053\u306e\u305f\u3081\u5931\u6557\u3059\u308b\u308f\u3051\u3067\u3059\u3002\nOdd \u81ea\u4f53\u3092 Serializable \u306b\u3059\u308b\u3053\u3068\u3067\u3053\u306e\u554f\u984c\u306f\u89e3\u6d88\u3057\u307e\u3059[^2]\u3002\n\n##\u5b9f\u4f8b\uff12\n\u6b21\u306e\u4f8b\u306f\u30aa\u30bb\u30ed\u76e4\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u76e4\u4e0a\u306e\u4f4d\u7f6e\u3092 (i, j) \u3067\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3064\u3064\u3001\u5185\u90e8\u3067\u306f Position \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u30c7\u30fc\u30bf\u3092 HashMap \u3067\u7ba1\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\uff08\u3048\uff1f 2\u6b21\u5143\u914d\u5217\u3067\u5b9f\u88c5\u3059\u308a\u3083\u826f\u3044\u3063\u3066\uff1f \u3044\u3084\u3044\u3084\u3053\u308c\u306f\u4f8b\u3067\u3059\u304b\u3089...\uff09\n\n```java:OthelloBoard.java\uff08\u6ce8\u610f\uff01\u3053\u306e\u30af\u30e9\u30b9\u306b\u306f\u554f\u984c\u304c\u3042\u308b\uff09\npublic class OthelloBoard implements Serializable {\n    \n    private final Map<Position, Color> map = new HashMap<>();\n    \n    public void put(int i, int j, Color color) {\n        // \u7d19\u5e45\u306e\u95a2\u4fc2\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30a7\u30c3\u30af\u306f\u7701\u7565\uff08\u4ee5\u4e0b\u540c\u69d8\uff09\n        map.put(new Position(i, j), color);\n    }\n    \n    public Color get(int i, int j) {\n        return map.get(new Position(i, j));\n    }\n    \n    private static class Position {\n        private final int i;\n        private final int j;\n        \n        private Position(int i, int j) {\n            this.i = i;\n            this.j = j;\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n            if (obj instanceof Position) {\n                Position p = (Position) obj;\n                return i == p.i && j == p.j;\n            }\n            return false;\n        }\n        \n        @Override\n        public int hashCode() {\n            return 8 * i + j;\n        }\n    }\n}\n```\n\nOthelloBoard \u306f\u6b63\u3057\u304f\u52d5\u304d\u307e\u3059\u304c\u3001**\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3067\u304d\u307e\u305b\u3093**\u3002\n\u5b9f\u969b\u306b\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```java:OthelloBoardTest.java\npublic class OthelloBoardTest {\n    \n    @Test\n    public void test1() throws IOException, ClassNotFoundException {\n        byte[] bytes = TestUtil.serialize(new OthelloBoard());\n        Object obj = TestUtil.deserialize(bytes);\n        \n        assertThat(obj, instanceOf(OthelloBoard.class));\n    }\n    \n    @Test\n    public void test2() throws IOException, ClassNotFoundException {\n        OthelloBoard board = new OthelloBoard();\n        board.put(3, 4, Color.BLACK);\n        board.put(4, 3, Color.BLACK);\n        board.put(3, 3, Color.WHITE);\n        board.put(4, 4, Color.WHITE);\n        \n        byte[] bytes = TestUtil.serialize(board);\n        Object obj = TestUtil.deserialize(bytes);\n        \n        assertThat(obj, instanceOf(OthelloBoard.class));\n    }\n}\n```\n\ntest1 \u306b\u306f\u5408\u683c\u3057\u307e\u3059\u304c\u3001test2 \u306f `byte[] bytes = TestUtil.serialize(board);` \u306e\u884c\u3067\u6b21\u306e\u4f8b\u5916\u304c\u767a\u751f\u3057\u3066\u5931\u6557\u3057\u307e\u3059\u3002\n\n    java.io.NotSerializableException: mypkg.OthelloBoard$Position\n\n\u539f\u56e0\u306f\u5185\u90e8\u30af\u30e9\u30b9 Position \u304c Serializable \u3067\u306a\u3044\u3053\u3068\u3067\u3059\u3002\nOthelloBoard \u306e\u30d5\u30a3\u30fc\u30eb\u30c9 map \u306f HashMap \u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308a\u3001\u3053\u308c\u306f Serializable \u3067\u3059\u3002\uff08\u305d\u306e\u305f\u3081\u3001test1 \u306b\u306f\u5408\u683c\u3057\u307e\u3057\u305f\u3002\uff09\n\u3057\u304b\u3057\u3001map \u306e\u5185\u90e8\u304b\u3089\u53c2\u7167\u3057\u3066\u3044\u308b Position \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c Serializable \u3067\u306f\u306a\u3044\u305f\u3081\u3001test2 \u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u69cb\u306f\u57fa\u672c\u7684\u306b\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5bfe\u8c61\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3060\u3051\u3067\u306a\u304f\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5185\u90e8\u304b\u3089\u53c2\u7167\u3057\u3066\u3044\u308b\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u828b\u3065\u308b\u5f0f\u306b\u3059\u3079\u3066\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b0\u30e9\u30d5\u306e\u4e2d\u306b\u3072\u3068\u3064\u3067\u3082 Serializable \u3067\u306a\u3044\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3042\u308b\u3068\u3001\u5143\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u81ea\u4f53\u304c\u5931\u6557\u3059\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\n#\u30b1\u30fc\u30b9\uff13\uff1a\u305d\u306e\u30af\u30e9\u30b9\u3001\u672c\u5f53\u306b Serializable \u3067\u3059\u304b\uff1f\uff0d \u6700\u4f4e\u9650\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u308b\n2\u3064\u306e\u4f8b\u3092\u898b\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u3089\u304b\u3089\u5f97\u3089\u308c\u308b\u6559\u8a13\u306f\u5358\u7d14\u3067\u3059\u3002\n**Serializable \u3092\u5b9f\u88c5\u3057\u305f\u306e\u3067\u3042\u308c\u3070\u3001\u4e00\u5ea6\u306f\u5b9f\u969b\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u308b\u3079\u304d\u3067\u3042\u308b**\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u95a2\u3059\u308b\u5b9f\u88c5\u306e\u59a5\u5f53\u6027\u306b\u3064\u3044\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u6b86\u3069\u4f55\u3082\u8b66\u544a\u3057\u3066\u304f\u308c\u307e\u305b\u3093\u3002\u4f55\u3089\u306e\u8b66\u544a\u306a\u3057\u306b\u30d3\u30eb\u30c9\u304c\u6210\u529f\u3057\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u3057\u3066\u52d5\u4f5c\u3082\u3057\u3001\u305d\u3057\u3066\u5b9f\u969b\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u3066\u521d\u3081\u3066\u5b9f\u88c5\u306e\u9593\u9055\u3044\u306b\u6c17\u3065\u304f\u306e\u3067\u3059\u3002\n\u3084\u306f\u308a\u6700\u4f4e\u9650\u3001\u5b9f\u969b\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u308b\u3068\u3044\u3046\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3079\u304d\u3067\u3057\u3087\u3046\u3002\n\n\u3055\u3066 [\u6b21\u7a3f](http://qiita.com/nmby/items/6ffc244537087438dcfd) \u3067\u306f\u3001\u3053\u308c\u307e\u30673\u56de\u306b\u308f\u305f\u308a\u898b\u3066\u304d\u305f\u5185\u5bb9\u3092\u307e\u3068\u3081\u307e\u3059\u3002\n\n#\u304a\u307e\u3051\nOthelloBoard \u306e\u3082\u3046\u5c11\u3057\u30de\u30b7\u306a\u4f8b\u3068\u3057\u3066\u3001\u4ee5\u524d\u306e\u6295\u7a3f[\u300e\u30ea\u30d0\u30fc\u30b7\u3067\u904a\u3093\u3067\u899a\u3048\u308b Java 8.\u300f](http://qiita.com/nmby/items/bd44e28d937108fa3eb0)\u3067\u7d39\u4ecb\u3057\u305f\u30bd\u30fc\u30b9\u306e\u4e2d\u306e [GitHub: **StrictBoard\u30af\u30e9\u30b9**\u3078\u306e\u30ea\u30f3\u30af](https://github.com/nmby/reversi/blob/master/project/src/main/java/xyz/hotchpotch/game/reversi/core/StrictBoard.java) \u3092\u8cbc\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u3078\u306e\u7a81\u3063\u8fbc\u307f\u306a\u3069\u306a\u3069\u3001\u304a\u5f85\u3061\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\n\u3000\uff5e\u3000\uff5e\u3000\uff5e\n\n\u3057\u304b\u3057\u6295\u7a3f\u8005\u81ea\u3089\u8a00\u3046\u306e\u3082\u30ca\u30f3\u3067\u3059\u304c\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306e\u30c6\u30b9\u30c8\u3063\u3066 try/catch \u3060\u3068\u304b IOException \u3060\u3068\u304b\u3001**\u3068\u306b\u304b\u304f\u9762\u5012**\u306a\u5370\u8c61\u3057\u304b\u306a\u3044\u3093\u3067\u3059\u3088\u306d\u3047\u3002\u3002\u3002\u3053\u308c\u3092\u3082\u3063\u3068\u30ab\u30f3\u30bf\u30f3\u306b\u3001\u7701\u529b\u5316\u3067\u304d\u308c\u3070\u3068\u3002\n\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u3001\u7a3f\u3092\u6539\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u21d2 \u6295\u7a3f\u3057\u307e\u3057\u305f\uff1a[\u300eJUnit4\u3067\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u691c\u8a3c\u3092\u697d\u30c1\u30f3\u306b\u3059\u308b\uff01\u300f](http://qiita.com/nmby/items/75d95aa0a9705e8faf04)\n\n#\u53c2\u8003\n\u672c\u7a3f\u3067\u4f7f\u7528\u3057\u305f\u30bd\u30fc\u30b9\u3092\u63b2\u8f09\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001java \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f java 8 \u3067\u3059\u3002\n####\u5b9f\u4f8b\uff11\n\n```java:Odd.java\npackage mypkg;\n\npublic class Odd {\n    private int n;\n    \n    public Odd(int n) {\n        set(n);\n    }\n    \n    public final void set(int n) {\n        if (n < 1 || n % 2 == 0) {\n            throw new IllegalArgumentException(\"n must be an odd. n==\" + n);\n        }\n        this.n = n;\n    }\n    \n    public int get() {\n        return n;\n    }\n}\n```\n\n```java:ExtendedOdd.java\npackage mypkg;\n\nimport java.io.Serializable;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class ExtendedOdd extends Odd implements Serializable {\n    private AtomicInteger counter = new AtomicInteger();\n    \n    public ExtendedOdd(int n) {\n        super(n);\n    }\n    \n    @Override\n    public int get() {\n        counter.incrementAndGet();\n        return super.get();\n    }\n    \n    public int getCount() {\n        return counter.get();\n    }\n}\n```\n\n```java:ExtendedOddTest.java\npackage mypkg;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport java.io.IOException;\n\nimport org.junit.Test;\n\npublic class ExtendedOddTest {\n    \n    @Test\n    public void test1() throws ClassNotFoundException, IOException {\n        ExtendedOdd eOdd = new ExtendedOdd(7);\n        byte[] bytes = TestUtil.serialize(eOdd);\n        Object obj = TestUtil.deserialize(bytes);\n        \n        assertThat(obj, instanceOf(ExtendedOdd.class));\n    }\n}\n```\n\n####\u5b9f\u4f8b\uff12\n\n```java:OthelloBoard.java\npackage mypkg;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class OthelloBoard implements Serializable {\n    \n    private final Map<Position, Color> map = new HashMap<>();\n    \n    public void put(int i, int j, Color color) {\n        // \u7d19\u5e45\u306e\u95a2\u4fc2\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30a7\u30c3\u30af\u306f\u7701\u7565\uff08\u4ee5\u4e0b\u540c\u69d8\uff09\n        map.put(new Position(i, j), color);\n    }\n    \n    public Color get(int i, int j) {\n        return map.get(new Position(i, j));\n    }\n    \n    private static class Position {\n        private final int i;\n        private final int j;\n        \n        private Position(int i, int j) {\n            this.i = i;\n            this.j = j;\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n            if (obj instanceof Position) {\n                Position p = (Position) obj;\n                return i == p.i && j == p.j;\n            }\n            return false;\n        }\n        \n        @Override\n        public int hashCode() {\n            return 8 * i + j;\n        }\n    }\n}\n```\n\n```java:Color.java\npackage mypkg;\n\npublic enum Color {\n    BLACK,\n    WHITE;\n}\n```\n\n```java:OthelloBoardTest.java\npackage mypkg;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport java.io.IOException;\n\nimport org.junit.Test;\n\npublic class OthelloBoardTest {\n    \n    @Test\n    public void test1() throws IOException, ClassNotFoundException {\n        byte[] bytes = TestUtil.serialize(new OthelloBoard());\n        Object obj = TestUtil.deserialize(bytes);\n        \n        assertThat(obj, instanceOf(OthelloBoard.class));\n    }\n    \n    @Test\n    public void test2() throws IOException, ClassNotFoundException {\n        OthelloBoard board = new OthelloBoard();\n        board.put(3, 4, Color.BLACK);\n        board.put(4, 3, Color.BLACK);\n        board.put(3, 3, Color.WHITE);\n        board.put(4, 4, Color.WHITE);\n        \n        byte[] bytes = TestUtil.serialize(board);\n        Object obj = TestUtil.deserialize(bytes);\n        \n        assertThat(obj, instanceOf(OthelloBoard.class));\n    }\n}\n```\n\n####\u5171\u901a\n\n```java:\npackage mypkg;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.util.Objects;\n\npublic class TestUtil {\n    \n    public static byte[] serialize(Object obj) throws IOException {\n        try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n                ObjectOutputStream oos = new ObjectOutputStream(bos)) {\n                \n            oos.writeObject(obj);\n            return bos.toByteArray();\n        }\n    }\n    \n    public static Object deserialize(byte[] bytes)\n            throws ClassNotFoundException, IOException {\n            \n        Objects.requireNonNull(bytes);\n        \n        try (ByteArrayInputStream bis = new ByteArrayInputStream(bytes);\n                ObjectInputStream ois = new ObjectInputStream(bis)) {\n                \n            return ois.readObject();\n        }\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    public static <T> T writeAndRead(T obj)\n            throws IOException, ClassNotFoundException {\n            \n        byte[] bytes = serialize(obj);\n        return (T) deserialize(bytes);\n    }\n    \n    private TestUtil() {\n    }\n}\n```\n\n#\u6ce8\u91c8\n[^1]: \u4e00\u65b9\u3001Serializable \u306a\u30af\u30e9\u30b9\u304c\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u308b\u969b\u306b\u306f\u3001\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6a5f\u80fd\u306b\u3088\u308a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u76f4\u63a5\u751f\u6210\u3055\u308c\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u8fc2\u56de\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u3053\u3068\u306f\u3001ExtendedOdd \u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30c7\u30d0\u30c3\u30b0\u30ed\u30b0\u51fa\u529b\u30b3\u30fc\u30c9\u3092\u4ed5\u8fbc\u3080\u3053\u3068\u306b\u3088\u308a\u5bb9\u6613\u306b\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n[^2]: \u305f\u3060\u3057\u3001\u3053\u308c\u306f\u3042\u307e\u308a\u3088\u3044\u89e3\u6c7a\u7b56\u3068\u8a00\u3048\u307e\u305b\u3093\u3002Odd \u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u3001\u3042\u308b\u3044\u306f\u3053\u308c\u304b\u3089\u7d99\u627f\u3059\u308b\u4ed6\u306e\u5168\u3066\u306e\u30af\u30e9\u30b9\u306b\u5f71\u97ff\u304c\u53ca\u3076\u305f\u3081\u3067\u3059\u3002\u8a73\u7d30\u306a\u8b70\u8ad6\u306f [Amazon:\u300eEffective Java \u7b2c2\u7248\u300f](http://www.amazon.co.jp/EFFECTIVE-JAVA-%E7%AC%AC2%E7%89%88-Java-Series/dp/4621066056)\uff0d\u300c\u9805\u76ee74: Serializable \u3092\u6ce8\u610f\u3057\u3066\u5b9f\u88c5\u3059\u308b\u300d\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n"}