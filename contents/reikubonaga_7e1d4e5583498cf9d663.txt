{"context": " More than 1 year has passed since last update.\ncsv\u3092\u5b9a\u671f\u7684\u306b\u8aad\u307f\u8fbc\u3093\u3067spreadsheet\u3092\u66f4\u65b0\u3059\u308b\n\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u306e\u300c\u73fe\u5728\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30c8\u30ea\u30ac\u30fc\u300d\u304b\u3089\u5b9a\u671f\u5b9f\u884c\u3059\u308b\u6642\u9593\u3092\u8a2d\u5b9a\u3059\u308b\n\nhttp://collaborative-tools-project.blogspot.jp/2012/05/getting-csv-data-into-google.html\n\nfunction encode_utf8( s ){\n  //This is the code that \"I think\" turns the UTF16 LE into standard stuff....\n  return unescape( encodeURIComponent( s ) );\n}\n\nfunction get_csv() { \n  var headers = {\n    \"Authorization\" : \"Basic \" + Utilities.base64Encode(\"user\" + ':' + \"pass\")\n  };\n\n  var params = {\n    \"method\":\"GET\",\n    \"headers\":headers\n  };\n\n  var url = 'csv url'; // Change this to the URL of your file\n  var response = UrlFetchApp.fetch(url, params);\n  Logger.log( \"RESPONSE \" + response.getResponseCode()); \n  var data = encode_utf8(response.getContentText(\"UTF-8\").toString());  \n  Logger.log( \"RESPONSE \" + response.getContentText(\"UTF-8\").toString());  \n  var data = response.getContentText(\"UTF-8\").toString();\n  return data //as text  \n}\n\n\nfunction importFromCSV() {\n  // This is the function to which you attach a trigger to run every hour  \n  var rawData = get_csv(); // gets the data, makes it nice...\n\n  var csvData = CSVToArray(rawData, \",\"); // turn into an array\n  Logger.log(\"CSV ITEMS \" + csvData.length);\n\n  //Write data to first sheet in this spreadsheet\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheet = ss.getActiveSheet();\n  //Logger.log(sheet);\n\n  ////// From: https://developers.google.com/apps-script/articles/docslist_tutorial\n\n  // I think this will write data from the 0th cell. It actually needs a line to select ALL the data and delete it,\n  // in case there is less data than the previous import.\n\n  for (var i = 0; i < csvData.length; i++) {\n    sheet.getRange(i+1, 1, 1, csvData[i].length).setValues(new Array(csvData[i]));\n     //this might be where you would look at the data and maybe...\n    // cell.offset(i,i+2).setBackgroundColor(\"green\"); \n    //Logger.log( \"i:\" + i + \" \" + csvData[i] );\n  }\n}\n\n    function CSVToArray( strData, strDelimiter ){\n        // Check to see if the delimiter is defined. If not,\n        // then default to comma.\n        strDelimiter = (strDelimiter || \",\");\n        // Create a regular expression to parse the CSV values.\n        var objPattern = new RegExp(\n            (\n                // Delimiters.\n                \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n                // Quoted fields.\n                \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n                // Standard fields.\n                \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n            ),\n            \"gi\"\n            );\n        // Create an array to hold our data. Give the array\n        // a default empty first row.\n        var arrData = [[]];\n        // Create an array to hold our individual pattern\n        // matching groups.\n        var arrMatches = null;\n        // Keep looping over the regular expression matches\n        // until we can no longer find a match.\n        while (arrMatches = objPattern.exec( strData )){\n            // Get the delimiter that was found.\n            var strMatchedDelimiter = arrMatches[ 1 ];\n            // Check to see if the given delimiter has a length\n            // (is not the start of string) and if it matches\n            // field delimiter. If id does not, then we know\n            // that this delimiter is a row delimiter.\n            if (\n                strMatchedDelimiter.length &&\n                (strMatchedDelimiter != strDelimiter)\n                ){\n                // Since we have reached a new row of data,\n                // add an empty row to our data array.\n                arrData.push( [] );\n            }\n            // Now that we have our delimiter out of the way,\n            // let's check to see which kind of value we\n            // captured (quoted or unquoted).\n            if (arrMatches[ 2 ]){\n                // We found a quoted value. When we capture\n                // this value, unescape any double quotes.\n                var strMatchedValue = arrMatches[ 2 ].replace(\n                    new RegExp( \"\\\"\\\"\", \"g\" ),\n                    \"\\\"\"\n                    );\n            } else {\n                // We found a non-quoted value.\n                var strMatchedValue = arrMatches[ 3 ];\n            }\n          if (!arrMatches[3]) {\n            strMatchedValue = \"\";\n          }\n            // Now that we have our value string, let's add\n            // it to the data array.\n            arrData[ arrData.length - 1 ].push( strMatchedValue );\n        }\n        // Return the parsed data.\n        return( arrData );\n    }\n\n1. csv\u3092\u5b9a\u671f\u7684\u306b\u8aad\u307f\u8fbc\u3093\u3067spreadsheet\u3092\u66f4\u65b0\u3059\u308b\n2. \u0010\u300c\u30ea\u30bd\u30fc\u30b9\u300d\u306e\u300c\u73fe\u5728\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30c8\u30ea\u30ac\u30fc\u300d\u304b\u3089\u5b9a\u671f\u5b9f\u884c\u3059\u308b\u6642\u9593\u3092\u8a2d\u5b9a\u3059\u308b\n\n\n```\nhttp://collaborative-tools-project.blogspot.jp/2012/05/getting-csv-data-into-google.html\n\nfunction encode_utf8( s ){\n  //This is the code that \"I think\" turns the UTF16 LE into standard stuff....\n  return unescape( encodeURIComponent( s ) );\n}\n\nfunction get_csv() { \n  var headers = {\n    \"Authorization\" : \"Basic \" + Utilities.base64Encode(\"user\" + ':' + \"pass\")\n  };\n\n  var params = {\n    \"method\":\"GET\",\n    \"headers\":headers\n  };\n\n  var url = 'csv url'; // Change this to the URL of your file\n  var response = UrlFetchApp.fetch(url, params);\n  Logger.log( \"RESPONSE \" + response.getResponseCode()); \n  var data = encode_utf8(response.getContentText(\"UTF-8\").toString());  \n  Logger.log( \"RESPONSE \" + response.getContentText(\"UTF-8\").toString());  \n  var data = response.getContentText(\"UTF-8\").toString();\n  return data //as text  \n}\n\n\nfunction importFromCSV() {\n  // This is the function to which you attach a trigger to run every hour  \n  var rawData = get_csv(); // gets the data, makes it nice...\n  \n  var csvData = CSVToArray(rawData, \",\"); // turn into an array\n  Logger.log(\"CSV ITEMS \" + csvData.length);\n  \n  //Write data to first sheet in this spreadsheet\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n  var sheet = ss.getActiveSheet();\n  //Logger.log(sheet);\n  \n  ////// From: https://developers.google.com/apps-script/articles/docslist_tutorial\n  \n  // I think this will write data from the 0th cell. It actually needs a line to select ALL the data and delete it,\n  // in case there is less data than the previous import.\n  \n  for (var i = 0; i < csvData.length; i++) {\n    sheet.getRange(i+1, 1, 1, csvData[i].length).setValues(new Array(csvData[i]));\n     //this might be where you would look at the data and maybe...\n    // cell.offset(i,i+2).setBackgroundColor(\"green\"); \n    //Logger.log( \"i:\" + i + \" \" + csvData[i] );\n  }\n}\n\n    function CSVToArray( strData, strDelimiter ){\n        // Check to see if the delimiter is defined. If not,\n        // then default to comma.\n        strDelimiter = (strDelimiter || \",\");\n        // Create a regular expression to parse the CSV values.\n        var objPattern = new RegExp(\n            (\n                // Delimiters.\n                \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n                // Quoted fields.\n                \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n                // Standard fields.\n                \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n            ),\n            \"gi\"\n            );\n        // Create an array to hold our data. Give the array\n        // a default empty first row.\n        var arrData = [[]];\n        // Create an array to hold our individual pattern\n        // matching groups.\n        var arrMatches = null;\n        // Keep looping over the regular expression matches\n        // until we can no longer find a match.\n        while (arrMatches = objPattern.exec( strData )){\n            // Get the delimiter that was found.\n            var strMatchedDelimiter = arrMatches[ 1 ];\n            // Check to see if the given delimiter has a length\n            // (is not the start of string) and if it matches\n            // field delimiter. If id does not, then we know\n            // that this delimiter is a row delimiter.\n            if (\n                strMatchedDelimiter.length &&\n                (strMatchedDelimiter != strDelimiter)\n                ){\n                // Since we have reached a new row of data,\n                // add an empty row to our data array.\n                arrData.push( [] );\n            }\n            // Now that we have our delimiter out of the way,\n            // let's check to see which kind of value we\n            // captured (quoted or unquoted).\n            if (arrMatches[ 2 ]){\n                // We found a quoted value. When we capture\n                // this value, unescape any double quotes.\n                var strMatchedValue = arrMatches[ 2 ].replace(\n                    new RegExp( \"\\\"\\\"\", \"g\" ),\n                    \"\\\"\"\n                    );\n            } else {\n                // We found a non-quoted value.\n                var strMatchedValue = arrMatches[ 3 ];\n            }\n          if (!arrMatches[3]) {\n            strMatchedValue = \"\";\n          }\n            // Now that we have our value string, let's add\n            // it to the data array.\n            arrData[ arrData.length - 1 ].push( strMatchedValue );\n        }\n        // Return the parsed data.\n        return( arrData );\n    }\n```\n", "tags": ["GoogleAppsScript"]}