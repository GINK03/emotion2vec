{"context": " More than 1 year has passed since last update.\n\nInstall rbenv\n\nItems to install\n\nrbenv 0.4.0-129-g7e0e85b\nruby-build 20141210\nruby 1.9.3-p551\nruby 2.1.5\nrbenv-rehash\nbundler\n\n\nInstall dependencies\n$ yum install --enablerepo=epel make gcc zlib-devel openssl-devel readline-devel ncurses-devel gdbm-devel db4-devel libffi-devel tk-devel libyaml-devel\n\n\nInstall rbenv and ruby-build\n$ su -\n$ git clone git://github.com/sstephenson/rbenv.git /usr/local/rbenv\n$ mkdir /usr/local/rbenv/shims /usr/local/rbenv/versions\n$ groupadd rbenv\n$ chgrp -R rbenv /usr/local/rbenv\n$ chmod -R g+rwxXs /usr/local/rbenv\n$ git clone git://github.com/sstephenson/ruby-build.git /usr/local/rbenv/plugins/ruby-build\n$ cd /usr/local/rbenv/plugins/ruby-build\n$ ./install.sh\n$ cat >> /etc/profile.d/rbenv.sh << EOF\nexport RBENV_ROOT=\"/usr/local/rbenv\"\nexport PATH=\"/usr/local/rbenv/bin:$PATH\"\neval \"$(rbenv init -)\"\n\nEOF\n$ source /etc/profile.d/rbenv.sh\n$ rbenv -v\nrbenv 0.4.0-129-g7e0e85b\n$ ruby-build --version\nruby-build 20141210\n\n\nInstall Ruby\n$ rbenv install --list\n$ rbenv install 1.9.3-p551 && rbenv install 2.1.5\n$ rbenv versions\n* system (set by /usr/local/rbenv/version)\n  1.9.3-p551\n  2.1.5\n\n\nInstall rbenv-rehash and bundler\n$ rbenv global 1.9.3-p551\n$ gem --version\n1.8.23.2\n$ gem update --system\n$ gem --version\n2.4.5\n$ gem install rbenv-rehash --no-rdoc --no-ri\n$ gem install bundler --no-rdoc --no-ri\n$ gem install rails --no-rdoc --no-ri\n$ rbenv rehash\n\n$ rbenv global 2.1.5\n$ gem --version\n2.2.2\n$ gem update --system\n$ gem --version\n2.4.5\n$ gem install rbenv-rehash --no-rdoc --no-ri\n$ gem install bundler --no-rdoc --no-ri\n$ gem install rails --no-rdoc --no-ri\n$ rbenv rehash\n\n\n\nCreate a mysql database and user\n$ mysql -u root -p\nmysql> create database redmine default character set utf8;\nmysql> grant all on redmine.* to redmine@localhost identified by '********';\nmysql> flush privileges;\nmysql> exit;\n\n\nInstall GitLab\n\nItems to install\n\ngit 1.9.4\ngitlab 6.8\ngitlab-shell 1.9.8\n\n\nInstall git\n$ yum install perl-ExtUtils-MakeMaker\n$ cd ~/download && wget https://www.kernel.org/pub/software/scm/git/git-1.9.4.tar.gz && tar zxvf git-1.9.4.tar.gz && cd git-1.9.4\n$ ./configure --prefix=/usr/local && make prefix=/usr/local all && make prefix=/usr/local install\n$ git version\ngit version 1.9.4\n\n\nInstall modules\n$ sudo gem install charlock_holmes --version '0.6.9'\n\n\nCreate git user\n$ useradd -c 'GitLab' -s /bin/bash git\n$ su - git\n$ cd /home/git\n$ mkdir .ssh\n$ touch .ssh/authorized_keys\n$ chmod 600 .ssh/authorized_keys\n$ chmod 700 .ssh\n$ git config --global user.name  \"GitLab\"\n$ git config --global user.email \"gitlab@example.com\"\n\n\nInstall gitlab-shell\n$ cd /home/git\n$ git clone https://github.com/gitlabhq/gitlab-shell.git\n$ cd gitlab-shell\n$ git checkout v1.9.8\n$ git checkout -b v1.9.8\n$ cp /home/git/gitlab-shell/config.yml.example /home/git/gitlab-shell/config.yml\n$ vi /home/git/gitlab-shell/config.yml\n$ diff /home/git/gitlab-shell/config.yml{.example,}\n5c5\n< gitlab_url: \"http://localhost/\"\n---\n> gitlab_url: \"https://git.example.com/\"\n12c12\n<   self_signed_cert: false\n---\n>   self_signed_cert: true\n$ ./bin/install\n$ exit\n\n\nInstall gitlab\n$ su - git\n$ git clone https://github.com/gitlabhq/gitlabhq.git gitlab\n$ cd gitlab\n$ git checkout 6-8-stable\n$ cp config/gitlab.yml.example config/gitlab.yml\n$ vi config/gitlab.yml\n$ diff config/gitlab.yml{.example,}\n18c18\n<     host: localhost\n---\n>     host: git.example.com\n38c38\n<     email_from: gitlab@localhost\n---\n>     email_from: gitlab@example.com\n41c41\n<     support_email: support@localhost\n---\n>     support_email: gitlab@example.com\n227c227\n<     bin_path: /usr/bin/git\n---\n>     bin_path: /usr/local/bin/git\n$ cp config/unicorn.rb.example config/unicorn.rb\n$ mkdir /home/git/gitlab-satellites\n$ chmod 750 /home/git/gitlab-satellites\n\n\nInstall bundle modules\n$ cd /home/git/gitlab\n$ bundle install --deployment --without development test postgres\n\n\nConfigure mysql database\n$ mysql -u root -p\nmysql> create user 'gitlab'@'localhost' identified by '*********';\nmysql> create database if not exists `gitlabhq_production` default character set `utf8` collate `utf8_unicode_ci`;\nmysql> grant all on `gitlabhq_production`.* to 'gitlab'@'localhost';\nmysql> exit;\n$ cd /home/git/gitlab\n$ cp config/database.yml.mysql config/database.yml\n$ vi config/database.yml\n$ diff config/database.yml{.mysql,}\n10,11c10,11\n<   username: git\n<   password: \"secure password\"\n---\n>   username: gitlab\n>   password: \"*********\"\n24,25c24,25\n<   username: root\n<   password: \"secure password\"\n---\n>   username: gitlab\n>   password: \"*********\"\n37,38c37,38\n<   username: root\n<   password:\n---\n>   username: gitlab\n>   password: \"*********\"\n\n\nInitialize database\n$ bundle exec rake gitlab:setup RAILS_ENV=production\n\n\nCreate self certificates\n$ cd /etc/pki/tls/certs/\n$ sed -i 's/365/3650/g' Makefile\n$ make example.com.crt\numask 77 ; \\\n  /usr/bin/openssl genrsa -aes128 2048 > example.com.key\nGenerating RSA private key, 2048 bit long modulus\n.........+++\n...................................+++\ne is 65537 (0x10001)\nEnter pass phrase:\nVerifying - Enter pass phrase:\numask 77 ; \\\n  /usr/bin/openssl req  -new -key example.com.key -x509 -days 3650 -out example.com.crt -set_serial 0\nEnter pass phrase for example.com.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [XX]:JP\nState or Province Name (full name) []:Kanagawa\nLocality Name (eg, city) [Default City]:Yokohama\nOrganization Name (eg, company) [Default Company Ltd]:Example Company\nOrganizational Unit Name (eg, section) []:\nCommon Name (eg, your name or your server hostname) []:*.example.com\nEmail Address []:admin@example.com\n\n$ openssl rsa -in example.com.key -out example.com.key\n\n\nInstall initScript\n$ exit\n$ cp /home/git/gitlab/lib/support/init.d/gitlab /etc/init.d/gitlab\n$ cp /home/git/gitlab/lib/support/init.d/gitlab.default.example /etc/default/gitlab\n$ chmod +x /etc/init.d/gitlab\n\n\nMake gitlab start after httpd\n$ vi /etc/init.d/gitlab\n$ diff /home/git/gitlab/lib/support/init.d/gitlab /etc/init.d/gitlab\n6a7,8\n> # chkconfig: - 86 15\n>\n$ chkconfig --add gitlab\n$ chkconfig gitlab on\n$ ls -l /etc/rc.d/rc3.d/ | grep \"httpd\\|gitlab\"\nlrwxrwxrwx  1 root root 15 Apr 21 11:57 S85httpd -> ../init.d/httpd\nlrwxrwxrwx  1 root root 16 May 19 11:12 S86gitlab -> ../init.d/gitlab\n\n\nConfigure logrotation\n$ cp /home/git/gitlab/lib/support/logrotate/gitlab /etc/logrotate.d/gitlab\n\n\nBuild asset\n$ cd /home/git/gitlab\n$ bundle exec rake assets:precompile RAILS_ENV=production\n\n\nCheck status\n$ cd /home/git/gitlab\n$ bundle exec rake gitlab:check RAILS_ENV=production\n\n\nConfigure Apache\n$ wget -O /etc/httpd/conf.d/vhost_git.example.com.conf https://gitlab.com/gitlab-org/gitlab-recipes/raw/master/web-server/apache/gitlab-ssl.conf\n$ vi /etc/httpd/conf.d/vhost_git.example.com.conf\n\n#This configuration has been tested on GitLab 6.0.0 and GitLab 6.0.1\n#Note this config assumes unicorn is listening on default port 8080.\n#Module dependencies\n#  mod_rewrite\n#  mod_ssl\n#  mod_proxy\n#  mod_proxy_http\n#  mod_headers\n\n# This section is only needed if you want to redirect http traffic to https.\n# You can live without it but clients will have to type in https:// to reach gitlab.\n<VirtualHost *:80>\n  ServerName git.example.com\n  ServerSignature Off\n\n  RewriteEngine on\n  RewriteCond %{HTTPS} !=on\n  RewriteRule .* https://%{SERVER_NAME}%{REQUEST_URI} [NE,R,L]\n</VirtualHost>\n\n<VirtualHost *:443>\n  SSLEngine on\n  #strong encryption ciphers only\n  #see ciphers(1) http://www.openssl.org/docs/apps/ciphers.html\n  SSLCipherSuite SSLv3:TLSv1:+HIGH:!SSLv2:!MD5:!MEDIUM:!LOW:!EXP:!ADH:!eNULL:!aNULL\n  SSLCertificateFile    /etc/pki/tls/certs/example.com.crt\n  SSLCertificateKeyFile /etc/pki/tls/certs/example.com.key\n  #SSLCACertificateFile /etc/pki/tls/certs/ca-bundle.crt\n\n  ServerName git.example.com\n  ServerSignature Off\n\n  ProxyPreserveHost On\n\n  <Location />\n    Order deny,allow\n    Allow from all\n\n    ProxyPassReverse http://127.0.0.1:8080\n    ProxyPassReverse http://git.example.com/\n  </Location>\n\n  #apache equivalent of nginx try files\n  # http://serverfault.com/questions/290784/what-is-apaches-equivalent-of-nginxs-try-files\n  # http://stackoverflow.com/questions/10954516/apache2-proxypass-for-rails-app-gitlab\n  RewriteEngine on\n  RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-f\n  RewriteRule .* http://127.0.0.1:8080%{REQUEST_URI} [P,QSA]\n  RequestHeader set X_FORWARDED_PROTO 'https'\n\n  # needed for downloading attachments\n  DocumentRoot /home/git/gitlab/public\n\n  #Set up apache error documents, if back end goes down (i.e. 503 error) then a maintenance/deploy page is thrown up.\n  ErrorDocument 404 /404.html\n  ErrorDocument 422 /422.html\n  ErrorDocument 500 /500.html\n  ErrorDocument 503 /deploy.html\n\n  LogFormat \"%{X-Forwarded-For}i %l %u %t \\\"%r\\\" %>s %b\" common_forwarded\n  ErrorLog  /var/log/httpd/git.example.com-error.log\n  CustomLog /var/log/httpd/git.example.com-forwarded.log common_forwarded\n  CustomLog /var/log/httpd/git.example.com-access.log combined env=!dontlog\n  CustomLog /var/log/httpd/git.example.com.log combined\n\n</VirtualHost>\n\n\n\nInstall Redmine\n\nInstall Redmine 2.5.1 on Ruby 2.1.5\n$ wget http://www.redmine.org/releases/redmine-2.5.1.tar.gz\n$ tar zxf redmine-2.5.1.tar.gz\n$ mv redmine-2.5.1 /var/lib/redmine\n$ cat >> /var/lib/redmine/config/database.yml<< EOF\nproduction:\n  adapter: mysql2\n  database: db_redmine\n  host: localhost\n  username: user_redmine\n  password: ********\n  encoding: utf8\n\nEOF\n\n$ cat >> /var/lib/redmine/config/configuration.yml<< EOF\nproduction:\n  email_delivery:\n    delivery_method: :smtp\n    smtp_settings:\n      address: \"localhost\"\n      port: 25\n      domain: 'example.com'\n\n  rmagick_font_path: /usr/share/fonts/ipa-pgothic/ipagp.ttf\n\nEOF\n\n$ rbenv global 2.1.5\n$ cd /var/lib/redmine/\n$ bundle install --without development test\n$ bundle exec rake generate_secret_token\n$ RAILS_ENV=production bundle exec rake db:migrate\n$ gem install passenger --no-rdoc --no-ri\n$ passenger-install-apache2-module\n$ cat >> /etc/httpd/conf.d/passenger.conf << EOF\n\nLoadModule passenger_module /usr/local/rbenv/versions/2.0.0-p481/lib/ruby/gems/2.0.0/gems/passenger-4.0.42/buildout/apache2/mod_passenger.so\n<IfModule mod_passenger.c>\n  PassengerRoot /usr/local/rbenv/versions/2.0.0-p481/lib/ruby/gems/2.0.0/gems/passenger-4.0.42\n  PassengerDefaultRuby /usr/local/rbenv/versions/2.0.0-p481/bin/ruby\n</IfModule>\n\n\nHeader always unset \"X-Powered-By\"\nHeader always unset \"X-Rack-Cache\"\nHeader always unset \"X-Content-Digest\"\nHeader always unset \"X-Runtime\"\n\nPassengerMaxPoolSize 20\nPassengerMaxInstancesPerApp 4\nPassengerPoolIdleTime 3600\nPassengerHighPerformance on\nPassengerStatThrottleRate 10\nPassengerSpawnMethod smart\nRailsAppSpawnerIdleTime 86400\nPassengerMaxPreloaderIdleTime 0\n\nRackBaseURI /redmine\n\n#<VirtualHost *:80>\n#   ServerName redmine.example.com\n#   # !!! Be sure to point DocumentRoot to 'public'!\n#   DocumentRoot /var/lib/redmine/public\n#   <Directory /var/lib/redmine/public>\n#       # This relaxes Apache security settings.\n#       AllowOverride all\n#       # MultiViews must be turned off.\n#       Options -MultiViews\n#       # Uncomment this if you're on Apache >= 2.4:\n#       #Require all granted\n#   </Directory>\n#</VirtualHost>\n\nEOF\n\n$ cat >> /etc/httpd/conf.d/vhost_redmine.example.com.conf << EOF\n<VirtualHost *:80>\n        ServerName redmine.example.com\n        ServerSignature Off\n\n        RewriteEngine on\n        RewriteCond %{HTTPS} !=on\n        RewriteRule .* https://%{SERVER_NAME}%{REQUEST_URI} [NE,R,L]\n</VirtualHost>\n\n<VirtualHost *:443>\n        ServerName redmine.example.com\n        ServerSignature Off\n\n        SSLEngine on\n        SSLCertificateFile    /etc/ssl/certs/example.com.crt\n        SSLCertificateKeyFile /etc/ssl/certs/example.com.key\n\n        DocumentRoot /var/lib/redmine/public\n\n        <Directory /var/lib/redmine/public>\n                AllowOverride all\n                Options -MultiViews\n                #Require all granted\n        </Directory>\n\n        <IfModule mod_passenger.c>\n                PassengerUser www-data\n                PassengerGroup apache\n        </IfModule>\n\n        LogFormat \"%{X-Forwarded-For}i %l %u %t \\\"%r\\\" %>s %b\" common_forwarded\n        ErrorLog  /var/log/httpd/redmine.example.com-error.log\n        CustomLog /var/log/httpd/redmine.example.com-forwarded.log common_forwarded\n        CustomLog /var/log/httpd/redmine.example.com-access.log combined env=!dontlog\n        CustomLog /var/log/httpd/redmine.example.com.log combined\n</VirtualHost>\n\nEOF\n\n$ ln -s /var/lib/redmine/public /var/www/html/redmine.example.com\n$ chown -R www-data:apache /var/lib/redmine\n$ service httpd restart\n\n\nIntegrate GitLab with Redmine\n\nJoin apache user (www-data) in git group\n$ groups www-data\nwww-data : apache\n$ usermod -a -G git www-data\n$ groups www-data\nwww-data : apache git\n\n\nMake git home directory accessible\n$ chmod g+rx /home/git/\n\n\nCreate Redmine project and new repository\n\n\n# Install rbenv\n\n## Items to install\n- rbenv 0.4.0-129-g7e0e85b\n- ruby-build 20141210\n- ruby 1.9.3-p551\n- ruby 2.1.5\n- rbenv-rehash\n- bundler\n\n## Install dependencies\n\n```bash\n$ yum install --enablerepo=epel make gcc zlib-devel openssl-devel readline-devel ncurses-devel gdbm-devel db4-devel libffi-devel tk-devel libyaml-devel\n```\n\n## Install rbenv and ruby-build\n\n```bash\n$ su -\n$ git clone git://github.com/sstephenson/rbenv.git /usr/local/rbenv\n$ mkdir /usr/local/rbenv/shims /usr/local/rbenv/versions\n$ groupadd rbenv\n$ chgrp -R rbenv /usr/local/rbenv\n$ chmod -R g+rwxXs /usr/local/rbenv\n$ git clone git://github.com/sstephenson/ruby-build.git /usr/local/rbenv/plugins/ruby-build\n$ cd /usr/local/rbenv/plugins/ruby-build\n$ ./install.sh\n$ cat >> /etc/profile.d/rbenv.sh << EOF\nexport RBENV_ROOT=\"/usr/local/rbenv\"\nexport PATH=\"/usr/local/rbenv/bin:$PATH\"\neval \"$(rbenv init -)\"\n\nEOF\n$ source /etc/profile.d/rbenv.sh\n$ rbenv -v\nrbenv 0.4.0-129-g7e0e85b\n$ ruby-build --version\nruby-build 20141210\n```\n\n## Install Ruby\n\n```bash\n$ rbenv install --list\n$ rbenv install 1.9.3-p551 && rbenv install 2.1.5\n$ rbenv versions\n* system (set by /usr/local/rbenv/version)\n  1.9.3-p551\n  2.1.5\n```\n\n## Install rbenv-rehash and bundler\n\n```bash\n$ rbenv global 1.9.3-p551\n$ gem --version\n1.8.23.2\n$ gem update --system\n$ gem --version\n2.4.5\n$ gem install rbenv-rehash --no-rdoc --no-ri\n$ gem install bundler --no-rdoc --no-ri\n$ gem install rails --no-rdoc --no-ri\n$ rbenv rehash\n\n$ rbenv global 2.1.5\n$ gem --version\n2.2.2\n$ gem update --system\n$ gem --version\n2.4.5\n$ gem install rbenv-rehash --no-rdoc --no-ri\n$ gem install bundler --no-rdoc --no-ri\n$ gem install rails --no-rdoc --no-ri\n$ rbenv rehash\n\n```\n\n## Create a mysql database and user\n\n```bash\n$ mysql -u root -p\nmysql> create database redmine default character set utf8;\nmysql> grant all on redmine.* to redmine@localhost identified by '********';\nmysql> flush privileges;\nmysql> exit;\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Install GitLab\n\n\n## Items to install\n- git 1.9.4\n- gitlab 6.8\n- gitlab-shell 1.9.8\n\n\n## Install git\n\n```bash\n$ yum install perl-ExtUtils-MakeMaker\n$ cd ~/download && wget https://www.kernel.org/pub/software/scm/git/git-1.9.4.tar.gz && tar zxvf git-1.9.4.tar.gz && cd git-1.9.4\n$ ./configure --prefix=/usr/local && make prefix=/usr/local all && make prefix=/usr/local install\n$ git version\ngit version 1.9.4\n```\n\n## Install modules\n\n```bash\n$ sudo gem install charlock_holmes --version '0.6.9'\n```\n\n## Create git user\n\n```bash\n$ useradd -c 'GitLab' -s /bin/bash git\n$ su - git\n$ cd /home/git\n$ mkdir .ssh\n$ touch .ssh/authorized_keys\n$ chmod 600 .ssh/authorized_keys\n$ chmod 700 .ssh\n$ git config --global user.name  \"GitLab\"\n$ git config --global user.email \"gitlab@example.com\"\n```\n\n## Install gitlab-shell\n\n```bash\n$ cd /home/git\n$ git clone https://github.com/gitlabhq/gitlab-shell.git\n$ cd gitlab-shell\n$ git checkout v1.9.8\n$ git checkout -b v1.9.8\n$ cp /home/git/gitlab-shell/config.yml.example /home/git/gitlab-shell/config.yml\n$ vi /home/git/gitlab-shell/config.yml\n$ diff /home/git/gitlab-shell/config.yml{.example,}\n5c5\n< gitlab_url: \"http://localhost/\"\n---\n> gitlab_url: \"https://git.example.com/\"\n12c12\n<   self_signed_cert: false\n---\n>   self_signed_cert: true\n$ ./bin/install\n$ exit\n```\n\n## Install gitlab\n\n```bash\n$ su - git\n$ git clone https://github.com/gitlabhq/gitlabhq.git gitlab\n$ cd gitlab\n$ git checkout 6-8-stable\n$ cp config/gitlab.yml.example config/gitlab.yml\n$ vi config/gitlab.yml\n$ diff config/gitlab.yml{.example,}\n18c18\n<     host: localhost\n---\n>     host: git.example.com\n38c38\n<     email_from: gitlab@localhost\n---\n>     email_from: gitlab@example.com\n41c41\n<     support_email: support@localhost\n---\n>     support_email: gitlab@example.com\n227c227\n<     bin_path: /usr/bin/git\n---\n>     bin_path: /usr/local/bin/git\n$ cp config/unicorn.rb.example config/unicorn.rb\n$ mkdir /home/git/gitlab-satellites\n$ chmod 750 /home/git/gitlab-satellites\n```\n\n\n## Install bundle modules\n\n```bash\n$ cd /home/git/gitlab\n$ bundle install --deployment --without development test postgres\n```\n\n## Configure mysql database\n\n```bash\n$ mysql -u root -p\nmysql> create user 'gitlab'@'localhost' identified by '*********';\nmysql> create database if not exists `gitlabhq_production` default character set `utf8` collate `utf8_unicode_ci`;\nmysql> grant all on `gitlabhq_production`.* to 'gitlab'@'localhost';\nmysql> exit;\n$ cd /home/git/gitlab\n$ cp config/database.yml.mysql config/database.yml\n$ vi config/database.yml\n$ diff config/database.yml{.mysql,}\n10,11c10,11\n<   username: git\n<   password: \"secure password\"\n---\n>   username: gitlab\n>   password: \"*********\"\n24,25c24,25\n<   username: root\n<   password: \"secure password\"\n---\n>   username: gitlab\n>   password: \"*********\"\n37,38c37,38\n<   username: root\n<   password:\n---\n>   username: gitlab\n>   password: \"*********\"\n```\n\n## Initialize database\n\n```bash\n$ bundle exec rake gitlab:setup RAILS_ENV=production\n```\n\n## Create self certificates\n\n```bash\n$ cd /etc/pki/tls/certs/\n$ sed -i 's/365/3650/g' Makefile\n$ make example.com.crt\numask 77 ; \\\n  /usr/bin/openssl genrsa -aes128 2048 > example.com.key\nGenerating RSA private key, 2048 bit long modulus\n.........+++\n...................................+++\ne is 65537 (0x10001)\nEnter pass phrase:\nVerifying - Enter pass phrase:\numask 77 ; \\\n  /usr/bin/openssl req  -new -key example.com.key -x509 -days 3650 -out example.com.crt -set_serial 0\nEnter pass phrase for example.com.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [XX]:JP\nState or Province Name (full name) []:Kanagawa\nLocality Name (eg, city) [Default City]:Yokohama\nOrganization Name (eg, company) [Default Company Ltd]:Example Company\nOrganizational Unit Name (eg, section) []:\nCommon Name (eg, your name or your server hostname) []:*.example.com\nEmail Address []:admin@example.com\n\n$ openssl rsa -in example.com.key -out example.com.key\n```\n\n\n## Install initScript\n\n```bash\n$ exit\n$ cp /home/git/gitlab/lib/support/init.d/gitlab /etc/init.d/gitlab\n$ cp /home/git/gitlab/lib/support/init.d/gitlab.default.example /etc/default/gitlab\n$ chmod +x /etc/init.d/gitlab\n```\n\n## Make gitlab start after httpd\n\n```bash\n$ vi /etc/init.d/gitlab\n$ diff /home/git/gitlab/lib/support/init.d/gitlab /etc/init.d/gitlab\n6a7,8\n> # chkconfig: - 86 15\n>\n$ chkconfig --add gitlab\n$ chkconfig gitlab on\n$ ls -l /etc/rc.d/rc3.d/ | grep \"httpd\\|gitlab\"\nlrwxrwxrwx  1 root root 15 Apr 21 11:57 S85httpd -> ../init.d/httpd\nlrwxrwxrwx  1 root root 16 May 19 11:12 S86gitlab -> ../init.d/gitlab\n```\n\n## Configure logrotation\n\n```bash\n$ cp /home/git/gitlab/lib/support/logrotate/gitlab /etc/logrotate.d/gitlab\n```\n\n## Build asset\n\n```bash\n$ cd /home/git/gitlab\n$ bundle exec rake assets:precompile RAILS_ENV=production\n```\n\n## Check status\n\n```bash\n$ cd /home/git/gitlab\n$ bundle exec rake gitlab:check RAILS_ENV=production\n```\n\n## Configure Apache\n\n```bash\n$ wget -O /etc/httpd/conf.d/vhost_git.example.com.conf https://gitlab.com/gitlab-org/gitlab-recipes/raw/master/web-server/apache/gitlab-ssl.conf\n$ vi /etc/httpd/conf.d/vhost_git.example.com.conf\n\n#This configuration has been tested on GitLab 6.0.0 and GitLab 6.0.1\n#Note this config assumes unicorn is listening on default port 8080.\n#Module dependencies\n#  mod_rewrite\n#  mod_ssl\n#  mod_proxy\n#  mod_proxy_http\n#  mod_headers\n\n# This section is only needed if you want to redirect http traffic to https.\n# You can live without it but clients will have to type in https:// to reach gitlab.\n<VirtualHost *:80>\n  ServerName git.example.com\n  ServerSignature Off\n\n  RewriteEngine on\n  RewriteCond %{HTTPS} !=on\n  RewriteRule .* https://%{SERVER_NAME}%{REQUEST_URI} [NE,R,L]\n</VirtualHost>\n\n<VirtualHost *:443>\n  SSLEngine on\n  #strong encryption ciphers only\n  #see ciphers(1) http://www.openssl.org/docs/apps/ciphers.html\n  SSLCipherSuite SSLv3:TLSv1:+HIGH:!SSLv2:!MD5:!MEDIUM:!LOW:!EXP:!ADH:!eNULL:!aNULL\n  SSLCertificateFile    /etc/pki/tls/certs/example.com.crt\n  SSLCertificateKeyFile /etc/pki/tls/certs/example.com.key\n  #SSLCACertificateFile /etc/pki/tls/certs/ca-bundle.crt\n\n  ServerName git.example.com\n  ServerSignature Off\n\n  ProxyPreserveHost On\n\n  <Location />\n    Order deny,allow\n    Allow from all\n\n    ProxyPassReverse http://127.0.0.1:8080\n    ProxyPassReverse http://git.example.com/\n  </Location>\n\n  #apache equivalent of nginx try files\n  # http://serverfault.com/questions/290784/what-is-apaches-equivalent-of-nginxs-try-files\n  # http://stackoverflow.com/questions/10954516/apache2-proxypass-for-rails-app-gitlab\n  RewriteEngine on\n  RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-f\n  RewriteRule .* http://127.0.0.1:8080%{REQUEST_URI} [P,QSA]\n  RequestHeader set X_FORWARDED_PROTO 'https'\n\n  # needed for downloading attachments\n  DocumentRoot /home/git/gitlab/public\n\n  #Set up apache error documents, if back end goes down (i.e. 503 error) then a maintenance/deploy page is thrown up.\n  ErrorDocument 404 /404.html\n  ErrorDocument 422 /422.html\n  ErrorDocument 500 /500.html\n  ErrorDocument 503 /deploy.html\n\n  LogFormat \"%{X-Forwarded-For}i %l %u %t \\\"%r\\\" %>s %b\" common_forwarded\n  ErrorLog  /var/log/httpd/git.example.com-error.log\n  CustomLog /var/log/httpd/git.example.com-forwarded.log common_forwarded\n  CustomLog /var/log/httpd/git.example.com-access.log combined env=!dontlog\n  CustomLog /var/log/httpd/git.example.com.log combined\n\n</VirtualHost>\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Install Redmine\n\n## Install Redmine 2.5.1 on Ruby 2.1.5\n\n```bash\n$ wget http://www.redmine.org/releases/redmine-2.5.1.tar.gz\n$ tar zxf redmine-2.5.1.tar.gz\n$ mv redmine-2.5.1 /var/lib/redmine\n$ cat >> /var/lib/redmine/config/database.yml<< EOF\nproduction:\n  adapter: mysql2\n  database: db_redmine\n  host: localhost\n  username: user_redmine\n  password: ********\n  encoding: utf8\n\nEOF\n\n$ cat >> /var/lib/redmine/config/configuration.yml<< EOF\nproduction:\n  email_delivery:\n    delivery_method: :smtp\n    smtp_settings:\n      address: \"localhost\"\n      port: 25\n      domain: 'example.com'\n\n  rmagick_font_path: /usr/share/fonts/ipa-pgothic/ipagp.ttf\n\nEOF\n\n$ rbenv global 2.1.5\n$ cd /var/lib/redmine/\n$ bundle install --without development test\n$ bundle exec rake generate_secret_token\n$ RAILS_ENV=production bundle exec rake db:migrate\n$ gem install passenger --no-rdoc --no-ri\n$ passenger-install-apache2-module\n$ cat >> /etc/httpd/conf.d/passenger.conf << EOF\n\nLoadModule passenger_module /usr/local/rbenv/versions/2.0.0-p481/lib/ruby/gems/2.0.0/gems/passenger-4.0.42/buildout/apache2/mod_passenger.so\n<IfModule mod_passenger.c>\n  PassengerRoot /usr/local/rbenv/versions/2.0.0-p481/lib/ruby/gems/2.0.0/gems/passenger-4.0.42\n  PassengerDefaultRuby /usr/local/rbenv/versions/2.0.0-p481/bin/ruby\n</IfModule>\n\n\nHeader always unset \"X-Powered-By\"\nHeader always unset \"X-Rack-Cache\"\nHeader always unset \"X-Content-Digest\"\nHeader always unset \"X-Runtime\"\n\nPassengerMaxPoolSize 20\nPassengerMaxInstancesPerApp 4\nPassengerPoolIdleTime 3600\nPassengerHighPerformance on\nPassengerStatThrottleRate 10\nPassengerSpawnMethod smart\nRailsAppSpawnerIdleTime 86400\nPassengerMaxPreloaderIdleTime 0\n\nRackBaseURI /redmine\n\n#<VirtualHost *:80>\n#\tServerName redmine.example.com\n#\t# !!! Be sure to point DocumentRoot to 'public'!\n#\tDocumentRoot /var/lib/redmine/public\n#\t<Directory /var/lib/redmine/public>\n#\t\t# This relaxes Apache security settings.\n#\t\tAllowOverride all\n#\t\t# MultiViews must be turned off.\n#\t\tOptions -MultiViews\n#\t\t# Uncomment this if you're on Apache >= 2.4:\n#\t\t#Require all granted\n#\t</Directory>\n#</VirtualHost>\n\nEOF\n\n$ cat >> /etc/httpd/conf.d/vhost_redmine.example.com.conf << EOF\n<VirtualHost *:80>\n        ServerName redmine.example.com\n        ServerSignature Off\n\n        RewriteEngine on\n        RewriteCond %{HTTPS} !=on\n        RewriteRule .* https://%{SERVER_NAME}%{REQUEST_URI} [NE,R,L]\n</VirtualHost>\n\n<VirtualHost *:443>\n        ServerName redmine.example.com\n        ServerSignature Off\n\n        SSLEngine on\n        SSLCertificateFile    /etc/ssl/certs/example.com.crt\n        SSLCertificateKeyFile /etc/ssl/certs/example.com.key\n\n        DocumentRoot /var/lib/redmine/public\n\n        <Directory /var/lib/redmine/public>\n                AllowOverride all\n                Options -MultiViews\n                #Require all granted\n        </Directory>\n\n        <IfModule mod_passenger.c>\n                PassengerUser www-data\n                PassengerGroup apache\n        </IfModule>\n\n        LogFormat \"%{X-Forwarded-For}i %l %u %t \\\"%r\\\" %>s %b\" common_forwarded\n        ErrorLog  /var/log/httpd/redmine.example.com-error.log\n        CustomLog /var/log/httpd/redmine.example.com-forwarded.log common_forwarded\n        CustomLog /var/log/httpd/redmine.example.com-access.log combined env=!dontlog\n        CustomLog /var/log/httpd/redmine.example.com.log combined\n</VirtualHost>\n\nEOF\n\n$ ln -s /var/lib/redmine/public /var/www/html/redmine.example.com\n$ chown -R www-data:apache /var/lib/redmine\n$ service httpd restart\n```\n\n\n\n# Integrate GitLab with Redmine\n\n## Join apache user (www-data) in git group\n\n```bash\n$ groups www-data\nwww-data : apache\n$ usermod -a -G git www-data\n$ groups www-data\nwww-data : apache git\n```\n\n## Make git home directory accessible\n\n```bash\n$ chmod g+rx /home/git/\n```\n\n## Create Redmine project and new repository\n\n![redmine0.jpg](https://qiita-image-store.s3.amazonaws.com/0/22048/f712e2c2-37db-652b-2a3c-2d32de68740e.jpeg)\n\n\n![redmine1.jpg](https://qiita-image-store.s3.amazonaws.com/0/22048/2edbe486-f253-be21-113e-f8444a8ad7c7.jpeg)\n", "tags": ["CentOS", "Redmine", "GitLab", "Apache"]}