{"tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"], "context": "\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f\u4e0d\u826f\u30bb\u30af\u30bf\u306e\u96a3\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f100\u5206\u7a0b\u5ea6\u306840\u5206\u30aa\u30fc\u30d0\u30fc\u3002\n\u521d\u3081\u306fDisckSectors#search_pending_sectors\u306e\u4e2d\u306b\u3054\u3061\u3083\u3054\u3061\u3083\u3068\u6761\u4ef6\u6587\u3084\u3089\u6570\u5f0f\u3084\u3089\u66f8\u3044\u3066\u3044\u305f\u306e\u3060\u304c\u3001\u66f8\u3044\u3066\u3044\u3066\u81ea\u5206\u3067\u6df7\u4e71\u3057\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u304b\u306a\u308a\u7d30\u304b\u304f\u30e1\u30bd\u30c3\u30c9\u306b\u5206\u3051\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u7d50\u679csearch_pending_sectors\u306e\u4e2d\u8eab\u81ea\u4f53\u306f\u3059\u3054\u304f\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u3063\u305f\u306e\u3060\u304c\u3001\u305d\u306e\u4ee3\u308f\u308a\u3054\u3061\u3083\u3054\u3061\u3083\u3068\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u3084\u3057\u3059\u304e\u3066\u3057\u307e\u3063\u305f\u3002\n\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9\u305f\u3061\u306f\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3059\u308c\u3070\u3082\u3063\u3068\u6e1b\u3089\u305b\u308b\uff08\u305d\u3082\u305d\u3082\u30e1\u30bd\u30c3\u30c9\u306b\u3059\u308b\u5fc5\u8981\u3059\u3089\u306a\u3044\u3082\u306e\u3082\u3042\u308b\uff09\u306e\u3060\u304c\u3001\u30c6\u30b9\u30c8\u306b\u30d1\u30b9\u3057\u305f\u6642\u70b9\u3067\u76ee\u6a19\u6642\u959360\u5206\u3092\u5927\u5e45\u306b\u8d85\u3048\u3066\u3044\u305f\u305f\u3081\u3001\u3072\u3068\u307e\u305a\u3053\u306e\u307e\u307e\u3068\u3059\u308b\u3053\u3068\u306b\u3057\u305f\u3002\nclass DiscSectors\n  def search_pending_sectors bad_sectors\n    bad_sectors = bad_sectors.split(\",\").map &:to_i\n    neighbor_sectors = bad_sectors.inject([]){|addresses, addr|\n      track, sec = addr.to_i.divmod(100)\n      [\n        addresses,\n        next_address(track, sec),\n        prev_address(track, sec),\n        track < 4 ? next_track_addresses(track, sec) : nil,\n        track > 1 ? prev_track_addresses(track, sec) : nil\n      ].flatten\n    } - bad_sectors\n    pending = neighbor_sectors.compact.group_by{|v| v}.select{|addr, group| group.size > 1}.keys.sort\n    pending.empty? ? [\"none\"] : pending\n  end\n\n  private\n\n  def next_address track, sec\n    track_address(track, sec + 1)\n  end\n\n  def prev_address track, sec\n    track_address(track, sec - 1)\n  end\n\n  def next_track_addresses track, sec\n    [\n      (sec % track).zero? ? track_address(track + 1, next_track_bigger_sector(track, sec) - 1) : nil,\n      track_address(track + 1, next_track_bigger_sector(track, sec)),\n      track_address(track + 1, next_track_bigger_sector(track, sec) + 1)\n    ].compact\n  end\n\n  def prev_track_addresses track, sec\n    address = [\n      track_address(track - 1, prev_track_bigger_sector(track, sec)),\n      (sec % track).zero? ? nil : track_address(track - 1, prev_track_bigger_sector(track, sec) - 1)\n    ].compact\n  end\n\n  def track_address track, sec\n    track_address_group(track) + track_sector(track, sec)\n  end\n\n  def track_address_group track\n    track * 100\n  end\n\n  def next_track_bigger_sector track, sec\n    (track + 1) * (sec / track) + (sec % track)\n  end\n\n  def prev_track_bigger_sector track, sec\n    (track - 1) * (sec / track) + (sec % track)\n  end\n\n  def track_sector track, serial_number\n    serial_number % track_sectors(track)\n  end\n\n  def track_sectors track\n    8 * track\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"400,401,302\", \"300,301,402\" );    \n/*1*/ test( \"105,100,306,414\", \"none\" );    \n/*2*/ test( \"100\", \"none\" );    \n/*3*/ test( \"211\", \"none\" );    \n/*4*/ test( \"317\", \"none\" );    \n/*5*/ test( \"414\", \"none\" );    \n/*6*/ test( \"100,106\", \"107\" );    \n/*7*/ test( \"205,203\", \"102,204\" );    \n/*8*/ test( \"303,305\", \"304\" );    \n/*9*/ test( \"407,409\", \"306,408\" );    \n/*10*/ test( \"104,103\", \"207\" );    \n/*11*/ test( \"204,203\", \"102,305\" );    \n/*12*/ test( \"313,314\", \"209,418\" );    \n/*13*/ test( \"419,418\", \"314\" );    \n/*14*/ test( \"100,102,101\", \"201,203\" );    \n/*15*/ test( \"103,206,309\", \"205,207,308,310\" );    \n/*16*/ test( \"414,310,309\", \"206,311,413\" );    \n/*17*/ test( \"104,102,206,307,102,202\", \"101,103,203,204,205,207,308\" );    \n/*18*/ test( \"104,206,308,409,407\", \"103,205,207,306,307,309,408,410\" );    \n/*19*/ test( \"313,406,213,301,409,422,412,102,428\", \"none\" );    \n/*20*/ test( \"101,300,210,308,423,321,403,408,415\", \"none\" );    \n/*21*/ test( \"304,316,307,207,427,402,107,431,412,418,424\", \"none\" );    \n/*22*/ test( \"205,408,210,215,425,302,311,400,428,412\", \"none\" );    \n/*23*/ test( \"200,311,306,412,403,318,427,105,420\", \"none\" );    \n/*24*/ test( \"105,305,407,408,309,208,427\", \"104,209,306,406\" );    \n/*25*/ test( \"311,304,322,404,429,305,316\", \"203,303,321,405,406,430\" );    \n/*26*/ test( \"210,401,316,425,101\", \"211,315\" );    \n/*27*/ test( \"414,403,404,416,428,421\", \"303,415\" );    \n/*28*/ test( \"207,300,103,211,428\", \"104,206\" );    \n/*29*/ test( \"322,314,310\", \"none\" );    \n/*30*/ test( \"427,200,215\", \"100,323\" );    \n/*31*/ test( \"311,402,424,307,318,430,323,305,201\", \"200,204,301,302,306,322,423,425,431\" );    \n/*32*/ test( \"425,430,408\", \"none\" );    \n/*33*/ test( \"202,320,209,426\", \"319,427\" );    \n/*34*/ test( \"430,209,302,310,304,431,320\", \"202,303,323\" );    \n/*35*/ test( \"208,206,406,424,213,312\", \"207,311,313\" );    \n/*36*/ test( \"420,302,313,413,317,402\", \"301,403\" );    \n/*37*/ test( \"319,306,309,418,204,411\", \"305,307,308,412\" );    \n/*38*/ test( \"400,308,105,430,203,428,209\", \"104,210,429,431\" );    \n/*39*/ test( \"200,305,214\", \"215\" );    \n/*40*/ test( \"214,408,410,407,317,422\", \"306,316,409,423\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'BadSector' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);\\s*$/).to_a\n    disc = DiscSectors.new\n    it input do\n      assert_equal expect, disc.search_pending_sectors(input).join(\",\")\n    end\n  end\nend\n\n\n[\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a](https://yhpg.doorkeeper.jp/)\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f[\u4e0d\u826f\u30bb\u30af\u30bf\u306e\u96a3](http://nabetani.sakura.ne.jp/hena/ord19nebasec/)\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f100\u5206\u7a0b\u5ea6\u306840\u5206\u30aa\u30fc\u30d0\u30fc\u3002\n\n\u521d\u3081\u306f`DisckSectors#search_pending_sectors`\u306e\u4e2d\u306b\u3054\u3061\u3083\u3054\u3061\u3083\u3068\u6761\u4ef6\u6587\u3084\u3089\u6570\u5f0f\u3084\u3089\u66f8\u3044\u3066\u3044\u305f\u306e\u3060\u304c\u3001\u66f8\u3044\u3066\u3044\u3066\u81ea\u5206\u3067\u6df7\u4e71\u3057\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u304b\u306a\u308a\u7d30\u304b\u304f\u30e1\u30bd\u30c3\u30c9\u306b\u5206\u3051\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u7d50\u679c`search_pending_sectors`\u306e\u4e2d\u8eab\u81ea\u4f53\u306f\u3059\u3054\u304f\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u3063\u305f\u306e\u3060\u304c\u3001\u305d\u306e\u4ee3\u308f\u308a\u3054\u3061\u3083\u3054\u3061\u3083\u3068\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u3084\u3057\u3059\u304e\u3066\u3057\u307e\u3063\u305f\u3002\n\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30e1\u30bd\u30c3\u30c9\u305f\u3061\u306f\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3059\u308c\u3070\u3082\u3063\u3068\u6e1b\u3089\u305b\u308b\uff08\u305d\u3082\u305d\u3082\u30e1\u30bd\u30c3\u30c9\u306b\u3059\u308b\u5fc5\u8981\u3059\u3089\u306a\u3044\u3082\u306e\u3082\u3042\u308b\uff09\u306e\u3060\u304c\u3001\u30c6\u30b9\u30c8\u306b\u30d1\u30b9\u3057\u305f\u6642\u70b9\u3067\u76ee\u6a19\u6642\u959360\u5206\u3092\u5927\u5e45\u306b\u8d85\u3048\u3066\u3044\u305f\u305f\u3081\u3001\u3072\u3068\u307e\u305a\u3053\u306e\u307e\u307e\u3068\u3059\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n```ruby\nclass DiscSectors\n  def search_pending_sectors bad_sectors\n    bad_sectors = bad_sectors.split(\",\").map &:to_i\n    neighbor_sectors = bad_sectors.inject([]){|addresses, addr|\n      track, sec = addr.to_i.divmod(100)\n      [\n        addresses,\n        next_address(track, sec),\n        prev_address(track, sec),\n        track < 4 ? next_track_addresses(track, sec) : nil,\n        track > 1 ? prev_track_addresses(track, sec) : nil\n      ].flatten\n    } - bad_sectors\n    pending = neighbor_sectors.compact.group_by{|v| v}.select{|addr, group| group.size > 1}.keys.sort\n    pending.empty? ? [\"none\"] : pending\n  end\n\n  private\n\n  def next_address track, sec\n    track_address(track, sec + 1)\n  end\n\n  def prev_address track, sec\n    track_address(track, sec - 1)\n  end\n\n  def next_track_addresses track, sec\n    [\n      (sec % track).zero? ? track_address(track + 1, next_track_bigger_sector(track, sec) - 1) : nil,\n      track_address(track + 1, next_track_bigger_sector(track, sec)),\n      track_address(track + 1, next_track_bigger_sector(track, sec) + 1)\n    ].compact\n  end\n\n  def prev_track_addresses track, sec\n    address = [\n      track_address(track - 1, prev_track_bigger_sector(track, sec)),\n      (sec % track).zero? ? nil : track_address(track - 1, prev_track_bigger_sector(track, sec) - 1)\n    ].compact\n  end\n\n  def track_address track, sec\n    track_address_group(track) + track_sector(track, sec)\n  end\n\n  def track_address_group track\n    track * 100\n  end\n\n  def next_track_bigger_sector track, sec\n    (track + 1) * (sec / track) + (sec % track)\n  end\n\n  def prev_track_bigger_sector track, sec\n    (track - 1) * (sec / track) + (sec % track)\n  end\n\n  def track_sector track, serial_number\n    serial_number % track_sectors(track)\n  end\n\n  def track_sectors track\n    8 * track\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"400,401,302\", \"300,301,402\" );    \n/*1*/ test( \"105,100,306,414\", \"none\" );    \n/*2*/ test( \"100\", \"none\" );    \n/*3*/ test( \"211\", \"none\" );    \n/*4*/ test( \"317\", \"none\" );    \n/*5*/ test( \"414\", \"none\" );    \n/*6*/ test( \"100,106\", \"107\" );    \n/*7*/ test( \"205,203\", \"102,204\" );    \n/*8*/ test( \"303,305\", \"304\" );    \n/*9*/ test( \"407,409\", \"306,408\" );    \n/*10*/ test( \"104,103\", \"207\" );    \n/*11*/ test( \"204,203\", \"102,305\" );    \n/*12*/ test( \"313,314\", \"209,418\" );    \n/*13*/ test( \"419,418\", \"314\" );    \n/*14*/ test( \"100,102,101\", \"201,203\" );    \n/*15*/ test( \"103,206,309\", \"205,207,308,310\" );    \n/*16*/ test( \"414,310,309\", \"206,311,413\" );    \n/*17*/ test( \"104,102,206,307,102,202\", \"101,103,203,204,205,207,308\" );    \n/*18*/ test( \"104,206,308,409,407\", \"103,205,207,306,307,309,408,410\" );    \n/*19*/ test( \"313,406,213,301,409,422,412,102,428\", \"none\" );    \n/*20*/ test( \"101,300,210,308,423,321,403,408,415\", \"none\" );    \n/*21*/ test( \"304,316,307,207,427,402,107,431,412,418,424\", \"none\" );    \n/*22*/ test( \"205,408,210,215,425,302,311,400,428,412\", \"none\" );    \n/*23*/ test( \"200,311,306,412,403,318,427,105,420\", \"none\" );    \n/*24*/ test( \"105,305,407,408,309,208,427\", \"104,209,306,406\" );    \n/*25*/ test( \"311,304,322,404,429,305,316\", \"203,303,321,405,406,430\" );    \n/*26*/ test( \"210,401,316,425,101\", \"211,315\" );    \n/*27*/ test( \"414,403,404,416,428,421\", \"303,415\" );    \n/*28*/ test( \"207,300,103,211,428\", \"104,206\" );    \n/*29*/ test( \"322,314,310\", \"none\" );    \n/*30*/ test( \"427,200,215\", \"100,323\" );    \n/*31*/ test( \"311,402,424,307,318,430,323,305,201\", \"200,204,301,302,306,322,423,425,431\" );    \n/*32*/ test( \"425,430,408\", \"none\" );    \n/*33*/ test( \"202,320,209,426\", \"319,427\" );    \n/*34*/ test( \"430,209,302,310,304,431,320\", \"202,303,323\" );    \n/*35*/ test( \"208,206,406,424,213,312\", \"207,311,313\" );    \n/*36*/ test( \"420,302,313,413,317,402\", \"301,403\" );    \n/*37*/ test( \"319,306,309,418,204,411\", \"305,307,308,412\" );    \n/*38*/ test( \"400,308,105,430,203,428,209\", \"104,210,429,431\" );    \n/*39*/ test( \"200,305,214\", \"215\" );    \n/*40*/ test( \"214,408,410,407,317,422\", \"306,316,409,423\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'BadSector' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);\\s*$/).to_a\n    disc = DiscSectors.new\n    it input do\n      assert_equal expect, disc.search_pending_sectors(input).join(\",\")\n    end\n  end\nend\n```\n"}