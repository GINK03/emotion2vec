{"tags": ["Haskell", "socket", "Socket\u901a\u4fe1", "chat", "websocket"], "context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306f\u30d6\u30ed\u30b0\u306b\u3082\u8f09\u305b\u3066\u3044\u307e\u3059\nhttp://lotz84.github.io/posts/build-chat-server-on-haskell\n\n\u4eca\u65e5Github\u306eHaskell\u306e\u30c8\u30ec\u30f3\u30c9\u3092\u898b\u3066\u3044\u305f\u3089jaspervdj/websockets\u304c\u4e0a\u304c\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3068\u3044\u3048\u3070Socket.IO\u306a\u6628\u4eca\u3067\u3059\u304cHaskell\u306b\u3082socket-io\u3068\u3044\u3046\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u4f55\u5ea6\u304b\u4f7f\u304a\u3046\u3068\u601d\u3063\u3066\u6311\u6226\u3057\u305f\u3093\u3067\u3059\u304c\u307e\u3060\u307e\u3060\u30ec\u30d9\u30eb\u304c\u4f4e\u304f\u3066\u4f7f\u3044\u65b9\u304c\u308f\u304b\u3089\u305a\u2026\n\u4eca\u65e5\u898b\u3064\u3051\u305fwebsocket\u306f\u4f8b\u306e\u30b3\u30fc\u30c9\u3082\u77ed\u304f\u4f7f\u3044\u3084\u3059\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u52c9\u5f37\u304c\u3066\u3089\u7c21\u5358\u306a\u30c1\u30e3\u30c3\u30c8\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u307e\u305a\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\n$ cabal install websockets warp wai-websockets\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u7d42\u308f\u308b\u307e\u3067\u30b3\u30fc\u30d2\u30fc\u3067\u3082\u98f2\u3093\u3067\u5f85\u3061\u307e\u3057\u3087\u3046\u2615\n\u7d42\u308f\u3063\u305f\u3089\u65e9\u901f\u30a2\u30d7\u30ea\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\uff01\nchat.hs\n{-# LANGUAGE OverloadedStrings #-}\nimport Control.Monad (forever)\nimport Control.Exception (finally)\nimport Data.IORef\nimport Data.Text (Text)\nimport Network.HTTP.Types (hContentType)\nimport Network.HTTP.Types.Status (status200)\nimport Network.Wai (Application, responseFile)\nimport Network.Wai.Handler.WebSockets (websocketsOr)\n\nimport qualified Network.Wai.Handler.Warp as Warp\nimport qualified Network.WebSockets as WS\n\ntype Client = (Int, WS.Connection)\n\nbroadcast :: Text -> [Client] -> IO ()\nbroadcast msg = mapM_ (flip WS.sendTextData msg) . map snd\n\naddClient :: WS.Connection -> [Client] -> ([Client], Int)\naddClient conn cs = let i = if null cs then 0 else maximum (map fst cs) + 1\n                    in  ((i, conn):cs, i)\n\nremoveClient :: Int -> [Client] -> ([Client], ())\nremoveClient i cs = (filter (\\c -> fst c /= i) cs, ())\n\nchat :: IORef [Client] -> WS.ServerApp\nchat ref pending = do\n    conn <- WS.acceptRequest pending\n    identifier <- atomicModifyIORef ref (addClient conn)\n    flip finally (disconnect identifier) $ forever $ do\n        msg <- WS.receiveData conn\n        conns <- readIORef ref\n        broadcast msg conns\n    where\n    disconnect identifier = atomicModifyIORef ref (removeClient identifier)\n\napp :: Application\napp req respond = respond $ responseFile status200 [(hContentType, \"text/html\")] \"index.html\" Nothing\n\nmain :: IO ()\nmain = do\n    let port = 3000\n    let setting = Warp.setPort port Warp.defaultSettings\n    putStrLn $ \"Your server is listening at http://localhost:\" ++ show port ++ \"/\"\n    ref <- newIORef []\n    Warp.runSettings setting $ websocketsOr WS.defaultConnectionOptions (chat ref) app\n\n\u30c9\u30fc\u30f3\uff01\uff01\u3068\u4e00\u6c17\u306b\u5168\u90e8\u306e\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u307e\u3057\u305f\u304c\u5c11\u3057\u305a\u3064\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\uff57\n\u307e\u305amain\u95a2\u6570\u3067\u3059\u304cdo\u4ee5\u964d\u306e\u6700\u521d\u306e\uff13\u884c\u306fWeb\u30b5\u30fc\u30d0\u30fc\u306e\u30dd\u30fc\u30c8\u306a\u3069\u57fa\u672c\u8a2d\u5b9a\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u6b21\u306eref <- newIORef []\u306f\u63a5\u7d9a\u3057\u3066\u304d\u305f\u30e6\u30fc\u30b6\u30fc\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306eIORef\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002ref\u306e\u578b\u306fIORef [Client]\u3067\u3059\u3002Client\u306f\u4e0a\u306e\u65b9\u3067\ntype Client = (Int, WS.Connection)\n\n\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u8b58\u5225\u5b50\u3068\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u7d44\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nWarp.runSettings setting $ websocketsOr WS.defaultConnectionOptions (chat ref) app\n\n\u3067\u3044\u3088\u3044\u3088\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3057\u3066\u3044\u307e\u3059\u3002websocketsOr :: ConnectionOptions -> ServerApp -> Application -> Application\u306fWebSocket\u30b5\u30fc\u30d0\u30fc\u3068Web\u30b5\u30fc\u30d0\u30fc\u3092\u540c\u6642\u306b\u5efa\u3066\u308b\u6642\u306b\u4f7f\u3046\u95a2\u6570\u3067chat ref\u304cWebSocket\u30b5\u30fc\u30d0\u30fc\u3001app\u304cWeb\u30b5\u30fc\u30d0\u30fc\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u307e\u305aapp\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\napp :: Application\napp req respond = respond $ responseFile status200 [(hContentType, \"text/html\")] \"index.html\" Nothing\n\n\u3053\u308c\u306f\u3069\u3093\u306a\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u6765\u3066\u3082index.html\u3092\u8fd4\u3059\u3060\u3051\u306e\u30b5\u30fc\u30d0\u30fc\u3067\u3059\u3002index.html\u306f\u5f8c\u3067\u4f5c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\nchat :: IORef [Client] -> WS.ServerApp\nchat ref pending = do\n    conn <- WS.acceptRequest pending\n    identifier <- atomicModifyIORef ref (addClient conn)\n    flip finally (disconnect identifier) $ forever $ do\n        msg <- WS.receiveData conn\n        conns <- readIORef ref\n        broadcast msg conns\n    where\n    disconnect identifier = atomicModifyIORef ref (removeClient identifier)\n\n\u3053\u308c\u304c\u30c1\u30e3\u30c3\u30c8\u30b5\u30fc\u30d0\u30fc\u306e\u672c\u4f53\u3067\u3059\u3002acceptRequest :: PendingConnection -> IO Connection\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u63a5\u7d9a\u3092\u5f85\u3064\u95a2\u6570\u3067\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u63a5\u7d9a\u3057\u3066\u304d\u305f\u3089atomicModifyIORef\u3092\u4f7f\u3063\u3066\u90e8\u5c4b\u60c5\u5831\u306eIORef\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u767b\u9332\u3057\u3066\u3044\u307e\u3059\u3002\naddClient :: WS.Connection -> [Client] -> ([Client], Int)\naddClient conn cs = let i = if null cs then 0 else maximum (map fst cs) + 1\n                    in  ((i, conn):cs, i)\n\naddClient\u306e\u5b9f\u88c5\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3066\u3001\u8b58\u5225\u5b50\u306f\u6700\u5927\u5024+1\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u767b\u9332\u3057\u305f\u3089flip finally (disconnect identifier)\u3067\u30e6\u30fc\u30b6\u30fc\u304c\u96e2\u8131\u3057\u305f\u6642\u306b\u7d42\u4e86\u51e6\u7406\u3092\u3059\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3057\u305f\u5f8c\u306bforever\u3092\u4f7f\u3063\u3066\u53d7\u3051\u53d6\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3072\u305f\u3059\u3089\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\nbroadcast :: Text -> [Client] -> IO ()\nbroadcast msg = mapM_ (flip WS.sendTextData msg) . map snd\n\n\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u306e\u95a2\u6570\u306f\u5168\u3066\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u3063\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\u30e6\u30fc\u30b6\u30fc\u96e2\u8131\u6642\u306e\u51e6\u7406\u306f\nremoveClient :: Int -> [Client] -> ([Client], ())\nremoveClient i cs = (filter (\\c -> fst c /= i) cs, ())\n\n\u3053\u306eremoveClient\u3092atomicModifyIORef\u3067\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\nindex.html\n<!DOCTYPE>\n<html>\n    <head>\n        <script src=\"//ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>\n    </head>\n    <body>\n        <form><input type=\"text\"/></form>\n        <div></div>\n        <script>\n            try {\n              var ws = new WebSocket('ws://localhost:3000/');\n            } catch (err) {\n              console.error(err);\n            }\n\n            $(\"form\").submit(function(){\n                ws.send($('input').val());\n                $('input').val('');\n                return false;\n            });\n\n            ws.onmessage = function (msg) {\n                $('div').prepend(msg.data + '<br>'); \n            }\n        </script>\n    </body>\n</html>\n\nindex.html\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\u3055\u3063\u305d\u304f\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n$ runhaskell chat.hs\n\n\n\u5225\u3005\u306b\u30d6\u30e9\u30a6\u30b6\u3092\u958b\u3044\u3066\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u30c1\u30e3\u30c3\u30c8\u304c\u51fa\u6765\u3066\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\uff01\n\n\u53c2\u8003\u306b\u3057\u305f\u30b5\u30a4\u30c8\n\nHaskell\u3067websocket\u30b5\u30fc\u30d0\u3092\u4f5c\u308b\nNode.js + Socket.IO + jQuery \u3067\u6700\u5c0f\u69cb\u6210\u30c1\u30e3\u30c3\u30c8\n\n\u3053\u306e\u8a18\u4e8b\u306f\u30d6\u30ed\u30b0\u306b\u3082\u8f09\u305b\u3066\u3044\u307e\u3059\nhttp://lotz84.github.io/posts/build-chat-server-on-haskell\n\n----\n\n\u4eca\u65e5[Github\u306eHaskell\u306e\u30c8\u30ec\u30f3\u30c9](https://github.com/trending?l=haskell)\u3092\u898b\u3066\u3044\u305f\u3089[jaspervdj/websockets](https://github.com/jaspervdj/websockets)\u304c\u4e0a\u304c\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3068\u3044\u3048\u3070[Socket.IO](http://socket.io/)\u306a\u6628\u4eca\u3067\u3059\u304cHaskell\u306b\u3082[socket-io](https://hackage.haskell.org/package/socket-io)\u3068\u3044\u3046\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u4f55\u5ea6\u304b\u4f7f\u304a\u3046\u3068\u601d\u3063\u3066\u6311\u6226\u3057\u305f\u3093\u3067\u3059\u304c\u307e\u3060\u307e\u3060\u30ec\u30d9\u30eb\u304c\u4f4e\u304f\u3066\u4f7f\u3044\u65b9\u304c\u308f\u304b\u3089\u305a\u2026\n\n\u4eca\u65e5\u898b\u3064\u3051\u305fwebsocket\u306f\u4f8b\u306e\u30b3\u30fc\u30c9\u3082\u77ed\u304f\u4f7f\u3044\u3084\u3059\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u52c9\u5f37\u304c\u3066\u3089\u7c21\u5358\u306a\u30c1\u30e3\u30c3\u30c8\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u307e\u305a\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\n\n```bash\n$ cabal install websockets warp wai-websockets\n```\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u7d42\u308f\u308b\u307e\u3067\u30b3\u30fc\u30d2\u30fc\u3067\u3082\u98f2\u3093\u3067\u5f85\u3061\u307e\u3057\u3087\u3046\u2615\n\n\u7d42\u308f\u3063\u305f\u3089\u65e9\u901f\u30a2\u30d7\u30ea\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\uff01\n\n`chat.hs`\n\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\nimport Control.Monad (forever)\nimport Control.Exception (finally)\nimport Data.IORef\nimport Data.Text (Text)\nimport Network.HTTP.Types (hContentType)\nimport Network.HTTP.Types.Status (status200)\nimport Network.Wai (Application, responseFile)\nimport Network.Wai.Handler.WebSockets (websocketsOr)\n\nimport qualified Network.Wai.Handler.Warp as Warp\nimport qualified Network.WebSockets as WS\n\ntype Client = (Int, WS.Connection)\n\nbroadcast :: Text -> [Client] -> IO ()\nbroadcast msg = mapM_ (flip WS.sendTextData msg) . map snd\n\naddClient :: WS.Connection -> [Client] -> ([Client], Int)\naddClient conn cs = let i = if null cs then 0 else maximum (map fst cs) + 1\n                    in  ((i, conn):cs, i)\n\nremoveClient :: Int -> [Client] -> ([Client], ())\nremoveClient i cs = (filter (\\c -> fst c /= i) cs, ())\n\nchat :: IORef [Client] -> WS.ServerApp\nchat ref pending = do\n    conn <- WS.acceptRequest pending\n    identifier <- atomicModifyIORef ref (addClient conn)\n    flip finally (disconnect identifier) $ forever $ do\n        msg <- WS.receiveData conn\n        conns <- readIORef ref\n        broadcast msg conns\n    where\n    disconnect identifier = atomicModifyIORef ref (removeClient identifier)\n\napp :: Application\napp req respond = respond $ responseFile status200 [(hContentType, \"text/html\")] \"index.html\" Nothing\n\nmain :: IO ()\nmain = do\n    let port = 3000\n    let setting = Warp.setPort port Warp.defaultSettings\n    putStrLn $ \"Your server is listening at http://localhost:\" ++ show port ++ \"/\"\n    ref <- newIORef []\n    Warp.runSettings setting $ websocketsOr WS.defaultConnectionOptions (chat ref) app\n```\n\n\u30c9\u30fc\u30f3\uff01\uff01\u3068\u4e00\u6c17\u306b\u5168\u90e8\u306e\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u307e\u3057\u305f\u304c\u5c11\u3057\u305a\u3064\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\uff57\n\n\u307e\u305amain\u95a2\u6570\u3067\u3059\u304cdo\u4ee5\u964d\u306e\u6700\u521d\u306e\uff13\u884c\u306fWeb\u30b5\u30fc\u30d0\u30fc\u306e\u30dd\u30fc\u30c8\u306a\u3069\u57fa\u672c\u8a2d\u5b9a\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u6b21\u306e`ref <- newIORef []`\u306f\u63a5\u7d9a\u3057\u3066\u304d\u305f\u30e6\u30fc\u30b6\u30fc\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306eIORef\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002`ref`\u306e\u578b\u306f`IORef [Client]`\u3067\u3059\u3002`Client`\u306f\u4e0a\u306e\u65b9\u3067\n\n```haskell\ntype Client = (Int, WS.Connection)\n```\n\n\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u8b58\u5225\u5b50\u3068\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u7d44\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```haskell\nWarp.runSettings setting $ websocketsOr WS.defaultConnectionOptions (chat ref) app\n```\n\n\u3067\u3044\u3088\u3044\u3088\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3057\u3066\u3044\u307e\u3059\u3002`websocketsOr :: ConnectionOptions -> ServerApp -> Application -> Application`\u306fWebSocket\u30b5\u30fc\u30d0\u30fc\u3068Web\u30b5\u30fc\u30d0\u30fc\u3092\u540c\u6642\u306b\u5efa\u3066\u308b\u6642\u306b\u4f7f\u3046\u95a2\u6570\u3067`chat ref`\u304cWebSocket\u30b5\u30fc\u30d0\u30fc\u3001`app`\u304cWeb\u30b5\u30fc\u30d0\u30fc\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u307e\u305a`app`\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```haskell\napp :: Application\napp req respond = respond $ responseFile status200 [(hContentType, \"text/html\")] \"index.html\" Nothing\n```\n\n\u3053\u308c\u306f\u3069\u3093\u306a\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u6765\u3066\u3082`index.html`\u3092\u8fd4\u3059\u3060\u3051\u306e\u30b5\u30fc\u30d0\u30fc\u3067\u3059\u3002`index.html`\u306f\u5f8c\u3067\u4f5c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n```haskell\nchat :: IORef [Client] -> WS.ServerApp\nchat ref pending = do\n    conn <- WS.acceptRequest pending\n    identifier <- atomicModifyIORef ref (addClient conn)\n    flip finally (disconnect identifier) $ forever $ do\n        msg <- WS.receiveData conn\n        conns <- readIORef ref\n        broadcast msg conns\n    where\n    disconnect identifier = atomicModifyIORef ref (removeClient identifier)\n```\n\n\u3053\u308c\u304c\u30c1\u30e3\u30c3\u30c8\u30b5\u30fc\u30d0\u30fc\u306e\u672c\u4f53\u3067\u3059\u3002`acceptRequest :: PendingConnection -> IO Connection`\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u63a5\u7d9a\u3092\u5f85\u3064\u95a2\u6570\u3067\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u63a5\u7d9a\u3057\u3066\u304d\u305f\u3089`atomicModifyIORef`\u3092\u4f7f\u3063\u3066\u90e8\u5c4b\u60c5\u5831\u306eIORef\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u767b\u9332\u3057\u3066\u3044\u307e\u3059\u3002\n\n```haskell\naddClient :: WS.Connection -> [Client] -> ([Client], Int)\naddClient conn cs = let i = if null cs then 0 else maximum (map fst cs) + 1\n                    in  ((i, conn):cs, i)\n```\n\n`addClient`\u306e\u5b9f\u88c5\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3066\u3001\u8b58\u5225\u5b50\u306f\u6700\u5927\u5024+1\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u767b\u9332\u3057\u305f\u3089`flip finally (disconnect identifier)`\u3067\u30e6\u30fc\u30b6\u30fc\u304c\u96e2\u8131\u3057\u305f\u6642\u306b\u7d42\u4e86\u51e6\u7406\u3092\u3059\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3057\u305f\u5f8c\u306b`forever`\u3092\u4f7f\u3063\u3066\u53d7\u3051\u53d6\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3072\u305f\u3059\u3089\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n```haskell\nbroadcast :: Text -> [Client] -> IO ()\nbroadcast msg = mapM_ (flip WS.sendTextData msg) . map snd\n```\n\n\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u306e\u95a2\u6570\u306f\u5168\u3066\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u3063\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\u30e6\u30fc\u30b6\u30fc\u96e2\u8131\u6642\u306e\u51e6\u7406\u306f\n\n```haskell\nremoveClient :: Int -> [Client] -> ([Client], ())\nremoveClient i cs = (filter (\\c -> fst c /= i) cs, ())\n```\n\n\u3053\u306e`removeClient`\u3092`atomicModifyIORef`\u3067\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\n`index.html`\n\n```markup\n<!DOCTYPE>\n<html>\n    <head>\n        <script src=\"//ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>\n    </head>\n    <body>\n        <form><input type=\"text\"/></form>\n        <div></div>\n        <script>\n            try {\n              var ws = new WebSocket('ws://localhost:3000/');\n            } catch (err) {\n              console.error(err);\n            }\n\n            $(\"form\").submit(function(){\n                ws.send($('input').val());\n                $('input').val('');\n                return false;\n            });\n\n            ws.onmessage = function (msg) {\n                $('div').prepend(msg.data + '<br>'); \n            }\n        </script>\n    </body>\n</html>\n```\n\n`index.html`\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\u3055\u3063\u305d\u304f\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```bash\n$ runhaskell chat.hs\n```\n\n![](http://i.gyazo.com/502b6c72aea5244fa6764ce8395d096d.png)\n\n\u5225\u3005\u306b\u30d6\u30e9\u30a6\u30b6\u3092\u958b\u3044\u3066\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u30c1\u30e3\u30c3\u30c8\u304c\u51fa\u6765\u3066\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\uff01\n\n##\u53c2\u8003\u306b\u3057\u305f\u30b5\u30a4\u30c8\n* [Haskell\u3067websocket\u30b5\u30fc\u30d0\u3092\u4f5c\u308b](http://qiita.com/asukamirai/items/522cc3c07d7d9ad21dfa)\n* [Node.js + Socket.IO + jQuery \u3067\u6700\u5c0f\u69cb\u6210\u30c1\u30e3\u30c3\u30c8](http://qiita.com/naga3/items/bdf6176537a5ac77a9b5)\n"}