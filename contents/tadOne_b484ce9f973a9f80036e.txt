{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nGoogle\u304c\u4f5c\u6210\u3057\u305fDeepLearning\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306eTensorflow\n\u3044\u308d\u3044\u308d\u8a18\u4e8b\u304c\u4e0a\u304c\u3063\u3066\u3044\u3066\u975e\u5e38\u306b\u9762\u767d\u3044\u3067\u3059\u304c\u3001\u5b9f\u969b\u306bNN\u3092\u7d44\u3080\u969b\u306b\u4f7f\u7528\u3059\u308b\u95a2\u6570\u306f\u3069\u308c\uff1f\u3068\u3044\u3046\u306e\u3092\u5099\u5fd8\u3068\u3057\u3066\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\n\u306a\u304a\u7b46\u8005\u306fDeeplearning\u3092\u5927\u5b66\u3067\u5b66\u3093\u3060\u308f\u3051\u3067\u306f\u306a\u304f\u81ea\u5df1\u5b66\u7fd2\u3057\u305f\u3060\u3051\u306a\u306e\u3067\u3001\u9593\u9055\u3044\u3082\u591a\u3005\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u5f8c\u5b66\u306e\u305f\u3081\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\n\n\u7573\u8fbc\u307f\u5c64\u3067\u4f7f\u7528\n\ntf.nn.conv2d(input, filter, strides, padding, use_cudnn_on_gpu=None, name=None)\n\u7573\u8fbc\u307f\u3092\u884c\u3046\u95a2\u6570\n\u4ed6\u306b\u306fdepthwise_conv2d, separable_conv2d\u304c\u5b58\u5728\u3059\u308b\n\n\u7b2c1\u5f15\u6570: input\n\u30a4\u30f3\u30d7\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u30014\u6b21\u5143([batch, in_height, in_width, in_channels])\u306e\u30c6\u30f3\u30bd\u30eb\u3092\u6e21\u3059\n\u4e00\u756a\u6700\u521d\u306f\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3093\u3060\u5f8c\u3001reshape\u95a2\u6570\u3067[-1, in_height, in_width, in_channels]\u3068\u5909\u63db\u3057\u3001\u6e21\u305b\u3070\u3088\u3044\n\n\u7b2c2\u5f15\u6570: filter\n\u7573\u8fbc\u307f\u3067input\u30c6\u30f3\u30bd\u30eb\u3068\u306e\u7a4d\u548c\u306b\u4f7f\u7528\u3059\u308bweight\u306b\u3042\u305f\u308b\n\uff14\u6b21\u5143[filter_height, filter_width, in_channels, channel_multiplier] \u306e\u30c6\u30f3\u30bd\u30eb\u3092\u6e21\u3059\n\u6700\u5f8c\u306e\u5f15\u6570\u306echannel_multiplier\u3060\u3051channel\u6570\u304c\u62e1\u5f35\u3055\u308c\u308b\ne.g. 3x3x1\u306e\u30d5\u30a3\u30eb\u30bf\u3067\u7573\u8fbc\u307f\u3001\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u309264\u30c1\u30e3\u30cd\u30eb\u306b\u3059\u308b\n\n\u30d5\u30a3\u30eb\u30bf\u4f5c\u6210\u4f8b\nweight = tf.random_normal([3, 3, 1, 64]\n\n\n\n\u7b2c3\u5f15\u6570: strides\n\u30b9\u30c8\u30e9\u30a4\u30c9\uff08=\uff11\u753b\u7d20\u305a\u3064\u3067\u306f\u306a\u304f\u3001\u6570\u753b\u7d20\u305a\u3064\u30d5\u30a3\u30eb\u30bf\u306e\u9069\u7528\u7bc4\u56f2\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306e\u5024)\u3092\u6307\u5b9a\n\u305f\u3060\u3057strides[0] = strides[3] = 1. \u3068\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u6307\u5b9a\u306f[1, stride, stride, 1]\u3068\u5148\u982d\u3068\u6700\u5f8c\u306f\uff11\u56fa\u5b9a\u3068\u3059\u308b\n\u53c2\u8003: https://www.tensorflow.org/versions/master/api_docs/python/nn.html#conv2d\n\n\u7b2c4\u5f15\u6570: padding\n\u300c'SAME'\u300d\u304b\u300c'VALID'\u300d\u3092\u5229\u7528\n\u30bc\u30ed\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u306fSAME\u3092\u6307\u5b9a\n\ntf.nn.bias_add(value, bias, name=None)\n\u91cd\u307f\u3092\u7a4d\u548c\u3057\u305f\u3082\u306e\u306b\u30d0\u30a4\u30a2\u30b9\u3092\u52a0\u7b97\u3059\u308b\u969b\u306b\u4f7f\u7528\n\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30c1\u30e3\u30cd\u30eb\u6570\u306b\u5408\u308f\u305b\u308b\u306e\u304c\u826f\u3044\uff08\uff1f\uff09\n\n\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30c1\u30e3\u30cd\u30eb\u304c64\u306e\u5834\u5408\u306b\u30d0\u30a4\u30a2\u30b9\u3092\u52a0\u7b97\u3059\u308b\nbias = tf.Variable(tf.random_normal([64]))\nreturn tf.nn.bias_add(tf.nn.conv2d(input, weight, strides=[1, 2, 2, 1], padding='SAME'),bias)\n\n\n\ntf.nn.relu (features, name=None)\n\u7573\u8fbc\u307f\u5c64\u306e\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30b7\u30e7\u30f3\u95a2\u6570\u3068\u3057\u3066ReLu\u3092\u4f7f\u7528\u3059\u308b\n\u3082\u3061\u308d\u3093softmax\u3084sigmoid\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\n\n\u7b2c1\u5f15\u6570: features\n\u30d5\u30a3\u30eb\u30bf\u3084\u30d0\u30a4\u30a2\u30b9\u3092\u8db3\u3057\u3053\u3093\u3060\u7d50\u679c(Wx + b)\u306e\u30c6\u30f3\u30bd\u30eb\u3092\u5229\u7528\u3059\u308b\n\n\u4f7f\u7528\u4f8b\n    return tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(input, weight, strides=[1, 2, 2, 1], padding='SAME'),bias), name='conv1')\n\n\n\n\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u3067\u4f7f\u7528\n\ntf.nn.max_pool(value, ksize, strides, padding, name=None)\n\u6700\u5927\u30d7\u30fc\u30ea\u30f3\u30b0\u7528\u306e\u95a2\u6570\n\u4ed6\u306b\u3082\u5e73\u5747\u30d7\u30fc\u30ea\u30f3\u30b0\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\n\n\u7b2c1\u5f15\u6570: value\ninput\u30c7\u30fc\u30bf\n\u7573\u8fbc\u307f\u5c64\u304b\u3089\u306e\u51fa\u529b\u30c7\u30fc\u30bf\u3092\u305d\u306e\u307e\u307e\u4e0e\u3048\u308c\u3070\u826f\u3044\n\n\u7b2c2\u5f15\u6570: ksize\n\u30d7\u30fc\u30ea\u30f3\u30b0\u30b5\u30a4\u30ba\u3092\u3057\u3066\u3044\n3x3\u306b\u3057\u305f\u3044\u5834\u5408\u306f[1, 3, 3, 1]\u3068\u3059\u308c\u3070\u3088\u3044\n\u203b\u7b2c\uff13\u5f15\u6570\u4ee5\u964d\u306fconv2d\u3068\u540c\u3058\u306e\u305f\u3081\u5272\u611b\n\n\u305d\u306e\u4ed6\uff08\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3001\u640d\u5931\u95a2\u6570\u3001\u8a13\u7df4\u306a\u3069\uff09\n\ntf.nn.dropout(x, keep_prob, noise_shape=None, seed=None, name=None)\n\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3092\u884c\u3046\u95a2\u6570\n\n\u7b2c1\u5f15\u6570: x\n\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u304b\u3089\u306e\u51fa\u529b\uff08\u3092\u6b63\u898f\u5316\u3057\u3066\uff1f\uff09\u3092\u305d\u306e\u307e\u307e\u4e0e\u3048\u308c\u3070\u826f\u3044\n\n\u7b2c2\u5f15\u6570: keep_prob\n\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3059\u308b\u7387\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u300cThe probability that each element is kept.\u300d\u3068\u3042\u308b\u304b\u3089\u3001\u6b8b\u3059\u7387\u3092\u6307\u5b9a\u3059\u308c\u3070\u3088\u3044\uff08\uff1f\uff09\n\n\u4f7f\u7528\u4f8b\n# 2\u5272\u3092\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3059\u308b\ntf.nn.dropout(res,0.8)\n\n\n\ntf.nn.softmax_cross_entropy_with_logits(logits, labels, name=None)\n\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\n\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u306e\u640d\u5931\u95a2\u6570\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u308b\n\n\u4f7f\u7528\u4f8b\n# res = NN\u306e\u7d50\u679c\u3068\u3057\u3066\u51fa\u529b\u5c64\u304b\u3089\u8fd4\u3055\u308c\u305f\u5024\ncost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(res, class))\n\n\n\ntf.train.AdamOptimizer\n\u8a13\u7df4\u3092\u5b9f\u65bd\u3059\u308b\u95a2\u6570\n\u3053\u3053\u3067\u4f5c\u3063\u305f\u3082\u306e\u3092Sess.run\u306b\u5f15\u304d\u6e21\u3057\u8a13\u7df4\u3092\u5b9f\u65bd\u3059\u308b\n\n\u4f7f\u7528\u4f8b\n# res = NN\u306e\u7d50\u679c\u3068\u3057\u3066\u51fa\u529b\u5c64\u304b\u3089\u8fd4\u3055\u308c\u305f\u5024\noptimizer = tf.train.AdamOptimizer.minimize(cost)\n\n\n\n\u5171\u901a/\u4e8b\u524d\u51e6\u7406\u306a\u3069\u3067\u4f7f\u7528\n\ntf.reshape(tensor, shape, name=None)\n\n\u7b2c1\u5f15\u6570: tensor\ninput\u3068\u306a\u308b\u30c6\u30f3\u30bd\u30eb\u3092\u6307\u5b9a\n\n\u7b2c2\u5f15\u6570: shape\n\u5909\u3048\u305f\u3044\u5f62\u3092\u6307\u5b9a\n\u305f\u3060\u3057-1\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u306f\u6b21\u5143\u304c\u524a\u6e1b\u3055\u308cflatten\u3068\u306a\u308b\n\u4e0e\u3048\u3089\u308c\u305f\u753b\u50cf\u3092NN\u3067\u5fc5\u8981\u306aheight, width, channel\u306b\u5909\u63db\u3059\u308b\n\u4f8b\u3048\u307028x28\u306eRGB\u306b\u5909\u63db\u3057\u305f\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\n\nreshape.py\nx = tf.reshape(im, [-1, 28, 28, 3])\n\n\n\n\u5b9f\u884c\u30b5\u30f3\u30d7\u30eb\n>>> import tensorflow as tf\n>>> matrix1 = tf.constant([[3, 3],[1, 1],[2,2]])\n\n>>> # 1\u6b21\u5143\u306breshape\n>>> r = tf.reshape(matrix1, [-1])\n>>> sess = tf.Session()\n>>> sess.run(r)\narray([3, 3, 1, 1, 2, 2], dtype=int32)\n\n>>> # 2\u6b21\u5143\u306breshape \u306a\u304a[2]\u3068\u3057\u305f\u5834\u5408\u306b\u306f\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\n>>> r = tf.reshape(matrix1, [2, -1])\n>>> sess.run(r)\narray([[3, 3, 1],\n       [1, 2, 2]], dtype=int32)\n\n\n\ntf.matmul(a, b, transpose_a=False, transpose_b=False, a_is_sparse=False, b_is_sparse=False, name=None)\n\u30c6\u30f3\u30bd\u30eb\u540c\u58eb\u306e\u639b\u3051\u7b97\u3092\u884c\u3046\u95a2\u6570\n\u6570\u5024\u540c\u58eb\u306e\u5358\u7d14\u306a\u639b\u3051\u7b97\u306f tf.mul(x, y, name=None) \u3092\u4f7f\u7528\u3059\u308b\n\n\u5b9f\u884c\u30b5\u30f3\u30d7\u30eb\n>>> a = tf.constant([[1,2],[3,4]])\n>>> b = tf.constant([[2],[2]])\n>>> c = tf.matmul(a, b)\n>>> sess = tf.Session()\n>>> #\u8a08\u7b97\u306e\u7d50\u679c\u3001[1*2 + 2*2],[3*2 + 4*2]\u3068\u306a\u308b\n>>> sess.run(c)\narray([[ 6],\n       [14]], dtype=int32)\n\n\n\ntf.reduce_mean(input_tensor, reduction_indices=None, keep_dims=False, name=None)\n\u640d\u5931\u95a2\u6570\u306a\u3069\u3067\u4f7f\u7528\u3059\u308b\u5e73\u5747\u3092\u7b97\u51fa\u3059\u308b\u95a2\u6570\nreduction_indices\u3067\u96c6\u7d04\u3059\u308b\u6b21\u5143\u3092\u6307\u5b9a\u3059\u308b\n\n\u5b9f\u884c\u30b5\u30f3\u30d7\u30eb\n>>> a = tf.constant([[1.0,2.0],[3.0,4.0],[5.0,6.0]])\n\n>>> mean = tf.reduce_mean(a)\n>>> sess.run(mean)\n3.5\n\n>>> mean = tf.reduce_mean(a,0)\n>>> sess.run(mean)\narray([ 3.,  4.], dtype=float32)\n\n>>> mean = tf.reduce_mean(a,1)\n>>> sess.run(mean)\narray([ 1.5,  3.5,  5.5], dtype=float32)\n\n\n\n\n# \u306f\u3058\u3081\u306b\nGoogle\u304c\u4f5c\u6210\u3057\u305fDeepLearning\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306eTensorflow\n\u3044\u308d\u3044\u308d\u8a18\u4e8b\u304c\u4e0a\u304c\u3063\u3066\u3044\u3066\u975e\u5e38\u306b\u9762\u767d\u3044\u3067\u3059\u304c\u3001\u5b9f\u969b\u306bNN\u3092\u7d44\u3080\u969b\u306b\u4f7f\u7528\u3059\u308b\u95a2\u6570\u306f\u3069\u308c\uff1f\u3068\u3044\u3046\u306e\u3092\u5099\u5fd8\u3068\u3057\u3066\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\n\n\u306a\u304a\u7b46\u8005\u306fDeeplearning\u3092\u5927\u5b66\u3067\u5b66\u3093\u3060\u308f\u3051\u3067\u306f\u306a\u304f\u81ea\u5df1\u5b66\u7fd2\u3057\u305f\u3060\u3051\u306a\u306e\u3067\u3001\u9593\u9055\u3044\u3082\u591a\u3005\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u5f8c\u5b66\u306e\u305f\u3081\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\n\n# \u7573\u8fbc\u307f\u5c64\u3067\u4f7f\u7528\n## tf.nn.conv2d(input, filter, strides, padding, use_cudnn_on_gpu=None, name=None)\n\u7573\u8fbc\u307f\u3092\u884c\u3046\u95a2\u6570\n\u4ed6\u306b\u306fdepthwise_conv2d, separable_conv2d\u304c\u5b58\u5728\u3059\u308b\n\n### \u7b2c1\u5f15\u6570: input\n\u30a4\u30f3\u30d7\u30c3\u30c8\u30c7\u30fc\u30bf\u3092\u30014\u6b21\u5143([batch, in_height, in_width, in_channels])\u306e\u30c6\u30f3\u30bd\u30eb\u3092\u6e21\u3059\n\u4e00\u756a\u6700\u521d\u306f\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3093\u3060\u5f8c\u3001reshape\u95a2\u6570\u3067[-1, in_height, in_width, in_channels]\u3068\u5909\u63db\u3057\u3001\u6e21\u305b\u3070\u3088\u3044\n\n### \u7b2c2\u5f15\u6570: filter\n\u7573\u8fbc\u307f\u3067input\u30c6\u30f3\u30bd\u30eb\u3068\u306e\u7a4d\u548c\u306b\u4f7f\u7528\u3059\u308bweight\u306b\u3042\u305f\u308b\n\uff14\u6b21\u5143[filter_height, filter_width, in_channels, channel_multiplier] \u306e\u30c6\u30f3\u30bd\u30eb\u3092\u6e21\u3059\n\u6700\u5f8c\u306e\u5f15\u6570\u306echannel_multiplier\u3060\u3051channel\u6570\u304c\u62e1\u5f35\u3055\u308c\u308b\n\ne.g. 3x3x1\u306e\u30d5\u30a3\u30eb\u30bf\u3067\u7573\u8fbc\u307f\u3001\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u309264\u30c1\u30e3\u30cd\u30eb\u306b\u3059\u308b\n\n```py:\u30d5\u30a3\u30eb\u30bf\u4f5c\u6210\u4f8b\nweight = tf.random_normal([3, 3, 1, 64]\n```\n\n### \u7b2c3\u5f15\u6570: strides\n\u30b9\u30c8\u30e9\u30a4\u30c9\uff08=\uff11\u753b\u7d20\u305a\u3064\u3067\u306f\u306a\u304f\u3001\u6570\u753b\u7d20\u305a\u3064\u30d5\u30a3\u30eb\u30bf\u306e\u9069\u7528\u7bc4\u56f2\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306e\u5024)\u3092\u6307\u5b9a\n\u305f\u3060\u3057strides[0] = strides[3] = 1. \u3068\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u6307\u5b9a\u306f[1, stride, stride, 1]\u3068\u5148\u982d\u3068\u6700\u5f8c\u306f\uff11\u56fa\u5b9a\u3068\u3059\u308b\n\n\u53c2\u8003: https://www.tensorflow.org/versions/master/api_docs/python/nn.html#conv2d\n\n#### \u7b2c4\u5f15\u6570: padding\n\u300c'SAME'\u300d\u304b\u300c'VALID'\u300d\u3092\u5229\u7528\n\u30bc\u30ed\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u306fSAME\u3092\u6307\u5b9a\n\n## tf.nn.bias_add(value, bias, name=None)\n\u91cd\u307f\u3092\u7a4d\u548c\u3057\u305f\u3082\u306e\u306b\u30d0\u30a4\u30a2\u30b9\u3092\u52a0\u7b97\u3059\u308b\u969b\u306b\u4f7f\u7528\n\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30c1\u30e3\u30cd\u30eb\u6570\u306b\u5408\u308f\u305b\u308b\u306e\u304c\u826f\u3044\uff08\uff1f\uff09\n\n```py:\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30c1\u30e3\u30cd\u30eb\u304c64\u306e\u5834\u5408\u306b\u30d0\u30a4\u30a2\u30b9\u3092\u52a0\u7b97\u3059\u308b\nbias = tf.Variable(tf.random_normal([64]))\nreturn tf.nn.bias_add(tf.nn.conv2d(input, weight, strides=[1, 2, 2, 1], padding='SAME'),bias)\n```\n\n## tf.nn.relu (features, name=None)\n\u7573\u8fbc\u307f\u5c64\u306e\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30b7\u30e7\u30f3\u95a2\u6570\u3068\u3057\u3066ReLu\u3092\u4f7f\u7528\u3059\u308b\n\u3082\u3061\u308d\u3093softmax\u3084sigmoid\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\n\n### \u7b2c1\u5f15\u6570: features\n\u30d5\u30a3\u30eb\u30bf\u3084\u30d0\u30a4\u30a2\u30b9\u3092\u8db3\u3057\u3053\u3093\u3060\u7d50\u679c(Wx + b)\u306e\u30c6\u30f3\u30bd\u30eb\u3092\u5229\u7528\u3059\u308b\n\n```py:\u4f7f\u7528\u4f8b\n    return tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(input, weight, strides=[1, 2, 2, 1], padding='SAME'),bias), name='conv1')\n```\n\n# \u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u3067\u4f7f\u7528\n## tf.nn.max_pool(value, ksize, strides, padding, name=None)\n\u6700\u5927\u30d7\u30fc\u30ea\u30f3\u30b0\u7528\u306e\u95a2\u6570\n\u4ed6\u306b\u3082\u5e73\u5747\u30d7\u30fc\u30ea\u30f3\u30b0\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b\n\n### \u7b2c1\u5f15\u6570: value\ninput\u30c7\u30fc\u30bf\n\u7573\u8fbc\u307f\u5c64\u304b\u3089\u306e\u51fa\u529b\u30c7\u30fc\u30bf\u3092\u305d\u306e\u307e\u307e\u4e0e\u3048\u308c\u3070\u826f\u3044\n\n### \u7b2c2\u5f15\u6570: ksize\n\u30d7\u30fc\u30ea\u30f3\u30b0\u30b5\u30a4\u30ba\u3092\u3057\u3066\u3044\n3x3\u306b\u3057\u305f\u3044\u5834\u5408\u306f[1, 3, 3, 1]\u3068\u3059\u308c\u3070\u3088\u3044\n\n\u203b\u7b2c\uff13\u5f15\u6570\u4ee5\u964d\u306fconv2d\u3068\u540c\u3058\u306e\u305f\u3081\u5272\u611b\n\n# \u305d\u306e\u4ed6\uff08\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3001\u640d\u5931\u95a2\u6570\u3001\u8a13\u7df4\u306a\u3069\uff09\n## tf.nn.dropout(x, keep_prob, noise_shape=None, seed=None, name=None)\n\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3092\u884c\u3046\u95a2\u6570\n### \u7b2c1\u5f15\u6570: x\n\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u304b\u3089\u306e\u51fa\u529b\uff08\u3092\u6b63\u898f\u5316\u3057\u3066\uff1f\uff09\u3092\u305d\u306e\u307e\u307e\u4e0e\u3048\u308c\u3070\u826f\u3044\n\n### \u7b2c2\u5f15\u6570: keep_prob\n\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3059\u308b\u7387\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u300cThe probability that each element is kept.\u300d\u3068\u3042\u308b\u304b\u3089\u3001\u6b8b\u3059\u7387\u3092\u6307\u5b9a\u3059\u308c\u3070\u3088\u3044\uff08\uff1f\uff09\n\n```py:\u4f7f\u7528\u4f8b\n# 2\u5272\u3092\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3059\u308b\ntf.nn.dropout(res,0.8)\n```\n\n\n## tf.nn.softmax_cross_entropy_with_logits(logits, labels, name=None)\n\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\n\u30d0\u30c3\u30af\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\u306e\u640d\u5931\u95a2\u6570\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u308b\n\n```py:\u4f7f\u7528\u4f8b\n# res = NN\u306e\u7d50\u679c\u3068\u3057\u3066\u51fa\u529b\u5c64\u304b\u3089\u8fd4\u3055\u308c\u305f\u5024\ncost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(res, class))\n```\n\n## tf.train.AdamOptimizer\n\u8a13\u7df4\u3092\u5b9f\u65bd\u3059\u308b\u95a2\u6570\n\u3053\u3053\u3067\u4f5c\u3063\u305f\u3082\u306e\u3092Sess.run\u306b\u5f15\u304d\u6e21\u3057\u8a13\u7df4\u3092\u5b9f\u65bd\u3059\u308b\n\n```py:\u4f7f\u7528\u4f8b\n# res = NN\u306e\u7d50\u679c\u3068\u3057\u3066\u51fa\u529b\u5c64\u304b\u3089\u8fd4\u3055\u308c\u305f\u5024\noptimizer = tf.train.AdamOptimizer.minimize(cost)\n```\n\n# \u5171\u901a/\u4e8b\u524d\u51e6\u7406\u306a\u3069\u3067\u4f7f\u7528\n## tf.reshape(tensor, shape, name=None)\n### \u7b2c1\u5f15\u6570: tensor\ninput\u3068\u306a\u308b\u30c6\u30f3\u30bd\u30eb\u3092\u6307\u5b9a\n\n### \u7b2c2\u5f15\u6570: shape\n\u5909\u3048\u305f\u3044\u5f62\u3092\u6307\u5b9a\n\u305f\u3060\u3057-1\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u306f\u6b21\u5143\u304c\u524a\u6e1b\u3055\u308cflatten\u3068\u306a\u308b\n\n\u4e0e\u3048\u3089\u308c\u305f\u753b\u50cf\u3092NN\u3067\u5fc5\u8981\u306aheight, width, channel\u306b\u5909\u63db\u3059\u308b\n\u4f8b\u3048\u307028x28\u306eRGB\u306b\u5909\u63db\u3057\u305f\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\n\n```py:reshape.py\nx = tf.reshape(im, [-1, 28, 28, 3])\n```\n\n```py:\u5b9f\u884c\u30b5\u30f3\u30d7\u30eb\n>>> import tensorflow as tf\n>>> matrix1 = tf.constant([[3, 3],[1, 1],[2,2]])\n\n>>> # 1\u6b21\u5143\u306breshape\n>>> r = tf.reshape(matrix1, [-1])\n>>> sess = tf.Session()\n>>> sess.run(r)\narray([3, 3, 1, 1, 2, 2], dtype=int32)\n\n>>> # 2\u6b21\u5143\u306breshape \u306a\u304a[2]\u3068\u3057\u305f\u5834\u5408\u306b\u306f\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\n>>> r = tf.reshape(matrix1, [2, -1])\n>>> sess.run(r)\narray([[3, 3, 1],\n       [1, 2, 2]], dtype=int32)\n```\n\n## tf.matmul(a, b, transpose_a=False, transpose_b=False, a_is_sparse=False, b_is_sparse=False, name=None)\n\u30c6\u30f3\u30bd\u30eb\u540c\u58eb\u306e\u639b\u3051\u7b97\u3092\u884c\u3046\u95a2\u6570\n\u6570\u5024\u540c\u58eb\u306e\u5358\u7d14\u306a\u639b\u3051\u7b97\u306f tf.mul(x, y, name=None) \u3092\u4f7f\u7528\u3059\u308b\n\n```py:\u5b9f\u884c\u30b5\u30f3\u30d7\u30eb\n>>> a = tf.constant([[1,2],[3,4]])\n>>> b = tf.constant([[2],[2]])\n>>> c = tf.matmul(a, b)\n>>> sess = tf.Session()\n>>> #\u8a08\u7b97\u306e\u7d50\u679c\u3001[1*2 + 2*2],[3*2 + 4*2]\u3068\u306a\u308b\n>>> sess.run(c)\narray([[ 6],\n       [14]], dtype=int32)\n```\n\n## tf.reduce_mean(input_tensor, reduction_indices=None, keep_dims=False, name=None)\n\u640d\u5931\u95a2\u6570\u306a\u3069\u3067\u4f7f\u7528\u3059\u308b\u5e73\u5747\u3092\u7b97\u51fa\u3059\u308b\u95a2\u6570\nreduction_indices\u3067\u96c6\u7d04\u3059\u308b\u6b21\u5143\u3092\u6307\u5b9a\u3059\u308b\n\n```py:\u5b9f\u884c\u30b5\u30f3\u30d7\u30eb\n>>> a = tf.constant([[1.0,2.0],[3.0,4.0],[5.0,6.0]])\n\n>>> mean = tf.reduce_mean(a)\n>>> sess.run(mean)\n3.5\n\n>>> mean = tf.reduce_mean(a,0)\n>>> sess.run(mean)\narray([ 3.,  4.], dtype=float32)\n\n>>> mean = tf.reduce_mean(a,1)\n>>> sess.run(mean)\narray([ 1.5,  3.5,  5.5], dtype=float32)\n\n```\n", "tags": ["TensorFlow", "DeepLearning", "\u753b\u50cf\u8a8d\u8b58"]}