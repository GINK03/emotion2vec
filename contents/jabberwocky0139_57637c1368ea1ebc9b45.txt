{"context": "\n\n\u3042\u3089\u307e\u3057\n\u4ee5\u524d\u306e\u8a18\u4e8b\u3067NumPy\u30fbSciPy\u306e\u9ad8\u901f\u5316\u306b\u307e\u3064\u308f\u308b\u4e8b\u67c4\u3092\u66f8\u304d\u307e\u3057\u305f:\nNumPy\u3092\u7528\u3044\u305f\u6570\u5024\u8a08\u7b97\u306e\u9ad8\u901f\u5316 : \u57fa\u790e\nNumPy\u30fbSciPy\u3092\u7528\u3044\u305f\u6570\u5024\u8a08\u7b97\u306e\u9ad8\u901f\u5316 : \u5fdc\u7528\u305d\u306e1\nNumPy\u30fbSciPy\u3092\u7528\u3044\u305f\u6570\u5024\u8a08\u7b97\u306e\u9ad8\u901f\u5316 : \u5fdc\u7528\u305d\u306e2\n\u30db\u30f3\u30c8\u306b\u65e9\u304f\u306a\u3063\u3066\u308b\u306e\uff1f\u3061\u3083\u3093\u3068\u8abf\u3079\u3066\u307f\u307e\u3057\u3087\u3046.\n\n\u8abf\u67fb\u65b9\u6cd5\nPython\u306b\u3088\u308b\u30aa\u30ec\u30aa\u30ec\u5b9f\u88c5\u3068\u6bd4\u8f03\u3057\u307e\u3059. \u901f\u5ea6\u3088\u308a\u30b7\u30f3\u30d7\u30eb\u3055\u3092\u91cd\u8996\u3057\u305f\u5b9f\u88c5\u3068\u306e\u6bd4\u8f03\u306a\u306e\u3067\u6b63\u5f53\u306a\u8a55\u4fa1\u3068\u306f\u8a00\u3044\u96e3\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093. Python\u306fanaconda3, \u6642\u9593\u8a08\u6e2c\u306b\u306fIPython\u306e%timeit\u3092\u4f7f\u7528\u3057\u307e\u3059. \n--\u5b9f\u884c\u74b0\u5883--\nOS : Ubuntu16.04 LTS 64bit\nPython : anaconda3-4.1.1\nCPU : Intel Corei5 3550 (4-core / 4-thread)\n\n\u30ea\u30b9\u30c8\u306e\u521d\u671f\u5316\n\u305f\u3068\u3048\u3070\u884c\u5217\u306e\u521d\u671f\u5316\u3067\u3059.\n\nbefore\nN = 3000\na = [[i + j for i in range(N)] for j in range(N)]\n\n\n\u3053\u3093\u306a\u3075\u3046\u306b\u5185\u5305\u8868\u8a18\u3067\u66f8\u3044\u305f\u3068\u3057\u307e\u3057\u3087\u3046. \u5b9f\u884c\u6642\u9593\u306f661ms. \u4e00\u65b9\u3067NumPy\u306earange\u3067\u306f\n\nafter\na = np.arange(0, N) + np.arange(0, N).reshape(N, 1)\n\n\n15.5ms\u3067\u3057\u305f. 100\u500d\u3068\u306f\u8a00\u308f\u306a\u3044\u3067\u3059\u304c, 40\u500d\u304f\u3089\u3044\u306f\u901f\u3044\u3067\u3059\u306d.\n\n\u884c\u5217\u7a4d\n\u7dda\u5f62\u4ee3\u6570\u306e\u6f14\u7b97\u306f\u3044\u308d\u3044\u308d\u3042\u308a\u307e\u3059\u304c, \u7c21\u5358\u306a\u884c\u5217\u7a4d\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046. 200\u00d7200\u306e\u884c\u5217\u30922\u3064\u7528\u610f\u3057\u3066\u7a4d\u3092\u8a08\u7b97\u3057\u307e\u3059:\n\nsetting\nimport numpy as np\nfrom numpy.random import rand\n\nN = 200\na = np.array(rand(N, N))\nb = np.array(rand(N, N))\nc = np.array([[0] * N for _ in range(N)])\n\n\n\u884c\u5217\u7a4d\u306e\u5b9a\u7fa9\u306e\u307e\u307e\u5b9f\u88c5\u3059\u308b\u3068\n\nbefor\nfor i in range(N):\n    for j in range(N):\n        for k in range(N):\n            c[i][j] = a[i][k] * b[k][j]\n\n\n\u3067\u3057\u3087\u3046\u304b. \u5b9f\u884c\u6642\u9593\u306f7.7s.\nNumPy\u306e\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u95a2\u6570\u3092\u7528\u3044\u308b\u3068\n\nafter\nc = np.dot(a, b)\n\n\n\u901f\u5ea6\u4ee5\u524d\u306b\u5358\u7d14\u306a\u306e\u304c\u3044\u3044\u3067\u3059\u306d. \u5b9f\u884c\u6642\u9593\u306f\u306a\u3093\u3068202us. \u4f55\u500d\u3068\u304b\u8a00\u3046\u306e\u3082\u304a\u3053\u304c\u307e\u3057\u3044\u304f\u3089\u3044\u4e00\u77ac\u3067\u3059\u306d. \u3053\u308c\u304cMKL\u306eBLAS\u306b\u3088\u308b\u30de\u30eb\u30c1\u30b3\u30a2\u51e6\u7406\u306e\u5a01\u529b\u3067\u3059. 1000\u00d71000\u3067\u308222.2ms. \u3053\u3053\u307e\u3067\u304f\u308b\u3068for\u30eb\u30fc\u30d7\u306e\u5b9f\u88c5\u3067\u306f\u624b\u306b\u8ca0\u3048\u306a\u304f\u306a\u308a\u307e\u3059.\n\n\u5fae\u5206\nsinxsin\u2061x\\sin x\u3092\u5fae\u5206\u3057\u3066\u307f\u307e\u3057\u3087\u3046. \u7a7a\u9593\u306e\u5206\u5272\u6570\u306f100000\u306b\u3057\u3066\u3044\u307e\u3059:\n\nsetting\nimport math as m\n\ndef f(x):\n    return m.sin(x)\n\ndef g(x):\n    return np.sin(x)\n\nN, L = 100000, 2 * m.pi\nx, dx = np.linspace(0, L, N), L / N\n\n\n\u5fae\u5206\u306e\u5b9a\u7fa9\u3092\u305d\u306e\u307e\u307e. \u7cbe\u5ea6\u306f\u3053\u306e\u969b\u6c17\u306b\u305b\u305a\u3044\u304d\u307e\u3057\u3087\u3046:\n\nbefore\ndiff = []\nfor i in x:\n    diff.append((f(i + dx) - f(i)) / dx)\n\n\n\u5b9f\u884c\u6642\u9593\u306f91.9ms. \u3082\u3057\u304b\u3057\u305f\u3089append\u304c\u9045\u3044\u539f\u56e0\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u306d. \u4e00\u65b9NumPy\u3067\u306f\n\nafter\ndiff = np.gradient(g(x), dx)\n\n\n\u30b7\u30f3\u30d7\u30eb\u306a\u4e0a\u306b, \u623b\u308a\u5024\u306e\u8981\u7d20\u6570\u3082\u6e1b\u308a\u307e\u305b\u3093(\u6570\u5024\u8a08\u7b97\u306b\u969b\u3057\u3066\u306f\u3053\u308c\u304c\u3069\u308c\u3060\u3051\u6709\u308a\u96e3\u3044\u304b\uff01). \u5b9f\u884c\u6642\u9593\u306f8.25ms. \u8efd\u304f10\u500d\u7a0b\u5ea6\u306f\u901f\u3044\u3067\u3059\u306d. \u3061\u306a\u307f\u306b\ng = np.vectorize(f)\n\n\u3068\u3059\u308b\u3053\u3068\u3067, \u5f15\u6570\u3084\u623b\u308a\u5024\u3092ndarray\u4ed5\u69d8\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059. \n\n\u7a4d\u5206\n\u3061\u3087\u3063\u3068\u30b3\u30a2\u306a\u7a4d\u5206\u3092\u7528\u610f\u3057\u307e\u3057\u3087\u3046:\n\u222b\u221e\u2212\u221edx\u222bx\u2212\u221edye\u2212(x2+y2)\u222b\u2212\u221e\u221edx\u222b\u2212\u221exdye\u2212(x2+y2){\\int_{-\\infty}^{\\infty} dx\\int_{-\\infty}^{x} dy\\; e^{-(x^2 + y^2)}\n}\nyyy\u306e\u7a4d\u5206\u533a\u9593\u306bxxx\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u4e8c\u91cd\u7a4d\u5206\u3067\u3059. \u88ab\u7a4d\u5206\u95a2\u6570\u3068\u7a7a\u9593\u306e\u5206\u5272\u6570\u3092\n\nsetting\ndef h(x, y):\n    return np.exp(-(x**2 + y**2))\n\nN, L = 2000, 100\nx, dx = np.linspace(-L/2, L/2, N), L / N\ny, dy = np.linspace(-L/2, L/2, N), L / N\n\n\n\u306e\u3088\u3046\u306b\u30bb\u30c3\u30c8\u3057\u307e\u3059. \u4e8c\u91cd\u7a4d\u5206\u3092\u5b9a\u7fa9\u901a\u308a\u5b9f\u88c5\u3059\u308b\u3068\n\nbefore\nans = 0\nfor index, X in enumerate(x):\n    for Y in y[:index+1]:\n        ans += dx * dy * h(X, Y)\n\n\n\u3067\u3057\u3087\u3046\u304b. \u5b9f\u884c\u6642\u9593\u306f5.89s. \u3057\u304b\u3057\u3053\u308c\u306f\u3042\u307e\u308a\u306b\u3082\u7cbe\u5ea6\u304c\u60aa\u3044\u3067\u3059. \u81ea\u524d\u3067\u66f8\u304f\u306a\u3089Simpson\u7a4d\u5206\u306b\u3059\u3079\u304d\u3067\u3059\u304c, \u305d\u306e\u5834\u5408\u306f\u30b3\u30fc\u30c9\u304c\u305d\u3053\u305d\u3053\u7169\u96d1\u306b\u306a\u308a\u307e\u3059. \u307e\u305f, Simpson\u7a4d\u5206\u3067\u3082\u5e83\u7fa9\u7a4d\u5206\u306b\u306f\u300c\u7a7a\u9593\u3092\u5341\u5206\u5e83\u304f\u53d6\u308b\u300d\u3068\u3044\u3046\u5bfe\u5fdc\u3057\u304b\u3067\u304d\u307e\u305b\u3093. \u3057\u304b\u3057\u5dee\u5206\u3092\u7d30\u304b\u304f\u3059\u308b\u3068\u5b9f\u884c\u6642\u9593\u306fO(N2)O(N2)O(N^2)\u306e\u30aa\u30fc\u30c0\u30fc\u3067\u5897\u52a0\u3057\u3066\u3044\u304d\u307e\u3059. \u4e00\u65b9SciPy\u306edblquad\u3067\u306f\u305d\u306e\u5168\u3066\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3067\u304d\u3066\u3044\u307e\u3059:\n\nafter\nfrom scipy.integrate import dblquad\nans = dblquad(h, a = -np.inf, b = np.inf, gfun = lambda x : -np.inf, hfun = lambda x : x)[0]\n\n\nxxx\u306e\u7a4d\u5206\u533a\u9593\u304c[a,b][a,b][a, b], yyy\u306e\u7a4d\u5206\u533a\u9593\u304c[gfun,hfun][gfun,hfun][{\\rm gfun}, {\\rm hfun}]\u3067\u3059. \u9069\u5fdc\u578b\u7a4d\u5206\u3067, \u8aa4\u5dee\u306e\u7bc4\u56f2\u3082\u6307\u5b9a\u3067\u304d\u307e\u3059. dblquad\u306e\u623b\u308a\u5024\u306ftuple\u3067, \u7d76\u5bfe\u8aa4\u5dee\u3082\u4e00\u7dd2\u306b\u8fd4\u3063\u3066\u6765\u308b\u3088\u3046\u3067\u3059. \u5b9f\u884c\u6642\u9593\u306f51.1ms. \u3082\u306f\u3084\u4f55\u3082\u8a00\u3046\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093. \u6700\u9ad8\u3067\u3059.\n\n\u56fa\u6709\u5024\u65b9\u7a0b\u5f0f\n(\u304a\u307e\u3051\u3067\u3059. \u56fa\u6709\u5024\u65b9\u7a0b\u5f0f\u306e\u6570\u5024\u89e3\u6cd5\u306f\u5c11\u3005\u30de\u30cb\u30a2\u30c3\u30af\u306a\u306e\u3067...)\n\u8abf\u548c\u632f\u52d5\u5b50\u7cfb\u306eSchroedinger\u65b9\u7a0b\u5f0f\u3092\u89e3\u304d\u307e\u3057\u3087\u3046. \u81ea\u524d\u3067\u5b9f\u88c5\u3059\u308b\u3068\u306a\u308b\u3068Jacobi\u6cd5\u3067\u3057\u3087\u3046\u304b. \u8208\u5473\u304c\u3042\u308c\u3070\u8abf\u3079\u3066\u307f\u3066\u304f\u3060\u3055\u3044:\n\nbefore\nI = np.eye(N)\nH = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    H[i][i] = 2.0/(2*dx**2) + 0.5*(-L/2+dx*i)**2\n    if(0 <= i+1 < N):\n        H[i][i+1] = -1.0/(2*dx**2)\n    if(0 <= i-1 < N):\n        H[i][i-1] = -1.0/(2*dx**2)\nH = np.array(H)\n\n# Jacobi\u6cd5\nflag = True\nwhile(flag):\n    # \u975e\u5bfe\u89d2\u6210\u5206\u306e\u6700\u5927\u5024\u53ca\u3073\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8abf\u3079\u308b\n    maxValue = 0\n    cI, rI = None, None\n    for j in range(N):\n        for i in range(j):\n            if(maxValue < abs(H[i][j])):\n                maxValue = abs(H[i][j])\n                rI, cI = i, j\n\n    # \u53ce\u675f\u5224\u5b9a\n    if(maxValue < 1e-4):\n        flag = False\n    # print(maxValue)\n\n    # \u56de\u8ee2\u884c\u5217\u306e\u7528\u610f\n    theta = None\n    if(H[cI][cI] == H[rI][rI]):\n        theta = m.pi/4\n    else:\n        theta = 0.5*m.atan(2.0*H[rI][cI]/(H[cI][cI]-H[rI][rI]))\n        J = np.eye(N)\n        J[rI][rI] = m.cos(theta)\n        J[cI][cI] = m.cos(theta)\n        J[rI][cI] = m.sin(theta)\n        J[cI][rI] = -m.sin(theta)\n\n    # \u884c\u5217\u6f14\u7b97\n    H = np.array(np.matrix(J.T)*np.matrix(H)*np.matrix(J))\n    I = np.array(np.matrix(I)*np.matrix(J))\n\n# \u56fa\u6709\u5024\u30fb\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306e\u683c\u7d0d\nv, w = I.transpose(), []\nfor i in range(N):\n    w.append([H[i][i], i])\nw.sort()\n\n\n\u975e\u5bfe\u89d2\u9805\u306e\u6700\u5927\u5024\u304c\u5341\u5206\u5c0f\u3055\u304f\u306a\u3063\u305f\u3068\u3053\u308d\u3067\u53ce\u675f\u3067\u3059. \u56fa\u6709\u5024\u304c\u6607\u9806\u306b\u306a\u3063\u3066\u3044\u306a\u304b\u3063\u305f\u308a\u3068, \u3042\u307e\u308a\u4fbf\u5229\u3067\u306f\u3042\u308a\u307e\u305b\u3093. \u5b9f\u884c\u6642\u9593\u306f15.6s. \u3053\u308c\u4ee5\u4e0a\u5206\u5272\u6570\u3092\u5927\u304d\u304f\u3059\u308b\u3068\u3082\u3046\u82e6\u3057\u3044\u3067\u3059. NumPy\u3067\u306f\n\nafter\n# \u7cfb\u306e\u8a2d\u5b9a\nL, N = 10, 80\nx, dx = np.linspace(-L/2, L/2, N), L / N\n\n# \u904b\u52d5\u9805K\nK = np.eye(N, N)\nK_sub = np.vstack((K[1:], np.array([0] * N)))\nK = dx**-2 * (2 * K - K_sub - K_sub.T)\n\n# \u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u9805\nV = np.diag(np.linspace(-L/2, L/2, N)**2)\n\n# \u30a8\u30eb\u30df\u30fc\u30c8\u884c\u5217\u306e\u56fa\u6709\u5024\u65b9\u7a0b\u5f0f\n# w\u304c\u56fa\u6709\u5024, v\u304c\u56fa\u6709\u30d9\u30af\u30c8\u30eb\nH = (K + V) / 2\nw, v = np.linalg.eigh(H)\n\n\n\u5b9f\u884c\u6642\u9593\u306f1.03ms. \u56fa\u6709\u5024\u65b9\u7a0b\u5f0f\u304f\u3089\u3044\u8907\u96d1\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u306a\u308b\u3068, \u3082\u3046\u8272\u3093\u306a\u610f\u5473\u3067\u52dd\u3061\u76ee\u304c\u7121\u3044\u3067\u3059\u306d. \u3053\u308c\u3082BLAS\u304c\u3055\u305e\u5927\u66b4\u308c\u3057\u3066\u3044\u308b\u3053\u3068\u3067\u3057\u3087\u3046. C\u3060\u3068Lapack\u304bGSL\u306b\u983c\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3057\u3087\u3046\u304c, \u305d\u308c\u3082\u5927\u5909\u3067\u3059\u306d. \n\n\u304a\u308f\u308a\u306b\n\u3053\u306e\u304f\u3089\u3044\u3067\u5341\u5206\u3067\u3057\u3087\u3046. NumPy\u30fbSciPy\u304c\u3044\u304b\u306b\u9ad8\u901f\u306b\u52d5\u4f5c\u3059\u308b\u304b, \u307e\u305f\u30b7\u30f3\u30d7\u30eb\u306b\u8a18\u8ff0\u3067\u304d\u308b\u304b\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059. \u3082\u3057C/C++\u3067\u4e0a\u306e\u3088\u3046\u306a\u8a08\u7b97\u3092\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u983c\u3089\u305a\u306b\u66f8\u3053\u3046\u3068\u601d\u3046\u3068, \u305d\u308c\u305e\u308c\u306e\u7ae0\u306e\u6700\u521d\u3067\u66f8\u3044\u305f\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059. \u307e\u305f, C/C++\u306e\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u7d4c\u9a13\u4e0a, \u89e6\u308a\u306b\u304f\u3044\u3082\u306e\u304c\u591a\u3044\u5370\u8c61\u3067\u3059. \n\u3042\u304f\u307e\u3067\u53c2\u8003\u3067\u3059\u304c\u901f\u5ea6\u5dee\u3092\u307e\u3068\u3081\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5177\u5408\u3067\u3059:\n\n\u30ea\u30b9\u30c8\u306e\u521d\u671f\u5316 : 661ms \u2192 15.5ms\n\u884c\u5217\u7a4d : 7.7s \u2192 202us\n\u5fae\u5206 : 91.9ms \u2192 8.25ms\n(2\u91cd)\u7a4d\u5206 : 5.89s \u2192 51.1ms\n\u56fa\u6709\u5024\u65b9\u7a0b\u5f0f : 15.6s \u2192 1.03ms\n\n\u5727\u5012\u7684\u3067\u3059. \u8a08\u7b97\u5c4b\u3055\u3093\u304cPython\u3092\u4f7f\u3046\u4fa1\u5024\u306f\u5341\u4e8c\u5206\u306b\u3042\u308b\u3068\u601d\u3044\u307e\u3059. \n# \u3042\u3089\u307e\u3057\n\u4ee5\u524d\u306e\u8a18\u4e8b\u3067NumPy\u30fbSciPy\u306e\u9ad8\u901f\u5316\u306b\u307e\u3064\u308f\u308b\u4e8b\u67c4\u3092\u66f8\u304d\u307e\u3057\u305f:\n\n[NumPy\u3092\u7528\u3044\u305f\u6570\u5024\u8a08\u7b97\u306e\u9ad8\u901f\u5316 : \u57fa\u790e](http://qiita.com/jabberwocky0139/items/c3620fb2f011f20a633b)\n[NumPy\u30fbSciPy\u3092\u7528\u3044\u305f\u6570\u5024\u8a08\u7b97\u306e\u9ad8\u901f\u5316 : \u5fdc\u7528\u305d\u306e1](http://qiita.com/jabberwocky0139/items/a9751d11caa64bc19226)\n[NumPy\u30fbSciPy\u3092\u7528\u3044\u305f\u6570\u5024\u8a08\u7b97\u306e\u9ad8\u901f\u5316 : \u5fdc\u7528\u305d\u306e2](http://qiita.com/jabberwocky0139/items/26451d7942777d0001f1)\n\n\u30db\u30f3\u30c8\u306b\u65e9\u304f\u306a\u3063\u3066\u308b\u306e\uff1f\u3061\u3083\u3093\u3068\u8abf\u3079\u3066\u307f\u307e\u3057\u3087\u3046.\n\n## \u8abf\u67fb\u65b9\u6cd5\nPython\u306b\u3088\u308b\u30aa\u30ec\u30aa\u30ec\u5b9f\u88c5\u3068\u6bd4\u8f03\u3057\u307e\u3059. \u901f\u5ea6\u3088\u308a\u30b7\u30f3\u30d7\u30eb\u3055\u3092\u91cd\u8996\u3057\u305f\u5b9f\u88c5\u3068\u306e\u6bd4\u8f03\u306a\u306e\u3067\u6b63\u5f53\u306a\u8a55\u4fa1\u3068\u306f\u8a00\u3044\u96e3\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093. Python\u306f`anaconda3`, \u6642\u9593\u8a08\u6e2c\u306b\u306fIPython\u306e`%timeit`\u3092\u4f7f\u7528\u3057\u307e\u3059. \n\n--\u5b9f\u884c\u74b0\u5883--\nOS : Ubuntu16.04 LTS 64bit\nPython : anaconda3-4.1.1\nCPU : Intel Corei5 3550 (4-core / 4-thread)\n\n# \u30ea\u30b9\u30c8\u306e\u521d\u671f\u5316\n\u305f\u3068\u3048\u3070\u884c\u5217\u306e\u521d\u671f\u5316\u3067\u3059.\n\n```py3:before\nN = 3000\na = [[i + j for i in range(N)] for j in range(N)]\n```\n\u3053\u3093\u306a\u3075\u3046\u306b\u5185\u5305\u8868\u8a18\u3067\u66f8\u3044\u305f\u3068\u3057\u307e\u3057\u3087\u3046. \u5b9f\u884c\u6642\u9593\u306f**<font color=\"HotPink\">661ms</font>**. \u4e00\u65b9\u3067NumPy\u306e`arange`\u3067\u306f\n\n```py3:after\na = np.arange(0, N) + np.arange(0, N).reshape(N, 1)\n```\n**<font color=\"DodgerBlue\">15.5ms</font>**\u3067\u3057\u305f. 100\u500d\u3068\u306f\u8a00\u308f\u306a\u3044\u3067\u3059\u304c, 40\u500d\u304f\u3089\u3044\u306f\u901f\u3044\u3067\u3059\u306d.\n\n \n# \u884c\u5217\u7a4d\n\u7dda\u5f62\u4ee3\u6570\u306e\u6f14\u7b97\u306f\u3044\u308d\u3044\u308d\u3042\u308a\u307e\u3059\u304c, \u7c21\u5358\u306a\u884c\u5217\u7a4d\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046. 200\u00d7200\u306e\u884c\u5217\u30922\u3064\u7528\u610f\u3057\u3066\u7a4d\u3092\u8a08\u7b97\u3057\u307e\u3059:\n\n```py3:setting\nimport numpy as np\nfrom numpy.random import rand\n\nN = 200\na = np.array(rand(N, N))\nb = np.array(rand(N, N))\nc = np.array([[0] * N for _ in range(N)])\n```\n\n\u884c\u5217\u7a4d\u306e\u5b9a\u7fa9\u306e\u307e\u307e\u5b9f\u88c5\u3059\u308b\u3068\n\n```py3:befor\nfor i in range(N):\n\tfor j in range(N):\n\t\tfor k in range(N):\n\t\t\tc[i][j] = a[i][k] * b[k][j]\n```\n\u3067\u3057\u3087\u3046\u304b. \u5b9f\u884c\u6642\u9593\u306f**<font color=\"HotPink\">7.7s</font>**.\n\nNumPy\u306e\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u95a2\u6570\u3092\u7528\u3044\u308b\u3068\n\n```py3:after\nc = np.dot(a, b)\n```\n\u901f\u5ea6\u4ee5\u524d\u306b\u5358\u7d14\u306a\u306e\u304c\u3044\u3044\u3067\u3059\u306d. \u5b9f\u884c\u6642\u9593\u306f\u306a\u3093\u3068**<font color=\"DodgerBlue\">202us</font>**. \u4f55\u500d\u3068\u304b\u8a00\u3046\u306e\u3082\u304a\u3053\u304c\u307e\u3057\u3044\u304f\u3089\u3044\u4e00\u77ac\u3067\u3059\u306d. \u3053\u308c\u304cMKL\u306eBLAS\u306b\u3088\u308b\u30de\u30eb\u30c1\u30b3\u30a2\u51e6\u7406\u306e\u5a01\u529b\u3067\u3059. 1000\u00d71000\u3067\u3082**<font color=\"DodgerBlue\">22.2ms</font>**. \u3053\u3053\u307e\u3067\u304f\u308b\u3068for\u30eb\u30fc\u30d7\u306e\u5b9f\u88c5\u3067\u306f\u624b\u306b\u8ca0\u3048\u306a\u304f\u306a\u308a\u307e\u3059.\n\n# \u5fae\u5206\n$\\sin x$\u3092\u5fae\u5206\u3057\u3066\u307f\u307e\u3057\u3087\u3046. \u7a7a\u9593\u306e\u5206\u5272\u6570\u306f100000\u306b\u3057\u3066\u3044\u307e\u3059:\n\n```py3:setting\nimport math as m\n\ndef f(x):\n    return m.sin(x)\n\ndef g(x):\n    return np.sin(x)\n\t\nN, L = 100000, 2 * m.pi\nx, dx = np.linspace(0, L, N), L / N\n```\n\n\u5fae\u5206\u306e\u5b9a\u7fa9\u3092\u305d\u306e\u307e\u307e. \u7cbe\u5ea6\u306f\u3053\u306e\u969b\u6c17\u306b\u305b\u305a\u3044\u304d\u307e\u3057\u3087\u3046:\n\n```py3:before\ndiff = []\nfor i in x:\n\tdiff.append((f(i + dx) - f(i)) / dx)\n```\n\u5b9f\u884c\u6642\u9593\u306f**<font color=\"HotPink\">91.9ms</font>**. \u3082\u3057\u304b\u3057\u305f\u3089`append`\u304c\u9045\u3044\u539f\u56e0\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u306d. \u4e00\u65b9NumPy\u3067\u306f\n\n```py3:after\ndiff = np.gradient(g(x), dx)\n```\n\u30b7\u30f3\u30d7\u30eb\u306a\u4e0a\u306b, \u623b\u308a\u5024\u306e\u8981\u7d20\u6570\u3082\u6e1b\u308a\u307e\u305b\u3093(\u6570\u5024\u8a08\u7b97\u306b\u969b\u3057\u3066\u306f\u3053\u308c\u304c\u3069\u308c\u3060\u3051\u6709\u308a\u96e3\u3044\u304b\uff01). \u5b9f\u884c\u6642\u9593\u306f**<font color=\"DodgerBlue\">8.25ms</font>**. \u8efd\u304f10\u500d\u7a0b\u5ea6\u306f\u901f\u3044\u3067\u3059\u306d. \u3061\u306a\u307f\u306b\n\n```py3\ng = np.vectorize(f)\n```\n\u3068\u3059\u308b\u3053\u3068\u3067, \u5f15\u6570\u3084\u623b\u308a\u5024\u3092ndarray\u4ed5\u69d8\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059. \n\n# \u7a4d\u5206\n\u3061\u3087\u3063\u3068\u30b3\u30a2\u306a\u7a4d\u5206\u3092\u7528\u610f\u3057\u307e\u3057\u3087\u3046:\n\n```math\n\\int_{-\\infty}^{\\infty} dx\\int_{-\\infty}^{x} dy\\; e^{-(x^2 + y^2)}\n```\n$y$\u306e\u7a4d\u5206\u533a\u9593\u306b$x$\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u4e8c\u91cd\u7a4d\u5206\u3067\u3059. \u88ab\u7a4d\u5206\u95a2\u6570\u3068\u7a7a\u9593\u306e\u5206\u5272\u6570\u3092\n\n```py3:setting\ndef h(x, y):\n    return np.exp(-(x**2 + y**2))\n\nN, L = 2000, 100\nx, dx = np.linspace(-L/2, L/2, N), L / N\ny, dy = np.linspace(-L/2, L/2, N), L / N\n```\n\u306e\u3088\u3046\u306b\u30bb\u30c3\u30c8\u3057\u307e\u3059. \u4e8c\u91cd\u7a4d\u5206\u3092\u5b9a\u7fa9\u901a\u308a\u5b9f\u88c5\u3059\u308b\u3068\n\n```py3:before\nans = 0\nfor index, X in enumerate(x):\n\tfor Y in y[:index+1]:\n\t\tans += dx * dy * h(X, Y)\n```\n\u3067\u3057\u3087\u3046\u304b. \u5b9f\u884c\u6642\u9593\u306f**<font color=\"HotPink\">5.89s</font>**. \u3057\u304b\u3057\u3053\u308c\u306f\u3042\u307e\u308a\u306b\u3082\u7cbe\u5ea6\u304c\u60aa\u3044\u3067\u3059. \u81ea\u524d\u3067\u66f8\u304f\u306a\u3089Simpson\u7a4d\u5206\u306b\u3059\u3079\u304d\u3067\u3059\u304c, \u305d\u306e\u5834\u5408\u306f\u30b3\u30fc\u30c9\u304c\u305d\u3053\u305d\u3053\u7169\u96d1\u306b\u306a\u308a\u307e\u3059. \u307e\u305f, Simpson\u7a4d\u5206\u3067\u3082\u5e83\u7fa9\u7a4d\u5206\u306b\u306f\u300c\u7a7a\u9593\u3092\u5341\u5206\u5e83\u304f\u53d6\u308b\u300d\u3068\u3044\u3046\u5bfe\u5fdc\u3057\u304b\u3067\u304d\u307e\u305b\u3093. \u3057\u304b\u3057\u5dee\u5206\u3092\u7d30\u304b\u304f\u3059\u308b\u3068\u5b9f\u884c\u6642\u9593\u306f$O(N^2)$\u306e\u30aa\u30fc\u30c0\u30fc\u3067\u5897\u52a0\u3057\u3066\u3044\u304d\u307e\u3059. \u4e00\u65b9SciPy\u306e`dblquad`\u3067\u306f\u305d\u306e\u5168\u3066\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3067\u304d\u3066\u3044\u307e\u3059:\n\n```py3:after\nfrom scipy.integrate import dblquad\nans = dblquad(h, a = -np.inf, b = np.inf, gfun = lambda x : -np.inf, hfun = lambda x : x)[0]\n```\n$x$\u306e\u7a4d\u5206\u533a\u9593\u304c$[a, b]$, $y$\u306e\u7a4d\u5206\u533a\u9593\u304c$[{\\rm gfun}, {\\rm hfun}]$\u3067\u3059. \u9069\u5fdc\u578b\u7a4d\u5206\u3067, \u8aa4\u5dee\u306e\u7bc4\u56f2\u3082\u6307\u5b9a\u3067\u304d\u307e\u3059. `dblquad`\u306e\u623b\u308a\u5024\u306ftuple\u3067, \u7d76\u5bfe\u8aa4\u5dee\u3082\u4e00\u7dd2\u306b\u8fd4\u3063\u3066\u6765\u308b\u3088\u3046\u3067\u3059. \u5b9f\u884c\u6642\u9593\u306f**<font color=\"DodgerBlue\">51.1ms</font>**. \u3082\u306f\u3084\u4f55\u3082\u8a00\u3046\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093. \u6700\u9ad8\u3067\u3059.\n\n# \u56fa\u6709\u5024\u65b9\u7a0b\u5f0f\n(\u304a\u307e\u3051\u3067\u3059. \u56fa\u6709\u5024\u65b9\u7a0b\u5f0f\u306e\u6570\u5024\u89e3\u6cd5\u306f\u5c11\u3005\u30de\u30cb\u30a2\u30c3\u30af\u306a\u306e\u3067...)\n\n\u8abf\u548c\u632f\u52d5\u5b50\u7cfb\u306eSchroedinger\u65b9\u7a0b\u5f0f\u3092\u89e3\u304d\u307e\u3057\u3087\u3046. \u81ea\u524d\u3067\u5b9f\u88c5\u3059\u308b\u3068\u306a\u308b\u3068Jacobi\u6cd5\u3067\u3057\u3087\u3046\u304b. \u8208\u5473\u304c\u3042\u308c\u3070\u8abf\u3079\u3066\u307f\u3066\u304f\u3060\u3055\u3044:\n\n```py3:before\nI = np.eye(N)\nH = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    H[i][i] = 2.0/(2*dx**2) + 0.5*(-L/2+dx*i)**2\n    if(0 <= i+1 < N):\n        H[i][i+1] = -1.0/(2*dx**2)\n    if(0 <= i-1 < N):\n        H[i][i-1] = -1.0/(2*dx**2)\nH = np.array(H)\n\n# Jacobi\u6cd5\nflag = True\nwhile(flag):\n    # \u975e\u5bfe\u89d2\u6210\u5206\u306e\u6700\u5927\u5024\u53ca\u3073\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8abf\u3079\u308b\n    maxValue = 0\n    cI, rI = None, None\n    for j in range(N):\n        for i in range(j):\n            if(maxValue < abs(H[i][j])):\n                maxValue = abs(H[i][j])\n                rI, cI = i, j\n                \n    # \u53ce\u675f\u5224\u5b9a\n    if(maxValue < 1e-4):\n        flag = False\n\t# print(maxValue)\n    \n    # \u56de\u8ee2\u884c\u5217\u306e\u7528\u610f\n    theta = None\n    if(H[cI][cI] == H[rI][rI]):\n        theta = m.pi/4\n    else:\n        theta = 0.5*m.atan(2.0*H[rI][cI]/(H[cI][cI]-H[rI][rI]))\n        J = np.eye(N)\n        J[rI][rI] = m.cos(theta)\n        J[cI][cI] = m.cos(theta)\n        J[rI][cI] = m.sin(theta)\n        J[cI][rI] = -m.sin(theta)\n    \n    # \u884c\u5217\u6f14\u7b97\n    H = np.array(np.matrix(J.T)*np.matrix(H)*np.matrix(J))\n    I = np.array(np.matrix(I)*np.matrix(J))\n    \n# \u56fa\u6709\u5024\u30fb\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306e\u683c\u7d0d\nv, w = I.transpose(), []\nfor i in range(N):\n    w.append([H[i][i], i])\nw.sort()\n```\n\u975e\u5bfe\u89d2\u9805\u306e\u6700\u5927\u5024\u304c\u5341\u5206\u5c0f\u3055\u304f\u306a\u3063\u305f\u3068\u3053\u308d\u3067\u53ce\u675f\u3067\u3059. \u56fa\u6709\u5024\u304c\u6607\u9806\u306b\u306a\u3063\u3066\u3044\u306a\u304b\u3063\u305f\u308a\u3068, \u3042\u307e\u308a\u4fbf\u5229\u3067\u306f\u3042\u308a\u307e\u305b\u3093. \u5b9f\u884c\u6642\u9593\u306f**<font color=\"HotPink\">15.6s</font>**. \u3053\u308c\u4ee5\u4e0a\u5206\u5272\u6570\u3092\u5927\u304d\u304f\u3059\u308b\u3068\u3082\u3046\u82e6\u3057\u3044\u3067\u3059. NumPy\u3067\u306f\n\n```py3:after\n# \u7cfb\u306e\u8a2d\u5b9a\nL, N = 10, 80\nx, dx = np.linspace(-L/2, L/2, N), L / N\n\n# \u904b\u52d5\u9805K\nK = np.eye(N, N)\nK_sub = np.vstack((K[1:], np.array([0] * N)))\nK = dx**-2 * (2 * K - K_sub - K_sub.T)\n\n# \u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u9805\nV = np.diag(np.linspace(-L/2, L/2, N)**2)\n\n# \u30a8\u30eb\u30df\u30fc\u30c8\u884c\u5217\u306e\u56fa\u6709\u5024\u65b9\u7a0b\u5f0f\n# w\u304c\u56fa\u6709\u5024, v\u304c\u56fa\u6709\u30d9\u30af\u30c8\u30eb\nH = (K + V) / 2\nw, v = np.linalg.eigh(H)\n```\n\u5b9f\u884c\u6642\u9593\u306f**<font color=\"DodgerBlue\">1.03ms</font>**. \u56fa\u6709\u5024\u65b9\u7a0b\u5f0f\u304f\u3089\u3044\u8907\u96d1\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u306a\u308b\u3068, \u3082\u3046\u8272\u3093\u306a\u610f\u5473\u3067\u52dd\u3061\u76ee\u304c\u7121\u3044\u3067\u3059\u306d. \u3053\u308c\u3082BLAS\u304c\u3055\u305e\u5927\u66b4\u308c\u3057\u3066\u3044\u308b\u3053\u3068\u3067\u3057\u3087\u3046. C\u3060\u3068Lapack\u304bGSL\u306b\u983c\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3057\u3087\u3046\u304c, \u305d\u308c\u3082\u5927\u5909\u3067\u3059\u306d. \n\n\n# \u304a\u308f\u308a\u306b\n\u3053\u306e\u304f\u3089\u3044\u3067\u5341\u5206\u3067\u3057\u3087\u3046. **NumPy\u30fbSciPy\u304c\u3044\u304b\u306b\u9ad8\u901f\u306b\u52d5\u4f5c\u3059\u308b\u304b, \u307e\u305f\u30b7\u30f3\u30d7\u30eb\u306b\u8a18\u8ff0\u3067\u304d\u308b\u304b\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059.** \u3082\u3057C/C++\u3067\u4e0a\u306e\u3088\u3046\u306a\u8a08\u7b97\u3092\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u983c\u3089\u305a\u306b\u66f8\u3053\u3046\u3068\u601d\u3046\u3068, \u305d\u308c\u305e\u308c\u306e\u7ae0\u306e\u6700\u521d\u3067\u66f8\u3044\u305f\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059. \u307e\u305f, C/C++\u306e\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u7d4c\u9a13\u4e0a, \u89e6\u308a\u306b\u304f\u3044\u3082\u306e\u304c\u591a\u3044\u5370\u8c61\u3067\u3059. \n\n\u3042\u304f\u307e\u3067\u53c2\u8003\u3067\u3059\u304c\u901f\u5ea6\u5dee\u3092\u307e\u3068\u3081\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5177\u5408\u3067\u3059:\n\n>\u30ea\u30b9\u30c8\u306e\u521d\u671f\u5316 : **<font color=\"HotPink\">661ms</font>** \u2192 **<font color=\"DodgerBlue\">15.5ms</font>**\n\u884c\u5217\u7a4d : **<font color=\"HotPink\">7.7s</font>** \u2192 **<font color=\"DodgerBlue\">202us</font>**\n\u5fae\u5206 : **<font color=\"HotPink\">91.9ms</font>** \u2192 **<font color=\"DodgerBlue\">8.25ms</font>**\n(2\u91cd)\u7a4d\u5206 : **<font color=\"HotPink\">5.89s</font>** \u2192 **<font color=\"DodgerBlue\">51.1ms</font>**\n\u56fa\u6709\u5024\u65b9\u7a0b\u5f0f : **<font color=\"HotPink\">15.6s</font>** \u2192 **<font color=\"DodgerBlue\">1.03ms</font>**\n\n**\u5727\u5012\u7684\u3067\u3059.** \u8a08\u7b97\u5c4b\u3055\u3093\u304cPython\u3092\u4f7f\u3046\u4fa1\u5024\u306f\u5341\u4e8c\u5206\u306b\u3042\u308b\u3068\u601d\u3044\u307e\u3059. \n", "tags": ["Python", "python3", "numpy", "scipy", "\u6570\u5024\u8a08\u7b97"]}