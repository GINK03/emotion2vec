{"tags": ["Chainer", "python3", "\u6a5f\u68b0\u5b66\u7fd2"], "context": "\u3000chainer\u306eConvolution2D\u3084Linear\u306f\u3001\u5165\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u6570in_channels\u3084\u30ce\u30fc\u30c9\u6570in_size\u306bNone\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u6700\u521d\u306e\u30c7\u30fc\u30bf\u3092forward\u3057\u305f\u6642\u306b\u81ea\u52d5\u3067\u5408\u308f\u305b\u3066\u304f\u308c\u308b\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u5f15\u6570\u306e\u8aac\u660e\u3067\u8a00\u53ca\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u610f\u5916\u3068\u6c17\u3065\u304d\u306b\u304f\u3044\u3067\u3059\uff08chainer version 1.15.0.1\uff09\u3002\n\nin_size (int) \u2013 Dimension of input vectors. If None, parameter initialization will be deferred until the first forward data pass at which time the size will be determined.\n\n\u3000\u3068\u308a\u3042\u3048\u305a\u8a66\u3057\u307e\u3059\u3002\nimport chainer\nimport numpy\n\n\nclass LinearLinear(chainer.Chain):\n    def __init__(self):\n        super().__init__(\n            linear1=chainer.functions.Linear(in_size=10, out_size=20),\n            linear2=chainer.functions.Linear(in_size=None, out_size=30),\n        )\n\n    def __call__(self, x):\n        h = self.linear1(x)\n        h = self.linear2(h)\n        return h\n\n\nlinearlinear = LinearLinear()\n\nx = numpy.random.rand(64, 10).astype(numpy.float32)\nh = linearlinear(x)\nprint(h.data.shape)  # (64, 30)\n\nimport chainer\nimport numpy\n\n\nclass ConvConv(chainer.Chain):\n    def __init__(self):\n        super().__init__(\n            conv1=chainer.functions.Convolution2D(in_channels=4, out_channels=4, ksize=3),\n            conv2=chainer.functions.Convolution2D(in_channels=None, out_channels=3, ksize=3),\n        )\n\n    def __call__(self, x):\n        h = self.conv1(x)\n        h = self.conv2(h)\n        return h\n\n\nconvconv = ConvConv()\n\nx = numpy.random.rand(64, 4, 32, 32).astype(numpy.float32)\nh = convconv(x)\nprint(h.data.shape)  # (64, 3, 28, 28)\n\n\u3000\u304a\u304b\u3052\u3055\u307e\u3067\u30b3\u30fc\u30c9\u306e\u5909\u66f4\u3092\u884c\u3044\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u3042\u308a\u304c\u305f\u3084\u3002\n\u3000\u3068\u3053\u308d\u3067\u3001\u5148\u307b\u3069\u3053\u306e\u3088\u3046\u306a\u3084\u308a\u53d6\u308a\u3092\u76ee\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u3000\u7279\u306b\u591a\u5c64\u306aConvolution\u306e\u51fa\u529b\u30ce\u30fc\u30c9\u6570\u3092\u8a08\u7b97\u3059\u308b\u306e\u306f\u304b\u306a\u308a\u9762\u5012\u306a\u305f\u3081\u3001Conv->Linear\u3067\u5165\u529b\u30ce\u30fc\u30c9\u6570\u3092\u7701\u3051\u308b\u306e\u306f\u5f85\u671b\u306e\u6a5f\u80fd\u3067\u3059\u3002\u3055\u3063\u305d\u304f\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nimport chainer\nimport numpy\n\n\nclass ConvLinear(chainer.Chain):\n    def __init__(self):\n        super().__init__(\n            conv1=chainer.functions.Convolution2D(in_channels=4, out_channels=4, ksize=3),\n            linear2=chainer.functions.Linear(in_size=None, out_size=30),\n        )\n\n    def __call__(self, x):\n        h = self.conv1(x)\n        h = self.linear2(h)\n        return h\n\n\nconvlinear = ConvLinear()\n\nx = numpy.random.rand(64, 4, 32, 32).astype(numpy.float32)\nh = convlinear(x)\nprint(h.data.shape)\n\n# Invalid operation is performed in: LinearFunction (Forward)\n# Expect: prod(in_types[0].shape[1:]) == in_types[1].shape[1]\n# Actual: 3600 != 4\n\n\u3000\u3093\u30fc\u30fb\u30fb\u30fb\uff1f\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3051\u3069\u3001\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3057\u305f\u3002\n\u3000\u539f\u56e0\u306f\u3055\u3066\u304a\u3044\u3066\u3001\u3084\u3063\u3071\u308a\u624b\u8a08\u7b97\u306f\u5fc5\u8981\u306a\u306e\u304b\u3068\u60b2\u89b3\u3059\u308b\u3053\u3068\u306f\u306a\u304f\u3001reshape\u3092\u631f\u3093\u3067\u3042\u3052\u308b\u3068\u81ea\u52d5\u3067\u63a8\u5b9a\u3057\u3066\u304f\u308c\u307e\u3059\u3002\nclass ConvLinear(chainer.Chain):\n    def __init__(self):\n        super().__init__(\n            conv1=chainer.functions.Convolution2D(in_channels=4, out_channels=4, ksize=3),\n            linear2=chainer.functions.Linear(in_size=None, out_size=30),\n        )\n\n    def __call__(self, x):\n        h = self.conv1(x)\n        h = chainer.functions.reshape(h, (h.data.shape[0], -1, 1))\n        h = self.linear2(h)\n        return h\n\n\nconvlinear = ConvLinear()\n\nx = numpy.random.rand(64, 4, 32, 32).astype(numpy.float32)\nh = convlinear(x)\nprint(h.data.shape)  # (64, 30)\n\n\u3000\u3042\u308a\u304c\u305f\u3084\u3002\n\u3000\u3057\u304b\u3057\u5148\u307b\u3069\u306e\u30a8\u30e9\u30fc\u306f\u4f55\u304b\u3057\u3089\u306e\u624b\u9055\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u30b3\u30df\u30c3\u30c8\u30c1\u30e3\u30f3\u30b9\u3067\u3059\u3002\u305d\u3057\u3066\u304a\u305d\u3089\u304f\u3053\u306e\u8fba\u308a\u3067\u3059\u3002\u3057\u304b\u3057\u3053\u308c\u306f\u3053\u306e\u30b3\u30df\u30c3\u30c8\u3067\u4fee\u6b63\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3046\u30fc\u3093\u3001\u6b8b\u5ff5\u3002\uff08\uff1f\uff09\n\u3000\u3053\u306e\u30b3\u30df\u30c3\u30c8\u3092\u542b\u3080PR\u306f\u73fe\u5728master\u306b\u30de\u30fc\u30b8\u6e08\u307f\u3067\u3001\u6700\u65b0\u306e\u3082\u306e\u3092\u5229\u7528\u3059\u308c\u3070\u5148\u7a0b\u306e\u30a8\u30e9\u30fc\u306f\u767a\u751f\u3057\u307e\u305b\u3093\u3002\u3082\u3046\u3057\u3070\u3089\u304f\u5f85\u3063\u3066\u3001chainer1.16\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u3053\u306e\u82e6\u3057\u3044\u624b\u8a08\u7b97\u304b\u3089\u89e3\u653e\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\u3084\u3063\u305f\u305c\u3002\n\n\u8ffd\u8a18\n\u3000\u3055\u304d\u307b\u3069\u7d39\u4ecb\u3055\u305b\u3066\u9802\u3044\u305f\u30c4\u30a4\u30fc\u30c8\u306e\u65b9\u304b\u3089\u3002\n\n\u3000\u3084\u3063\u305f\u305c\u3002\n\u3000chainer\u306e[Convolution2D](http://docs.chainer.org/en/stable/reference/links.html#chainer.links.Convolution2D)\u3084[Linear](http://docs.chainer.org/en/stable/reference/links.html#chainer.links.Linear)\u306f\u3001\u5165\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u6570`in_channels`\u3084\u30ce\u30fc\u30c9\u6570`in_size`\u306bNone\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u6700\u521d\u306e\u30c7\u30fc\u30bf\u3092forward\u3057\u305f\u6642\u306b\u81ea\u52d5\u3067\u5408\u308f\u305b\u3066\u304f\u308c\u308b\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u5f15\u6570\u306e\u8aac\u660e\u3067\u8a00\u53ca\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u610f\u5916\u3068\u6c17\u3065\u304d\u306b\u304f\u3044\u3067\u3059\uff08chainer version 1.15.0.1\uff09\u3002\n\n> in_size (int) \u2013 Dimension of input vectors. If None, parameter initialization will be deferred until the first forward data pass at which time the size will be determined.\n\n\u3000\u3068\u308a\u3042\u3048\u305a\u8a66\u3057\u307e\u3059\u3002\n\n```python\nimport chainer\nimport numpy\n\n\nclass LinearLinear(chainer.Chain):\n    def __init__(self):\n        super().__init__(\n            linear1=chainer.functions.Linear(in_size=10, out_size=20),\n            linear2=chainer.functions.Linear(in_size=None, out_size=30),\n        )\n\n    def __call__(self, x):\n        h = self.linear1(x)\n        h = self.linear2(h)\n        return h\n\n\nlinearlinear = LinearLinear()\n\nx = numpy.random.rand(64, 10).astype(numpy.float32)\nh = linearlinear(x)\nprint(h.data.shape)  # (64, 30)\n```\n\n```python\nimport chainer\nimport numpy\n\n\nclass ConvConv(chainer.Chain):\n    def __init__(self):\n        super().__init__(\n            conv1=chainer.functions.Convolution2D(in_channels=4, out_channels=4, ksize=3),\n            conv2=chainer.functions.Convolution2D(in_channels=None, out_channels=3, ksize=3),\n        )\n\n    def __call__(self, x):\n        h = self.conv1(x)\n        h = self.conv2(h)\n        return h\n\n\nconvconv = ConvConv()\n\nx = numpy.random.rand(64, 4, 32, 32).astype(numpy.float32)\nh = convconv(x)\nprint(h.data.shape)  # (64, 3, 28, 28)\n```\n\n\u3000\u304a\u304b\u3052\u3055\u307e\u3067\u30b3\u30fc\u30c9\u306e\u5909\u66f4\u3092\u884c\u3044\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u3042\u308a\u304c\u305f\u3084\u3002\n\n\u3000\u3068\u3053\u308d\u3067\u3001\u5148\u307b\u3069\u3053\u306e\u3088\u3046\u306a\u3084\u308a\u53d6\u308a\u3092\u76ee\u306b\u3057\u307e\u3057\u305f\u3002\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Convolution\u304b\u3089Liner\u306b\u3064\u306a\u3050\u3068\u304d\u3001\u30ce\u30fc\u30c9\u6570\u306e\u6570\u307f\u3093\u306a\u624b\u3067\u8a08\u7b97\u3057\u3066\u308b\u306e\u304b\u306a\u3002\u7d50\u69cb\u3081\u3093\u3069\u304f\u3055\u3044\u30fb\u30fb\u30fb</p>&mdash; \u30d4\u30af\u30b7\u30a3 (@icoxfog417) <a href=\"https://twitter.com/icoxfog417/status/776323353728561152\">2016\u5e749\u670815\u65e5</a></blockquote><blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Chainer\u306fLinear\u306e\u5165\u529b\u30b5\u30a4\u30ba\u3092None\u306b\u3059\u308b\u3053\u3068\u3067\u624b\u8a08\u7b97\u3092\u7701\u3051\u308b\u3088\u3046\u306b\u6700\u8fd1\u306a\u308a\u307e\u3057\u305f <a href=\"https://t.co/vLhHy7QO78\">https://t.co/vLhHy7QO78</a></p>&mdash; \u30d3\u30fc\u30e0 | Seiya Tokui (@beam2d) <a href=\"https://twitter.com/beam2d/status/776414674560557056\">2016\u5e749\u670815\u65e5</a></blockquote>\n\n\u3000\u7279\u306b\u591a\u5c64\u306aConvolution\u306e\u51fa\u529b\u30ce\u30fc\u30c9\u6570\u3092\u8a08\u7b97\u3059\u308b\u306e\u306f\u304b\u306a\u308a\u9762\u5012\u306a\u305f\u3081\u3001Conv->Linear\u3067\u5165\u529b\u30ce\u30fc\u30c9\u6570\u3092\u7701\u3051\u308b\u306e\u306f\u5f85\u671b\u306e\u6a5f\u80fd\u3067\u3059\u3002\u3055\u3063\u305d\u304f\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```python\nimport chainer\nimport numpy\n\n\nclass ConvLinear(chainer.Chain):\n    def __init__(self):\n        super().__init__(\n            conv1=chainer.functions.Convolution2D(in_channels=4, out_channels=4, ksize=3),\n            linear2=chainer.functions.Linear(in_size=None, out_size=30),\n        )\n\n    def __call__(self, x):\n        h = self.conv1(x)\n        h = self.linear2(h)\n        return h\n\n\nconvlinear = ConvLinear()\n\nx = numpy.random.rand(64, 4, 32, 32).astype(numpy.float32)\nh = convlinear(x)\nprint(h.data.shape)\n\n# Invalid operation is performed in: LinearFunction (Forward)\n# Expect: prod(in_types[0].shape[1:]) == in_types[1].shape[1]\n# Actual: 3600 != 4\n```\n\n\u3000\u3093\u30fc\u30fb\u30fb\u30fb\uff1f\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3051\u3069\u3001\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3057\u305f\u3002\n\n\u3000\u539f\u56e0\u306f\u3055\u3066\u304a\u3044\u3066\u3001\u3084\u3063\u3071\u308a\u624b\u8a08\u7b97\u306f\u5fc5\u8981\u306a\u306e\u304b\u3068\u60b2\u89b3\u3059\u308b\u3053\u3068\u306f\u306a\u304f\u3001**`reshape`\u3092\u631f\u3093\u3067\u3042\u3052\u308b\u3068\u81ea\u52d5\u3067\u63a8\u5b9a\u3057\u3066\u304f\u308c\u307e\u3059**\u3002\n\n```python\nclass ConvLinear(chainer.Chain):\n    def __init__(self):\n        super().__init__(\n            conv1=chainer.functions.Convolution2D(in_channels=4, out_channels=4, ksize=3),\n            linear2=chainer.functions.Linear(in_size=None, out_size=30),\n        )\n\n    def __call__(self, x):\n        h = self.conv1(x)\n        h = chainer.functions.reshape(h, (h.data.shape[0], -1, 1))\n        h = self.linear2(h)\n        return h\n\n\nconvlinear = ConvLinear()\n\nx = numpy.random.rand(64, 4, 32, 32).astype(numpy.float32)\nh = convlinear(x)\nprint(h.data.shape)  # (64, 30)\n```\n\n\u3000\u3042\u308a\u304c\u305f\u3084\u3002\n\n\u3000\u3057\u304b\u3057\u5148\u307b\u3069\u306e\u30a8\u30e9\u30fc\u306f\u4f55\u304b\u3057\u3089\u306e\u624b\u9055\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u30b3\u30df\u30c3\u30c8\u30c1\u30e3\u30f3\u30b9\u3067\u3059\u3002\u305d\u3057\u3066\u304a\u305d\u3089\u304f[\u3053\u306e\u8fba\u308a](https://github.com/pfnet/chainer/blob/1dd699fa0a7da737b03c089bee4834e8a1ed3cc5/chainer/links/connection/linear.py#L85)\u3067\u3059\u3002\u3057\u304b\u3057\u3053\u308c\u306f[\u3053\u306e\u30b3\u30df\u30c3\u30c8](https://github.com/pfnet/chainer/pull/1551/commits/a86166c3036d8eacb1c6fd913c687fa9ae78c4cf)\u3067\u4fee\u6b63\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3046\u30fc\u3093\u3001\u6b8b\u5ff5\u3002\uff08\uff1f\uff09\n\n\u3000[\u3053\u306e\u30b3\u30df\u30c3\u30c8\u3092\u542b\u3080PR](https://github.com/pfnet/chainer/pull/1551)\u306f\u73fe\u5728master\u306b\u30de\u30fc\u30b8\u6e08\u307f\u3067\u3001\u6700\u65b0\u306e\u3082\u306e\u3092\u5229\u7528\u3059\u308c\u3070\u5148\u7a0b\u306e\u30a8\u30e9\u30fc\u306f\u767a\u751f\u3057\u307e\u305b\u3093\u3002\u3082\u3046\u3057\u3070\u3089\u304f\u5f85\u3063\u3066\u3001chainer1.16\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u3053\u306e\u82e6\u3057\u3044\u624b\u8a08\u7b97\u304b\u3089\u89e3\u653e\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\u3084\u3063\u305f\u305c\u3002\n\n### \u8ffd\u8a18\n\u3000\u3055\u304d\u307b\u3069\u7d39\u4ecb\u3055\u305b\u3066\u9802\u3044\u305f\u30c4\u30a4\u30fc\u30c8\u306e\u65b9\u304b\u3089\u3002\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/hiho_karuta\">@hiho_karuta</a> qiita\u8a18\u4e8b\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3001\u50d5\u306e\u78ba\u8a8d\u4e0d\u8db3\u3067\u305d\u3053\u306e\u5bfe\u5fdc\u306f\u304a\u3063\u3057\u3083\u308b\u901a\u308a\u6b21\u30ea\u30ea\u30fc\u30b9\u3067\u3057\u305f\u3002\u706b\u66dc\u65e5\u307e\u3067\u5f85\u3063\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u2026\u2026\uff01(\u66f8\u3044\u3066\u3044\u305f\u3060\u3044\u305f\u901a\u308areshape\u631f\u3081\u3070\u3044\u307e\u3067\u3082\u4f7f\u3048\u307e\u3059\u306d)</p>&mdash; \u30d3\u30fc\u30e0 | Seiya Tokui (@beam2d) <a href=\"https://twitter.com/beam2d/status/776534639733112832\">2016\u5e749\u670815\u65e5</a></blockquote>\n\n\u3000\u3084\u3063\u305f\u305c\u3002\n"}