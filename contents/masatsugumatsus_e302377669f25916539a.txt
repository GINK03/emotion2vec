{"context": " More than 1 year has passed since last update.Go\u8a00\u8a9e\u3067DI\u3092\u4f7f\u3063\u3066\u307f\u308b\u3002\n\n\u5229\u7528\u3059\u308bFW\n\nmithril.js\u3000https://lhorie.github.io/mithril/\n\nGin(golang) https://gin-gonic.github.io/gin/\n\ngenmai(go\u306edb\u30a2\u30af\u30bb\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea) https://github.com/naoina/genmai\n\ngolang\u7528sqlite\u30c9\u30e9\u30a4\u30d0 https://github.com/mattn/go-sqlite3\n\nHotReload\u7528 https://github.com/skelterjohn/rerun\n\nDI\u30e9\u30a4\u30d6\u30e9\u30ea https://github.com/facebookgo/inject\n\n\n\n\u30a2\u30d7\u30ea\u8aac\u660e\n\u4e0b\u8a18\u3092\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\nMithril\uff0bgolang Gin \u3092\u8a66\u3059\n\n\u30b3\u30fc\u30c9\n\njson\u3068DB\u30a2\u30af\u30bb\u30b9\u3067\u4f7f\u3046\u69cb\u9020\u4f53 $GOPATH/src/app/model/todo.go\n\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u524d\u3068\u5909\u5316\u306a\u3057\u3002\n\n\ntodo.go\npackage model\n\ntype Todo struct {\n    Id int64 `db:\"pk\" json:\"id\"`\n    Description string `json:\"description\"`\n    Done bool `json:\"done\"`\n}\n\n\n\n\ndb\u30a2\u30af\u30bb\u30b9\n\nDB\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30b3\u30fc\u30c3\u30c9\u3092interface\u3067\u62bd\u8c61\u5316\u3059\u308b\u3002\nrepository $GOPATH/src/app/repo/repo.go\n\n\nrepo.go\npackage repo\nimport \"app/model\"\n\ntype Repo interface{\n    FindAll() []model.Todo\n    Save(todo *model.Todo)\n}\n\n\n\n\nDB\u30a2\u30af\u30bb\u30b9\u7528\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3002\n\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u4f7f\u308f\u306a\u3044\u3088\u3046\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\n\n\ndb.go\npackage db\nimport (\n    _ \"github.com/mattn/go-sqlite3\"\n    \"github.com/naoina/genmai\"\n    \"app/model\"\n    \"github.com/gin-gonic/gin\"\n    \"fmt\"\n)\nfunc InitDB() *genmai.DB {\n\n    DB, err := genmai.New(&genmai.SQLite3Dialect{}, \":memory:\")\n    if err != nil {\n        panic(err)\n    }\n\n    if err := DB.CreateTable(&model.Todo{}); err != nil {\n        panic(err)\n    }\n\n    initData := []model.Todo{\n        {1, \"\u306a\u3093\u304b\u3084\u308b\", false},\n        {2, \"\u306a\u3093\u304b\u3084\u308b2\", true},\n    }\n    if _, err = DB.Insert(&initData); err != nil {\n        panic(err)\n    }\n\n    return DB\n}\n\n/**\n\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5236\u5fa1\u306e\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\n */\nfunc  GetTransactionHandlerFunc(DB *genmai.DB) gin.HandlerFunc {\n    return func(c *gin.Context) {\n        defer func() {\n            if err := recover(); err != nil {\n                fmt.Println(\"END TRANSACTION ROLLBACK\")\n                DB.Rollback()\n                panic(err)\n            } else {\n\n                DB.Commit()\n                fmt.Println(\"END TRANSACTION COMMIT\")\n            }\n        }()\n\n        fmt.Println(\"START TRANSACTION\")\n        if err := DB.Begin(); err != nil {\n            panic(err)\n        }\n\n        c.Next()\n\n    }\n}\n\n\n\nreposigory\u306e\u5b9f\u88c5\u3002\n\n\nrepo.go\npackage db\nimport (\n    \"app/model\"\n    \"github.com/naoina/genmai\"\n)\n\ntype RepoDbImpl struct {\n    DB *genmai.DB `inject:\"\"`\n}\n\nfunc (r *RepoDbImpl) FindAll() []model.Todo {\n\n    var todos []model.Todo\n    if err := r.DB.Select(&todos, r.DB.OrderBy(\"id\", genmai.ASC)); err != nil {\n        panic(err)\n    }\n    return todos\n}\n\nfunc (r *RepoDbImpl) Save(todo *model.Todo) {\n\n    if num, err := r.DB.Update(todo); err != nil {\n        panic(err)\n\n    }else if num == 0 {\n        if  _, err := r.DB.Insert(todo);err != nil {\n            panic(err)\n        }\n    }\n\n}\n\n\n\n\nmain\u306b\u66f8\u3044\u3066\u3044\u305f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u8a18\u8ff0\u3092\u5225\u30d1\u30c3\u30c3\u30b1\u30fc\u30b8\u306b\u5207\u308a\u51fa\u3059\u3002 $GOPATH/src/app/ctrl/todoCtrl.go\n\n\ntodoCtrl.go\npackage ctrl\nimport (\n    \"app/repo\"\n    \"github.com/gin-gonic/gin\"\n    \"net/http\"\n    \"app/model\"\n)\n\ntype BaseCtrl struct {\n    Repo repo.Repo `inject:\"\"`\n}\n\nfunc (base *BaseCtrl) Index(c *gin.Context) {\n\n    c.HTML(http.StatusOK, \"index.html\", nil)\n}\n\nfunc (base *BaseCtrl) GetTodo(c *gin.Context) {\n\n    c.JSON(http.StatusOK, base.Repo.FindAll())\n}\n\nfunc (base *BaseCtrl) AddTodo(c *gin.Context) {\n\n    var todo model.Todo\n    if c.BindJSON(&todo) == nil {\n\n        base.Repo.Save(&todo)\n        c.JSON(http.StatusOK, todo)\n\n    }else {\n        c.JSON(http.StatusBadRequest, nil)\n    }\n\n}\n\n\n\n\n\nmain\u3067\u306f\u521d\u671f\u5316,DI,\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u8a18\u8ff0 $GOPATH/src/app/main/app.go\n\n\nmain.go\n\npackage main\nimport (\n    \"github.com/gin-gonic/gin\"\n    \"app/db\"\n    \"github.com/facebookgo/inject\"\n    \"app/ctrl\"\n)\n\nfunc main() {\n\n    r := gin.Default()\n    r.Static(\"/static\", \"static\")\n    r.LoadHTMLGlob(\"templates/*\")\n\n    //db\u306e\u521d\u671f\u5316\n    DB:=db.InitDB()\n    r.Use(db.GetTransactionHandlerFunc(DB))\n\n\n    //\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306eDI\n    ctrl := new(ctrl.BaseCtrl)\n    if err := inject.Populate(ctrl, new(db.RepoDbImpl),db.DB); err != nil {\n        panic(err)\n    }\n\n    r.GET(\"/\", ctrl.Index)\n    r.GET(\"/todo\", ctrl.GetTodo)\n    r.POST(\"/todo\", ctrl.AddTodo)\n\n    r.Run(\":9000\")\n\n}\n\n\n\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30da\u30fc\u30b8\uff08html\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\uff09\n$GOPATH/templates/index.html\n\n\nindex.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"/static/js/mithril.min.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n    <title>Mithril TODO</title>\n</head>\n<body>\n<div id=\"$contents\"></div>\n\n<script type=\"text/javascript\">\n    //todo component\n    var todo = {};\n    //model\n    todo.Todo = function (data) {\n        this.description = m.prop(data.description);\n        this.done = m.prop(data.done);\n    };\n\n    todo.TodoList = Array;\n\n    //define the view-model\n    todo.vm = (function () {\n        var vm = {}\n        vm.init = function () {\n            //a running list of todos\n            vm.list = new todo.TodoList();\n\n            //a slot to store the name of a new todo before it is created\n            vm.description = m.prop(\"\");\n\n            //init\n            m.request({method: \"GET\", url: \"/todo\"}).then(function (todoList) {\n\n                todoList.forEach(function (v) {\n                    vm.list.push(new todo.Todo({description: v.description, done: v.done}));\n                });\n\n            });\n\n            vm.add = function () {\n                if (vm.description()) {\n\n                    m.request({\n                        method: \"POST\",\n                        url: \"/todo\",\n                        data: {id:t.id,description: vm.description()}\n                    }).then(function (t) {\n\n                        vm.list.push(new todo.Todo({id:t.id,description: t.description}));\n\n                        vm.description(\"\");\n\n                    },function(error){\n                        console.log(\"error \");\n                    });\n                }\n            };\n            vm.update = function (task) {\n\n                m.request({\n                    method: \"POST\",\n                    url: \"/todo\",\n                    data: {id: task.id(),\n                           description:task.description(),\n                           done:task.done()}\n                }).then(function () {\n                    console.log(\"updated\");\n                }, function (error) {\n                    console.log(\"error \");\n                });\n            };\n\n        }\n        return vm\n    }())\n\n    todo.controller = function () {\n        todo.vm.init()\n    }\n\n    todo.view = function () {\n        return m(\"div\", [\n            m(\"input\", {onchange: m.withAttr(\"value\", todo.vm.description), value: todo.vm.description(),}),\n            m(\"button\", {onclick: todo.vm.add}, \"Add\"),\n            m(\"table\", [\n                todo.vm.list.map(function (task, index) {\n                    return m(\"tr\", [\n                        m(\"td\", [\n                            m(\"input[type=checkbox]\",\n                               {\n                               onclick:function (e) {\n                                    task.done(e.target.checked)\n                                    todo.vm.update(task)\n                                }\n                               ,checked: task.done()\n                               })\n                        ]),\n                        m(\"td\", {style: {textDecoration: task.done() ? \"line-through\" : \"none\"}}, task.description()),\n                    ])\n                })\n            ])\n        ]);\n    };\n    m.mount($contents, {controller: todo.controller, view: todo.view});\n</script>\n</body>\n</html>\n\n\n\n\nmithril\u306e\u7f6e\u304d\u5834\n$GOPATH/static/mithril.js\n\n\n\u5b9f\u884c\nrerun app/main\n\n\n\u611f\u60f3\n\u304b\u306a\u308a\u3059\u3063\u304d\u308a\u3057\u305f\u3002\nGo\u8a00\u8a9e\u3067DI\u3092\u4f7f\u3063\u3066\u307f\u308b\u3002\n\n##\u5229\u7528\u3059\u308bFW\n- mithril.js\u3000https://lhorie.github.io/mithril/\n- Gin(golang) https://gin-gonic.github.io/gin/\n- genmai(go\u306edb\u30a2\u30af\u30bb\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea) https://github.com/naoina/genmai\n- golang\u7528sqlite\u30c9\u30e9\u30a4\u30d0 https://github.com/mattn/go-sqlite3\n- HotReload\u7528 https://github.com/skelterjohn/rerun\n- DI\u30e9\u30a4\u30d6\u30e9\u30ea https://github.com/facebookgo/inject\n\n##\u30a2\u30d7\u30ea\u8aac\u660e\n\u4e0b\u8a18\u3092\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\n[Mithril\uff0bgolang Gin \u3092\u8a66\u3059](http://qiita.com/masatsugumatsus/items/e28254ff52963705ce7f)\n\n##\u30b3\u30fc\u30c9\n- json\u3068DB\u30a2\u30af\u30bb\u30b9\u3067\u4f7f\u3046\u69cb\u9020\u4f53 $GOPATH/src/app/model/todo.go\n- \u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u524d\u3068\u5909\u5316\u306a\u3057\u3002\n\n```go:todo.go\npackage model\n\ntype Todo struct {\n\tId int64 `db:\"pk\" json:\"id\"`\n\tDescription string `json:\"description\"`\n\tDone bool `json:\"done\"`\n}\n\n```\n###db\u30a2\u30af\u30bb\u30b9\n- DB\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30b3\u30fc\u30c3\u30c9\u3092interface\u3067\u62bd\u8c61\u5316\u3059\u308b\u3002\n- repository $GOPATH/src/app/repo/repo.go\n\n```go:repo.go\npackage repo\nimport \"app/model\"\n\ntype Repo interface{\n\tFindAll() []model.Todo\n\tSave(todo *model.Todo)\n}\n\n```\n- DB\u30a2\u30af\u30bb\u30b9\u7528\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3002\n- \u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u4f7f\u308f\u306a\u3044\u3088\u3046\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\n\n```go:db.go\npackage db\nimport (\n\t_ \"github.com/mattn/go-sqlite3\"\n\t\"github.com/naoina/genmai\"\n\t\"app/model\"\n\t\"github.com/gin-gonic/gin\"\n\t\"fmt\"\n)\nfunc InitDB() *genmai.DB {\n\n\tDB, err := genmai.New(&genmai.SQLite3Dialect{}, \":memory:\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := DB.CreateTable(&model.Todo{}); err != nil {\n\t\tpanic(err)\n\t}\n\n\tinitData := []model.Todo{\n\t\t{1, \"\u306a\u3093\u304b\u3084\u308b\", false},\n\t\t{2, \"\u306a\u3093\u304b\u3084\u308b2\", true},\n\t}\n\tif _, err = DB.Insert(&initData); err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn DB\n}\n\n/**\n\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5236\u5fa1\u306e\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\n */\nfunc  GetTransactionHandlerFunc(DB *genmai.DB) gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tdefer func() {\n\t\t\tif err := recover(); err != nil {\n\t\t\t\tfmt.Println(\"END TRANSACTION ROLLBACK\")\n\t\t\t\tDB.Rollback()\n\t\t\t\tpanic(err)\n\t\t\t} else {\n\n\t\t\t\tDB.Commit()\n\t\t\t\tfmt.Println(\"END TRANSACTION COMMIT\")\n\t\t\t}\n\t\t}()\n\n\t\tfmt.Println(\"START TRANSACTION\")\n\t\tif err := DB.Begin(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tc.Next()\n\n\t}\n}\n```\n\n- reposigory\u306e\u5b9f\u88c5\u3002\n\n```go:repo.go\npackage db\nimport (\n\t\"app/model\"\n\t\"github.com/naoina/genmai\"\n)\n\ntype RepoDbImpl struct {\n\tDB *genmai.DB `inject:\"\"`\n}\n\nfunc (r *RepoDbImpl) FindAll() []model.Todo {\n\n\tvar todos []model.Todo\n\tif err := r.DB.Select(&todos, r.DB.OrderBy(\"id\", genmai.ASC)); err != nil {\n\t\tpanic(err)\n\t}\n\treturn todos\n}\n\nfunc (r *RepoDbImpl) Save(todo *model.Todo) {\n\n\tif num, err := r.DB.Update(todo); err != nil {\n\t\tpanic(err)\n\n\t}else if num == 0 {\n\t\tif  _, err := r.DB.Insert(todo);err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n\n}\n\n```\n\n\n\n- main\u306b\u66f8\u3044\u3066\u3044\u305f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u8a18\u8ff0\u3092\u5225\u30d1\u30c3\u30c3\u30b1\u30fc\u30b8\u306b\u5207\u308a\u51fa\u3059\u3002 $GOPATH/src/app/ctrl/todoCtrl.go\n\n```go:todoCtrl.go\npackage ctrl\nimport (\n\t\"app/repo\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n\t\"app/model\"\n)\n\ntype BaseCtrl struct {\n\tRepo repo.Repo `inject:\"\"`\n}\n\nfunc (base *BaseCtrl) Index(c *gin.Context) {\n\n\tc.HTML(http.StatusOK, \"index.html\", nil)\n}\n\nfunc (base *BaseCtrl) GetTodo(c *gin.Context) {\n\n\tc.JSON(http.StatusOK, base.Repo.FindAll())\n}\n\nfunc (base *BaseCtrl) AddTodo(c *gin.Context) {\n\n\tvar todo model.Todo\n\tif c.BindJSON(&todo) == nil {\n\n\t\tbase.Repo.Save(&todo)\n\t\tc.JSON(http.StatusOK, todo)\n\n\t}else {\n\t\tc.JSON(http.StatusBadRequest, nil)\n\t}\n\n}\n\n\n```\n\n- main\u3067\u306f\u521d\u671f\u5316,DI,\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u8a18\u8ff0 $GOPATH/src/app/main/app.go\n\n```go:main.go\n\npackage main\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"app/db\"\n\t\"github.com/facebookgo/inject\"\n\t\"app/ctrl\"\n)\n\nfunc main() {\n\n\tr := gin.Default()\n\tr.Static(\"/static\", \"static\")\n\tr.LoadHTMLGlob(\"templates/*\")\n\n\t//db\u306e\u521d\u671f\u5316\n\tDB:=db.InitDB()\n\tr.Use(db.GetTransactionHandlerFunc(DB))\n\n\n\t//\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306eDI\n\tctrl := new(ctrl.BaseCtrl)\n\tif err := inject.Populate(ctrl, new(db.RepoDbImpl),db.DB); err != nil {\n\t\tpanic(err)\n\t}\n\n\tr.GET(\"/\", ctrl.Index)\n\tr.GET(\"/todo\", ctrl.GetTodo)\n\tr.POST(\"/todo\", ctrl.AddTodo)\n\n\tr.Run(\":9000\")\n\n}\n\n```\n\n- \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30da\u30fc\u30b8\uff08html\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\uff09\n$GOPATH/templates/index.html\n\n```html:index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"/static/js/mithril.min.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n    <title>Mithril TODO</title>\n</head>\n<body>\n<div id=\"$contents\"></div>\n\n<script type=\"text/javascript\">\n    //todo component\n    var todo = {};\n    //model\n    todo.Todo = function (data) {\n        this.description = m.prop(data.description);\n        this.done = m.prop(data.done);\n    };\n\n    todo.TodoList = Array;\n\n    //define the view-model\n    todo.vm = (function () {\n        var vm = {}\n        vm.init = function () {\n            //a running list of todos\n            vm.list = new todo.TodoList();\n\n            //a slot to store the name of a new todo before it is created\n            vm.description = m.prop(\"\");\n\n            //init\n            m.request({method: \"GET\", url: \"/todo\"}).then(function (todoList) {\n\n                todoList.forEach(function (v) {\n                    vm.list.push(new todo.Todo({description: v.description, done: v.done}));\n                });\n\n            });\n\n            vm.add = function () {\n                if (vm.description()) {\n\n                    m.request({\n                        method: \"POST\",\n                        url: \"/todo\",\n                        data: {id:t.id,description: vm.description()}\n                    }).then(function (t) {\n\n                        vm.list.push(new todo.Todo({id:t.id,description: t.description}));\n\n                        vm.description(\"\");\n\n                    },function(error){\n                        console.log(\"error \");\n                    });\n                }\n            };\n            vm.update = function (task) {\n\n                m.request({\n                    method: \"POST\",\n                    url: \"/todo\",\n                    data: {id: task.id(),\n                           description:task.description(),\n                           done:task.done()}\n                }).then(function () {\n                    console.log(\"updated\");\n                }, function (error) {\n                    console.log(\"error \");\n                });\n            };\n          \n        }\n        return vm\n    }())\n\n    todo.controller = function () {\n        todo.vm.init()\n    }\n\n    todo.view = function () {\n        return m(\"div\", [\n            m(\"input\", {onchange: m.withAttr(\"value\", todo.vm.description), value: todo.vm.description(),}),\n            m(\"button\", {onclick: todo.vm.add}, \"Add\"),\n            m(\"table\", [\n                todo.vm.list.map(function (task, index) {\n                    return m(\"tr\", [\n                        m(\"td\", [\n                            m(\"input[type=checkbox]\",\n                               {\n                               onclick:function (e) {\n                                    task.done(e.target.checked)\n                                    todo.vm.update(task)\n                                }\n                               ,checked: task.done()\n                               })\n                        ]),\n                        m(\"td\", {style: {textDecoration: task.done() ? \"line-through\" : \"none\"}}, task.description()),\n                    ])\n                })\n            ])\n        ]);\n    };\n    m.mount($contents, {controller: todo.controller, view: todo.view});\n</script>\n</body>\n</html>\n\n```\n\n- mithril\u306e\u7f6e\u304d\u5834\n$GOPATH/static/mithril.js\n\n##\u5b9f\u884c\n```\nrerun app/main\n```\n\n##\u611f\u60f3\n\u304b\u306a\u308a\u3059\u3063\u304d\u308a\u3057\u305f\u3002\n", "tags": ["Mithril.js", "gin", "DI", "DependencyInjection", "Go"]}