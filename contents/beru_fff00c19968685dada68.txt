{"context": "SSE\u3084AVX\u306eintrinsics\u95a2\u6570\u3092\u4f7f\u3063\u305f\u6c34\u5e73\u52a0\u7b97\u51e6\u7406\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\n__m128\u578b\u306e\u5834\u5408\u306f32bit\u306e\u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570(float)\u304c4\u8981\u7d20\u3001__m256\u578b\u306e\u5834\u5408\u306ffloat\u304c8\u8981\u7d20\u3001\u5909\u6570\u5185\u306b\u4fdd\u6301\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306eC++\u30b3\u30e1\u30f3\u30c8\u306f\u5168\u51e6\u7406\u306b\u5171\u901a\u3059\u308b\u524d\u66f8\u304d\u3067\u3059\u3002\n// Horizontal sum routines\n// '-' lanes of returned value are not meant to be used by caller\n// (      lane4,     lane3,     lane2,    lane1 )\n// ( bits96-127, bits64-95, bits32-63, bits0-31 )\n\n\u51e6\u7406\u7d50\u679c\u306e\u623b\u308a\u5024\u306e\u3046\u3061\u3001\u7279\u5b9a\u306e\u7bc4\u56f2\u306e\u30ec\u30fc\u30f3\u306e\u5024\u306e\u307f\u4f7f\u308f\u308c\u308b\u4e8b\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u4f7f\u308f\u308c\u306a\u3044\u5024\u30920\u306b\u8a2d\u5b9a\u3059\u308b\u51e6\u7406\u3092\u308f\u3056\u308f\u3056\u5165\u308c\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u4e8b\u3067\u3059\u3002\nAVX\u306eYMM\u30ec\u30b8\u30b9\u30bf\u306e\u3046\u3061\u4e0b\u4f4d128bit\u3068\u4e0a\u4f4d128bit\u305d\u308c\u305e\u308c\u304c\u30ec\u30fc\u30f3\u3068\u547c\u3070\u308c\u308b\u4e8b\u304c\u591a\u3044\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f32bit\u306efloat\u8981\u7d20\u5358\u4f4d\u3067\u30ec\u30fc\u30f3\u3068\u547c\u3093\u3067\u3044\u307e\u3059\u3002\n\u5404\u51e6\u7406\u6bce\u306b\u3069\u3093\u306a\u98a8\u306b\u5024\u304c\u5909\u5316\u3059\u308b\u304b\u3092\u8a73\u7d30\u306b\u30b3\u30e1\u30f3\u30c8\u3067\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\u305d\u3046\u3057\u306a\u3044\u3068\u5f8c\u3067\u898b\u305f\u6642\u306b\u8a33\u304c\u5206\u304b\u3089\u306a\u304f\u306a\u308b\u306e\u3067\u3002\u3002\n\n__m128 \u578b\u306e\u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u65704\u8981\u7d20\u306e\u5408\u8a08\u51e6\u7406\n\nSSSE3\u306ehaddps\u547d\u4ee4\u3092\u4f7f\u3063\u305f\u7248\n_mm_hadd_ps \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001haddps \u547d\u4ee4\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n// in  : ( x3, x2, x1, x0 )\n// out : (  -,  -,  -, x3+x2+x1+x0 )\ninline __m128 hsum128_ps_naive(__m128 x)\n{\n    // a = ( x3+x2, x1+x0, x3+x2, x1+x0 )\n    __m128 a = _mm_hadd_ps(x, x);\n    // a = ( x3+x2+x1+x0, x3+x2+x1+x0, x3+x2+x1+x0, x3+x2+x1+x0 )\n    a = _mm_hadd_ps(a, a);\n    return a;\n}\n\n\nSSSE3\u306ehaddps\u547d\u4ee4\u3092\u4f7f\u308f\u306a\u3044\u7248\nhaddps\u547d\u4ee4\u306f\u6b8b\u5ff5\u306a\u304c\u3089\u9045\u3044\u3089\u3057\u304f\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u51e6\u7406\u3057\u305f\u65b9\u304c\u901f\u3044\u3088\u3046\u3067\u3059\u3002\n// in  : ( x3, x2, x1, x0 )\n// out : (  -,  -,  -, x3+x2+x1+x0 )\ninline __m128 hsum128_ps(__m128 x)\n{\n    // loDual = ( -, -, x1, x0 )\n    const __m128 loDual = x;\n    // hiDual = ( -, -, x3, x2 )\n    const __m128 hiDual = _mm_movehl_ps(x, x);\n    // sumDual = ( -, -, x1+x3, x0+x2 )\n    const __m128 sumDual = _mm_add_ps(loDual, hiDual);\n    // lo = ( -, -, -, x0+x2 )\n    const __m128 lo = sumDual;\n    // hi = ( -, -, -, x1+x3 )\n    const __m128 hi = _mm_shuffle_ps(sumDual, sumDual, 0x1);\n    // sum = ( -, -, -, x0+x1+x2+x3 )\n    const __m128 sum = _mm_add_ss(lo, hi);\n    return sum;\n}\n\n\n__m256 \u578b\u306e\u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u65708\u8981\u7d20\u306e\u5408\u8a08\u51e6\u7406\n\u3053\u3061\u3089\u306fYMM\u30ec\u30b8\u30b9\u30bf\u7528\u306e\u51e6\u7406\u3067\u3059\u3002\n// in  : ( x7, x6, x5, x4, x3, x2, x1, x0 )\n// out : ( -,  -,  -, xsum )\ninline __m128 hsum256_ps(__m256 x) {\n    // hiQuad = ( x7, x6, x5, x4 )\n    const __m128 hiQuad = _mm256_extractf128_ps(x, 1);\n    // loQuad = ( x3, x2, x1, x0 )\n    const __m128 loQuad = _mm256_castps256_ps128(x);\n    // sumQuad = ( x3+x7, x2+x6, x1+x5, x0+x4 )\n    const __m128 sumQuad = _mm_add_ps(loQuad, hiQuad);\n    // loDual = ( -, -, x1+x5, x0+x4 )\n    const __m128 loDual = sumQuad;\n    // hiDual = ( -, -, x3+x7, x2+x6 )\n    const __m128 hiDual = _mm_movehl_ps(sumQuad, sumQuad);\n    // sumDual = ( -, -, x1+x3 + x5+x7, x0+x2 + x4+x6 )\n    const __m128 sumDual = _mm_add_ps(loDual, hiDual);\n    // lo = ( -, -, -, x0+x2 + x4+x6 )\n    const __m128 lo = sumDual;\n    // hi = ( -, -, -, x1+x3 + x5+x7 )\n    const __m128 hi = _mm_shuffle_ps(sumDual, sumDual, 0x1);\n    // sum = ( -, -, -, x0+x1+x2+x3 + x4+x5+x6+x7 )\n    const __m128 sum = _mm_add_ss(lo, hi);\n    return sum;\n}\n\n\n__m256 \u578b\u306e\u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u65708\u8981\u7d20\u306e\u5408\u8a08\u51e6\u7406\u30012\u5909\u6570\u307e\u3068\u3081\u3066\n2\u5909\u6570\u307e\u3068\u3081\u3066\u51e6\u7406\u3059\u308b\u3068\u30011\u5909\u6570\u7528\u306e\u51e6\u7406\u30922\u56de\u547c\u3073\u51fa\u3059\u306e\u306b\u6bd4\u3079\u3066\u547d\u4ee4\u6570\u304c\u524a\u6e1b\u51fa\u6765\u3066\u901f\u304f\u306a\u308a\u307e\u3059\u3002\n\n// Horizontally add elements of each __m256 type arguments at once\n// in a : ( a7, a6, a5, a4, a3, a2, a1, a0 )\n// in b : ( b7, b6, b5, b4, b3, b2, b1, b0 )\n// out  : ( -, -, bsum, asum )\ninline __m128 hsum2x256_ps(__m256 a, __m256 b) {\n    // (b3, b2, b1, b0, a3, a2, a1, a0)\n    __m256 x = _mm256_permute2f128_ps(a, b, 0x20);\n    // (b7, b6, b5, b4, a7, a6, a5, a4)\n    __m256 y = _mm256_permute2f128_ps(a, b, 0x31);\n    // (b3+b7, b2+b6, b1+b5, b0+b4, a3+a7, a2+a6, a1+a5, a0+a4)\n    x = _mm256_add_ps(x, y);\n    // (-, -, b3+b7, b2+b6, -, -, a3+a7, a2+a6)\n    y = _mm256_permute_ps(x, _MM_SHUFFLE(3, 2, 3, 2));\n    // (-, -, b1+b5+b3+b7, b0+b4+b2+b6, -, -, a1+a5+a3+a7, a0+a4+a2+a6)\n    x = _mm256_add_ps(x, y);\n    // (-, -, -, b1+b5+b3+b7, -, -, -, a1+a5+a3+a7)\n    y = _mm256_permute_ps(x, _MM_SHUFFLE(1, 1, 1, 1));\n    // (-, -, -, b1+b5+b3+b7+b0+b4+b2+b6, -, -, -, a1+a5+a3+a7+a0+a4+a2+a6)\n    x = _mm256_add_ps(x, y);\n    // (-, -, -, b1+b5+b3+b7+b0+b4+b2+b6)\n    __m128 upper = _mm256_extractf128_ps(x, 1);\n    // (-, -, -, -, -, -, b1+b5+b3+b7+b0+b4+b2+b6, a1+a5+a3+a7+a0+a4+a2+a6)\n    __m128 ret = _mm_unpacklo_ps(_mm256_castps256_ps128(x), upper);\n    return ret;\n}\n\n\n\n__m256 \u578b\u306e\u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u65708\u8981\u7d20\u306e\u5408\u8a08\u51e6\u7406\u30014\u5909\u6570\u307e\u3068\u3081\u3066\n4\u5909\u6570\u307e\u3068\u3081\u3066\u51e6\u7406\u3059\u308b\u3068\u30012\u5909\u6570\u7528\u306e\u51e6\u7406\u30922\u56de\u547c\u3073\u51fa\u3059\u306e\u306b\u6bd4\u3079\u3066\u547d\u4ee4\u6570\u304c\u524a\u6e1b\u51fa\u6765\u3066\u901f\u304f\u306a\u308a\u307e\u3059\u3002\n\n// Horizontally add elements of each __m256 type arguments at once\n// in a : ( a7, a6, a5, a4, a3, a2, a1, a0 )\n// in b : ( b7, b6, b5, b4, b3, b2, b1, b0 )\n// in c : ( c7, c6, c5, c4, c3, c2, c1, c0 )\n// in d : ( d7, d6, d5, d4, d3, d2, d1, d0 )\n// out  : ( dsum, csum, bsum, asum )\ninline __m128 hsum4x256_ps(__m256 a, __m256 b, __m256 c, __m256 d) {\n\n    // (b3,b2,b1,b0, a3,a2,a1,a0)\n    __m256 w = _mm256_permute2f128_ps(a, b, 0x20);\n    // (b7,b6,b5,b4, a7,a6,a5,a4)\n    __m256 x = _mm256_permute2f128_ps(a, b, 0x31);\n    // (d3,d2,d1,d0, c3,c2,c1,c0)\n    __m256 y = _mm256_permute2f128_ps(c, d, 0x20);\n    // (d7,d6,d5,d4, c7,c6,c5,c4)\n    __m256 z = _mm256_permute2f128_ps(c, d, 0x31);\n\n    // (b3,b2,b1,b0, a3,a2,a1,a0)\n    // (b7,b6,b5,b4, a7,a6,a5,a4)\n    w = _mm256_add_ps(w, x);\n    // (-,-,b3,b2, -,-,a3,a2)\n    // (-,-,b7,b6, -,-,a7,a6)\n    x = _mm256_permute_ps(w, _MM_SHUFFLE(3, 2, 3, 2));\n    // (-,-,b1,b0, -,-,a1,a0)\n    // (-,-,b5,b4, -,-,a5,a4)\n    // (-,-,b3,b2, -,-,a3,a2)\n    // (-,-,b7,b6, -,-,a7,a6)\n    w = _mm256_add_ps(w, x);\n\n    // (d3,d2,d1,d0, c3,c2,c1,c0)\n    // (d7,d6,d5,d4, c7,c6,c5,c4)\n    y = _mm256_add_ps(y, z);\n    // (-,-,d3,d2, -,-,c3,c2)\n    // (-,-,d7,d6, -,-,c7,c6)\n    z = _mm256_permute_ps(y, _MM_SHUFFLE(3, 2, 3, 2));\n    // (-,-,d1,d0, -,-,c1,c0)\n    // (-,-,d5,d4, -,-,c5,c4)\n    // (-,-,d3,d2, -,-,c3,c2)\n    // (-,-,d7,d6, -,-,c7,c6)\n    z = _mm256_add_ps(y, z);\n\n    // d1,d0,b1,b0, c1,c0,a1,a0)\n    // d5,d4,b5,b4, c5,c4,a5,a4)\n    // d3,d2,b3,b2, c3,c2,a3,a2)\n    // d7,d6,b7,b6, c7,c6,a7,a6)\n    w = _mm256_castpd_ps(_mm256_unpacklo_pd(_mm256_castps_pd(w), _mm256_castps_pd(z)));\n\n    // (d0,d1,b0,b1, c0,c1,a0,a1)\n    // (d4,d5,b4,b5, c4,c5,a4,a5)\n    // (d2,d3,b2,b3, c2,c3,a2,a3)\n    // (d6,d7,b6,b7, c6,c7,a6,a7)\n    x = _mm256_permute_ps(w, _MM_SHUFFLE(2, 3, 0, 1));\n\n    // (d1,d1,b1,b1, c1,c1,a1,a1)\n    // (d5,d5,b5,b5, c5,c5,a5,a5)\n    // (d3,d3,b3,b3, c3,c3,a3,a3)\n    // (d7,d7,b7,b7, c7,c7,a7,a7)\n    // (d0,d0,b0,b0, c0,c0,a0,a0)\n    // (d4,d4,b4,b4, c4,c4,a4,a4)\n    // (d2,d2,b2,b2, c2,c2,a2,a2)\n    // (d6,d6,b6,b6, c6,c6,a6,a6)\n    w = _mm256_add_ps(w, x);\n\n    // (d1,d1,b1,b1)\n    // (d5,d5,b5,b5)\n    // (d3,d3,b3,b3)\n    // (d7,d7,b7,b7)\n    // (d0,d0,b0,b0)\n    // (d4,d4,b4,b4)\n    // (d2,d2,b2,b2)\n    // (d6,d6,b6,b6)\n    __m128 upper = _mm256_extractf128_ps(w, 1);\n\n    // (d1,c1,b1,a1)\n    // (d5,c5,b5,a5)\n    // (d3,c3,b3,a3)\n    // (d7,c7,b7,a7)\n    // (d0,c0,b0,a0)\n    // (d4,c4,b4,a4)\n    // (d2,c2,b2,a2)\n    // (d6,c6,b6,a6)\n    __m128 ret = _mm_blend_ps(_mm256_castps256_ps128(w), upper, 0x0A /* 0b1010 */);\n\n    return ret;\n}\n\n\n\n\n__m256 \u578b\u306e\u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u65708\u8981\u7d20\u306e\u5408\u8a08\u51e6\u7406\u30018\u5909\u6570\u307e\u3068\u3081\u3066\n\u307e\u3060\u66f8\u3044\u3066\u307e\u305b\u3093\u3002\u9700\u8981\u306f\u3042\u308b\u3093\u3067\u3057\u3087\u3046\u304b\uff1f\n\n__m256d \u578b\u306e\u500d\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u65704\u8981\u7d20\u306e\u5408\u8a08\u51e6\u7406\n\n// in  : ( x3, x2, x1, x0 )\n// out : (  -,  -,  -, x3+x2+x1+x0 )\ninline __m128d hsum256_pd(__m256d x) {\n    // hiDual = ( x3, x2 )\n    const __m128d hiDual = _mm256_extractf128_pd(x, 1);\n    // loDual = ( x1, x0 )\n    const __m128d loDual = _mm256_castpd256_pd128(x);\n    // sumQuad = ( x2+x3, x0+x1 )\n    const __m128d sumDual = _mm_add_pd(loDual, hiDual);\n    // sum = ( 0, x0+x1+x2+x3 );\n    const __m128d sum = _mm_hadd_pd(sumDual, _mm_setzero_pd());\n    return sum;\n}\n\n\n\n\n\u53c2\u8003\u306b\u3057\u305f\uff08\u53ef\u80fd\u6027\u304c\u9ad8\u3044\uff09\u60c5\u5831\nhttps://software.intel.com/sites/landingpage/IntrinsicsGuide/\nhttp://stackoverflow.com/questions/6996764/fastest-way-to-do-horizontal-float-vector-sum-on-x86\nhttp://stackoverflow.com/questions/13219146/how-to-sum-m256-horizontally\nhttps://www.kvraudio.com/forum/viewtopic.php?p=2827383\nSSE\u3084AVX\u306eintrinsics\u95a2\u6570\u3092\u4f7f\u3063\u305f\u6c34\u5e73\u52a0\u7b97\u51e6\u7406\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n`__m128`\u578b\u306e\u5834\u5408\u306f32bit\u306e\u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570(float)\u304c4\u8981\u7d20\u3001`__m256`\u578b\u306e\u5834\u5408\u306ffloat\u304c8\u8981\u7d20\u3001\u5909\u6570\u5185\u306b\u4fdd\u6301\u3067\u304d\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306eC++\u30b3\u30e1\u30f3\u30c8\u306f\u5168\u51e6\u7406\u306b\u5171\u901a\u3059\u308b\u524d\u66f8\u304d\u3067\u3059\u3002\n\n```c++\n// Horizontal sum routines\n// '-' lanes of returned value are not meant to be used by caller\n// (      lane4,     lane3,     lane2,    lane1 )\n// ( bits96-127, bits64-95, bits32-63, bits0-31 )\n```\n\n\u51e6\u7406\u7d50\u679c\u306e\u623b\u308a\u5024\u306e\u3046\u3061\u3001\u7279\u5b9a\u306e\u7bc4\u56f2\u306e\u30ec\u30fc\u30f3\u306e\u5024\u306e\u307f\u4f7f\u308f\u308c\u308b\u4e8b\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u4f7f\u308f\u308c\u306a\u3044\u5024\u30920\u306b\u8a2d\u5b9a\u3059\u308b\u51e6\u7406\u3092\u308f\u3056\u308f\u3056\u5165\u308c\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u4e8b\u3067\u3059\u3002\n\nAVX\u306eYMM\u30ec\u30b8\u30b9\u30bf\u306e\u3046\u3061\u4e0b\u4f4d128bit\u3068\u4e0a\u4f4d128bit\u305d\u308c\u305e\u308c\u304c\u30ec\u30fc\u30f3\u3068\u547c\u3070\u308c\u308b\u4e8b\u304c\u591a\u3044\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f32bit\u306efloat\u8981\u7d20\u5358\u4f4d\u3067\u30ec\u30fc\u30f3\u3068\u547c\u3093\u3067\u3044\u307e\u3059\u3002\n\n\u5404\u51e6\u7406\u6bce\u306b\u3069\u3093\u306a\u98a8\u306b\u5024\u304c\u5909\u5316\u3059\u308b\u304b\u3092\u8a73\u7d30\u306b\u30b3\u30e1\u30f3\u30c8\u3067\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\u305d\u3046\u3057\u306a\u3044\u3068\u5f8c\u3067\u898b\u305f\u6642\u306b\u8a33\u304c\u5206\u304b\u3089\u306a\u304f\u306a\u308b\u306e\u3067\u3002\u3002\n\n# __m128 \u578b\u306e\u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u65704\u8981\u7d20\u306e\u5408\u8a08\u51e6\u7406\n\n## SSSE3\u306ehaddps\u547d\u4ee4\u3092\u4f7f\u3063\u305f\u7248\n\n_mm_hadd_ps \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001haddps \u547d\u4ee4\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n```c++\n// in  : ( x3, x2, x1, x0 )\n// out : (  -,  -,  -, x3+x2+x1+x0 )\ninline __m128 hsum128_ps_naive(__m128 x)\n{\n    // a = ( x3+x2, x1+x0, x3+x2, x1+x0 )\n    __m128 a = _mm_hadd_ps(x, x);\n    // a = ( x3+x2+x1+x0, x3+x2+x1+x0, x3+x2+x1+x0, x3+x2+x1+x0 )\n    a = _mm_hadd_ps(a, a);\n    return a;\n}\n```\n\n## SSSE3\u306ehaddps\u547d\u4ee4\u3092\u4f7f\u308f\u306a\u3044\u7248\n\nhaddps\u547d\u4ee4\u306f\u6b8b\u5ff5\u306a\u304c\u3089\u9045\u3044\u3089\u3057\u304f\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u51e6\u7406\u3057\u305f\u65b9\u304c\u901f\u3044\u3088\u3046\u3067\u3059\u3002\n\n```c++\n// in  : ( x3, x2, x1, x0 )\n// out : (  -,  -,  -, x3+x2+x1+x0 )\ninline __m128 hsum128_ps(__m128 x)\n{\n    // loDual = ( -, -, x1, x0 )\n    const __m128 loDual = x;\n    // hiDual = ( -, -, x3, x2 )\n    const __m128 hiDual = _mm_movehl_ps(x, x);\n    // sumDual = ( -, -, x1+x3, x0+x2 )\n    const __m128 sumDual = _mm_add_ps(loDual, hiDual);\n    // lo = ( -, -, -, x0+x2 )\n    const __m128 lo = sumDual;\n    // hi = ( -, -, -, x1+x3 )\n    const __m128 hi = _mm_shuffle_ps(sumDual, sumDual, 0x1);\n    // sum = ( -, -, -, x0+x1+x2+x3 )\n    const __m128 sum = _mm_add_ss(lo, hi);\n    return sum;\n}\n```\n\n# __m256 \u578b\u306e\u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u65708\u8981\u7d20\u306e\u5408\u8a08\u51e6\u7406\n\n\u3053\u3061\u3089\u306fYMM\u30ec\u30b8\u30b9\u30bf\u7528\u306e\u51e6\u7406\u3067\u3059\u3002\n\n```c++\n// in  : ( x7, x6, x5, x4, x3, x2, x1, x0 )\n// out : ( -,  -,  -, xsum )\ninline __m128 hsum256_ps(__m256 x) {\n    // hiQuad = ( x7, x6, x5, x4 )\n    const __m128 hiQuad = _mm256_extractf128_ps(x, 1);\n    // loQuad = ( x3, x2, x1, x0 )\n    const __m128 loQuad = _mm256_castps256_ps128(x);\n    // sumQuad = ( x3+x7, x2+x6, x1+x5, x0+x4 )\n    const __m128 sumQuad = _mm_add_ps(loQuad, hiQuad);\n    // loDual = ( -, -, x1+x5, x0+x4 )\n    const __m128 loDual = sumQuad;\n    // hiDual = ( -, -, x3+x7, x2+x6 )\n    const __m128 hiDual = _mm_movehl_ps(sumQuad, sumQuad);\n    // sumDual = ( -, -, x1+x3 + x5+x7, x0+x2 + x4+x6 )\n    const __m128 sumDual = _mm_add_ps(loDual, hiDual);\n    // lo = ( -, -, -, x0+x2 + x4+x6 )\n    const __m128 lo = sumDual;\n    // hi = ( -, -, -, x1+x3 + x5+x7 )\n    const __m128 hi = _mm_shuffle_ps(sumDual, sumDual, 0x1);\n    // sum = ( -, -, -, x0+x1+x2+x3 + x4+x5+x6+x7 )\n    const __m128 sum = _mm_add_ss(lo, hi);\n    return sum;\n}\n```\n\n# __m256 \u578b\u306e\u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u65708\u8981\u7d20\u306e\u5408\u8a08\u51e6\u7406\u30012\u5909\u6570\u307e\u3068\u3081\u3066\n\n2\u5909\u6570\u307e\u3068\u3081\u3066\u51e6\u7406\u3059\u308b\u3068\u30011\u5909\u6570\u7528\u306e\u51e6\u7406\u30922\u56de\u547c\u3073\u51fa\u3059\u306e\u306b\u6bd4\u3079\u3066\u547d\u4ee4\u6570\u304c\u524a\u6e1b\u51fa\u6765\u3066\u901f\u304f\u306a\u308a\u307e\u3059\u3002\n\n```c++\n\n// Horizontally add elements of each __m256 type arguments at once\n// in a : ( a7, a6, a5, a4, a3, a2, a1, a0 )\n// in b : ( b7, b6, b5, b4, b3, b2, b1, b0 )\n// out  : ( -, -, bsum, asum )\ninline __m128 hsum2x256_ps(__m256 a, __m256 b) {\n    // (b3, b2, b1, b0, a3, a2, a1, a0)\n    __m256 x = _mm256_permute2f128_ps(a, b, 0x20);\n    // (b7, b6, b5, b4, a7, a6, a5, a4)\n    __m256 y = _mm256_permute2f128_ps(a, b, 0x31);\n    // (b3+b7, b2+b6, b1+b5, b0+b4, a3+a7, a2+a6, a1+a5, a0+a4)\n    x = _mm256_add_ps(x, y);\n    // (-, -, b3+b7, b2+b6, -, -, a3+a7, a2+a6)\n    y = _mm256_permute_ps(x, _MM_SHUFFLE(3, 2, 3, 2));\n    // (-, -, b1+b5+b3+b7, b0+b4+b2+b6, -, -, a1+a5+a3+a7, a0+a4+a2+a6)\n    x = _mm256_add_ps(x, y);\n    // (-, -, -, b1+b5+b3+b7, -, -, -, a1+a5+a3+a7)\n    y = _mm256_permute_ps(x, _MM_SHUFFLE(1, 1, 1, 1));\n    // (-, -, -, b1+b5+b3+b7+b0+b4+b2+b6, -, -, -, a1+a5+a3+a7+a0+a4+a2+a6)\n    x = _mm256_add_ps(x, y);\n    // (-, -, -, b1+b5+b3+b7+b0+b4+b2+b6)\n    __m128 upper = _mm256_extractf128_ps(x, 1);\n    // (-, -, -, -, -, -, b1+b5+b3+b7+b0+b4+b2+b6, a1+a5+a3+a7+a0+a4+a2+a6)\n    __m128 ret = _mm_unpacklo_ps(_mm256_castps256_ps128(x), upper);\n    return ret;\n}\n\n```\n\n# __m256 \u578b\u306e\u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u65708\u8981\u7d20\u306e\u5408\u8a08\u51e6\u7406\u30014\u5909\u6570\u307e\u3068\u3081\u3066\n\n4\u5909\u6570\u307e\u3068\u3081\u3066\u51e6\u7406\u3059\u308b\u3068\u30012\u5909\u6570\u7528\u306e\u51e6\u7406\u30922\u56de\u547c\u3073\u51fa\u3059\u306e\u306b\u6bd4\u3079\u3066\u547d\u4ee4\u6570\u304c\u524a\u6e1b\u51fa\u6765\u3066\u901f\u304f\u306a\u308a\u307e\u3059\u3002\n\n```c++\n\n// Horizontally add elements of each __m256 type arguments at once\n// in a : ( a7, a6, a5, a4, a3, a2, a1, a0 )\n// in b : ( b7, b6, b5, b4, b3, b2, b1, b0 )\n// in c : ( c7, c6, c5, c4, c3, c2, c1, c0 )\n// in d : ( d7, d6, d5, d4, d3, d2, d1, d0 )\n// out  : ( dsum, csum, bsum, asum )\ninline __m128 hsum4x256_ps(__m256 a, __m256 b, __m256 c, __m256 d) {\n\n    // (b3,b2,b1,b0, a3,a2,a1,a0)\n    __m256 w = _mm256_permute2f128_ps(a, b, 0x20);\n    // (b7,b6,b5,b4, a7,a6,a5,a4)\n    __m256 x = _mm256_permute2f128_ps(a, b, 0x31);\n    // (d3,d2,d1,d0, c3,c2,c1,c0)\n    __m256 y = _mm256_permute2f128_ps(c, d, 0x20);\n    // (d7,d6,d5,d4, c7,c6,c5,c4)\n    __m256 z = _mm256_permute2f128_ps(c, d, 0x31);\n    \n    // (b3,b2,b1,b0, a3,a2,a1,a0)\n    // (b7,b6,b5,b4, a7,a6,a5,a4)\n    w = _mm256_add_ps(w, x);\n    // (-,-,b3,b2, -,-,a3,a2)\n    // (-,-,b7,b6, -,-,a7,a6)\n    x = _mm256_permute_ps(w, _MM_SHUFFLE(3, 2, 3, 2));\n    // (-,-,b1,b0, -,-,a1,a0)\n    // (-,-,b5,b4, -,-,a5,a4)\n    // (-,-,b3,b2, -,-,a3,a2)\n    // (-,-,b7,b6, -,-,a7,a6)\n    w = _mm256_add_ps(w, x);\n    \n    // (d3,d2,d1,d0, c3,c2,c1,c0)\n    // (d7,d6,d5,d4, c7,c6,c5,c4)\n    y = _mm256_add_ps(y, z);\n    // (-,-,d3,d2, -,-,c3,c2)\n    // (-,-,d7,d6, -,-,c7,c6)\n    z = _mm256_permute_ps(y, _MM_SHUFFLE(3, 2, 3, 2));\n    // (-,-,d1,d0, -,-,c1,c0)\n    // (-,-,d5,d4, -,-,c5,c4)\n    // (-,-,d3,d2, -,-,c3,c2)\n    // (-,-,d7,d6, -,-,c7,c6)\n    z = _mm256_add_ps(y, z);\n    \n    // d1,d0,b1,b0, c1,c0,a1,a0)\n    // d5,d4,b5,b4, c5,c4,a5,a4)\n    // d3,d2,b3,b2, c3,c2,a3,a2)\n    // d7,d6,b7,b6, c7,c6,a7,a6)\n    w = _mm256_castpd_ps(_mm256_unpacklo_pd(_mm256_castps_pd(w), _mm256_castps_pd(z)));\n    \n    // (d0,d1,b0,b1, c0,c1,a0,a1)\n    // (d4,d5,b4,b5, c4,c5,a4,a5)\n    // (d2,d3,b2,b3, c2,c3,a2,a3)\n    // (d6,d7,b6,b7, c6,c7,a6,a7)\n    x = _mm256_permute_ps(w, _MM_SHUFFLE(2, 3, 0, 1));\n    \n    // (d1,d1,b1,b1, c1,c1,a1,a1)\n    // (d5,d5,b5,b5, c5,c5,a5,a5)\n    // (d3,d3,b3,b3, c3,c3,a3,a3)\n    // (d7,d7,b7,b7, c7,c7,a7,a7)\n    // (d0,d0,b0,b0, c0,c0,a0,a0)\n    // (d4,d4,b4,b4, c4,c4,a4,a4)\n    // (d2,d2,b2,b2, c2,c2,a2,a2)\n    // (d6,d6,b6,b6, c6,c6,a6,a6)\n    w = _mm256_add_ps(w, x);\n\n    // (d1,d1,b1,b1)\n    // (d5,d5,b5,b5)\n    // (d3,d3,b3,b3)\n    // (d7,d7,b7,b7)\n    // (d0,d0,b0,b0)\n    // (d4,d4,b4,b4)\n    // (d2,d2,b2,b2)\n    // (d6,d6,b6,b6)\n    __m128 upper = _mm256_extractf128_ps(w, 1);\n\n    // (d1,c1,b1,a1)\n    // (d5,c5,b5,a5)\n    // (d3,c3,b3,a3)\n    // (d7,c7,b7,a7)\n    // (d0,c0,b0,a0)\n    // (d4,c4,b4,a4)\n    // (d2,c2,b2,a2)\n    // (d6,c6,b6,a6)\n    __m128 ret = _mm_blend_ps(_mm256_castps256_ps128(w), upper, 0x0A /* 0b1010 */);\n    \n    return ret;\n}\n\n\n```\n\n# __m256 \u578b\u306e\u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u65708\u8981\u7d20\u306e\u5408\u8a08\u51e6\u7406\u30018\u5909\u6570\u307e\u3068\u3081\u3066\n\n\u307e\u3060\u66f8\u3044\u3066\u307e\u305b\u3093\u3002\u9700\u8981\u306f\u3042\u308b\u3093\u3067\u3057\u3087\u3046\u304b\uff1f\n\n# __m256d \u578b\u306e\u500d\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u65704\u8981\u7d20\u306e\u5408\u8a08\u51e6\u7406\n\n```c++\n\n// in  : ( x3, x2, x1, x0 )\n// out : (  -,  -,  -, x3+x2+x1+x0 )\ninline __m128d hsum256_pd(__m256d x) {\n    // hiDual = ( x3, x2 )\n    const __m128d hiDual = _mm256_extractf128_pd(x, 1);\n    // loDual = ( x1, x0 )\n    const __m128d loDual = _mm256_castpd256_pd128(x);\n    // sumQuad = ( x2+x3, x0+x1 )\n    const __m128d sumDual = _mm_add_pd(loDual, hiDual);\n    // sum = ( 0, x0+x1+x2+x3 );\n    const __m128d sum = _mm_hadd_pd(sumDual, _mm_setzero_pd());\n    return sum;\n}\n\n\n```\n\n# \u53c2\u8003\u306b\u3057\u305f\uff08\u53ef\u80fd\u6027\u304c\u9ad8\u3044\uff09\u60c5\u5831\n\nhttps://software.intel.com/sites/landingpage/IntrinsicsGuide/\nhttp://stackoverflow.com/questions/6996764/fastest-way-to-do-horizontal-float-vector-sum-on-x86\nhttp://stackoverflow.com/questions/13219146/how-to-sum-m256-horizontally\nhttps://www.kvraudio.com/forum/viewtopic.php?p=2827383\n\n", "tags": ["SSE", "AVX", "SIMD", "C++", "x86-64"]}