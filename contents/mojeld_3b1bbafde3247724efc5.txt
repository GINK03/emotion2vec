{"context": " More than 1 year has passed since last update.\u4eca\u65e5\u305f\u307e\u305f\u307e\u3069\u3053\u304b\u306e\u554f\u984c\u96c6\u306b\u3042\u3063\u305f\u306e\u3067\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u56e0\u6570\u5206\u89e3\u3057\u3066\u5b8c\u5168\u6570\u306a\u306e\u304b\u7d20\u6570\u306a\u306e\u304b\u3092\u51fa\u3057\u3066\u307e\u3059\u3002\nBCB32Bit \u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u672a\u3060C++11\u5316\u3055\u308c\u3066\u307e\u305b\u3093\u3002\n\nfactorization_bcb_xe8_32bit.cpp\nfor (int i = 0; i < iin; i++)\n{\n    irez = iin % (i + 1); //\u5272\u308a\u5207\u308c\u305f\u5834\u5408\u306f\u30bc\u30ed\u306a\u306e\u3067\n    //iin\u306e\u7bc4\u56f2\u5185\u3067 \u30bc\u30ed\u306a\u3089i+1\u3092\u8db3\u3057\u307e\u3059\n    if ((irez == 0) && (i >= 0/*\u3053\u306e\u6761\u4ef6\u610f\u5473\u306a\u3044*/) && (/*\u81ea\u5206\u306f\u9664\u304f*/(i + 1) < iin))\n    {\n        ss.str(\"\");\n        //ss\u306b(i + 1)IntToStr\u3059\u308b\u3002\n        ss << std::setfill('0') << std::setw(1) << (i + 1);\n        imax = imax + (i + 1);\n        s += ss.str() + \", \";//s\u306bss\u3092\u8ffd\u8a18\u3068\u30ab\u30f3\u30de\n    }\n}\ns.erase(s.length()-2,s.length());//s\u306e\u6700\u5f8c\u306e\u30ab\u30f3\u30de\u3092\u524a\u9664\u3059\u308b\n\n//\u56e0\u6570\u5206\u89e3\u3092\u4e26\u3079\u308b\ncout << \"Factorization {\" << s.c_str() << \"}\\n\";\n\nif (imax == iin)//\u5b8c\u5168\u6570\n{\n    cout << \"perfect number\" << \"\\n\";\n}\nif (imax == 1)//\u7d20\u6570\n{\n    cout << \"prime number\" << \"\\n\";\n}\n\n\nhttps://gist.github.com/mojeld/1dadf476d389bcea4ec8\n\u4eca\u65e5\u305f\u307e\u305f\u307e\u3069\u3053\u304b\u306e\u554f\u984c\u96c6\u306b\u3042\u3063\u305f\u306e\u3067\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u56e0\u6570\u5206\u89e3\u3057\u3066\u5b8c\u5168\u6570\u306a\u306e\u304b\u7d20\u6570\u306a\u306e\u304b\u3092\u51fa\u3057\u3066\u307e\u3059\u3002\nBCB32Bit \u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u672a\u3060C++11\u5316\u3055\u308c\u3066\u307e\u305b\u3093\u3002\n\n```lang:factorization_bcb_xe8_32bit.cpp\nfor (int i = 0; i < iin; i++)\n{\n\tirez = iin % (i + 1); //\u5272\u308a\u5207\u308c\u305f\u5834\u5408\u306f\u30bc\u30ed\u306a\u306e\u3067\n\t//iin\u306e\u7bc4\u56f2\u5185\u3067 \u30bc\u30ed\u306a\u3089i+1\u3092\u8db3\u3057\u307e\u3059\n\tif ((irez == 0) && (i >= 0/*\u3053\u306e\u6761\u4ef6\u610f\u5473\u306a\u3044*/) && (/*\u81ea\u5206\u306f\u9664\u304f*/(i + 1) < iin))\n\t{\n\t\tss.str(\"\");\n\t\t//ss\u306b(i + 1)IntToStr\u3059\u308b\u3002\n\t\tss << std::setfill('0') << std::setw(1) << (i + 1);\n\t\timax = imax + (i + 1);\n\t\ts += ss.str() + \", \";//s\u306bss\u3092\u8ffd\u8a18\u3068\u30ab\u30f3\u30de\n\t}\n}\ns.erase(s.length()-2,s.length());//s\u306e\u6700\u5f8c\u306e\u30ab\u30f3\u30de\u3092\u524a\u9664\u3059\u308b\n\n//\u56e0\u6570\u5206\u89e3\u3092\u4e26\u3079\u308b\ncout << \"Factorization {\" << s.c_str() << \"}\\n\";\n\nif (imax == iin)//\u5b8c\u5168\u6570\n{\n\tcout << \"perfect number\" << \"\\n\";\n}\nif (imax == 1)//\u7d20\u6570\n{\n\tcout << \"prime number\" << \"\\n\";\n}\n```\n[https://gist.github.com/mojeld/1dadf476d389bcea4ec8](https://gist.github.com/mojeld/1dadf476d389bcea4ec8)\n", "tags": ["C++builder", "cppBuilder"]}