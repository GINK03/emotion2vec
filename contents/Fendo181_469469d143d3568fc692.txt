{"context": "\n\n\u958b\u767a\u74b0\u5883\n\n\n\nHD\nRaspberryPi B+\n\n\n\n\nOS\nDebian GNU/Linux 7.8 (wheezy)\n\n\nPython\nver 2.7.3\n\n\n\n\u203b\u7279\u306b\u554f\u984c\u304c\u306a\u3051\u308c\u3070\u6700\u65b0\u306eRaspberryPi2,3\u3084OS\u304cJessie\u3067\u3082\u52d5\u304f\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u4f59\u308a\u6c17\u306b\u3057\u306a\u304f\u3066\u7d50\u69cb\u3067\u3059\u3002\n\n\u4f7f\u7528\u6a5f\u5668\n\n\n\n\u540d\u79f0\n\u4f7f\u7528\u7528\u9014\n\n\n\n\nDHT11\n\u6e29\u6e7f\u5ea6\u8a08\u6e2c\u7528\n\n\n\u30b8\u30e3\u30f3\u30d1\u30fc\u7dda (\u30e1\u30b9 - \u30aa\u30b9)\nGPIO\u63a5\u7d9a\u7528\n\n\n\n\u79cb\u6708\u304b\u30de\u30eb\u30c4\u30d1\u30fc\u30c4\u3067\u306e\u8cfc\u5165\u3092\u304a\u3059\u3059\u3081\u3057\u307e\u3059\u3002\n\n\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\u203b\u3053\u3053\u3067\u306f\u3001\u65e2\u306bRaspberryPi\u306bOS\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305f\u524d\u7a0b\u3067\u8a71\u3092\u9032\u3081\u307e\u3059\u3002\n\ngit\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\n\u5f8c\u3067\u51fa\u3066\u304f\u308bdht11.py\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u70ba\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\nsudo apt-get install git\n\n\n\nRPi.GPIO\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\nRPi.GPIO\u306fPython\u3092\u4f7f\u3063\u3066Raspberry Pi\u306eGPIO\u30d4\u30f3\u5236\u5fa1\u3067\u304d\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3059\u3002RaspberryPi\u3068\u3001LED\u3084\u30bb\u30f3\u30b5\u6a5f\u5668\u306a\u3069\u306e\u96fb\u5b50\u6a5f\u5668\u3092\u64cd\u4f5c\u3059\u308b\u306b\u5fc5\u9808\u3067\u3059\u3002\u3053\u308c\u304c\u306a\u3044\u3068\u3001GPIO\u30d4\u30f3\u304c\u3042\u3063\u305f\u3068\u3057\u3066\u30825(v)\u30683.3(v)\u306e\u96fb\u5727\u3092\u4f9b\u7d66\u3067\u304d\u308b\u53ea\u306e\u9ad8\u7d1a\u306a\u7bb1\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u306e\u3067\u662f\u975e\u5c0e\u5165\u3057\u307e\u3057\u3087\u3046\u3002\n\u5c1a\u3001Jessi\u306e\u30ea\u30ea\u30fc\u30b9\u304b\u3089\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3068\u3044\u3046\u3053\u3068\u3067Python\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u6700\u521d\u3067\u3053\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308c\u3070\u3059\u3050\u306b\u4f7f\u3048\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\n\u516c\u5f0f\u30b5\u30a4\u30c8\n\u7b2c26\u56de Raspberry Pi\u306eGPIO\u3092\u5236\u5fa1\u3059\u308b (Python\u7de8)\n\n\u304c\u3001\u3053\u3053\u3067\u306f\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3001\u307e\u3060Jessi\u306b\u79fb\u3063\u3066\u5c45\u306a\u3044\u65b9(\u50d5\u307f\u305f\u3044\u306a)\u5411\u3051\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\npip\u306e\u5834\u5408\nsudo pip install rpi.gpio\n\napt-get\u306e\u5834\u5408\nsudo apt-get install python-rpi.gpio\n\n\u3053\u3053\u3067\u5c0e\u5165\u51fa\u6765\u308c\u3070\u3001\u7df4\u7fd2\u3068\u3057\u3066RaspberryPi\u306eGPIO\u30d4\u30f3\u306e\u5bfe\u5fdc\u8868\u3092\u307f\u306a\u304c\u3089\u3001\u662f\u975eL\u30c1\u30ab\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002L\u30c1\u30ab\u306f\u3044\u308f\u3086\u308b'Hello wold'\u7684\u306a\u52d5\u4f5c\u306a\u306e\u3067\u3001\u3053\u308c\u304c\u521d\u3081\u306e\u4e00\u6b69\u3068\u306a\u308a\u307e\u3059\u3002\n\nRaspberry Pi\u3067Python\u306eRPi.GPIO\u3092\u4f7f\u3063\u3066L\u30c1\u30ab\u3059\u308b\n\n\ntwython\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\nsudo apt-get install python-setuptools\nsudo easy_install pip\nsudo pip install twython\n\n\ntwython\u3068\u306fPython\u3067\u8a18\u8ff0\u3055\u308c\u305fTwitter\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\u5177\u4f53\u7684\u306b\u306a\u306b\u304c\u51fa\u6765\u308b\u304b\u3068\u8a00\u3046\u3068\u3001\u516c\u5f0f\u304c\u3053\u3093\u306a\u4e8b\u3092\u8a00\u3063\u3066\u3044\u307e\u3059\u3002\n\nTwython is the premier Python library providing an easy (and up-to-date) way to access Twitter data. Actively maintained and featuring support for Python 2.6+ and Python 3. It's been battle tested by companies, educational institutions and individuals alike. Try it today!\nTwython\u306f\u3001Twitter\u306e\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306e\u7c21\u5358\u306a\uff08\u304b\u3064\u6700\u65b0\u306e\uff09\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u6700\u9ad8\u306ePython\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059!\u3002\u7279\u306bPython\u306e2.6+\u3068Python3\u3092\u30e1\u30a4\u30f3\u306b\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305fTwython\u306f\u4f01\u696d\u3084\u6559\u80b2\u6a5f\u95a2\u3001\u500b\u4eba\u306b\u3088\u3063\u3066\u7a4d\u6975\u7684\u306b\u30c6\u30b9\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u662f\u975e\u304a\u8a66\u3057\u304f\u3060\u3055\u3044\uff01\n\nTwitterBot\u3092\u4f5c\u308b\u3068\u304d\u306f\u5927\u62b5\u3053\u306eTwython\u304c\u88cf\u5074\u3067\u96e3\u3057\u3044\u51e6\u7406\u3092\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u6211\u3005\u306fTwitter APIKey\u3055\u3048\u3042\u308c\u3070\u3001TwiiterBot\u3092Python\u3067\u7c21\u5358\u306b\u66f8\u3051\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u4fbf\u5229\u3067\u3059\u3002\n\u305d\u306e\u88cf\u5074\u3068\u8a73\u7d30\u306a\u4f7f\u7528\u7528\u9014\u3092\u77e5\u308a\u305f\u3051\u308c\u3070\u3001\u662f\u975e\u516c\u5f0f\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u4e8b\u3092\u304a\u3059\u3059\u3081\u3057\u307e\u3059\u3002\n\u516c\u5f0f:https://github.com/ryanmcgrath/twython\n\nRaspberry Pi\u306eCPU\u6e29\u5ea6\u3092\u3064\u3076\u3084\u304fTwitterBot\ntwython\u306e\u5c0e\u5165\u3068\u30c6\u30b9\u30c8\n\n\u4ee5\u4e0a\u3067\u5927\u307e\u304b\u306a\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\u6b21\u306b\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u56de\u8def\u63a5\u7d9a\u306b\u5165\u308a\u307e\u3059\u3002\n\nRaspberryPi\u3068DHT11\u3092\u63a5\u7d9a\u3059\u308b\u3002\n\u63a5\u7d9a\u56f3\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\nDHT11\u3068GPIO\u30d4\u30f3\u306e\u5bfe\u5fdc\u8868\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\n\nRaspberryPi B+\nDHT11\n\n\n\n\nVDD\n5.0(v)\n\n\nDATA\nGPIO4\n\n\nGND\nGND(PIN:6)\n\n\n\n\u203bDATA\u306fGPIO14,GPIO17\u3067\u3082\u3044\u3044\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u7df4\u7fd2\u3068\u3057\u3066GPIO4\u3092\u9078\u629e\u3057\u307e\u3057\u305f\u3002\n\u88fd\u54c1\u306b\u3088\u3063\u3066\u306f\u62b5\u6297\u304c\u65e2\u306b\u63a5\u7d9a\u6e08\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u88fd\u54c1\u3082\u3042\u308a\u307e\u3059\u304c(\u30b3\u30ec\u3068\u304b)\u57fa\u672c\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002GPIO\u30d4\u30f3\u3068\u306e\u5bfe\u5fdc\u8868\u306f\u5404RasperryPi\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u70ba\u3001GPIO\u30d4\u30f3\u306e\u5bfe\u5fdc\u8868\u3092\u898b\u306a\u304c\u3089\u63a5\u7d9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3053\u308c\u3067\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u5074\u306e\u63a5\u7d9a\u3092\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\n\u6b21\u306b\u63a5\u7d9a\u3057\u305fDHT11\u304b\u3089\u5ba4\u6e29\u3068\u6c17\u6e29\u3092\u5b9f\u969b\u306b\u6e2c\u5b9a\u3057\u3066\u52d5\u4f5c\u78ba\u8a8d\u3092\u3057\u307e\u3057\u3087\u3046\u3002\n\nPython\u3067DHT11\u3092\u5236\u5fa1\u3059\u308b\u3002\nPython\u3067DHT11\u3092\u5236\u5fa1\u3059\u308b\u30b3\u30fc\u30c9\u304c\u65e2\u306b\u4f5c\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u88fd\u4f5c\u8005\u306b\u611f\u8b1d\u3057\u306a\u304c\u3089git clone\u3092\u5b9f\u52b9\u3057\u307e\u3057\u3087\u3046\u3002\nhttps://github.com/szazo/DHT11_Python\ncd\ngit clone https://github.com/szazo/DHT11_Python.git\n\ngit clone\u3057\u305f\u5148\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n\u305d\u306e\u4e2d\u306edht11.py\u3068dht11_examle.py\u306e2\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u6ce8\u76ee\u3057\u3066\u4e0b\u3055\u3044\u3002\n\ndht11.py\nimport time\nimport RPi\n\n\nclass DHT11Result:\n    'DHT11 sensor result returned by DHT11.read() method'\n\n    ERR_NO_ERROR = 0\n    ERR_MISSING_DATA = 1\n    ERR_CRC = 2\n\n    error_code = ERR_NO_ERROR\n    temperature = -1\n    humidity = -1\n\n    def __init__(self, error_code, temperature, humidity):\n        self.error_code = error_code\n        self.temperature = temperature\n        self.humidity = humidity\n\n    def is_valid(self):\n        return self.error_code == DHT11Result.ERR_NO_ERROR\n\n\nclass DHT11:\n    'DHT11 sensor reader class for Raspberry'\n\n    __pin = 0\n\n    def __init__(self, pin):\n        self.__pin = pin\n\n    def read(self):\n        RPi.GPIO.setup(self.__pin, RPi.GPIO.OUT)\n\n        # send initial high\n        self.__send_and_sleep(RPi.GPIO.HIGH, 0.05)\n\n        # pull down to low\n        self.__send_and_sleep(RPi.GPIO.LOW, 0.02)\n\n        # change to input using pull up\n        RPi.GPIO.setup(self.__pin, RPi.GPIO.IN, RPi.GPIO.PUD_UP)\n\n        # collect data into an array\n        data = self.__collect_input()\n\n        # parse lengths of all data pull up periods\n        pull_up_lengths = self.__parse_data_pull_up_lengths(data)\n\n        # if bit count mismatch, return error (4 byte data + 1 byte checksum)\n        if len(pull_up_lengths) != 40:\n            return DHT11Result(DHT11Result.ERR_MISSING_DATA, 0, 0)\n\n        # calculate bits from lengths of the pull up periods\n        bits = self.__calculate_bits(pull_up_lengths)\n\n        # we have the bits, calculate bytes\n        the_bytes = self.__bits_to_bytes(bits)\n\n        # calculate checksum and check\n        checksum = self.__calculate_checksum(the_bytes)\n        if the_bytes[4] != checksum:\n            return DHT11Result(DHT11Result.ERR_CRC, 0, 0)\n\n        # ok, we have valid data, return it\n        return DHT11Result(DHT11Result.ERR_NO_ERROR, the_bytes[2], the_bytes[0])\n\n    def __send_and_sleep(self, output, sleep):\n        RPi.GPIO.output(self.__pin, output)\n        time.sleep(sleep)\n\n    def __collect_input(self):\n        # collect the data while unchanged found\n        unchanged_count = 0\n\n        # this is used to determine where is the end of the data\n        max_unchanged_count = 100\n\n        last = -1\n        data = []\n        while True:\n            current = RPi.GPIO.input(self.__pin)\n            data.append(current)\n            if last != current:\n                unchanged_count = 0\n                last = current\n            else:\n                unchanged_count += 1\n                if unchanged_count > max_unchanged_count:\n                    break\n\n        return data\n\n    def __parse_data_pull_up_lengths(self, data):\n        STATE_INIT_PULL_DOWN = 1\n        STATE_INIT_PULL_UP = 2\n        STATE_DATA_FIRST_PULL_DOWN = 3\n        STATE_DATA_PULL_UP = 4\n        STATE_DATA_PULL_DOWN = 5\n\n        state = STATE_INIT_PULL_DOWN\n\n        lengths = [] # will contain the lengths of data pull up periods\n        current_length = 0 # will contain the length of the previous period\n\n        for i in range(len(data)):\n\n            current = data[i]\n            current_length += 1\n\n            if state == STATE_INIT_PULL_DOWN:\n                if current == RPi.GPIO.LOW:\n                    # ok, we got the initial pull down\n                    state = STATE_INIT_PULL_UP\n                    continue\n                else:\n                    continue\n            if state == STATE_INIT_PULL_UP:\n                if current == RPi.GPIO.HIGH:\n                    # ok, we got the initial pull up\n                    state = STATE_DATA_FIRST_PULL_DOWN\n                    continue\n                else:\n                    continue\n            if state == STATE_DATA_FIRST_PULL_DOWN:\n                if current == RPi.GPIO.LOW:\n                    # we have the initial pull down, the next will be the data pull up\n                    state = STATE_DATA_PULL_UP\n                    continue\n                else:\n                    continue\n            if state == STATE_DATA_PULL_UP:\n                if current == RPi.GPIO.HIGH:\n                    # data pulled up, the length of this pull up will determine whether it is 0 or 1\n                    current_length = 0\n                    state = STATE_DATA_PULL_DOWN\n                    continue\n                else:\n                    continue\n            if state == STATE_DATA_PULL_DOWN:\n                if current == RPi.GPIO.LOW:\n                    # pulled down, we store the length of the previous pull up period\n                    lengths.append(current_length)\n                    state = STATE_DATA_PULL_UP\n                    continue\n                else:\n                    continue\n\n        return lengths\n\n    def __calculate_bits(self, pull_up_lengths):\n        # find shortest and longest period\n        shortest_pull_up = 1000\n        longest_pull_up = 0\n\n        for i in range(0, len(pull_up_lengths)):\n            length = pull_up_lengths[i]\n            if length < shortest_pull_up:\n                shortest_pull_up = length\n            if length > longest_pull_up:\n                longest_pull_up = length\n\n        # use the halfway to determine whether the period it is long or short\n        halfway = shortest_pull_up + (longest_pull_up - shortest_pull_up) / 2\n        bits = []\n\n        for i in range(0, len(pull_up_lengths)):\n            bit = False\n            if pull_up_lengths[i] > halfway:\n                bit = True\n            bits.append(bit)\n\n        return bits\n\n    def __bits_to_bytes(self, bits):\n        the_bytes = []\n        byte = 0\n\n        for i in range(0, len(bits)):\n            byte = byte << 1\n            if (bits[i]):\n                byte = byte | 1\n            else:\n                byte = byte | 0\n            if ((i + 1) % 8 == 0):\n                the_bytes.append(byte)\n                byte = 0\n\n        return the_bytes\n\n    def __calculate_checksum(self, the_bytes):\n        return the_bytes[0] + the_bytes[1] + the_bytes[2] + the_bytes[3] & 255\n\n\n\n\u3053\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u4e3b\u306bDHT11\u304b\u3089\u5f97\u3089\u308c\u30c7\u30b8\u30bf\u30eb\u4fe1\u53f7\u3092Python\u3067\u51e6\u7406\u3057\u3066\u304f\u308c\u308b\u30af\u30e9\u30b9\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\u5f93\u3063\u3066dht11.py\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u306b\u4f5c\u3089\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u3046\u4e8b\u3067\u7c21\u5358\u306b\u6e7f\u5ea6\u3068\u6e29\u5ea6\u306e\u8a08\u6e2c\u5024\u3092\u5f97\u3089\u308c\u308b\u4e8b\u304c\u7406\u89e3\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\n\u305d\u308c\u3067\u306f\u5b9f\u969b\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f7f\u3063\u305f\u4f8b\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\ndht11_example.py(\u4fee\u6b63\u524d)\n\nimport RPi.GPIO as GPIO\nimport dht11\nimport time\nimport datetime\n\n# initialize GPIO\nGPIO.setwarnings(False)\nGPIO.setmode(GPIO.BCM)\nGPIO.cleanup()\n\n# read data using pin 14\ninstance = dht11.DHT11(pin=14)\n\nwhile True:\n    result = instance.read()\n    if result.is_valid():\n        print(\"Last valid input: \" + str(datetime.datetime.now()))\n        print(\"Temperature: %d C\" % result.temperature)\n        print(\"Humidity: %d %%\" % result.humidity)\n\n    time.sleep(1)\n\n\n\n\u3053\u3053\u3067\u6ce8\u610f\u3057\u3066\u6b32\u3057\u3044\u306e\u306finstance = dht11.DHT11(pin=14)\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u65e2\u306bGPIO14\u3067\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u306a\u3089\u3001\u3053\u3053\u3067\u306f\u4f55\u3082\u3057\u306a\u304f\u3066\u7d50\u69cb\u3067\u3059\u304c\u5148\u7a0b\u306e\u56de\u8def\u8a2d\u8a08\u306e\u969b\u306bGPIO4\u3092\u9078\u629e\u3057\u305f\u5834\u5408\u306f\u3053\u306e\u69d8\u306b\u4fee\u6b63\u3057\u3066\u4e0b\u3055\u3044\u3002\n\nimport RPi.GPIO as GPIO\nimport dht11\nimport time\nimport datetime\n\n# initialize GPIO\nGPIO.setwarnings(False)\nGPIO.setmode(GPIO.BCM)\nGPIO.cleanup()\n\n# read data using pin 14\n-instance = dht11.DHT11(pin=14)\n+instance = dht11.DHT11(pin=4)\n\nwhile True:\n    result = instance.read()\n    if result.is_valid():\n        print(\"Last valid input: \" + str(datetime.datetime.now()))\n        print(\"Temperature: %d C\" % result.temperature)\n        print(\"Humidity: %d %%\" % result.humidity)\n\n    time.sleep(1)\n\n\n\u4ee5\u4e0a\u3067DHT11\u304b\u3089\u6e29\u6e7f\u5ea6\u3092\u8a08\u6e2c\u3059\u308b\u30b3\u30fc\u30c9\u304c\u5b8c\u6210\u3057\u307e\u3057\u305f\u3002\n\u52d5\u4f5c\u78ba\u8a8d\u3068\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nsudo python dht11_example.py\n\n\n\u203b\u304b\u306a\u3089\u305aroot\u6a29\u9650\u304bsudo\u3092\u3064\u3051\u3066\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044!\u3002\u305d\u3046\u3057\u306a\u3044\u3068Error\u304c\u8d77\u304d\u307e\u3059\u3002\n\u4e0a\u624b\u304f\u3044\u3051\u3070\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306b\u6e29\u5ea6\u3068\u6e7f\u5ea6\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4ee5\u4e0a\u304c\u78ba\u8a8d\u3067\u304d\u308c\u3070DHT11\u306e\u52d5\u4f5c\u78ba\u8a8d\u306f\u5b8c\u4e86\u3067\u3059\u3002\u304a\u75b2\u308c\u69d8\u3067\u3059\u3002\n\nTweetBot\u3092\u4f5c\u308b\u70ba\u306bTwitterAPI\u306b\u767b\u9332\u3059\u308b\u3002\nTweetBot\u3092\u4f5c\u308b\u70ba\u306eTwitterAPI\u306b\u767b\u9332\u3057\u307e\u3057\u3087\u3046\u3002\n\u3053\u3053\u304b\u3089\u5c02\u7528\u30da\u30fc\u30b8\u306b\u98db\u3073\u3001Create New App\u3092\u62bc\u3057\u3066\u767b\u9332\u3057\u3066\u4e0b\u3055\u3044\u3002\nhttps://apps.twitter.com/\n\n[\u6ce8\u610f\u305d\u306e1]TwitterAPI\u306e\u767b\u9332\u306b\u306f\u96fb\u8a71\u756a\u53f7\u304c\u5fc5\u8981\u304b\u3064\u3001\u8a00\u8a9e\u3092[English]\u306b\u3059\u308b\u3002\nTwitterAPI\u306e\u767b\u9332\u306b\u306f\u96fb\u8a71\u756a\u53f7\u304c\u5fc5\u8981\u3067\u3059\u3002\u3058\u3083\u306a\u3044\u3068\u3053\u3093\u306a\u611f\u3058\u306b\u6012\u3089\u308c\u307e\u3059\u3002\n\n\u305d\u3053\u3067\u96fb\u8a71\u756a\u53f7\u3092\u767b\u9332\u3057\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f\u756a\u53f7\u3092\u5165\u529b\u3057\u96fb\u8a71\u8a8d\u8a3c\u3092\u884c\u3044\u307e\u3059....\u304c\u3001\u3053\u308c\u3067\u3082\u307e\u3060\u4e0a\u624b\u304f\u3044\u304d\u307e\u305b\u3093\u3002\n\u30d0\u30b0\u306a\u306e\u304b\u4f7f\u7528\u306a\u306e\u304b\u3001Twitter\u793e\u306e\u30a8\u30f3\u30b8\u30cb\u30a2\u304c\u4ed5\u4e8b\u3057\u3066\u3044\u306a\u3044\u306e\u304b\u3001\u8a73\u7d30\u306f\u4e0d\u660e\u3067\u3059\u304c\u3001Twitter\u306e\u8a00\u8a9e\u8a2d\u5b9a\u3092[\u65e5\u672c\u8a9e]\u304b\u3089[English]\u306b\u3057\u307e\u3059\u3002\n\n\nTwitter API\u3001Apps \u3092\u5229\u7528\u3059\u308b\u306e\u306b\u643a\u5e2f\u96fb\u8a71\u306e\u3067\u306e\u8a8d\u8a3c\u304c\u5fc5\u9808\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u8a8d\u8a3c\u3092\u884c\u3046\u65b9\u6cd5\u3002\n\n\u3053\u306e\u72b6\u614b\u3067\u3082\u3046\u4e00\u3069\u96fb\u8a71\u8a8d\u8a3c\u3092\u884c\u3046\u3068\u7121\u4e8bTwitterAPI\u306e\u767b\u9332\u30da\u30fc\u30b8\u306b\u3044\u3051\u308b\u306e\u3067\u3001API\u306e\u767b\u9332\u3092\u884c\u3044\u307e\u3059\u3002\n\n[\u6ce8\u610f\u305d\u306e2]\u77ed\u6642\u9593\u306b\u540c\u3058\u6295\u7a3f\u306f\u7d9a\u3051\u3066\u51fa\u6765\u306a\u3044\u3002\n\u30b9\u30d1\u30e0\u9632\u6b62\u306e\u70ba\u304b\u3001TwitterAPI\u3092\u4f7f\u3063\u3066\u540c\u3058\u6295\u7a3f\u3092\u9023\u7d9a\u3057\u3066Tweet\u3059\u308b\u4e8b\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3092\u4f7f\u3044\u77ed\u671f\u306b\u540c\u3058\u3088\u3046\u306atweet\u3092\u6295\u7a3f\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u4eca\u56de\u306e\u69d8\u306b\u6c17\u6e29,\u5ba4\u6e29\u3092\u6295\u7a3f\u3059\u308b\u969b\u306f\u540c\u3058\u3064\u3076\u3084\u304d\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u4e8b\u304c\u3042\u308b\u306e\u3067\u3001\u610f\u56f3\u7684\u306b\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3092\u306f\u3055\u3093\u3067\u3042\u3052\u308b\u4e8b\u3092\u304a\u85a6\u3081\u3057\u307e\u3059\u3002\n\nRaspberyPi\u304b\u3089Tweet\u3059\u308b\u3002\nAPI\u306b\u767b\u9332\u3057\u305f\u3089\u4ee5\u4e0b\u306e4\u3064\u306eAPIkey\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002\n- CONSUMER_KEY \n- CONSUMER_SECRET\n- ACCESS_KEY \n- ACCESS_SECRET \n\u3053\u308c\u3089\u306fTwitterAPI\u30da\u30fc\u30b8\u306e\u4ee5\u4e0b\u306e4\u3064\u306e\u9805\u76ee\u306b\u7d9a\u304f\u756a\u53f7\u306b\u305d\u308c\u305e\u308c\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u4ee5\u4e0a\u306e4\u3064\u306ekey\u3092\u78ba\u8a8d\u3067\u304d\u305f\u3089\u3055\u3063\u305d\u304fTwitterBot\u3092\u4f5c\u3063\u3066\u52d5\u4f5c\u78ba\u8a8d\u3092\u884c\u3044\u307e\u3057\u3087\u3046\u3002\n\ntweet.py\n#!/usr/bin/env python\n#coding:utf-8\n\nimport os\nfrom twython import Twython\n\n#Twiiter API \nCONSUMER_KEY ='API_key1'\nCONSUMER_SECRET ='API_key2'\nACCESS_KEY ='API_key3'\nACCESS_SECRET ='API_key4'\napi = Twython(CONSUMER_KEY,CONSUMER_SECRET,ACCESS_KEY,ACCESS_SECRET)\n\n#time stamp\ntimestamp = 'date +%F_%H:%M:%S'\ncurrent_time=os.popen(timestamp).readline().strip()\n\n\napi.update_status(status='\u3010\u30c6\u30b9\u30c8\u3011\u73fe\u5728\u6642\u523b\u306f'+current_time+'\u3067\u3059!')\n\n\n\n\u3082\u3057\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u3066\u3082\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3092\u306f\u3055\u3093\u3067\u3042\u308b\u306e\u3067\u3001\u9023\u7d9a\u3057\u3066\u6295\u7a3f\u304c\u53ef\u80fd\u3067\u3059\u306e\u3067\u3001\u3059\u3050\u306b\u30c7\u30d0\u30c3\u30af\u304c\u51fa\u6765\u307e\u3059\u3002\u6295\u7a3f\u304c\u3046\u307e\u304f\u3044\u3051\u3070\u3001\u81ea\u5206\u306eTL\u306b\u73fe\u5728\u6642\u523b\u304c\u6295\u7a3f\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\u4ee5\u4e0a\u3067TwitterAPI\u3067\u306e\u52d5\u4f5c\u78ba\u8a8d\u304c\u7d42\u308f\u308a\u306b\u3057\u307e\u3059\u3002\n\ncrontab\u3067\u5b9a\u671f\u7684\u306bdht11_tweet.py\u3092\u5b9f\u884c\u3059\u308b\u3002\n\u3053\u3053\u307e\u3067\u304f\u308c\u3070\u3001\u5f8c\u306f\u6700\u521d\u306b\u4f5c\u3063\u305fdht11_example.py\u3068\u4eca\u3055\u3063\u304d\u4f5c\u3063\u305ftweet.py\u3092\u5408\u308f\u305b\u308b\u4e8b\u3067\u3001\u6e29\u5ea6\u3068\u6e7f\u5ea6\u304cTwitter\u3067\u6295\u7a3f\u3067\u304d\u308b\u4e8b\u304c\u306a\u3093\u3068\u306a\u304f\u30a4\u30e1\u30fc\u30b8\u51fa\u6765\u308b\u601d\u3044\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u6700\u5f8c\u306b2\u3064\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u76ee\u7684\u306edht11_tweet.py\u3092\u4ed5\u4e0a\u3052\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\ndht11_tweet.py\n# -*- coding: utf-8 -*\n\nimport RPi.GPIO as GPIO\nimport dht11\nimport time\nimport datetime\nimport os\nfrom twython import Twython\n\n# initialize GPIO\nGPIO.setwarnings(False)\nGPIO.setmode(GPIO.BCM)\nGPIO.cleanup()\n\ninstance = dht11.DHT11(pin=4)\n\n#Twiiter API \nCONSUMER_KEY ='API_key1'\nCONSUMER_SECRET ='API_key2'\nACCESS_KEY ='API_key3'\nACCESS_SECRET ='API_key4'\napi = Twython(CONSUMER_KEY,CONSUMER_SECRET,ACCESS_KEY,ACCESS_SECRET)\n\n#time stamp\ntimestamp = 'date +%F_%H:%M:%S'\ncurrent_time=os.popen(timestamp).readline().strip()\n\nwhile True:\n    result = instance.read()\n    if result.is_valid():\n        api.update_status(status = '\u3010\u6e29\u6e7f\u60c5\u5831\u3011'+'\u73fe\u5728\u6642\u523b'+current_time\n            +'\u6e29\u5ea6:'+str(result.temperature)+'\u2103\u3067\u3059\u3002'+'\u6e7f\u5ea6:'+str(result.humidity)\n            +'%\u3067\u3059\u3002')\n\n        break\n\n    time.sleep(1)\n\n\n\n\u4f55\u5ea6\u304bdht11_example.py\u3092\u5b9f\u884c\u3057\u3066\u308c\u3070\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001DHT11(\u6e29\u6e7f\u5ea6\u30bb\u30f3\u30b5)\u306f\u305d\u3053\u307e\u7cbe\u5ea6\u306f\u3088\u304f\u306a\u3044\u3067\u3059\u3002\u5f93\u3063\u3066\u5b9f\u884c\u3057\u305f\u3089\u5fc5\u305a\u8a08\u6e2c\u5024\u304c\u8fd4\u3063\u3066\u304f\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u53d6\u308c\u306a\u3044\u5834\u5408\u304c\u3088\u304f\u8d77\u304d\u307e\u3059\u3002\u305d\u3046\u306a\u3063\u305f\u5834\u5408\u3001instance\u81ea\u4f53\u304c\u751f\u6210\u3055\u308c\u306a\u3044\u70ba\u3001api.update_status\u306b\u7d44\u307f\u8fbc\u307e\u308c\u3066\u3044\u308bresult.temperature\u3068result.humidity\u304c\u547c\u3073\u51fa\u3055\u308c\u306a\u3044\u70ba\u306bError\u304c\u751f\u3058\u3066\u6295\u7a3f\u304c\u5931\u6557\u3057\u307e\u3059\u3002\u305d\u306e\u70ba\nwhile True:\n    result = instance.read()\n\nwhile\u6587\u3067instance\u304c\u751f\u6210\u3055\u308c\u308b=[\u3061\u3083\u3093\u6e29\u5ea6\u3068\u5ba4\u6e29\u304c\u8a08\u6e2c\u3067\u304d\u3066\u3044\u308b\u72b6\u614b]\u307e\u3067\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\u52a0\u3048\u3066\u6295\u7a3f\u306finstance\u751f\u6210\u304c\u6210\u529f\u3057\u305f\u969b\u306e\u6700\u521d\u306e1\u56de\u76ee\u3067\u3044\u3044\u306e\u3067api.update_status\u306e\u7d42\u308f\u308a\u306bbreak\u3092\u631f\u307f\u307e\u3059\u3002\n\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u78ba\u5b9f\u306b\u6c17\u6e29\u3068\u6e7f\u5ea6\u3092\u8a08\u6e2c\u3057\u3064\u3064\u3001\u4e00\u56de\u3060\u3051Tweet\u3059\u308b\u51e6\u7406\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\n\u4ee5\u4e0a\u3067\u304a\u304a\u307e\u304b\u306a\u6c17\u6e29\u3068\u6e7f\u5ea6\u3092\u545f\u304fTweetBot\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\u3067\u3059\u304c\u3053\u308c\u3067\u306f\u4f9d\u7136\u3068\u3057\u3066\u624b\u52d5\u5f0f\u306a\u306e\u3067\u3001\u6700\u5f8c\u306bBot\u3089\u3057\u304f\u3059\u308b\u70bacrontab\u306b\u767b\u9332\u3057\u3066\u5b9a\u671f\u7684\u306b\u545f\u304f\u3088\u3046\u306b\u3057\u307e\u3059\u3002\ncrontab\u306e\u8aac\u660e\u306f\u3053\u3053\u3067\u306f\u7701\u7565\u3057\u307e\u3059\u304c\u3001\u8981\u306f\u30bf\u30b9\u30af\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u3088\u3046\u306a\u3082\u306e\u3068\u8003\u3048\u3066\u4e0b\u3055\u3044\u3002\n\u6307\u5b9a\u3057\u305f\u6642\u9593\u3054\u3068\u306b\u30b3\u30de\u30f3\u30c9\u3084\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3057\u3066\u304f\u308c\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n\ncrontab\u4f7f\u3044\u65b9\u307e\u3068\u3081\u3002\n\ncrrontab -e\u3092\u6253\u3061\u8fbc\u3093\u3067crontab\u3092\u958b\u304d\u307e\u3059\u3002\u56e0\u307f\u306b\u4e0a\u66f8\u304d\u4fdd\u5b58\u306fCtr + o\u3067exit\u306fCtr+x\u3067\u3059\u3002\u3053\u306e2\u3064\u306e\u30b3\u30de\u30f3\u30c9\u306f\u3001\u3088\u304f\u4f7f\u3046\u306e\u3067\u899a\u3048\u3066\u304a\u3044\u3066\u4e0b\u3055\u3044\u3002\n\u4f8b\u3048\u307015\u5206\u3054\u3068\u306bTweetBot\u304b\u3089\u6295\u7a3f\u3057\u305f\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u69d8\u306b\u66f8\u304d\u307e\u3059\u3002\n*/15 * * * * sudo python /home/pi/(....)/dht11_tweet.py\n\n\u3053\u308c\u3067\u6b63\u3057\u304f\u52d5\u4f5c\u3057\u306a\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u898b\u306a\u304c\u3089\u30c7\u30d0\u30c3\u30af\u3092\u884c\u3063\u3066\u4e0b\u3055\u3044\u3002\n\ncrontab\u304c\u3069\u3046\u3057\u3066\u3082\u52d5\u304b\u306a\u3044\u3068\u304d\u306b\u78ba\u8a8d\u3059\u3079\u304d3\u3064\u306e\u70b9+\u03b1\n\n\u3053\u308c\u306715\u5206\u3054\u3068\u306b\u6c17\u6e29\u3068\u6e7f\u5ea6\u3092\u545f\u304fTweetBot\u304c\u5b8c\u6210\u3057\u307e\u3057\u305f\u3002\n\u304a\u75b2\u308c\u69d8\u3067\u3059\u3002\n\u306a\u304a\u3001\u3053\u306e\u30b3\u30fc\u30c9\u306f\u5168\u3066Python\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4f8b\u3048\u3070\u30b0\u30e9\u30d5\u3092\u8868\u793a\u3055\u305b\u305f\u308a\u3001\u6307\u5b9a\u3057\u305f\u6c17\u6e29\u306b\u306a\u3063\u305f\u3089\u30d6\u30b6\u30fc\u3092\u9cf4\u3089\u3057\u3066\u307f\u308b\u3068\u3044\u3063\u305f\u4e8b\u3082\u53ef\u80fd\u3068\u306a\u3063\u3066\u304f\u308b\u3068\u601d\u3046\u306e\u3067\u662f\u975e\u8208\u5473\u304c\u3042\u308b\u65b9\u306f\u6311\u6226\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n#\u958b\u767a\u74b0\u5883\n|HD|RaspberryPi B+|\n|:------:|:-------:|\n|OS|Debian GNU/Linux 7.8 (wheezy)|\n|Python|ver 2.7.3|\n_\u203b\u7279\u306b\u554f\u984c\u304c\u306a\u3051\u308c\u3070\u6700\u65b0\u306eRaspberryPi2,3\u3084OS\u304cJessie\u3067\u3082\u52d5\u304f\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u4f59\u308a\u6c17\u306b\u3057\u306a\u304f\u3066\u7d50\u69cb\u3067\u3059\u3002_\n\n\n#\u4f7f\u7528\u6a5f\u5668\n|\u540d\u79f0|\u4f7f\u7528\u7528\u9014|\n|:------:|:-------:|\n|[DHT11](http://akizukidenshi.com/catalog/g/gM-07040/)|\u6e29\u6e7f\u5ea6\u8a08\u6e2c\u7528|\n|[\u30b8\u30e3\u30f3\u30d1\u30fc\u7dda (\u30e1\u30b9 - \u30aa\u30b9)](http://akizukidenshi.com/catalog/g/gP-03471/)|GPIO\u63a5\u7d9a\u7528|\n\n_[\u79cb\u6708](http://akizukidenshi.com/catalog/default.aspx)\u304b[\u30de\u30eb\u30c4\u30d1\u30fc\u30c4](http://www.marutsu.co.jp/)\u3067\u306e\u8cfc\u5165\u3092\u304a\u3059\u3059\u3081\u3057\u307e\u3059\u3002_\n\n\n\n\n\n#\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\n\u203b\u3053\u3053\u3067\u306f\u3001\u65e2\u306bRaspberryPi\u306bOS\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305f\u524d\u7a0b\u3067\u8a71\u3092\u9032\u3081\u307e\u3059\u3002\n\n##git\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\n\n\u5f8c\u3067\u51fa\u3066\u304f\u308b`dht11.py`\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u70ba\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n```\nsudo apt-get install git\n\n```\n\n##RPi.GPIO\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\n\nRPi.GPIO\u306fPython\u3092\u4f7f\u3063\u3066Raspberry Pi\u306eGPIO\u30d4\u30f3\u5236\u5fa1\u3067\u304d\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3059\u3002RaspberryPi\u3068\u3001LED\u3084\u30bb\u30f3\u30b5\u6a5f\u5668\u306a\u3069\u306e\u96fb\u5b50\u6a5f\u5668\u3092\u64cd\u4f5c\u3059\u308b\u306b\u5fc5\u9808\u3067\u3059\u3002\u3053\u308c\u304c\u306a\u3044\u3068\u3001GPIO\u30d4\u30f3\u304c\u3042\u3063\u305f\u3068\u3057\u3066\u30825(v)\u30683.3(v)\u306e\u96fb\u5727\u3092\u4f9b\u7d66\u3067\u304d\u308b\u53ea\u306e\u9ad8\u7d1a\u306a\u7bb1\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u306e\u3067\u662f\u975e\u5c0e\u5165\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u5c1a\u3001Jessi\u306e\u30ea\u30ea\u30fc\u30b9\u304b\u3089\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3068\u3044\u3046\u3053\u3068\u3067Python\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u6700\u521d\u3067\u3053\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308c\u3070\u3059\u3050\u306b\u4f7f\u3048\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\n>\n[\u516c\u5f0f\u30b5\u30a4\u30c8](https://pypi.python.org/pypi/RPi.GPIO)\n[\u7b2c26\u56de Raspberry Pi\u306eGPIO\u3092\u5236\u5fa1\u3059\u308b (Python\u7de8)](https://tool-lab.com/make/raspberrypi-startup-26/)\n\n\n\u304c\u3001\u3053\u3053\u3067\u306f\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3001\u307e\u3060Jessi\u306b\u79fb\u3063\u3066\u5c45\u306a\u3044\u65b9(\u50d5\u307f\u305f\u3044\u306a)\u5411\u3051\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n```\npip\u306e\u5834\u5408\nsudo pip install rpi.gpio\n\napt-get\u306e\u5834\u5408\nsudo apt-get install python-rpi.gpio\n```\n\n\u3053\u3053\u3067\u5c0e\u5165\u51fa\u6765\u308c\u3070\u3001\u7df4\u7fd2\u3068\u3057\u3066RaspberryPi\u306e[GPIO\u30d4\u30f3\u306e\u5bfe\u5fdc\u8868](https://tool-lab.com/make/raspberrypi-startup-22/)\u3092\u307f\u306a\u304c\u3089\u3001\u662f\u975eL\u30c1\u30ab\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002L\u30c1\u30ab\u306f\u3044\u308f\u3086\u308b'Hello wold'\u7684\u306a\u52d5\u4f5c\u306a\u306e\u3067\u3001\u3053\u308c\u304c\u521d\u3081\u306e\u4e00\u6b69\u3068\u306a\u308a\u307e\u3059\u3002\n\n>\n[Raspberry Pi\u3067Python\u306eRPi.GPIO\u3092\u4f7f\u3063\u3066L\u30c1\u30ab\u3059\u308b](http://qiita.com/masato/items/715e28e0c0c945a54297)\n\n##twython\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\n\n```\nsudo apt-get install python-setuptools\nsudo easy_install pip\nsudo pip install twython\n\n```\n\n\n\ntwython\u3068\u306fPython\u3067\u8a18\u8ff0\u3055\u308c\u305fTwitter\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\u5177\u4f53\u7684\u306b\u306a\u306b\u304c\u51fa\u6765\u308b\u304b\u3068\u8a00\u3046\u3068\u3001\u516c\u5f0f\u304c\u3053\u3093\u306a\u4e8b\u3092\u8a00\u3063\u3066\u3044\u307e\u3059\u3002\n\n>\n_Twython is the premier Python library providing an easy (and up-to-date) way to access Twitter data. Actively maintained and featuring support for Python 2.6+ and Python 3. It's been battle tested by companies, educational institutions and individuals alike. Try it today!_\n\n>\nTwython\u306f\u3001Twitter\u306e\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306e\u7c21\u5358\u306a\uff08\u304b\u3064\u6700\u65b0\u306e\uff09\u65b9\u6cd5\u3092\u63d0\u4f9b\u3059\u308b\u6700\u9ad8\u306ePython\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059!\u3002\u7279\u306bPython\u306e2.6+\u3068Python3\u3092\u30e1\u30a4\u30f3\u306b\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305fTwython\u306f\u4f01\u696d\u3084\u6559\u80b2\u6a5f\u95a2\u3001\u500b\u4eba\u306b\u3088\u3063\u3066\u7a4d\u6975\u7684\u306b\u30c6\u30b9\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u662f\u975e\u304a\u8a66\u3057\u304f\u3060\u3055\u3044\uff01\n\n\n\nTwitterBot\u3092\u4f5c\u308b\u3068\u304d\u306f\u5927\u62b5\u3053\u306eTwython\u304c\u88cf\u5074\u3067\u96e3\u3057\u3044\u51e6\u7406\u3092\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u6211\u3005\u306fTwitter APIKey\u3055\u3048\u3042\u308c\u3070\u3001TwiiterBot\u3092Python\u3067\u7c21\u5358\u306b\u66f8\u3051\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u4fbf\u5229\u3067\u3059\u3002\n\n\u305d\u306e\u88cf\u5074\u3068\u8a73\u7d30\u306a\u4f7f\u7528\u7528\u9014\u3092\u77e5\u308a\u305f\u3051\u308c\u3070\u3001\u662f\u975e\u516c\u5f0f\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u4e8b\u3092\u304a\u3059\u3059\u3081\u3057\u307e\u3059\u3002\n\n\u516c\u5f0f:https://github.com/ryanmcgrath/twython\n\n>\n[Raspberry Pi\u306eCPU\u6e29\u5ea6\u3092\u3064\u3076\u3084\u304fTwitterBot](http://pettomo.azurewebsites.net/?p=4101)\n[twython\u306e\u5c0e\u5165\u3068\u30c6\u30b9\u30c8](http://d.hatena.ne.jp/yoschi0831/20130810/1376115487)\n\n\n\u4ee5\u4e0a\u3067\u5927\u307e\u304b\u306a\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\u6b21\u306b\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u56de\u8def\u63a5\u7d9a\u306b\u5165\u308a\u307e\u3059\u3002\n\n#RaspberryPi\u3068DHT11\u3092\u63a5\u7d9a\u3059\u308b\u3002\n\n\u63a5\u7d9a\u56f3\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n![Raspberry_DHT11_\u30d6\u30ec\u30c3\u30c9\u30dc\u30fc\u30c9.png](https://qiita-image-store.s3.amazonaws.com/0/64829/c7f9413e-0eee-ce32-06d3-d367a6c23784.png)\n\nDHT11\u3068GPIO\u30d4\u30f3\u306e\u5bfe\u5fdc\u8868\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n![Raspberry_DHT11_\u56de\u8def\u56f3.png](https://qiita-image-store.s3.amazonaws.com/0/64829/48166014-7138-ff39-b55e-8bc3c5680357.png)\n\n|RaspberryPi B+|DHT11|\n|:------:|:-------:|\n|VDD|5.0(v)|\n|DATA|GPIO4|\n|GND|GND(PIN:6)|\n\n\u203bDATA\u306fGPIO14,GPIO17\u3067\u3082\u3044\u3044\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u7df4\u7fd2\u3068\u3057\u3066GPIO4\u3092\u9078\u629e\u3057\u307e\u3057\u305f\u3002\n\n\n\n\u88fd\u54c1\u306b\u3088\u3063\u3066\u306f\u62b5\u6297\u304c\u65e2\u306b\u63a5\u7d9a\u6e08\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u88fd\u54c1\u3082\u3042\u308a\u307e\u3059\u304c([\u30b3\u30ec](http://akizukidenshi.com/catalog/g/gM-07040/)\u3068\u304b)\u57fa\u672c\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002GPIO\u30d4\u30f3\u3068\u306e\u5bfe\u5fdc\u8868\u306f\u5404RasperryPi\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u70ba\u3001GPIO\u30d4\u30f3\u306e\u5bfe\u5fdc\u8868\u3092\u898b\u306a\u304c\u3089\u63a5\u7d9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n![GPIO.png](https://qiita-image-store.s3.amazonaws.com/0/64829/ff5b5716-e2f1-ab5f-cda8-41d2bd180ee8.png)\n\n\n\u3053\u308c\u3067\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u5074\u306e\u63a5\u7d9a\u3092\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\n\u6b21\u306b\u63a5\u7d9a\u3057\u305fDHT11\u304b\u3089\u5ba4\u6e29\u3068\u6c17\u6e29\u3092\u5b9f\u969b\u306b\u6e2c\u5b9a\u3057\u3066\u52d5\u4f5c\u78ba\u8a8d\u3092\u3057\u307e\u3057\u3087\u3046\u3002\n\n\n#Python\u3067DHT11\u3092\u5236\u5fa1\u3059\u308b\u3002\n\nPython\u3067DHT11\u3092\u5236\u5fa1\u3059\u308b\u30b3\u30fc\u30c9\u304c\u65e2\u306b\u4f5c\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u88fd\u4f5c\u8005\u306b\u611f\u8b1d\u3057\u306a\u304c\u3089`git clone`\u3092\u5b9f\u52b9\u3057\u307e\u3057\u3087\u3046\u3002\n\nhttps://github.com/szazo/DHT11_Python\n\n```\ncd\ngit clone https://github.com/szazo/DHT11_Python.git\n```\n\n`git clone`\u3057\u305f\u5148\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n\u305d\u306e\u4e2d\u306e`dht11.py`\u3068`dht11_examle.py`\u306e2\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u6ce8\u76ee\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n\n```dht11.py\nimport time\nimport RPi\n\n\nclass DHT11Result:\n    'DHT11 sensor result returned by DHT11.read() method'\n\n    ERR_NO_ERROR = 0\n    ERR_MISSING_DATA = 1\n    ERR_CRC = 2\n\n    error_code = ERR_NO_ERROR\n    temperature = -1\n    humidity = -1\n\n    def __init__(self, error_code, temperature, humidity):\n        self.error_code = error_code\n        self.temperature = temperature\n        self.humidity = humidity\n\n    def is_valid(self):\n        return self.error_code == DHT11Result.ERR_NO_ERROR\n\n\nclass DHT11:\n    'DHT11 sensor reader class for Raspberry'\n\n    __pin = 0\n\n    def __init__(self, pin):\n        self.__pin = pin\n\n    def read(self):\n        RPi.GPIO.setup(self.__pin, RPi.GPIO.OUT)\n\n        # send initial high\n        self.__send_and_sleep(RPi.GPIO.HIGH, 0.05)\n\n        # pull down to low\n        self.__send_and_sleep(RPi.GPIO.LOW, 0.02)\n\n        # change to input using pull up\n        RPi.GPIO.setup(self.__pin, RPi.GPIO.IN, RPi.GPIO.PUD_UP)\n\n        # collect data into an array\n        data = self.__collect_input()\n\n        # parse lengths of all data pull up periods\n        pull_up_lengths = self.__parse_data_pull_up_lengths(data)\n\n        # if bit count mismatch, return error (4 byte data + 1 byte checksum)\n        if len(pull_up_lengths) != 40:\n            return DHT11Result(DHT11Result.ERR_MISSING_DATA, 0, 0)\n\n        # calculate bits from lengths of the pull up periods\n        bits = self.__calculate_bits(pull_up_lengths)\n\n        # we have the bits, calculate bytes\n        the_bytes = self.__bits_to_bytes(bits)\n\n        # calculate checksum and check\n        checksum = self.__calculate_checksum(the_bytes)\n        if the_bytes[4] != checksum:\n            return DHT11Result(DHT11Result.ERR_CRC, 0, 0)\n\n        # ok, we have valid data, return it\n        return DHT11Result(DHT11Result.ERR_NO_ERROR, the_bytes[2], the_bytes[0])\n\n    def __send_and_sleep(self, output, sleep):\n        RPi.GPIO.output(self.__pin, output)\n        time.sleep(sleep)\n\n    def __collect_input(self):\n        # collect the data while unchanged found\n        unchanged_count = 0\n\n        # this is used to determine where is the end of the data\n        max_unchanged_count = 100\n\n        last = -1\n        data = []\n        while True:\n            current = RPi.GPIO.input(self.__pin)\n            data.append(current)\n            if last != current:\n                unchanged_count = 0\n                last = current\n            else:\n                unchanged_count += 1\n                if unchanged_count > max_unchanged_count:\n                    break\n\n        return data\n\n    def __parse_data_pull_up_lengths(self, data):\n        STATE_INIT_PULL_DOWN = 1\n        STATE_INIT_PULL_UP = 2\n        STATE_DATA_FIRST_PULL_DOWN = 3\n        STATE_DATA_PULL_UP = 4\n        STATE_DATA_PULL_DOWN = 5\n\n        state = STATE_INIT_PULL_DOWN\n\n        lengths = [] # will contain the lengths of data pull up periods\n        current_length = 0 # will contain the length of the previous period\n\n        for i in range(len(data)):\n\n            current = data[i]\n            current_length += 1\n\n            if state == STATE_INIT_PULL_DOWN:\n                if current == RPi.GPIO.LOW:\n                    # ok, we got the initial pull down\n                    state = STATE_INIT_PULL_UP\n                    continue\n                else:\n                    continue\n            if state == STATE_INIT_PULL_UP:\n                if current == RPi.GPIO.HIGH:\n                    # ok, we got the initial pull up\n                    state = STATE_DATA_FIRST_PULL_DOWN\n                    continue\n                else:\n                    continue\n            if state == STATE_DATA_FIRST_PULL_DOWN:\n                if current == RPi.GPIO.LOW:\n                    # we have the initial pull down, the next will be the data pull up\n                    state = STATE_DATA_PULL_UP\n                    continue\n                else:\n                    continue\n            if state == STATE_DATA_PULL_UP:\n                if current == RPi.GPIO.HIGH:\n                    # data pulled up, the length of this pull up will determine whether it is 0 or 1\n                    current_length = 0\n                    state = STATE_DATA_PULL_DOWN\n                    continue\n                else:\n                    continue\n            if state == STATE_DATA_PULL_DOWN:\n                if current == RPi.GPIO.LOW:\n                    # pulled down, we store the length of the previous pull up period\n                    lengths.append(current_length)\n                    state = STATE_DATA_PULL_UP\n                    continue\n                else:\n                    continue\n\n        return lengths\n\n    def __calculate_bits(self, pull_up_lengths):\n        # find shortest and longest period\n        shortest_pull_up = 1000\n        longest_pull_up = 0\n\n        for i in range(0, len(pull_up_lengths)):\n            length = pull_up_lengths[i]\n            if length < shortest_pull_up:\n                shortest_pull_up = length\n            if length > longest_pull_up:\n                longest_pull_up = length\n\n        # use the halfway to determine whether the period it is long or short\n        halfway = shortest_pull_up + (longest_pull_up - shortest_pull_up) / 2\n        bits = []\n\n        for i in range(0, len(pull_up_lengths)):\n            bit = False\n            if pull_up_lengths[i] > halfway:\n                bit = True\n            bits.append(bit)\n\n        return bits\n\n    def __bits_to_bytes(self, bits):\n        the_bytes = []\n        byte = 0\n\n        for i in range(0, len(bits)):\n            byte = byte << 1\n            if (bits[i]):\n                byte = byte | 1\n            else:\n                byte = byte | 0\n            if ((i + 1) % 8 == 0):\n                the_bytes.append(byte)\n                byte = 0\n\n        return the_bytes\n\n    def __calculate_checksum(self, the_bytes):\n        return the_bytes[0] + the_bytes[1] + the_bytes[2] + the_bytes[3] & 255\n\n```\n\n\n\u3053\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304c\u4e3b\u306bDHT11\u304b\u3089\u5f97\u3089\u308c\u30c7\u30b8\u30bf\u30eb\u4fe1\u53f7\u3092Python\u3067\u51e6\u7406\u3057\u3066\u304f\u308c\u308b\u30af\u30e9\u30b9\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\u5f93\u3063\u3066`dht11.py`\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u306b\u4f5c\u3089\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u3046\u4e8b\u3067\u7c21\u5358\u306b\u6e7f\u5ea6\u3068\u6e29\u5ea6\u306e\u8a08\u6e2c\u5024\u3092\u5f97\u3089\u308c\u308b\u4e8b\u304c\u7406\u89e3\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\n\u305d\u308c\u3067\u306f\u5b9f\u969b\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f7f\u3063\u305f\u4f8b\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\n```dht11_example.py(\u4fee\u6b63\u524d)\n\nimport RPi.GPIO as GPIO\nimport dht11\nimport time\nimport datetime\n\n# initialize GPIO\nGPIO.setwarnings(False)\nGPIO.setmode(GPIO.BCM)\nGPIO.cleanup()\n\n# read data using pin 14\ninstance = dht11.DHT11(pin=14)\n\nwhile True:\n    result = instance.read()\n    if result.is_valid():\n        print(\"Last valid input: \" + str(datetime.datetime.now()))\n        print(\"Temperature: %d C\" % result.temperature)\n        print(\"Humidity: %d %%\" % result.humidity)\n\n    time.sleep(1)\n\n```\n\n\u3053\u3053\u3067\u6ce8\u610f\u3057\u3066\u6b32\u3057\u3044\u306e\u306f`instance = dht11.DHT11(pin=14)`\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u65e2\u306bGPIO14\u3067\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u306a\u3089\u3001\u3053\u3053\u3067\u306f\u4f55\u3082\u3057\u306a\u304f\u3066\u7d50\u69cb\u3067\u3059\u304c\u5148\u7a0b\u306e\u56de\u8def\u8a2d\u8a08\u306e\u969b\u306b`GPIO4`\u3092\u9078\u629e\u3057\u305f\u5834\u5408\u306f\u3053\u306e\u69d8\u306b\u4fee\u6b63\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n\n```diff\n\nimport RPi.GPIO as GPIO\nimport dht11\nimport time\nimport datetime\n\n# initialize GPIO\nGPIO.setwarnings(False)\nGPIO.setmode(GPIO.BCM)\nGPIO.cleanup()\n\n# read data using pin 14\n-instance = dht11.DHT11(pin=14)\n+instance = dht11.DHT11(pin=4)\n\nwhile True:\n    result = instance.read()\n    if result.is_valid():\n        print(\"Last valid input: \" + str(datetime.datetime.now()))\n        print(\"Temperature: %d C\" % result.temperature)\n        print(\"Humidity: %d %%\" % result.humidity)\n\n    time.sleep(1)\n\n```\n\n\u4ee5\u4e0a\u3067DHT11\u304b\u3089\u6e29\u6e7f\u5ea6\u3092\u8a08\u6e2c\u3059\u308b\u30b3\u30fc\u30c9\u304c\u5b8c\u6210\u3057\u307e\u3057\u305f\u3002\n\u52d5\u4f5c\u78ba\u8a8d\u3068\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```\nsudo python dht11_example.py\n\n```\n\n_\u203b\u304b\u306a\u3089\u305aroot\u6a29\u9650\u304b`sudo`\u3092\u3064\u3051\u3066\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044!\u3002\u305d\u3046\u3057\u306a\u3044\u3068Error\u304c\u8d77\u304d\u307e\u3059\u3002_\n\n\u4e0a\u624b\u304f\u3044\u3051\u3070\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306b\u6e29\u5ea6\u3068\u6e7f\u5ea6\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4ee5\u4e0a\u304c\u78ba\u8a8d\u3067\u304d\u308c\u3070DHT11\u306e\u52d5\u4f5c\u78ba\u8a8d\u306f\u5b8c\u4e86\u3067\u3059\u3002\u304a\u75b2\u308c\u69d8\u3067\u3059\u3002\n\n#TweetBot\u3092\u4f5c\u308b\u70ba\u306bTwitterAPI\u306b\u767b\u9332\u3059\u308b\u3002\n\nTweetBot\u3092\u4f5c\u308b\u70ba\u306eTwitterAPI\u306b\u767b\u9332\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u3053\u3053\u304b\u3089\u5c02\u7528\u30da\u30fc\u30b8\u306b\u98db\u3073\u3001Create New App\u3092\u62bc\u3057\u3066\u767b\u9332\u3057\u3066\u4e0b\u3055\u3044\u3002\nhttps://apps.twitter.com/\n\n##[\u6ce8\u610f\u305d\u306e1]TwitterAPI\u306e\u767b\u9332\u306b\u306f\u96fb\u8a71\u756a\u53f7\u304c\u5fc5\u8981\u304b\u3064\u3001\u8a00\u8a9e\u3092[English]\u306b\u3059\u308b\u3002\nTwitterAPI\u306e\u767b\u9332\u306b\u306f\u96fb\u8a71\u756a\u53f7\u304c\u5fc5\u8981\u3067\u3059\u3002\u3058\u3083\u306a\u3044\u3068\u3053\u3093\u306a\u611f\u3058\u306b\u6012\u3089\u308c\u307e\u3059\u3002\n![error.png](https://qiita-image-store.s3.amazonaws.com/0/64829/41f575a9-121b-dec7-bc40-5cbdfa7c154e.png)\n\n\u305d\u3053\u3067\u96fb\u8a71\u756a\u53f7\u3092\u767b\u9332\u3057\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f\u756a\u53f7\u3092\u5165\u529b\u3057\u96fb\u8a71\u8a8d\u8a3c\u3092\u884c\u3044\u307e\u3059....\u304c\u3001\u3053\u308c\u3067\u3082\u307e\u3060\u4e0a\u624b\u304f\u3044\u304d\u307e\u305b\u3093\u3002\n\n\u30d0\u30b0\u306a\u306e\u304b\u4f7f\u7528\u306a\u306e\u304b\u3001~~Twitter\u793e\u306e\u30a8\u30f3\u30b8\u30cb\u30a2\u304c\u4ed5\u4e8b\u3057\u3066\u3044\u306a\u3044\u306e\u304b~~\u3001\u8a73\u7d30\u306f\u4e0d\u660e\u3067\u3059\u304c\u3001Twitter\u306e\u8a00\u8a9e\u8a2d\u5b9a\u3092[\u65e5\u672c\u8a9e]\u304b\u3089[English]\u306b\u3057\u307e\u3059\u3002\n\n![\u8a00\u8a9e.png](https://qiita-image-store.s3.amazonaws.com/0/64829/3ef837dd-23d2-e4c2-386f-598f608cb879.png)\n\n>\n[Twitter API\u3001Apps \u3092\u5229\u7528\u3059\u308b\u306e\u306b\u643a\u5e2f\u96fb\u8a71\u306e\u3067\u306e\u8a8d\u8a3c\u304c\u5fc5\u9808\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u8a8d\u8a3c\u3092\u884c\u3046\u65b9\u6cd5\u3002]([http://9-bb.com/twitter-apps/)\n\n\u3053\u306e\u72b6\u614b\u3067\u3082\u3046\u4e00\u3069\u96fb\u8a71\u8a8d\u8a3c\u3092\u884c\u3046\u3068\u7121\u4e8bTwitterAPI\u306e\u767b\u9332\u30da\u30fc\u30b8\u306b\u3044\u3051\u308b\u306e\u3067\u3001API\u306e\u767b\u9332\u3092\u884c\u3044\u307e\u3059\u3002\n\n##[\u6ce8\u610f\u305d\u306e2]\u77ed\u6642\u9593\u306b\u540c\u3058\u6295\u7a3f\u306f\u7d9a\u3051\u3066\u51fa\u6765\u306a\u3044\u3002\n\u30b9\u30d1\u30e0\u9632\u6b62\u306e\u70ba\u304b\u3001TwitterAPI\u3092\u4f7f\u3063\u3066\u540c\u3058\u6295\u7a3f\u3092\u9023\u7d9a\u3057\u3066Tweet\u3059\u308b\u4e8b\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3092\u4f7f\u3044\u77ed\u671f\u306b\u540c\u3058\u3088\u3046\u306atweet\u3092\u6295\u7a3f\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u4eca\u56de\u306e\u69d8\u306b\u6c17\u6e29,\u5ba4\u6e29\u3092\u6295\u7a3f\u3059\u308b\u969b\u306f\u540c\u3058\u3064\u3076\u3084\u304d\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u4e8b\u304c\u3042\u308b\u306e\u3067\u3001\u610f\u56f3\u7684\u306b\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3092\u306f\u3055\u3093\u3067\u3042\u3052\u308b\u4e8b\u3092\u304a\u85a6\u3081\u3057\u307e\u3059\u3002\n\n##RaspberyPi\u304b\u3089Tweet\u3059\u308b\u3002\n\nAPI\u306b\u767b\u9332\u3057\u305f\u3089\u4ee5\u4e0b\u306e4\u3064\u306eAPIkey\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002\n- CONSUMER_KEY \n- CONSUMER_SECRET\n- ACCESS_KEY \n- ACCESS_SECRET \n\n\u3053\u308c\u3089\u306fTwitterAPI\u30da\u30fc\u30b8\u306e\u4ee5\u4e0b\u306e4\u3064\u306e\u9805\u76ee\u306b\u7d9a\u304f\u756a\u53f7\u306b\u305d\u308c\u305e\u308c\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\n![accsess3.png](https://qiita-image-store.s3.amazonaws.com/0/64829/06a4cb7d-eae7-e33b-df35-c59983e9c5ca.png)\n\n\u4ee5\u4e0a\u306e4\u3064\u306ekey\u3092\u78ba\u8a8d\u3067\u304d\u305f\u3089\u3055\u3063\u305d\u304fTwitterBot\u3092\u4f5c\u3063\u3066\u52d5\u4f5c\u78ba\u8a8d\u3092\u884c\u3044\u307e\u3057\u3087\u3046\u3002\n\n```tweet.py\n#!/usr/bin/env python\n#coding:utf-8\n\nimport os\nfrom twython import Twython\n\n#Twiiter API \nCONSUMER_KEY ='API_key1'\nCONSUMER_SECRET ='API_key2'\nACCESS_KEY ='API_key3'\nACCESS_SECRET ='API_key4'\napi = Twython(CONSUMER_KEY,CONSUMER_SECRET,ACCESS_KEY,ACCESS_SECRET)\n\n#time stamp\ntimestamp = 'date +%F_%H:%M:%S'\ncurrent_time=os.popen(timestamp).readline().strip()\n\n\napi.update_status(status='\u3010\u30c6\u30b9\u30c8\u3011\u73fe\u5728\u6642\u523b\u306f'+current_time+'\u3067\u3059!')\n\n```\n\n\u3082\u3057\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u3066\u3082\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3092\u306f\u3055\u3093\u3067\u3042\u308b\u306e\u3067\u3001\u9023\u7d9a\u3057\u3066\u6295\u7a3f\u304c\u53ef\u80fd\u3067\u3059\u306e\u3067\u3001\u3059\u3050\u306b\u30c7\u30d0\u30c3\u30af\u304c\u51fa\u6765\u307e\u3059\u3002\u6295\u7a3f\u304c\u3046\u307e\u304f\u3044\u3051\u3070\u3001\u81ea\u5206\u306eTL\u306b\u73fe\u5728\u6642\u523b\u304c\u6295\u7a3f\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\u4ee5\u4e0a\u3067TwitterAPI\u3067\u306e\u52d5\u4f5c\u78ba\u8a8d\u304c\u7d42\u308f\u308a\u306b\u3057\u307e\u3059\u3002\n\n\n#`crontab`\u3067\u5b9a\u671f\u7684\u306b`dht11_tweet.py`\u3092\u5b9f\u884c\u3059\u308b\u3002\n\u3053\u3053\u307e\u3067\u304f\u308c\u3070\u3001\u5f8c\u306f\u6700\u521d\u306b\u4f5c\u3063\u305f`dht11_example.py`\u3068\u4eca\u3055\u3063\u304d\u4f5c\u3063\u305f`tweet.py`\u3092\u5408\u308f\u305b\u308b\u4e8b\u3067\u3001\u6e29\u5ea6\u3068\u6e7f\u5ea6\u304cTwitter\u3067\u6295\u7a3f\u3067\u304d\u308b\u4e8b\u304c\u306a\u3093\u3068\u306a\u304f\u30a4\u30e1\u30fc\u30b8\u51fa\u6765\u308b\u601d\u3044\u307e\u3059\u3002\n\n\u305d\u308c\u3067\u306f\u6700\u5f8c\u306b2\u3064\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u76ee\u7684\u306e`dht11_tweet.py`\u3092\u4ed5\u4e0a\u3052\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n```dht11_tweet.py\n# -*- coding: utf-8 -*\n\nimport RPi.GPIO as GPIO\nimport dht11\nimport time\nimport datetime\nimport os\nfrom twython import Twython\n\n# initialize GPIO\nGPIO.setwarnings(False)\nGPIO.setmode(GPIO.BCM)\nGPIO.cleanup()\n\ninstance = dht11.DHT11(pin=4)\n\n#Twiiter API \nCONSUMER_KEY ='API_key1'\nCONSUMER_SECRET ='API_key2'\nACCESS_KEY ='API_key3'\nACCESS_SECRET ='API_key4'\napi = Twython(CONSUMER_KEY,CONSUMER_SECRET,ACCESS_KEY,ACCESS_SECRET)\n\n#time stamp\ntimestamp = 'date +%F_%H:%M:%S'\ncurrent_time=os.popen(timestamp).readline().strip()\n\nwhile True:\n    result = instance.read()\n    if result.is_valid():\n        api.update_status(status = '\u3010\u6e29\u6e7f\u60c5\u5831\u3011'+'\u73fe\u5728\u6642\u523b'+current_time\n            +'\u6e29\u5ea6:'+str(result.temperature)+'\u2103\u3067\u3059\u3002'+'\u6e7f\u5ea6:'+str(result.humidity)\n            +'%\u3067\u3059\u3002')\n\n        break\n\n    time.sleep(1)\n\n```\n\n\u4f55\u5ea6\u304b`dht11_example.py`\u3092\u5b9f\u884c\u3057\u3066\u308c\u3070\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001DHT11(\u6e29\u6e7f\u5ea6\u30bb\u30f3\u30b5)\u306f\u305d\u3053\u307e\u7cbe\u5ea6\u306f\u3088\u304f\u306a\u3044\u3067\u3059\u3002\u5f93\u3063\u3066\u5b9f\u884c\u3057\u305f\u3089\u5fc5\u305a\u8a08\u6e2c\u5024\u304c\u8fd4\u3063\u3066\u304f\u308b\u308f\u3051\u3067\u306f\u306a\u304f\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u53d6\u308c\u306a\u3044\u5834\u5408\u304c\u3088\u304f\u8d77\u304d\u307e\u3059\u3002\u305d\u3046\u306a\u3063\u305f\u5834\u5408\u3001`instance`\u81ea\u4f53\u304c\u751f\u6210\u3055\u308c\u306a\u3044\u70ba\u3001`api.update_status`\u306b\u7d44\u307f\u8fbc\u307e\u308c\u3066\u3044\u308b`result.temperature`\u3068`result.humidity`\u304c\u547c\u3073\u51fa\u3055\u308c\u306a\u3044\u70ba\u306bError\u304c\u751f\u3058\u3066\u6295\u7a3f\u304c\u5931\u6557\u3057\u307e\u3059\u3002\u305d\u306e\u70ba\n\n```\nwhile True:\n    result = instance.read()\n```\n\n`while`\u6587\u3067instance\u304c\u751f\u6210\u3055\u308c\u308b=__[\u3061\u3083\u3093\u6e29\u5ea6\u3068\u5ba4\u6e29\u304c\u8a08\u6e2c\u3067\u304d\u3066\u3044\u308b\u72b6\u614b]__\u307e\u3067\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\u52a0\u3048\u3066\u6295\u7a3f\u306finstance\u751f\u6210\u304c\u6210\u529f\u3057\u305f\u969b\u306e\u6700\u521d\u306e1\u56de\u76ee\u3067\u3044\u3044\u306e\u3067` api.update_status`\u306e\u7d42\u308f\u308a\u306b`break`\u3092\u631f\u307f\u307e\u3059\u3002\n\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u78ba\u5b9f\u306b\u6c17\u6e29\u3068\u6e7f\u5ea6\u3092\u8a08\u6e2c\u3057\u3064\u3064\u3001\u4e00\u56de\u3060\u3051Tweet\u3059\u308b\u51e6\u7406\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u4ee5\u4e0a\u3067\u304a\u304a\u307e\u304b\u306a\u6c17\u6e29\u3068\u6e7f\u5ea6\u3092\u545f\u304fTweetBot\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\u3067\u3059\u304c\u3053\u308c\u3067\u306f\u4f9d\u7136\u3068\u3057\u3066\u624b\u52d5\u5f0f\u306a\u306e\u3067\u3001\u6700\u5f8c\u306bBot\u3089\u3057\u304f\u3059\u308b\u70ba`crontab`\u306b\u767b\u9332\u3057\u3066\u5b9a\u671f\u7684\u306b\u545f\u304f\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\n`crontab`\u306e\u8aac\u660e\u306f\u3053\u3053\u3067\u306f\u7701\u7565\u3057\u307e\u3059\u304c\u3001\u8981\u306f\u30bf\u30b9\u30af\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u3088\u3046\u306a\u3082\u306e\u3068\u8003\u3048\u3066\u4e0b\u3055\u3044\u3002\n\u6307\u5b9a\u3057\u305f\u6642\u9593\u3054\u3068\u306b\u30b3\u30de\u30f3\u30c9\u3084\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3057\u3066\u304f\u308c\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n\n>\n[crontab\u4f7f\u3044\u65b9\u307e\u3068\u3081\u3002](http://bakunyo.hatenablog.com/entry/2013/06/20/crontab%E4%BD%BF%E3%81%84%E6%96%B9%E3%81%BE%E3%81%A8%E3%82%81%E3%80%82)\n\n\n`crrontab -e`\u3092\u6253\u3061\u8fbc\u3093\u3067`crontab`\u3092\u958b\u304d\u307e\u3059\u3002\u56e0\u307f\u306b\u4e0a\u66f8\u304d\u4fdd\u5b58\u306f`Ctr + o`\u3067exit\u306f`Ctr+x`\u3067\u3059\u3002\u3053\u306e2\u3064\u306e\u30b3\u30de\u30f3\u30c9\u306f\u3001\u3088\u304f\u4f7f\u3046\u306e\u3067\u899a\u3048\u3066\u304a\u3044\u3066\u4e0b\u3055\u3044\u3002\n\n\u4f8b\u3048\u307015\u5206\u3054\u3068\u306bTweetBot\u304b\u3089\u6295\u7a3f\u3057\u305f\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u69d8\u306b\u66f8\u304d\u307e\u3059\u3002\n\n```\n*/15 * * * * sudo python /home/pi/(....)/dht11_tweet.py\n```\n\n\u3053\u308c\u3067\u6b63\u3057\u304f\u52d5\u4f5c\u3057\u306a\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u898b\u306a\u304c\u3089\u30c7\u30d0\u30c3\u30af\u3092\u884c\u3063\u3066\u4e0b\u3055\u3044\u3002\n\n>\n[crontab\u304c\u3069\u3046\u3057\u3066\u3082\u52d5\u304b\u306a\u3044\u3068\u304d\u306b\u78ba\u8a8d\u3059\u3079\u304d3\u3064\u306e\u70b9+\u03b1](http://d.hatena.ne.jp/natsumesouxx/20100313/1268479064)\n\n\u3053\u308c\u306715\u5206\u3054\u3068\u306b\u6c17\u6e29\u3068\u6e7f\u5ea6\u3092\u545f\u304fTweetBot\u304c\u5b8c\u6210\u3057\u307e\u3057\u305f\u3002\n\u304a\u75b2\u308c\u69d8\u3067\u3059\u3002\n\n\u306a\u304a\u3001\u3053\u306e\u30b3\u30fc\u30c9\u306f\u5168\u3066Python\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u4f8b\u3048\u3070[\u30b0\u30e9\u30d5](http://sinhrks.hatenablog.com/entry/2015/11/15/222543)\u3092\u8868\u793a\u3055\u305b\u305f\u308a\u3001\u6307\u5b9a\u3057\u305f\u6c17\u6e29\u306b\u306a\u3063\u305f\u3089\u30d6\u30b6\u30fc\u3092\u9cf4\u3089\u3057\u3066\u307f\u308b\u3068\u3044\u3063\u305f\u4e8b\u3082\u53ef\u80fd\u3068\u306a\u3063\u3066\u304f\u308b\u3068\u601d\u3046\u306e\u3067\u662f\u975e\u8208\u5473\u304c\u3042\u308b\u65b9\u306f\u6311\u6226\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\n\n\n\n", "tags": ["RaspberryPi", "IoT", "TwitterAPI", "Python", "DHT11"]}