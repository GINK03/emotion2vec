{"context": " More than 1 year has passed since last update.\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u3002\u4e09\u5ea6\u76ee\u3002\n\u554f\u984c\u306f http://nabetani.sakura.ne.jp/hena/ord3ynode/ \u3002\n\u30b3\u30fc\u30c9\u3092\u30a2\u30c3\u30d7\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u304c\u52c9\u5f37\u4f1a( see http://qiita.com/items/1815701039050f42bbc1 ) \u3068\u3044\u3046\u3053\u3068\u3067\u3001\u305d\u306e\u5834\u3067\u66f8\u3044\u305f C++11 \u7248\u3092\n\nynode.cpp\n#include <iostream>\n#include <utility>\n#include <string>\n#include <map>\n#include <cassert>\n\nusing namespace std;\n\nstruct testdata_t\n{\n  string in;\n  string expected;\n};\ntestdata_t testdata[]{\n// \u7565\n/*30*/ {\"rrrrbllrlrbrbrr\", \"ACBACABCFDEDADFC\" },\n};\n\nstring turn_r{ \"BACBA ADFCAD EBCFEB DABEDA FDEFD\" };\nstring turn_l{ turn_r.rbegin(), turn_r.rend() };\n\nstring turn( string const & state, string const & course )\n{\n  auto pos = course.find( state );\n  assert( pos != string::npos );\n  return course.substr(pos+2,1);\n}\n\nstring solv( string const & in )\n{\n  string r{\"BA\"};\n  for( auto ch : in ){\n    string state{ r.end()-2, r.end() };\n    switch( ch ){\n    case 'b':\n      r+=state[0];\n      break;\n    default:\n      r+=turn( state, ch=='r' ? turn_r : turn_l );\n      break;\n    }\n  }\n  return {r.begin()+1, r.end()};\n}\nint main()\n{\n  for( auto t : testdata ){\n    auto actual = solv(t.in);\n    cout << t.in << \"->\" << actual;\n    if ( actual != t.expected ){\n      cout << \"**FAIL** expected : \" << t.expected;\n    }\n    cout << endl;\n  }\n  return 0;\n}\n\n\nturn_r \u306f\u3001\u53f3\u306b\u66f2\u304c\u308a\u7d9a\u3051\u305f\u3089\u3053\u3046\u306a\u308b\u3088\u3068\u3044\u3046\u30b7\u30fc\u30b1\u30f3\u30b9\u3002\nturn_l \u306f\u3001\u5de6\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001turn_r \u304b\u3089 \"AB\" \u3092\u898b\u3064\u3051\u51fa\u3059\u3068\u3001\u305d\u306e\u6b21\u306e\u6587\u5b57\u304c AB \u306e\u5f8c\u3067\u53f3\u306b\u66f2\u304c\u3063\u305f\u3089\u5230\u9054\u3059\u308b Y\u5b57\u8def\u3002\u3068\u3044\u3046\u30ed\u30b8\u30c3\u30af\u3002\nC++11 \u306e\u6a5f\u80fd\u3092\u3061\u3087\u3063\u3068\u4f7f\u3063\u3066\u3060\u3044\u3076\u697d\u3092\u3057\u3066\u3044\u308b\u3002\n\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u3002\u4e09\u5ea6\u76ee\u3002\n\u554f\u984c\u306f http://nabetani.sakura.ne.jp/hena/ord3ynode/ \u3002\n\u30b3\u30fc\u30c9\u3092\u30a2\u30c3\u30d7\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u304c\u52c9\u5f37\u4f1a( see http://qiita.com/items/1815701039050f42bbc1 ) \u3068\u3044\u3046\u3053\u3068\u3067\u3001\u305d\u306e\u5834\u3067\u66f8\u3044\u305f C++11 \u7248\u3092\n\n```c++:ynode.cpp\n#include <iostream>\n#include <utility>\n#include <string>\n#include <map>\n#include <cassert>\n\nusing namespace std;\n\nstruct testdata_t\n{\n  string in;\n  string expected;\n};\ntestdata_t testdata[]{\n// \u7565\n/*30*/ {\"rrrrbllrlrbrbrr\", \"ACBACABCFDEDADFC\" },\n};\n\nstring turn_r{ \"BACBA ADFCAD EBCFEB DABEDA FDEFD\" };\nstring turn_l{ turn_r.rbegin(), turn_r.rend() };\n\nstring turn( string const & state, string const & course )\n{\n  auto pos = course.find( state );\n  assert( pos != string::npos );\n  return course.substr(pos+2,1);\n}\n\nstring solv( string const & in )\n{\n  string r{\"BA\"};\n  for( auto ch : in ){\n    string state{ r.end()-2, r.end() };\n    switch( ch ){\n    case 'b':\n      r+=state[0];\n      break;\n    default:\n      r+=turn( state, ch=='r' ? turn_r : turn_l );\n      break;\n    }\n  }\n  return {r.begin()+1, r.end()};\n}\nint main()\n{\n  for( auto t : testdata ){\n    auto actual = solv(t.in);\n    cout << t.in << \"->\" << actual;\n    if ( actual != t.expected ){\n      cout << \"**FAIL** expected : \" << t.expected;\n    }\n    cout << endl;\n  }\n  return 0;\n}\n```\n\nturn_r \u306f\u3001\u53f3\u306b\u66f2\u304c\u308a\u7d9a\u3051\u305f\u3089\u3053\u3046\u306a\u308b\u3088\u3068\u3044\u3046\u30b7\u30fc\u30b1\u30f3\u30b9\u3002\nturn_l \u306f\u3001\u5de6\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001turn_r \u304b\u3089 \"AB\" \u3092\u898b\u3064\u3051\u51fa\u3059\u3068\u3001\u305d\u306e\u6b21\u306e\u6587\u5b57\u304c AB \u306e\u5f8c\u3067\u53f3\u306b\u66f2\u304c\u3063\u305f\u3089\u5230\u9054\u3059\u308b Y\u5b57\u8def\u3002\u3068\u3044\u3046\u30ed\u30b8\u30c3\u30af\u3002\n\nC++11 \u306e\u6a5f\u80fd\u3092\u3061\u3087\u3063\u3068\u4f7f\u3063\u3066\u3060\u3044\u3076\u697d\u3092\u3057\u3066\u3044\u308b\u3002", "tags": ["\u3069\u3046\u66f8\u304f", "yhpg", "C++", "\u52c9\u5f37\u4f1a", "C++11"]}