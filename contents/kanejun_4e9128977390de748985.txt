{"context": "\u3000Pepper \u306e\u5916\u90e8\u30de\u30b7\u30f3\u3067\u97f3\u58f0\u8a8d\u8b58\u30a8\u30f3\u30b8\u30f3 Julius \u3092\u4f7f\u3063\u3066\u4eba\u9593\u306e\u767a\u8a00\u3092\u30c6\u30ad\u30b9\u30c8\u5316\u3057\u3001\u305d\u308c\u3092 Pepper \u306b\u558b\u3089\u305b\u308b\u3053\u3068\u3092\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u30b3\u30f3\u30bb\u30d7\u30c8\u3068\u3057\u3066\u306f\u3001\u81ea\u5206\u3068 Pepper \u306f\u96e2\u308c\u305f\u3068\u3053\u308d\u306b\u3044\u3066\u3001Pepper \u306b\u81ea\u5206\u306e\u8eab\u4ee3\u308f\u308a\u3068\u3057\u3066\u558b\u3063\u3066\u3082\u3089\u3046\u611f\u3058\u3067\u3059\u3002Julius \u306e\u7cbe\u5ea6\u304c\u30a4\u30de\u30a4\u30c1\u306a\u306e\u3067\u3042\u307e\u308a\u6b63\u78ba\u306b\u5fa9\u5531\u306f\u3057\u3066\u304f\u308c\u307e\u305b\u3093\u304c...\u7b11\n\n\u74b0\u5883\n\nPepper \n\n\nNAOqi 2.4.3 \n\n\nJulius \u3092\u52d5\u304b\u3059\u30de\u30b7\u30f3\n\n\nWindows 10 \u3067\u3082\u52d5\u4f5c\u78ba\u8a8d\u3067\u304d\u3066\u3044\u307e\u3059\u304c\u3001\u57fa\u672c\u7684\u306b CentOS 7 \u3068 Ubuntu 16 \u524d\u63d0\u306e\u8a71\u3067\u9032\u3081\u307e\u3059\u3002(macOS \u306e\u6700\u65b0\u7248 Sierra \u306f NAOqi \u306e Python SDK \u304c\u3046\u307e\u304f\u52d5\u4f5c\u3057\u307e\u305b\u3093)\n\n\n\n\n\u624b\u9806\n\n1. Julius \u30c7\u30a3\u30af\u30c6\u30fc\u30b7\u30e7\u30f3\u30ad\u30c3\u30c8\u306e\u52d5\u4f5c\n\u3000Julius \u672c\u4f53\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3082\u3044\u3044\u3093\u3067\u3059\u304c\u3001\u97f3\u97ff\u30e2\u30c7\u30eb\u30fb\u5358\u8a9e\u8f9e\u66f8\u30fb\u8a00\u8a9e\u30e2\u30c7\u30eb\u3092\u81ea\u4f5c\u3059\u308b\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u3001\u30c7\u30a3\u30af\u30c6\u30fc\u30b7\u30e7\u30f3\u30ad\u30c3\u30c8\u3067\u3055\u3055\u3063\u3068\u52d5\u304b\u3057\u3061\u3083\u3044\u307e\u3059\u3002\n\n\nGitHub \u304b\u3089\u30c7\u30a3\u30af\u30c6\u30fc\u30b7\u30e7\u30f3\u30ad\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\u5de6\u4e0a\u306e Branch \u30dc\u30bf\u30f3\u304b\u3089 v4.4 \u3092\u9078\u3073\u307e\u3057\u305f\u3002(master \u306f\u306a\u3093\u3068\u306a\u304f\u6c17\u6301\u3061\u60aa\u3044)\n\u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u3092\u5c55\u958b\u3057\u3066\u3001dictation-kit-v4.4 \u5185\u306erun-linux-dnn.sh \u306a\u3069\u306e\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002(Windows \u306a\u3089\u30d0\u30c3\u30c1\u30d5\u30a1\u30a4\u30eb run-win-dnn.bat \u306a\u3069)\n\n\u3053\u308c\u3067\u97f3\u58f0\u8a8d\u8b58\u3092\u8a66\u305b\u308b\u306f\u305a\u3067\u3059\u3002\u3061\u306a\u307f\u306b\u50d5\u306e\u74b0\u5883\u306e Linux \u3067\u306f \u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u3092\u5c55\u958b\u5f8c dictation-kit-v4.4/model/phone_m/ \u5185\u306e\u97f3\u97ff\u30e2\u30c7\u30eb\u304c\u5909\u306a\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001Windows \u3084 Mac \u3067\u5c55\u958b\u3057\u305f\u540c\u4e00\u30d5\u30a9\u30eb\u30c0\u3068\u7f6e\u304d\u63db\u3048\u307e\u3057\u305f\u3002\n\n2. Python2.7 \u3068 NAOqi Python SDK \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u3000Aldebaran \u306e\u30b5\u30a4\u30c8 \u306b\u624b\u9806\u304c\u8f09\u3063\u3066\u307e\u3059\u3002Linux \u306b\u306f Python2.7 \u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002\u78ba\u8a8d\u3059\u308b\u306b\u306f\u3001python --version \u3092\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u6253\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002Windows \u306e\u5834\u5408\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u5fc5\u8981\u3067\u3059\u3002NAOqi Python SDK \u4f7f\u7528\u3059\u308b Pepper \u306e NAOqi \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u5408\u308f\u305b\u3066 2.4.3 \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u305f\u3002\n\n3. Python \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4f5c\u6210\n\u3000Pepper \u306b\u30c6\u30ad\u30b9\u30c8\u3092\u9001\u4fe1\u3059\u308b\u306b\u306f\u3001Julius \u306e\u51fa\u529b\u7d50\u679c\u3092\u4ed6\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u53d7\u3051\u53d6\u3063\u3066\u3001API \u3092\u5229\u7528\u3057\u3066 Pepper \u3092\u558b\u3089\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\nJulius \u306e\u51fa\u529b\u7d50\u679c\u3092\u4ed6\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u53d7\u3051\u53d6\u308b\u306b\u306f\u3001Julius \u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u30e2\u30fc\u30c9\u3067\u8d77\u52d5\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u5b9f\u884c\u6642\u306b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067 -module \u3092\u3064\u3051\u308c\u3070OK\u3067\u3059\u3002\nJulius \u306e\u51fa\u529b\u306f\u30c6\u30ad\u30b9\u30c8\u5316\u3055\u308c\u305f\u97f3\u58f0\u8a8d\u8b58\u306e\u7d50\u679c\u3092\u542b\u3080 XML \u5f62\u5f0f\u3067\u3042\u308a\u3001\u305d\u3053\u304b\u3089 Pepper \u306b\u767a\u8a71\u3055\u305b\u308b\u30c6\u30ad\u30b9\u30c8\u306e\u307f\u3092\u53d6\u308a\u51fa\u3057\u3001Pepper \u306b\u9001\u4fe1\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\u4f5c\u6210\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0 julius2pepper.py \u306f\u4ee5\u4e0b\u3067\u3059\u3002(2017/1/31 \u30d0\u30b0\u304c\u3042\u3063\u305f\u306e\u3067\u76f4\u3057\u307e\u3057\u305f)\n\njulius2pepper.py\n#\n# Simple client program for Julius module mode\n#\n\nfrom __future__ import print_function\nfrom contextlib import closing\nfrom naoqi import ALProxy\nimport xml.etree.ElementTree as ET\nimport socket\nimport sys\n\n# ---- constants ----\nARGNUM = 4\nBUFSIZE = 4096\n\n# ---- check args ---- \nargs = sys.argv   #1: server ipaddr  2: server port  3: pepper ipaddr  4: pepper port\nargc = len(args) - 1\nif (argc != ARGNUM):\n    print(\"Usage: # python filename server_ipaddr server_port pepper_ipaddr pepper_port\")\n    quit()\n\n# ---- veriables ---- \njipaddr = args[1]   #server ipaddr\njport = int(args[2])   #host port (default 10500)\npipaddr = args[3]   # pepper ipaddr\npport = int(args[4])   # pepper port\ntts = ALProxy(\"ALTextToSpeech\", pipaddr, pport)\n\n# ---- communicate with Julius ----  \nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nwith closing(sock):\n    sock.connect((jipaddr, jport))   #connect to Julius\n    print(\"[connected]\")\n    # ---- receive and cut at \".\\n\" ----\n    chunk = \"\"\n    count = 0\n    while True:\n        count += 1\n        print(\"\")\n        print(count)\n        print(\"[waiting]\")\n        chunk += sock.recv(BUFSIZE)   # receive string\n        print(\"[recieved]\")\n        place = chunk.find(\".\\n\")\n        if not chunk:   # if string is empty then break\n            break\n        elif place == -1:   # if string doesn't have \".\\n\" then continue\n            chunk = \"\"\n            continue\n        else:   # if string has \".\\n\" then separate\n            while chunk:\n                place = chunk.find(\".\\n\")\n                xml = chunk[0:place]\n                chunk = chunk[place+2:]\n\n                # ---- parse XML ----\n                xml = xml.replace(\"\\\"<\", \"\\\"\")   # to remove <s> or </s> in CLASSID\n                xml = xml.replace(\">\\\"\", \"\\\"\")\n                try:\n                    root = ET.fromstring(xml)\n                    speech = \"\"   # this will contain a sentence spoken by pepper\n                    for str in root.iter(\"WHYPO\"):\n                        speech += str.get(\"WORD\")\n                except Exception as e:\n                    print(e)\n                print(\"[parsing xml]\")\n\n                # ---- speak pepper ----\n                if speech:\n                    print(\"[sending to pepper]: \"+speech)\n                    tts.say(speech.encode(\"utf-8\"))\n                else:\n                    print(\"[no text]\")\n\n\n\u5b9f\u884c\u65b9\u6cd5\u306f\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u3001\npython julius2pepper.py [server_ipaddr] [server_port] [pepper_ipaddr] [pepper_port]\n\u5f15\u6570\u306f\u3001\n1. Julius \u304c\u8d77\u52d5\u3057\u3066\u308b\u30de\u30b7\u30f3\u306e IP \u30a2\u30c9\u30ec\u30b9\u3002\u540c\u4e00\u30de\u30b7\u30f3\u306a\u3089 127.0.0.1 \u3067OK\u3002\n2. Julius \u304c\u8d77\u52d5\u3057\u3066\u308b\u30de\u30b7\u30f3\u306e\u30dd\u30fc\u30c8\u756a\u53f7\u3002Julius \u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u30e2\u30fc\u30c9\u3067\u8d77\u52d5\u3057\u305f\u3089\u4f55\u756a\u5316\u51fa\u3066\u304f\u308b\u306f\u305a\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f 10500\u3002\n3. Pepper \u306e IP \u30a2\u30c9\u30ec\u30b9\u3002\u80f8\u306e\u30d0\u30bf\u30f3\u3092\u62bc\u3059\u3068\u6559\u3048\u3066\u304f\u308c\u307e\u3059\u3002\n4. Pepper \u306e\u30dd\u30fc\u30c8\u756a\u53f7\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f 9559\u3002\n\u3000Windows \u306e\u5834\u5408\u306f\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u3084 Cygwin \u3067\u305d\u306e\u307e\u307e Python \u547c\u3073\u51fa\u3057\u3066\u3082 API \u304c\u4f7f\u3048\u306a\u3044\u306f\u305a\u306a\u306e\u3067\u4e00\u5de5\u592b\u5fc5\u8981\u3002(\u3081\u3093\u3069\u304f\u3055\u3044\u304b\u3089 Linux \u3067\u3084\u308d\u3046\u7b11)\n\u3000\u3061\u306a\u307f\u306b\u3001Julius \u306e\u8d77\u52d5\u6642\u306b\u30aa\u30d7\u30b7\u30e7\u30f3 -input adinnet \u3092\u3064\u3051\u308b\u3068\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u7d4c\u7531\u3067\u4ed6\u306e\u30de\u30b7\u30f3\u304b\u3089\u97f3\u58f0\u3092\u9001\u308c\u307e\u3059\u3002\u9001\u308b\u5074\u306f\u3001Julius \u672c\u4f53\u3092\u3061\u3083\u3093\u3068\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3001adintool -in mic -out adinnet -server [server_ip] \u3092\u6253\u3061\u307e\u3059\u3002\n\u3000Pepper \u306e\u5916\u90e8\u30de\u30b7\u30f3\u3067\u97f3\u58f0\u8a8d\u8b58\u30a8\u30f3\u30b8\u30f3 Julius \u3092\u4f7f\u3063\u3066\u4eba\u9593\u306e\u767a\u8a00\u3092\u30c6\u30ad\u30b9\u30c8\u5316\u3057\u3001\u305d\u308c\u3092 Pepper \u306b\u558b\u3089\u305b\u308b\u3053\u3068\u3092\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u30b3\u30f3\u30bb\u30d7\u30c8\u3068\u3057\u3066\u306f\u3001\u81ea\u5206\u3068 Pepper \u306f\u96e2\u308c\u305f\u3068\u3053\u308d\u306b\u3044\u3066\u3001Pepper \u306b\u81ea\u5206\u306e\u8eab\u4ee3\u308f\u308a\u3068\u3057\u3066\u558b\u3063\u3066\u3082\u3089\u3046\u611f\u3058\u3067\u3059\u3002Julius \u306e\u7cbe\u5ea6\u304c\u30a4\u30de\u30a4\u30c1\u306a\u306e\u3067\u3042\u307e\u308a\u6b63\u78ba\u306b\u5fa9\u5531\u306f\u3057\u3066\u304f\u308c\u307e\u305b\u3093\u304c...\u7b11\n\n##\u74b0\u5883\n- Pepper \n - NAOqi 2.4.3 \n- Julius \u3092\u52d5\u304b\u3059\u30de\u30b7\u30f3\n - Windows 10 \u3067\u3082\u52d5\u4f5c\u78ba\u8a8d\u3067\u304d\u3066\u3044\u307e\u3059\u304c\u3001\u57fa\u672c\u7684\u306b CentOS 7 \u3068 Ubuntu 16 \u524d\u63d0\u306e\u8a71\u3067\u9032\u3081\u307e\u3059\u3002(macOS \u306e\u6700\u65b0\u7248 Sierra \u306f NAOqi \u306e Python SDK \u304c\u3046\u307e\u304f\u52d5\u4f5c\u3057\u307e\u305b\u3093)\n\n##\u624b\u9806\n###1. Julius \u30c7\u30a3\u30af\u30c6\u30fc\u30b7\u30e7\u30f3\u30ad\u30c3\u30c8\u306e\u52d5\u4f5c\n\u3000Julius \u672c\u4f53\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3082\u3044\u3044\u3093\u3067\u3059\u304c\u3001\u97f3\u97ff\u30e2\u30c7\u30eb\u30fb\u5358\u8a9e\u8f9e\u66f8\u30fb\u8a00\u8a9e\u30e2\u30c7\u30eb\u3092\u81ea\u4f5c\u3059\u308b\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u3001\u30c7\u30a3\u30af\u30c6\u30fc\u30b7\u30e7\u30f3\u30ad\u30c3\u30c8\u3067\u3055\u3055\u3063\u3068\u52d5\u304b\u3057\u3061\u3083\u3044\u307e\u3059\u3002\n\n 1. [GitHub](https://github.com/julius-speech/dictation-kit) \u304b\u3089\u30c7\u30a3\u30af\u30c6\u30fc\u30b7\u30e7\u30f3\u30ad\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\u5de6\u4e0a\u306e Branch \u30dc\u30bf\u30f3\u304b\u3089 v4.4 \u3092\u9078\u3073\u307e\u3057\u305f\u3002(master \u306f\u306a\u3093\u3068\u306a\u304f\u6c17\u6301\u3061\u60aa\u3044)\n 2. \u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u3092\u5c55\u958b\u3057\u3066\u3001dictation-kit-v4.4 \u5185\u306erun-linux-dnn.sh \u306a\u3069\u306e\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002(Windows \u306a\u3089\u30d0\u30c3\u30c1\u30d5\u30a1\u30a4\u30eb run-win-dnn.bat \u306a\u3069)\n\n\u3053\u308c\u3067\u97f3\u58f0\u8a8d\u8b58\u3092\u8a66\u305b\u308b\u306f\u305a\u3067\u3059\u3002\u3061\u306a\u307f\u306b\u50d5\u306e\u74b0\u5883\u306e Linux \u3067\u306f \u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u3092\u5c55\u958b\u5f8c `dictation-kit-v4.4/model/phone_m/` \u5185\u306e\u97f3\u97ff\u30e2\u30c7\u30eb\u304c\u5909\u306a\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001Windows \u3084 Mac \u3067\u5c55\u958b\u3057\u305f\u540c\u4e00\u30d5\u30a9\u30eb\u30c0\u3068\u7f6e\u304d\u63db\u3048\u307e\u3057\u305f\u3002\n\n###2. Python2.7 \u3068 NAOqi Python SDK \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u3000[Aldebaran \u306e\u30b5\u30a4\u30c8](http://doc.aldebaran.com/2-4/dev/python/install_guide.html) \u306b\u624b\u9806\u304c\u8f09\u3063\u3066\u307e\u3059\u3002Linux \u306b\u306f Python2.7 \u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002\u78ba\u8a8d\u3059\u308b\u306b\u306f\u3001`python --version` \u3092\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u6253\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002Windows \u306e\u5834\u5408\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u5fc5\u8981\u3067\u3059\u3002NAOqi Python SDK \u4f7f\u7528\u3059\u308b Pepper \u306e NAOqi \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u5408\u308f\u305b\u3066 2.4.3 \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u305f\u3002\n\n###3. Python \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4f5c\u6210\n\u3000Pepper \u306b\u30c6\u30ad\u30b9\u30c8\u3092\u9001\u4fe1\u3059\u308b\u306b\u306f\u3001Julius \u306e\u51fa\u529b\u7d50\u679c\u3092\u4ed6\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u53d7\u3051\u53d6\u3063\u3066\u3001API \u3092\u5229\u7528\u3057\u3066 Pepper \u3092\u558b\u3089\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n - Julius \u306e\u51fa\u529b\u7d50\u679c\u3092\u4ed6\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u53d7\u3051\u53d6\u308b\u306b\u306f\u3001Julius \u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u30e2\u30fc\u30c9\u3067\u8d77\u52d5\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u5b9f\u884c\u6642\u306b\u30aa\u30d7\u30b7\u30e7\u30f3\u3067 `-module` \u3092\u3064\u3051\u308c\u3070OK\u3067\u3059\u3002\n - Julius \u306e\u51fa\u529b\u306f\u30c6\u30ad\u30b9\u30c8\u5316\u3055\u308c\u305f\u97f3\u58f0\u8a8d\u8b58\u306e\u7d50\u679c\u3092\u542b\u3080 XML \u5f62\u5f0f\u3067\u3042\u308a\u3001\u305d\u3053\u304b\u3089 Pepper \u306b\u767a\u8a71\u3055\u305b\u308b\u30c6\u30ad\u30b9\u30c8\u306e\u307f\u3092\u53d6\u308a\u51fa\u3057\u3001Pepper \u306b\u9001\u4fe1\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\u4f5c\u6210\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0 julius2pepper.py \u306f\u4ee5\u4e0b\u3067\u3059\u3002(2017/1/31 \u30d0\u30b0\u304c\u3042\u3063\u305f\u306e\u3067\u76f4\u3057\u307e\u3057\u305f)\n\n```python:julius2pepper.py\n#\n# Simple client program for Julius module mode\n#\n\nfrom __future__ import print_function\nfrom contextlib import closing\nfrom naoqi import ALProxy\nimport xml.etree.ElementTree as ET\nimport socket\nimport sys\n\n# ---- constants ----\nARGNUM = 4\nBUFSIZE = 4096\n\n# ---- check args ---- \nargs = sys.argv   #1: server ipaddr  2: server port  3: pepper ipaddr  4: pepper port\nargc = len(args) - 1\nif (argc != ARGNUM):\n    print(\"Usage: # python filename server_ipaddr server_port pepper_ipaddr pepper_port\")\n    quit()\n\n# ---- veriables ---- \njipaddr = args[1]   #server ipaddr\njport = int(args[2])   #host port (default 10500)\npipaddr = args[3]   # pepper ipaddr\npport = int(args[4])   # pepper port\ntts = ALProxy(\"ALTextToSpeech\", pipaddr, pport)\n\n# ---- communicate with Julius ----  \nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nwith closing(sock):\n    sock.connect((jipaddr, jport))   #connect to Julius\n    print(\"[connected]\")\n    # ---- receive and cut at \".\\n\" ----\n    chunk = \"\"\n    count = 0\n    while True:\n        count += 1\n        print(\"\")\n        print(count)\n        print(\"[waiting]\")\n        chunk += sock.recv(BUFSIZE)   # receive string\n        print(\"[recieved]\")\n        place = chunk.find(\".\\n\")\n        if not chunk:   # if string is empty then break\n            break\n        elif place == -1:   # if string doesn't have \".\\n\" then continue\n        \tchunk = \"\"\n        \tcontinue\n        else:   # if string has \".\\n\" then separate\n            while chunk:\n                place = chunk.find(\".\\n\")\n                xml = chunk[0:place]\n            \tchunk = chunk[place+2:]\n            \t\n            \t# ---- parse XML ----\n                xml = xml.replace(\"\\\"<\", \"\\\"\")   # to remove <s> or </s> in CLASSID\n                xml = xml.replace(\">\\\"\", \"\\\"\")\n                try:\n                    root = ET.fromstring(xml)\n                    speech = \"\"   # this will contain a sentence spoken by pepper\n                    for str in root.iter(\"WHYPO\"):\n                        speech += str.get(\"WORD\")\n                except Exception as e:\n                    print(e)\n                print(\"[parsing xml]\")\n                \n                # ---- speak pepper ----\n                if speech:\n                    print(\"[sending to pepper]: \"+speech)\n                    tts.say(speech.encode(\"utf-8\"))\n                else:\n                    print(\"[no text]\")\n```\n\n\u5b9f\u884c\u65b9\u6cd5\u306f\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u3001\n`python julius2pepper.py [server_ipaddr] [server_port] [pepper_ipaddr] [pepper_port]`\n\u5f15\u6570\u306f\u3001\n1. Julius \u304c\u8d77\u52d5\u3057\u3066\u308b\u30de\u30b7\u30f3\u306e IP \u30a2\u30c9\u30ec\u30b9\u3002\u540c\u4e00\u30de\u30b7\u30f3\u306a\u3089 127.0.0.1 \u3067OK\u3002\n2. Julius \u304c\u8d77\u52d5\u3057\u3066\u308b\u30de\u30b7\u30f3\u306e\u30dd\u30fc\u30c8\u756a\u53f7\u3002Julius \u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u30e2\u30fc\u30c9\u3067\u8d77\u52d5\u3057\u305f\u3089\u4f55\u756a\u5316\u51fa\u3066\u304f\u308b\u306f\u305a\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f 10500\u3002\n3. Pepper \u306e IP \u30a2\u30c9\u30ec\u30b9\u3002\u80f8\u306e\u30d0\u30bf\u30f3\u3092\u62bc\u3059\u3068\u6559\u3048\u3066\u304f\u308c\u307e\u3059\u3002\n4. Pepper \u306e\u30dd\u30fc\u30c8\u756a\u53f7\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f 9559\u3002\n\n\u3000Windows \u306e\u5834\u5408\u306f\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u3084 Cygwin \u3067\u305d\u306e\u307e\u307e Python \u547c\u3073\u51fa\u3057\u3066\u3082 API \u304c\u4f7f\u3048\u306a\u3044\u306f\u305a\u306a\u306e\u3067\u4e00\u5de5\u592b\u5fc5\u8981\u3002(\u3081\u3093\u3069\u304f\u3055\u3044\u304b\u3089 Linux \u3067\u3084\u308d\u3046\u7b11)\n\n\u3000\u3061\u306a\u307f\u306b\u3001Julius \u306e\u8d77\u52d5\u6642\u306b\u30aa\u30d7\u30b7\u30e7\u30f3 `-input adinnet` \u3092\u3064\u3051\u308b\u3068\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u7d4c\u7531\u3067\u4ed6\u306e\u30de\u30b7\u30f3\u304b\u3089\u97f3\u58f0\u3092\u9001\u308c\u307e\u3059\u3002\u9001\u308b\u5074\u306f\u3001Julius \u672c\u4f53\u3092\u3061\u3083\u3093\u3068\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3001`adintool -in mic -out adinnet -server [server_ip]` \u3092\u6253\u3061\u307e\u3059\u3002\n", "tags": ["Pepper", "NAOqi", "Julius"]}