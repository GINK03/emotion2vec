{"context": "\n\u52d5\u4f5c\u78ba\u8a8d\nESP8266 (\u6c17\u5727\u8a08\u3067\u4f7f\u7528\u3057\u305f\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u57fa\u677f: I2C\u30924.7k\u3067\u30d7\u30eb\u30a2\u30c3\u30d7)\nSD\u30e2\u30b8\u30e5\u30fc\u30eb: MSC-MOD20 ( http://www.microtechnica-shop.jp/shopdetail/000000000026/ )\nAnalog Discovery 2 (\u4ee5\u4e0bAD2)\n\n\nhttp://qiita.com/7of9/items/cf075be6433178952eb6\n\u306e\u7d9a\u304d\u3002\n\u4e0a\u8a18\u306f2016\u5e748\u67081\u65e5\u3002\u4e8c\u30ab\u6708\u3082\u98db\u3093\u3067\u3057\u307e\u3063\u305f\u3002\u3002\u3002\n\u305d\u306e\u4e8c\u30b1\u6708\u306e\u9593\u306b\u3084\u3063\u305f\u306e\u306f\u3001Processing\u5165\u9580\u3001R\u5165\u9580\u3001WRF\u5165\u9580\u3001MOSFET\u5165\u9580\u3001\u3042\u3068\u306a\u3093\u304b\u5165\u9580\u3057\u305f\u6c17\u3082\u3059\u308b\u304c\u3001\u8a18\u61b6\u529b\u304c\u826f\u304f\u306a\u3044\u306e\u3067\u3001\u5fd8\u308c\u305f\u3002\n\u4e8c\u30b1\u6708\u3076\u308a\u3067\u307b\u3068\u3093\u3069\u5fd8\u308c\u3066\u3044\u305f\u304c\u3001\u5927\u4e08\u592b\u3002Qiita\u306e\u8a18\u4e8b\u304c\u3042\u308b\u304b\u308915\u5206\u3067\u652f\u5ea6\u304c\u3067\u304d\u305f\u3002\n\u524d\u7f6e\u304d\u7d42\u308f\u308a\u3002\n\ncode\n\ncode v0.11\n v0.11 @ github\n\u4ee5\u4e0b\u304c\u4e3b\u306a\u5909\u66f4\n\nv0.9\n\n\nSD init\u306e\u521d\u671f\u5316\u6642\u9593\u3092\u898b\u3066\u3044\u305f\nmicroSD\u3092\u633f\u5165\u3057\u3066\u3044\u306a\u3044\u6642\u306f3.3\u79d2\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u304c\u5fc5\u8981\u3068\u5206\u304b\u3063\u305f\n\n\nv0.10\n\n\n\u3053\u308c\u307e\u3067\u306eI2C\u306e\u51e6\u7406\u3067\u306f\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u9593\u306e\u9577\u3044\u51e6\u7406(3.3\u79d2\u3068\u304b)\u3092\n\u304d\u3061\u3093\u3068\u6271\u3048\u3066\u306a\u304b\u3063\u305f\u305f\u3081\u3001delay\u3068\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u5165\u308c\u305f\n\u5177\u4f53\u7684\u306b\u306fI2C\u306e\u5fdc\u7b54\u5f85\u3061\u306e\u6642\u3001\u5fdc\u7b54\u306a\u3057(0x00)\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306bdelay\u6642\u9593\u5f85\u3061(\u4f8b: 10msec)\u3092\u884c\u3046\n\u305d\u308c\u3092\u7e70\u8fd4\u3059\u3002\u7e70\u8fd4\u3059\u3046\u3061\u306b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u9593(\u4f8b:1000msec)\u7d4c\u904e\u6642\u306b\u7e70\u8fd4\u3057\u304b\u3089\u629c\u3051\u308b\u3088\u3046\u306b\u3057\u305f\n\u30b3\u30fc\u30c9\u306f\u5f8c\u8ff0\n\n\nv0.11\n\n\nv0.11\u3067\u5165\u308c\u305fI2C\u901a\u4fe1\u3092\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u305f\n\u30d0\u30fc\u30b8\u30e7\u30f3\u53d6\u5f97\u3068SD\u521d\u671f\u5316\u51e6\u7406\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u305f\n\n\n\n\nI2C\u306edelay\u3068timeout\u8ffd\u52a0\nesp8266_160730_MSDMOD20lib.ino\u306b\u8a18\u8f09\u306eI2C\u5fdc\u7b54\u8aad\u53d6\u308a\u51e6\u7406\u306e\u5909\u66f4\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002\n\n\u5909\u66f4\u524d.ino\nbool readReply(int maxlen, char *dstPtr){\n  char code;\n  bool rcvd = false;\n\n  if (dstPtr == NULL) {\n    return false;\n  }\n\n  for(int loop = 0; loop < maxlen; loop++) {\n    code = i2c_readCode(DEVICE_ADDRESS);\n    if (isData(code)) {\n      *dstPtr = code;\n      dstPtr++;\n      rcvd = true;\n    } else {\n      return rcvd;\n    }\n  }\n  return true;\n}\n\n\n\n\u5909\u66f4\u5f8c.ino\nbool readReply_delayAndTimeout(int delay_msec, int timeout_msec, char *dstPtr) {\n  char code;\n  bool rcvd = false;\n  int eplased_msec = 0; // maximum: 32767\n\n  if (dstPtr == NULL) {\n    return false;\n  }\n\n  while(1) { // TODO: 0m > limit with maxloop\n    if (eplased_msec > timeout_msec) {\n      return false;\n    }\n    code = i2c_readCode(DEVICE_ADDRESS);\n    if (isData(code)) {\n      *dstPtr = code;\n      dstPtr++;\n      rcvd = true;\n      eplased_msec += 1; // TODO: 0m > correct time measurement\n    } else {\n      if (rcvd) {\n        return true;\n      }\n      i2c_delay(delay_msec);\n      eplased_msec += delay_msec;\n    }\n  }\n  return rcvd;\n}\n\n\n\ni2c_readCode()\u5931\u6557\u6642\u306bdelay_msec\u79d2\u5f85\u3064\ni2c_delay()\u306fesp8266_160730_i2cWrapper.ino\u306b\u3066\u5b9a\u7fa9\n\n\nESP8266\u4ee5\u5916\u306eRTOS\u4f7f\u7528\u74b0\u5883\u3078\u306e\u79fb\u690d\u3092\u8003\u616e\ni2c_delay(10)\u306710msec\u306edelay\n\n\neplased_msec \u304c\u6307\u5b9a\u306etimeout_msec\u3092\u8d85\u3048\u305f\u6642\u306b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3068\u5224\u65ad\u3059\u308b\ni2c_readCode()\u6210\u529f\u6642\u306eeplased_msec \u5897\u5206\u306f\u307e\u3058\u3081\u306b\u5b9f\u88c5\u3057\u3066\u306a\u3044\n\n\nArduino\u306e\u6642\u9593\u8a08\u6e2c\u51e6\u7406\u3092\u52c9\u5f37\u3059\u308c\u3070\u3044\u3044\u3060\u308d\u3046\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u4fdd\u7559\n\n\n\n\n\u5b9f\u884c\u4f8b\n\nSD\u3092\u633f\u5165\u3057\u3066\u3044\u308b\u6642\n\n\u7d50\u679c\n GHI Electronics, LLC \n----------------------\n ALFAT SoC Processor \n!00\nv2.0.0\n!00\ninit SD: OK\nrcvd:!00\n\nv2.0.0\n!00\ninit SD: OK\nrcvd:!00\n\n\n\u30d0\u30fc\u30b8\u30e7\u30f3(v2.0.0)\u8868\u793a\u3068SD\u521d\u671f\u5316\u3068\u3082\u306b\u6210\u529f\u3002\n\nSD\u3092\u633f\u5165\u3057\u3066\u306a\u3044\u6642\n\n\u7d50\u679c\n GHI Electronics, LLC \n----------------------\n ALFAT SoC Processor \n!00\nv2.0.0\n!00\ninit SD: NG\nrcvd:!11\n\nv2.0.0\n!00\ninit SD: NG\nrcvd:!11\n\nv2.0.0\n!00\ninit SD: NG\nrcvd:!11\n\nv2.0.0\n!00\n\n\n\u304d\u3061\u3093\u3068SD\u521d\u671f\u5316\u304c\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\n\n\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\n\u30a8\u30e9\u30fc\u306e\u5185\u5bb9\n\n\n\n\n00\n\u30a8\u30e9\u30fc\u306a\u3057(ACK)\n\n\n\n\n\n\n11\n\u521d\u671f\u5316\u306b\u5931\u6557\u3057\u307e\u3057\u305f\n\n\n\nSD\u30ab\u30fc\u30c9\u306eCD\u4fe1\u53f7\u304cH\u53c8\u306f\u30d5\u30ed\u30fc\u30c6\u30a3\u30f3\u30b0\u3057\u3066\u3044\u308b\n\n\n\n\n\u5199\u771f\nSD\u3092\u633f\u5165\u3057\u3066\u306a\u3044\u6642\n\n\n\u5099\u8003\n\u65e9\u304fMSC-MOD20\u3092\u7d42\u308f\u3089\u305b\u3066GPU\u306e\u6027\u80fd\u3092\u5fb9\u5e95\u7684\u306b\u8ffd\u53ca\u3057\u306a\u304c\u3089FPGA\u3092\u3057\u305f\u3044\u3002\u3002\u3002\neplased_msec \u306felapsed_msec\u306e\u30bf\u30a4\u30dd\u3002\u3002\u3002\n```txt:\u52d5\u4f5c\u78ba\u8a8d\nESP8266 (\u6c17\u5727\u8a08\u3067\u4f7f\u7528\u3057\u305f\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u57fa\u677f: I2C\u30924.7k\u3067\u30d7\u30eb\u30a2\u30c3\u30d7)\nSD\u30e2\u30b8\u30e5\u30fc\u30eb: MSC-MOD20 ( http://www.microtechnica-shop.jp/shopdetail/000000000026/ )\nAnalog Discovery 2 (\u4ee5\u4e0bAD2)\n```\n\nhttp://qiita.com/7of9/items/cf075be6433178952eb6\n\u306e\u7d9a\u304d\u3002\n\n\u4e0a\u8a18\u306f2016\u5e748\u67081\u65e5\u3002\u4e8c\u30ab\u6708\u3082\u98db\u3093\u3067\u3057\u307e\u3063\u305f\u3002\u3002\u3002\n\u305d\u306e\u4e8c\u30b1\u6708\u306e\u9593\u306b\u3084\u3063\u305f\u306e\u306f\u3001Processing\u5165\u9580\u3001R\u5165\u9580\u3001WRF\u5165\u9580\u3001MOSFET\u5165\u9580\u3001\u3042\u3068\u306a\u3093\u304b\u5165\u9580\u3057\u305f\u6c17\u3082\u3059\u308b\u304c\u3001\u8a18\u61b6\u529b\u304c\u826f\u304f\u306a\u3044\u306e\u3067\u3001\u5fd8\u308c\u305f\u3002\n\n\u4e8c\u30b1\u6708\u3076\u308a\u3067\u307b\u3068\u3093\u3069\u5fd8\u308c\u3066\u3044\u305f\u304c\u3001\u5927\u4e08\u592b\u3002Qiita\u306e\u8a18\u4e8b\u304c\u3042\u308b\u304b\u308915\u5206\u3067\u652f\u5ea6\u304c\u3067\u304d\u305f\u3002\n\n\u524d\u7f6e\u304d\u7d42\u308f\u308a\u3002\n\n## code \n\n### code v0.11\n\n[ v0.11 @ github](https://github.com/yasokada/esp8266_160730_MSC-MOD20p1/releases/tag/v0.11)\n\n\u4ee5\u4e0b\u304c\u4e3b\u306a\u5909\u66f4\n\n- v0.9\n   - SD init\u306e\u521d\u671f\u5316\u6642\u9593\u3092\u898b\u3066\u3044\u305f\n   - microSD\u3092\u633f\u5165\u3057\u3066\u3044\u306a\u3044\u6642\u306f3.3\u79d2\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u304c\u5fc5\u8981\u3068\u5206\u304b\u3063\u305f\n- v0.10\n   - \u3053\u308c\u307e\u3067\u306eI2C\u306e\u51e6\u7406\u3067\u306f\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u9593\u306e\u9577\u3044\u51e6\u7406(3.3\u79d2\u3068\u304b)\u3092\n   - \u304d\u3061\u3093\u3068\u6271\u3048\u3066\u306a\u304b\u3063\u305f\u305f\u3081\u3001delay\u3068\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u5165\u308c\u305f\n   - \u5177\u4f53\u7684\u306b\u306fI2C\u306e\u5fdc\u7b54\u5f85\u3061\u306e\u6642\u3001\u5fdc\u7b54\u306a\u3057(0x00)\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306bdelay\u6642\u9593\u5f85\u3061(\u4f8b: 10msec)\u3092\u884c\u3046\n   - \u305d\u308c\u3092\u7e70\u8fd4\u3059\u3002\u7e70\u8fd4\u3059\u3046\u3061\u306b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u9593(\u4f8b:1000msec)\u7d4c\u904e\u6642\u306b\u7e70\u8fd4\u3057\u304b\u3089\u629c\u3051\u308b\u3088\u3046\u306b\u3057\u305f\n   - \u30b3\u30fc\u30c9\u306f\u5f8c\u8ff0\n- v0.11\n   - v0.11\u3067\u5165\u308c\u305fI2C\u901a\u4fe1\u3092\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u305f\n   - \u30d0\u30fc\u30b8\u30e7\u30f3\u53d6\u5f97\u3068SD\u521d\u671f\u5316\u51e6\u7406\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u305f\n\n\n### I2C\u306edelay\u3068timeout\u8ffd\u52a0\n\nesp8266_160730_MSDMOD20lib.ino\u306b\u8a18\u8f09\u306eI2C\u5fdc\u7b54\u8aad\u53d6\u308a\u51e6\u7406\u306e\u5909\u66f4\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002\n\n```\u5909\u66f4\u524d.ino\nbool readReply(int maxlen, char *dstPtr){\n  char code;\n  bool rcvd = false;\n\n  if (dstPtr == NULL) {\n    return false;\n  }\n    \n  for(int loop = 0; loop < maxlen; loop++) {\n    code = i2c_readCode(DEVICE_ADDRESS);\n    if (isData(code)) {\n      *dstPtr = code;\n      dstPtr++;\n      rcvd = true;\n    } else {\n      return rcvd;\n    }\n  }\n  return true;\n}\n```\n\n```\u5909\u66f4\u5f8c.ino\nbool readReply_delayAndTimeout(int delay_msec, int timeout_msec, char *dstPtr) {\n  char code;\n  bool rcvd = false;\n  int eplased_msec = 0; // maximum: 32767\n\n  if (dstPtr == NULL) {\n    return false;\n  }\n\n  while(1) { // TODO: 0m > limit with maxloop\n    if (eplased_msec > timeout_msec) {\n      return false;\n    }\n    code = i2c_readCode(DEVICE_ADDRESS);\n    if (isData(code)) {\n      *dstPtr = code;\n      dstPtr++;\n      rcvd = true;\n      eplased_msec += 1; // TODO: 0m > correct time measurement\n    } else {\n      if (rcvd) {\n        return true;\n      }\n      i2c_delay(delay_msec);\n      eplased_msec += delay_msec;\n    }\n  }\n  return rcvd;\n}\n```\n\n- i2c_readCode()\u5931\u6557\u6642\u306bdelay_msec\u79d2\u5f85\u3064\n- i2c_delay()\u306fesp8266_160730_i2cWrapper.ino\u306b\u3066\u5b9a\u7fa9\n   - ESP8266\u4ee5\u5916\u306eRTOS\u4f7f\u7528\u74b0\u5883\u3078\u306e\u79fb\u690d\u3092\u8003\u616e\n   - i2c_delay(10)\u306710msec\u306edelay\n- eplased_msec \u304c\u6307\u5b9a\u306etimeout_msec\u3092\u8d85\u3048\u305f\u6642\u306b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3068\u5224\u65ad\u3059\u308b\n- i2c_readCode()\u6210\u529f\u6642\u306eeplased_msec \u5897\u5206\u306f\u307e\u3058\u3081\u306b\u5b9f\u88c5\u3057\u3066\u306a\u3044\n   - Arduino\u306e\u6642\u9593\u8a08\u6e2c\u51e6\u7406\u3092\u52c9\u5f37\u3059\u308c\u3070\u3044\u3044\u3060\u308d\u3046\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u4fdd\u7559\n\n## \u5b9f\u884c\u4f8b\n\n### SD\u3092\u633f\u5165\u3057\u3066\u3044\u308b\u6642\n\n```txt:\u7d50\u679c\n GHI Electronics, LLC \n----------------------\n ALFAT SoC Processor \n!00\nv2.0.0\n!00\ninit SD: OK\nrcvd:!00\n\nv2.0.0\n!00\ninit SD: OK\nrcvd:!00\n```\n\n\u30d0\u30fc\u30b8\u30e7\u30f3(v2.0.0)\u8868\u793a\u3068SD\u521d\u671f\u5316\u3068\u3082\u306b\u6210\u529f\u3002\n\n### SD\u3092\u633f\u5165\u3057\u3066\u306a\u3044\u6642\n\n```txt:\u7d50\u679c\n GHI Electronics, LLC \n----------------------\n ALFAT SoC Processor \n!00\nv2.0.0\n!00\ninit SD: NG\nrcvd:!11\n\nv2.0.0\n!00\ninit SD: NG\nrcvd:!11\n\nv2.0.0\n!00\ninit SD: NG\nrcvd:!11\n\nv2.0.0\n!00\n```\n\n\u304d\u3061\u3093\u3068SD\u521d\u671f\u5316\u304c\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n| \u30a8\u30e9\u30fc\u30b3\u30fc\u30c9 | \u30a8\u30e9\u30fc\u306e\u5185\u5bb9 |\n|:-:|:--|\n| 00 | \u30a8\u30e9\u30fc\u306a\u3057(ACK) |\n|   |   | \n| 11 | \u521d\u671f\u5316\u306b\u5931\u6557\u3057\u307e\u3057\u305f  |\n|  | SD\u30ab\u30fc\u30c9\u306eCD\u4fe1\u53f7\u304cH\u53c8\u306f\u30d5\u30ed\u30fc\u30c6\u30a3\u30f3\u30b0\u3057\u3066\u3044\u308b |\n\n\n### \u5199\u771f\n\nSD\u3092\u633f\u5165\u3057\u3066\u306a\u3044\u6642\n\n![qiita.jpg](https://qiita-image-store.s3.amazonaws.com/0/32870/a2fe17a2-2e1e-0c18-569e-fd4e7887ab78.jpeg)\n\n\n### \u5099\u8003\n\n\u65e9\u304fMSC-MOD20\u3092\u7d42\u308f\u3089\u305b\u3066GPU\u306e\u6027\u80fd\u3092\u5fb9\u5e95\u7684\u306b\u8ffd\u53ca\u3057\u306a\u304c\u3089FPGA\u3092\u3057\u305f\u3044\u3002\u3002\u3002\n\neplased_msec \u306felapsed_msec\u306e\u30bf\u30a4\u30dd\u3002\u3002\u3002\n\n\n", "tags": ["MSC-MOD20", "borgSensorSystem1", "I2C"]}