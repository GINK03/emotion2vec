{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nPython\u3067\u4f7f\u3048\u308b\u30d5\u30ea\u30fc\u306aMCMC\u30b5\u30f3\u30d7\u30e9\u30fc\u306e\u4e00\u3064\u306bPyMC3\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\uff0e\u5148\u65e5\uff0e\u300cPyMC3\u306b\u306a\u3063\u3066PyMC2\u3088\u308a\u901f\u304f\u306a\u3063\u305f\u304b\u3082\u2026\u300d\u3068\u304b\u300cStan\u306f\u96e2\u6563\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u2026\u300d\u3068\u304b\u3044\u3046\u8a71\u3092\u30b9\u30bf\u30d0\u3067\u96a3\u306b\u5ea7\u3063\u305f\u5973\u5b50\u9ad8\u751f\u304c\u3057\u3066\u3044\u305f\uff08\u3088\u3046\u306a\u6c17\u304c\u3057\u305f\uff09\u306e\u3067\uff0c\u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb https://pymc-devs.github.io/pymc3/getting_started/ \u3092\u8a66\u3057\u306a\u304c\u3089\uff0c\u3044\u304f\u3064\u304b\u306e\u30a8\u30e9\u30fc\u3084\u8ffd\u52a0\u5b9f\u9a13\u306b\u3064\u3044\u3066\u306e\u30e1\u30e2\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\uff0e\u300cPython\u3067\u968e\u5c64\u30d9\u30a4\u30ba\u3068\u304b\u3092\u4f7f\u3063\u3066\u307f\u305f\u3044\u3051\u3069\u30d5\u30eb\u30b9\u30af\u30e9\u30c3\u30c1\u3067MCMC\u66f8\u304f\u306e\u306f\u3064\u3089\u3044\u2026\u300d\u300c\u96e2\u6563\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u2026\u300d\u307f\u305f\u3044\u306a\u4eba\u304c\u5bfe\u8c61\u3067\u3059\uff0eMCMC\u306b\u3042\u307e\u308a\u8a73\u3057\u304f\u306a\u3044\u5b66\u751f\u304c\u6df1\u591c\u306e\u30c6\u30f3\u30b7\u30e7\u30f3\u3067\u3084\u3063\u305f\u306e\u3067\uff0c\u8aad\u307f\u306b\u304f\u3044\u90e8\u5206/\u7d30\u304b\u3044\u30df\u30b9/\u7406\u89e3\u306e\u8db3\u308a\u306a\u3044\u70b9\u3082\u591a\u3005\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3054\u5bb9\u8d66\u304f\u3060\u3055\u3044\uff0e\n\u203bMCMC\u3067\u306f\u5e8f\u76e4\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u6368\u3066\u308b\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u304c\uff0c\u4e0b\u306e\u65b9\u306e\u5b9f\u9a13\u3067\u306f\uff0c\u8a08\u7b97\u6642\u9593\u306e\u90fd\u5408\u3067\u30b5\u30f3\u30d7\u30eb\u3092\u6368\u3066\u305a\u306bplot\u3057\u3066\u307e\u3059\uff0e\u306e\u3067\u6027\u80fd\u7b49\u306f\u3042\u304f\u307e\u3067\u53c2\u8003\u307e\u3067\u306b\uff0e\n\n\u74b0\u5883\n\u81ea\u5206\u306ePC\u74b0\u5883\u306fOS X10.9.5, Python2.7+\u3067\u3059\uff0e\u5fc5\u8981\u306a\u3082\u306e\u306fpip\u3067\u5165\u308a\u307e\u3059\uff0e\npip install git+https://github.com/pymc-devs/pymc3\n\u306a\u304a\uff0cPyMC3\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u3042\u305f\u3063\u3066\u306f\uff0c\u5c11\u3057\u6614\u306e\u8a18\u4e8b\u3060\u3068URL\u306e\u30ea\u30f3\u30af\u5148\u304c\u7570\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\uff0ePandas\u3068Patsy\u3082\u3042\u308b\u3068\u4fbf\u5229\u306a\u306e\u3067pip\u3067\u5165\u308c\u3066\u304a\u304f\u3068\u3088\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\npip install pandas\npip install patsy\n\n\u57fa\u672c\u7684\u306a\u51e6\u7406\n\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u305f\u3068\u3053\u308d\u3092\u8aac\u660e\u3059\u308b\u305f\u3081\u306b\u306f\uff0c\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u4e00\u90e8\u3092\u4f7f\u3046\u306e\u3067\uff0c\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u524d\u534a\u304b\u3089\u6700\u4f4e\u9650\u5fc5\u8981\u305d\u3046\u306a\u3068\u3053\u308d\u3092\u307e\u3068\u3081\u307e\u3059\uff0e\u306a\u304a\uff0c\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u306fPyMC3\u4f9d\u5b58\u306e\u90e8\u5206\u3092\u660e\u793a\u7684\u306bpm.\u306e\u5f62\u3067\u66f8\u3044\u3066\u3044\u307e\u3059\uff0e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306fpm.\u306f\u7701\u304b\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u305d\u308c\u4ee5\u5916\u306f\u540c\u3058\u30b3\u30fc\u30c9\u3067\u3059\uff0e\n\u307e\u305a\u3044\u304f\u3064\u304bimport\uff0e\nimport numpy as np\n%pylab inline\nnp.random.seed(27)\nimport pymc3 as pm\n\n\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\uff0e\nalpha, sigma = 1, 1\nbeta = [1, 2.5]\nsize = 100\nX1 = np.linspace(0, 1, size)\nX2 = np.linspace(0,.2, size)\nY = alpha + beta[0]*X1 + beta[1]*X2 + np.random.randn(size)*sigma\n\n\u30e2\u30c7\u30eb\u5b9a\u7fa9\u3092\u3057\u307e\u3059\uff0e\n#X1\u3068X2\u3067Y\u3092\u7dda\u5f62\u56de\u5e30\u3059\u308b\u30e2\u30c7\u30eb\n#model\u3068\u3044\u3046\u540d\u524d\u306e\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\uff0c\u3068\u3044\u3046\u610f\u5473\nwith pm.Model() as model:\n\n    # Priors for unknown model parameters\n    alpha = pm.Normal('alpha', mu=0, sd=10)\n    beta = pm.Normal('beta', mu=0, sd=10, shape=2)\n    sigma = pm.HalfNormal('sigma', sd=1)\n\n    # Expected value of outcome\n    mu = alpha + beta[0]*X1 + beta[1]*X2\n\n    # Likelihood (sampling distribution) of observations\n    Y_obs = pm.Normal('Y_obs', mu=mu, sd=sigma, observed=Y)\n\n\u4e0a\u306e\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066MCMC\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e\uff08\u624b\u5143\u306eCPU\u306713.6\u79d2\u304b\u304b\u308a\u307e\u3057\u305f\uff09\nfrom scipy import optimize\nwith model:\n    # obtain starting values via MAP\n    start = pm.find_MAP(fmin=optimize.fmin_powell)\n    # instantiate sampler\n    step = pm.Slice(vars=[sigma])\n    # draw 5000 posterior samples\n    trace = pm.sample(5000, start=start, step=step)\n\n\npm.sample( )\u306e\u5f15\u6570\u3067\u3059\u304c\uff0c\u6700\u521d\u306e5000\u306f\u5f97\u305f\u3044sample\u306e\u30b5\u30a4\u30ba\u3067\u3059\uff0e\u6b21\u306estart\u3067\u306f\u521d\u671f\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\uff0e\u4eca\u56de\u306fMAP\u63a8\u5b9a\u91cf\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\uff0c\u6307\u5b9a\u3057\u306a\u3044\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\uff0e\u6700\u5f8c\u306estep\u3067\u306f\u30b9\u30e9\u30a4\u30b9\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u304c\uff0c\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\uff0c\n\u30fb2\u5024\u5909\u6570\uff1aBinaryMetropolis\n\u30fb\u96e2\u6563\u5909\u6570\uff1aMetropolis\n\u30fb\u9023\u7d9a\u5909\u6570\uff1aNUTS\n\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u5272\u308a\u5f53\u3066\u3089\u308c\u307e\u3059\uff0e\u3053\u3053\u3067\u4f7f\u7528\u3057\u305f\u7c21\u5358\u306a\u30e2\u30c7\u30eb\u3067\u306f\uff0c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u65b9\u6cd5\u306b\u3088\u308b\u5dee\u306f\u307b\u307c\u898b\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f\uff0e\u306a\u304a\uff0cStan\u3067\u4f7f\u7528\u3067\u304d\u308bHamiltonianMC\u3068NUTS\u306fPyMC3\u3067\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\uff0e\n\u53ef\u8996\u5316\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306btraceplot\u3067\u4e00\u767a\u3067\u3059\uff0e\npm.traceplot(trace[4000:])\n\n\u8981\u7d04\u60c5\u5831\u3082\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\npm.summary(trace[4000:])\n\n\u306a\u304a\uff0c\u4eca\u56de\u306f\u7c21\u5358\u306e\u305f\u3081\u6b63\u898f\u5206\u5e03\u306e\u307f\u3092\u6271\u3044\u307e\u3057\u305f\u304c\uff0c\u3082\u3061\u308d\u3093\u4ed6\u306b\u3082\u30ac\u30f3\u30de\u5206\u5e03\uff0c\u30d9\u30fc\u30bf\u5206\u5e03\uff0c\u4e8c\u9805\u5206\u5e03\uff0c\u30dd\u30a2\u30bd\u30f3\u5206\u5e03\u306a\u3069\u306a\u3069\u8272\u3005\u306a\u5206\u5e03\u304c\u6271\u3048\u307e\u3059\uff0e\n\u203bPyMC2\u3068\u306e\u95a2\u4fc2\u306a\u3069\u306b\u3064\u3044\u3066\u306f\uff0chttp://breakbee.hatenablog.jp/entry/2014/08/04/031342 \u306a\u3069\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\n\u56f0\u3063\u305f\u70b9\n\u305d\u3093\u306a\u4fbf\u5229\u306aPyMC3\u3067\u3059\u304c\uff0c\u3044\u304f\u3064\u304b\u56f0\u308b\u70b9\u304c\u3042\u308a\u307e\u3059\uff0e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u8a66\u3057\u306a\u304c\u3089\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n\n1. theano\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u304b\u3092\u4f7f\u3046\u3068\u30a8\u30e9\u30fc\u3092\u5410\u304f\n\u3061\u3087\u3046\u3069\u5148\u65e5Twitter\u3067\u3053\u308c\u95a2\u9023\u306e\u8b70\u8ad6\u3092\u898b\u305f\u6c17\u304c\u3057\u307e\u3059\u304c\uff0c\u304a\u305d\u3089\u304f\u3053\u306e\u5834\u5408\u30a8\u30e9\u30fc\u306e\u5143\u51f6\u306f https://github.com/pymc-devs/pymc3/blob/master/pymc3/model.py \u306e\u6700\u5f8c\u306e\u884c\n\ntheano.config.compute_test_value = 'raise'\n\n\u306b\u3042\u308a\u307e\u3059\uff08\u53c2\u8003\uff1ahttps://sites.google.com/site/iwanamidatascience/vol1/support_tokushu \uff09\uff0e\u81ea\u5206\u306b\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u3069\u3046\u3068\u3044\u3063\u305f\u7d30\u304b\u3044\u3053\u3068\u306f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3059\u304c\uff0cPyMC3\u3092import\u3057\u305f\u5f8c\u3067\nimport theano\ntheano.config.compute_test_value = 'ignore'\n\n\u3068\u7121\u5fc3\u3067\u6253\u3061\u8fbc\u3081\u3070\u89e3\u6d88\u3067\u304d\u307e\u3057\u305f\uff0e\u3061\u306a\u307f\u306b\uff0c'ignore'\u3067\u306f\u306a\u304f\u3066'off'\u3068\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u308b\u305d\u3046\u3067\u3059\u304c\uff0cglm\u306e\u8a08\u7b97\u306a\u3069\u3067\nscratchpad instance has no attribute 'test_value'\n\u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u308a\u3059\u308b\u306e\u3067\uff0c\u3068\u308a\u3042\u3048\u305a'ignore'\u306b\u3059\u308b\u306e\u304c\u7121\u96e3\u304b\u306a\u3068\u601d\u3044\u307e\u3059\uff0e\u3061\u306a\u307f\u306b\uff0c\u516c\u5f0fExamples\u306eProbabilistic Matrix Factorization\u306e\u30da\u30fc\u30b8\u3067\u3082'ignore'\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n2. \u81ea\u4f5c\u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u306e\u6271\u3044\u304c\u5384\u4ecb\n\n2.1 as_op\u4e0d\u8981\u8aac\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306eArbitrary deterministics\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\uff0cdeterministic\u306a\u5909\u6570b\u3092\u4ee5\u4e0b\u306ecrazy_modulo3( )\u95a2\u6570\u3067\u6c42\u3081\u3066\u3044\u307e\u3059\uff0e\nimport theano.tensor as T \nfrom theano.compile.ops import as_op\n\n@as_op(itypes=[T.lscalar], otypes=[T.lscalar])\ndef crazy_modulo3(value):\n    if value > 0: \n        return value % 3\n    else :\n        return (-value + 1) % 3\n\nwith pm.Model() as model_deterministic:\n    a = pm.Poisson('a', 1)\n    b = crazy_modulo3(a)\n\n@as_op( )\u306e\u90e8\u5206\u306ftheano.tensor\u578b\u306e\u5909\u6570\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u4f7f\u3046\u305f\u3081\u306e\u546a\u6587\u307f\u305f\u3044\u306a\u3082\u306e\u3067\uff0c\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u76f4\u524d\u306e\u884c\u306b\u66f8\u304d\uff0c\u5165\u51fa\u529b\u306e\u578b\u3092\u5ba3\u8a00\u3057\u3066\u3042\u3052\u307e\u3059\uff0ePyMC3\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306b\u3082\u3053\u306e\u3088\u3046\u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\uff0e\n\nTheano needs to know the types of the inputs and outputs of a function, which are specified for as_op by itypes for inputs and otypes for outputs.\n\n\u3057\u304b\u3057\uff0c\u5b9f\u306f\u3053\u3053\u306f@as_op\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3067\u304d\u307e\u3059\uff0e\nimport theano.ifelse\ndef symbolf(x):\n    return theano.ifelse.ifelse(T.gt(x,0), x%3, (-x+1)%3)\ndef crazy_modulo3(value):\n    return symbolf(value)\n\n\u3053\u3053\u306f\u5c11\u3057\u30cf\u30de\u3063\u305f\u306e\u3067\u89e3\u8aac\u3057\u307e\u3059\uff0e\n\u4f8b\u3048\u3070\uff0cifelse\u3092\u4f7f\u308f\u305a\u30ca\u30a4\u30fc\u30d6\u306b\ndef crazy_modulo3(value):\n    if value > 0:\n        return value % 3\n    else :\n        return (-value + 1) % 3\n\n\u3068\u3059\u308b\u3068\uff0cvalue > 0\u3068\u3044\u3046\u6bd4\u8f03\u304c\u51fa\u6765\u306a\u3044\u3068\u6012\u3089\u308c\u307e\u3059\uff0e\u307e\u305f\uff0c\ndef crazy_modulo3(value):\n    if T.lt(0,value):\n        return value % 3\n    else :\n        return (-value + 1) % 3\n\n\u3068\u3059\u308b\u3068\uff0c\u30a8\u30e9\u30fc\u306f\u51fa\u306a\u3044\u306e\u3067\u3059\u304c\uff0c\u5024\u3092trace\u3057\u3066\u307f\u308b\u3068T.lt(0,value)\u304cFalse\u306b\u306a\u3089\u306a\u3044\uff08Theano has no boolean dtype. Instead, all boolean tensors are represented in 'int8'. -- http://deeplearning.net/software/theano/library/tensor/basic.html \uff09\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\u305d\u306e\u305f\u3081\uff0cifelse\u3092\u4f7f\u3063\u3066\u7121\u7406\u77e2\u7406\u6bd4\u8f03\u3057\u3066\u3044\u307e\u3059\uff0e\u3053\u306e\u8fba\u304c\u3061\u3087\u3063\u3068theano\u306e\u3064\u3089\u3044\u3068\u3053\u308d\u3067\u3059\u304c\uff0c\u3053\u308c\u3067\u4e00\u5fdc@as_op\u3092\u4f7f\u308f\u305a\u306b\u95a2\u6570\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3057\u305f\uff0e\n\n2.2 deterministic\u306a\u5909\u6570\u3092traceplot\u3059\u308b\u65b9\u6cd5\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3067deterministic\u306a\u5909\u6570b\u3092\u5b9a\u7fa9\u3057\u305f\u306f\u3044\u3044\u3082\u306e\u306e\uff0c\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306b\u306f\u305d\u306e\u5f8c\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u66f8\u3044\u3066\u3044\u307e\u305b\u3093\uff0e\u305d\u3053\u3067\u8a66\u3057\u306b\nwith model_deterministic:\n    trace = pm.sample(500)\npm.traceplot(trace)\n\n\u3068\u3057\u3066\u307f\u308b\u3068\uff0c\u5909\u6570a\u306e\u5024\u3057\u304bplot\u3055\u308c\u307e\u305b\u3093\uff0e\u81ea\u5206\u306f\u5909\u6570b\u306b\u3082\u8208\u5473\u304c\u3042\u3063\u305f\u306e\u3067\uff0cpm.\u306e\u4e2d\u8eab\u3092\u773a\u3081\u3066\u307f\u308b\u3068\uff0cpm.Deterministic( )\u3068\u3044\u3046\u305d\u308c\u3063\u307d\u3044\u3082\u306e\u3092\u767a\u898b\u3057\u307e\u3057\u305f\uff0e\u3042\u3068\u306f\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\u3067\nb = crazy_modulo3(a)\n\u3092\nb = pm.Deterministic(\"b\",crazy_modulo3(a))\n\u306b\u5909\u3048\u3066\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b\u3068\uff0cb\u306e\u5024\u304c\u6b63\u3057\u304fplot\u3055\u308c\u308b\u306f\u305a\u3067\u3059\uff0e\n\n2.3 as_op\u3092\u30e9\u30f3\u30c0\u30e0\u5909\u6570\u306e\u8a08\u7b97\u306b\u4f7f\u3046\u306e\u306f\u907f\u3051\u308b\u3079\u304d\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306eArbitrary distributions\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\uff0c\u81ea\u5206\u3067\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u305f\u3044\u78ba\u7387\u5206\u5e03\u3092\u5b9a\u7fa9\u3059\u308b\u65b9\u6cd5\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\uff0e\nwith pm.Model() as model1:\n    alpha = pm.Uniform('intercept', -100, 100)\n    # Create custom densities\n    beta = pm.DensityDist('beta', lambda value: -1.5 * T.log(1 + value**2), testval=0)\n    eps = pm.DensityDist('eps', lambda value: -T.log(T.abs_(value)), testval=1)\n    # Create likelihood\n    like = pm.Normal('y_est', mu=alpha + beta * X, sd=eps, observed=Y)\n\nlambda\u5f0f\u3068pm.DensityDist\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3059\u308b\u3053\u306e\u65b9\u5f0f\u306f\u7279\u306b\u554f\u984c\u3042\u308a\u307e\u305b\u3093\uff0e\u7d9a\u3051\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3082\u6b63\u3057\u304f\u52d5\u304d\u307e\u3059\uff0e\nwith model1:\n    trace = pm.sample(500)\npm.traceplot(trace)\n\n\u3053\u308c\u3068\u540c\u69d8\u306e\u610f\u5473\u3092\u6301\u3064\u30b3\u30fc\u30c9\u3068\u3057\u3066\uff0c\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\uff0c\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u4ee5\u4e0b\u306e\u65b9\u5f0f\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\uff08\u3059\u3050\u5f8c\u3067\u3053\u306e\u30b3\u30fc\u30c9\u306b\u8aa4\u308a\u304c\u3042\u308a\u305d\u3046\u306a\u3053\u3068\u3092\u6307\u6458\u3057\u307e\u3059\uff09\uff0e\u3053\u308c\u3060\u3068\uff0clambda\u5f0f\u3092\u4f7f\u308f\u306a\u3044\u306e\u3067\uff0c\u95a2\u6570\u304c\u66f8\u304d\u3084\u3059\u304f\u306a\u308b\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308b\u3088\u3046\u306b\u601d\u308f\u308c\u307e\u3059\uff0e\u306a\u304a\uff0cbeta\u4ee5\u5916\u306f\u4e0a\u306emodel1\u3068\u540c\u3058\u5f62\u306b\u306a\u308b\u3088\u3046\u79c1\u304c\u4ed8\u3051\u52a0\u3048\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\uff0e\nclass Beta(pm.distributions.Continuous):\n    def __init__(self, mu, *args, **kwargs):\n        super(Beta, self).__init__(*args, **kwargs)\n        self.mu = mu\n        self.mode = mu\n\n    def logp(self, value):\n        mu = self.mu\n        return beta_logp(value - mu)\n\n@as_op(itypes=[T.dscalar], otypes=[T.dscalar])\ndef beta_logp(value):\n    return -1.5 * np.log(1 + (value)**2)\n\nwith pm.Model() as model2:\n    beta = Beta('slope', mu=0, testval=0)\n\n    #I add other parameters to follow model1 above\n    alpha = pm.Uniform('intercept', -100, 100)\n    eps = pm.DensityDist('eps', lambda value: -T.log(T.abs_(value)), testval=1)\n    like = pm.Normal('y_est', mu=alpha + beta * X, sd=eps, observed=Y)\n\nbeta\u306e\u8a08\u7b97\u306b\u4f8b\u306e@as_op\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\uff0e\u5148\u307b\u3069\u306edeterministic\u306a\u5909\u6570\u306e\u8a08\u7b97\u306b\u3053\u308c\u3092\u4f7f\u3063\u305f\u3068\u304d\u306f\uff0c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3082\u554f\u984c\u306a\u304f\u52d5\u304d\u307e\u3057\u305f\u304c\uff0c\u4eca\u56de\u306f\u3069\u3046\u3067\u3057\u3087\u3046\u304b\uff1f\nwith model2:\n    trace = pm.sample(100)\npm.traceplot(trace)\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\uff0c\u304a\u305d\u3089\u304f\u2193\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3068\u601d\u3044\u307e\u3059\uff0e\nAttributeError: 'FromFunctionOp' object has no attribute 'grad'\n\u3069\u3046\u3082\uff0c@as_op\u306b\u3088\u3063\u3066\u6301\u3063\u3066\u304d\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\uff0cMCMC\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u5fc5\u8981\u306a\u52fe\u914d\u8a08\u7b97\u306e\u5c5e\u6027grad\u3092\u6301\u3063\u3066\u3044\u306a\u3044\uff0c\u3068\u3044\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u601d\u3048\u307e\u3059\uff0edeterministic\u306a\u5909\u6570\u3067\u306f\u52fe\u914d\u8a08\u7b97\u3057\u306a\u3044\u306e\u3067\u30aa\u30c3\u30b1\u30fc\u3060\u3063\u305f\u3093\u3067\u3057\u3087\u3046\u304b\uff0e\u3053\u306e\u8fba\u3092\u304a\u3082\u3080\u308d\u306b\u30b0\u30b0\u3063\u3066\u307f\u308b\u3068\uff0c\u5049\u3044\u4eba\u306b\u3088\u308b\u300c\u5bfe\u51e6\u6cd5\u306f\u308f\u304b\u3089\u306a\u3044\u300d\u3068\u3044\u3063\u305f\u56de\u7b54\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\uff0e\n\nThe only way to get the automatic gradient computation is by expressing your density in terms of theano operators. as_op creates a blackbox function for which autodiff will not work so there is no way I know of (except numerical differentiation) to make this work.\nhttps://github.com/pymc-devs/pymc3/issues/601\n\n\u3057\u304b\u3057\uff0c\u3053\u3053\u30672.1\u306e\u7d50\u679c\u304c\u3044\u304d\u307e\u3059\uff0e\u3064\u307e\u308a\uff0c@as_op\u304c\u60aa\u3055\u3092\u3057\u3066\u3044\u308b\u306a\u3089\u305d\u3082\u305d\u3082@as_op\u306a\u3057\u3067\u5b9a\u7fa9\u3059\u308c\u3070\u3044\u3044\u306e\u3067\u306f\uff1f\u3068\u3044\u3046\u8a71\u3067\u3059\uff0e\u305d\u3053\u3067\uff0c\n@as_op(itypes=[T.dscalar], otypes=[T.dscalar])\ndef beta_logp(value):\n    return -1.5 * np.log(1 + (value)**2)\n\n\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u5909\u3048\u307e\u3059\uff0e\ndef beta_logp(value):\n    return -1.5 * T.log(1 + (value)**2)\n\n2.1\u3068\u540c\u3058\u3088\u3046\u306b\uff0ctheano.tensor\u578b\u306e\u5909\u6570\u3092\u6271\u3046\u969b\u306e\u30eb\u30fc\u30eb\u306b\u6ce8\u610f\u3059\u308c\u3070\uff08\u4eca\u56de\u3060\u3068\uff0cnp.log\u3067\u306f\u306a\u304fT.log\u306b\u3059\u308b\uff09\u7121\u4e8b\u8a08\u7b97\u3067\u304d\u307e\u3059\uff0e\u7d50\u679c\u3082\u6982\u306d\u540c\u3058\u306b\u306a\u308a\u307e\u3057\u305f\uff08\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306a\u306e\u3067\u30d6\u30ec\u306f\u3042\u308a\u307e\u3059\u304c\uff09\uff0e\n\u7d50\u8ad6\u3068\u3057\u3066\u306f\uff0c\u81ea\u4f5c\u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3068\u304d\u306f\uff0clambda\u5f0f\u3092\u4f7f\u304a\u3046\u304c\u4f7f\u308f\u307e\u3044\u304c\uff0ctheano\u306e\u6587\u6cd5\u306b\u6ce8\u610f\u3057\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff0c\u3068\u3044\u3046\u3053\u3068\u304c\u8a00\u3048\u305d\u3046\u3067\u3059\uff0e\n\n3. glm\u3067\u306e\u901f\u5ea6\u3068\u6027\u80fd\n\u6700\u5f8c\u306b\uff0c\u4e00\u822c\u5316\u7dda\u5f62\u30e2\u30c7\u30eb(glm)\u306e\u8a08\u7b97\u3092\u884c\u3046\u3068\u304d\u306e\u901f\u5ea6\u3068\u6027\u80fd\u306e\u8a71\u3092\u3057\u307e\u3059\uff0e \u8a73\u7d30\u306f https://github.com/pymc-devs/pymc3/issues/544 \u306b\u3042\u308a\u307e\u3059\u304c\uff0c\u300c\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u3068\u3057\u3070\u3057\u3070NUTS\u304c\u9045\u3044\u300d\u300cMetropolis\u306f\u901f\u3044\u300d\u300c\u30c7\u30fc\u30bf\u3084\u30de\u30b7\u30f3\u306e\u30bf\u30a4\u30d7\u306b\u3088\u3063\u3066\u306f\uff0cHamiltonianMC\u304c\u901f\u3044\u3068\u304d\u3082\u3042\u308b\u300d\u3068\u3044\u3063\u305f\u8a71\u304c\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u53c2\u8003\u307e\u3067\u306b\uff0c\u81ea\u5206\u306e\u74b0\u5883\u3067\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u30c7\u30fc\u30bf\u3092glm\uff08\u666e\u901a\u306e\u7dda\u5f62\u56de\u5e30\uff09\u306b\u304b\u3051\u3066\u307f\u307e\u3057\u305f\uff0e\nimport pandas as pd\ndf = pd.DataFrame({'x1': X1, 'x2': X2, 'y': Y})\nwith pm.Model() as model:\n    pm.glm.glm('y ~ x1+x2', df)\n    start = pm.find_MAP(fmin=optimize.fmin_powell)\n    step = pm.HamiltonianMC()\n    trace = pm.sample(1000, start=start, step=step)\npm.traceplot(trace)\n\n\u30fbHamiltonianMC\uff1a1.7\u79d2\u3067\u7d42\u4e86\uff0e\u53ce\u675f\u3082\u307e\u3042\u307e\u3042\uff0e\uff08\u56f31\uff09\n\u30fbMetropolis\uff1a0.3\u79d2\u3067\u7d42\u4e86\uff0e\u53ce\u675f\u306f\u30c0\u30e1\u30c0\u30e1\uff0e\n\u30fbNUTS\uff1a5\u5206\u7d4c\u3063\u3066\u30828\u500b\u3057\u304b\u30b5\u30f3\u30d7\u30eb\u3067\u304d\u3066\u306a\u3044\uff0c\u9045\u3059\u304e\u308b\n\u30fb\u672c\u8a18\u4e8b1.\u3067\u884c\u3063\u305f\uff0cpm.glm\u30af\u30e9\u30b9\u3092\u4f7f\u308f\u306a\u3044\u624b\u66f8\u304d\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\uff1a3.2\u79d2\u3067\u7d42\u4e86\uff0eHamiltonianMC\u306b\u306f\u53ce\u675f\u306f\u52a3\u308b\u304c\uff0c\u305d\u308c\u307b\u3069\u60aa\u304f\u306a\u3044\uff0e\uff08\u56f32\uff09\n\u771f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\uff1aalpha=1,beta[0]=1,beta[1]=2.5,sigma=1\n\uff08\u56f31\uff09\n\n\uff08\u56f32\uff1abeta\u306e\u9752\u7dda\u304cX1\u306e\u56de\u5e30\u4fc2\u6570\uff0c\u7dd1\u7dda\u304cX2\u306e\u56de\u5e30\u4fc2\u6570\uff0csigma\u304csd\u306b\u305d\u308c\u305e\u308c\u5bfe\u5fdc\uff09\n\n\u3068\u3044\u3046\u7d50\u679c\u3067\u3057\u305f\uff0e\u3061\u306a\u307f\u306b\uff0cNUTS\u3092\u9014\u4e2d\u3067\u6253\u3061\u5207\u3063\u3066plot\u3057\u3066\u307f\u308b\u3068\uff0c\u3069\u3046\u3082\u30d1\u30e9\u30e1\u30fc\u30bf\u306escaling\u304c\u304a\u304b\u3057\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\uff0e\u3053\u306e\u5834\u5408\u306e\u89e3\u6c7a\u6cd5\u3068\u3057\u3066\uff0c\u4e0a\u306eissue\u30da\u30fc\u30b8\u306b\u306f\nC = pm.approx_hessian(model.test_point)\nstep = pm.NUTS(scaling=C)\n\n\u3068\u3059\u308c\u3070\u901f\u5ea6\u304c\u51fa\u308b\u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\uff0eSphinx\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092update\u3057\u3066\uff08\u5165\u3063\u3066\u306a\u3044\u4eba\u306fpip\u3067install\u3057\u3066\u4e0b\u3055\u3044\uff09\u4e0a\u306e2\u884c\u3092\u7121\u5fc3\u3067\u6253\u3061\u8fbc\u3093\u3060\u3068\u3053\u308d\uff0cleading minor\u304c\u6b63\u5b9a\u5024\u3058\u3083\u306a\u3044\u306e\u3067\u8a08\u7b97\u3067\u304d\u307e\u305b\u3093\u3068\u8a00\u308f\u308c\u307e\u3057\u305f\uff0e\nLinAlgError: 2-th leading minor not positive definite\n\u3053\u308c\u306f\u3061\u3087\u3063\u3068\u89e3\u6c7a\u3067\u304d\u305d\u3046\u306b\u306a\u3044\u306e\u3067\u30b9\u30eb\u30fc\u3057\u307e\u3057\u305f\u304c\uff0c\u95a2\u9023\u3059\u308b\u8b70\u8ad6\u306f\u3053\u3061\u3089\u306b\u3042\u308a\u305d\u3046\u3067\u3059\u2192 https://github.com/scikit-learn/scikit-learn/issues/2640\n\u500b\u4eba\u7684\u306a\u611f\u60f3\u3068\u3057\u3066\u306f\uff0c\u5358\u306bglm\u3092\u4f7f\u3044\u305f\u3044\u306a\u3089\uff0capprox_hessian\u3092scaling\u306b\u4f7f\u3063\u305fNUTS\u306b\u3088\u308bglm\u3092\u8a66\u3057\u3066\u307f\u3066\uff0c\u30c0\u30e1\u3060\u3063\u305f\u3089HMC\u306b\u3088\u308bglm\u3092\u8a66\u3057\u3066\u307f\u308b\u306e\u304c\u3088\u3055\u305d\u3046\u3067\u3059\uff0e\n\u307e\u305f\uff0c1.\u306e\u4f8b\u3067\u66f8\u3044\u305f\u3088\u3046\u306apm.glm\u30af\u30e9\u30b9\u3092\u4f7f\u308f\u306a\u3044\u65b9\u6cd5\u3082\uff0cprior\u3092\u3046\u307e\u304f\u8a2d\u5b9a\u3059\u308b\u306a\u3069\u5de5\u592b\u3059\u308c\u3070\u6027\u80fd\u304c\u4e0a\u304c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3057\uff0c\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6319\u52d5\u3092\u898b\u305f\u3044\u5834\u5408\u3084\u3082\u3063\u3068\u8907\u96d1\u306a\u968e\u5c64\u30d9\u30a4\u30ba\u30e2\u30c7\u30eb\u3092\u4f7f\u3044\u305f\u3044\u3068\u304d\u306a\u3069\u306f\uff0cpm.glm\u3092\u4f7f\u308f\u305a\u306b\u3053\u3061\u3089\u3092\u63a1\u7528\u3059\u308c\u3070\u3088\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3057\u305f\uff0e\n\n\u6700\u5f8c\u306b\n\u81ea\u5206\u306e\u30e1\u30e2\u304c\u3066\u3089\u30c0\u30e9\u30c0\u30e9\u9577\u304f\u66f8\u304d\u307e\u3057\u305f\u304c\uff0c\u30cf\u30de\u308a\u305d\u3046\u306a\u3068\u3053\u308d\u306e\u53c2\u8003\u306b\u5c11\u3057\u3067\u3082\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\uff0e@as_op\u306e\u3068\u3053\u308d\u306f\uff0c\u81ea\u5206\u3067theano\u5074\u306egrad\u3092\u5b9a\u7fa9\u3057\u76f4\u305d\u3046\u3068\u3057\u3066\u4e00\u6669\u3092\u7121\u99c4\u306b\u3059\u308b\u306a\u3069\u306a\u304b\u306a\u304b\u3064\u3089\u3044\u3082\u306e\u304c\u3042\u308a\u307e\u3057\u305f\uff0e\n\u3042\u3068\uff0c\u516c\u5f0f\u30da\u30fc\u30b8\u306f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3088\u308aExamples\u306e\u65b9\u304c\u9762\u767d\u305d\u3046\u306a\uff08Probabilistic Matrix Factorization\u3068\u304bSurvival Analysis\u3068\u304b\uff09\u4e88\u611f\u304c\u3059\u308b\u306e\u3067\uff0c\u307e\u305f\u6df1\u591c\u306e\u6c17\u304c\u5411\u3044\u305f\u3068\u304d\u306b\u8a66\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\uff0e\n\u203b grad\u306e\u5b9a\u7fa9\u306fhttp://deeplearning.net/software/theano/extending/op.html \u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\uff0e\u5143\u3005\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308bT.grad\u3092theano.function\u3067\u4f5c\u308c\u308b\u95a2\u6570\u3068\u307f\u305f\u3068\u304d\u306e\u5165\u529b\u306f\u30ea\u30b9\u30c8\u306e\u3088\u3046\u306b\u601d\u3048\u308b\u306e\u3067\u3059\u304c\uff0c\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u901a\u308a\u306b\u3084\u308b\u3068\uff0c\u5165\u529b\u304c\u30ea\u30b9\u30c8\u3068\u306a\u308b\u95a2\u6570\u304c\u5b9a\u7fa9\u3067\u304d\u305a\u306b\u65ad\u5ff5\u3057\u307e\u3057\u305f\uff0e\n\u9069\u5b9c\u8ffd\u8a18\u3057\u307e\u3059\uff0e\n#\u6982\u8981\nPython\u3067\u4f7f\u3048\u308b\u30d5\u30ea\u30fc\u306aMCMC\u30b5\u30f3\u30d7\u30e9\u30fc\u306e\u4e00\u3064\u306bPyMC3\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\uff0e\u5148\u65e5\uff0e\u300cPyMC3\u306b\u306a\u3063\u3066PyMC2\u3088\u308a\u901f\u304f\u306a\u3063\u305f\u304b\u3082\u2026\u300d\u3068\u304b\u300cStan\u306f\u96e2\u6563\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u2026\u300d\u3068\u304b\u3044\u3046\u8a71\u3092\u30b9\u30bf\u30d0\u3067\u96a3\u306b\u5ea7\u3063\u305f\u5973\u5b50\u9ad8\u751f\u304c\u3057\u3066\u3044\u305f\uff08\u3088\u3046\u306a\u6c17\u304c\u3057\u305f\uff09\u306e\u3067\uff0c\u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb https://pymc-devs.github.io/pymc3/getting_started/ \u3092\u8a66\u3057\u306a\u304c\u3089\uff0c\u3044\u304f\u3064\u304b\u306e\u30a8\u30e9\u30fc\u3084\u8ffd\u52a0\u5b9f\u9a13\u306b\u3064\u3044\u3066\u306e\u30e1\u30e2\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\uff0e\u300cPython\u3067\u968e\u5c64\u30d9\u30a4\u30ba\u3068\u304b\u3092\u4f7f\u3063\u3066\u307f\u305f\u3044\u3051\u3069\u30d5\u30eb\u30b9\u30af\u30e9\u30c3\u30c1\u3067MCMC\u66f8\u304f\u306e\u306f\u3064\u3089\u3044\u2026\u300d\u300c\u96e2\u6563\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u2026\u300d\u307f\u305f\u3044\u306a\u4eba\u304c\u5bfe\u8c61\u3067\u3059\uff0eMCMC\u306b\u3042\u307e\u308a\u8a73\u3057\u304f\u306a\u3044\u5b66\u751f\u304c\u6df1\u591c\u306e\u30c6\u30f3\u30b7\u30e7\u30f3\u3067\u3084\u3063\u305f\u306e\u3067\uff0c\u8aad\u307f\u306b\u304f\u3044\u90e8\u5206/\u7d30\u304b\u3044\u30df\u30b9/\u7406\u89e3\u306e\u8db3\u308a\u306a\u3044\u70b9\u3082\u591a\u3005\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3054\u5bb9\u8d66\u304f\u3060\u3055\u3044\uff0e\n\n\u203bMCMC\u3067\u306f\u5e8f\u76e4\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u6368\u3066\u308b\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u304c\uff0c\u4e0b\u306e\u65b9\u306e\u5b9f\u9a13\u3067\u306f\uff0c\u8a08\u7b97\u6642\u9593\u306e\u90fd\u5408\u3067\u30b5\u30f3\u30d7\u30eb\u3092\u6368\u3066\u305a\u306bplot\u3057\u3066\u307e\u3059\uff0e\u306e\u3067\u6027\u80fd\u7b49\u306f\u3042\u304f\u307e\u3067\u53c2\u8003\u307e\u3067\u306b\uff0e\n\n#\u74b0\u5883\n\u81ea\u5206\u306ePC\u74b0\u5883\u306fOS X10.9.5, Python2.7+\u3067\u3059\uff0e\u5fc5\u8981\u306a\u3082\u306e\u306fpip\u3067\u5165\u308a\u307e\u3059\uff0e\n`pip install git+https://github.com/pymc-devs/pymc3`\n\u306a\u304a\uff0cPyMC3\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u3042\u305f\u3063\u3066\u306f\uff0c\u5c11\u3057\u6614\u306e\u8a18\u4e8b\u3060\u3068URL\u306e\u30ea\u30f3\u30af\u5148\u304c\u7570\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\uff0ePandas\u3068Patsy\u3082\u3042\u308b\u3068\u4fbf\u5229\u306a\u306e\u3067pip\u3067\u5165\u308c\u3066\u304a\u304f\u3068\u3088\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n`pip install pandas`\n`pip install patsy`\n\n#\u57fa\u672c\u7684\u306a\u51e6\u7406\n\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u305f\u3068\u3053\u308d\u3092\u8aac\u660e\u3059\u308b\u305f\u3081\u306b\u306f\uff0c\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u4e00\u90e8\u3092\u4f7f\u3046\u306e\u3067\uff0c\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u524d\u534a\u304b\u3089\u6700\u4f4e\u9650\u5fc5\u8981\u305d\u3046\u306a\u3068\u3053\u308d\u3092\u307e\u3068\u3081\u307e\u3059\uff0e\u306a\u304a\uff0c\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u306fPyMC3\u4f9d\u5b58\u306e\u90e8\u5206\u3092\u660e\u793a\u7684\u306bpm.\u306e\u5f62\u3067\u66f8\u3044\u3066\u3044\u307e\u3059\uff0e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306fpm.\u306f\u7701\u304b\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u305d\u308c\u4ee5\u5916\u306f\u540c\u3058\u30b3\u30fc\u30c9\u3067\u3059\uff0e\n\n\u307e\u305a\u3044\u304f\u3064\u304bimport\uff0e\n\n```\nimport numpy as np\n%pylab inline\nnp.random.seed(27)\nimport pymc3 as pm\n```\n\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\uff0e\n\n```\nalpha, sigma = 1, 1\nbeta = [1, 2.5]\nsize = 100\nX1 = np.linspace(0, 1, size)\nX2 = np.linspace(0,.2, size)\nY = alpha + beta[0]*X1 + beta[1]*X2 + np.random.randn(size)*sigma\n```\n\u30e2\u30c7\u30eb\u5b9a\u7fa9\u3092\u3057\u307e\u3059\uff0e\n\n```\n#X1\u3068X2\u3067Y\u3092\u7dda\u5f62\u56de\u5e30\u3059\u308b\u30e2\u30c7\u30eb\n#model\u3068\u3044\u3046\u540d\u524d\u306e\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\uff0c\u3068\u3044\u3046\u610f\u5473\nwith pm.Model() as model:\n\n    # Priors for unknown model parameters\n    alpha = pm.Normal('alpha', mu=0, sd=10)\n    beta = pm.Normal('beta', mu=0, sd=10, shape=2)\n    sigma = pm.HalfNormal('sigma', sd=1)\n\n    # Expected value of outcome\n    mu = alpha + beta[0]*X1 + beta[1]*X2\n\n    # Likelihood (sampling distribution) of observations\n    Y_obs = pm.Normal('Y_obs', mu=mu, sd=sigma, observed=Y)\n```\n\u4e0a\u306e\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066MCMC\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e\uff08\u624b\u5143\u306eCPU\u306713.6\u79d2\u304b\u304b\u308a\u307e\u3057\u305f\uff09\n\n```\nfrom scipy import optimize\nwith model:\n    # obtain starting values via MAP\n    start = pm.find_MAP(fmin=optimize.fmin_powell)\n    # instantiate sampler\n    step = pm.Slice(vars=[sigma])\n    # draw 5000 posterior samples\n    trace = pm.sample(5000, start=start, step=step)\n\n```\npm.sample( )\u306e\u5f15\u6570\u3067\u3059\u304c\uff0c\u6700\u521d\u306e5000\u306f\u5f97\u305f\u3044sample\u306e\u30b5\u30a4\u30ba\u3067\u3059\uff0e\u6b21\u306estart\u3067\u306f\u521d\u671f\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\uff0e\u4eca\u56de\u306fMAP\u63a8\u5b9a\u91cf\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\uff0c\u6307\u5b9a\u3057\u306a\u3044\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\uff0e\u6700\u5f8c\u306estep\u3067\u306f\u30b9\u30e9\u30a4\u30b9\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u304c\uff0c\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\uff0c\n\u30fb2\u5024\u5909\u6570\uff1aBinaryMetropolis\n\u30fb\u96e2\u6563\u5909\u6570\uff1aMetropolis\n\u30fb\u9023\u7d9a\u5909\u6570\uff1aNUTS\n\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u5272\u308a\u5f53\u3066\u3089\u308c\u307e\u3059\uff0e\u3053\u3053\u3067\u4f7f\u7528\u3057\u305f\u7c21\u5358\u306a\u30e2\u30c7\u30eb\u3067\u306f\uff0c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u65b9\u6cd5\u306b\u3088\u308b\u5dee\u306f\u307b\u307c\u898b\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f\uff0e\u306a\u304a\uff0cStan\u3067\u4f7f\u7528\u3067\u304d\u308bHamiltonianMC\u3068NUTS\u306fPyMC3\u3067\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\uff0e\n\n\u53ef\u8996\u5316\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306btraceplot\u3067\u4e00\u767a\u3067\u3059\uff0e\n\n```\npm.traceplot(trace[4000:])\n```\n\u8981\u7d04\u60c5\u5831\u3082\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n```\npm.summary(trace[4000:])\n```\n\u306a\u304a\uff0c\u4eca\u56de\u306f\u7c21\u5358\u306e\u305f\u3081\u6b63\u898f\u5206\u5e03\u306e\u307f\u3092\u6271\u3044\u307e\u3057\u305f\u304c\uff0c\u3082\u3061\u308d\u3093\u4ed6\u306b\u3082\u30ac\u30f3\u30de\u5206\u5e03\uff0c\u30d9\u30fc\u30bf\u5206\u5e03\uff0c\u4e8c\u9805\u5206\u5e03\uff0c\u30dd\u30a2\u30bd\u30f3\u5206\u5e03\u306a\u3069\u306a\u3069\u8272\u3005\u306a\u5206\u5e03\u304c\u6271\u3048\u307e\u3059\uff0e\n\n\u203bPyMC2\u3068\u306e\u95a2\u4fc2\u306a\u3069\u306b\u3064\u3044\u3066\u306f\uff0chttp://breakbee.hatenablog.jp/entry/2014/08/04/031342 \u306a\u3069\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\n#\u56f0\u3063\u305f\u70b9\n\u305d\u3093\u306a\u4fbf\u5229\u306aPyMC3\u3067\u3059\u304c\uff0c\u3044\u304f\u3064\u304b\u56f0\u308b\u70b9\u304c\u3042\u308a\u307e\u3059\uff0e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u8a66\u3057\u306a\u304c\u3089\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n##1. theano\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u304b\u3092\u4f7f\u3046\u3068\u30a8\u30e9\u30fc\u3092\u5410\u304f\n\u3061\u3087\u3046\u3069\u5148\u65e5Twitter\u3067\u3053\u308c\u95a2\u9023\u306e\u8b70\u8ad6\u3092\u898b\u305f\u6c17\u304c\u3057\u307e\u3059\u304c\uff0c\u304a\u305d\u3089\u304f\u3053\u306e\u5834\u5408\u30a8\u30e9\u30fc\u306e\u5143\u51f6\u306f https://github.com/pymc-devs/pymc3/blob/master/pymc3/model.py \u306e\u6700\u5f8c\u306e\u884c\n```\ntheano.config.compute_test_value = 'raise'\n```\n\u306b\u3042\u308a\u307e\u3059\uff08\u53c2\u8003\uff1ahttps://sites.google.com/site/iwanamidatascience/vol1/support_tokushu \uff09\uff0e\u81ea\u5206\u306b\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u3069\u3046\u3068\u3044\u3063\u305f\u7d30\u304b\u3044\u3053\u3068\u306f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3059\u304c\uff0cPyMC3\u3092import\u3057\u305f\u5f8c\u3067\n\n```\nimport theano\ntheano.config.compute_test_value = 'ignore'\n```\n\u3068\u7121\u5fc3\u3067\u6253\u3061\u8fbc\u3081\u3070\u89e3\u6d88\u3067\u304d\u307e\u3057\u305f\uff0e\u3061\u306a\u307f\u306b\uff0c'ignore'\u3067\u306f\u306a\u304f\u3066'off'\u3068\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u308b\u305d\u3046\u3067\u3059\u304c\uff0cglm\u306e\u8a08\u7b97\u306a\u3069\u3067\n`scratchpad instance has no attribute 'test_value'`\n\u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u308a\u3059\u308b\u306e\u3067\uff0c\u3068\u308a\u3042\u3048\u305a'ignore'\u306b\u3059\u308b\u306e\u304c\u7121\u96e3\u304b\u306a\u3068\u601d\u3044\u307e\u3059\uff0e\u3061\u306a\u307f\u306b\uff0c\u516c\u5f0fExamples\u306eProbabilistic Matrix Factorization\u306e\u30da\u30fc\u30b8\u3067\u3082'ignore'\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n##2. \u81ea\u4f5c\u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u306e\u6271\u3044\u304c\u5384\u4ecb\n\n###2.1 as_op\u4e0d\u8981\u8aac\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306eArbitrary deterministics\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\uff0cdeterministic\u306a\u5909\u6570b\u3092\u4ee5\u4e0b\u306ecrazy_modulo3( )\u95a2\u6570\u3067\u6c42\u3081\u3066\u3044\u307e\u3059\uff0e\n\n```\nimport theano.tensor as T \nfrom theano.compile.ops import as_op\n\n@as_op(itypes=[T.lscalar], otypes=[T.lscalar])\ndef crazy_modulo3(value):\n    if value > 0: \n        return value % 3\n    else :\n        return (-value + 1) % 3\n\nwith pm.Model() as model_deterministic:\n    a = pm.Poisson('a', 1)\n    b = crazy_modulo3(a)\n```\n`@as_op( )`\u306e\u90e8\u5206\u306ftheano.tensor\u578b\u306e\u5909\u6570\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u4f7f\u3046\u305f\u3081\u306e\u546a\u6587\u307f\u305f\u3044\u306a\u3082\u306e\u3067\uff0c\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u76f4\u524d\u306e\u884c\u306b\u66f8\u304d\uff0c\u5165\u51fa\u529b\u306e\u578b\u3092\u5ba3\u8a00\u3057\u3066\u3042\u3052\u307e\u3059\uff0ePyMC3\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306b\u3082\u3053\u306e\u3088\u3046\u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\uff0e\n> Theano needs to know the types of the inputs and outputs of a function, which are specified for as_op by itypes for inputs and otypes for outputs.\n\n**\u3057\u304b\u3057\uff0c\u5b9f\u306f\u3053\u3053\u306f`@as_op`\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3067\u304d\u307e\u3059\uff0e**\n\n```\nimport theano.ifelse\ndef symbolf(x):\n    return theano.ifelse.ifelse(T.gt(x,0), x%3, (-x+1)%3)\ndef crazy_modulo3(value):\n    return symbolf(value)\n```\n\u3053\u3053\u306f\u5c11\u3057\u30cf\u30de\u3063\u305f\u306e\u3067\u89e3\u8aac\u3057\u307e\u3059\uff0e\n\n\u4f8b\u3048\u3070\uff0cifelse\u3092\u4f7f\u308f\u305a\u30ca\u30a4\u30fc\u30d6\u306b\n\n```\ndef crazy_modulo3(value):\n    if value > 0:\n        return value % 3\n    else :\n        return (-value + 1) % 3\n```\n\u3068\u3059\u308b\u3068\uff0c`value > 0`\u3068\u3044\u3046\u6bd4\u8f03\u304c\u51fa\u6765\u306a\u3044\u3068\u6012\u3089\u308c\u307e\u3059\uff0e\u307e\u305f\uff0c\n\n```\ndef crazy_modulo3(value):\n    if T.lt(0,value):\n        return value % 3\n    else :\n        return (-value + 1) % 3\n```\n\u3068\u3059\u308b\u3068\uff0c\u30a8\u30e9\u30fc\u306f\u51fa\u306a\u3044\u306e\u3067\u3059\u304c\uff0c\u5024\u3092trace\u3057\u3066\u307f\u308b\u3068`T.lt(0,value)`\u304cFalse\u306b\u306a\u3089\u306a\u3044\uff08Theano has no boolean dtype. Instead, all boolean tensors are represented in 'int8'. -- http://deeplearning.net/software/theano/library/tensor/basic.html \uff09\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\u305d\u306e\u305f\u3081\uff0cifelse\u3092\u4f7f\u3063\u3066\u7121\u7406\u77e2\u7406\u6bd4\u8f03\u3057\u3066\u3044\u307e\u3059\uff0e\u3053\u306e\u8fba\u304c\u3061\u3087\u3063\u3068theano\u306e\u3064\u3089\u3044\u3068\u3053\u308d\u3067\u3059\u304c\uff0c\u3053\u308c\u3067\u4e00\u5fdc`@as_op`\u3092\u4f7f\u308f\u305a\u306b\u95a2\u6570\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3057\u305f\uff0e\n\n###2.2 deterministic\u306a\u5909\u6570\u3092traceplot\u3059\u308b\u65b9\u6cd5\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3067deterministic\u306a\u5909\u6570b\u3092\u5b9a\u7fa9\u3057\u305f\u306f\u3044\u3044\u3082\u306e\u306e\uff0c\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306b\u306f\u305d\u306e\u5f8c\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u66f8\u3044\u3066\u3044\u307e\u305b\u3093\uff0e\u305d\u3053\u3067\u8a66\u3057\u306b\n\n```\nwith model_deterministic:\n    trace = pm.sample(500)\npm.traceplot(trace)\n```\n\u3068\u3057\u3066\u307f\u308b\u3068\uff0c\u5909\u6570a\u306e\u5024\u3057\u304bplot\u3055\u308c\u307e\u305b\u3093\uff0e\u81ea\u5206\u306f\u5909\u6570b\u306b\u3082\u8208\u5473\u304c\u3042\u3063\u305f\u306e\u3067\uff0cpm.\u306e\u4e2d\u8eab\u3092\u773a\u3081\u3066\u307f\u308b\u3068\uff0c`pm.Deterministic( )`\u3068\u3044\u3046\u305d\u308c\u3063\u307d\u3044\u3082\u306e\u3092\u767a\u898b\u3057\u307e\u3057\u305f\uff0e\u3042\u3068\u306f\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\u3067\n`b = crazy_modulo3(a)`\n\u3092\n`b = pm.Deterministic(\"b\",crazy_modulo3(a))`\n\u306b\u5909\u3048\u3066\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b\u3068\uff0cb\u306e\u5024\u304c\u6b63\u3057\u304fplot\u3055\u308c\u308b\u306f\u305a\u3067\u3059\uff0e\n\n###2.3 as_op\u3092\u30e9\u30f3\u30c0\u30e0\u5909\u6570\u306e\u8a08\u7b97\u306b\u4f7f\u3046\u306e\u306f\u907f\u3051\u308b\u3079\u304d\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306eArbitrary distributions\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\uff0c\u81ea\u5206\u3067\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u305f\u3044\u78ba\u7387\u5206\u5e03\u3092\u5b9a\u7fa9\u3059\u308b\u65b9\u6cd5\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\uff0e\n\n```\nwith pm.Model() as model1:\n    alpha = pm.Uniform('intercept', -100, 100)\n    # Create custom densities\n    beta = pm.DensityDist('beta', lambda value: -1.5 * T.log(1 + value**2), testval=0)\n    eps = pm.DensityDist('eps', lambda value: -T.log(T.abs_(value)), testval=1)\n    # Create likelihood\n    like = pm.Normal('y_est', mu=alpha + beta * X, sd=eps, observed=Y)\n```\nlambda\u5f0f\u3068`pm.DensityDist`\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3059\u308b\u3053\u306e\u65b9\u5f0f\u306f\u7279\u306b\u554f\u984c\u3042\u308a\u307e\u305b\u3093\uff0e\u7d9a\u3051\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3082\u6b63\u3057\u304f\u52d5\u304d\u307e\u3059\uff0e\n\n```\nwith model1:\n    trace = pm.sample(500)\npm.traceplot(trace)\n```\n\n\u3053\u308c\u3068\u540c\u69d8\u306e\u610f\u5473\u3092\u6301\u3064\u30b3\u30fc\u30c9\u3068\u3057\u3066\uff0c\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\uff0c\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u4ee5\u4e0b\u306e\u65b9\u5f0f\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\uff08**\u3059\u3050\u5f8c\u3067\u3053\u306e\u30b3\u30fc\u30c9\u306b\u8aa4\u308a\u304c\u3042\u308a\u305d\u3046\u306a\u3053\u3068\u3092\u6307\u6458\u3057\u307e\u3059**\uff09\uff0e\u3053\u308c\u3060\u3068\uff0clambda\u5f0f\u3092\u4f7f\u308f\u306a\u3044\u306e\u3067\uff0c\u95a2\u6570\u304c\u66f8\u304d\u3084\u3059\u304f\u306a\u308b\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308b\u3088\u3046\u306b\u601d\u308f\u308c\u307e\u3059\uff0e\u306a\u304a\uff0cbeta\u4ee5\u5916\u306f\u4e0a\u306emodel1\u3068\u540c\u3058\u5f62\u306b\u306a\u308b\u3088\u3046\u79c1\u304c\u4ed8\u3051\u52a0\u3048\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\uff0e\n\n```\nclass Beta(pm.distributions.Continuous):\n    def __init__(self, mu, *args, **kwargs):\n        super(Beta, self).__init__(*args, **kwargs)\n        self.mu = mu\n        self.mode = mu\n\n    def logp(self, value):\n        mu = self.mu\n        return beta_logp(value - mu)\n\n@as_op(itypes=[T.dscalar], otypes=[T.dscalar])\ndef beta_logp(value):\n    return -1.5 * np.log(1 + (value)**2)\n\nwith pm.Model() as model2:\n    beta = Beta('slope', mu=0, testval=0)\n\n    #I add other parameters to follow model1 above\n    alpha = pm.Uniform('intercept', -100, 100)\n    eps = pm.DensityDist('eps', lambda value: -T.log(T.abs_(value)), testval=1)\n    like = pm.Normal('y_est', mu=alpha + beta * X, sd=eps, observed=Y)\n```\nbeta\u306e\u8a08\u7b97\u306b\u4f8b\u306e`@as_op`\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\uff0e\u5148\u307b\u3069\u306edeterministic\u306a\u5909\u6570\u306e\u8a08\u7b97\u306b\u3053\u308c\u3092\u4f7f\u3063\u305f\u3068\u304d\u306f\uff0c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3082\u554f\u984c\u306a\u304f\u52d5\u304d\u307e\u3057\u305f\u304c\uff0c\u4eca\u56de\u306f\u3069\u3046\u3067\u3057\u3087\u3046\u304b\uff1f\n\n```\nwith model2:\n    trace = pm.sample(100)\npm.traceplot(trace)\n```\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\uff0c\u304a\u305d\u3089\u304f\u2193\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3068\u601d\u3044\u307e\u3059\uff0e\n`AttributeError: 'FromFunctionOp' object has no attribute 'grad'`\n\n\n\u3069\u3046\u3082\uff0c**`@as_op`\u306b\u3088\u3063\u3066\u6301\u3063\u3066\u304d\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\uff0cMCMC\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u5fc5\u8981\u306a\u52fe\u914d\u8a08\u7b97\u306e\u5c5e\u6027grad\u3092\u6301\u3063\u3066\u3044\u306a\u3044**\uff0c\u3068\u3044\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u601d\u3048\u307e\u3059\uff0edeterministic\u306a\u5909\u6570\u3067\u306f\u52fe\u914d\u8a08\u7b97\u3057\u306a\u3044\u306e\u3067\u30aa\u30c3\u30b1\u30fc\u3060\u3063\u305f\u3093\u3067\u3057\u3087\u3046\u304b\uff0e\u3053\u306e\u8fba\u3092\u304a\u3082\u3080\u308d\u306b\u30b0\u30b0\u3063\u3066\u307f\u308b\u3068\uff0c\u5049\u3044\u4eba\u306b\u3088\u308b\u300c\u5bfe\u51e6\u6cd5\u306f\u308f\u304b\u3089\u306a\u3044\u300d\u3068\u3044\u3063\u305f\u56de\u7b54\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\uff0e\n\n>\nThe only way to get the automatic gradient computation is by expressing your density in terms of theano operators. as_op creates a blackbox function for which autodiff will not work so there is no way I know of (except numerical differentiation) to make this work.\n https://github.com/pymc-devs/pymc3/issues/601\n\n\u3057\u304b\u3057\uff0c\u3053\u3053\u30672.1\u306e\u7d50\u679c\u304c\u3044\u304d\u307e\u3059\uff0e\u3064\u307e\u308a\uff0c`@as_op`\u304c\u60aa\u3055\u3092\u3057\u3066\u3044\u308b\u306a\u3089\u305d\u3082\u305d\u3082`@as_op`\u306a\u3057\u3067\u5b9a\u7fa9\u3059\u308c\u3070\u3044\u3044\u306e\u3067\u306f\uff1f\u3068\u3044\u3046\u8a71\u3067\u3059\uff0e\u305d\u3053\u3067\uff0c\n\n```\n@as_op(itypes=[T.dscalar], otypes=[T.dscalar])\ndef beta_logp(value):\n    return -1.5 * np.log(1 + (value)**2)\n```\n\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u5909\u3048\u307e\u3059\uff0e\n\n```\ndef beta_logp(value):\n    return -1.5 * T.log(1 + (value)**2)\n```\n\n2.1\u3068\u540c\u3058\u3088\u3046\u306b\uff0ctheano.tensor\u578b\u306e\u5909\u6570\u3092\u6271\u3046\u969b\u306e\u30eb\u30fc\u30eb\u306b\u6ce8\u610f\u3059\u308c\u3070\uff08\u4eca\u56de\u3060\u3068\uff0cnp.log\u3067\u306f\u306a\u304fT.log\u306b\u3059\u308b\uff09\u7121\u4e8b\u8a08\u7b97\u3067\u304d\u307e\u3059\uff0e\u7d50\u679c\u3082\u6982\u306d\u540c\u3058\u306b\u306a\u308a\u307e\u3057\u305f\uff08\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306a\u306e\u3067\u30d6\u30ec\u306f\u3042\u308a\u307e\u3059\u304c\uff09\uff0e\n\n**\u7d50\u8ad6\u3068\u3057\u3066\u306f\uff0c\u81ea\u4f5c\u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3068\u304d\u306f\uff0clambda\u5f0f\u3092\u4f7f\u304a\u3046\u304c\u4f7f\u308f\u307e\u3044\u304c\uff0ctheano\u306e\u6587\u6cd5\u306b\u6ce8\u610f\u3057\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff0c\u3068\u3044\u3046\u3053\u3068\u304c\u8a00\u3048\u305d\u3046\u3067\u3059\uff0e**\n\n##3. glm\u3067\u306e\u901f\u5ea6\u3068\u6027\u80fd\n\u6700\u5f8c\u306b\uff0c\u4e00\u822c\u5316\u7dda\u5f62\u30e2\u30c7\u30eb(glm)\u306e\u8a08\u7b97\u3092\u884c\u3046\u3068\u304d\u306e\u901f\u5ea6\u3068\u6027\u80fd\u306e\u8a71\u3092\u3057\u307e\u3059\uff0e \u8a73\u7d30\u306f https://github.com/pymc-devs/pymc3/issues/544 \u306b\u3042\u308a\u307e\u3059\u304c\uff0c\u300c\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u3068\u3057\u3070\u3057\u3070NUTS\u304c\u9045\u3044\u300d\u300cMetropolis\u306f\u901f\u3044\u300d\u300c\u30c7\u30fc\u30bf\u3084\u30de\u30b7\u30f3\u306e\u30bf\u30a4\u30d7\u306b\u3088\u3063\u3066\u306f\uff0cHamiltonianMC\u304c\u901f\u3044\u3068\u304d\u3082\u3042\u308b\u300d\u3068\u3044\u3063\u305f\u8a71\u304c\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u53c2\u8003\u307e\u3067\u306b\uff0c\u81ea\u5206\u306e\u74b0\u5883\u3067\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u30c7\u30fc\u30bf\u3092glm\uff08\u666e\u901a\u306e\u7dda\u5f62\u56de\u5e30\uff09\u306b\u304b\u3051\u3066\u307f\u307e\u3057\u305f\uff0e\n\n```\nimport pandas as pd\ndf = pd.DataFrame({'x1': X1, 'x2': X2, 'y': Y})\nwith pm.Model() as model:\n    pm.glm.glm('y ~ x1+x2', df)\n    start = pm.find_MAP(fmin=optimize.fmin_powell)\n    step = pm.HamiltonianMC()\n    trace = pm.sample(1000, start=start, step=step)\npm.traceplot(trace)\n```\n\n\u30fbHamiltonianMC\uff1a1.7\u79d2\u3067\u7d42\u4e86\uff0e\u53ce\u675f\u3082\u307e\u3042\u307e\u3042\uff0e\uff08\u56f31\uff09\n\u30fbMetropolis\uff1a0.3\u79d2\u3067\u7d42\u4e86\uff0e\u53ce\u675f\u306f\u30c0\u30e1\u30c0\u30e1\uff0e\n\u30fbNUTS\uff1a5\u5206\u7d4c\u3063\u3066\u30828\u500b\u3057\u304b\u30b5\u30f3\u30d7\u30eb\u3067\u304d\u3066\u306a\u3044\uff0c\u9045\u3059\u304e\u308b\n\u30fb\u672c\u8a18\u4e8b1.\u3067\u884c\u3063\u305f\uff0cpm.glm\u30af\u30e9\u30b9\u3092\u4f7f\u308f\u306a\u3044\u624b\u66f8\u304d\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\uff1a3.2\u79d2\u3067\u7d42\u4e86\uff0eHamiltonianMC\u306b\u306f\u53ce\u675f\u306f\u52a3\u308b\u304c\uff0c\u305d\u308c\u307b\u3069\u60aa\u304f\u306a\u3044\uff0e\uff08\u56f32\uff09\n\n\u771f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\uff1a`alpha=1,beta[0]=1,beta[1]=2.5,sigma=1`\n\uff08\u56f31\uff09\n<img width=\"629\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-11-08 2.58.45.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/58269/bc4ccc3a-0038-304c-fdf0-7bbe0152494d.png\">\n\n\uff08\u56f32\uff1abeta\u306e\u9752\u7dda\u304cX1\u306e\u56de\u5e30\u4fc2\u6570\uff0c\u7dd1\u7dda\u304cX2\u306e\u56de\u5e30\u4fc2\u6570\uff0csigma\u304csd\u306b\u305d\u308c\u305e\u308c\u5bfe\u5fdc\uff09\n<img width=\"628\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-11-08 2.58.57.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/58269/04c33f37-b25f-011f-8428-27e349ae25a8.png\">\n\n\n\n\u3068\u3044\u3046\u7d50\u679c\u3067\u3057\u305f\uff0e\u3061\u306a\u307f\u306b\uff0cNUTS\u3092\u9014\u4e2d\u3067\u6253\u3061\u5207\u3063\u3066plot\u3057\u3066\u307f\u308b\u3068\uff0c\u3069\u3046\u3082\u30d1\u30e9\u30e1\u30fc\u30bf\u306escaling\u304c\u304a\u304b\u3057\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\uff0e\u3053\u306e\u5834\u5408\u306e\u89e3\u6c7a\u6cd5\u3068\u3057\u3066\uff0c\u4e0a\u306eissue\u30da\u30fc\u30b8\u306b\u306f\n\n```\nC = pm.approx_hessian(model.test_point)\nstep = pm.NUTS(scaling=C)\n```\n\u3068\u3059\u308c\u3070\u901f\u5ea6\u304c\u51fa\u308b\u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\uff0eSphinx\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092update\u3057\u3066\uff08\u5165\u3063\u3066\u306a\u3044\u4eba\u306fpip\u3067install\u3057\u3066\u4e0b\u3055\u3044\uff09\u4e0a\u306e2\u884c\u3092\u7121\u5fc3\u3067\u6253\u3061\u8fbc\u3093\u3060\u3068\u3053\u308d\uff0cleading minor\u304c\u6b63\u5b9a\u5024\u3058\u3083\u306a\u3044\u306e\u3067\u8a08\u7b97\u3067\u304d\u307e\u305b\u3093\u3068\u8a00\u308f\u308c\u307e\u3057\u305f\uff0e\n`LinAlgError: 2-th leading minor not positive definite`\n\n\n\u3053\u308c\u306f\u3061\u3087\u3063\u3068\u89e3\u6c7a\u3067\u304d\u305d\u3046\u306b\u306a\u3044\u306e\u3067\u30b9\u30eb\u30fc\u3057\u307e\u3057\u305f\u304c\uff0c\u95a2\u9023\u3059\u308b\u8b70\u8ad6\u306f\u3053\u3061\u3089\u306b\u3042\u308a\u305d\u3046\u3067\u3059\u2192 https://github.com/scikit-learn/scikit-learn/issues/2640\n\n\u500b\u4eba\u7684\u306a\u611f\u60f3\u3068\u3057\u3066\u306f\uff0c**\u5358\u306bglm\u3092\u4f7f\u3044\u305f\u3044\u306a\u3089\uff0capprox_hessian\u3092scaling\u306b\u4f7f\u3063\u305fNUTS\u306b\u3088\u308bglm\u3092\u8a66\u3057\u3066\u307f\u3066\uff0c\u30c0\u30e1\u3060\u3063\u305f\u3089HMC\u306b\u3088\u308bglm\u3092\u8a66\u3057\u3066\u307f\u308b\u306e\u304c\u3088\u3055\u305d\u3046\u3067\u3059\uff0e**\n\n\u307e\u305f\uff0c1.\u306e\u4f8b\u3067\u66f8\u3044\u305f\u3088\u3046\u306apm.glm\u30af\u30e9\u30b9\u3092\u4f7f\u308f\u306a\u3044\u65b9\u6cd5\u3082\uff0cprior\u3092\u3046\u307e\u304f\u8a2d\u5b9a\u3059\u308b\u306a\u3069\u5de5\u592b\u3059\u308c\u3070\u6027\u80fd\u304c\u4e0a\u304c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3057\uff0c\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6319\u52d5\u3092\u898b\u305f\u3044\u5834\u5408\u3084\u3082\u3063\u3068\u8907\u96d1\u306a\u968e\u5c64\u30d9\u30a4\u30ba\u30e2\u30c7\u30eb\u3092\u4f7f\u3044\u305f\u3044\u3068\u304d\u306a\u3069\u306f\uff0cpm.glm\u3092\u4f7f\u308f\u305a\u306b\u3053\u3061\u3089\u3092\u63a1\u7528\u3059\u308c\u3070\u3088\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3057\u305f\uff0e\n\n#\u6700\u5f8c\u306b\n\u81ea\u5206\u306e\u30e1\u30e2\u304c\u3066\u3089\u30c0\u30e9\u30c0\u30e9\u9577\u304f\u66f8\u304d\u307e\u3057\u305f\u304c\uff0c\u30cf\u30de\u308a\u305d\u3046\u306a\u3068\u3053\u308d\u306e\u53c2\u8003\u306b\u5c11\u3057\u3067\u3082\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\uff0e`@as_op`\u306e\u3068\u3053\u308d\u306f\uff0c\u81ea\u5206\u3067theano\u5074\u306egrad\u3092\u5b9a\u7fa9\u3057\u76f4\u305d\u3046\u3068\u3057\u3066\u4e00\u6669\u3092\u7121\u99c4\u306b\u3059\u308b\u306a\u3069\u306a\u304b\u306a\u304b\u3064\u3089\u3044\u3082\u306e\u304c\u3042\u308a\u307e\u3057\u305f\uff0e\n\n\u3042\u3068\uff0c\u516c\u5f0f\u30da\u30fc\u30b8\u306f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3088\u308aExamples\u306e\u65b9\u304c\u9762\u767d\u305d\u3046\u306a\uff08Probabilistic Matrix Factorization\u3068\u304bSurvival Analysis\u3068\u304b\uff09\u4e88\u611f\u304c\u3059\u308b\u306e\u3067\uff0c\u307e\u305f\u6df1\u591c\u306e\u6c17\u304c\u5411\u3044\u305f\u3068\u304d\u306b\u8a66\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\uff0e\n\n\u203b grad\u306e\u5b9a\u7fa9\u306fhttp://deeplearning.net/software/theano/extending/op.html \u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\uff0e\u5143\u3005\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308bT.grad\u3092theano.function\u3067\u4f5c\u308c\u308b\u95a2\u6570\u3068\u307f\u305f\u3068\u304d\u306e\u5165\u529b\u306f\u30ea\u30b9\u30c8\u306e\u3088\u3046\u306b\u601d\u3048\u308b\u306e\u3067\u3059\u304c\uff0c\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u901a\u308a\u306b\u3084\u308b\u3068\uff0c\u5165\u529b\u304c\u30ea\u30b9\u30c8\u3068\u306a\u308b\u95a2\u6570\u304c\u5b9a\u7fa9\u3067\u304d\u305a\u306b\u65ad\u5ff5\u3057\u307e\u3057\u305f\uff0e\n\n\u9069\u5b9c\u8ffd\u8a18\u3057\u307e\u3059\uff0e\n", "tags": ["Python", "Theano", "MCMC", "PyMC3"]}