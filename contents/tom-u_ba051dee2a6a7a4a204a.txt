{"context": "\nDoShellScript.swift\n#!/usr/bin/env swift\n\nimport Cocoa\n\nguard let pathToMe = URL(string: \"\\(#file)\", relativeTo: URL(fileURLWithPath: FileManager.default.currentDirectoryPath))?.path else {\n  print(\"Error: current path of #file\")\n  exit(-1)\n}\nlet __file__ = pathToMe as NSString\n\nlet scriptsPath = \"\\(__file__.deletingLastPathComponent)/DoShellScript.js\"\nlet scriptsURL = URL(fileURLWithPath: scriptsPath)\nguard let task = try? NSUserUnixTask(url: scriptsURL) else {\n  print(\"Error: task is nil\")\n  exit(-2)\n}\nlet stdout = Pipe()\nlet stderr = Pipe()\ntask.standardOutput = stdout.fileHandleForWriting\ntask.standardError = stderr.fileHandleForWriting\ntask.execute { error in\n  if let error = error {\n    print(error.localizedDescription)\n    exit(-3)\n  }\n  let outdata = stdout.fileHandleForReading.readDataToEndOfFile()\n  let errdata = stderr.fileHandleForReading.readDataToEndOfFile()\n  stdout.fileHandleForReading.closeFile()\n  stderr.fileHandleForReading.closeFile()\n  let out = (String(data: outdata, encoding: .utf8) ?? \"\").trimmingCharacters(in: .whitespacesAndNewlines)\n  let err = (String(data: errdata, encoding: .utf8) ?? \"\").trimmingCharacters(in: .whitespacesAndNewlines)\n  print(\"stdout:\\n\\(out)\")\n  print(\"stderr:\\n\\(err)\")\n  NSApplication.shared().terminate(nil)\n}\nNSApplication.shared().run()\n\n\n\nDoShellScript.js\n#!/usr/bin/osascript\ndelay(3) //\u6b6f\u8eca\u30a2\u30a4\u30b3\u30f3\u78ba\u8a8d\u7528\nApp = Application.currentApplication()\nApp.includeStandardAdditions = true\nApp.doShellScript('ls ~/', {alteringLineEndings:false})\n\n\nDoShellScript.swift \u3068 DoShellScript.js \u3092\u540c\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u7f6e\u304d\u5b9f\u884c\u3002\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n$ DoShellScript.swift \nstdout:\nApplications\nDesktop\nDocuments\nDownloads\nLibrary\nMovies\nMusic\nPictures\nProjects\nPublic\nSites\nstderr:\n\n```swift:DoShellScript.swift\n#!/usr/bin/env swift\n\nimport Cocoa\n\nguard let pathToMe = URL(string: \"\\(#file)\", relativeTo: URL(fileURLWithPath: FileManager.default.currentDirectoryPath))?.path else {\n  print(\"Error: current path of #file\")\n  exit(-1)\n}\nlet __file__ = pathToMe as NSString\n\nlet scriptsPath = \"\\(__file__.deletingLastPathComponent)/DoShellScript.js\"\nlet scriptsURL = URL(fileURLWithPath: scriptsPath)\nguard let task = try? NSUserUnixTask(url: scriptsURL) else {\n  print(\"Error: task is nil\")\n  exit(-2)\n}\nlet stdout = Pipe()\nlet stderr = Pipe()\ntask.standardOutput = stdout.fileHandleForWriting\ntask.standardError = stderr.fileHandleForWriting\ntask.execute { error in\n  if let error = error {\n    print(error.localizedDescription)\n    exit(-3)\n  }\n  let outdata = stdout.fileHandleForReading.readDataToEndOfFile()\n  let errdata = stderr.fileHandleForReading.readDataToEndOfFile()\n  stdout.fileHandleForReading.closeFile()\n  stderr.fileHandleForReading.closeFile()\n  let out = (String(data: outdata, encoding: .utf8) ?? \"\").trimmingCharacters(in: .whitespacesAndNewlines)\n  let err = (String(data: errdata, encoding: .utf8) ?? \"\").trimmingCharacters(in: .whitespacesAndNewlines)\n  print(\"stdout:\\n\\(out)\")\n  print(\"stderr:\\n\\(err)\")\n  NSApplication.shared().terminate(nil)\n}\nNSApplication.shared().run()\n```\n\n```js:DoShellScript.js\n#!/usr/bin/osascript\ndelay(3) //\u6b6f\u8eca\u30a2\u30a4\u30b3\u30f3\u78ba\u8a8d\u7528\nApp = Application.currentApplication()\nApp.includeStandardAdditions = true\nApp.doShellScript('ls ~/', {alteringLineEndings:false})\n```\n\nDoShellScript.swift \u3068 DoShellScript.js \u3092\u540c\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u7f6e\u304d\u5b9f\u884c\u3002\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n```\n$ DoShellScript.swift \nstdout:\nApplications\nDesktop\nDocuments\nDownloads\nLibrary\nMovies\nMusic\nPictures\nProjects\nPublic\nSites\nstderr:\n```\n", "tags": ["Swift", "jXA"]}