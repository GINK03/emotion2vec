{"tags": ["C#", ".NETFramework"], "context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306fC# Advent Calendar 2015\u306e13\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u30cd\u30bf\u5143\nC# Advent Calendar 2015 5\u65e5\u76ee - C#\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3067\u3067\u304d\u306a\u3044\u3053\u3068\n\u672a\u78ba\u8a8d\u98db\u884cC\n\u3061\u3087\u3046\u3069\u8208\u5473\u6df1\u3044\u5185\u5bb9\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u300c\u305d\u3046\u3044\u3048\u3070\u3001\u56f0\u3063\u305f\u3053\u3068\u304c\u3042\u3063\u305f\u306a\u3041\u3002\u3067\u3082\u4f55\u3068\u304b\u51fa\u6765\u305f\u304b\u3082\u3002\u300d\u3068\u3044\u3046\u5185\u5bb9\u3067Advent Calendar\u3092\u4e57\u308a\u5207\u308d\u3046\u3068\u601d\u3044\u307e\u3059\u3002\nSize<T>\u3068\u3044\u3046\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u3092\u4f5c\u3063\u3066Size<T> + Size<T>\u7b49\u306e\u6f14\u7b97\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002Size\u3092\u306a\u305c\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306b\u3059\u308b\u304b\u3063\u3066\uff1f\u6d6e\u52d5\u5c0f\u6570\u70b9\u306b\u5bfe\u5fdc\u3057\u305f\u3044\u3068\u304b\u3001\u81ea\u7136\u6570\u306b\u5236\u9650\u3057\u305f\u3044\u3068\u304b\u3001\u8272\u3005\u4e8b\u60c5\u304c\u3042\u3063\u305f\u306e\u3067\u3059\u3002\u3042\u3068\u3001\u305d\u308c\u304c\u51fa\u6765\u305f\u3089\u3061\u3087\u3063\u3068\u304b\u3063\u3053\u3044\u3044\u304b\u306a\u3063\u3066\u601d\u3063\u305f\u306e\u3082\u3061\u3087\u3063\u3074\u308a\u3042\u308a\u307e\u3057\u305f\u3002\n\u5b9f\u969b\u306b\u3001Size<T>\u578b\u306ea,b,c\u306b\u5bfe\u3057\u3066c=a+b\u3092\u3084\u308b\u969b\u306b\u3001\u5185\u90e8\u7684\u306b\u306f\u3001c.Width = a.Width + b.Width\u306e\u3088\u3046\u306a\u6f14\u7b97\u3092\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u6642Width\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u578b\u306a\u306e\u3067\u666e\u901a\u306e\u8db3\u3057\u7b97\u304c\u51fa\u6765\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u3001\u5f0f\u6728\u3092\u7528\u3044\u308b\u3068\u305d\u306e\u578b\u306e\u6f14\u7b97\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u3053\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u304c\u30df\u30bd\u3067\u3059\u3002\n\nExpressionUtility.cs\n/// <summary>\n/// \u6f14\u7b97\u5b50\u306e\u53c2\u7167\u3092\u53d6\u5f97\u3059\u308b\u30af\u30e9\u30b9\n/// \u540c\u3058\u578b\u540c\u58eb\u306e\u6f14\u7b97\n/// </summary>\n/// <typeparam name=\"T\">\u6f14\u7b97\u3059\u308b\u578b</typeparam>\npublic static class Operator<T>\n{\n    /// <summary>\n    /// \u52a0\u7b97\n    /// </summary>\n    public static readonly Func<T, T, T> Add = GetLambda(Expression.Add);\n    /// <summary>\n    /// \u6e1b\u7b97\n    /// </summary>\n    public static readonly Func<T, T, T> Subtract = GetLambda(Expression.Subtract);\n    /// <summary>\n    /// \u7a4d\u7b97\n    /// </summary>\n    public static readonly Func<T, T, T> Multiply = GetLambda(Expression.Multiply);\n    /// <summary>\n    /// \u9664\u7b97\n    /// </summary>\n    public static readonly Func<T, T, T> Divide = GetLambda(Expression.Divide);\n    /// <summary>\n    /// \u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    /// </summary>\n    public static readonly Func<T, T> Increment = GetLambda(Expression.Increment);\n    /// <summary>\n    /// \u30c7\u30af\u30ea\u30e1\u30f3\u30c8\n    /// </summary>\n    public static readonly Func<T, T> Decrement = GetLambda(Expression.Decrement);\n\n    /// <summary>\n    /// \u5165\u529b1\u3001\u51fa\u529b1\u306e\u6f14\u7b97\u5b50\u30e9\u30e0\u30c0\u5f0f\u3092\u53d6\u5f97\u3059\u308b\n    /// </summary>\n    /// <param name=\"ex\">\u6f14\u7b97\u5b50\u306eExpression</param>\n    /// <returns>\u30e9\u30e0\u30c0\u5f0f</returns>\n    private static Func<T, T> GetLambda(Func<ParameterExpression, UnaryExpression> ex)\n    {\n        var x      = Expression.Parameter(type: typeof(T)); // \u5f15\u6570 x \u306e\u5f0f\n        return Expression.Lambda<Func<T, T>>\n            (ex(x), x)\n            .Compile();\n    }\n\n    /// <summary>\n    /// \u5165\u529b2\u3001\u51fa\u529b1\u306e\u6f14\u7b97\u5b50\u30e9\u30e0\u30c0\u5f0f\u3092\u53d6\u5f97\u3059\u308b\n    /// </summary>\n    /// <param name=\"ex\">\u6f14\u7b97\u5b50\u306eExpression</param>\n    /// <returns>\u30e9\u30e0\u30c0\u5f0f</returns>\n    private static Func<T, T, T> GetLambda(Func<ParameterExpression, ParameterExpression, BinaryExpression> ex)\n    {\n        var x = Expression.Parameter(type: typeof(T));\n        var y = Expression.Parameter(type: typeof(T));\n        return Expression.Lambda<Func<T, T, T>>\n            (ex(x, y), x, y)\n            .Compile();\n    }\n}\n\n\n\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u305f\u3068\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u66f8\u3051\u307e\u3059\u3002\n\nSize.cs\n\nstruct GenericSize<T> : where T : struct\n{\n    private T width;\n\n    /// <summary>\n    /// \u5e45\n    /// </summary>\n    public T Width\n    {\n        get { return width; }\n        set { width = value; }\n    }\n\n    private T height;\n\n    /// <summary>\n    /// \u9ad8\u3055\n    /// </summary>\n    public T Height\n    {\n        get { return height; }\n        set { height = value; }\n    }\n\n    /// <summary>\n    /// \u5404\u5ea7\u6a19\u3092\u52a0\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a191</param>\n    /// <param name=\"size2\">\u5ea7\u6a192</param>\n    /// <returns>\u52a0\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static VSize<T> operator+ (VSize<T> size1, VSize<T> size2)\n    {\n        var add = Operator<T>.Add;\n        return new VSize<T>(add(size1.Width, size2.Width), add(size1.Height, size2.Height));\n    }\n}\n\n\n\n\u3053\u308c\u3067\u3001Size<int>\u3067\u3082\u3001Size<double>\u3067\u3082\u3001Size<uint>\u3067\u3082\u4e00\u3064\u306e\u69cb\u9020\u4f53\u3067\u8868\u73fe\u3067\u304d\u307e\u3059\u3002\u3082\u3057\u3001Size<int>\u306b\u5bfe\u3057\u3066\u306e\u307fSystem.Drawing.Size\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3088\u3046\u306a\u72ec\u81ea\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u5225\u306e\u30af\u30e9\u30b9\u3067\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3059\u308c\u3070\u826f\u3044\u3067\u3059\u3002\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30af\u30e9\u30b9\u306b\u306f\u3042\u304f\u307e\u3067\u6c4e\u7528\u7684\u306a\u3082\u306e\u3060\u3051\u5165\u308c\u307e\u3059\u3002\n\n\u51e6\u7406\u901f\u5ea6\u6bd4\u8f03\n\nProgram.cs\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            const int loop = 1000000;\n\n            // \u666e\u901a\u306eSize\n            Size sizeNorm = new Size(1, 1);\n\n            Stopwatch swNorm = new Stopwatch();\n            swNorm.Start();\n            for(int i = 0; i < loop; i++)\n            {\n                sizeNorm = sizeNorm + sizeNorm - 1;\n            }\n            swNorm.Stop();\n\n            // \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\n            Size<int> sizeGen = new Size<int>(1, 1);\n\n            Stopwatch swGen = new Stopwatch();\n            swGen.Start();\n            for(int i = 0; i < loop; i++)\n            {\n                sizeGen = sizeGen + sizeGen - 1;\n            }\n            swGen.Stop();\n\n            // \u51fa\u529b\n            Console.WriteLine(\"loop : {0}\", loop);\n            Console.WriteLine(\"Normal  Size      : {0} msec.\", swNorm.ElapsedMilliseconds);\n            Console.WriteLine(\"Generic Size<int> : {0} msec.\", swGen.ElapsedMilliseconds);\n\n            Console.WriteLine(\"Result\");\n            Console.WriteLine(\"Normal  Size      : {0}\", sizeNorm.ToString());\n            Console.WriteLine(\"Generic Size<int> : {0}\", sizeGen.ToString());\n        }\n    }\n\n\nloop : 1000000\nNormal  Size      : 179 msec.\nGeneric Size<int> : 184 msec.\nResult\nNormal  Size      : 1,1\nGeneric Size<int> : 1,1\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306e\u65b9\u304c3%\u7a0b\u5ea6\u9045\u3044\u3067\u3059\u304c\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u578b\u3092\u8272\u3005\u5909\u3048\u305f\u3044\u5834\u5408\u306f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u3092\u4f7f\u3046\u306e\u3082\u3042\u308a\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u3082\u3063\u3068\u8907\u96d1\u306a\u6f14\u7b97\u3092\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u901f\u5ea6\u306f\u66f4\u306b\u901f\u5ea6\u304c\u843d\u3061\u308b\u3068\u306f\u601d\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001struct\u3092class\u306b\u3059\u308c\u3070\u30af\u30e9\u30b9\u3068\u3057\u3066\u3082\u5b9f\u884c\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u3001\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306e\u65b9\u304c\u7d0440%\u9045\u3044\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nloop : 1000000\nNormal  Size      : 199 msec.\nGeneric Size<int> : 275 msec.\nResult\nNormal  Size      : 1,1\nGeneric Size<int> : 1,1\n\n\n\u30b3\u30fc\u30c9\u5168\u4f53\nExpressionUtility\u306f\u4e0a\u3092\u53c2\u7167\u3002\n\nGenericSize.cs\n/// <summary>\n/// 2\u6b21\u5143\u30b5\u30a4\u30ba\u69cb\u9020\u4f53\n/// </summary>\n/// <typeparam name=\"T\">\u8981\u7d20\u306e\u578b</typeparam>\npublic struct Size<T> : IEquatable<Size<T>> where T : struct, IComparable\n{\n    #region \u30d7\u30ed\u30d1\u30c6\u30a3\n\n    private T width;\n\n    /// <summary>\n    /// \u5e45\n    /// </summary>\n    public T Width\n    {\n        get { return width; }\n        set { width = value; }\n    }\n\n    private T height;\n\n    /// <summary>\n    /// \u9ad8\u3055\n    /// </summary>\n    public T Height\n    {\n        get { return height; }\n        set { height = value; }\n    }\n\n    /// <summary>\n    /// \u7a7a\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n    /// </summary>\n    public readonly static Size<T> Empty = new Size<T>(default(T), default(T));\n\n    /// <summary>\n    /// \u7a7a\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <returns>\u5224\u5b9a</returns>\n    public bool IsEmpty\n    {\n        get\n        {\n            return Equals(Empty);\n        }\n    }\n\n    /// <summary>\n    /// \u9762\u7a4d\n    /// </summary>\n    public T AreaSize\n    {\n        get\n        {\n            var multiply = Operator<T>.Multiply;\n            return multiply(Width, Height);\n        }\n    }\n    #endregion \u30d7\u30ed\u30d1\u30c6\u30a3\n\n    #region \u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n    /// <summary>\n    /// \u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"obj\">\u6bd4\u8f03\u5bfe\u8c61</param>\n    /// <returns>\u5224\u5b9a</returns>\n    public override bool Equals(object obj)\n    {\n        Size<T> compObj = (Size<T>)obj;\n        return Equals(compObj);\n    }\n\n    /// <summary>\n    /// \u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"obj\">\u6bd4\u8f03\u5bfe\u8c61</param>\n    /// <returns>\u5224\u5b9a</returns>\n    public bool Equals(Size<T> obj)\n    {\n        if (obj.GetHashCode() != this.GetHashCode())\n            return false;\n\n        if (obj.Width.Equals(this.Width) && obj.Height.Equals(this.Height))\n            return true;\n        else\n            return false;\n    }\n\n    /// <summary>\n    /// Equals\u304ctrue\u3092\u8fd4\u3059\u3068\u304d\u306b\u540c\u3058\u5024\u3092\u8fd4\u3059\u3002\n    /// </summary>\n    /// <returns>\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9</returns>\n    public override int GetHashCode()\n    {\n        return Convert.ToInt32(Width) ^ Convert.ToInt32(Height);\n    }\n\n    /// <summary>\n    /// \u6587\u5b57\u5217\u3092\u53d6\u5f97\u3059\u308b\u3002\n    /// </summary>\n    /// <returns>\u51fa\u529b\u6587\u5b57\u5217</returns>\n    public override string ToString()\n    {\n        return string.Format(\"{0},{1}\", this.Width, this.Height);\n    }\n\n    #endregion \u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n    #region \u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\n\n    /// <summary>\n    /// \u5404\u5ea7\u6a19\u3092\u52a0\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a191</param>\n    /// <param name=\"size2\">\u5ea7\u6a192</param>\n    /// <returns>\u52a0\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size<T> operator+ (Size<T> size1, Size<T> size2)\n    {\n        var add = Operator<T>.Add;\n        return new Size<T>(add(size1.Width, size2.Width), add(size1.Height, size2.Height));\n    }\n\n    /// <summary>\n    /// \u5ea7\u6a19\u306b\u4e00\u5b9a\u5024\u3092\u52a0\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"value\">\u52a0\u7b97\u3059\u308b\u5024</param>\n    /// <returns>\u52a0\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size<T> operator+ (Size<T> size1, T value)\n    {\n        var add = Operator<T>.Add;\n        return new Size<T>(add(size1.Width, value), add(size1.Height, value));\n    }\n\n    /// <summary>\n    /// \u5404\u5ea7\u6a19\u3092\u6e1b\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"size2\">\u6e1b\u7b97\u3059\u308b\u5ea7\u6a19</param>\n    /// <returns>\u6e1b\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size<T> operator- (Size<T> size1, Size<T> size2)\n    {\n        var subtract = Operator<T>.Subtract;\n        return new Size<T>(subtract(size1.Width, size2.Width), subtract(size1.Height, size2.Height));\n    }\n\n    /// <summary>\n    /// \u5ea7\u6a19\u306b\u4e00\u5b9a\u5024\u3092\u6e1b\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"value\">\u6e1b\u7b97\u3059\u308b\u5024</param>\n    /// <returns>\u6e1b\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size<T> operator- (Size<T> size1, T value)\n    {\n        var subtract = Operator<T>.Subtract;\n        return new Size<T>(subtract(size1.Width, value), subtract(size1.Height, value));\n    }\n\n    /// <summary>\n    /// \u5ea7\u6a19\u306b\u4e00\u5b9a\u5024\u3092\u4e57\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"value\">\u4e57\u7b97\u3059\u308b\u5ea7\u6a19</param>\n    /// <returns>\u4e57\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size<double> operator* (Size<T> size1, double value)\n    {\n        return new Size<double>(Convert.ToDouble(size1.Width) * value, Convert.ToDouble(size1.Height) * value);\n    }\n\n    /// <summary>\n    /// \u5ea7\u6a19\u306b\u4e00\u5b9a\u5024\u3092\u9664\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"value\">\u9664\u7b97\u3059\u308b\u5ea7\u6a19</param>\n    /// <returns>\u9664\u7b97\u3059\u308b\u5ea7\u6a19</returns>\n    public static Size<double> operator/ (Size<T> size1, double value)\n    {\n        return new Size<double>(Convert.ToDouble(size1.Width) / value, Convert.ToDouble(size1.Height) / value);\n    }\n\n    /// <summary>\n    /// \u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u30b5\u30a4\u30ba1</param>\n    /// <param name=\"size2\">\u30b5\u30a4\u30ba2</param>\n    /// <returns>\u5224\u5b9a</returns>\n    public static bool operator ==(Size<T> size1, Size<T> size2)\n    {\n        return size1.Equals(size2);\n    }\n\n    /// <summary>\n    /// \u4e0d\u4e00\u81f4\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u30b5\u30a4\u30ba1</param>\n    /// <param name=\"size2\">\u30b5\u30a4\u30ba2</param>\n    /// <returns>\u5224\u5b9a</returns>\n    public static bool operator !=(Size<T> size1, Size<T> size2)\n    {\n        return !(size1.Equals(size2));\n    }\n\n\n    #endregion \u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\n\n    #region \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\n    /// <summary>\n    /// \u6b63\u65b9\u5f62\u306e\u30b5\u30a4\u30ba\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u521d\u671f\u5316\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"length\">\u7e26\u6a2a\u9577\u3055</param>\n    public Size(T length)\n        : this(length, length)\n    {\n    }\n\n    /// <summary>\n    /// \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u521d\u671f\u5316\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"width\">\u5e45(column\u65b9\u5411)</param>\n    /// <param name=\"height\">\u9ad8\u3055(row\u65b9\u5411)</param>\n    public Size(T width, T height)\n    {\n        this.width = width;\n        this.height = height;\n    }\n\n    #endregion \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n}\n\n\n\nSize.cs\n/// <summary>\n/// 2\u6b21\u5143\u30b5\u30a4\u30ba\u69cb\u9020\u4f53\n/// </summary>\npublic struct Size : IEquatable<Size>, IComparable\n{\n    #region \u30d7\u30ed\u30d1\u30c6\u30a3\n\n    private int width;\n\n    /// <summary>\n    /// \u5e45\n    /// </summary>\n    public int Width\n    {\n        get { return width; }\n        set { width = value; }\n    }\n\n    private int height;\n\n    /// <summary>\n    /// \u9ad8\u3055\n    /// </summary>\n    public int Height\n    {\n        get { return height; }\n        set { height = value; }\n    }\n\n    /// <summary>\n    /// \u7a7a\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n    /// </summary>\n    public readonly static Size Empty = new Size(0, 0);\n\n    /// <summary>\n    /// \u7a7a\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <returns>\u5224\u5b9a</returns>\n    public bool IsEmpty\n    {\n        get\n        {\n            return Equals(Empty);\n        }\n    }\n\n    /// <summary>\n    /// \u9762\u7a4d\n    /// </summary>\n    public int AreaSize\n    {\n        get\n        {\n            var multiply = Operator<int>.Multiply;\n            return multiply(Width, Height);\n        }\n    }\n    #endregion \u30d7\u30ed\u30d1\u30c6\u30a3\n\n    #region \u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n    /// <summary>\n    /// \u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"obj\">\u6bd4\u8f03\u5bfe\u8c61</param>\n    /// <returns>\u5224\u5b9a</returns>\n    public override bool Equals(object obj)\n    {\n        Size compObj = (Size)obj;\n        return Equals(compObj);\n    }\n\n    /// <summary>\n    /// \u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"obj\">\u6bd4\u8f03\u5bfe\u8c61</param>\n    /// <returns>\u5224\u5b9a</returns>\n    public bool Equals(Size obj)\n    {\n        if (obj.GetHashCode() != this.GetHashCode())\n            return false;\n\n        if(obj.Width == this.Width && obj.Height == this.Height)\n            return true;\n        else\n            return false;\n    }\n\n    /// <summary>\n    /// Equals\u304ctrue\u3092\u8fd4\u3059\u3068\u304d\u306b\u540c\u3058\u5024\u3092\u8fd4\u3059\u3002\n    /// </summary>\n    /// <returns>\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9</returns>\n    public override int GetHashCode()\n    {\n        return Width ^ Height;\n    }\n\n    /// <summary>\n    /// \u6587\u5b57\u5217\u3092\u53d6\u5f97\u3059\u308b\u3002\n    /// </summary>\n    /// <returns>\u51fa\u529b\u6587\u5b57\u5217</returns>\n    public override string ToString()\n    {\n        return string.Format(\"{0},{1}\", this.Width, this.Height);\n    }\n\n    #endregion \u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n    #region \u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\n\n    /// <summary>\n    /// \u5404\u5ea7\u6a19\u3092\u52a0\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a191</param>\n    /// <param name=\"size2\">\u5ea7\u6a192</param>\n    /// <returns>\u52a0\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size operator+ (Size size1, Size size2)\n    {\n        return new Size(size1.Width + size2.Width, size1.Height + size2.Height);\n    }\n\n    /// <summary>\n    /// \u5ea7\u6a19\u306b\u4e00\u5b9a\u5024\u3092\u52a0\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"value\">\u52a0\u7b97\u3059\u308b\u5024</param>\n    /// <returns>\u52a0\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size operator+ (Size size1, int value)\n    {\n        return new Size(size1.Width + value, size1.Height + value);\n    }\n\n    /// <summary>\n    /// \u5404\u5ea7\u6a19\u3092\u6e1b\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"size2\">\u6e1b\u7b97\u3059\u308b\u5ea7\u6a19</param>\n    /// <returns>\u6e1b\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size operator- (Size size1, Size size2)\n    {\n        return new Size(size1.Width - size2.Width, size1.Height - size2.Height);\n    }\n\n    /// <summary>\n    /// \u5ea7\u6a19\u306b\u4e00\u5b9a\u5024\u3092\u6e1b\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"value\">\u6e1b\u7b97\u3059\u308b\u5024</param>\n    /// <returns>\u6e1b\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size operator- (Size size1, int value)\n    {\n        return new Size(size1.Width - value, size1.Height - value);\n    }\n\n    /// <summary>\n    /// \u5ea7\u6a19\u306b\u4e00\u5b9a\u5024\u3092\u4e57\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"value\">\u4e57\u7b97\u3059\u308b\u5ea7\u6a19</param>\n    /// <returns>\u4e57\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size operator* (Size size1, int value)\n    {\n        return new Size(size1.Width * value, size1.Height * value);\n    }\n\n    /// <summary>\n    /// \u5ea7\u6a19\u306b\u4e00\u5b9a\u5024\u3092\u9664\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"value\">\u9664\u7b97\u3059\u308b\u5ea7\u6a19</param>\n    /// <returns>\u9664\u7b97\u3059\u308b\u5ea7\u6a19</returns>\n    public static Size operator/ (Size size1, int value)\n    {\n        return new Size((int)(size1.Width / value), (int)(size1.Height / value));\n    }\n\n    /// <summary>\n    /// \u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u30b5\u30a4\u30ba1</param>\n    /// <param name=\"size2\">\u30b5\u30a4\u30ba2</param>\n    /// <returns>\u5224\u5b9a</returns>\n    public static bool operator ==(Size size1, Size size2)\n    {\n        return size1.Equals(size2);\n    }\n\n    /// <summary>\n    /// \u4e0d\u4e00\u81f4\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u30b5\u30a4\u30ba1</param>\n    /// <param name=\"size2\">\u30b5\u30a4\u30ba2</param>\n    /// <returns>\u5224\u5b9a</returns>\n    public static bool operator !=(Size size1, Size size2)\n    {\n        return !(size1.Equals(size2));\n    }\n\n\n    #endregion \u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\n\n    #region \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\n    /// <summary>\n    /// \u6b63\u65b9\u5f62\u306e\u30b5\u30a4\u30ba\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u521d\u671f\u5316\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"length\">\u7e26\u6a2a\u9577\u3055</param>\n    public Size(int length)\n        : this(length, length)\n    {\n    }\n\n    /// <summary>\n    /// \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u521d\u671f\u5316\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"width\">\u5e45(column\u65b9\u5411)</param>\n    /// <param name=\"height\">\u9ad8\u3055(row\u65b9\u5411)</param>\n    public Size(int width, int height)\n    {\n        this.width = width;\n        this.height = height;\n    }\n\n    #endregion \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n}\n\n\n\n\u3053\u306e\u8a18\u4e8b\u306f[C# Advent Calendar 2015](http://qiita.com/advent-calendar/2015/csharp)\u306e13\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n# \u30cd\u30bf\u5143\n\n[C# Advent Calendar 2015 5\u65e5\u76ee - C#\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3067\u3067\u304d\u306a\u3044\u3053\u3068](http://qiita.com/matarillo/items/25b837a419e2c82e1496)\n\n[\u672a\u78ba\u8a8d\u98db\u884cC](http://ufcpp.net/study/csharp/sm_genericop.html)\n\n\n\u3061\u3087\u3046\u3069\u8208\u5473\u6df1\u3044\u5185\u5bb9\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u300c\u305d\u3046\u3044\u3048\u3070\u3001\u56f0\u3063\u305f\u3053\u3068\u304c\u3042\u3063\u305f\u306a\u3041\u3002\u3067\u3082\u4f55\u3068\u304b\u51fa\u6765\u305f\u304b\u3082\u3002\u300d\u3068\u3044\u3046\u5185\u5bb9\u3067Advent Calendar\u3092\u4e57\u308a\u5207\u308d\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\nSize\\<T>\u3068\u3044\u3046\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u3092\u4f5c\u3063\u3066`Size<T> + Size<T>`\u7b49\u306e\u6f14\u7b97\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002Size\u3092\u306a\u305c\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306b\u3059\u308b\u304b\u3063\u3066\uff1f\u6d6e\u52d5\u5c0f\u6570\u70b9\u306b\u5bfe\u5fdc\u3057\u305f\u3044\u3068\u304b\u3001\u81ea\u7136\u6570\u306b\u5236\u9650\u3057\u305f\u3044\u3068\u304b\u3001\u8272\u3005\u4e8b\u60c5\u304c\u3042\u3063\u305f\u306e\u3067\u3059\u3002\u3042\u3068\u3001\u305d\u308c\u304c\u51fa\u6765\u305f\u3089\u3061\u3087\u3063\u3068\u304b\u3063\u3053\u3044\u3044\u304b\u306a\u3063\u3066\u601d\u3063\u305f\u306e\u3082\u3061\u3087\u3063\u3074\u308a\u3042\u308a\u307e\u3057\u305f\u3002\n\n\u5b9f\u969b\u306b\u3001Size\\<T>\u578b\u306ea,b,c\u306b\u5bfe\u3057\u3066`c=a+b`\u3092\u3084\u308b\u969b\u306b\u3001\u5185\u90e8\u7684\u306b\u306f\u3001`c.Width = a.Width + b.Width`\u306e\u3088\u3046\u306a\u6f14\u7b97\u3092\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u6642Width\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u578b\u306a\u306e\u3067\u666e\u901a\u306e\u8db3\u3057\u7b97\u304c\u51fa\u6765\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u3001\u5f0f\u6728\u3092\u7528\u3044\u308b\u3068\u305d\u306e\u578b\u306e\u6f14\u7b97\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n\n\n# \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\u3053\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u304c\u30df\u30bd\u3067\u3059\u3002\n\n```csharp:ExpressionUtility.cs\n/// <summary>\n/// \u6f14\u7b97\u5b50\u306e\u53c2\u7167\u3092\u53d6\u5f97\u3059\u308b\u30af\u30e9\u30b9\n/// \u540c\u3058\u578b\u540c\u58eb\u306e\u6f14\u7b97\n/// </summary>\n/// <typeparam name=\"T\">\u6f14\u7b97\u3059\u308b\u578b</typeparam>\npublic static class Operator<T>\n{\n    /// <summary>\n    /// \u52a0\u7b97\n    /// </summary>\n    public static readonly Func<T, T, T> Add = GetLambda(Expression.Add);\n    /// <summary>\n    /// \u6e1b\u7b97\n    /// </summary>\n    public static readonly Func<T, T, T> Subtract = GetLambda(Expression.Subtract);\n    /// <summary>\n    /// \u7a4d\u7b97\n    /// </summary>\n    public static readonly Func<T, T, T> Multiply = GetLambda(Expression.Multiply);\n    /// <summary>\n    /// \u9664\u7b97\n    /// </summary>\n    public static readonly Func<T, T, T> Divide = GetLambda(Expression.Divide);\n    /// <summary>\n    /// \u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    /// </summary>\n    public static readonly Func<T, T> Increment = GetLambda(Expression.Increment);\n    /// <summary>\n    /// \u30c7\u30af\u30ea\u30e1\u30f3\u30c8\n    /// </summary>\n    public static readonly Func<T, T> Decrement = GetLambda(Expression.Decrement);\n\n    /// <summary>\n    /// \u5165\u529b1\u3001\u51fa\u529b1\u306e\u6f14\u7b97\u5b50\u30e9\u30e0\u30c0\u5f0f\u3092\u53d6\u5f97\u3059\u308b\n    /// </summary>\n    /// <param name=\"ex\">\u6f14\u7b97\u5b50\u306eExpression</param>\n    /// <returns>\u30e9\u30e0\u30c0\u5f0f</returns>\n    private static Func<T, T> GetLambda(Func<ParameterExpression, UnaryExpression> ex)\n    {\n        var x      = Expression.Parameter(type: typeof(T)); // \u5f15\u6570 x \u306e\u5f0f\n        return Expression.Lambda<Func<T, T>>\n            (ex(x), x)\n            .Compile();\n    }\n\n    /// <summary>\n    /// \u5165\u529b2\u3001\u51fa\u529b1\u306e\u6f14\u7b97\u5b50\u30e9\u30e0\u30c0\u5f0f\u3092\u53d6\u5f97\u3059\u308b\n    /// </summary>\n    /// <param name=\"ex\">\u6f14\u7b97\u5b50\u306eExpression</param>\n    /// <returns>\u30e9\u30e0\u30c0\u5f0f</returns>\n    private static Func<T, T, T> GetLambda(Func<ParameterExpression, ParameterExpression, BinaryExpression> ex)\n    {\n        var x = Expression.Parameter(type: typeof(T));\n        var y = Expression.Parameter(type: typeof(T));\n        return Expression.Lambda<Func<T, T, T>>\n            (ex(x, y), x, y)\n            .Compile();\n    }\n}\n```\n\n\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u305f\u3068\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u66f8\u3051\u307e\u3059\u3002\n\n```csharp:Size.cs\n\nstruct GenericSize<T> : where T : struct\n{\n    private T width;\n\n    /// <summary>\n    /// \u5e45\n    /// </summary>\n    public T Width\n    {\n        get { return width; }\n        set { width = value; }\n    }\n\n    private T height;\n\n    /// <summary>\n    /// \u9ad8\u3055\n    /// </summary>\n    public T Height\n    {\n        get { return height; }\n        set { height = value; }\n    }\n\n    /// <summary>\n    /// \u5404\u5ea7\u6a19\u3092\u52a0\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a191</param>\n    /// <param name=\"size2\">\u5ea7\u6a192</param>\n    /// <returns>\u52a0\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static VSize<T> operator+ (VSize<T> size1, VSize<T> size2)\n    {\n        var add = Operator<T>.Add;\n        return new VSize<T>(add(size1.Width, size2.Width), add(size1.Height, size2.Height));\n    }\n}\n\n```\n\n\n\u3053\u308c\u3067\u3001Size\\<int>\u3067\u3082\u3001Size\\<double>\u3067\u3082\u3001Size\\<uint>\u3067\u3082\u4e00\u3064\u306e\u69cb\u9020\u4f53\u3067\u8868\u73fe\u3067\u304d\u307e\u3059\u3002\u3082\u3057\u3001Size\\<int>\u306b\u5bfe\u3057\u3066\u306e\u307fSystem.Drawing.Size\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3088\u3046\u306a\u72ec\u81ea\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u5225\u306e\u30af\u30e9\u30b9\u3067\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3059\u308c\u3070\u826f\u3044\u3067\u3059\u3002\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30af\u30e9\u30b9\u306b\u306f\u3042\u304f\u307e\u3067\u6c4e\u7528\u7684\u306a\u3082\u306e\u3060\u3051\u5165\u308c\u307e\u3059\u3002\n\n# \u51e6\u7406\u901f\u5ea6\u6bd4\u8f03\n\n```csharp:Program.cs\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            const int loop = 1000000;\n\n            // \u666e\u901a\u306eSize\n            Size sizeNorm = new Size(1, 1);\n\n            Stopwatch swNorm = new Stopwatch();\n            swNorm.Start();\n            for(int i = 0; i < loop; i++)\n            {\n                sizeNorm = sizeNorm + sizeNorm - 1;\n            }\n            swNorm.Stop();\n\n            // \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\n            Size<int> sizeGen = new Size<int>(1, 1);\n\n            Stopwatch swGen = new Stopwatch();\n            swGen.Start();\n            for(int i = 0; i < loop; i++)\n            {\n                sizeGen = sizeGen + sizeGen - 1;\n            }\n            swGen.Stop();\n\n            // \u51fa\u529b\n            Console.WriteLine(\"loop : {0}\", loop);\n            Console.WriteLine(\"Normal  Size      : {0} msec.\", swNorm.ElapsedMilliseconds);\n            Console.WriteLine(\"Generic Size<int> : {0} msec.\", swGen.ElapsedMilliseconds);\n\n            Console.WriteLine(\"Result\");\n            Console.WriteLine(\"Normal  Size      : {0}\", sizeNorm.ToString());\n            Console.WriteLine(\"Generic Size<int> : {0}\", sizeGen.ToString());\n        }\n    }\n```\n\n```\nloop : 1000000\nNormal  Size      : 179 msec.\nGeneric Size<int> : 184 msec.\nResult\nNormal  Size      : 1,1\nGeneric Size<int> : 1,1\n```\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306e\u65b9\u304c3%\u7a0b\u5ea6\u9045\u3044\u3067\u3059\u304c\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u578b\u3092\u8272\u3005\u5909\u3048\u305f\u3044\u5834\u5408\u306f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u3092\u4f7f\u3046\u306e\u3082\u3042\u308a\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u3082\u3063\u3068\u8907\u96d1\u306a\u6f14\u7b97\u3092\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u901f\u5ea6\u306f\u66f4\u306b\u901f\u5ea6\u304c\u843d\u3061\u308b\u3068\u306f\u601d\u3044\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u3001struct\u3092class\u306b\u3059\u308c\u3070\u30af\u30e9\u30b9\u3068\u3057\u3066\u3082\u5b9f\u884c\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u3001\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306e\u65b9\u304c\u7d0440%\u9045\u3044\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```\nloop : 1000000\nNormal  Size      : 199 msec.\nGeneric Size<int> : 275 msec.\nResult\nNormal  Size      : 1,1\nGeneric Size<int> : 1,1\n```\n\n# \u30b3\u30fc\u30c9\u5168\u4f53\n\nExpressionUtility\u306f\u4e0a\u3092\u53c2\u7167\u3002\n\n```csharp:GenericSize.cs\n/// <summary>\n/// 2\u6b21\u5143\u30b5\u30a4\u30ba\u69cb\u9020\u4f53\n/// </summary>\n/// <typeparam name=\"T\">\u8981\u7d20\u306e\u578b</typeparam>\npublic struct Size<T> : IEquatable<Size<T>> where T : struct, IComparable\n{\n    #region \u30d7\u30ed\u30d1\u30c6\u30a3\n\n    private T width;\n\n    /// <summary>\n    /// \u5e45\n    /// </summary>\n    public T Width\n    {\n        get { return width; }\n        set { width = value; }\n    }\n\n    private T height;\n\n    /// <summary>\n    /// \u9ad8\u3055\n    /// </summary>\n    public T Height\n    {\n        get { return height; }\n        set { height = value; }\n    }\n\n    /// <summary>\n    /// \u7a7a\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n    /// </summary>\n    public readonly static Size<T> Empty = new Size<T>(default(T), default(T));\n\n    /// <summary>\n    /// \u7a7a\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <returns>\u5224\u5b9a</returns>\n    public bool IsEmpty\n    {\n        get\n        {\n            return Equals(Empty);\n        }\n    }\n\n    /// <summary>\n    /// \u9762\u7a4d\n    /// </summary>\n    public T AreaSize\n    {\n        get\n        {\n            var multiply = Operator<T>.Multiply;\n            return multiply(Width, Height);\n        }\n    }\n    #endregion \u30d7\u30ed\u30d1\u30c6\u30a3\n\n    #region \u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n    /// <summary>\n    /// \u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"obj\">\u6bd4\u8f03\u5bfe\u8c61</param>\n    /// <returns>\u5224\u5b9a</returns>\n    public override bool Equals(object obj)\n    {\n        Size<T> compObj = (Size<T>)obj;\n        return Equals(compObj);\n    }\n\n    /// <summary>\n    /// \u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"obj\">\u6bd4\u8f03\u5bfe\u8c61</param>\n    /// <returns>\u5224\u5b9a</returns>\n    public bool Equals(Size<T> obj)\n    {\n        if (obj.GetHashCode() != this.GetHashCode())\n            return false;\n\n        if (obj.Width.Equals(this.Width) && obj.Height.Equals(this.Height))\n            return true;\n        else\n            return false;\n    }\n\n    /// <summary>\n    /// Equals\u304ctrue\u3092\u8fd4\u3059\u3068\u304d\u306b\u540c\u3058\u5024\u3092\u8fd4\u3059\u3002\n    /// </summary>\n    /// <returns>\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9</returns>\n    public override int GetHashCode()\n    {\n        return Convert.ToInt32(Width) ^ Convert.ToInt32(Height);\n    }\n\n    /// <summary>\n    /// \u6587\u5b57\u5217\u3092\u53d6\u5f97\u3059\u308b\u3002\n    /// </summary>\n    /// <returns>\u51fa\u529b\u6587\u5b57\u5217</returns>\n    public override string ToString()\n    {\n        return string.Format(\"{0},{1}\", this.Width, this.Height);\n    }\n\n    #endregion \u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n    #region \u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\n\n    /// <summary>\n    /// \u5404\u5ea7\u6a19\u3092\u52a0\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a191</param>\n    /// <param name=\"size2\">\u5ea7\u6a192</param>\n    /// <returns>\u52a0\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size<T> operator+ (Size<T> size1, Size<T> size2)\n    {\n        var add = Operator<T>.Add;\n        return new Size<T>(add(size1.Width, size2.Width), add(size1.Height, size2.Height));\n    }\n\n    /// <summary>\n    /// \u5ea7\u6a19\u306b\u4e00\u5b9a\u5024\u3092\u52a0\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"value\">\u52a0\u7b97\u3059\u308b\u5024</param>\n    /// <returns>\u52a0\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size<T> operator+ (Size<T> size1, T value)\n    {\n        var add = Operator<T>.Add;\n        return new Size<T>(add(size1.Width, value), add(size1.Height, value));\n    }\n\n    /// <summary>\n    /// \u5404\u5ea7\u6a19\u3092\u6e1b\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"size2\">\u6e1b\u7b97\u3059\u308b\u5ea7\u6a19</param>\n    /// <returns>\u6e1b\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size<T> operator- (Size<T> size1, Size<T> size2)\n    {\n        var subtract = Operator<T>.Subtract;\n        return new Size<T>(subtract(size1.Width, size2.Width), subtract(size1.Height, size2.Height));\n    }\n\n    /// <summary>\n    /// \u5ea7\u6a19\u306b\u4e00\u5b9a\u5024\u3092\u6e1b\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"value\">\u6e1b\u7b97\u3059\u308b\u5024</param>\n    /// <returns>\u6e1b\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size<T> operator- (Size<T> size1, T value)\n    {\n        var subtract = Operator<T>.Subtract;\n        return new Size<T>(subtract(size1.Width, value), subtract(size1.Height, value));\n    }\n\n    /// <summary>\n    /// \u5ea7\u6a19\u306b\u4e00\u5b9a\u5024\u3092\u4e57\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"value\">\u4e57\u7b97\u3059\u308b\u5ea7\u6a19</param>\n    /// <returns>\u4e57\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size<double> operator* (Size<T> size1, double value)\n    {\n        return new Size<double>(Convert.ToDouble(size1.Width) * value, Convert.ToDouble(size1.Height) * value);\n    }\n\n    /// <summary>\n    /// \u5ea7\u6a19\u306b\u4e00\u5b9a\u5024\u3092\u9664\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"value\">\u9664\u7b97\u3059\u308b\u5ea7\u6a19</param>\n    /// <returns>\u9664\u7b97\u3059\u308b\u5ea7\u6a19</returns>\n    public static Size<double> operator/ (Size<T> size1, double value)\n    {\n        return new Size<double>(Convert.ToDouble(size1.Width) / value, Convert.ToDouble(size1.Height) / value);\n    }\n\n    /// <summary>\n    /// \u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u30b5\u30a4\u30ba1</param>\n    /// <param name=\"size2\">\u30b5\u30a4\u30ba2</param>\n    /// <returns>\u5224\u5b9a</returns>\n    public static bool operator ==(Size<T> size1, Size<T> size2)\n    {\n        return size1.Equals(size2);\n    }\n\n    /// <summary>\n    /// \u4e0d\u4e00\u81f4\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u30b5\u30a4\u30ba1</param>\n    /// <param name=\"size2\">\u30b5\u30a4\u30ba2</param>\n    /// <returns>\u5224\u5b9a</returns>\n    public static bool operator !=(Size<T> size1, Size<T> size2)\n    {\n        return !(size1.Equals(size2));\n    }\n\n\n    #endregion \u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\n\n    #region \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\n    /// <summary>\n    /// \u6b63\u65b9\u5f62\u306e\u30b5\u30a4\u30ba\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u521d\u671f\u5316\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"length\">\u7e26\u6a2a\u9577\u3055</param>\n    public Size(T length)\n        : this(length, length)\n    {\n    }\n\n    /// <summary>\n    /// \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u521d\u671f\u5316\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"width\">\u5e45(column\u65b9\u5411)</param>\n    /// <param name=\"height\">\u9ad8\u3055(row\u65b9\u5411)</param>\n    public Size(T width, T height)\n    {\n        this.width = width;\n        this.height = height;\n    }\n\n    #endregion \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n}\n```\n\n```csharp:Size.cs\n/// <summary>\n/// 2\u6b21\u5143\u30b5\u30a4\u30ba\u69cb\u9020\u4f53\n/// </summary>\npublic struct Size : IEquatable<Size>, IComparable\n{\n    #region \u30d7\u30ed\u30d1\u30c6\u30a3\n\n    private int width;\n\n    /// <summary>\n    /// \u5e45\n    /// </summary>\n    public int Width\n    {\n        get { return width; }\n        set { width = value; }\n    }\n\n    private int height;\n\n    /// <summary>\n    /// \u9ad8\u3055\n    /// </summary>\n    public int Height\n    {\n        get { return height; }\n        set { height = value; }\n    }\n\n    /// <summary>\n    /// \u7a7a\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n    /// </summary>\n    public readonly static Size Empty = new Size(0, 0);\n\n    /// <summary>\n    /// \u7a7a\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <returns>\u5224\u5b9a</returns>\n    public bool IsEmpty\n    {\n        get\n        {\n            return Equals(Empty);\n        }\n    }\n\n    /// <summary>\n    /// \u9762\u7a4d\n    /// </summary>\n    public int AreaSize\n    {\n        get\n        {\n            var multiply = Operator<int>.Multiply;\n            return multiply(Width, Height);\n        }\n    }\n    #endregion \u30d7\u30ed\u30d1\u30c6\u30a3\n\n    #region \u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n    /// <summary>\n    /// \u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"obj\">\u6bd4\u8f03\u5bfe\u8c61</param>\n    /// <returns>\u5224\u5b9a</returns>\n    public override bool Equals(object obj)\n    {\n        Size compObj = (Size)obj;\n        return Equals(compObj);\n    }\n\n    /// <summary>\n    /// \u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"obj\">\u6bd4\u8f03\u5bfe\u8c61</param>\n    /// <returns>\u5224\u5b9a</returns>\n    public bool Equals(Size obj)\n    {\n        if (obj.GetHashCode() != this.GetHashCode())\n            return false;\n\n        if(obj.Width == this.Width && obj.Height == this.Height)\n            return true;\n        else\n            return false;\n    }\n\n    /// <summary>\n    /// Equals\u304ctrue\u3092\u8fd4\u3059\u3068\u304d\u306b\u540c\u3058\u5024\u3092\u8fd4\u3059\u3002\n    /// </summary>\n    /// <returns>\u30cf\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9</returns>\n    public override int GetHashCode()\n    {\n        return Width ^ Height;\n    }\n\n    /// <summary>\n    /// \u6587\u5b57\u5217\u3092\u53d6\u5f97\u3059\u308b\u3002\n    /// </summary>\n    /// <returns>\u51fa\u529b\u6587\u5b57\u5217</returns>\n    public override string ToString()\n    {\n        return string.Format(\"{0},{1}\", this.Width, this.Height);\n    }\n\n    #endregion \u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n    #region \u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\n\n    /// <summary>\n    /// \u5404\u5ea7\u6a19\u3092\u52a0\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a191</param>\n    /// <param name=\"size2\">\u5ea7\u6a192</param>\n    /// <returns>\u52a0\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size operator+ (Size size1, Size size2)\n    {\n        return new Size(size1.Width + size2.Width, size1.Height + size2.Height);\n    }\n\n    /// <summary>\n    /// \u5ea7\u6a19\u306b\u4e00\u5b9a\u5024\u3092\u52a0\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"value\">\u52a0\u7b97\u3059\u308b\u5024</param>\n    /// <returns>\u52a0\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size operator+ (Size size1, int value)\n    {\n        return new Size(size1.Width + value, size1.Height + value);\n    }\n\n    /// <summary>\n    /// \u5404\u5ea7\u6a19\u3092\u6e1b\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"size2\">\u6e1b\u7b97\u3059\u308b\u5ea7\u6a19</param>\n    /// <returns>\u6e1b\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size operator- (Size size1, Size size2)\n    {\n        return new Size(size1.Width - size2.Width, size1.Height - size2.Height);\n    }\n\n    /// <summary>\n    /// \u5ea7\u6a19\u306b\u4e00\u5b9a\u5024\u3092\u6e1b\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"value\">\u6e1b\u7b97\u3059\u308b\u5024</param>\n    /// <returns>\u6e1b\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size operator- (Size size1, int value)\n    {\n        return new Size(size1.Width - value, size1.Height - value);\n    }\n\n    /// <summary>\n    /// \u5ea7\u6a19\u306b\u4e00\u5b9a\u5024\u3092\u4e57\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"value\">\u4e57\u7b97\u3059\u308b\u5ea7\u6a19</param>\n    /// <returns>\u4e57\u7b97\u3057\u305f\u5ea7\u6a19</returns>\n    public static Size operator* (Size size1, int value)\n    {\n        return new Size(size1.Width * value, size1.Height * value);\n    }\n\n    /// <summary>\n    /// \u5ea7\u6a19\u306b\u4e00\u5b9a\u5024\u3092\u9664\u7b97\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u5ea7\u6a19</param>\n    /// <param name=\"value\">\u9664\u7b97\u3059\u308b\u5ea7\u6a19</param>\n    /// <returns>\u9664\u7b97\u3059\u308b\u5ea7\u6a19</returns>\n    public static Size operator/ (Size size1, int value)\n    {\n        return new Size((int)(size1.Width / value), (int)(size1.Height / value));\n    }\n\n    /// <summary>\n    /// \u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u30b5\u30a4\u30ba1</param>\n    /// <param name=\"size2\">\u30b5\u30a4\u30ba2</param>\n    /// <returns>\u5224\u5b9a</returns>\n    public static bool operator ==(Size size1, Size size2)\n    {\n        return size1.Equals(size2);\n    }\n\n    /// <summary>\n    /// \u4e0d\u4e00\u81f4\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"size1\">\u30b5\u30a4\u30ba1</param>\n    /// <param name=\"size2\">\u30b5\u30a4\u30ba2</param>\n    /// <returns>\u5224\u5b9a</returns>\n    public static bool operator !=(Size size1, Size size2)\n    {\n        return !(size1.Equals(size2));\n    }\n\n\n    #endregion \u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\n\n    #region \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\n    /// <summary>\n    /// \u6b63\u65b9\u5f62\u306e\u30b5\u30a4\u30ba\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u521d\u671f\u5316\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"length\">\u7e26\u6a2a\u9577\u3055</param>\n    public Size(int length)\n        : this(length, length)\n    {\n    }\n\n    /// <summary>\n    /// \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u521d\u671f\u5316\u3059\u308b\u3002\n    /// </summary>\n    /// <param name=\"width\">\u5e45(column\u65b9\u5411)</param>\n    /// <param name=\"height\">\u9ad8\u3055(row\u65b9\u5411)</param>\n    public Size(int width, int height)\n    {\n        this.width = width;\n        this.height = height;\n    }\n\n    #endregion \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n}\n\n```\n\n\n\n\n\n"}