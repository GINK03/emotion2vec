{"tags": ["Symfony2", "PHP"], "context": " More than 1 year has passed since last update.\u524d\u56de\u306e\u8a18\u4e8b Symfony2\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0 (2) app/console\u3092\u8aad\u307f\u89e3\u304f \u305d\u306e2 \u306e\u7d9a\u304d\u3067\u3059\u3002\napp/console server:run\u304c\u3001Symfony\\Bundle\\FrameworkBundle\\Command\\ServerRunCommand\u30af\u30e9\u30b9\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3053\u3068\u306f\u3059\u3067\u306b\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3053\u306e\u30af\u30e9\u30b9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nSymfony/Bundle/FrameworkBundle/Command/ServerRunCommand.php\u3092\u8aad\u3080\n\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\nhttps://github.com/symfony/symfony/blob/2.6/src/Symfony/Bundle/FrameworkBundle/Command/ServerRunCommand.php\nconfigure()\u30e1\u30bd\u30c3\u30c9\u306f\u98db\u3070\u3057\u3066execute()\u30e1\u30bd\u30c3\u30c9\u3092\u8aad\u307f\u307e\u3059\u3002\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $documentRoot = $input->getOption('docroot');\n        if (null === $documentRoot) {\n            $documentRoot = $this->getContainer()->getParameter('kernel.root_dir').'/../web';\n        }\n        if (!is_dir($documentRoot)) {\n            $output->writeln(sprintf('<error>The given document root directory \"%s\" does not exist</error>', $documentRoot));\n            return 1;\n        }\n        $env = $this->getContainer()->getParameter('kernel.environment');\n        $address = $input->getArgument('address');\n        if (false === strpos($address, ':')) {\n            $output->writeln('The address has to be of the form <comment>bind-address:port</comment>.');\n            return 1;\n        }\n        if ($this->isOtherServerProcessRunning($address)) {\n            $output->writeln(sprintf('<error>A process is already listening on http://%s.</error>', $address));\n            return 1;\n        }\n        if ('prod' === $env) {\n            $output->writeln('<error>Running PHP built-in server in production environment is NOT recommended!</error>');\n        }\n        $output->writeln(sprintf(\"Server running on <info>http://%s</info>\\n\", $address));\n        $output->writeln('Quit the server with CONTROL-C.');\n        if (null === $builder = $this->createPhpProcessBuilder($output, $address, $input->getOption('router'), $env)) {\n            return 1;\n        }\n        $builder->setWorkingDirectory($documentRoot);\n        $builder->setTimeout(null);\n        $process = $builder->getProcess();\n        if (OutputInterface::VERBOSITY_VERBOSE > $output->getVerbosity()) {\n            $process->disableOutput();\n        }\n        $this\n            ->getHelper('process')\n            ->run($output, $process, null, null, OutputInterface::VERBOSITY_VERBOSE);\n        if (!$process->isSuccessful()) {\n            $output->writeln('<error>Built-in server terminated unexpectedly</error>');\n            if ($process->isOutputDisabled()) {\n                $output->writeln('<error>Run the command again with -v option for more details</error>');\n            }\n        }\n        return $process->getExitCode();\n    }\n\n\u4e0a\u304b\u3089\u9806\u306b\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n        $documentRoot = $input->getOption('docroot');\n        if (null === $documentRoot) {\n            $documentRoot = $this->getContainer()->getParameter('kernel.root_dir').'/../web';\n        }\n\ndocroot\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u6307\u5b9a\u304c\u306a\u3051\u308c\u3070\u3001 web\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092DocumentRoot\u3068\u3057\u3066\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u307e\u3042app/console server:run\u3059\u308b\u3068\u304d\u306b\u3044\u3061\u3044\u3061docroot\u306a\u3093\u3066\u6307\u5b9a\u3057\u307e\u305b\u3093\u3088\u306d\u3002\n        if (!is_dir($documentRoot)) {\n            $output->writeln(sprintf('<error>The given document root directory \"%s\" does not exist</error>', $documentRoot));\n            return 1;\n        }\n\nDocumentRoot\u3067\u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u30a8\u30e9\u30fc\u3068\u3057\u307e\u3059\u3002\n\u4f59\u8ac7\u3067\u3059\u304c\u3001\u30a8\u30e9\u30fc\u306f\u4f8b\u5916\u3092\u6295\u3052\u308b\u3068\u304b\u3058\u3083\u306a\u304f\u3066Unix\u306e\u7d42\u4e86\u30b9\u30c6\u30fc\u30bf\u30b9\u3092return\u3059\u308b\u3093\u3067\u3059\u306d\u3002\nPHP\u3089\u3057\u304f\u306a\u304f\u3066\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3063\u307d\u3055\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u5f8c\u3001\n\n\u5f15\u6570\u306e address:port \u306e\u30c1\u30a7\u30c3\u30af\n\u65e2\u306b\u8d77\u52d5\u3057\u3066\u308b\u30b5\u30fc\u30d0\u30d7\u30ed\u30bb\u30b9\u304c\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\n\u672c\u756a\u74b0\u5883\u3067\u5b9f\u884c\u3057\u305f\u5834\u5408\u306f\u8b66\u544a (\u672c\u756a\u3067\u4f7f\u3046\u306a\u3068)\n\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u30ed\u30b0\u3092\u8868\u793a\n\n\u3092\u3057\u3066\u304b\u3089\u3001\u30e1\u30a4\u30f3\u306e\u51e6\u7406\u306b\u3046\u3064\u308a\u307e\u3059\u3002\n        if (null === $builder = $this->createPhpProcessBuilder($output, $address, $input->getOption('router'), $env)) {\n            return 1;\n        }\n\nPhpProcessBuilder\u3068\u3084\u3089\u3092\u751f\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\u300c\u30d7\u30ed\u30bb\u30b9\u30d3\u30eb\u30c0\u30fc\u3092\u4f5c\u308b\u300d\u3068\u306f\u307e\u305f\u305a\u3044\u3076\u3093\u3068\u62bd\u8c61\u7684\u304b\u3064\u9060\u56de\u308a\u306a\u51e6\u7406\u3067\u3059\u306d\u3002\ncreatePhpProcessBuilder()\u306e\u5b9a\u7fa9\u306f\u3059\u3050\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\n    private function createPhpProcessBuilder(OutputInterface $output, $address, $router, $env)\n    {\n        $router = $router ?: $this\n            ->getContainer()\n            ->get('kernel')\n            ->locateResource(sprintf('@FrameworkBundle/Resources/config/router_%s.php', $env))\n        ;\n\n        if (!file_exists($router)) {\n            $output->writeln(sprintf('<error>The given router script \"%s\" does not exist</error>', $router));\n\n            return;\n        }\n\n        $router = realpath($router);\n        $finder = new PhpExecutableFinder();\n\n        if (false === $binary = $finder->find()) {\n            $output->writeln('<error>Unable to find PHP binary to run server</error>');\n\n            return;\n        }\n\n        return new ProcessBuilder(array($binary, '-S', $address, $router));\n    }\n\n$router\u307e\u308f\u308a\u306f\u3061\u3087\u3063\u3068\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u306e\u3067\u7121\u8996\u3057\u307e\u3059\u3002\nPhpExecutableFinder::find()\u3067 PHP\u306e\u30d0\u30a4\u30ca\u30ea\u306e\u30d1\u30b9\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u96f0\u56f2\u6c17\u3067\u3059\u3002\nPhpExecutableFinder\u30af\u30e9\u30b9\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nhttps://github.com/symfony/symfony/blob/2.6/src/Symfony/Component/Process/PhpExecutableFinder.php#L36\n    /**\n     * Finds The PHP executable.\n     *\n     * @param bool $includeArgs Whether or not include command arguments\n     *\n     * @return string|false The PHP executable path or false if it cannot be found\n     */\n    public function find($includeArgs = true)\n    {\n        // HHVM support\n        if (defined('HHVM_VERSION')) {\n            return (false !== ($hhvm = getenv('PHP_BINARY')) ? $hhvm : PHP_BINARY).($includeArgs ? ' '.implode(' ', $this->findArguments()) : '');\n        }\n        // PHP_BINARY return the current sapi executable\n        if (defined('PHP_BINARY') && PHP_BINARY && in_array(PHP_SAPI, array('cli', 'cli-server')) && is_file(PHP_BINARY)) {\n            return PHP_BINARY;\n        }\n        if ($php = getenv('PHP_PATH')) {\n            if (!is_executable($php)) {\n                return false;\n            }\n            return $php;\n        }\n        if ($php = getenv('PHP_PEAR_PHP_BIN')) {\n            if (is_executable($php)) {\n                return $php;\n            }\n        }\n        $dirs = array(PHP_BINDIR);\n        if ('\\\\' === DIRECTORY_SEPARATOR) {\n            $dirs[] = 'C:\\xampp\\php\\\\';\n        }\n        return $this->executableFinder->find('php', false, $dirs);\n    }\n\n\u9577\u3005\u3068\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u304c\u3001HHVM\u3084\u3089Windows\u3084\u3089\u306e\u74b0\u5883\u3067\u3082\u52d5\u304f\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306ehack\u304c\u66f8\u3044\u3066\u3042\u308b\u3060\u3051\u3067\u3001\n\u672c\u8cea\u7684\u306b\u306fPHP CLI\u306e\u30d1\u30b9\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\u3060\u3051\u306e\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\u3061\u3087\u3063\u3068\u624b\u5143\u3067\u5b9f\u9a13\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n$ php -r 'echo PHP_BINARY . \"\\n\";'\n/opt/php-5.6.8/bin/php\n\n\u3084\u306f\u308a\u305d\u3046\u3067\u3057\u305f\u3002\u5358\u306bPHP_BINARY\u5b9a\u6570\u306e\u5024\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\u3060\u3051\u3068\u8003\u3048\u3066\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\u306a\u306e\u3067\u3001\n        return new ProcessBuilder(array($binary, '-S', $address, $router));\n\n\u306f\n        return new ProcessBuilder(array(\"/opt/php-5.6.8/bin/php\", '-S', $address, $router));\n\n\u307f\u305f\u3044\u306a\u3082\u306e\u3060\u3068\u8003\u3048\u308c\u3070\u3088\u3044\u3067\u3059\u306d\u3002\n\u3055\u3066\u3001ProcessBuilder\u30af\u30e9\u30b9 \u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nhttps://github.com/symfony/symfony/blob/2.6/src/Symfony/Component/Process/ProcessBuilder.php\n\u3053\u306e\u30af\u30e9\u30b9\u306f\u30d7\u30ed\u30d1\u30c6\u30a3\u3068getter,setter\u304c\u3042\u308b\u304f\u3089\u3044\u3067\u5927\u3057\u305f\u4ed5\u4e8b\u306f\u3057\u3066\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\u4e3b\u306a\u51e6\u7406\u306fgetProcess()\u3067\u3059\u3002\n    /**\n     * Creates a Process instance and returns it.\n     *\n     * @return Process\n     *\n     * @throws LogicException In case no arguments have been provided\n     */\n    public function getProcess()\n    {\n        if (0 === count($this->prefix) && 0 === count($this->arguments)) {\n            throw new LogicException('You must add() command arguments before calling getProcess().');\n        }\n\n        $options = $this->options;\n\n        $arguments = array_merge($this->prefix, $this->arguments);\n        $script = implode(' ', array_map(array(__NAMESPACE__.'\\\\ProcessUtils', 'escapeArgument'), $arguments));\n\n        if ($this->inheritEnv) {\n            // include $_ENV for BC purposes\n            $env = array_replace($_ENV, $_SERVER, $this->env);\n        } else {\n            $env = $this->env;\n        }\n\n        $process = new Process($script, $this->cwd, $env, $this->input, $this->timeout, $options);\n\n        if ($this->outputDisabled) {\n            $process->disableOutput();\n        }\n\n        return $process;\n    }\n\n\u3072\u3068\u3053\u3068\u3067\u8a00\u3046\u3068new Process\u3057\u3066\u308b\u3060\u3051\u3067\u3059\u306d\u3002\n\u3053\u3053\u3067$script\u5909\u6570\u3092\u6e21\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u306e\u4e2d\u8eab\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u3044\u3064\u3082\u306e\u3088\u3046\u306bvar_dump()\u3092\u3057\u304b\u3051\u3066\u3001\n+       var_dump($script);exit;\n        $process = new Process($script, $this->cwd, $env, $this->input, $this->timeout, $options);\n\napp/console run:server\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n$ ./app/console server:run\nServer running on http://127.0.0.1:8000\n\nQuit the server with CONTROL-C.\nstring(171) \"'/opt/php-5.6.8/bin/php' '-S' '127.0.0.1:8000' '/Users/DQNEO/tmp/2015-05-15/blog/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/config/router_dev.php'\"\n\n\u3075\u3080\u3075\u3080\u3002$script\u306e\u4e2d\u8eab\u306f\u3001\u30d3\u30eb\u30c8\u30a4\u30f3\u30b5\u30fc\u30d0\u3092\u8d77\u52d5\u3059\u308b\u305f\u3081\u306e\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u6587\u5b57\u5217\u3067\u3057\u305f\u3002\n\u306a\u3093\u3068\u306a\u304f\u3084\u308d\u3046\u3068\u3057\u3066\u308b\u3053\u3068\u304c\u60f3\u50cf\u3067\u304d\u307e\u3059\u3002\n\u3055\u3066\u3001\u3053\u3053\u3067new\u3055\u308c\u3066\u3044\u308bProcess\u30af\u30e9\u30b9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nhttps://github.com/symfony/symfony/blob/2.6/src/Symfony/Component/Process/Process.php\n\u30af\u30e9\u30b9\u30ec\u30d9\u30eb\u30b3\u30e1\u30f3\u30c8\u306b\u3053\u3046\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\nProcess is a thin wrapper around proc_* functions to easily start independent PHP processes.\n\nproc_*\u95a2\u6570\u306e\u30e9\u30c3\u30d1\u30fc\u3067\u3042\u308b\u3068\u3002\n\u3053\u308c\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u3066\u3001\u5192\u982d\u306b\u66f8\u3044\u305fSymfony\\Bundle\\FrameworkBundle\\Command\\ServerRunCommand\u30af\u30e9\u30b9\u306b\u623b\u3063\u3066\u304d\u307e\u3059\u3002\n        $process = $builder->getProcess();\n        if (OutputInterface::VERBOSITY_VERBOSE > $output->getVerbosity()) {\n            $process->disableOutput();\n        }\n        $this\n            ->getHelper('process')\n            ->run($output, $process, null, null, OutputInterface::VERBOSITY_VERBOSE);\n\n\n$this->->getHelper('process')->run()\u306b$process\u304c\u6e21\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3055\u3066\u3053\u306erun()\u306fProcessHelper\u3068\u3044\u3046\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u3088\u3046\u3067\u3059\u3002\n\u3061\u3087\u3063\u3068\u3057\u3093\u3069\u304f\u306a\u3063\u3066\u304d\u305fw\u3000\u306e\u3067\u305d\u3053\u306f\u98db\u3070\u3057\u307e\u3059\u3002\nProcess\u30af\u30e9\u30b9\u306e\u3069\u3053\u3067\u5b9f\u969b\u306e\u30b3\u30de\u30f3\u30c9\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\u7b54\u3048\u306f\u3059\u3070\u308a\u3053\u3053\u3067\u3001\nhttps://github.com/symfony/symfony/blob/2.6/src/Symfony/Component/Process/Process.php#L289\n    /**\n     * Starts the process and returns after writing the input to STDIN.\n     *\n     * This method blocks until all STDIN data is sent to the process then it\n     * returns while the process runs in the background.\n     *\n     * The termination of the process can be awaited with wait().\n     *\n     * The callback receives the type of output (out or err) and some bytes from\n     * the output in real-time while writing the standard input to the process.\n     * It allows to have feedback from the independent process during execution.\n     * If there is no callback passed, the wait() method can be called\n     * with true as a second parameter then the callback will get all data occurred\n     * in (and since) the start call.\n     *\n     * @param callable|null $callback A PHP callback to run whenever there is some\n     *                                output available on STDOUT or STDERR\n     *\n     * @throws RuntimeException When process can't be launched\n     * @throws RuntimeException When process is already running\n     * @throws LogicException   In case a callback is provided and output has been disabled\n     */\n    public function start($callback = null)\n    {\n        if ($this->isRunning()) {\n            throw new RuntimeException('Process is already running');\n        }\n        if ($this->outputDisabled && null !== $callback) {\n            throw new LogicException('Output has been disabled, enable it to allow the use of a callback.');\n        }\n        $this->resetProcessData();\n        $this->starttime = $this->lastOutputTime = microtime(true);\n        $this->callback = $this->buildCallback($callback);\n        $descriptors = $this->getDescriptors();\n        $commandline = $this->commandline;\n        if ('\\\\' === DIRECTORY_SEPARATOR && $this->enhanceWindowsCompatibility) {\n            $commandline = 'cmd /V:ON /E:ON /C \"('.$commandline.')';\n            foreach ($this->processPipes->getFiles() as $offset => $filename) {\n                $commandline .= ' '.$offset.'>'.ProcessUtils::escapeArgument($filename);\n            }\n            $commandline .= '\"';\n            if (!isset($this->options['bypass_shell'])) {\n                $this->options['bypass_shell'] = true;\n            }\n        }\n        $this->process = proc_open($commandline, $descriptors, $this->processPipes->pipes, $this->cwd, $this->env, $this->options);\n        if (!is_resource($this->process)) {\n            throw new RuntimeException('Unable to launch a new process.');\n        }\n        $this->status = self::STATUS_STARTED;\n        if ($this->tty) {\n            return;\n        }\n        $this->updateStatus(false);\n        $this->checkTimeout();\n    }\n\n\u3053\u306eproc_open()\u304c\u30b5\u30fc\u30d0\u3092\u8d77\u52d5\u3057\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\n        $this->process = proc_open($commandline, $descriptors, $this->processPipes->pipes, $this->cwd, $this->env, $this->options);\n\n$commandline\u3068\u3044\u3046\u306e\u306f\u4e0a\u3067\u8aac\u660e\u3057\u305f$script\u5909\u6570\u3068\u540c\u3058\u3082\u306e\u3067\u3001\u30d3\u30eb\u30c8\u30a4\u30f3\u30b5\u30fc\u30d0\u3092\u5b9f\u884c\u3059\u308b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u6587\u5b57\u5217\u3067\u3059\u3002\n\u5b9f\u969b\u306e\u5024\u306f\u3001'/opt/php-5.6.8/bin/php' '-S' '127.0.0.1:8000' '/Users/DQNEO/tmp/2015-05-15/blog/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/config/router_dev.php'\u3068\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u307e\u3068\u3081\napp/console server:run\u306e\u5b9f\u4f53\u306f\u3001proc_open('php -S 127.0.0.1:8000')\u3067\u3042\u308b\n\u3061\u306a\u307f\u306bproc_open\u306f\u4f55\u304b\u3068\u3044\u3046\u3068\u3001\u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u3068\u304b\u30d1\u30a4\u30d7\u3068\u304b\u305d\u3046\u3044\u3046\u3084\u3064\u3067\u3059\u3002\nhttp://php.net/proc_open\n\u53c2\u8003\u307e\u3067\u306b\u3001app/console server:run\u3057\u3066\u304b\u3089proc_open()\u306b\u3044\u305f\u308b\u307e\u3067\u306e\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n#0  Symfony\\Component\\Process\\Process->start()\n#1  Symfony\\Component\\Process\\Process->run()\n#2  Symfony\\Component\\Console\\Helper\\ProcessHelper->run()\n#3  Symfony\\Bundle\\FrameworkBundle\\Command\\ServerRunCommand->execute()\n#4  Symfony\\Component\\Console\\Command\\Command->run()\n#5  Symfony\\Component\\Console\\Application->doRunCommand()\n#6  Symfony\\Component\\Console\\Application->doRun()\n#7  Symfony\\Bundle\\FrameworkBundle\\Console\\Application->doRun()\n#8  Symfony\\Component\\Console\\Application->run()\n\n\n\u611f\u60f3\n\u305f\u304b\u304cphp -S\u3067\u30b5\u30fc\u30d0\u8d77\u52d5\u3059\u308b\u306e\u306b\u3001\u3053\u3093\u306a\u306b\u5927\u91cf\u306e\u30af\u30e9\u30b9\u3092\u304b\u3076\u305b\u308b\u5fc5\u8981\u306f\u3042\u308b\u306e\u3060\u308d\u3046\u304b...\n\u89e3\u8aad\u3057\u306a\u304c\u3089\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304f\u306e\u306b\u534a\u65e5\u304b\u304b\u308a\u307e\u3057\u305fw\n\u6b63\u76f4\u3001\u4e0b\u8a18\u3067\u540c\u3058\u3053\u3068\u3067\u304d\u308b\u3084\u3093\u3068\u601d\u3044\u307e\u3057\u305f\u3002\nphp -S localhost:8000 -t web/app_dev.php\n\n\u524d\u56de\u306e\u8a18\u4e8b [Symfony2\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0 (2) app/console\u3092\u8aad\u307f\u89e3\u304f \u305d\u306e2](http://qiita.com/DQNEO/items/811e9f504605ae61217f) \u306e\u7d9a\u304d\u3067\u3059\u3002\n\n`app/console server:run`\u304c\u3001`Symfony\\Bundle\\FrameworkBundle\\Command\\ServerRunCommand`\u30af\u30e9\u30b9\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3053\u3068\u306f\u3059\u3067\u306b\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3053\u306e\u30af\u30e9\u30b9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n# Symfony/Bundle/FrameworkBundle/Command/ServerRunCommand.php\u3092\u8aad\u3080\n\n\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\nhttps://github.com/symfony/symfony/blob/2.6/src/Symfony/Bundle/FrameworkBundle/Command/ServerRunCommand.php\n\n`configure()`\u30e1\u30bd\u30c3\u30c9\u306f\u98db\u3070\u3057\u3066`execute()`\u30e1\u30bd\u30c3\u30c9\u3092\u8aad\u307f\u307e\u3059\u3002\n\n```php\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $documentRoot = $input->getOption('docroot');\n        if (null === $documentRoot) {\n            $documentRoot = $this->getContainer()->getParameter('kernel.root_dir').'/../web';\n        }\n        if (!is_dir($documentRoot)) {\n            $output->writeln(sprintf('<error>The given document root directory \"%s\" does not exist</error>', $documentRoot));\n            return 1;\n        }\n        $env = $this->getContainer()->getParameter('kernel.environment');\n        $address = $input->getArgument('address');\n        if (false === strpos($address, ':')) {\n            $output->writeln('The address has to be of the form <comment>bind-address:port</comment>.');\n            return 1;\n        }\n        if ($this->isOtherServerProcessRunning($address)) {\n            $output->writeln(sprintf('<error>A process is already listening on http://%s.</error>', $address));\n            return 1;\n        }\n        if ('prod' === $env) {\n            $output->writeln('<error>Running PHP built-in server in production environment is NOT recommended!</error>');\n        }\n        $output->writeln(sprintf(\"Server running on <info>http://%s</info>\\n\", $address));\n        $output->writeln('Quit the server with CONTROL-C.');\n        if (null === $builder = $this->createPhpProcessBuilder($output, $address, $input->getOption('router'), $env)) {\n            return 1;\n        }\n        $builder->setWorkingDirectory($documentRoot);\n        $builder->setTimeout(null);\n        $process = $builder->getProcess();\n        if (OutputInterface::VERBOSITY_VERBOSE > $output->getVerbosity()) {\n            $process->disableOutput();\n        }\n        $this\n            ->getHelper('process')\n            ->run($output, $process, null, null, OutputInterface::VERBOSITY_VERBOSE);\n        if (!$process->isSuccessful()) {\n            $output->writeln('<error>Built-in server terminated unexpectedly</error>');\n            if ($process->isOutputDisabled()) {\n                $output->writeln('<error>Run the command again with -v option for more details</error>');\n            }\n        }\n        return $process->getExitCode();\n    }\n```\n\n\u4e0a\u304b\u3089\u9806\u306b\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n```php\n        $documentRoot = $input->getOption('docroot');\n        if (null === $documentRoot) {\n            $documentRoot = $this->getContainer()->getParameter('kernel.root_dir').'/../web';\n        }\n```\n\ndocroot\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u6307\u5b9a\u304c\u306a\u3051\u308c\u3070\u3001 `web`\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092DocumentRoot\u3068\u3057\u3066\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u307e\u3042`app/console server:run`\u3059\u308b\u3068\u304d\u306b\u3044\u3061\u3044\u3061docroot\u306a\u3093\u3066\u6307\u5b9a\u3057\u307e\u305b\u3093\u3088\u306d\u3002\n\n```php\n        if (!is_dir($documentRoot)) {\n            $output->writeln(sprintf('<error>The given document root directory \"%s\" does not exist</error>', $documentRoot));\n            return 1;\n        }\n```\n\nDocumentRoot\u3067\u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u30a8\u30e9\u30fc\u3068\u3057\u307e\u3059\u3002\n\n\u4f59\u8ac7\u3067\u3059\u304c\u3001\u30a8\u30e9\u30fc\u306f\u4f8b\u5916\u3092\u6295\u3052\u308b\u3068\u304b\u3058\u3083\u306a\u304f\u3066Unix\u306e\u7d42\u4e86\u30b9\u30c6\u30fc\u30bf\u30b9\u3092return\u3059\u308b\u3093\u3067\u3059\u306d\u3002\nPHP\u3089\u3057\u304f\u306a\u304f\u3066\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3063\u307d\u3055\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3053\u306e\u5f8c\u3001\n\n* \u5f15\u6570\u306e `address:port` \u306e\u30c1\u30a7\u30c3\u30af\n* \u65e2\u306b\u8d77\u52d5\u3057\u3066\u308b\u30b5\u30fc\u30d0\u30d7\u30ed\u30bb\u30b9\u304c\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\n* \u672c\u756a\u74b0\u5883\u3067\u5b9f\u884c\u3057\u305f\u5834\u5408\u306f\u8b66\u544a (\u672c\u756a\u3067\u4f7f\u3046\u306a\u3068)\n* \u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u30ed\u30b0\u3092\u8868\u793a\n\n\u3092\u3057\u3066\u304b\u3089\u3001\u30e1\u30a4\u30f3\u306e\u51e6\u7406\u306b\u3046\u3064\u308a\u307e\u3059\u3002\n\n```php\n        if (null === $builder = $this->createPhpProcessBuilder($output, $address, $input->getOption('router'), $env)) {\n            return 1;\n        }\n```\n\nPhpProcessBuilder\u3068\u3084\u3089\u3092\u751f\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\u300c\u30d7\u30ed\u30bb\u30b9\u30d3\u30eb\u30c0\u30fc\u3092\u4f5c\u308b\u300d\u3068\u306f\u307e\u305f\u305a\u3044\u3076\u3093\u3068\u62bd\u8c61\u7684\u304b\u3064\u9060\u56de\u308a\u306a\u51e6\u7406\u3067\u3059\u306d\u3002\ncreatePhpProcessBuilder()\u306e\u5b9a\u7fa9\u306f\u3059\u3050\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\n\n```php\n    private function createPhpProcessBuilder(OutputInterface $output, $address, $router, $env)\n    {\n        $router = $router ?: $this\n            ->getContainer()\n            ->get('kernel')\n            ->locateResource(sprintf('@FrameworkBundle/Resources/config/router_%s.php', $env))\n        ;\n\n        if (!file_exists($router)) {\n            $output->writeln(sprintf('<error>The given router script \"%s\" does not exist</error>', $router));\n\n            return;\n        }\n\n        $router = realpath($router);\n        $finder = new PhpExecutableFinder();\n\n        if (false === $binary = $finder->find()) {\n            $output->writeln('<error>Unable to find PHP binary to run server</error>');\n\n            return;\n        }\n\n        return new ProcessBuilder(array($binary, '-S', $address, $router));\n    }\n```\n\n$router\u307e\u308f\u308a\u306f\u3061\u3087\u3063\u3068\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u306e\u3067\u7121\u8996\u3057\u307e\u3059\u3002\n\nPhpExecutableFinder::find()\u3067 PHP\u306e\u30d0\u30a4\u30ca\u30ea\u306e\u30d1\u30b9\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u96f0\u56f2\u6c17\u3067\u3059\u3002\n\nPhpExecutableFinder\u30af\u30e9\u30b9\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nhttps://github.com/symfony/symfony/blob/2.6/src/Symfony/Component/Process/PhpExecutableFinder.php#L36\n\n```php\n    /**\n     * Finds The PHP executable.\n     *\n     * @param bool $includeArgs Whether or not include command arguments\n     *\n     * @return string|false The PHP executable path or false if it cannot be found\n     */\n    public function find($includeArgs = true)\n    {\n        // HHVM support\n        if (defined('HHVM_VERSION')) {\n            return (false !== ($hhvm = getenv('PHP_BINARY')) ? $hhvm : PHP_BINARY).($includeArgs ? ' '.implode(' ', $this->findArguments()) : '');\n        }\n        // PHP_BINARY return the current sapi executable\n        if (defined('PHP_BINARY') && PHP_BINARY && in_array(PHP_SAPI, array('cli', 'cli-server')) && is_file(PHP_BINARY)) {\n            return PHP_BINARY;\n        }\n        if ($php = getenv('PHP_PATH')) {\n            if (!is_executable($php)) {\n                return false;\n            }\n            return $php;\n        }\n        if ($php = getenv('PHP_PEAR_PHP_BIN')) {\n            if (is_executable($php)) {\n                return $php;\n            }\n        }\n        $dirs = array(PHP_BINDIR);\n        if ('\\\\' === DIRECTORY_SEPARATOR) {\n            $dirs[] = 'C:\\xampp\\php\\\\';\n        }\n        return $this->executableFinder->find('php', false, $dirs);\n    }\n```\n\n\u9577\u3005\u3068\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u304c\u3001HHVM\u3084\u3089Windows\u3084\u3089\u306e\u74b0\u5883\u3067\u3082\u52d5\u304f\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306ehack\u304c\u66f8\u3044\u3066\u3042\u308b\u3060\u3051\u3067\u3001\n\u672c\u8cea\u7684\u306b\u306fPHP CLI\u306e\u30d1\u30b9\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\u3060\u3051\u306e\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\n\u3061\u3087\u3063\u3068\u624b\u5143\u3067\u5b9f\u9a13\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```\n$ php -r 'echo PHP_BINARY . \"\\n\";'\n/opt/php-5.6.8/bin/php\n```\n\n\u3084\u306f\u308a\u305d\u3046\u3067\u3057\u305f\u3002\u5358\u306b`PHP_BINARY`\u5b9a\u6570\u306e\u5024\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\u3060\u3051\u3068\u8003\u3048\u3066\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\n\u306a\u306e\u3067\u3001\n\n```\n        return new ProcessBuilder(array($binary, '-S', $address, $router));\n```\n\n\u306f\n\n```\n        return new ProcessBuilder(array(\"/opt/php-5.6.8/bin/php\", '-S', $address, $router));\n```\n\n\u307f\u305f\u3044\u306a\u3082\u306e\u3060\u3068\u8003\u3048\u308c\u3070\u3088\u3044\u3067\u3059\u306d\u3002\n\n\u3055\u3066\u3001`ProcessBuilder`\u30af\u30e9\u30b9 \u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nhttps://github.com/symfony/symfony/blob/2.6/src/Symfony/Component/Process/ProcessBuilder.php\n\n\u3053\u306e\u30af\u30e9\u30b9\u306f\u30d7\u30ed\u30d1\u30c6\u30a3\u3068getter,setter\u304c\u3042\u308b\u304f\u3089\u3044\u3067\u5927\u3057\u305f\u4ed5\u4e8b\u306f\u3057\u3066\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\u4e3b\u306a\u51e6\u7406\u306fgetProcess()\u3067\u3059\u3002\n\n```php\n    /**\n     * Creates a Process instance and returns it.\n     *\n     * @return Process\n     *\n     * @throws LogicException In case no arguments have been provided\n     */\n    public function getProcess()\n    {\n        if (0 === count($this->prefix) && 0 === count($this->arguments)) {\n            throw new LogicException('You must add() command arguments before calling getProcess().');\n        }\n\n        $options = $this->options;\n\n        $arguments = array_merge($this->prefix, $this->arguments);\n        $script = implode(' ', array_map(array(__NAMESPACE__.'\\\\ProcessUtils', 'escapeArgument'), $arguments));\n\n        if ($this->inheritEnv) {\n            // include $_ENV for BC purposes\n            $env = array_replace($_ENV, $_SERVER, $this->env);\n        } else {\n            $env = $this->env;\n        }\n\n        $process = new Process($script, $this->cwd, $env, $this->input, $this->timeout, $options);\n\n        if ($this->outputDisabled) {\n            $process->disableOutput();\n        }\n\n        return $process;\n    }\n```\n\n\u3072\u3068\u3053\u3068\u3067\u8a00\u3046\u3068new Process\u3057\u3066\u308b\u3060\u3051\u3067\u3059\u306d\u3002\n\u3053\u3053\u3067$script\u5909\u6570\u3092\u6e21\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u306e\u4e2d\u8eab\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u3044\u3064\u3082\u306e\u3088\u3046\u306bvar_dump()\u3092\u3057\u304b\u3051\u3066\u3001\n\n```diff\n+       var_dump($script);exit;\n        $process = new Process($script, $this->cwd, $env, $this->input, $this->timeout, $options);\n```\n\n`app/console run:server`\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n$ ./app/console server:run\nServer running on http://127.0.0.1:8000\n\nQuit the server with CONTROL-C.\nstring(171) \"'/opt/php-5.6.8/bin/php' '-S' '127.0.0.1:8000' '/Users/DQNEO/tmp/2015-05-15/blog/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/config/router_dev.php'\"\n```\n\n\u3075\u3080\u3075\u3080\u3002$script\u306e\u4e2d\u8eab\u306f\u3001\u30d3\u30eb\u30c8\u30a4\u30f3\u30b5\u30fc\u30d0\u3092\u8d77\u52d5\u3059\u308b\u305f\u3081\u306e\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u6587\u5b57\u5217\u3067\u3057\u305f\u3002\n\u306a\u3093\u3068\u306a\u304f\u3084\u308d\u3046\u3068\u3057\u3066\u308b\u3053\u3068\u304c\u60f3\u50cf\u3067\u304d\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u3053\u3053\u3067new\u3055\u308c\u3066\u3044\u308bProcess\u30af\u30e9\u30b9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nhttps://github.com/symfony/symfony/blob/2.6/src/Symfony/Component/Process/Process.php\n\n\u30af\u30e9\u30b9\u30ec\u30d9\u30eb\u30b3\u30e1\u30f3\u30c8\u306b\u3053\u3046\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\n> Process is a thin wrapper around proc_* functions to easily start independent PHP processes.\n\nproc_*\u95a2\u6570\u306e\u30e9\u30c3\u30d1\u30fc\u3067\u3042\u308b\u3068\u3002\n\n\n\u3053\u308c\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u3066\u3001\u5192\u982d\u306b\u66f8\u3044\u305fSymfony\\Bundle\\FrameworkBundle\\Command\\ServerRunCommand\u30af\u30e9\u30b9\u306b\u623b\u3063\u3066\u304d\u307e\u3059\u3002\n\n```php\n        $process = $builder->getProcess();\n        if (OutputInterface::VERBOSITY_VERBOSE > $output->getVerbosity()) {\n            $process->disableOutput();\n        }\n        $this\n            ->getHelper('process')\n            ->run($output, $process, null, null, OutputInterface::VERBOSITY_VERBOSE);\n\n```\n\n`$this->->getHelper('process')->run()`\u306b$process\u304c\u6e21\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u3055\u3066\u3053\u306erun()\u306fProcessHelper\u3068\u3044\u3046\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u3088\u3046\u3067\u3059\u3002\n\u3061\u3087\u3063\u3068\u3057\u3093\u3069\u304f\u306a\u3063\u3066\u304d\u305fw\u3000\u306e\u3067\u305d\u3053\u306f\u98db\u3070\u3057\u307e\u3059\u3002\n\nProcess\u30af\u30e9\u30b9\u306e\u3069\u3053\u3067\u5b9f\u969b\u306e\u30b3\u30de\u30f3\u30c9\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u7b54\u3048\u306f\u3059\u3070\u308a\u3053\u3053\u3067\u3001\n\nhttps://github.com/symfony/symfony/blob/2.6/src/Symfony/Component/Process/Process.php#L289\n\n```php\n    /**\n     * Starts the process and returns after writing the input to STDIN.\n     *\n     * This method blocks until all STDIN data is sent to the process then it\n     * returns while the process runs in the background.\n     *\n     * The termination of the process can be awaited with wait().\n     *\n     * The callback receives the type of output (out or err) and some bytes from\n     * the output in real-time while writing the standard input to the process.\n     * It allows to have feedback from the independent process during execution.\n     * If there is no callback passed, the wait() method can be called\n     * with true as a second parameter then the callback will get all data occurred\n     * in (and since) the start call.\n     *\n     * @param callable|null $callback A PHP callback to run whenever there is some\n     *                                output available on STDOUT or STDERR\n     *\n     * @throws RuntimeException When process can't be launched\n     * @throws RuntimeException When process is already running\n     * @throws LogicException   In case a callback is provided and output has been disabled\n     */\n    public function start($callback = null)\n    {\n        if ($this->isRunning()) {\n            throw new RuntimeException('Process is already running');\n        }\n        if ($this->outputDisabled && null !== $callback) {\n            throw new LogicException('Output has been disabled, enable it to allow the use of a callback.');\n        }\n        $this->resetProcessData();\n        $this->starttime = $this->lastOutputTime = microtime(true);\n        $this->callback = $this->buildCallback($callback);\n        $descriptors = $this->getDescriptors();\n        $commandline = $this->commandline;\n        if ('\\\\' === DIRECTORY_SEPARATOR && $this->enhanceWindowsCompatibility) {\n            $commandline = 'cmd /V:ON /E:ON /C \"('.$commandline.')';\n            foreach ($this->processPipes->getFiles() as $offset => $filename) {\n                $commandline .= ' '.$offset.'>'.ProcessUtils::escapeArgument($filename);\n            }\n            $commandline .= '\"';\n            if (!isset($this->options['bypass_shell'])) {\n                $this->options['bypass_shell'] = true;\n            }\n        }\n        $this->process = proc_open($commandline, $descriptors, $this->processPipes->pipes, $this->cwd, $this->env, $this->options);\n        if (!is_resource($this->process)) {\n            throw new RuntimeException('Unable to launch a new process.');\n        }\n        $this->status = self::STATUS_STARTED;\n        if ($this->tty) {\n            return;\n        }\n        $this->updateStatus(false);\n        $this->checkTimeout();\n    }\n```\n\n\u3053\u306eproc_open()\u304c\u30b5\u30fc\u30d0\u3092\u8d77\u52d5\u3057\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\n\n```\n        $this->process = proc_open($commandline, $descriptors, $this->processPipes->pipes, $this->cwd, $this->env, $this->options);\n```\n\n`$commandline`\u3068\u3044\u3046\u306e\u306f\u4e0a\u3067\u8aac\u660e\u3057\u305f`$script`\u5909\u6570\u3068\u540c\u3058\u3082\u306e\u3067\u3001\u30d3\u30eb\u30c8\u30a4\u30f3\u30b5\u30fc\u30d0\u3092\u5b9f\u884c\u3059\u308b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u6587\u5b57\u5217\u3067\u3059\u3002\n\u5b9f\u969b\u306e\u5024\u306f\u3001`'/opt/php-5.6.8/bin/php' '-S' '127.0.0.1:8000' '/Users/DQNEO/tmp/2015-05-15/blog/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/config/router_dev.php'`\u3068\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n# \u307e\u3068\u3081\n\n`app/console server:run`\u306e\u5b9f\u4f53\u306f\u3001`proc_open('php -S 127.0.0.1:8000')`\u3067\u3042\u308b\n\n\u3061\u306a\u307f\u306bproc_open\u306f\u4f55\u304b\u3068\u3044\u3046\u3068\u3001\u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u3068\u304b\u30d1\u30a4\u30d7\u3068\u304b\u305d\u3046\u3044\u3046\u3084\u3064\u3067\u3059\u3002\n\nhttp://php.net/proc_open\n\n\u53c2\u8003\u307e\u3067\u306b\u3001`app/console server:run`\u3057\u3066\u304b\u3089`proc_open()`\u306b\u3044\u305f\u308b\u307e\u3067\u306e\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\n#0  Symfony\\Component\\Process\\Process->start()\n#1  Symfony\\Component\\Process\\Process->run()\n#2  Symfony\\Component\\Console\\Helper\\ProcessHelper->run()\n#3  Symfony\\Bundle\\FrameworkBundle\\Command\\ServerRunCommand->execute()\n#4  Symfony\\Component\\Console\\Command\\Command->run()\n#5  Symfony\\Component\\Console\\Application->doRunCommand()\n#6  Symfony\\Component\\Console\\Application->doRun()\n#7  Symfony\\Bundle\\FrameworkBundle\\Console\\Application->doRun()\n#8  Symfony\\Component\\Console\\Application->run()\n```\n\n# \u611f\u60f3\n\n\u305f\u304b\u304c`php -S`\u3067\u30b5\u30fc\u30d0\u8d77\u52d5\u3059\u308b\u306e\u306b\u3001\u3053\u3093\u306a\u306b\u5927\u91cf\u306e\u30af\u30e9\u30b9\u3092\u304b\u3076\u305b\u308b\u5fc5\u8981\u306f\u3042\u308b\u306e\u3060\u308d\u3046\u304b...\n\u89e3\u8aad\u3057\u306a\u304c\u3089\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304f\u306e\u306b\u534a\u65e5\u304b\u304b\u308a\u307e\u3057\u305fw\n\n\u6b63\u76f4\u3001\u4e0b\u8a18\u3067\u540c\u3058\u3053\u3068\u3067\u304d\u308b\u3084\u3093\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n```\nphp -S localhost:8000 -t web/app_dev.php\n```\n\n"}