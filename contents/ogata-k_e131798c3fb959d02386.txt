{"tags": ["python3", "wxpython", "GUI"], "context": "\n\n\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306e\u30b3\u30fc\u30c9\nPython\u3082GUI\u4f5c\u6210\u3082\u304b\u306a\u308a\u521d\u5fc3\u8005\u306b\u8fd1\u304f\u3001\u53c2\u7167\u6e21\u3057\u3082\u30ec\u30a4\u30a2\u30a6\u30c8\u3068\u6a5f\u80fd\u306e\u5206\u5272\u3082\u3088\u304f\u77e5\u3089\u306a\u3044\u4f5c\u8005\u3067\u3059\u304c\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u305f\u3063\u305f200\u884c\u7a0b\u5ea6\u306e\u30b3\u30fc\u30c9\u3067\u3059\u306e\u3067\u3053\u3053\u306b\u8cbc\u308a\u4ed8\u3051\u307e\u3059\u3002\u521d\u5fc3\u8005\u306a\u306e\u3067\u306a\u3093\u304b\u5fc3\u914d\u306b\u306a\u3063\u3066copy\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u304b\u4f7f\u3063\u3066\u307e\u3059\u304c\u8a31\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nLifeGame.py\nimport wx\nimport copy\nfrom numpy import random\n\n# \u5347\u76ee\u306e\u884c\u6570\u3001\u5217\u6570\u306e\u500b\u6570\nROW_NUM = 40\nCOL_NUM = 40\n\nDEAD = 0\nALIVE = 1\nWALL = 2\nSTATUS = [DEAD, ALIVE, WALL]\nSTATUS_COLOUR = [wx.WHITE, wx.GREEN, wx.BLACK]\n\n\nclass GridPanel(wx.Panel):\n    def __init__(self, parent, LifeItems, id=wx.ID_ANY):\n        wx.Panel.__init__(self, parent, id)\n        # self.SetBackgroundColour(\"WHITE\")\n        self.SetBackgroundStyle(wx.BG_STYLE_CUSTOM)\n        self.Bind(wx.EVT_SIZE, self.on_size)\n        self.Bind(wx.EVT_PAINT, self.on_paint)\n        self.items = LifeItems\n        self.dc = wx.WindowDC(self)\n        self.Bind(wx.EVT_LEFT_DOWN, self.on_mouce)\n        self.Bind(wx.EVT_RIGHT_DOWN, self.on_makewall)\n        self.RunFlag = 0\n\n\n    def on_size(self, event):\n        event.Skip()\n        self.Refresh()\n\n    def on_paint(self, event):\n        #print(w,h)\n        self.dc.Clear()\n        self.ItemPaint()\n\n    def ItemPaint(self):\n        w, h = self.GetClientSize()\n        x_size = w / COL_NUM\n        y_size = h / ROW_NUM\n        for i in range(ROW_NUM):\n            for j in range(COL_NUM):\n                self.PaintGrid(i, j, x_size, y_size)\n        # print(\"draw\")\n\n    def PaintGrid(self, row, col, x_size, y_size):\n        c = STATUS_COLOUR[self.items.GetLife(row, col)]\n        self.dc.SetPen(wx.Pen(wx.LIGHT_GREY))\n        self.dc.SetBrush(wx.Brush(c))\n        self.dc.DrawRectangle(col * x_size, row * y_size, x_size, y_size)\n\n\n    def NextPaint(self):\n        self.items.Change()\n        self.ItemPaint()\n\n    def SetRandom(self, event):\n        print(\"push random\")\n        if not self.RunFlag:\n            print(\"random\")\n            for i in range(ROW_NUM):\n                for j in range(COL_NUM):\n                    self.items.items[i][j].SetRandom()\n            self.ItemPaint()\n        else:\n            print(\"can't random\")\n\n    def SetInit(self, event):\n        print(\"push reset\")\n        if not self.RunFlag:\n            print(\"reset\")\n            for i in range(ROW_NUM):\n                for j in range(COL_NUM):\n                    self.items.items[i][j].SetInit()\n            self.ItemPaint()\n        else:\n            print(\"can't reset\")\n\n    def on_makewall(self, event):\n        print(\"make wall\")\n        if not self.RunFlag:\n            mx, my = event.GetPosition()\n            px, py = self.GetClientSize()\n            itemx, itemy = px/ROW_NUM, py/COL_NUM\n            i, j = int(my/itemy), int(mx/itemx)\n            print(\"make wall from (\" + str(i)+\",\"+str(j)+\")\")\n            self.items.items[i][j].ChangeStatus(WALL)\n            self.items.items[i][j].SetStatus()\n            self.ItemPaint()\n        else:\n            print(\"can't make wall\")\n\n\n    def on_mouce(self, event):\n        print(\"push mouce to change\")\n        if not self.RunFlag:\n            #print(event.GetPosition())\n            mx, my = event.GetPosition()\n            px, py = self.GetClientSize()\n            itemx, itemy = px/ROW_NUM, py/COL_NUM\n            i, j = int(my/itemy), int(mx/itemx)\n            print(\"change(\" + str(i)+\",\"+str(j)+\")\")\n            life = self.items.GetLife(i, j)\n            if life == DEAD:\n                self.items.items[i][j].ChangeStatus(ALIVE)\n            elif life == ALIVE:\n                self.items.items[i][j].ChangeStatus(DEAD)\n            else:\n                self.items.items[i][j].ChangeStatus(DEAD)\n            self.items.items[i][j].SetStatus()\n            self.ItemPaint()\n        else:\n            print(\"can't change\")\n\n    def on_NextPaint(self, event):\n        print(\"push step\")\n        if not self.RunFlag:\n            print(\"step\")\n            self.NextPaint()\n        else:\n            print(\"can't step\")\n\nclass Life:\n    def __init__(self, Status):\n        self.life = Status\n        self.nextlife = Status\n\n    def ChangeStatus(self, Status):\n        # \u72b6\u614b\u3092\uff10\u304b\uff11\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u305f\u3081\u3053\u306e\u3088\u3046\u306b\u3067\u304d\u308b\n        self.nextlife = Status\n\n    def NoChange(self):\n        self.nextlife = copy.copy(self.life)\n\n    def SetStatus(self):\n        self.life = copy.copy(self.nextlife)\n\n    def SetRandom(self):\n        self.life = random.choice(STATUS, p=[0.49, 0.49, 0.02])\n\n    def SetInit(self):\n        self.life = DEAD\n\n\nclass LifeItems:\n    def __init__(self):\n        self.items = [[Life(DEAD) for j in range(COL_NUM)] for i in range(ROW_NUM)]\n\n    def Change(self):\n        # \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306e\u30eb\u30fc\u30eb\u8a18\u8ff0\u90e8\u5206\n        for i in range(ROW_NUM):\n            for j in range(COL_NUM):\n                c0, c1, c2 = self.Count(i, j)\n                life = self.GetLife(i, j)\n                if life == DEAD:\n                    if c1==3:\n                        self.items[i][j].ChangeStatus(ALIVE)\n                    else:\n                        self.items[i][j].NoChange()\n                elif life == ALIVE:\n                    if c1<=1 or c1>=4:\n                        self.items[i][j].ChangeStatus(DEAD)\n                    else:\n                        self.items[i][j].NoChange()\n                else:\n                    self.items[i][j].NoChange()\n                #print(c)\n        self.NextLife()\n\n    def NextLife(self):\n        for i in range(ROW_NUM):\n            for j in range(COL_NUM):\n                self.items[i][j].SetStatus()\n\n    def GetLife(self, row, col):\n        return self.items[row][col].life\n\n    def Count(self, row, col):\n        count0 = 0\n        count1 = 0\n        count2 = 0\n        #print(\"DoA\\trow\\tcol\\tnum\")\n        #print(str(self.GetLife(row, col))+\"\\t\"+str(row)+\"\\t\"+str(col), end=\"\\t\")\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                # print(i, j)\n                if i==0 and j==0:\n                    continue\n                if row+i<0 or col+j<0 or row+i>=ROW_NUM or col+j>=COL_NUM:\n                    continue\n                life =  self.GetLife(row+i, col+j)\n                if life == DEAD:\n                    count0+=1\n                elif life == ALIVE:\n                    count1+=1\n                else:\n                    count2+=1\n                # print(row+i, col+j)\n        return count0, count1, count2\n\n\nclass LifeFrame(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None, size=(500, 600))\n        self.Center()\n        self.SetTitle(u\"\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\")\n        print(\"=\"*30)\n        print(\"\")\n        print(str(ROW_NUM)+\"x\"+str(COL_NUM))\n\n\n        # \u30d5\u30ec\u30fc\u30e0\u306e\u30d9\u30fc\u30b9\n        base = wx.Panel(self)\n        layout = wx.BoxSizer(wx.VERTICAL)\n        base.SetSizer(layout)\n\n        # \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306e\u30d1\u30cd\u30eb\n        Items = LifeItems()\n        self.gpanel = GridPanel(base, Items)\n        layout.Add(self.gpanel, flag=wx.EXPAND | wx.ALL, border=5, proportion=1)\n\n        # \u4e0b\u534a\u5206\u306e\u30dc\u30bf\u30f3\u7fa4\u7528\u306e\u8a2d\u5b9a\n        hlayout = wx.BoxSizer(wx.HORIZONTAL)\n        layout.Add(hlayout, flag=wx.EXPAND)\n        # \u5b9f\u884c\u7528\u306e\u30dc\u30bf\u30f3\n        run_btn = wx.Button(base, label=\"start\")\n        run_btn.Bind(wx.EVT_BUTTON, self.ChangeLabel)\n        hlayout.Add(run_btn, proportion=1)\n        # \u30b9\u30c6\u30c3\u30d7\u5b9f\u884c\u7528\u306e\u30dc\u30bf\u30f3\n        step_btn = wx.Button(base, label=\"step\")\n        step_btn.Bind(wx.EVT_BUTTON, self.gpanel.on_NextPaint)\n        hlayout.Add(step_btn, proportion=1)\n        # \u30e9\u30f3\u30c0\u30e0\u8a2d\u7f6e\u7528\u306e\u30dc\u30bf\u30f3\n        rand_btn = wx.Button(base, label=\"random\")\n        rand_btn.Bind(wx.EVT_BUTTON, self.gpanel.SetRandom)\n        hlayout.Add(rand_btn, proportion=1)\n        # \u30ea\u30bb\u30c3\u30c8\u7528\u306e\u30dc\u30bf\u30f3\n        reset_btn = wx.Button(base, label=\"reset\")\n        reset_btn.Bind(wx.EVT_BUTTON, self.gpanel.SetInit)\n        hlayout.Add(reset_btn, proportion=1)\n\n        self.Show()\n\n    def ChangeLabel(self, event):\n        window = event.GetEventObject()\n        if not self.gpanel.RunFlag:\n            self.gpanel.RunFlag = 1\n            print(\"push start\")\n            window.SetLabel(\"stop\")\n        else:\n            self.gpanel.RunFlag = 0\n            print(\"push stop\")\n            window.SetLabel(\"start\")\n        self.Paint()\n\n    def Paint(self):\n        print(\"paint\")\n        if self.gpanel.RunFlag:\n            print(\"paint if\")\n            self.gpanel.NextPaint()\n            wx.CallLater(100, self.Paint)\n\n\napp = wx.App(True, \"log.txt\")\nframe = LifeFrame()\napp.MainLoop()\n\n\n\n\u4ed5\u69d8\n\u7c21\u5358\u306b\u8a00\u3048\u3070\u5b9f\u884c\u6642\u306b\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u30dc\u30bf\u30f3(start/stop, random, reset)\u306b\u66f8\u3044\u3066\u3042\u308b\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u5de6\u30af\u30ea\u30c3\u30af\u3067\u751f\u6b7b\u306e\u5207\u308a\u66ff\u3048\u3001\u53f3\u30af\u30ea\u30c3\u30af\u3067\u751f\u547d\u304c\u6d3b\u52d5\u3067\u304d\u306a\u3044\u58c1\u306e\u4f5c\u6210(\u751f\u6b7b\u306e\u30ab\u30a6\u30f3\u30c8\u306b\u5165\u308a\u307e\u305b\u3093)\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306fstart/stop\u30dc\u30bf\u30f3\u304cstart\u3068\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002\u307e\u305f\u307e\u3060\u4eca\u5f8c\u6539\u9020\u3057\u3066\u3044\u304f\u4e88\u5b9a\u306a\u306e\u3067log.txt\u30d5\u30a1\u30a4\u30eb\u306b\u5b9f\u884c\u72b6\u6cc1\u304c\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u3082\u3057\u51fa\u529b\u304c\u307b\u3057\u304f\u306a\u3044\u5834\u5408\u306fprint\u95a2\u6570\u3092\u3059\u3079\u3066\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066wx.App(True, \"log.txt\")\u3092wx.App(False)\u306b\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4eca\u5f8c\n\u3053\u306e\u30b3\u30fc\u30c9\u306f\u7121\u99c4\u304c\u591a\u3044\u305f\u3081\u901f\u5ea6\u304c\u9045\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u6539\u826f\u306f\u3057\u3066\u3044\u304d\u305f\u3044\u3067\u3059\u3002\n\u3067\u3059\u306e\u3067\u300c\u51fa\u6765\u308c\u3070\u3053\u3046\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u300d\u306a\u3069\u306e\u30b3\u30e1\u30f3\u30c8\u306f\u3068\u3066\u3082\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n# \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306e\u30b3\u30fc\u30c9\nPython\u3082GUI\u4f5c\u6210\u3082\u304b\u306a\u308a\u521d\u5fc3\u8005\u306b\u8fd1\u304f\u3001\u53c2\u7167\u6e21\u3057\u3082\u30ec\u30a4\u30a2\u30a6\u30c8\u3068\u6a5f\u80fd\u306e\u5206\u5272\u3082\u3088\u304f\u77e5\u3089\u306a\u3044\u4f5c\u8005\u3067\u3059\u304c\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u305f\u3063\u305f200\u884c\u7a0b\u5ea6\u306e\u30b3\u30fc\u30c9\u3067\u3059\u306e\u3067\u3053\u3053\u306b\u8cbc\u308a\u4ed8\u3051\u307e\u3059\u3002\u521d\u5fc3\u8005\u306a\u306e\u3067\u306a\u3093\u304b\u5fc3\u914d\u306b\u306a\u3063\u3066copy\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u304b\u4f7f\u3063\u3066\u307e\u3059\u304c\u8a31\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```python:LifeGame.py\nimport wx\nimport copy\nfrom numpy import random\n\n# \u5347\u76ee\u306e\u884c\u6570\u3001\u5217\u6570\u306e\u500b\u6570\nROW_NUM = 40\nCOL_NUM = 40\n\nDEAD = 0\nALIVE = 1\nWALL = 2\nSTATUS = [DEAD, ALIVE, WALL]\nSTATUS_COLOUR = [wx.WHITE, wx.GREEN, wx.BLACK]\n\n\nclass GridPanel(wx.Panel):\n    def __init__(self, parent, LifeItems, id=wx.ID_ANY):\n        wx.Panel.__init__(self, parent, id)\n        # self.SetBackgroundColour(\"WHITE\")\n        self.SetBackgroundStyle(wx.BG_STYLE_CUSTOM)\n        self.Bind(wx.EVT_SIZE, self.on_size)\n        self.Bind(wx.EVT_PAINT, self.on_paint)\n        self.items = LifeItems\n        self.dc = wx.WindowDC(self)\n        self.Bind(wx.EVT_LEFT_DOWN, self.on_mouce)\n        self.Bind(wx.EVT_RIGHT_DOWN, self.on_makewall)\n        self.RunFlag = 0\n\n\n    def on_size(self, event):\n        event.Skip()\n        self.Refresh()\n\n    def on_paint(self, event):\n        #print(w,h)\n        self.dc.Clear()\n        self.ItemPaint()\n\n    def ItemPaint(self):\n        w, h = self.GetClientSize()\n        x_size = w / COL_NUM\n        y_size = h / ROW_NUM\n        for i in range(ROW_NUM):\n            for j in range(COL_NUM):\n                self.PaintGrid(i, j, x_size, y_size)\n        # print(\"draw\")\n\n    def PaintGrid(self, row, col, x_size, y_size):\n        c = STATUS_COLOUR[self.items.GetLife(row, col)]\n        self.dc.SetPen(wx.Pen(wx.LIGHT_GREY))\n        self.dc.SetBrush(wx.Brush(c))\n        self.dc.DrawRectangle(col * x_size, row * y_size, x_size, y_size)\n       \n\n    def NextPaint(self):\n        self.items.Change()\n        self.ItemPaint()\n\n    def SetRandom(self, event):\n        print(\"push random\")\n        if not self.RunFlag:\n            print(\"random\")\n            for i in range(ROW_NUM):\n                for j in range(COL_NUM):\n                    self.items.items[i][j].SetRandom()\n            self.ItemPaint()\n        else:\n            print(\"can't random\")\n\n    def SetInit(self, event):\n        print(\"push reset\")\n        if not self.RunFlag:\n            print(\"reset\")\n            for i in range(ROW_NUM):\n                for j in range(COL_NUM):\n                    self.items.items[i][j].SetInit()\n            self.ItemPaint()\n        else:\n            print(\"can't reset\")\n\n    def on_makewall(self, event):\n        print(\"make wall\")\n        if not self.RunFlag:\n            mx, my = event.GetPosition()\n            px, py = self.GetClientSize()\n            itemx, itemy = px/ROW_NUM, py/COL_NUM\n            i, j = int(my/itemy), int(mx/itemx)\n            print(\"make wall from (\" + str(i)+\",\"+str(j)+\")\")\n            self.items.items[i][j].ChangeStatus(WALL)\n            self.items.items[i][j].SetStatus()\n            self.ItemPaint()\n        else:\n            print(\"can't make wall\")\n\n\n    def on_mouce(self, event):\n        print(\"push mouce to change\")\n        if not self.RunFlag:\n            #print(event.GetPosition())\n            mx, my = event.GetPosition()\n            px, py = self.GetClientSize()\n            itemx, itemy = px/ROW_NUM, py/COL_NUM\n            i, j = int(my/itemy), int(mx/itemx)\n            print(\"change(\" + str(i)+\",\"+str(j)+\")\")\n            life = self.items.GetLife(i, j)\n            if life == DEAD:\n                self.items.items[i][j].ChangeStatus(ALIVE)\n            elif life == ALIVE:\n                self.items.items[i][j].ChangeStatus(DEAD)\n            else:\n                self.items.items[i][j].ChangeStatus(DEAD)\n            self.items.items[i][j].SetStatus()\n            self.ItemPaint()\n        else:\n            print(\"can't change\")\n\n    def on_NextPaint(self, event):\n        print(\"push step\")\n        if not self.RunFlag:\n            print(\"step\")\n            self.NextPaint()\n        else:\n            print(\"can't step\")\n\nclass Life:\n    def __init__(self, Status):\n        self.life = Status\n        self.nextlife = Status\n\n    def ChangeStatus(self, Status):\n        # \u72b6\u614b\u3092\uff10\u304b\uff11\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u305f\u3081\u3053\u306e\u3088\u3046\u306b\u3067\u304d\u308b\n        self.nextlife = Status\n        \n    def NoChange(self):\n        self.nextlife = copy.copy(self.life)\n\n    def SetStatus(self):\n        self.life = copy.copy(self.nextlife)\n\n    def SetRandom(self):\n        self.life = random.choice(STATUS, p=[0.49, 0.49, 0.02])\n\n    def SetInit(self):\n        self.life = DEAD\n\n\nclass LifeItems:\n    def __init__(self):\n        self.items = [[Life(DEAD) for j in range(COL_NUM)] for i in range(ROW_NUM)]\n\n    def Change(self):\n        # \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306e\u30eb\u30fc\u30eb\u8a18\u8ff0\u90e8\u5206\n        for i in range(ROW_NUM):\n            for j in range(COL_NUM):\n                c0, c1, c2 = self.Count(i, j)\n                life = self.GetLife(i, j)\n                if life == DEAD:\n                    if c1==3:\n                        self.items[i][j].ChangeStatus(ALIVE)\n                    else:\n                        self.items[i][j].NoChange()\n                elif life == ALIVE:\n                    if c1<=1 or c1>=4:\n                        self.items[i][j].ChangeStatus(DEAD)\n                    else:\n                        self.items[i][j].NoChange()\n                else:\n                    self.items[i][j].NoChange()\n                #print(c)\n        self.NextLife()\n\n    def NextLife(self):\n        for i in range(ROW_NUM):\n            for j in range(COL_NUM):\n                self.items[i][j].SetStatus()\n\n    def GetLife(self, row, col):\n        return self.items[row][col].life\n\n    def Count(self, row, col):\n        count0 = 0\n        count1 = 0\n        count2 = 0\n        #print(\"DoA\\trow\\tcol\\tnum\")\n        #print(str(self.GetLife(row, col))+\"\\t\"+str(row)+\"\\t\"+str(col), end=\"\\t\")\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                # print(i, j)\n                if i==0 and j==0:\n                    continue\n                if row+i<0 or col+j<0 or row+i>=ROW_NUM or col+j>=COL_NUM:\n                    continue\n                life =  self.GetLife(row+i, col+j)\n                if life == DEAD:\n                    count0+=1\n                elif life == ALIVE:\n                    count1+=1\n                else:\n                    count2+=1\n                # print(row+i, col+j)\n        return count0, count1, count2\n\n\nclass LifeFrame(wx.Frame):\n    def __init__(self):\n        wx.Frame.__init__(self, None, size=(500, 600))\n        self.Center()\n        self.SetTitle(u\"\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\")\n        print(\"=\"*30)\n        print(\"\")\n        print(str(ROW_NUM)+\"x\"+str(COL_NUM))\n\n\n        # \u30d5\u30ec\u30fc\u30e0\u306e\u30d9\u30fc\u30b9\n        base = wx.Panel(self)\n        layout = wx.BoxSizer(wx.VERTICAL)\n        base.SetSizer(layout)\n\n        # \u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306e\u30d1\u30cd\u30eb\n        Items = LifeItems()\n        self.gpanel = GridPanel(base, Items)\n        layout.Add(self.gpanel, flag=wx.EXPAND | wx.ALL, border=5, proportion=1)\n\n        # \u4e0b\u534a\u5206\u306e\u30dc\u30bf\u30f3\u7fa4\u7528\u306e\u8a2d\u5b9a\n        hlayout = wx.BoxSizer(wx.HORIZONTAL)\n        layout.Add(hlayout, flag=wx.EXPAND)\n        # \u5b9f\u884c\u7528\u306e\u30dc\u30bf\u30f3\n        run_btn = wx.Button(base, label=\"start\")\n        run_btn.Bind(wx.EVT_BUTTON, self.ChangeLabel)\n        hlayout.Add(run_btn, proportion=1)\n        # \u30b9\u30c6\u30c3\u30d7\u5b9f\u884c\u7528\u306e\u30dc\u30bf\u30f3\n        step_btn = wx.Button(base, label=\"step\")\n        step_btn.Bind(wx.EVT_BUTTON, self.gpanel.on_NextPaint)\n        hlayout.Add(step_btn, proportion=1)\n        # \u30e9\u30f3\u30c0\u30e0\u8a2d\u7f6e\u7528\u306e\u30dc\u30bf\u30f3\n        rand_btn = wx.Button(base, label=\"random\")\n        rand_btn.Bind(wx.EVT_BUTTON, self.gpanel.SetRandom)\n        hlayout.Add(rand_btn, proportion=1)\n        # \u30ea\u30bb\u30c3\u30c8\u7528\u306e\u30dc\u30bf\u30f3\n        reset_btn = wx.Button(base, label=\"reset\")\n        reset_btn.Bind(wx.EVT_BUTTON, self.gpanel.SetInit)\n        hlayout.Add(reset_btn, proportion=1)\n\n        self.Show()\n\n    def ChangeLabel(self, event):\n        window = event.GetEventObject()\n        if not self.gpanel.RunFlag:\n            self.gpanel.RunFlag = 1\n            print(\"push start\")\n            window.SetLabel(\"stop\")\n        else:\n            self.gpanel.RunFlag = 0\n            print(\"push stop\")\n            window.SetLabel(\"start\")\n        self.Paint()\n\n    def Paint(self):\n        print(\"paint\")\n        if self.gpanel.RunFlag:\n            print(\"paint if\")\n            self.gpanel.NextPaint()\n            wx.CallLater(100, self.Paint)\n\n\napp = wx.App(True, \"log.txt\")\nframe = LifeFrame()\napp.MainLoop()\n```\n\n# \u4ed5\u69d8\n\u7c21\u5358\u306b\u8a00\u3048\u3070\u5b9f\u884c\u6642\u306b\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u30dc\u30bf\u30f3(start/stop, random, reset)\u306b\u66f8\u3044\u3066\u3042\u308b\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u5de6\u30af\u30ea\u30c3\u30af\u3067\u751f\u6b7b\u306e\u5207\u308a\u66ff\u3048\u3001\u53f3\u30af\u30ea\u30c3\u30af\u3067\u751f\u547d\u304c\u6d3b\u52d5\u3067\u304d\u306a\u3044\u58c1\u306e\u4f5c\u6210(\u751f\u6b7b\u306e\u30ab\u30a6\u30f3\u30c8\u306b\u5165\u308a\u307e\u305b\u3093)\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306fstart/stop\u30dc\u30bf\u30f3\u304cstart\u3068\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002\u307e\u305f\u307e\u3060\u4eca\u5f8c\u6539\u9020\u3057\u3066\u3044\u304f\u4e88\u5b9a\u306a\u306e\u3067log.txt\u30d5\u30a1\u30a4\u30eb\u306b\u5b9f\u884c\u72b6\u6cc1\u304c\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u3082\u3057\u51fa\u529b\u304c\u307b\u3057\u304f\u306a\u3044\u5834\u5408\u306fprint\u95a2\u6570\u3092\u3059\u3079\u3066\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066wx.App(True, \"log.txt\")\u3092wx.App(False)\u306b\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u4eca\u5f8c\n\u3053\u306e\u30b3\u30fc\u30c9\u306f\u7121\u99c4\u304c\u591a\u3044\u305f\u3081\u901f\u5ea6\u304c\u9045\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u6539\u826f\u306f\u3057\u3066\u3044\u304d\u305f\u3044\u3067\u3059\u3002\n\u3067\u3059\u306e\u3067\u300c\u51fa\u6765\u308c\u3070\u3053\u3046\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u300d\u306a\u3069\u306e\u30b3\u30e1\u30f3\u30c8\u306f\u3068\u3066\u3082\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n"}