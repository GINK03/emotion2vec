{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306f Kotlin Advent Calendar 2015 \u306e5\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u6628\u65e5\u306f @daneko0123\u3055\u3093 \u306e retrolambda - Android\u3092Kotlin\u3068Retrolamda+Lombok\u3068\u3067\u4f5c\u308b\u5834\u5408\u306e\u6bd4\u8f03\u3067\u3057\u305f\u3002\n\n\u306f\u3058\u3081\u306b\nKotlin\u3067Android\u30a2\u30d7\u30ea\u3092\u66f8\u3044\u3066\u3044\u308b\u3068\u697d\u3057\u304f\u306a\u308a\u307e\u3059\u306d\u3002\n\u3067\u3082\u3001\u3061\u3087\u3063\u3068\u672c\u683c\u7684\u306a\u30a2\u30d7\u30ea\u3092\u4f5c\u308d\u3046\u3068\u601d\u3046\u3068\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3082\u6b32\u3057\u304f\u306a\u3063\u3066\u304d\u307e\u3059\u3002\n\u3060\u3051\u3069\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306a\u3093\u3066\u5b9f\u88c5\u3057\u305f\u3053\u3068\u7121\u3044\u3057...Kotlin\u3067\u66f8\u304d\u305f\u3044\u3057...\u3068\u3044\u3046\u3042\u306a\u305f(\u79c1\u306e\u3053\u3068\u3067\u3059)\u3067\u3082\u304a\u6c17\u8efd\u306b\u59cb\u3081\u3089\u308c\u308b\u74b0\u5883Google App Engine (Google Cloud Endpoints) \u3067\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3092\u69cb\u7bc9\u3057\u3066\u307f\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001Google\u30a2\u30ab\u30a6\u30f3\u30c8\u3067OAuth\u8a8d\u8a3c\u3057\u305f\u30e6\u30fc\u30b6\u304c\u66f8\u304d\u8fbc\u3080\u63b2\u793a\u677f\u98a8\u306a\u3082\u306e\u3092\u4f5c\u308b\u3068\u3044\u3046\u60f3\u5b9a\u3067\u9032\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u74b0\u5883\n\u3053\u306e\u8a18\u4e8b\u306f\u4e0b\u8a18\u306e\u74b0\u5883\u3067\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\nAndroid Studio 2.0 Preview 2\nKotlin 1.0.0-beta-3594\n\n\nGAE\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8ffd\u52a0\nAndroid Studio\u3067GAE\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5c0e\u5165\u3059\u308b\u65b9\u6cd5\u306f\u8272\u3005\u306a\u65b9\u304c\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nModule Type \u306f App Engine Java Endpoints Module \u3067\u3059\u3002\n\u53c2\u8003\nAndroidStudio - Android Studio + Google App Engine \u3067\u304a\u624b\u8efd\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u30b5\u30fc\u30d0\u69cb\u7bc9 - Qiita\n\nGAE\u30e2\u30b8\u30e5\u30fc\u30eb\u306bKotlin\u3092\u8a2d\u5b9a\n\u307e\u305a\u306f\u3001\u4f5c\u6210\u3057\u305fbackend\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u81ea\u52d5\u3067\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u9069\u5f53\u306aJava\u30bd\u30fc\u30b9\u3092Shift+Command+K\u3067Kotlin\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u3001\u30e1\u30cb\u30e5\u30fc\u304b\u3089Tools -> Kotlin -> Configure Kotlin in Project\u3068\u9078\u629e\u3057build.gradle\u3092Kotlin\u7528\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001\u3053\u306e\u307e\u307e\u3067\u306fAndroid\u5411\u3051\u306e\u8a2d\u5b9a\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u5c11\u3057\u624b\u3092\u52a0\u3048\u307e\u3059\u3002\n\nkotlin-android\u3092kotlin\u306b\u5909\u66f4\nAndroid\u3067\u306f\u306a\u304f\u901a\u5e38\u306eJava\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306a\u306e\u3067kotlin-android\u304b\u3089kotlin\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\nbuild.gradle\n//apply plugin: 'kotlin-android'\napply plugin: 'kotlin'\n\n\n\nandroid\u30d6\u30ed\u30c3\u30af\u3092\u524a\u9664\nandroid\u30d6\u30ed\u30c3\u30af\u3082Android\u3067\u306f\u306a\u3044\u306e\u3067\u524a\u9664\u3057\u307e\u3059\u3002\n\nbuild.gradle\n//android {\n//    sourceSets {\n//        main.java.srcDirs += 'src/main/kotlin'\n//    }\n//}\n\n\n\u3053\u308c\u3067GAE\u3067Kotlin\u3092\u4f7f\u3046\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\nEntity\u306e\u4f5c\u6210\n\u4eca\u56de\u306f\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306bObjectify\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nObjectify\u3067\u4f7f\u7528\u3059\u308bEntity\u3092\u307f\u3093\u306a\u5927\u597d\u304ddata\u30af\u30e9\u30b9\u3067\u66f8\u304d\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001Objectify\u306eEntity\u306f\u5f15\u6570\u306a\u3057\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u4eca\u56de\u306f\u666e\u901a\u306e\u30af\u30e9\u30b9\u3067\u4f5c\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n\u63b2\u793a\u677f\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\n@Id\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u305fLong\u578b\u304cnull\u306e\u3068\u304d\u4fdd\u5b58\u6642\u306b\u81ea\u52d5\u3067ID\u3092\u751f\u6210\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001id\u306fNullable & null\u3067\u521d\u671f\u5316\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nBoardMessage.kt\n@Entity\nclass BoardMessage() {\n    @Id var id: Long? = null\n    lateinit var message: String\n    lateinit @Index var date: Date\n    lateinit @Index var user: Ref<BoardUser>\n}\n\n\n\n\u63b2\u793a\u677f\u306e\u30e1\u30c3\u30bb\u30fc\u30b8(\u30ec\u30b9\u30dd\u30f3\u30b9\u7528)\nObjectify\u306eRef\u304c\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3068Android Client\u3078\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u4f7f\u3048\u306a\u3044\u306e\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u7528\u306e\u5b9a\u7fa9\u3092\u4f5c\u6210\u3002\ndata class MessageResponse(\n        val id: Long,\n        val message: String,\n        val userName: String,\n        val date: Date\n)\n\n\n\u30e6\u30fc\u30b6\u60c5\u5831\n\u30e6\u30fc\u30b6\u60c5\u5831\u306f\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u30ad\u30fc\u306b\u4f5c\u6210\u3057\u307e\u3059\u3002\n\nBoardUser.kt\n@Entity\nclass BoardUser() {\n    lateinit @Id var email: String\n    lateinit @Index var userName: String\n}\n\n\n\nAPI\u306e\u4f5c\u6210\nAPI\u3092\u5b9a\u7fa9\u3059\u308b\u30af\u30e9\u30b9\u306b\u306f@Api\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u4e0e\u3057\u307e\u3059\u3002WEB_CLIENT_ID\u3084ANDROID_CLIENT_ID\u306f\u4e8b\u524d\u306bDeveloper Console\u3067\u4f5c\u6210\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u4eca\u56de\u306fOAuth\u8a8d\u8a3c\u3092\u4f7f\u3046\u306e\u3067scope\u3082\u5fd8\u308c\u305a\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\nMessageBoardEndpoint.kt\n@Api(\n        name = \"boardApi\",  // URL\u306e\u4e00\u90e8 & Android\u3067\u4f7f\u3046\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30af\u30e9\u30b9\u306e\u540d\u524d\u306b\u306a\u308b\n        version = \"v1\",\n        scopes = arrayOf(\"https://www.googleapis.com/auth/userinfo.email\"),\n        clientIds = arrayOf(WEB_CLIENT_ID, ANDROID_CLIENT_ID),\n        audiences = arrayOf(ANDROID_AUDIENCE) // ANDROID_AUDIENCE \u306f WEB_CLIENT_ID \u3068\u540c\u3058\u5024\n        namespace = ApiNamespace(\n                ownerDomain = \"kotlingaesample.chibatfching.com\",\n                ownerName = \"chibatching\",\n                packagePath = \"\")\n)\nclass MessageBoardEndpoint {\n    init {\n        // Objectify\u304b\u3089\u5b9a\u7fa9\u3057\u305fEntity\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u521d\u671f\u5316\n        ObjectifyService.register(BoardMessage::class.java)\n        ObjectifyService.register(BoardUser::class.java)\n    }\n    ...\n}\n\n\n\u6b21\u304b\u3089\u306f\u3053\u306e\u30af\u30e9\u30b9\u306b\u5b9f\u88c5\u3057\u3066\u3044\u304f\u5404API\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\n\n\u30e6\u30fc\u30b6\u767b\u9332\n\u30e6\u30fc\u30b6\u306f\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3068\u30e6\u30fc\u30b6\u540d\u3092\u767b\u9332\u3057\u307e\u3059\u3002\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306fOAuth\u3067\u78ba\u8a8d\u3057\u305fGoogle\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u3059\u3002\n\nMessageBoardEndpoint.kt\n@ApiMethod(\n        path = \"users/\",\n        name = \"users.register\",\n        httpMethod = ApiMethod.HttpMethod.POST\n)\nfun registerUser(@Named(\"user_name\") userName: String, auth: User?): BoardUser {\n    // OAuth\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    auth ?: throw UnauthorizedException(\"Not authorized.\")\n    // \u30e6\u30fc\u30b6\u540d\u306e\u91cd\u8907\u3092\u30c1\u30a7\u30c3\u30af\n    if (ofy().load().type(BoardUser::class.java).filter(\"userName\", userName).count() > 0) {\n        throw ConflictException(\"$userName is not available.\")\n    }\n    // \u30e6\u30fc\u30b6\u3092\u751f\u6210\n    val boardUser = BoardUser().apply {\n        this.email = auth.email\n        this.userName = userName\n    }\n    // \u751f\u6210\u3057\u305f\u30e6\u30fc\u30b6\u3092\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u306b\u4fdd\u5b58\n    ofy().save().entity(boardUser).now()\n    return boardUser\n}\n\n\n@ApiMethod\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068@Named\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306f\u6b21\u306e\u610f\u5473\u304c\u3042\u308a\u307e\u3059\u3002\n\n\npath: API\u306e\u30d1\u30b9\n\nname: \u81ea\u52d5\u751f\u6210\u3055\u308c\u308bAndroid\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067API\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306e\u30e1\u30bd\u30c3\u30c9\u540d\n\n\nBoardApi#user().register(userName: String)\n\n\n\n@Named\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3: \u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\n\nUser?\u578b\u306e\u5f15\u6570\u304c\u3042\u308b\u3068\u305d\u306eAPI\u306f\u30e6\u30fc\u30b6\u8a8d\u8a3c\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u306a\u3044\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u6765\u305f\u3068\u304d\u306f\u3001\u3053\u306e\u5f15\u6570\u306bnull\u304c\u6e21\u3055\u308c\u3066\u304f\u308b\u306e\u3067\u5224\u5b9a\u3057\u3066\u5fc5\u8981\u306a\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001401\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u6295\u7a3f\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u6295\u7a3f\u6642\u306b\u306fPOST\u3055\u308c\u305f\u6587\u5b57\u5217\u3068\u65e5\u6642\u3001\u30e6\u30fc\u30b6\u3078\u306e\u53c2\u7167\u3092\u4ed8\u3051\u3066\u4fdd\u5b58\u3002\n\nMessageBoardEndpoint.kt\n@ApiMethod(\n        path = \"messages/\",\n        name = \"message.put\",\n        httpMethod = ApiMethod.HttpMethod.POST\n)\nfun putMessage(@Named(\"message\") message: String, auth: User?) {\n    // OAuth\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    auth ?: throw UnauthorizedException(\"Not authorized.\")\n    // \u30e6\u30fc\u30b6\u304c\u767b\u9332\u6e08\u307f\u306a\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4f5c\u6210\u3057\u3066\u6295\u7a3f\n    getUserInfo(auth.email)?.let {\n        val boardMessage = BoardMessage().apply { // apply\u3067\u30ec\u30b7\u30fc\u30d0\u3092\u7de8\u96c6\u3057\u3066\u8fd4\u3059\n            this.message = message\n            this.date = Date()\n            this.user = Ref.create(it)\n        }\n        ofy().save().entity(boardMessage)\n        return\n    }\n    throw NotFoundException(\"Requested user is not found.\")\n}\n\n/**\n * \u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u30ad\u30fc\u306b\u30e6\u30fc\u30b6\u60c5\u5831\u3092\u53d6\u5f97\u3001\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u6642\u306fnull\u3092\u8fd4\u3059\n */\nprivate fun getUserInfo(email: String): BoardUser? {\n    return ofy().load().type(BoardUser::class.java).id(email).now()\n}\n\n\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u4e00\u89a7\u53d6\u5f97\n\u30e1\u30c3\u30bb\u30fc\u30b8\u4e00\u89a7\u3092Objectify\u7d4c\u7531\u3067\u53d6\u5f97\u3057\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u7528\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u307e\u3059\u3002\n\nMessageBoardEndpoint.kt\n@ApiMethod(\n        path = \"messages/\",\n        name = \"message.list\",\n        httpMethod = ApiMethod.HttpMethod.GET\n)\nfun getMessageList(auth: User?): List<MessageResponse> {\n    // OAuth\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    auth ?: throw UnauthorizedException(\"Not authorized.\")\n    return ofy().load().type(BoardMessage::class.java)\n            .order(\"-date\")  // \u65e5\u4ed8\u964d\u9806\u3067\u30bd\u30fc\u30c8\n            .limit(20)  // \u6700\u65b020\u4ef6\u3092\u53d6\u5f97\n            .list()  // \u30ea\u30b9\u30c8\u306b\u5909\u63db\n            .map { MessageResponse(it.id!!, it.message, it.user.get().userName, it.date) }  // \u30ec\u30b9\u30dd\u30f3\u30b9\u7528\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30de\u30c3\u30d4\u30f3\u30b0\n}\n\n\n\n\u30e6\u30fc\u30b6\u6bce\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u4e00\u89a7\u53d6\u5f97\n\u30e6\u30fc\u30b6\u6bce\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97\u3057\u305f\u3044\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\nMessageBoardEndpoint.kt\n@ApiMethod(\n        path = \"users/{user}/messages\",\n        name = \"message.user\",\n        httpMethod = ApiMethod.HttpMethod.GET\n)\nfun getMessageListByUser(@Named(\"user\") userName: String, auth: User?): List<MessageResponse> {\n    // OAuth\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    auth ?: throw UnauthorizedException(\"Not authorized.\")\n    // \u6307\u5b9a\u3055\u308c\u305f\u30e6\u30fc\u30b6\u3092\u53d6\u5f97\u3001\u30e6\u30fc\u30b6\u304c\u5b58\u5728\u3057\u306a\u3044\u6642\u306f404\n    val boardUser =\n            ofy().load().type(BoardUser::class.java).filter(\"userName =\", userName).first().now()\n                    ?: throw NotFoundException(\"$userName does not exist.\")\n    return ofy().load().type(BoardMessage::class.java)\n            .filter(\"user =\", Ref.create(boardUser)) // \u30e6\u30fc\u30b6\u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n            .order(\"-date\")\n            .limit(20)\n            .list()\n            .map { MessageResponse(it.id!!, it.message, it.user.get().userName, it.date) }\n}\n\n\n\nAndroid Client\u5074\u306e\u5b9f\u88c5\n\u5b9a\u7fa9\u3057\u305fAPI\u306eAndroid\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u81ea\u52d5\u751f\u6210\u3055\u308c\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3063\u3066API\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002  API\u306e\u5b9f\u884c\u306f\u305d\u306e\u307e\u307e\u5b9f\u884c\u3059\u308b\u3068\u540c\u671f\u7684\u306b\u884c\u308f\u308c\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u4eca\u56de\u306f\u7c21\u6613\u7684\u306bthread\u30d6\u30ed\u30c3\u30af\u3067\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u6e96\u5099\nAPI\u30af\u30e9\u30b9\u306e@Api\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306ename\u3067\u6307\u5b9a\u3057\u305f\u540d\u524d\u306eAPI\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306fOAuth\u8a8d\u8a3c\u3092\u4f7f\u3046\u306e\u3067credential\u306b\u3064\u3044\u3066\u3082\u8a2d\u5b9a\u3057\u307e\u3059\u3002\nprivate val boardApi: BoardApi by lazy {\n    BoardApi.Builder(NetHttpTransport(), AndroidJsonFactory(), credential)\n            .setApplicationName(\"Kotlin GAE Sample\")\n            .setRootUrl(\"https://hogehoge.appspot.com/_ah/api/\")\n//                .setRootUrl(\"http://192.168.xxx.xxx:8080/_ah/api/\")  // \u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u30c6\u30b9\u30c8\n            .build()\n}\n\nprivate val credential: GoogleAccountCredential by lazy {\n    GoogleAccountCredential\n            .usingAudience(this, WEB_CLIENT_ID)\n            .setSelectedAccountName(\"\") // \u30a2\u30ab\u30a6\u30f3\u30c8\u540d\u306fAccount Picker\u3092\u4f7f\u7528\u3057\u3066\u5f8c\u304b\u3089\u8a2d\u5b9a\u3059\u308b\u3002\n}\n\n\nGoogle\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u9078\u629e\nAccount Picker\u3092\u4f7f\u7528\u3057\u3066\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u9078\u629e\u3057\u3066credential\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n\n    ...\n\n    chooseAccount()\n}\n\n/**\n * Account Picker\u3067\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u9078\u629e\n */\nprivate fun chooseAccount() {\n    startActivityForResult(credential.newChooseAccountIntent(), REQUEST_ACCOUNT_PICKER)\n}\n\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    when (requestCode) {\n        REQUEST_ACCOUNT_PICKER ->\n            // \u30e6\u30fc\u30b6\u304c\u9078\u629e\u3057\u305fGoogle\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u8a8d\u8a3c\u60c5\u5831\u3092credential\u306b\u30bb\u30c3\u30c8\n            data?.extras?.getString(AccountManager.KEY_ACCOUNT_NAME)?.let {\n                credential.setSelectedAccountName(it)\n                thread {\n                    try {\n                        // \u30e6\u30fc\u30b6\u540d chibatching \u3067\u767b\u9332\u3002\u5b9f\u969b\u306b\u306f\u30e6\u30fc\u30b6\u304c\u5165\u529b\u3059\u308b\u3002\n                        registerUser(\"chibatching\")\n                    } catch (e: IOException) {\n                        e.printStackTrace()\n                    }\n                }\n        }\n    }\n}\n\n\n\u30e6\u30fc\u30b6\u767b\u9332\nGoogle\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u9078\u629e\u5f8c\u306b\u30e6\u30fc\u30b6\u767b\u9332\u3002\nprivate fun registerUser(userName: String) {\n    thread {\n        try {\n            boardApi.user().register(userName).execute()\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n    }\n}\n\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u6295\u7a3f\n\u3053\u3061\u3089\u306f\u305f\u3060\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u3059\u3002\npostMessage(\"message $it is sent!\")\n\nprivate fun postMessage(message: String) {\n    thread {\n        boardApi.message().put(message).execute()\n        Log.d(TAG, \"message \\\"$message\\\" is sent\")\n    }\n}\n\n\n\u4e00\u89a7\u306e\u53d6\u5f97\nAndroid\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u306fCallback\u306a\u3069\u306e\u8a2d\u5b9a\u306f\u7121\u3044\u3088\u3046\u306a\u306e\u3067\u3001\u30c7\u30fc\u30bf\u53d6\u5f97\u5f8c\u306e\u51e6\u7406\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3057\u3066\u304a\u304d\u307e\u3059\u3002\ngetMessages {\n    it?.forEach {\n        Log.d(\"List: ${this.javaClass.simpleName}\", \"${it.userName}: ${it.message} (${it.date.toString()})\")\n    }\n}\ngetMessages(\"hoge\") {\n    it?.forEach {\n        Log.d(\"Filtered: ${this.javaClass.simpleName}\", \"${it.userName}: ${it.message} (${it.date.toString()})\")\n    }\n}\n\nprivate fun getMessages(userName: String? = null, callback: (List<MessageResponse>?) -> Unit) {\n    thread {\n        val list = if (userName == null) {\n            boardApi.message().list().execute().items\n        } else {\n            boardApi.message().user(userName).execute().items\n        }\n\n        runOnUiThread { callback(list) }\n    }\n}\n\n\n\u307e\u3068\u3081\n\u30c7\u30fc\u30bf\u306e\u4fdd\u5b58\u3001\u53d6\u5f97\u3050\u3089\u3044\u306e\u30b5\u30fc\u30d0\u30b5\u30a4\u30c9\u3067\u3042\u308c\u3070Kotin + GAE\u3067\u7c21\u5358\u306b\u3059\u3063\u304d\u308a\u3068\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002 \n\u3082\u3063\u3068\u672c\u683c\u7684\u306a\u30a2\u30d7\u30ea\u306e\u3068\u304d\u3069\u3046\u306a\u308b\u304b\u306f\u306a\u3093\u3068\u3082\u8a00\u3048\u307e\u305b\u3093\u304c\u3001Kotlin\u306e\u7d20\u6575\u306a\u6587\u6cd5\u3092\u4f7f\u3048\u3070\u304b\u306a\u308a\u52b9\u7387\u7684\u306b\u3059\u3063\u304d\u308a\u3068\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306f [Kotlin Advent Calendar 2015](http://www.adventar.org/calendars/857) \u306e5\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002  \n\u6628\u65e5\u306f [@daneko0123\u3055\u3093](https://twitter.com/daneko0123) \u306e [retrolambda - Android\u3092Kotlin\u3068Retrolamda+Lombok\u3068\u3067\u4f5c\u308b\u5834\u5408\u306e\u6bd4\u8f03](http://qiita.com/daneko0123/items/3ef2136cdbee913206d1)\u3067\u3057\u305f\u3002\n\n## \u306f\u3058\u3081\u306b\n\nKotlin\u3067Android\u30a2\u30d7\u30ea\u3092\u66f8\u3044\u3066\u3044\u308b\u3068\u697d\u3057\u304f\u306a\u308a\u307e\u3059\u306d\u3002\n\u3067\u3082\u3001\u3061\u3087\u3063\u3068\u672c\u683c\u7684\u306a\u30a2\u30d7\u30ea\u3092\u4f5c\u308d\u3046\u3068\u601d\u3046\u3068\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3082\u6b32\u3057\u304f\u306a\u3063\u3066\u304d\u307e\u3059\u3002\n\n\u3060\u3051\u3069\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306a\u3093\u3066\u5b9f\u88c5\u3057\u305f\u3053\u3068\u7121\u3044\u3057...Kotlin\u3067\u66f8\u304d\u305f\u3044\u3057...\u3068\u3044\u3046\u3042\u306a\u305f(\u79c1\u306e\u3053\u3068\u3067\u3059)\u3067\u3082\u304a\u6c17\u8efd\u306b\u59cb\u3081\u3089\u308c\u308b\u74b0\u5883Google App Engine (Google Cloud Endpoints) \u3067\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3092\u69cb\u7bc9\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001Google\u30a2\u30ab\u30a6\u30f3\u30c8\u3067OAuth\u8a8d\u8a3c\u3057\u305f\u30e6\u30fc\u30b6\u304c\u66f8\u304d\u8fbc\u3080\u63b2\u793a\u677f\u98a8\u306a\u3082\u306e\u3092\u4f5c\u308b\u3068\u3044\u3046\u60f3\u5b9a\u3067\u9032\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n\n## \u74b0\u5883\n\n\u3053\u306e\u8a18\u4e8b\u306f\u4e0b\u8a18\u306e\u74b0\u5883\u3067\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\n- Android Studio 2.0 Preview 2\n- Kotlin 1.0.0-beta-3594\n\n## GAE\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8ffd\u52a0\n\nAndroid Studio\u3067GAE\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5c0e\u5165\u3059\u308b\u65b9\u6cd5\u306f\u8272\u3005\u306a\u65b9\u304c\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002  \nModule Type \u306f App Engine Java Endpoints Module \u3067\u3059\u3002\n\n**\u53c2\u8003**\n[AndroidStudio - Android Studio + Google App Engine \u3067\u304a\u624b\u8efd\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u30b5\u30fc\u30d0\u69cb\u7bc9 - Qiita](http://qiita.com/suzukihr/items/664233d88bde19518ab2)\n\n## GAE\u30e2\u30b8\u30e5\u30fc\u30eb\u306bKotlin\u3092\u8a2d\u5b9a\n\n\u307e\u305a\u306f\u3001\u4f5c\u6210\u3057\u305fbackend\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u81ea\u52d5\u3067\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u9069\u5f53\u306aJava\u30bd\u30fc\u30b9\u3092`Shift+Command+K`\u3067Kotlin\u306b\u5909\u63db\u3057\u307e\u3059\u3002  \n\u305d\u306e\u5f8c\u3001\u30e1\u30cb\u30e5\u30fc\u304b\u3089`Tools -> Kotlin -> Configure Kotlin in Project`\u3068\u9078\u629e\u3057`build.gradle`\u3092Kotlin\u7528\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n\u305f\u3060\u3057\u3001\u3053\u306e\u307e\u307e\u3067\u306fAndroid\u5411\u3051\u306e\u8a2d\u5b9a\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u5c11\u3057\u624b\u3092\u52a0\u3048\u307e\u3059\u3002\n\n### `kotlin-android`\u3092`kotlin`\u306b\u5909\u66f4\n\nAndroid\u3067\u306f\u306a\u304f\u901a\u5e38\u306eJava\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306a\u306e\u3067kotlin-android\u304b\u3089kotlin\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\n```groovy:build.gradle\n//apply plugin: 'kotlin-android'\napply plugin: 'kotlin'\n```\n\n### `android`\u30d6\u30ed\u30c3\u30af\u3092\u524a\u9664\n\n`android`\u30d6\u30ed\u30c3\u30af\u3082Android\u3067\u306f\u306a\u3044\u306e\u3067\u524a\u9664\u3057\u307e\u3059\u3002\n\n```groovy:build.gradle\n//android {\n//    sourceSets {\n//        main.java.srcDirs += 'src/main/kotlin'\n//    }\n//}\n```\n\n\u3053\u308c\u3067GAE\u3067Kotlin\u3092\u4f7f\u3046\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n## Entity\u306e\u4f5c\u6210\n\n\u4eca\u56de\u306f\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306b[Objectify](https://github.com/objectify/objectify)\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nObjectify\u3067\u4f7f\u7528\u3059\u308bEntity\u3092\u307f\u3093\u306a\u5927\u597d\u304ddata\u30af\u30e9\u30b9\u3067\u66f8\u304d\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001Objectify\u306eEntity\u306f\u5f15\u6570\u306a\u3057\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u4eca\u56de\u306f\u666e\u901a\u306e\u30af\u30e9\u30b9\u3067\u4f5c\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n### \u63b2\u793a\u677f\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\n\n`@Id`\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u305fLong\u578b\u304c`null`\u306e\u3068\u304d\u4fdd\u5b58\u6642\u306b\u81ea\u52d5\u3067ID\u3092\u751f\u6210\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001`id`\u306fNullable & null\u3067\u521d\u671f\u5316\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```kotlin:BoardMessage.kt\n@Entity\nclass BoardMessage() {\n    @Id var id: Long? = null\n    lateinit var message: String\n    lateinit @Index var date: Date\n    lateinit @Index var user: Ref<BoardUser>\n}\n```\n\n### \u63b2\u793a\u677f\u306e\u30e1\u30c3\u30bb\u30fc\u30b8(\u30ec\u30b9\u30dd\u30f3\u30b9\u7528)\n\nObjectify\u306eRef\u304c\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3068Android Client\u3078\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u4f7f\u3048\u306a\u3044\u306e\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u7528\u306e\u5b9a\u7fa9\u3092\u4f5c\u6210\u3002\n\n```\ndata class MessageResponse(\n        val id: Long,\n        val message: String,\n        val userName: String,\n        val date: Date\n)\n```\n\n### \u30e6\u30fc\u30b6\u60c5\u5831\n\n\u30e6\u30fc\u30b6\u60c5\u5831\u306f\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u30ad\u30fc\u306b\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```kotlin:BoardUser.kt\n@Entity\nclass BoardUser() {\n    lateinit @Id var email: String\n    lateinit @Index var userName: String\n}\n```\n\n## API\u306e\u4f5c\u6210\n\nAPI\u3092\u5b9a\u7fa9\u3059\u308b\u30af\u30e9\u30b9\u306b\u306f`@Api`\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u4e0e\u3057\u307e\u3059\u3002`WEB_CLIENT_ID`\u3084`ANDROID_CLIENT_ID`\u306f\u4e8b\u524d\u306bDeveloper Console\u3067\u4f5c\u6210\u3057\u3066\u304a\u304d\u307e\u3059\u3002  \n\u4eca\u56de\u306fOAuth\u8a8d\u8a3c\u3092\u4f7f\u3046\u306e\u3067scope\u3082\u5fd8\u308c\u305a\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```kotlin:MessageBoardEndpoint.kt\n@Api(\n        name = \"boardApi\",  // URL\u306e\u4e00\u90e8 & Android\u3067\u4f7f\u3046\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30af\u30e9\u30b9\u306e\u540d\u524d\u306b\u306a\u308b\n        version = \"v1\",\n        scopes = arrayOf(\"https://www.googleapis.com/auth/userinfo.email\"),\n        clientIds = arrayOf(WEB_CLIENT_ID, ANDROID_CLIENT_ID),\n        audiences = arrayOf(ANDROID_AUDIENCE) // ANDROID_AUDIENCE \u306f WEB_CLIENT_ID \u3068\u540c\u3058\u5024\n        namespace = ApiNamespace(\n                ownerDomain = \"kotlingaesample.chibatfching.com\",\n                ownerName = \"chibatching\",\n                packagePath = \"\")\n)\nclass MessageBoardEndpoint {\n    init {\n        // Objectify\u304b\u3089\u5b9a\u7fa9\u3057\u305fEntity\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u521d\u671f\u5316\n        ObjectifyService.register(BoardMessage::class.java)\n        ObjectifyService.register(BoardUser::class.java)\n    }\n    ...\n}\n```\n\n\u6b21\u304b\u3089\u306f\u3053\u306e\u30af\u30e9\u30b9\u306b\u5b9f\u88c5\u3057\u3066\u3044\u304f\u5404API\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\n\n### \u30e6\u30fc\u30b6\u767b\u9332\n\n\u30e6\u30fc\u30b6\u306f\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3068\u30e6\u30fc\u30b6\u540d\u3092\u767b\u9332\u3057\u307e\u3059\u3002\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306fOAuth\u3067\u78ba\u8a8d\u3057\u305fGoogle\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u3059\u3002\n\n```kotlin:MessageBoardEndpoint.kt\n@ApiMethod(\n        path = \"users/\",\n        name = \"users.register\",\n        httpMethod = ApiMethod.HttpMethod.POST\n)\nfun registerUser(@Named(\"user_name\") userName: String, auth: User?): BoardUser {\n    // OAuth\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    auth ?: throw UnauthorizedException(\"Not authorized.\")\n    // \u30e6\u30fc\u30b6\u540d\u306e\u91cd\u8907\u3092\u30c1\u30a7\u30c3\u30af\n    if (ofy().load().type(BoardUser::class.java).filter(\"userName\", userName).count() > 0) {\n        throw ConflictException(\"$userName is not available.\")\n    }\n    // \u30e6\u30fc\u30b6\u3092\u751f\u6210\n    val boardUser = BoardUser().apply {\n        this.email = auth.email\n        this.userName = userName\n    }\n    // \u751f\u6210\u3057\u305f\u30e6\u30fc\u30b6\u3092\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u306b\u4fdd\u5b58\n    ofy().save().entity(boardUser).now()\n    return boardUser\n}\n```\n\n`@ApiMethod`\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068`@Named`\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306f\u6b21\u306e\u610f\u5473\u304c\u3042\u308a\u307e\u3059\u3002\n\n- `path`: API\u306e\u30d1\u30b9\n- `name`: \u81ea\u52d5\u751f\u6210\u3055\u308c\u308bAndroid\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067API\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306e\u30e1\u30bd\u30c3\u30c9\u540d\n - `BoardApi#user().register(userName: String)`\n- `@Named`\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3: \u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\n\n\n`User?`\u578b\u306e\u5f15\u6570\u304c\u3042\u308b\u3068\u305d\u306eAPI\u306f\u30e6\u30fc\u30b6\u8a8d\u8a3c\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u306a\u3044\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u6765\u305f\u3068\u304d\u306f\u3001\u3053\u306e\u5f15\u6570\u306b`null`\u304c\u6e21\u3055\u308c\u3066\u304f\u308b\u306e\u3067\u5224\u5b9a\u3057\u3066\u5fc5\u8981\u306a\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001401\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\n### \u30e1\u30c3\u30bb\u30fc\u30b8\u6295\u7a3f\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u6295\u7a3f\u6642\u306b\u306fPOST\u3055\u308c\u305f\u6587\u5b57\u5217\u3068\u65e5\u6642\u3001\u30e6\u30fc\u30b6\u3078\u306e\u53c2\u7167\u3092\u4ed8\u3051\u3066\u4fdd\u5b58\u3002\n\n```kotlin:MessageBoardEndpoint.kt\n@ApiMethod(\n        path = \"messages/\",\n        name = \"message.put\",\n        httpMethod = ApiMethod.HttpMethod.POST\n)\nfun putMessage(@Named(\"message\") message: String, auth: User?) {\n    // OAuth\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    auth ?: throw UnauthorizedException(\"Not authorized.\")\n    // \u30e6\u30fc\u30b6\u304c\u767b\u9332\u6e08\u307f\u306a\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4f5c\u6210\u3057\u3066\u6295\u7a3f\n    getUserInfo(auth.email)?.let {\n        val boardMessage = BoardMessage().apply { // apply\u3067\u30ec\u30b7\u30fc\u30d0\u3092\u7de8\u96c6\u3057\u3066\u8fd4\u3059\n            this.message = message\n            this.date = Date()\n            this.user = Ref.create(it)\n        }\n        ofy().save().entity(boardMessage)\n        return\n    }\n    throw NotFoundException(\"Requested user is not found.\")\n}\n\n/**\n * \u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u30ad\u30fc\u306b\u30e6\u30fc\u30b6\u60c5\u5831\u3092\u53d6\u5f97\u3001\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u6642\u306fnull\u3092\u8fd4\u3059\n */\nprivate fun getUserInfo(email: String): BoardUser? {\n    return ofy().load().type(BoardUser::class.java).id(email).now()\n}\n```\n\n### \u30e1\u30c3\u30bb\u30fc\u30b8\u4e00\u89a7\u53d6\u5f97\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u4e00\u89a7\u3092Objectify\u7d4c\u7531\u3067\u53d6\u5f97\u3057\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u7528\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u307e\u3059\u3002\n\n```kotlin:MessageBoardEndpoint.kt\n@ApiMethod(\n        path = \"messages/\",\n        name = \"message.list\",\n        httpMethod = ApiMethod.HttpMethod.GET\n)\nfun getMessageList(auth: User?): List<MessageResponse> {\n    // OAuth\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    auth ?: throw UnauthorizedException(\"Not authorized.\")\n    return ofy().load().type(BoardMessage::class.java)\n            .order(\"-date\")  // \u65e5\u4ed8\u964d\u9806\u3067\u30bd\u30fc\u30c8\n            .limit(20)  // \u6700\u65b020\u4ef6\u3092\u53d6\u5f97\n            .list()  // \u30ea\u30b9\u30c8\u306b\u5909\u63db\n            .map { MessageResponse(it.id!!, it.message, it.user.get().userName, it.date) }  // \u30ec\u30b9\u30dd\u30f3\u30b9\u7528\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30de\u30c3\u30d4\u30f3\u30b0\n}\n```\n\n### \u30e6\u30fc\u30b6\u6bce\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u4e00\u89a7\u53d6\u5f97\n\n\u30e6\u30fc\u30b6\u6bce\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97\u3057\u305f\u3044\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n```kotlin:MessageBoardEndpoint.kt\n@ApiMethod(\n        path = \"users/{user}/messages\",\n        name = \"message.user\",\n        httpMethod = ApiMethod.HttpMethod.GET\n)\nfun getMessageListByUser(@Named(\"user\") userName: String, auth: User?): List<MessageResponse> {\n    // OAuth\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    auth ?: throw UnauthorizedException(\"Not authorized.\")\n    // \u6307\u5b9a\u3055\u308c\u305f\u30e6\u30fc\u30b6\u3092\u53d6\u5f97\u3001\u30e6\u30fc\u30b6\u304c\u5b58\u5728\u3057\u306a\u3044\u6642\u306f404\n    val boardUser =\n            ofy().load().type(BoardUser::class.java).filter(\"userName =\", userName).first().now()\n                    ?: throw NotFoundException(\"$userName does not exist.\")\n    return ofy().load().type(BoardMessage::class.java)\n            .filter(\"user =\", Ref.create(boardUser)) // \u30e6\u30fc\u30b6\u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n            .order(\"-date\")\n            .limit(20)\n            .list()\n            .map { MessageResponse(it.id!!, it.message, it.user.get().userName, it.date) }\n}\n```\n\n## Android Client\u5074\u306e\u5b9f\u88c5\n\n\u5b9a\u7fa9\u3057\u305fAPI\u306eAndroid\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u81ea\u52d5\u751f\u6210\u3055\u308c\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3063\u3066API\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002  API\u306e\u5b9f\u884c\u306f\u305d\u306e\u307e\u307e\u5b9f\u884c\u3059\u308b\u3068\u540c\u671f\u7684\u306b\u884c\u308f\u308c\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002  \n\u4eca\u56de\u306f\u7c21\u6613\u7684\u306bthread\u30d6\u30ed\u30c3\u30af\u3067\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\n### \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u6e96\u5099\n\nAPI\u30af\u30e9\u30b9\u306e`@Api`\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e`name`\u3067\u6307\u5b9a\u3057\u305f\u540d\u524d\u306eAPI\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306fOAuth\u8a8d\u8a3c\u3092\u4f7f\u3046\u306e\u3067`credential`\u306b\u3064\u3044\u3066\u3082\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n```kotlin\nprivate val boardApi: BoardApi by lazy {\n    BoardApi.Builder(NetHttpTransport(), AndroidJsonFactory(), credential)\n            .setApplicationName(\"Kotlin GAE Sample\")\n            .setRootUrl(\"https://hogehoge.appspot.com/_ah/api/\")\n//                .setRootUrl(\"http://192.168.xxx.xxx:8080/_ah/api/\")  // \u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u30c6\u30b9\u30c8\n            .build()\n}\n\nprivate val credential: GoogleAccountCredential by lazy {\n    GoogleAccountCredential\n            .usingAudience(this, WEB_CLIENT_ID)\n            .setSelectedAccountName(\"\") // \u30a2\u30ab\u30a6\u30f3\u30c8\u540d\u306fAccount Picker\u3092\u4f7f\u7528\u3057\u3066\u5f8c\u304b\u3089\u8a2d\u5b9a\u3059\u308b\u3002\n}\n```\n\n### Google\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u9078\u629e\n\nAccount Picker\u3092\u4f7f\u7528\u3057\u3066\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u9078\u629e\u3057\u3066credential\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n```kotlin\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n\n    ...\n    \n    chooseAccount()\n}\n\n/**\n * Account Picker\u3067\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u9078\u629e\n */\nprivate fun chooseAccount() {\n    startActivityForResult(credential.newChooseAccountIntent(), REQUEST_ACCOUNT_PICKER)\n}\n\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n    when (requestCode) {\n        REQUEST_ACCOUNT_PICKER ->\n            // \u30e6\u30fc\u30b6\u304c\u9078\u629e\u3057\u305fGoogle\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u8a8d\u8a3c\u60c5\u5831\u3092credential\u306b\u30bb\u30c3\u30c8\n            data?.extras?.getString(AccountManager.KEY_ACCOUNT_NAME)?.let {\n                credential.setSelectedAccountName(it)\n                thread {\n                    try {\n                        // \u30e6\u30fc\u30b6\u540d chibatching \u3067\u767b\u9332\u3002\u5b9f\u969b\u306b\u306f\u30e6\u30fc\u30b6\u304c\u5165\u529b\u3059\u308b\u3002\n                        registerUser(\"chibatching\")\n                    } catch (e: IOException) {\n                        e.printStackTrace()\n                    }\n                }\n        }\n    }\n}\n```\n\n### \u30e6\u30fc\u30b6\u767b\u9332\n\nGoogle\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u9078\u629e\u5f8c\u306b\u30e6\u30fc\u30b6\u767b\u9332\u3002\n\n```\nprivate fun registerUser(userName: String) {\n    thread {\n        try {\n            boardApi.user().register(userName).execute()\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n    }\n}\n```\n\n### \u30e1\u30c3\u30bb\u30fc\u30b8\u6295\u7a3f\n\n\u3053\u3061\u3089\u306f\u305f\u3060\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n```kotlin\npostMessage(\"message $it is sent!\")\n\nprivate fun postMessage(message: String) {\n    thread {\n        boardApi.message().put(message).execute()\n        Log.d(TAG, \"message \\\"$message\\\" is sent\")\n    }\n}\n```\n\n### \u4e00\u89a7\u306e\u53d6\u5f97\n\nAndroid\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u306fCallback\u306a\u3069\u306e\u8a2d\u5b9a\u306f\u7121\u3044\u3088\u3046\u306a\u306e\u3067\u3001\u30c7\u30fc\u30bf\u53d6\u5f97\u5f8c\u306e\u51e6\u7406\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```kotlin\ngetMessages {\n    it?.forEach {\n        Log.d(\"List: ${this.javaClass.simpleName}\", \"${it.userName}: ${it.message} (${it.date.toString()})\")\n    }\n}\ngetMessages(\"hoge\") {\n    it?.forEach {\n        Log.d(\"Filtered: ${this.javaClass.simpleName}\", \"${it.userName}: ${it.message} (${it.date.toString()})\")\n    }\n}\n\nprivate fun getMessages(userName: String? = null, callback: (List<MessageResponse>?) -> Unit) {\n    thread {\n        val list = if (userName == null) {\n            boardApi.message().list().execute().items\n        } else {\n            boardApi.message().user(userName).execute().items\n        }\n\n        runOnUiThread { callback(list) }\n    }\n}\n```\n\n## \u307e\u3068\u3081\n\n\u30c7\u30fc\u30bf\u306e\u4fdd\u5b58\u3001\u53d6\u5f97\u3050\u3089\u3044\u306e\u30b5\u30fc\u30d0\u30b5\u30a4\u30c9\u3067\u3042\u308c\u3070Kotin + GAE\u3067\u7c21\u5358\u306b\u3059\u3063\u304d\u308a\u3068\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002 \n\u3082\u3063\u3068\u672c\u683c\u7684\u306a\u30a2\u30d7\u30ea\u306e\u3068\u304d\u3069\u3046\u306a\u308b\u304b\u306f\u306a\u3093\u3068\u3082\u8a00\u3048\u307e\u305b\u3093\u304c\u3001Kotlin\u306e\u7d20\u6575\u306a\u6587\u6cd5\u3092\u4f7f\u3048\u3070\u304b\u306a\u308a\u52b9\u7387\u7684\u306b\u3059\u3063\u304d\u308a\u3068\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n", "tags": ["Android", "Kotlin", "GAE"]}