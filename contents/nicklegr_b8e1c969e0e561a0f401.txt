{"context": " More than 1 year has passed since last update.http://ctf.seccon.jp/2015/\n\u30c1\u30fc\u30e0nicklegr\u3067\u500b\u4eba\u53c2\u52a0\u3002\n1000\u70b9\u3067190\u4f4d(872\u30c1\u30fc\u30e0\u4e2d)\u3067\u3057\u305f\u3002\n\nStart SECCON CTF (Exercises 50)\n\u63db\u5b57\u5f0f\u6697\u53f7\u3002\u89aa\u5207\u306b\u5168\u6587\u5b57\u306e\u30c6\u30fc\u30d6\u30eb\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\nc1 = \"PXFR}QIVTMSZCNDKUWAGJB{LHYEO\"\np1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ{}\"\n\nprob = \"A}FFDNEVPFSGV}KZPN}GO\"\n\nprob.each_char do |c|\n  i = c1.index(c)\n  raise if i == -1\n  print p1[i]\nend\n\nputs \"\"\n\n\nSECCON WARS 2015 (Stegano 100)\nhttps://youtu.be/8SFsln4VyEk\n\u6587\u5b57\u304c\u6d41\u308c\u308b\u90e8\u5206\u306b\u3001QR\u30b3\u30fc\u30c9\u306e\u5f62\u306b\u30de\u30b9\u30af\u304c\u304b\u304b\u3063\u3066\u308b\u3002\n\u5168\u30d5\u30ec\u30fc\u30e0\u3092\u91cd\u306d\u3066RGB\u306e\u6700\u5927\u5024\u3092\u53d6\u308c\u3070\u3001QR\u30b3\u30fc\u30c9\u3060\u3051\u9ed2\u3067\u51fa\u3066\u304d\u305d\u3046\u3002\n\u3068\u601d\u3063\u305f\u3051\u3069\u5727\u7e2e\u30ce\u30a4\u30ba\u306e\u305b\u3044\u304b\u3046\u307e\u304f\u3044\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u5e73\u5747\u5024\u306b\u5909\u66f4\u3002\n\u6700\u521d\u306e25\u79d2\u306f\u30ed\u30b4\u304c\u52d5\u3044\u3066\u90aa\u9b54\u3092\u3057\u3066\u304f\u308b\u306e\u3067\u9664\u5916\u3002\n% ffmpeg -i SECCON\\ WARS\\ 2015.mp4 -ss 26 -f image2 dir/%d.png\n% convert *.png -average ../output.png\n\n\u5e73\u5747\u306a\u306e\u3067\u3001\u7d50\u679c\u304c\u6697\u304b\u3063\u305f\u306e\u3067Photoshop\u306e\u30c8\u30fc\u30f3\u30ab\u30fc\u30d6\u3067\u660e\u308b\u304f\u3057\u3066\u3001\u30b9\u30de\u30db\u306eQR\u30b3\u30fc\u30c9\u30ea\u30fc\u30c0\u30fc\u306b\u8aad\u307e\u305b\u305f\u3002\nMMA\u306e\u53bb\u5e74\u306eWriteup\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nReverse-Engineering Android APK 1 (Binary 100)\nAndroid APK Decompiler\u306b\u6295\u3052\u308b\u3002\nsrc/com/example/seccon2015/rock_paper_scissors/MainActivity.java\nif (1000 == cnt)\n{\n    textview.setText((new StringBuilder()).append(\"SECCON{\").append(String.valueOf((cnt + calc()) * 107)).append(\"}\").toString());\n}\n\npublic native int calc();\n\nstatic \n{\n    System.loadLibrary(\"calc\");\n}\n\ncalc()\u306f\u3001apk\u3092zip\u3068\u3057\u3066\u89e3\u51cd\u3059\u308b\u3068 lib/x86/libcalc.so \u5185\u306b\u3042\u308b\u3002\nHopper\u306b\u6295\u3052\u308b\u3068\n             Java_com_example_seccon2015_rock_1paper_1scissors_MainActivity_calc:\n00000400         mov        eax, 0x7\n00000405         ret        \n                        ; endp\n\n\u305d\u308c\u3060\u3051\u3002\n\nConnect the server (Web/Network 100)\nlogin.pwn.seccon.jp:10000\n\nWeb\u30d6\u30e9\u30a6\u30b6\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u3001BackSpace\u306e\u5236\u5fa1\u30b3\u30fc\u30c9\u304c\u6df7\u3058\u3063\u305f\u30c6\u30ad\u30b9\u30c8\u304c\u51fa\u3066\u304f\u308b\u3002\n\u5236\u5fa1\u30b3\u30fc\u30c9\u3092\u53d6\u308a\u9664\u304f\u3068\u30d5\u30e9\u30b0\u3002\nnc\u3084telnet\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u30d5\u30e9\u30b0\u90e8\u5206\u304c\u898b\u3048\u306a\u304f\u306a\u308b\u4ed5\u7d44\u307f\u3002\n\u554f\u984c\u30b8\u30e3\u30f3\u30eb\u304c\u30d2\u30f3\u30c8\u304b\u3002\n\nCommand-Line Quiz (Unknown 100)\nLinux\u306e\u304a\u52c9\u5f37\u3002\n% telnet caitsith.pwn.seccon.jp\n\n$ cat stage1.txt \nWhat command do you use when you want to read only top lines of a text file?\n\nSet your answer to environment variable named stage1 and execute a shell.\n\n  $ stage1=$your_answer_here sh\n\nIf your answer is what I meant, you will be able to access stage2.txt file.\n\n$ stage1=head sh       \n$ cat stage2.txt \nWhat command do you use when you want to read only bottom lines of a text file?\n\nSet your answer to environment variable named stage2 and execute a shell.\n\n  $ stage2=$your_answer_here sh\n\nIf your answer is what I meant, you will be able to access stage3.txt file.\n\n$ stage2=tail sh \n$ cat stage3.txt \nWhat command do you use when you want to pick up lines that match specific patterns?\n\nSet your answer to environment variable named stage3 and execute a shell.\n\n  $ stage3=$your_answer_here sh\n\nIf your answer is what I meant, you will be able to access stage4.txt file.\n\n$ stage3=grep sh\n$ cat stage4.txt \nWhat command do you use when you want to process a text file?\n\nSet your answer to environment variable named stage4 and execute a shell.\n\n  $ stage4=$your_answer_here sh\n\nIf your answer is what I meant, you will be able to access stage5.txt file.\n\n$ stage4=sed sh \n$ cat stage5.txt \ncat: can't open 'stage5.txt': Operation not permitted\n\n$ stage4=awk sh\n$ cat stage5.txt \nOK. You reached the final stage. The flag word is in flags.txt file.\n\nflags.txt can be read by only one specific program which is available\nin this server. The program for reading flags.txt is one of commands\nyou can use for processing a text file. Please find it. Good luck. ;-)\n\n$ sed -e 's/A/A/g' flags.txt  \nOK. You have read all .txt files. The flag word is shown below.\n\nSECCON{CaitSith@AQUA}\n\n\nQR puzzle (Nonogram) (Unknown 300)\n\u306e\u306e\u3050\u3089\u3080(\u304a\u7d75\u304b\u304d\u30ed\u30b8\u30c3\u30af)\u3092\u89e3\u304f\u3068QR\u30b3\u30fc\u30c9\u304c\u51fa\u3066\u304f\u308b\u3002\u305d\u308c\u309230\u554f\u3002\u554f\u984c\u306f\u6bce\u56de\u30e9\u30f3\u30c0\u30e0\u3002\n\u4e0b\u8a18\u3092\u81ea\u52d5\u5316\u3057\u305f\u3002\n\n\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u3057\u3066\u554f\u984c\u3092\u62bd\u51fa\n\n\u30aa\u30f3\u30e9\u30a4\u30f3\u30bd\u30eb\u30d0\u30fc\u306b\u6295\u3052\u308b\n\n\u5f37\u529b\u306aQR\u30b3\u30fc\u30c9\u30c7\u30b3\u30fc\u30c0\u306b\u6295\u3052\u308b\n\n\u9762\u5012\u306a\u306e\u304c\u3001\u89e3\u304c\u4e00\u610f\u3058\u3083\u306a\u3044\u554f\u984c\u304c\u3042\u308b\u3053\u3068\u3002(\u5e02\u8ca9\u306e\u554f\u984c\u306b\u3082\u3068\u304d\u3069\u304d\u3042\u308b)\n\u4ee5\u4e0b\u3067\u30d5\u30a9\u30ed\u30fc\u3057\u305f\u3002\n\n\u524d\u8ff0\u306e\u30bd\u30eb\u30d0\u30fc\u304c4\u301c5\u901a\u308a\u306e\u89e3\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b(\u5168\u30d1\u30bf\u30fc\u30f3\u3058\u3083\u306a\u3044\u3063\u307d\u3044)\u306e\u3067\u5168\u90e8\u8a66\u3059\nQR\u30c7\u30b3\u30fc\u30c0\u306e\u30a8\u30e9\u30fc\u8a02\u6b63\n\u89e3\u7b54\u306f /^\\w+$/ \u3063\u307d\u3044\u306e\u3067\u3001\u30de\u30c3\u30c1\u3057\u306a\u3044\u306e\u3092\u5f3e\u304f\n\n\n\u3061\u306a\u307f\u306b\u6700\u5f8c\u306e\u554f\u984c\u3060\u3051\u4f8b\u5916\u3002 SECCON{YES_WE_REALLY_LOVE_QR_CODE_BECAUSE_OF_ITS_CLEVER_DESIGN}\n\n\n\n\n\u3042\u3068\u306f\u904b\u983c\u307f\u3067\u30b4\u30ea\u62bc\u3057\u300210\u56de\u304f\u3089\u3044\u30ea\u30c8\u30e9\u30a4\u3057\u305f\u3089\u901a\u3063\u305f\u3002\n# coding: utf-8\n\nrequire 'open-uri'\nrequire 'nokogiri'\nrequire 'json'\nrequire 'mechanize'\nrequire 'pp'\nrequire 'logger'\nrequire \"open3\"\n\ndef parse_nonogram(html)\n  ret = []\n\n  doc = Nokogiri::HTML(html)\n  cols = doc.css(\"th.cols\")\n  rows = doc.css(\"th.rows\")\n\n  ret << \"width #{cols.size}\"\n  ret << \"height #{rows.size}\"\n\n  ret << \"rows\"\n  rows.each do |row|\n    value = row.css(\"span\").map do |e| e.inner_text end\n    ret << value.join(\",\")  \n  end\n\n  ret << \"columns\"\n  cols.each do |col|\n    value = col.css(\"span\").map do |e| e.inner_text end\n    ret << value.join(\",\")\n  end\n\n  ret.join(\"\\n\")\nend\n\ndef solve_nonogram(nonogram)\n  agent = Mechanize.new\n  # agent.log = Logger.new(STDERR)\n\n  page = agent.get(\"http://www.lancs.ac.uk/~simpsons/nonogram/auto.htmlz.en-GB\")\n  form = page.forms.first\n\n  form.radiobutton_with(:value => \"field\").check\n  form[\"field\"] = nonogram\n  form[\"cr\"] = false\n  form[\"cb\"] = false\n\n  # Gateway timeout \u5bfe\u7b56\n  5.times do\n    begin\n      page = agent.submit(form)\n      break\n    rescue\n      next\n    end\n  end\n\n  ret = []\n  doc = Nokogiri::HTML(page.body)\n  doc.css(\"pre\").each do |pre|\n    ret << pre.inner_text.strip\n  end\n\n  ret\nend\n\ndef decode_qr(str)\n  o, e, s = Open3.capture3(\"python sqrd.py\", :stdin_data => str)\n\n  unless s.success?\n    puts o\n    puts e\n    nil\n  end\n\n  o.scrub(\"?\").strip\nend\n\nagent = Mechanize.new\n# agent.log = Logger.new(STDERR)\npage = agent.get(\"http://qrlogic.pwn.seccon.jp:10080/game/\")\n\nloop do\n  if page.body.match(/Stage: \\d+ \\/ \\d+/)\n    puts $&\n  else\n    puts page.body\n    break\n  end\n\n  nonogram = parse_nonogram(page.body)\n# puts nonogram\n\n  solutions = solve_nonogram(nonogram)\npp solutions\n\n  flags = solutions.map do |e|\n    decode_qr(e)\n  end\n\npp flags\n\n  flags.compact!\n  flags.select! do |e|\n    e.match(/^\\w+$/)\n  end\n  raise if flags.empty?\n\n  puts \"try with #{flags.first}\"\n\n  form = page.forms.first\n  form.ans = flags.first\n\n  page = agent.submit(form)\nend\n\n\nSteganography 1 (Stegano 100)\n\u4e0e\u3048\u3089\u308c\u308bMrFusion.gpjb\u306b\u3001gif, png, jpg, bmp\u753b\u50cf\u304c\u54044\u500b*4\u30bb\u30c3\u30c8\u5165\u3063\u3066\u3066\u3001\u305d\u308c\u305e\u308c1\u6587\u5b57\u305a\u3064\u30d5\u30e9\u30b0\u304c\u5165\u3063\u3066\u308b\u3002\n\u62e1\u5f35\u5b50\u304c\u30d2\u30f3\u30c8\u304b\u3002\n\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u5207\u308a\u5206\u3051\u305f\u3051\u3069\u3001\u30b7\u30b0\u30cd\u30c1\u30e3\u304c\u77ed\u304f\u3066\u6b63\u78ba\u306b\u3044\u304b\u305a\u3001\u4e00\u90e8\u624b\u4f5c\u696d\u3067\u5207\u308a\u51fa\u3057\u3002\nrequire \"pp\"\n\nstr = File.binread(\"MrFusion.gpjb\").unpack(\"H*\").first\n# puts str\n\n# pngs = str.scan(/89504e47.+?49454e44ae426082/)\n# pp pngs.size\n\n# jpgs = str.scan(/ffd8ff.+?ffd9/)\n# pp jpgs.size\n\n# gifs = str.scan(/474946383961.+?3b/)\n# pp gifs.size\n\n# bmps = str.scan(/3630\\w{4}/)\n# pp bmps\n# [\"36302a00\", \"36304c0e\", \"36302a00\", \"36302a00\"]\n# 19470 - 6\n\n# images = str.scan(/89504e47.+?49454e44ae426082|ffd8ff.+?ffd9|474946383961.+?3b|3630.+?(?=89504e47|ffd8ff|474946383961)/)\n# images = str.scan(/89504e47.+?49454e44ae426082|ffd8ff.+?ffd9|474946383961.+?(?=89504e47|ffd8ff|3630)|3630.+?(?=89504e47|ffd8ff|474946383961)/)\n# images = str.scan(/(89504e47|ffd8ff|474946383961|3630).+?(?=89504e47|ffd8ff|474946383961|3630)/)\nimages = str.scan(/89504e47.+?49454e44ae426082|ffd8ff.+?ffd9|474946383961.+?(?=89504e47|ffd8ff|424d3630)|424d3630.+?(?=89504e47|ffd8ff|474946383961)/)\npp images.size\n\ni = 0\nimages.each do |e|\n  # e = e.join(\"\")\n\n  puts e[0, 20]\n  bin = [e].pack(\"H*\")\n\n  ext =\n    case e\n    when /^89504e47/\n      \"png\"\n    when /^ffd8ff/\n      \"jpg\"\n    when /^474946383961/\n      \"gif\"\n    when /^424d3630/\n      \"bmp\"\n    end\n\n  File.binwrite(\"image#{sprintf(\"%02d\", i)}.#{ext}\", bin)\n\n  i += 1\nend\n\n\nSteganography 3 (Stegano 100)\nelf\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30f3\u30d7\u753b\u50cf\u3002\n\n\u30b8\u30e3\u30f3\u30eb\u304cStegano\u3060\u3057\u3001\u300c\u5c0f\u5b66\u751f\u306a\u30895\u5206\u3067\u89e3\u3051\u308b\u304c\u30d7\u30ed\u30b0\u30e9\u30de\u306f1\u6642\u9593\u304b\u304b\u308b\u300d\u304c\u3044\u304b\u306b\u3082\u30d2\u30f3\u30c8\u3002\n\u304c\u3001\u611a\u76f4\u306b\u5199\u7d4c\u3057\u3066\u307f\u305f\u3002\n\u5143\u753b\u50cf\u3068\u5199\u7d4c\u7d50\u679c\u3092\u753b\u50cf\u3067\u91cd\u306d\u3066typo\u3092\u63a2\u3057\u305f\u308a\u3057\u305f\u3002\n\n\u3067\u3001\u5b9f\u884c\u3059\u308b\u3068\n$ ./bin.elf\nRmxvb2QgZmlsbA0K\n\n$ echo \"Rmxvb2QgZmlsbA0K\" | base64 -D\nFlood fill\n\n\u2026\u3042\uff01\n\n\u7d0d\u5f97\u3067\u3057\u305f\u3002\u826f\u554f\u3002\n\nLast Challenge (Thank you for playing) (Exercises 50)\n\u6700\u521d\u3068\u540c\u3058\u3002\u3067\u3082\u6f14\u51fa\u3068\u3057\u3066\u597d\u304d\u3002\nc1 = \"PXFR}QIVTMSZCNDKUWAGJB{LHYEO\"\np1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ{}\"\n\nprob = \"A}FFDNEA}}HDJN}LGH}PWO\"\n\nprob.each_char do |c|\n  i = c1.index(c)\n  raise if i == -1\n  print p1[i]\nend\n\nputs \"\"\n\n\n\u4ed6\u306e\u65b9\u306eWriteup\n\nSECCON 2015 Online CTF\u306eWrite-up\u304c\u81ea\u7136\u306b\u96c6\u307e\u308b\u4e0d\u601d\u8b70\u306a\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\n\nhttp://ctf.seccon.jp/2015/\n\n\u30c1\u30fc\u30e0nicklegr\u3067\u500b\u4eba\u53c2\u52a0\u3002\n1000\u70b9\u3067190\u4f4d(872\u30c1\u30fc\u30e0\u4e2d)\u3067\u3057\u305f\u3002\n\n# Start SECCON CTF (Exercises 50)\n\u63db\u5b57\u5f0f\u6697\u53f7\u3002\u89aa\u5207\u306b\u5168\u6587\u5b57\u306e\u30c6\u30fc\u30d6\u30eb\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n```ruby\nc1 = \"PXFR}QIVTMSZCNDKUWAGJB{LHYEO\"\np1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ{}\"\n\nprob = \"A}FFDNEVPFSGV}KZPN}GO\"\n\nprob.each_char do |c|\n  i = c1.index(c)\n  raise if i == -1\n  print p1[i]\nend\n\nputs \"\"\n```\n\n# SECCON WARS 2015 (Stegano 100)\nhttps://youtu.be/8SFsln4VyEk\n\n\u6587\u5b57\u304c\u6d41\u308c\u308b\u90e8\u5206\u306b\u3001QR\u30b3\u30fc\u30c9\u306e\u5f62\u306b\u30de\u30b9\u30af\u304c\u304b\u304b\u3063\u3066\u308b\u3002\n\u5168\u30d5\u30ec\u30fc\u30e0\u3092\u91cd\u306d\u3066RGB\u306e\u6700\u5927\u5024\u3092\u53d6\u308c\u3070\u3001QR\u30b3\u30fc\u30c9\u3060\u3051\u9ed2\u3067\u51fa\u3066\u304d\u305d\u3046\u3002\n\u3068\u601d\u3063\u305f\u3051\u3069\u5727\u7e2e\u30ce\u30a4\u30ba\u306e\u305b\u3044\u304b\u3046\u307e\u304f\u3044\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u5e73\u5747\u5024\u306b\u5909\u66f4\u3002\n\u6700\u521d\u306e25\u79d2\u306f\u30ed\u30b4\u304c\u52d5\u3044\u3066\u90aa\u9b54\u3092\u3057\u3066\u304f\u308b\u306e\u3067\u9664\u5916\u3002\n\n```\n% ffmpeg -i SECCON\\ WARS\\ 2015.mp4 -ss 26 -f image2 dir/%d.png\n% convert *.png -average ../output.png\n```\n\n\u5e73\u5747\u306a\u306e\u3067\u3001\u7d50\u679c\u304c\u6697\u304b\u3063\u305f\u306e\u3067Photoshop\u306e\u30c8\u30fc\u30f3\u30ab\u30fc\u30d6\u3067\u660e\u308b\u304f\u3057\u3066\u3001\u30b9\u30de\u30db\u306eQR\u30b3\u30fc\u30c9\u30ea\u30fc\u30c0\u30fc\u306b\u8aad\u307e\u305b\u305f\u3002\n\n[MMA\u306e\u53bb\u5e74\u306eWriteup](https://wiki.mma.club.uec.ac.jp/CTF/Writeup/SECCON%202014%20Quals%20Online%20Winter#CTF.2FWriteup.2FSECCON_2014_Quals_Online_Winter.2FSECCON_Wars:_THE_Flag_Awakens.SECCON_Wars:_THE_Flag_Awakens_.28QR_300pts.29)\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n# Reverse-Engineering Android APK 1 (Binary 100)\n[Android APK Decompiler](http://www.decompileandroid.com/)\u306b\u6295\u3052\u308b\u3002\n\nsrc/com/example/seccon2015/rock_paper_scissors/MainActivity.java\n\n```\nif (1000 == cnt)\n{\n    textview.setText((new StringBuilder()).append(\"SECCON{\").append(String.valueOf((cnt + calc()) * 107)).append(\"}\").toString());\n}\n\npublic native int calc();\n\nstatic \n{\n    System.loadLibrary(\"calc\");\n}\n```\n\n`calc()`\u306f\u3001apk\u3092zip\u3068\u3057\u3066\u89e3\u51cd\u3059\u308b\u3068 `lib/x86/libcalc.so` \u5185\u306b\u3042\u308b\u3002\nHopper\u306b\u6295\u3052\u308b\u3068\n\n```\n             Java_com_example_seccon2015_rock_1paper_1scissors_MainActivity_calc:\n00000400         mov        eax, 0x7\n00000405         ret        \n                        ; endp\n```\n\n\u305d\u308c\u3060\u3051\u3002\n\n# Connect the server (Web/Network 100)\n\n```\nlogin.pwn.seccon.jp:10000\n```\n\nWeb\u30d6\u30e9\u30a6\u30b6\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u3001BackSpace\u306e\u5236\u5fa1\u30b3\u30fc\u30c9\u304c\u6df7\u3058\u3063\u305f\u30c6\u30ad\u30b9\u30c8\u304c\u51fa\u3066\u304f\u308b\u3002\n\u5236\u5fa1\u30b3\u30fc\u30c9\u3092\u53d6\u308a\u9664\u304f\u3068\u30d5\u30e9\u30b0\u3002\n\nnc\u3084telnet\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u30d5\u30e9\u30b0\u90e8\u5206\u304c\u898b\u3048\u306a\u304f\u306a\u308b\u4ed5\u7d44\u307f\u3002\n\u554f\u984c\u30b8\u30e3\u30f3\u30eb\u304c\u30d2\u30f3\u30c8\u304b\u3002\n\n# Command-Line Quiz (Unknown 100)\nLinux\u306e\u304a\u52c9\u5f37\u3002\n\n```\n% telnet caitsith.pwn.seccon.jp\n\n$ cat stage1.txt \nWhat command do you use when you want to read only top lines of a text file?\n\nSet your answer to environment variable named stage1 and execute a shell.\n\n  $ stage1=$your_answer_here sh\n\nIf your answer is what I meant, you will be able to access stage2.txt file.\n\n$ stage1=head sh       \n$ cat stage2.txt \nWhat command do you use when you want to read only bottom lines of a text file?\n\nSet your answer to environment variable named stage2 and execute a shell.\n\n  $ stage2=$your_answer_here sh\n\nIf your answer is what I meant, you will be able to access stage3.txt file.\n\n$ stage2=tail sh \n$ cat stage3.txt \nWhat command do you use when you want to pick up lines that match specific patterns?\n\nSet your answer to environment variable named stage3 and execute a shell.\n\n  $ stage3=$your_answer_here sh\n\nIf your answer is what I meant, you will be able to access stage4.txt file.\n\n$ stage3=grep sh\n$ cat stage4.txt \nWhat command do you use when you want to process a text file?\n\nSet your answer to environment variable named stage4 and execute a shell.\n\n  $ stage4=$your_answer_here sh\n\nIf your answer is what I meant, you will be able to access stage5.txt file.\n\n$ stage4=sed sh \n$ cat stage5.txt \ncat: can't open 'stage5.txt': Operation not permitted\n\n$ stage4=awk sh\n$ cat stage5.txt \nOK. You reached the final stage. The flag word is in flags.txt file.\n\nflags.txt can be read by only one specific program which is available\nin this server. The program for reading flags.txt is one of commands\nyou can use for processing a text file. Please find it. Good luck. ;-)\n\n$ sed -e 's/A/A/g' flags.txt  \nOK. You have read all .txt files. The flag word is shown below.\n\nSECCON{CaitSith@AQUA}\n```\n\n# QR puzzle (Nonogram) (Unknown 300)\n\u306e\u306e\u3050\u3089\u3080(\u304a\u7d75\u304b\u304d\u30ed\u30b8\u30c3\u30af)\u3092\u89e3\u304f\u3068QR\u30b3\u30fc\u30c9\u304c\u51fa\u3066\u304f\u308b\u3002\u305d\u308c\u309230\u554f\u3002\u554f\u984c\u306f\u6bce\u56de\u30e9\u30f3\u30c0\u30e0\u3002\n\u4e0b\u8a18\u3092\u81ea\u52d5\u5316\u3057\u305f\u3002\n\n- \u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u3057\u3066\u554f\u984c\u3092\u62bd\u51fa\n- [\u30aa\u30f3\u30e9\u30a4\u30f3\u30bd\u30eb\u30d0\u30fc](http://www.lancs.ac.uk/~simpsons/nonogram/auto.htmlz.en-GB)\u306b\u6295\u3052\u308b\n- [\u5f37\u529b\u306aQR\u30b3\u30fc\u30c9\u30c7\u30b3\u30fc\u30c0](https://github.com/waidotto/strong-qr-decoder)\u306b\u6295\u3052\u308b\n\n\u9762\u5012\u306a\u306e\u304c\u3001\u89e3\u304c\u4e00\u610f\u3058\u3083\u306a\u3044\u554f\u984c\u304c\u3042\u308b\u3053\u3068\u3002(\u5e02\u8ca9\u306e\u554f\u984c\u306b\u3082\u3068\u304d\u3069\u304d\u3042\u308b)\n\u4ee5\u4e0b\u3067\u30d5\u30a9\u30ed\u30fc\u3057\u305f\u3002\n\n- \u524d\u8ff0\u306e\u30bd\u30eb\u30d0\u30fc\u304c4\u301c5\u901a\u308a\u306e\u89e3\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b(\u5168\u30d1\u30bf\u30fc\u30f3\u3058\u3083\u306a\u3044\u3063\u307d\u3044)\u306e\u3067\u5168\u90e8\u8a66\u3059\n- QR\u30c7\u30b3\u30fc\u30c0\u306e\u30a8\u30e9\u30fc\u8a02\u6b63\n- \u89e3\u7b54\u306f `/^\\w+$/` \u3063\u307d\u3044\u306e\u3067\u3001\u30de\u30c3\u30c1\u3057\u306a\u3044\u306e\u3092\u5f3e\u304f\n  - \u3061\u306a\u307f\u306b\u6700\u5f8c\u306e\u554f\u984c\u3060\u3051\u4f8b\u5916\u3002 `SECCON{YES_WE_REALLY_LOVE_QR_CODE_BECAUSE_OF_ITS_CLEVER_DESIGN}`\n\n\u3042\u3068\u306f\u904b\u983c\u307f\u3067\u30b4\u30ea\u62bc\u3057\u300210\u56de\u304f\u3089\u3044\u30ea\u30c8\u30e9\u30a4\u3057\u305f\u3089\u901a\u3063\u305f\u3002\n\n```ruby\n# coding: utf-8\n\nrequire 'open-uri'\nrequire 'nokogiri'\nrequire 'json'\nrequire 'mechanize'\nrequire 'pp'\nrequire 'logger'\nrequire \"open3\"\n\ndef parse_nonogram(html)\n  ret = []\n\n  doc = Nokogiri::HTML(html)\n  cols = doc.css(\"th.cols\")\n  rows = doc.css(\"th.rows\")\n\n  ret << \"width #{cols.size}\"\n  ret << \"height #{rows.size}\"\n\n  ret << \"rows\"\n  rows.each do |row|\n    value = row.css(\"span\").map do |e| e.inner_text end\n    ret << value.join(\",\")  \n  end\n\n  ret << \"columns\"\n  cols.each do |col|\n    value = col.css(\"span\").map do |e| e.inner_text end\n    ret << value.join(\",\")\n  end\n\n  ret.join(\"\\n\")\nend\n\ndef solve_nonogram(nonogram)\n  agent = Mechanize.new\n  # agent.log = Logger.new(STDERR)\n\n  page = agent.get(\"http://www.lancs.ac.uk/~simpsons/nonogram/auto.htmlz.en-GB\")\n  form = page.forms.first\n\n  form.radiobutton_with(:value => \"field\").check\n  form[\"field\"] = nonogram\n  form[\"cr\"] = false\n  form[\"cb\"] = false\n\n  # Gateway timeout \u5bfe\u7b56\n  5.times do\n    begin\n      page = agent.submit(form)\n      break\n    rescue\n      next\n    end\n  end\n\n  ret = []\n  doc = Nokogiri::HTML(page.body)\n  doc.css(\"pre\").each do |pre|\n    ret << pre.inner_text.strip\n  end\n\n  ret\nend\n\ndef decode_qr(str)\n  o, e, s = Open3.capture3(\"python sqrd.py\", :stdin_data => str)\n\n  unless s.success?\n    puts o\n    puts e\n    nil\n  end\n\n  o.scrub(\"?\").strip\nend\n\nagent = Mechanize.new\n# agent.log = Logger.new(STDERR)\npage = agent.get(\"http://qrlogic.pwn.seccon.jp:10080/game/\")\n\nloop do\n  if page.body.match(/Stage: \\d+ \\/ \\d+/)\n    puts $&\n  else\n    puts page.body\n    break\n  end\n\n  nonogram = parse_nonogram(page.body)\n# puts nonogram\n\n  solutions = solve_nonogram(nonogram)\npp solutions\n\n  flags = solutions.map do |e|\n    decode_qr(e)\n  end\n\npp flags\n\n  flags.compact!\n  flags.select! do |e|\n    e.match(/^\\w+$/)\n  end\n  raise if flags.empty?\n\n  puts \"try with #{flags.first}\"\n\n  form = page.forms.first\n  form.ans = flags.first\n\n  page = agent.submit(form)\nend\n```\n\n# Steganography 1 (Stegano 100)\n\u4e0e\u3048\u3089\u308c\u308b`MrFusion.gpjb`\u306b\u3001gif, png, jpg, bmp\u753b\u50cf\u304c\u54044\u500b*4\u30bb\u30c3\u30c8\u5165\u3063\u3066\u3066\u3001\u305d\u308c\u305e\u308c1\u6587\u5b57\u305a\u3064\u30d5\u30e9\u30b0\u304c\u5165\u3063\u3066\u308b\u3002\n\u62e1\u5f35\u5b50\u304c\u30d2\u30f3\u30c8\u304b\u3002\n\n\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u5207\u308a\u5206\u3051\u305f\u3051\u3069\u3001\u30b7\u30b0\u30cd\u30c1\u30e3\u304c\u77ed\u304f\u3066\u6b63\u78ba\u306b\u3044\u304b\u305a\u3001\u4e00\u90e8\u624b\u4f5c\u696d\u3067\u5207\u308a\u51fa\u3057\u3002\n\n```rb\nrequire \"pp\"\n\nstr = File.binread(\"MrFusion.gpjb\").unpack(\"H*\").first\n# puts str\n\n# pngs = str.scan(/89504e47.+?49454e44ae426082/)\n# pp pngs.size\n\n# jpgs = str.scan(/ffd8ff.+?ffd9/)\n# pp jpgs.size\n\n# gifs = str.scan(/474946383961.+?3b/)\n# pp gifs.size\n\n# bmps = str.scan(/3630\\w{4}/)\n# pp bmps\n# [\"36302a00\", \"36304c0e\", \"36302a00\", \"36302a00\"]\n# 19470 - 6\n\n# images = str.scan(/89504e47.+?49454e44ae426082|ffd8ff.+?ffd9|474946383961.+?3b|3630.+?(?=89504e47|ffd8ff|474946383961)/)\n# images = str.scan(/89504e47.+?49454e44ae426082|ffd8ff.+?ffd9|474946383961.+?(?=89504e47|ffd8ff|3630)|3630.+?(?=89504e47|ffd8ff|474946383961)/)\n# images = str.scan(/(89504e47|ffd8ff|474946383961|3630).+?(?=89504e47|ffd8ff|474946383961|3630)/)\nimages = str.scan(/89504e47.+?49454e44ae426082|ffd8ff.+?ffd9|474946383961.+?(?=89504e47|ffd8ff|424d3630)|424d3630.+?(?=89504e47|ffd8ff|474946383961)/)\npp images.size\n\ni = 0\nimages.each do |e|\n  # e = e.join(\"\")\n\n  puts e[0, 20]\n  bin = [e].pack(\"H*\")\n\n  ext =\n    case e\n    when /^89504e47/\n      \"png\"\n    when /^ffd8ff/\n      \"jpg\"\n    when /^474946383961/\n      \"gif\"\n    when /^424d3630/\n      \"bmp\"\n    end\n\n  File.binwrite(\"image#{sprintf(\"%02d\", i)}.#{ext}\", bin)\n\n  i += 1\nend\n```\n\n# Steganography 3 (Stegano 100)\nelf\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30f3\u30d7\u753b\u50cf\u3002\n\n![desktop_capture.png](https://qiita-image-store.s3.amazonaws.com/0/10750/a3c5cafd-b846-5318-307d-332e9a746415.png)\n\n\u30b8\u30e3\u30f3\u30eb\u304cStegano\u3060\u3057\u3001\u300c\u5c0f\u5b66\u751f\u306a\u30895\u5206\u3067\u89e3\u3051\u308b\u304c\u30d7\u30ed\u30b0\u30e9\u30de\u306f1\u6642\u9593\u304b\u304b\u308b\u300d\u304c\u3044\u304b\u306b\u3082\u30d2\u30f3\u30c8\u3002\n\u304c\u3001\u611a\u76f4\u306b\u5199\u7d4c\u3057\u3066\u307f\u305f\u3002\n\u5143\u753b\u50cf\u3068\u5199\u7d4c\u7d50\u679c\u3092\u753b\u50cf\u3067\u91cd\u306d\u3066typo\u3092\u63a2\u3057\u305f\u308a\u3057\u305f\u3002\n\n![syakyou.png](https://qiita-image-store.s3.amazonaws.com/0/10750/5a895f42-272d-9d23-1067-e3832cac49c2.png)\n\n\u3067\u3001\u5b9f\u884c\u3059\u308b\u3068\n\n```\n$ ./bin.elf\nRmxvb2QgZmlsbA0K\n\n$ echo \"Rmxvb2QgZmlsbA0K\" | base64 -D\nFlood fill\n```\n\n\u2026\u3042\uff01\n\n![answer.png](https://qiita-image-store.s3.amazonaws.com/0/10750/79831c49-02c5-75b7-5152-2fe015557caf.png)\n\n\u7d0d\u5f97\u3067\u3057\u305f\u3002\u826f\u554f\u3002\n\n# Last Challenge (Thank you for playing) (Exercises 50)\n\u6700\u521d\u3068\u540c\u3058\u3002\u3067\u3082\u6f14\u51fa\u3068\u3057\u3066\u597d\u304d\u3002\n\n```ruby\nc1 = \"PXFR}QIVTMSZCNDKUWAGJB{LHYEO\"\np1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ{}\"\n\nprob = \"A}FFDNEA}}HDJN}LGH}PWO\"\n\nprob.each_char do |c|\n  i = c1.index(c)\n  raise if i == -1\n  print p1[i]\nend\n\nputs \"\"\n```\n\n# \u4ed6\u306e\u65b9\u306eWriteup\n- [SECCON 2015 Online CTF\u306eWrite-up\u304c\u81ea\u7136\u306b\u96c6\u307e\u308b\u4e0d\u601d\u8b70\u306a\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8](https://docs.google.com/spreadsheets/d/1IEKOBftoAMnOocH10Q2r8sjC54sprRJJsXt9KMnwmBQ)\n", "tags": ["CTF", "writeup", "seccon"]}