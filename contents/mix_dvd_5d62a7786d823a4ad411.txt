{"context": "\n\n\u306f\u3058\u3081\u306b\n\u5148\u65e5\u3001\u6a5f\u68b0\u5b66\u7fd2\u3057\u305f\u7d50\u679c\u3092\u4f7f\u3063\u3066\u52d8\u5b9a\u79d1\u76ee\u3092\u4e88\u6e2c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u4e88\u6e2c\u7d50\u679c\u306e\u5fdc\u7b54\u304c\u7570\u5e38\u306b\u9045\u304f\u3066\u4f7f\u3044\u3082\u306e\u306b\u306a\u3089\u306a\u3044\u3068\u3044\u3046\u3054\u610f\u898b\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u5c11\u3057\u5de5\u592b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4f1a\u8a08\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u3057\u3066\u3001\u4ed5\u8a33\u306e\u5165\u529b\u6642\u306b\u6458\u8981\u306e\u5185\u5bb9\u304b\u3089\u52d8\u5b9a\u79d1\u76ee\u3092\u4e88\u6e2c\u3057\u3066\u307f\u308b - Qiita\n\n\u5fdc\u7b54\u306e\u4ed5\u7d44\u307f\n\u5b66\u7fd2\u7d50\u679c\u3092\u30e1\u30e2\u30ea\u30fc\u5185\u306b\u4fdd\u6301\u3057\u3001\u6458\u8981\u3092\u9001\u4fe1\u3059\u308b\u3068\u52d8\u5b9a\u79d1\u76ee\u3092\u8fd4\u3057\u3066\u304f\u308b\u3068\u3044\u3046\u3082\u306e\u3092\u7c21\u6613\u306b\u5b9f\u73fe\u3059\u308b\u305f\u3081\u3001HTTP\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u305d\u3053\u3067\u3001Python\u3067HTTP\u30b5\u30fc\u30d0\u30fc\u3092\u4f5c\u6210\u3057\u3001HTTP\u30b5\u30fc\u30d0\u30fc\u8d77\u52d5\u6642\u306b\u5b66\u7fd2\u7d50\u679c\u3092\u8aad\u307f\u8fbc\u3093\u3067\u304a\u304d\u3001GET\u3067\u6458\u8981\u3092\u9001\u4fe1\u3057\u305f\u3089\u52d8\u5b9a\u79d1\u76ee\u3092\u4e88\u6e2c\u3057\u3066\u8fd4\u3059\u3068\u3044\u3046\u3082\u306e\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\nPython\u3067HTTP\u30b5\u30fc\u30d0\u30fc\u3092\u69cb\u7bc9\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\nPython\u3067\u7c21\u5358\u306bHTTP\u30b5\u30fc\u30d0\u3092\u4f5c\u308b - Qiita\n\u6982\u306d\u305d\u306e\u307e\u307e\u4f7f\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001BaseHTTPServer\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5909\u66f4\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3068\u3001\u65e5\u672c\u8a9e\u306e\u51e6\u7406\u3067\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3053\u3068\u304b\u3089\u5c11\u3005\u4fee\u6b63\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001Python3\u3067\u3059\u3002\n\nCallbackServer.py\n#!/usr/local/bin/python\n# coding: utf-8\n\nimport requests\nimport http.server\nimport socketserver\nfrom http.server import BaseHTTPRequestHandler\nfrom urllib.parse import urlparse, unquote\n\ndef start(port, callback):\n    def handler(*args):\n        CallbackServer(callback, *args)\n    server = socketserver.TCPServer(('', int(port)), handler)\n    server.serve_forever()\n\nclass CallbackServer(BaseHTTPRequestHandler):\n    def __init__(self, callback, *args):\n        self.callback = callback\n        BaseHTTPRequestHandler.__init__(self, *args)\n\n    def do_GET(self):\n        parsed_path = urlparse(self.path)\n        query = unquote(parsed_path.query)\n\n        self.send_response(200)\n        self.end_headers()\n\n        result = self.callback(query)\n\n        self.wfile.write(result.encode('utf-8'))\n\n        return\n\n\n\n\u30b5\u30fc\u30d0\u30fc\u8d77\u52d5\u30b9\u30af\u30ea\u30d7\u30c8\n\u8d77\u52d5\u6642\u306b\u5b66\u7fd2\u7d50\u679c\u3092\u8aad\u307f\u8fbc\u307f\u3001GET\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3067\u4e88\u6e2c\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nserver.py\n#!/usr/local/bin/python\n# coding: utf-8\n\nimport sys\nimport CallbackServer\n\nimport pandas as pd\nimport numpy as np\n\nhomedir = \"/home/scripts/\"\nfilename = \"data/code.csv\"\n\ndf = pd.read_csv(homedir + filename, header=None)\ndf.index = df.pop(0)\n\ndf_rs = df.pop(1)\n\nfrom sklearn.externals import joblib\n\nscaler = joblib.load(homedir + 'data/scaler.pkl')\nclf = joblib.load(homedir + 'data/clf.pkl')\nvect = joblib.load(homedir + 'data/vect.pkl')\n\nfrom janome.tokenizer import Tokenizer\n\nt = Tokenizer()\n\ndef callback_method(query):\n    texts = [\n        query,\n    ]\n\n    notes = []\n    for note in texts:\n        tokens = t.tokenize(note)\n        words = \"\"\n        for token in tokens:\n            words += \" \" + token.surface\n        notes.append(words)\n\n    X = vect.transform(notes)\n\n    result = clf.predict(X)\n    ans = \"\"\n\n    for i in range(len(texts)):\n        ans = df_rs.ix[result[i]]\n\n    return ans\n\nif __name__ == '__main__':\n    port = sys.argv[1]\n    CallbackServer.start(port, callback_method)\n\n\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u8d77\u52d5\u3057\u307e\u3059\u3002\n$ chmod a+x server.py\n$ ./server.py 8080 &\n\n\n\u52d5\u4f5c\u30c6\u30b9\u30c8\nRuby\u3092\u4f7f\u3063\u3066\u4e88\u6e2c\u7d50\u679c\u3092\u53d6\u5f97\u3057\u3066\u307f\u307e\u3059\u3002\n\ntest.rb\nrequire 'net/http'\nrequire 'uri'\n\nputs Net::HTTP.get_print('localhost', URI.escape('/?\u9ad8\u901f\u9053\u8def\u5229\u7528\u6599'), 8080)\n\n\n\u5b9f\u884c\u3057\u307e\u3059\u3002\n$ ruby test.rb\n\u65c5\u8cbb\u4ea4\u901a\n\n\u3067\u304d\u305f(^-^)\n\nLINE\u30dc\u30c3\u30c8\u306b\u7d44\u307f\u8fbc\u3093\u3067\u307f\u308b\u3002\n\n\u3044\u3044\u611f\u3058(^-^)\nLINE\u30dc\u30c3\u30c8\u306e\u4f5c\u308a\u65b9\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u3054\u53c2\u7167\u4e0b\u3055\u3044\u3002\nLINE\u306eMessaging API\u3067\u81ea\u52d5\u5fdc\u7b54\u306eBOT\u3092\u4f5c\u6210\u3059\u308b with Ruby\n\u3061\u306a\u307f\u306b\u3001\u3053\u306eLINE\u30dc\u30c3\u30c8\u306f\u4ee5\u4e0b\u306eQR\u30b3\u30fc\u30c9\u3067\u304a\u53cb\u9054\u306b\u306a\u308c\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u6b21\u306f\u4f55\u3057\u3088\u3046\u304b\u306a\uff01\n# \u306f\u3058\u3081\u306b\n\n\u5148\u65e5\u3001\u6a5f\u68b0\u5b66\u7fd2\u3057\u305f\u7d50\u679c\u3092\u4f7f\u3063\u3066\u52d8\u5b9a\u79d1\u76ee\u3092\u4e88\u6e2c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u4e88\u6e2c\u7d50\u679c\u306e\u5fdc\u7b54\u304c\u7570\u5e38\u306b\u9045\u304f\u3066\u4f7f\u3044\u3082\u306e\u306b\u306a\u3089\u306a\u3044\u3068\u3044\u3046\u3054\u610f\u898b\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u5c11\u3057\u5de5\u592b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n[\u4f1a\u8a08\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u3057\u3066\u3001\u4ed5\u8a33\u306e\u5165\u529b\u6642\u306b\u6458\u8981\u306e\u5185\u5bb9\u304b\u3089\u52d8\u5b9a\u79d1\u76ee\u3092\u4e88\u6e2c\u3057\u3066\u307f\u308b - Qiita](http://qiita.com/mix_dvd/items/9c2ef5e6fcc390be067e)\n\n# \u5fdc\u7b54\u306e\u4ed5\u7d44\u307f\n\n\u5b66\u7fd2\u7d50\u679c\u3092\u30e1\u30e2\u30ea\u30fc\u5185\u306b\u4fdd\u6301\u3057\u3001\u6458\u8981\u3092\u9001\u4fe1\u3059\u308b\u3068\u52d8\u5b9a\u79d1\u76ee\u3092\u8fd4\u3057\u3066\u304f\u308b\u3068\u3044\u3046\u3082\u306e\u3092\u7c21\u6613\u306b\u5b9f\u73fe\u3059\u308b\u305f\u3081\u3001HTTP\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u305d\u3053\u3067\u3001Python\u3067HTTP\u30b5\u30fc\u30d0\u30fc\u3092\u4f5c\u6210\u3057\u3001HTTP\u30b5\u30fc\u30d0\u30fc\u8d77\u52d5\u6642\u306b\u5b66\u7fd2\u7d50\u679c\u3092\u8aad\u307f\u8fbc\u3093\u3067\u304a\u304d\u3001GET\u3067\u6458\u8981\u3092\u9001\u4fe1\u3057\u305f\u3089\u52d8\u5b9a\u79d1\u76ee\u3092\u4e88\u6e2c\u3057\u3066\u8fd4\u3059\u3068\u3044\u3046\u3082\u306e\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n# Python\u3067HTTP\u30b5\u30fc\u30d0\u30fc\u3092\u69cb\u7bc9\n\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n[Python\u3067\u7c21\u5358\u306bHTTP\u30b5\u30fc\u30d0\u3092\u4f5c\u308b - Qiita](http://qiita.com/shinido/items/b4fdc907a37424bcf15b)\n\n\u6982\u306d\u305d\u306e\u307e\u307e\u4f7f\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001BaseHTTPServer\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5909\u66f4\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3068\u3001\u65e5\u672c\u8a9e\u306e\u51e6\u7406\u3067\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3053\u3068\u304b\u3089\u5c11\u3005\u4fee\u6b63\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001Python3\u3067\u3059\u3002\n\n```py3:CallbackServer.py\n#!/usr/local/bin/python\n# coding: utf-8\n\nimport requests\nimport http.server\nimport socketserver\nfrom http.server import BaseHTTPRequestHandler\nfrom urllib.parse import urlparse, unquote\n\ndef start(port, callback):\n    def handler(*args):\n        CallbackServer(callback, *args)\n    server = socketserver.TCPServer(('', int(port)), handler)\n    server.serve_forever()\n\nclass CallbackServer(BaseHTTPRequestHandler):\n    def __init__(self, callback, *args):\n        self.callback = callback\n        BaseHTTPRequestHandler.__init__(self, *args)\n\n    def do_GET(self):\n        parsed_path = urlparse(self.path)\n        query = unquote(parsed_path.query)\n        \n        self.send_response(200)\n        self.end_headers()\n        \n        result = self.callback(query)\n        \n        self.wfile.write(result.encode('utf-8'))\n        \n        return\n```\n\n# \u30b5\u30fc\u30d0\u30fc\u8d77\u52d5\u30b9\u30af\u30ea\u30d7\u30c8\n\n\u8d77\u52d5\u6642\u306b\u5b66\u7fd2\u7d50\u679c\u3092\u8aad\u307f\u8fbc\u307f\u3001GET\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3067\u4e88\u6e2c\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\n        \n```py3:server.py\n#!/usr/local/bin/python\n# coding: utf-8\n\nimport sys\nimport CallbackServer\n\nimport pandas as pd\nimport numpy as np\n\nhomedir = \"/home/scripts/\"\nfilename = \"data/code.csv\"\n\ndf = pd.read_csv(homedir + filename, header=None)\ndf.index = df.pop(0)\n\ndf_rs = df.pop(1)\n\nfrom sklearn.externals import joblib\n\nscaler = joblib.load(homedir + 'data/scaler.pkl')\nclf = joblib.load(homedir + 'data/clf.pkl')\nvect = joblib.load(homedir + 'data/vect.pkl')\n\nfrom janome.tokenizer import Tokenizer\n\nt = Tokenizer()\n\ndef callback_method(query):\n    texts = [\n        query,\n    ]\n\n    notes = []\n    for note in texts:\n        tokens = t.tokenize(note)\n        words = \"\"\n        for token in tokens:\n            words += \" \" + token.surface\n        notes.append(words)\n    \n    X = vect.transform(notes)\n    \n    result = clf.predict(X)\n    ans = \"\"\n\n    for i in range(len(texts)):\n        ans = df_rs.ix[result[i]]\n        \n    return ans\n\nif __name__ == '__main__':\n    port = sys.argv[1]\n    CallbackServer.start(port, callback_method)\n```\n\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u8d77\u52d5\u3057\u307e\u3059\u3002\n\n```sh:\n$ chmod a+x server.py\n$ ./server.py 8080 &\n```\n\n# \u52d5\u4f5c\u30c6\u30b9\u30c8\n\nRuby\u3092\u4f7f\u3063\u3066\u4e88\u6e2c\u7d50\u679c\u3092\u53d6\u5f97\u3057\u3066\u307f\u307e\u3059\u3002\n\n```rb:test.rb\nrequire 'net/http'\nrequire 'uri'\n\nputs Net::HTTP.get_print('localhost', URI.escape('/?\u9ad8\u901f\u9053\u8def\u5229\u7528\u6599'), 8080)\n```\n\n\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```sh:\n$ ruby test.rb\n\u65c5\u8cbb\u4ea4\u901a\n```\n\n\u3067\u304d\u305f(^-^)\n\n# LINE\u30dc\u30c3\u30c8\u306b\u7d44\u307f\u8fbc\u3093\u3067\u307f\u308b\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-03-11 7.33.33.png](https://qiita-image-store.s3.amazonaws.com/0/114240/adf92be2-bf82-c31d-0f81-855c439fc4d6.png)\n\n\u3044\u3044\u611f\u3058(^-^)\n\nLINE\u30dc\u30c3\u30c8\u306e\u4f5c\u308a\u65b9\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u3054\u53c2\u7167\u4e0b\u3055\u3044\u3002\n\n[LINE\u306eMessaging API\u3067\u81ea\u52d5\u5fdc\u7b54\u306eBOT\u3092\u4f5c\u6210\u3059\u308b with Ruby](http://qiita.com/mix_dvd/items/b0065d9adb8f486838c4)\n\n\u3061\u306a\u307f\u306b\u3001\u3053\u306eLINE\u30dc\u30c3\u30c8\u306f\u4ee5\u4e0b\u306eQR\u30b3\u30fc\u30c9\u3067\u304a\u53cb\u9054\u306b\u306a\u308c\u307e\u3059\u3002\n\n![2e099ea3-2a40-49b9-ca84-431c809cf153.png](https://qiita-image-store.s3.amazonaws.com/0/114240/160c2e12-8671-8b31-471c-aecb1e533553.png)\n\n\u3055\u3066\u3001\u6b21\u306f\u4f55\u3057\u3088\u3046\u304b\u306a\uff01\n", "tags": ["Python", "HTTP", "\u6a5f\u68b0\u5b66\u7fd2"]}