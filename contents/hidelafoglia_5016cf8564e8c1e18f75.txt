{"tags": ["Django"], "context": "\n\nalex/django-filter (doc)\nYYYY-MM \u3082\u53d7\u3051\u4ed8\u3051\u308b\u3002From\u306f\u305d\u306e\u6708\u306e\u521d\u65e5\u3001 To \u306f\u305d\u306e\u6708\u306e\u6700\u7d42\u65e5\u3002\n\n\n\u30d5\u30a9\u30fc\u30e0\u30d5\u30a3\u30fc\u30eb\u30c9\n\ndjango_filters.widgets.RangeWidget \u3092\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066 From , To \u306e\u5165\u529b\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u51fa\u3059\n\u30d5\u30a3\u30fc\u30eb\u30c9\u306fforms.CharField\n\nfrom django import forms\nfrom django_filters.widgets import RangeWidget\nfrom datetime import date, timedelta\nimport re\n\n\nclass DateRangeField(forms.MultiValueField):\n    widget = RangeWidget\n\n    def __init__(self, *args, **kwargs):\n        fields = (\n            forms.CharField(),\n            forms.CharField(),\n        )\n        super(DateRangeField, self).__init__(fields, *args, **kwargs)\n\n    def find_date(self, datestr, find_last=False):\n        if not datestr:\n            return None\n        year, month, day = [\n            i and int(i) for i in\n            (re.split(r'\\D+', datestr) + [None, None, None])[:3]]\n        if not year or not month:\n            return None\n        month = min(12, max(1, month))\n        year = min(9999, max(1, year))\n        any_day = date(year, month, day or 1)\n        if find_last and not day:\n            # day\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u304f\u3066\u6700\u7d42\u65e5\u3092\u63a2\u3059\n            any_day = (\n                any_day.replace(day=1) + timedelta(days=32)\n            ).replace(day=1) - timedelta(days=1)\n        return any_day\n\n    def compress(self, data_list):\n        ''' \u5fc5\u9808: slice(start_date, stop_date)\u3092\u8fd4\u3059\n        '''\n        if data_list:\n            start = self.find_date(data_list[0])\n            if data_list[1]:\n                stop = self.find_date(data_list[1], True)\n            else:\n                stop = None\n            return slice(start, stop)\n        return None\n\n\n\u30d5\u30a3\u30fc\u30eb\u30c9\u30d5\u30a3\u30eb\u30bf\u30fc\nimport django_filters\nfrom . import fields\n\nclass DateRangeFilter(django_filters.RangeFilter):\n    field_class = fields.DateRangeField\n\n\n\u30e2\u30c7\u30eb & \u30e2\u30c7\u30eb\u30d5\u30a3\u30eb\u30bf\u30fc\nclass Bulletin(BaseModel):\n    issued_at = models.DateField(\n        null=True, default=None, blank=True)\n    ....\n\nclass BulletinFilter(django_filters.FilterSet):\n    issued_at = DateRangeFilter()\n\n    class Meta:\n        model = models.Bulletin\n\n\n- [alex/django-filter](https://github.com/alex/django-filter) ([doc](https://django-filter.readthedocs.org/en/latest/))\n- YYYY-MM \u3082\u53d7\u3051\u4ed8\u3051\u308b\u3002From\u306f\u305d\u306e\u6708\u306e\u521d\u65e5\u3001 To \u306f\u305d\u306e\u6708\u306e\u6700\u7d42\u65e5\u3002\n\n## \u30d5\u30a9\u30fc\u30e0\u30d5\u30a3\u30fc\u30eb\u30c9\n\n- django_filters.widgets.RangeWidget \u3092\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066 From , To \u306e\u5165\u529b\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u51fa\u3059\n- \u30d5\u30a3\u30fc\u30eb\u30c9\u306fforms.CharField\n\n~~~python\nfrom django import forms\nfrom django_filters.widgets import RangeWidget\nfrom datetime import date, timedelta\nimport re\n\n\nclass DateRangeField(forms.MultiValueField):\n    widget = RangeWidget\n\n    def __init__(self, *args, **kwargs):\n        fields = (\n            forms.CharField(),\n            forms.CharField(),\n        )\n        super(DateRangeField, self).__init__(fields, *args, **kwargs)\n\n    def find_date(self, datestr, find_last=False):\n        if not datestr:\n            return None\n        year, month, day = [\n            i and int(i) for i in\n            (re.split(r'\\D+', datestr) + [None, None, None])[:3]]\n        if not year or not month:\n            return None\n        month = min(12, max(1, month))\n        year = min(9999, max(1, year))\n        any_day = date(year, month, day or 1)\n        if find_last and not day:\n            # day\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u304f\u3066\u6700\u7d42\u65e5\u3092\u63a2\u3059\n            any_day = (\n                any_day.replace(day=1) + timedelta(days=32)\n            ).replace(day=1) - timedelta(days=1)\n        return any_day\n\n    def compress(self, data_list):\n        ''' \u5fc5\u9808: slice(start_date, stop_date)\u3092\u8fd4\u3059\n        '''\n        if data_list:\n            start = self.find_date(data_list[0])\n            if data_list[1]:\n                stop = self.find_date(data_list[1], True)\n            else:\n                stop = None\n            return slice(start, stop)\n        return None\n~~~        \n\n\n## \u30d5\u30a3\u30fc\u30eb\u30c9\u30d5\u30a3\u30eb\u30bf\u30fc\n\n~~~python\nimport django_filters\nfrom . import fields\n\nclass DateRangeFilter(django_filters.RangeFilter):\n    field_class = fields.DateRangeField\n~~~\n\n\n## \u30e2\u30c7\u30eb & \u30e2\u30c7\u30eb\u30d5\u30a3\u30eb\u30bf\u30fc\n\n~~~python\nclass Bulletin(BaseModel):\n    issued_at = models.DateField(\n        null=True, default=None, blank=True)\n    ....\n~~~\n\n~~~python\nclass BulletinFilter(django_filters.FilterSet):\n    issued_at = DateRangeFilter()\n\n    class Meta:\n        model = models.Bulletin\n~~~\n"}