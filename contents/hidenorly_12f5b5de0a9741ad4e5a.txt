{"context": " More than 1 year has passed since last update.\n\nOverview\n\u539f\u5178\u306f\u3001https://matt.sh/howto-c (\u65e5\u672c\u8a9e\u8a33\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u308b\u65b9\u306e\u30da\u30fc\u30b8\u306f http://postd.cc/how-to-c-in-2016-1/ )\u3067\u3059\u3002\n\u3053\u3053\u3067\u306e\u3044\u304f\u3064\u304b\u306b\u3064\u3044\u3066\u3001\u5206\u6790\u3057\u3066\u307f\u307e\u3059\u3002\u307e\u305a\u306f\u3001warning\u7de8\u304b\u3089\u3002\n\n\u4e8b\u524d\u6e96\u5099 section\n\nwarning : -pedantic\nhttp://clang.llvm.org/docs/UsersManual.html \u306b\u3088\u308b\u3068\u3001\n-pedantic\n Warn on language extensions.\n\n\u3068\u3042\u308a\u307e\u3059\u3002Google\u3063\u3066\u307f\u308b\u3068\u3001\nhttp://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0742bj/chr1398848167694_00008.html\n\u306b\u306f\u3001\u51fa\u529b\u4f8b\u304c\u3042\u308a\u3001\n$ armclang --target=aarch64-arm-none-eabi -c -pedantic --std=c90 test.c\n  test.c:3:5: warning: anonymous structs are a C11 extension [-Wc11-extensions]\n\n$ armclang --target=aarch64-arm-none-eabi -c -pedantic -xc++  test.c\n  test.c:3:5: warning: anonymous structs are a GNU extension [-Wgnu-anonymous-struct]\n\n\u3053\u3093\u306a\u3082\u306e\u3092\u51fa\u529b\u3059\u308b\u3068\u3042\u308a\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001--std=cxx\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u305fcxx\u306e\u8a00\u8a9e\u305f\u3082\u306e\u3092\u8d85\u3048\u305f\u8a00\u8a9e\u62e1\u5f35\u3092\u4f7f\u7528\u3057\u305f\u30b3\u30fc\u30c9\u304c\u5408\u3063\u305f\u5834\u5408\u306b\u3001warning\u3092\u51fa\u3057\u3066\u304f\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\n\nwarning : -Wshadow\n\u2605\u8ffd\u8a18\u3001\u8a02\u6b63\u2605\nhttps://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html\n-Wshadow\nWarn whenever a local variable or type declaration shadows another variable, parameter, type, class member (in C++), or instance variable (in Objective-C) or whenever a built-in function is shadowed. Note that in C++, the compiler warns if a local variable shadows an explicit typedef, but not if it shadows a struct/class/enum. \n\nlocal\u5909\u6570\u307e\u305f\u306f\u578b\u5ba3\u8a00\u304c\u3001\u4ed6\u306e\u5909\u6570\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3001\u578b\u3001class\u30e1\u30f3\u30d0\u30fc\u3084\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3001built-in\u306e\u95a2\u6570\u3092shadow\u3059\u308b\u3068\u304d\u306b\u3001warning\u3057\u307e\u3059\u3002\u306a\u304a\u3001C++\u306b\u304a\u3044\u3066\u306f\u3001local\u5909\u6570\u304c\u660e\u793a\u7684\u306atypedef\u3092shadow\u3059\u308b\u3068\u304d\u306bcompiler\u304cwarning\u3057\u307e\u3059\u304c\u3001\u305d\u308c\u306f\u3002struct\u3084class\u3084enum\u3092shadow\u3059\u308b\u3068\u304d\u306b\u306fwarning\u3057\u307e\u305b\u3093\u306e\u3067\u3001\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u306a\u304a\u3001\u672a\u521d\u671f\u5316\u3092warning\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u3001-Wmaybe-uninitialized\u306e\u3088\u3046\u306a\u3082\u306e\u3082\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\nwarning : -Wstrict-overflow\nhttps://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html\n\u306b\u3088\u308b\u3068\u3001\n-Wstrict-overflow\n-Wstrict-overflow=n\nThis option is only active when -fstrict-overflow is active. It warns about cases where the compiler optimizes based on the assumption that signed overflow does not occur. Note that it does not warn about all cases where the code might overflow: it only warns about cases where the compiler implements some optimization. Thus this warning depends on the optimization level.\n\n\u3053\u306eoption\u306f\u3001-fstrict-overflow\u304c\u6709\u52b9\u306a\u3068\u304d\u306e\u307f\u6709\u52b9\u3067\u3059\u3002 compiler\u304c\u3001signed overflow\u304c\u767a\u751f\u3057\u306a\u3044\u3068\u4eee\u5b9a\u3057\u3066\u6700\u9069\u5316\u3092\u884c\u3063\u305f\u6642\u306b\u3001warning\u3092\u3060\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001\u3059\u3079\u3066\u306eoverflow\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u30b1\u30fc\u30b9\u306b\u3064\u3044\u3066warning\u3057\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3064\u307e\u308a\u3001compiler\u304c\u3044\u304f\u3064\u304b\u6700\u9069\u5316\u3092\u884c\u3046\u30b1\u30fc\u30b9\u306b\u3064\u3044\u3066\u306e\u307fwarning\u3092\u51fa\u3057\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u3053\u306ewarinig\u306f\u3001\u6700\u9069\u5316\u30ec\u30d9\u30eb\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002\nAn optimization that assumes that signed overflow does not occur is perfectly safe if the values of the variables involved are such that overflow never does, in fact, occur. Therefore this warning can easily give a false positive: a warning about code that is not actually a problem. To help focus on important issues, several warning levels are defined. No warnings are issued for the use of undefined signed overflow when estimating how many iterations a loop requires, in particular when determining whether a loop will be executed at all.\n\n\u3082\u3057\u3001\u5024\u306e\u7bc4\u56f2\u304c\u3001overflow\u3057\u306a\u3044\u3082\u306e\u304c\u95a2\u4e0e\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001signed overflow\u304c\u767a\u751f\u3057\u306a\u3044\u3068\u4eee\u5b9a\u3055\u308c\u308boptimization\u306f\u3001\u5b8c\u5168\u306b\u5b89\u5168\u3067\u3059\u3002\u3067\u3059\u306e\u3067\u3001\u3053\u306ewarning\u306f\u3001\u5bb9\u6613\u306bfalse positive\u306b\u306a\u308a\u5f97\u307e\u3059\u3002\u3067\u3059\u306e\u3067\u30b3\u30fc\u30c9\u304c\u5b9f\u969b\u306b\u554f\u984c\u306b\u306a\u3089\u306a\u304f\u3066\u3082\u3001warning\u3057\u307e\u3059\u3002\u91cd\u8981\u306a\u554f\u984c\u306bfocus\u3059\u308b\u305f\u3081\u306b\u3001\u3044\u304f\u3064\u304b\u306ewarning level\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3044\u304f\u3064\u306eloop\u304citerate\u3055\u308c\u308b\u306e\u304b\u3092\u4eee\u5b9a\u3057\u3066\u3001\u672a\u5b9a\u7fa9\u306esigned overflow\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001warning\u3057\u307e\u305b\u3093\u3002\u7279\u306b\u3001loop\u304c\u5b9f\u884c\u6642\u306b\u5b8c\u5168\u306bdeterministic\u306a\u6642\u306b\u306f\u3002\n-Wstrict-overflow=1\nWarn about cases that are both questionable and easy to avoid. For example, with -fstrict-overflow, the compiler simplifies x + 1 > x to 1. This level of -Wstrict-overflow is enabled by -Wall; higher levels are not, and must be explicitly requested. \n-Wstrict-overflow=2\nAlso warn about other cases where a comparison is simplified to a constant. For example: abs (x) >= 0. This can only be simplified when -fstrict-overflow is in effect, because abs (INT_MIN) overflows to INT_MIN, which is less than zero. -Wstrict-overflow (with no level) is the same as -Wstrict-overflow=2. \n-Wstrict-overflow=3\nAlso warn about other cases where a comparison is simplified. For example: x + 1 > 1 is simplified to x > 0. \n-Wstrict-overflow=4\nAlso warn about other simplifications not covered by the above cases. For example: (x * 10) / 5 is simplified to x * 2.\n-Wstrict-overflow=5\nAlso warn about cases where the compiler reduces the magnitude of a constant involved in a comparison. For example: x + 2 > y is simplified to x + 1 >= y. This is reported only at the highest warning level because this simplification applies to many comparisons, so this warning level gives a very large number of false positives.\n\nhttp://blog.kmckk.com/archives/4085604.html\n\u306b\u3082\u53c2\u8003\u306b\u306a\u308b\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\n\nwarning : -fno-strict-aliasing\n\nhttp://up-cat.net/gcc+option.html\nhttps://www.jpcert.or.jp/sc-rules/c-exp39-c.html\nhttp://d.hatena.ne.jp/yohhoy/20120220/p1\n\n\u306b\u53c2\u8003\u306b\u306a\u308b\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\nEither specify -fno-strict-aliasing or be sure to only access objects as the type they have at creation. Since so much existing C code aliases across types, using -fno-strict-aliasing is a much safer bet if you don't control the entire underlying source tree.\n\n-fno-strict-aliasing\u3092\u6307\u5b9a\u3059\u308b\u304b\u3001\u751f\u6210\u3055\u308c\u305f\u6642\u306etype\u306eobject\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3060\u3051\u306b\u3059\u308b\u304b\u3092sure\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u3068\u3044\u3046\u306e\u306f\u3001\u65e2\u5b58\u306eC code\u306f\u3001type\u3092\u8d85\u3048\u3066alias\u3057\u3066\u3044\u308b\u30b3\u30fc\u30c9\u304c\u591a\u304f\u5b58\u5728\u3059\u308b\u305f\u3081\u3067\u3059\u3002\u3067\u3059\u306e\u3067\u3001\u3042\u306a\u305f\u304c\u3059\u3079\u3066\u306e\u30bd\u30fc\u30b9\u30c4\u30ea\u30fc\u3092\u5236\u5fa1\u3067\u304d\u308b\u3068\u8a00\u3048\u306a\u3044\u304b\u304e\u308a\u3001-fno-strict-aliasing\u3092\u4f7f\u3046\u306e\u306f\u3001\u3088\u308a\u5b89\u5168\u306a\u65b9\u306bbet\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\nwarning : -Wno-missing-field-initializers\n(\u300c-Wextra\u300d\u306f\u300c-Wmissing-field-initializers\u300d\u3092\u542b\u3080\u305f\u3081)\nas of now, Clang reports some valid syntax as a warning, so you should add -Wno-missing-field-initializers\n\n\u554f\u984c\u304c\u306a\u3044\u30b3\u30fc\u30c9\u306b\u3001warning\u3092\u30ec\u30dd\u30fc\u30c8\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001-Wno-missing-field-initializers\u3092\u8ffd\u52a0\u3059\u3079\u304d\u3067\u3059\u3002\n\u3068\u306e\u3053\u3068\u3067\u3059\u3002\nhttp://d.hatena.ne.jp/shouh/20140510/1399680764\n\u306b\u53c2\u8003\u306b\u306a\u308b\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\n\u3064\u3065\u304f\n# Overview\n\n\u539f\u5178\u306f\u3001https://matt.sh/howto-c (\u65e5\u672c\u8a9e\u8a33\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u308b\u65b9\u306e\u30da\u30fc\u30b8\u306f http://postd.cc/how-to-c-in-2016-1/ )\u3067\u3059\u3002\n\n\u3053\u3053\u3067\u306e\u3044\u304f\u3064\u304b\u306b\u3064\u3044\u3066\u3001\u5206\u6790\u3057\u3066\u307f\u307e\u3059\u3002\u307e\u305a\u306f\u3001warning\u7de8\u304b\u3089\u3002\n\n# \u4e8b\u524d\u6e96\u5099 section\n\n## warning : -pedantic\n\nhttp://clang.llvm.org/docs/UsersManual.html \u306b\u3088\u308b\u3068\u3001\n\n```\n-pedantic\n Warn on language extensions.\n```\n\n\u3068\u3042\u308a\u307e\u3059\u3002Google\u3063\u3066\u307f\u308b\u3068\u3001\n\nhttp://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0742bj/chr1398848167694_00008.html\n\n\u306b\u306f\u3001\u51fa\u529b\u4f8b\u304c\u3042\u308a\u3001\n\n```\n$ armclang --target=aarch64-arm-none-eabi -c -pedantic --std=c90 test.c\n  test.c:3:5: warning: anonymous structs are a C11 extension [-Wc11-extensions]\n\n$ armclang --target=aarch64-arm-none-eabi -c -pedantic -xc++  test.c\n  test.c:3:5: warning: anonymous structs are a GNU extension [-Wgnu-anonymous-struct]\n```\n\n\u3053\u3093\u306a\u3082\u306e\u3092\u51fa\u529b\u3059\u308b\u3068\u3042\u308a\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\u3001--std=cxx\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u305fcxx\u306e\u8a00\u8a9e\u305f\u3082\u306e\u3092\u8d85\u3048\u305f\u8a00\u8a9e\u62e1\u5f35\u3092\u4f7f\u7528\u3057\u305f\u30b3\u30fc\u30c9\u304c\u5408\u3063\u305f\u5834\u5408\u306b\u3001warning\u3092\u51fa\u3057\u3066\u304f\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\n\n## warning : -Wshadow\n\n\u2605\u8ffd\u8a18\u3001\u8a02\u6b63\u2605\n\nhttps://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html\n\n```\n-Wshadow\nWarn whenever a local variable or type declaration shadows another variable, parameter, type, class member (in C++), or instance variable (in Objective-C) or whenever a built-in function is shadowed. Note that in C++, the compiler warns if a local variable shadows an explicit typedef, but not if it shadows a struct/class/enum. \n```\n\nlocal\u5909\u6570\u307e\u305f\u306f\u578b\u5ba3\u8a00\u304c\u3001\u4ed6\u306e\u5909\u6570\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3001\u578b\u3001class\u30e1\u30f3\u30d0\u30fc\u3084\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3001built-in\u306e\u95a2\u6570\u3092shadow\u3059\u308b\u3068\u304d\u306b\u3001warning\u3057\u307e\u3059\u3002\u306a\u304a\u3001C++\u306b\u304a\u3044\u3066\u306f\u3001local\u5909\u6570\u304c\u660e\u793a\u7684\u306atypedef\u3092shadow\u3059\u308b\u3068\u304d\u306bcompiler\u304cwarning\u3057\u307e\u3059\u304c\u3001\u305d\u308c\u306f\u3002struct\u3084class\u3084enum\u3092shadow\u3059\u308b\u3068\u304d\u306b\u306fwarning\u3057\u307e\u305b\u3093\u306e\u3067\u3001\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\u306a\u304a\u3001\u672a\u521d\u671f\u5316\u3092warning\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u3001-Wmaybe-uninitialized\u306e\u3088\u3046\u306a\u3082\u306e\u3082\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\n## warning : -Wstrict-overflow\n\nhttps://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html\n\u306b\u3088\u308b\u3068\u3001\n\n```\n-Wstrict-overflow\n-Wstrict-overflow=n\nThis option is only active when -fstrict-overflow is active. It warns about cases where the compiler optimizes based on the assumption that signed overflow does not occur. Note that it does not warn about all cases where the code might overflow: it only warns about cases where the compiler implements some optimization. Thus this warning depends on the optimization level.\n```\n\n\u3053\u306eoption\u306f\u3001-fstrict-overflow\u304c\u6709\u52b9\u306a\u3068\u304d\u306e\u307f\u6709\u52b9\u3067\u3059\u3002 compiler\u304c\u3001signed overflow\u304c\u767a\u751f\u3057\u306a\u3044\u3068\u4eee\u5b9a\u3057\u3066\u6700\u9069\u5316\u3092\u884c\u3063\u305f\u6642\u306b\u3001warning\u3092\u3060\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001\u3059\u3079\u3066\u306eoverflow\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u30b1\u30fc\u30b9\u306b\u3064\u3044\u3066warning\u3057\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3064\u307e\u308a\u3001compiler\u304c\u3044\u304f\u3064\u304b\u6700\u9069\u5316\u3092\u884c\u3046\u30b1\u30fc\u30b9\u306b\u3064\u3044\u3066\u306e\u307fwarning\u3092\u51fa\u3057\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u3053\u306ewarinig\u306f\u3001\u6700\u9069\u5316\u30ec\u30d9\u30eb\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002\n\n```\nAn optimization that assumes that signed overflow does not occur is perfectly safe if the values of the variables involved are such that overflow never does, in fact, occur. Therefore this warning can easily give a false positive: a warning about code that is not actually a problem. To help focus on important issues, several warning levels are defined. No warnings are issued for the use of undefined signed overflow when estimating how many iterations a loop requires, in particular when determining whether a loop will be executed at all.\n```\n\n\u3082\u3057\u3001\u5024\u306e\u7bc4\u56f2\u304c\u3001overflow\u3057\u306a\u3044\u3082\u306e\u304c\u95a2\u4e0e\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001signed overflow\u304c\u767a\u751f\u3057\u306a\u3044\u3068\u4eee\u5b9a\u3055\u308c\u308boptimization\u306f\u3001\u5b8c\u5168\u306b\u5b89\u5168\u3067\u3059\u3002\u3067\u3059\u306e\u3067\u3001\u3053\u306ewarning\u306f\u3001\u5bb9\u6613\u306bfalse positive\u306b\u306a\u308a\u5f97\u307e\u3059\u3002\u3067\u3059\u306e\u3067\u30b3\u30fc\u30c9\u304c\u5b9f\u969b\u306b\u554f\u984c\u306b\u306a\u3089\u306a\u304f\u3066\u3082\u3001warning\u3057\u307e\u3059\u3002\u91cd\u8981\u306a\u554f\u984c\u306bfocus\u3059\u308b\u305f\u3081\u306b\u3001\u3044\u304f\u3064\u304b\u306ewarning level\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3044\u304f\u3064\u306eloop\u304citerate\u3055\u308c\u308b\u306e\u304b\u3092\u4eee\u5b9a\u3057\u3066\u3001\u672a\u5b9a\u7fa9\u306esigned overflow\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001warning\u3057\u307e\u305b\u3093\u3002\u7279\u306b\u3001loop\u304c\u5b9f\u884c\u6642\u306b\u5b8c\u5168\u306bdeterministic\u306a\u6642\u306b\u306f\u3002\n\n\n```\n-Wstrict-overflow=1\nWarn about cases that are both questionable and easy to avoid. For example, with -fstrict-overflow, the compiler simplifies x + 1 > x to 1. This level of -Wstrict-overflow is enabled by -Wall; higher levels are not, and must be explicitly requested. \n-Wstrict-overflow=2\nAlso warn about other cases where a comparison is simplified to a constant. For example: abs (x) >= 0. This can only be simplified when -fstrict-overflow is in effect, because abs (INT_MIN) overflows to INT_MIN, which is less than zero. -Wstrict-overflow (with no level) is the same as -Wstrict-overflow=2. \n-Wstrict-overflow=3\nAlso warn about other cases where a comparison is simplified. For example: x + 1 > 1 is simplified to x > 0. \n-Wstrict-overflow=4\nAlso warn about other simplifications not covered by the above cases. For example: (x * 10) / 5 is simplified to x * 2.\n-Wstrict-overflow=5\nAlso warn about cases where the compiler reduces the magnitude of a constant involved in a comparison. For example: x + 2 > y is simplified to x + 1 >= y. This is reported only at the highest warning level because this simplification applies to many comparisons, so this warning level gives a very large number of false positives.\n```\n\nhttp://blog.kmckk.com/archives/4085604.html\n\u306b\u3082\u53c2\u8003\u306b\u306a\u308b\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n## warning : -fno-strict-aliasing\n\n* http://up-cat.net/gcc+option.html\n* https://www.jpcert.or.jp/sc-rules/c-exp39-c.html\n* http://d.hatena.ne.jp/yohhoy/20120220/p1\n\n\u306b\u53c2\u8003\u306b\u306a\u308b\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\n\n```\nEither specify -fno-strict-aliasing or be sure to only access objects as the type they have at creation. Since so much existing C code aliases across types, using -fno-strict-aliasing is a much safer bet if you don't control the entire underlying source tree.\n```\n\n-fno-strict-aliasing\u3092\u6307\u5b9a\u3059\u308b\u304b\u3001\u751f\u6210\u3055\u308c\u305f\u6642\u306etype\u306eobject\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3060\u3051\u306b\u3059\u308b\u304b\u3092sure\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u3068\u3044\u3046\u306e\u306f\u3001\u65e2\u5b58\u306eC code\u306f\u3001type\u3092\u8d85\u3048\u3066alias\u3057\u3066\u3044\u308b\u30b3\u30fc\u30c9\u304c\u591a\u304f\u5b58\u5728\u3059\u308b\u305f\u3081\u3067\u3059\u3002\u3067\u3059\u306e\u3067\u3001\u3042\u306a\u305f\u304c\u3059\u3079\u3066\u306e\u30bd\u30fc\u30b9\u30c4\u30ea\u30fc\u3092\u5236\u5fa1\u3067\u304d\u308b\u3068\u8a00\u3048\u306a\u3044\u304b\u304e\u308a\u3001-fno-strict-aliasing\u3092\u4f7f\u3046\u306e\u306f\u3001\u3088\u308a\u5b89\u5168\u306a\u65b9\u306bbet\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n## warning : -Wno-missing-field-initializers\n\n(\u300c-Wextra\u300d\u306f\u300c-Wmissing-field-initializers\u300d\u3092\u542b\u3080\u305f\u3081)\n\n```\nas of now, Clang reports some valid syntax as a warning, so you should add -Wno-missing-field-initializers\n```\n\n\u554f\u984c\u304c\u306a\u3044\u30b3\u30fc\u30c9\u306b\u3001warning\u3092\u30ec\u30dd\u30fc\u30c8\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001-Wno-missing-field-initializers\u3092\u8ffd\u52a0\u3059\u3079\u304d\u3067\u3059\u3002\n\n\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n\nhttp://d.hatena.ne.jp/shouh/20140510/1399680764\n\u306b\u53c2\u8003\u306b\u306a\u308b\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\n\n[\u3064\u3065\u304f](http://qiita.com/hidenorly/items/5831e8fa87f4a7adc2c9)\n", "tags": ["clang", "GCC", "warning", "C", "C++"]}