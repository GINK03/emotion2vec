{"context": "\n\n\n\u591a\u6bb5\u968e\u9078\u629c\n\u30b7\u30ea\u30fc\u30ba:yield\u306e\u7df4\u7fd2/\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u5165\u308c\u5b50\u306b\n\n\n\n\n\u554f\u984c\n\nhttp://nabetani.sakura.ne.jp/hena/ord24eliseq/http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n\n\n\nRuby\nhttp://qiita.com/cielavenir/items/9f15e29b73ecf98968a5\n\n\nC#/Python\nhttp://qiita.com/cielavenir/items/a1156e6a4f71ddbe5dcb\n\n\n\n\u3053\u3053\u304b\u3089\u4e0a\u306fdrop_prev_square/drop_prev_cubic\u3092\u307e\u3068\u3081\u308b\u524d\u306e\u7b54\u6848\n\n\nGo/C#/Ruby/Python\nhttp://qiita.com/cielavenir/items/2a685d3080862f2c2c47\n\n\nPHP/JavaScript\nhttp://qiita.com/cielavenir/items/28d613ac3823afbf8407\n\n\nVB\nhttp://qiita.com/cielavenir/items/cb7266abd30eadd71c04\n\n\nD\nhttp://qiita.com/cielavenir/items/47c9e50ee60bef2847ec\n\n\nPerl/C++17(TS)\nhttp://qiita.com/cielavenir/items/e1129ca185008f49cbab\n\n\nLua\nhttp://qiita.com/cielavenir/items/c60fe7e8da73487ba062\n\n\n\n\nVB\n\u3046\u307e\u304f\u30c6\u30b9\u30c8\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u3001Win\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305fexe\u3092OSX\u306b\u8ee2\u9001\u3057\u3066\u30c6\u30b9\u30c8\u3057\u305f\u3002\n\u306a\u306e\u3067\u7d30\u304b\u3044\u90e8\u5206\u304c\u602a\u3057\u3044\u3067\u3059\u304c\u3001\u6c17\u306b\u3057\u306a\u3044\u3002\n\u3061\u306a\u307f\u306bWin\u3067\u76f4\u63a5\u5b9f\u884c\u3057\u305f\u9650\u308a\u3067\u306f\u3001DllImport\u306f msvcr120 \u306b\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u304b\u3063\u305f\u3002\u3073\u3063\u304f\u308a\u3002\n\nhena24_enum.vb\n' http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n' http://nabetani.sakura.ne.jp/hena/ord24eliseq/\n\nimports System\nimports System.Linq\nimports System.Collections.Generic\nimports System.Runtime.InteropServices\n\nmodule Hena24\n    <DllImport(\"c\")>\n    private function cbrt(ByVal d as double) as double\n    end function\n\n    private function is_sq(ByVal n as integer) as boolean\n        dim x as integer=cint(Math.Sqrt(n))\n        return x*x=n\n    end function\n\n    private function is_cb(ByVal n as integer) as boolean\n        dim x as integer=cint(cbrt(n))\n        return x*x*x=n\n    end function\n\n    private function is_multiple(ByVal i as integer,ByVal n as integer) as boolean\n        return i mod n=0\n    end function\n    private function is_le(ByVal i as integer,ByVal n as integer) as boolean\n        return i<=n\n    end function\n\n    iterator function generate() as IEnumerable(of integer)\n        dim i as integer=1\n        while true\n            yield i\n            i+=1\n        end while\n    end function\n\n    iterator function drop_prev(ByVal check as Func(of integer,boolean),ByVal _prev as IEnumerable(of integer)) as IEnumerable(of integer)\n        dim prev as IEnumerator(of integer)=_prev.GetEnumerator()\n        prev.MoveNext()\n        dim a as integer=prev.Current\n        prev.MoveNext()\n        dim b as integer=prev.Current\n        while true\n            if not check(b)\n                yield a\n            end if\n            a=b\n            prev.MoveNext()\n            b=prev.Current\n        end while\n    end function\n\n    iterator function drop_next(ByVal check as Func(of integer,boolean),ByVal _prev as IEnumerable(of integer)) as IEnumerable(of integer)\n        dim prev as IEnumerator(of integer)=_prev.GetEnumerator()\n        prev.MoveNext()\n        dim a as integer=prev.Current\n        prev.MoveNext()\n        dim b as integer=prev.Current\n        yield a\n        while true\n            if not check(a)\n                yield b\n            end if\n            a=b\n            prev.MoveNext()\n            b=prev.Current\n        end while\n    end function\n\n    iterator function drop_n(ByVal check as Func(of integer,integer,boolean),ByVal n as integer,ByVal _prev as IEnumerable(of integer)) as IEnumerable(of integer)\n        dim prev as IEnumerator(of integer)=_prev.GetEnumerator()\n        dim i as integer=0\n        while true\n            i+=1\n            prev.MoveNext()\n            dim a as integer=prev.Current\n            if not check(i,n)\n                yield a\n            end if\n        end while\n    end function\n\n    sub Main()\n        dim f as new Dictionary(of char,Func(of IEnumerable(of integer),IEnumerable(of integer))) from {\n            {\"S\"c,Function(e) drop_next(addressof is_sq,e)},\n            {\"s\"c,Function(e) drop_prev(addressof is_sq,e)},\n            {\"C\"c,Function(e) drop_next(addressof is_cb,e)},\n            {\"c\"c,Function(e) drop_prev(addressof is_cb,e)},\n            {\"h\"c,Function(e) drop_n(addressof is_le,100,e)}\n        }\n        for i as integer=2 to 9\n            dim j as integer=i\n            f(chr(48+j)) = Function(e) drop_n(addressof is_multiple,j,e)\n        next\n        dim line as string=Console.ReadLine()\n        while line isnot nothing\n            dim first as boolean=true\n            'cS => f(\"S\"c)(f(\"c\"c)(generate()))\n            for each n as integer in line.Aggregate(generate(),Function(s,e) f(e)(s)).Take(10)\n                if not first\n                    Console.Write(\",\"c)\n                end if\n                first=false\n                Console.Write(n)\n            next\n            Console.WriteLine()\n            Console.Out.Flush()\n            line=Console.ReadLine()\n        end while\n    end sub\nend module\n\n\n\n|\u591a\u6bb5\u968e\u9078\u629c|\u30b7\u30ea\u30fc\u30ba:yield\u306e\u7df4\u7fd2/\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u5165\u308c\u5b50\u306b|\n|:--|:--|\n|\u554f\u984c|http://nabetani.sakura.ne.jp/hena/ord24eliseq/<br>http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69|\n|Ruby|http://qiita.com/cielavenir/items/9f15e29b73ecf98968a5|\n|C#/Python|http://qiita.com/cielavenir/items/a1156e6a4f71ddbe5dcb|\n||\u3053\u3053\u304b\u3089\u4e0a\u306fdrop_prev_square/drop_prev_cubic\u3092\u307e\u3068\u3081\u308b\u524d\u306e\u7b54\u6848|\n|Go/C#/Ruby/Python|http://qiita.com/cielavenir/items/2a685d3080862f2c2c47|\n|PHP/JavaScript|http://qiita.com/cielavenir/items/28d613ac3823afbf8407|\n|VB|http://qiita.com/cielavenir/items/cb7266abd30eadd71c04|\n|D|http://qiita.com/cielavenir/items/47c9e50ee60bef2847ec|\n|Perl/C++17(TS)|http://qiita.com/cielavenir/items/e1129ca185008f49cbab|\n|Lua|http://qiita.com/cielavenir/items/c60fe7e8da73487ba062|\n\n## VB\n\u3046\u307e\u304f\u30c6\u30b9\u30c8\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u3001Win\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305fexe\u3092OSX\u306b\u8ee2\u9001\u3057\u3066\u30c6\u30b9\u30c8\u3057\u305f\u3002\n\u306a\u306e\u3067\u7d30\u304b\u3044\u90e8\u5206\u304c\u602a\u3057\u3044\u3067\u3059\u304c\u3001\u6c17\u306b\u3057\u306a\u3044\u3002\n\u3061\u306a\u307f\u306bWin\u3067\u76f4\u63a5\u5b9f\u884c\u3057\u305f\u9650\u308a\u3067\u306f\u3001DllImport\u306f **msvcr120** \u306b\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u304b\u3063\u305f\u3002\u3073\u3063\u304f\u308a\u3002\n\n```vbnet:hena24_enum.vb\n' http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n' http://nabetani.sakura.ne.jp/hena/ord24eliseq/\n\nimports System\nimports System.Linq\nimports System.Collections.Generic\nimports System.Runtime.InteropServices\n\nmodule Hena24\n\t<DllImport(\"c\")>\n\tprivate function cbrt(ByVal d as double) as double\n\tend function\n\n\tprivate function is_sq(ByVal n as integer) as boolean\n\t\tdim x as integer=cint(Math.Sqrt(n))\n\t\treturn x*x=n\n\tend function\n\n\tprivate function is_cb(ByVal n as integer) as boolean\n\t\tdim x as integer=cint(cbrt(n))\n\t\treturn x*x*x=n\n\tend function\n\n\tprivate function is_multiple(ByVal i as integer,ByVal n as integer) as boolean\n\t\treturn i mod n=0\n\tend function\n\tprivate function is_le(ByVal i as integer,ByVal n as integer) as boolean\n\t\treturn i<=n\n\tend function\n\n\titerator function generate() as IEnumerable(of integer)\n\t\tdim i as integer=1\n\t\twhile true\n\t\t\tyield i\n\t\t\ti+=1\n\t\tend while\n\tend function\n\n\titerator function drop_prev(ByVal check as Func(of integer,boolean),ByVal _prev as IEnumerable(of integer)) as IEnumerable(of integer)\n\t\tdim prev as IEnumerator(of integer)=_prev.GetEnumerator()\n\t\tprev.MoveNext()\n\t\tdim a as integer=prev.Current\n\t\tprev.MoveNext()\n\t\tdim b as integer=prev.Current\n\t\twhile true\n\t\t\tif not check(b)\n\t\t\t\tyield a\n\t\t\tend if\n\t\t\ta=b\n\t\t\tprev.MoveNext()\n\t\t\tb=prev.Current\n\t\tend while\n\tend function\n\n\titerator function drop_next(ByVal check as Func(of integer,boolean),ByVal _prev as IEnumerable(of integer)) as IEnumerable(of integer)\n\t\tdim prev as IEnumerator(of integer)=_prev.GetEnumerator()\n\t\tprev.MoveNext()\n\t\tdim a as integer=prev.Current\n\t\tprev.MoveNext()\n\t\tdim b as integer=prev.Current\n\t\tyield a\n\t\twhile true\n\t\t\tif not check(a)\n\t\t\t\tyield b\n\t\t\tend if\n\t\t\ta=b\n\t\t\tprev.MoveNext()\n\t\t\tb=prev.Current\n\t\tend while\n\tend function\n\n\titerator function drop_n(ByVal check as Func(of integer,integer,boolean),ByVal n as integer,ByVal _prev as IEnumerable(of integer)) as IEnumerable(of integer)\n\t\tdim prev as IEnumerator(of integer)=_prev.GetEnumerator()\n\t\tdim i as integer=0\n\t\twhile true\n\t\t\ti+=1\n\t\t\tprev.MoveNext()\n\t\t\tdim a as integer=prev.Current\n\t\t\tif not check(i,n)\n\t\t\t\tyield a\n\t\t\tend if\n\t\tend while\n\tend function\n\n\tsub Main()\n\t\tdim f as new Dictionary(of char,Func(of IEnumerable(of integer),IEnumerable(of integer))) from {\n\t\t\t{\"S\"c,Function(e) drop_next(addressof is_sq,e)},\n\t\t\t{\"s\"c,Function(e) drop_prev(addressof is_sq,e)},\n\t\t\t{\"C\"c,Function(e) drop_next(addressof is_cb,e)},\n\t\t\t{\"c\"c,Function(e) drop_prev(addressof is_cb,e)},\n\t\t\t{\"h\"c,Function(e) drop_n(addressof is_le,100,e)}\n\t\t}\n\t\tfor i as integer=2 to 9\n\t\t\tdim j as integer=i\n\t\t\tf(chr(48+j)) = Function(e) drop_n(addressof is_multiple,j,e)\n\t\tnext\n\t\tdim line as string=Console.ReadLine()\n\t\twhile line isnot nothing\n\t\t\tdim first as boolean=true\n\t\t\t'cS => f(\"S\"c)(f(\"c\"c)(generate()))\n\t\t\tfor each n as integer in line.Aggregate(generate(),Function(s,e) f(e)(s)).Take(10)\n\t\t\t\tif not first\n\t\t\t\t\tConsole.Write(\",\"c)\n\t\t\t\tend if\n\t\t\t\tfirst=false\n\t\t\t\tConsole.Write(n)\n\t\t\tnext\n\t\t\tConsole.WriteLine()\n\t\t\tConsole.Out.Flush()\n\t\t\tline=Console.ReadLine()\n\t\tend while\n\tend sub\nend module\n```\n", "tags": ["yhpg", "\u3069\u3046\u66f8\u304f", "VB.Net"]}