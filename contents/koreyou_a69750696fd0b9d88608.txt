{"context": "\n\n\u306f\u3058\u3081\u306b\n\u30e9\u30f3\u30af\u5b66\u7fd2 (Learning to Rank) \u306e\u624b\u6cd5\u3067\u3042\u308b\u3001ListNet\u3092Chainer\u3067\u5b9f\u88c5\u3057\u307e\u3059\uff01\n\u672c\u8a18\u4e8b\u306f\u3001Chainer Advent Calendar 2016 7\u65e5\u76ee\u3067\u3059\uff0e\n\n\u624b\u6cd5\u306e\u8aac\u660e\n\u307e\u305a\u3001\u30e9\u30f3\u30af\u5b66\u7fd2\u306b\u3064\u3044\u3066\u306f\u3001Advent Calender 5\u65e5\u76ee\u3067sz_dr\u3055\u3093\u304c\u7d20\u6674\u3089\u3057\u3044\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u662f\u975e\u305d\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\u6642\u9593\u306e\u306a\u3044\u65b9\u306e\u305f\u3081\u306b\u4e00\u8a00\u3067\u8a00\u3046\u3068\u3001\u300c1\u30bb\u30c3\u30c8\uff08\u30af\u30a8\u30ea\uff09\u306e\u4e2d\u306b\u8907\u6570\u30c7\u30fc\u30bf\u304c\u3042\u308a\u3001\u305d\u308c\u3089\u306b\u76f8\u5bfe\u7684\u306a\u5c3a\u5ea6\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u306b\u3001\u6559\u5e2b\u4ed8\u304d\u306e\u6761\u4ef6\u3067\u9806\u5e8f\u4ed8\u3051\u3092\u5b66\u7fd2\u3059\u308b\u300d\u554f\u984c\u3067\u3059\u3002\u30e9\u30d9\u30eb\u304c\u30af\u30a8\u30ea\u9593\u3067\u7d76\u5bfe\u7684\u306a\u6570\u5024\u3092\u53d6\u3089\u306a\u3044\u3053\u3068\u304c\u666e\u901a\u306e\u6559\u5e2b\u4ed8\u304d\u5b66\u7fd2\u3068\u306e\u5dee\u306b\u306a\u308a\u307e\u3059\u3002\n\nRankNet\u3068\u306e\u9055\u3044\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8+\u30e9\u30f3\u30af\u5b66\u7fd2\u3067\u591a\u304f\u306e\u306e\u65b9\u304c\u771f\u3063\u5148\u306b\u601d\u3044\u6d6e\u304b\u3079\u308bRankNet\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u5b9f\u306f\u3001\u30e9\u30f3\u30af\u5b66\u7fd2\u306e\u5b9a\u5f0f\u5316\u65b9\u6cd5\u306f\u8907\u6570\u3042\u308a\u3001RankNet\u306fpairwise\u3001ListNet\u306flistwise\u306a\u624b\u6cd5\u3067\u3042\u308b\u3068\u3044\u3046\u5dee\u7570\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n\nPairwise\nListwise\n\n\n\n\n\n\n\n\n1\u30af\u30a8\u30ea\u304b\u3089\u30da\u30a2\u3092\u7121\u6570\u306b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u884c\u3046\n1\u30af\u30a8\u30ea\u3054\u3068\u306b\u5b66\u7fd2\u3092\u884c\u3046\n\n\n\n\n\u753b\u50cf\u306fDSIRNLP#1 \u30e9\u30f3\u30ad\u30f3\u30b0\u5b66\u7fd2\u3053\u3068\u306f\u3058\u3081\u3088\u308a\u5f15\u7528\n\n\nListNet\u306e\u57fa\u672c\u7684\u306a\u8003\u3048\u65b9\nListNet\u306fPermutation probability distribution (\u4ee5\u4e0b\u3001PPD) \u3068\u3044\u3046\u8003\u3048\u65b9\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\u3002PPD\u3068\u306f\u3001\u4e0b\u306e\u56f3\u306b\u3042\u308b\u3088\u3046\u306b\u3001\u30c7\u30fc\u30bf\u306e\u5404\u4e26\u3073\u9806 (permutation) \u306e\u8d77\u3053\u308a\u3084\u3059\u3055\u3092\u78ba\u7387\u5206\u5e03\u306b\u3057\u305f\u3082\u306e\u3067\u3059\u3002PPD\u306f\u30c7\u30fc\u30bf\u3054\u3068\u306e\u30b9\u30b3\u30a2\u304b\u3089\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3042\u308b\u4e26\u3073\u9806G\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u306b\u3001\u305d\u306e\u4e26\u3073\u9806PPD\u306f\u6b21\u5f0f\u3067\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\nP(\\pi|\\mathbf{s}) = \\prod_{j}^n{\\frac{exp(s_j)}{\\sum_{i=j}^{n}{exp(s_i)}}}\nP(\u03c0|s)=\u220fjnexp(sj)\u2211ni=jexp(si){P(\\pi|\\mathbf{s}) = \\prod_{j}^n{\\frac{exp(s_j)}{\\sum_{i=j}^{n}{exp(s_i)}}}\n}\n\u305f\u3060\u3057\u3001sj\u2208ss_j \\in \\mathbf{s}\u306f\u30c7\u30fc\u30bfjj\u306e\u30b9\u30b3\u30a2\u3001nn\u306f\u30af\u30a8\u30ea\u3042\u305f\u308a\u306e\u30c7\u30fc\u30bf\u6570\u3001\u03c0\\pi\u306f\u4e26\u3073\u9806\u3092\u793a\u3057\u307e\u3059\u3002\u3053\u306e\u5f0f\u306fn=3n=3\u306e\u4f8b\u3067\u66f8\u304f\u3068\u6b21\u5f0f\u306b\u306a\u308a\u307e\u3059\u3002\nP(\\pi) = \\frac{exp(s_0)}{exp(s_0) + exp(s_1) + exp(s_2)}\\frac{exp(s_1)}{exp(s_1) + exp(s_2)}\\frac{exp(s_2)}{exp(s_2)}\nP(\u03c0)=exp(s0)exp(s0)+exp(s1)+exp(s2)exp(s1)exp(s1)+exp(s2)exp(s2)exp(s2){P(\\pi) = \\frac{exp(s_0)}{exp(s_0) + exp(s_1) + exp(s_2)}\\frac{exp(s_1)}{exp(s_1) + exp(s_2)}\\frac{exp(s_2)}{exp(s_2)}\n}\nPermutation Probability Loss \uff08\u4ee5\u4e0b\u3001PPL) \u306f\u30012\u3064\u306ePPD\u306ecross entropy\u3092\u3068\u3063\u30661\u3001\nPPL = -\\sum{P(\\pi|\\bar{\\mathbf{s}}) \\log P(\\pi|\\mathbf{s})}\nPPL=\u2212\u2211P(\u03c0|s\u00af)logP(\u03c0|s){PPL = -\\sum{P(\\pi|\\bar{\\mathbf{s}}) \\log P(\\pi|\\mathbf{s})}\n}\nPPL\u306f\u3001\u305f\u3068\u3048\u3070\u6559\u5e2b\u30c7\u30fc\u30bf\u306b(1.0, 0.9, 0.8, ..)\u306a\u3069\u3068\u7b49\u9593\u9694\u3067\u6570\u5b57\u3092\u3075\u3063\u3066\u4e8c\u4e57\u640d\u5931\u3067\u5b66\u7fd2\u3057\u305f\u5834\u5408\u306b\u6bd4\u3079\u3066\u3001\u7d14\u7c8b\u306b\u9806\u5e8f\u304b\u3089\u5b66\u7fd2\u3067\u304d\u308b\u3068\u3044\u3046\u5229\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n\u753b\u50cf\u306fYan Liu, Learning to Rank: from Pairwise Approach to Listwise Approach\u3088\u308a\u5f15\u7528\u3002\n\n\u305f\u3060\u3057\u3001\u3059\u3079\u3066\u306e\u4e26\u3073\u9806\u306e\u78ba\u7387\u3092\u8a08\u7b97\u3059\u308b\u3068\u3001\u8a08\u7b97\u91cf\u304cL!L!\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u5b9f\u7528\u4e0a\u8a08\u7b97\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u305d\u3053\u3067\u3001\u4e00\u822c\u306b\u306f\u30c8\u30c3\u30d7kk\u500b\u306e\u306a\u3089\u3073\u3060\u3051\u3092\u8003\u616e\u3059\u308b\u3053\u3068\u3067L!/(L\u2212k)!L!/(L-k)!\u306e\u8a08\u7b97\u91cf\u3068\u306a\u308b\u8a2d\u5b9a\u3067\u884c\u3044\u307e\u30592\u3002\nP(\\pi|\\mathbf{s}) = \\prod_{j}^k{\\frac{exp(s_j)}{\\sum_{i=j}^{n}{exp(s_i)}}}\nP(\u03c0|s)=\u220fjkexp(sj)\u2211ni=jexp(si){P(\\pi|\\mathbf{s}) = \\prod_{j}^k{\\frac{exp(s_j)}{\\sum_{i=j}^{n}{exp(s_i)}}}\n}\n\u4f8b\u3048\u3070\u3001\u8ad6\u6587\u3067\u3082\u4f7f\u3063\u305f\u3068\u3057\u3066\u3044\u308bk=1k=1\u306e\u5834\u5408\u306f\u3001PPL\u306fsoftmax\u3068\u540c\u3058\u5f0f\u306b\u306a\u308a\u307e\u3059\u3002\nListNet\u306fPPL\u3092\u4f7f\u3046\u3060\u3051\u3067\u3001\u30c7\u30fc\u30bf\u3054\u3068\u306e\u30b9\u30b3\u30a2\u306e\u8a08\u7b97\u306f\u4efb\u610f\u306e\u5fae\u5206\u53ef\u80fd\u306a\u95a2\u6570\u3067\u5b9f\u88c5\u304c\u3067\u304d\u307e\u3059\u3002\u5143\u306e\u8ad6\u6587\u3067\u306fFeed forward NN\u3067\u3001\u30b9\u30b3\u30a2\u8a08\u7b97\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u3002\n\n\u5b9f\u88c5\n\u307e\u305a\u3001PPL (k=1k=1) \u306e\u5b9f\u88c5\u3067\u3059\u3002\n\ndef permutation_probability_loss(x, t, length):\n    length = length.reshape(-1, 1)\n    # log_p: (batch size, n)\n    log_p_x = x - F.broadcast_to(F.expand_dims(F.logsumexp(x, axis=1), 1), x.shape)\n    # p_t: (batch size, n)\n    p_t = F.softmax(t)\n\n    # loss normalized over all instances\n    loss = p_t * log_p_x\n    mask = np.tile(np.arange(x.shape[1]).reshape(1, -1), (x.shape[0],  1)) < length\n    mask = chainer.Variable(mask)\n    padding = chainer.Variable(np.zeros(x.shape, dtype=x.dtype))\n    loss = F.where(mask, loss, padding)\n\n    return -F.sum(loss / length) / p_t.shape[0]\n\n\u306a\u304a\u3001\u4eca\u56de\u306fL\u304c\u53ef\u5909\u3067\u3042\u308b\u524d\u63d0\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002length\u3067\u4e0d\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u3092\u30de\u30b9\u30ad\u30f3\u30b0\u3059\u308b\u3053\u3068\u3067\u3001\u7570\u306a\u308b\u9577\u3055\u306e\u30c7\u30fc\u30bf\u3092\u540c\u3058\u30d0\u30c3\u30c1\u306b\u6d41\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002Pitfall\u3068\u3057\u3066\u3001\u6570\u5f0f\u306e\u8a08\u7b97\u3092\u8ad6\u6587\u901a\u308a\u306b\u884c\u3046\u3068\u3001\u5272\u308a\u7b97\u3084exp\u306e\u8a08\u7b97\u304c\u4e0d\u5b89\u5b9a\u306b\u306a\u308b\u305f\u3081\u3001chainer\u306b\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308blogsumexp\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u30b9\u30b3\u30a2\u306e\u8a08\u7b97\u306f(B, L, M)\u306a\u308b\u7279\u5fb4\u91cf\u3092\u53d7\u3051\u53d6\u308a\u3001(B, L)\u306a\u308b\u30b9\u30b3\u30a2\u3092\u51fa\u529b\u3059\u308bPerceptron\u3067\u884c\u3044\u307e\u3057\u305f\u3002\u30ea\u30b9\u30c8\u5185\u306e\u30c7\u30fc\u30bf\u306f\u304a\u4e92\u3044\u306b\u72ec\u7acb\u306e\u305f\u3081\u3001(B, L, M)\u3092(B, L * M)\u306e\u5f62\u306b\u4fee\u6b63\u3057\u3001\u6700\u5f8c\u306b\u5143\u306b\u623b\u3059\u5f62\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\nclass ListNet(chainer.Chain):\n    def __init__(self, input_size, n_units, dropout):\n        super(ListNet, self).__init__(\n            l1=L.Linear(input_size, n_units),\n            l2=L.Linear(n_units, 1))\n\n        self.add_persistent(\"_dropout\", dropout)\n\n    def __call__(self, x, train=True):\n        s = list(x.shape)\n        n_tokens = np.prod(s[:-1])\n        x = F.reshape(x, (n_tokens, -1))\n\n        if self._dropout > 0.:\n            x = F.dropout(x, self._dropout, train=train)\n        o_1 = F.relu(self.l1(x))\n        if self._dropout > 0.:\n            o_1 = F.dropout(o_1, self._dropout, train=train)\n\n        # o_2: (N*M, 1)\n        o_2 = self.l2(o_1)\n\n        return F.reshape(o_2, s[:-1])\n\n\u3059\u3079\u3066\u306e\u5b9f\u88c5\u306b\u95a2\u3057\u3066\u306f\u3001\u8efd\u304f\u6574\u7406\u3057\u305f\u3042\u3068\u5f8c\u65e5github\u306b\u30d7\u30c3\u30b7\u30e5\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\n\u5b9f\u9a13\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306fLETOR 4.0\u306e\u3001MQ2007\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\u6642\u9593\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30d5\u30a3\u30fc\u30ea\u30f3\u30b0\u6c7a\u3081\u6253\u3061\u3067\u3001early stopping\u4ee5\u5916\u306f\u7279\u306b\u5de5\u592b\u3092\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\u8a55\u4fa1\u5bfe\u8c61\u306fmean average precision (MAP)\u3067\u3059\u3002\n\n\u7d50\u679c\nTRAIN: 0.3423\nDEV:   0.3379\nTEST:  0.3527\n\n\u540c\u3058\u30c7\u30fc\u30bf\u3067\u306e\u5143\u8ad6\u6587\u306e\u7d50\u679c\u3002\nTRAIN: 0.4526\nDEV:   0.4790\nTEST:  0.4884\n\n\u3046\u30fc\u3093\u3001\u968f\u5206\u5dee\u304c\u3064\u3044\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\u5143\u306e\u8ad6\u6587\u3067\u306f\u300c\u30b9\u30b3\u30a2\u8a08\u7b97\u306bPerceptron\u300d\u3092\u4f7f\u3063\u305f\u3001\u7a0b\u5ea6\u306e\u7c92\u5ea6\u3067\u3057\u304b\u304b\u304b\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u4f55\u304b\u5de5\u592b\u304c\u3042\u3063\u305f\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\nListNet\u306e\u6700\u5927\u306e\u5229\u70b9\u306f\u3068\u306b\u304b\u304f\u901f\u3044\u3053\u3068\u3067\u3057\u3087\u3046\u3002\u5b9f\u969b\u306b\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306f\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u4f53\u611f\u3067RankNet\u306e100\u500d\u7a0b\u5ea6\u901f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u7d42\u308f\u308a\u306b\n\u4eca\u5e74\u306fTensorflow\u3068chainer\u3092\u534a\u3005\u306b\u4f7f\u3044\u307e\u3057\u305f\u304c\u3001\u8a66\u4f5c\u30b9\u30d4\u30fc\u30c9 & \u30c7\u30d0\u30c3\u30b0\u306fchainer\u304c\u5727\u5012\u7684\u306b\u901f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3042\u3068\u3001cupy\u30de\u30b8\u30b5\u30a4\u30b3\u30fc\uff01\n\u5229\u7528\u4eba\u6570\u306e\u305b\u3044\u304b\u5b9f\u88c5\u4f8b\u304c\u5c11\u306a\u304f\u3001\u6700\u8fd1\u5c11\u3005Tensorflow\u306b\u304a\u3055\u308c\u6c17\u5473\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u3001\u5b9f\u88c5\u3055\u3089\u3057\u3066\u76db\u308a\u4e0a\u3052\u3066\u3044\u304d\u305f\u3044\u3067\u3059\u306d\u3002\n\n\u5909\u66f4\u5c65\u6b74\uff1a\n\n12/7: \u3042\u307e\u308a\u306b\u3082\u3056\u3063\u304f\u308a\u3068\u3057\u3066\u3044\u305f\u306e\u3067\u6570\u5f0f\u3092\u305f\u3057\u307e\u3057\u305f\u3002\n\n\n\n\n\n\u56f3\u306b\u306f\u5927\u304d\u304fKL divergence\u8ddd\u96e2\u3068\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u306fcross entropy\u3092\u4f7f\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002P(\u03c0|s\u00af)P(\\pi|\\bar{\\mathbf{s}})\u304c\u56fa\u5b9a\u306a\u306e\u3067\u6700\u9069\u5316\u3068\u3057\u3066\u306f\u7d50\u5c40\u540c\u3058\u306b\u306a\u308b\u305f\u3081\u3068\u601d\u308f\u308c\u307e\u3059\u3002\u00a0\u21a9\n\n\n\u7d50\u5c40\u30ea\u30b9\u30c8\u304b\u3089\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u308b\u3058\u3083\u3093\uff01\u3068\u3044\u3046\u3064\u3063\u3053\u307f\u306f\u306a\u3057\u3067\u3002\u3057\u304b\u3082\u3001\u666e\u901ak=1\u3067\u884c\u3046...\u00a0\u21a9\n\n\n\n## \u306f\u3058\u3081\u306b\n\n\u30e9\u30f3\u30af\u5b66\u7fd2 (Learning to Rank) \u306e\u624b\u6cd5\u3067\u3042\u308b\u3001[ListNet](http://dl.acm.org/citation.cfm?doid=1273496.1273513)\u3092Chainer\u3067\u5b9f\u88c5\u3057\u307e\u3059\uff01\n\n\u672c\u8a18\u4e8b\u306f\u3001[Chainer Advent Calendar 2016](http://qiita.com/advent-calendar/2016/chainer) 7\u65e5\u76ee\u3067\u3059\uff0e\n\n## \u624b\u6cd5\u306e\u8aac\u660e\n\n\u307e\u305a\u3001\u30e9\u30f3\u30af\u5b66\u7fd2\u306b\u3064\u3044\u3066\u306f\u3001Advent Calender 5\u65e5\u76ee\u3067sz_dr\u3055\u3093\u304c[\u7d20\u6674\u3089\u3057\u3044\u8a18\u4e8b](http://szdr.hatenablog.com/entry/2016/12/05/000248)\u3092\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u662f\u975e\u305d\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\u6642\u9593\u306e\u306a\u3044\u65b9\u306e\u305f\u3081\u306b\u4e00\u8a00\u3067\u8a00\u3046\u3068\u3001\u300c1\u30bb\u30c3\u30c8\uff08\u30af\u30a8\u30ea\uff09\u306e\u4e2d\u306b\u8907\u6570\u30c7\u30fc\u30bf\u304c\u3042\u308a\u3001\u305d\u308c\u3089\u306b\u76f8\u5bfe\u7684\u306a\u5c3a\u5ea6\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u306b\u3001\u6559\u5e2b\u4ed8\u304d\u306e\u6761\u4ef6\u3067\u9806\u5e8f\u4ed8\u3051\u3092\u5b66\u7fd2\u3059\u308b\u300d\u554f\u984c\u3067\u3059\u3002\u30e9\u30d9\u30eb\u304c\u30af\u30a8\u30ea\u9593\u3067\u7d76\u5bfe\u7684\u306a\u6570\u5024\u3092\u53d6\u3089\u306a\u3044\u3053\u3068\u304c\u666e\u901a\u306e\u6559\u5e2b\u4ed8\u304d\u5b66\u7fd2\u3068\u306e\u5dee\u306b\u306a\u308a\u307e\u3059\u3002\n\n### RankNet\u3068\u306e\u9055\u3044\n\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8+\u30e9\u30f3\u30af\u5b66\u7fd2\u3067\u591a\u304f\u306e\u306e\u65b9\u304c\u771f\u3063\u5148\u306b\u601d\u3044\u6d6e\u304b\u3079\u308bRankNet\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u5b9f\u306f\u3001\u30e9\u30f3\u30af\u5b66\u7fd2\u306e\u5b9a\u5f0f\u5316\u65b9\u6cd5\u306f\u8907\u6570\u3042\u308a\u3001RankNet\u306fpairwise\u3001ListNet\u306flistwise\u306a\u624b\u6cd5\u3067\u3042\u308b\u3068\u3044\u3046\u5dee\u7570\u304c\u3042\u308a\u307e\u3059\u3002\n\n|  Pairwise | Listwise  |\n|:------:|:-----------:|\n|  ![pairwise_small.png](https://qiita-image-store.s3.amazonaws.com/0/152362/29d7e87e-3183-a243-b64d-fcfdb256ae58.png) | ![listwise_small.png](https://qiita-image-store.s3.amazonaws.com/0/152362/8685f5e9-96f1-0753-73a2-cb94931bc8fd.png)|\n|1\u30af\u30a8\u30ea\u304b\u3089\u30da\u30a2\u3092\u7121\u6570\u306b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u884c\u3046|1\u30af\u30a8\u30ea\u3054\u3068\u306b\u5b66\u7fd2\u3092\u884c\u3046|\n\n> \u753b\u50cf\u306f[DSIRNLP#1 \u30e9\u30f3\u30ad\u30f3\u30b0\u5b66\u7fd2\u3053\u3068\u306f\u3058\u3081](http://www.slideshare.net/sleepy_yoshi/dsirnlp1)\u3088\u308a\u5f15\u7528\n\n### ListNet\u306e\u57fa\u672c\u7684\u306a\u8003\u3048\u65b9\n\nListNet\u306fPermutation probability distribution (\u4ee5\u4e0b\u3001PPD) \u3068\u3044\u3046\u8003\u3048\u65b9\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\u3002PPD\u3068\u306f\u3001\u4e0b\u306e\u56f3\u306b\u3042\u308b\u3088\u3046\u306b\u3001\u30c7\u30fc\u30bf\u306e\u5404\u4e26\u3073\u9806 (permutation) \u306e\u8d77\u3053\u308a\u3084\u3059\u3055\u3092\u78ba\u7387\u5206\u5e03\u306b\u3057\u305f\u3082\u306e\u3067\u3059\u3002PPD\u306f\u30c7\u30fc\u30bf\u3054\u3068\u306e\u30b9\u30b3\u30a2\u304b\u3089\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3042\u308b\u4e26\u3073\u9806`G`\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u306b\u3001\u305d\u306e\u4e26\u3073\u9806PPD\u306f\u6b21\u5f0f\u3067\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\n\n```math\nP(\\pi|\\mathbf{s}) = \\prod_{j}^n{\\frac{exp(s_j)}{\\sum_{i=j}^{n}{exp(s_i)}}}\n```\n\n\u305f\u3060\u3057\u3001$s_j \\in \\mathbf{s}$\u306f\u30c7\u30fc\u30bf$j$\u306e\u30b9\u30b3\u30a2\u3001$n$\u306f\u30af\u30a8\u30ea\u3042\u305f\u308a\u306e\u30c7\u30fc\u30bf\u6570\u3001$\\pi$\u306f\u4e26\u3073\u9806\u3092\u793a\u3057\u307e\u3059\u3002\u3053\u306e\u5f0f\u306f$n=3$\u306e\u4f8b\u3067\u66f8\u304f\u3068\u6b21\u5f0f\u306b\u306a\u308a\u307e\u3059\u3002\n\n```math\nP(\\pi) = \\frac{exp(s_0)}{exp(s_0) + exp(s_1) + exp(s_2)}\\frac{exp(s_1)}{exp(s_1) + exp(s_2)}\\frac{exp(s_2)}{exp(s_2)}\n```\n\nPermutation Probability Loss \uff08\u4ee5\u4e0b\u3001PPL) \u306f\u30012\u3064\u306ePPD\u306ecross entropy\u3092\u3068\u3063\u3066[^1]\u3001\n\n```math\nPPL = -\\sum{P(\\pi|\\bar{\\mathbf{s}}) \\log P(\\pi|\\mathbf{s})}\n```\n\nPPL\u306f\u3001\u305f\u3068\u3048\u3070\u6559\u5e2b\u30c7\u30fc\u30bf\u306b`(1.0, 0.9, 0.8, ..)`\u306a\u3069\u3068\u7b49\u9593\u9694\u3067\u6570\u5b57\u3092\u3075\u3063\u3066\u4e8c\u4e57\u640d\u5931\u3067\u5b66\u7fd2\u3057\u305f\u5834\u5408\u306b\u6bd4\u3079\u3066\u3001\u7d14\u7c8b\u306b\u9806\u5e8f\u304b\u3089\u5b66\u7fd2\u3067\u304d\u308b\u3068\u3044\u3046\u5229\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\n\n![permutation_probability_small.png](https://qiita-image-store.s3.amazonaws.com/0/152362/2b1d2c29-1645-6738-5105-5726b30960e2.png)\n\n> \u753b\u50cf\u306f[Yan Liu, Learning to Rank: from Pairwise Approach to Listwise Approach](http://www.nactem.ac.uk/tsujii/T-FaNT2/T-FaNT.files/Slides/liu.pdf)\u3088\u308a\u5f15\u7528\u3002\n\n\u305f\u3060\u3057\u3001\u3059\u3079\u3066\u306e\u4e26\u3073\u9806\u306e\u78ba\u7387\u3092\u8a08\u7b97\u3059\u308b\u3068\u3001\u8a08\u7b97\u91cf\u304c$L!$\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u5b9f\u7528\u4e0a\u8a08\u7b97\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u305d\u3053\u3067\u3001\u4e00\u822c\u306b\u306f\u30c8\u30c3\u30d7$k$\u500b\u306e\u306a\u3089\u3073\u3060\u3051\u3092\u8003\u616e\u3059\u308b\u3053\u3068\u3067$L!/(L-k)!$\u306e\u8a08\u7b97\u91cf\u3068\u306a\u308b\u8a2d\u5b9a\u3067\u884c\u3044\u307e\u3059[^2]\u3002\n\n```math\nP(\\pi|\\mathbf{s}) = \\prod_{j}^k{\\frac{exp(s_j)}{\\sum_{i=j}^{n}{exp(s_i)}}}\n```\n\n\u4f8b\u3048\u3070\u3001\u8ad6\u6587\u3067\u3082\u4f7f\u3063\u305f\u3068\u3057\u3066\u3044\u308b$k=1$\u306e\u5834\u5408\u306f\u3001PPL\u306fsoftmax\u3068\u540c\u3058\u5f0f\u306b\u306a\u308a\u307e\u3059\u3002\n\nListNet\u306fPPL\u3092\u4f7f\u3046\u3060\u3051\u3067\u3001\u30c7\u30fc\u30bf\u3054\u3068\u306e\u30b9\u30b3\u30a2\u306e\u8a08\u7b97\u306f\u4efb\u610f\u306e\u5fae\u5206\u53ef\u80fd\u306a\u95a2\u6570\u3067\u5b9f\u88c5\u304c\u3067\u304d\u307e\u3059\u3002\u5143\u306e\u8ad6\u6587\u3067\u306fFeed forward NN\u3067\u3001\u30b9\u30b3\u30a2\u8a08\u7b97\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u3002\n\n## \u5b9f\u88c5\n\n\u307e\u305a\u3001PPL ($k=1$) \u306e\u5b9f\u88c5\u3067\u3059\u3002\n\n```python\n\ndef permutation_probability_loss(x, t, length):\n    length = length.reshape(-1, 1)\n    # log_p: (batch size, n)\n    log_p_x = x - F.broadcast_to(F.expand_dims(F.logsumexp(x, axis=1), 1), x.shape)\n    # p_t: (batch size, n)\n    p_t = F.softmax(t)\n\n    # loss normalized over all instances\n    loss = p_t * log_p_x\n    mask = np.tile(np.arange(x.shape[1]).reshape(1, -1), (x.shape[0],  1)) < length\n    mask = chainer.Variable(mask)\n    padding = chainer.Variable(np.zeros(x.shape, dtype=x.dtype))\n    loss = F.where(mask, loss, padding)\n\n    return -F.sum(loss / length) / p_t.shape[0]\n```\n\n\u306a\u304a\u3001\u4eca\u56de\u306fL\u304c\u53ef\u5909\u3067\u3042\u308b\u524d\u63d0\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002length\u3067\u4e0d\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u3092\u30de\u30b9\u30ad\u30f3\u30b0\u3059\u308b\u3053\u3068\u3067\u3001\u7570\u306a\u308b\u9577\u3055\u306e\u30c7\u30fc\u30bf\u3092\u540c\u3058\u30d0\u30c3\u30c1\u306b\u6d41\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002Pitfall\u3068\u3057\u3066\u3001\u6570\u5f0f\u306e\u8a08\u7b97\u3092\u8ad6\u6587\u901a\u308a\u306b\u884c\u3046\u3068\u3001\u5272\u308a\u7b97\u3084exp\u306e\u8a08\u7b97\u304c\u4e0d\u5b89\u5b9a\u306b\u306a\u308b\u305f\u3081\u3001chainer\u306b\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b`logsumexp`\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30b9\u30b3\u30a2\u306e\u8a08\u7b97\u306f`(B, L, M)`\u306a\u308b\u7279\u5fb4\u91cf\u3092\u53d7\u3051\u53d6\u308a\u3001`(B, L)`\u306a\u308b\u30b9\u30b3\u30a2\u3092\u51fa\u529b\u3059\u308bPerceptron\u3067\u884c\u3044\u307e\u3057\u305f\u3002\u30ea\u30b9\u30c8\u5185\u306e\u30c7\u30fc\u30bf\u306f\u304a\u4e92\u3044\u306b\u72ec\u7acb\u306e\u305f\u3081\u3001`(B, L, M)`\u3092`(B, L * M)`\u306e\u5f62\u306b\u4fee\u6b63\u3057\u3001\u6700\u5f8c\u306b\u5143\u306b\u623b\u3059\u5f62\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\n```python\nclass ListNet(chainer.Chain):\n    def __init__(self, input_size, n_units, dropout):\n        super(ListNet, self).__init__(\n            l1=L.Linear(input_size, n_units),\n            l2=L.Linear(n_units, 1))\n\n        self.add_persistent(\"_dropout\", dropout)\n\n    def __call__(self, x, train=True):\n        s = list(x.shape)\n        n_tokens = np.prod(s[:-1])\n        x = F.reshape(x, (n_tokens, -1))\n\n        if self._dropout > 0.:\n            x = F.dropout(x, self._dropout, train=train)\n        o_1 = F.relu(self.l1(x))\n        if self._dropout > 0.:\n            o_1 = F.dropout(o_1, self._dropout, train=train)\n\n        # o_2: (N*M, 1)\n        o_2 = self.l2(o_1)\n\n        return F.reshape(o_2, s[:-1])\n```\n\n\u3059\u3079\u3066\u306e\u5b9f\u88c5\u306b\u95a2\u3057\u3066\u306f\u3001\u8efd\u304f\u6574\u7406\u3057\u305f\u3042\u3068\u5f8c\u65e5github\u306b\u30d7\u30c3\u30b7\u30e5\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\n## \u5b9f\u9a13\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f[LETOR 4.0](http://research.microsoft.com/en-us/um/beijing/projects/letor/letor4dataset.aspx)\u306e\u3001MQ2007\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\u6642\u9593\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30d5\u30a3\u30fc\u30ea\u30f3\u30b0\u6c7a\u3081\u6253\u3061\u3067\u3001early stopping\u4ee5\u5916\u306f\u7279\u306b\u5de5\u592b\u3092\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n\u8a55\u4fa1\u5bfe\u8c61\u306fmean average precision (MAP)\u3067\u3059\u3002\n\n### \u7d50\u679c\n\n```\nTRAIN: 0.3423\nDEV:   0.3379\nTEST:  0.3527\n```\n\n\u540c\u3058\u30c7\u30fc\u30bf\u3067\u306e\u5143\u8ad6\u6587\u306e\u7d50\u679c\u3002\n\n```\nTRAIN: 0.4526\nDEV:   0.4790\nTEST:  0.4884\n```\n\n\u3046\u30fc\u3093\u3001\u968f\u5206\u5dee\u304c\u3064\u3044\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\u5143\u306e\u8ad6\u6587\u3067\u306f\u300c\u30b9\u30b3\u30a2\u8a08\u7b97\u306bPerceptron\u300d\u3092\u4f7f\u3063\u305f\u3001\u7a0b\u5ea6\u306e\u7c92\u5ea6\u3067\u3057\u304b\u304b\u304b\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u4f55\u304b\u5de5\u592b\u304c\u3042\u3063\u305f\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\nListNet\u306e\u6700\u5927\u306e\u5229\u70b9\u306f\u3068\u306b\u304b\u304f\u901f\u3044\u3053\u3068\u3067\u3057\u3087\u3046\u3002\u5b9f\u969b\u306b\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306f\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u4f53\u611f\u3067RankNet\u306e100\u500d\u7a0b\u5ea6\u901f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u7d42\u308f\u308a\u306b\n\n\u4eca\u5e74\u306fTensorflow\u3068chainer\u3092\u534a\u3005\u306b\u4f7f\u3044\u307e\u3057\u305f\u304c\u3001\u8a66\u4f5c\u30b9\u30d4\u30fc\u30c9 & \u30c7\u30d0\u30c3\u30b0\u306fchainer\u304c\u5727\u5012\u7684\u306b\u901f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3042\u3068\u3001cupy\u30de\u30b8\u30b5\u30a4\u30b3\u30fc\uff01\n\u5229\u7528\u4eba\u6570\u306e\u305b\u3044\u304b\u5b9f\u88c5\u4f8b\u304c\u5c11\u306a\u304f\u3001\u6700\u8fd1\u5c11\u3005Tensorflow\u306b\u304a\u3055\u308c\u6c17\u5473\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u3001\u5b9f\u88c5\u3055\u3089\u3057\u3066\u76db\u308a\u4e0a\u3052\u3066\u3044\u304d\u305f\u3044\u3067\u3059\u306d\u3002\n\n----------------------------\n\n\u5909\u66f4\u5c65\u6b74\uff1a\n\n* 12/7: \u3042\u307e\u308a\u306b\u3082\u3056\u3063\u304f\u308a\u3068\u3057\u3066\u3044\u305f\u306e\u3067\u6570\u5f0f\u3092\u305f\u3057\u307e\u3057\u305f\u3002\n\n[^1]: \u56f3\u306b\u306f\u5927\u304d\u304fKL divergence\u8ddd\u96e2\u3068\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u306fcross entropy\u3092\u4f7f\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002$P(\\pi|\\bar{\\mathbf{s}})$\u304c\u56fa\u5b9a\u306a\u306e\u3067\u6700\u9069\u5316\u3068\u3057\u3066\u306f\u7d50\u5c40\u540c\u3058\u306b\u306a\u308b\u305f\u3081\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n[^2]: \u7d50\u5c40\u30ea\u30b9\u30c8\u304b\u3089\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u308b\u3058\u3083\u3093\uff01\u3068\u3044\u3046\u3064\u3063\u3053\u307f\u306f\u306a\u3057\u3067\u3002\u3057\u304b\u3082\u3001\u666e\u901a`k=1`\u3067\u884c\u3046...\n", "tags": ["Python", "Chainer", "MachineLearning"]}