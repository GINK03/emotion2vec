{"context": " More than 1 year has passed since last update.Go\u3067\u4f7f\u3048\u308b\u6700\u8fd1\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u30fc\u306e\u8cc7\u6599\u3092\u8abf\u3079\u3066\u305f\u3089\u3001flatbuffers\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u304c\u305d\u306e\u4ed6\u3068\u6841\u9055\u3044\u306a\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nflatbuffers\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u659c\u3081\u8aad\u307f\u3057\u3066\u305f\u3089\u300c\u3042\u30fc\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306a\u3093\u3066\u8981\u3089\u306a\u304b\u3063\u305f\u3093\u3084\u30fc\u300d\u3068\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u80cc\u666f\nGoogle App Engine/Go \u3067HTTP\u30d7\u30ed\u30ad\u30b7\u30fc\u3092\u66f8\u3044\u3066\u3044\u308b\u3002\nDDoS\u304c\u6765\u3066\u3082\u304a\u624b\u8efd\u306b\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u3044\u308d\u3044\u308d\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u305f\u308a\u6700\u4f4e\u9650\u306e\u65bd\u7b56\u3092\u3057\u305f\u3044\u3002\n\u30a4\u30f3\u30e1\u30e2\u30ea\u30fc\u30ad\u30e3\u30c3\u30b7\u30e5\u306fLRU\u65b9\u5f0f\u306e\u3053\u308c\u3002\n\u57fa\u672c\u7684\u306bcache\u306fkey/value\u306a\u306e\u3067\u3001http.Response\u3092\u3069\u3046\u306b\u304b\u3057\u3066value\u306b\u53ce\u3081\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nGo\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3068\u3044\u3048\u3070gob\u306a\u306e\u3067\u3001gob\u30b3\u30f3\u30d1\u30c1\u306ehttp.Response\u3082\u3069\u304d\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u3068\u3044\u3063\u3066\u3082\u3001\u65e2\u51fa\u306e\u4e38\u30b3\u30d4\u3067\u3059\u3002HTTP Request/Response\u306egob\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308borchestrate-io/dvr\u3092\u30d9\u30fc\u30b9\u306bgo-gob-http\u3092\u3068\u308a\u3042\u3048\u305a\u4f5c\u308a\u307e\u3057\u305f\u304c\u3001gob\u306e\u65e2\u51fa\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u304c\u6841\u9055\u3044\u306b\u9045\u304b\u3063\u305f\u306e\u3067\u8a66\u3057\u3066\u307e\u305b\u3093\u3002gob\u30e9\u30d6\u306a\u65b9\u306f\u305c\u3072\u8a66\u3057\u3066\u3061\u3083\u3093\u3068\u52d5\u304f\u304b\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\nflatbuffers\n2014\u5e74\u306bGoogle\u304c\u767a\u8868\u3057\u3066\u3001\u307e\u3063\u305f\u308a\u958b\u767a\u3055\u308c\u3066\u3044\u308b\u6a21\u69d8\u3067\u3059\u3002\n\u96f0\u56f2\u6c17\u7684\u306b\u306f\u3001\u4f7f\u3044\u305f\u3044\u4eba\u304c\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b\u3001\u65b9\u5f0f\u306e\u3088\u3046\u3067\u3059\u3002\n\u30d7\u30eb\u30ea\u30af\u306b\u306fPython\u7248\u3082\u3042\u308b\u3088\u3046\u3067\u3059\u3002\nhttp://google.github.io/flatbuffers/index.html \u306b\u5168\u90e8\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\nMac OS X\u3067\u306e\u30c4\u30fc\u30eb\u306ebuild\u306f\u3001\u3053\u3053\u306e\u8aac\u660e\u304c\u30ad\u30e3\u30d7\u30c1\u30e3\u5165\u308a\u3067\u3001\u8ff7\u3046\u3068\u3053\u308d\u304c\u3042\u308a\u307e\u305b\u3093\u3002\nGo\u7248\u306f\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u306a\u3044\u306e\u3067\u3001\u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30b3\u30fc\u30c9\u3092import\u3059\u308b\u306e\u307f\u3067\u3059\u3002\nnamespace\u306b\u6307\u5b9a\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u540d\u306b\u306a\u308a\u307e\u3059\u3002\n\nflatbaffers\nnamespace fbs;\n\nenum Status : byte {\n  Ok = 0,\n  NotFound,\n  InternalServerError,\n}\n\ntable HttpResponse {\n  StatusEnum: Status = Ok;\n  Headers:    string;\n  Body:       string;\n}\n\nroot_type HttpResponse;\n\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u81ea\u52d5\u751f\u6210\u30c4\u30fc\u30ebflatc\u306e\u547c\u3073\u51fa\u3057\u65b9\u6cd5\u306f\u3001\u3053\u3093\u306a\u611f\u3058\u3002\n-g\u30aa\u30d7\u30b7\u30e7\u30f3\u304cGo\u8a00\u8a9e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6307\u5b9a\u3067\u3059\u3002\n\nshell\n$ flatc -g -o src http-response.fbs\n\n\n\u8d85\u304a\u624b\u8efd\u3001\u3059\u3070\u3089\u3057\u3044\u3002\u3044\u307e\u306e\u3068\u3053\u308d\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u5c11\u306a\u304f\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3082\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\nflatbaffers\u3067\u3001\u8907\u96d1\u306a\u69cb\u9020\u4f53\u3092\u518d\u73fe\u3059\u308b\u306e\u306f\u3001\u4e00\u82e6\u52b4\u3067\u3057\u3087\u3046\u3002\n\u5f53\u521d\u3001flatbaffers\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3089\u3057\u3044[byte]\u3092\u6307\u5b9a\u3057\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u602a\u3057\u3044\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\u305f\u306e\u3067\u3001string\u3067\u5bfe\u5fdc\u3057\u307e\u3057\u305f\u3002http.Response.StatusCode\u306f\u6975\u5358\u7d14\u5316\u3057\u3066enum\u306b\u53ce\u3081\u307e\u3059\u3002\n\u4ee5\u4e0b\u3001go-lru-cache-stats\u3068\u7d44\u307f\u5408\u308f\u305b\u305f\u30b3\u30fc\u30c9\u629c\u7c8b\u3002\n\ngo\n\nimport (\n    flatbuffers \"github.com/MiCHiLU/flatbuffers/go\"\n    lru \"github.com/MiCHiLU/go-lru-cache-stats\"\n\n    \"fbs\"\n)\n\nvar (\n    responseGroup lru.Getter\n\n    endOfMIMEType = []byte(\"\\n\\n\")\n    excludeHeader = map[string]bool{\n        \"Content-Length\":    true,\n        \"Transfer-Encoding\": true,\n    }\n\n    statusEnumList = [...]int{\n        http.StatusOK,\n        http.StatusNotFound,\n        http.StatusInternalServerError,\n    }\n)\n\n...\n\nfunc init() {\n    responseGroup = (*lru.NewGroup(\"response\", responseCacheBytes, lru.GetterFunc(responseGetter), responseStats))\n}\n\nfunc proxy(w http.ResponseWriter, r *http.Request) {\n    // TODO: Access-Control-Allow-Methods: GET,OPTIONS\n    if r.Method != \"GET\" {\n        http.Error(w, \"\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    c := appengine.NewContext(r)\n\n    hostPath := r.URL.Host + r.URL.Path\n    var responseByte = make([]byte, 0)\n    err := responseGroup.Get(c, hostPath, lru.AllocatingByteSliceSink(&responseByte))\n    if err != nil {\n        http.Error(w, \"\", http.StatusBadGateway)\n        return\n    }\n\n    c.Debugf(\"%v\", responseByte)\n    response := fbs.GetRootAsHttpResponse(responseByte, 0)\n\n    // status code\n    switch statusEnumList[response.StatusEnum()] {\n    case http.StatusNotFound:\n        http.NotFound(w, r)\n        return\n    case http.StatusInternalServerError:\n        http.Error(w, \"\", http.StatusInternalServerError)\n        return\n    }\n\n    // header\n    headers := response.Headers()\n    if headers != \"\" {\n        reader := textproto.NewReader(bufio.NewReader(strings.NewReader(headers)))\n        mimeHeader, err := reader.ReadMIMEHeader()\n        if err != nil {\n            c.Warningf(\"fail reader.ReadMIMEHeader(): %s, %s\", err.Error(), hostPath)\n            err = nil\n        } else {\n            for k, vs := range mimeHeader {\n                for _, v := range vs {\n                    w.Header().Set(k, v)\n                }\n            }\n        }\n    }\n\n    // body\n    body := response.Body()\n    if body != \"\" {\n        fmt.Fprint(w, body)\n    }\n\n    return\n}\n\nfunc responseGetter(ctx lru.Context, hostPath string, dest lru.Sink) (err error) {\n    c := ctx.(appengine.Context)\n\n    url := originUrl(hostPath)\n\n    request, err := http.NewRequest(\"GET\", url, nil)\n    if err != nil {\n        c.Errorf(\"%s: %s\", err.Error(), url)\n        return\n    }\n    client := urlfetch.Client(c)\n    response, err := client.Do(request)\n    if err != nil {\n        // TODO\n        return\n    }\n\n    builder := flatbuffers.NewBuilder(0)\n    var headersOffset, bodyOffset flatbuffers.UOffsetT\n\n    if response.StatusCode < 400 {\n        // get Body\n        defer response.Body.Close()\n        body, err := ioutil.ReadAll(response.Body)\n        if err == nil {\n            // Header\n            var buffer bytes.Buffer\n            response.Header.WriteSubset(&buffer, excludeHeader)\n            buffer.Write(endOfMIMEType)\n            headersOffset = builder.CreateString(buffer.String())\n            // Body\n            bodyOffset = builder.CreateString(string(body))\n        }\n    }\n\n    fbs.HttpResponseStart(builder)\n    if err != nil || 500 <= response.StatusCode {\n        fbs.HttpResponseAddStatusEnum(builder, fbs.StatusInternalServerError)\n    } else if 400 <= response.StatusCode {\n        fbs.HttpResponseAddStatusEnum(builder, fbs.StatusNotFound)\n    }\n    if headersOffset != 0 {\n        fbs.HttpResponseAddHeaders(builder, headersOffset)\n    }\n    if headersOffset != 0 {\n        fbs.HttpResponseAddBody(builder, bodyOffset)\n    }\n    rootTable := fbs.HttpResponseEnd(builder)\n    builder.Finish(rootTable)\n\n    err = dest.SetBytes(builder.Bytes[builder.Head():])\n    if err != nil {\n        c.Errorf(\"dest.SetBytes() has error: %s, %s\", err.Error(), url)\n    }\n\n    return\n}\n\n\n\n\u672c\u984c\n\u3067\u3001\u3053\u3053\u304c\u672c\u984c\u306a\u306e\u3067\u3059\u304c\u3001Google App Engine\u306b\u306f\u3001unsafepackage\u304cimport\u3067\u304d\u306a\u3044\u5236\u7d04\u304c\u3042\u3063\u30661\u3001flatbaffers/go\u306funsafepackage\u3092import\u3057\u3066\u3044\u308b\u306e\u3067\u3001GAE\u306b\u30c7\u30d7\u30ed\u30a4\u3067\u304d\u307e\u305b\u3093\u3002\n\u898b\u305f\u3068\u3053\u308d\u3001\u578b\u306e\u30e1\u30e2\u30ea\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3057\u3066\u30aa\u30d5\u30bb\u30c3\u30c8\u306b\u52d8\u6848\u3059\u308b\u3088\u3046\u306a\u611f\u3058\u3060\u3063\u305f\u306e\u3067\u3001\u300cGoogle App Engine\u306e\u5b9f\u884c\u74b0\u5883\u306fDocker\u306b\u79fb\u884c\u3057\u3066\u3044\u308b\u3060\u308d\u3046\u300d\u3068\u3044\u3046\u61b6\u6e2c\u306e\u3082\u3068\u3001\u3068\u3044\u3046\u304b\u300cLinux/64bit\u74b0\u5883\u3060\u308d\u3046\u300d\u3068\u3044\u3046\u611a\u76f4\u306a\u63a8\u6e2c\u306e\u3082\u3068\u3001Docker image\u306e\u5ff5\u306e\u305f\u3081google/golang-runtime \u3092Google Compute Engine\u4e0a\u3067\u53d6\u5f97\u3057\u305f\u5024 2 \u3092\u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3067\u57cb\u3081\u8fbc\u307f\u307e\u3057\u305f\u3002\n\u30c7\u30d7\u30ed\u30a4\u3057\u305f\u3068\u3053\u308d\u3046\u307e\u304f\u52d5\u3044\u3066\u308b\u3063\u307d\u3044\u306e\u3067\u3001\u7686\u3055\u3093\u3082\u8a66\u3057\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5927\u5909\u52a9\u304b\u308a\u307e\u3059\u3002\nhttps://github.com/MiCHiLU/flatbuffers/commit/5a064af24cfb355a0ecfebd800247333f8218e58\n\u3057\u3070\u3089\u304f\u3057\u305f\u3089\u3001flatbaffers\u306b\u30d7\u30eb\u30ea\u30af\u3057\u307e\u3059\u3002\n\n\u30e1\u30e2\n\u30ed\u30fc\u30ab\u30eb\u3067\u306f\u554f\u984c\u306b\u306a\u308a\u307e\u305b\u3093\u304c\u3001GAE\u4e0a\u3060\u3068c.Debugf(\"%s\", responseByte)\u304c\u5e38\u306b\"\"\u3092\u51fa\u529b\u3059\u308b\u306e\u304c\u30cf\u30de\u30ea\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002c.Debugf(\"%v\", responseByte)\u3068\u3057\u307e\u3057\u3087\u3046\u3002\n\n\n\n\nhttps://blog.golang.org/go-and-google-app-engine\u00a0\u21a9\n\n\n\u4f7f\u7528\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089 https://gist.github.com/MiCHiLU/31609bd30d292880888c\u00a0\u21a9\n\n\n\nGo\u3067\u4f7f\u3048\u308b\u6700\u8fd1\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30b6\u30fc\u306e\u8cc7\u6599\u3092\u8abf\u3079\u3066\u305f\u3089\u3001[flatbuffers\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af](http://qiita.com/MiCHiLU/items/412135e44dd4e07fa5d3)\u304c\u305d\u306e\u4ed6\u3068\u6841\u9055\u3044\u306a\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nflatbuffers\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u659c\u3081\u8aad\u307f\u3057\u3066\u305f\u3089\u300c\u3042\u30fc\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306a\u3093\u3066\u8981\u3089\u306a\u304b\u3063\u305f\u3093\u3084\u30fc\u300d\u3068\u306a\u308a\u307e\u3057\u305f\u3002\n\n#\u80cc\u666f\n\nGoogle App Engine/Go \u3067HTTP\u30d7\u30ed\u30ad\u30b7\u30fc\u3092\u66f8\u3044\u3066\u3044\u308b\u3002\nDDoS\u304c\u6765\u3066\u3082\u304a\u624b\u8efd\u306b\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u3044\u308d\u3044\u308d\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u305f\u308a\u6700\u4f4e\u9650\u306e\u65bd\u7b56\u3092\u3057\u305f\u3044\u3002\n\u30a4\u30f3\u30e1\u30e2\u30ea\u30fc\u30ad\u30e3\u30c3\u30b7\u30e5\u306fLRU\u65b9\u5f0f\u306e[\u3053\u308c](https://github.com/MiCHiLU/go-lru-cache-stats)\u3002\n\u57fa\u672c\u7684\u306bcache\u306fkey/value\u306a\u306e\u3067\u3001`http.Response`\u3092\u3069\u3046\u306b\u304b\u3057\u3066`value`\u306b\u53ce\u3081\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\nGo\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3068\u3044\u3048\u3070`gob`\u306a\u306e\u3067\u3001gob\u30b3\u30f3\u30d1\u30c1\u306e`http.Response`\u3082\u3069\u304d\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u3068\u3044\u3063\u3066\u3082\u3001\u65e2\u51fa\u306e\u4e38\u30b3\u30d4\u3067\u3059\u3002HTTP Request/Response\u306egob\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b[`orchestrate-io/dvr`](https://github.com/orchestrate-io/dvr)\u3092\u30d9\u30fc\u30b9\u306b[go-gob-http](https://github.com/MiCHiLU/go-gob-http)\u3092\u3068\u308a\u3042\u3048\u305a\u4f5c\u308a\u307e\u3057\u305f\u304c\u3001gob\u306e\u65e2\u51fa\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u304c\u6841\u9055\u3044\u306b\u9045\u304b\u3063\u305f\u306e\u3067\u8a66\u3057\u3066\u307e\u305b\u3093\u3002gob\u30e9\u30d6\u306a\u65b9\u306f\u305c\u3072\u8a66\u3057\u3066\u3061\u3083\u3093\u3068\u52d5\u304f\u304b\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n#flatbuffers\n\n2014\u5e74\u306bGoogle\u304c\u767a\u8868\u3057\u3066\u3001\u307e\u3063\u305f\u308a\u958b\u767a\u3055\u308c\u3066\u3044\u308b\u6a21\u69d8\u3067\u3059\u3002\n\u96f0\u56f2\u6c17\u7684\u306b\u306f\u3001\u4f7f\u3044\u305f\u3044\u4eba\u304c\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b\u3001\u65b9\u5f0f\u306e\u3088\u3046\u3067\u3059\u3002\n\u30d7\u30eb\u30ea\u30af\u306b\u306fPython\u7248\u3082\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\nhttp://google.github.io/flatbuffers/index.html \u306b\u5168\u90e8\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\nMac OS X\u3067\u306e\u30c4\u30fc\u30eb\u306ebuild\u306f\u3001[\u3053\u3053\u306e\u8aac\u660e](http://qiita.com/yosuque/items/5edaae2020a27d6a82c4)\u304c\u30ad\u30e3\u30d7\u30c1\u30e3\u5165\u308a\u3067\u3001\u8ff7\u3046\u3068\u3053\u308d\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\nGo\u7248\u306f\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u306a\u3044\u306e\u3067\u3001\u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30b3\u30fc\u30c9\u3092import\u3059\u308b\u306e\u307f\u3067\u3059\u3002\n`namespace`\u306b\u6307\u5b9a\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u540d\u306b\u306a\u308a\u307e\u3059\u3002\n\n```lang:flatbaffers\nnamespace fbs;\n\nenum Status : byte {\n  Ok = 0,\n  NotFound,\n  InternalServerError,\n}\n\ntable HttpResponse {\n  StatusEnum: Status = Ok;\n  Headers:    string;\n  Body:       string;\n}\n\nroot_type HttpResponse;\n```\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u81ea\u52d5\u751f\u6210\u30c4\u30fc\u30eb`flatc`\u306e\u547c\u3073\u51fa\u3057\u65b9\u6cd5\u306f\u3001\u3053\u3093\u306a\u611f\u3058\u3002\n`-g`\u30aa\u30d7\u30b7\u30e7\u30f3\u304cGo\u8a00\u8a9e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6307\u5b9a\u3067\u3059\u3002\n\n```lang:shell\n$ flatc -g -o src http-response.fbs\n```\n\n\u8d85\u304a\u624b\u8efd\u3001\u3059\u3070\u3089\u3057\u3044\u3002\u3044\u307e\u306e\u3068\u3053\u308d\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u5c11\u306a\u304f\u3001[\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9](https://github.com/google/flatbuffers/blob/master/tests/go_test.go#L944)\u3082\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\nflatbaffers\u3067\u3001\u8907\u96d1\u306a\u69cb\u9020\u4f53\u3092\u518d\u73fe\u3059\u308b\u306e\u306f\u3001\u4e00\u82e6\u52b4\u3067\u3057\u3087\u3046\u3002\n\u5f53\u521d\u3001flatbaffers\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3089\u3057\u3044`[byte]`\u3092\u6307\u5b9a\u3057\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u602a\u3057\u3044\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\u305f\u306e\u3067\u3001`string`\u3067\u5bfe\u5fdc\u3057\u307e\u3057\u305f\u3002`http.Response.StatusCode`\u306f\u6975\u5358\u7d14\u5316\u3057\u3066`enum`\u306b\u53ce\u3081\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u3001[go-lru-cache-stats](https://github.com/MiCHiLU/go-lru-cache-stats)\u3068\u7d44\u307f\u5408\u308f\u305b\u305f\u30b3\u30fc\u30c9\u629c\u7c8b\u3002\n\n```lang:go\n\nimport (\n\tflatbuffers \"github.com/MiCHiLU/flatbuffers/go\"\n\tlru \"github.com/MiCHiLU/go-lru-cache-stats\"\n\n\t\"fbs\"\n)\n\nvar (\n\tresponseGroup lru.Getter\n\n\tendOfMIMEType = []byte(\"\\n\\n\")\n\texcludeHeader = map[string]bool{\n\t\t\"Content-Length\":    true,\n\t\t\"Transfer-Encoding\": true,\n\t}\n\n\tstatusEnumList = [...]int{\n\t\thttp.StatusOK,\n\t\thttp.StatusNotFound,\n\t\thttp.StatusInternalServerError,\n\t}\n)\n\n...\n\nfunc init() {\n\tresponseGroup = (*lru.NewGroup(\"response\", responseCacheBytes, lru.GetterFunc(responseGetter), responseStats))\n}\n\nfunc proxy(w http.ResponseWriter, r *http.Request) {\n\t// TODO: Access-Control-Allow-Methods: GET,OPTIONS\n\tif r.Method != \"GET\" {\n\t\thttp.Error(w, \"\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\n\tc := appengine.NewContext(r)\n\n\thostPath := r.URL.Host + r.URL.Path\n\tvar responseByte = make([]byte, 0)\n\terr := responseGroup.Get(c, hostPath, lru.AllocatingByteSliceSink(&responseByte))\n\tif err != nil {\n\t\thttp.Error(w, \"\", http.StatusBadGateway)\n\t\treturn\n\t}\n\n\tc.Debugf(\"%v\", responseByte)\n\tresponse := fbs.GetRootAsHttpResponse(responseByte, 0)\n\n\t// status code\n\tswitch statusEnumList[response.StatusEnum()] {\n\tcase http.StatusNotFound:\n\t\thttp.NotFound(w, r)\n\t\treturn\n\tcase http.StatusInternalServerError:\n\t\thttp.Error(w, \"\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\t// header\n\theaders := response.Headers()\n\tif headers != \"\" {\n\t\treader := textproto.NewReader(bufio.NewReader(strings.NewReader(headers)))\n\t\tmimeHeader, err := reader.ReadMIMEHeader()\n\t\tif err != nil {\n\t\t\tc.Warningf(\"fail reader.ReadMIMEHeader(): %s, %s\", err.Error(), hostPath)\n\t\t\terr = nil\n\t\t} else {\n\t\t\tfor k, vs := range mimeHeader {\n\t\t\t\tfor _, v := range vs {\n\t\t\t\t\tw.Header().Set(k, v)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// body\n\tbody := response.Body()\n\tif body != \"\" {\n\t\tfmt.Fprint(w, body)\n\t}\n\n\treturn\n}\n\nfunc responseGetter(ctx lru.Context, hostPath string, dest lru.Sink) (err error) {\n\tc := ctx.(appengine.Context)\n\n\turl := originUrl(hostPath)\n\n\trequest, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\tc.Errorf(\"%s: %s\", err.Error(), url)\n\t\treturn\n\t}\n\tclient := urlfetch.Client(c)\n\tresponse, err := client.Do(request)\n\tif err != nil {\n\t\t// TODO\n\t\treturn\n\t}\n\n\tbuilder := flatbuffers.NewBuilder(0)\n\tvar headersOffset, bodyOffset flatbuffers.UOffsetT\n\n\tif response.StatusCode < 400 {\n\t\t// get Body\n\t\tdefer response.Body.Close()\n\t\tbody, err := ioutil.ReadAll(response.Body)\n\t\tif err == nil {\n\t\t\t// Header\n\t\t\tvar buffer bytes.Buffer\n\t\t\tresponse.Header.WriteSubset(&buffer, excludeHeader)\n\t\t\tbuffer.Write(endOfMIMEType)\n\t\t\theadersOffset = builder.CreateString(buffer.String())\n\t\t\t// Body\n\t\t\tbodyOffset = builder.CreateString(string(body))\n\t\t}\n\t}\n\n\tfbs.HttpResponseStart(builder)\n\tif err != nil || 500 <= response.StatusCode {\n\t\tfbs.HttpResponseAddStatusEnum(builder, fbs.StatusInternalServerError)\n\t} else if 400 <= response.StatusCode {\n\t\tfbs.HttpResponseAddStatusEnum(builder, fbs.StatusNotFound)\n\t}\n\tif headersOffset != 0 {\n\t\tfbs.HttpResponseAddHeaders(builder, headersOffset)\n\t}\n\tif headersOffset != 0 {\n\t\tfbs.HttpResponseAddBody(builder, bodyOffset)\n\t}\n\trootTable := fbs.HttpResponseEnd(builder)\n\tbuilder.Finish(rootTable)\n\n\terr = dest.SetBytes(builder.Bytes[builder.Head():])\n\tif err != nil {\n\t\tc.Errorf(\"dest.SetBytes() has error: %s, %s\", err.Error(), url)\n\t}\n\n\treturn\n}\n```\n\n#\u672c\u984c\n\n\u3067\u3001\u3053\u3053\u304c\u672c\u984c\u306a\u306e\u3067\u3059\u304c\u3001Google App Engine\u306b\u306f\u3001`unsafe`package\u304cimport\u3067\u304d\u306a\u3044\u5236\u7d04\u304c\u3042\u3063\u3066[^1]\u3001`flatbaffers/go`\u306f`unsafe`package\u3092import\u3057\u3066\u3044\u308b\u306e\u3067\u3001GAE\u306b\u30c7\u30d7\u30ed\u30a4\u3067\u304d\u307e\u305b\u3093\u3002\n\u898b\u305f\u3068\u3053\u308d\u3001\u578b\u306e\u30e1\u30e2\u30ea\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3057\u3066\u30aa\u30d5\u30bb\u30c3\u30c8\u306b\u52d8\u6848\u3059\u308b\u3088\u3046\u306a\u611f\u3058\u3060\u3063\u305f\u306e\u3067\u3001\u300cGoogle App Engine\u306e\u5b9f\u884c\u74b0\u5883\u306fDocker\u306b\u79fb\u884c\u3057\u3066\u3044\u308b\u3060\u308d\u3046\u300d\u3068\u3044\u3046\u61b6\u6e2c\u306e\u3082\u3068\u3001\u3068\u3044\u3046\u304b\u300cLinux/64bit\u74b0\u5883\u3060\u308d\u3046\u300d\u3068\u3044\u3046\u611a\u76f4\u306a\u63a8\u6e2c\u306e\u3082\u3068\u3001Docker image\u306e\u5ff5\u306e\u305f\u3081[`google/golang-runtime`](https://registry.hub.docker.com/u/google/golang-runtime/) \u3092Google Compute Engine\u4e0a\u3067\u53d6\u5f97\u3057\u305f\u5024 [^2] \u3092\u30cf\u30fc\u30c9\u30b3\u30fc\u30c9\u3067\u57cb\u3081\u8fbc\u307f\u307e\u3057\u305f\u3002\n\n[^1]: https://blog.golang.org/go-and-google-app-engine\n[^2]: \u4f7f\u7528\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089 https://gist.github.com/MiCHiLU/31609bd30d292880888c\n\n\u30c7\u30d7\u30ed\u30a4\u3057\u305f\u3068\u3053\u308d\u3046\u307e\u304f\u52d5\u3044\u3066\u308b\u3063\u307d\u3044\u306e\u3067\u3001\u7686\u3055\u3093\u3082\u8a66\u3057\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5927\u5909\u52a9\u304b\u308a\u307e\u3059\u3002\n\n\nhttps://github.com/MiCHiLU/flatbuffers/commit/5a064af24cfb355a0ecfebd800247333f8218e58\n\n\u3057\u3070\u3089\u304f\u3057\u305f\u3089\u3001flatbaffers\u306b\u30d7\u30eb\u30ea\u30af\u3057\u307e\u3059\u3002\n\n\n#\u30e1\u30e2\n\n\u30ed\u30fc\u30ab\u30eb\u3067\u306f\u554f\u984c\u306b\u306a\u308a\u307e\u305b\u3093\u304c\u3001GAE\u4e0a\u3060\u3068`c.Debugf(\"%s\", responseByte)`\u304c\u5e38\u306b`\"\"`\u3092\u51fa\u529b\u3059\u308b\u306e\u304c\u30cf\u30de\u30ea\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002`c.Debugf(\"%v\", responseByte)`\u3068\u3057\u307e\u3057\u3087\u3046\u3002\n", "tags": ["Go", "GAE", "FlatBuffers"]}