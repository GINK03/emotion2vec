{"context": " More than 1 year has passed since last update.Go\u8a00\u8a9e\u306e\u30e1\u30e2\u5e33\u3067\u3059\u3002\n\u968f\u6642\u66f4\u65b0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u203b\u307b\u3093\u3068\u306b\u521d\u5fc3\u8005\u306e\u66f8\u304d\u8fbc\u307f\u3067\u3059\u3002\n\u6b21\u56de\n\nhttps://go-tour-jp.appspot.com/methods/1\n\n\nA Tour of Go\n\nhttp://go-tour-jp.appspot.com/\n\n\n\u8a08\u7b97\n1e9  /* 1000000000 */\n2**n /* \uff12\u306en\u4e57 */\n1<<n /* 1(int)\u3092\u5de6\u306b\u30b7\u30d5\u30c8 */\n\n\n\u30dd\u30a4\u30f3\u30bf\n/* \u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u53c2\u7167 */\ns = := T{}\nt := &s\n\n/* \u76f4\u63a5\u30dd\u30a4\u30f3\u30bf\u53c2\u7167 */\nt := &T{}\n\n/* new\u3067\u3082\u540c\u7b49 */\nvar t *T = new(T)\nt := new(T)\n\n/* int\u306bint\u306e\u30dd\u30a4\u30f3\u30bf\u306f\u4ee3\u5165\u3067\u304d\u306a\u3044 cannot use &a (type *int) as type int in assignment */\nvar i int\na := 1\ni = &a\n\nnew\u304c\u30dd\u30a4\u30f3\u30bf\u30fb\u30fb\u30fbjava\u51fa\u8eab\u306e\u81ea\u5206\u3068\u3057\u3066\u306f\u306a\u304b\u306a\u304b\u5f37\u70c8\u3002C\u3060\u3068\u5f53\u7136\uff1f\n\u3042\u3068\u69cb\u9020\u4f53\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3063\u3066\u8a00\u3063\u305f\u3089\u3042\u304b\u3093\u306e\u304b\u306a\u3002\n\nstruct\njava\u3067\u3044\u3046\u30af\u30e9\u30b9\uff1f\u307f\u305f\u3044\u306a\u3082\u306e\uff1f\nstruct\u540d{}\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u611f\u3058\u3002\n{}\u5185\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u521d\u671f\u5316\u3067\u304d\u308b\u304c\u3001:\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u6307\u5b9a\u306e\u521d\u671f\u5316\u304c\u53ef\u80fd\u3002\n\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u306f\n\n\u30d5\u30a3\u30fc\u30eb\u30c9\u6570\u5206\u5f15\u6570\u3092\u6307\u5b9a\u3059\u308b\uff08\u5ba3\u8a00\u9806\uff1f\uff09\n\u6307\u5b9a\u306a\u3057\uff08\u5404\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u521d\u671f\u5024\uff09\n\npackage main\n\nimport \"fmt\"\n\ntype Vertex struct {\n    X, Y int\n}\n\nvar (\n    p = Vertex{1, 2}  // has type Vertex\n    q = &Vertex{1, 2} // has type *Vertex\n    r = Vertex{Y: 1}  // Y:0 is implicit\n    s = Vertex{}      // X:0 and Y:0\n)\n\nfunc main() {\n    fmt.Println(p, q, r, s)\n}\n\n\n\u51fa\u529b\n\nfmt.Printf(\"%d\", 1)\n\n\u4e00\u756a\u6700\u521d\u304c\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u3001\u5f8c\u306e\u5f15\u6570\u304c\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e%d\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\uff1f\n\nfmt.Println(\"\", 1)\n\n\u5f15\u6570\u9806\u306b\u9023\u7d50\u3055\u308c\u3066\u51fa\u529b\u3055\u308c\u308b\n\nfor\u6587\nfor i ; i < 10 ; i++ {}\n\nfor i < 10 ; i++ {}\n\nvar pow = []int{1, 2, 4, 8, 16, 32, 64, 128}\nfor i, v := range pow {fmt.Printf(\"2**%d = %d\\n\", i, v)}\n\nGo\u306f\u7e70\u308a\u8fd4\u3057\u306ffor\u6587\u306e\u307f\u3002\n\nslice\nvar s = []int{1, 2, 3} # len=3 cap=3 [1 2 3]\n\nvar s = make([]int, 5) # len=5 cap=5 [0 0 0 0 0]\n\nvar s = make([]int, 0, 5) # len=0 cap=5 []\n\n\u6ce8\u610f\u70b9\nslice\u3092\u518dslice\u3057\u305f\u5834\u5408\u306f\u3042\u304f\u307e\u3067\u53c2\u7167\u6e21\u3057\u306a\u306e\u3067\u3001\u518dslice\u3057\u305f\u5185\u5bb9\u3092\u5909\u66f4\u3059\u308b\u3068slice\u5143\u3082\u5909\u66f4\u3055\u308c\u308b\u3002\n\nslice.go\np := []int{2, 3, 5, 7, 11, 13}\n\n/* p == [2 3 5 7 11 13] */\nfmt.Println(\"p ==\", p)\n\nq := p[1:4]\n\n/* q == [3 5 7] */\nfmt.Println(\"q ==\", q)\n\nq[1] = 3\n\n/* q == [3 3 7] */\nfmt.Println(\"q ==\", q)\n\n/* p == [2 3 3 7 11 13] */\nfmt.Println(\"p ==\", p)\n\n\nGo\u3067\u300c\u53c2\u7167\u6e21\u3057\u300d\u3068\u3044\u3046\u8868\u73fe\u306f\u6b63\u3057\u3044\u306e\u3060\u308d\u3046\u304b\u30fb\u30fb\u30fb\n\nMap\njson\u307f\u305f\u3044\u306b\u66f8\u3051\u308b\nmap := map[string]int {\n  \"1\": 1,\n  \"2\": 2,\n}\n\nstruct\u3082\nmap := map[string]St {\n  \"st1\": St{ 1, 2, },\n  \"st2\": St{ 1, 3, },\n}\n\nmake\u3067\u3082\nmap := make(map[string]int)\n\njson\u5f62\u5f0f\u306e\u5834\u5408\u3063\u3066\u3001\u6700\u5f8c\u3082\u30ab\u30f3\u30de\u5165\u308c\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3093\u3067\u3059\u306d\u30fb\u30fb\u30fb\n\nmap := map[string]int {\n \"1\": 1,\n \"2\": 2, <- \u3053\u3053\uff01\n}\nmap := map[string]St {\n \"st1\": St{ 1, 2, <-\u3053\u3053\u3068\u304b\uff01 },\n \"st2\": St{ 1, 3, },<-\u3053\u3053\u3068\u304b\uff01\n}\n\nJava\u3060\u3068\u7d42\u308f\u308a\u306b\u30ab\u30f3\u30de\u4ed8\u3051\u306a\u3044\u98a8\u7fd2\u3060\u304b\u3089\u7d50\u69cb\u306a\u308c\u308b\u307e\u3067\u6642\u9593\u304c\u304b\u304b\u308a\u305d\u3046\u30fb\u30fb\u30fb\n\nswitch\nGo\u306eswitch\u306f\u3001case\u5f8c\u306b\u81ea\u52d5\u3067break\u3059\u308b\u3002\nbreak\u3055\u305b\u306a\u3044\u305f\u3081\u306b\u306f\u300cfallthrough\u300d\u3092\u8a18\u8ff0\u3059\u308c\u3070OK\u3002\n\u6761\u4ef6\u306b\u6f14\u7b97\u3092\u7528\u3044\u308b\u3053\u3068\u3082\u53ef\u80fd\u3002\nswitch n := 1; n {\ncase 0:\n    fmt.Println(\"0\")\ncase 1:\n    fmt.Println(\"1\")\n    fallthrough               /* break\u3055\u305b\u306a\u3044 */\ncase n + 1 == 3               /* \u6f14\u7b97\u3067\u6761\u4ef6\u5224\u5b9a */\n    fmt.Println(\"2\")\ndefault:\n    fmt.Println(\"default!\")\n}\n\n\nDefer\nA Tour of Go\u306e\u307e\u3093\u307e\u3002\n\u3053\u308c\u306f\u4f55\u304c\u4fbf\u5229\u306a\u306e\u3060\u308d\u3046\u3001\u4f7f\u3063\u3066\u3044\u304b\u306a\u3044\u3068\u308f\u304b\u3089\u306a\u3044\u3002\u3002\u3002\n\u5f15\u6570\u3060\u3051\u5148\u306b\u8a55\u4fa1\u3055\u308c\u3066\u3001\u5b9f\u884c\u304c\u9045\u5ef6\u3059\u308b\u306e\u304c\u3088\u3044\u306e\u304b\uff1f\nfunc main() {\n    defer fmt.Println(\"Go!\")\n    defer fmt.Println(\"of\")\n    defer fmt.Println(\"world\")\n    fmt.Println(\"hello\")\n    /* hello world of Go! */\n}\n\n\u3057\u304b\u3082\u5f8c\u306b\u30b9\u30bf\u30c3\u30af\u3057\u305f\u3082\u306e\u304c\u5148\u306b\u30dd\u30a4\u3055\u308c\u308b\u3002\u6c17\u3092\u3064\u3051\u306a\u3044\u3068\u3002\n\nMethods\nstruct\u3092\u5f15\u6570\uff08\u30e1\u30bd\u30c3\u30c9\u30ec\u30b7\u30fc\u30d0\uff09\u306b\u6307\u5b9a\u3059\u308b\u3068\u3042\u305f\u304b\u3082\u305d\u306estruct\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\njavascript\u306e\u69d8\u306b\u5f8c\u304b\u3089function\u3092\u8ffd\u52a0\u3059\u308b\u30a4\u30e1\u30fc\u30b8\u3067\u3042\u3063\u3066\u307e\u3059\u304b\u306d\u3002\ntype Vertex struct {\n    X, Y float64\n}\n\nfunc (v *Vertex) Abs() float64 {\n    return math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n\nfunc main() {\n    v := &Vertex{3, 4}\n    fmt.Println(v.Abs())\n}\n\n\n\u305d\u306e\u4ed6\nmath.Sqrt(25) /* \u5e73\u65b9\u6839 5*/\n\n2015/12/01\u3000\u306a\u3093\u304b A Tour of Go \u306e\u7ae0\u7acb\u3066\u3068\u304b\u5909\u66f4\u3055\u308c\u3066\u308b\uff01 \n\n\u6f14\u7fd2\u554f\u984c\nMap\npackage main\n\nimport (\n    \"code.google.com/p/go-tour/wc\"\n    \"strings\"\n)\n\nfunc WordCount(s string) map[string]int {\n    ret := make(map[string]int)\n    for _,v := range strings.Fields(s) {\n        ret[v] = ret[v] + 1\n    } \n    return ret\n}\n\nfunc main() {\n    wc.Test(WordCount)\n}\n\nclosure\npackage main\n\nimport \"fmt\"\n\n// fibonacci is a function that returns\n// a function that returns an int.\nfunc fibonacci() func() int {\n    a, b := 0, 1\n    return func() int {\n        a, b = b, a + b\n        return b\n    }\n}\n\nfunc main() {\n    f := fibonacci()\n    for i := 0; i < 10; i++ {\n        fmt.Println(f())\n    }\n}\n\nGo\u8a00\u8a9e\u306e\u30e1\u30e2\u5e33\u3067\u3059\u3002\n\u968f\u6642\u66f4\u65b0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u203b\u307b\u3093\u3068\u306b\u521d\u5fc3\u8005\u306e\u66f8\u304d\u8fbc\u307f\u3067\u3059\u3002\n\n\u6b21\u56de\n\n>https://go-tour-jp.appspot.com/methods/1\n\n\n# A Tour of Go\n\n>http://go-tour-jp.appspot.com/\n\n# \u8a08\u7b97\n\n```\n1e9  /* 1000000000 */\n2**n /* \uff12\u306en\b\u4e57 */\n1<<n /* 1(int)\u3092\u5de6\u306b\u30b7\u30d5\u30c8 */\n```\n\n# \u30dd\u30a4\u30f3\u30bf\n\n```\n/* \u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u53c2\u7167 */\ns = := T{}\nt := &s\n\n/* \u76f4\u63a5\u30dd\u30a4\u30f3\u30bf\u53c2\u7167 */\nt := &T{}\n\n/* new\u3067\u3082\u540c\u7b49 */\nvar t *T = new(T)\nt := new(T)\n\n/* int\u306bint\u306e\u30dd\u30a4\u30f3\u30bf\u306f\u4ee3\u5165\u3067\u304d\u306a\u3044 cannot use &a (type *int) as type int in assignment */\nvar i int\na := 1\ni = &a\n```\n\nnew\u304c\u30dd\u30a4\u30f3\u30bf\u30fb\u30fb\u30fbjava\u51fa\u8eab\u306e\u81ea\u5206\u3068\u3057\u3066\u306f\u306a\u304b\u306a\u304b\u5f37\u70c8\u3002C\u3060\u3068\u5f53\u7136\uff1f\n\u3042\u3068\u69cb\u9020\u4f53\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3063\u3066\u8a00\u3063\u305f\u3089\u3042\u304b\u3093\u306e\u304b\u306a\u3002\n\n\n# struct\n\njava\u3067\u3044\u3046\u30af\u30e9\u30b9\uff1f\u307f\u305f\u3044\u306a\u3082\u306e\uff1f\nstruct\u540d{}\u3067\u30a2\u30af\u30bb\u30b9\u3059\u308b\u611f\u3058\u3002\n{}\u5185\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u521d\u671f\u5316\u3067\u304d\u308b\u304c\u3001:\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u6307\u5b9a\u306e\u521d\u671f\u5316\u304c\u53ef\u80fd\u3002\n\n\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u306f\n\n- \u30d5\u30a3\u30fc\u30eb\u30c9\u6570\u5206\u5f15\u6570\u3092\u6307\u5b9a\u3059\u308b\uff08\u5ba3\u8a00\u9806\uff1f\uff09\n- \u6307\u5b9a\u306a\u3057\uff08\u5404\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u521d\u671f\u5024\uff09\n\n\n\n```\npackage main\n\nimport \"fmt\"\n\ntype Vertex struct {\n    X, Y int\n}\n\nvar (\n    p = Vertex{1, 2}  // has type Vertex\n    q = &Vertex{1, 2} // has type *Vertex\n    r = Vertex{Y: 1}  // Y:0 is implicit\n    s = Vertex{}      // X:0 and Y:0\n)\n\nfunc main() {\n    fmt.Println(p, q, r, s)\n}\n```\n\n# \u51fa\u529b\n\n>fmt.Printf(\"%d\", 1)\n\n\u4e00\u756a\u6700\u521d\u304c\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u3001\u5f8c\u306e\u5f15\u6570\u304c\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e%d\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\uff1f\n\n\n>fmt.Println(\"\", 1)\n\n\u5f15\u6570\u9806\u306b\u9023\u7d50\u3055\u308c\u3066\u51fa\u529b\u3055\u308c\u308b\n\n# for\u6587\n\n```\nfor i ; i < 10 ; i++ {}\n```\n```\nfor i < 10 ; i++ {}\n```\n```\nvar pow = []int{1, 2, 4, 8, 16, 32, 64, 128}\nfor i, v := range pow {fmt.Printf(\"2**%d = %d\\n\", i, v)}\n```\n\nGo\u306f\u7e70\u308a\u8fd4\u3057\u306ffor\u6587\u306e\u307f\u3002\n\n# slice\n```\nvar s = []int{1, 2, 3} # len=3 cap=3 [1 2 3]\n```\n```\nvar s = make([]int, 5) # len=5 cap=5 [0 0 0 0 0]\n```\n```\nvar s = make([]int, 0, 5) # len=0 cap=5 []\n```\n\n**\u6ce8\u610f\u70b9**\nslice\u3092\u518dslice\u3057\u305f\u5834\u5408\u306f\u3042\u304f\u307e\u3067\u53c2\u7167\u6e21\u3057\u306a\u306e\u3067\u3001\u518dslice\u3057\u305f\u5185\u5bb9\u3092\u5909\u66f4\u3059\u308b\u3068slice\u5143\u3082\u5909\u66f4\u3055\u308c\u308b\u3002\n\n```slice.go\np := []int{2, 3, 5, 7, 11, 13}\n\n/* p == [2 3 5 7 11 13] */\nfmt.Println(\"p ==\", p)\n\nq := p[1:4]\n\n/* q == [3 5 7] */\nfmt.Println(\"q ==\", q)\n\nq[1] = 3\n\n/* q == [3 3 7] */\nfmt.Println(\"q ==\", q)\n\n/* p == [2 3 3 7 11 13] */\nfmt.Println(\"p ==\", p)\n```\n\nGo\u3067\u300c\u53c2\u7167\u6e21\u3057\u300d\u3068\u3044\u3046\u8868\u73fe\u306f\u6b63\u3057\u3044\u306e\u3060\u308d\u3046\u304b\u30fb\u30fb\u30fb\n\n\n# Map\n\njson\u307f\u305f\u3044\u306b\u66f8\u3051\u308b\n\n```\nmap := map[string]int {\n  \"1\": 1,\n  \"2\": 2,\n}\n```\n\nstruct\u3082\n\n```\nmap := map[string]St {\n  \"st1\": St{ 1, 2, },\n  \"st2\": St{ 1, 3, },\n}\n```\n\nmake\u3067\u3082\n\n```\nmap := make(map[string]int)\n```\n\njson\u5f62\u5f0f\u306e\u5834\u5408\u3063\u3066\u3001\u6700\u5f8c\u3082\u30ab\u30f3\u30de\u5165\u308c\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3093\u3067\u3059\u306d\u30fb\u30fb\u30fb\n\n>map := map[string]int {\n>  \"1\": 1,\n>  \"2\": 2, <- \u3053\u3053\uff01\n>}\n\n>map := map[string]St {\n>  \"st1\": St{ 1, 2, <-\u3053\u3053\u3068\u304b\uff01 },\n>  \"st2\": St{ 1, 3, },<-\u3053\u3053\u3068\u304b\uff01\n>}\n\nJava\u3060\u3068\u7d42\u308f\u308a\u306b\u30ab\u30f3\u30de\u4ed8\u3051\u306a\u3044\u98a8\u7fd2\u3060\u304b\u3089\u7d50\u69cb\u306a\u308c\u308b\u307e\u3067\u6642\u9593\u304c\u304b\u304b\u308a\u305d\u3046\u30fb\u30fb\u30fb\n\n# switch\n\nGo\u306eswitch\u306f\u3001case\u5f8c\u306b\u81ea\u52d5\u3067break\u3059\u308b\u3002\nbreak\u3055\u305b\u306a\u3044\u305f\u3081\u306b\u306f\u300cfallthrough\u300d\u3092\u8a18\u8ff0\u3059\u308c\u3070OK\u3002\n\n\u6761\u4ef6\u306b\u6f14\u7b97\u3092\u7528\u3044\u308b\u3053\u3068\u3082\u53ef\u80fd\u3002\n\n```\nswitch n := 1; n {\ncase 0:\n    fmt.Println(\"0\")\ncase 1:\n    fmt.Println(\"1\")\n    fallthrough               /* break\u3055\u305b\u306a\u3044 */\ncase n + 1 == 3               /* \u6f14\u7b97\u3067\u6761\u4ef6\u5224\u5b9a */\n    fmt.Println(\"2\")\ndefault:\n    fmt.Println(\"default!\")\n}\n```\n\n# Defer\n\nA Tour of Go\u306e\u307e\u3093\u307e\u3002\n\u3053\u308c\u306f\u4f55\u304c\u4fbf\u5229\u306a\u306e\u3060\u308d\u3046\u3001\u4f7f\u3063\u3066\u3044\u304b\u306a\u3044\u3068\u308f\u304b\u3089\u306a\u3044\u3002\u3002\u3002\n\u5f15\u6570\u3060\u3051\u5148\u306b\u8a55\u4fa1\u3055\u308c\u3066\u3001\u5b9f\u884c\u304c\u9045\u5ef6\u3059\u308b\u306e\u304c\u3088\u3044\u306e\u304b\uff1f\n\n```\nfunc main() {\n    defer fmt.Println(\"Go!\")\n    defer fmt.Println(\"of\")\n    defer fmt.Println(\"world\")\n    fmt.Println(\"hello\")\n    /* hello world of Go! */\n}\n```\n\n\u3057\u304b\u3082\u5f8c\u306b\u30b9\u30bf\u30c3\u30af\u3057\u305f\u3082\u306e\u304c\u5148\u306b\u30dd\u30a4\u3055\u308c\u308b\u3002\u6c17\u3092\u3064\u3051\u306a\u3044\u3068\u3002\n\n#Methods\n\nstruct\u3092\u5f15\u6570\uff08\u30e1\u30bd\u30c3\u30c9\u30ec\u30b7\u30fc\u30d0\uff09\u306b\u6307\u5b9a\u3059\u308b\u3068\u3042\u305f\u304b\u3082\u305d\u306estruct\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\njavascript\u306e\u69d8\u306b\u5f8c\u304b\u3089function\u3092\u8ffd\u52a0\u3059\u308b\u30a4\u30e1\u30fc\u30b8\u3067\u3042\u3063\u3066\u307e\u3059\u304b\u306d\u3002\n\n```\ntype Vertex struct {\n\tX, Y float64\n}\n\nfunc (v *Vertex) Abs() float64 {\n\treturn math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\n\nfunc main() {\n\tv := &Vertex{3, 4}\n\tfmt.Println(v.Abs())\n}\n```\n\n# \u305d\u306e\u4ed6\n\n```\nmath.Sqrt(25) /* \u5e73\u65b9\u6839 5*/\n```\n\n2015/12/01\u3000\u306a\u3093\u304b A Tour of Go \u306e\u7ae0\u7acb\u3066\u3068\u304b\u5909\u66f4\u3055\u308c\u3066\u308b\uff01 \n\n# \u6f14\u7fd2\u554f\u984c\n\n**Map**\n\n```\npackage main\n\nimport (\n    \"code.google.com/p/go-tour/wc\"\n    \"strings\"\n)\n\nfunc WordCount(s string) map[string]int {\n\tret := make(map[string]int)\n\tfor _,v := range strings.Fields(s) {\n\t\tret[v] = ret[v] + 1\n\t} \n\treturn ret\n}\n\nfunc main() {\n    wc.Test(WordCount)\n}\n```\n\n**closure**\n\n```\npackage main\n\nimport \"fmt\"\n\n// fibonacci is a function that returns\n// a function that returns an int.\nfunc fibonacci() func() int {\n\ta, b := 0, 1\n\treturn func() int {\n\t\ta, b = b, a + b\n\t\treturn b\n\t}\n}\n\nfunc main() {\n\tf := fibonacci()\n\tfor i := 0; i < 10; i++ {\n\t\tfmt.Println(f())\n\t}\n}\n```\n", "tags": ["Go", "memo"]}