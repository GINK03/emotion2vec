{"context": " More than 1 year has passed since last update.\n\nRust\u3067\u30b9\u30ec\u30c3\u30c9\u3092\u6271\u3046\u524d\u306b\nRust\u3067\u306f\u30cd\u30a4\u30c6\u30a3\u30d6\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3046libnative\u3068\u3001\u30b0\u30ea\u30fc\u30f3\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3046libgreen\u304c\u5b58\u5728\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u30011.0\u306b\u306a\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067libgreen\u306f\u524a\u9664\u3055\u308c\u3066\u3001\u30b9\u30ec\u30c3\u30c9\u306f\u30cd\u30a4\u30c6\u30a3\u30d6\u30b9\u30ec\u30c3\u30c9\u3068\u3057\u3066\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002Erlang\u3067\u306fN:M\u3067\u5b9f\u884c\u3055\u308c\u308b\u8efd\u91cf\u30d7\u30ed\u30bb\u30b9\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u3066\u3001\u30de\u30eb\u30c1\u30b3\u30a2CPU\u3067\u7d30\u304b\u3044\u30bf\u30b9\u30af\u3092\u5927\u91cf\u306b\u51e6\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u304a\u305d\u3089\u304fGolang\u3082\u305d\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u305f\u306f\u305a\u3067\u3059\u3002\nRust\u304c\u306a\u305c\u30b0\u30ea\u30fc\u30f3\u30b9\u30ec\u30c3\u30c9\u3092\u524a\u9664\u3057\u305f\u304b\u3068\u3044\u3046\u3068\u3001Rust\u306f\u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3092\u76ee\u6307\u3057\u3066\u304a\u308a\u3001VM\u306e\u30e1\u30e2\u30ea\u3084CPU\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u3092\u306a\u304f\u3057\u3066\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u306b\u8fd1\u3044\u74b0\u5883\u3067\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u305f\u305f\u3081\u3067\u3059\u3002Rust\u3067\u306f\u30b0\u30ea\u30fc\u30f3\u30b9\u30ec\u30c3\u30c9\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066 \"Hello World\" \u306e\u30d0\u30a4\u30ca\u30ea\u306e\u30b5\u30a4\u30ba\u3092\u534a\u5206\u306b\u3057\u3066\u3001\u4f4e\u30ec\u30d9\u30eb\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d5\u30c3\u30af\u3092\u3057\u3084\u3059\u304f\u3057\u305f\u3068\u3044\u3046\u8a33\u3067\u3059\u3002\n\u524d\u7f6e\u304d\u306f\u3055\u3066\u304a\u3044\u3066\u3001\u3055\u3063\u305d\u304f\u3044\u304f\u3064\u304b\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u898b\u306a\u304c\u3089Rust\u306e\u30b9\u30ec\u30c3\u30c9\u51e6\u7406\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u4e26\u5217\u51e6\u7406\u306e\u5b9f\u88c5\u30d1\u30bf\u30fc\u30f3\n\u30b9\u30ec\u30c3\u30c9\u306e\u4e2d\u304b\u3089\u306f\u9069\u5f53\u306a\u6642\u9593\u30b9\u30ea\u30fc\u30d7\u3057\u3066\u304b\u3089\u5f15\u6570\u30922\u500d\u306b\u3057\u3066\u8fd4\u3059\u95a2\u6570\u3092\u547c\u3076\u3053\u3068\u306b\u3057\u307e\u3059\u3002\nfn do_something(x: i32) -> i32 {\n    let time = rand::random::<u8>() as u32;\n    thread::sleep_ms(time);\n    x * 2\n}\n\n\n\u30b9\u30ec\u30c3\u30c9\u6570\u304c1\u306e\u5834\u5408\n\u4e00\u756a\u30b7\u30f3\u30d7\u30eb\u306a\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002thread::spawn \u306b\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u6e21\u3057\u3066\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3061\u4e0a\u3052\u3066\u3044\u307e\u3059\u3002\nRust\u3067\u306f\u30e1\u30e2\u30ea\u306b\u6240\u6709\u6a29\u304c\u3042\u308a\u3001\u3042\u308b\u5909\u6570\u3092\u5225\u306e\u5909\u6570\u306b\u675f\u7e1b\u3057\u305f\u3068\u304d\u306b\u30e1\u30e2\u30ea\u306e\u6240\u6709\u6a29\u304c\u79fb\u52d5\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30e1\u30e2\u30ea\u9818\u57df\u3092\u81ea\u8eab\u306e\u3082\u306e\u3068\u6240\u6709\u3057\u3066\u3044\u308b\u3082\u306e\u306f\u5e38\u306b\u4e00\u3064\u306b\u306a\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u30b9\u30b3\u30fc\u30d7\u306e\u5916\u306b\u51fa\u308b\u306a\u3069\u3057\u3066\u6240\u6709\u6a29\u304c\u624b\u653e\u3055\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u7834\u68c4\u3055\u308c\u3066\u30e1\u30e2\u30ea\u304c\u89e3\u653e\u3055\u308c\u307e\u3059\u3002\u6240\u6709\u6a29\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u8ffd\u8de1\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u304a\u308a\u3001Rust\u3067\u306f\u3053\u306e\u4ed5\u7d44\u307f\u306b\u3088\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30e1\u30e2\u30ea\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u30af\u30ed\u30fc\u30b8\u30e3 (|| {...}) \u306e\u4e2d\u304b\u3089data\u3092\u53c2\u7167\u3059\u308b\u305f\u3081\u306b move \u3067\u6240\u6709\u6a29\u3092\u79fb\u52d5\u3055\u305b\u3066\u3044\u307e\u3059\u3002\nfn run() {\n    let data = 1;\n    thread::spawn(move || {\n        let result = do_something(data);\n        println!(\"{:?}\", result); // => 2\n    });\n\n    thread::sleep_ms(500);\n}\n\n\u3053\u306e\u4ed5\u7d44\u307f\u306f\u30e1\u30e2\u30ea\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u4f59\u8a08\u306a\u30e1\u30e2\u30ea\u306e\u30b3\u30d4\u30fc\u304c\u767a\u751f\u3057\u306a\u304f\u306a\u308b\u306e\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u9762\u3067\u3082\u6709\u5229\u306b\u306a\u308a\u307e\u3059\u3002\nthread::spawn \u306e\u623b\u308a\u5024\u306e JoinHandle \u3067\u30a2\u30bf\u30c3\u30c1\u3055\u308c\u3066\u3044\u308b\u30b9\u30ec\u30c3\u30c9\u306e\u7d42\u4e86\u3092\u5f85\u3063\u3066\u3001\u30bf\u30b9\u30af\u306e\u7d50\u679c\u3092Result\u578b\u3067\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nfn run() {\n    let data = 1;\n    let child = thread::spawn(move || {\n        do_something(data)\n    });\n\n    println!(\"{:?}\", child.join()); // => Ok(2)\n}\n\n\u307e\u305f\u3001channel\u3092\u4f7f\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u3067\u3082\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002mpsc::channel \u306f (Sender, Receiver) \u306e\u30bf\u30d7\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002\u65b0\u3057\u304f\u4f5c\u3063\u305f\u30b9\u30ec\u30c3\u30c9\u306e\u4e2d\u304b\u3089send\u3057\u3066\u3001\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067recv\u3057\u3066\u3044\u307e\u3059\u3002\nfn run() {\n    let data = 1;\n\n    let (tx, rx) = mpsc::channel();\n    thread::spawn(move || {\n        tx.send(data * 2);\n    });\n\n    println!(\"{:?}\", rx.recv()); // => Ok(2)\n}\n\nSender\u304b\u3089\u30c7\u30fc\u30bf\u3092\u9001\u308b\u3068\u304d\u306b\u6240\u6709\u6a29\u3082\u4e00\u7dd2\u306b\u9001\u4fe1\u3055\u308c\u307e\u3059\u3002\n\n\u30b9\u30ec\u30c3\u30c9\u6570\u304cN\u306e\u5834\u5408\n\u6b21\u306b\u3001\u8981\u7d20\u306e\u6570\u3060\u3051\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3061\u4e0a\u3052\u3066\u4f55\u304b\u3092\u4e26\u5217\u3067\u51e6\u7406\u3059\u308b\u3068\u3057\u307e\u3059\u3002\nfn run() {\n    let data = vec![1, 2, 3, 4, 5];\n    for &x in data.iter() {\n        thread::spawn(move || {\n            let result = do_something(x);\n            println!(\"{:?}\", result); // 2, 4, 6, 8, 10 \u304c\u9806\u4e0d\u540c\u306b\u8868\u793a\u3055\u308c\u308b\n        });\n    }\n\n    thread::sleep_ms(500);\n}\n\nmpsc\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 (std::sync::mpsc - Rust) \u306b \"Multi-producer, single-consumer FIFO queue communication primitives\" \u3068\u3042\u308b\u3068\u304a\u308a\u3001Sender\u306f\u30af\u30ed\u30fc\u30f3\u53ef\u80fd\u3067 1:N \u3067\u901a\u4fe1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001clone\u3057\u305fSender\u306e\u6240\u6709\u6a29\u3092\u30af\u30ed\u30fc\u30b8\u30e3\u306b\u6e21\u3057\u3066\u3001\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nfn run() {\n    let data = vec![1, 2, 3, 4, 5];\n\n    let (tx, rx) = mpsc::channel();\n\n    for &x in data.iter() {\n        let tx = tx.clone();\n        thread::spawn(move || {\n            tx.send(x * 2);\n        });\n    }\n\n    for _ in data.iter() {\n        println!(\"{:?}\", rx.recv()); // Ok(2), Ok(4), Ok(6), Ok(8), Ok(10) \u304c\u9806\u4e0d\u540c\u306b\u8868\u793a\u3055\u308c\u308b\n    }\n}\n\n\n\u3088\u308a\u5b9f\u8df5\u7684\u306a\u4e26\u5217\u51e6\u7406\n\u30d6\u30ed\u30c3\u30af\u3057\u3066\u6642\u9593\u306e\u639b\u304b\u308b\u4f55\u304b\u306e\u51e6\u7406\u3092\u3059\u308b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\nstruct Client;\n\nimpl Client {\n    fn fetch(&self, x: i32) -> i32 {\n        ...\n    }\n}\n\n\u305d\u306estruct\u306e\u95a2\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u4e2d\u304b\u3089\u3001struct\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u53c2\u7167\u3059\u308b\u3068\u3057\u307e\u3059\u3002\nstruct Runner {\n    client: Client\n}\n\nimpl Runner {\n    fn run(&self, params<Vec<i32>>) {\n        // ???\n    }\n}\n\n\nClient\u304cimmutable\u306a\u5834\u5408\n\u5148\u307b\u3069\u306e\u3088\u3046\u306b move || {...} \u306e\u4e2d\u3067self\u3092\u53c2\u7167\u3057\u3088\u3046\u3068\u3059\u308b\u3068 \"captured variable self does not outlive the enclosing closure\" \u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002self\u306e\u6240\u6709\u6a29\u306f\u305d\u306e\u307e\u307e\u3067\u306fmove\u3067\u304d\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\u7570\u306a\u308b\u30b9\u30ec\u30c3\u30c9\u9593\u3067immutable\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5171\u6709\u3059\u308b\u306b\u306fArc  (Atomically Reference Count) \u3068\u3044\u3046\u578b\u3092\u4f7f\u3044\u307e\u3059\u3002\"\u30e1\u30e2\u30ea\u9818\u57df\u3092\u81ea\u8eab\u306e\u3082\u306e\u6240\u6709\u3057\u3066\u3044\u308b\u3082\u306e\u306f\u5e38\u306b\u4e00\u3064\u306b\u306a\u308b\u3088\u3046\u306b\" \u3068\u5192\u982d\u3067\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30ab\u30a6\u30f3\u30c8\u306b\u3088\u3063\u3066\u8907\u6570\u306e\u6240\u6709\u6a29\u3092\u4e0e\u3048\u308b\u3088\u3046\u306b\u3059\u308bRc\u578b\u3068\u3044\u3046\u306e\u3082\u3042\u308a\u307e\u3059\u3002Arc\u578b\u306f\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5171\u6709\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305fRc\u578b\u3067\u3059\u3002\nself.client.clone() \u3092\u547c\u3093\u3067\u3001clone\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30af\u30ed\u30fc\u30b8\u30e3\u306b\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\nstruct Runner {\n    client: Arc<Client>\n}\n\nimpl Runner {\n    fn run(&self, data: Vec<i32>) {\n        let (tx, rx) = mpsc::channel();\n        for &x in data.iter() {\n            let client = self.client.clone();\n            let tx = tx.clone();\n            thread::spawn(move || {\n                let result = client.fetch(x);\n                tx.send(result);\n            });\n        }\n\n        for i in 0..data.len() {\n            println!(\"{:?}\", rx.recv());\n        }\n    }\n\nclone\u306e\u4e2d\u3067\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30ab\u30a6\u30f3\u30c8\u306e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3092\u3057\u3066\u3044\u3066\u3001\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u306e\u30b3\u30d4\u30fc\u306f\u884c\u308f\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u30b9\u30b3\u30fc\u30d7\u306e\u5916\u306b\u51fa\u305f\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306edrop\u304c\u547c\u3070\u308c\u3066\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30ab\u30a6\u30f3\u30c8\u304c\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u308b\u3068\u3044\u3046\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nClient\u304cmutable\u306a\u5834\u5408\n\u5b9f\u969b\u306b\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306bmutable\u3067\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u3067\u306a\u3044\u51e6\u7406\u304c\u884c\u308f\u308c\u308b\u3088\u3046\u306a\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u306f\u3069\u306e\u3088\u3046\u306b\u53c2\u7167\u3059\u308c\u3070\u826f\u3044\u3067\u3057\u3087\u3046\u304b\u3002\nimpl Client {\n    fn destory(&mut self, param: i32) -> Result<(), Error> {\n        ...\n    }\n}\n\n\u524d\u8ff0\u306e\u3068\u304a\u308aArc\u306f\u7570\u306a\u308b\u30b9\u30ec\u30c3\u30c9\u9593\u3067 immutable \u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5171\u6709\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3059\u3002\u3053\u306e\u307e\u307e\u3067\u306f\u30c7\u30fc\u30bf\u7af6\u5408\u3092\u5f15\u304d\u8d77\u3053\u3059\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059 (\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u691c\u51fa\u3055\u308c\u3066\u30a8\u30e9\u30fc\u306b\u306a\u308b)\u3002\u305d\u3053\u3067\u3001\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u30a2\u30c8\u30df\u30c3\u30af\u6027\u3092\u78ba\u4fdd\u3059\u308b\u306e\u306bMutex (std::sync::Mutex - Rust) \u3067\u6392\u4ed6\u5236\u5fa1\u3092\u3057\u307e\u3059\u3002\nstruct Client {\n    client: Arc<Mutex<Client>>\n}\n\nimpl Runner {\n    fn run(&self, data: Vec<i32>) {\n        let (tx, rx) = mpsc::channel();\n        for &x in data.iter() {\n            let tx = tx.clone();\n            let client = self.client.clone();\n            thread::spawn(move || {\n                let result = client.lock().unwrap().delete(x);\n                tx.send(result);\n            });\n        }\n\n        for i in 0..data.len() {\n            println!(\"{:?}\", rx.recv());\n        }\n    }\n}\n\nclient.lock() \u306fRAII guard\u3092\u8fd4\u3057\u3066\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u307e\u3067\u30b9\u30ec\u30c3\u30c9\u3092\u30d6\u30ed\u30c3\u30af\u3057\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u3057\u3066destroy\u306f\u5b89\u5168\u306b\u30b7\u30ea\u30a2\u30eb\u306b\u51e6\u7406\u3055\u308c\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\u3053\u306e\u8a18\u4e8b\u3067\u306fRust\u3067\u3069\u306e\u3088\u3046\u306b\u4e26\u5217\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308b\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u305f\u3002\nRust\u306e\u30b9\u30ec\u30c3\u30c9\u30e2\u30c7\u30eb\u304b\u3089\u5206\u304b\u308b\u3088\u3046\u306b\u3001Rust\u306f\u7279\u306b\u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u5411\u3044\u3066\u3044\u307e\u3059\u3002\u6240\u6709\u6a29\u3068\u501f\u7528\u306e\u4ed5\u7d44\u307f\u306f\u4e00\u898b\u3059\u308b\u3068\u8907\u96d1\u3067\u5197\u9577\u306e\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u3053\u308c\u306b\u3088\u308a\u30e1\u30e2\u30ea\u3092\u52b9\u7387\u7684\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u3064\u3064\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30c7\u30fc\u30bf\u7af6\u5408\u6027\u3092\u691c\u51fa\u3057\u3001\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u3067\u3082\u5b89\u5168\u306b\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4f7f\u3044\u3053\u306a\u305b\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u983c\u3082\u3057\u3044\u30d1\u30fc\u30c8\u30ca\u30fc\u306b\u306a\u3063\u3066\u304f\u308c\u308b\u3053\u3068\u3067\u3057\u3087\u3046\u3002\n# Rust\u3067\u30b9\u30ec\u30c3\u30c9\u3092\u6271\u3046\u524d\u306b\n\nRust\u3067\u306f\u30cd\u30a4\u30c6\u30a3\u30d6\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3046libnative\u3068\u3001\u30b0\u30ea\u30fc\u30f3\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3046libgreen\u304c\u5b58\u5728\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u30011.0\u306b\u306a\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067libgreen\u306f\u524a\u9664\u3055\u308c\u3066\u3001\u30b9\u30ec\u30c3\u30c9\u306f\u30cd\u30a4\u30c6\u30a3\u30d6\u30b9\u30ec\u30c3\u30c9\u3068\u3057\u3066\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002Erlang\u3067\u306fN:M\u3067\u5b9f\u884c\u3055\u308c\u308b\u8efd\u91cf\u30d7\u30ed\u30bb\u30b9\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u3066\u3001\u30de\u30eb\u30c1\u30b3\u30a2CPU\u3067\u7d30\u304b\u3044\u30bf\u30b9\u30af\u3092\u5927\u91cf\u306b\u51e6\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u304a\u305d\u3089\u304fGolang\u3082\u305d\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u305f\u306f\u305a\u3067\u3059\u3002\n\nRust\u304c\u306a\u305c\u30b0\u30ea\u30fc\u30f3\u30b9\u30ec\u30c3\u30c9\u3092\u524a\u9664\u3057\u305f\u304b\u3068\u3044\u3046\u3068\u3001Rust\u306f\u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3092\u76ee\u6307\u3057\u3066\u304a\u308a\u3001VM\u306e\u30e1\u30e2\u30ea\u3084CPU\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u3092\u306a\u304f\u3057\u3066\u3001\u30cd\u30a4\u30c6\u30a3\u30d6\u306b\u8fd1\u3044\u74b0\u5883\u3067\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u305f\u305f\u3081\u3067\u3059\u3002Rust\u3067\u306f\u30b0\u30ea\u30fc\u30f3\u30b9\u30ec\u30c3\u30c9\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066 \"Hello World\" \u306e\u30d0\u30a4\u30ca\u30ea\u306e\u30b5\u30a4\u30ba\u3092\u534a\u5206\u306b\u3057\u3066\u3001\u4f4e\u30ec\u30d9\u30eb\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d5\u30c3\u30af\u3092\u3057\u3084\u3059\u304f\u3057\u305f\u3068\u3044\u3046\u8a33\u3067\u3059\u3002\n\n\u524d\u7f6e\u304d\u306f\u3055\u3066\u304a\u3044\u3066\u3001\u3055\u3063\u305d\u304f\u3044\u304f\u3064\u304b\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u898b\u306a\u304c\u3089Rust\u306e\u30b9\u30ec\u30c3\u30c9\u51e6\u7406\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n# \u4e26\u5217\u51e6\u7406\u306e\u5b9f\u88c5\u30d1\u30bf\u30fc\u30f3\n\n\u30b9\u30ec\u30c3\u30c9\u306e\u4e2d\u304b\u3089\u306f\u9069\u5f53\u306a\u6642\u9593\u30b9\u30ea\u30fc\u30d7\u3057\u3066\u304b\u3089\u5f15\u6570\u30922\u500d\u306b\u3057\u3066\u8fd4\u3059\u95a2\u6570\u3092\u547c\u3076\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n```rust\nfn do_something(x: i32) -> i32 {\n    let time = rand::random::<u8>() as u32;\n    thread::sleep_ms(time);\n    x * 2\n}\n```\n\n## \u30b9\u30ec\u30c3\u30c9\u6570\u304c1\u306e\u5834\u5408\n\n\u4e00\u756a\u30b7\u30f3\u30d7\u30eb\u306a\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002`thread::spawn` \u306b\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u6e21\u3057\u3066\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3061\u4e0a\u3052\u3066\u3044\u307e\u3059\u3002\n\nRust\u3067\u306f\u30e1\u30e2\u30ea\u306b\u6240\u6709\u6a29\u304c\u3042\u308a\u3001\u3042\u308b\u5909\u6570\u3092\u5225\u306e\u5909\u6570\u306b\u675f\u7e1b\u3057\u305f\u3068\u304d\u306b\u30e1\u30e2\u30ea\u306e\u6240\u6709\u6a29\u304c\u79fb\u52d5\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30e1\u30e2\u30ea\u9818\u57df\u3092\u81ea\u8eab\u306e\u3082\u306e\u3068\u6240\u6709\u3057\u3066\u3044\u308b\u3082\u306e\u306f\u5e38\u306b\u4e00\u3064\u306b\u306a\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u30b9\u30b3\u30fc\u30d7\u306e\u5916\u306b\u51fa\u308b\u306a\u3069\u3057\u3066\u6240\u6709\u6a29\u304c\u624b\u653e\u3055\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u7834\u68c4\u3055\u308c\u3066\u30e1\u30e2\u30ea\u304c\u89e3\u653e\u3055\u308c\u307e\u3059\u3002\u6240\u6709\u6a29\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u8ffd\u8de1\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u304a\u308a\u3001Rust\u3067\u306f\u3053\u306e\u4ed5\u7d44\u307f\u306b\u3088\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30e1\u30e2\u30ea\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u30af\u30ed\u30fc\u30b8\u30e3 (`|| {...}`) \u306e\u4e2d\u304b\u3089data\u3092\u53c2\u7167\u3059\u308b\u305f\u3081\u306b `move` \u3067\u6240\u6709\u6a29\u3092\u79fb\u52d5\u3055\u305b\u3066\u3044\u307e\u3059\u3002\n\n```rust\nfn run() {\n    let data = 1;\n    thread::spawn(move || {\n        let result = do_something(data);\n        println!(\"{:?}\", result); // => 2\n    });\n\n    thread::sleep_ms(500);\n}\n```\n\n\u3053\u306e\u4ed5\u7d44\u307f\u306f\u30e1\u30e2\u30ea\u5b89\u5168\u6027\u3092\u4fdd\u8a3c\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u4f59\u8a08\u306a\u30e1\u30e2\u30ea\u306e\u30b3\u30d4\u30fc\u304c\u767a\u751f\u3057\u306a\u304f\u306a\u308b\u306e\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u9762\u3067\u3082\u6709\u5229\u306b\u306a\u308a\u307e\u3059\u3002\n\n`thread::spawn` \u306e\u623b\u308a\u5024\u306e `JoinHandle` \u3067\u30a2\u30bf\u30c3\u30c1\u3055\u308c\u3066\u3044\u308b\u30b9\u30ec\u30c3\u30c9\u306e\u7d42\u4e86\u3092\u5f85\u3063\u3066\u3001\u30bf\u30b9\u30af\u306e\u7d50\u679c\u3092Result\u578b\u3067\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```rust\nfn run() {\n    let data = 1;\n    let child = thread::spawn(move || {\n        do_something(data)\n    });\n\n    println!(\"{:?}\", child.join()); // => Ok(2)\n}\n```\n\n\u307e\u305f\u3001channel\u3092\u4f7f\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\u3067\u3082\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002`mpsc::channel` \u306f `(Sender, Receiver)` \u306e\u30bf\u30d7\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002\u65b0\u3057\u304f\u4f5c\u3063\u305f\u30b9\u30ec\u30c3\u30c9\u306e\u4e2d\u304b\u3089send\u3057\u3066\u3001\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067recv\u3057\u3066\u3044\u307e\u3059\u3002\n\n```rust\nfn run() {\n    let data = 1;\n\n    let (tx, rx) = mpsc::channel();\n    thread::spawn(move || {\n        tx.send(data * 2);\n    });\n\n    println!(\"{:?}\", rx.recv()); // => Ok(2)\n}\n```\n\nSender\u304b\u3089\u30c7\u30fc\u30bf\u3092\u9001\u308b\u3068\u304d\u306b\u6240\u6709\u6a29\u3082\u4e00\u7dd2\u306b\u9001\u4fe1\u3055\u308c\u307e\u3059\u3002\n\n## \u30b9\u30ec\u30c3\u30c9\u6570\u304cN\u306e\u5834\u5408\n\n\u6b21\u306b\u3001\u8981\u7d20\u306e\u6570\u3060\u3051\u30b9\u30ec\u30c3\u30c9\u3092\u7acb\u3061\u4e0a\u3052\u3066\u4f55\u304b\u3092\u4e26\u5217\u3067\u51e6\u7406\u3059\u308b\u3068\u3057\u307e\u3059\u3002\n\n```rust\nfn run() {\n    let data = vec![1, 2, 3, 4, 5];\n    for &x in data.iter() {\n        thread::spawn(move || {\n            let result = do_something(x);\n            println!(\"{:?}\", result); // 2, 4, 6, 8, 10 \u304c\u9806\u4e0d\u540c\u306b\u8868\u793a\u3055\u308c\u308b\n        });\n    }\n\n    thread::sleep_ms(500);\n}\n```\n\nmpsc\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 ([std::sync::mpsc - Rust](https://doc.rust-lang.org/std/sync/mpsc/)) \u306b \"Multi-producer, single-consumer FIFO queue communication primitives\" \u3068\u3042\u308b\u3068\u304a\u308a\u3001Sender\u306f\u30af\u30ed\u30fc\u30f3\u53ef\u80fd\u3067 `1:N` \u3067\u901a\u4fe1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001clone\u3057\u305fSender\u306e\u6240\u6709\u6a29\u3092\u30af\u30ed\u30fc\u30b8\u30e3\u306b\u6e21\u3057\u3066\u3001\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```rust\nfn run() {\n    let data = vec![1, 2, 3, 4, 5];\n\n    let (tx, rx) = mpsc::channel();\n\n    for &x in data.iter() {\n        let tx = tx.clone();\n        thread::spawn(move || {\n            tx.send(x * 2);\n        });\n    }\n\n    for _ in data.iter() {\n        println!(\"{:?}\", rx.recv()); // Ok(2), Ok(4), Ok(6), Ok(8), Ok(10) \u304c\u9806\u4e0d\u540c\u306b\u8868\u793a\u3055\u308c\u308b\n    }\n}\n```\n\n# \u3088\u308a\u5b9f\u8df5\u7684\u306a\u4e26\u5217\u51e6\u7406\n\n\u30d6\u30ed\u30c3\u30af\u3057\u3066\u6642\u9593\u306e\u639b\u304b\u308b\u4f55\u304b\u306e\u51e6\u7406\u3092\u3059\u308b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\n\n```rust\nstruct Client;\n\nimpl Client {\n    fn fetch(&self, x: i32) -> i32 {\n        ...\n    }\n}\n```\n\n\u305d\u306estruct\u306e\u95a2\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u4e2d\u304b\u3089\u3001struct\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u53c2\u7167\u3059\u308b\u3068\u3057\u307e\u3059\u3002\n\n```rust\nstruct Runner {\n    client: Client\n}\n\nimpl Runner {\n    fn run(&self, params<Vec<i32>>) {\n        // ???\n    }\n}\n```\n\n## Client\u304cimmutable\u306a\u5834\u5408\n\n\u5148\u307b\u3069\u306e\u3088\u3046\u306b `move || {...}` \u306e\u4e2d\u3067self\u3092\u53c2\u7167\u3057\u3088\u3046\u3068\u3059\u308b\u3068 \"captured variable `self` does not outlive the enclosing closure\" \u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002self\u306e\u6240\u6709\u6a29\u306f\u305d\u306e\u307e\u307e\u3067\u306fmove\u3067\u304d\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\n\u7570\u306a\u308b\u30b9\u30ec\u30c3\u30c9\u9593\u3067immutable\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5171\u6709\u3059\u308b\u306b\u306fArc  (Atomically Reference Count) \u3068\u3044\u3046\u578b\u3092\u4f7f\u3044\u307e\u3059\u3002\"\u30e1\u30e2\u30ea\u9818\u57df\u3092\u81ea\u8eab\u306e\u3082\u306e\u6240\u6709\u3057\u3066\u3044\u308b\u3082\u306e\u306f\u5e38\u306b\u4e00\u3064\u306b\u306a\u308b\u3088\u3046\u306b\" \u3068\u5192\u982d\u3067\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30ab\u30a6\u30f3\u30c8\u306b\u3088\u3063\u3066\u8907\u6570\u306e\u6240\u6709\u6a29\u3092\u4e0e\u3048\u308b\u3088\u3046\u306b\u3059\u308bRc\u578b\u3068\u3044\u3046\u306e\u3082\u3042\u308a\u307e\u3059\u3002Arc\u578b\u306f\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5171\u6709\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305fRc\u578b\u3067\u3059\u3002\n`self.client.clone()` \u3092\u547c\u3093\u3067\u3001clone\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30af\u30ed\u30fc\u30b8\u30e3\u306b\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\n```rust\nstruct Runner {\n    client: Arc<Client>\n}\n\nimpl Runner {\n    fn run(&self, data: Vec<i32>) {\n        let (tx, rx) = mpsc::channel();\n        for &x in data.iter() {\n            let client = self.client.clone();\n            let tx = tx.clone();\n            thread::spawn(move || {\n                let result = client.fetch(x);\n                tx.send(result);\n            });\n        }\n\n        for i in 0..data.len() {\n            println!(\"{:?}\", rx.recv());\n        }\n    }\n```\n\nclone\u306e\u4e2d\u3067\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30ab\u30a6\u30f3\u30c8\u306e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3092\u3057\u3066\u3044\u3066\u3001\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u306e\u30b3\u30d4\u30fc\u306f\u884c\u308f\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u30b9\u30b3\u30fc\u30d7\u306e\u5916\u306b\u51fa\u305f\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306edrop\u304c\u547c\u3070\u308c\u3066\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30ab\u30a6\u30f3\u30c8\u304c\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u308b\u3068\u3044\u3046\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n## Client\u304cmutable\u306a\u5834\u5408\n\n\u5b9f\u969b\u306b\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306bmutable\u3067\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u3067\u306a\u3044\u51e6\u7406\u304c\u884c\u308f\u308c\u308b\u3088\u3046\u306a\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u306f\u3069\u306e\u3088\u3046\u306b\u53c2\u7167\u3059\u308c\u3070\u826f\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n```rust\nimpl Client {\n    fn destory(&mut self, param: i32) -> Result<(), Error> {\n        ...\n    }\n}\n```\n\n\u524d\u8ff0\u306e\u3068\u304a\u308aArc\u306f\u7570\u306a\u308b\u30b9\u30ec\u30c3\u30c9\u9593\u3067 *immutable* \u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5171\u6709\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3059\u3002\u3053\u306e\u307e\u307e\u3067\u306f\u30c7\u30fc\u30bf\u7af6\u5408\u3092\u5f15\u304d\u8d77\u3053\u3059\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059 (\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u691c\u51fa\u3055\u308c\u3066\u30a8\u30e9\u30fc\u306b\u306a\u308b)\u3002\u305d\u3053\u3067\u3001\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u30a2\u30c8\u30df\u30c3\u30af\u6027\u3092\u78ba\u4fdd\u3059\u308b\u306e\u306bMutex ([std::sync::Mutex - Rust](https://doc.rust-lang.org/std/sync/struct.Mutex.html)) \u3067\u6392\u4ed6\u5236\u5fa1\u3092\u3057\u307e\u3059\u3002\n\n```rust\nstruct Client {\n    client: Arc<Mutex<Client>>\n}\n\nimpl Runner {\n    fn run(&self, data: Vec<i32>) {\n        let (tx, rx) = mpsc::channel();\n        for &x in data.iter() {\n            let tx = tx.clone();\n            let client = self.client.clone();\n            thread::spawn(move || {\n                let result = client.lock().unwrap().delete(x);\n                tx.send(result);\n            });\n        }\n\n        for i in 0..data.len() {\n            println!(\"{:?}\", rx.recv());\n        }\n    }\n}\n```\n\n`client.lock()` \u306fRAII guard\u3092\u8fd4\u3057\u3066\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u307e\u3067\u30b9\u30ec\u30c3\u30c9\u3092\u30d6\u30ed\u30c3\u30af\u3057\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u3057\u3066destroy\u306f\u5b89\u5168\u306b\u30b7\u30ea\u30a2\u30eb\u306b\u51e6\u7406\u3055\u308c\u307e\u3059\u3002\n\n# \u307e\u3068\u3081\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306fRust\u3067\u3069\u306e\u3088\u3046\u306b\u4e26\u5217\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308b\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u305f\u3002\nRust\u306e\u30b9\u30ec\u30c3\u30c9\u30e2\u30c7\u30eb\u304b\u3089\u5206\u304b\u308b\u3088\u3046\u306b\u3001Rust\u306f\u7279\u306b\u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u5411\u3044\u3066\u3044\u307e\u3059\u3002\u6240\u6709\u6a29\u3068\u501f\u7528\u306e\u4ed5\u7d44\u307f\u306f\u4e00\u898b\u3059\u308b\u3068\u8907\u96d1\u3067\u5197\u9577\u306e\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u3053\u308c\u306b\u3088\u308a\u30e1\u30e2\u30ea\u3092\u52b9\u7387\u7684\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u3064\u3064\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30c7\u30fc\u30bf\u7af6\u5408\u6027\u3092\u691c\u51fa\u3057\u3001\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u3067\u3082\u5b89\u5168\u306b\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4f7f\u3044\u3053\u306a\u305b\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u983c\u3082\u3057\u3044\u30d1\u30fc\u30c8\u30ca\u30fc\u306b\u306a\u3063\u3066\u304f\u308c\u308b\u3053\u3068\u3067\u3057\u3087\u3046\u3002\n", "tags": ["rust"]}