{"context": " More than 1 year has passed since last update.\n\n\u521d\u3081\u306b\n\u4ee5\u524d\u3001\u3053\u306e\u3088\u3046\u306a\u8a18\u4e8b(python\u3067\u8d64\u3044\u7269\u4f53\u3092\u8a8d\u8b58\u3057\u3088\u3046)\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u5358\u7d14\u306b\u3001\u753b\u50cf\u3092HSV(Hue, Saturation, Value)\u306b\u5909\u63db\u3057\u3001\u8d64\u6210\u5206\u306e\u5f37\u3044\u9818\u57df\u3092\u898b\u3064\u3051\u51fa\u3059\u3068\u3044\u3046\u624b\u6cd5\u3067\u3059\u3002\n\u4eca\u56de\u306f\u3001\u305d\u306e\u5fdc\u7528\u3068\u3057\u3066\u300c\u7dd1\u8272\u300d\u306e\u7269\u4f53\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u307f\u307e\u3059\u3002\u305d\u3057\u3066\u3055\u3089\u306b\u3001\u9023\u7d9a\u3057\u305f\u30d3\u30c7\u30aa\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u7269\u4f53\u3092\u300c\u8ffd\u8de1\u3059\u308b\u300d\u3068\u3044\u3046\u4e8b\u306b\u3064\u3044\u3066\u8a18\u8f09\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u9023\u7d9a\u3057\u305f\u30d3\u30c7\u30aa\u30b9\u30c8\u30ea\u30fc\u30e0\u3082\u7d30\u304b\u304f\u898b\u308c\u3070\u9023\u7d9a\u3057\u305f\u9759\u6b62\u753b\u3067\u3059\u3002\u3053\u306e\u9759\u6b62\u753b\u304b\u3089\u7dd1\u8272\u306e\u7269\u4f53\u3092\u8a8d\u8b58\u3057\u7d9a\u3051\u308c\u3070\u3001\u81ea\u305a\u3068\u8ffd\u8de1\u3082\u51fa\u6765\u308b\u306e\u3067\u306f\uff1f\u3068\u8003\u3048\u308b\u306e\u3082\u3001\u5927\u304d\u304f\u9593\u9055\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u305f\u3060\u3001\u305d\u3053\u306f\u4eba\u9593\u306e\u76ee\u3068\u9055\u3046\u30ab\u30e1\u30e9\u3002\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u7269\u4f53\u306e\u89d2\u5ea6\u304c\u5c11\u3057\u30ba\u30ec\u308c\u3070\u5149\u306e\u52a0\u6e1b\u3067\u767d\u5149\u308a\u3057\u3066\u5224\u5b9a\u304b\u3089\u9038\u308c\u3066\u3057\u307e\u3063\u305f\u308a(\u5224\u5b9a\u5931\u6557\u3057\u3066\u898b\u5931\u3046)\u3001\u5224\u5b9a\u7b87\u6240\u304c\u30a2\u30c1\u30b3\u30c1\u98db\u3073\u56de\u3063\u305f\u308a\u3001\u74b0\u5883\u5149\u304c\u5c11\u3057\u5909\u308f\u308b\u3060\u3051\u3067\u898b\u5931\u3063\u305f\u308a\u3059\u308b\u3082\u306e\u306a\u306e\u3067\u3059\u3002\n\u305f\u307e\u305f\u307e\u60aa\u3044\u6761\u4ef6\u304c\u91cd\u306a\u308a\u898b\u5931\u3063\u3066\u3057\u307e\u3046\u3068\u3069\u3046\u306a\u308b\u3067\u3057\u3087\u3046\u304b\u3002\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306f\u305d\u306e\u7269\u4f53\u3092\u300c\u7121\u3044\u300d\u3082\u306e\u3068\u5224\u5b9a\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3067\u3082\u3001\u305d\u306e\u6b21\u306e\u77ac\u9593\u306b\u306f\u6761\u4ef6\u304c\u597d\u8ee2\u3057\u307e\u305f\u73fe\u308c\u308b\u304b\u3082\u77e5\u308c\u307e\u305b\u3093\u3002\u73fe\u308c\u3066\u306f\u6d88\u3048\u3001\u307e\u305f\u73fe\u308c\u305f\u308a\u3001\u5168\u304f\u5b89\u5b9a\u611f\u304c\u3042\u308a\u307e\u305b\u3093\u3001\u5e38\u306b100%\u306e\u691c\u51fa\u7cbe\u5ea6\u306f\u671f\u5f85\u3067\u304d\u306a\u3044\u306e\u3067\u3059\u3002\n\u5f93\u3063\u3066\u3001\u30d3\u30c7\u30aa\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3042\u3063\u3066\u3082\u9759\u6b62\u753b\u3092\u90fd\u5ea6\u89e3\u6790\u3059\u308c\u3070\u826f\u3044\u3068\u3044\u3046\u8003\u3048\u306f\u6368\u3066\u3001\u30d3\u30c7\u30aa\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u300c\u9023\u7d9a\u3057\u305f\u9759\u6b62\u753b\u300d\u3068\u8003\u3048\u3092\u6539\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u300c\u524d\u56de\u30b3\u30b3\u306b\u3042\u3063\u305f\u304b\u3089\u4eca\u56de\u3082\u3053\u306e\u8fba\u308a\u306b\u3042\u308b\u306f\u305a\u3060\u300d\u3068\u3044\u3046\u306e\u3092\u3001\u78ba\u7387\u3068\u7d71\u8a08\u306e\u8003\u3048\u3092\u99c6\u4f7f\u3057\u3066\u4e88\u6e2c\u3057\u3066\u63a2\u7d22\u3092\u639b\u3051\u308b\u3079\u304d\u306a\u306e\u3067\u3059\u3002\n\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\n\u3053\u3046\u3044\u3046\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u306e\u306b\u826f\u3044\u624b\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u300c\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u300d\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u306e\u5b66\u554f\u7684\u306a\u5b9a\u7fa9\u3084\u5185\u5bb9\u306b\u3064\u3044\u3066\u306f\u3001\u81ea\u5206\u3082\u7684\u78ba\u306b\u8aac\u660e\u3067\u304d\u308b\u307b\u3069\u5224\u3063\u3066\u306a\u3044\u306e\u3067\u6570\u3042\u308b\u305d\u306e\u4ed6\u306e\u89e3\u8aac\u30da\u30fc\u30b8\u306b\u304a\u4efb\u305b\u3057\u305f\u3044\u3067\u3059\uff57\n\u305f\u3060\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u306b\u3088\u308b\u753b\u50cf\u89e3\u6790\u306e\u6982\u5ff5\u7684\u306b\u306f\u3001\n1. \u30d1\u30fc\u30c6\u30a3\u30af\u30eb(\u70b9)\u3092\u753b\u50cf\u4e0a\u306b\u3070\u3089\u6492\u304f\n2. \u305d\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u6bce\u306b\u5468\u8fba\u306e\u5c24\u5ea6(\u3086\u3046\u3069\uff1a\u91cd\u307f\u3002\u4f8b\u3048\u3070\u8d64\u3063\u307d\u3055\u3068\u304b\u3001\u9752\u3063\u307d\u3055\u3068\u304b)\u3092\u7b97\u51fa\u3059\u308b\n3. \u5c24\u5ea6\u306e\u9ad8\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u751f\u304b\u3057\u3001\u4f4e\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u9664\u53bb\u3059\u308b\n4. \u5c24\u5ea6\u306e\u9ad8\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u304c\u6700\u3082\u96c6\u4e2d\u3057\u3066\u3044\u308b\u70b9\u3092\u898b\u3064\u3051\u308b (\u3053\u308c\u304c\u7269\u4f53\u306e\u4f4d\u7f6e\u3068\u306a\u308b)\n5. \u3059\u3079\u3066\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u5c11\u3057\u3065\u3064\u52d5\u304b\u3057\u3066\u6b21\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u5099\u3048\u308b (\u21922.\u3078)\n\u3053\u308c\u3089\u30011\uff5e5\u306e\u624b\u7d9a\u304d\u3092\u9023\u7d9a\u3055\u305b\u308c\u3070\u3001\u81ea\u305a\u3068\u4e0a\u8a18\u306b\u8a18\u8f09\u3057\u305f\u3053\u3068\u304c\u5b9f\u73fe\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u306d\u3002\n\u300c\u524d\u56de\u3053\u3053\u3089\u8fba\u306b\u3042\u3063\u305f\u300d\u3068\u3044\u3046\u72b6\u614b\u306f\u3070\u3089\u6492\u304b\u308c\u305f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u304c\u899a\u3048\u3066\u304a\u308a\u3001\u305d\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u6bce\u306b\u300c\u6b21\u306f\u3053\u306e\u8fba\u304b\u3082\uff1f\u300d\u3068\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u52d5\u304f\u3068\u3044\u3046\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\u4e88\u6e2c\u3092\u30cf\u30ba\u3057\u7d9a\u3051\u308b\u51fa\u6765\u306e\u60aa\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u6dd8\u6c70\u3055\u308c\u307e\u3059\u3002\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u5fc5\u6b7b\u306b\u6b21\u306e\u30d5\u30ec\u30fc\u30e0\u3092\u4e88\u6e2c\u3057\u3001\u751f\u304d\u5ef6\u3073\u308b\u306e\u3067\u3059\uff57 \u610f\u5916\u3068\u6b8b\u9177\u306a\u611f\u3058\u3082\u3057\u3066\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3082\u5927\u5909\u3060\u306a\u3001\u3068\u611b\u7740\u3059\u3089\u6e67\u3044\u3066\u304d\u305d\u3046\u3067\u3059(\u30a6\u30bd)\u3002\n\u3053\u308c\u3089\u4e00\u9023\u306e\u51e6\u7406\u3092C/C++\u3067\u8a18\u8f09\u3059\u308b\u3068\u3051\u3063\u3053\u3046\u5927\u5909\u306a\u3093\u3067\u3059\u304c\u3001\u4e3b\u306bnumpy\u306e\u5a01\u529b\u306b\u3088\u308a\u3001\u5c11\u306a\u3044\u30b3\u30fc\u30c9\u91cf\u3067\u6e08\u3080\u306e\u304cpython + numpy\u306e\u51c4\u3044\u30c8\u30b3\u30ed\u3067\u3059\u3002\n\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u306e\u5b9f\u88c5 (\u57fa\u672c)\n\u4e00\u5fdc\u3067\u3059\u304c\u3001\u6700\u521d\u306bimport\u306b\u3064\u3044\u3066\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306bimport\u3057\u3066\u304a\u304f\u306e\u3092\u524d\u63d0\u3068\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nimport cv2\nimport numpy as np\n\n\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u5b9a\u7fa9\n\u307e\u305a\u306f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u69cb\u9020\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002x, y\u306f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u4f4d\u7f6e\u3001weight\u306f\u5c24\u5ea6(\u91cd\u307f)\u3068\u3057\u307e\u3059\u3002\nparticle = [x, y, weight]\n\n\n\u5c24\u5ea6\u7b97\u51fa\u95a2\u6570\n\u3067\u3001\u6b21\u306b\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u5c24\u5ea6(\u91cd\u307f)\u3092\u7b97\u51fa\u3059\u308b\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u3053\u306e\u95a2\u6570\u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u5ea7\u6a19\u3092\u4e2d\u5fc3\u306b30x30\u30d4\u30af\u30bb\u30eb\u306e\u7bc4\u56f2\u3092\u8d70\u67fb\u3057\u3001900\u30d4\u30af\u30bb\u30eb\u306e\u3046\u3061\u3001\u6761\u4ef6\u306b\u5408\u81f4\u3059\u308b\u30d4\u30af\u30bb\u30eb\u6570\u306e\u5272\u5408\u3092\u8fd4\u3057\u307e\u3059\u3002\u4f8b\u3048\u307030x30\u30d4\u30af\u30bb\u30eb\u306e\u7bc4\u56f2\u304c\u5168\u3066NG\u306a\u30890.0, \u5168\u3066OK\u306a\u30891.0, \u534a\u5206\u304f\u3089\u3044\u304cOK\u306a\u30890.5\u7a0b\u5ea6\u306e\u5024\u304c\u8fd4\u308a\u307e\u3059\u3002\n\u5224\u5b9a\u95a2\u6570func()\u306f\u5916\u51fa\u3057\u3057\u3066\u3044\u3066\u3001\u547c\u3073\u51fa\u3057\u5074\u304c\u5224\u5b9a\u95a2\u6570\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\ndef likelihood(x, y, func, image, w=30, h=30): \n  x1 = max(0, x - w / 2)\n  y1 = max(0, y - h / 2)\n  x2 = min(image.shape[1], x + w / 2)\n  y2 = min(image.shape[0], y + h / 2)\n  region = image[y1:y2, x1:x2]\n  count = region[func(region)].size\n  return (float(count) / image.size) if count > 0 else 0.0001\n\n\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u521d\u671f\u5316\u95a2\u6570\n\u6b21\u306f\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u521d\u671f\u5316\u95a2\u6570\u3067\u3059\u3002\nfunc\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5148\u307b\u3069\u306e\u540c\u69d8\u306b\u3001\u5916\u51fa\u3057\u3055\u308c\u308b\u5224\u5b9a\u95a2\u6570\u3092\u6307\u5b9a\u3059\u308b\u306e\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u95a2\u6570\u3067\u306f\u3001\u3053\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u305f\u304f\u3055\u3093(500\u500b)\u4f5c\u308a\u307e\u3059\u3002\n\u521d\u671f\u5024\u3068\u3057\u3066\u306f\u3001func()\u95a2\u6570\u3067\u5224\u5b9a\u3055\u308c\u308b\u9818\u57df\u306e\u3046\u3061\u3001\u6700\u3082\u5927\u304d\u306a\u9818\u57df\u4ed8\u8fd1\u306b\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u4f4d\u7f6e\u4ed8\u3051\u307e\u3059\u3002\nnp.ndarray()\u306e\u547c\u3073\u51fa\u3057\u306b\u6307\u5b9a\u3057\u3066\u3044\u308b(500, 3)\u306e500\u306f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u500b\u6570\u30013\u306f\u4e0a\u8a18\u306ex, y, weight\u306e\u8981\u7d20\u6570\u3067\u3059\u3002\ndef init_particles(func, image): \n  mask = image.copy()\n  mask[func(mask) == False] = 0\n  contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n  if len(contours) <= 0:\n    return None\n  max_contour = max(contours, key=cv2.contourArea)\n  max_rect = np.array(cv2.boundingRect(max_contour))\n  max_rect = max_rect[:2] + max_rect[2:] / 2\n  weight = likelihood(max_rect[0], max_rect[1], func, image)\n  particles = np.ndarray((500, 3), dtype=np.float32)\n  particles[:] = [max_rect[0], max_rect[1], weight]\n  return particles\n\n\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u306e\u5b9f\u88c5 (\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0)\n\u3053\u3053\u304b\u3089\u304c\u3001\u672c\u5f53\u306e\u610f\u5473\u3067\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u306e\u52d5\u304d\u306e\u90e8\u5206\u3067\u3059\u3002\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u306f\u4ee5\u4e0b4\u3064\u306e\u624b\u7d9a\u304d\u3092\u7d4c\u307e\u3059\u3002\n1. \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u30ea\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\n2. \u4e88\u6e2c\n3. \u5c24\u5ea6(\u91cd\u307f)\u5224\u5b9a\n4. \u6e2c\u5b9a\n\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u30ea\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\n\u30ea\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u306f\u3001\u4e71\u6570\u3092\u4f7f\u3044\u3064\u3064\u3001\u6210\u7e3e\u306e\u60aa\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u6dd8\u6c70\u3057\u3001\u6210\u7e3e\u306e\u826f\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3067\u7f6e\u304d\u63db\u3048\u3066\u3044\u304d\u307e\u3059\u3002\nweights\u914d\u5217\u3092\u4f5c\u308b\u306e\u306b\u4f7f\u3063\u3066\u3044\u308bcumsum()\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u7d2f\u7a4d\u548c\u3092\u7b97\u51fa\u3057\u3066\u304f\u308c\u308b\u3082\u306e\u3067\u3059\u3002\n\u307e\u305f\u3001(weights > weight).argmax()\u3068\u3059\u308b\u3053\u3068\u3067\u3001weights\u914d\u5217\u3092\u30b9\u30ad\u30e3\u30f3\u3057\u3066\u3001\u521d\u3081\u3066weight\u3088\u308a\u3082\u5927\u304d\u306a\u5024\u304c\u51fa\u3066\u304d\u305f\u6642\u306e\u914d\u5217\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\ndef resample(particles): \n  tmp_particles = particles.copy()\n  weights = particles[:, 2].cumsum()\n  last_weight = weights[weights.shape[0] - 1]\n  for i in xrange(particles.shape[0]):\n    weight = np.random.rand() * last_weight\n    particles[i] = tmp_particles[(weights > weight).argmax()]\n    particles[i][2] = 1.0\n\n\n\u4e88\u6e2c\n\u6b21\u30d5\u30ec\u30fc\u30e0\u306b\u5411\u3051\u3066\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u5b9f\u969b\u306b\u52d5\u304b\u3057\u307e\u3059\u3002\nvariance\u3067\u6307\u5b9a\u3057\u305f\u4fc2\u6570\u306bnumpy.random.randn()\u306e\u7d50\u679c\u3092\u639b\u3051\u305f\u3082\u306e\u3092\u8db3\u3057\u3053\u307f\u307e\u3059\u3002\n\u3053\u306evariance\u4fc2\u6570\u306f\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u52d5\u304d\u306e\u6fc0\u3057\u3055\u306b\u5408\u308f\u305b\u3066\u8a2d\u5b9a\u3059\u3079\u304d\u6570\u5024\u3067\u3059\u3002\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u52d5\u304b\u3059\u3053\u3068\u3092\u300c\u4e88\u6e2c\u300d\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u305f\u307e\u305f\u307e\u826f\u3044\u65b9\u5411\u306b\u52d5\u3044\u305f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u751f\u304d\u6b8b\u308a\u3001\u60aa\u3044\u65b9\u5411\u306b\u5411\u304b\u3063\u305f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u6dd8\u6c70(\u4e0a\u66f8\u304d)\u3055\u308c\u308b\u904b\u547d\u3067\u3059\u3002\ndef predict(particles, variance=13.0): \n  particles[:, 0] += np.random.randn((particles.shape[0])) * variance\n  particles[:, 1] += np.random.randn((particles.shape[0])) * variance\n\n\n\u5c24\u5ea6(\u91cd\u307f)\u5224\u5b9a\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3054\u3068\u306e\u5c24\u5ea6(\u91cd\u307f)\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\u5148\u307b\u3069\u306e\u4e88\u6e2c\u306e\u7d50\u679c\u304c\u5224\u5b9a\u3055\u308c\u308b\u30cd\u30bf\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u5c24\u5ea6(\u91cd\u307f)\u306f\u3001\u5148\u306b\u4f5c\u6210\u3057\u305flikelihood()\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u7b97\u51fa\u3057\u307e\u3059\u3002\ndef weight(particles, func, image): \n  for i in xrange(particles.shape[0]): \n    particles[i][2] = likelihood(particles[i][0], particles[i][1], func, image)\n  sum_weight = particles[:, 2].sum()\n  particles[:, 2] *= (particles.shape[0] / sum_weight)\n\n\n\u6e2c\u5b9a\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u6e2c\u5b9a\u3057\u3066\u3001\u6210\u7e3e\u306e\u826f\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u304c\u96c6\u4e2d\u3057\u3066\u3044\u308b\u4ed8\u8fd1\u306e\u4f4d\u7f6e\u3092\u5272\u308a\u51fa\u3057\u307e\u3059\u3002\ndef measure(particles): \n  x = (particles[:, 0] * particles[:, 2]).sum()\n  y = (particles[:, 1] * particles[:, 2]).sum()\n  weight = particles[:, 2].sum()\n  return x / weight, y / weight\n\n\n\u4ed5\u4e0a\u3052\n\u3053\u308c\u307e\u3067\u5b9f\u88c5\u3057\u305f\u51e6\u7406\u3092\u3001\u6700\u5f8c\u306b\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\u3063\u307d\u304f\u7e8f\u3081\u307e\u3059\u3002\n\u5f15\u6570\u3067\u6307\u5b9a\u3055\u308c\u308bmax_frame\u306e\u9593\u3001\u5168\u304f\u7dd1\u6210\u5206\u304c\u898b\u5f53\u305f\u3089\u306a\u3051\u308c\u3070\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u518d\u521d\u671f\u5316\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\nparticle_filter_cur_frame = 0\n\ndef particle_filter(particles, func, image, max_frame=10):\n  global particle_filter_cur_frame\n  if image[func(image)].size <= 0:\n    if particle_filter_cur_frame >= max_frame:\n      return None, -1, -1\n    particle_filter_cur_frame = min(particle_filter_cur_frame + 1, max_frame)\n  else:\n    particle_filter_cur_frame = 0\n    if particles is None:\n      particles = init_particles(func, image)\n\n  if particles is None:\n    return None, -1, -1\n\n  resample(particles)\n  predict(particles)\n  weight(particles, func, image)\n  x, y = measure(particles)\n  return particles, x, y\n\n\n\u3067\u306f\u3001\u4f7f\u3063\u3066\u307f\u3088\u3046\uff01\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u3053\u308c\u307e\u3067\u306b\u5b9f\u88c5\u3057\u305f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u3092\u5229\u7528\u3057\u3066\u3001\u7dd1\u8272\u306e\u7269\u4f53\u3092\u8ffd\u8de1\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u3053\u3053\u3067\u306f\u3001cv2.VideoCapture()\u3067\u7372\u5f97\u3057\u305f\u30d5\u30ec\u30fc\u30e0\u30c7\u30fc\u30bf(BGR\u30a4\u30e1\u30fc\u30b8)\u3092HSV\u306b\u5909\u63db\u3057\u3001S(Saturation), V(Value)\u306b\u305d\u308c\u305e\u308c\u3001OTSU\u306e\u30b9\u30ec\u30b7\u30e7\u30eb\u30c9\u3092\u639b\u3051\u3001\u8272\u306e\u6fc3\u3055\u3001\u660e\u308b\u3055\u5171\u306b\u5341\u5206\u306a\u30d4\u30af\u30bb\u30eb\u306e\u307f\u3092\u751f\u304b\u3059\u3068\u3044\u3046\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059(H\u6210\u5206\u3092S, V\u306e\u5408\u683c\u30d4\u30af\u30bb\u30eb\u3067\u30de\u30b9\u30af\u3057\u30660\u3067\u5857\u308a\u3064\u3076\u3059)\u3002\n\u7dd1\u8272(50\uff5e85)\u306e\u7bc4\u56f2\u3092\u63a2\u3057\u305f\u3044\u306e\u3067\u30010\u30af\u30ea\u30a2\u306f\u59a5\u5f53\u3067\u3059\u3002(\u7ffb\u3063\u3066\u3001\u8d64\u3092\u691c\u51fa\u3059\u308b\u6642\u306a\u3069\u306f0\u4ee5\u5916\u306e\u5024\u3067\u5857\u308a\u3064\u3076\u3055\u306a\u3044\u3068\u304a\u304b\u3057\u306a\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002)\nparticle_filter()\u95a2\u6570\u306b\u5b9f\u969b\u306b\u6e21\u3057\u3066\u3044\u308b\u306e\u306f\u4e0a\u8a18\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u304c\u65bd\u3055\u308c\u305fH\u6210\u5206\u3067\u3059\u3002\u3042\u3068\u306fparticle_filter()\u95a2\u6570\u304c\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u7ba1\u7406\u3057\u3066\u3001\u7dd1\u8272\u90e8\u5206\u3092\u3046\u307e\u304f\u8ffd\u8de1\u3057\u3066\u304f\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nimport cv2\nimport numpy as np\n\nif __name__ == \"__main__\": \n  def is_green(region): \n    return (region >= 50) | (region < 85)\n\n  cap = cv2.VideoCapture(0)\n  particles = None\n\n  while cv2.waitKey(30) < 0:\n    _, frame = cap.read()\n    frame_hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV_FULL)\n    frame_h = frame_hsv[:, :, 0]\n    _, frame_s = cv2.threshold(frame_hsv[:, :, 1], 0, 255, cv2.THRESH_BINARY|cv2.THRESH_OTSU)\n    _, frame_v = cv2.threshold(frame_hsv[:, :, 2], 0, 255, cv2.THRESH_BINARY|cv2.THRESH_OTSU)\n    frame_h[(frame_s == 0) | (frame_v == 0)] = 0\n\n    particles, x, y = particle_filter(particles, is_green, frame_h)\n\n    if particles is not None:\n      valid_particles = particles[(particles[:, 0] >= 0) & (particles[:, 0] < frame.shape[1]) &\n                                  (particles[:, 1] >= 0) & (particles[:, 1] < frame.shape[0])]\n      for i in xrange(valid_particles.shape[0]): \n        frame[valid_particles[i][1], valid_particles[i][0]] = [255, 0, 0]\n      p = np.array([x, y], dtype=np.int32)\n      cv2.rectangle(frame, tuple(p - 15), tuple(p + 15), (0, 0, 255), thickness=2)\n\n    cv2.imshow('green', frame)\n\n  cap.release()\n  cv2.destroyAllWindows()\n\n\u3053\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u306f\u3001\u30ce\u30a4\u30ba\u3084\u52d5\u304d\u306b\u975e\u5e38\u306b\u5f37\u304f\u3001\u76f8\u5f53\u3057\u3064\u3053\u304f\u5bfe\u8c61\u7269\u3092\u8ffd\u3044\u304b\u3051\u3066\u304f\u308c\u307e\u3059\u3002\n\u307e\u305f\u3001\u7d50\u679c\u5f97\u3089\u308c\u308b\u691c\u51fa\u4f4d\u7f6e\u3082\u5927\u5909\u306b\u5b89\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u4e00\u65e6\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u3057\u307e\u3048\u3070\u3001\u3042\u3068\u306flikelihood()\u95a2\u6570\u3092\u3069\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u304b\u304c\u30ad\u30e2\u306b\u306a\u3063\u3066\u304f\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u751f\u6b7b\u306f\u3001\u3053\u306elikelihood()\u306b\u639b\u304b\u3063\u3066\u3044\u307e\u3059\u3002\n\u4e00\u5ea6\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u305f\u3061\u306e\u751f\u304d\u6b8b\u308a\u3092\u304b\u3051\u305f\u5fc5\u6b7b\u306a\u52d5\u304d\u3092\u89b3\u5bdf\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u3060\u3093\u3060\u3093\u3001likelihood()\u306b\u51b7\u9177\u306b\u8a55\u4fa1\u3055\u308c\u308b1\u30641\u3064\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u5fc5\u6b7b\u3055\u304c\u9762\u767d\u304f\u306a\u3063\u3066\u304d\u307e\u3059\u3002\u7684\u78ba\u306b\u8ffd\u5f93\u3059\u308b\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u3067\u3059\u304c\u3001\u305d\u306e\u5f71\u3067\u306f\u6570\u77e5\u308c\u306a\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u304c\u751f\u307e\u308c\u3066\u306f\u6b7b\u3093\u3067\u3086\u304f\u3001\u305d\u3093\u306a\u904e\u9177\u306a\u60b2\u54c0\u304c\u611f\u3058\u3089\u308c\u307e\u3059\u3002\n##\u521d\u3081\u306b\n\u4ee5\u524d\u3001[\u3053\u306e\u3088\u3046\u306a\u8a18\u4e8b(python\u3067\u8d64\u3044\u7269\u4f53\u3092\u8a8d\u8b58\u3057\u3088\u3046)](http://qiita.com/odaman68000/items/ae28cf7bdaf4fa13a65b)\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u5358\u7d14\u306b\u3001\u753b\u50cf\u3092HSV(Hue, Saturation, Value)\u306b\u5909\u63db\u3057\u3001\u8d64\u6210\u5206\u306e\u5f37\u3044\u9818\u57df\u3092\u898b\u3064\u3051\u51fa\u3059\u3068\u3044\u3046\u624b\u6cd5\u3067\u3059\u3002\n\n\u4eca\u56de\u306f\u3001\u305d\u306e\u5fdc\u7528\u3068\u3057\u3066\u300c\u7dd1\u8272\u300d\u306e\u7269\u4f53\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u307f\u307e\u3059\u3002\u305d\u3057\u3066\u3055\u3089\u306b\u3001\u9023\u7d9a\u3057\u305f\u30d3\u30c7\u30aa\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u7269\u4f53\u3092\u300c\u8ffd\u8de1\u3059\u308b\u300d\u3068\u3044\u3046\u4e8b\u306b\u3064\u3044\u3066\u8a18\u8f09\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u9023\u7d9a\u3057\u305f\u30d3\u30c7\u30aa\u30b9\u30c8\u30ea\u30fc\u30e0\u3082\u7d30\u304b\u304f\u898b\u308c\u3070\u9023\u7d9a\u3057\u305f\u9759\u6b62\u753b\u3067\u3059\u3002\u3053\u306e\u9759\u6b62\u753b\u304b\u3089\u7dd1\u8272\u306e\u7269\u4f53\u3092\u8a8d\u8b58\u3057\u7d9a\u3051\u308c\u3070\u3001\u81ea\u305a\u3068\u8ffd\u8de1\u3082\u51fa\u6765\u308b\u306e\u3067\u306f\uff1f\u3068\u8003\u3048\u308b\u306e\u3082\u3001\u5927\u304d\u304f\u9593\u9055\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u305f\u3060\u3001\u305d\u3053\u306f\u4eba\u9593\u306e\u76ee\u3068\u9055\u3046\u30ab\u30e1\u30e9\u3002\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u7269\u4f53\u306e\u89d2\u5ea6\u304c\u5c11\u3057\u30ba\u30ec\u308c\u3070\u5149\u306e\u52a0\u6e1b\u3067\u767d\u5149\u308a\u3057\u3066\u5224\u5b9a\u304b\u3089\u9038\u308c\u3066\u3057\u307e\u3063\u305f\u308a(\u5224\u5b9a\u5931\u6557\u3057\u3066\u898b\u5931\u3046)\u3001\u5224\u5b9a\u7b87\u6240\u304c\u30a2\u30c1\u30b3\u30c1\u98db\u3073\u56de\u3063\u305f\u308a\u3001\u74b0\u5883\u5149\u304c\u5c11\u3057\u5909\u308f\u308b\u3060\u3051\u3067\u898b\u5931\u3063\u305f\u308a\u3059\u308b\u3082\u306e\u306a\u306e\u3067\u3059\u3002\n\u305f\u307e\u305f\u307e\u60aa\u3044\u6761\u4ef6\u304c\u91cd\u306a\u308a\u898b\u5931\u3063\u3066\u3057\u307e\u3046\u3068\u3069\u3046\u306a\u308b\u3067\u3057\u3087\u3046\u304b\u3002\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306f\u305d\u306e\u7269\u4f53\u3092\u300c\u7121\u3044\u300d\u3082\u306e\u3068\u5224\u5b9a\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3067\u3082\u3001\u305d\u306e\u6b21\u306e\u77ac\u9593\u306b\u306f\u6761\u4ef6\u304c\u597d\u8ee2\u3057\u307e\u305f\u73fe\u308c\u308b\u304b\u3082\u77e5\u308c\u307e\u305b\u3093\u3002\u73fe\u308c\u3066\u306f\u6d88\u3048\u3001\u307e\u305f\u73fe\u308c\u305f\u308a\u3001\u5168\u304f\u5b89\u5b9a\u611f\u304c\u3042\u308a\u307e\u305b\u3093\u3001\u5e38\u306b100%\u306e\u691c\u51fa\u7cbe\u5ea6\u306f\u671f\u5f85\u3067\u304d\u306a\u3044\u306e\u3067\u3059\u3002\n\n\u5f93\u3063\u3066\u3001\u30d3\u30c7\u30aa\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u3042\u3063\u3066\u3082\u9759\u6b62\u753b\u3092\u90fd\u5ea6\u89e3\u6790\u3059\u308c\u3070\u826f\u3044\u3068\u3044\u3046\u8003\u3048\u306f\u6368\u3066\u3001\u30d3\u30c7\u30aa\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u300c\u9023\u7d9a\u3057\u305f\u9759\u6b62\u753b\u300d\u3068\u8003\u3048\u3092\u6539\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u300c\u524d\u56de\u30b3\u30b3\u306b\u3042\u3063\u305f\u304b\u3089\u4eca\u56de\u3082\u3053\u306e\u8fba\u308a\u306b\u3042\u308b\u306f\u305a\u3060\u300d\u3068\u3044\u3046\u306e\u3092\u3001\u78ba\u7387\u3068\u7d71\u8a08\u306e\u8003\u3048\u3092\u99c6\u4f7f\u3057\u3066\u4e88\u6e2c\u3057\u3066\u63a2\u7d22\u3092\u639b\u3051\u308b\u3079\u304d\u306a\u306e\u3067\u3059\u3002\n\n##\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\n\u3053\u3046\u3044\u3046\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u306e\u306b\u826f\u3044\u624b\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u300c\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u300d\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u306e\u5b66\u554f\u7684\u306a\u5b9a\u7fa9\u3084\u5185\u5bb9\u306b\u3064\u3044\u3066\u306f\u3001\u81ea\u5206\u3082\u7684\u78ba\u306b\u8aac\u660e\u3067\u304d\u308b\u307b\u3069\u5224\u3063\u3066\u306a\u3044\u306e\u3067\u6570\u3042\u308b\u305d\u306e\u4ed6\u306e\u89e3\u8aac\u30da\u30fc\u30b8\u306b\u304a\u4efb\u305b\u3057\u305f\u3044\u3067\u3059\uff57\n\u305f\u3060\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u306b\u3088\u308b\u753b\u50cf\u89e3\u6790\u306e\u6982\u5ff5\u7684\u306b\u306f\u3001\n1. \u30d1\u30fc\u30c6\u30a3\u30af\u30eb(\u70b9)\u3092\u753b\u50cf\u4e0a\u306b\u3070\u3089\u6492\u304f\n2. \u305d\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u6bce\u306b\u5468\u8fba\u306e\u5c24\u5ea6(\u3086\u3046\u3069\uff1a\u91cd\u307f\u3002\u4f8b\u3048\u3070\u8d64\u3063\u307d\u3055\u3068\u304b\u3001\u9752\u3063\u307d\u3055\u3068\u304b)\u3092\u7b97\u51fa\u3059\u308b\n3. \u5c24\u5ea6\u306e\u9ad8\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u751f\u304b\u3057\u3001\u4f4e\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u9664\u53bb\u3059\u308b\n4. \u5c24\u5ea6\u306e\u9ad8\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u304c\u6700\u3082\u96c6\u4e2d\u3057\u3066\u3044\u308b\u70b9\u3092\u898b\u3064\u3051\u308b (\u3053\u308c\u304c\u7269\u4f53\u306e\u4f4d\u7f6e\u3068\u306a\u308b)\n5. \u3059\u3079\u3066\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u5c11\u3057\u3065\u3064\u52d5\u304b\u3057\u3066\u6b21\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u5099\u3048\u308b (\u21922.\u3078)\n\n\u3053\u308c\u3089\u30011\uff5e5\u306e\u624b\u7d9a\u304d\u3092\u9023\u7d9a\u3055\u305b\u308c\u3070\u3001\u81ea\u305a\u3068\u4e0a\u8a18\u306b\u8a18\u8f09\u3057\u305f\u3053\u3068\u304c\u5b9f\u73fe\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u306d\u3002\n\u300c\u524d\u56de\u3053\u3053\u3089\u8fba\u306b\u3042\u3063\u305f\u300d\u3068\u3044\u3046\u72b6\u614b\u306f\u3070\u3089\u6492\u304b\u308c\u305f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u304c\u899a\u3048\u3066\u304a\u308a\u3001\u305d\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u6bce\u306b\u300c\u6b21\u306f\u3053\u306e\u8fba\u304b\u3082\uff1f\u300d\u3068\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u52d5\u304f\u3068\u3044\u3046\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\u4e88\u6e2c\u3092\u30cf\u30ba\u3057\u7d9a\u3051\u308b\u51fa\u6765\u306e\u60aa\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u6dd8\u6c70\u3055\u308c\u307e\u3059\u3002\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u5fc5\u6b7b\u306b\u6b21\u306e\u30d5\u30ec\u30fc\u30e0\u3092\u4e88\u6e2c\u3057\u3001\u751f\u304d\u5ef6\u3073\u308b\u306e\u3067\u3059\uff57 \u610f\u5916\u3068\u6b8b\u9177\u306a\u611f\u3058\u3082\u3057\u3066\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3082\u5927\u5909\u3060\u306a\u3001\u3068\u611b\u7740\u3059\u3089\u6e67\u3044\u3066\u304d\u305d\u3046\u3067\u3059(\u30a6\u30bd)\u3002\n\n\u3053\u308c\u3089\u4e00\u9023\u306e\u51e6\u7406\u3092C/C++\u3067\u8a18\u8f09\u3059\u308b\u3068\u3051\u3063\u3053\u3046\u5927\u5909\u306a\u3093\u3067\u3059\u304c\u3001\u4e3b\u306bnumpy\u306e\u5a01\u529b\u306b\u3088\u308a\u3001\u5c11\u306a\u3044\u30b3\u30fc\u30c9\u91cf\u3067\u6e08\u3080\u306e\u304cpython + numpy\u306e\u51c4\u3044\u30c8\u30b3\u30ed\u3067\u3059\u3002\n\n##\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u306e\u5b9f\u88c5 (\u57fa\u672c)\n\n\u4e00\u5fdc\u3067\u3059\u304c\u3001\u6700\u521d\u306bimport\u306b\u3064\u3044\u3066\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306bimport\u3057\u3066\u304a\u304f\u306e\u3092\u524d\u63d0\u3068\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```py\nimport cv2\nimport numpy as np\n```\n\n###\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u5b9a\u7fa9\n\n\u307e\u305a\u306f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u69cb\u9020\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002`x`, `y`\u306f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u4f4d\u7f6e\u3001`weight`\u306f\u5c24\u5ea6(\u91cd\u307f)\u3068\u3057\u307e\u3059\u3002\n\n```py\nparticle = [x, y, weight]\n```\n\n###\u5c24\u5ea6\u7b97\u51fa\u95a2\u6570\n\n\u3067\u3001\u6b21\u306b\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u5c24\u5ea6(\u91cd\u307f)\u3092\u7b97\u51fa\u3059\u308b\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u3053\u306e\u95a2\u6570\u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u5ea7\u6a19\u3092\u4e2d\u5fc3\u306b30x30\u30d4\u30af\u30bb\u30eb\u306e\u7bc4\u56f2\u3092\u8d70\u67fb\u3057\u3001900\u30d4\u30af\u30bb\u30eb\u306e\u3046\u3061\u3001\u6761\u4ef6\u306b\u5408\u81f4\u3059\u308b\u30d4\u30af\u30bb\u30eb\u6570\u306e\u5272\u5408\u3092\u8fd4\u3057\u307e\u3059\u3002\u4f8b\u3048\u307030x30\u30d4\u30af\u30bb\u30eb\u306e\u7bc4\u56f2\u304c\u5168\u3066NG\u306a\u30890.0, \u5168\u3066OK\u306a\u30891.0, \u534a\u5206\u304f\u3089\u3044\u304cOK\u306a\u30890.5\u7a0b\u5ea6\u306e\u5024\u304c\u8fd4\u308a\u307e\u3059\u3002\n\u5224\u5b9a\u95a2\u6570`func()`\u306f\u5916\u51fa\u3057\u3057\u3066\u3044\u3066\u3001\u547c\u3073\u51fa\u3057\u5074\u304c\u5224\u5b9a\u95a2\u6570\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```py\ndef likelihood(x, y, func, image, w=30, h=30): \n  x1 = max(0, x - w / 2)\n  y1 = max(0, y - h / 2)\n  x2 = min(image.shape[1], x + w / 2)\n  y2 = min(image.shape[0], y + h / 2)\n  region = image[y1:y2, x1:x2]\n  count = region[func(region)].size\n  return (float(count) / image.size) if count > 0 else 0.0001\n```\n\n###\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u521d\u671f\u5316\u95a2\u6570\n\n\u6b21\u306f\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u521d\u671f\u5316\u95a2\u6570\u3067\u3059\u3002\n`func`\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5148\u307b\u3069\u306e\u540c\u69d8\u306b\u3001\u5916\u51fa\u3057\u3055\u308c\u308b\u5224\u5b9a\u95a2\u6570\u3092\u6307\u5b9a\u3059\u308b\u306e\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u95a2\u6570\u3067\u306f\u3001\u3053\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u305f\u304f\u3055\u3093(500\u500b)\u4f5c\u308a\u307e\u3059\u3002\n\u521d\u671f\u5024\u3068\u3057\u3066\u306f\u3001`func()`\u95a2\u6570\u3067\u5224\u5b9a\u3055\u308c\u308b\u9818\u57df\u306e\u3046\u3061\u3001\u6700\u3082\u5927\u304d\u306a\u9818\u57df\u4ed8\u8fd1\u306b\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u4f4d\u7f6e\u4ed8\u3051\u307e\u3059\u3002\n`np.ndarray()`\u306e\u547c\u3073\u51fa\u3057\u306b\u6307\u5b9a\u3057\u3066\u3044\u308b`(500, 3)`\u306e`500`\u306f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u500b\u6570\u3001`3`\u306f\u4e0a\u8a18\u306e`x`, `y`, `weight`\u306e\u8981\u7d20\u6570\u3067\u3059\u3002\n\n```py\ndef init_particles(func, image): \n  mask = image.copy()\n  mask[func(mask) == False] = 0\n  contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n  if len(contours) <= 0:\n    return None\n  max_contour = max(contours, key=cv2.contourArea)\n  max_rect = np.array(cv2.boundingRect(max_contour))\n  max_rect = max_rect[:2] + max_rect[2:] / 2\n  weight = likelihood(max_rect[0], max_rect[1], func, image)\n  particles = np.ndarray((500, 3), dtype=np.float32)\n  particles[:] = [max_rect[0], max_rect[1], weight]\n  return particles\n```  \n\n##\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u306e\u5b9f\u88c5 (\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0)\n\u3053\u3053\u304b\u3089\u304c\u3001\u672c\u5f53\u306e\u610f\u5473\u3067\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u306e\u52d5\u304d\u306e\u90e8\u5206\u3067\u3059\u3002\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u306f\u4ee5\u4e0b4\u3064\u306e\u624b\u7d9a\u304d\u3092\u7d4c\u307e\u3059\u3002\n1. \u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u30ea\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\n2. \u4e88\u6e2c\n3. \u5c24\u5ea6(\u91cd\u307f)\u5224\u5b9a\n4. \u6e2c\u5b9a\n\n###\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u30ea\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\n\n\u30ea\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u306f\u3001\u4e71\u6570\u3092\u4f7f\u3044\u3064\u3064\u3001\u6210\u7e3e\u306e\u60aa\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u6dd8\u6c70\u3057\u3001\u6210\u7e3e\u306e\u826f\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3067\u7f6e\u304d\u63db\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n`weights`\u914d\u5217\u3092\u4f5c\u308b\u306e\u306b\u4f7f\u3063\u3066\u3044\u308b`cumsum()`\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u7d2f\u7a4d\u548c\u3092\u7b97\u51fa\u3057\u3066\u304f\u308c\u308b\u3082\u306e\u3067\u3059\u3002\n\u307e\u305f\u3001`(weights > weight).argmax()`\u3068\u3059\u308b\u3053\u3068\u3067\u3001`weights`\u914d\u5217\u3092\u30b9\u30ad\u30e3\u30f3\u3057\u3066\u3001\u521d\u3081\u3066`weight`\u3088\u308a\u3082\u5927\u304d\u306a\u5024\u304c\u51fa\u3066\u304d\u305f\u6642\u306e\u914d\u5217\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n```py\ndef resample(particles): \n  tmp_particles = particles.copy()\n  weights = particles[:, 2].cumsum()\n  last_weight = weights[weights.shape[0] - 1]\n  for i in xrange(particles.shape[0]):\n    weight = np.random.rand() * last_weight\n    particles[i] = tmp_particles[(weights > weight).argmax()]\n    particles[i][2] = 1.0\n```\n\n###\u4e88\u6e2c\n\n\u6b21\u30d5\u30ec\u30fc\u30e0\u306b\u5411\u3051\u3066\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u5b9f\u969b\u306b\u52d5\u304b\u3057\u307e\u3059\u3002\n`variance`\u3067\u6307\u5b9a\u3057\u305f\u4fc2\u6570\u306b`numpy.random.randn()`\u306e\u7d50\u679c\u3092\u639b\u3051\u305f\u3082\u306e\u3092\u8db3\u3057\u3053\u307f\u307e\u3059\u3002\n\u3053\u306e`variance`\u4fc2\u6570\u306f\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u52d5\u304d\u306e\u6fc0\u3057\u3055\u306b\u5408\u308f\u305b\u3066\u8a2d\u5b9a\u3059\u3079\u304d\u6570\u5024\u3067\u3059\u3002\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u52d5\u304b\u3059\u3053\u3068\u3092\u300c\u4e88\u6e2c\u300d\u3068\u3057\u3066\u3044\u307e\u3059\u3002\u305f\u307e\u305f\u307e\u826f\u3044\u65b9\u5411\u306b\u52d5\u3044\u305f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u751f\u304d\u6b8b\u308a\u3001\u60aa\u3044\u65b9\u5411\u306b\u5411\u304b\u3063\u305f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u6dd8\u6c70(\u4e0a\u66f8\u304d)\u3055\u308c\u308b\u904b\u547d\u3067\u3059\u3002\n\n```py\ndef predict(particles, variance=13.0): \n  particles[:, 0] += np.random.randn((particles.shape[0])) * variance\n  particles[:, 1] += np.random.randn((particles.shape[0])) * variance\n```\n\n###\u5c24\u5ea6(\u91cd\u307f)\u5224\u5b9a\n\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3054\u3068\u306e\u5c24\u5ea6(\u91cd\u307f)\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\u5148\u307b\u3069\u306e\u4e88\u6e2c\u306e\u7d50\u679c\u304c\u5224\u5b9a\u3055\u308c\u308b\u30cd\u30bf\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u5c24\u5ea6(\u91cd\u307f)\u306f\u3001\u5148\u306b\u4f5c\u6210\u3057\u305f`likelihood()`\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u7b97\u51fa\u3057\u307e\u3059\u3002\n\n```py\ndef weight(particles, func, image): \n  for i in xrange(particles.shape[0]): \n    particles[i][2] = likelihood(particles[i][0], particles[i][1], func, image)\n  sum_weight = particles[:, 2].sum()\n  particles[:, 2] *= (particles.shape[0] / sum_weight)\n```\n\n###\u6e2c\u5b9a\n\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u6e2c\u5b9a\u3057\u3066\u3001\u6210\u7e3e\u306e\u826f\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u304c\u96c6\u4e2d\u3057\u3066\u3044\u308b\u4ed8\u8fd1\u306e\u4f4d\u7f6e\u3092\u5272\u308a\u51fa\u3057\u307e\u3059\u3002\n\n```py\ndef measure(particles): \n  x = (particles[:, 0] * particles[:, 2]).sum()\n  y = (particles[:, 1] * particles[:, 2]).sum()\n  weight = particles[:, 2].sum()\n  return x / weight, y / weight\n```\n\n###\u4ed5\u4e0a\u3052\n\n\u3053\u308c\u307e\u3067\u5b9f\u88c5\u3057\u305f\u51e6\u7406\u3092\u3001\u6700\u5f8c\u306b\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\u3063\u307d\u304f\u7e8f\u3081\u307e\u3059\u3002\n\u5f15\u6570\u3067\u6307\u5b9a\u3055\u308c\u308b`max_frame`\u306e\u9593\u3001\u5168\u304f\u7dd1\u6210\u5206\u304c\u898b\u5f53\u305f\u3089\u306a\u3051\u308c\u3070\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u518d\u521d\u671f\u5316\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n\n```py\nparticle_filter_cur_frame = 0\n\ndef particle_filter(particles, func, image, max_frame=10):\n  global particle_filter_cur_frame\n  if image[func(image)].size <= 0:\n    if particle_filter_cur_frame >= max_frame:\n      return None, -1, -1\n    particle_filter_cur_frame = min(particle_filter_cur_frame + 1, max_frame)\n  else:\n    particle_filter_cur_frame = 0\n    if particles is None:\n      particles = init_particles(func, image)\n\n  if particles is None:\n    return None, -1, -1\n\n  resample(particles)\n  predict(particles)\n  weight(particles, func, image)\n  x, y = measure(particles)\n  return particles, x, y\n```\n\n##\u3067\u306f\u3001\u4f7f\u3063\u3066\u307f\u3088\u3046\uff01\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u3053\u308c\u307e\u3067\u306b\u5b9f\u88c5\u3057\u305f\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u3092\u5229\u7528\u3057\u3066\u3001\u7dd1\u8272\u306e\u7269\u4f53\u3092\u8ffd\u8de1\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u3053\u3053\u3067\u306f\u3001`cv2.VideoCapture()`\u3067\u7372\u5f97\u3057\u305f\u30d5\u30ec\u30fc\u30e0\u30c7\u30fc\u30bf(BGR\u30a4\u30e1\u30fc\u30b8)\u3092HSV\u306b\u5909\u63db\u3057\u3001S(Saturation), V(Value)\u306b\u305d\u308c\u305e\u308c\u3001OTSU\u306e\u30b9\u30ec\u30b7\u30e7\u30eb\u30c9\u3092\u639b\u3051\u3001\u8272\u306e\u6fc3\u3055\u3001\u660e\u308b\u3055\u5171\u306b\u5341\u5206\u306a\u30d4\u30af\u30bb\u30eb\u306e\u307f\u3092\u751f\u304b\u3059\u3068\u3044\u3046\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059(H\u6210\u5206\u3092S, V\u306e\u5408\u683c\u30d4\u30af\u30bb\u30eb\u3067\u30de\u30b9\u30af\u3057\u30660\u3067\u5857\u308a\u3064\u3076\u3059)\u3002\n\u7dd1\u8272(50\uff5e85)\u306e\u7bc4\u56f2\u3092\u63a2\u3057\u305f\u3044\u306e\u3067\u30010\u30af\u30ea\u30a2\u306f\u59a5\u5f53\u3067\u3059\u3002(\u7ffb\u3063\u3066\u3001\u8d64\u3092\u691c\u51fa\u3059\u308b\u6642\u306a\u3069\u306f0\u4ee5\u5916\u306e\u5024\u3067\u5857\u308a\u3064\u3076\u3055\u306a\u3044\u3068\u304a\u304b\u3057\u306a\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002)\n\n`particle_filter()`\u95a2\u6570\u306b\u5b9f\u969b\u306b\u6e21\u3057\u3066\u3044\u308b\u306e\u306f\u4e0a\u8a18\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u304c\u65bd\u3055\u308c\u305fH\u6210\u5206\u3067\u3059\u3002\u3042\u3068\u306f`particle_filter()`\u95a2\u6570\u304c\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u7ba1\u7406\u3057\u3066\u3001\u7dd1\u8272\u90e8\u5206\u3092\u3046\u307e\u304f\u8ffd\u8de1\u3057\u3066\u304f\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```py\nimport cv2\nimport numpy as np\n\nif __name__ == \"__main__\": \n  def is_green(region): \n    return (region >= 50) | (region < 85)\n\n  cap = cv2.VideoCapture(0)\n  particles = None\n\n  while cv2.waitKey(30) < 0:\n    _, frame = cap.read()\n\tframe_hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV_FULL)\n\tframe_h = frame_hsv[:, :, 0]\n\t_, frame_s = cv2.threshold(frame_hsv[:, :, 1], 0, 255, cv2.THRESH_BINARY|cv2.THRESH_OTSU)\n\t_, frame_v = cv2.threshold(frame_hsv[:, :, 2], 0, 255, cv2.THRESH_BINARY|cv2.THRESH_OTSU)\n    frame_h[(frame_s == 0) | (frame_v == 0)] = 0\n\t\n    particles, x, y = particle_filter(particles, is_green, frame_h)\n\t\n    if particles is not None:\n      valid_particles = particles[(particles[:, 0] >= 0) & (particles[:, 0] < frame.shape[1]) &\n                                  (particles[:, 1] >= 0) & (particles[:, 1] < frame.shape[0])]\n      for i in xrange(valid_particles.shape[0]): \n        frame[valid_particles[i][1], valid_particles[i][0]] = [255, 0, 0]\n\t  p = np.array([x, y], dtype=np.int32)\n\t  cv2.rectangle(frame, tuple(p - 15), tuple(p + 15), (0, 0, 255), thickness=2)\n\t\n\tcv2.imshow('green', frame)\n\n  cap.release()\n  cv2.destroyAllWindows()\n```\n\n\u3053\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u306f\u3001\u30ce\u30a4\u30ba\u3084\u52d5\u304d\u306b\u975e\u5e38\u306b\u5f37\u304f\u3001\u76f8\u5f53\u3057\u3064\u3053\u304f\u5bfe\u8c61\u7269\u3092\u8ffd\u3044\u304b\u3051\u3066\u304f\u308c\u307e\u3059\u3002\n\u307e\u305f\u3001\u7d50\u679c\u5f97\u3089\u308c\u308b\u691c\u51fa\u4f4d\u7f6e\u3082\u5927\u5909\u306b\u5b89\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u4e00\u65e6\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u3057\u307e\u3048\u3070\u3001\u3042\u3068\u306f`likelihood()`\u95a2\u6570\u3092\u3069\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u304b\u304c\u30ad\u30e2\u306b\u306a\u3063\u3066\u304f\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u751f\u6b7b\u306f\u3001\u3053\u306e`likelihood()`\u306b\u639b\u304b\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u4e00\u5ea6\u3001\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u305f\u3061\u306e\u751f\u304d\u6b8b\u308a\u3092\u304b\u3051\u305f\u5fc5\u6b7b\u306a\u52d5\u304d\u3092\u89b3\u5bdf\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u3060\u3093\u3060\u3093\u3001`likelihood()`\u306b\u51b7\u9177\u306b\u8a55\u4fa1\u3055\u308c\u308b1\u30641\u3064\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306e\u5fc5\u6b7b\u3055\u304c\u9762\u767d\u304f\u306a\u3063\u3066\u304d\u307e\u3059\u3002\u7684\u78ba\u306b\u8ffd\u5f93\u3059\u308b\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u30d5\u30a3\u30eb\u30bf\u3067\u3059\u304c\u3001\u305d\u306e\u5f71\u3067\u306f\u6570\u77e5\u308c\u306a\u3044\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u304c\u751f\u307e\u308c\u3066\u306f\u6b7b\u3093\u3067\u3086\u304f\u3001\u305d\u3093\u306a\u904e\u9177\u306a\u60b2\u54c0\u304c\u611f\u3058\u3089\u308c\u307e\u3059\u3002\n", "tags": ["Python", "numpy", "OpenCV"]}