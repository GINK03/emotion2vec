{"context": "modeling with distance functions\u306e\u8ddd\u96e2\u95a2\u6570\u306e\u4e00\u89a7\u306b\u6cbf\u3063\u3066\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u3044\u307e\u3059.\n\u4e8c\u6b21\u5143\u306e\u30b0\u30e9\u30d5\u306e\u63cf\u753b\u306f\u3001Desmos Graphing Calculator \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059.\n\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u3001Hexagonal\u3068\u540c\u3058\u3067\u3059.\n\n\n\u8ddd\u96e2\u95a2\u6570\n// Triangular Prism\nvec3 q = abs(p);\nvec2 h = vec2(1.0, 1.0);\nreturn max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n\n\n\u5c0e\u51fa\u65b9\u6cd5\n\u524d\u56de\u306e\n\n|x| + |y| = 1 (-1<x<1)\n\n|x|+|y|=1(\u22121<x<1){\n|x| + |y| = 1 (-1<x<1)\n\n}\n\u304b\u3089 y \u306e\u7d76\u5bfe\u5024\u3092\u306c\u3044\u305f.\n|x| + y = 1(\u22121<x<1)\n|x|+y=1(\u22121<x<1){|x| + y = 1(\u22121<x<1)\n}\n\u3092\u4f7f\u3046.\n\n\u4fc2\u6570\u3092\u5408\u308f\u305b\u3066,\n\\sin(\\frac{\\pi}{3})|x|+\\sin(\\frac{\\pi}{6})y = 1 (-1<x<1)\nsin(\u03c03)|x|+sin(\u03c06)y=1(\u22121<x<1){\\sin(\\frac{\\pi}{3})|x|+\\sin(\\frac{\\pi}{6})y = 1 (-1<x<1)\n}\n\n\u6570\u5f0f\u306e\u30ea\u30f3\u30af\n\u3067\u3001\u8ddd\u96e2\u95a2\u6570\u306f\u3053\u308c\u3001\n// Triangular Prism1\nfloat radio = 1.0; // \u4e00\u8fba\u306e\u9577\u3055\nfloat hight = 1.0; // \u539a\u3055\uff08\u9ad8\u3055\uff09\nreturn max(abs(p.z)-hight,max(abs(p.x)*0.866025+p.y*0.5, -p.y)-radio);\n\n\u3082\u3068\u306b\u3001\u8a18\u4e8b\u306e\u901a\u308a\u3060\u3068\u3053\u308c\n// Triangular Prism2\nvec3 q = abs(p);\nfloat radio = 1.0; // \u4e00\u8fba\u306e\u9577\u3055\nfloat hight = 1.0; // \u539a\u3055\uff08\u9ad8\u3055\uff09\nreturn max(q.z-hight,max(q.x*0.866025+p.y*0.5, -p.y)-radio);\n\n\n\u4e09\u89d2\u67f1\u306e\u8ddd\u96e2\u95a2\u6570\u3092\u3044\u3058\u308b\n\n\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f31\n// motion01\nreturn max(abs(p.z)-hight,max(abs(p.x)*0.866025+p.y*0.5, -p.y*sin(time))-radio);\n\n\n\n\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f32\n\nx\u8ef8\u56de\u8ee2\u3092\u5165\u308c\u308b\nz\u6210\u5206\u3092 abs(sin(time)) \u500d\u3059\u308b\n\n// \u56de\u8ee2\nmat3 m_x = mat3(1,0,0,0,cos(time),-sin(time),0,sin(time),cos(time));\np = m_x * p;\nreturn max(abs(p.z*abs(sin(time)))-hight,max(abs(p.x)*0.866025+p.y*0.5, -p.y)-radio);\n\n\n\n\n\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f33\n\u3051\u3044\u308c\u3093\u307d\u3044\u611f\u3058\np.x \u306b\u3000max(abs(p.x)*0.866025, abs(p.x)*abs(sin(exp(10.0*abs(sin(time))))) \u3092\u5165\u308c\u308b.\n// motion03\nreturn max(abs(p.z)-hight,max(max(abs(p.x)*0.866025, abs(p.x)*abs(sin(exp(10.0*abs(sin(time))))))+p.y*0.5, -p.y)-radio);\n\n\n\n\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f34\n\u7802\u5d50\u307d\u3044\u3082\u306e\n\u305d\u3068\u306e max \u3092 mod \u306b\u5909\u3048\u307e\u3057\u305f\u3002\n// motion04\nmat3 m_x = mat3(1,0,0,0,cos(time),-sin(time),0,sin(time),cos(time));\np = m_x * p;\nreturn mod(abs(p.z)-hight,max(abs(p.x)*0.866025+p.y*0.5, -p.y)-radio);\n\n\n\u30b3\u30fc\u30c9\n// ============================================================================\n// Triangular Prism function\n// ============================================================================\n\nprecision mediump float;\nuniform vec2  resolution;    // resolution (512.0, 512.0)\nuniform vec2  mouse;         // mouse      (-1.0 ~ 1.0)\nuniform float time;          // time       (1second == 1.0)\nuniform sampler2D prevScene; // previous scene texture\n\n// Triangular Prism\u306e\u8ddd\u96e2\u95a2\u6570\nfloat sdTriPrism(vec3 p)\n{\n    float radio = 1.0; // \u4e00\u8fba\u306e\u9577\u3055\n    float hight = 1.0; // \u539a\u3055\uff08\u9ad8\u3055\uff09\n\n    // \u56de\u8ee2\n    // mat3 m_x = mat3(1,0,0,0,cos(time),-sin(time),0,sin(time),cos(time));\n    // p = m_x * p;\n    // mat3 m_y = mat3(cos(time),0,-sin(time),0,1,0,sin(time),0,cos(time));\n    // p = m_y * p;\n    // mat3 m_z = mat3(cos(time),-sin(time),0,sin(time),cos(time),0,0,0,1);\n    // p = m_z * p;\n    // mat3 m_x = mat3(1,0,0,0,cos(1.57),-sin(1.57),0,sin(1.57),cos(1.57));\n    // p = m_x * p;\n\n    // Triangular Prism1\n    return max(abs(p.z)-hight,max(abs(p.x)*0.866025+p.y*0.5, -p.y)-radio);\n\n    // Triangular Prism2\n//  vec3 q = abs(p);\n//  return max(q.z-hight,max(q.x*0.866025+p.y*0.5, -p.y)-radio);\n\n    // motion01\n//  return max(abs(p.z)-hight,max(abs(p.x)*0.866025+p.y*0.5, -p.y*sin(time))-radio);\n\n    // motion02\n//     mat3 m_x = mat3(1,0,0,0,cos(time),-sin(time),0,sin(time),cos(time));\n//     p = m_x * p;    \n//  return max(abs(p.z*abs(sin(time)))-hight,max(abs(p.x)*0.866025+p.y*0.5, -p.y)-radio);\n\n    // motion03\n    //  return max(abs(p.z)-hight,max(max(abs(p.x)*0.866025, abs(p.x)*abs(sin(exp(10.0*abs(sin(time))))))+p.y*0.5, -p.y)-radio);\n\n    // motion04\n    // mat3 m_x = mat3(1,0,0,0,cos(time),-sin(time),0,sin(time),cos(time));\n    // p = m_x * p;\n    // return mod(abs(p.z)-hight,max(abs(p.x)*0.866025+p.y*0.5, -p.y)-radio);\n\n}\n\n// \u8ddd\u96e2\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u30cf\u30d6\u95a2\u6570\nfloat distanceHub(vec3 p){\n    return sdTriPrism(p);\n}\n\n// \u6cd5\u7dda\u3092\u751f\u6210\u3059\u308b\nvec3 genNormal(vec3 p){\n    float d = 0.001;\n    return normalize(vec3(\n        distanceHub(p + vec3(  d, 0.0, 0.0)) - distanceHub(p + vec3( -d, 0.0, 0.0)),\n        distanceHub(p + vec3(0.0,   d, 0.0)) - distanceHub(p + vec3(0.0,  -d, 0.0)),\n        distanceHub(p + vec3(0.0, 0.0,   d)) - distanceHub(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\nvoid main(){\n    // \u30b9\u30af\u30ea\u30fc\u30f3\u30b9\u30da\u30fc\u30b9\u3092\u8003\u616e\u3057\u3066\u5ea7\u6a19\u3092\u6b63\u898f\u5316\u3059\u308b\n    vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n    // \u30ab\u30e1\u30e9\u3092\u5b9a\u7fa9\u3059\u308b\n    vec3 cPos = vec3(0.0,  0.0,  5.0); // \u30ab\u30e1\u30e9\u306e\u4f4d\u7f6e\n    vec3 cDir = vec3(0.0,  0.0, -1.0); // \u30ab\u30e1\u30e9\u306e\u5411\u304d(\u8996\u7dda)\n    vec3 cUp  = vec3(0.0,  1.0,  0.0); // \u30ab\u30e1\u30e9\u306e\u4e0a\u65b9\u5411\n    vec3 cSide = cross(cDir, cUp);     // \u5916\u7a4d\u3092\u4f7f\u3063\u3066\u6a2a\u65b9\u5411\u3092\u7b97\u51fa\n    float targetDepth = 1.0;           // \u30d5\u30a9\u30fc\u30ab\u30b9\u3059\u308b\u6df1\u5ea6\n    // \u30ab\u30e1\u30e9\u306e\u60c5\u5831\u304b\u3089\u30ec\u30a4\u3092\u5b9a\u7fa9\u3059\u308b\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n    // \u30de\u30fc\u30c1\u30f3\u30b0\u30eb\u30fc\u30d7\u3092\u7d44\u3080\n    float dist = 0.0;  // \u30ec\u30a4\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u9593\u306e\u6700\u77ed\u8ddd\u96e2\n    float rLen = 0.0;  // \u30ec\u30a4\u306b\u7d99\u304e\u8db3\u3059\u9577\u3055\n    vec3  rPos = cPos; // \u30ec\u30a4\u306e\u5148\u7aef\u4f4d\u7f6e(\u521d\u671f\u4f4d\u7f6e)\n    for(int i = 0; i < 32; ++i){\n        dist = distanceHub(rPos);\n        rLen += dist;\n        rPos = cPos + ray * rLen;\n    }\n    // \u30ec\u30a4\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8ddd\u96e2\u3092\u78ba\u8a8d\n    if(abs(dist) < 0.001){\n        // \u6cd5\u7dda\u3092\u7b97\u51fa\n        vec3 normal = genNormal(rPos);\n        // \u30e9\u30a4\u30c8\u30d9\u30af\u30c8\u30eb\u306e\u5b9a\u7fa9\n        vec3 light = normalize(vec3(1.0, 1.0, 1.0));\n        // \u30e9\u30a4\u30c8\u30d9\u30af\u30c8\u30eb\u3068\u306e\u5185\u7a4d\u3092\u53d6\u308b\n        float diff = max(dot(normal, light), 0.1);\n        // gl_FragColor = vec4(vec3(diff, diff, diff), 1.0);\n        gl_FragColor = vec4(vec3(diff*177.0/255.0, diff*120.0/255.0, diff*68.0/255.0), 1.0);\n    }else{\n        // \u885d\u7a81\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u305d\u306e\u307e\u307e\u9ed2\n        gl_FragColor = vec4(vec3(0.0, 0.0, 0.0), 1.0);\n    }\n}\n\n[modeling with distance functions](http://iquilezles.org/www/articles/distfunctions/distfunctions.htm)\u306e\u8ddd\u96e2\u95a2\u6570\u306e\u4e00\u89a7\u306b\u6cbf\u3063\u3066\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u3044\u307e\u3059.\n\n\u4e8c\u6b21\u5143\u306e\u30b0\u30e9\u30d5\u306e\u63cf\u753b\u306f\u3001[Desmos Graphing Calculator](https://www.desmos.com/) \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059.\n\n# \u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u3001[Hexagonal](http://qiita.com/muripo_life/items/48605fc427e41e3884bb)\u3068\u540c\u3058\u3067\u3059.\n\n![Triangular_Prism.PNG](https://qiita-image-store.s3.amazonaws.com/0/102634/d43d902e-9bb7-e8e0-d334-72d14244b665.png)\n\n## \u8ddd\u96e2\u95a2\u6570\n\n```c++\n// Triangular Prism\nvec3 q = abs(p);\nvec2 h = vec2(1.0, 1.0);\nreturn max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n```\n\n## \u5c0e\u51fa\u65b9\u6cd5\n\n\u524d\u56de\u306e\n\n```math\n\n|x| + |y| = 1 (-1<x<1)\n\n```\n\n\u304b\u3089 y \u306e\u7d76\u5bfe\u5024\u3092\u306c\u3044\u305f.\n\n```math\n|x| + y = 1(\u22121<x<1)\n```\n\n\u3092\u4f7f\u3046.\n\n![Triangular_Prism01.PNG](https://qiita-image-store.s3.amazonaws.com/0/102634/47734461-2359-a6fc-1d5c-b1ff303c47aa.png)\n\n\u4fc2\u6570\u3092\u5408\u308f\u305b\u3066,\n\n```math\n\\sin(\\frac{\\pi}{3})|x|+\\sin(\\frac{\\pi}{6})y = 1 (-1<x<1)\n```\n\n![Triangular_Prism02.PNG](https://qiita-image-store.s3.amazonaws.com/0/102634/dd9bea69-cf1b-0d46-48ba-ae091110075d.png)\n\n[\u6570\u5f0f\u306e\u30ea\u30f3\u30af](https://www.desmos.com/calculator/lg5i6zcyfn)\n\n\u3067\u3001\u8ddd\u96e2\u95a2\u6570\u306f\u3053\u308c\u3001\n\n```c++\n// Triangular Prism1\nfloat radio = 1.0; // \u4e00\u8fba\u306e\u9577\u3055\nfloat hight = 1.0; // \u539a\u3055\uff08\u9ad8\u3055\uff09\nreturn max(abs(p.z)-hight,max(abs(p.x)*0.866025+p.y*0.5, -p.y)-radio);\n```\n\n\u3082\u3068\u306b\u3001\u8a18\u4e8b\u306e\u901a\u308a\u3060\u3068\u3053\u308c\n\n```c++\n// Triangular Prism2\nvec3 q = abs(p);\nfloat radio = 1.0; // \u4e00\u8fba\u306e\u9577\u3055\nfloat hight = 1.0; // \u539a\u3055\uff08\u9ad8\u3055\uff09\nreturn max(q.z-hight,max(q.x*0.866025+p.y*0.5, -p.y)-radio);\n```\n\n## \u4e09\u89d2\u67f1\u306e\u8ddd\u96e2\u95a2\u6570\u3092\u3044\u3058\u308b\n\n### \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f31\n\n```c++\n// motion01\nreturn max(abs(p.z)-hight,max(abs(p.x)*0.866025+p.y*0.5, -p.y*sin(time))-radio);\n```\n\n![motion01.gif](https://qiita-image-store.s3.amazonaws.com/0/102634/aa31fad4-bf11-f473-75a3-2ac8b0e8b5eb.gif)\n\n\n### \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f32\n* x\u8ef8\u56de\u8ee2\u3092\u5165\u308c\u308b\n* z\u6210\u5206\u3092 `abs(sin(time))` \u500d\u3059\u308b\n\n```c++\n// \u56de\u8ee2\nmat3 m_x = mat3(1,0,0,0,cos(time),-sin(time),0,sin(time),cos(time));\np = m_x * p;\nreturn max(abs(p.z*abs(sin(time)))-hight,max(abs(p.x)*0.866025+p.y*0.5, -p.y)-radio);\n\n```\n\n![motion02.gif](https://qiita-image-store.s3.amazonaws.com/0/102634/a1e7f614-99d6-bacc-283f-d14053748649.gif)\n\n\n## \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f33\n\n\u3051\u3044\u308c\u3093\u307d\u3044\u611f\u3058\n\n`p.x` \u306b\u3000`max(abs(p.x)*0.866025, abs(p.x)*abs(sin(exp(10.0*abs(sin(time)))))` \u3092\u5165\u308c\u308b.\n\n```c++\n// motion03\nreturn max(abs(p.z)-hight,max(max(abs(p.x)*0.866025, abs(p.x)*abs(sin(exp(10.0*abs(sin(time))))))+p.y*0.5, -p.y)-radio);\n```\n\n![motion03.gif](https://qiita-image-store.s3.amazonaws.com/0/102634/0246570b-0dab-b719-9d56-c3d5c60c43b3.gif)\n\n## \u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f34\n\n\u7802\u5d50\u307d\u3044\u3082\u306e\n\n\u305d\u3068\u306e `max` \u3092 `mod` \u306b\u5909\u3048\u307e\u3057\u305f\u3002\n\n```c++\n// motion04\nmat3 m_x = mat3(1,0,0,0,cos(time),-sin(time),0,sin(time),cos(time));\np = m_x * p;\nreturn mod(abs(p.z)-hight,max(abs(p.x)*0.866025+p.y*0.5, -p.y)-radio);\n```\n\n![motion04.gif](https://qiita-image-store.s3.amazonaws.com/0/102634/a165e977-672f-0d99-77ca-e25b20f1c9ef.gif)\n\n[\u30b3\u30fc\u30c9](https://github.com/muripoLife/RayMarchingDistanceFunction/blob/master/11/fsp.frag)\n\n```c++\n// ============================================================================\n// Triangular Prism function\n// ============================================================================\n\nprecision mediump float;\nuniform vec2  resolution;    // resolution (512.0, 512.0)\nuniform vec2  mouse;         // mouse      (-1.0 ~ 1.0)\nuniform float time;          // time       (1second == 1.0)\nuniform sampler2D prevScene; // previous scene texture\n\n// Triangular Prism\u306e\u8ddd\u96e2\u95a2\u6570\nfloat sdTriPrism(vec3 p)\n{\n    float radio = 1.0; // \u4e00\u8fba\u306e\u9577\u3055\n    float hight = 1.0; // \u539a\u3055\uff08\u9ad8\u3055\uff09\n\n    // \u56de\u8ee2\n    // mat3 m_x = mat3(1,0,0,0,cos(time),-sin(time),0,sin(time),cos(time));\n    // p = m_x * p;\n    // mat3 m_y = mat3(cos(time),0,-sin(time),0,1,0,sin(time),0,cos(time));\n    // p = m_y * p;\n    // mat3 m_z = mat3(cos(time),-sin(time),0,sin(time),cos(time),0,0,0,1);\n    // p = m_z * p;\n    // mat3 m_x = mat3(1,0,0,0,cos(1.57),-sin(1.57),0,sin(1.57),cos(1.57));\n    // p = m_x * p;\n\n    // Triangular Prism1\n    return max(abs(p.z)-hight,max(abs(p.x)*0.866025+p.y*0.5, -p.y)-radio);\n\n    // Triangular Prism2\n//  vec3 q = abs(p);\n//  return max(q.z-hight,max(q.x*0.866025+p.y*0.5, -p.y)-radio);\n\n    // motion01\n//  return max(abs(p.z)-hight,max(abs(p.x)*0.866025+p.y*0.5, -p.y*sin(time))-radio);\n\n    // motion02\n//     mat3 m_x = mat3(1,0,0,0,cos(time),-sin(time),0,sin(time),cos(time));\n//     p = m_x * p;    \n//  return max(abs(p.z*abs(sin(time)))-hight,max(abs(p.x)*0.866025+p.y*0.5, -p.y)-radio);\n\n    // motion03\n    //  return max(abs(p.z)-hight,max(max(abs(p.x)*0.866025, abs(p.x)*abs(sin(exp(10.0*abs(sin(time))))))+p.y*0.5, -p.y)-radio);\n\n    // motion04\n    // mat3 m_x = mat3(1,0,0,0,cos(time),-sin(time),0,sin(time),cos(time));\n    // p = m_x * p;\n    // return mod(abs(p.z)-hight,max(abs(p.x)*0.866025+p.y*0.5, -p.y)-radio);\n\n}\n\n// \u8ddd\u96e2\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u30cf\u30d6\u95a2\u6570\nfloat distanceHub(vec3 p){\n    return sdTriPrism(p);\n}\n\n// \u6cd5\u7dda\u3092\u751f\u6210\u3059\u308b\nvec3 genNormal(vec3 p){\n    float d = 0.001;\n    return normalize(vec3(\n        distanceHub(p + vec3(  d, 0.0, 0.0)) - distanceHub(p + vec3( -d, 0.0, 0.0)),\n        distanceHub(p + vec3(0.0,   d, 0.0)) - distanceHub(p + vec3(0.0,  -d, 0.0)),\n        distanceHub(p + vec3(0.0, 0.0,   d)) - distanceHub(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\nvoid main(){\n    // \u30b9\u30af\u30ea\u30fc\u30f3\u30b9\u30da\u30fc\u30b9\u3092\u8003\u616e\u3057\u3066\u5ea7\u6a19\u3092\u6b63\u898f\u5316\u3059\u308b\n    vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n    // \u30ab\u30e1\u30e9\u3092\u5b9a\u7fa9\u3059\u308b\n    vec3 cPos = vec3(0.0,  0.0,  5.0); // \u30ab\u30e1\u30e9\u306e\u4f4d\u7f6e\n    vec3 cDir = vec3(0.0,  0.0, -1.0); // \u30ab\u30e1\u30e9\u306e\u5411\u304d(\u8996\u7dda)\n    vec3 cUp  = vec3(0.0,  1.0,  0.0); // \u30ab\u30e1\u30e9\u306e\u4e0a\u65b9\u5411\n    vec3 cSide = cross(cDir, cUp);     // \u5916\u7a4d\u3092\u4f7f\u3063\u3066\u6a2a\u65b9\u5411\u3092\u7b97\u51fa\n    float targetDepth = 1.0;           // \u30d5\u30a9\u30fc\u30ab\u30b9\u3059\u308b\u6df1\u5ea6\n    // \u30ab\u30e1\u30e9\u306e\u60c5\u5831\u304b\u3089\u30ec\u30a4\u3092\u5b9a\u7fa9\u3059\u308b\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n    // \u30de\u30fc\u30c1\u30f3\u30b0\u30eb\u30fc\u30d7\u3092\u7d44\u3080\n    float dist = 0.0;  // \u30ec\u30a4\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u9593\u306e\u6700\u77ed\u8ddd\u96e2\n    float rLen = 0.0;  // \u30ec\u30a4\u306b\u7d99\u304e\u8db3\u3059\u9577\u3055\n    vec3  rPos = cPos; // \u30ec\u30a4\u306e\u5148\u7aef\u4f4d\u7f6e(\u521d\u671f\u4f4d\u7f6e)\n    for(int i = 0; i < 32; ++i){\n        dist = distanceHub(rPos);\n        rLen += dist;\n        rPos = cPos + ray * rLen;\n    }\n    // \u30ec\u30a4\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8ddd\u96e2\u3092\u78ba\u8a8d\n    if(abs(dist) < 0.001){\n        // \u6cd5\u7dda\u3092\u7b97\u51fa\n        vec3 normal = genNormal(rPos);\n        // \u30e9\u30a4\u30c8\u30d9\u30af\u30c8\u30eb\u306e\u5b9a\u7fa9\n        vec3 light = normalize(vec3(1.0, 1.0, 1.0));\n        // \u30e9\u30a4\u30c8\u30d9\u30af\u30c8\u30eb\u3068\u306e\u5185\u7a4d\u3092\u53d6\u308b\n        float diff = max(dot(normal, light), 0.1);\n        // gl_FragColor = vec4(vec3(diff, diff, diff), 1.0);\n        gl_FragColor = vec4(vec3(diff*177.0/255.0, diff*120.0/255.0, diff*68.0/255.0), 1.0);\n    }else{\n        // \u885d\u7a81\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u305d\u306e\u307e\u307e\u9ed2\n        gl_FragColor = vec4(vec3(0.0, 0.0, 0.0), 1.0);\n    }\n}\n```\n", "tags": ["GLSL", "\u6570\u5b66"]}