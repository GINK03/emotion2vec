{"tags": ["DeepLearning", "CNN", "\u753b\u50cf\u51e6\u7406", "\u6a5f\u68b0\u5b66\u7fd2", "Torch"], "context": "\n\n\u521d\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u306fTorch\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306e\u89e3\u8aac?\u3092\u3057\u307e\u3059\u3002\u3061\u3087\u3063\u3068\u3057\u305f\u5fdc\u7528\u3084\u4fbf\u5229\u30c4\u30fc\u30eb\u306a\u3069\u306f\u3053\u3061\u3089\n\u3000caffe,chainer,theano\u3068deeplearning\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u304d\u3066\u6700\u8fd1torch\u306b\u4e57\u308a\u63db\u3048\u305f\u306e\u3067torch\u306b\u3064\u3044\u3066\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u307e\u3068\u3081\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306e\u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e2_supervised\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\ntoch\u306b\u3064\u3044\u3066\n\u3000\u65e5\u672c\u3067\u306fdeeplearning\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3044\u3048\u3070caffe\u306b\u59cb\u307e\u308a\u3001\u6700\u8fd1\u52e2\u3044\u306e\u3042\u308bTensorflow\u3084\u65e5\u672c\u3067\u958b\u767a\u304c\u3055\u308c\u3066\u3044\u308bchainer\u306a\u3069\u304c\u4e3b\u6d41\u3067\u3001\u3042\u307e\u308atorch\u306f\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u601d\u3048\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u4e16\u754c\u7684\u306b\u306ftorch\u306f\u4e3b\u6d41\u306edeeplearning\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3001Facebook\u304c\u4f7f\u7528\u3057\u3066\u3044\u308b\u3053\u3068\u3067\u3082\u6709\u540d\u3067\u3059\u3002\u753b\u50cf\u51e6\u7406\u306b\u304a\u3051\u308b\u6700\u65b0\u306e\u624b\u6cd5\u306e\u5b9f\u88c5\u3082\u591a\u304f\u3001Fast R-CNN\u3067\u4f7f\u308f\u308c\u3066\u3044\u308bROIPooling\u3084segmentation\u3067\u6700\u8fd1\u7528\u3044\u3089\u308c\u3066\u3044\u308bDilatedConvolution\u306a\u3069\u3082torch\u3067\u306f\u5b9f\u88c5\u6e08\u307f\u3067\u3059\u3002\u307e\u305fvolume\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u95a2\u6570(3DConvolution\u3084DilatedConvolution\u306e3d\u30d0\u30fc\u30b8\u30e7\u30f3\u306a\u3069)\u3082\u5145\u5b9f\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000torch\u306e\u7279\u5fb4\u3068\u3057\u3066\u306f\u5bfe\u5fdc\u8a00\u8a9e\u304clua\u3067\u3042\u308a\u3001torch\u306e\u3068\u3063\u3064\u304d\u306b\u304f\u3055\u306e\u4e00\u3064\u3067\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059(\u81ea\u5206\u3082\u305d\u3046\u3067\u3057\u305f)\u3002\u81ea\u5206\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u77e5\u8b58\u304c\u306a\u3044\u306e\u3067\u8a73\u3057\u3044\u3053\u3068\u306f\u8a00\u3048\u307e\u305b\u3093\u304c\u3001lua\u306f\u30b9\u30af\u30ea\u30d7\u30c8\u8a00\u8a9e\u3067\u3042\u308b\u305f\u3081python\u306a\u3069\u306b\u8fd1\u3044\u66f8\u304d\u65b9\u3067\u3001jit\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u7528\u3044\u308b\u305f\u3081python\u306a\u3069\u3088\u308a\u3082\u52d5\u4f5c\u304c\u901f\u3044\u3068\u3044\u5229\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001lua\u81ea\u4f53\u306b\u306fpython\u3067\u8a00\u3046numpy\u3084matplotlib\u306e\u3088\u3046\u306a\u4fbf\u5229library\u306f\u3042\u307e\u308a\u591a\u304f\u3042\u308a\u307e\u305b\u3093\u304c(\u81ea\u5206\u304c\u8a73\u3057\u304f\u306a\u3044\u3060\u3051\u304b\u3082\u3057\u308c\u307e\u305b\u3093)torch\u306e\u62e1\u5f35\u3068\u3057\u3066\u69d8\u3005\u306alibrary\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u305d\u3053\u307e\u3067\u56f0\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u3000\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u516c\u5f0f\u306einstallation\u306b\u3042\u308b\u3088\u3046\u4ee5\u4e0b\u306e3\u884c\u306e\u5b9f\u884c\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u53ef\u80fd\u3067path\u306e\u66f8\u304d\u8fbc\u307f\u3082\u81ea\u52d5\u3067\u884c\u3063\u3066\u304f\u308c\u307e\u3059(cuda\u5468\u308a\u306e\u8a2d\u5b9a\u306f\u81ea\u5206\u3067)\u3002\u81ea\u5206\u306fubuntu14.04\u3068ubuntu16.04\u305d\u308c\u305e\u308c\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u884c\u3044\u307e\u3057\u305f\u3002\u307e\u305ftitan x\u3068gtx 1080\u306e\u305d\u308c\u305e\u308c\u306b\u5bfe\u3057\u3066\u3001cuda7.5(cuda8.0), cudnn v5\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066gpu\u8a08\u7b97\u306e\u52d5\u4f5c\u78ba\u8a8d\u3067\u304d\u3066\u3044\u307e\u3059\u3002\ngit clone https://github.com/torch/distro.git ~/torch --recursive\ncd ~/torch; bash install-deps;\n./install.sh\n\n\u6ce8\u610f\u3068\u3057\u3066\u3001torch\u306eclone\u5148\u304c\u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u6307\u5b9a\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3068\u3001torch\u3092\u3069\u3053\u306bclone\u3057\u3066\u3082path\u304c\u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bclone\u3055\u308c\u305f\u524d\u63d0\u3067\u66f8\u304d\u8fbc\u307e\u308c\u308b\u3053\u3068\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002\u5225\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bclone\u3057\u305f\u3044\u5834\u5408\u306f1\u884c\u3081\u306e~/torch\u3092\u5916\u3057\u3001./install.sh\u3092\u5b9f\u884c\u5f8c\u306epath\u306e\u66f8\u304d\u8fbc\u307f\u306e\u6709\u7121\u3092no\u306b\u3057\u3066\u81ea\u5206\u3067path\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u3000\u307e\u305f\u3001add-apt-repository\u304c\u306a\u3044\u3068\u6012\u3089\u308c\u305f\u5834\u5408\u306f\u4ee5\u4e0b\u3092\u5b9f\u884c\u3057\u3066\u89e3\u6c7a\u3067\u304d\u307e\u3059\u3002\nsudo apt-get install software-properties-common python-software-properties\n\n\u540c\u69d8\u306breadline.*\u5468\u308a\u306e\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u305f\u5834\u5408\u306f\nsudo apt-get install libreadline-dev\n\n\u3067\u89e3\u6c7a\u3067\u304d\u307e\u3059\u3002\n\ntorch\u3067\u306e\u884c\u5217(\u753b\u50cf)\u306e\u6271\u3044\u306b\u3064\u3044\u3066\n\u3000\u3053\u3053\u304b\u3089\u306ftorch\u3092\u4f7f\u3063\u305fmnist\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u516c\u5f0f\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e2_supervised\u3067\u306fStreet View House Numbers Dataset\u3068\u3044\u3046dataset\u3092\u4f7f\u3063\u3066\u6570\u5b57\u306e\u8a8d\u8b58\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306fmnist\u3068\u6bd4\u8f03\u3059\u308b\u3068\u30bf\u30b9\u30af\u3068\u3057\u3066\u96e3\u3057\u304f\u5358\u7d14\u306a\u30e2\u30c7\u30eb\u3067\u306floss\u304c\u843d\u3061\u305a\u7cbe\u5ea6\u304c\u306a\u304b\u306a\u304b\u4e0a\u304c\u3089\u306a\u3044\u305f\u3081\u3001\u5b66\u7fd2\u3067\u304d\u3066\u3044\u308b\u304b\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3053\u306e\u8a18\u4e8b\u3067\u306fdataset\u3092mnist\u306b\u5dee\u3057\u66ff\u3048\u307e\u3059\u3002mnist\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306eA_datasets\u306emnist.lua\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067download\u3067\u304d\u307e\u3059\u3002\n\u3000torch\u3067\u306fpython\u3067\u8a00\u3046numpy\u306e\u3088\u3046\u306a\u884c\u5217\u6f14\u7b97\u3092torch.Tensor\u3092\u7528\u3044\u3066\u884c\u3044\u307e\u3059\u3002\u8a73\u3057\u304f\u66f8\u304f\u3068\u8a18\u4e8b\u304c\u9577\u304f\u306a\u308b\u305f\u3081\u3001numpy\u3068torch.Tensor\u306e\u5bfe\u5fdc\u8868\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305flua\u3067\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\u306fimage.load()\u3092\u6301\u3061\u3044\u3066\u884c\u3044\u307e\u3059\u3002\u305d\u306e\u4ed6lua\u3068python\u306e\u7d30\u304b\u3044\u9055\u3044\u306f\u66f8\u304f\u3068\u9577\u304f\u306a\u308b\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\n\n\u3044\u3088\u3044\u3088deeplearning\n\nmodel\u306e\u5b9a\u7fa9\ntorch\u3067\u306f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306emodel\u3092\u7d44\u3080\u306e\u306bnn\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u307e\u3059\u3002\u307e\u305ann.Sequential()\u3067\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3057\u3001\u5b9a\u7fa9\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306b\u5bfe\u3057add()\u3092\u7528\u3044\u3066\u7573\u307f\u8fbc\u307f\u3084\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u306a\u3069\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u4eca\u56de\u306fchainer\u306emnist\u306e\u4f8b\u306b\u306a\u3089\u3063\u30663\u5c64\u306e\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\nmodel.lua\nrequire 'nn'\nmodel = nn.Sequential()\nmodel:add(nn.View(32*32))\nmodel:add(nn.Linear(32*32, 1000)):add(nn.ReLU())\nmodel:add(nn.Linear(1000, 1000)):add(nn.ReLU())\nmodel:add(nn.Linear(1000, 10))\nmodel:add(nn.LogSoftMax())\nmodel = model:float()  --model\u3092float\u306b\u5909\u63db\n\n\n\u3053\u306e\u30e2\u30c7\u30eb\u306fchainer\u306emnist\u306esample\u3067\u4f7f\u308f\u308c\u3066\u3044\u308bmodel\u3068\u307b\u307c\u540c\u69d8\u306e\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u307e\u3059(mnist.lua\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304f\u308bdata\u304c32\u00d732\u306e\u753b\u50cf\u3067\u3042\u308b\u305f\u3081\u5165\u529b\u304c32\u00d732\u306b\u306a\u3063\u3066\u3044\u307e\u3059)\u3002nn.View()\u306f\u5165\u529b\u3055\u308c\u305f(batchsize, channel\u6570, width, height)\u6b21\u5143\u306etorch.Tensor\u3092(batchsize, \u7dcf\u5165\u529b\u6570)\u6b21\u5143\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u4eca\u56de\u306f(batchsize, 1, 32, 32)\u306e\u5165\u529b\u304c(batchsize, 32*32)\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002nn.Linear()\u306f\u5168\u7d50\u5408\u5c64\u3092\u8868\u3057(\u5165\u529b\u30e6\u30cb\u30c3\u30c8\u6570, \u51fa\u529b\u30e6\u30cb\u30c3\u30c8\u6570)\u306b\u3088\u308a\u5b9a\u7fa9\u3057\u307e\u3059\u3002nn.ReLU()\u306f\u6d3b\u6027\u5316\u95a2\u6570\u3067\u3059\u3002\u307e\u305f\u3001\u4eca\u56de\u51fa\u529b\u306fSoftMax\u3067\u306f\u306a\u304fLogSoftMax\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u7406\u7531\u3068\u3057\u3066\u306f\u4eca\u56deloss\u95a2\u6570\u3067\u7528\u3044\u308bnn.ClassNLLCriterion\u304cnn.LogSoftMax()\u3068\u5bfe\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\n\u3000\u4eca\u56de\u7573\u307f\u8fbc\u307f\u3084\u30d7\u30fc\u30ea\u30f3\u30b0\u306e\u51e6\u7406\u306f\u884c\u308f\u306a\u3044\u305f\u3081model\u306badd()\u3057\u3066\u3044\u307e\u305b\u3093\u304cnn.SpatialConvolution\u3084nn.SpatialMaxPooling\u3092add()\u3059\u308b\u3053\u3068\u3067CNN\u304c\u7c21\u5358\u306b\u7d44\u3081\u307e\u3059\u3002torch\u306f\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u9055\u3044\u5165\u529b\u306etorch.Tensor\u30923\u6b21\u5143\u306b\u3057\u3066\u3082forward\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059(\u4e00\u90e8\u3067\u304d\u306a\u3044\u3082\u306e\u3082\u3042\u308b)\u3002\u5165\u529b\u306e\u6b21\u5143\u6570\u306b\u3088\u308a\u30d0\u30c3\u30c1\u51e6\u7406\u306e\u5224\u65ad\u3092\u81ea\u52d5\u3067\u884c\u3063\u3066\u304f\u308c\u308b\u305f\u3081\u3001\u753b\u50cf\uff11\u679a\u3092\u5165\u529b\u3059\u308b\u969b\u306b\u308f\u3056\u308f\u30564\u6b21\u5143\u306b\u3059\u308b\u624b\u9593\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001torch\u3067\u306fcudnn\u3092\u4f7f\u3046Convolution\u3084facebook\u304c\u5b9f\u88c5\u3057\u305f\u9ad8\u901f\u306aConvolution\u306a\u3069\u69d8\u3005\u306a\u7a2e\u985e\u306eConvolution\u304c\u3042\u308a\u307e\u3059\u3002\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\u306e\u8a18\u4e8b\u304c\u89e3\u8aac\u3057\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u66f4\u65b0\u65b9\u6cd5\n\u3000\u5b66\u7fd2\u3059\u308b\u306e\u306b\u306floss\u95a2\u6570\u3068\u6700\u9069\u5316\u624b\u6cd5\u3092\u6c7a\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002torch\u3067\u306floss\u95a2\u6570\u306fnn\u306e\u4e2d\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059(\u8a73\u3057\u304f\u306f\u3053\u3061\u3089)\u3002\u4eca\u56de\u306fSoftMax\u3092\u4f7f\u3063\u305f\u591a\u30af\u30e9\u30b9\u5206\u985e\u306e\u305f\u3081nn.ClassNLLCriterion\u3092\u7528\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u6700\u9069\u5316\u624b\u6cd5\u306foptim\u306e\u4e2d\u306b\u7528\u610f\u3055\u308c\u3066\u304a\u308a(\u8a73\u3057\u304f\u306f\u3053\u3061\u3089)\u4eca\u56de\u306foptim.adagrad\u3092\u7528\u3044\u307e\u3059\u3002\n\u3000loss\u95a2\u6570\u3068\u6700\u9069\u5316\u624b\u6cd5\u304c\u6c7a\u307e\u3063\u305f\u306e\u3067\u3042\u3068\u306floss\u306e\u8a08\u7b97\u3068backward\u306e\u8a18\u8ff0\u3092\u3059\u308b\u3060\u3051\u3067\u5b66\u7fd2\u304c\u884c\u3048\u307e\u3059\u3002\u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e4_train.lua\u3067\u306f\u5b66\u7fd2\u306e\u90e8\u5206\u304cmini-batch\u3068\u8a00\u3044\u3064\u3064\u753b\u50cf\u3092\u4e00\u679a\u4e00\u679aforward\u3057\u3066backward\u3059\u308b\u3088\u3046\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u66f4\u65b0\u81ea\u4f53\u306f\u307e\u3068\u3081\u3066\u884c\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081mini-batch\u51e6\u7406\u3068\u3057\u3066\u554f\u984c\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u305d\u306e\u5206\u8a08\u7b97\u304c\u9045\u304f\u306a\u308b\u306e\u3067\u4eca\u56de\u306fforward\u3068backward\u3082mini-batch\u3054\u3068\u306b\u884c\u3044\u307e\u3059\u3002\n\ntrainer.lua\nrequire optim\n--loss\u95a2\u6570\u306e\u5b9a\u7fa9\ncriterion = nn.ClassNLLCriterion()\n--confusion matrix\u306e\u5b9a\u7fa9(\u5b66\u7fd2\u3059\u308b\u3060\u3051\u306a\u3089\u5fc5\u8981\u306a\u3057)\nconfusion = optim.ConfusionMatrix(#classes,classes)\n--\u6700\u9069\u5316\u624b\u6cd5\u306e\u5b9a\u7fa9\noptimizer = optim.adagrad\n--\u6700\u9069\u5316\u624b\u6cd5\u306e\u521d\u671f\u5024\u306e\u6307\u5b9a(\u4ed6\u306e\u6700\u9069\u5316\u624b\u6cd5\u306e\u5834\u5408momentum\u3084weightDecay\u306a\u3069\u3082\u5fc5\u8981\u3068\u306a\u308b\u5834\u5408\u304c\u3042\u308b)\nconfig = {learningRate = 0.001}\n\n--\u5b66\u7fd2\u5bfe\u8c61\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u5f97\nparam, gparam = model:getParameters()\n\nfunction train(traindata, bsize)\n  print('training')\n  model:training() --model\u3092\u5b66\u7fd2\u30e2\u30fc\u30c9\u306b\u5909\u66f4(\u3053\u308c\u306b\u3088\u308adropout\u306e\u6709\u7121\u304c\u6c7a\u307e\u308b)\n  shuffle = torch.randperm(traindata.data:size(1))\n\n\n  for t = 1,traindata:size(), bsize do\n    xlua.progress(t, traindata:size()) --progressbar\u3092\u8868\u793a\n\n--\u5165\u529b\u30b5\u30f3\u30d7\u30eb\u3068\u30e9\u30d9\u30eb\u306e\u521d\u671f\u5316\n    local inputs = torch.FloatTensor(math.min(bsize, traindata:size()-t+1), traindata.data:size(2), traindata.data:size(3), traindata.data:size(4))\n    local targets = torch.DoubleTensor(math.min(bsize, traindata:size()-t+1))\n\n    for i = t, math.min(t+bsize-1,traindata:size()) do\n      local input = traindata.data[shuffle[i]]\n      local target = traindata.labels[shuffle[i]]\n      inputs[i-t+1] = input\n      targets[i-t+1] = target\n    end\n\n    local feval = function(x)\n      -- get new parameters\n      if x ~= param then\n        param:copy(x)\n      end\n\n      gparam:zero()\n--forward\n      local output = model:forward(inputs)\n      local err = criterion:forward(output, targets) -- loss\u306e\u8a08\u7b97\n--backward\n      local df_do = criterion:backward(output, targets) -- loss\u95a2\u6570\u306e\u5fae\u5206\u8a08\u7b97\n\n      model:backward(inputs, df_do) -- \u52fe\u914d\u306ebackward\n--confusion matrix\u306b\u7d50\u679c\u3092\u8a18\u8ff0\n      confusion:batchAdd(output:exp(), targets)\n\n      return err, gparam\n    end\n    optimizer(feval, param, config)\n  end\n  print(confusion)\n--confusion matrix\u3092\u521d\u671f\u5316\n  confusion:zero()\nend\n\n\n\n\u540c\u69d8\u306e\u30ce\u30ea\u3067\u30c6\u30b9\u30c8\u306e\u30b3\u30fc\u30c9\u3082\u66f8\u304d\u307e\u3059\u3002\n\ntester.lua\nfunction test(testdata, bsize)\n  model:evaluate() --\u8a55\u4fa1\u30e2\u30fc\u30c9\u306b\u5909\u66f4(dropout\u306e\u505c\u6b62)\n  print('testing')\n\n  for t = 1, testdata:size(), bsize do\n    xlua.progress(t, testdata:size())\n\n    inputs = testdata.data[{{t, math.min(t+bsize-1, testdata:size())},{},{},{}}]\n    targets = testdata.labels[{{t, math.min(t+bsize-1, testdata:size())}}]\n\n    local output = model:forward(inputs)\n    local err = criterion:forward(output, targets)\n\n    confusion:batchAdd(output:exp(), targets)\n\n  end\n\n  print(confusion)\n  confusion:zero()\nend\n\n\n\u6ce8\u610f\u3068\u3057\u3066\u3001\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f1\u30b5\u30f3\u30d7\u30eb\u305a\u3064forward\u3057\u3066\u3044\u308b\u305f\u3081confusion:add()\u3092\u6301\u3061\u3066\u3044\u307e\u3059\u304c\u3001mini-batch\u51e6\u7406\u306e\u5834\u5408\u306fconfusion:batchAdd()\u3092\u7528\u3044\u307e\u3059\u3002\n\n\u5b66\u7fd2\n\u5b66\u7fd2\u306e\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u305f\u306e\u3067\u3042\u3068\u306f\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307e\u305b\u3066\u5b9f\u969b\u306b\u5b66\u7fd2\u3092\u884c\u3046\u3060\u3051\u3067\u3059\u3002A_datasets\u306emnist.lua\u3067train_32x32.t7\u3068test_32x32.t7\u306b\u4fdd\u5b58\u304c\u3057\u3066\u3042\u308b\u524d\u63d0\u3067\u884c\u3044\u307e\u3059\u3002train_32x32.t7\u3068test_32x32.t7\u306ftorch.ByteTensor\u306ergb\u753b\u50cf\u3068\u6b63\u89e3\u30e9\u30d9\u30eb\u3092\u6301\u3063\u305ftable\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nmain.lua\n--confusion matrix\u7528\u306b\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\nclasses = {'1', '2', '3', '4', '5', '6', '7', '8', '9', '0'}\n--torch.Tensor\u306edefault\u3092torch.FloatTensor\u306b\u5909\u66f4\ntorch.setdefaulttensortype('torch.FloatTensor')\n\n--data\u306e\u8aad\u307f\u8fbc\u307f\ntraindata = torch.load('train_32x32.t7', 'ascii')\ntraindata.size = function() return traindata.data:size(1) end  --size\u3092\u5b9a\u7fa9\ntraindata.data = traindata.data:float() --float\u306b\u5909\u63db\n\ntestdata = torch.load('test_32x32.t7', 'ascii')\ntestdata.size = function() return testdata.data:size(1) end\ntestdata.data = testdata.data:float()\n\ndofile('model.lua')\ndofile('trainer.lua')\ndofile('tester.lua')\n\nfor epoch = 1, 50 do\n print('epoch ===> '..epoch)\n train(traindata, 256)\n test(testdata, 256)\nend\n\n\n\u3053\u308c\u3067\u5b66\u7fd2\u304c\u884c\u3048\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\u3000\u4ee5\u4e0a\u3067\u4eca\u56de\u306etorch\u306b\u95a2\u3059\u308b\u8a18\u4e8b\u306f\u7d42\u308f\u308a\u3067\u3059\u3002\u307e\u3060torch\u3092\u30e1\u30a4\u30f3\u3067\u4f7f\u3044\u59cb\u3081\u3066\u65e5\u304c\u6d45\u3044\u306e\u3067\u81ea\u5206\u81ea\u8eab\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u90e8\u5206\u3082\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u9593\u9055\u3044\u3084\u3088\u308a\u3088\u3044\u65b9\u6cd5\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u6c17\u3092\u3064\u3051\u3066\u4e0b\u3055\u3044\u3002\n#\u521d\u3081\u306b\n  \u3053\u306e\u8a18\u4e8b\u306fTorch\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306e\u89e3\u8aac?\u3092\u3057\u307e\u3059\u3002\u3061\u3087\u3063\u3068\u3057\u305f\u5fdc\u7528\u3084\u4fbf\u5229\u30c4\u30fc\u30eb\u306a\u3069\u306f[\u3053\u3061\u3089](http://qiita.com/perrying/items/707db5ea50bdb4364ce2)\n\u3000caffe,chainer,theano\u3068deeplearning\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u304d\u3066\u6700\u8fd1torch\u306b\u4e57\u308a\u63db\u3048\u305f\u306e\u3067torch\u306b\u3064\u3044\u3066\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u307e\u3068\u3081\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u306f[\u3053\u3061\u3089](https://github.com/torch/tutorials)\u306e\u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e[2_supervised](https://github.com/torch/tutorials/tree/master/2_supervised)\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n#toch\u306b\u3064\u3044\u3066\n\u3000\u65e5\u672c\u3067\u306fdeeplearning\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3044\u3048\u3070caffe\u306b\u59cb\u307e\u308a\u3001\u6700\u8fd1\u52e2\u3044\u306e\u3042\u308bTensorflow\u3084\u65e5\u672c\u3067\u958b\u767a\u304c\u3055\u308c\u3066\u3044\u308bchainer\u306a\u3069\u304c\u4e3b\u6d41\u3067\u3001\u3042\u307e\u308atorch\u306f\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u601d\u3048\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u4e16\u754c\u7684\u306b\u306ftorch\u306f\u4e3b\u6d41\u306edeeplearning\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3001Facebook\u304c\u4f7f\u7528\u3057\u3066\u3044\u308b\u3053\u3068\u3067\u3082\u6709\u540d\u3067\u3059\u3002\u753b\u50cf\u51e6\u7406\u306b\u304a\u3051\u308b\u6700\u65b0\u306e\u624b\u6cd5\u306e\u5b9f\u88c5\u3082\u591a\u304f\u3001Fast R-CNN\u3067\u4f7f\u308f\u308c\u3066\u3044\u308bROIPooling\u3084segmentation\u3067\u6700\u8fd1\u7528\u3044\u3089\u308c\u3066\u3044\u308bDilatedConvolution\u306a\u3069\u3082torch\u3067\u306f\u5b9f\u88c5\u6e08\u307f\u3067\u3059\u3002\u307e\u305fvolume\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u95a2\u6570(3DConvolution\u3084DilatedConvolution\u306e3d\u30d0\u30fc\u30b8\u30e7\u30f3\u306a\u3069)\u3082\u5145\u5b9f\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3000torch\u306e\u7279\u5fb4\u3068\u3057\u3066\u306f\u5bfe\u5fdc\u8a00\u8a9e\u304clua\u3067\u3042\u308a\u3001torch\u306e\u3068\u3063\u3064\u304d\u306b\u304f\u3055\u306e\u4e00\u3064\u3067\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059(\u81ea\u5206\u3082\u305d\u3046\u3067\u3057\u305f)\u3002\u81ea\u5206\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u77e5\u8b58\u304c\u306a\u3044\u306e\u3067\u8a73\u3057\u3044\u3053\u3068\u306f\u8a00\u3048\u307e\u305b\u3093\u304c\u3001lua\u306f\u30b9\u30af\u30ea\u30d7\u30c8\u8a00\u8a9e\u3067\u3042\u308b\u305f\u3081python\u306a\u3069\u306b\u8fd1\u3044\u66f8\u304d\u65b9\u3067\u3001jit\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u7528\u3044\u308b\u305f\u3081python\u306a\u3069\u3088\u308a\u3082\u52d5\u4f5c\u304c\u901f\u3044\u3068\u3044\u5229\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001lua\u81ea\u4f53\u306b\u306fpython\u3067\u8a00\u3046numpy\u3084matplotlib\u306e\u3088\u3046\u306a\u4fbf\u5229library\u306f\u3042\u307e\u308a\u591a\u304f\u3042\u308a\u307e\u305b\u3093\u304c(\u81ea\u5206\u304c\u8a73\u3057\u304f\u306a\u3044\u3060\u3051\u304b\u3082\u3057\u308c\u307e\u305b\u3093)torch\u306e\u62e1\u5f35\u3068\u3057\u3066\u69d8\u3005\u306alibrary\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u305d\u3053\u307e\u3067\u56f0\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n#\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u3000\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f[\u516c\u5f0f\u306einstallation](http://torch.ch/docs/getting-started.html)\u306b\u3042\u308b\u3088\u3046\u4ee5\u4e0b\u306e3\u884c\u306e\u5b9f\u884c\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u53ef\u80fd\u3067path\u306e\u66f8\u304d\u8fbc\u307f\u3082\u81ea\u52d5\u3067\u884c\u3063\u3066\u304f\u308c\u307e\u3059(cuda\u5468\u308a\u306e\u8a2d\u5b9a\u306f\u81ea\u5206\u3067)\u3002\u81ea\u5206\u306fubuntu14.04\u3068ubuntu16.04\u305d\u308c\u305e\u308c\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u884c\u3044\u307e\u3057\u305f\u3002\u307e\u305ftitan x\u3068gtx 1080\u306e\u305d\u308c\u305e\u308c\u306b\u5bfe\u3057\u3066\u3001cuda7.5(cuda8.0), cudnn v5\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066gpu\u8a08\u7b97\u306e\u52d5\u4f5c\u78ba\u8a8d\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\n``` sh\ngit clone https://github.com/torch/distro.git ~/torch --recursive\ncd ~/torch; bash install-deps;\n./install.sh\n```\n\u6ce8\u610f\u3068\u3057\u3066\u3001torch\u306eclone\u5148\u304c\u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u6307\u5b9a\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3068\u3001torch\u3092\u3069\u3053\u306bclone\u3057\u3066\u3082path\u304c\u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bclone\u3055\u308c\u305f\u524d\u63d0\u3067\u66f8\u304d\u8fbc\u307e\u308c\u308b\u3053\u3068\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002\u5225\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bclone\u3057\u305f\u3044\u5834\u5408\u306f1\u884c\u3081\u306e~/torch\u3092\u5916\u3057\u3001./install.sh\u3092\u5b9f\u884c\u5f8c\u306epath\u306e\u66f8\u304d\u8fbc\u307f\u306e\u6709\u7121\u3092no\u306b\u3057\u3066\u81ea\u5206\u3067path\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u3000\u307e\u305f\u3001add-apt-repository\u304c\u306a\u3044\u3068\u6012\u3089\u308c\u305f\u5834\u5408\u306f\u4ee5\u4e0b\u3092\u5b9f\u884c\u3057\u3066\u89e3\u6c7a\u3067\u304d\u307e\u3059\u3002\n\n```sh\nsudo apt-get install software-properties-common python-software-properties\n```\n\u540c\u69d8\u306breadline.*\u5468\u308a\u306e\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u305f\u5834\u5408\u306f\n\n```\nsudo apt-get install libreadline-dev\n```\n\u3067\u89e3\u6c7a\u3067\u304d\u307e\u3059\u3002\n\n#torch\u3067\u306e\u884c\u5217(\u753b\u50cf)\u306e\u6271\u3044\u306b\u3064\u3044\u3066\n\u3000\u3053\u3053\u304b\u3089\u306ftorch\u3092\u4f7f\u3063\u305fmnist\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u516c\u5f0f\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e[2_supervised](https://github.com/torch/tutorials/tree/master/2_supervised)\u3067\u306f[Street View House Numbers Dataset](http://ufldl.stanford.edu/housenumbers/)\u3068\u3044\u3046dataset\u3092\u4f7f\u3063\u3066\u6570\u5b57\u306e\u8a8d\u8b58\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306fmnist\u3068\u6bd4\u8f03\u3059\u308b\u3068\u30bf\u30b9\u30af\u3068\u3057\u3066\u96e3\u3057\u304f\u5358\u7d14\u306a\u30e2\u30c7\u30eb\u3067\u306floss\u304c\u843d\u3061\u305a\u7cbe\u5ea6\u304c\u306a\u304b\u306a\u304b\u4e0a\u304c\u3089\u306a\u3044\u305f\u3081\u3001\u5b66\u7fd2\u3067\u304d\u3066\u3044\u308b\u304b\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3053\u306e\u8a18\u4e8b\u3067\u306fdataset\u3092mnist\u306b\u5dee\u3057\u66ff\u3048\u307e\u3059\u3002mnist\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e[A_datasets](https://github.com/torch/tutorials/tree/master/A_datasets)\u306emnist.lua\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067download\u3067\u304d\u307e\u3059\u3002\n\n\u3000torch\u3067\u306fpython\u3067\u8a00\u3046numpy\u306e\u3088\u3046\u306a\u884c\u5217\u6f14\u7b97\u3092torch.Tensor\u3092\u7528\u3044\u3066\u884c\u3044\u307e\u3059\u3002\u8a73\u3057\u304f\u66f8\u304f\u3068\u8a18\u4e8b\u304c\u9577\u304f\u306a\u308b\u305f\u3081\u3001numpy\u3068torch.Tensor\u306e[\u5bfe\u5fdc\u8868](https://github.com/torch/torch7/wiki/Torch-for-Numpy-users)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305flua\u3067\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\u306fimage.load()\u3092\u6301\u3061\u3044\u3066\u884c\u3044\u307e\u3059\u3002\u305d\u306e\u4ed6lua\u3068python\u306e\u7d30\u304b\u3044\u9055\u3044\u306f\u66f8\u304f\u3068\u9577\u304f\u306a\u308b\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\n\n#\u3044\u3088\u3044\u3088deeplearning\n##model\u306e\u5b9a\u7fa9\ntorch\u3067\u306f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306emodel\u3092\u7d44\u3080\u306e\u306bnn\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u307e\u3059\u3002\u307e\u305ann.Sequential()\u3067\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3057\u3001\u5b9a\u7fa9\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306b\u5bfe\u3057add()\u3092\u7528\u3044\u3066\u7573\u307f\u8fbc\u307f\u3084\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u306a\u3069\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u4eca\u56de\u306fchainer\u306emnist\u306e\u4f8b\u306b\u306a\u3089\u3063\u30663\u5c64\u306e\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```lua:model.lua\nrequire 'nn'\nmodel = nn.Sequential()\nmodel:add(nn.View(32*32))\nmodel:add(nn.Linear(32*32, 1000)):add(nn.ReLU())\nmodel:add(nn.Linear(1000, 1000)):add(nn.ReLU())\nmodel:add(nn.Linear(1000, 10))\nmodel:add(nn.LogSoftMax())\nmodel = model:float()  --model\u3092float\u306b\u5909\u63db\n```\n\u3053\u306e\u30e2\u30c7\u30eb\u306fchainer\u306emnist\u306esample\u3067\u4f7f\u308f\u308c\u3066\u3044\u308bmodel\u3068\u307b\u307c\u540c\u69d8\u306e\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u307e\u3059(mnist.lua\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304f\u308bdata\u304c32\u00d732\u306e\u753b\u50cf\u3067\u3042\u308b\u305f\u3081\u5165\u529b\u304c32\u00d732\u306b\u306a\u3063\u3066\u3044\u307e\u3059)\u3002nn.View()\u306f\u5165\u529b\u3055\u308c\u305f(batchsize, channel\u6570, width, height)\u6b21\u5143\u306etorch.Tensor\u3092(batchsize, \u7dcf\u5165\u529b\u6570)\u6b21\u5143\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u4eca\u56de\u306f(batchsize, 1, 32, 32)\u306e\u5165\u529b\u304c(batchsize, 32*32)\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002nn.Linear()\u306f\u5168\u7d50\u5408\u5c64\u3092\u8868\u3057(\u5165\u529b\u30e6\u30cb\u30c3\u30c8\u6570, \u51fa\u529b\u30e6\u30cb\u30c3\u30c8\u6570)\u306b\u3088\u308a\u5b9a\u7fa9\u3057\u307e\u3059\u3002nn.ReLU()\u306f\u6d3b\u6027\u5316\u95a2\u6570\u3067\u3059\u3002\u307e\u305f\u3001\u4eca\u56de\u51fa\u529b\u306fSoftMax\u3067\u306f\u306a\u304fLogSoftMax\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u7406\u7531\u3068\u3057\u3066\u306f\u4eca\u56deloss\u95a2\u6570\u3067\u7528\u3044\u308bnn.ClassNLLCriterion\u304cnn.LogSoftMax()\u3068\u5bfe\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\n\n\u3000\u4eca\u56de\u7573\u307f\u8fbc\u307f\u3084\u30d7\u30fc\u30ea\u30f3\u30b0\u306e\u51e6\u7406\u306f\u884c\u308f\u306a\u3044\u305f\u3081model\u306badd()\u3057\u3066\u3044\u307e\u305b\u3093\u304cnn.SpatialConvolution\u3084nn.SpatialMaxPooling\u3092add()\u3059\u308b\u3053\u3068\u3067CNN\u304c\u7c21\u5358\u306b\u7d44\u3081\u307e\u3059\u3002torch\u306f\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u9055\u3044\u5165\u529b\u306etorch.Tensor\u30923\u6b21\u5143\u306b\u3057\u3066\u3082forward\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059(\u4e00\u90e8\u3067\u304d\u306a\u3044\u3082\u306e\u3082\u3042\u308b)\u3002\u5165\u529b\u306e\u6b21\u5143\u6570\u306b\u3088\u308a\u30d0\u30c3\u30c1\u51e6\u7406\u306e\u5224\u65ad\u3092\u81ea\u52d5\u3067\u884c\u3063\u3066\u304f\u308c\u308b\u305f\u3081\u3001\u753b\u50cf\uff11\u679a\u3092\u5165\u529b\u3059\u308b\u969b\u306b\u308f\u3056\u308f\u30564\u6b21\u5143\u306b\u3059\u308b\u624b\u9593\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001torch\u3067\u306fcudnn\u3092\u4f7f\u3046Convolution\u3084facebook\u304c\u5b9f\u88c5\u3057\u305f\u9ad8\u901f\u306aConvolution\u306a\u3069\u69d8\u3005\u306a\u7a2e\u985e\u306eConvolution\u304c\u3042\u308a\u307e\u3059\u3002\u8a73\u3057\u304f\u306f[\u3053\u3061\u3089](http://ultraist.hatenablog.com/entry/2015/01/30/221102)\u306e\u8a18\u4e8b\u304c\u89e3\u8aac\u3057\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u3002\n##\u30d1\u30e9\u30e1\u30fc\u30bf\u66f4\u65b0\u65b9\u6cd5\n\u3000\u5b66\u7fd2\u3059\u308b\u306e\u306b\u306floss\u95a2\u6570\u3068\u6700\u9069\u5316\u624b\u6cd5\u3092\u6c7a\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002torch\u3067\u306floss\u95a2\u6570\u306fnn\u306e\u4e2d\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059(\u8a73\u3057\u304f\u306f[\u3053\u3061\u3089](https://github.com/torch/nn/blob/master/doc/criterion.md))\u3002\u4eca\u56de\u306fSoftMax\u3092\u4f7f\u3063\u305f\u591a\u30af\u30e9\u30b9\u5206\u985e\u306e\u305f\u3081nn.ClassNLLCriterion\u3092\u7528\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u6700\u9069\u5316\u624b\u6cd5\u306foptim\u306e\u4e2d\u306b\u7528\u610f\u3055\u308c\u3066\u304a\u308a(\u8a73\u3057\u304f\u306f[\u3053\u3061\u3089](https://github.com/torch/optim))\u4eca\u56de\u306foptim.adagrad\u3092\u7528\u3044\u307e\u3059\u3002\n\n\u3000loss\u95a2\u6570\u3068\u6700\u9069\u5316\u624b\u6cd5\u304c\u6c7a\u307e\u3063\u305f\u306e\u3067\u3042\u3068\u306floss\u306e\u8a08\u7b97\u3068backward\u306e\u8a18\u8ff0\u3092\u3059\u308b\u3060\u3051\u3067\u5b66\u7fd2\u304c\u884c\u3048\u307e\u3059\u3002\u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e[4_train.lua](https://github.com/torch/tutorials/blob/master/2_supervised/4_train.lua)\u3067\u306f\u5b66\u7fd2\u306e\u90e8\u5206\u304cmini-batch\u3068\u8a00\u3044\u3064\u3064\u753b\u50cf\u3092\u4e00\u679a\u4e00\u679aforward\u3057\u3066backward\u3059\u308b\u3088\u3046\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u66f4\u65b0\u81ea\u4f53\u306f\u307e\u3068\u3081\u3066\u884c\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081mini-batch\u51e6\u7406\u3068\u3057\u3066\u554f\u984c\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u305d\u306e\u5206\u8a08\u7b97\u304c\u9045\u304f\u306a\u308b\u306e\u3067\u4eca\u56de\u306fforward\u3068backward\u3082mini-batch\u3054\u3068\u306b\u884c\u3044\u307e\u3059\u3002\n\n```lua:trainer.lua\nrequire optim\n--loss\u95a2\u6570\u306e\u5b9a\u7fa9\ncriterion = nn.ClassNLLCriterion()\n--confusion matrix\u306e\u5b9a\u7fa9(\u5b66\u7fd2\u3059\u308b\u3060\u3051\u306a\u3089\u5fc5\u8981\u306a\u3057)\nconfusion = optim.ConfusionMatrix(#classes,classes)\n--\u6700\u9069\u5316\u624b\u6cd5\u306e\u5b9a\u7fa9\noptimizer = optim.adagrad\n--\u6700\u9069\u5316\u624b\u6cd5\u306e\u521d\u671f\u5024\u306e\u6307\u5b9a(\u4ed6\u306e\u6700\u9069\u5316\u624b\u6cd5\u306e\u5834\u5408momentum\u3084weightDecay\u306a\u3069\u3082\u5fc5\u8981\u3068\u306a\u308b\u5834\u5408\u304c\u3042\u308b)\nconfig = {learningRate = 0.001}\n\n--\u5b66\u7fd2\u5bfe\u8c61\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u5f97\nparam, gparam = model:getParameters()\n\nfunction train(traindata, bsize)\n  print('training')\n  model:training() --model\u3092\u5b66\u7fd2\u30e2\u30fc\u30c9\u306b\u5909\u66f4(\u3053\u308c\u306b\u3088\u308adropout\u306e\u6709\u7121\u304c\u6c7a\u307e\u308b)\n  shuffle = torch.randperm(traindata.data:size(1))\n\n\n  for t = 1,traindata:size(), bsize do\n    xlua.progress(t, traindata:size()) --progressbar\u3092\u8868\u793a\n\n--\u5165\u529b\u30b5\u30f3\u30d7\u30eb\u3068\u30e9\u30d9\u30eb\u306e\u521d\u671f\u5316\n    local inputs = torch.FloatTensor(math.min(bsize, traindata:size()-t+1), traindata.data:size(2), traindata.data:size(3), traindata.data:size(4))\n    local targets = torch.DoubleTensor(math.min(bsize, traindata:size()-t+1))\n\n    for i = t, math.min(t+bsize-1,traindata:size()) do\n      local input = traindata.data[shuffle[i]]\n      local target = traindata.labels[shuffle[i]]\n      inputs[i-t+1] = input\n      targets[i-t+1] = target\n    end\n\n    local feval = function(x)\n      -- get new parameters\n      if x ~= param then\n        param:copy(x)\n      end\n\n      gparam:zero()\n--forward\n      local output = model:forward(inputs)\n      local err = criterion:forward(output, targets) -- loss\u306e\u8a08\u7b97\n--backward\n      local df_do = criterion:backward(output, targets) -- loss\u95a2\u6570\u306e\u5fae\u5206\u8a08\u7b97\n      \n      model:backward(inputs, df_do) -- \u52fe\u914d\u306ebackward\n--confusion matrix\u306b\u7d50\u679c\u3092\u8a18\u8ff0\n      confusion:batchAdd(output:exp(), targets)\n\n      return err, gparam\n    end\n    optimizer(feval, param, config)\n  end\n  print(confusion)\n--confusion matrix\u3092\u521d\u671f\u5316\n  confusion:zero()\nend\n\n```\n\u540c\u69d8\u306e\u30ce\u30ea\u3067\u30c6\u30b9\u30c8\u306e\u30b3\u30fc\u30c9\u3082\u66f8\u304d\u307e\u3059\u3002\n\n```lua:tester.lua\nfunction test(testdata, bsize)\n  model:evaluate() --\u8a55\u4fa1\u30e2\u30fc\u30c9\u306b\u5909\u66f4(dropout\u306e\u505c\u6b62)\n  print('testing')\n\n  for t = 1, testdata:size(), bsize do\n    xlua.progress(t, testdata:size())\n\n    inputs = testdata.data[{{t, math.min(t+bsize-1, testdata:size())},{},{},{}}]\n    targets = testdata.labels[{{t, math.min(t+bsize-1, testdata:size())}}]\n\n    local output = model:forward(inputs)\n    local err = criterion:forward(output, targets)\n\n    confusion:batchAdd(output:exp(), targets)\n\n  end\n\n  print(confusion)\n  confusion:zero()\nend\n```\n\u6ce8\u610f\u3068\u3057\u3066\u3001\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f1\u30b5\u30f3\u30d7\u30eb\u305a\u3064forward\u3057\u3066\u3044\u308b\u305f\u3081confusion:add()\u3092\u6301\u3061\u3066\u3044\u307e\u3059\u304c\u3001mini-batch\u51e6\u7406\u306e\u5834\u5408\u306fconfusion:batchAdd()\u3092\u7528\u3044\u307e\u3059\u3002\n##\u5b66\u7fd2\n\u5b66\u7fd2\u306e\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u305f\u306e\u3067\u3042\u3068\u306f\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307e\u305b\u3066\u5b9f\u969b\u306b\u5b66\u7fd2\u3092\u884c\u3046\u3060\u3051\u3067\u3059\u3002[A_datasets](https://github.com/torch/tutorials/tree/master/A_datasets)\u306emnist.lua\u3067train_32x32.t7\u3068test_32x32.t7\u306b\u4fdd\u5b58\u304c\u3057\u3066\u3042\u308b\u524d\u63d0\u3067\u884c\u3044\u307e\u3059\u3002train_32x32.t7\u3068test_32x32.t7\u306ftorch.ByteTensor\u306ergb\u753b\u50cf\u3068\u6b63\u89e3\u30e9\u30d9\u30eb\u3092\u6301\u3063\u305ftable\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```lua:main.lua\n--confusion matrix\u7528\u306b\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\nclasses = {'1', '2', '3', '4', '5', '6', '7', '8', '9', '0'}\n--torch.Tensor\u306edefault\u3092torch.FloatTensor\u306b\u5909\u66f4\ntorch.setdefaulttensortype('torch.FloatTensor')\n\n--data\u306e\u8aad\u307f\u8fbc\u307f\ntraindata = torch.load('train_32x32.t7', 'ascii')\ntraindata.size = function() return traindata.data:size(1) end  --size\u3092\u5b9a\u7fa9\ntraindata.data = traindata.data:float() --float\u306b\u5909\u63db\n\ntestdata = torch.load('test_32x32.t7', 'ascii')\ntestdata.size = function() return testdata.data:size(1) end\ntestdata.data = testdata.data:float()\n\ndofile('model.lua')\ndofile('trainer.lua')\ndofile('tester.lua')\n\nfor epoch = 1, 50 do\n print('epoch ===> '..epoch)\n train(traindata, 256)\n test(testdata, 256)\nend\n```\n\u3053\u308c\u3067\u5b66\u7fd2\u304c\u884c\u3048\u307e\u3059\u3002\n\n#\u307e\u3068\u3081\n\u3000\u4ee5\u4e0a\u3067\u4eca\u56de\u306etorch\u306b\u95a2\u3059\u308b\u8a18\u4e8b\u306f\u7d42\u308f\u308a\u3067\u3059\u3002\u307e\u3060torch\u3092\u30e1\u30a4\u30f3\u3067\u4f7f\u3044\u59cb\u3081\u3066\u65e5\u304c\u6d45\u3044\u306e\u3067\u81ea\u5206\u81ea\u8eab\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u90e8\u5206\u3082\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u9593\u9055\u3044\u3084\u3088\u308a\u3088\u3044\u65b9\u6cd5\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u6c17\u3092\u3064\u3051\u3066\u4e0b\u3055\u3044\u3002\n"}