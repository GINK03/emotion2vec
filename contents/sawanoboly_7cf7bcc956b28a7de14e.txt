{"context": " More than 1 year has passed since last update.DNS\u306e\u30d7\u30ed\u30d0\u30a4\u30c0\u304c\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u63d0\u4f9b\u3059\u308b\u3088\u3046\u306a\u30d5\u30a7\u30a4\u30eb\u30aa\u30fc\u30d0\u30fc\u306f\u304a\u5024\u6bb5\u304c\u305d\u3053\u305d\u3053\u3059\u308b\u3002\n\u4eca\u56de\u3068\u308a\u3042\u3048\u305a\u306a\u3093\u3089\u304b\u306eClockWork\u3067\u81ea\u524d\u3067\u56de\u305b\u308b\u3088\u3046\u306b\u3059\u308b\u7406\u7531\u304c\u3042\u3063\u305f\u3002\n\u5404\u7a2eCLI\u3068Shell\u3067\u3084\u308c\u3070\u5c0f\u4e00\u6642\u9593\u3067\u3067\u304d\u308b\u3088\u3046\u306a\u8a71\u3060\u304c\u3001\u52c9\u5f37\u304c\u3066\u3089\u5358\u54c1\u30d0\u30a4\u30ca\u30ea\u3092\u76ee\u6307\u3057\u3066Go\u8a00\u8a9e\u3067\u3084\u3063\u3066\u307f\u305f\u3002\n\u76ee\u6a19\u306f\u74b0\u5883\u5909\u6570\u306b\u5fc5\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3001healthbased-dnsrr dnsmple, healthbased-dnsrr route53\u306a\u611f\u3058\u3067\u3088\u308d\u3057\u304f\u3084\u308b\u3002\n\n\u3086\u308b\u3044\u6319\u52d5\n\n\u30db\u30b9\u30c8\u30ea\u30b9\u30c8\u3092HTTP\u3067\u305d\u308c\u305e\u308c\u30c1\u30a7\u30c3\u30af\n200\u3092\u8fd4\u3059\u30db\u30b9\u30c8\u3060\u3051A\u30ec\u30b3\u30fc\u30c9\u306e\u5019\u88dc\u306b\u3057\u3066\u3001\n\n\n\u30ec\u30b3\u30fc\u30c9\u304c\u306a\u3051\u308c\u3070\u767b\u9332\n\u5dee\u5206\u304c\u3042\u308c\u3070\u4fee\u6b63\n\n\n200\u3092\u8fd4\u3059\u30db\u30b9\u30c8\u304c\u306a\u3051\u308c\u3070\n\n\n\u30ec\u30b3\u30fc\u30c9\u3092\u524a\u9664\u3057\u3066\u304a\u304f\n\u30d0\u30c3\u30af\u30a2\u30c3\u30d7IP\u3092A\u30ec\u30b3\u30fc\u30c9\u306b\u30bb\u30c3\u30c8(\u672a\u5b9f\u88c5)\n\n\n\n\u3053\u3093\u306a\u3082\u3093\u3067\u3044\u3044\u304b\u3002\n\n\u9078\u3079\u308b\u30d7\u30ed\u30d0\u30a4\u30c0\u6226\u7565\nDNS\u3092\u4f7f\u308f\u305b\u3066\u3082\u3089\u3046\u6240\u306fDNSimple\u3068Route 53\u3002\u6700\u7d42\u7684\u306b\u3069\u3061\u3089\u306b\u3059\u308b\u304b\u6c7a\u3081\u3066\u306a\u3044\u306e\u3067\u4e21\u65b9\u5bfe\u5fdc\u3057\u3066\u304a\u304f\u3053\u3068\u306b\u3057\u305f\u3002\n\u30d9\u30bf\u66f8\u304d\u3067DNSimple\u3092\u66f8\u3044\u305f\u6240\u3067\u3001\u307e\u308b\u3067Go\u3089\u3057\u304f\u306a\u3044\u3088\u3046\u306a\u6c17\u304c\u3057\u305f\u306e\u3067\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4f7f\u3063\u3066\u307f\u3088\u3046\u3068\u66f8\u304d\u76f4\u3057\u3002\nDnsManage\u578b\u3092\u3064\u304f\u3063\u3066\u3001healthBased_rr\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u3082\u3063\u3066\u308c\u3070\u4f55\u3067\u3082\u3044\u3044\u3068\u3044\u3046\u611f\u3058\u306bmain\u3092\u4f5c\u6210\u3002\n\u9053\u4e2d\u304cfmt.Printf\u3060\u3089\u3051\u3060\u3063\u305f\u308a\u3001\u8272\u3005\u3068\u6c5a\u3044\u306e\u306f\u4eca\u65e5\u306f\u8ae6\u3081\u3088\u3046\u3002\n\ngo-healthbased-dnsrr/main.go\npackage main\n\nimport (\n    \"fmt\"\n    envmap \"github.com/higanworks/go-envmap\"\n    \"os\"\n    \"strings\"\n)\n\nvar envs = envmap.All()\nvar targetHosts = strings.Split(envs[\"DNS_TARGET_HOSTS\"], \",\")\nvar backupHosts = strings.Split(envs[\"DNS_BACKUP_HOSTS\"], \",\")\n\ntype DnsManage interface {\n    healthBased_rr() int\n    //  enableBackup() error\n}\n\nfunc main() {\n    os.Exit(realMain())\n}\n\nfunc realMain() int {\n    var manager DnsManage\n\n    if len(os.Args) < 2 {\n        fmt.Printf(\"Usage: healthbased-dnsrr [dnsimple|route53]\\n\")\n        return 1\n    }\n\n    switch os.Args[1] {\n    default:\n        fmt.Printf(\"Usage: healthbased-dnsrr [dnsimple|route53]\\n\")\n        return 1\n    case \"dnsimple\":\n        manager = &DnsimpleManage{\n            TargetHosts:      targetHosts,\n            BackupHosts:      backupHosts,\n            TargetRR:         envs[\"DNS_TARGET_RR\"],\n            targetDomainName: envs[\"DNS_TARGET_DOMAIN\"],\n            apiToken:         envs[\"DNSIMPLE_TOKEN\"],\n            email:            envs[\"DNSIMPLE_USER\"],\n        }\n    case \"route53\":\n        manager = &Route53Manage{\n            TargetHosts:      targetHosts,\n            BackupHosts:      backupHosts,\n            TargetRR:         envs[\"DNS_TARGET_RR\"],\n            targetDomainName: envs[\"DNS_TARGET_DOMAIN\"],\n        }\n    }\n\n    life := manager.healthBased_rr()\n    if life == 0 {\n        fmt.Printf(\"All Dead\\n\")\n        //  manager.enableBackup()\n    }\n\n    return 0\n}\n\n\n\u5f15\u6570\u304b\u3089manager\u3092\u9078\u629e\u3057\u3001\u3042\u3068\u306f\u540c\u3058\u30e1\u30bd\u30c3\u30c9\u3067\u540c\u3058\u3053\u3068\u3092\u3084\u308c\u3070\u3044\u3044\u306f\u305a\u3002\u3002\nGo\u306e\u672c\u3067\u306f\u30b4\u30eb\u30fc\u30c1\u30f3\u3084\u30c1\u30e3\u30cd\u30eb\u304c\u304b\u3063\u3053\u3088\u3055\u305d\u3046\u306b\u898b\u3048\u305f\u3001\u3057\u304b\u3057\u4eca\u65e5\u306e\u7406\u89e3\u5ea6\u3067\u306f\u7121\u7406\u306a\u306e\u3067\u30b9\u30eb\u30fc\u3002\n\u958b\u767a\u4e2d\u306e\u74b0\u5883\u5909\u6570\u306fdirenv\u3067\u5165\u308c\u3066\u304a\u304f\u3088\u3046\u306b\u3057\u305f\u3002\n\n.envrc\n.envrc \nlayout go\nexport DNSIMPLE_TOKEN='*********************'\nexport DNSIMPLE_USER='*********************@higanworks.com'\n\nexport DNS_TARGET_DOMAIN='example.net'\nexport DNS_TARGET_RR='wwwww'\nexport DNS_TARGET_HOSTS='210.152.xxx.xx1,210.152.xxx.xx2'\nexport DNS_BACKUP_HOSTS='210.152.xxx.xx3'\n\nexport AWS_ACCESS_KEY='*********************'\nexport AWS_SECRET_ACCESS_KEY='*********************'\n\n\n\nDNSimple\u7528\u306e\u51e6\u7406\nDNSimple\u306fA\u30ec\u30b3\u30fc\u30c9\u3092\u611a\u76f4\u306b\u4ed8\u3051\u5916\u3057\u3059\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u30c9\u30e1\u30a4\u30f3ID\u3092\u53d6\u5f97\u3057\u305f\u3089\u30db\u30b9\u30c8\u306e\u6b7b\u6d3b\u7d50\u679c\u3092\u500b\u5225\u306b\u53cd\u6620\u3055\u305b\u308c\u3070\u3088\u304b\u3063\u305f\u3002\nDnsimpleManage\u578b\u304c\u9032\u3080\u3054\u3068\u306b\u3058\u3083\u3093\u3058\u3083\u3093\u592a\u3063\u3066\u3044\u3063\u305f\u3002\u5f8c\u3067\u30c6\u30b9\u30c8\u3092\u66f8\u3051\u3070\u6e1b\u3089\u305b\u305d\u3046\u3060\u3002\n\ngo-healthbased-dnsrr/dnsmple.go\npackage main\n\nimport (\n    \"fmt\"\n    dnsimple \"github.com/rubyist/go-dnsimple\"\n    \"os\"\n)\n\ntype DnsimpleManage struct {\n    client            *dnsimple.DNSimpleClient\n    TargetHosts       []string\n    BackupHosts       []string\n    TargetRR          string\n    targetDomainName  string\n    targetDomainId    int\n    countAlivedTarget int\n    apiToken          string\n    email             string\n}\n\nfunc (dm *DnsimpleManage) RecordExists(records []dnsimple.Record, host string) int {\n    for _, val := range records {\n        if val.Name != dm.TargetRR {\n            continue\n        }\n        if val.Content == host {\n            fmt.Printf(\"Record: %s -> %s\\n\", val.Name, val.Content)\n            return val.Id\n        }\n    }\n    return 0\n}\n\nfunc (dm *DnsimpleManage) getDomainId() int {\n    domains, _ := dm.client.Domains()\n    for _, domain := range domains {\n        if domain.Name == dm.targetDomainName {\n            fmt.Printf(\"Domain: %s %d\\n\", domain.Name, domain.Id)\n            return domain.Id\n        }\n    }\n    return 0\n}\n\nfunc (dm *DnsimpleManage) healthBased_rr() int {\n    dm.countAlivedTarget = len(dm.TargetHosts)\n    dm.client = dnsimple.NewClient(dm.apiToken, dm.email)\n\n    // Get a list of your domains\n    dm.targetDomainId = dm.getDomainId()\n\n    if dm.targetDomainId == 0 {\n        fmt.Printf(\"Exit: Target Domain Not found.\\n\")\n        os.Exit(1)\n    }\n\n    //   Get a list of records for a domain\n    records, _ := dm.client.Records(dm.targetDomainName, \"\", \"\")\n\n    for _, val := range dm.TargetHosts {\n        r_id := dm.RecordExists(records, val)\n        status, err := tryHttp(val)\n        if err != nil {\n            if r_id != 0 {\n                fmt.Printf(\"Dead But Exists!: I'll delete [ %d ]. \\n\", r_id)\n                delRec := dnsimple.Record{Id: r_id, DomainId: dm.targetDomainId}\n                err := delRec.Delete(dm.client)\n                if err != nil {\n                    fmt.Printf(\"Delete returned error: %v\\n\", err)\n                }\n            } else {\n                fmt.Printf(\"Result: Dead\\n\")\n            }\n            dm.countAlivedTarget--\n            continue\n        }\n\n        fmt.Printf(\"Result: %d\\n\", status)\n        // Create a new Record\n        //      go func() {\n        if r_id == 0 {\n            newRec := dnsimple.Record{Name: dm.TargetRR, Content: val, RecordType: \"A\", TTL: 600}\n            rec, _ := dm.client.CreateRecord(dm.targetDomainName, newRec)\n            fmt.Printf(\"RecordID: %d\\n\", rec.Id)\n        } else {\n            fmt.Printf(\"Record Already Exists\\n\")\n        }\n        //      }()\n    }\n\n    return dm.countAlivedTarget\n}\n\nfunc (dm *DnsimpleManage) enableBackup() int {\n    return 0\n}\n\n\nDNSimple\u5bfe\u5fdc\u3092\u52d5\u304b\u3059\u3068\u3053\u3093\u306a\u611f\u3058\u3002\u672b\u5c3e1\u306e\u30db\u30b9\u30c8\u306b\u5230\u9054\u6027\u304c\u7121\u3044\u306e\u3067\u5916\u3057\u305f\u6642\u306e\u30ed\u30b0\u3002\n$ ./build/darwin/amd64/healthbased-dnsrr dnsimple\nDomain: example.net 119xxx\nRecord: wwwww -> 210.152.xxx.xx1\nDead But Exists!: I'll delete [ 39xxxxx ]. \nRecord: wwwww -> 210.152.xxx.xx2\nResult: 200\nRecord Already Exists\n\n\nRoute 53\u7528\u306e\u51e6\u7406\nRoute 53\u306f1\u3064\u306e\u30ec\u30b3\u30fc\u30c9\u30bb\u30c3\u30c8\u306b\u8907\u6570\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u542b\u3080\u306e\u3067\u5fae\u5999\u306b\u3084\u3084\u3053\u3057\u3044\u3002\n\u6b7b\u6d3b\u306e\u7d50\u679c\u306b\u52a0\u3048\u3066\u3001\u73fe\u72b6\u3092\u3068\u3063\u3066\u304a\u3044\u3066\u5dee\u5206\u304c\u3042\u308c\u3070\u4e0a\u66f8\u304d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001API\u30b3\u30fc\u30eb\u3082\u30d0\u30c3\u30c1\u98a8\u3067\u3051\u3063\u3053\u3046\u306a\u975e\u540c\u671f\u3002UPSERT\u304c\u7121\u304b\u3063\u305f\u3089\u304d\u3063\u3068\u3064\u3089\u3044\u601d\u3044\u3092\u3057\u3066\u3044\u305f\u3002\n\u4eca\u56de\u306f\u5171\u901a\u3067\u30c9\u30e1\u30a4\u30f3\u540d\u3092\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3001HostedZoneID\u306e\u7279\u5b9a\u306bListHostedZonesByName\u3092\u4f7f\u3063\u305f\u3002\nHostedZone\u306f\u4e00\u5ea6\u306b\u6700\u5927100\u4ef6\u53d6\u5f97\u3067\u304d\u308b\u304c\u3001\u5bfe\u8c61\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u306f\u30c9\u30e1\u30a4\u30f3200\u3092\u8d85\u3048\u3066\u3044\u308b\u306e\u3067\u5168\u90e8\u53d6\u3063\u3066\u304f\u308b\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u3002\n\u306a\u304aRoute 53\u3067\u306f\u540c\u540d\u306e\u30c9\u30e1\u30a4\u30f3\u3092\u4f5c\u308c\u308b\u306e\u3067\u3001\u5b9f\u306f\u3053\u306e\u307e\u307e\u3067\u306f\u8aa4\u7206\u306e\u53ef\u80fd\u6027\u306f\u3042\u308b\u3002\u3059\u306a\u304a\u306bID\u3092\u63a7\u3048\u305f\u307b\u3046\u304c\u3044\u3044\u3093\u3060\u308d\u3046\u3002\n\u3064\u3044\u3067\u306b\u3001\u3053\u306e\u307e\u307e\u3067\u306fhealthBased_rr\u304c\u9577\u3059\u304e\u308b\u3002 err\u304c\u304b\u3076\u3063\u3066err2\u3068\u304b\u51fa\u3066\u304d\u3066\u3044\u308b\u3057\u3002\u5f8c\u3067\u95a2\u6570\u306b\u3057\u3066\u304a\u3053\u3046\u3002\n\ngo-healthbased-dnsrr/route53.go\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/higanworks/goamz/route53\"\n    \"github.com/mitchellh/goamz/aws\"\n    \"reflect\"\n    \"sort\"\n    \"strings\"\n)\n\ntype Route53Manage struct {\n    client            *route53.Route53\n    TargetHosts       []string\n    currentRRHosts    []string\n    updateRRHosts     []string\n    BackupHosts       []string\n    TargetRR          string\n    targetDomainName  string\n    targetDomainId    string\n    countAlivedTarget int\n}\n\nfunc (dm *Route53Manage) extractDomainId(res_id string) string {\n    id := strings.Split(res_id, \"/\")\n    return id[2]\n}\n\nfunc (dm *Route53Manage) RecordExists(records []route53.ResourceRecordSet) route53.ResourceRecordSet {\n    fmt.Printf(\"Finding: \" + dm.TargetRR + \".\" + dm.targetDomainName + \".\\n\")\n    for _, val := range records {\n        if val.Name == dm.TargetRR+\".\"+dm.targetDomainName+\".\" {\n            return val\n        } else if val.Name == dm.TargetRR+\".\"+dm.targetDomainName {\n            return val\n        }\n    }\n    return route53.ResourceRecordSet{}\n}\n\nfunc (dm *Route53Manage) getDomainId() string {\n    res, _ := dm.client.ListHostedZonesByName(dm.targetDomainName, \"\", 1)\n\n    for _, zone := range res.HostedZones {\n        if zone.Name == dm.targetDomainName+\".\" {\n            fmt.Printf(\"Found: %s: %s\\n\", zone.ID, zone.Name)\n            return dm.extractDomainId(zone.ID)\n        } else if zone.Name == dm.targetDomainName {\n            fmt.Printf(\"Found: %s: %s\\n\", zone.ID, zone.Name)\n            return dm.extractDomainId(zone.ID)\n        }\n    }\n    return \"0\"\n}\n\nfunc (dm *Route53Manage) healthBased_rr() int {\n    dm.countAlivedTarget = len(dm.TargetHosts)\n\n    auth, _ := aws.EnvAuth() // AWS_ACCESS_KEY, AWS_SECRET_ACCESS_KEY\n    dm.client = route53.New(auth, aws.USEast)\n\n    // Get a list of your domains\n    dm.targetDomainId = dm.getDomainId()\n\n    res, err := dm.client.ListResourceRecordSets(dm.targetDomainId, nil)\n    if err != nil {\n        panic(err)\n    }\n\n    rrr := dm.RecordExists(res.Records)\n    if rrr.Name != \"\" {\n        dm.currentRRHosts = rrr.Records\n        fmt.Printf(\"Current RR record: %q\\n\", dm.currentRRHosts)\n    } else {\n        fmt.Printf(\"Current RR record: Nothing\\n\")\n    }\n\n    for _, host := range dm.TargetHosts {\n        status, _ := tryHttp(host)\n        if err != nil {\n            status = 0\n        }\n        fmt.Printf(\"Check HTTP: %s %d\\n\", host, status)\n        if status != 200 {\n            dm.countAlivedTarget--\n            continue\n        }\n        dm.updateRRHosts = append(dm.updateRRHosts, host)\n    }\n\n    sort.StringSlice(dm.updateRRHosts).Sort()\n    sort.StringSlice(dm.currentRRHosts).Sort()\n    sort.StringSlice(dm.BackupHosts).Sort()\n    fmt.Printf(\"Avaliable targets: %q\\n\", dm.updateRRHosts)\n    if !reflect.DeepEqual(dm.updateRRHosts, dm.currentRRHosts) {\n        var req route53.ChangeResourceRecordSetsRequest\n        var req_rr route53.ResourceRecordSet\n        var change route53.Change\n\n        if dm.countAlivedTarget != 0 {\n            fmt.Printf(\"Found difference, I'll fix it.\\n\")\n\n            req_rr.Name = dm.TargetRR + \".\" + dm.targetDomainName + \".\"\n            req_rr.Type = \"A\"\n            req_rr.TTL = 600\n            req_rr.Records = dm.updateRRHosts\n\n            change.Action = \"UPSERT\"\n            change.Record = req_rr\n\n            req.Comment = change.Action + \" to \" + dm.TargetRR + \".\" + dm.targetDomainName + \".\"\n            req.Changes = append(req.Changes, change)\n\n            res, err2 := dm.client.ChangeResourceRecordSets(dm.targetDomainId, &req)\n            if err2 != nil {\n                panic(err)\n            }\n            fmt.Printf(\"Change Status: %s\\n\", res.ChangeInfo.Status)\n        } else {\n            // Delete if BackupHosts Empty\n            if dm.targetDomainId != \"0\" {\n                fmt.Printf(\"All Hosts dead. I'll delete rrset.\\n\")\n\n                req_rr.Name = dm.TargetRR + \".\" + dm.targetDomainName + \".\"\n                req_rr.Type = \"A\"\n                req_rr.TTL = 600\n                req_rr.Records = dm.currentRRHosts\n\n                change.Action = \"DELETE\"\n                change.Record = req_rr\n\n                req.Comment = change.Action + \" to \" + dm.TargetRR + \".\" + dm.targetDomainName + \".\"\n                req.Changes = append(req.Changes, change)\n\n                res, err2 := dm.client.ChangeResourceRecordSets(dm.targetDomainId, &req)\n                if err2 != nil {\n                    panic(err2)\n                }\n                fmt.Printf(\"Change Status: %s\\n\", res.ChangeInfo.Status)\n            }\n        }\n    }\n\n    return dm.countAlivedTarget\n}\n\n\nRoute 53\u5bfe\u5fdc\u3092\u52d5\u304b\u3059\u3068\u3053\u3093\u306a\u611f\u3058\u3002\u3055\u3063\u304d\u5916\u308c\u305f\u672b\u5c3e1\u306e\u30db\u30b9\u30c8\u304c\u5fa9\u5e30\u3057\u305f\u6642\u306e\u30ed\u30b0\u3002\n$ ./build/darwin/amd64/healthbased-dnsrr route53\nFound: /hostedzone/Z1KM1PIxxxxxxx: example.net.\nFinding: wwwww.example.net.\nCurrent RR record: [\"210.152.xxx.xx2\"]\nCheck HTTP: 210.152.xxx.xx1 200\nCheck HTTP: 210.152.xxx.xx2 200\nAvaliable targets: [\"210.152.xxx.xx1\" \"210.152.xxx.xx2\"]\nFound difference, I'll fix it.\nChange Status: PENDING\n\n\u30ed\u30b0\u304c\u30d7\u30ed\u30d0\u30a4\u30c0\u306b\u3088\u3063\u3066\u307e\u308b\u3067\u4e0d\u63c3\u3044\u306a\u306e\u306f\u65e5\u4ed8\u3092\u307e\u305f\u3044\u3060\u304b\u3089\u3060\u306a\u3002\n\nHTTP\u306e\u6b7b\u6d3b\u30c1\u30a7\u30c3\u30af\n\u96d1\u306b10\u79d2\u3092\u30ea\u30df\u30c3\u30c8\u3067\u3064\u3064\u3044\u305f\u3002Ping\u3067\u898b\u308b\u3088\u308a\u3044\u3044\u3060\u308d\u3046\u3002\n\ngo-healthbased-dnsrr/http_checker.go\npackage main\n\nimport (\n    \"net/http\"\n    \"time\"\n)\n\nvar httpClient = &http.Client{Timeout: time.Duration(10) * time.Second}\n\nfunc tryHttp(host string) (int, error) {\n    resp, err := httpClient.Get(\"http://\" + host + \"/\")\n    if err != nil {\n        return 0, err\n    }\n    defer resp.Body.Close()\n    return resp.StatusCode, err\n}\n\n\n\u3053\u308c\u3060\u3051\u66f8\u3044\u3066\u306a\u3093\u3068\u304b\u76ee\u7684\u306f\u3060\u3044\u305f\u3044OK\u3002 \u307b\u307c\u308f\u304b\u3089\u306a\u3044\u6240\u304b\u3089\u3060\u3063\u305f\u304c\u3001if err != nil\u304b\u3089\u306epanic(err)(\u5f8c\u3067\u3044\u304f\u3089\u304b\u524a\u9664)\u3092\u9069\u5f53\u306b\u3044\u308c\u3066\u304a\u304f\u3060\u3051\u3067\u3060\u3044\u3076\u9055\u3063\u305f\u3002\n\nMac\u3068Linux\u7528\u306b\u30d3\u30eb\u30c9\nRundeck\u3067\u306e\u5b9f\u884c\u3092\u60f3\u5b9a\u3057\u305f\u306e\u3067\u3001Linux\u7528\u306b\u30d3\u30eb\u30c9\u3059\u308b\u3002gox\u3092\u4f7f\u3063\u305f\u3002\ngox\u3067\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u8abf\u6574\u3057\u3066\u30d3\u30eb\u30c9\u3002\n\ngo-healthbased-dnsrr/build.sh\ngox -osarch=\"linux/amd64 darwin/amd64\" --output=\"build/{{.OS}}/{{.Arch}}/healthbased-dnsrr\"\n\n\nbuild.sh\u3067\u3053\u306e\u8fba\u304c\u3067\u304d\u308b\u3002\n$ tree build\nbuild\n\u251c\u2500\u2500 darwin\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 amd64\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 healthbased-dnsrr\n\u2514\u2500\u2500 linux\n    \u2514\u2500\u2500 amd64\n        \u2514\u2500\u2500 healthbased-dnsrr\n\n4 directories, 2 files\n\nLinux\u306b\u5358\u54c1\u30d0\u30a4\u30ca\u30ea\u3092\u904b\u3093\u3060\u6240\u3001\u3061\u3083\u3093\u3068\u52d5\u3044\u305f\u3002\u901f\u3044\u3057\u3001\u4f55\u3088\u308a\u4f9d\u5b58\u304c\u5168\u304f\u306a\u3044\u306e\u3067\u914d\u5099\u304c\u3068\u3063\u3066\u3082\u697d\u3060\u3002\n\nDNS\u306e\u30d7\u30ed\u30d0\u30a4\u30c0\u304c\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u63d0\u4f9b\u3059\u308b\u3088\u3046\u306a\u30d5\u30a7\u30a4\u30eb\u30aa\u30fc\u30d0\u30fc\u306f\u304a\u5024\u6bb5\u304c\u305d\u3053\u305d\u3053\u3059\u308b\u3002\n\u4eca\u56de\u3068\u308a\u3042\u3048\u305a\u306a\u3093\u3089\u304b\u306eClockWork\u3067\u81ea\u524d\u3067\u56de\u305b\u308b\u3088\u3046\u306b\u3059\u308b\u7406\u7531\u304c\u3042\u3063\u305f\u3002\n\n\u5404\u7a2eCLI\u3068Shell\u3067\u3084\u308c\u3070\u5c0f\u4e00\u6642\u9593\u3067\u3067\u304d\u308b\u3088\u3046\u306a\u8a71\u3060\u304c\u3001\u52c9\u5f37\u304c\u3066\u3089\u5358\u54c1\u30d0\u30a4\u30ca\u30ea\u3092\u76ee\u6307\u3057\u3066Go\u8a00\u8a9e\u3067\u3084\u3063\u3066\u307f\u305f\u3002\n\n\u76ee\u6a19\u306f\u74b0\u5883\u5909\u6570\u306b\u5fc5\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3001`healthbased-dnsrr dnsmple`, `healthbased-dnsrr route53`\u306a\u611f\u3058\u3067\u3088\u308d\u3057\u304f\u3084\u308b\u3002\n\n\n## \u3086\u308b\u3044\u6319\u52d5\n\n- \u30db\u30b9\u30c8\u30ea\u30b9\u30c8\u3092HTTP\u3067\u305d\u308c\u305e\u308c\u30c1\u30a7\u30c3\u30af\n- 200\u3092\u8fd4\u3059\u30db\u30b9\u30c8\u3060\u3051A\u30ec\u30b3\u30fc\u30c9\u306e\u5019\u88dc\u306b\u3057\u3066\u3001\n    - \u30ec\u30b3\u30fc\u30c9\u304c\u306a\u3051\u308c\u3070\u767b\u9332\n    - \u5dee\u5206\u304c\u3042\u308c\u3070\u4fee\u6b63\n- 200\u3092\u8fd4\u3059\u30db\u30b9\u30c8\u304c\u306a\u3051\u308c\u3070\n    - \u30ec\u30b3\u30fc\u30c9\u3092\u524a\u9664\u3057\u3066\u304a\u304f\n    - \u30d0\u30c3\u30af\u30a2\u30c3\u30d7IP\u3092A\u30ec\u30b3\u30fc\u30c9\u306b\u30bb\u30c3\u30c8(\u672a\u5b9f\u88c5)\n\n\u3053\u3093\u306a\u3082\u3093\u3067\u3044\u3044\u304b\u3002\n\n## \u9078\u3079\u308b\u30d7\u30ed\u30d0\u30a4\u30c0\u6226\u7565\n\nDNS\u3092\u4f7f\u308f\u305b\u3066\u3082\u3089\u3046\u6240\u306fDNSimple\u3068Route 53\u3002\u6700\u7d42\u7684\u306b\u3069\u3061\u3089\u306b\u3059\u308b\u304b\u6c7a\u3081\u3066\u306a\u3044\u306e\u3067\u4e21\u65b9\u5bfe\u5fdc\u3057\u3066\u304a\u304f\u3053\u3068\u306b\u3057\u305f\u3002\n\n\u30d9\u30bf\u66f8\u304d\u3067DNSimple\u3092\u66f8\u3044\u305f\u6240\u3067\u3001\u307e\u308b\u3067Go\u3089\u3057\u304f\u306a\u3044\u3088\u3046\u306a\u6c17\u304c\u3057\u305f\u306e\u3067\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4f7f\u3063\u3066\u307f\u3088\u3046\u3068\u66f8\u304d\u76f4\u3057\u3002\nDnsManage\u578b\u3092\u3064\u304f\u3063\u3066\u3001`healthBased_rr`\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u3082\u3063\u3066\u308c\u3070\u4f55\u3067\u3082\u3044\u3044\u3068\u3044\u3046\u611f\u3058\u306bmain\u3092\u4f5c\u6210\u3002\n\u9053\u4e2d\u304c`fmt.Printf`\u3060\u3089\u3051\u3060\u3063\u305f\u308a\u3001\u8272\u3005\u3068\u6c5a\u3044\u306e\u306f\u4eca\u65e5\u306f\u8ae6\u3081\u3088\u3046\u3002\n\n```go-healthbased-dnsrr/main.go\npackage main\n\nimport (\n\t\"fmt\"\n\tenvmap \"github.com/higanworks/go-envmap\"\n\t\"os\"\n\t\"strings\"\n)\n\nvar envs = envmap.All()\nvar targetHosts = strings.Split(envs[\"DNS_TARGET_HOSTS\"], \",\")\nvar backupHosts = strings.Split(envs[\"DNS_BACKUP_HOSTS\"], \",\")\n\ntype DnsManage interface {\n\thealthBased_rr() int\n\t//\tenableBackup() error\n}\n\nfunc main() {\n\tos.Exit(realMain())\n}\n\nfunc realMain() int {\n\tvar manager DnsManage\n\n\tif len(os.Args) < 2 {\n\t\tfmt.Printf(\"Usage: healthbased-dnsrr [dnsimple|route53]\\n\")\n\t\treturn 1\n\t}\n\n\tswitch os.Args[1] {\n\tdefault:\n\t\tfmt.Printf(\"Usage: healthbased-dnsrr [dnsimple|route53]\\n\")\n\t\treturn 1\n\tcase \"dnsimple\":\n\t\tmanager = &DnsimpleManage{\n\t\t\tTargetHosts:      targetHosts,\n\t\t\tBackupHosts:      backupHosts,\n\t\t\tTargetRR:         envs[\"DNS_TARGET_RR\"],\n\t\t\ttargetDomainName: envs[\"DNS_TARGET_DOMAIN\"],\n\t\t\tapiToken:         envs[\"DNSIMPLE_TOKEN\"],\n\t\t\temail:            envs[\"DNSIMPLE_USER\"],\n\t\t}\n\tcase \"route53\":\n\t\tmanager = &Route53Manage{\n\t\t\tTargetHosts:      targetHosts,\n\t\t\tBackupHosts:      backupHosts,\n\t\t\tTargetRR:         envs[\"DNS_TARGET_RR\"],\n\t\t\ttargetDomainName: envs[\"DNS_TARGET_DOMAIN\"],\n\t\t}\n\t}\n\n\tlife := manager.healthBased_rr()\n\tif life == 0 {\n\t\tfmt.Printf(\"All Dead\\n\")\n\t\t//\tmanager.enableBackup()\n\t}\n\n\treturn 0\n}\n```\n\n\u5f15\u6570\u304b\u3089manager\u3092\u9078\u629e\u3057\u3001\u3042\u3068\u306f\u540c\u3058\u30e1\u30bd\u30c3\u30c9\u3067\u540c\u3058\u3053\u3068\u3092\u3084\u308c\u3070\u3044\u3044\u306f\u305a\u3002\u3002\nGo\u306e\u672c\u3067\u306f\u30b4\u30eb\u30fc\u30c1\u30f3\u3084\u30c1\u30e3\u30cd\u30eb\u304c\u304b\u3063\u3053\u3088\u3055\u305d\u3046\u306b\u898b\u3048\u305f\u3001\u3057\u304b\u3057\u4eca\u65e5\u306e\u7406\u89e3\u5ea6\u3067\u306f\u7121\u7406\u306a\u306e\u3067\u30b9\u30eb\u30fc\u3002\n\n\u958b\u767a\u4e2d\u306e\u74b0\u5883\u5909\u6570\u306fdirenv\u3067\u5165\u308c\u3066\u304a\u304f\u3088\u3046\u306b\u3057\u305f\u3002\n\n```shell:.envrc\n.envrc \nlayout go\nexport DNSIMPLE_TOKEN='*********************'\nexport DNSIMPLE_USER='*********************@higanworks.com'\n\nexport DNS_TARGET_DOMAIN='example.net'\nexport DNS_TARGET_RR='wwwww'\nexport DNS_TARGET_HOSTS='210.152.xxx.xx1,210.152.xxx.xx2'\nexport DNS_BACKUP_HOSTS='210.152.xxx.xx3'\n\nexport AWS_ACCESS_KEY='*********************'\nexport AWS_SECRET_ACCESS_KEY='*********************'\n```\n\n\n### DNSimple\u7528\u306e\u51e6\u7406\n\nDNSimple\u306fA\u30ec\u30b3\u30fc\u30c9\u3092\u611a\u76f4\u306b\u4ed8\u3051\u5916\u3057\u3059\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u30c9\u30e1\u30a4\u30f3ID\u3092\u53d6\u5f97\u3057\u305f\u3089\u30db\u30b9\u30c8\u306e\u6b7b\u6d3b\u7d50\u679c\u3092\u500b\u5225\u306b\u53cd\u6620\u3055\u305b\u308c\u3070\u3088\u304b\u3063\u305f\u3002\n\nDnsimpleManage\u578b\u304c\u9032\u3080\u3054\u3068\u306b\u3058\u3083\u3093\u3058\u3083\u3093\u592a\u3063\u3066\u3044\u3063\u305f\u3002\u5f8c\u3067\u30c6\u30b9\u30c8\u3092\u66f8\u3051\u3070\u6e1b\u3089\u305b\u305d\u3046\u3060\u3002\n\n\n```go-healthbased-dnsrr/dnsmple.go\npackage main\n\nimport (\n\t\"fmt\"\n\tdnsimple \"github.com/rubyist/go-dnsimple\"\n\t\"os\"\n)\n\ntype DnsimpleManage struct {\n\tclient            *dnsimple.DNSimpleClient\n\tTargetHosts       []string\n\tBackupHosts       []string\n\tTargetRR          string\n\ttargetDomainName  string\n\ttargetDomainId    int\n\tcountAlivedTarget int\n\tapiToken          string\n\temail             string\n}\n\nfunc (dm *DnsimpleManage) RecordExists(records []dnsimple.Record, host string) int {\n\tfor _, val := range records {\n\t\tif val.Name != dm.TargetRR {\n\t\t\tcontinue\n\t\t}\n\t\tif val.Content == host {\n\t\t\tfmt.Printf(\"Record: %s -> %s\\n\", val.Name, val.Content)\n\t\t\treturn val.Id\n\t\t}\n\t}\n\treturn 0\n}\n\nfunc (dm *DnsimpleManage) getDomainId() int {\n\tdomains, _ := dm.client.Domains()\n\tfor _, domain := range domains {\n\t\tif domain.Name == dm.targetDomainName {\n\t\t\tfmt.Printf(\"Domain: %s %d\\n\", domain.Name, domain.Id)\n\t\t\treturn domain.Id\n\t\t}\n\t}\n\treturn 0\n}\n\nfunc (dm *DnsimpleManage) healthBased_rr() int {\n\tdm.countAlivedTarget = len(dm.TargetHosts)\n\tdm.client = dnsimple.NewClient(dm.apiToken, dm.email)\n\n\t// Get a list of your domains\n\tdm.targetDomainId = dm.getDomainId()\n\n\tif dm.targetDomainId == 0 {\n\t\tfmt.Printf(\"Exit: Target Domain Not found.\\n\")\n\t\tos.Exit(1)\n\t}\n\n\t//\t Get a list of records for a domain\n\trecords, _ := dm.client.Records(dm.targetDomainName, \"\", \"\")\n\n\tfor _, val := range dm.TargetHosts {\n\t\tr_id := dm.RecordExists(records, val)\n\t\tstatus, err := tryHttp(val)\n\t\tif err != nil {\n\t\t\tif r_id != 0 {\n\t\t\t\tfmt.Printf(\"Dead But Exists!: I'll delete [ %d ]. \\n\", r_id)\n\t\t\t\tdelRec := dnsimple.Record{Id: r_id, DomainId: dm.targetDomainId}\n\t\t\t\terr := delRec.Delete(dm.client)\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Printf(\"Delete returned error: %v\\n\", err)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"Result: Dead\\n\")\n\t\t\t}\n\t\t\tdm.countAlivedTarget--\n\t\t\tcontinue\n\t\t}\n\n\t\tfmt.Printf(\"Result: %d\\n\", status)\n\t\t// Create a new Record\n\t\t//\t\tgo func() {\n\t\tif r_id == 0 {\n\t\t\tnewRec := dnsimple.Record{Name: dm.TargetRR, Content: val, RecordType: \"A\", TTL: 600}\n\t\t\trec, _ := dm.client.CreateRecord(dm.targetDomainName, newRec)\n\t\t\tfmt.Printf(\"RecordID: %d\\n\", rec.Id)\n\t\t} else {\n\t\t\tfmt.Printf(\"Record Already Exists\\n\")\n\t\t}\n\t\t//\t\t}()\n\t}\n\n\treturn dm.countAlivedTarget\n}\n\nfunc (dm *DnsimpleManage) enableBackup() int {\n\treturn 0\n}\n```\n\nDNSimple\u5bfe\u5fdc\u3092\u52d5\u304b\u3059\u3068\u3053\u3093\u306a\u611f\u3058\u3002\u672b\u5c3e1\u306e\u30db\u30b9\u30c8\u306b\u5230\u9054\u6027\u304c\u7121\u3044\u306e\u3067\u5916\u3057\u305f\u6642\u306e\u30ed\u30b0\u3002\n\n```\n$ ./build/darwin/amd64/healthbased-dnsrr dnsimple\nDomain: example.net 119xxx\nRecord: wwwww -> 210.152.xxx.xx1\nDead But Exists!: I'll delete [ 39xxxxx ]. \nRecord: wwwww -> 210.152.xxx.xx2\nResult: 200\nRecord Already Exists\n```\n\n\n### Route 53\u7528\u306e\u51e6\u7406\n\nRoute 53\u306f1\u3064\u306e\u30ec\u30b3\u30fc\u30c9\u30bb\u30c3\u30c8\u306b\u8907\u6570\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u542b\u3080\u306e\u3067\u5fae\u5999\u306b\u3084\u3084\u3053\u3057\u3044\u3002\n\u6b7b\u6d3b\u306e\u7d50\u679c\u306b\u52a0\u3048\u3066\u3001\u73fe\u72b6\u3092\u3068\u3063\u3066\u304a\u3044\u3066\u5dee\u5206\u304c\u3042\u308c\u3070\u4e0a\u66f8\u304d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001API\u30b3\u30fc\u30eb\u3082\u30d0\u30c3\u30c1\u98a8\u3067\u3051\u3063\u3053\u3046\u306a\u975e\u540c\u671f\u3002UPSERT\u304c\u7121\u304b\u3063\u305f\u3089\u304d\u3063\u3068\u3064\u3089\u3044\u601d\u3044\u3092\u3057\u3066\u3044\u305f\u3002\n\n\u4eca\u56de\u306f\u5171\u901a\u3067\u30c9\u30e1\u30a4\u30f3\u540d\u3092\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3001HostedZoneID\u306e\u7279\u5b9a\u306bListHostedZonesByName\u3092\u4f7f\u3063\u305f\u3002\nHostedZone\u306f\u4e00\u5ea6\u306b\u6700\u5927100\u4ef6\u53d6\u5f97\u3067\u304d\u308b\u304c\u3001\u5bfe\u8c61\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u306f\u30c9\u30e1\u30a4\u30f3200\u3092\u8d85\u3048\u3066\u3044\u308b\u306e\u3067\u5168\u90e8\u53d6\u3063\u3066\u304f\u308b\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u3002\n\n\u306a\u304aRoute 53\u3067\u306f\u540c\u540d\u306e\u30c9\u30e1\u30a4\u30f3\u3092\u4f5c\u308c\u308b\u306e\u3067\u3001\u5b9f\u306f\u3053\u306e\u307e\u307e\u3067\u306f\u8aa4\u7206\u306e\u53ef\u80fd\u6027\u306f\u3042\u308b\u3002\u3059\u306a\u304a\u306bID\u3092\u63a7\u3048\u305f\u307b\u3046\u304c\u3044\u3044\u3093\u3060\u308d\u3046\u3002\n\u3064\u3044\u3067\u306b\u3001\u3053\u306e\u307e\u307e\u3067\u306f`healthBased_rr`\u304c\u9577\u3059\u304e\u308b\u3002 err\u304c\u304b\u3076\u3063\u3066err2\u3068\u304b\u51fa\u3066\u304d\u3066\u3044\u308b\u3057\u3002\u5f8c\u3067\u95a2\u6570\u306b\u3057\u3066\u304a\u3053\u3046\u3002\n\n```go-healthbased-dnsrr/route53.go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/higanworks/goamz/route53\"\n\t\"github.com/mitchellh/goamz/aws\"\n\t\"reflect\"\n\t\"sort\"\n\t\"strings\"\n)\n\ntype Route53Manage struct {\n\tclient            *route53.Route53\n\tTargetHosts       []string\n\tcurrentRRHosts    []string\n\tupdateRRHosts     []string\n\tBackupHosts       []string\n\tTargetRR          string\n\ttargetDomainName  string\n\ttargetDomainId    string\n\tcountAlivedTarget int\n}\n\nfunc (dm *Route53Manage) extractDomainId(res_id string) string {\n\tid := strings.Split(res_id, \"/\")\n\treturn id[2]\n}\n\nfunc (dm *Route53Manage) RecordExists(records []route53.ResourceRecordSet) route53.ResourceRecordSet {\n\tfmt.Printf(\"Finding: \" + dm.TargetRR + \".\" + dm.targetDomainName + \".\\n\")\n\tfor _, val := range records {\n\t\tif val.Name == dm.TargetRR+\".\"+dm.targetDomainName+\".\" {\n\t\t\treturn val\n\t\t} else if val.Name == dm.TargetRR+\".\"+dm.targetDomainName {\n\t\t\treturn val\n\t\t}\n\t}\n\treturn route53.ResourceRecordSet{}\n}\n\nfunc (dm *Route53Manage) getDomainId() string {\n\tres, _ := dm.client.ListHostedZonesByName(dm.targetDomainName, \"\", 1)\n\n\tfor _, zone := range res.HostedZones {\n\t\tif zone.Name == dm.targetDomainName+\".\" {\n\t\t\tfmt.Printf(\"Found: %s: %s\\n\", zone.ID, zone.Name)\n\t\t\treturn dm.extractDomainId(zone.ID)\n\t\t} else if zone.Name == dm.targetDomainName {\n\t\t\tfmt.Printf(\"Found: %s: %s\\n\", zone.ID, zone.Name)\n\t\t\treturn dm.extractDomainId(zone.ID)\n\t\t}\n\t}\n\treturn \"0\"\n}\n\nfunc (dm *Route53Manage) healthBased_rr() int {\n\tdm.countAlivedTarget = len(dm.TargetHosts)\n\n\tauth, _ := aws.EnvAuth() // AWS_ACCESS_KEY, AWS_SECRET_ACCESS_KEY\n\tdm.client = route53.New(auth, aws.USEast)\n\n\t// Get a list of your domains\n\tdm.targetDomainId = dm.getDomainId()\n\n\tres, err := dm.client.ListResourceRecordSets(dm.targetDomainId, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trrr := dm.RecordExists(res.Records)\n\tif rrr.Name != \"\" {\n\t\tdm.currentRRHosts = rrr.Records\n\t\tfmt.Printf(\"Current RR record: %q\\n\", dm.currentRRHosts)\n\t} else {\n\t\tfmt.Printf(\"Current RR record: Nothing\\n\")\n\t}\n\n\tfor _, host := range dm.TargetHosts {\n\t\tstatus, _ := tryHttp(host)\n\t\tif err != nil {\n\t\t\tstatus = 0\n\t\t}\n\t\tfmt.Printf(\"Check HTTP: %s %d\\n\", host, status)\n\t\tif status != 200 {\n\t\t\tdm.countAlivedTarget--\n\t\t\tcontinue\n\t\t}\n\t\tdm.updateRRHosts = append(dm.updateRRHosts, host)\n\t}\n\n\tsort.StringSlice(dm.updateRRHosts).Sort()\n\tsort.StringSlice(dm.currentRRHosts).Sort()\n\tsort.StringSlice(dm.BackupHosts).Sort()\n\tfmt.Printf(\"Avaliable targets: %q\\n\", dm.updateRRHosts)\n\tif !reflect.DeepEqual(dm.updateRRHosts, dm.currentRRHosts) {\n\t\tvar req route53.ChangeResourceRecordSetsRequest\n\t\tvar req_rr route53.ResourceRecordSet\n\t\tvar change route53.Change\n\n\t\tif dm.countAlivedTarget != 0 {\n\t\t\tfmt.Printf(\"Found difference, I'll fix it.\\n\")\n\n\t\t\treq_rr.Name = dm.TargetRR + \".\" + dm.targetDomainName + \".\"\n\t\t\treq_rr.Type = \"A\"\n\t\t\treq_rr.TTL = 600\n\t\t\treq_rr.Records = dm.updateRRHosts\n\n\t\t\tchange.Action = \"UPSERT\"\n\t\t\tchange.Record = req_rr\n\n\t\t\treq.Comment = change.Action + \" to \" + dm.TargetRR + \".\" + dm.targetDomainName + \".\"\n\t\t\treq.Changes = append(req.Changes, change)\n\n\t\t\tres, err2 := dm.client.ChangeResourceRecordSets(dm.targetDomainId, &req)\n\t\t\tif err2 != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tfmt.Printf(\"Change Status: %s\\n\", res.ChangeInfo.Status)\n\t\t} else {\n\t\t\t// Delete if BackupHosts Empty\n\t\t\tif dm.targetDomainId != \"0\" {\n\t\t\t\tfmt.Printf(\"All Hosts dead. I'll delete rrset.\\n\")\n\n\t\t\t\treq_rr.Name = dm.TargetRR + \".\" + dm.targetDomainName + \".\"\n\t\t\t\treq_rr.Type = \"A\"\n\t\t\t\treq_rr.TTL = 600\n\t\t\t\treq_rr.Records = dm.currentRRHosts\n\n\t\t\t\tchange.Action = \"DELETE\"\n\t\t\t\tchange.Record = req_rr\n\n\t\t\t\treq.Comment = change.Action + \" to \" + dm.TargetRR + \".\" + dm.targetDomainName + \".\"\n\t\t\t\treq.Changes = append(req.Changes, change)\n\n\t\t\t\tres, err2 := dm.client.ChangeResourceRecordSets(dm.targetDomainId, &req)\n\t\t\t\tif err2 != nil {\n\t\t\t\t\tpanic(err2)\n\t\t\t\t}\n\t\t\t\tfmt.Printf(\"Change Status: %s\\n\", res.ChangeInfo.Status)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dm.countAlivedTarget\n}\n```\n\nRoute 53\u5bfe\u5fdc\u3092\u52d5\u304b\u3059\u3068\u3053\u3093\u306a\u611f\u3058\u3002\u3055\u3063\u304d\u5916\u308c\u305f\u672b\u5c3e1\u306e\u30db\u30b9\u30c8\u304c\u5fa9\u5e30\u3057\u305f\u6642\u306e\u30ed\u30b0\u3002\n\n```shell:\n$ ./build/darwin/amd64/healthbased-dnsrr route53\nFound: /hostedzone/Z1KM1PIxxxxxxx: example.net.\nFinding: wwwww.example.net.\nCurrent RR record: [\"210.152.xxx.xx2\"]\nCheck HTTP: 210.152.xxx.xx1 200\nCheck HTTP: 210.152.xxx.xx2 200\nAvaliable targets: [\"210.152.xxx.xx1\" \"210.152.xxx.xx2\"]\nFound difference, I'll fix it.\nChange Status: PENDING\n```\n\n\u30ed\u30b0\u304c\u30d7\u30ed\u30d0\u30a4\u30c0\u306b\u3088\u3063\u3066\u307e\u308b\u3067\u4e0d\u63c3\u3044\u306a\u306e\u306f\u65e5\u4ed8\u3092\u307e\u305f\u3044\u3060\u304b\u3089\u3060\u306a\u3002\n\n\n### HTTP\u306e\u6b7b\u6d3b\u30c1\u30a7\u30c3\u30af\n\n\u96d1\u306b10\u79d2\u3092\u30ea\u30df\u30c3\u30c8\u3067\u3064\u3064\u3044\u305f\u3002Ping\u3067\u898b\u308b\u3088\u308a\u3044\u3044\u3060\u308d\u3046\u3002\n\n```go-healthbased-dnsrr/http_checker.go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n)\n\nvar httpClient = &http.Client{Timeout: time.Duration(10) * time.Second}\n\nfunc tryHttp(host string) (int, error) {\n\tresp, err := httpClient.Get(\"http://\" + host + \"/\")\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer resp.Body.Close()\n\treturn resp.StatusCode, err\n}\n```\n\n\u3053\u308c\u3060\u3051\u66f8\u3044\u3066\u306a\u3093\u3068\u304b\u76ee\u7684\u306f\u3060\u3044\u305f\u3044OK\u3002 \u307b\u307c\u308f\u304b\u3089\u306a\u3044\u6240\u304b\u3089\u3060\u3063\u305f\u304c\u3001`if err != nil`\u304b\u3089\u306e`panic(err)`(\u5f8c\u3067\u3044\u304f\u3089\u304b\u524a\u9664)\u3092\u9069\u5f53\u306b\u3044\u308c\u3066\u304a\u304f\u3060\u3051\u3067\u3060\u3044\u3076\u9055\u3063\u305f\u3002\n\n\n## Mac\u3068Linux\u7528\u306b\u30d3\u30eb\u30c9\n\nRundeck\u3067\u306e\u5b9f\u884c\u3092\u60f3\u5b9a\u3057\u305f\u306e\u3067\u3001Linux\u7528\u306b\u30d3\u30eb\u30c9\u3059\u308b\u3002gox\u3092\u4f7f\u3063\u305f\u3002\n\ngox\u3067\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u8abf\u6574\u3057\u3066\u30d3\u30eb\u30c9\u3002\n\n```go-healthbased-dnsrr/build.sh\ngox -osarch=\"linux/amd64 darwin/amd64\" --output=\"build/{{.OS}}/{{.Arch}}/healthbased-dnsrr\"\n```\n\n`build.sh`\u3067\u3053\u306e\u8fba\u304c\u3067\u304d\u308b\u3002\n\n```tree\n$ tree build\nbuild\n\u251c\u2500\u2500 darwin\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 amd64\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 healthbased-dnsrr\n\u2514\u2500\u2500 linux\n    \u2514\u2500\u2500 amd64\n        \u2514\u2500\u2500 healthbased-dnsrr\n\n4 directories, 2 files\n```\n\nLinux\u306b\u5358\u54c1\u30d0\u30a4\u30ca\u30ea\u3092\u904b\u3093\u3060\u6240\u3001\u3061\u3083\u3093\u3068\u52d5\u3044\u305f\u3002\u901f\u3044\u3057\u3001\u4f55\u3088\u308a\u4f9d\u5b58\u304c\u5168\u304f\u306a\u3044\u306e\u3067\u914d\u5099\u304c\u3068\u3063\u3066\u3082\u697d\u3060\u3002\n\n\n", "tags": ["dnsimple", "route53", "golang"]}