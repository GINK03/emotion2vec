{"context": "2016.04.01\u306b\u516c\u958b Python\u3092\u5229\u7528\u3057\u305f\u753b\u50cf\u306b\u6587\u5b57\u30c7\u30fc\u30bf\u3092\u96a0\u853d\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u3082\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002Python2\u7cfb\u3067\u52d5\u4f5c\u3002\n\ninstall\n\ninstall\npip install steganography\n\n\n\npypi: steganography\n\n\n\u30c7\u30fc\u30bf\u57cb\u3081\u8fbc\u307f\u4f8b\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\nsample-code\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nfrom steganography.steganography import Steganography\n\n# \u753b\u50cf\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u57cb\u3081\u8fbc\u307f\npath = \"/tmp/image/a.jpg\"\noutput_path = \"/tmp/image/b.jpg\"\ntext = 'The quick brown fox jumps over the lazy dog.'\nSteganography.encode(path, output_path, text)\n\n# \u753b\u50cf\u306b\u96a0\u853d\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u3092\u8aad\u307f\u8fbc\u307f\nsecret_text = Steganography.decode(output_path)\n\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30de\u30f3\u30c9\n# \u753b\u50cf\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u57cb\u3081\u8fbc\u307f\n>>>steganography -e /tmp/image/a.jpg /tmp/image/b.jpg 'The quick brown fox jumps over the lazy dog.'\n\n# \u753b\u50cf\u306b\u96a0\u853d\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u3092\u8aad\u307f\u8fbc\u307f\n>>>steganography -d /tmp/image/b.jpg\nThe quick brown fox jumps over the lazy dog.\n\n\n\n1. \u52d5\u4f5c\u6982\u8981 - \u30c6\u30ad\u30b9\u30c8\u57cb\u3081\u8fbc\u307f\n\n1-1. normalize\n\u753b\u50cf\u306e\u5168\u30d4\u30af\u30bb\u30eb\u3092\u30b9\u30ad\u30e3\u30f3\u3057\u3066\u3001RGB\u305d\u308c\u305e\u308c\u306e\u5024\u30928\u3067\u5272\u3063\u305f\u3068\u304d\u4f59\u304c1\u3068\u306a\u308b\u30d4\u30af\u30bb\u30eb\u3092\u9078\u629e\u3059\u308b\u3002\u9078\u629e\u3057\u305f\u30d4\u30af\u30bb\u30eb\u306e\u8272\u3092\u5909\u66f4\u3057\u3066\u4f59\u304c1\u3068\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u8272\u3092\u5909\u66f4\u3059\u308b\u3002\n\u25a0 normalize\u51e6\u7406\u3067\u8272\u3092\u5909\u66f4\u3057\u305f\u30d4\u30af\u30bb\u30eb\n\n\n1-2. \u30c6\u30ad\u30b9\u30c8\u96a0\u853d\n\u30c6\u30ad\u30b9\u30c8\u309216\u9032\u6570\u306b\u5909\u63db\u3059\u308b\u3002\u753b\u50cf\u309216\u30d4\u30af\u30bb\u30eb\u6bce\u306b\u5206\u5272\u3057\u3066\u8a72\u5f53\u7b87\u6240\u306e\u30d4\u30af\u30bb\u30eb\u306e\u8272\u3092RGB\u305d\u308c\u305e\u308c\u306e\u5024\u30928\u3067\u5272\u3063\u305f\u3068\u304d\u4f59\u304c1\u3068\u306a\u308b\u3088\u3046\u306b\u5024\u3092\u5909\u66f4\u3059\u308b\u3002\n\n2. \u52d5\u4f5c\u6982\u8981 - \u753b\u50cf\u306b\u96a0\u853d\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u8fbc\u307f\n\n2-1. \u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u8fbc\u307f\n\u30c6\u30ad\u30b9\u30c8\u304c\u96a0\u853d\u3055\u308c\u305f\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f\u3001\u753b\u50cf\u309216\u30d4\u30af\u30bb\u30eb\u6bce\u306b\u5206\u5272\u3057\u3066\u30d4\u30af\u30bb\u30eb\u306e\u8272\u304cRGB\u305d\u308c\u305e\u308c\u306e\u5024\u30928\u3067\u5272\u3063\u305f\u3068\u304d\u4f59\u304c1\u3068\u306a\u308bpoint\u30d4\u30af\u30bb\u30eb\u3092\u7279\u5b9a\u3059\u308b\u3002point\u30d4\u30af\u30bb\u30eb\u4f4d\u7f6e\u304b\u308916\u9032\u6570\u306e\u5024\u3092\u53d6\u5f97\u305716\u9032\u6570\u304b\u3089\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u51fa\u529b\u3059\u308b\u3002\n\n3. \u52c9\u5f37\u7528\u306e\u30b5\u30f3\u30d7\u30eb\u5b9f\u88c5\u30b3\u30fc\u30c9\n\n3-1. \u753b\u50cf\u3092open\u3057\u30661\u30d4\u30af\u30bb\u30eb\u305a\u3064\u8aad\u3080\u30b3\u30fc\u30c9\npillow\u3092\u5229\u7528\u3059\u308b\u3068\u7c21\u5358\u306b\u753b\u50cf\u64cd\u4f5c\u304c\u53ef\u80fd\u3067\u3059\u3002\n\nopen-image\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nfrom PIL import Image\n\npath = \"/tmp/image/a.jpg\"\nimg = Image.open(path)\nimg = img.convert('RGB')\n\nfor y in range(img.size[1]):\n    for x in range(img.size[0]):\n        r, g, b = img.getpixel((x, y))\n        print(r, g, b)\n\n\n\noutput\n>>> python sample.py\n(44, 81, 110)\n(75, 109, 137)\n(85, 114, 144)\n(69, 99, 127)\n(68, 105, 131)\n(52, 94, 116)\n(65, 103, 124)\n(108, 130, 154)\n(149, 150, 181)\n(164, 148, 184)\n(152, 132, 169)\n....\n\n\n\n3-2. \u7279\u5b9a\u6761\u4ef6\u306e\u30d4\u30af\u30bb\u30eb\u8272\u3092\u8d64\u8272\u306b\u5909\u66f4\u3059\u308b\u30b3\u30fc\u30c9\n\nred\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nfrom PIL import Image\n\npath = \"/tmp/image/a.jpg\"\noutput_path = \"/tmp/image/sample_red.png\"\nimg = Image.open(path)\nimg = img.convert('RGB')\n\n\ndef matched_pixel(r, g, b):\n    return r % 8 == g % 8 == b % 8 == 1\n\n\nfor y in range(img.size[1]):\n    for x in range(img.size[0]):\n        r, g, b = img.getpixel((x, y))\n        if matched_pixel(r, g, b):\n            # \u6307\u5b9a\u5ea7\u6a19\u3092\u8d64\u8272\u306b\u66f8\u304d\u63db\u3048\u308b\n            img.putpixel((x, y), (255, 0, 0))\n\nimg.save(output_path, \"PNG\", optimize=True)\n\n\n\n\n\n3-3. str hex converter\n\nstr-hex-converter\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\n\n\ndef to_hex(s):\n    return s.encode(\"hex\")\n\n\ndef to_str(s):\n    return s.decode(\"hex\")\n\n\nbase = \"aiueo kakikukeko\"\nprint(to_hex(base))\n# >>> 616975656f206b616b696b756b656b6f\n\nassert base == to_str(to_hex(base))\n\n\n\n\n4. \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u753b\u50cf\u306e\u8aad\u307f\u66f8\u304d\u306b\u306fpillow\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fgithub\u306b\u3066\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/subc/steganography/blob/master/steganography/steganography.py\n2016.04.01\u306b\u516c\u958b Python\u3092\u5229\u7528\u3057\u305f\u753b\u50cf\u306b\u6587\u5b57\u30c7\u30fc\u30bf\u3092\u96a0\u853d\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u3082\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002Python2\u7cfb\u3067\u52d5\u4f5c\u3002\n\n# install\n```shell-session:install\npip install steganography\n```\n\n- [pypi: steganography](https://pypi.python.org/pypi/steganography)\n\n# \u30c7\u30fc\u30bf\u57cb\u3081\u8fbc\u307f\u4f8b\n![Untitled.png](https://qiita-image-store.s3.amazonaws.com/0/65312/a6eb37ed-055c-128d-17c9-d9d1cbc0eaf3.png)\n\n# \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n```py:sample-code\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nfrom steganography.steganography import Steganography\n\n# \u753b\u50cf\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u57cb\u3081\u8fbc\u307f\npath = \"/tmp/image/a.jpg\"\noutput_path = \"/tmp/image/b.jpg\"\ntext = 'The quick brown fox jumps over the lazy dog.'\nSteganography.encode(path, output_path, text)\n\n# \u753b\u50cf\u306b\u96a0\u853d\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u3092\u8aad\u307f\u8fbc\u307f\nsecret_text = Steganography.decode(output_path)\n```\n\n\n# \u30b5\u30f3\u30d7\u30eb\u30b3\u30de\u30f3\u30c9\n```shell-session:\n# \u753b\u50cf\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u57cb\u3081\u8fbc\u307f\n>>>steganography -e /tmp/image/a.jpg /tmp/image/b.jpg 'The quick brown fox jumps over the lazy dog.'\n\n# \u753b\u50cf\u306b\u96a0\u853d\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u3092\u8aad\u307f\u8fbc\u307f\n>>>steganography -d /tmp/image/b.jpg\nThe quick brown fox jumps over the lazy dog.\n\n```\n\n# 1. \u52d5\u4f5c\u6982\u8981 - \u30c6\u30ad\u30b9\u30c8\u57cb\u3081\u8fbc\u307f\n\n## 1-1. normalize\n\u753b\u50cf\u306e\u5168\u30d4\u30af\u30bb\u30eb\u3092\u30b9\u30ad\u30e3\u30f3\u3057\u3066\u3001RGB\u305d\u308c\u305e\u308c\u306e\u5024\u30928\u3067\u5272\u3063\u305f\u3068\u304d\u4f59\u304c1\u3068\u306a\u308b\u30d4\u30af\u30bb\u30eb\u3092\u9078\u629e\u3059\u308b\u3002\u9078\u629e\u3057\u305f\u30d4\u30af\u30bb\u30eb\u306e\u8272\u3092\u5909\u66f4\u3057\u3066\u4f59\u304c1\u3068\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u8272\u3092\u5909\u66f4\u3059\u308b\u3002\n\n\u25a0 normalize\u51e6\u7406\u3067\u8272\u3092\u5909\u66f4\u3057\u305f\u30d4\u30af\u30bb\u30eb\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-03-31 19.36.12.png](https://qiita-image-store.s3.amazonaws.com/0/65312/82906e5d-a17f-455a-2951-3bf1d0a60721.png)\n\n## 1-2. \u30c6\u30ad\u30b9\u30c8\u96a0\u853d\n\u30c6\u30ad\u30b9\u30c8\u309216\u9032\u6570\u306b\u5909\u63db\u3059\u308b\u3002\u753b\u50cf\u309216\u30d4\u30af\u30bb\u30eb\u6bce\u306b\u5206\u5272\u3057\u3066\u8a72\u5f53\u7b87\u6240\u306e\u30d4\u30af\u30bb\u30eb\u306e\u8272\u3092RGB\u305d\u308c\u305e\u308c\u306e\u5024\u30928\u3067\u5272\u3063\u305f\u3068\u304d\u4f59\u304c1\u3068\u306a\u308b\u3088\u3046\u306b\u5024\u3092\u5909\u66f4\u3059\u308b\u3002\n\n\n# 2. \u52d5\u4f5c\u6982\u8981 - \u753b\u50cf\u306b\u96a0\u853d\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u8fbc\u307f\n\n## 2-1. \u30c6\u30ad\u30b9\u30c8\u8aad\u307f\u8fbc\u307f\n\u30c6\u30ad\u30b9\u30c8\u304c\u96a0\u853d\u3055\u308c\u305f\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f\u3001\u753b\u50cf\u309216\u30d4\u30af\u30bb\u30eb\u6bce\u306b\u5206\u5272\u3057\u3066\u30d4\u30af\u30bb\u30eb\u306e\u8272\u304cRGB\u305d\u308c\u305e\u308c\u306e\u5024\u30928\u3067\u5272\u3063\u305f\u3068\u304d\u4f59\u304c1\u3068\u306a\u308bpoint\u30d4\u30af\u30bb\u30eb\u3092\u7279\u5b9a\u3059\u308b\u3002point\u30d4\u30af\u30bb\u30eb\u4f4d\u7f6e\u304b\u308916\u9032\u6570\u306e\u5024\u3092\u53d6\u5f97\u305716\u9032\u6570\u304b\u3089\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u51fa\u529b\u3059\u308b\u3002\n\n# 3. \u52c9\u5f37\u7528\u306e\u30b5\u30f3\u30d7\u30eb\u5b9f\u88c5\u30b3\u30fc\u30c9\n\n## 3-1. \u753b\u50cf\u3092open\u3057\u30661\u30d4\u30af\u30bb\u30eb\u305a\u3064\u8aad\u3080\u30b3\u30fc\u30c9\npillow\u3092\u5229\u7528\u3059\u308b\u3068\u7c21\u5358\u306b\u753b\u50cf\u64cd\u4f5c\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n```py:open-image\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nfrom PIL import Image\n\npath = \"/tmp/image/a.jpg\"\nimg = Image.open(path)\nimg = img.convert('RGB')\n\nfor y in range(img.size[1]):\n    for x in range(img.size[0]):\n        r, g, b = img.getpixel((x, y))\n        print(r, g, b)\n```\n\n```shell-session:output\n>>> python sample.py\n(44, 81, 110)\n(75, 109, 137)\n(85, 114, 144)\n(69, 99, 127)\n(68, 105, 131)\n(52, 94, 116)\n(65, 103, 124)\n(108, 130, 154)\n(149, 150, 181)\n(164, 148, 184)\n(152, 132, 169)\n....\n```\n\n## 3-2. \u7279\u5b9a\u6761\u4ef6\u306e\u30d4\u30af\u30bb\u30eb\u8272\u3092\u8d64\u8272\u306b\u5909\u66f4\u3059\u308b\u30b3\u30fc\u30c9\n\n```py:red\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nfrom PIL import Image\n\npath = \"/tmp/image/a.jpg\"\noutput_path = \"/tmp/image/sample_red.png\"\nimg = Image.open(path)\nimg = img.convert('RGB')\n\n\ndef matched_pixel(r, g, b):\n    return r % 8 == g % 8 == b % 8 == 1\n\n\nfor y in range(img.size[1]):\n    for x in range(img.size[0]):\n        r, g, b = img.getpixel((x, y))\n        if matched_pixel(r, g, b):\n            # \u6307\u5b9a\u5ea7\u6a19\u3092\u8d64\u8272\u306b\u66f8\u304d\u63db\u3048\u308b\n            img.putpixel((x, y), (255, 0, 0))\n\nimg.save(output_path, \"PNG\", optimize=True)\n\n```\n\n![sample_red.png](https://qiita-image-store.s3.amazonaws.com/0/65312/9e7b968d-e34f-04ed-7253-5fff2c87f686.png)\n\n\n\n## 3-3. str hex converter\n\n\n```py:str-hex-converter\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\n\n\ndef to_hex(s):\n    return s.encode(\"hex\")\n\n\ndef to_str(s):\n    return s.decode(\"hex\")\n\n\nbase = \"aiueo kakikukeko\"\nprint(to_hex(base))\n# >>> 616975656f206b616b696b756b656b6f\n\nassert base == to_str(to_hex(base))\n\n```\n\n\n# 4. \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u753b\u50cf\u306e\u8aad\u307f\u66f8\u304d\u306b\u306fpillow\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306fgithub\u306b\u3066\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/subc/steganography/blob/master/steganography/steganography.py\n\n\n", "tags": ["Python", "PIL", "pillow", "steganography", "\u753b\u50cf\u51e6\u7406"]}