{"context": " More than 1 year has passed since last update.\u3000PlayFramework2.4\u3067\u306f Guice \u3092\u4f7f\u3063\u3066\u6b63\u5f0f\u306b DI \u6a5f\u80fd\u304c\u5c0e\u5165\u3055\u308c\u307e\u3057\u305f\u3002DI\u3092\u5c0e\u5165\u3059\u308b\u30e1\u30ea\u30c3\u30c8\u306e\u4e00\u3064\u3068\u3057\u3066\u30c6\u30b9\u30c8\u306b\u304a\u3051\u308b\u30e2\u30c3\u30af\u304c\u51c4\u304f\u30b7\u30f3\u30d7\u30eb\u306b\u5b9f\u88c5\u3067\u304d\u308b\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u7c21\u5358\u306a\u30e6\u30fc\u30b6\u30fc\u8a8d\u8a3c\u306e\u4f8b\u3092\u901a\u3058\u3066\u3001\u81ea\u5206\u306e\u8a66\u884c\u932f\u8aa4\u4e2d\u306b\u52c9\u5f37\u3057\u305f\u3001PlayFramework2.4\u306b\u304a\u3051\u308bDI\u306e\u30c6\u30b9\u30c8\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nDI\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u306e\u5b9f\u88c5\n\u25a0 \u307e\u305a\u3001\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306eRepository\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u5b9a\u7fa9\u53ca\u3073\u5b9f\u88c5\u3092\u884c\u3044\u307e\u3059\u3002\n\u203b \u30c6\u30b9\u30c8\u3067\u4f7f\u308f\u306a\u3044\u306e\u3067\u3001\u5b9f\u88c5\u306f\u7701\u7565\u3057\u307e\u3059\u3002\ncase class User(username: String, password: String)\n\ntrait UserRepository {\n  def resolve(username: String): Option[User]\n}\n\nclass UserRepositoryOnJDBC extends UserRepository {\n  def resolve(username: String) : Option[User] = {\n    ...\n  }\n}\n\n\u25a0 \u6b21\u306f\u3001DI\u6a5f\u80fd\u3092\u4f7f\u3063\u3066Repository\u3092\u5229\u7528\u3059\u308bService\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\uff08\u4eca\u56de\u306e\u30c6\u30b9\u30c8\u5bfe\u8c61\u3067\u3059\uff09\n\u203b \u8aac\u660e\u306e\u305f\u3081\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306a\u3069\u306e\u554f\u984c\u306f\u7121\u8996\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nclass AuthService @Inject()(userRepository: UserRepository) {\n  def auth(user: User): Boolean = {\n    userRepository.resolve(user.username) match {\n      case Some(u) => u == user\n      case None => false\n    }\n  }\n}\n\n\u25a0 DI\u6a5f\u80fd\u3092\u4f7f\u3063\u3066Service\u3092\u5229\u7528\u3059\u308bController\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\uff08\u4eca\u56de\u306e\u30c6\u30b9\u30c8\u5bfe\u8c61\u3067\u3059\uff09\nclass AuthController @Inject()(val authService: AuthService) extends Controller {\n  val loginForm = Form(\n    mapping(\n      \"username\" -> nonEmptyText,\n      \"password\" -> nonEmptyText\n    )(User.apply)(User.unapply)\n  )\n\n  def login = Action { implicit request =>\n    loginForm.bindFromRequest.fold(\n      _ => BadRequest(),\n      user => if(authService.auth(user)) {\n        Ok()\n      } else {\n        Unauthorized()\n      }\n    )\n  }\n}\n\n\u25a0 \u30c6\u30b9\u30c8\u306e\u305f\u3081Route\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nPOST        /login               controllers.AuthController.login\n\n\u25a0 \u6700\u5f8c\u306bModule\u3067Repository\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u203b AuthService\u306f\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u81ea\u52d5Inject\u3067\u304d\u307e\u3059\u3002\nclass GuiceModule extends AbstractModule {\n  def configure() = {\n    bind(classOf[UserRepository]).to(classOf[UserRepositoryOnJDBC])\n  }\n}\n\n\nDI\u6a5f\u80fd\u306e\u30c6\u30b9\u30c8\u65b9\u6cd5\n\u3053\u3053\u304b\u3089\u306fspecs2 \u3092\u4f7f\u3063\u3066\u3001\u4e0a\u8a18\u306e\u4f8b\u306e\u30c6\u30b9\u30c8\u306e\u3057\u304b\u305f\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3067\u306f\u3001\u5b9f\u969b\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u25a0 Service\u306e\u30c6\u30b9\u30c8\n\u307e\u305a\u3001\u4e00\u756a\u30b7\u30f3\u30b0\u30eb\u306e\u4f8b\u3068\u3057\u3066UserRepository\u3092\u30e2\u30c3\u30af\u5316\u3001UserService\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\nclass UserServiceSpec extends Specification with Mockito {\n  \"UserService#auth\" should {\n    \"\u30e6\u30fc\u30b6\u30fc\u540d\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6b63\u3057\u3044\u306e\u5834\u5408\u3001True\u3092\u8fd4\u3059\" in {\n      // setup\n      val testUser = User(\"user1\", \"password1\")\n      val userRepository = mock[UserRepository]\n      userRepository.resolve(\"user1\") returns testUser\n      val userService = new UserService(userRepository)\n      // execute & verify\n      userService.auth(User(\"user1\", \"password1\")) must beTrue\n    }\n  }\n  ...\n}\n\n\u25a0 Controller\u306e\u30c6\u30b9\u30c8\nController\u3092\u30c6\u30b9\u30c8\u3059\u308b\u969b\u306b\u306f\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002PlayFramework\u306f\u5e7e\u3064\u306e\u30c4\u30fc\u30eb\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\nFakeRequest, call()\n\n\n\u3053\u308c\u3089\u3092\u4f7f\u3048\u3070\u3001\u76f4\u63a5Action\u3092\u30c6\u30b9\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Controller\u306e\u5358\u4f53\u30c6\u30b9\u30c8\u306b\u4f7f\u3048\u307e\u3059\u3002\nclass AuthControllerSpec extends Specification with Mockito {\n  \"AuthController\" should {\n    \"\u30e6\u30fc\u30b6\u30fc\u540d\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6b63\u3057\u3044\u306e\u5834\u5408\u3001\u30ed\u30b0\u30a4\u30f3\u3067\u304d\u307e\u3059\" in {\n      // setup\n      val request = FakeRequest(POST, \"/login\").withFormUrlEncodedBody(\n        \"username\" -> \"user1\",\n        \"password\" -> \"password\"\n      )\n      val userService = mock[UserService]\n      userService.auth(any) returns true\n      val controller = new AuthController(userService)\n      // execute\n      val actual = call(controller.authenticate(),request)\n      // verify\n      status(actual) must equalTo(OK)\n    }\n  }\n}\n\n\n\nWithApplication, FakeApplication, route()\n\n\n\u3053\u3061\u3089\u3092\u4f7f\u3048\u3070\u3001Action\u3092\u547c\u3073\u51fa\u3059\u4ee3\u308f\u308a\u306bRouter\u304b\u3089\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059\u3002\u6a5f\u80fd\u30c6\u30b9\u30c8\u306b\u4f7f\u3048\u307e\u3059\u3002\n\u4ed6\u306b\u3082 WithServer, WithBrowser, PlaySpecification \u306a\u3069\u306e\u30c4\u30fc\u30eb\u304c\u3042\u308a\u307e\u3059\u304c\u3001DI\u306e\u30c6\u30b9\u30c8\u306b\u7279\u306b\u95a2\u4fc2\u306a\u3044\u306e\u3067\u7701\u7565\u3057\u307e\u3059\u3002\n\u203b \u8208\u5473\u306e\u3042\u308b\u65b9\u306f Writing functional tests with specs2 \u3067\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\n\u25a0 Guice\u3092\u4f7f\u3063\u3066\u306e\u6a5f\u80fd\u30c6\u30b9\u30c8\nPlayFramework2.4\u3067\u306fGuice\u3092\u4f7f\u3063\u3066DI\u3092\u5b9f\u88c5\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066\u3001GuiceApplicationBuilder\u3001 GuiceInjectorBuilder \u306e2\u3064\u306eBuilder\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\u30c6\u30b9\u30c8\u4e2d\u306b\u3053\u306e2\u3064\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u74b0\u5883\u3001\u914d\u7f6e\u3001\u6216\u3044\u306f\u4f9d\u5b58\u95a2\u4fc2\u3092\u76f4\u63a5\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u203b \u8a73\u3057\u3044\u8aac\u660e\u306f Testing With Guice \u3067\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\nclass MockUserRepository extends UserRepository {\n  def resolve(username: String) : Option[User] = Some(\n      User(\"user1\", \"password\")\n    )\n}\n\nclass AuthControllerSpec extends Specification {\n  val app: Application = new GuiceApplicationBuilder()\n    .overrides(bind[UserRepository].to[MockUserRepository])\n    .build()\n\n  \"AuthController\" should {\n    \"\u30e6\u30fc\u30b6\u30fc\u540d\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6b63\u3057\u3044\u306e\u5834\u5408\u3001\u30ed\u30b0\u30a4\u30f3\u3067\u304d\u307e\u3059\" in new WithApplication(app) {\n      val request = FakeRequest(POST, \"/login\").withFormUrlEncodedBody(\n        \"username\" -> \"user1\",\n        \"password\" -> \"password\"\n      )\n      val result = route(request).get\n      status(result) must equalTo(OK)\n    }\n  }\n}\n\n\n\u307e\u3068\u3081\n\u3059\u3054\u304f\u57fa\u672c\u306e\u8a71\u3067\u3059\u304c\u3001\u4ee5\u4e0a\u3068\u306a\u308a\u307e\u3059\u3002\u30c6\u30b9\u30c8\u306f\u6210\u529f\u306e\u30b1\u30fc\u30b9\u3060\u3051\u3092\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u4ed6\u306e\u30b1\u30fc\u30b9\u3082\u540c\u3058\u66f8\u304d\u65b9\u3067\u7c21\u5358\u306b\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nDI\u6a5f\u80fd\u3092\u5c0e\u5165\u3059\u308b\u3053\u3068\u3067\u3001PlayFramework2.4\u304c\u30e2\u30b8\u30e5\u30fc\u30eb\u9593\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u306a\u304f\u3057\u3001\u5358\u4f53\u30c6\u30b9\u30c8\u3082\u6a5f\u80fd\u30c6\u30b9\u30c8\u3082\u7c21\u5358\u304b\u3064\u30b7\u30f3\u30d7\u30eb\u306b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u306d\u3002\n  \u4eca\u3084\u3063\u3066\u3044\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3082Play2.4\u3092WebService\u30dd\u30fc\u30c8\u3068\u3057\u3066\u4f7f\u308f\u308c\u3066\u3001\u8907\u96d1\u306e\u30ed\u30b8\u30c3\u30af\u306f\u5225\u306e\u30ec\u30a4\u30e4\u30fc\u3067\u9694\u96e2\u3055\u305b\u3066\u3044\u307e\u3059\u3002Play2.4\u3067\u30ed\u30b8\u30c3\u30af\u3092\u7c21\u5358\u306b\u30e2\u30c3\u30af\u5316\u3067\u304d\u308b\u306e\u3067\u697d\u3067\u3059\u3002\n\u6700\u5f8c\u307e\u3067\u8aad\u3093\u3067\u3044\u305f\u3060\u304d\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n\u672c\u8a18\u4e8b\u306f\u30bb\u30d7\u30c6\u30fc\u30cb\u30aa\u30ea\u30b8\u30ca\u30eb\u958b\u767a\u8005\u30d6\u30ed\u30b0\u306e\u8ee2\u8f09\u3067\u3059\u3002\nhttp://labs.septeni.co.jp/entry/2015/12/10/115611\n\u3000***[PlayFramework2.4][1]***\u3067\u306f ***[Guice][3]*** \u3092\u4f7f\u3063\u3066\u6b63\u5f0f\u306b ***[DI][2]*** \u6a5f\u80fd\u304c\u5c0e\u5165\u3055\u308c\u307e\u3057\u305f\u3002DI\u3092\u5c0e\u5165\u3059\u308b\u30e1\u30ea\u30c3\u30c8\u306e\u4e00\u3064\u3068\u3057\u3066\u30c6\u30b9\u30c8\u306b\u304a\u3051\u308b\u30e2\u30c3\u30af\u304c\u51c4\u304f\u30b7\u30f3\u30d7\u30eb\u306b\u5b9f\u88c5\u3067\u304d\u308b\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u7c21\u5358\u306a\u30e6\u30fc\u30b6\u30fc\u8a8d\u8a3c\u306e\u4f8b\u3092\u901a\u3058\u3066\u3001\u81ea\u5206\u306e\u8a66\u884c\u932f\u8aa4\u4e2d\u306b\u52c9\u5f37\u3057\u305f\u3001PlayFramework2.4\u306b\u304a\u3051\u308bDI\u306e\u30c6\u30b9\u30c8\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## DI\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u306e\u5b9f\u88c5\n\n\u25a0 \u307e\u305a\u3001\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306eRepository\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u5b9a\u7fa9\u53ca\u3073\u5b9f\u88c5\u3092\u884c\u3044\u307e\u3059\u3002\n\n<font color='grey'>\u203b \u30c6\u30b9\u30c8\u3067\u4f7f\u308f\u306a\u3044\u306e\u3067\u3001\u5b9f\u88c5\u306f\u7701\u7565\u3057\u307e\u3059\u3002</font>\n\n``` scala\ncase class User(username: String, password: String)\n\ntrait UserRepository {\n  def resolve(username: String): Option[User]\n}\n\nclass UserRepositoryOnJDBC extends UserRepository {\n  def resolve(username: String) : Option[User] = {\n    ...\n  }\n}\n```\n\n\u25a0 \u6b21\u306f\u3001DI\u6a5f\u80fd\u3092\u4f7f\u3063\u3066Repository\u3092\u5229\u7528\u3059\u308bService\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\uff08\u4eca\u56de\u306e\u30c6\u30b9\u30c8\u5bfe\u8c61\u3067\u3059\uff09\n\n<font color='grey'>\u203b \u8aac\u660e\u306e\u305f\u3081\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306a\u3069\u306e\u554f\u984c\u306f\u7121\u8996\u3057\u3066\u304f\u3060\u3055\u3044\u3002</font>\n\n``` scala\nclass AuthService @Inject()(userRepository: UserRepository) {\n  def auth(user: User): Boolean = {\n    userRepository.resolve(user.username) match {\n      case Some(u) => u == user\n      case None => false\n    }\n  }\n}\n```\n\n\u25a0 DI\u6a5f\u80fd\u3092\u4f7f\u3063\u3066Service\u3092\u5229\u7528\u3059\u308bController\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\uff08\u4eca\u56de\u306e\u30c6\u30b9\u30c8\u5bfe\u8c61\u3067\u3059\uff09\n\n``` scala\nclass AuthController @Inject()(val authService: AuthService) extends Controller {\n  val loginForm = Form(\n    mapping(\n      \"username\" -> nonEmptyText,\n      \"password\" -> nonEmptyText\n    )(User.apply)(User.unapply)\n  )\n\n  def login = Action { implicit request =>\n    loginForm.bindFromRequest.fold(\n      _ => BadRequest(),\n      user => if(authService.auth(user)) {\n        Ok()\n      } else {\n        Unauthorized()\n      }\n    )\n  }\n}\n```\n\n\u25a0 \u30c6\u30b9\u30c8\u306e\u305f\u3081Route\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n``` scala\nPOST        /login               controllers.AuthController.login\n```\n\n\u25a0 \u6700\u5f8c\u306bModule\u3067Repository\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n<font color='grey'>\u203b AuthService\u306f\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u81ea\u52d5Inject\u3067\u304d\u307e\u3059\u3002</font>\n\n``` scala\nclass GuiceModule extends AbstractModule {\n  def configure() = {\n    bind(classOf[UserRepository]).to(classOf[UserRepositoryOnJDBC])\n  }\n}\n```\n\n## DI\u6a5f\u80fd\u306e\u30c6\u30b9\u30c8\u65b9\u6cd5\n\u3053\u3053\u304b\u3089\u306f***[specs2][4]*** \u3092\u4f7f\u3063\u3066\u3001\u4e0a\u8a18\u306e\u4f8b\u306e\u30c6\u30b9\u30c8\u306e\u3057\u304b\u305f\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3067\u306f\u3001\u5b9f\u969b\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u25a0 Service\u306e\u30c6\u30b9\u30c8\n\n\u307e\u305a\u3001\u4e00\u756a\u30b7\u30f3\u30b0\u30eb\u306e\u4f8b\u3068\u3057\u3066UserRepository\u3092\u30e2\u30c3\u30af\u5316\u3001UserService\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\n``` scala\nclass UserServiceSpec extends Specification with Mockito {\n  \"UserService#auth\" should {\n    \"\u30e6\u30fc\u30b6\u30fc\u540d\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6b63\u3057\u3044\u306e\u5834\u5408\u3001True\u3092\u8fd4\u3059\" in {\n      // setup\n      val testUser = User(\"user1\", \"password1\")\n      val userRepository = mock[UserRepository]\n      userRepository.resolve(\"user1\") returns testUser\n      val userService = new UserService(userRepository)\n      // execute & verify\n      userService.auth(User(\"user1\", \"password1\")) must beTrue\n    }\n  }\n  ...\n}\n```\n\n\u25a0 Controller\u306e\u30c6\u30b9\u30c8\n\nController\u3092\u30c6\u30b9\u30c8\u3059\u308b\u969b\u306b\u306f\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002PlayFramework\u306f\u5e7e\u3064\u306e\u30c4\u30fc\u30eb\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\n\n- ***FakeRequest***, ***call()***\n\n\u3053\u308c\u3089\u3092\u4f7f\u3048\u3070\u3001\u76f4\u63a5Action\u3092\u30c6\u30b9\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Controller\u306e\u5358\u4f53\u30c6\u30b9\u30c8\u306b\u4f7f\u3048\u307e\u3059\u3002\n\n``` scala\nclass AuthControllerSpec extends Specification with Mockito {\n  \"AuthController\" should {\n    \"\u30e6\u30fc\u30b6\u30fc\u540d\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6b63\u3057\u3044\u306e\u5834\u5408\u3001\u30ed\u30b0\u30a4\u30f3\u3067\u304d\u307e\u3059\" in {\n      // setup\n      val request = FakeRequest(POST, \"/login\").withFormUrlEncodedBody(\n        \"username\" -> \"user1\",\n        \"password\" -> \"password\"\n      )\n      val userService = mock[UserService]\n      userService.auth(any) returns true\n      val controller = new AuthController(userService)\n      // execute\n      val actual = call(controller.authenticate(),request)\n      // verify\n      status(actual) must equalTo(OK)\n    }\n  }\n}\n```\n\n- ***WithApplication***, ***FakeApplication***, ***route()***\n\n\u3053\u3061\u3089\u3092\u4f7f\u3048\u3070\u3001Action\u3092\u547c\u3073\u51fa\u3059\u4ee3\u308f\u308a\u306bRouter\u304b\u3089\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059\u3002\u6a5f\u80fd\u30c6\u30b9\u30c8\u306b\u4f7f\u3048\u307e\u3059\u3002\n\u4ed6\u306b\u3082 ***WithServer***, ***WithBrowser***, ***PlaySpecification*** \u306a\u3069\u306e\u30c4\u30fc\u30eb\u304c\u3042\u308a\u307e\u3059\u304c\u3001DI\u306e\u30c6\u30b9\u30c8\u306b\u7279\u306b\u95a2\u4fc2\u306a\u3044\u306e\u3067\u7701\u7565\u3057\u307e\u3059\u3002\n\n<font color='grey'>\u203b \u8208\u5473\u306e\u3042\u308b\u65b9\u306f ***[Writing functional tests with specs2][5]*** \u3067\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002</font><br />\n\n\u25a0 Guice\u3092\u4f7f\u3063\u3066\u306e\u6a5f\u80fd\u30c6\u30b9\u30c8\n\nPlayFramework2.4\u3067\u306fGuice\u3092\u4f7f\u3063\u3066DI\u3092\u5b9f\u88c5\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066\u3001***GuiceApplicationBuilder***\u3001 ***GuiceInjectorBuilder*** \u306e2\u3064\u306eBuilder\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\u30c6\u30b9\u30c8\u4e2d\u306b\u3053\u306e2\u3064\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u74b0\u5883\u3001\u914d\u7f6e\u3001\u6216\u3044\u306f\u4f9d\u5b58\u95a2\u4fc2\u3092\u76f4\u63a5\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n<font color='grey'>\u203b \u8a73\u3057\u3044\u8aac\u660e\u306f ***[Testing With Guice][6]*** \u3067\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002</font><br />\n\n``` scala\nclass MockUserRepository extends UserRepository {\n  def resolve(username: String) : Option[User] = Some(\n      User(\"user1\", \"password\")\n    )\n}\n\nclass AuthControllerSpec extends Specification {\n  val app: Application = new GuiceApplicationBuilder()\n    .overrides(bind[UserRepository].to[MockUserRepository])\n    .build()\n\n  \"AuthController\" should {\n    \"\u30e6\u30fc\u30b6\u30fc\u540d\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6b63\u3057\u3044\u306e\u5834\u5408\u3001\u30ed\u30b0\u30a4\u30f3\u3067\u304d\u307e\u3059\" in new WithApplication(app) {\n      val request = FakeRequest(POST, \"/login\").withFormUrlEncodedBody(\n        \"username\" -> \"user1\",\n        \"password\" -> \"password\"\n      )\n      val result = route(request).get\n      status(result) must equalTo(OK)\n    }\n  }\n}\n```\n\n## \u307e\u3068\u3081\n\n  \u3059\u3054\u304f\u57fa\u672c\u306e\u8a71\u3067\u3059\u304c\u3001\u4ee5\u4e0a\u3068\u306a\u308a\u307e\u3059\u3002\u30c6\u30b9\u30c8\u306f\u6210\u529f\u306e\u30b1\u30fc\u30b9\u3060\u3051\u3092\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u4ed6\u306e\u30b1\u30fc\u30b9\u3082\u540c\u3058\u66f8\u304d\u65b9\u3067\u7c21\u5358\u306b\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n  DI\u6a5f\u80fd\u3092\u5c0e\u5165\u3059\u308b\u3053\u3068\u3067\u3001PlayFramework2.4\u304c\u30e2\u30b8\u30e5\u30fc\u30eb\u9593\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u306a\u304f\u3057\u3001\u5358\u4f53\u30c6\u30b9\u30c8\u3082\u6a5f\u80fd\u30c6\u30b9\u30c8\u3082\u7c21\u5358\u304b\u3064\u30b7\u30f3\u30d7\u30eb\u306b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u306d\u3002\n  \u4eca\u3084\u3063\u3066\u3044\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3082Play2.4\u3092WebService\u30dd\u30fc\u30c8\u3068\u3057\u3066\u4f7f\u308f\u308c\u3066\u3001\u8907\u96d1\u306e\u30ed\u30b8\u30c3\u30af\u306f\u5225\u306e\u30ec\u30a4\u30e4\u30fc\u3067\u9694\u96e2\u3055\u305b\u3066\u3044\u307e\u3059\u3002Play2.4\u3067\u30ed\u30b8\u30c3\u30af\u3092\u7c21\u5358\u306b\u30e2\u30c3\u30af\u5316\u3067\u304d\u308b\u306e\u3067\u697d\u3067\u3059\u3002\n\n  \u6700\u5f8c\u307e\u3067\u8aad\u3093\u3067\u3044\u305f\u3060\u304d\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n---\n\n\u672c\u8a18\u4e8b\u306f\u30bb\u30d7\u30c6\u30fc\u30cb\u30aa\u30ea\u30b8\u30ca\u30eb\u958b\u767a\u8005\u30d6\u30ed\u30b0\u306e\u8ee2\u8f09\u3067\u3059\u3002\nhttp://labs.septeni.co.jp/entry/2015/12/10/115611\n\n[1]: https://www.playframework.com/documentation/2.4.x/Highlights24\n[2]: https://ja.wikipedia.org/wiki/%E4%BE%9D%E5%AD%98%E6%80%A7%E3%81%AE%E6%B3%A8%E5%85%A5\n[3]: https://www.playframework.com/documentation/2.4.x/ScalaDependencyInjection\n[4]: https://www.playframework.com/documentation/2.4.x/ScalaTestingWithSpecs2\n[5]: https://www.playframework.com/documentation/2.4.x/ScalaFunctionalTestingWithSpecs2\n[6]: https://www.playframework.com/documentation/2.4.x/ScalaTestingWithGuice\n", "tags": ["Scala", "PlayFramework", "DependencyInjection", "test"]}