{"context": "CodeIQ\u3067@Nabetani \u3055\u3093\u304c\u51fa\u984c\u3055\u308c\u3066\u3044\u305f\u3010100\u540d\u9650\u5b9a\u3011\u5909\u9032\u5c0f\u6570\u306e\u8db3\u3057\u7b97\u3010\u624b\u52d5\u63a1\u70b9\u3011\u3092Ruby\u3067\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304a\u3088\u3073\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30ea\u30d3\u30b8\u30e7\u30f3\u306f\u3053\u3053\u304b\u3089\u3054\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n\u89e3\u304d\u65b9\n\u5c0f\u6570\u306e\u6700\u4e0b\u4f4d\u304b\u3089\u6700\u4e0a\u4f4d\u306b\u5411\u304b\u3063\u30661\u6841\u3065\u3064\u9806\u306b\u8db3\u3057\u7b97\u3068\u7e70\u308a\u4e0a\u3052\u51e6\u7406\u3092\u3057\u307e\u3059\u3002\n\u8db3\u3057\u7b97\u3068\u7e70\u308a\u4e0a\u3052\u306fNumeric#divmod\u3092\u4f7f\u3048\u3070\u30b7\u30f3\u30d7\u30eb\u306b\u8a18\u8ff0\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nclass Enumerator::Lazy\n  def filter_map\n    Lazy.new(self) do |yielder, *values|\n      result = yield *values\n      yielder << result if result\n    end\n  end\nend\n\ndef add_var(v1, v2)\n  int1, fra1 = v1.split(?.)\n  int2, fra2 = v2.split(?.)\n  fra1, fra2 = [fra1, fra2].sort_by(&:size).map { |fra| fra.chars.map(&:to_i) }\n  fra3 = [*Array.new(fra1.size + 1, 0), *fra2[fra1.size..-1]]\n  fra1.size.downto(1) { |i| fra3[i-1], fra3[i] = (fra1[i-1] + fra2[i-1] + fra3[i]).divmod(11 - i) }\n  (\"%s.%s\" % [int1.to_i + int2.to_i + fra3.shift, fra3.join]).to_r\nend\n\ndef calc_formula formula\n  var = add_var(*formula.split(?+))\n  var.denominator == 1 ? var.numerator : var.to_f\nend\n\ndef list_nonmatching_ids\n  File.foreach('data.txt').lazy.filter_map { |line|\n    id, formula, candidate = line.split(\"\\t\")\n    id unless candidate.to_r == calc_formula(formula)\n  }.force.join(?,)\nend\n\nputs ARGV[0] == \"-d\" ? list_nonmatching_ids : calc_formula(gets)\n\nCodeIQ\u3067@Nabetani \u3055\u3093\u304c\u51fa\u984c\u3055\u308c\u3066\u3044\u305f[\u3010100\u540d\u9650\u5b9a\u3011\u5909\u9032\u5c0f\u6570\u306e\u8db3\u3057\u7b97\u3010\u624b\u52d5\u63a1\u70b9\u3011](https://codeiq.jp/q/2924)\u3092Ruby\u3067\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304a\u3088\u3073\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30ea\u30d3\u30b8\u30e7\u30f3\u306f[\u3053\u3053](https://bitbucket.org/snippets/cia_rana/GEMRp)\u304b\u3089\u3054\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n## \u89e3\u304d\u65b9\n\u5c0f\u6570\u306e\u6700\u4e0b\u4f4d\u304b\u3089\u6700\u4e0a\u4f4d\u306b\u5411\u304b\u3063\u30661\u6841\u3065\u3064\u9806\u306b\u8db3\u3057\u7b97\u3068\u7e70\u308a\u4e0a\u3052\u51e6\u7406\u3092\u3057\u307e\u3059\u3002\n\u8db3\u3057\u7b97\u3068\u7e70\u308a\u4e0a\u3052\u306fNumeric#divmod\u3092\u4f7f\u3048\u3070\u30b7\u30f3\u30d7\u30eb\u306b\u8a18\u8ff0\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```rb\nclass Enumerator::Lazy\n  def filter_map\n    Lazy.new(self) do |yielder, *values|\n      result = yield *values\n      yielder << result if result\n    end\n  end\nend\n\ndef add_var(v1, v2)\n  int1, fra1 = v1.split(?.)\n  int2, fra2 = v2.split(?.)\n  fra1, fra2 = [fra1, fra2].sort_by(&:size).map { |fra| fra.chars.map(&:to_i) }\n  fra3 = [*Array.new(fra1.size + 1, 0), *fra2[fra1.size..-1]]\n  fra1.size.downto(1) { |i| fra3[i-1], fra3[i] = (fra1[i-1] + fra2[i-1] + fra3[i]).divmod(11 - i) }\n  (\"%s.%s\" % [int1.to_i + int2.to_i + fra3.shift, fra3.join]).to_r\nend\n\ndef calc_formula formula\n  var = add_var(*formula.split(?+))\n  var.denominator == 1 ? var.numerator : var.to_f\nend\n\ndef list_nonmatching_ids\n  File.foreach('data.txt').lazy.filter_map { |line|\n    id, formula, candidate = line.split(\"\\t\")\n    id unless candidate.to_r == calc_formula(formula)\n  }.force.join(?,)\nend\n\nputs ARGV[0] == \"-d\" ? list_nonmatching_ids : calc_formula(gets)\n```\n", "tags": ["Ruby", "codeiq"]}