{"context": "Atom Clojure Setup\n\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u3001Atom\u3067Clojure\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u74b0\u5883\u304c\u3042\u308b\u7a0b\u5ea6\u3067\u304d\u307e\u3059\u304c\n\u3055\u3089\u306b\u4fbf\u5229\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u3092\u884c\u3046\u3068\u3044\u3044\u611f\u3058\u306e\u74b0\u5883\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u8ffd\u52a0\u3067\u5c0e\u5165\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\n\nmaximize-panes \u5225Pane\u3067\u958b\u304fREPL\u30bf\u30d6\u306e\u8868\u793a/\u975e\u8868\u793a\u304cctrl-shift-enter\u3067\u3067\u304d\u3066\u4fbf\u5229\n\n\n\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u8a2d\u5b9a\n\nlanguage-clojure\u306eNon Word Characters\u306f ()\",;~@[]{}` \u306b\nlisp-paredit\u306eIndentation Forms\u306ftry, catch, finally, /^let/, are, /^def/, fn, case, /^condp?/, /^if/, for, /^when/, testing, /^do/, loop, ns, binding, /^with/, comment, proxy, reify, locking, future, /^extend/, while\u306b\nproto-repl\u306eLein Path\u3092\u8a2d\u5b9a\u3059\u308b\n\n\nAtom\u306e\u8a2d\u5b9a\n\nPackages With Keymaps Disabled\u306e\u8a2d\u5b9a\u306bink\u3082\u52a0\u3048\u3066\u3001lisp-paredit, ink \u306b\n\n\ninit.cljs\u3068keymap.cson\u306e\u8a2d\u5b9a\nAtom\u306einit.coffee\u3092init.cljs\uff08ClojureScript\uff09\u3067\u7f6e\u304d\u63db\u3048\u308b\u65b9\u6cd5 \u3092\u5c0e\u5165\u3057\u305f\u3046\u3048\u3067\n\ninit.cljs\n(def workspace global.atom.workspace)\n(def commands global.atom.commands)\n(def views global.atom.views)\n\n(defn get-editor [] (.getActiveTextEditor workspace))\n(defn get-editor-view [] (.getView views (get-editor)))\n(defn get-cursor [] (.getLastCursor (get-editor)))\n(defn get-cursors [] (.getCursors (get-editor)))\n\n(defn add-command [name & fs]\n  (.add commands \"atom-text-editor\" name #(doseq [f fs] (f))))\n(defn dispatch [name] (.dispatch commands (get-editor-view) name))\n\n\n; S\u5f0f\u306e\u9078\u629e\n(add-command \"cljs:select-sexp\"\n             #(dispatch \"lisp-paredit:up-sexp\")\n             #(dispatch \"lisp-paredit:expand-selection\"))\n\n; S\u5f0f\u5185\u90e8\u306e\u9078\u629e\n(add-command \"cljs:select-sexp-inside\"\n             #(dispatch \"core:move-left\")\n             #(dispatch \"core:move-right\")\n             #(dispatch \"bracket-matcher:select-inside-brackets\"))\n\n; Enter\n(add-command \"cljs:enter\"\n             #(if (.isAtEndOfLine (get-cursor))\n                (dispatch \"editor:newline\")\n                (dispatch \"lisp-paredit:newline\")))\n\n; \u30b3\u30fc\u30c9\u5b9f\u884c\n(add-command \"cljs:execute-block\"\n             #(if (pos? (count (.getSelectedText (get-editor))))\n                (dispatch \"proto-repl:execute-selected-text\")\n                (dispatch \"proto-repl:execute-top-block\")))\n\n; \u81ea\u52d5\u3067\u9589\u3058\u308b\u6319\u52d5\u3092OFF\u306b\u3057\u3066\u30b7\u30f3\u30b0\u30eb\u30af\u30aa\u30fc\u30c8\n(add-command \"cljs:single-quote\"\n             #(doseq [s (.getSelections (get-editor))]\n                (.insertText s \"'\")))\n\n; \u9078\u629e\u90e8\u5206\u306e\u30de\u30af\u30ed\u5c55\u958b\n(add-command \"cljs:macro-expand\"\n             #(let [s (.getLastSelection (get-editor))\n                    code (str \"(macroexpand-1 '\" (.getText s) \")\")\n                    options (clj->js {:inlineOptions {:editor (get-editor)\n                                                      :range (.getBufferRange s)}})]\n                (.executeCodeInNs global.protoRepl code options)))\n\n\n\n\nkeymap.cson\n'atom-text-editor':\n  'ctrl-q': 'tree-view:toggle'\n  'ctrl-t': 'tool-bar:toggle'\n\n'atom-workspace atom-text-editor[data-grammar~=\"clojure\"].autocomplete-active':\n  'enter': 'autocomplete-plus:confirm'\n\n'atom-text-editor[data-grammar~=\"clojure\"]:not([mini])':\n  'enter': 'cljs:enter'\n  'shift-enter': 'cljs:execute-block'\n  'f4': 'cljs:select-sexp'\n  'f5': 'cljs:select-sexp-inside'\n  'ctrl-i': 'lisp-paredit:indent'\n  'ctrl-d': 'proto-repl:print-var-documentation'\n  'ctrl-delete': 'editor:delete-to-end-of-line'\n  'insert right': 'lisp-paredit:slurp-forwards'\n  'alt-c': 'inline-results:clear-all'\n  'ctrl-e': 'cljs:macro-expand'\n  '&': 'cljs:single-quote'\n\n\n\nkeymap.cson\u306e'&': 'cljs:single-quote'\u306f\u3001\u65e5\u672c\u8a9e\u30ad\u30fc\u30dc\u30fc\u30c9\u3067\u306e\uff08\uff1f\uff09\u30b7\u30f3\u30b0\u30eb\u30af\u30aa\u30fc\u30c8\u306e\u30ad\u30fc\u3067\u767a\u884c\u3055\u308c\u308b\u30b3\u30de\u30f3\u30c9\u3067\u3059\u3002\n\n[Atom Clojure Setup](https://gist.github.com/jasongilman/d1f70507bed021b48625)\n\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u3001Atom\u3067Clojure\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u74b0\u5883\u304c\u3042\u308b\u7a0b\u5ea6\u3067\u304d\u307e\u3059\u304c\n\u3055\u3089\u306b\u4fbf\u5229\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u3092\u884c\u3046\u3068\u3044\u3044\u611f\u3058\u306e\u74b0\u5883\u306b\u306a\u308a\u307e\u3059\u3002\n\n## \u8ffd\u52a0\u3067\u5c0e\u5165\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\n* maximize-panes \u5225Pane\u3067\u958b\u304fREPL\u30bf\u30d6\u306e\u8868\u793a/\u975e\u8868\u793a\u304cctrl-shift-enter\u3067\u3067\u304d\u3066\u4fbf\u5229\n\n## \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u8a2d\u5b9a\n* language-clojure\u306eNon Word Characters\u306f ()\",;~@[]{}` \u306b\n* lisp-paredit\u306eIndentation Forms\u306f`try, catch, finally, /^let/, are, /^def/, fn, case, /^condp?/, /^if/, for, /^when/, testing, /^do/, loop, ns, binding, /^with/, comment, proxy, reify, locking, future, /^extend/, while`\u306b\n* proto-repl\u306eLein Path\u3092\u8a2d\u5b9a\u3059\u308b\n\n## Atom\u306e\u8a2d\u5b9a\n* Packages With Keymaps Disabled\u306e\u8a2d\u5b9a\u306bink\u3082\u52a0\u3048\u3066\u3001`lisp-paredit, ink` \u306b\n\n## init.cljs\u3068keymap.cson\u306e\u8a2d\u5b9a\n[Atom\u306einit.coffee\u3092init.cljs\uff08ClojureScript\uff09\u3067\u7f6e\u304d\u63db\u3048\u308b\u65b9\u6cd5](http://qiita.com/kurogelee/items/b198733771ae1c7e35ac) \u3092\u5c0e\u5165\u3057\u305f\u3046\u3048\u3067\n\n```init.cljs\n(def workspace global.atom.workspace)\n(def commands global.atom.commands)\n(def views global.atom.views)\n\n(defn get-editor [] (.getActiveTextEditor workspace))\n(defn get-editor-view [] (.getView views (get-editor)))\n(defn get-cursor [] (.getLastCursor (get-editor)))\n(defn get-cursors [] (.getCursors (get-editor)))\n\n(defn add-command [name & fs]\n  (.add commands \"atom-text-editor\" name #(doseq [f fs] (f))))\n(defn dispatch [name] (.dispatch commands (get-editor-view) name))\n\n\n; S\u5f0f\u306e\u9078\u629e\n(add-command \"cljs:select-sexp\"\n             #(dispatch \"lisp-paredit:up-sexp\")\n             #(dispatch \"lisp-paredit:expand-selection\"))\n\n; S\u5f0f\u5185\u90e8\u306e\u9078\u629e\n(add-command \"cljs:select-sexp-inside\"\n             #(dispatch \"core:move-left\")\n             #(dispatch \"core:move-right\")\n             #(dispatch \"bracket-matcher:select-inside-brackets\"))\n\n; Enter\n(add-command \"cljs:enter\"\n             #(if (.isAtEndOfLine (get-cursor))\n                (dispatch \"editor:newline\")\n                (dispatch \"lisp-paredit:newline\")))\n\n; \u30b3\u30fc\u30c9\u5b9f\u884c\n(add-command \"cljs:execute-block\"\n             #(if (pos? (count (.getSelectedText (get-editor))))\n                (dispatch \"proto-repl:execute-selected-text\")\n                (dispatch \"proto-repl:execute-top-block\")))\n\n; \u81ea\u52d5\u3067\u9589\u3058\u308b\u6319\u52d5\u3092OFF\u306b\u3057\u3066\u30b7\u30f3\u30b0\u30eb\u30af\u30aa\u30fc\u30c8\n(add-command \"cljs:single-quote\"\n             #(doseq [s (.getSelections (get-editor))]\n                (.insertText s \"'\")))\n\n; \u9078\u629e\u90e8\u5206\u306e\u30de\u30af\u30ed\u5c55\u958b\n(add-command \"cljs:macro-expand\"\n             #(let [s (.getLastSelection (get-editor))\n                    code (str \"(macroexpand-1 '\" (.getText s) \")\")\n                    options (clj->js {:inlineOptions {:editor (get-editor)\n                                                      :range (.getBufferRange s)}})]\n                (.executeCodeInNs global.protoRepl code options)))\n\n```\n\n```keymap.cson\n'atom-text-editor':\n  'ctrl-q': 'tree-view:toggle'\n  'ctrl-t': 'tool-bar:toggle'\n\n'atom-workspace atom-text-editor[data-grammar~=\"clojure\"].autocomplete-active':\n  'enter': 'autocomplete-plus:confirm'\n\n'atom-text-editor[data-grammar~=\"clojure\"]:not([mini])':\n  'enter': 'cljs:enter'\n  'shift-enter': 'cljs:execute-block'\n  'f4': 'cljs:select-sexp'\n  'f5': 'cljs:select-sexp-inside'\n  'ctrl-i': 'lisp-paredit:indent'\n  'ctrl-d': 'proto-repl:print-var-documentation'\n  'ctrl-delete': 'editor:delete-to-end-of-line'\n  'insert right': 'lisp-paredit:slurp-forwards'\n  'alt-c': 'inline-results:clear-all'\n  'ctrl-e': 'cljs:macro-expand'\n  '&': 'cljs:single-quote'\n```\n\n* keymap.cson\u306e`'&': 'cljs:single-quote'`\u306f\u3001\u65e5\u672c\u8a9e\u30ad\u30fc\u30dc\u30fc\u30c9\u3067\u306e\uff08\uff1f\uff09\u30b7\u30f3\u30b0\u30eb\u30af\u30aa\u30fc\u30c8\u306e\u30ad\u30fc\u3067\u767a\u884c\u3055\u308c\u308b\u30b3\u30de\u30f3\u30c9\u3067\u3059\u3002\n\n", "tags": ["ATOM", "Clojure", "ClojureScript"]}