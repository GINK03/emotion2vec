{"context": "WKWebView\u306bHTML\u8868\u793a\u3055\u305b\u3001PDF\u5316\u3059\u308b\uff08Swift2.2, XCode7.3.1\uff09\u306e\u3064\u3065\u304d\n\n\u3057\u305f\u3044\u3053\u3068\niPad\u5074\u3067PDF\u4f5c\u6210\u3057\u3066\u3001Windows\u30b5\u30fc\u30d0\u306b\u9001\u4fe1\u3059\u308b\u3002\n\u30b5\u30fc\u30d0\u5074\u306f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30cf\u30f3\u30c9\u30e9(ashx)\u3067\u53d7\u4fe1\u3057\u3066\u3001PDF\u3092\u4fdd\u5b58\u3059\u308b\u3002\n\u30b5\u30fc\u30d0\u5074\u306e\u51e6\u7406\u3092PHP\u3067\u884c\u3048\u3070\u3001\u3068\u3066\u3082\u7c21\u5358\u306b\u3067\u304d\u307e\u3057\u305f\u3002\nPHP\u306e\u5834\u5408\u306e\u53c2\u8003URL\nPHP\u304cNG\u3067\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30cf\u30f3\u30c9\u30e9\u3067\u51e6\u7406\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u82e6\u52b4\u3057\u305f\u306e\u3067\u30e1\u30e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\n\nViewController.swift\nimport UIKit\nimport WebKit\n\nextension NSMutableData {\n    func appendString(string: String) {\n        let data = string.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: true)\n        appendData(data!)\n    }\n}\n\nclass ViewController: UIViewController, WKNavigationDelegate, UIScrollViewDelegate {\n    private var subView: UIView!\n    private var webView: WKWebView!\n\n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n\n        let size = view.frame.size\n        subView = UIView(frame: CGRectMake(0, 0, size.width, size.height - 50))\n\n        let btn = UIButton(type: .System)\n        btn.frame = CGRectMake(0, size.height - 50, 90, 40)\n        btn.setTitle(\"set HTML\", forState: .Normal)\n        btn.addTarget(self, action: #selector(ViewController.tapBtn(_:)), forControlEvents: .TouchUpInside)\n\n        let btn2 = UIButton(type: .System)\n        btn2.frame = CGRectMake(size.width * 0.35, size.height - 50, 90, 40)\n        btn2.setTitle(\"set from web\", forState: .Normal)\n        btn2.addTarget(self, action: #selector(ViewController.tapBtn2(_:)), forControlEvents: .TouchUpInside)\n\n        let btn3 = UIButton(type: .System)\n        btn3.frame = CGRectMake(size.width * 0.7, size.height - 50, 90, 40)\n        btn3.setTitle(\"create pdf\", forState: .Normal)\n        btn3.addTarget(self, action: #selector(ViewController.tapBtn3(_:)), forControlEvents: .TouchUpInside)\n\n        view.addSubview(subView)\n        view.addSubview(btn)\n        view.addSubview(btn2)\n        view.addSubview(btn3)\n\n        webView = WKWebView()\n        setupSubViews(subView)\n    }\n\n    internal func tapBtn(sender: UIButton) {\n//        webView.loadHTMLString(getStrFromFile(\"test.html\"), baseURL: nil)\n        webView.loadHTMLString(\"hoge<br>piyo<br>foo<br>bar<br>hogeeeeeeeeeeeeeeeee\", baseURL: nil)\n    }\n\n    internal func tapBtn2(sender: UIButton) {\n        let req = NSURLRequest(URL: NSURL(string:\"http://www.yahoo.co.jp/\")!)\n        webView.loadRequest(req)\n    }\n\n    internal func tapBtn3(sender: UIButton) {\n//        let path = NSHomeDirectory().stringByAppendingString(\"/hoge.pdf\")\n//        PDFMaker.make([webView], path: path)\n\n        // PDF\u30d5\u30a1\u30a4\u30eb\u306f\u4f5c\u6210\u305b\u305a\u306bNSData\u5316\u3059\u308b\n        let data = PDFMaker.make([webView])\n        //        data.writeToURL(NSURL(fileURLWithPath: path), atomically: true)\n        uploadPDF(data)\n    }\n\n\n    private func setupSubViews(v: UIView)\n    {\n//        webView.navigationDelegate = self\n//        webView.scrollView.delegate = self\n        webView.translatesAutoresizingMaskIntoConstraints = false\n        v.addSubview(webView)\n        var viewBindingsDict = [String: AnyObject]()\n        viewBindingsDict[\"webView\"] = webView\n        v.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat(\"H:|[webView]|\", options: NSLayoutFormatOptions(rawValue: 0), metrics: nil, views: viewBindingsDict))\n        v.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat(\"V:|[webView]|\", options: NSLayoutFormatOptions(rawValue: 0), metrics: nil, views: viewBindingsDict))\n    }\n\n    private func uploadPDF(pdfData: NSData) -> Bool {\n        var ret = true\n\n        let request = NSMutableURLRequest(URL: NSURL(string: \"ashx\u30d5\u30a1\u30a4\u30eb\u306eURL\")!)\n        request.HTTPMethod = \"POST\"\n        let param = [\n            \"userId\" : \"12345\"\n        ]\n        let boundary = generateBoundaryString()\n        request.setValue(\"multipart/form-data; boundary=\\(boundary)\", forHTTPHeaderField: \"Content-Type\")\n        request.HTTPBody = createBodyWithParameters(param, filePathKey: \"file\", dataKey: pdfData, boundary: boundary)\n        let task = NSURLSession.sharedSession().dataTaskWithRequest(request) {\n            data, response, error in\n            if error != nil {\n                print(\"error=\\(error)\")\n                ret = false\n            }\n            print(\"******* response = \\(response)\")\n            let responseString = NSString(data: data!, encoding: NSUTF8StringEncoding)\n            print(\"****** response data = \\(responseString!)\")\n            dispatch_async(dispatch_get_main_queue(),{\n            });\n        }\n        task.resume()\n\n        return ret\n    }\n\n    private func createBodyWithParameters(parameters: [String: String]?, filePathKey: String?, dataKey: NSData, boundary: String) -> NSData {\n        let body = NSMutableData()\n        if parameters != nil {\n            for (key, value) in parameters! {\n                body.appendString(\"--\\(boundary)\\r\\n\")\n                body.appendString(\"Content-Disposition: form-data; name=\\\"\\(key)\\\"\\r\\n\\r\\n\")\n                body.appendString(\"\\(value)\\r\\n\")\n            }\n        }\n        //        let filename = \"user-profile.jpg\"\n        let filename = \"1234567890.pdf\"\n        //        let mimetype = \"image/jpg\"\n        let mimetype = \"application/pdf\"\n        body.appendString(\"--\\(boundary)\\r\\n\")\n        body.appendString(\"Content-Disposition: form-data; name=\\\"\\(filePathKey!)\\\"; filename=\\\"\\(filename)\\\"\\r\\n\")\n        body.appendString(\"Content-Type: \\(mimetype)\\r\\n\\r\\n\")\n        body.appendData(dataKey)\n        body.appendString(\"\\r\\n\")\n        body.appendString(\"--\\(boundary)--\\r\\n\")\n        return body\n    }\n\n    private func generateBoundaryString() -> String {\n        return \"Boundary-\\(NSUUID().UUIDString)\"\n    }\n\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n\n    // \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3057\u305f\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u306e\u6587\u5b57\u5217\u53d6\u5f97\n    private func getStrFromFile(fname: String) -> String {\n        var ret = \"\"\n        var path = NSString(string: fname)\n        // Encode \u65e5\u672c\u8a9e\u30d5\u30a1\u30a4\u30eb\u5bfe\u5fdc\n        path = path.stringByAddingPercentEncodingWithAllowedCharacters(NSCharacterSet.URLQueryAllowedCharacterSet())!\n        let ext = path.pathExtension\n        let filename = path.stringByDeletingPathExtension\n        do {\n            if let path = NSBundle.mainBundle().pathForResource(filename, ofType: ext) {\n                ret = try String(contentsOfFile: path, encoding: NSUTF8StringEncoding)\n            }\n        } catch {\n            print(\"error getStrFromFile\")\n        }\n        return ret\n    }\n}\n\n// PDF\u4f5c\u6210\u30af\u30e9\u30b9\nclass PDFMaker {\n    private class func renderViews(views: [UIView]) {\n        guard let context = UIGraphicsGetCurrentContext() else {\n            return\n        }\n        views.forEach {\n            if let scrollView = $0 as? UIScrollView {\n                let tmpInfo = (offset: scrollView.contentOffset, frame: scrollView.frame)\n                scrollView.contentOffset = CGPointZero\n                scrollView.frame = CGRect(origin: CGPointZero, size: scrollView.contentSize)\n                UIGraphicsBeginPDFPageWithInfo(scrollView.frame, nil)\n                $0.layer.renderInContext(context)\n                scrollView.frame = tmpInfo.frame\n                scrollView.contentOffset = tmpInfo.offset\n            } else {\n                UIGraphicsBeginPDFPageWithInfo($0.bounds, nil)\n                $0.layer.renderInContext(context)\n            }\n        }\n    }\n\n    class func make(views: [UIView], path: String) {\n        UIGraphicsBeginPDFContextToFile(path, CGRectZero, nil)\n        renderViews(views)\n        UIGraphicsEndPDFContext()\n    }\n\n    class func make(views: [UIView]) -> NSData {\n        let data = NSMutableData()\n        UIGraphicsBeginPDFContextToData(data, CGRectZero, nil)\n        renderViews(views)\n        UIGraphicsEndPDFContext()\n        return data\n    }\n}\n\n\n\n\u30b5\u30fc\u30d0\u5074.ashx.vb\nImports System.Web\nImports System.Web.Services\nImports System.IO\n\nPublic Class emsapp\n    Implements System.Web.IHttpHandler\n\n    Private resp As HttpResponse = Nothing\n    Private context As HttpContext = Nothing\n    Private dirPath As String = System.Configuration.ConfigurationManager.AppSettings(\"dirPath\")\n\n    Sub ProcessRequest(ByVal context As HttpContext) Implements IHttpHandler.ProcessRequest\n        resp = context.Response\n        Me.context = context\n        context.Response.ContentType = \"text/plain\"\n\n\n        If Not IO.Directory.Exists(dirPath) Then\n            IO.Directory.CreateDirectory(dirPath)\n        End If\n\n        Dim files = context.Request.Files\n        For i As Integer = 0 To files.Count - 1\n            Dim file = files(i)\n            Dim fnameTmp = context.Server.MapPath(\"~/\" + file.FileName)\n            file.SaveAs(fnameTmp)\n            Dim fname = IO.Path.Combine(dirPath, file.FileName)\n\n            If IO.File.Exists(fname) Then\n                IO.File.Delete(fname)\n            End If\n            IO.File.Move(fnameTmp, fname)\n            println(fname)\n        Next\n\n        '' PDF\u306f\u3067\u304d\u308b\u304c\u771f\u3063\u767d\u30fb\u30fb\u30fb\n        'Dim str = New StreamReader(context.Request.InputStream, context.Request.ContentEncoding).ReadToEnd()\n        ''Dim sr As New System.IO.StreamReader(context.Request.InputStream)\n        ''Dim str = New StreamReader(context.Request.InputStream).ReadToEnd\n        'Dim path = IO.Path.Combine(dirPath, \"hoge.pdf\")\n        ''Dim sw = New StreamWriter(path, True, System.Text.Encoding.ASCII)\n        'Dim sw = New StreamWriter(path, True, System.Text.Encoding.Default)\n        'sw.Write(str)\n        'sw.Close()\n    End Sub\n\n    ReadOnly Property IsReusable() As Boolean Implements IHttpHandler.IsReusable\n        Get\n            Return False\n        End Get\n    End Property\n\n    Private Sub print(ByVal s As String)\n        resp.Write(s)\n    End Sub\n\n    Private Sub println(ByVal s As String)\n        resp.Write(s + vbCrLf)\n    End Sub\n\nEnd Class\n\n\n[WKWebView\u306bHTML\u8868\u793a\u3055\u305b\u3001PDF\u5316\u3059\u308b\uff08Swift2.2, XCode7.3.1\uff09](http://qiita.com/keita1987/items/c3053bb978c1d5b2b3d3)\u306e\u3064\u3065\u304d\n\n#\u3057\u305f\u3044\u3053\u3068\niPad\u5074\u3067PDF\u4f5c\u6210\u3057\u3066\u3001Windows\u30b5\u30fc\u30d0\u306b\u9001\u4fe1\u3059\u308b\u3002\n\u30b5\u30fc\u30d0\u5074\u306f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30cf\u30f3\u30c9\u30e9(ashx)\u3067\u53d7\u4fe1\u3057\u3066\u3001PDF\u3092\u4fdd\u5b58\u3059\u308b\u3002\n\n\u30b5\u30fc\u30d0\u5074\u306e\u51e6\u7406\u3092PHP\u3067\u884c\u3048\u3070\u3001\u3068\u3066\u3082\u7c21\u5358\u306b\u3067\u304d\u307e\u3057\u305f\u3002\n[PHP\u306e\u5834\u5408\u306e\u53c2\u8003URL](https://sites.google.com/a/gclue.jp/swift-docs/ni-yinki100-ios/13-http/fairuwoappurodosuru)\nPHP\u304cNG\u3067\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30cf\u30f3\u30c9\u30e9\u3067\u51e6\u7406\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u82e6\u52b4\u3057\u305f\u306e\u3067\u30e1\u30e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\n#\u30b3\u30fc\u30c9\n```swift:ViewController.swift\nimport UIKit\nimport WebKit\n\nextension NSMutableData {\n    func appendString(string: String) {\n        let data = string.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: true)\n        appendData(data!)\n    }\n}\n\nclass ViewController: UIViewController, WKNavigationDelegate, UIScrollViewDelegate {\n    private var subView: UIView!\n    private var webView: WKWebView!\n    \n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n\n        let size = view.frame.size\n        subView = UIView(frame: CGRectMake(0, 0, size.width, size.height - 50))\n        \n        let btn = UIButton(type: .System)\n        btn.frame = CGRectMake(0, size.height - 50, 90, 40)\n        btn.setTitle(\"set HTML\", forState: .Normal)\n        btn.addTarget(self, action: #selector(ViewController.tapBtn(_:)), forControlEvents: .TouchUpInside)\n        \n        let btn2 = UIButton(type: .System)\n        btn2.frame = CGRectMake(size.width * 0.35, size.height - 50, 90, 40)\n        btn2.setTitle(\"set from web\", forState: .Normal)\n        btn2.addTarget(self, action: #selector(ViewController.tapBtn2(_:)), forControlEvents: .TouchUpInside)\n        \n        let btn3 = UIButton(type: .System)\n        btn3.frame = CGRectMake(size.width * 0.7, size.height - 50, 90, 40)\n        btn3.setTitle(\"create pdf\", forState: .Normal)\n        btn3.addTarget(self, action: #selector(ViewController.tapBtn3(_:)), forControlEvents: .TouchUpInside)\n        \n        view.addSubview(subView)\n        view.addSubview(btn)\n        view.addSubview(btn2)\n        view.addSubview(btn3)\n        \n        webView = WKWebView()\n        setupSubViews(subView)\n    }\n\n    internal func tapBtn(sender: UIButton) {\n//        webView.loadHTMLString(getStrFromFile(\"test.html\"), baseURL: nil)\n        webView.loadHTMLString(\"hoge<br>piyo<br>foo<br>bar<br>hogeeeeeeeeeeeeeeeee\", baseURL: nil)\n    }\n    \n    internal func tapBtn2(sender: UIButton) {\n        let req = NSURLRequest(URL: NSURL(string:\"http://www.yahoo.co.jp/\")!)\n        webView.loadRequest(req)\n    }\n    \n    internal func tapBtn3(sender: UIButton) {\n//        let path = NSHomeDirectory().stringByAppendingString(\"/hoge.pdf\")\n//        PDFMaker.make([webView], path: path)\n        \n        // PDF\u30d5\u30a1\u30a4\u30eb\u306f\u4f5c\u6210\u305b\u305a\u306bNSData\u5316\u3059\u308b\n        let data = PDFMaker.make([webView])\n        //        data.writeToURL(NSURL(fileURLWithPath: path), atomically: true)\n        uploadPDF(data)\n    }\n    \n    \n    private func setupSubViews(v: UIView)\n    {\n//        webView.navigationDelegate = self\n//        webView.scrollView.delegate = self\n        webView.translatesAutoresizingMaskIntoConstraints = false\n        v.addSubview(webView)\n        var viewBindingsDict = [String: AnyObject]()\n        viewBindingsDict[\"webView\"] = webView\n        v.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat(\"H:|[webView]|\", options: NSLayoutFormatOptions(rawValue: 0), metrics: nil, views: viewBindingsDict))\n        v.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat(\"V:|[webView]|\", options: NSLayoutFormatOptions(rawValue: 0), metrics: nil, views: viewBindingsDict))\n    }\n    \n    private func uploadPDF(pdfData: NSData) -> Bool {\n        var ret = true\n        \n        let request = NSMutableURLRequest(URL: NSURL(string: \"ashx\u30d5\u30a1\u30a4\u30eb\u306eURL\")!)\n        request.HTTPMethod = \"POST\"\n        let param = [\n            \"userId\" : \"12345\"\n        ]\n        let boundary = generateBoundaryString()\n        request.setValue(\"multipart/form-data; boundary=\\(boundary)\", forHTTPHeaderField: \"Content-Type\")\n        request.HTTPBody = createBodyWithParameters(param, filePathKey: \"file\", dataKey: pdfData, boundary: boundary)\n        let task = NSURLSession.sharedSession().dataTaskWithRequest(request) {\n            data, response, error in\n            if error != nil {\n                print(\"error=\\(error)\")\n                ret = false\n            }\n            print(\"******* response = \\(response)\")\n            let responseString = NSString(data: data!, encoding: NSUTF8StringEncoding)\n            print(\"****** response data = \\(responseString!)\")\n            dispatch_async(dispatch_get_main_queue(),{\n            });\n        }\n        task.resume()\n        \n        return ret\n    }\n    \n    private func createBodyWithParameters(parameters: [String: String]?, filePathKey: String?, dataKey: NSData, boundary: String) -> NSData {\n        let body = NSMutableData()\n        if parameters != nil {\n            for (key, value) in parameters! {\n                body.appendString(\"--\\(boundary)\\r\\n\")\n                body.appendString(\"Content-Disposition: form-data; name=\\\"\\(key)\\\"\\r\\n\\r\\n\")\n                body.appendString(\"\\(value)\\r\\n\")\n            }\n        }\n        //        let filename = \"user-profile.jpg\"\n        let filename = \"1234567890.pdf\"\n        //        let mimetype = \"image/jpg\"\n        let mimetype = \"application/pdf\"\n        body.appendString(\"--\\(boundary)\\r\\n\")\n        body.appendString(\"Content-Disposition: form-data; name=\\\"\\(filePathKey!)\\\"; filename=\\\"\\(filename)\\\"\\r\\n\")\n        body.appendString(\"Content-Type: \\(mimetype)\\r\\n\\r\\n\")\n        body.appendData(dataKey)\n        body.appendString(\"\\r\\n\")\n        body.appendString(\"--\\(boundary)--\\r\\n\")\n        return body\n    }\n    \n    private func generateBoundaryString() -> String {\n        return \"Boundary-\\(NSUUID().UUIDString)\"\n    }\n    \n    \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n    \n    // \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3057\u305f\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u306e\u6587\u5b57\u5217\u53d6\u5f97\n    private func getStrFromFile(fname: String) -> String {\n        var ret = \"\"\n        var path = NSString(string: fname)\n        // Encode \u65e5\u672c\u8a9e\u30d5\u30a1\u30a4\u30eb\u5bfe\u5fdc\n        path = path.stringByAddingPercentEncodingWithAllowedCharacters(NSCharacterSet.URLQueryAllowedCharacterSet())!\n        let ext = path.pathExtension\n        let filename = path.stringByDeletingPathExtension\n        do {\n            if let path = NSBundle.mainBundle().pathForResource(filename, ofType: ext) {\n                ret = try String(contentsOfFile: path, encoding: NSUTF8StringEncoding)\n            }\n        } catch {\n            print(\"error getStrFromFile\")\n        }\n        return ret\n    }\n}\n\n// PDF\u4f5c\u6210\u30af\u30e9\u30b9\nclass PDFMaker {\n    private class func renderViews(views: [UIView]) {\n        guard let context = UIGraphicsGetCurrentContext() else {\n            return\n        }\n        views.forEach {\n            if let scrollView = $0 as? UIScrollView {\n                let tmpInfo = (offset: scrollView.contentOffset, frame: scrollView.frame)\n                scrollView.contentOffset = CGPointZero\n                scrollView.frame = CGRect(origin: CGPointZero, size: scrollView.contentSize)\n                UIGraphicsBeginPDFPageWithInfo(scrollView.frame, nil)\n                $0.layer.renderInContext(context)\n                scrollView.frame = tmpInfo.frame\n                scrollView.contentOffset = tmpInfo.offset\n            } else {\n                UIGraphicsBeginPDFPageWithInfo($0.bounds, nil)\n                $0.layer.renderInContext(context)\n            }\n        }\n    }\n    \n    class func make(views: [UIView], path: String) {\n        UIGraphicsBeginPDFContextToFile(path, CGRectZero, nil)\n        renderViews(views)\n        UIGraphicsEndPDFContext()\n    }\n    \n    class func make(views: [UIView]) -> NSData {\n        let data = NSMutableData()\n        UIGraphicsBeginPDFContextToData(data, CGRectZero, nil)\n        renderViews(views)\n        UIGraphicsEndPDFContext()\n        return data\n    }\n}\n```\n\n```vbnet:\u30b5\u30fc\u30d0\u5074.ashx.vb\nImports System.Web\nImports System.Web.Services\nImports System.IO\n\nPublic Class emsapp\n    Implements System.Web.IHttpHandler\n\n    Private resp As HttpResponse = Nothing\n    Private context As HttpContext = Nothing\n    Private dirPath As String = System.Configuration.ConfigurationManager.AppSettings(\"dirPath\")\n\n    Sub ProcessRequest(ByVal context As HttpContext) Implements IHttpHandler.ProcessRequest\n        resp = context.Response\n        Me.context = context\n        context.Response.ContentType = \"text/plain\"\n\n\n        If Not IO.Directory.Exists(dirPath) Then\n            IO.Directory.CreateDirectory(dirPath)\n        End If\n\n        Dim files = context.Request.Files\n        For i As Integer = 0 To files.Count - 1\n            Dim file = files(i)\n            Dim fnameTmp = context.Server.MapPath(\"~/\" + file.FileName)\n            file.SaveAs(fnameTmp)\n            Dim fname = IO.Path.Combine(dirPath, file.FileName)\n\n            If IO.File.Exists(fname) Then\n                IO.File.Delete(fname)\n            End If\n            IO.File.Move(fnameTmp, fname)\n            println(fname)\n        Next\n\n        '' PDF\u306f\u3067\u304d\u308b\u304c\u771f\u3063\u767d\u30fb\u30fb\u30fb\n        'Dim str = New StreamReader(context.Request.InputStream, context.Request.ContentEncoding).ReadToEnd()\n        ''Dim sr As New System.IO.StreamReader(context.Request.InputStream)\n        ''Dim str = New StreamReader(context.Request.InputStream).ReadToEnd\n        'Dim path = IO.Path.Combine(dirPath, \"hoge.pdf\")\n        ''Dim sw = New StreamWriter(path, True, System.Text.Encoding.ASCII)\n        'Dim sw = New StreamWriter(path, True, System.Text.Encoding.Default)\n        'sw.Write(str)\n        'sw.Close()\n    End Sub\n\n    ReadOnly Property IsReusable() As Boolean Implements IHttpHandler.IsReusable\n        Get\n            Return False\n        End Get\n    End Property\n\n    Private Sub print(ByVal s As String)\n        resp.Write(s)\n    End Sub\n\n    Private Sub println(ByVal s As String)\n        resp.Write(s + vbCrLf)\n    End Sub\n\nEnd Class\n```\n", "tags": ["Swift", "Swift2.2", "ashx", "VB.Net"]}