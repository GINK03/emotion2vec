{"tags": ["lambda", "AWS", "sqs", "SNS", "cognito"], "context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nLambda\u796d\u308a\u306e\u53c2\u52a0\u306b\u82e5\u5e72\u9045\u308c\u305f\u611f\u3058\u3067\u3059\u304c\u3001\u305b\u3063\u304b\u304f\u4f5c\u308b\u306a\u3089\u3084\u306f\u308aIoT/M2M\u95a2\u4fc2\u3067\u4f55\u304b\u3057\u305f\u3044\u306a\u3068\u601d\u3044\u3001\u3044\u308d\u3044\u308d\u8003\u3048\u3066\u305f\u3089\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n2014\u5e74\uff15\u6708\u304f\u3089\u3044\u306bRaspberry Pi\u306b\u6e29\u5ea6\u30bb\u30f3\u30b5(ADT7410)\u3092\u3064\u306a\u3052\u3066Kinesis\u306b\u3042\u3052\u3066\u30ea\u30a2\u30ea\u30bf\u30a4\u30e0\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3092\u3059\u308b\u30c7\u30e2\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\u8a73\u7d30\u306f\u3053\u3061\u3089\uff08\u30b9\u30e9\u30a4\u30c920\u304f\u3089\u3044\uff09\u3053\u306e\u6642\u306f\u5358\u7d14\u306b\u6e29\u5ea6\u30c7\u30fc\u30bf\u3092\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u3057\u3066\u4e0a\u3052\u308b\u3053\u3068\u3092\u3057\u3066\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3001\u90e8\u5c4b\u306e\u5ba4\u6e29\u3092\u30a4\u30d9\u30f3\u30c8\u3068\u3057\u3066\u30ed\u30b8\u30c3\u30af\u3092\u52d5\u4f5c\u3055\u305b\u308b\uff08\u3064\u307e\u308a\u3001Lambda Function\u3092\u5b9f\u884c\u3059\u308b\uff09\u3053\u3068\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\u51ac\u306b\u306a\u308b\u3068\u304a\u5e03\u56e3\u304b\u3089\u3067\u308b\u306e\u304c\u8f9b\u304f\u306a\u308a\u307e\u3059\u3088\u306d\u3002\u5916\u6c17\u6e29\u3068\u5ba4\u6e29\u306e\u5dee\u304c\u5e03\u56e3\u304b\u3089\u3067\u308b\u3053\u3068\u3092\u8f9b\u304f\u3055\u305b\u3066\u3044\u308b\u3068\u3044\u3046\u4eee\u8aac\uff08\uff01\uff1f\uff09\u3092\u30d9\u30fc\u30b9\u306bOpenWeatherMap\u304b\u3089\u5916\u6c17\u6e29\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u305d\u306e\u5916\u6c17\u6e29\u3068\u6bd4\u3079\u3066\u5ba4\u6e29\u304c\u4e0b\u304c\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u691c\u77e5\u3057\u3066\u30d6\u30b6\u30fc\u3068LCD\u306b\u60c5\u5831\u8868\u793a\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\u5168\u4f53\u69cb\u6210\n\n\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3092\u30af\u30e9\u30a6\u30c9\u306b\u3042\u3052\u308b\u30b1\u30fc\u30b9\u306b\u304a\u3044\u3066\u3001\u30bb\u30f3\u30b5\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u4e00\u5ea6\u3001\u4e2d\u7d99\u30c7\u30d0\u30a4\u30b9\uff08\u4eca\u56de\u306e\u5834\u5408\u306fRaspberry Pi\uff09\u306a\u3069\u306b\u305f\u3081\u3066\u304b\u3089\u4e0a\u3052\u308b\u3053\u3068\u304c\u591a\u3044\u3068\u601d\u3046\u306e\u3067\u4eca\u56de\u306f\u3042\u3048\u3066\u3001Arduino\u306b\u30bb\u30f3\u30b5(DS18B20)\u3092\u3064\u3051\u3066USB\u3067\u63a5\u7d9a\u3057\u5b9a\u671f\u7684\u306bRaspberry Pi\u306b\u4e0a\u3052\u308b\u3088\u3046\u306b\u3057\u3066\u307e\u3059\u3002\n\n\nArduino\n\u4eca\u56de\u5229\u7528\u3057\u305fDS18B20\u304b\u3089\u30c7\u30fc\u30bf\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u306f\u3001One Wire Protocol\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002OneWire\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u30c7\u30fc\u30bf\u30a2\u30af\u30bb\u30b9\u304c\u3067\u304d\u307e\u3059\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u53d6\u5f97\u5148\u306f\u3053\u3061\u3089\u3002\n\narduino\n#include <OneWire.h>\n#include <LiquidCrystal.h>\n\nOneWire  ds(9);  // on pin 9\n\nvoid setup(void) {\n  Serial.begin(9600);\n}\n\nvoid loop(void) {\n  byte i;\n  byte present = 0;\n  byte type_s;\n  byte data[12];\n  byte addr[8];\n  float celsius;\n\n  if ( !ds.search(addr)) {\n    ds.reset_search();\n    delay(250);\n    return;\n  }\n\n  if (OneWire::crc8(addr, 7) != addr[7]) {\n      return;\n  }\n  switch (addr[0]) {\n    case 0x10:\n      type_s = 1;\n      break;\n    case 0x28:\n      type_s = 0;\n      break;\n    case 0x22:\n      type_s = 0;\n      break;\n    default:\n      return;\n  }\n\n  ds.reset();\n  ds.select(addr);\n  ds.write(0x44,1);\n  delay(1000);\n  present = ds.reset();\n  ds.select(addr);   \n  ds.write(0xBE);\n  for ( i = 0; i < 9; i++) {\n    data[i] = ds.read();\n  }\n unsigned int raw = (data[1] << 8) | data[0];\n  if (type_s) {\n    raw = raw << 3;\n    if (data[7] == 0x10) {\n      raw = (raw & 0xFFF0) + 12 - data[6];\n    }\n  } else {\n    byte cfg = (data[4] & 0x60);\n    if (cfg == 0x00) raw = raw << 3;\n    else if (cfg == 0x20) raw = raw << 2;\n    else if (cfg == 0x40) raw = raw << 1;\n  }\n  celsius = (float)raw / 16.0;\n  Serial.print(celsius);\n  Serial.println();\n}\n\n\n\nRaspberryPi\nRaspberry Pi\u5074\u306f\u3001Arduino\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u30ed\u30b8\u30c3\u30af\u3068SQS\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97\u3057\u3066\u30d6\u30b6\u30fc\u3068LCD\u306e\u8868\u793a\u3059\u308b\u30ed\u30b8\u30c3\u30af\u306e2\u3064\u3092\u52d5\u4f5c\u3055\u305b\u307e\u3059\u3002Arduino\u306e\u30ed\u30b8\u30c3\u30af\u306f\u76ee\u899a\u307e\u3057\u4ee3\u308f\u308a\u306bcron\u3067\u8d77\u52d5\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001My Raspberry Pi\u306b\u306f\u3001Grovepi\u3092\u3064\u3051\u3066\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001grovepi\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u3001\u30d6\u30b6\u30fc\u3092\u306a\u3089\u3057\u305f\u308a\u3001LCD\u306b\u8868\u793a\u3057\u305f\u308a\u3057\u3066\u307e\u3059\u3002\n\nRaspberryPi-CallLambda.py\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nimport serial\nimport commands\nimport os\ns = serial.Serial('/dev/ttyACM0', 9600)\nline = s.readline()\ntemp = line.strip()\ntemp = \"{\\\"temp\\\":\" + str(temp) + \"}\"\nf = open('/tmp/test', 'w')\nf.write(temp)\nf.close()\nres = commands.getoutput(\"/usr/local/bin/aws lambda invoke-async --function-name ifttt --region\n us-east-1 --invoke-args /tmp/test\")\nos.remove('/tmp/test')\n\n\nboto\u304cLambda\u5bfe\u5fdc\u3057\u3066\u306a\u304b\u3063\u305f\u306e\u3067\u3001awscli\u3092\u4f7f\u3063\u3066Lambda\u306einvoke-async API\u3092\u767a\u884c\u3057\u307e\u3057\u305f\u3002\n\nRaspberryPi-GetSQSMessage.py\nimport boto\nimport boto.sqs\nimport time\nimport grovepi\nfrom grove_rgb_lcd import *\n\nbuzzer = 4\ngrovepi.pinMode(buzzer,\"OUTPUT\")\n\nACCOUNT_ID = '<ACCOUNT ID>'\nIDENTITY_POOL_ID = '<IDENTITY POOL ID>'\nROLE_ARN = '<ROLE>'\ncognito = boto.connect_cognito_identity()\ncognito_id = cognito.get_id(ACCOUNT_ID, IDENTITY_POOL_ID)\ntoken = cognito.get_open_id_token(cognito_id['IdentityId'])\nsts = boto.connect_sts()\nassumedRoleObject = sts.assume_role_with_web_identity(ROLE_ARN, \"bototest\", token['Token'])\nclient_sqs = boto.sqs.connect_to_region(\n\"us-east-1\",\naws_access_key_id=assumedRoleObject.credentials.access_key,\naws_secret_access_key=assumedRoleObject.credentials.secret_key,\nsecurity_token=assumedRoleObject.credentials.session_token)\nq = client_sqs.get_queue('lamda_ifttt')\nwhile True:\n    rs = q.get_messages(message_attributes=['weather_temp'])\n    if len(rs) >= 1:\n        m = rs[0]\n        print m.message_attributes['weather_temp']['string_value']\n        grovepi.digitalWrite(buzzer,1)\n        time.sleep(1)\n        grovepi.digitalWrite(buzzer,0)\n        setText(\"Weather Info: \" + m.message_attributes['weather_temp']['string_value']\n)\n        setRGB(0,128,64)\n        for c in range(0,255):\n            setRGB(c,255-c,0)\n            time.sleep(0.01)\n        setRGB(0,255,0)\n        q.delete_message(m)\n    time.sleep(10)\n\n\n\nLambda Function\n\u521d\u3081\u3066OpenWeathermap\u306eAPI\u3092\u4f7f\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u767b\u9332\u3082\u5fc5\u8981\u306a\u304f\u7c21\u5358\u306b\u5229\u7528\u3067\u304d\u307e\u3057\u305f\u3002\n\u73fe\u5728\u306e\u5929\u6c17\u60c5\u5831\u3092\u53d6\u5f97\u3092\u3059\u308bAPI\u306f\u3053\u3061\u3089\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\u3068\u3066\u3082\u7c21\u5358\u3067\u3059\u3002\n\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3092\u3082\u3068\u306bSNS\u3092\u4f7f\u3063\u3066\u30b1\u30fc\u30bf\u30a4\u306b\u901a\u77e5\u3059\u308b\u3068\u5171\u306b\u3001Raspberry Pi\u306eLCD\u3068\u30d6\u30b6\u30fc\u3092\u9cf4\u3089\u3059\u305f\u3081\u306bSQS\u306b\u30ad\u30e5\u30fc\u7a81\u3063\u8fbc\u3093\u3067\u307e\u3059\u3002Nest Step\u3068\u3057\u3066\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u3044\u308d\u3093\u306a\u610f\u5473\uff08LCD\u306b\u8868\u793a\u3055\u305b\u308b\u3068\u304b\u30d6\u30b6\u30fc\u306a\u3089\u3059\u3068\u304b\uff09\u3092\u6301\u305f\u305b\u3088\u3046\u304b\u306a\u3068\u601d\u3063\u3066\u304a\u308a\u307e\u3059\u3002\u6642\u9593\u304c\u3042\u308c\u3070\u3002\u3002\nOpenWeatherMap\u306eAPI\u306f\u5b89\u5b9a\u3057\u3066\u304a\u308a\u3001\u304b\u3064\u3001\u4eca\u56de\u306f\u3001\u4f4e\u983b\u5ea6\u3067\u306e\u30a2\u30af\u30bb\u30b9\u306a\u306e\u3067\u3001\u6bce\u56de\u53d6\u5f97\u3057\u306b\u884c\u3063\u3066\u307e\u3059\u304c\u3001\u5929\u6c17\u60c5\u5831\u306f\u305d\u308c\u307b\u3069\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u5165\u308c\u305f\u65b9\u304c\u3088\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\uff08\u3053\u308c\u3082Next Step\u3067\u3059\u304b\u306d\u3002\u3002\uff09\n\nLambdaFunction\nconsole.log('Loading event');\nvar http = require('http');\nvar aws = require('aws-sdk');\n\nexports.handler = function(event, context) {\n    http.get(\"http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp\", function(res) {\n        var body = '';\n        res.on('data', function(chunk) {\n            body += chunk;\n        });\n        res.on('end', function() {\n            var res = JSON.parse(body);\n            var wheather_temp = Math.floor(parseFloat(res.main.temp)*100 - parseFloat(273.15)*100)/100;\n            console.log(\"Wheather temp: \" + wheather_temp);\n            console.log(\"Rasp temp: \" + event.temp);\n            if((wheather_temp)*2 > parseFloat(event.temp)){\n                var message = 'Home:' + String(parseFloat(event.temp)) + '/ Outside:' + wheather_temp;\n                //SNS\n                var sns = new aws.SNS({params: {TopicArn: 'arn:aws:sns:us-east-1:736384702727:lambda-ifttt'}});\n                sns.publish({Message: message}, function (err, data) {\n                    if (!err) {\n                        console.log('Message published');\n                        context.done(null,'');\n                    }else{\n                        console.log(\"Err\");\n                    }\n                });\n                //SQS\n                var sqs = new aws.SQS();\n                var params = {\n                    MessageBody: 'Weather News',\n                    QueueUrl: 'https://sqs.us-east-1.amazonaws.com/736384702727/lamda_ifttt',\n                    DelaySeconds: 0,\n                    MessageAttributes: {\n                        'weather_temp': {\n                            DataType: 'String',\n                            StringValue: String(wheather_temp)\n                        }\n                    }\n                };\n                sqs.sendMessage(params, function(err, data) {\n                    if (err){\n                      console.log(err, err.stack);  \n                      context.done('error', e);\n                    }else{\n                        console.log(data);\n                        context.done('done');\n                    }\n                });\n            }\n        });\n    }).on('error', function(e) {\n        context.done('error', e);\n    });\n};\n\n\n\n\u6700\u5f8c\u306b\n\u304b\u306a\u308a\u7c21\u5358\u306b\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u30bf\u30a4\u30c8\u30eb\u306b\u3042\u308bIoT\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u30b5\u30fc\u30d3\u30b9\u306b\u306f\u7a0b\u9060\u3044\u3067\u3059\u304c\u3001Lambda\u53ca\u3073AWS\u306e\u5404\u7a2e\u30b5\u30fc\u30d3\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u30b5\u30fc\u30d3\u30b9\u3092\u7c21\u5358\u304b\u3064\u30b9\u30b1\u30fc\u30e9\u30d6\u30eb\u306b\u4f5c\u308c\u308b\u78ba\u4fe1\u3092\u5f97\u307e\u3057\u305f\uff57 \u3055\u3089\u306b\u3044\u3046\u3068Lambda\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001IoT\u304c\u767a\u884c\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u3068\u30af\u30e9\u30a6\u30c9\u306b\u84c4\u7a4d\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u72b6\u614b\u306b\u306a\u3063\u305f\u6642\u306b\u4f55\u304b\u52d5\u4f5c\u3055\u305b\u308b\u3068\u3044\u3063\u305f\u3001ifttt\u30a8\u30f3\u30b8\u30f3\u304c\u4f5c\u308c\u308b\uff01\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u30b3\u30ec\u3082Nest Step\u3068\u3057\u3066\u53d6\u308a\u7d44\u307f\u305f\u3044\u30c6\u30fc\u30de\u3067\u3059\u3002\u6a5f\u68b0\u5b66\u7fd2\u3068\u3082\u7d44\u307f\u5408\u308f\u305b\u305f\u3044\u306a\u30fc\u3002\n\n\u514d\u8cac\n\u3053\u3061\u3089\u306f\u500b\u4eba\u306e\u610f\u898b\u3067\u4f1a\u793e\u3068\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u3002\n#\u306f\u3058\u3081\u306b\b\nLambda\u796d\u308a\u306e\u53c2\u52a0\u306b\u82e5\u5e72\u9045\u308c\u305f\u611f\u3058\u3067\u3059\u304c\u3001\u305b\u3063\u304b\u304f\u4f5c\u308b\u306a\u3089\u3084\u306f\u308aIoT/M2M\u95a2\u4fc2\u3067\u4f55\u304b\u3057\u305f\u3044\u306a\u3068\u601d\u3044\u3001\u3044\u308d\u3044\u308d\u8003\u3048\u3066\u305f\u3089\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n2014\u5e74\uff15\u6708\u304f\u3089\u3044\u306bRaspberry Pi\u306b\u6e29\u5ea6\u30bb\u30f3\u30b5(ADT7410)\u3092\u3064\u306a\u3052\u3066Kinesis\u306b\u3042\u3052\u3066\u30ea\u30a2\u30ea\u30bf\u30a4\u30e0\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3092\u3059\u308b\u30c7\u30e2\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002<A href=\"http://www.slideshare.net/shot6/amazon-kinesis-32354587\">\u8a73\u7d30\u306f\u3053\u3061\u3089\uff08\u30b9\u30e9\u30a4\u30c920\u304f\u3089\u3044\uff09</a>\u3053\u306e\u6642\u306f\u5358\u7d14\u306b\u6e29\u5ea6\u30c7\u30fc\u30bf\u3092\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u3057\u3066\u4e0a\u3052\u308b\u3053\u3068\u3092\u3057\u3066\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3001\u90e8\u5c4b\u306e\u5ba4\u6e29\u3092\u30a4\u30d9\u30f3\u30c8\u3068\u3057\u3066\u30ed\u30b8\u30c3\u30af\u3092\u52d5\u4f5c\u3055\u305b\u308b\uff08\u3064\u307e\u308a\u3001Lambda Function\u3092\u5b9f\u884c\u3059\u308b\uff09\u3053\u3068\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\u51ac\u306b\u306a\u308b\u3068\u304a\u5e03\u56e3\u304b\u3089\u3067\u308b\u306e\u304c\u8f9b\u304f\u306a\u308a\u307e\u3059\u3088\u306d\u3002\u5916\u6c17\u6e29\u3068\u5ba4\u6e29\u306e\u5dee\u304c\u5e03\u56e3\u304b\u3089\u3067\u308b\u3053\u3068\u3092\u8f9b\u304f\u3055\u305b\u3066\u3044\u308b\u3068\u3044\u3046\u4eee\u8aac\uff08\uff01\uff1f\uff09\u3092\u30d9\u30fc\u30b9\u306b<a href=\"http://openweathermap.org/\">OpenWeatherMap</a>\u304b\u3089\u5916\u6c17\u6e29\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u305d\u306e\u5916\u6c17\u6e29\u3068\u6bd4\u3079\u3066\u5ba4\u6e29\u304c\u4e0b\u304c\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u691c\u77e5\u3057\u3066\u30d6\u30b6\u30fc\u3068LCD\u306b\u60c5\u5831\u8868\u793a\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308a\u307e\u3059\u3002\n# \u5168\u4f53\u69cb\u6210\n![qiita1.png](https://qiita-image-store.s3.amazonaws.com/0/60724/9a45aeee-503e-b91c-2b57-4f0615f57251.png)\n\n\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3092\u30af\u30e9\u30a6\u30c9\u306b\u3042\u3052\u308b\u30b1\u30fc\u30b9\u306b\u304a\u3044\u3066\u3001\u30bb\u30f3\u30b5\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u4e00\u5ea6\u3001\u4e2d\u7d99\u30c7\u30d0\u30a4\u30b9\uff08\u4eca\u56de\u306e\u5834\u5408\u306fRaspberry Pi\uff09\u306a\u3069\u306b\u305f\u3081\u3066\u304b\u3089\u4e0a\u3052\u308b\u3053\u3068\u304c\u591a\u3044\u3068\u601d\u3046\u306e\u3067\u4eca\u56de\u306f\u3042\u3048\u3066\u3001Arduino\u306b\u30bb\u30f3\u30b5(DS18B20)\u3092\u3064\u3051\u3066USB\u3067\u63a5\u7d9a\u3057\u5b9a\u671f\u7684\u306bRaspberry Pi\u306b\u4e0a\u3052\u308b\u3088\u3046\u306b\u3057\u3066\u307e\u3059\u3002\n\n![qiita2.jpeg](https://qiita-image-store.s3.amazonaws.com/0/60724/424e6a18-ca6a-c62a-8490-dfc3fd418106.jpeg)\n\n\n#Arduino\n\u4eca\u56de\u5229\u7528\u3057\u305fDS18B20\u304b\u3089\u30c7\u30fc\u30bf\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u306f\u3001One Wire Protocol\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002OneWire\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u30c7\u30fc\u30bf\u30a2\u30af\u30bb\u30b9\u304c\u3067\u304d\u307e\u3059\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u53d6\u5f97\u5148\u306f<a href=\"http://playground.arduino.cc/Learning/OneWire\">\u3053\u3061\u3089</a>\u3002\n\n```lang:arduino\n#include <OneWire.h>\n#include <LiquidCrystal.h>\n\nOneWire  ds(9);  // on pin 9\n\nvoid setup(void) {\n  Serial.begin(9600);\n}\n\nvoid loop(void) {\n  byte i;\n  byte present = 0;\n  byte type_s;\n  byte data[12];\n  byte addr[8];\n  float celsius;\n \n  if ( !ds.search(addr)) {\n    ds.reset_search();\n    delay(250);\n    return;\n  }\n \n  if (OneWire::crc8(addr, 7) != addr[7]) {\n      return;\n  }\n  switch (addr[0]) {\n    case 0x10:\n      type_s = 1;\n      break;\n    case 0x28:\n      type_s = 0;\n      break;\n    case 0x22:\n      type_s = 0;\n      break;\n    default:\n      return;\n  }\n\n  ds.reset();\n  ds.select(addr);\n  ds.write(0x44,1);\n  delay(1000);\n  present = ds.reset();\n  ds.select(addr);   \n  ds.write(0xBE);\n  for ( i = 0; i < 9; i++) {\n    data[i] = ds.read();\n  }\n unsigned int raw = (data[1] << 8) | data[0];\n  if (type_s) {\n    raw = raw << 3;\n    if (data[7] == 0x10) {\n      raw = (raw & 0xFFF0) + 12 - data[6];\n    }\n  } else {\n    byte cfg = (data[4] & 0x60);\n    if (cfg == 0x00) raw = raw << 3;\n    else if (cfg == 0x20) raw = raw << 2;\n    else if (cfg == 0x40) raw = raw << 1;\n  }\n  celsius = (float)raw / 16.0;\n  Serial.print(celsius);\n  Serial.println();\n}\n```\n#RaspberryPi\nRaspberry Pi\u5074\u306f\u3001Arduino\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u30ed\u30b8\u30c3\u30af\u3068SQS\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97\u3057\u3066\u30d6\u30b6\u30fc\u3068LCD\u306e\u8868\u793a\u3059\u308b\u30ed\u30b8\u30c3\u30af\u306e2\u3064\u3092\u52d5\u4f5c\u3055\u305b\u307e\u3059\u3002Arduino\u306e\u30ed\u30b8\u30c3\u30af\u306f\u76ee\u899a\u307e\u3057\u4ee3\u308f\u308a\u306bcron\u3067\u8d77\u52d5\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001My Raspberry Pi\u306b\u306f\u3001<a href=\"http://www.dexterindustries.com/GrovePi/\">Grovepi</a>\u3092\u3064\u3051\u3066\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001grovepi\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u3001\u30d6\u30b6\u30fc\u3092\u306a\u3089\u3057\u305f\u308a\u3001LCD\u306b\u8868\u793a\u3057\u305f\u308a\u3057\u3066\u307e\u3059\u3002\n\n```lang:RaspberryPi-CallLambda.py\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nimport serial\nimport commands\nimport os\ns = serial.Serial('/dev/ttyACM0', 9600)\nline = s.readline()\ntemp = line.strip()\ntemp = \"{\\\"temp\\\":\" + str(temp) + \"}\"\nf = open('/tmp/test', 'w')\nf.write(temp)\nf.close()\nres = commands.getoutput(\"/usr/local/bin/aws lambda invoke-async --function-name ifttt --region\n us-east-1 --invoke-args /tmp/test\")\nos.remove('/tmp/test')\n```\nboto\u304cLambda\u5bfe\u5fdc\u3057\u3066\u306a\u304b\u3063\u305f\u306e\u3067\u3001awscli\u3092\u4f7f\u3063\u3066Lambda\u306einvoke-async API\u3092\u767a\u884c\u3057\u307e\u3057\u305f\u3002\n\n```lang:RaspberryPi-GetSQSMessage.py\nimport boto\nimport boto.sqs\nimport time\nimport grovepi\nfrom grove_rgb_lcd import *\n\nbuzzer = 4\ngrovepi.pinMode(buzzer,\"OUTPUT\")\n\nACCOUNT_ID = '<ACCOUNT ID>'\nIDENTITY_POOL_ID = '<IDENTITY POOL ID>'\nROLE_ARN = '<ROLE>'\ncognito = boto.connect_cognito_identity()\ncognito_id = cognito.get_id(ACCOUNT_ID, IDENTITY_POOL_ID)\ntoken = cognito.get_open_id_token(cognito_id['IdentityId'])\nsts = boto.connect_sts()\nassumedRoleObject = sts.assume_role_with_web_identity(ROLE_ARN, \"bototest\", token['Token'])\nclient_sqs = boto.sqs.connect_to_region(\n\"us-east-1\",\naws_access_key_id=assumedRoleObject.credentials.access_key,\naws_secret_access_key=assumedRoleObject.credentials.secret_key,\nsecurity_token=assumedRoleObject.credentials.session_token)\nq = client_sqs.get_queue('lamda_ifttt')\nwhile True:\n\trs = q.get_messages(message_attributes=['weather_temp'])\n\tif len(rs) >= 1:\n\t\tm = rs[0]\n\t\tprint m.message_attributes['weather_temp']['string_value']\n\t\tgrovepi.digitalWrite(buzzer,1)\n\t\ttime.sleep(1)\n\t\tgrovepi.digitalWrite(buzzer,0)\n\t\tsetText(\"Weather Info: \" + m.message_attributes['weather_temp']['string_value']\n)\n\t\tsetRGB(0,128,64)\n\t\tfor c in range(0,255):\n\t\t\tsetRGB(c,255-c,0)\n\t\t\ttime.sleep(0.01)\n\t\tsetRGB(0,255,0)\n\t\tq.delete_message(m)\n\ttime.sleep(10)\n```\n\n#Lambda Function\n\u521d\u3081\u3066OpenWeathermap\u306eAPI\u3092\u4f7f\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u767b\u9332\u3082\u5fc5\u8981\u306a\u304f\u7c21\u5358\u306b\u5229\u7528\u3067\u304d\u307e\u3057\u305f\u3002\n\u73fe\u5728\u306e\u5929\u6c17\u60c5\u5831\u3092\u53d6\u5f97\u3092\u3059\u308bAPI\u306f<a href=\"http://openweathermap.org/current\">\u3053\u3061\u3089</a>\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\u3068\u3066\u3082\u7c21\u5358\u3067\u3059\u3002\n\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3092\u3082\u3068\u306bSNS\u3092\u4f7f\u3063\u3066\u30b1\u30fc\u30bf\u30a4\u306b\u901a\u77e5\u3059\u308b\u3068\u5171\u306b\u3001Raspberry Pi\u306eLCD\u3068\u30d6\u30b6\u30fc\u3092\u9cf4\u3089\u3059\u305f\u3081\u306bSQS\u306b\u30ad\u30e5\u30fc\u7a81\u3063\u8fbc\u3093\u3067\u307e\u3059\u3002Nest Step\u3068\u3057\u3066\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u3044\u308d\u3093\u306a\u610f\u5473\uff08LCD\u306b\u8868\u793a\u3055\u305b\u308b\u3068\u304b\u30d6\u30b6\u30fc\u306a\u3089\u3059\u3068\u304b\uff09\u3092\u6301\u305f\u305b\u3088\u3046\u304b\u306a\u3068\u601d\u3063\u3066\u304a\u308a\u307e\u3059\u3002\u6642\u9593\u304c\u3042\u308c\u3070\u3002\u3002\nOpenWeatherMap\u306eAPI\u306f\u5b89\u5b9a\u3057\u3066\u304a\u308a\u3001\u304b\u3064\u3001\u4eca\u56de\u306f\u3001\u4f4e\u983b\u5ea6\u3067\u306e\u30a2\u30af\u30bb\u30b9\u306a\u306e\u3067\u3001\u6bce\u56de\u53d6\u5f97\u3057\u306b\u884c\u3063\u3066\u307e\u3059\u304c\u3001\u5929\u6c17\u60c5\u5831\u306f\u305d\u308c\u307b\u3069\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u5165\u308c\u305f\u65b9\u304c\u3088\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\uff08\u3053\u308c\u3082Next Step\u3067\u3059\u304b\u306d\u3002\u3002\uff09\n\n```lang:LambdaFunction\nconsole.log('Loading event');\nvar http = require('http');\nvar aws = require('aws-sdk');\n\nexports.handler = function(event, context) {\n    http.get(\"http://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp\", function(res) {\n        var body = '';\n        res.on('data', function(chunk) {\n            body += chunk;\n        });\n        res.on('end', function() {\n            var res = JSON.parse(body);\n            var wheather_temp = Math.floor(parseFloat(res.main.temp)*100 - parseFloat(273.15)*100)/100;\n            console.log(\"Wheather temp: \" + wheather_temp);\n            console.log(\"Rasp temp: \" + event.temp);\n            if((wheather_temp)*2 > parseFloat(event.temp)){\n                var message = 'Home:' + String(parseFloat(event.temp)) + '/ Outside:' + wheather_temp;\n                //SNS\n                var sns = new aws.SNS({params: {TopicArn: 'arn:aws:sns:us-east-1:736384702727:lambda-ifttt'}});\n                sns.publish({Message: message}, function (err, data) {\n                    if (!err) {\n                        console.log('Message published');\n                        context.done(null,'');\n                    }else{\n                        console.log(\"Err\");\n                    }\n                });\n                //SQS\n                var sqs = new aws.SQS();\n                var params = {\n                    MessageBody: 'Weather News',\n                    QueueUrl: 'https://sqs.us-east-1.amazonaws.com/736384702727/lamda_ifttt',\n                    DelaySeconds: 0,\n                    MessageAttributes: {\n                        'weather_temp': {\n                            DataType: 'String',\n                            StringValue: String(wheather_temp)\n                        }\n                    }\n                };\n                sqs.sendMessage(params, function(err, data) {\n                    if (err){\n                      console.log(err, err.stack);  \n                      context.done('error', e);\n                    }else{\n                        console.log(data);\n                        context.done('done');\n                    }\n                });\n            }\n        });\n    }).on('error', function(e) {\n        context.done('error', e);\n    });\n};\n```\n\n#\u6700\u5f8c\u306b\n\u304b\u306a\u308a\u7c21\u5358\u306b\u8a66\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u30bf\u30a4\u30c8\u30eb\u306b\u3042\u308bIoT\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u30b5\u30fc\u30d3\u30b9\u306b\u306f\u7a0b\u9060\u3044\u3067\u3059\u304c\u3001Lambda\u53ca\u3073AWS\u306e\u5404\u7a2e\u30b5\u30fc\u30d3\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u30b5\u30fc\u30d3\u30b9\u3092\u7c21\u5358\u304b\u3064\u30b9\u30b1\u30fc\u30e9\u30d6\u30eb\u306b\u4f5c\u308c\u308b\u78ba\u4fe1\u3092\u5f97\u307e\u3057\u305f\uff57 \u3055\u3089\u306b\u3044\u3046\u3068Lambda\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001IoT\u304c\u767a\u884c\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u3068\u30af\u30e9\u30a6\u30c9\u306b\u84c4\u7a4d\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u72b6\u614b\u306b\u306a\u3063\u305f\u6642\u306b\u4f55\u304b\u52d5\u4f5c\u3055\u305b\u308b\u3068\u3044\u3063\u305f\u3001ifttt\u30a8\u30f3\u30b8\u30f3\u304c\u4f5c\u308c\u308b\uff01\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u30b3\u30ec\u3082Nest Step\u3068\u3057\u3066\u53d6\u308a\u7d44\u307f\u305f\u3044\u30c6\u30fc\u30de\u3067\u3059\u3002\u6a5f\u68b0\u5b66\u7fd2\u3068\u3082\u7d44\u307f\u5408\u308f\u305b\u305f\u3044\u306a\u30fc\u3002\n\n#\u514d\u8cac\n\u3053\u3061\u3089\u306f\u500b\u4eba\u306e\u610f\u898b\u3067\u4f1a\u793e\u3068\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u3002\n\n\n\n\n"}