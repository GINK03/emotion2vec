{"context": " More than 1 year has passed since last update.\n\nOpenWeatherMap \u306f\u3001\u304a\u5929\u6c17\u30c7\u30fc\u30bf\u3092API\u7d4c\u7531\u3067\u7121\u6599\u3067\u53d6\u5f97\u3067\u304d\u308b\u3053\u3068\u3067\u6709\u540d\u306a\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3067\u3059\u3002\n\nOpenWeatherMap \u30c8\u30c3\u30d7\u30da\u30fc\u30b8\n\n\n\n\n\uff08\u53c2\u8003\uff09Atelier Orchard (2013/09/15) \u300cRaspberry Pi\u3067\u7530\u7121\u30bf\u30ef\u30fc\u98a8\u5929\u6c17\u4e88\u5831\u30ac\u30b8\u30a7\u30c3\u30c8\u3092\u4f5c\u308b(\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u7de8)\u300d\n\n\n\u4e0a\u8a18\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3001OpenWeatherMap \u306e url \u306b\u6e21\u3059 \u300c\u5834\u6240\u300d\u30fb\u300c\u8fd4\u308a\u5024\u30c7\u30fc\u30bf\u578b\u300d\u30fb\u300c\u6c17\u6e29\u5358\u4f4d\u300d\u306e \u304a\u5929\u6c17\u60c5\u5831\u30af\u30a8\u30ea\u6761\u4ef6 \u3092\u3001Python \u306e format\u95a2\u6570() \u3067\u6e21\u3059\u3088\u3046\u306b\u5909\u3048\u3066\u3001\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n\nPython 2.7\nimport urllib\nimport urllib2\n\nlocation = \"Tokyo,jp\"\nmode = \"json\"\nmetric = \"metric\"\n\nurl = \"http://api.openweathermap.org/data/2.5/weather?q={a}&mode={b}&units={c}\".format(a=location, b=mode, c=metric)\n\nprint(url)\n\n\n\n\u5b9f\u884c\u7d50\u679c\nhttp://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp&mode=json&units=metric\n\n\n\n\nPython 2.7\nresponse = urllib2.urlopen(url)\nprint(response)\n\n\n\n\u5b9f\u884c\u7d50\u679c\n<addinfourl at 39466768 whose fp = <socket._fileobject object at 0x025948F0>>\n\n\n\n\nreadline\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3060\u7d50\u679c\u3092 print()\u3067\u51fa\u529b\u3059\u308b\u3068\u3001\u4e2d\u8eab\u3092\u8868\u793a\u3067\u304d\u308b\n\n\nPython 2.7\nline = response.readline()\nprint(line)\n\n\n\n\u5b9f\u884c\u7d50\u679c\n {\"coord\":{\"lon\":139.69,\"lat\":35.69},\"weather\":[{\"id\":803,\"main\":\"Clouds\",\"description\":\"broken clouds\",\"icon\":\"04d\"}],\"base\":\"stations\",\"main\":{\"temp\":36.41,\"pressure\":1012,\"humidity\":53,\"temp_min\":30.56,\"temp_max\":42.22},\"visibility\":10000,\"wind\":{\"speed\":3.1,\"deg\":130},\"clouds\":{\"all\":75},\"dt\":1438927900,\"sys\":{\"type\":1,\"id\":7619,\"message\":0.0148,\"country\":\"JP\",\"sunrise\":1438890807,\"sunset\":1438940409},\"id\":1850147,\"name\":\"Tokyo\",\"cod\":200}\n\n\n\n\u30c7\u30fc\u30bf\u578b\u306f\u3001str \u578b\n\n\nPython 2.7\nimport types\nprint(type(line))\n\n\n\n\u5b9f\u884c\u7d50\u679c\n<type 'str'>\n\n\n\npprint.pprint()\u3067\u51fa\u529b\u3057\u3066\u3082\u3001\u30a4\u30f3\u30c7\u30f3\u30c8\u3055\u308c\u306a\u3044\u3088\u3046\u3067\u3059\n\n\nPython 2.7\nimport pprint\npprint.pprint(line)\n\n\n\n\u5b9f\u884c\u7d50\u679c\n '{\"coord\":{\"lon\":139.69,\"lat\":35.69},\"weather\":[{\"id\":803,\"main\":\"Clouds\",\"description\":\"broken clouds\",\"icon\":\"04d\"}],\"base\":\"stations\",\"main\":{\"temp\":36.41,\"pressure\":1012,\"humidity\":53,\"temp_min\":30.56,\"temp_max\":42.22},\"visibility\":10000,\"wind\":{\"speed\":3.1,\"deg\":130},\"clouds\":{\"all\":75},\"dt\":1438927900,\"sys\":{\"type\":1,\"id\":7619,\"message\":0.0148,\"country\":\"JP\",\"sunrise\":1438890807,\"sunset\":1438940409},\"id\":1850147,\"name\":\"Tokyo\",\"cod\":200}\\n'\n\n\n\njson\u30e2\u30b8\u30e5\u30fc\u30eb\u306eloads()\u95a2\u6570\u3067\u8aad\u307f\u8fbc\u3080\u3068\u3001dict \u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306a\u308a\u3001\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\n\n\nPython\nimport json\nweather = json.loads(line)\n\nprint(weather)\n\n\n\n\u5b9f\u884c\u7d50\u679c\n {u'clouds': {u'all': 75}, u'name': u'Tokyo', u'visibility': 10000, u'sys': {u'country': u'JP', u'sunset': 1438940409, u'message': 0.0148, u'type': 1, u'id': 7619, u'sunrise': 1438890807}, u'weather': [{u'main': u'Clouds', u'id': 803, u'icon': u'04d', u'description': u'broken clouds'}], u'coord': {u'lat': 35.69, u'lon': 139.69}, u'base': u'stations', u'dt': 1438927900, u'main': {u'pressure': 1012, u'temp_min': 30.56, u'temp_max': 42.22, u'temp': 36.41, u'humidity': 53}, u'id': 1850147, u'wind': {u'speed': 3.1, u'deg': 130}, u'cod': 200}\n\n\n\nPython\nprint(type(weather))\n\n\n\n\u5b9f\u884c\u7d50\u679c\n <type 'dict'>\n\n\n\npprint.pprint()\u3067\u51fa\u529b\u3059\u308b\u3068\u3001\u7dba\u9e97\u306b\u30a4\u30f3\u30c7\u30f3\u30c8\u3055\u308c\u308b\n\n\nPython\npprint.pprint(weather)\n\n\n\n\u5b9f\u884c\u7d50\u679c\n {u'base': u'stations',\n  u'clouds': {u'all': 75},\n  u'cod': 200,\n  u'coord': {u'lat': 35.69, u'lon': 139.69},\n  u'dt': 1438927900,\n  u'id': 1850147,\n  u'main': {u'humidity': 53,\n            u'pressure': 1012,\n            u'temp': 36.41,\n            u'temp_max': 42.22,\n            u'temp_min': 30.56},\n  u'name': u'Tokyo',\n  u'sys': {u'country': u'JP',\n           u'id': 7619,\n           u'message': 0.0148,\n           u'sunrise': 1438890807,\n           u'sunset': 1438940409,\n           u'type': 1},\n  u'visibility': 10000,\n  u'weather': [{u'description': u'broken clouds',\n                u'icon': u'04d',\n                u'id': 803,\n                u'main': u'Clouds'}],\n  u'wind': {u'deg': 130, u'speed': 3.1}}\n\n\n\ndict\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u3001\u8981\u7d20\u540d\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u5fc5\u8981\u306a\u8981\u7d20\u3092\u62bd\u51fa\u3067\u304d\u308b\n\n\nPython\nweather[u'clouds']\n\n\n\n\u5b9f\u884c\u7d50\u679c\n{u'all': 75}\n\n\n\nPython\nweather[u'name']\n\n\n\n\u5b9f\u884c\u7d50\u679c\nu'Tokyo'\n\n\nweather[u'weather']\n\n[{u'main': u'Clouds', u'id': 803, u'icon': u'04d', u'description': u'broken clouds'}]\n\n\n\n\uff08 \u53c2\u8003 \uff09r271-635 (2014/05/12) \u300c(Python) \u5929\u6c17\u30c7\u30fc\u30bf\u306e\u53d7\u4fe1\u300d\n\n\nPython\njson_tree = json.loads( urllib.urlopen(url).read())\njson_tree\n\n\n\n\u5b9f\u884c\u7d50\u679c\n {u'clouds': {u'all': 75}, u'name': u'Tokyo', u'visibility': 10000, u'sys': {u'country': u'JP', u'sunset': 1438940409, u'message': 0.0148, u'type': 1, u'id': 7619, u'sunrise': 1438890807}, u'weather': [{u'main': u'Clouds', u'id': 803, u'icon': u'04d', u'description': u'broken clouds'}], u'coord': {u'lat': 35.69, u'lon': 139.69}, u'base': u'stations', u'dt': 1438927900, u'main': {u'pressure': 1012, u'temp_min': 30.56, u'temp_max': 42.22, u'temp': 36.41, u'humidity': 53}, u'id': 1850147, u'wind': {u'speed': 3.1, u'deg': 130}, u'cod': 200}\n\n\n\nPython\npprint.pprint(json_tree)\n\n\n\nPython\n {u'base': u'stations',\n  u'clouds': {u'all': 75},\n  u'cod': 200,\n  u'coord': {u'lat': 35.69, u'lon': 139.69},\n  u'dt': 1438927900,\n  u'id': 1850147,\n  u'main': {u'humidity': 53,\n            u'pressure': 1012,\n            u'temp': 36.41,\n            u'temp_max': 42.22,\n            u'temp_min': 30.56},\n  u'name': u'Tokyo',\n  u'sys': {u'country': u'JP',\n           u'id': 7619,\n           u'message': 0.0148,\n           u'sunrise': 1438890807,\n           u'sunset': 1438940409,\n           u'type': 1},\n  u'visibility': 10000,\n  u'weather': [{u'description': u'broken clouds',\n                u'icon': u'04d',\n                u'id': 803,\n                u'main': u'Clouds'}],\n  u'wind': {u'deg': 130, u'speed': 3.1}}\n\n\n\n\u4ee5\u4e0b\u3001dict\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8981\u7d20\u540d\u3092\u6307\u5b9a\u3059\u308b\u969b\u306b\u3001\u30e6\u30cb\u30b3\u30fc\u30c9\u95a2\u6570 u() \u3092\u5b9f\u884c\u3057\u306a\u304f\u3066\u3082\uff2f\uff2b\u306a\u3088\u3046\u3067\u3059\u3002\n\n\nPython\njson_tree['main']['temp']\n\n\n\n\u5b9f\u884c\u7d50\u679c\n36.41\n\n\n\nPython\n json_tree['main']['pressure']\n\n\n\n\u5b9f\u884c\u7d50\u679c\n1012\n\n\n\nPython\njson_tree['weather']\n\n\n\n\u5b9f\u884c\u7d50\u679c\n [{u'main': u'Clouds', u'id': 803, u'icon': u'04d', u'description': u'broken clouds'}]\n\n\n\nPython\njson_tree['weather'][0]\n\n\n\n\u5b9f\u884c\u7d50\u679c\n {u'main': u'Clouds', u'id': 803, u'icon': u'04d', u'description': u'broken clouds'}\n\n\n\nPython\n json_tree['weather'][0]['description']\n\n\n\n\u5b9f\u884c\u7d50\u679c\n u'broken clouds'\n\n\n\n\u4ee5\u4e0b\u306fNG\n\n\nPython\n json_tree['weather']['description']\n\n\n'{Python:\u5b9f\u884c\u7d50\u679c}\n Traceback (most recent call last):\n   File \"<pyshell#139>\", line 1, in <module>\n     json_tree['weather']['description']\n TypeError: list indices must be integers, not str\n`\n\n[0]\u3092\u4ed8\u3051\u308b\u3068\u3001\u8fd4\u3063\u3066\u304f\u308b\u306e\u306fdict\u578b\u3002\u306a\u306e\u3067\u3001\u8981\u7d20\u540d\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u4e2d\u8eab\u3092\u53d6\u308a\u51fa\u305b\u308b\u3002\n\n\nPython\ntype(json_tree['weather'][0])\n\n\n\n\u5b9f\u884c\u7d50\u679c\n<type 'dict'>\n\n\n\n[0]\u3092\u4ed8\u3051\u306a\u3044\u3068\u3001\u8fd4\u3063\u3066\u304f\u308b\u306e\u306flist\u578b\u3002\u306a\u306e\u3067\u3001\u8981\u7d20\u756a\u5730\u306e\u756a\u53f7\u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\uff2e\uff27\u3002\n\n\nPython\ntype(json_tree['weather'])\n\n\n\n\u5b9f\u884c\u7d50\u679c\n<type 'list'>\n\n\n\n\n\u3010 \u53c2\u8003 \u3011\n\n\npywapi\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u3001Yahoo! Weater API\u304b\u3089\u3001\u304a\u5929\u6c17 \u30c7\u30fc\u30bf\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308b\u3088\u3046\u3067\u3059\u3002\u4ee5\u4e0b\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\n\nHatena Blog \uff082015/05/10\uff09 \u300cPython\u3067pywapi\u3092\u4f7f\u3063\u3066Yahoo! Weather\u304b\u3089\u5929\u6c17\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u65b9\u6cd5\u300d\nclarinet758\u3055\u3093 Qiita\u8a18\u4e8b\uff082013/09/06\uff09\u300cbot\u3067\u5929\u6c17\u4e88\u5831\u3092tweet\u300d\nThe Code Inn, (2013/07/25) Tutorial: Weather forecast in Python using pywapi\n\n\n\uff08\u30ea\u30f3\u30af\uff09 python Package Index > pywapi > 0.3.8 pywapi 0.3.8\n\n\nPython wrapper around different weather APIs\nThis module provides a Python wrapper around the Yahoo! Weather, Weather.com, and National Oceanic and Atmospheric Administration (NOAA) APIs. \nFetch weather reports using zip code, location id, city name, state, country, etc.\n\n## OpenWeatherMap \u306f\u3001\u304a\u5929\u6c17\u30c7\u30fc\u30bf\u3092API\u7d4c\u7531\u3067\u7121\u6599\u3067\u53d6\u5f97\u3067\u304d\u308b\u3053\u3068\u3067\u6709\u540d\u306a\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3067\u3059\u3002\n\n### __OpenWeatherMap \u30c8\u30c3\u30d7\u30da\u30fc\u30b8__\n\n![1.PNG](https://qiita-image-store.s3.amazonaws.com/0/43487/17d33045-0053-f83a-b6ca-be2a9f5627da.png)\n\n___\n\n### __[\uff08\u53c2\u8003\uff09Atelier Orchard (2013/09/15) \u300cRaspberry Pi\u3067\u7530\u7121\u30bf\u30ef\u30fc\u98a8\u5929\u6c17\u4e88\u5831\u30ac\u30b8\u30a7\u30c3\u30c8\u3092\u4f5c\u308b(\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u7de8)\u300d](http://atelier-orchard.blogspot.jp/2013/09/raspberry-pi.html)__\n\n####__\u4e0a\u8a18\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3001OpenWeatherMap \u306e url \u306b\u6e21\u3059 \u300c\u5834\u6240\u300d\u30fb\u300c\u8fd4\u308a\u5024\u30c7\u30fc\u30bf\u578b\u300d\u30fb\u300c\u6c17\u6e29\u5358\u4f4d\u300d\u306e \u304a\u5929\u6c17\u60c5\u5831\u30af\u30a8\u30ea\u6761\u4ef6 \u3092\u3001Python \u306e format\u95a2\u6570() \u3067\u6e21\u3059\u3088\u3046\u306b\u5909\u3048\u3066\u3001\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002__\n\n\n```{Python:Python 2.7}\nimport urllib\nimport urllib2\n\nlocation = \"Tokyo,jp\"\nmode = \"json\"\nmetric = \"metric\"\n\nurl = \"http://api.openweathermap.org/data/2.5/weather?q={a}&mode={b}&units={c}\".format(a=location, b=mode, c=metric)\n\nprint(url)\n```\n\n```{Python:\u5b9f\u884c\u7d50\u679c}\nhttp://api.openweathermap.org/data/2.5/weather?q=Tokyo,jp&mode=json&units=metric\n```\n\n___\n\n```{Python:Python 2.7}\nresponse = urllib2.urlopen(url)\nprint(response)\n```\n\n```{Python:\u5b9f\u884c\u7d50\u679c}\n<addinfourl at 39466768 whose fp = <socket._fileobject object at 0x025948F0>>\n```\n\n___\n\n###__readline\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3060\u7d50\u679c\u3092 print()\u3067\u51fa\u529b\u3059\u308b\u3068\u3001\u4e2d\u8eab\u3092\u8868\u793a\u3067\u304d\u308b__\n\n```{Python:Python 2.7}\nline = response.readline()\nprint(line)\n```\n\n\n```{Python:\u5b9f\u884c\u7d50\u679c}\n {\"coord\":{\"lon\":139.69,\"lat\":35.69},\"weather\":[{\"id\":803,\"main\":\"Clouds\",\"description\":\"broken clouds\",\"icon\":\"04d\"}],\"base\":\"stations\",\"main\":{\"temp\":36.41,\"pressure\":1012,\"humidity\":53,\"temp_min\":30.56,\"temp_max\":42.22},\"visibility\":10000,\"wind\":{\"speed\":3.1,\"deg\":130},\"clouds\":{\"all\":75},\"dt\":1438927900,\"sys\":{\"type\":1,\"id\":7619,\"message\":0.0148,\"country\":\"JP\",\"sunrise\":1438890807,\"sunset\":1438940409},\"id\":1850147,\"name\":\"Tokyo\",\"cod\":200}\n```\n\n###__\u30c7\u30fc\u30bf\u578b\u306f\u3001_str_ \u578b__\n\n```{Python:Python 2.7}\nimport types\nprint(type(line))\n```\n\n\n```{Python:\u5b9f\u884c\u7d50\u679c}\n<type 'str'>\n```\n\n###__pprint.pprint()\u3067\u51fa\u529b\u3057\u3066\u3082\u3001\u30a4\u30f3\u30c7\u30f3\u30c8\u3055\u308c\u306a\u3044\u3088\u3046\u3067\u3059__\n\n```{`ython:Python 2.7}\nimport pprint\npprint.pprint(line)\n```\n\n```{Python:\u5b9f\u884c\u7d50\u679c}\n '{\"coord\":{\"lon\":139.69,\"lat\":35.69},\"weather\":[{\"id\":803,\"main\":\"Clouds\",\"description\":\"broken clouds\",\"icon\":\"04d\"}],\"base\":\"stations\",\"main\":{\"temp\":36.41,\"pressure\":1012,\"humidity\":53,\"temp_min\":30.56,\"temp_max\":42.22},\"visibility\":10000,\"wind\":{\"speed\":3.1,\"deg\":130},\"clouds\":{\"all\":75},\"dt\":1438927900,\"sys\":{\"type\":1,\"id\":7619,\"message\":0.0148,\"country\":\"JP\",\"sunrise\":1438890807,\"sunset\":1438940409},\"id\":1850147,\"name\":\"Tokyo\",\"cod\":200}\\n'\n```\n\n###__json\u30e2\u30b8\u30e5\u30fc\u30eb\u306eloads()\u95a2\u6570\u3067\u8aad\u307f\u8fbc\u3080\u3068\u3001_dict_ \u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306a\u308a\u3001\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059__\n\n```{Python:Python}\nimport json\nweather = json.loads(line)\n\nprint(weather)\n```\n\n\n```{Python:\u5b9f\u884c\u7d50\u679c}\n {u'clouds': {u'all': 75}, u'name': u'Tokyo', u'visibility': 10000, u'sys': {u'country': u'JP', u'sunset': 1438940409, u'message': 0.0148, u'type': 1, u'id': 7619, u'sunrise': 1438890807}, u'weather': [{u'main': u'Clouds', u'id': 803, u'icon': u'04d', u'description': u'broken clouds'}], u'coord': {u'lat': 35.69, u'lon': 139.69}, u'base': u'stations', u'dt': 1438927900, u'main': {u'pressure': 1012, u'temp_min': 30.56, u'temp_max': 42.22, u'temp': 36.41, u'humidity': 53}, u'id': 1850147, u'wind': {u'speed': 3.1, u'deg': 130}, u'cod': 200}\n```\n\n```{Python:Python}\nprint(type(weather))\n```\n\n ```{Python:\u5b9f\u884c\u7d50\u679c}\n <type 'dict'>\n ```\n\n###__pprint.pprint()\u3067\u51fa\u529b\u3059\u308b\u3068\u3001\u7dba\u9e97\u306b\u30a4\u30f3\u30c7\u30f3\u30c8\u3055\u308c\u308b__\n\n```{Python:Python}\npprint.pprint(weather)\n```\n\n```{Python:\u5b9f\u884c\u7d50\u679c}\n {u'base': u'stations',\n  u'clouds': {u'all': 75},\n  u'cod': 200,\n  u'coord': {u'lat': 35.69, u'lon': 139.69},\n  u'dt': 1438927900,\n  u'id': 1850147,\n  u'main': {u'humidity': 53,\n            u'pressure': 1012,\n            u'temp': 36.41,\n            u'temp_max': 42.22,\n            u'temp_min': 30.56},\n  u'name': u'Tokyo',\n  u'sys': {u'country': u'JP',\n           u'id': 7619,\n           u'message': 0.0148,\n           u'sunrise': 1438890807,\n           u'sunset': 1438940409,\n           u'type': 1},\n  u'visibility': 10000,\n  u'weather': [{u'description': u'broken clouds',\n                u'icon': u'04d',\n                u'id': 803,\n                u'main': u'Clouds'}],\n  u'wind': {u'deg': 130, u'speed': 3.1}}\n```\n\n###__dict\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u3001\u8981\u7d20\u540d\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u5fc5\u8981\u306a\u8981\u7d20\u3092\u62bd\u51fa\u3067\u304d\u308b__\n\n```{Python:Python}\nweather[u'clouds']\n```\n\n```{Python:\u5b9f\u884c\u7d50\u679c}\n{u'all': 75}\n```\n\n\n``` {Python:Python}\nweather[u'name']\n```\n\n```{Python:\u5b9f\u884c\u7d50\u679c}\nu'Tokyo'\n```\n\n```\nweather[u'weather']\n```\n\n```\n[{u'main': u'Clouds', u'id': 803, u'icon': u'04d', u'description': u'broken clouds'}]\n```\n___\n\n### __[\uff08 \u53c2\u8003 \uff09r271-635 (2014/05/12) \u300c(Python) \u5929\u6c17\u30c7\u30fc\u30bf\u306e\u53d7\u4fe1\u300d](http://netlog.jpn.org/r271-635/2014/05/python-weather.html)__\n\n\n```{Python:Python}\njson_tree = json.loads( urllib.urlopen(url).read())\njson_tree\n```\n\n\n```{Python:\u5b9f\u884c\u7d50\u679c}\n {u'clouds': {u'all': 75}, u'name': u'Tokyo', u'visibility': 10000, u'sys': {u'country': u'JP', u'sunset': 1438940409, u'message': 0.0148, u'type': 1, u'id': 7619, u'sunrise': 1438890807}, u'weather': [{u'main': u'Clouds', u'id': 803, u'icon': u'04d', u'description': u'broken clouds'}], u'coord': {u'lat': 35.69, u'lon': 139.69}, u'base': u'stations', u'dt': 1438927900, u'main': {u'pressure': 1012, u'temp_min': 30.56, u'temp_max': 42.22, u'temp': 36.41, u'humidity': 53}, u'id': 1850147, u'wind': {u'speed': 3.1, u'deg': 130}, u'cod': 200}\n```\n\n```{Python:Python}\npprint.pprint(json_tree)\n```\n\n```{Python:Python}\n {u'base': u'stations',\n  u'clouds': {u'all': 75},\n  u'cod': 200,\n  u'coord': {u'lat': 35.69, u'lon': 139.69},\n  u'dt': 1438927900,\n  u'id': 1850147,\n  u'main': {u'humidity': 53,\n            u'pressure': 1012,\n            u'temp': 36.41,\n            u'temp_max': 42.22,\n            u'temp_min': 30.56},\n  u'name': u'Tokyo',\n  u'sys': {u'country': u'JP',\n           u'id': 7619,\n           u'message': 0.0148,\n           u'sunrise': 1438890807,\n           u'sunset': 1438940409,\n           u'type': 1},\n  u'visibility': 10000,\n  u'weather': [{u'description': u'broken clouds',\n                u'icon': u'04d',\n                u'id': 803,\n                u'main': u'Clouds'}],\n  u'wind': {u'deg': 130, u'speed': 3.1}}\n```\n\n###__\u4ee5\u4e0b\u3001dict\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8981\u7d20\u540d\u3092\u6307\u5b9a\u3059\u308b\u969b\u306b\u3001\u30e6\u30cb\u30b3\u30fc\u30c9\u95a2\u6570 _u()_ \u3092\u5b9f\u884c\u3057\u306a\u304f\u3066\u3082\uff2f\uff2b\u306a\u3088\u3046\u3067\u3059\u3002__\n\n```{Python:Python}\njson_tree['main']['temp']\n```\n\n```{Python:\u5b9f\u884c\u7d50\u679c}\n36.41\n```\n\n```{Python:Python}\n json_tree['main']['pressure']\n```\n\n```{Python:\u5b9f\u884c\u7d50\u679c}\n1012\n```\n\n```{Python:Python}\njson_tree['weather']\n```\n\n```{Python:\u5b9f\u884c\u7d50\u679c}\n [{u'main': u'Clouds', u'id': 803, u'icon': u'04d', u'description': u'broken clouds'}]\n```\n\n```{Python:Python}\njson_tree['weather'][0]\n```\n\n```{Python:\u5b9f\u884c\u7d50\u679c}\n {u'main': u'Clouds', u'id': 803, u'icon': u'04d', u'description': u'broken clouds'}\n```\n\n\n```{Python:Python}\n json_tree['weather'][0]['description']\n```\n\n```{Python:\u5b9f\u884c\u7d50\u679c}\n u'broken clouds'\n```\n\n### __\u4ee5\u4e0b\u306fNG__\n\n\n```{Python:Python}\n json_tree['weather']['description']\n```\n\n``'{Python:\u5b9f\u884c\u7d50\u679c}\n Traceback (most recent call last):\n   File \"<pyshell#139>\", line 1, in <module>\n     json_tree['weather']['description']\n TypeError: list indices must be integers, not str\n```\n\n###__[0]\u3092\u4ed8\u3051\u308b\u3068\u3001\u8fd4\u3063\u3066\u304f\u308b\u306e\u306fdict\u578b\u3002\u306a\u306e\u3067\u3001\u8981\u7d20\u540d\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u4e2d\u8eab\u3092\u53d6\u308a\u51fa\u305b\u308b\u3002__\n\n```{Python:Python}\ntype(json_tree['weather'][0])\n```\n\n```{Python:\u5b9f\u884c\u7d50\u679c}\n<type 'dict'>\n```\n\n###__[0]\u3092\u4ed8\u3051\u306a\u3044\u3068\u3001\u8fd4\u3063\u3066\u304f\u308b\u306e\u306flist\u578b\u3002\u306a\u306e\u3067\u3001\u8981\u7d20\u756a\u5730\u306e\u756a\u53f7\u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\uff2e\uff27\u3002__\n\n```{Python:Python}\ntype(json_tree['weather'])\n```\n\n```{Python:\u5b9f\u884c\u7d50\u679c}\n<type 'list'>\n```\n\n___\n\n##__\u3010 \u53c2\u8003 \u3011__\n###__pywapi\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u3001Yahoo! Weater API\u304b\u3089\u3001\u304a\u5929\u6c17 \u30c7\u30fc\u30bf\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308b\u3088\u3046\u3067\u3059\u3002\u4ee5\u4e0b\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002__\n\n* [Hatena Blog \uff082015/05/10\uff09 \u300cPython\u3067pywapi\u3092\u4f7f\u3063\u3066Yahoo! Weather\u304b\u3089\u5929\u6c17\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u65b9\u6cd5\u300d](http://azunobu.hatenablog.com/entry/2015/05/10/144818)\n\n* [clarinet758\u3055\u3093 Qiita\u8a18\u4e8b\uff082013/09/06\uff09\u300cbot\u3067\u5929\u6c17\u4e88\u5831\u3092tweet\u300d](http://qiita.com/clarinet758/items/0142e88cd19a4246f308)\n\n* [The Code Inn, (2013/07/25) _Tutorial: Weather forecast in Python using pywapi_](http://thecodeinn.blogspot.jp/2013/07/tutorial-weather-forecast-in-python.html)\n\n\n###__[\uff08\u30ea\u30f3\u30af\uff09 python Package Index > pywapi > 0.3.8 _pywapi 0.3.8_](https://pypi.python.org/pypi/pywapi)__\n> __Python wrapper around different weather APIs__\n>\n> This module provides a Python wrapper around the Yahoo! Weather, Weather.com, and National Oceanic and Atmospheric Administration (NOAA) APIs. \n> Fetch weather reports using zip code, location id, city name, state, country, etc.\n\n", "tags": ["Python", "api", "JSON", "\u30aa\u30fc\u30d7\u30f3\u30c7\u30fc\u30bf"]}