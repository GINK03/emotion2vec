{"context": " More than 1 year has passed since last update.\u3059\u307f\u307e\u305b\u3093\u3001\u9045\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n\u6982\u8981\n\u7a7a\u9593\u4e0a\u306e\u4e00\u70b9\u3092\u6307\u5b9a\u3057\u3066\u3001\u30b9\u30d7\u30e9\u30a4\u30f3\u3068\u306e\u6700\u8fd1\u70b9\u63a2\u7d22\u3092\u884c\u3044\u307e\u3059\u3002\n\u95a2\u6570\u540d\u3067\u3060\u3044\u305f\u3044\u4f55\u3084\u3063\u3066\u308b\u304b\u5206\u304b\u308b\u3088\u3046\u540d\u524d\u3064\u3051\u3066\u3044\u307e\u3059\u3002\n\u6c7a\u3057\u3066\u30b3\u30e1\u30f3\u30c8\u304c\u5c11\u306a\u3044\u3053\u3068\u3078\u306e\u3044i\uff08\uff52\uff59\n\nSeekClosestPoint\nSeekClosestPoint\nSeekClosestPoint2Line\n\u3053\u308c\u30892\u3064\u306e\u95a2\u6570\u3067\u6700\u8fd1\u70b9\u3092\u63a2\u7d22\u3057\u307e\u3059\u3002\nSeekClosestPoint\u304c\n\u6709\u308b\u4e00\u70b9\u306b\u5bfe\u3059\u308b\u30b9\u30d7\u30e9\u30a4\u30f3\u4e0a\u306e\u6700\u8fd1\u70b9\u3092\u6c42\u3081\u307e\u3059\nSeekClosestPoint2Line\n\u3042\u308b\u76f4\u7dda\u306b\u5bfe\u3059\u308b\u30b9\u30d7\u30e9\u30a4\u30f3\u4e0a\u306e\u6700\u8fd1\u70b9\u3092\u6c42\u3081\u307e\u3059\u3002\n\n\u4f7f\u3044\u65b9\n\n\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\nRetuan Value\u3067\u5e30\u3063\u3066\u304d\u305f\u6570\u5024\u3092\u6b21\u306eTestCenter\u306b\u5165\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n\u65b9\u6cd5\n\u5358\u7d14\u306a\uff12\u5206\u5c90\u306b\u3088\u308b\u63a2\u7d22\u306b\u306a\u308a\u307e\u3059\u3002\n\uff11\uff0c\u6307\u5b9a\u3057\u305f\u9818\u57df\u5168\u3066\u3092firstStepSize\u3067\u6307\u5b9a\u3057\u305f\u6700\u5c0f\u5358\u4f4d\u3067\u63a2\u7d22\u3002\n\u3053\u306e\u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u306e\u307f\u306b\u95a2\u3057\u3066\u306f\uff12\u5206\u5c90\u3067\u306f\u306a\u304f\u5168\u3066\u63a2\u7d22\u3057\u3066\u3044\u307e\u3059\u3002\n\u30ed\u30fc\u30ab\u30eb\u30df\u30cb\u30de\u30e0\u3092\u907f\u3051\u308b\u305f\u3081\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u306a\u308a\u307e\u3059\u3002\n\uff12\uff0c\u5168\u4f53\u3092\u63a2\u7d22\u3057\u3066\u51fa\u3066\u304d\u305f\u9818\u57df\u306b\u5bfe\u3057\u3001\uff12\u5206\u5c90\u306b\u3088\u308b\u691c\u7d22\u3092\u958b\u59cb\u3057\u307e\u3059\u3002\n\u63a2\u7d22\u5bfe\u8c61\u306e\u9818\u57df\u3092\uff12\u3064\u306b\u5206\u5272\n\uff12\u3064\u306e\u9818\u57df\u306e\u4e2d\u592e\u3068\u3001\u63a2\u7d22\u3059\u308b\u70b9(2line\u306e\u5834\u5408\u306f\u76f4\u7dda)\u3068\u306e\u8ddd\u96e2\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\uff13\uff0c\uff12\u306e\u7d50\u679c\u306e\u8fd1\u3044\u9818\u57df\u3092\u307e\u305f\uff12\u3064\u306b\u5272\u3063\u3066\u3001\u518d\u3073\u540c\u3058\u3053\u3068\u3092\u3057\u307e\u3059\u3002\n\n\u8ca0\u8377\u5bfe\u7b56\n\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u3068\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u304c\n\u201dfloat _testCenter, float _testWidth\u201d\u3067\u3001\u30c6\u30b9\u30c8\u3059\u308b\u7bc4\u56f2\u3092\u6307\u5b9a\n\u201dfloat _okGosa\u201d\u3067\u3001\u5408\u683c\u3068\u3059\u308b\u8aa4\u5dee\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u5c1a\u3001\uff12\u5206\u5c90\u3067\u5206\u5272\u3057\u305f\u30b5\u30a4\u30ba\u304cokGosa\u3088\u308a\u5c0f\u3055\u304f\u306a\u3063\u305f\u3089\u30c6\u30b9\u30c8\u7d42\u4e86\u3067\u3059\u3002\n\u3053\u306e\u63a2\u7d22\u306f\u91cd\u3055\u3068\u306e\u6226\u3044\u3067\u3059\u3002\n\n\u632f\u52d5\u5bfe\u7b56\n\u691c\u7d22\u3059\u308b\u5834\u5408\u3001\u3069\u306e\u201dtestCenter\u201d\u3092\u6307\u5b9a\u3057\u305f\u3068\u3057\u3066\u3082\n\u201dFVector _testPoint\u201d\u304c\u540c\u3058\u3067\u3042\u308b\u9650\u308a\u5fc5\u305a\u540c\u3058\u7d50\u679c\u304c\u6c42\u3081\u3089\u308c\u308b\u3088\u3046\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n\u3053\u308c\u306f\u753b\u9762\u304c\u505c\u6b62\u3057\u3066\u3044\u308b\u306e\u306b\u3082\u95a2\u308f\u3089\u305a\u7d50\u679c\u304c\u632f\u52d5\u3057\u3066\u3057\u307e\u3046\u3068\u975e\u5e38\u306b\u898b\u6804\u3048\u304c\u3088\u308d\u3057\u304f\u306a\u3044\u304b\u3089\u3067\u3059\u3002\n\u3053\u306e\u70ba\u307e\u305a\u521d\u3081\u306b\u3069\u3063\u304b\u3089\u3069\u3046\u691c\u7d22\u3057\u3066\u3082\u7d50\u679c\u304c\u4e00\u5b9a\u306b\u306a\u308b\u3088\u3046\u306b\n\u30b9\u30bf\u30fc\u30c8\u5730\u70b9\u3092\u8abf\u6574\u3057\u307e\u3059\u3002\nstartAllPos = _firstStepSize * ceilf((testCenter - (0.5 * testWidth)) / _firstStepSize);\n\u3053\u3053\u304c\u305d\u306e\u4e00\u6587\u3067\u3001_firstStepSize\u3067\u5272\u308a\u5207\u308c\u308b\u5834\u6240\u306b\u5f37\u5236\u7684\u306b\u5408\u308f\u305b\u307e\u3059\u3002\n\uff08\u3088\u304f\u8003\u3048\u305f\u3089\u30b3\u30b3\u3063\u3066\u30d0\u30b0\u308a\u305d\u3046\u306a\u51e6\u7406\u3067\u3059\u306d\u2026\u3002\uff09\n\u203b _testWidth\u306ffirstStepSize\u306e\u534a\u5206\u3088\u308a\u5927\u304d\u3044\u30b5\u30a4\u30ba\u306b\u3057\u3066\u4e0b\u3055\u3044\u3002\n\u591a\u5206\u30d0\u30b0\u308a\u307e\u3059\u3002\n\ncode\nUCLASS()\nclass CONTENTEXAMPLES_API UMyBlueprintFunctionLibrary : public UBlueprintFunctionLibrary\n{\n    GENERATED_UCLASS_BODY()\n\n\n\n    UFUNCTION(BlueprintCallable, Category = \"MyBPLibrary\")\n        static float SeekClosestPoint(USplineComponent *_spline, bool _isCloseLine,\n        FVector _testPoint, float _testCenter, float _testWidth, float _okGosa, float _firstStepSize\n        , FVector &debugOut, FVector &debugOut2);\n\n    UFUNCTION(BlueprintCallable, Category = \"MyBPLibrary\")\n        static float SeekClosestPoint2Line(USplineComponent *_spline, bool _isCloseLine,\n        FVector _testPoint, FVector _testOrient , float _testCenter, float _testWidth, float _okGosa, float _firstStepSize\n        , FVector &debugOut, FVector &debugOut2);\n};\n\n\n\ncode\n\n#include \"ContentExamples.h\"\n#include \"MyBlueprintFunctionLibrary.h\"\n\nfloat clamp(float value, float lowerLimit, float upperLimit)\n{\n    if (value < lowerLimit)\n    { \n        return lowerLimit;\n    }\n    else if (value > upperLimit)\n    { \n        return upperLimit; \n    }\n    else \n    { \n        return value; \n    }\n}\n/*\ndouble LengthSqr(FVector vec)\n{\n    return ((double)vec.X * (double)vec.X + (double)vec.Y * (double)vec.Y + (double)vec.Z * (double)vec.Z);\n}\n*/\n\nfloat LengthSqr(FVector vec)\n{\n    return (vec.X * vec.X + vec.Y * vec.Y + vec.Z * vec.Z);\n}\n\n\nfloat Line2PointLength(FVector _unitOrient, FVector _point)\n{\n    FVector cross = FVector::CrossProduct(_unitOrient, _point);\n    return cross.X * cross.X + cross.Y * cross.Y + cross.Z * cross.Z;\n\n}\n\n\nfloat MyClamp( float _inNum )\n{\n    if (_inNum > 1.0 || _inNum < 0.0)\n    {\n        return _inNum - floor(_inNum);\n    }\n    else\n    {\n        return _inNum;\n    }\n\n}\n\nvoid BunkatuMethodOpen(USplineComponent *_spline ,FVector _testPoint , float _start, float _end, float &_outStart, float &_outEnd)\n{\n    float lengthQuad =  0.25 * (_end - _start) ;\n    float firstPoint = clamp(_start + lengthQuad, 0.0, 1.0);\n    float secondPoint = clamp(_start + lengthQuad * 3.0, 0.0, 1.0);\n\n    float firstDistance = LengthSqr(_spline->GetWorldLocationAtTime(firstPoint) - _testPoint);\n    float secondDistance = LengthSqr(_spline->GetWorldLocationAtTime(secondPoint) - _testPoint);\n\n    if (firstDistance < secondDistance)\n    {\n        _outStart = clamp(_start, 0.0, 1.0);\n        _outEnd = clamp(_start + lengthQuad * 2.0, 0.0, 1.0);\n    }\n    else\n    {\n        _outStart = clamp(_start + lengthQuad * 2.0, 0.0, 1.0);\n        _outEnd = clamp(_end, 0.0, 1.0);\n    }\n}\n\n\n\nvoid BunkatuMethodClosed(USplineComponent *_spline, FVector _testPoint, float _start, float _end, float &_outStart, float &_outEnd)\n{\n    float lengthQuad = 0.25 * ((_end - _start));\n    float firstPoint = MyClamp(_start + lengthQuad);\n    float secondPoint = MyClamp(_start + lengthQuad * 3.0);\n\n    float firstDistance = LengthSqr(_spline->GetWorldLocationAtTime(firstPoint) - _testPoint);\n    float secondDistance = LengthSqr(_spline->GetWorldLocationAtTime(secondPoint) - _testPoint);\n\n    if (firstDistance < secondDistance)\n    {\n        _outStart = _start;\n        _outEnd = (_start + lengthQuad * 2.0);\n    }\n    else\n    {\n        _outStart = (_start + lengthQuad * 2.0);\n        _outEnd = _end;\n    }\n}\n\nvoid BunkatuMethodOpenLine(USplineComponent *_spline, FVector _testPos, FVector _testOrient, float _start, float _end, float &_outStart, float &_outEnd)\n{\n    float lengthQuad = 0.25 * (_end - _start);\n    float firstPoint = (_start + lengthQuad);\n    float secondPoint = (_start + lengthQuad * 3.0);\n\n    float firstDistance = Line2PointLength(_testOrient, _spline->GetWorldLocationAtTime(firstPoint) - _testPos);\n    float secondDistance = Line2PointLength(_testOrient, _spline->GetWorldLocationAtTime(secondPoint) - _testPos);\n\n    if (firstDistance < secondDistance)\n    {\n        _outStart = clamp(_start, 0.0, 1.0);\n        _outEnd = clamp(_start + lengthQuad * 2.0, 0.0, 1.0);\n    }\n    else\n    {\n        _outStart = clamp(_start + lengthQuad * 2.0, 0.0, 1.0);\n        _outEnd = clamp(_end, 0.0, 1.0);\n    }\n}\n\n\nvoid BunkatuMethodClosedLine(USplineComponent *_spline, FVector _testPos, FVector _testOrient, float _start, float _end, float &_outStart, float &_outEnd)\n{\n    float lengthQuad = 0.25 * ((_end - _start));\n    float firstPoint = MyClamp(_start + lengthQuad);\n    float secondPoint = MyClamp(_start + lengthQuad * 3.0);\n\n    float firstDistance = LengthSqr(_spline->GetWorldLocationAtTime(firstPoint) - _testPos);\n    float secondDistance = LengthSqr(_spline->GetWorldLocationAtTime(secondPoint) - _testPos);\n\n    if (firstDistance < secondDistance)\n    {\n        _outStart = _start;\n        _outEnd = (_start + lengthQuad * 2.0);\n    }\n    else\n    {\n        _outStart = (_start + lengthQuad * 2.0);\n        _outEnd = _end;\n    }\n}\n\nUMyBlueprintFunctionLibrary::UMyBlueprintFunctionLibrary(const class FPostConstructInitializeProperties& PCIP)\n    : Super(PCIP)\n{\n\n}\n\n\n\nfloat SeekClosestPointOpen(USplineComponent *_spline ,\n    FVector _testPoint, float _testCenter, float _testWidth, float _okGosa, float _firstStepSize)\n{\n    float bestStep = 0.0;\n\n    int bestAllPIndex = -1;\n    float bestAllPDistanceQured = FLT_MAX;\n    float startAllPos = 0.0;\n    float endAllPPos = 0.0;\n\n    float nowBunkiStart =  0.0;\n    float nowBunkiEnd = 0.0;\n    float resStart = 0.0;\n    float resEnd = 0.0;\n\n    if (_testCenter < 0.0)\n    {\n        startAllPos = 0.0;\n        endAllPPos = 1.0;\n    }\n    else\n    {\n        startAllPos = _firstStepSize * ceilf((_testCenter - (0.5 * _testWidth)) / _firstStepSize);\n        endAllPPos = _testCenter + (0.5 * _testWidth);\n    }\n\n\n\n    if ((endAllPPos - startAllPos) > _firstStepSize * 2.0)\n    {\n\n        for (float nowStep = startAllPos; nowStep < endAllPPos; nowStep += _firstStepSize)\n        {\n\n            float testingDistance = LengthSqr(_spline->GetWorldLocationAtTime(clamp(nowStep, 0.0, 1.0)) - _testPoint);\n\n            if (bestAllPDistanceQured > testingDistance)\n            {\n                bestAllPDistanceQured = testingDistance;\n                bestStep = nowStep;\n            }\n\n        }\n        nowBunkiStart = bestStep - _firstStepSize ;\n        nowBunkiEnd = bestStep + _firstStepSize ;\n\n    }\n    else\n    {\n        nowBunkiStart = startAllPos;\n        nowBunkiEnd = endAllPPos;\n    }\n\n    //return clamp(nowBunkiStart + (nowBunkiEnd - nowBunkiStart) * 0.5, 0.0, 1.0);\n\n    while ((nowBunkiEnd - nowBunkiStart) > _okGosa)\n    {\n        BunkatuMethodOpen(_spline, _testPoint, nowBunkiStart, nowBunkiEnd, resStart, resEnd);\n        nowBunkiStart = resStart;\n        nowBunkiEnd = resEnd;\n    }\n    return clamp(resStart + (resEnd - resStart) * 0.5, 0.0, 1.0);\n\n\n}\n\nfloat SeekClosestPointClosed(USplineComponent *_spline ,\n    FVector _testPoint, float _testCenter, float _testWidth, float _okGosa, float _firstStepSize)\n{\n    float bestPos = 0.0;\n\n    float bestAllPDistanceQured = FLT_MAX;\n    float startAllPos = 0.0;\n    float endAllPPos = 0.0;\n\n    float nowBunkiStart = 0.0;\n    float nowBunkiEnd = 0.0;\n    float resStart = 0.0;\n    float resEnd = 0.0;\n\n    if (_testCenter < 0.0)\n    {\n        startAllPos = 0.0;\n        endAllPPos = 1.0;\n    }\n    else\n    {\n        startAllPos = _firstStepSize * ceilf((_testCenter - (0.5 * _testWidth)) / _firstStepSize);\n        endAllPPos = (_testCenter + (0.5 * _testWidth));\n    }\n\n\n\n    if ((endAllPPos - startAllPos) > _firstStepSize * 2.0)\n    {\n\n        for (float nowStep = startAllPos; nowStep < endAllPPos; nowStep += _firstStepSize)\n        {\n            float testingDistance = LengthSqr(_spline->GetWorldLocationAtTime(MyClamp(nowStep)) - _testPoint);\n\n            if (bestAllPDistanceQured > testingDistance)\n            {\n                bestAllPDistanceQured = testingDistance;\n                bestPos = nowStep;\n            }\n\n        }\n        nowBunkiStart = (bestPos - _firstStepSize);\n        nowBunkiEnd = (bestPos + _firstStepSize);\n\n    }\n    else\n    {\n        nowBunkiStart = startAllPos;\n        nowBunkiEnd = endAllPPos;\n    }\n\n    while (MyClamp(nowBunkiEnd - nowBunkiStart)  > _okGosa)\n    {\n        BunkatuMethodClosed(_spline, _testPoint, nowBunkiStart, nowBunkiEnd, resStart, resEnd);\n        nowBunkiStart = resStart;\n        nowBunkiEnd = resEnd;\n    }\n\n\n    return MyClamp(resStart + (resEnd - resStart) * 0.5);\n}\n\n\nfloat UMyBlueprintFunctionLibrary::SeekClosestPoint(USplineComponent *_spline, bool _isCloseLine,\n    FVector _testPoint, float _testCenter, float _testWidth, float _okGosa, float _firstStepSize\n    , FVector &debugOut, FVector &debugOut2)\n{\n    float nowStep = 0.0;\n\n    if (_okGosa < 0.000001)\n    {\n        return 0.0;\n    }\n\n    if (_firstStepSize < 0.000001)\n    {\n        _firstStepSize = 0.000001;\n    }\n\n    if (_testWidth < 0.000001)\n    {\n        _testWidth = 0.000001;\n    }\n\n    float resPoint;\n    if (_isCloseLine)\n    {\n        resPoint = SeekClosestPointClosed(_spline,\n            _testPoint, _testCenter, _testWidth, _okGosa, _firstStepSize);\n    }\n    else\n    {\n        resPoint = SeekClosestPointOpen(_spline,\n            _testPoint, _testCenter, _testWidth, _okGosa, _firstStepSize);\n    }\n\n    return resPoint;\n}\n\n\n\n\nfloat SeekClosestLineOpen(USplineComponent *_spline,\n    FVector _testPos , FVector _testOrient, float _testCenter, float _testWidth, float _okGosa, float _firstStepSize)\n{\n    float bestStep = 0.0;\n\n    int bestAllPIndex = -1;\n    float bestAllPDistanceQured = FLT_MAX;\n    float startAllPos = 0.0;\n    float endAllPPos = 0.0;\n\n    float nowBunkiStart = 0.0;\n    float nowBunkiEnd = 0.0;\n    float resStart = 0.0;\n    float resEnd = 0.0;\n\n    if (_testCenter < 0.0)\n    {\n        startAllPos = 0.0;\n        endAllPPos = 1.0;\n    }\n    else\n    {\n        startAllPos = _firstStepSize * ceilf((_testCenter - (0.5 * _testWidth)) / _firstStepSize);\n        endAllPPos = _testCenter + (0.5 * _testWidth);\n    }\n\n\n\n    if ((endAllPPos - startAllPos) > _firstStepSize * 2.0)\n    {\n\n        for (float nowStep = startAllPos; nowStep < endAllPPos; nowStep += _firstStepSize)\n        {\n\n            float testingDistance = Line2PointLength(_testOrient, _spline->GetWorldLocationAtTime(clamp(nowStep, 0.0, 1.0)) - _testPos);\n\n            if (bestAllPDistanceQured > testingDistance)\n            {\n                bestAllPDistanceQured = testingDistance;\n                bestStep = nowStep;\n            }\n\n        }\n        nowBunkiStart = bestStep - _firstStepSize;\n        nowBunkiEnd = bestStep + _firstStepSize;\n\n    }\n    else\n    {\n        nowBunkiStart = startAllPos;\n        nowBunkiEnd = endAllPPos;\n    }\n\n\n\n    while ((nowBunkiEnd - nowBunkiStart) > _okGosa)\n    {\n        BunkatuMethodOpenLine(_spline, _testPos, _testOrient, nowBunkiStart, nowBunkiEnd, resStart, resEnd);\n        nowBunkiStart = resStart;\n        nowBunkiEnd = resEnd;\n    }\n\n\n    return clamp(resStart + (resEnd - resStart) * 0.5, 0.0, 1.0);\n\n\n}\n\nfloat SeekClosestLineClosed(USplineComponent *_spline,\n    FVector _testPos, FVector _testOrient, float _testCenter, float _testWidth, float _okGosa, float _firstStepSize)\n{\n    float bestPos = 0.0;\n\n    float bestAllPDistanceQured = FLT_MAX;\n    float startAllPos = 0.0;\n    float endAllPPos = 0.0;\n\n    float nowBunkiStart = 0.0;\n    float nowBunkiEnd = 0.0;\n    float resStart = 0.0;\n    float resEnd = 0.0;\n\n    if (_testCenter < 0.0)\n    {\n        startAllPos = 0.0;\n        endAllPPos = 1.0;\n    }\n    else\n    {\n        startAllPos = _firstStepSize * ceilf((_testCenter - (0.5 * _testWidth)) / _firstStepSize);\n        endAllPPos = (_testCenter + (0.5 * _testWidth));\n    }\n\n\n\n    if ((endAllPPos - startAllPos) > _firstStepSize * 2.0)\n    {\n\n        for (float nowStep = startAllPos; nowStep < endAllPPos; nowStep += _firstStepSize)\n        {\n            float testingDistance = Line2PointLength(_testOrient, _spline->GetWorldLocationAtTime(MyClamp(nowStep)) - _testPos);\n\n            if (bestAllPDistanceQured > testingDistance)\n            {\n                bestAllPDistanceQured = testingDistance;\n                bestPos = nowStep;\n            }\n\n        }\n        nowBunkiStart = (bestPos - _firstStepSize);\n        nowBunkiEnd = (bestPos + _firstStepSize);\n\n    }\n    else\n    {\n        nowBunkiStart = startAllPos;\n        nowBunkiEnd = endAllPPos;\n    }\n\n    while (MyClamp(nowBunkiEnd - nowBunkiStart)  > _okGosa)\n    {\n        BunkatuMethodClosedLine(_spline, _testPos, _testOrient, nowBunkiStart, nowBunkiEnd, resStart, resEnd);\n        nowBunkiStart = resStart;\n        nowBunkiEnd = resEnd;\n    }\n\n\n    return MyClamp(resStart + (resEnd - resStart) * 0.5);\n}\n\n\n\nfloat UMyBlueprintFunctionLibrary::SeekClosestPoint2Line(USplineComponent *_spline, bool _isCloseLine,\n    FVector _testPoint, FVector _testOrient, float _testCenter, float _testWidth, float _okGosa, float _firstStepSize\n    , FVector &debugOut, FVector &debugOut2)\n{\n    float nowStep = 0.0;\n\n    if (_okGosa < 0.000001)\n    {\n        return 0.0;\n    }\n\n    if (_firstStepSize < 0.000001)\n    {\n        _firstStepSize = 0.000001;\n    }\n\n    if (_testWidth < 0.000001)\n    {\n        _testWidth = 0.000001;\n    }\n\n    float resPoint;\n    if (_isCloseLine)\n    {\n        resPoint = SeekClosestLineClosed(_spline,\n            _testPoint, _testOrient, _testCenter, _testWidth, _okGosa, _firstStepSize);\n    }\n    else\n    {\n        resPoint = SeekClosestLineOpen(_spline,\n            _testPoint, _testOrient, _testCenter, _testWidth, _okGosa, _firstStepSize);\n    }\n\n    return resPoint;\n}\n\n\n\n\n\u3059\u307f\u307e\u305b\u3093\u3001\u9045\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n#\u6982\u8981\n\u7a7a\u9593\u4e0a\u306e\u4e00\u70b9\u3092\u6307\u5b9a\u3057\u3066\u3001\u30b9\u30d7\u30e9\u30a4\u30f3\u3068\u306e\u6700\u8fd1\u70b9\u63a2\u7d22\u3092\u884c\u3044\u307e\u3059\u3002\n\u95a2\u6570\u540d\u3067\u3060\u3044\u305f\u3044\u4f55\u3084\u3063\u3066\u308b\u304b\u5206\u304b\u308b\u3088\u3046\u540d\u524d\u3064\u3051\u3066\u3044\u307e\u3059\u3002\n\u6c7a\u3057\u3066\u30b3\u30e1\u30f3\u30c8\u304c\u5c11\u306a\u3044\u3053\u3068\u3078\u306e\u3044i\uff08\uff52\uff59\n\n#SeekClosestPoint\nSeekClosestPoint\nSeekClosestPoint2Line\n\u3053\u308c\u30892\u3064\u306e\u95a2\u6570\u3067\u6700\u8fd1\u70b9\u3092\u63a2\u7d22\u3057\u307e\u3059\u3002\nSeekClosestPoint\u304c\n\u6709\u308b\u4e00\u70b9\u306b\u5bfe\u3059\u308b\u30b9\u30d7\u30e9\u30a4\u30f3\u4e0a\u306e\u6700\u8fd1\u70b9\u3092\u6c42\u3081\u307e\u3059\n\nSeekClosestPoint2Line\n\u3042\u308b\u76f4\u7dda\u306b\u5bfe\u3059\u308b\u30b9\u30d7\u30e9\u30a4\u30f3\u4e0a\u306e\u6700\u8fd1\u70b9\u3092\u6c42\u3081\u307e\u3059\u3002\n\n#\u4f7f\u3044\u65b9\n![Clipboard02.jpg](https://qiita-image-store.s3.amazonaws.com/0/32364/e2a6f0da-f413-8014-f813-5aba153c88c8.jpeg)\n\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\nRetuan Value\u3067\u5e30\u3063\u3066\u304d\u305f\u6570\u5024\u3092\u6b21\u306eTestCenter\u306b\u5165\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n#\u65b9\u6cd5\n\u5358\u7d14\u306a\uff12\u5206\u5c90\u306b\u3088\u308b\u63a2\u7d22\u306b\u306a\u308a\u307e\u3059\u3002\n\uff11\uff0c\u6307\u5b9a\u3057\u305f\u9818\u57df\u5168\u3066\u3092firstStepSize\u3067\u6307\u5b9a\u3057\u305f\u6700\u5c0f\u5358\u4f4d\u3067\u63a2\u7d22\u3002\n\u3053\u306e\u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u306e\u307f\u306b\u95a2\u3057\u3066\u306f\uff12\u5206\u5c90\u3067\u306f\u306a\u304f\u5168\u3066\u63a2\u7d22\u3057\u3066\u3044\u307e\u3059\u3002\n\u30ed\u30fc\u30ab\u30eb\u30df\u30cb\u30de\u30e0\u3092\u907f\u3051\u308b\u305f\u3081\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u306a\u308a\u307e\u3059\u3002\n\n\uff12\uff0c\u5168\u4f53\u3092\u63a2\u7d22\u3057\u3066\u51fa\u3066\u304d\u305f\u9818\u57df\u306b\u5bfe\u3057\u3001\uff12\u5206\u5c90\u306b\u3088\u308b\u691c\u7d22\u3092\u958b\u59cb\u3057\u307e\u3059\u3002\n\u63a2\u7d22\u5bfe\u8c61\u306e\u9818\u57df\u3092\uff12\u3064\u306b\u5206\u5272\n\uff12\u3064\u306e\u9818\u57df\u306e\u4e2d\u592e\u3068\u3001\u63a2\u7d22\u3059\u308b\u70b9(2line\u306e\u5834\u5408\u306f\u76f4\u7dda)\u3068\u306e\u8ddd\u96e2\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\n\uff13\uff0c\uff12\u306e\u7d50\u679c\u306e\u8fd1\u3044\u9818\u57df\u3092\u307e\u305f\uff12\u3064\u306b\u5272\u3063\u3066\u3001\u518d\u3073\u540c\u3058\u3053\u3068\u3092\u3057\u307e\u3059\u3002\n\n#\u8ca0\u8377\u5bfe\u7b56\n\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u3068\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u304c\n\u201dfloat _testCenter, float _testWidth\u201d\u3067\u3001\u30c6\u30b9\u30c8\u3059\u308b\u7bc4\u56f2\u3092\u6307\u5b9a\n\u201dfloat _okGosa\u201d\u3067\u3001\u5408\u683c\u3068\u3059\u308b\u8aa4\u5dee\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u5c1a\u3001\uff12\u5206\u5c90\u3067\u5206\u5272\u3057\u305f\u30b5\u30a4\u30ba\u304cokGosa\u3088\u308a\u5c0f\u3055\u304f\u306a\u3063\u305f\u3089\u30c6\u30b9\u30c8\u7d42\u4e86\u3067\u3059\u3002\n\u3053\u306e\u63a2\u7d22\u306f\u91cd\u3055\u3068\u306e\u6226\u3044\u3067\u3059\u3002\n\n#\u632f\u52d5\u5bfe\u7b56\n\u691c\u7d22\u3059\u308b\u5834\u5408\u3001\u3069\u306e\u201d_testCenter\u201d\u3092\u6307\u5b9a\u3057\u305f\u3068\u3057\u3066\u3082\n\u201dFVector _testPoint\u201d\u304c\u540c\u3058\u3067\u3042\u308b\u9650\u308a\u5fc5\u305a\u540c\u3058\u7d50\u679c\u304c\u6c42\u3081\u3089\u308c\u308b\u3088\u3046\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n\u3053\u308c\u306f\u753b\u9762\u304c\u505c\u6b62\u3057\u3066\u3044\u308b\u306e\u306b\u3082\u95a2\u308f\u3089\u305a\u7d50\u679c\u304c\u632f\u52d5\u3057\u3066\u3057\u307e\u3046\u3068\u975e\u5e38\u306b\u898b\u6804\u3048\u304c\u3088\u308d\u3057\u304f\u306a\u3044\u304b\u3089\u3067\u3059\u3002\n\u3053\u306e\u70ba\u307e\u305a\u521d\u3081\u306b\u3069\u3063\u304b\u3089\u3069\u3046\u691c\u7d22\u3057\u3066\u3082\u7d50\u679c\u304c\u4e00\u5b9a\u306b\u306a\u308b\u3088\u3046\u306b\n\u30b9\u30bf\u30fc\u30c8\u5730\u70b9\u3092\u8abf\u6574\u3057\u307e\u3059\u3002\nstartAllPos = _firstStepSize * ceilf((_testCenter - (0.5 * _testWidth)) / _firstStepSize);\n\u3053\u3053\u304c\u305d\u306e\u4e00\u6587\u3067\u3001_firstStepSize\u3067\u5272\u308a\u5207\u308c\u308b\u5834\u6240\u306b\u5f37\u5236\u7684\u306b\u5408\u308f\u305b\u307e\u3059\u3002\n\uff08\u3088\u304f\u8003\u3048\u305f\u3089\u30b3\u30b3\u3063\u3066\u30d0\u30b0\u308a\u305d\u3046\u306a\u51e6\u7406\u3067\u3059\u306d\u2026\u3002\uff09\n\u203b _testWidth\u306f_firstStepSize\u306e\u534a\u5206\u3088\u308a\u5927\u304d\u3044\u30b5\u30a4\u30ba\u306b\u3057\u3066\u4e0b\u3055\u3044\u3002\n\u591a\u5206\u30d0\u30b0\u308a\u307e\u3059\u3002\n\n\n\n```cpp:code\nUCLASS()\nclass CONTENTEXAMPLES_API UMyBlueprintFunctionLibrary : public UBlueprintFunctionLibrary\n{\n\tGENERATED_UCLASS_BODY()\n\n\n\n\tUFUNCTION(BlueprintCallable, Category = \"MyBPLibrary\")\n\t\tstatic float SeekClosestPoint(USplineComponent *_spline, bool _isCloseLine,\n\t\tFVector _testPoint, float _testCenter, float _testWidth, float _okGosa, float _firstStepSize\n\t\t, FVector &debugOut, FVector &debugOut2);\n\n\tUFUNCTION(BlueprintCallable, Category = \"MyBPLibrary\")\n\t\tstatic float SeekClosestPoint2Line(USplineComponent *_spline, bool _isCloseLine,\n\t\tFVector _testPoint, FVector _testOrient , float _testCenter, float _testWidth, float _okGosa, float _firstStepSize\n\t\t, FVector &debugOut, FVector &debugOut2);\n};\n```\n\n\n```cpp:code\n\n#include \"ContentExamples.h\"\n#include \"MyBlueprintFunctionLibrary.h\"\n\nfloat clamp(float value, float lowerLimit, float upperLimit)\n{\n\tif (value < lowerLimit)\n\t{ \n\t\treturn lowerLimit;\n\t}\n\telse if (value > upperLimit)\n\t{ \n\t\treturn upperLimit; \n\t}\n\telse \n\t{ \n\t\treturn value; \n\t}\n}\n/*\ndouble LengthSqr(FVector vec)\n{\n\treturn ((double)vec.X * (double)vec.X + (double)vec.Y * (double)vec.Y + (double)vec.Z * (double)vec.Z);\n}\n*/\n\nfloat LengthSqr(FVector vec)\n{\n\treturn (vec.X * vec.X + vec.Y * vec.Y + vec.Z * vec.Z);\n}\n\n\nfloat Line2PointLength(FVector _unitOrient, FVector _point)\n{\n\tFVector cross = FVector::CrossProduct(_unitOrient, _point);\n\treturn cross.X * cross.X + cross.Y * cross.Y + cross.Z * cross.Z;\n\n}\n\n\nfloat MyClamp( float _inNum )\n{\n\tif (_inNum > 1.0 || _inNum < 0.0)\n\t{\n\t\treturn _inNum - floor(_inNum);\n\t}\n\telse\n\t{\n\t\treturn _inNum;\n\t}\n\n}\n\nvoid BunkatuMethodOpen(USplineComponent *_spline ,FVector _testPoint , float _start, float _end, float &_outStart, float &_outEnd)\n{\n\tfloat lengthQuad =  0.25 * (_end - _start) ;\n\tfloat firstPoint = clamp(_start + lengthQuad, 0.0, 1.0);\n\tfloat secondPoint = clamp(_start + lengthQuad * 3.0, 0.0, 1.0);\n\n\tfloat firstDistance = LengthSqr(_spline->GetWorldLocationAtTime(firstPoint) - _testPoint);\n\tfloat secondDistance = LengthSqr(_spline->GetWorldLocationAtTime(secondPoint) - _testPoint);\n\n\tif (firstDistance < secondDistance)\n\t{\n\t\t_outStart = clamp(_start, 0.0, 1.0);\n\t\t_outEnd = clamp(_start + lengthQuad * 2.0, 0.0, 1.0);\n\t}\n\telse\n\t{\n\t\t_outStart = clamp(_start + lengthQuad * 2.0, 0.0, 1.0);\n\t\t_outEnd = clamp(_end, 0.0, 1.0);\n\t}\n}\n\n\n\nvoid BunkatuMethodClosed(USplineComponent *_spline, FVector _testPoint, float _start, float _end, float &_outStart, float &_outEnd)\n{\n\tfloat lengthQuad = 0.25 * ((_end - _start));\n\tfloat firstPoint = MyClamp(_start + lengthQuad);\n\tfloat secondPoint = MyClamp(_start + lengthQuad * 3.0);\n\n\tfloat firstDistance = LengthSqr(_spline->GetWorldLocationAtTime(firstPoint) - _testPoint);\n\tfloat secondDistance = LengthSqr(_spline->GetWorldLocationAtTime(secondPoint) - _testPoint);\n\n\tif (firstDistance < secondDistance)\n\t{\n\t\t_outStart = _start;\n\t\t_outEnd = (_start + lengthQuad * 2.0);\n\t}\n\telse\n\t{\n\t\t_outStart = (_start + lengthQuad * 2.0);\n\t\t_outEnd = _end;\n\t}\n}\n\nvoid BunkatuMethodOpenLine(USplineComponent *_spline, FVector _testPos, FVector _testOrient, float _start, float _end, float &_outStart, float &_outEnd)\n{\n\tfloat lengthQuad = 0.25 * (_end - _start);\n\tfloat firstPoint = (_start + lengthQuad);\n\tfloat secondPoint = (_start + lengthQuad * 3.0);\n\n\tfloat firstDistance = Line2PointLength(_testOrient, _spline->GetWorldLocationAtTime(firstPoint) - _testPos);\n\tfloat secondDistance = Line2PointLength(_testOrient, _spline->GetWorldLocationAtTime(secondPoint) - _testPos);\n\n\tif (firstDistance < secondDistance)\n\t{\n\t\t_outStart = clamp(_start, 0.0, 1.0);\n\t\t_outEnd = clamp(_start + lengthQuad * 2.0, 0.0, 1.0);\n\t}\n\telse\n\t{\n\t\t_outStart = clamp(_start + lengthQuad * 2.0, 0.0, 1.0);\n\t\t_outEnd = clamp(_end, 0.0, 1.0);\n\t}\n}\n\n\nvoid BunkatuMethodClosedLine(USplineComponent *_spline, FVector _testPos, FVector _testOrient, float _start, float _end, float &_outStart, float &_outEnd)\n{\n\tfloat lengthQuad = 0.25 * ((_end - _start));\n\tfloat firstPoint = MyClamp(_start + lengthQuad);\n\tfloat secondPoint = MyClamp(_start + lengthQuad * 3.0);\n\n\tfloat firstDistance = LengthSqr(_spline->GetWorldLocationAtTime(firstPoint) - _testPos);\n\tfloat secondDistance = LengthSqr(_spline->GetWorldLocationAtTime(secondPoint) - _testPos);\n\n\tif (firstDistance < secondDistance)\n\t{\n\t\t_outStart = _start;\n\t\t_outEnd = (_start + lengthQuad * 2.0);\n\t}\n\telse\n\t{\n\t\t_outStart = (_start + lengthQuad * 2.0);\n\t\t_outEnd = _end;\n\t}\n}\n\nUMyBlueprintFunctionLibrary::UMyBlueprintFunctionLibrary(const class FPostConstructInitializeProperties& PCIP)\n\t: Super(PCIP)\n{\n\n}\n\n\n\nfloat SeekClosestPointOpen(USplineComponent *_spline ,\n\tFVector _testPoint, float _testCenter, float _testWidth, float _okGosa, float _firstStepSize)\n{\n\tfloat bestStep = 0.0;\n\n\tint bestAllPIndex = -1;\n\tfloat bestAllPDistanceQured = FLT_MAX;\n\tfloat startAllPos = 0.0;\n\tfloat endAllPPos = 0.0;\n\n\tfloat nowBunkiStart =  0.0;\n\tfloat nowBunkiEnd = 0.0;\n\tfloat resStart = 0.0;\n\tfloat resEnd = 0.0;\n\n\tif (_testCenter < 0.0)\n\t{\n\t\tstartAllPos = 0.0;\n\t\tendAllPPos = 1.0;\n\t}\n\telse\n\t{\n\t\tstartAllPos = _firstStepSize * ceilf((_testCenter - (0.5 * _testWidth)) / _firstStepSize);\n\t\tendAllPPos = _testCenter + (0.5 * _testWidth);\n\t}\n\n\n\n\tif ((endAllPPos - startAllPos) > _firstStepSize * 2.0)\n\t{\n\n\t\tfor (float nowStep = startAllPos; nowStep < endAllPPos; nowStep += _firstStepSize)\n\t\t{\n\n\t\t\tfloat testingDistance = LengthSqr(_spline->GetWorldLocationAtTime(clamp(nowStep, 0.0, 1.0)) - _testPoint);\n\n\t\t\tif (bestAllPDistanceQured > testingDistance)\n\t\t\t{\n\t\t\t\tbestAllPDistanceQured = testingDistance;\n\t\t\t\tbestStep = nowStep;\n\t\t\t}\n\n\t\t}\n\t\tnowBunkiStart = bestStep - _firstStepSize ;\n\t\tnowBunkiEnd = bestStep + _firstStepSize ;\n\n\t}\n\telse\n\t{\n\t\tnowBunkiStart = startAllPos;\n\t\tnowBunkiEnd = endAllPPos;\n\t}\n\n\t//return clamp(nowBunkiStart + (nowBunkiEnd - nowBunkiStart) * 0.5, 0.0, 1.0);\n\n\twhile ((nowBunkiEnd - nowBunkiStart) > _okGosa)\n\t{\n\t\tBunkatuMethodOpen(_spline, _testPoint, nowBunkiStart, nowBunkiEnd, resStart, resEnd);\n\t\tnowBunkiStart = resStart;\n\t\tnowBunkiEnd = resEnd;\n\t}\n\treturn clamp(resStart + (resEnd - resStart) * 0.5, 0.0, 1.0);\n\n\n}\n\nfloat SeekClosestPointClosed(USplineComponent *_spline ,\n\tFVector _testPoint, float _testCenter, float _testWidth, float _okGosa, float _firstStepSize)\n{\n\tfloat bestPos = 0.0;\n\n\tfloat bestAllPDistanceQured = FLT_MAX;\n\tfloat startAllPos = 0.0;\n\tfloat endAllPPos = 0.0;\n\n\tfloat nowBunkiStart = 0.0;\n\tfloat nowBunkiEnd = 0.0;\n\tfloat resStart = 0.0;\n\tfloat resEnd = 0.0;\n\n\tif (_testCenter < 0.0)\n\t{\n\t\tstartAllPos = 0.0;\n\t\tendAllPPos = 1.0;\n\t}\n\telse\n\t{\n\t\tstartAllPos = _firstStepSize * ceilf((_testCenter - (0.5 * _testWidth)) / _firstStepSize);\n\t\tendAllPPos = (_testCenter + (0.5 * _testWidth));\n\t}\n\n\n\n\tif ((endAllPPos - startAllPos) > _firstStepSize * 2.0)\n\t{\n\n\t\tfor (float nowStep = startAllPos; nowStep < endAllPPos; nowStep += _firstStepSize)\n\t\t{\n\t\t\tfloat testingDistance = LengthSqr(_spline->GetWorldLocationAtTime(MyClamp(nowStep)) - _testPoint);\n\n\t\t\tif (bestAllPDistanceQured > testingDistance)\n\t\t\t{\n\t\t\t\tbestAllPDistanceQured = testingDistance;\n\t\t\t\tbestPos = nowStep;\n\t\t\t}\n\n\t\t}\n\t\tnowBunkiStart = (bestPos - _firstStepSize);\n\t\tnowBunkiEnd = (bestPos + _firstStepSize);\n\n\t}\n\telse\n\t{\n\t\tnowBunkiStart = startAllPos;\n\t\tnowBunkiEnd = endAllPPos;\n\t}\n\n\twhile (MyClamp(nowBunkiEnd - nowBunkiStart)  > _okGosa)\n\t{\n\t\tBunkatuMethodClosed(_spline, _testPoint, nowBunkiStart, nowBunkiEnd, resStart, resEnd);\n\t\tnowBunkiStart = resStart;\n\t\tnowBunkiEnd = resEnd;\n\t}\n\n\n\treturn MyClamp(resStart + (resEnd - resStart) * 0.5);\n}\n\n\nfloat UMyBlueprintFunctionLibrary::SeekClosestPoint(USplineComponent *_spline, bool _isCloseLine,\n\tFVector _testPoint, float _testCenter, float _testWidth, float _okGosa, float _firstStepSize\n\t, FVector &debugOut, FVector &debugOut2)\n{\n\tfloat nowStep = 0.0;\n\n\tif (_okGosa < 0.000001)\n\t{\n\t\treturn 0.0;\n\t}\n\n\tif (_firstStepSize < 0.000001)\n\t{\n\t\t_firstStepSize = 0.000001;\n\t}\n\n\tif (_testWidth < 0.000001)\n\t{\n\t\t_testWidth = 0.000001;\n\t}\n\n\tfloat resPoint;\n\tif (_isCloseLine)\n\t{\n\t\tresPoint = SeekClosestPointClosed(_spline,\n\t\t\t_testPoint, _testCenter, _testWidth, _okGosa, _firstStepSize);\n\t}\n\telse\n\t{\n\t\tresPoint = SeekClosestPointOpen(_spline,\n\t\t\t_testPoint, _testCenter, _testWidth, _okGosa, _firstStepSize);\n\t}\n\n\treturn resPoint;\n}\n\n\n\n\nfloat SeekClosestLineOpen(USplineComponent *_spline,\n\tFVector _testPos , FVector _testOrient, float _testCenter, float _testWidth, float _okGosa, float _firstStepSize)\n{\n\tfloat bestStep = 0.0;\n\n\tint bestAllPIndex = -1;\n\tfloat bestAllPDistanceQured = FLT_MAX;\n\tfloat startAllPos = 0.0;\n\tfloat endAllPPos = 0.0;\n\n\tfloat nowBunkiStart = 0.0;\n\tfloat nowBunkiEnd = 0.0;\n\tfloat resStart = 0.0;\n\tfloat resEnd = 0.0;\n\n\tif (_testCenter < 0.0)\n\t{\n\t\tstartAllPos = 0.0;\n\t\tendAllPPos = 1.0;\n\t}\n\telse\n\t{\n\t\tstartAllPos = _firstStepSize * ceilf((_testCenter - (0.5 * _testWidth)) / _firstStepSize);\n\t\tendAllPPos = _testCenter + (0.5 * _testWidth);\n\t}\n\n\n\n\tif ((endAllPPos - startAllPos) > _firstStepSize * 2.0)\n\t{\n\n\t\tfor (float nowStep = startAllPos; nowStep < endAllPPos; nowStep += _firstStepSize)\n\t\t{\n\n\t\t\tfloat testingDistance = Line2PointLength(_testOrient, _spline->GetWorldLocationAtTime(clamp(nowStep, 0.0, 1.0)) - _testPos);\n\n\t\t\tif (bestAllPDistanceQured > testingDistance)\n\t\t\t{\n\t\t\t\tbestAllPDistanceQured = testingDistance;\n\t\t\t\tbestStep = nowStep;\n\t\t\t}\n\n\t\t}\n\t\tnowBunkiStart = bestStep - _firstStepSize;\n\t\tnowBunkiEnd = bestStep + _firstStepSize;\n\n\t}\n\telse\n\t{\n\t\tnowBunkiStart = startAllPos;\n\t\tnowBunkiEnd = endAllPPos;\n\t}\n\n\n\n\twhile ((nowBunkiEnd - nowBunkiStart) > _okGosa)\n\t{\n\t\tBunkatuMethodOpenLine(_spline, _testPos, _testOrient, nowBunkiStart, nowBunkiEnd, resStart, resEnd);\n\t\tnowBunkiStart = resStart;\n\t\tnowBunkiEnd = resEnd;\n\t}\n\n\n\treturn clamp(resStart + (resEnd - resStart) * 0.5, 0.0, 1.0);\n\n\n}\n\nfloat SeekClosestLineClosed(USplineComponent *_spline,\n\tFVector _testPos, FVector _testOrient, float _testCenter, float _testWidth, float _okGosa, float _firstStepSize)\n{\n\tfloat bestPos = 0.0;\n\n\tfloat bestAllPDistanceQured = FLT_MAX;\n\tfloat startAllPos = 0.0;\n\tfloat endAllPPos = 0.0;\n\n\tfloat nowBunkiStart = 0.0;\n\tfloat nowBunkiEnd = 0.0;\n\tfloat resStart = 0.0;\n\tfloat resEnd = 0.0;\n\n\tif (_testCenter < 0.0)\n\t{\n\t\tstartAllPos = 0.0;\n\t\tendAllPPos = 1.0;\n\t}\n\telse\n\t{\n\t\tstartAllPos = _firstStepSize * ceilf((_testCenter - (0.5 * _testWidth)) / _firstStepSize);\n\t\tendAllPPos = (_testCenter + (0.5 * _testWidth));\n\t}\n\n\n\n\tif ((endAllPPos - startAllPos) > _firstStepSize * 2.0)\n\t{\n\n\t\tfor (float nowStep = startAllPos; nowStep < endAllPPos; nowStep += _firstStepSize)\n\t\t{\n\t\t\tfloat testingDistance = Line2PointLength(_testOrient, _spline->GetWorldLocationAtTime(MyClamp(nowStep)) - _testPos);\n\n\t\t\tif (bestAllPDistanceQured > testingDistance)\n\t\t\t{\n\t\t\t\tbestAllPDistanceQured = testingDistance;\n\t\t\t\tbestPos = nowStep;\n\t\t\t}\n\n\t\t}\n\t\tnowBunkiStart = (bestPos - _firstStepSize);\n\t\tnowBunkiEnd = (bestPos + _firstStepSize);\n\n\t}\n\telse\n\t{\n\t\tnowBunkiStart = startAllPos;\n\t\tnowBunkiEnd = endAllPPos;\n\t}\n\n\twhile (MyClamp(nowBunkiEnd - nowBunkiStart)  > _okGosa)\n\t{\n\t\tBunkatuMethodClosedLine(_spline, _testPos, _testOrient, nowBunkiStart, nowBunkiEnd, resStart, resEnd);\n\t\tnowBunkiStart = resStart;\n\t\tnowBunkiEnd = resEnd;\n\t}\n\n\n\treturn MyClamp(resStart + (resEnd - resStart) * 0.5);\n}\n\n\n\nfloat UMyBlueprintFunctionLibrary::SeekClosestPoint2Line(USplineComponent *_spline, bool _isCloseLine,\n\tFVector _testPoint, FVector _testOrient, float _testCenter, float _testWidth, float _okGosa, float _firstStepSize\n\t, FVector &debugOut, FVector &debugOut2)\n{\n\tfloat nowStep = 0.0;\n\n\tif (_okGosa < 0.000001)\n\t{\n\t\treturn 0.0;\n\t}\n\n\tif (_firstStepSize < 0.000001)\n\t{\n\t\t_firstStepSize = 0.000001;\n\t}\n\n\tif (_testWidth < 0.000001)\n\t{\n\t\t_testWidth = 0.000001;\n\t}\n\n\tfloat resPoint;\n\tif (_isCloseLine)\n\t{\n\t\tresPoint = SeekClosestLineClosed(_spline,\n\t\t\t_testPoint, _testOrient, _testCenter, _testWidth, _okGosa, _firstStepSize);\n\t}\n\telse\n\t{\n\t\tresPoint = SeekClosestLineOpen(_spline,\n\t\t\t_testPoint, _testOrient, _testCenter, _testWidth, _okGosa, _firstStepSize);\n\t}\n\n\treturn resPoint;\n}\n\n\n```\n", "tags": ["UE44.5", "Spline"]}