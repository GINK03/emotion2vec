{"context": "\u62d9\u4f5c\u306eC\u8a00\u8a9e\u5411\u3051Twitter\u30e9\u30a4\u30d6\u30e9\u30eaT4C\u306fREST API\u306b\u52a0\u3048\u3066Streaming API\u3082\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306fC\u8a00\u8a9e\u3067\u3069\u306e\u3088\u3046\u306b\u3057\u3066Streaming API\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u306e\u304b\u3001\u306b\u3064\u3044\u3066\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\nStreaming API\u3068\u306f\nStreaming API\u3068\u306f\u7c21\u5358\u306b\u8a00\u3046\u3068\u3001\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b(\u4f55\u3089\u304b\u3089\u306eEvent\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b)Twitter\u304b\u3089\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u304b\u3048\u3063\u3066\u304f\u308bAPI\u3067\u3059\u3002\n\u3067\u3001\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u5e30\u3063\u3066\u304f\u308b\u4e8b\u306b\u52a0\u3048\u3001\u7121\u9650\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u5e30\u3063\u3066\u304d\u307e\u3059\u3002\n\u3088\u3063\u3066\u3001\u901a\u5e38\u306eGET\u30ea\u30af\u30a8\u30b9\u30c8\u3068\u3057\u3066\u51e6\u7406\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u7570\u306a\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u3068\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\u7570\u306a\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u3068\u3044\u3063\u3066\u3082\u5358\u7d14\u3067\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u7121\u304f\u3057\u3066\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u304b\u3048\u3063\u3066\u304f\u308b\u305f\u3073\u306bcallback\u304c\u547c\u3070\u308c\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u3059\u3002\nlibcurl\u3067\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u306a\u304f\u3059\u306b\u306f\ncurl_easy_setopt(curl, CURLOPT_TIMEOUT, 0);\n\n\u3068\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u3059\u3002\n\u307e\u305f\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u6307\u5b9a\u3059\u308c\u3070\u305d\u308c\u304c\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u304b\u3048\u3063\u3066\u304f\u308b\u305f\u3073\u306b\u547c\u3070\u308c\u307e\u3059\u3002\nstatic size_t streaming_callback_sample(void* ptr, size_t size, size_t nmemb, void* data) {\n  if (size * nmemb == 0)\n    return 0;\n\n  size_t realsize = size * nmemb;\n  string* str = (string*)data;\n  str->length = realsize + 1;\n  str->value  = MALLOC_TN(char, str->length);\n\n  if (str->value != NULL) {\n    memcpy(str->value, ptr, realsize);\n    strcat(str->value, \"\\0\");\n\n    fprintf(stderr, \"RECIEVED: %ld bytes\\n\", realsize);\n    fprintf(stderr, \"[STREAMING API] received -> %s\\n\", str->value);\n  }\n\n  return realsize;\n}\n\n\n\u30b3\u30fc\u30c9\n\u3042\u3068\u306f\u3001\u4ee5\u524d\u306b\u66f8\u3044\u305f\u8a18\u4e8b(C\u8a00\u8a9e\u3067Twitter API\u3092\u3064\u304b\u3063\u3066\u3001\u30c4\u30a4\u30fc\u30c8\u3057\u3088\u3046! (\u81ea\u524d\u3067OAuth\u3092\u5b9f\u88c5\u3059\u308b\u8a71))\u306erequest\u3068\u307b\u307c\u540c\u3058\u3088\u3046\u306a\u611f\u3058\u3067\u4e00\u90e8\u3001\u4e0a\u3067\u66f8\u3044\u305f\u3053\u3068\u3092\u53cd\u6620\u3055\u305b\u308c\u3070\u5b9f\u73fe\u3067\u304d\u307e\u3059(\u91cd\u8907\u306b\u306a\u308b\u306e\u3067stream\u95a2\u6570\u5185\u3067\u7528\u3044\u3066\u308b\u95a2\u6570\u306a\u3069\u306b\u3064\u3044\u3066\u306e\u8aac\u660e\u306f\u884c\u3044\u307e\u305b\u3093\u306e\u3067\u3001\u8a73\u3057\u304f\u306f\u4ee5\u524d\u66f8\u3044\u305f\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002)\nvoid stream(T4C* t4c, string url, Parameters* paramsArgument, size_t (*callback)(void*, size_t, size_t, void*)) {\n\n  bool paramsArgumentWasNULL = false;\n  if (paramsArgument == NULL) {\n    paramsArgument = new_parameters();\n    paramsArgumentWasNULL = true;\n  }\n\n  Parameters* oauthParams = new_parameters();\n  genOAuthParams(t4c, oauthParams);\n  Parameters* params = new_parameters();\n  buildParams(params, oauthParams, paramsArgument);\n\n  string oauthSignature = signature(t4c->consumerSecret, t4c->accessTokenSecret, GET, url, params);\n  string encodedSignature = url_encode(oauthSignature);\n\n  add_parameter(oauthParams, make_string(\"oauth_signature\"), encodedSignature);\n  add_parameter(params, make_string(\"oauth_signature\"), encodedSignature);\n\n  string authorize      = new_string();\n  string authorizeChild = join_parameters(oauthParams, \",\");\n  authorize.length      = 21 + authorizeChild.length;\n  authorize.value       = MALLOC_TN(char, authorize.length);\n  sprintf(authorize.value, \"Authorization: OAuth %s\", string_get_value(authorizeChild));\n\n  string path = join_parameters(params, \"&\");\n\n  if (DEBUG) {\n    printf(\"----------------------------\\n\");\n    printf(\"STREAMING API\");\n    printf(\"URL: %s\\n\", string_get_value(url));\n    printf(\"path: %s\\n\", string_get_value(path));\n    printf(\"authorize: %s\\n\", string_get_value(authorize));\n    printf(\"----------------------------\\n\");\n  }\n\n  CURL* curl;\n  curl = curl_easy_init();\n\n  string reqURL = new_string();\n\n  reqURL.length = url.length + 1 + path.length;\n  reqURL.value  = MALLOC_TN(char, reqURL.length);\n  sprintf(reqURL.value, \"%s?%s\", url.value, path.value);\n\n  curl_easy_setopt(curl, CURLOPT_URL, reqURL.value);\n\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, string_get_value(authorize));\n  curl_easy_setopt(curl, CURLOPT_HEADER, headers);\n\n  curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n  curl_easy_setopt(curl, CURLOPT_TIMEOUT, 0);\n\n  curl_easy_perform(curl);\n  curl_easy_cleanup(curl);\n\n  free_string(url);\n  free_string(path);\n  free_string(authorize);\n  free_parameters(oauthParams);\n  free_parameters(params);\n  if (paramsArgumentWasNULL) {\n    free_parameters(paramsArgument);\n  }\n}\n\n\u3053\u306e\u3088\u3046\u306b\u3059\u308c\u3070C\u8a00\u8a9e\u3067Twitter UserStream\u304c\u53d7\u4fe1\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306bT4C\u3092\u7528\u3044\u3066C\u8a00\u8a9e\u3067UserStream\u3092\u53d7\u4fe1\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3059\n#include <t4c/parameters.h>\n#include <t4c/string.h>\n#include <t4c/t4c.h>\n#include <stddef.h>\n#include <stdlib.h>\n#include <stdio.h>\n\n//\u4e0a\u306b\u8f09\u305b\u305f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u3053\u3053\u306b\u66f8\u304f(\u30b9\u30da\u30fc\u30b9\u306e\u95a2\u4fc2\u4e0a\u7701\u7565)\nstatic size_t streaming_callback_sample(void* ptr, size_t size, size_t nmemb, void* data);\n\nint main() {\n  T4C t4c = {\n    .consumerKey       = make_string(\"Your Consumer Key\"),\n    .consumerSecret    = make_string(\"Your Consumer Secret\"),\n    .accessToken       = make_string(\"Your AccessToken\"),\n    .accessTokenSecret = make_string(\"Your AccessTokenSecret\")\n  };\n\n  stream(&t4c, make_string(\"https://userstream.twitter.com/1.1/user.json\"), NULL, streaming_callback_sample);\n}\n\n\u307e\u305f\u3001T4C\u306eREADME\u306b\u3082\u66f8\u304d\u307e\u3057\u305f\u304c\u3001/statuses/filter.json\u306e\u3088\u3046\u306a\u5f15\u6570\u3092\u3068\u308bAPI\u3082\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305d\u3061\u3089\u306fT4C\u306eREADME\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u62d9\u4f5c\u306eC\u8a00\u8a9e\u5411\u3051Twitter\u30e9\u30a4\u30d6\u30e9\u30ea[T4C](https://github.com/alphaKAI/t4c)\u306fREST API\u306b\u52a0\u3048\u3066Streaming API\u3082\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306fC\u8a00\u8a9e\u3067\u3069\u306e\u3088\u3046\u306b\u3057\u3066Streaming API\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u306e\u304b\u3001\u306b\u3064\u3044\u3066\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n#Streaming API\u3068\u306f\nStreaming API\u3068\u306f\u7c21\u5358\u306b\u8a00\u3046\u3068\u3001\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b(\u4f55\u3089\u304b\u3089\u306eEvent\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b)Twitter\u304b\u3089\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u304b\u3048\u3063\u3066\u304f\u308bAPI\u3067\u3059\u3002\n\u3067\u3001\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u5e30\u3063\u3066\u304f\u308b\u4e8b\u306b\u52a0\u3048\u3001\u7121\u9650\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u5e30\u3063\u3066\u304d\u307e\u3059\u3002\n\u3088\u3063\u3066\u3001\u901a\u5e38\u306e`GET`\u30ea\u30af\u30a8\u30b9\u30c8\u3068\u3057\u3066\u51e6\u7406\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u7570\u306a\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u3068\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n\u7570\u306a\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u3068\u3044\u3063\u3066\u3082\u5358\u7d14\u3067\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u7121\u304f\u3057\u3066\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u304b\u3048\u3063\u3066\u304f\u308b\u305f\u3073\u306b`callback`\u304c\u547c\u3070\u308c\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u3059\u3002\n\nlibcurl\u3067\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u306a\u304f\u3059\u306b\u306f\n\n```c\ncurl_easy_setopt(curl, CURLOPT_TIMEOUT, 0);\n```\n\n\u3068\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u3059\u3002\n\n\u307e\u305f\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u6307\u5b9a\u3059\u308c\u3070\u305d\u308c\u304c\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u304b\u3048\u3063\u3066\u304f\u308b\u305f\u3073\u306b\u547c\u3070\u308c\u307e\u3059\u3002\n\n```c\nstatic size_t streaming_callback_sample(void* ptr, size_t size, size_t nmemb, void* data) {\n  if (size * nmemb == 0)\n    return 0;\n\n  size_t realsize = size * nmemb;\n  string* str = (string*)data;\n  str->length = realsize + 1;\n  str->value  = MALLOC_TN(char, str->length);\n\n  if (str->value != NULL) {\n    memcpy(str->value, ptr, realsize);\n    strcat(str->value, \"\\0\");\n\n    fprintf(stderr, \"RECIEVED: %ld bytes\\n\", realsize);\n    fprintf(stderr, \"[STREAMING API] received -> %s\\n\", str->value);\n  }\n\n  return realsize;\n}\n```\n\n#\u30b3\u30fc\u30c9\n\u3042\u3068\u306f\u3001\u4ee5\u524d\u306b\u66f8\u3044\u305f\u8a18\u4e8b\\([C\u8a00\u8a9e\u3067Twitter API\u3092\u3064\u304b\u3063\u3066\u3001\u30c4\u30a4\u30fc\u30c8\u3057\u3088\u3046! (\u81ea\u524d\u3067OAuth\u3092\u5b9f\u88c5\u3059\u308b\u8a71)](http://qiita.com/alpha_kai_NET/items/cdd3ec27a70a77e06c59)\\)\u306e`request`\u3068\u307b\u307c\u540c\u3058\u3088\u3046\u306a\u611f\u3058\u3067\u4e00\u90e8\u3001\u4e0a\u3067\u66f8\u3044\u305f\u3053\u3068\u3092\u53cd\u6620\u3055\u305b\u308c\u3070\u5b9f\u73fe\u3067\u304d\u307e\u3059(\u91cd\u8907\u306b\u306a\u308b\u306e\u3067stream\u95a2\u6570\u5185\u3067\u7528\u3044\u3066\u308b\u95a2\u6570\u306a\u3069\u306b\u3064\u3044\u3066\u306e\u8aac\u660e\u306f\u884c\u3044\u307e\u305b\u3093\u306e\u3067\u3001\u8a73\u3057\u304f\u306f\u4ee5\u524d\u66f8\u3044\u305f\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002)\n\n```c\nvoid stream(T4C* t4c, string url, Parameters* paramsArgument, size_t (*callback)(void*, size_t, size_t, void*)) {\n\n  bool paramsArgumentWasNULL = false;\n  if (paramsArgument == NULL) {\n    paramsArgument = new_parameters();\n    paramsArgumentWasNULL = true;\n  }\n\n  Parameters* oauthParams = new_parameters();\n  genOAuthParams(t4c, oauthParams);\n  Parameters* params = new_parameters();\n  buildParams(params, oauthParams, paramsArgument);\n\n  string oauthSignature = signature(t4c->consumerSecret, t4c->accessTokenSecret, GET, url, params);\n  string encodedSignature = url_encode(oauthSignature);\n\n  add_parameter(oauthParams, make_string(\"oauth_signature\"), encodedSignature);\n  add_parameter(params, make_string(\"oauth_signature\"), encodedSignature);\n\n  string authorize      = new_string();\n  string authorizeChild = join_parameters(oauthParams, \",\");\n  authorize.length      = 21 + authorizeChild.length;\n  authorize.value       = MALLOC_TN(char, authorize.length);\n  sprintf(authorize.value, \"Authorization: OAuth %s\", string_get_value(authorizeChild));\n\n  string path = join_parameters(params, \"&\");\n\n  if (DEBUG) {\n    printf(\"----------------------------\\n\");\n    printf(\"STREAMING API\");\n    printf(\"URL: %s\\n\", string_get_value(url));\n    printf(\"path: %s\\n\", string_get_value(path));\n    printf(\"authorize: %s\\n\", string_get_value(authorize));\n    printf(\"----------------------------\\n\");\n  }\n\n  CURL* curl;\n  curl = curl_easy_init();\n\n  string reqURL = new_string();\n\n  reqURL.length = url.length + 1 + path.length;\n  reqURL.value  = MALLOC_TN(char, reqURL.length);\n  sprintf(reqURL.value, \"%s?%s\", url.value, path.value);\n\n  curl_easy_setopt(curl, CURLOPT_URL, reqURL.value);\n\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, string_get_value(authorize));\n  curl_easy_setopt(curl, CURLOPT_HEADER, headers);\n\n  curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n  curl_easy_setopt(curl, CURLOPT_TIMEOUT, 0);\n\n  curl_easy_perform(curl);\n  curl_easy_cleanup(curl);\n\n  free_string(url);\n  free_string(path);\n  free_string(authorize);\n  free_parameters(oauthParams);\n  free_parameters(params);\n  if (paramsArgumentWasNULL) {\n    free_parameters(paramsArgument);\n  }\n}\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3059\u308c\u3070C\u8a00\u8a9e\u3067Twitter UserStream\u304c\u53d7\u4fe1\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306b[T4C](https://github.com/alphaKAI/t4c)\u3092\u7528\u3044\u3066C\u8a00\u8a9e\u3067UserStream\u3092\u53d7\u4fe1\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3059\n\n\n```c\n#include <t4c/parameters.h>\n#include <t4c/string.h>\n#include <t4c/t4c.h>\n#include <stddef.h>\n#include <stdlib.h>\n#include <stdio.h>\n\n//\u4e0a\u306b\u8f09\u305b\u305f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u3053\u3053\u306b\u66f8\u304f(\u30b9\u30da\u30fc\u30b9\u306e\u95a2\u4fc2\u4e0a\u7701\u7565)\nstatic size_t streaming_callback_sample(void* ptr, size_t size, size_t nmemb, void* data);\n\nint main() {\n  T4C t4c = {\n    .consumerKey       = make_string(\"Your Consumer Key\"),\n    .consumerSecret    = make_string(\"Your Consumer Secret\"),\n    .accessToken       = make_string(\"Your AccessToken\"),\n    .accessTokenSecret = make_string(\"Your AccessTokenSecret\")\n  };\n\n  stream(&t4c, make_string(\"https://userstream.twitter.com/1.1/user.json\"), NULL, streaming_callback_sample);\n}\n```\n\n\u307e\u305f\u3001T4C\u306eREADME\u306b\u3082\u66f8\u304d\u307e\u3057\u305f\u304c\u3001`/statuses/filter.json`\u306e\u3088\u3046\u306a\u5f15\u6570\u3092\u3068\u308bAPI\u3082\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305d\u3061\u3089\u306fT4C\u306eREADME\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n", "tags": ["C\u8a00\u8a9e", "Twitter", "TwitterAPI", "libcurl", "curl"]}