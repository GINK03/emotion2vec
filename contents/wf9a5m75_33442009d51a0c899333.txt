{"context": "\n\n\u304d\u3063\u304b\u3051\n\u5199\u771f\u306e\u8272\u5206\u6790\u3092\u3059\u308b\u306e\u306b\u3001RGBA\u5f62\u5f0f\u306e\u753b\u50cf\u3092HSV\u5f62\u5f0f\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\u3044\u3064\u3082\u306fOpenCV(c++)\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u3082\u305d\u306e\u51e6\u7406\u304c\u9045\u3044\u3088\u3046\u306a\u306e\u3067\u3001ARM\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u306e\u52c9\u5f37\u3092\u517c\u306d\u3066\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\uff08\u3068\u3044\u3046\u304b\u3001\u30cd\u30c3\u30c8\u4e0a\u306b\u7121\u304b\u3063\u305f\u306e\u3067\u81ea\u5206\u3067\u4f5c\u3089\u3056\u308b\u3092\u5f97\u306a\u304b\u3063\u305f\uff09\n\u524d\u56de\u3001c++\u3068\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u3067\u753b\u50cf\u3092\u53cd\u8ee2\u3055\u305b\u3066\u307f\u308b\u3092\u3084\u3063\u305f\u306e\u3067\n\u3067\u304d\u308b\u3060\u308d\u3001\u3068\u304b\u601d\u3063\u305f\u3089\u3001\u7518\u304b\u3063\u305f\u3002\u3002\u3002\u3002\n\nRGBA\u753b\u50cf\u3092HSV\u306b\u5909\u63db\u3059\u308b\u30b3\u30fc\u30c9(c++)\nGoogle\u3067\u691c\u7d22\u3059\u308b\u3068\u3044\u304f\u3064\u304b\u3067\u3066\u304d\u307e\u3059\u304c\u3001\n\u4eca\u56de\u306f\u305d\u306e\u306a\u304b\u3067Convert RGB to HSV and back with a micro controller\u306e\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\u7406\u7531\u306f unsigned char\u578b\u3092\u4f7f\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u306b\u843d\u3068\u3057\u8fbc\u307f\u3084\u3059\u304b\u3063\u305f\u304b\u3089\u3002\n\u30b3\u30fc\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\u6700\u5f8c\u306e\u90e8\u5206\u306e 0.71\u3063\u3066\u6570\u5b57\u306f\u3001H\u306e\u5024\u306e\u7bc4\u56f2\u30920\u301c360\u304b\u3089\u30010\u301c256\u306b\u5909\u63db\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n(0.71 \u2252 256/360)\ntypedef struct {\n    unsigned char *data;\n    int width;\n    int height;\n    int bpp;\n    int size;\n} image_t;\n\n\nvoid rgba2hsvx_c(image_t *rgba, image_t *hsv) {\n  unsigned char *src = (unsigned char *)rgba->data;\n  unsigned char *dst = (unsigned char *)hsv->data;\n\n  unsigned char min, max, delta;\n  unsigned char r,g,b,a;\n  unsigned char s,v;\n  signed int h;\n\n  int x, y;\n\n  for (y = 0; y < rgba->height; y++) {\n    for (x = 0; x < rgba->width; x++) {\n      r = *src++;\n      g = *src++;\n      b = *src++;\n      a = *src++;\n\n      min = r < g ? r : g;\n      min = b < min ? b : min;\n\n      max = r > g ? r : g;\n      max = b > max ? b : max;\n\n      v = max;\n      delta = max - min;\n\n      if (!(max == 0 || delta == 0)) {\n\n        s = (int)(delta * 255) / max;\n\n        if (r == max) {\n          h = (60 * (g - b))  / delta;\n        } else {\n          if (g == max) {\n            h = 120 + ((60 * (b - r)) / delta);\n          } else {\n            h = 240 + ((60 * (r - g)) / delta);\n          }\n        }\n\n        if (h < 0)  {\n          h += 360;\n        }\n      } else {\n        h = 0;\n        s = 0;\n      }\n\n      *dst++ = (unsigned int)(h * 0.71);   // In real value range is 0-359, but for rgba image, down scale to 0-255\n      *dst++ = s;\n      *dst++ = v;\n      *dst++ = a;\n    }\n  }\n}\n\n\n\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\n\u3081\u3061\u3083\u304f\u3061\u3083\u82e6\u52b4\u3057\u307e\u3057\u305f\u30025\u65e5\u9593\u3001\u8133\u307f\u305d\u4f7f\u7528\u7387120%\u3063\u3066\u611f\u3058\uff57\n\uff08ARM\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u59cb\u3081\u3066\u304b\u3089\u3001\u307e\u30602\u9031\u9593\u3067\u3059\u306e\u3067\uff09\nvoid rgba2hsvx_neon(image_t *rgba, image_t *hsv) {\n  unsigned char *src = (unsigned char *)rgba->data;\n  unsigned char *dst = (unsigned char *)hsv->data;\n\n  __asm__ __volatile__(\n\n    \"            vmov.i32       d0, #0\\n\"                    // d0 (s0, s1) = 0x0000000000000000\n\n    \"            lsr            %[total], %[total], #5\\n\"    // %[size] = %[size] / 32 ; The number '32' means 4bytes * 8pixels\n\n    \"            mov            r9, %[src]\\n\"\n    \"            mov            r10, %[dst]\\n\"\n\n    \"            mov            r0, #60\\n\"\n    \"            vmov.u32       s31, r0\\n\"                   // (d15) s31 = 60\n    \"            vcvt.f32.u32   s31, s31\\n\"\n\n    \"            mov            r0, #255\\n\"\n    \"            vmov.i32       s30, r0\\n\"                   // (d15) s30 = 255\n    \"            vcvt.f32.u32   s30, s30\\n\"\n\n    \"            mov            r0, #256\\n\"\n    \"            vmov.s32       s29, r0\\n\"                   // (d14) s29 = 256\n    \"            vcvt.f32.u32   s29, s29\\n\"\n\n    \"            mov            r0, #360\\n\"\n    \"            vmov.u32       s28, r0\\n\"                   // (d14) s28 = 360\n    \"            vcvt.f32.u32   s28, s28\\n\"\n\n    \"            mov            r0, #120\\n\"\n    \"            vmov.s32       s27, r0\\n\"                   // (d13) s27 = 120\n    \"            vcvt.f32.u32   s27, s27\\n\"\n\n    \"            mov            r0, #240\\n\"\n    \"            vmov.u32       s26, r0\\n\"                   // (d13) s26 = 240\n    \"            vcvt.f32.u32   s26, s26\\n\"\n\n    \"loop_hsv:\\n\"\n    \"            pld            [r9, #256]\\n\"\n    \"            vld4.8         {d1, d2, d3, d4}, [r9]\\n\"    // Load elements from %[src] and store to each D registers:\n                                                             //  [RED]   d1 = [r7, r6, ... r0]\n                                                             //  [GREEN] d2 = [g7, g6, ... g0]\n                                                             //  [BLUE]  d3 = [b7, b6, ... b0]\n                                                             //  [ALPHA] d4 = [a7, a6, ... a0]\n\n    \"            vmin.u8        d5, d1, d2\\n\"                // min = MIN(r, g);\n    \"            vmin.u8        d5, d5, d3\\n\"                // min = MIN(b, min);\n\n    \"            vmax.u8        d6, d1, d2\\n\"                // max = MAX(r, g);\n    \"            vmax.u8        d6, d6, d3\\n\"                // max = MAX(b, max);\n\n    \"            vqsub.u8       d7, d6, d5\\n\"                // delta = max - min\n\n                                                             //if (!(max == 0 || delta == 0))\n    \"            vceq.u8        d4, d7, d0\\n\"                // d4 = max == 0 ? 0xFF : 0\n    \"            vceq.u8        d8, d6, d0\\n\"                // d8 = delta == 0 ? 0xFF : 0\n    \"            vorr.u8        d8, d4, d8\\n\"                // d8 = d4(0 or 0xFF) | d8(0 or 0xFF)\n\n\n    \"            vst4.8         {d5, d6, d7, d8}, [r10]\\n\"   // (min) : (max) : (delta) : (flag)\n\n    \"            mov            r0, #0\\n\"                    // H = 0\n    \"            mov            r1, #0\\n\"                    // S = 0\n    \"            mov            r2, #0\\n\"                    // V = 0\n    \"            mov            r8, #8\\n\"                    // r8 (i) = 8\n\n    //------------\n    //   if (!(max == 0 || delta == 0)) {\n    //------------\n    \"calc_hsv:\\n\"\n    \"            pld            [r10, #32]\\n\"                // Preload 32bit data from the main memory\n    \"            ldrb           r3, [r10]\\n\"                 // flag = *r10++\n\n    \"            cmp            r3, #0xFF\\n\"                 // if (flag == 0xff)\n    \"            beq            calc_hsv_end\\n\"              //    goto calc_s\n    //------------\n    //       s = (int)(delta * 255) / max;\n    //------------\n    \"calc_s:\\n\"\n\n    \"            pld            [r9, #32]\\n\"                // Preload 256bit data from the main memory\n    \"            ldrb           r5, [r9]\\n\"                  // red(r5) = *r9\n    \"            ldrb           r6, [r9, #1]\\n\"              // green(r6) = *(r9 + 1)\n    \"            ldrb           r3, [r9, #2]\\n\"              // blue(r3) = *(r9 + 2)\n\n    \"            vmov.u32       s2, r5\\n\"                    // s2 = red\n    \"            vmov.u32       s3, r6\\n\"                    // s3 = green\n    \"            vmov.u32       s4, r3\\n\"                    // s4 = blue\n    \"            vcvt.f32.u32   s2, s2\\n\"                    // convert unsigned int to floating point\n    \"            vcvt.f32.u32   s3, s3\\n\"\n    \"            vcvt.f32.u32   s4, s4\\n\"\n\n    \"            ldrb           r2, [r10, #1]\\n\"             // max(V) = *(r10 + 1)\n    \"            ldrb           r3, [r10, #2]\\n\"             // delta = *(r10 + 2)\n    \"            vmov.u32       s5, r3\\n\"                    // s5 = delta\n    \"            vmov.u32       s6, r2\\n\"                    // s6 = max\n    \"            vcvt.f32.u32   s5, s5\\n\"                    // unsigned int 32 bits -> float 32 bits\n    \"            vcvt.f32.u32   s6, s6\\n\"\n\n    \"            vmul.f32       s7, s5, s30\\n\"               // s7 = s5(delta) * s30(#255)\n    \"            vdiv.f32       s7, s7, s6\\n\"                // s7 = s7 / s6(max)\n    \"            vcvt.u32.f32   s7, s7\\n\"                    // float 32 bits -> unsigned int 32 bits\n    \"            vmov           r1, s7\\n\"                    // r1(S) = s7\n\n\n    //---------------\n    //    s6(offset) = 0\n    //    if (r == max) {\n    //      s7 = (g-b)\n    //    } else {\n    //      if (g == max) {\n    //        s7 = (b - r)\n    //        s6 = 120\n    //      } else {\n    //        s7 = (r - g)\n    //        s6 = 240\n    //      }\n    //   }\n    //   s7 = s7 * 60\n    //   s7 = s7 / delta\n    //   s7 += offset\n    //   H = s7 < 0 ? s7 + 360 : s7\n    //---------------\n    \"            cmp            r2, r5\\n\"                    // if ( r2(max) == r5(red) )\n    \"            beq            r_equal_max\\n\"               //   goto r_equal_max\n    \"            cmp            r2, r6\\n\"                    // if ( r2(max) == r6(green) )\n    \"            beq            g_equal_max\\n\"               //   goto g_equal_max\n\n\n    \"b_equal_max:\\n\"\n    \"            vsub.f32       s7, s2, s3\\n\"                // s7 = s2(red) - s3(green)\n    \"            vmov           s6, s26\\n\"                   // s6 = s26(#240)\n    \"            bal            calc_h\\n\"                    // goto calc_h\n\n    \"g_equal_max:\\n\"\n    \"            vsub.f32       s7, s4, s2\\n\"                // s7 = s4(blue) - s2(red)\n    \"            vmov           s6, s27\\n\"                   // s6 = s27(#120)\n    \"            bal            calc_h\\n\"                    // goto calc_h\n\n    \"r_equal_max:\\n\"\n    \"            vmov           s6, s0\\n\"                    // s6 = s0(#0)\n    \"            vsub.f32       s7, s3, s4\\n\"                // s7 = s3(green) - s4(blue)\n\n\n    \"calc_h:\\n\"\n    \"            vmul.f32       s7, s7, s31\\n\"               // s7 = s7 * s31(#60)\n    \"            vdiv.f32       s7, s7, s5\\n\"                // s7 = s7 / s5(delta)\n    \"            vadd.f32       s7, s7, s6\\n\"                // s7 += s6(offset)\n\n    \"            vaddlt.f32     s7, s28\\n\"                   // s7 = s7 < 0 ? s7 + s28(#360) : 0\n    \"            vmul.f32       s7, s7, s29\\n\"               // s7 = s7 * s29(#256)\n    \"            vdiv.f32       s7, s7, s28\\n\"               // s7 = s7 / s28(#360)\n    \"            vcvt.u32.f32   s7, s7\\n\"                    // float 32bit -> unsigned int 32bit\n    \"            vmov           r0, s7\\n\"                    // r0(H) = s7\n\n    \"calc_hsv_end:\\n\"\n    \"            mov            r3, #0xFF\\n\"\n    \"            strb           r0, [r10]\\n\"                 // H\n    \"            strb           r1, [r10, #1]\\n\"             // S\n    \"            strb           r2, [r10, #2]\\n\"             // V\n    \"            strb           r3, [r10, #3]\\n\"             // A = 0xFF\n    \"            add            r9, r9, #4\\n\"\n    \"            add            r10, r10, #4\\n\"\n\n\n    \"            subs           r8, r8, #1\\n\"                // r8--\n    \"            bne            calc_hsv\\n\"                  // if (r8 != 0) goto calc_hsv\n    \"            subs           %[total], %[total], #1\\n\"    // %[total]--\n    \"            bne            loop_hsv\\n\"                  // if (%[total] != 0) goto loop_hsv\n\n\n\n    :\n    : [src]\"r\"(src) , [dst]\"r\"(dst), [total]\"r\"(rgba->size)\n    : \"q0\", \"q1\", \"q2\", \"q3\", \"r0\",\n      \"r1\", \"r2\", \"r3\", \"r5\", \"r6\", \"r4\", \"r8\", \"r9\", \"r10\",\n      \"s0\", \"s1\", \"s2\", \"s3\", \"s4\", \"s5\", \"s6\", \"s7\", \"s26\", \"s27\",\n      \"s28\", \"s29\", \"s30\", \"s31\", \"memory\", \"cc\"\n  );\n\n}\n\n\n\u7d50\u679c\u3069\u3046\u306a\u3063\u305f\n1920x1080\u306e\u753b\u50cf\u3092RK3288 CPU\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u305f\u3076\u3093\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e1\u30e2\u30ea\u3068\u304b\u306e\u95a2\u4fc2\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u4ed6\u306e\u30c7\u30d0\u30a4\u30b9\u3067\u30c6\u30b9\u30c8\u3059\u308b\u3068\u7d50\u679c\u304c\u5909\u308f\u308a\u307e\u3059\u3002\n\n\n\n\u65b9\u6cd5\n\u6642\u9593\n\n\n\n\nOpenCV(3.1)\n\u7d0484ms\n\n\nc++ (-O3)\n\u7d04193ms\n\n\nassembly (neon)\n\u7d0480ms\n\n\n\n\u3046\u30fc\u3093\u3001\u82e6\u52b4\u3057\u305f\u5272\u306b\u306f\u5927\u5dee\u304c\u306a\u3044\u3002\n\n\u30d0\u30b0\uff1f\n\u3069\u3046\u3086\u3046\u308f\u3051\u304b\u3001OpenCV\u3067HSV\u306b\u5909\u63db\u3057\u305f\u3068\u304d\u3068\u51fa\u529b\u3055\u308c\u308b\u753b\u50cf\u304c\u5fae\u5999\u306b\u9055\u3046\u3093\u3067\u3059\u3088\u306d\u3002\n\u3067\u3082c++\u3068\u306f\u540c\u3058\u306b\u306a\u308b\u306e\u3067\u3001\uff08\u3068\u308a\u3042\u3048\u305a\uff09\u826f\u3057\u3001\u3068\u306f\u3057\u3066\u3044\u307e\u3059\u304c\u3002\n\u5143\u753b\u50cf\u306f\u3053\u308c\u3002\u4f7f\u7528\u3057\u3066\u3044\u308b\u30c7\u30d0\u30a4\u30b9\u306e\u4e2d\u306b\u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u3068\u3057\u3066\u3042\u3063\u305f\u3082\u306e\u30921920x1080\u306b\u30ea\u30b5\u30a4\u30ba\u3057\u3066\u4f7f\u7528\u3002\n\n\u203b (\u753b\u50cf\u3092\u30af\u30ea\u30c3\u30af\u3059\u308c\u3070\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059)\nOpenCV\u3067\u5909\u63db\u3059\u308b\u3068\u3001\u3053\u3046\u306a\u308a\u307e\u3059\u3002\u306a\u3093\u304b\u30b7\u30e5\u30fc\u30eb...\n\n\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u3067\u5909\u63db\u3059\u308b\u3068\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n\u3069\u3046\u3082\u9ce5\u306e\u80f8\u306e\u3042\u305f\u308a\u304c\u7d50\u679c\u304c\u9055\u3046\u3093\u3067\u3059\u3088\u306d\u3002\n\u7406\u7531\u306f\u3044\u307e\u306e\u3068\u3053\u308d\u4e0d\u660e\u3067\u3059\u3002\n\nVFP\u30ec\u30b8\u30b9\u30bf\u3001D\u30ec\u30b8\u30b9\u30bf\u3001Q\u30ec\u30b8\u30b9\u30bf\n\u3084\u3063\u3066\u3044\u308b\u9014\u4e2d\u3067\u30cf\u30de\u3063\u305f\u306e\u304c\u3001\u30ec\u30b8\u30b9\u30bf\u306e\u30de\u30c3\u30d7\u3002\ns0 = 360\u3068\u30b3\u30fc\u30c9\u306e\u524d\u65b9\u3067\u5b9a\u7fa9\u3057\u3066\u3001\u5f8c\u534a\u306b\u306a\u308b\u3068\u305c\u3093\u305c\u3093\u9055\u3046\u5024\u304c\u5165\u3063\u3066\u3044\u3066\u3001\u6700\u521d\u306f\u8a08\u7b97\u304c\u5168\u7136\u5408\u308f\u306a\u3044\u8b0e\u306e\u73fe\u8c61\u304c\u767a\u751f\u3057\u3066\u3001\u968f\u5206\u60a9\u307e\u3055\u308c\u307e\u3057\u305f\u3002\n\u8abf\u3079\u305f\u3068\u3053\u308d\u3001VFP\u30ec\u30b8\u30b9\u30bf\u306fD/Q\u30ec\u30b8\u30b9\u30bf\u3068\u540c\u3058\u7a7a\u9593\u306a\u306e\u3060\u3068\u3002\n\u306a\u306c\u3045\uff01\uff01\n\u305d\u3093\u306a\u3053\u3068\u306f\u3001AndroidNDK\u30cd\u30a4\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7b2c2\u7248\u306b\u306f\u66f8\u3044\u3066\u306a\u304b\u3063\u305f\uff01\n\u516c\u5f0f\u30b5\u30a4\u30c8\u306e\u89e3\u8aac\u306b\u3088\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\nVFP \u30b3\u30d7\u30ed\u30bb\u30c3\u30b5\u306b\u306f\u3001s0 \u301c s31 \u306e 32 \u672c\u306e\u5358\u7cbe\u5ea6\u30ec\u30b8\u30b9\u30bf\u304c\u3042\u308a\u307e\u3059\u3002\u5404\u30ec\u30b8\u30b9\u30bf\u306f\u3001\u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u5024\u307e\u305f\u306f 32 \u30d3\u30c3\u30c8\u6574\u6570\u3092\u4fdd\u6301\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u3089 32 \u672c\u306e\u30ec\u30b8\u30b9\u30bf\u306f\u3001d0 \u301c d15 \u306e 16 \u672c\u306e\u500d\u7cbe\u5ea6\u30ec\u30b8\u30b9\u30bf\u3068\u3057\u3066\u3082\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002dn \u306f\u3001s(2n) \u304a\u3088\u3073 s(2n+1) \u3068\u540c\u3058\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\u56f3\u89e3\u3059\u308b\u3068\u3001\u3053\u3046\u3089\u3057\u3044\u3002\n\n\u3064\u307e\u308a\u3001d0\u30ec\u30b8\u30b9\u30bf\u306b\u5024\u3092\u4fdd\u5b58\u3057\u3066\u3042\u308b\u306e\u306b\u3001s3\u30ec\u30b8\u30b9\u30bf\u306b\u5024\u3092\u3046\u3063\u304b\u308a\u4fdd\u5b58\u3059\u308b\u3068\u3001d0\u30ec\u30b8\u30b9\u30bf\u306f\u5f71\u97ff\u3092\u53d7\u3051\u308b\u306e\u3067\u3059\u3002\n\u3053\u308c\u3092\u5ff5\u982d\u306b\u3044\u308c\u3066\u3001\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u4e0b\u3055\u3044\u3002\n\n\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\n\u5c06\u6765\u306e\u81ea\u5206\u306e\u305f\u3081\u306b\u3001\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u307e\u3041\u30b3\u30e1\u30f3\u30c8\u3092\u8aad\u3081\u3070\u308f\u304b\u308b\u6c17\u304c\u3059\u308b\u3051\u3069\u3002\n\n\u5b9a\u6570\u306e\u5ba3\u8a00\n\u30b3\u30fc\u30c9\u4e2d\u3067\u8a08\u7b97\u306e\u305f\u3081\u306e\u5b9a\u6570\u3092s\u30ec\u30b8\u30b9\u30bf\u306b\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u3046\u3063\u304b\u308a\u4e0a\u66f8\u304d\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u5b9a\u6570\u3092s\u30ec\u30b8\u30b9\u30bf\u306e\u5f8c\u308d\u306e\u65b9\u306b\u5165\u308c\u3066\u304a\u304d\u307e\u3059\u3002\n\n\nmin, max, delta\u306e\u8a08\u7b97\nNEON\u547d\u4ee4\u3092\u4f7f\u3063\u3066\u30018\u30d4\u30af\u30bb\u30eb\u5206\u3092\u307e\u3068\u3081\u3066\u8a08\u7b97\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\nmax == 0 && delta == 0 \u306e\u5224\u5b9a\n2\u3064\u306e\u5024\u3092\u6bd4\u8f03\u3059\u308bif\u6587\u306f\u9762\u5012\u3060\u3063\u305f\u306e\u3067\u3001NEON\u547d\u4ee4\u3092\u4f7f\u3063\u3066\u30018\u30d4\u30af\u30bb\u30eb\u5206\u3092\u307e\u3068\u3081\u3066\u5224\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\n\u8a08\u7b97\u7d50\u679c\u3092\u4e00\u6642\u4fdd\u5b58\n\u305d\u3057\u3066\u3053\u308c\u3089\u306e\u5024\u3092 \u66f8\u304d\u51fa\u3057\u9818\u57df\u306e%[dst] (r10)\u306b\u4e00\u6642\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\uff08\u203b\u30e1\u30a4\u30f3\u30e1\u30e2\u30ea\u3092\u4f7f\u308f\u306a\u304b\u3063\u305f\u3089\u3001\u3082\u3063\u3068\u65e9\u304f\u306a\u308b\u304b\u3082...\uff09\n\u3053\u306e\u6bb5\u968e\u3067\u30018\u30d4\u30af\u30bb\u30eb\u5206\u306e min, max(V), delta, flag\u304c\u8a08\u7b97\u3067\u304d\u307e\u3057\u305f\u3002\n\n\nS\u306e\u8a08\u7b97\n\u66f8\u304d\u51fa\u3057\u9818\u57df\u306b\u4fdd\u5b58\u3057\u305f1\u30d4\u30af\u30bb\u30eb\u5206\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u51fa\u3057\u3066\u30011\u30d4\u30af\u30bb\u30eb\u305a\u3064\u51e6\u7406\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n(* \u30db\u30f3\u30c8\u306f\u3053\u308c\u3082\u4e26\u5217\u5316\u3057\u305f\u3044)\nHSV\u306eS\u306e\u8a08\u7b97\u306f\u3053\u306e\u90e8\u5206\u3067\u3059\u3002\nc++\u306b\u66f8\u3044\u3066\u3042\u308b\u8a08\u7b97\u3092VFP\u3092\u4f7f\u3063\u3066\u8a08\u7b97\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n//------------\n//       s = (int)(delta * 255) / max;\n//------------\n\"calc_s:\\n\"\n\n\"            pld            [r9, #256]\\n\"                // Preload 256bit data from the main memory\n\"            ldrb           r5, [r9]\\n\"                  // red(r5) = *r9\n\"            ldrb           r6, [r9, #1]\\n\"              // green(r6) = *(r9 + 1)\n\"            ldrb           r7, [r9, #2]\\n\"              // blue(r7) = *(r9 + 2)\n\n\"            vmov.u32       s2, r5\\n\"                    // s2 = red\n\"            vmov.u32       s3, r6\\n\"                    // s3 = green\n\"            vmov.u32       s4, r7\\n\"                    // s4 = blue\n\"            vcvt.f32.u32   s2, s2\\n\"                    // convert unsigned int to floating point\n\"            vcvt.f32.u32   s3, s3\\n\"\n\"            vcvt.f32.u32   s4, s4\\n\"\n\n\"            ldrb           r2, [r10, #1]\\n\"             // max(V) = *r11++\n\"            ldrb           r3, [r10, #2]\\n\"             // delta = *r11++\n\"            vmov.u32       s5, r3\\n\"                    // s5 = delta\n\"            vmov.u32       s6, r2\\n\"                    // s6 = max\n\"            vcvt.f32.u32   s5, s5\\n\"                    // unsigned int 32 bits -> float 32 bits\n\"            vcvt.f32.u32   s6, s6\\n\"\n\n\"            vmul.f32       s7, s5, s30\\n\"               // s7 = s5(delta) * s30(#255)\n\"            vdiv.f32       s7, s7, s6\\n\"                // s7 = s7 / s6(max)\n\"            vcvt.u32.f32   s7, s7\\n\"                    // float 32 bits -> unsigned int 32 bits\n\"            vmov           r1, s7\\n\"                    // r1(S) = s7\n\n\nH\u306e\u8a08\u7b97\nHSV\u306eH\u306e\u8a08\u7b97\u306f\u3053\u306e\u90e8\u5206\u3067\u3059\u3002\n(* \u30db\u30f3\u30c8\u306f\u3053\u308c\u3082\u4e26\u5217\u5316\u3057\u305f\u3044)\n//---------------\n//    s6(offset) = 0\n//    if (r == max) {\n//      s7 = (g-b)\n//    } else {\n//      if (g == max) {\n//        s7 = (b - r)\n//        s6 = 120\n//      } else {\n//        s7 = (r - g)\n//        s6 = 240\n//      }\n//   }\n//   s7 = s7 * 60\n//   s7 = s7 / delta\n//   s7 += offset\n//   H = s7 < 0 ? s7 + 360 : s7\n//---------------\n\"            cmp            r2, r5\\n\"                    // if ( r2(max) == r5(red) )\n\"            beq            r_equal_max\\n\"               //   goto r_equal_max\n\"            cmp            r2, r6\\n\"                    // if ( r2(max) == r6(green) )\n\"            beq            g_equal_max\\n\"               //   goto g_equal_max\n\n\n\"b_equal_max:\\n\"\n\"            vsub.f32       s7, s2, s3\\n\"                // s7 = s2(red) - s3(green)\n\"            vmov           s6, s26\\n\"                   // s6 = s26(#240)\n\"            bal            calc_h\\n\"                    // goto calc_h\n\n\"g_equal_max:\\n\"\n\"            vsub.f32       s7, s4, s2\\n\"                // s7 = s4(blue) - s2(red)\n\"            vmov           s6, s27\\n\"                   // s6 = s27(#120)\n\"            bal            calc_h\\n\"                    // goto calc_h\n\n\"r_equal_max:\\n\"\n\"            vmov           s6, s0\\n\"                    // s6 = s0(#0)\n\"            vsub.f32       s7, s3, s4\\n\"                // s7 = s3(green) - s4(blue)\n\n\n\"calc_h:\\n\"\n\"            vmul.f32       s7, s7, s31\\n\"               // s7 = s7 * s31(#60)\n\"            vdiv.f32       s7, s7, s5\\n\"                // s7 = s7 / s5(delta)\n\"            vadd.f32       s7, s7, s6\\n\"                // s7 += s6(offset)\n\n\"            vaddlt.f32     s7, s28\\n\"                   // s7 = s7 < 0 ? s7 + s28(#360) : 0\n\"            vmul.f32       s7, s7, s29\\n\"               // s7 = s7 * s29(#256)\n\"            vdiv.f32       s7, s7, s28\\n\"               // s7 = s7 / s28(#360)\n\"            vcvt.u32.f32   s7, s7\\n\"                    // float 32bit -> unsigned int 32bit\n\"            vmov           r0, s7\\n\"                    // r0(H) = s7\n\n\n\u6700\u5f8c\u306b\u4fdd\u5b58\n\u3042\u3068\u306f\u66f8\u304d\u51fa\u3057\u9818\u57df\u306b\u4fdd\u5b58\u3057\u3066\u3001\u6b21\u306e8\u30d4\u30af\u30bb\u30eb\u306e\u51e6\u7406\u306b\u79fb\u308a\u307e\u3059\u3002\n\"calc_hsv_end:\\n\"\n\"            mov            r3, #0xFF\\n\"\n\"            strb           r0, [r10]\\n\"                 // H\n\"            strb           r1, [r10, #1]\\n\"             // S\n\"            strb           r2, [r10, #2]\\n\"             // V\n\"            strb           r3, [r10, #3]\\n\"             // A = 0xFF\n\"            add            r9, r9, #4\\n\"\n\"            add            r10, r10, #4\\n\"\n\n\n\"            subs           r8, r8, #1\\n\"                // r8--\n\"            bne            calc_hsv\\n\"                  // if (r8 != 0) goto calc_hsv\n\"            subs           %[total], %[total], #1\\n\"                // sub--\n\"            bne            loop_hsv\\n\"                  // if (r11 != 0) goto calc_hsv\n\n\n\u307e\u3068\u3081\n\u8a18\u4e8b\u3092\u66f8\u304f\u306e\u306b\u75b2\u308c\u305f\u306e\u3067\u3001\u4e00\u65e6\u307e\u3068\u3081\u307e\u3059\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306e\u306b\u30015\u65e5\u9593\u30d5\u30eb\u3067\u4f7f\u3044\u307e\u3057\u305f\u306d\u3002\n\u671d\u3082\u663c\u3082\u591c\u3082\u3001\u5bdd\u3066\u3044\u308b\u9593\u3067\u3055\u3048\u3082\u3046\u306a\u3055\u308c\u306a\u304c\u3089\u3001\u8003\u3048\u3066\u307e\u3057\u305f\u3002\n\u3067\u3001\u7d50\u679c\u304c\u3001OpenCV\u3068\u5bfe\u3057\u3066\u5909\u308f\u3089\u306a\u3044\uff01\uff01\uff01\uff01  ... orz\n\u3067\u3082S\u306e\u8a08\u7b97\u3092\u4e26\u5217\u5316\u3067\u304d\u308c\u3070\u3001\u305f\u3076\u3093\u65e9\u304f\u306a\u308b\u306f\u305a\u3002\u3068\u601d\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u8ab0\u304b\u30d8\u30eb\u30d7\u3057\u3066\u304f\u3060\u3055\u3044\n\n\u8ffd\u8a181. S\u306e\u8a08\u7b97\u306f\u4e26\u5217\u5316\u3067\u304d\u306a\u3044\uff08\u305f\u3076\u3093\uff09\nARM32\u30d3\u30c3\u30c8CPU\u306e\u5834\u5408\u3001\u9664\u7b97\u3092\u64ec\u4f3c\u7684\u306b\u884c\u3063\u3066\u3044\u308b\u3089\u3057\u304f\u3001\u8a08\u7b97\u306b32\u30d3\u30c3\u30c8\u5e45\u3092\u8981\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066\u4e00\u56de\u306e\u547d\u4ee4\u3067\u4e00\u3064\u306e\u5024\u3057\u304b\u8a08\u7b97\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u9664\u7b97\u306e\u90e8\u5206\u306f\u3069\u3046\u3057\u3066\u3082\u4e26\u5217\u5316\u306f\u3067\u304d\u306a\u3044\u3063\u307d\u3044\u3002\n\n\u8ffd\u8a182. 3\u9031\u9593\u30d0\u30c8\u30eb\u3057\u3066\u307f\u3066\u305d\u306e\u5f8c...\n\u6700\u7d42\u7684\u306b\u306f\u3053\u3093\u306a\u30b3\u30fc\u30c9\u306b\u3057\u307e\u3057\u305f\u3002\u3067\u3082OpenCV\u306e\u65b9\u304c\u3061\u3087\u3063\u3068\u3060\u3051\u65e9\u3044\u3002\u3002\u3002\u306e\u3067\u30ae\u30d6\u30a2\u30c3\u30d7\nvoid rgba2hsvx_neon(image_t *rgba, image_t *hsv) {\n  volatile unsigned char *src = (unsigned char *)rgba->data;\n  volatile unsigned char *dst = (unsigned char *)hsv->data;\n\n  __asm__ __volatile__(\n    \"           mov             r0, %[src]\\n\"\n    \"           pld             [r0]\\n\"\n\n    \"           mov             r1, %[dst]\\n\"\n    \"           mov             r7, %[size]\\n\"\n    \"           lsr             r7, r7, #5\\n\"           // size = size >> 5\n\n    \"           vmov.u32        d25, #255\\n\"             //d25 = 255.0f\n    \"           vcvt.f32.u32    d25, d25\\n\"\n\n    \"           vmov.u32        q15, #0xff\\n\"            //q15(d30, d31) = 0xFF\n    \"           vmov.u32        d29, #120\\n\"             //d29 = 120\n    \"           vmov.u32        d28, #240\\n\"             //d28 = 240\n\n    \"           vmov.u32        d27, #60\\n\"              //d27 = 60.0f\n\n    \"           vadd.u32        d15, d29, d28\\n\"         //d15 = 360.0f\n    \"           vcvt.f32.u32    d15, d15\\n\"\n\n    \"           vmov.u32        d14, #256\\n\"             //d14 = 0.71f\n    \"           vcvt.f32.u32    d14, d14\\n\"\n    \"           vdiv.f32        s28, s28, s30\\n\"\n    \"           vmov            s29, s28\\n\"\n\n    \"           vmov.u8         d23, #0xFF\\n\"\n\n\n    \"loop_hsv:\\n\"\n    \"           vld4.8          {d0-d3}, [r0]\\n\"         // r,g,b,a\n\n    //-----------------\n    // d4 = max\n    // d5 = delta\n    //-----------------\n    \"           vmin.u8         d5, d0, d1\\n\"            // min = MIN(r, g);\n    \"           vmin.u8         d5, d5, d2\\n\"            // min = MIN(b, min);\n\n    \"           vmax.u8         d22, d0, d1\\n\"           // max = MAX(r, g);\n    \"           vmax.u8         d22, d22, d2\\n\"          // max = MAX(b, max);\n    \"           vqsub.u8        d5, d22, d5\\n\"           // delta = max - min\n\n\n    //--------------------------------\n    // zero clear of the store space\n    //--------------------------------\n    \"           mov             r4, #4\\n\"\n    \"           vmov.u64        q10, #0\\n\"               // For the final result of H and S values\n    \"           vmov            d4, d22\\n\"\n\n    \"calc_s:\\n\"\n    //------------------------------------------------\n    // Shift the store space for H and S (d20, d21)\n    //------------------------------------------------\n    \"           vshl.u32        q10, #8\\n\"               // q10(d20,d21) = q10 << 8\n\n    //----------------------------------------\n    // Load values from d3(max), d4(delta)\n    //----------------------------------------\n    \"           vand.u32        q4, q2, q15\\n\"           // d8(max) = d4(max) & d30(#0xff), d9(delta) = d5(delta) & d31(#0xff)\n\n    //----------------\n    // calculate H\n    //----------------\n    \"           vsub.u64        d11, d11, d11\\n\"         // d11 = 0\n    \"           vmov.u32        d18, d31\\n\"              // d18 = d31(0xFF)\n\n    //--------------------------------\n    // if (red == max) {\n    //   op1 = green\n    //   op2 = blue\n    // }\n    //--------------------------------\n    \"           vand.u32        d17, d31, d0\\n\"          // d17 = red & 0xff\n    \"           vceq.u32        d7, d17, d8\\n\"           // d7 = red == max ? 0xFF : 0\n    \"           vsub.u32        d18, d18, d7\\n\"          // d18 = d18 - d7\n    \"           vand.u32        d7, d7, d31\\n\"           // d7 = d7 & 0xff\n    \"           vand.u32        d10, d7, d1\\n\"           // d10(op1) = d7 & green\n    \"           vand.u32        d12, d7, d2\\n\"           // d12(op2) = d7 & blue\n\n\n    //--------------------------------\n    // if (green == max) {\n    //   op1 = blue\n    //   op2 = red\n    //   offset = 120\n    // }\n    //--------------------------------\n    \"           vand.u32        d17, d31, d1\\n\"          // d17 = green & 0xff\n    \"           vceq.u32        d7, d17, d8\\n\"           // d7 = green == max ? 0xFF : 0\n    \"           vsub.u32        d18, d18, d7\\n\"          // d18 = d18 - d7\n    \"           vand.u32        d7, d7, d31\\n\"           // d7 = d7 & 0xff\n    \"           vand.u32        d7, d7, d18\\n\"           // d7 = d7 & d18\n    \"           vand.u32        d17, d7, d2\\n\"           // d17 = d7 & blue\n    \"           vorr.u32        d10, d10, d17\\n\"         // d10(op1) = d10 | d17\n    \"           vand.u32        d17, d7, d0\\n\"           // d17 = d7 & red\n    \"           vorr.u32        d12, d12, d17\\n\"         // d12(op2) = d12 | d17\n    \"           vand.u32        d11, d7, d29\\n\"          // d11(offset) = d7 & d29(#120)\n\n    //--------------------------------\n    // if (blue == max) {\n    //   op1 = red\n    //   op2 = green\n    //   offset = 240\n    // }\n    //--------------------------------\n    \"           vand.u32        d17, d31, d2\\n\"          // d17 = blue & 0xff\n    \"           vceq.u32        d7, d17, d8\\n\"           // d7 = blue == max ? 0xFF : 0\n    \"           vand.u32        d7, d7, d31\\n\"           // d7 = d7 & 0xff\n    \"           vand.u32        d7, d7, d18\\n\"           // d7 = d7 & d18\n    \"           vand.u32        d17, d7, d0\\n\"           // d17 = d7 & red\n    \"           vorr.u32        d10, d10, d17\\n\"         // d10(op1) = d10 | d19\n    \"           vand.u32        d17, d7, d1\\n\"           // d17 = d7 & green\n    \"           vorr.u32        d12, d12, d17\\n\"         // d12(op2) = d12 | d17\n    \"           vand.u32        d17, d7, d28\\n\"          // d17 = d7 & d28(#240)\n    \"           vorr.u32        d11, d11, d17\\n\"         // d11(offset) = d11 | d17\n\n\n    //--------------------------------\n    // h = ((op1 - op2) * 60) / delta\n    //--------------------------------\n    \"           vand.u32        d10, d10, d31\\n\"         // d10(op1) = d10 & d31(#0xFF)\n    \"           vand.u32        d12, d12, d31\\n\"         // d12(op2) = d12 & d31(#0xFF)\n    \"           vsub.s32        d10, d10, d12\\n\"         // d10 = d10(op1) - d11(op2)\n    \"           vmul.s32        d10, d10, d27\\n\"         // d10 = d10 * d27(#60)\n    \"           vcvt.f32.u32    q5, q5\\n\"                // unsigned int -> float\n    \"           vcvt.f32.u32    q4, q4\\n\"                // (d8, d9, d10, d11)\n    \"           vdiv.f32        s20, s20, s18\\n\"         // s20 = s20 / s18(delta)\n    \"           vdiv.f32        s21, s21, s19\\n\"         // s21 = s21 / s19(delta)\n    \"           vadd.f32        d10, d10, d11\\n\"         // d10 += d11(offset)\n\n    //-------------------------\n    // h += h < 0 ? 360.0f : 0\n    //-------------------------\n    \"           vclt.f32        d11, d10, #0\\n\"          // d11 = d10 < 0 ? 0xFF : 0\n    \"           vand.f32        d11, d15\\n\"              // d11 = d11 & d15(#360.0f)\n    \"           vadd.f32        d10, d11\\n\"              // d10 = d10 + d11\n    //---------------------------------------\n    // downscale H value from 0-359 to 0-255\n    //---------------------------------------\n    \"           vmul.f32        d10, d10, d14\\n\"         // d10 = d10 * 0.71\n\n    //------------------------\n    // s = delta * 255 / max\n    //------------------------\n    \"           vmul.f32        d11, d9, d25\\n\"          // d11 = d9 * d25(#255.0f)\n    \"           vdiv.f32        s22, s22, s16\\n\"         // s22 = s22 / s16(max)\n    \"           vdiv.f32        s23, s23, s17\\n\"         // s23 = s23 / s17(max)\n\n    \"           vcvt.u32.f32    q5, q5\\n\"                // float -> unsigned int (d10, d11)\n\n    \"           vorr.u64        q10, q5, q10\\n\"          // H = H | d10, S = S | d11\n\n    \"           vshr.u64        q0, q0, #8\\n\"            // q0(red, green) = q0 >> 8\n    \"           vshr.u64        d2, d2, #8\\n\"            // d2(blue) = q1 >> 8\n    \"           vshr.u64        q2, q2, #8\\n\"            // q2(delta, max) = q2 >> 8\n\n    \"           subs            r4, r4, #1\\n\"\n    \"           bne             calc_s\\n\"\n\n    \"           pldw            [r1]\\n\"\n    \"           vrev32.8        q10, q10\\n\"\n    \"           vst4.8          {q10-q11}, [r1]\\n\"       // r,g,b,a\n\n\n    \"           add             r0, r0, #32\\n\"\n    \"           add             r1, r1, #32\\n\"\n    \"           pld             [r0]\\n\"\n\n    \"           subs            r7, r7, #1\\n\"\n    \"           bne             loop_hsv\\n\"\n\n\n\n    :\n    : [src]\"r\"(src), [dst]\"r\"(dst), [size]\"r\"(rgba->size)\n    : \"memory\", \"cc\", \"r0\",  \"r1\", \"r4\", \"r5\", \"r6\", \"r7\"\n  );\n\n}\n\n# \u304d\u3063\u304b\u3051\n\n\u5199\u771f\u306e\u8272\u5206\u6790\u3092\u3059\u308b\u306e\u306b\u3001RGBA\u5f62\u5f0f\u306e\u753b\u50cf\u3092HSV\u5f62\u5f0f\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\u3044\u3064\u3082\u306fOpenCV(c++)\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u3082\u305d\u306e\u51e6\u7406\u304c\u9045\u3044\u3088\u3046\u306a\u306e\u3067\u3001ARM\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u306e\u52c9\u5f37\u3092\u517c\u306d\u3066\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\uff08\u3068\u3044\u3046\u304b\u3001\u30cd\u30c3\u30c8\u4e0a\u306b\u7121\u304b\u3063\u305f\u306e\u3067\u81ea\u5206\u3067\u4f5c\u3089\u3056\u308b\u3092\u5f97\u306a\u304b\u3063\u305f\uff09\n\n\u524d\u56de\u3001[c++\u3068\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u3067\u753b\u50cf\u3092\u53cd\u8ee2\u3055\u305b\u3066\u307f\u308b](http://qiita.com/wf9a5m75/items/a519d0f82fe1484179c5)\u3092\u3084\u3063\u305f\u306e\u3067\n\u3067\u304d\u308b\u3060\u308d\u3001\u3068\u304b\u601d\u3063\u305f\u3089\u3001\u7518\u304b\u3063\u305f\u3002\u3002\u3002\u3002\n\n\n# RGBA\u753b\u50cf\u3092HSV\u306b\u5909\u63db\u3059\u308b\u30b3\u30fc\u30c9(c++)\n\n[Google\u3067\u691c\u7d22](https://www.google.com/search?q=c%2B%2B+rgb+to+hsv&oq=c%2B%2B+rgb+to+hsv)\u3059\u308b\u3068\u3044\u304f\u3064\u304b\u3067\u3066\u304d\u307e\u3059\u304c\u3001\n\u4eca\u56de\u306f\u305d\u306e\u306a\u304b\u3067[Convert RGB to HSV and back with a micro controller](https://www.ruinelli.ch/rgb-to-hsv)\u306e\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u7406\u7531\u306f unsigned char\u578b\u3092\u4f7f\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e\u306b\u843d\u3068\u3057\u8fbc\u307f\u3084\u3059\u304b\u3063\u305f\u304b\u3089\u3002\n\n\u30b3\u30fc\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n\u6700\u5f8c\u306e\u90e8\u5206\u306e **0.71**\u3063\u3066\u6570\u5b57\u306f\u3001H\u306e\u5024\u306e\u7bc4\u56f2\u30920\u301c360\u304b\u3089\u30010\u301c256\u306b\u5909\u63db\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n(0.71 \u2252 256/360)\n\n```cpp\ntypedef struct {\n    unsigned char *data;\n    int width;\n    int height;\n    int bpp;\n    int size;\n} image_t;\n\n\nvoid rgba2hsvx_c(image_t *rgba, image_t *hsv) {\n  unsigned char *src = (unsigned char *)rgba->data;\n  unsigned char *dst = (unsigned char *)hsv->data;\n\n  unsigned char min, max, delta;\n  unsigned char r,g,b,a;\n  unsigned char s,v;\n  signed int h;\n\n  int x, y;\n\n  for (y = 0; y < rgba->height; y++) {\n    for (x = 0; x < rgba->width; x++) {\n      r = *src++;\n      g = *src++;\n      b = *src++;\n      a = *src++;\n\n      min = r < g ? r : g;\n      min = b < min ? b : min;\n\n      max = r > g ? r : g;\n      max = b > max ? b : max;\n\n      v = max;\n      delta = max - min;\n\n      if (!(max == 0 || delta == 0)) {\n\n        s = (int)(delta * 255) / max;\n\n        if (r == max) {\n          h = (60 * (g - b))  / delta;\n        } else {\n          if (g == max) {\n            h = 120 + ((60 * (b - r)) / delta);\n          } else {\n            h = 240 + ((60 * (r - g)) / delta);\n          }\n        }\n\n        if (h < 0)  {\n          h += 360;\n        }\n      } else {\n        h = 0;\n        s = 0;\n      }\n\n      *dst++ = (unsigned int)(h * 0.71);   // In real value range is 0-359, but for rgba image, down scale to 0-255\n      *dst++ = s;\n      *dst++ = v;\n      *dst++ = a;\n    }\n  }\n}\n```\n\n# \u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\n\n\u3081\u3061\u3083\u304f\u3061\u3083\u82e6\u52b4\u3057\u307e\u3057\u305f\u30025\u65e5\u9593\u3001\u8133\u307f\u305d\u4f7f\u7528\u7387120%\u3063\u3066\u611f\u3058\uff57\n\uff08ARM\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u59cb\u3081\u3066\u304b\u3089\u3001\u307e\u30602\u9031\u9593\u3067\u3059\u306e\u3067\uff09\n\n```cpp\nvoid rgba2hsvx_neon(image_t *rgba, image_t *hsv) {\n  unsigned char *src = (unsigned char *)rgba->data;\n  unsigned char *dst = (unsigned char *)hsv->data;\n\n  __asm__ __volatile__(\n\n    \"            vmov.i32       d0, #0\\n\"                    // d0 (s0, s1) = 0x0000000000000000\n    \n    \"            lsr            %[total], %[total], #5\\n\"    // %[size] = %[size] / 32 ; The number '32' means 4bytes * 8pixels\n    \n    \"            mov            r9, %[src]\\n\"\n    \"            mov            r10, %[dst]\\n\"\n    \n    \"            mov            r0, #60\\n\"\n    \"            vmov.u32       s31, r0\\n\"                   // (d15) s31 = 60\n    \"            vcvt.f32.u32   s31, s31\\n\"\n    \n    \"            mov            r0, #255\\n\"\n    \"            vmov.i32       s30, r0\\n\"                   // (d15) s30 = 255\n    \"            vcvt.f32.u32   s30, s30\\n\"\n    \n    \"            mov            r0, #256\\n\"\n    \"            vmov.s32       s29, r0\\n\"                   // (d14) s29 = 256\n    \"            vcvt.f32.u32   s29, s29\\n\"\n    \n    \"            mov            r0, #360\\n\"\n    \"            vmov.u32       s28, r0\\n\"                   // (d14) s28 = 360\n    \"            vcvt.f32.u32   s28, s28\\n\"\n    \n    \"            mov            r0, #120\\n\"\n    \"            vmov.s32       s27, r0\\n\"                   // (d13) s27 = 120\n    \"            vcvt.f32.u32   s27, s27\\n\"\n    \n    \"            mov            r0, #240\\n\"\n    \"            vmov.u32       s26, r0\\n\"                   // (d13) s26 = 240\n    \"            vcvt.f32.u32   s26, s26\\n\"\n    \n    \"loop_hsv:\\n\"\n    \"            pld            [r9, #256]\\n\"\n    \"            vld4.8         {d1, d2, d3, d4}, [r9]\\n\"    // Load elements from %[src] and store to each D registers:\n                                                             //  [RED]   d1 = [r7, r6, ... r0]\n                                                             //  [GREEN] d2 = [g7, g6, ... g0]\n                                                             //  [BLUE]  d3 = [b7, b6, ... b0]\n                                                             //  [ALPHA] d4 = [a7, a6, ... a0]\n    \n    \"            vmin.u8        d5, d1, d2\\n\"                // min = MIN(r, g);\n    \"            vmin.u8        d5, d5, d3\\n\"                // min = MIN(b, min);\n    \n    \"            vmax.u8        d6, d1, d2\\n\"                // max = MAX(r, g);\n    \"            vmax.u8        d6, d6, d3\\n\"                // max = MAX(b, max);\n    \n    \"            vqsub.u8       d7, d6, d5\\n\"                // delta = max - min\n    \n                                                             //if (!(max == 0 || delta == 0))\n    \"            vceq.u8        d4, d7, d0\\n\"                // d4 = max == 0 ? 0xFF : 0\n    \"            vceq.u8        d8, d6, d0\\n\"                // d8 = delta == 0 ? 0xFF : 0\n    \"            vorr.u8        d8, d4, d8\\n\"                // d8 = d4(0 or 0xFF) | d8(0 or 0xFF)\n    \n    \n    \"            vst4.8         {d5, d6, d7, d8}, [r10]\\n\"   // (min) : (max) : (delta) : (flag)\n    \n    \"            mov            r0, #0\\n\"                    // H = 0\n    \"            mov            r1, #0\\n\"                    // S = 0\n    \"            mov            r2, #0\\n\"                    // V = 0\n    \"            mov            r8, #8\\n\"                    // r8 (i) = 8\n    \n    //------------\n    //   if (!(max == 0 || delta == 0)) {\n    //------------\n    \"calc_hsv:\\n\"\n    \"            pld            [r10, #32]\\n\"                // Preload 32bit data from the main memory\n    \"            ldrb           r3, [r10]\\n\"                 // flag = *r10++\n    \n    \"            cmp            r3, #0xFF\\n\"                 // if (flag == 0xff)\n    \"            beq            calc_hsv_end\\n\"              //    goto calc_s\n    //------------\n    //       s = (int)(delta * 255) / max;\n    //------------\n    \"calc_s:\\n\"\n    \n    \"            pld            [r9, #32]\\n\"                // Preload 256bit data from the main memory\n    \"            ldrb           r5, [r9]\\n\"                  // red(r5) = *r9\n    \"            ldrb           r6, [r9, #1]\\n\"              // green(r6) = *(r9 + 1)\n    \"            ldrb           r3, [r9, #2]\\n\"              // blue(r3) = *(r9 + 2)\n    \n    \"            vmov.u32       s2, r5\\n\"                    // s2 = red\n    \"            vmov.u32       s3, r6\\n\"                    // s3 = green\n    \"            vmov.u32       s4, r3\\n\"                    // s4 = blue\n    \"            vcvt.f32.u32   s2, s2\\n\"                    // convert unsigned int to floating point\n    \"            vcvt.f32.u32   s3, s3\\n\"\n    \"            vcvt.f32.u32   s4, s4\\n\"\n    \n    \"            ldrb           r2, [r10, #1]\\n\"             // max(V) = *(r10 + 1)\n    \"            ldrb           r3, [r10, #2]\\n\"             // delta = *(r10 + 2)\n    \"            vmov.u32       s5, r3\\n\"                    // s5 = delta\n    \"            vmov.u32       s6, r2\\n\"                    // s6 = max\n    \"            vcvt.f32.u32   s5, s5\\n\"                    // unsigned int 32 bits -> float 32 bits\n    \"            vcvt.f32.u32   s6, s6\\n\"\n    \n    \"            vmul.f32       s7, s5, s30\\n\"               // s7 = s5(delta) * s30(#255)\n    \"            vdiv.f32       s7, s7, s6\\n\"                // s7 = s7 / s6(max)\n    \"            vcvt.u32.f32   s7, s7\\n\"                    // float 32 bits -> unsigned int 32 bits\n    \"            vmov           r1, s7\\n\"                    // r1(S) = s7\n    \n    \n    //---------------\n    //    s6(offset) = 0\n    //    if (r == max) {\n    //      s7 = (g-b)\n    //    } else {\n    //      if (g == max) {\n    //        s7 = (b - r)\n    //        s6 = 120\n    //      } else {\n    //        s7 = (r - g)\n    //        s6 = 240\n    //      }\n    //   }\n    //   s7 = s7 * 60\n    //   s7 = s7 / delta\n    //   s7 += offset\n    //   H = s7 < 0 ? s7 + 360 : s7\n    //---------------\n    \"            cmp            r2, r5\\n\"                    // if ( r2(max) == r5(red) )\n    \"            beq            r_equal_max\\n\"               //   goto r_equal_max\n    \"            cmp            r2, r6\\n\"                    // if ( r2(max) == r6(green) )\n    \"            beq            g_equal_max\\n\"               //   goto g_equal_max\n    \n    \n    \"b_equal_max:\\n\"\n    \"            vsub.f32       s7, s2, s3\\n\"                // s7 = s2(red) - s3(green)\n    \"            vmov           s6, s26\\n\"                   // s6 = s26(#240)\n    \"            bal            calc_h\\n\"                    // goto calc_h\n    \n    \"g_equal_max:\\n\"\n    \"            vsub.f32       s7, s4, s2\\n\"                // s7 = s4(blue) - s2(red)\n    \"            vmov           s6, s27\\n\"                   // s6 = s27(#120)\n    \"            bal            calc_h\\n\"                    // goto calc_h\n    \n    \"r_equal_max:\\n\"\n    \"            vmov           s6, s0\\n\"                    // s6 = s0(#0)\n    \"            vsub.f32       s7, s3, s4\\n\"                // s7 = s3(green) - s4(blue)\n    \n    \n    \"calc_h:\\n\"\n    \"            vmul.f32       s7, s7, s31\\n\"               // s7 = s7 * s31(#60)\n    \"            vdiv.f32       s7, s7, s5\\n\"                // s7 = s7 / s5(delta)\n    \"            vadd.f32       s7, s7, s6\\n\"                // s7 += s6(offset)\n    \n    \"            vaddlt.f32     s7, s28\\n\"                   // s7 = s7 < 0 ? s7 + s28(#360) : 0\n    \"            vmul.f32       s7, s7, s29\\n\"               // s7 = s7 * s29(#256)\n    \"            vdiv.f32       s7, s7, s28\\n\"               // s7 = s7 / s28(#360)\n    \"            vcvt.u32.f32   s7, s7\\n\"                    // float 32bit -> unsigned int 32bit\n    \"            vmov           r0, s7\\n\"                    // r0(H) = s7\n    \n    \"calc_hsv_end:\\n\"\n    \"            mov            r3, #0xFF\\n\"\n    \"            strb           r0, [r10]\\n\"                 // H\n    \"            strb           r1, [r10, #1]\\n\"             // S\n    \"            strb           r2, [r10, #2]\\n\"             // V\n    \"            strb           r3, [r10, #3]\\n\"             // A = 0xFF\n    \"            add            r9, r9, #4\\n\"\n    \"            add            r10, r10, #4\\n\"\n    \n    \n    \"            subs           r8, r8, #1\\n\"                // r8--\n    \"            bne            calc_hsv\\n\"                  // if (r8 != 0) goto calc_hsv\n    \"            subs           %[total], %[total], #1\\n\"    // %[total]--\n    \"            bne            loop_hsv\\n\"                  // if (%[total] != 0) goto loop_hsv\n    \n\n\n    :\n    : [src]\"r\"(src) , [dst]\"r\"(dst), [total]\"r\"(rgba->size)\n    : \"q0\", \"q1\", \"q2\", \"q3\", \"r0\",\n      \"r1\", \"r2\", \"r3\", \"r5\", \"r6\", \"r4\", \"r8\", \"r9\", \"r10\",\n      \"s0\", \"s1\", \"s2\", \"s3\", \"s4\", \"s5\", \"s6\", \"s7\", \"s26\", \"s27\",\n      \"s28\", \"s29\", \"s30\", \"s31\", \"memory\", \"cc\"\n  );\n\n}\n```\n\n# \u7d50\u679c\u3069\u3046\u306a\u3063\u305f\n\n1920x1080\u306e\u753b\u50cf\u3092RK3288 CPU\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u305f\u3076\u3093\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e1\u30e2\u30ea\u3068\u304b\u306e\u95a2\u4fc2\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u4ed6\u306e\u30c7\u30d0\u30a4\u30b9\u3067\u30c6\u30b9\u30c8\u3059\u308b\u3068\u7d50\u679c\u304c\u5909\u308f\u308a\u307e\u3059\u3002\n\n\u65b9\u6cd5 | \u6642\u9593\n--- | ---\nOpenCV(3.1) | \u7d0484ms\nc++ (-O3) | \u7d04193ms\nassembly (neon) | \u7d0480ms\n\n\u3046\u30fc\u3093\u3001\u82e6\u52b4\u3057\u305f\u5272\u306b\u306f\u5927\u5dee\u304c\u306a\u3044\u3002\n\n# \u30d0\u30b0\uff1f\n\n\u3069\u3046\u3086\u3046\u308f\u3051\u304b\u3001OpenCV\u3067HSV\u306b\u5909\u63db\u3057\u305f\u3068\u304d\u3068\u51fa\u529b\u3055\u308c\u308b\u753b\u50cf\u304c\u5fae\u5999\u306b\u9055\u3046\u3093\u3067\u3059\u3088\u306d\u3002\n\u3067\u3082c++\u3068\u306f\u540c\u3058\u306b\u306a\u308b\u306e\u3067\u3001**\uff08\u3068\u308a\u3042\u3048\u305a\uff09\u826f\u3057**\u3001\u3068\u306f\u3057\u3066\u3044\u307e\u3059\u304c\u3002\n\n\u5143\u753b\u50cf\u306f\u3053\u308c\u3002\u4f7f\u7528\u3057\u3066\u3044\u308b\u30c7\u30d0\u30a4\u30b9\u306e\u4e2d\u306b\u30b5\u30f3\u30d7\u30eb\u753b\u50cf\u3068\u3057\u3066\u3042\u3063\u305f\u3082\u306e\u30921920x1080\u306b\u30ea\u30b5\u30a4\u30ba\u3057\u3066\u4f7f\u7528\u3002\n\n<a href=\"https://qiita-image-store.s3.amazonaws.com/0/39529/9b1e9199-65a0-0b5e-9759-b87b6167bca8.jpeg\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/39529/9b1e9199-65a0-0b5e-9759-b87b6167bca8.jpeg\" width=\"400\"></a>\n\n\u203b _(\u753b\u50cf\u3092\u30af\u30ea\u30c3\u30af\u3059\u308c\u3070\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059)_\n\nOpenCV\u3067\u5909\u63db\u3059\u308b\u3068\u3001\u3053\u3046\u306a\u308a\u307e\u3059\u3002\u306a\u3093\u304b\u30b7\u30e5\u30fc\u30eb...\n<a href=\"https://qiita-image-store.s3.amazonaws.com/0/39529/89ea8c90-4ad4-7c08-df1a-8d2bc9d51dde.png\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/39529/89ea8c90-4ad4-7c08-df1a-8d2bc9d51dde.png\" width=\"400\"></a>\n\n\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u3067\u5909\u63db\u3059\u308b\u3068\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n<a href=\"https://qiita-image-store.s3.amazonaws.com/0/39529/0ce21037-c00c-c4fc-cffd-2c6ca0a7ee27.png\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/39529/0ce21037-c00c-c4fc-cffd-2c6ca0a7ee27.png\" width=\"400\"></a>\n\n\u3069\u3046\u3082\u9ce5\u306e\u80f8\u306e\u3042\u305f\u308a\u304c\u7d50\u679c\u304c\u9055\u3046\u3093\u3067\u3059\u3088\u306d\u3002\n\u7406\u7531\u306f\u3044\u307e\u306e\u3068\u3053\u308d\u4e0d\u660e\u3067\u3059\u3002\n\n##VFP\u30ec\u30b8\u30b9\u30bf\u3001D\u30ec\u30b8\u30b9\u30bf\u3001Q\u30ec\u30b8\u30b9\u30bf\n\n\u3084\u3063\u3066\u3044\u308b\u9014\u4e2d\u3067\u30cf\u30de\u3063\u305f\u306e\u304c\u3001\u30ec\u30b8\u30b9\u30bf\u306e\u30de\u30c3\u30d7\u3002\n`s0 = 360`\u3068\u30b3\u30fc\u30c9\u306e\u524d\u65b9\u3067\u5b9a\u7fa9\u3057\u3066\u3001\u5f8c\u534a\u306b\u306a\u308b\u3068\u305c\u3093\u305c\u3093\u9055\u3046\u5024\u304c\u5165\u3063\u3066\u3044\u3066\u3001\u6700\u521d\u306f\u8a08\u7b97\u304c\u5168\u7136\u5408\u308f\u306a\u3044\u8b0e\u306e\u73fe\u8c61\u304c\u767a\u751f\u3057\u3066\u3001\u968f\u5206\u60a9\u307e\u3055\u308c\u307e\u3057\u305f\u3002\n\n\u8abf\u3079\u305f\u3068\u3053\u308d\u3001VFP\u30ec\u30b8\u30b9\u30bf\u306fD/Q\u30ec\u30b8\u30b9\u30bf\u3068\u540c\u3058\u7a7a\u9593\u306a\u306e\u3060\u3068\u3002\n\u306a\u306c\u3045\uff01\uff01\n\n\u305d\u3093\u306a\u3053\u3068\u306f\u3001[AndroidNDK\u30cd\u30a4\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7b2c2\u7248](http://amzn.to/2iCXjXf)\u306b\u306f\u66f8\u3044\u3066\u306a\u304b\u3063\u305f\uff01\n\n[\u516c\u5f0f\u30b5\u30a4\u30c8\u306e\u89e3\u8aac](http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0204gj/Chdidbba.html)\u306b\u3088\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\n>VFP \u30b3\u30d7\u30ed\u30bb\u30c3\u30b5\u306b\u306f\u3001s0 \u301c s31 \u306e 32 \u672c\u306e\u5358\u7cbe\u5ea6\u30ec\u30b8\u30b9\u30bf\u304c\u3042\u308a\u307e\u3059\u3002\u5404\u30ec\u30b8\u30b9\u30bf\u306f\u3001\u5358\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u5024\u307e\u305f\u306f 32 \u30d3\u30c3\u30c8\u6574\u6570\u3092\u4fdd\u6301\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u3089 32 \u672c\u306e\u30ec\u30b8\u30b9\u30bf\u306f\u3001d0 \u301c d15 \u306e 16 \u672c\u306e\u500d\u7cbe\u5ea6\u30ec\u30b8\u30b9\u30bf\u3068\u3057\u3066\u3082\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002dn \u306f\u3001s(2n) \u304a\u3088\u3073 s(2n+1) \u3068\u540c\u3058\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\u56f3\u89e3\u3059\u308b\u3068\u3001\u3053\u3046\u3089\u3057\u3044\u3002\n\n![registers.png](https://qiita-image-store.s3.amazonaws.com/0/39529/55cf56e7-6bec-31d3-a1b4-5aca040bf741.png)\n\n\n\u3064\u307e\u308a\u3001**d0\u30ec\u30b8\u30b9\u30bf\u306b\u5024\u3092\u4fdd\u5b58\u3057\u3066\u3042\u308b\u306e\u306b\u3001s3\u30ec\u30b8\u30b9\u30bf\u306b\u5024\u3092\u3046\u3063\u304b\u308a\u4fdd\u5b58\u3059\u308b\u3068\u3001d0\u30ec\u30b8\u30b9\u30bf\u306f\u5f71\u97ff\u3092\u53d7\u3051\u308b**\u306e\u3067\u3059\u3002\n\n\u3053\u308c\u3092\u5ff5\u982d\u306b\u3044\u308c\u3066\u3001\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u4e0b\u3055\u3044\u3002\n\n##\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\n\n\u5c06\u6765\u306e\u81ea\u5206\u306e\u305f\u3081\u306b\u3001\u6b8b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u307e\u3041\u30b3\u30e1\u30f3\u30c8\u3092\u8aad\u3081\u3070\u308f\u304b\u308b\u6c17\u304c\u3059\u308b\u3051\u3069\u3002\n\n### \u5b9a\u6570\u306e\u5ba3\u8a00\n\n\u30b3\u30fc\u30c9\u4e2d\u3067\u8a08\u7b97\u306e\u305f\u3081\u306e\u5b9a\u6570\u3092s\u30ec\u30b8\u30b9\u30bf\u306b\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u3046\u3063\u304b\u308a\u4e0a\u66f8\u304d\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u5b9a\u6570\u3092s\u30ec\u30b8\u30b9\u30bf\u306e\u5f8c\u308d\u306e\u65b9\u306b\u5165\u308c\u3066\u304a\u304d\u307e\u3059\u3002\n\n![step1.png](https://qiita-image-store.s3.amazonaws.com/0/39529/e65431d8-faf8-83b0-9def-aced894179b9.png)\n\n\n### min, max, delta\u306e\u8a08\u7b97\n\nNEON\u547d\u4ee4\u3092\u4f7f\u3063\u3066\u30018\u30d4\u30af\u30bb\u30eb\u5206\u3092\u307e\u3068\u3081\u3066\u8a08\u7b97\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n![step2.png](https://qiita-image-store.s3.amazonaws.com/0/39529/09bfcc37-a371-f760-201e-a612997477fa.png)\n\n### max == 0 && delta == 0 \u306e\u5224\u5b9a\n\n2\u3064\u306e\u5024\u3092\u6bd4\u8f03\u3059\u308bif\u6587\u306f\u9762\u5012\u3060\u3063\u305f\u306e\u3067\u3001NEON\u547d\u4ee4\u3092\u4f7f\u3063\u3066\u30018\u30d4\u30af\u30bb\u30eb\u5206\u3092\u307e\u3068\u3081\u3066\u5224\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n![step3.png](https://qiita-image-store.s3.amazonaws.com/0/39529/2d3848aa-3bc2-afb0-41d9-1fd4282d91c6.png)\n\n\n### \u8a08\u7b97\u7d50\u679c\u3092\u4e00\u6642\u4fdd\u5b58\n\n\u305d\u3057\u3066\u3053\u308c\u3089\u306e\u5024\u3092 \u66f8\u304d\u51fa\u3057\u9818\u57df\u306e`%[dst] (r10)`\u306b\u4e00\u6642\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\uff08\u203b\u30e1\u30a4\u30f3\u30e1\u30e2\u30ea\u3092\u4f7f\u308f\u306a\u304b\u3063\u305f\u3089\u3001\u3082\u3063\u3068\u65e9\u304f\u306a\u308b\u304b\u3082...\uff09\n\n\u3053\u306e\u6bb5\u968e\u3067\u30018\u30d4\u30af\u30bb\u30eb\u5206\u306e min, max(V), delta, flag\u304c\u8a08\u7b97\u3067\u304d\u307e\u3057\u305f\u3002\n\n![step4.png](https://qiita-image-store.s3.amazonaws.com/0/39529/98568a60-c637-6c82-d9c1-f8129f15d907.png)\n\n### S\u306e\u8a08\u7b97\n\n\u66f8\u304d\u51fa\u3057\u9818\u57df\u306b\u4fdd\u5b58\u3057\u305f1\u30d4\u30af\u30bb\u30eb\u5206\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u51fa\u3057\u3066\u30011\u30d4\u30af\u30bb\u30eb\u305a\u3064\u51e6\u7406\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n(* \u30db\u30f3\u30c8\u306f\u3053\u308c\u3082\u4e26\u5217\u5316\u3057\u305f\u3044)\n\nHSV\u306eS\u306e\u8a08\u7b97\u306f\u3053\u306e\u90e8\u5206\u3067\u3059\u3002\nc++\u306b\u66f8\u3044\u3066\u3042\u308b\u8a08\u7b97\u3092VFP\u3092\u4f7f\u3063\u3066\u8a08\u7b97\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\n```cpp\n//------------\n//       s = (int)(delta * 255) / max;\n//------------\n\"calc_s:\\n\"\n\n\"            pld            [r9, #256]\\n\"                // Preload 256bit data from the main memory\n\"            ldrb           r5, [r9]\\n\"                  // red(r5) = *r9\n\"            ldrb           r6, [r9, #1]\\n\"              // green(r6) = *(r9 + 1)\n\"            ldrb           r7, [r9, #2]\\n\"              // blue(r7) = *(r9 + 2)\n\n\"            vmov.u32       s2, r5\\n\"                    // s2 = red\n\"            vmov.u32       s3, r6\\n\"                    // s3 = green\n\"            vmov.u32       s4, r7\\n\"                    // s4 = blue\n\"            vcvt.f32.u32   s2, s2\\n\"                    // convert unsigned int to floating point\n\"            vcvt.f32.u32   s3, s3\\n\"\n\"            vcvt.f32.u32   s4, s4\\n\"\n\n\"            ldrb           r2, [r10, #1]\\n\"             // max(V) = *r11++\n\"            ldrb           r3, [r10, #2]\\n\"             // delta = *r11++\n\"            vmov.u32       s5, r3\\n\"                    // s5 = delta\n\"            vmov.u32       s6, r2\\n\"                    // s6 = max\n\"            vcvt.f32.u32   s5, s5\\n\"                    // unsigned int 32 bits -> float 32 bits\n\"            vcvt.f32.u32   s6, s6\\n\"\n\n\"            vmul.f32       s7, s5, s30\\n\"               // s7 = s5(delta) * s30(#255)\n\"            vdiv.f32       s7, s7, s6\\n\"                // s7 = s7 / s6(max)\n\"            vcvt.u32.f32   s7, s7\\n\"                    // float 32 bits -> unsigned int 32 bits\n\"            vmov           r1, s7\\n\"                    // r1(S) = s7\n```\n\n\n### H\u306e\u8a08\u7b97\n\nHSV\u306eH\u306e\u8a08\u7b97\u306f\u3053\u306e\u90e8\u5206\u3067\u3059\u3002\n(* \u30db\u30f3\u30c8\u306f\u3053\u308c\u3082\u4e26\u5217\u5316\u3057\u305f\u3044)\n\n```cpp\n//---------------\n//    s6(offset) = 0\n//    if (r == max) {\n//      s7 = (g-b)\n//    } else {\n//      if (g == max) {\n//        s7 = (b - r)\n//        s6 = 120\n//      } else {\n//        s7 = (r - g)\n//        s6 = 240\n//      }\n//   }\n//   s7 = s7 * 60\n//   s7 = s7 / delta\n//   s7 += offset\n//   H = s7 < 0 ? s7 + 360 : s7\n//---------------\n\"            cmp            r2, r5\\n\"                    // if ( r2(max) == r5(red) )\n\"            beq            r_equal_max\\n\"               //   goto r_equal_max\n\"            cmp            r2, r6\\n\"                    // if ( r2(max) == r6(green) )\n\"            beq            g_equal_max\\n\"               //   goto g_equal_max\n\n\n\"b_equal_max:\\n\"\n\"            vsub.f32       s7, s2, s3\\n\"                // s7 = s2(red) - s3(green)\n\"            vmov           s6, s26\\n\"                   // s6 = s26(#240)\n\"            bal            calc_h\\n\"                    // goto calc_h\n\n\"g_equal_max:\\n\"\n\"            vsub.f32       s7, s4, s2\\n\"                // s7 = s4(blue) - s2(red)\n\"            vmov           s6, s27\\n\"                   // s6 = s27(#120)\n\"            bal            calc_h\\n\"                    // goto calc_h\n\n\"r_equal_max:\\n\"\n\"            vmov           s6, s0\\n\"                    // s6 = s0(#0)\n\"            vsub.f32       s7, s3, s4\\n\"                // s7 = s3(green) - s4(blue)\n\n\n\"calc_h:\\n\"\n\"            vmul.f32       s7, s7, s31\\n\"               // s7 = s7 * s31(#60)\n\"            vdiv.f32       s7, s7, s5\\n\"                // s7 = s7 / s5(delta)\n\"            vadd.f32       s7, s7, s6\\n\"                // s7 += s6(offset)\n\n\"            vaddlt.f32     s7, s28\\n\"                   // s7 = s7 < 0 ? s7 + s28(#360) : 0\n\"            vmul.f32       s7, s7, s29\\n\"               // s7 = s7 * s29(#256)\n\"            vdiv.f32       s7, s7, s28\\n\"               // s7 = s7 / s28(#360)\n\"            vcvt.u32.f32   s7, s7\\n\"                    // float 32bit -> unsigned int 32bit\n\"            vmov           r0, s7\\n\"                    // r0(H) = s7\n```\n\n### \u6700\u5f8c\u306b\u4fdd\u5b58\n\n\u3042\u3068\u306f\u66f8\u304d\u51fa\u3057\u9818\u57df\u306b\u4fdd\u5b58\u3057\u3066\u3001\u6b21\u306e8\u30d4\u30af\u30bb\u30eb\u306e\u51e6\u7406\u306b\u79fb\u308a\u307e\u3059\u3002\n\n```cpp\n\"calc_hsv_end:\\n\"\n\"            mov            r3, #0xFF\\n\"\n\"            strb           r0, [r10]\\n\"                 // H\n\"            strb           r1, [r10, #1]\\n\"             // S\n\"            strb           r2, [r10, #2]\\n\"             // V\n\"            strb           r3, [r10, #3]\\n\"             // A = 0xFF\n\"            add            r9, r9, #4\\n\"\n\"            add            r10, r10, #4\\n\"\n\n\n\"            subs           r8, r8, #1\\n\"                // r8--\n\"            bne            calc_hsv\\n\"                  // if (r8 != 0) goto calc_hsv\n\"            subs           %[total], %[total], #1\\n\"                // sub--\n\"            bne            loop_hsv\\n\"                  // if (r11 != 0) goto calc_hsv\n```\n\n# \u307e\u3068\u3081\n\n\u8a18\u4e8b\u3092\u66f8\u304f\u306e\u306b\u75b2\u308c\u305f\u306e\u3067\u3001\u4e00\u65e6\u307e\u3068\u3081\u307e\u3059\u3002\n\n\u3053\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306e\u306b\u30015\u65e5\u9593\u30d5\u30eb\u3067\u4f7f\u3044\u307e\u3057\u305f\u306d\u3002\n\u671d\u3082\u663c\u3082\u591c\u3082\u3001\u5bdd\u3066\u3044\u308b\u9593\u3067\u3055\u3048\u3082\u3046\u306a\u3055\u308c\u306a\u304c\u3089\u3001\u8003\u3048\u3066\u307e\u3057\u305f\u3002\n\n\u3067\u3001**\u7d50\u679c\u304c\u3001OpenCV\u3068\u5bfe\u3057\u3066\u5909\u308f\u3089\u306a\u3044\uff01\uff01\uff01\uff01**  ... orz\n\n\u3067\u3082S\u306e\u8a08\u7b97\u3092\u4e26\u5217\u5316\u3067\u304d\u308c\u3070\u3001\u305f\u3076\u3093\u65e9\u304f\u306a\u308b\u306f\u305a\u3002\u3068\u601d\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u8ab0\u304b\u30d8\u30eb\u30d7\u3057\u3066\u304f\u3060\u3055\u3044\n\n# \u8ffd\u8a181. S\u306e\u8a08\u7b97\u306f\u4e26\u5217\u5316\u3067\u304d\u306a\u3044\uff08\u305f\u3076\u3093\uff09\n\n[ARM32\u30d3\u30c3\u30c8CPU\u306e\u5834\u5408\u3001\u9664\u7b97\u3092\u64ec\u4f3c\u7684\u306b\u884c\u3063\u3066\u3044\u308b](http://atkg.hatenablog.com/entry/2016/11/26/205019)\u3089\u3057\u304f\u3001[\u8a08\u7b97\u306b32\u30d3\u30c3\u30c8\u5e45\u3092\u8981\u3057](http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0204ij/CIHCDBIG.html)\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u4e00\u56de\u306e\u547d\u4ee4\u3067\u4e00\u3064\u306e\u5024\u3057\u304b\u8a08\u7b97\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u9664\u7b97\u306e\u90e8\u5206\u306f\u3069\u3046\u3057\u3066\u3082\u4e26\u5217\u5316\u306f\u3067\u304d\u306a\u3044\u3063\u307d\u3044\u3002\n\n# \u8ffd\u8a182. 3\u9031\u9593\u30d0\u30c8\u30eb\u3057\u3066\u307f\u3066\u305d\u306e\u5f8c...\n\n\u6700\u7d42\u7684\u306b\u306f\u3053\u3093\u306a\u30b3\u30fc\u30c9\u306b\u3057\u307e\u3057\u305f\u3002\u3067\u3082OpenCV\u306e\u65b9\u304c\u3061\u3087\u3063\u3068\u3060\u3051\u65e9\u3044\u3002\u3002\u3002\u306e\u3067\u30ae\u30d6\u30a2\u30c3\u30d7\n\n```cpp\nvoid rgba2hsvx_neon(image_t *rgba, image_t *hsv) {\n  volatile unsigned char *src = (unsigned char *)rgba->data;\n  volatile unsigned char *dst = (unsigned char *)hsv->data;\n\n  __asm__ __volatile__(\n    \"           mov             r0, %[src]\\n\"\n    \"           pld             [r0]\\n\"\n\n    \"           mov             r1, %[dst]\\n\"\n    \"           mov             r7, %[size]\\n\"\n    \"           lsr             r7, r7, #5\\n\"           // size = size >> 5\n\n    \"           vmov.u32        d25, #255\\n\"             //d25 = 255.0f\n    \"           vcvt.f32.u32    d25, d25\\n\"\n\n    \"           vmov.u32        q15, #0xff\\n\"            //q15(d30, d31) = 0xFF\n    \"           vmov.u32        d29, #120\\n\"             //d29 = 120\n    \"           vmov.u32        d28, #240\\n\"             //d28 = 240\n\n    \"           vmov.u32        d27, #60\\n\"              //d27 = 60.0f\n\n    \"           vadd.u32        d15, d29, d28\\n\"         //d15 = 360.0f\n    \"           vcvt.f32.u32    d15, d15\\n\"\n\n    \"           vmov.u32        d14, #256\\n\"             //d14 = 0.71f\n    \"           vcvt.f32.u32    d14, d14\\n\"\n    \"           vdiv.f32        s28, s28, s30\\n\"\n    \"           vmov            s29, s28\\n\"\n\n    \"           vmov.u8         d23, #0xFF\\n\"\n\n\n    \"loop_hsv:\\n\"\n    \"           vld4.8          {d0-d3}, [r0]\\n\"         // r,g,b,a\n\n    //-----------------\n    // d4 = max\n    // d5 = delta\n    //-----------------\n    \"           vmin.u8         d5, d0, d1\\n\"            // min = MIN(r, g);\n    \"           vmin.u8         d5, d5, d2\\n\"            // min = MIN(b, min);\n\n    \"           vmax.u8         d22, d0, d1\\n\"           // max = MAX(r, g);\n    \"           vmax.u8         d22, d22, d2\\n\"          // max = MAX(b, max);\n    \"           vqsub.u8        d5, d22, d5\\n\"           // delta = max - min\n\n\n    //--------------------------------\n    // zero clear of the store space\n    //--------------------------------\n    \"           mov             r4, #4\\n\"\n    \"           vmov.u64        q10, #0\\n\"               // For the final result of H and S values\n    \"           vmov            d4, d22\\n\"\n\n    \"calc_s:\\n\"\n    //------------------------------------------------\n    // Shift the store space for H and S (d20, d21)\n    //------------------------------------------------\n    \"           vshl.u32        q10, #8\\n\"               // q10(d20,d21) = q10 << 8\n\n    //----------------------------------------\n    // Load values from d3(max), d4(delta)\n    //----------------------------------------\n    \"           vand.u32        q4, q2, q15\\n\"           // d8(max) = d4(max) & d30(#0xff), d9(delta) = d5(delta) & d31(#0xff)\n\n    //----------------\n    // calculate H\n    //----------------\n    \"           vsub.u64        d11, d11, d11\\n\"         // d11 = 0\n    \"           vmov.u32        d18, d31\\n\"              // d18 = d31(0xFF)\n\n    //--------------------------------\n    // if (red == max) {\n    //   op1 = green\n    //   op2 = blue\n    // }\n    //--------------------------------\n    \"           vand.u32        d17, d31, d0\\n\"          // d17 = red & 0xff\n    \"           vceq.u32        d7, d17, d8\\n\"           // d7 = red == max ? 0xFF : 0\n    \"           vsub.u32        d18, d18, d7\\n\"          // d18 = d18 - d7\n    \"           vand.u32        d7, d7, d31\\n\"           // d7 = d7 & 0xff\n    \"           vand.u32        d10, d7, d1\\n\"           // d10(op1) = d7 & green\n    \"           vand.u32        d12, d7, d2\\n\"           // d12(op2) = d7 & blue\n\n\n    //--------------------------------\n    // if (green == max) {\n    //   op1 = blue\n    //   op2 = red\n    //   offset = 120\n    // }\n    //--------------------------------\n    \"           vand.u32        d17, d31, d1\\n\"          // d17 = green & 0xff\n    \"           vceq.u32        d7, d17, d8\\n\"           // d7 = green == max ? 0xFF : 0\n    \"           vsub.u32        d18, d18, d7\\n\"          // d18 = d18 - d7\n    \"           vand.u32        d7, d7, d31\\n\"           // d7 = d7 & 0xff\n    \"           vand.u32        d7, d7, d18\\n\"           // d7 = d7 & d18\n    \"           vand.u32        d17, d7, d2\\n\"           // d17 = d7 & blue\n    \"           vorr.u32        d10, d10, d17\\n\"         // d10(op1) = d10 | d17\n    \"           vand.u32        d17, d7, d0\\n\"           // d17 = d7 & red\n    \"           vorr.u32        d12, d12, d17\\n\"         // d12(op2) = d12 | d17\n    \"           vand.u32        d11, d7, d29\\n\"          // d11(offset) = d7 & d29(#120)\n\n    //--------------------------------\n    // if (blue == max) {\n    //   op1 = red\n    //   op2 = green\n    //   offset = 240\n    // }\n    //--------------------------------\n    \"           vand.u32        d17, d31, d2\\n\"          // d17 = blue & 0xff\n    \"           vceq.u32        d7, d17, d8\\n\"           // d7 = blue == max ? 0xFF : 0\n    \"           vand.u32        d7, d7, d31\\n\"           // d7 = d7 & 0xff\n    \"           vand.u32        d7, d7, d18\\n\"           // d7 = d7 & d18\n    \"           vand.u32        d17, d7, d0\\n\"           // d17 = d7 & red\n    \"           vorr.u32        d10, d10, d17\\n\"         // d10(op1) = d10 | d19\n    \"           vand.u32        d17, d7, d1\\n\"           // d17 = d7 & green\n    \"           vorr.u32        d12, d12, d17\\n\"         // d12(op2) = d12 | d17\n    \"           vand.u32        d17, d7, d28\\n\"          // d17 = d7 & d28(#240)\n    \"           vorr.u32        d11, d11, d17\\n\"         // d11(offset) = d11 | d17\n\n\n    //--------------------------------\n    // h = ((op1 - op2) * 60) / delta\n    //--------------------------------\n    \"           vand.u32        d10, d10, d31\\n\"         // d10(op1) = d10 & d31(#0xFF)\n    \"           vand.u32        d12, d12, d31\\n\"         // d12(op2) = d12 & d31(#0xFF)\n    \"           vsub.s32        d10, d10, d12\\n\"         // d10 = d10(op1) - d11(op2)\n    \"           vmul.s32        d10, d10, d27\\n\"         // d10 = d10 * d27(#60)\n    \"           vcvt.f32.u32    q5, q5\\n\"                // unsigned int -> float\n    \"           vcvt.f32.u32    q4, q4\\n\"                // (d8, d9, d10, d11)\n    \"           vdiv.f32        s20, s20, s18\\n\"         // s20 = s20 / s18(delta)\n    \"           vdiv.f32        s21, s21, s19\\n\"         // s21 = s21 / s19(delta)\n    \"           vadd.f32        d10, d10, d11\\n\"         // d10 += d11(offset)\n\n    //-------------------------\n    // h += h < 0 ? 360.0f : 0\n    //-------------------------\n    \"           vclt.f32        d11, d10, #0\\n\"          // d11 = d10 < 0 ? 0xFF : 0\n    \"           vand.f32        d11, d15\\n\"              // d11 = d11 & d15(#360.0f)\n    \"           vadd.f32        d10, d11\\n\"              // d10 = d10 + d11\n    //---------------------------------------\n    // downscale H value from 0-359 to 0-255\n    //---------------------------------------\n    \"           vmul.f32        d10, d10, d14\\n\"         // d10 = d10 * 0.71\n\n    //------------------------\n    // s = delta * 255 / max\n    //------------------------\n    \"           vmul.f32        d11, d9, d25\\n\"          // d11 = d9 * d25(#255.0f)\n    \"           vdiv.f32        s22, s22, s16\\n\"         // s22 = s22 / s16(max)\n    \"           vdiv.f32        s23, s23, s17\\n\"         // s23 = s23 / s17(max)\n\n    \"           vcvt.u32.f32    q5, q5\\n\"                // float -> unsigned int (d10, d11)\n\n    \"           vorr.u64        q10, q5, q10\\n\"          // H = H | d10, S = S | d11\n\n    \"           vshr.u64        q0, q0, #8\\n\"            // q0(red, green) = q0 >> 8\n    \"           vshr.u64        d2, d2, #8\\n\"            // d2(blue) = q1 >> 8\n    \"           vshr.u64        q2, q2, #8\\n\"            // q2(delta, max) = q2 >> 8\n\n    \"           subs            r4, r4, #1\\n\"\n    \"           bne             calc_s\\n\"\n\n    \"           pldw            [r1]\\n\"\n    \"           vrev32.8        q10, q10\\n\"\n    \"           vst4.8          {q10-q11}, [r1]\\n\"       // r,g,b,a\n\n\n    \"           add             r0, r0, #32\\n\"\n    \"           add             r1, r1, #32\\n\"\n    \"           pld             [r0]\\n\"\n\n    \"           subs            r7, r7, #1\\n\"\n    \"           bne             loop_hsv\\n\"\n\n\n\n    :\n    : [src]\"r\"(src), [dst]\"r\"(dst), [size]\"r\"(rgba->size)\n    : \"memory\", \"cc\", \"r0\",  \"r1\", \"r4\", \"r5\", \"r6\", \"r7\"\n  );\n\n}\n```\n", "tags": ["C++", "\u30a2\u30bb\u30f3\u30d6\u30ea\u8a00\u8a9e", "Android", "NEON\u547d\u4ee4", "ARM"]}