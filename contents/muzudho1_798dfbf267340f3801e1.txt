{"context": "\u524d\u56de\u306e\u8a18\u4e8b : http://qiita.com/muzudho1/items/1432040086218e14ebe2\n\u6a19\u6e96\u5165\u51fa\u529b\u3092\u30ad\u30fc\u30dc\u30fc\u30c9\u3001\u753b\u9762\u306b\u5411\u3051\u3066\u958b\u3051\u3066\u3044\u308b\u3068\u3001\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u6301\u3063\u3066\u3044\u3063\u305f\u3068\u304d\u3000\u8a8d\u8a3c\u5426\u8a8d\u3067\u843d\u3061\u308b\u306e\u3060\u308d\u3046\u3001\u3068\u76ee\u661f\u3092\u3064\u3051\u305f\u306e\u304c\u3000\u8a18\u4e8b\uff1c\u305d\u306e\uff17\uff1e\u3000\u3060\u3063\u305f\u3002\n\n\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u4f5c\u6210\na1 : \uff08\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u56de\u3055\u306a\u3044\uff09\u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b\u3067\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u300c1112\u300d\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308c\u308b\u3082\u306e\u3068\u3059\u308b\u3002\u5e38\u6642\u3000\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u300c1113\u300d\u3092\u76e3\u8996\u3057\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5165\u3063\u3066\u3044\u308c\u3070\u3000\u753b\u9762\u306b\u51fa\u3059\u3082\u306e\u3068\u3059\u308b\u3002\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3000\u5fc5\u8981\u306b\u306a\u3063\u305f\u3089\u5b9f\u884c\u3057\u3001\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u305f\u3089\u6d88\u3048\u3066\u3044\u308b\u3082\u306e\u3068\u60f3\u5b9a\u3059\u308b\u3002\na2 : \uff08\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u56de\u3059\uff09\u5e38\u6642\u3000\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u300c1112\u300d\u3092\u76e3\u8996\u3057\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5165\u3063\u3066\u3044\u308c\u3070\u3000\u305d\u306e\u6587\u5b57\u5217\u306b\u300cdaze\u300d\u3068\u4ed8\u3051\u3066\u3000\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u300c1113\u300d\u306b\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3002\uff08\u73fe\u72b6\u3001C++\u3067\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u65b9\u6cd5\u306f\u5206\u304b\u3089\u306a\u3044\u3002\u30d5\u30a1\u30a4\u30eb\u3067\u4ee3\u7528\u3059\u308b\uff09\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3000\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u3066\u3082\u7a3c\u50cd\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u3059\u308b\u3002\n\u3053\u308c\u3067 a2 \u304c\u5e38\u6642\u3000\u7a3c\u50cd\u3057\u3066\u3044\u3066\u3001a1 \u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u306e\u306a\u3089\u3000\u3088\u3057\u3068\u3059\u308b\u3002\ntamesi33a1_cs.cs\n// OS  : Windows 10\n// IDE : Visual Studio 2015\n//       Install : NuGet   : Install-Package RabbitMQ.Client -Version 4.1.1\n//\n// OS  : Ubuntu 16.04\n//       Compile : Command : mcs /r:RabbitMQ.Client.dll -define:UBUNTU tamesi33a1_cs.cs\n//               : Command : chmod 755 tamesi33a1_cs.cs\n//       Execute : Command : // \u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5b9f\u884c\u3059\u308b\n//                         : ./tamesi33a1_cs.exe\n//       Check   : Command : // \u30ad\u30e5\u30fc\u306e\u4e2d\u8eab\u306e\u6570\u3092\u8abf\u3079\u308b\n//                         : rabbitmqctl list_queues\n//--------------------------------------------------------------------------------\n// tamesi33a1_cs.cs\n\n// Ubuntu \u306e RabbitMQ \u306f\u30bd\u30fc\u30b9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u53e4\u3044\u306e\u304b\u3001API \u304c\u7570\u306a\u3063\u305f\u3002\n// #define UBUNTU\n\nusing RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\nusing System;\nusing System.Collections.ObjectModel;\nusing System.Text;\n\nnamespace UsagiMQ\n{\n    /// <summary>\n    /// \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3000\u30a8\u30f3\u30ad\u30e5\u30fc\u3001\u30c7\u30ad\u30e5\u30fc\u3057\u307e\u3059\u3002\n    /// \u30a8\u30f3\u30ad\u30e5\u30fc\u306f\u300c1112\u300d\u3001\u30c7\u30ad\u30e5\u30fc\u306f\u300c1113\u300d\u30ad\u30e5\u30fc\u306b\u5411\u3051\u3066\u884c\u3044\u307e\u3059\u3002\n    /// \n    /// \u53c2\u7167 : QueueDeclare http://docs.spring.io/spring-amqp-net/docs/1.0.x/api/html/Spring.Messaging.Amqp.Rabbit~Spring.Messaging.Amqp.Rabbit.Connection.CachedModel~QueueDeclare(String,Boolean,Boolean,Boolean,Boolean,Boolean,IDictionary).html\n    /// \u53c2\u7167 : EventingBasicConsumer https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.Events.EventingBasicConsumer.html\n    /// \u53c2\u7167 : BasicConsume https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.IModel.html#method-M:RabbitMQ.Client.IModel.BasicConsume(System.UInt16,System.String,System.Boolean,System.Collections.IDictionary,RabbitMQ.Client.IBasicConsumer)\n    /// \u53c2\u7167 : C#\u3067const\u306a\u914d\u5217\u3092\u5b9f\u73fe\u3059\u308b (\u3082\u3063\u3068\u30af\u30fc\u30eb\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0) http://pgnote.net/?p=885\n    /// </summary>\n    class Program\n    {\n        public const string HOST_NAME = \"localhost\";\n        public static readonly ReadOnlyCollection<string> QUEUE_NAMES =\n            Array.AsReadOnly(new string[] { \"1112\", \"1113\" });\n        public const int ENQUEUE_INDEX = 0;\n        public const int DEQUEUE_INDEX = 1;\n\n        public static ConnectionFactory GetFactory()\n        {\n            if (null == m_factory_)\n            {\n                m_factory_ = new ConnectionFactory() { HostName = HOST_NAME };\n            }\n            return m_factory_;\n        }\n        static ConnectionFactory m_factory_;\n\n        public static IConnection GetConnection()\n        {\n            if (null == m_connection_)\n            {\n                m_connection_ = GetFactory().CreateConnection();\n            }\n            return m_connection_;\n        }\n        static IConnection m_connection_;\n\n        public static IModel GetChannel(int index)\n        {\n            if (null == m_channels_[index])\n            {\n                m_channels_[index] = GetConnection().CreateModel();\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b Spring.Messaging.Amqp.Rabbit \u306e\u5f15\u6570 7 \u3064\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n                m_channels_[index].QueueDeclare(QUEUE_NAMES[index], false, false, false, false, false, null);\n#else\n                m_channels_[index].QueueDeclare(QUEUE_NAMES[index], false, false, false, null);\n#endif\n            }\n            return m_channels_[index];\n        }\n        static IModel[] m_channels_ = new IModel[2];\n\n        public static EventingBasicConsumer GetConsumer(int index)\n        {\n            if (null == m_consumers_[index])\n            {\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b v1.4.0 \u306e\u5f15\u6570\u304c 0 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u8abf\u3079\u305f\u304c\u5f15\u6570\u304c1\u500b\uff5e6\u500b\u306e\u3082\u306e\u306f\u7121\u304b\u3063\u305f\u3002\n                m_consumers_[index] = new EventingBasicConsumer();\n#else\n                m_consumers_[index] = new EventingBasicConsumer(GetChannel(index));\n#endif\n\n            }\n            return m_consumers_[index];\n        }\n        static EventingBasicConsumer[] m_consumers_ = new EventingBasicConsumer[2];\n\n        /// <summary>\n        /// \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n        /// </summary>\n#if UBUNTU\n        public static BasicDeliverEventHandler GetReceiveHandler()\n#else\n        public static EventHandler<BasicDeliverEventArgs> GetReceiveHandler()\n#endif\n        {\n            if (null == m_eventHandler_)\n            {\n#if UBUNTU\n                m_eventHandler_ = new BasicDeliverEventHandler((model, ea) =>\n#else\n                m_eventHandler_ = new EventHandler<BasicDeliverEventArgs>((model, ea) =>\n#endif\n                {\n                    byte[] body = ea.Body;\n                    string message = Encoding.UTF8.GetString(body);\n                    Console.WriteLine(\" [interrupt!] Dequeue(^q^) {0}\", message);\n                });\n            }\n\n            return m_eventHandler_;\n        }\n\n#if UBUNTU\n        static BasicDeliverEventHandler m_eventHandler_;\n#else\n        static EventHandler<BasicDeliverEventArgs> m_eventHandler_;\n#endif\n\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseConnection()\n        {\n            if (null != m_connection_)\n            {\n                m_connection_.Close();\n                m_connection_ = null;\n            }\n        }\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseChannel(int index)\n        {\n            if (null != m_channels_[index])\n            {\n                m_channels_[index].Close();\n                m_channels_[index] = null;\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            for (;;)\n            {\n                Console.WriteLine(@\"\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\");\n\n                int category = 0;\n                for (;;)\n                {\n                    string line = Console.ReadLine();\n                    switch (line)\n                    {\n                        case \"1\": category = 1; goto gt_EndLoop1;\n                        case \"2\": category = 2; goto gt_EndLoop1;\n                        case \"quit\": goto gt_Quit;\n                        default: break;\n                    }\n                }\n                gt_EndLoop1:\n                ;\n\n                switch (category)\n                {\n                    case 1:\n                        {\n                            Console.WriteLine(@\"\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\");\n                            // \"Hello World!\" \u306a\u3069\u3092\u5165\u529b\n                            string line = Console.ReadLine();\n                            Enqueue(line);\n                        }\n                        break;\n                    case 2: Dequeue(); break;\n                }\n            }\n            gt_Quit:\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u308f\u3063\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseConnection();\n        }\n\n        static void Enqueue(string message)\n        {\n            IModel channel = GetChannel(ENQUEUE_INDEX);\n\n            byte[] body = Encoding.UTF8.GetBytes(message);\n            channel.BasicPublish(\"\", QUEUE_NAMES[ENQUEUE_INDEX], null, body);\n\n            Console.WriteLine(\" Enqueue(^q^) {0}\", message);\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseChannel(ENQUEUE_INDEX);\n        }\n\n        static void Dequeue()\n        {\n            IModel channel = GetChannel(DEQUEUE_INDEX);\n            EventingBasicConsumer consumer = GetConsumer(DEQUEUE_INDEX);\n\n\n            // \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n            consumer.Received += GetReceiveHandler();\n\n#if UBUNTU\n            // Ubuntu\u3067\u306f\u4f55\u6545\u304b\u5f15\u6570\u304c 5 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n            channel.BasicConsume( QUEUE_NAMES[DEQUEUE_INDEX], true, \"\", null, consumer);\n#else\n            channel.BasicConsume( QUEUE_NAMES[DEQUEUE_INDEX], true, consumer);\n#endif\n            Console.WriteLine(\" Please, wait dequeue... Or Press any key to menu.\");\n            Console.ReadKey();\n\n            // \u5272\u8fbc\u307f\u51e6\u7406\u306e\u524a\u9664\n            consumer.Received -= GetReceiveHandler();\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseChannel(DEQUEUE_INDEX);\n        }\n\n    }\n}\n\ntamesi33a2_cs.cs\n// OS  : Windows 10\n// IDE : Visual Studio 2015\n//       Install : NuGet   : Install-Package RabbitMQ.Client -Version 4.1.1\n//\n// OS  : Ubuntu 16.04\n//       Compile : Command : mcs /r:RabbitMQ.Client.dll -define:UBUNTU tamesi33a2_cs.cs\n//               : Command : chmod 755 tamesi33a2_cs.cs\n//       Execute : Command : // \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5b9f\u884c\u3059\u308b\n//                         : nohup ./tamesi33a2_cs.exe > ./tamesi33a2_cs.out.log 2> ./tamesi33a2_cs.err.log < /dev/null &\n//       Check   :         : // tamesi33a1_cs.exe \u3092\u4f7f\u3046\n//--------------------------------------------------------------------------------\n// tamesi33a2_cs.cs\n\n// Ubuntu \u306e RabbitMQ \u306f\u30bd\u30fc\u30b9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u53e4\u3044\u306e\u304b\u3001API \u304c\u7570\u306a\u3063\u305f\u3002\n// #define UBUNTU\n\nusing RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\nusing System;\nusing System.Collections.ObjectModel;\nusing System.Text;\nusing System.Threading;\n\nnamespace UsagiMQ\n{\n    /// <summary>\n    /// \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u672b\u5c3e\u306b daze \u3092\u4ed8\u3051\u307e\u3059\u3002\n    /// \u30c7\u30ad\u30e5\u30fc\u306f\u300c1112\u300d\u3001\u30a8\u30f3\u30ad\u30e5\u30fc\u306f\u300c1113\u300d\u30ad\u30e5\u30fc\u306b\u5411\u3051\u3066\u884c\u3044\u307e\u3059\u3002\n    /// \u6a19\u6e96\u5165\u51fa\u529b\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u3001\u753b\u9762\u306b\u306f\u63a5\u7d9a\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n    /// \n    /// \u53c2\u7167 : QueueDeclare http://docs.spring.io/spring-amqp-net/docs/1.0.x/api/html/Spring.Messaging.Amqp.Rabbit~Spring.Messaging.Amqp.Rabbit.Connection.CachedModel~QueueDeclare(String,Boolean,Boolean,Boolean,Boolean,Boolean,IDictionary).html\n    /// \u53c2\u7167 : EventingBasicConsumer https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.Events.EventingBasicConsumer.html\n    /// \u53c2\u7167 : BasicConsume https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.IModel.html#method-M:RabbitMQ.Client.IModel.BasicConsume(System.UInt16,System.String,System.Boolean,System.Collections.IDictionary,RabbitMQ.Client.IBasicConsumer)\n    /// \u53c2\u7167 : C#\u3067const\u306a\u914d\u5217\u3092\u5b9f\u73fe\u3059\u308b (\u3082\u3063\u3068\u30af\u30fc\u30eb\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0) http://pgnote.net/?p=885\n    /// </summary>\n    class Program\n    {\n        public const string HOST_NAME = \"localhost\";\n        public static readonly ReadOnlyCollection<string> QUEUE_NAMES =\n            Array.AsReadOnly(new string[] { \"1113\", \"1112\" });\n        public const int ENQUEUE_INDEX = 0;\n        public const int DEQUEUE_INDEX = 1;\n\n        // \u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\n        public static RotationBuffer rollingBuffer = new RotationBuffer();\n\n        public static ConnectionFactory GetFactory()\n        {\n            if (null == m_factory_)\n            {\n                m_factory_ = new ConnectionFactory() { HostName = HOST_NAME };\n            }\n            return m_factory_;\n        }\n        static ConnectionFactory m_factory_;\n\n        public static IConnection GetConnection()\n        {\n            if (null == m_connection_)\n            {\n                m_connection_ = GetFactory().CreateConnection();\n            }\n            return m_connection_;\n        }\n        static IConnection m_connection_;\n\n        public static bool IsConnected()\n        {\n            if (null != m_connection_)\n            {\n                return m_connection_.IsOpen;\n            }\n            return false;\n        }\n\n        public static IModel GetChannel(int index)\n        {\n            if (null == m_channels_[index])\n            {\n                m_channels_[index] = GetConnection().CreateModel();\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b Spring.Messaging.Amqp.Rabbit \u306e\u5f15\u6570 7 \u3064\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n                m_channels_[index].QueueDeclare(QUEUE_NAMES[index], false, false, false, false, false, null);\n#else\n                m_channels_[index].QueueDeclare(QUEUE_NAMES[index], false, false, false, null);\n#endif\n            }\n            return m_channels_[index];\n        }\n        static IModel[] m_channels_ = new IModel[2];\n\n        public static EventingBasicConsumer GetConsumer(int index)\n        {\n            if (null == m_consumers_[index])\n            {\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b v1.4.0 \u306e\u5f15\u6570\u304c 0 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u8abf\u3079\u305f\u304c\u5f15\u6570\u304c1\u500b\uff5e6\u500b\u306e\u3082\u306e\u306f\u7121\u304b\u3063\u305f\u3002\n                m_consumers_[index] = new EventingBasicConsumer();\n#else\n                m_consumers_[index] = new EventingBasicConsumer(GetChannel(index));\n#endif\n\n            }\n            return m_consumers_[index];\n        }\n        static EventingBasicConsumer[] m_consumers_ = new EventingBasicConsumer[2];\n\n        /// <summary>\n        /// \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n        /// </summary>\n#if UBUNTU\n        public static BasicDeliverEventHandler GetReceiveHandler()\n#else\n        public static EventHandler<BasicDeliverEventArgs> GetReceiveHandler()\n#endif\n        {\n            if (null == m_eventHandler_)\n            {\n#if UBUNTU\n                m_eventHandler_ = new BasicDeliverEventHandler((model, ea) =>\n#else\n                m_eventHandler_ = new EventHandler<BasicDeliverEventArgs>((model, ea) =>\n#endif\n                {\n                    byte[] body = ea.Body;\n                    string message = Encoding.UTF8.GetString(body);\n\n                    // \u672b\u5c3e\u306b daze \u3092\u4ed8\u3051\u308b\u3002\n                    message += \"daze\";\n\n                    // \u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u306b\u5165\u308c\u308b\n                    rollingBuffer.PutMessage(message);\n                });\n            }\n\n            return m_eventHandler_;\n        }\n\n#if UBUNTU\n        static BasicDeliverEventHandler m_eventHandler_;\n#else\n        static EventHandler<BasicDeliverEventArgs> m_eventHandler_;\n#endif\n\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseChannel(int index)\n        {\n            if (null != m_channels_[index])\n            {\n                m_channels_[index].Close();\n                m_channels_[index] = null;\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            // \u5e38\u6642\u76e3\u8996\u3092\u30b9\u30bf\u30fc\u30c8\n            StartDequeue();\n\n            // \u7121\u9650\u30eb\u30fc\u30d7\n            while (IsConnected())\n            {\n                string message = rollingBuffer.GetMessage();\n                if (null != message)\n                {\n                    // \u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\n                    Enqueue(message);\n                }\n                Thread.Sleep(20);\n            }\n\n            // \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u81ea\u5206\u3067\u306f\u63a5\u7d9a\u3092\u5207\u3089\u306a\u3044\u3002\n        }\n\n        static void Enqueue(string message)\n        {\n            IModel channel = GetChannel(ENQUEUE_INDEX);\n\n            byte[] body = Encoding.UTF8.GetBytes(message);\n            channel.BasicPublish(\"\", QUEUE_NAMES[ENQUEUE_INDEX], null, body);\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseChannel(ENQUEUE_INDEX);\n        }\n\n        static void StartDequeue()\n        {\n            IModel channel = GetChannel(DEQUEUE_INDEX);\n            EventingBasicConsumer consumer = GetConsumer(DEQUEUE_INDEX);\n            // \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n            consumer.Received += GetReceiveHandler();\n\n#if UBUNTU\n            // Ubuntu\u3067\u306f\u4f55\u6545\u304b\u5f15\u6570\u304c 5 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n            channel.BasicConsume( QUEUE_NAMES[DEQUEUE_INDEX], true, \"\", null, consumer);\n#else\n            channel.BasicConsume( QUEUE_NAMES[DEQUEUE_INDEX], true, consumer);\n#endif\n\n            // \u5272\u8fbc\u307f\u51e6\u7406\u306e\u524a\u9664\n            // consumer.Received -= GetReceiveHandler();\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            // CloseChannel(DEQUEUE_INDEX);\n        }\n    }\n\n    /// <summary>\n    /// \u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3002\n    /// \u3053\u308c\u306f\u30e1\u30a4\u30f3\u30fb\u30b9\u30ec\u30c3\u30c9\u306b\u7f6e\u304f\u3002\n    /// \u30c7\u30ad\u30e5\u30fc\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n    /// \u30c7\u30ad\u30e5\u30fc\u51e6\u7406\u306f\u3001\u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3092\u4ef2\u4ecb\u306b\u3057\u3066\u30a8\u30f3\u30ad\u30e5\u30fc\u51e6\u7406\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6e21\u3059\u3002\n    /// </summary>\n    public class RotationBuffer\n    {\n        public const int bufferSize = 100;\n        public string[] buffer = new string[bufferSize];\n        public int[] bufferCursors = new int[] { 0, 0 };\n        public const int PUT_INDEX = 0;\n        public const int GET_INDEX = 1;\n        public void PutMessage(string message)\n        {\n            buffer[bufferCursors[PUT_INDEX]] = message;\n            bufferCursors[PUT_INDEX]++;\n            if (!(bufferCursors[PUT_INDEX] < bufferSize))\n            {\n                bufferCursors[PUT_INDEX] = 0;\n            }\n        }\n        public string GetMessage()\n        {\n            if (null != buffer[bufferCursors[GET_INDEX]])\n            {\n                string message = buffer[bufferCursors[GET_INDEX]];\n                buffer[bufferCursors[GET_INDEX]] = null;\n                bufferCursors[GET_INDEX]++;\n                if (!(bufferCursors[GET_INDEX] < bufferSize))\n                {\n                    bufferCursors[GET_INDEX] = 0;\n                }\n                return message;\n            }\n            return null;\n        }\n    }\n}\n\n\n\u753b\u9762\u3068\u30ad\u30fc\u30dc\u30fc\u30c9\u306b\u4e00\u5ea6\u3082\u63a5\u7d9a\u3057\u306a\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u306a\u3089\u3000\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u5e38\u99d0\u3067\u304d\u308b\u3093\u3060\u308d\u3046\u304b\uff1f\nnohup ./tamesi33a2_cs.exe > ./tamesi33a2_cs.out.log 2> ./tamesi33a2_cs.err.log < /dev/null &\n\n\u3067\u8d70\u3089\u305b\u3066\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u3001\n# ps aux | grep tamesi33\nroot      9044  3.0  2.3 341852 23828 ?        Sl   13:47   0:05 /usr/bin/cli . tamesi33a2_cs.exe\nroot      9137  0.0  0.0  12936   984 pts/6    S+   13:50   0:00 grep --color=auto tamesi33\n\n\u30ed\u30b0\u30a4\u30f3\u3057\u76f4\u3057\u3066\u3082\u3000\u30d7\u30ed\u30bb\u30b9\u306f\u6b8b\u3063\u3066\u3044\u308b\u3088\u3046\u3060\u3002\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308c\u3070\u3000\u8a71\u3057\u306f\u65e9\u3044\u3093\u3060\u304c\u3002\n\u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u304b\u3001\u305d\u308c\u304c\u3060\u3081\u306a\u3089\uff34\uff23\uff30\u3067\u30dd\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u304b\u3002\n\n\u30c7\u30ad\u30e5\u30fc\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u3001\u30a8\u30f3\u30ad\u30e5\u30fc\u306f\u3067\u304d\u306a\u3044\u3002\n\u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3067\u4ef2\u4ecb\u3057\u305f\u3002\n\u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u306f\u30e1\u30a4\u30f3\u30fb\u30b9\u30ec\u30c3\u30c9\u306b\u7f6e\u304f\u3002\n\u30c7\u30ad\u30e5\u30fc\u51e6\u7406\u306f\u3001\u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3092\u4ef2\u4ecb\u306b\u3057\u3066\u30a8\u30f3\u30ad\u30e5\u30fc\u51e6\u7406\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6e21\u3059\u3002\n\u3053\u308c\u3067\u30001112\u21921113\u3000\u306e\u6d41\u308c\u306f\u3046\u307e\u304f\u3044\u3063\u305f\u3002\n# nohup ./tamesi33a2_cs.exe > ./tamesi33a2_cs.out.log 2> ./tamesi33a2_cs.err.log < /dev/null &\n[1] 11288\nroot@tk2-217-18401:/home/\u2605user/shogi/csharp_service# jobs\n[1]+  Running                 nohup ./tamesi33a2_cs.exe > ./tamesi33a2_cs.out.log 2> ./tamesi33a2_cs.err.log < /dev/null &\nroot@tk2-217-18401:/home/\u2605user/shogi/csharp_service# ./tamesi33a1_cs.exe                                               \u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n1\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\ndorayaki\n Enqueue(^q^) dorayaki\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n1\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nkamome\n Enqueue(^q^) kamome\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n1\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nsirasu\n Enqueue(^q^) sirasu\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\nquit\nroot@tk2-217-18401:/home/\u2605user/shogi/csharp_service# rabbitmqctl list_queues                                           Listing queues ...\n1112    0\n1111    0\n1113    3\nmyqueue 0\nroot@tk2-217-18401:/home/\u2605user/shogi/csharp_service# ./tamesi33a1_cs.exe\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n2\n Please, wait dequeue... Or Press any key to menu.\n [interrupt!] Dequeue(^q^) dorayakidaze\n [interrupt!] Dequeue(^q^) kamomedaze\n [interrupt!] Dequeue(^q^) sirasudaze\n\n\u6b21\u306f\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u3066\u307f\u308b\u3002\nroot@tk2-217-18401:/home/\u2605user/shogi/csharp_service# rabbitmqctl list_queues\nListing queues ...\n1112    0\n1111    0\n1113    0\nmyqueue 0\nroot@tk2-217-18401:/home/\u2605user/shogi/csharp_service# ./tamesi33a1_cs.exe\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n1\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nyakitori\n Enqueue(^q^) yakitori\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n1\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nbrush\n Enqueue(^q^) brush\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n1\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nkamome\n Enqueue(^q^) kamome\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\nquit\nroot@tk2-217-18401:/home/\u2605user/shogi/csharp_service# rabbitmqctl list_queues\nListing queues ...\n1112    0\n1111    0\n1113    3\nmyqueue 0\nroot@tk2-217-18401:/home/\u2605user/shogi/csharp_service# ./tamesi33a1_cs.exe\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n2\n Please, wait dequeue... Or Press any key to menu.\n [interrupt!] Dequeue(^q^) yakitoridaze\n [interrupt!] Dequeue(^q^) brushdaze\n [interrupt!] Dequeue(^q^) kamomedaze\n\n\u3044\u3051\u305f\u3002\n\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u56de\u3057\u305f\u30d7\u30ed\u30bb\u30b9\u3068\u306f\u3000\u30ad\u30fc\u30dc\u30fc\u30c9\u3001\u753b\u9762\u306b\u3000\u6a19\u6e96\u5165\u51fa\u529b\u3092\u63a5\u7d9a\u3059\u308b\u306e\u306f\u3000\u304a\u3055\u3089\u3070\u3000\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\n\uff2f\uff33\u306f\u3000\u30b7\u30f3\u30b0\u30eb\u30fb\u30bf\u30b9\u30af\u306a\u3093\u3060\u308d\u3046\u304b\uff1f\n\nC++\u306e\u30d7\u30ed\u30bb\u30b9\u901a\u4fe1\u306e\u3000publish\u3000\u306e\u65b9\u3092\u3069\u3046\u3057\u3088\u3046\u304b\nC++\u306f \u30d7\u30ed\u30bb\u30b9\u901a\u4fe1\u306epublish \u304c\u52d5\u3044\u3066\u3044\u306a\u3044\u306e\u3060\u3063\u305f\u3002\u4f55\u304b\u63a2\u3055\u306a\u3044\u3068\u306a\u3002\n\u300cClients & Developer Tools\u300d\uff08RabbitMQ\uff09\nhttps://www.rabbitmq.com/devtools.html\n\u300cRabbitMQ C client\u300d\uff08alanxz/rabbitmq-c\uff09\nhttps://github.com/alanxz/rabbitmq-c\n\uff23\u8a00\u8a9e\u306a\u3089\u3053\u308c\u3089\u3057\u3044\u3002\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3068\u304b g++ \u3067\u3082\u3044\u3044\u306e\u304b\uff1f\n\u300cSimpleAmqpClient\u300d\uff08alanxz/SimpleAmqpClient\uff09\nhttps://github.com/alanxz/SimpleAmqpClient\n\u3053\u308c\u3092\u4f7f\u3046\u306b\u306f\u3001\u4e0a\u8a18\u306e\uff23\u8a00\u8a9e\u306e\u3084\u3064\u304c\u3044\u308b\u3089\u3057\u3044\u3002\uff12\u5ea6\u624b\u9593\u3060\u306a\u3042\u3002\n\u300cabbitcpp\u300d\uff08akalend/amqpcpp\uff09\nhttps://github.com/akalend/amqpcpp\n\u3053\u308c\u306b\u306f publish \u306e example \u3082\u3042\u308b\u3002\u3053\u308c\u304c\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3002\n\nAMQP-CPP \u3068 amqpcpp\n\u540d\u524d\u304c\u307e\u304e\u3089\u308f\u3057\u3059\u304e\u3060\u308d\u3002\u30d5\u30a1\u30a4\u30eb\u3068\u304b\u3000\u885d\u7a81\u3057\u306a\u3051\u308c\u3070\u3044\u3044\u304c\u3002\namqpcpp \u3092 Git Hub \u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u3066\u3001FileZilla \u3067 Windows 10 \u304b\u3089 Ubuntu \u3078\u30d5\u30a1\u30a4\u30eb\u79fb\u52d5\u3002\n# make install\nmake: *** No rule to make target 'install'.  Stop.\n\n\u306a\u3093\u306e\u3053\u3063\u3061\u3083\u3002\n# make\ng++  -Wall -I/usr/local/include -L/usr/local/lib -Iinclude/  -c -o src/AMQP.o src/AMQP.cpp\nIn file included from src/AMQP.cpp:9:0:\ninclude/AMQPcpp.h:44:18: fatal error: amqp.h: No such file or directory\ncompilation terminated.\n<builtin>: recipe for target 'src/AMQP.o' failed\nmake: *** [src/AMQP.o] Error 1\n\n\u3046\u30fc\u3080\u3002\nhttp://hg.rabbitmq.com/rabbitmq-codegen/\n\u306a\u3093\u3060\u308d\u3046\u3053\u308c\u3002\nzip \u306e\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3002\n\u89e3\u51cd\u3057\u3066 rabbitmq-codegen-458c4557f51c \u3092 FileZilla \u3067\u79fb\u52d5\u3002\n# cd rabbitmq-codegen-458c4557f51c\n# make install\nmake: *** No rule to make target 'install'.  Stop.\n\n\u3053\u308c\u3082\u9055\u3046\u3002\n\u306a\u3093\u304b\u3000Makefile \u306e\u4e2d\u8eab\u304c\u8db3\u308a\u306a\u3044\u3093\u3058\u3083\u306a\u3044\u304b\uff1f\n\nAMQP-CPP \u306e publish \u306e\u4f7f\u3044\u65b9\u3092\u30b0\u30b0\u308d\u3046\n\u300c\u5229\u7528AMQP-CPP\u8bbf\u95eeRabbitMq\uff0c\u6d88\u606f\u4e0d\u80fd\u8d85\u8fc710K\u5426\u5219consume\u4e0d\u5230\u300d\uff08cnblogs\uff09\nhttps://q.cnblogs.com/q/82696/\nchannel.declareQueue(AMQP::exclusive).onSuccess(callback);\n\n\u3067\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u8aad\u3093\u3067\u3001\u305d\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u4e2d\u3067\nchannel.publish(\"\",\"rpc_queue\",env);\n\n\u3068\u66f8\u304f\u306e\u3060\u308d\u3046\u304b\uff1f\n\u300cAMQP-CPP/tests/myconnection.cpp\u300d\uff08CopernicaMarketingSoftware/AMQP-CPP\uff09\nhttps://github.com/CopernicaMarketingSoftware/AMQP-CPP/blob/master/tests/myconnection.cpp\n// OS      : Ubuntu 16.04\n// Server  : Sakura VPS (Rental)\n// Library : libev\n//         : Install   : Command  : sudo apt-get update\n//                                : sudo apt-get install libev-dev\n// Service : RabbitMQ\n//         : Reference : Web site : Top page http://www.rabbitmq.com/\n//         : Install   : Web site : Installing on Debian / Ubuntu http://www.rabbitmq.com/install-debian.html\n//         : Manual    : Command  : man rabbitmqctl\n//         : Start     : Command  : rabbitmq-server\n//         : Stop      : Command  : rabbitmqctl stop\n//         : Check     : Command  : rabbitmqctl status\n//         :           : Command  : rabbitmqctl list_queues\n// Library : AMQP-CPP\n//         : Reference : Web site : AMQP-CPP README.md https://github.com/CopernicaMarketingSoftware/AMQP-CPP\n//         : Directory : Command  : cd /usr/include/amqpcpp/\n//         : Compile   : Command  : g++ -std=c++11 publish.cpp -o publish.exe -lev -lamqpcpp -pthread\n//         : Execute   : Command  : ./publish.exe\n//\n// publish.cpp\n// Reffered source code : how to publish messages #109 https://github.com/CopernicaMarketingSoftware/AMQP-CPP/issues/109\n// Reffered source code : https://github.com/CopernicaMarketingSoftware/AMQP-CPP/blob/master/tests/myconnection.cpp\n#include <iostream>\n#include <string>\n\n#include <ev.h>\n#include <amqpcpp.h>\n#include <amqpcpp/libev.h>\n\nauto* loop = EV_DEFAULT;\n\nAMQP::LibEvHandler handler{loop};\nAMQP::Address address{\"amqp://localhost:5672\"};\nAMQP::TcpConnection connection{&handler, address};\nAMQP::TcpChannel channel{&connection};\n\nstd::string exchange_name = \"myexchange\";\nstd::string queue_name    = \"myqueue\";\nstd::string routing_key   = \"\";\n\nint main(int argc, char* argv[]) {\n\n    std::cout << \"channel.connected: \" << channel.connected() << \"\\n\";\n\n    channel.declareExchange(exchange_name, AMQP::direct, AMQP::durable);\n    channel.declareQueue(queue_name, AMQP::durable)\n    .onSuccess([](const std::string& name, uint32_t messages, uint32_t consumers) {\n        std::cout << \"declared queue \" << name << \" (messages: \" << messages << \", consumers: \" << consumers << \")\\n\";\n    })\n    .onError([](const char* msg) {\n        std::cout << \"error declaring queue: \" << msg << \"\\n\";\n    });\n\n    channel.onReady([]() {\n        std::cout << \"onReady\\n\";\n    });\n\n    channel.bindQueue(exchange_name, queue_name, routing_key)\n    .onSuccess([](){\n        std::cout << \"bindQueue.onSuccess\\n\";\n\n        std::string msg = \"hello, japan\";\n        if (channel.publish(exchange_name, routing_key, msg.c_str(), msg.size())) {\n            std::cout << \"publish ok\\n\";\n        } else {\n            std::cout << \"failed to publish?\\n\";\n        }\n\n        // break in ev loop.\n        connection.close();\n    });\n\n    // We will monitor until the connection is lost. Execute channel.declareQueue( ... ).\n    ev_run(loop);\n\n    return 0;\n}\n\n/*\n# ./publish.exe\nchannel.connected: 1\nonReady\ndeclared queue myqueue (messages: 1, consumers: 0)\nbindQueue.onSuccess\npublish ok\n*/\n\n\u3053\u3046\u66f8\u304f\u3068 myqueue \u3067\u306f\u52d5\u304f\u304c\u3001 \"1111\" \u3067\u306f\u52d5\u304b\u306a\u3044\u3002\u30ad\u30e5\u30fc\u306b\u72b6\u614b\u304c\u3042\u308b\u306e\u3060\u308d\u3046\u304b\uff1f\n\npublish \u3067\u3051\u305f\n\u30ad\u30e5\u30fc\u306e\u72b6\u614b\u304c durable, autodelete, passive, exclusive \u306e\uff14\u3064\u3042\u3063\u3066\u3001\u5408\u308f\u306a\u3044\u306e\u3092\u8a2d\u5b9a\u3057\u3066\u306f\u3044\u3051\u306a\u3044\u306e\u304b\u3002\n// OS      : Ubuntu 16.04\n// Server  : Sakura VPS (Rental)\n// Library : libev\n//         : Install   : Command  : sudo apt-get update\n//                                : sudo apt-get install libev-dev\n// Service : RabbitMQ\n//         : Reference : Web site : Top page http://www.rabbitmq.com/\n//         : Install   : Web site : Installing on Debian / Ubuntu http://www.rabbitmq.com/install-debian.html\n//         : Manual    : Command  : man rabbitmqctl\n//         : Start     : Command  : rabbitmq-server\n//         : Stop      : Command  : rabbitmqctl stop\n//         : Check     : Command  : rabbitmqctl status\n//         :           : Command  : rabbitmqctl list_queues\n// Library : AMQP-CPP\n//         : Reference : Web site : AMQP-CPP README.md https://github.com/CopernicaMarketingSoftware/AMQP-CPP\n//         : Directory : Command  : cd /usr/include/amqpcpp/\n//         : Compile   : Command  : g++ -std=c++11 publish.cpp -o publish.exe -lev -lamqpcpp -pthread\n//         : Execute   : Command  : ./publish.exe\n//\n// publish.cpp\n// Reffered source code : how to publish messages #109 https://github.com/CopernicaMarketingSoftware/AMQP-CPP/issues/109\n// Reffered source code : https://github.com/CopernicaMarketingSoftware/AMQP-CPP/blob/master/tests/myconnection.cpp\n#include <iostream>\n#include <string>\n\n#include <ev.h>\n#include <amqpcpp.h>\n#include <amqpcpp/libev.h>\n\nint main(int argc, char* argv[]) {\n\n    auto* loop          = EV_DEFAULT;\n    AMQP::LibEvHandler    handler{loop};\n    AMQP::Address         address{\"amqp://localhost:5672\"};\n    AMQP::TcpConnection   connection{&handler, address};\n    AMQP::TcpChannel      channel{&connection};\n\n    std::string exchange_name = \"myexchange\";\n    std::string queue_name    = \"1111\";\n    std::string routing_key   = \"\";\n\n    std::cout << \"channel.connected: \" << channel.connected() << \"\\n\";\n\n    channel.declareQueue(queue_name)\n    .onSuccess([](const std::string& name, uint32_t messages, uint32_t consumers) {\n        std::cout << \"declared queue \" << name << \" (messages: \" << messages << \", consumers: \" << consumers << \")\\n\";\n    })\n    .onError([](const char* errMsg) {\n        std::cout << \"error declaring queue: \" << errMsg << \"\\n\";\n    });\n\n    channel.onReady([]() {\n        std::cout << \"onReady\\n\";\n    });\n\n    channel.bindQueue(exchange_name, queue_name, routing_key)\n    .onSuccess([&connection,&channel,&exchange_name,&routing_key](){\n        std::cout << \"bindQueue.onSuccess\\n\";\n\n        std::string msg = \"hello, japan\";\n        if (channel.publish(exchange_name, routing_key, msg.c_str(), msg.size())) {\n            std::cout << \"publish ok\\n\";\n        } else {\n            std::cout << \"failed to publish?\\n\";\n        }\n\n        // break in ev loop.\n        connection.close();\n    });\n\n    // We will monitor until the connection is lost. Execute channel.declareQueue( ... ), etc.\n    ev_run(loop);\n\n    return 0;\n}\n\n/*\nchannel.connected: 1\nonReady\ndeclared queue 1111 (messages: 0, consumers: 0)\nbindQueue.onSuccess\npublish ok\n*/\n\n\n\u3058\u3083\u3042\u3001\u6d6e\u304b\u3080\u702c\u306e\u6a19\u6e96\u5165\u51fa\u529b\u3092\u3000\u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u306b\u7f6e\u304d\u63db\u3048\u3088\u3046\n\u30b9\u30c8\u30ea\u30fc\u30e0\u51fa\u529b\u306a\u3093\u304b\u3000\u3059\u3054\u3044\u6570\u3042\u308b\u304c\u3001\u3069\u3046\u7f6e\u304d\u63db\u3048\u308b\u306e\u304c\u3044\u3044\u306e\u304b\u3002\n\n\u8a71\u3057\u304c\u5909\u308f\u308b\u306e\u3067\u6b21\u306e\u8a18\u4e8b\u3078\n\u524d\u56de\u306e\u8a18\u4e8b : http://qiita.com/muzudho1/items/1432040086218e14ebe2\n\n\u6a19\u6e96\u5165\u51fa\u529b\u3092\u30ad\u30fc\u30dc\u30fc\u30c9\u3001\u753b\u9762\u306b\u5411\u3051\u3066\u958b\u3051\u3066\u3044\u308b\u3068\u3001\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u6301\u3063\u3066\u3044\u3063\u305f\u3068\u304d\u3000\u8a8d\u8a3c\u5426\u8a8d\u3067\u843d\u3061\u308b\u306e\u3060\u308d\u3046\u3001\u3068\u76ee\u661f\u3092\u3064\u3051\u305f\u306e\u304c\u3000\u8a18\u4e8b\uff1c\u305d\u306e\uff17\uff1e\u3000\u3060\u3063\u305f\u3002\n\n# \u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u4f5c\u6210\n\n**a1 :** \uff08\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u56de\u3055\u306a\u3044\uff09\u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b\u3067\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u300c1112\u300d\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308c\u308b\u3082\u306e\u3068\u3059\u308b\u3002\u5e38\u6642\u3000\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u300c1113\u300d\u3092\u76e3\u8996\u3057\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5165\u3063\u3066\u3044\u308c\u3070\u3000\u753b\u9762\u306b\u51fa\u3059\u3082\u306e\u3068\u3059\u308b\u3002\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3000\u5fc5\u8981\u306b\u306a\u3063\u305f\u3089\u5b9f\u884c\u3057\u3001\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u305f\u3089\u6d88\u3048\u3066\u3044\u308b\u3082\u306e\u3068\u60f3\u5b9a\u3059\u308b\u3002\n\n**a2 :** \uff08\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u56de\u3059\uff09\u5e38\u6642\u3000\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u300c1112\u300d\u3092\u76e3\u8996\u3057\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5165\u3063\u3066\u3044\u308c\u3070\u3000\u305d\u306e\u6587\u5b57\u5217\u306b\u300cdaze\u300d\u3068\u4ed8\u3051\u3066\u3000\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u300c1113\u300d\u306b\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3002\uff08\u73fe\u72b6\u3001C++\u3067\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u65b9\u6cd5\u306f\u5206\u304b\u3089\u306a\u3044\u3002\u30d5\u30a1\u30a4\u30eb\u3067\u4ee3\u7528\u3059\u308b\uff09\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3000\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u3066\u3082\u7a3c\u50cd\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u3059\u308b\u3002\n\n\u3053\u308c\u3067 a2 \u304c\u5e38\u6642\u3000\u7a3c\u50cd\u3057\u3066\u3044\u3066\u3001a1 \u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u306e\u306a\u3089\u3000\u3088\u3057\u3068\u3059\u308b\u3002\n\ntamesi33a1_cs.cs\n\n```\n// OS  : Windows 10\n// IDE : Visual Studio 2015\n//       Install : NuGet   : Install-Package RabbitMQ.Client -Version 4.1.1\n//\n// OS  : Ubuntu 16.04\n//       Compile : Command : mcs /r:RabbitMQ.Client.dll -define:UBUNTU tamesi33a1_cs.cs\n//               : Command : chmod 755 tamesi33a1_cs.cs\n//       Execute : Command : // \u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5b9f\u884c\u3059\u308b\n//                         : ./tamesi33a1_cs.exe\n//       Check   : Command : // \u30ad\u30e5\u30fc\u306e\u4e2d\u8eab\u306e\u6570\u3092\u8abf\u3079\u308b\n//                         : rabbitmqctl list_queues\n//--------------------------------------------------------------------------------\n// tamesi33a1_cs.cs\n\n// Ubuntu \u306e RabbitMQ \u306f\u30bd\u30fc\u30b9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u53e4\u3044\u306e\u304b\u3001API \u304c\u7570\u306a\u3063\u305f\u3002\n// #define UBUNTU\n\nusing RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\nusing System;\nusing System.Collections.ObjectModel;\nusing System.Text;\n\nnamespace UsagiMQ\n{\n    /// <summary>\n    /// \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3000\u30a8\u30f3\u30ad\u30e5\u30fc\u3001\u30c7\u30ad\u30e5\u30fc\u3057\u307e\u3059\u3002\n    /// \u30a8\u30f3\u30ad\u30e5\u30fc\u306f\u300c1112\u300d\u3001\u30c7\u30ad\u30e5\u30fc\u306f\u300c1113\u300d\u30ad\u30e5\u30fc\u306b\u5411\u3051\u3066\u884c\u3044\u307e\u3059\u3002\n    /// \n    /// \u53c2\u7167 : QueueDeclare http://docs.spring.io/spring-amqp-net/docs/1.0.x/api/html/Spring.Messaging.Amqp.Rabbit~Spring.Messaging.Amqp.Rabbit.Connection.CachedModel~QueueDeclare(String,Boolean,Boolean,Boolean,Boolean,Boolean,IDictionary).html\n    /// \u53c2\u7167 : EventingBasicConsumer https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.Events.EventingBasicConsumer.html\n    /// \u53c2\u7167 : BasicConsume https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.IModel.html#method-M:RabbitMQ.Client.IModel.BasicConsume(System.UInt16,System.String,System.Boolean,System.Collections.IDictionary,RabbitMQ.Client.IBasicConsumer)\n    /// \u53c2\u7167 : C#\u3067const\u306a\u914d\u5217\u3092\u5b9f\u73fe\u3059\u308b (\u3082\u3063\u3068\u30af\u30fc\u30eb\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0) http://pgnote.net/?p=885\n    /// </summary>\n    class Program\n    {\n        public const string HOST_NAME = \"localhost\";\n        public static readonly ReadOnlyCollection<string> QUEUE_NAMES =\n            Array.AsReadOnly(new string[] { \"1112\", \"1113\" });\n        public const int ENQUEUE_INDEX = 0;\n        public const int DEQUEUE_INDEX = 1;\n\n        public static ConnectionFactory GetFactory()\n        {\n            if (null == m_factory_)\n            {\n                m_factory_ = new ConnectionFactory() { HostName = HOST_NAME };\n            }\n            return m_factory_;\n        }\n        static ConnectionFactory m_factory_;\n\n        public static IConnection GetConnection()\n        {\n            if (null == m_connection_)\n            {\n                m_connection_ = GetFactory().CreateConnection();\n            }\n            return m_connection_;\n        }\n        static IConnection m_connection_;\n\n        public static IModel GetChannel(int index)\n        {\n            if (null == m_channels_[index])\n            {\n                m_channels_[index] = GetConnection().CreateModel();\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b Spring.Messaging.Amqp.Rabbit \u306e\u5f15\u6570 7 \u3064\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n                m_channels_[index].QueueDeclare(QUEUE_NAMES[index], false, false, false, false, false, null);\n#else\n                m_channels_[index].QueueDeclare(QUEUE_NAMES[index], false, false, false, null);\n#endif\n            }\n            return m_channels_[index];\n        }\n        static IModel[] m_channels_ = new IModel[2];\n\n        public static EventingBasicConsumer GetConsumer(int index)\n        {\n            if (null == m_consumers_[index])\n            {\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b v1.4.0 \u306e\u5f15\u6570\u304c 0 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u8abf\u3079\u305f\u304c\u5f15\u6570\u304c1\u500b\uff5e6\u500b\u306e\u3082\u306e\u306f\u7121\u304b\u3063\u305f\u3002\n                m_consumers_[index] = new EventingBasicConsumer();\n#else\n                m_consumers_[index] = new EventingBasicConsumer(GetChannel(index));\n#endif\n\n            }\n            return m_consumers_[index];\n        }\n        static EventingBasicConsumer[] m_consumers_ = new EventingBasicConsumer[2];\n\n        /// <summary>\n        /// \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n        /// </summary>\n#if UBUNTU\n        public static BasicDeliverEventHandler GetReceiveHandler()\n#else\n        public static EventHandler<BasicDeliverEventArgs> GetReceiveHandler()\n#endif\n        {\n            if (null == m_eventHandler_)\n            {\n#if UBUNTU\n                m_eventHandler_ = new BasicDeliverEventHandler((model, ea) =>\n#else\n                m_eventHandler_ = new EventHandler<BasicDeliverEventArgs>((model, ea) =>\n#endif\n                {\n                    byte[] body = ea.Body;\n                    string message = Encoding.UTF8.GetString(body);\n                    Console.WriteLine(\" [interrupt!] Dequeue(^q^) {0}\", message);\n                });\n            }\n\n            return m_eventHandler_;\n        }\n\n#if UBUNTU\n        static BasicDeliverEventHandler m_eventHandler_;\n#else\n        static EventHandler<BasicDeliverEventArgs> m_eventHandler_;\n#endif\n\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseConnection()\n        {\n            if (null != m_connection_)\n            {\n                m_connection_.Close();\n                m_connection_ = null;\n            }\n        }\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseChannel(int index)\n        {\n            if (null != m_channels_[index])\n            {\n                m_channels_[index].Close();\n                m_channels_[index] = null;\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            for (;;)\n            {\n                Console.WriteLine(@\"\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\");\n\n                int category = 0;\n                for (;;)\n                {\n                    string line = Console.ReadLine();\n                    switch (line)\n                    {\n                        case \"1\": category = 1; goto gt_EndLoop1;\n                        case \"2\": category = 2; goto gt_EndLoop1;\n                        case \"quit\": goto gt_Quit;\n                        default: break;\n                    }\n                }\n                gt_EndLoop1:\n                ;\n\n                switch (category)\n                {\n                    case 1:\n                        {\n                            Console.WriteLine(@\"\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\");\n                            // \"Hello World!\" \u306a\u3069\u3092\u5165\u529b\n                            string line = Console.ReadLine();\n                            Enqueue(line);\n                        }\n                        break;\n                    case 2: Dequeue(); break;\n                }\n            }\n            gt_Quit:\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30d7\u30ed\u30bb\u30b9\u304c\u7d42\u308f\u3063\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseConnection();\n        }\n\n        static void Enqueue(string message)\n        {\n            IModel channel = GetChannel(ENQUEUE_INDEX);\n\n            byte[] body = Encoding.UTF8.GetBytes(message);\n            channel.BasicPublish(\"\", QUEUE_NAMES[ENQUEUE_INDEX], null, body);\n\n            Console.WriteLine(\" Enqueue(^q^) {0}\", message);\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseChannel(ENQUEUE_INDEX);\n        }\n\n        static void Dequeue()\n        {\n            IModel channel = GetChannel(DEQUEUE_INDEX);\n            EventingBasicConsumer consumer = GetConsumer(DEQUEUE_INDEX);\n\n\n            // \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n            consumer.Received += GetReceiveHandler();\n\n#if UBUNTU\n            // Ubuntu\u3067\u306f\u4f55\u6545\u304b\u5f15\u6570\u304c 5 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n            channel.BasicConsume( QUEUE_NAMES[DEQUEUE_INDEX], true, \"\", null, consumer);\n#else\n            channel.BasicConsume( QUEUE_NAMES[DEQUEUE_INDEX], true, consumer);\n#endif\n            Console.WriteLine(\" Please, wait dequeue... Or Press any key to menu.\");\n            Console.ReadKey();\n\n            // \u5272\u8fbc\u307f\u51e6\u7406\u306e\u524a\u9664\n            consumer.Received -= GetReceiveHandler();\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseChannel(DEQUEUE_INDEX);\n        }\n\n    }\n}\n```\n\ntamesi33a2_cs.cs\n\n```\n// OS  : Windows 10\n// IDE : Visual Studio 2015\n//       Install : NuGet   : Install-Package RabbitMQ.Client -Version 4.1.1\n//\n// OS  : Ubuntu 16.04\n//       Compile : Command : mcs /r:RabbitMQ.Client.dll -define:UBUNTU tamesi33a2_cs.cs\n//               : Command : chmod 755 tamesi33a2_cs.cs\n//       Execute : Command : // \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5b9f\u884c\u3059\u308b\n//                         : nohup ./tamesi33a2_cs.exe > ./tamesi33a2_cs.out.log 2> ./tamesi33a2_cs.err.log < /dev/null &\n//       Check   :         : // tamesi33a1_cs.exe \u3092\u4f7f\u3046\n//--------------------------------------------------------------------------------\n// tamesi33a2_cs.cs\n\n// Ubuntu \u306e RabbitMQ \u306f\u30bd\u30fc\u30b9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u53e4\u3044\u306e\u304b\u3001API \u304c\u7570\u306a\u3063\u305f\u3002\n// #define UBUNTU\n\nusing RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\nusing System;\nusing System.Collections.ObjectModel;\nusing System.Text;\nusing System.Threading;\n\nnamespace UsagiMQ\n{\n    /// <summary>\n    /// \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u672b\u5c3e\u306b daze \u3092\u4ed8\u3051\u307e\u3059\u3002\n    /// \u30c7\u30ad\u30e5\u30fc\u306f\u300c1112\u300d\u3001\u30a8\u30f3\u30ad\u30e5\u30fc\u306f\u300c1113\u300d\u30ad\u30e5\u30fc\u306b\u5411\u3051\u3066\u884c\u3044\u307e\u3059\u3002\n    /// \u6a19\u6e96\u5165\u51fa\u529b\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u3001\u753b\u9762\u306b\u306f\u63a5\u7d9a\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n    /// \n    /// \u53c2\u7167 : QueueDeclare http://docs.spring.io/spring-amqp-net/docs/1.0.x/api/html/Spring.Messaging.Amqp.Rabbit~Spring.Messaging.Amqp.Rabbit.Connection.CachedModel~QueueDeclare(String,Boolean,Boolean,Boolean,Boolean,Boolean,IDictionary).html\n    /// \u53c2\u7167 : EventingBasicConsumer https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.Events.EventingBasicConsumer.html\n    /// \u53c2\u7167 : BasicConsume https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.IModel.html#method-M:RabbitMQ.Client.IModel.BasicConsume(System.UInt16,System.String,System.Boolean,System.Collections.IDictionary,RabbitMQ.Client.IBasicConsumer)\n    /// \u53c2\u7167 : C#\u3067const\u306a\u914d\u5217\u3092\u5b9f\u73fe\u3059\u308b (\u3082\u3063\u3068\u30af\u30fc\u30eb\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0) http://pgnote.net/?p=885\n    /// </summary>\n    class Program\n    {\n        public const string HOST_NAME = \"localhost\";\n        public static readonly ReadOnlyCollection<string> QUEUE_NAMES =\n            Array.AsReadOnly(new string[] { \"1113\", \"1112\" });\n        public const int ENQUEUE_INDEX = 0;\n        public const int DEQUEUE_INDEX = 1;\n\n        // \u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\n        public static RotationBuffer rollingBuffer = new RotationBuffer();\n\n        public static ConnectionFactory GetFactory()\n        {\n            if (null == m_factory_)\n            {\n                m_factory_ = new ConnectionFactory() { HostName = HOST_NAME };\n            }\n            return m_factory_;\n        }\n        static ConnectionFactory m_factory_;\n\n        public static IConnection GetConnection()\n        {\n            if (null == m_connection_)\n            {\n                m_connection_ = GetFactory().CreateConnection();\n            }\n            return m_connection_;\n        }\n        static IConnection m_connection_;\n\n        public static bool IsConnected()\n        {\n            if (null != m_connection_)\n            {\n                return m_connection_.IsOpen;\n            }\n            return false;\n        }\n\n        public static IModel GetChannel(int index)\n        {\n            if (null == m_channels_[index])\n            {\n                m_channels_[index] = GetConnection().CreateModel();\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b Spring.Messaging.Amqp.Rabbit \u306e\u5f15\u6570 7 \u3064\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n                m_channels_[index].QueueDeclare(QUEUE_NAMES[index], false, false, false, false, false, null);\n#else\n                m_channels_[index].QueueDeclare(QUEUE_NAMES[index], false, false, false, null);\n#endif\n            }\n            return m_channels_[index];\n        }\n        static IModel[] m_channels_ = new IModel[2];\n\n        public static EventingBasicConsumer GetConsumer(int index)\n        {\n            if (null == m_consumers_[index])\n            {\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b v1.4.0 \u306e\u5f15\u6570\u304c 0 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u8abf\u3079\u305f\u304c\u5f15\u6570\u304c1\u500b\uff5e6\u500b\u306e\u3082\u306e\u306f\u7121\u304b\u3063\u305f\u3002\n                m_consumers_[index] = new EventingBasicConsumer();\n#else\n                m_consumers_[index] = new EventingBasicConsumer(GetChannel(index));\n#endif\n\n            }\n            return m_consumers_[index];\n        }\n        static EventingBasicConsumer[] m_consumers_ = new EventingBasicConsumer[2];\n\n        /// <summary>\n        /// \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n        /// </summary>\n#if UBUNTU\n        public static BasicDeliverEventHandler GetReceiveHandler()\n#else\n        public static EventHandler<BasicDeliverEventArgs> GetReceiveHandler()\n#endif\n        {\n            if (null == m_eventHandler_)\n            {\n#if UBUNTU\n                m_eventHandler_ = new BasicDeliverEventHandler((model, ea) =>\n#else\n                m_eventHandler_ = new EventHandler<BasicDeliverEventArgs>((model, ea) =>\n#endif\n                {\n                    byte[] body = ea.Body;\n                    string message = Encoding.UTF8.GetString(body);\n\n                    // \u672b\u5c3e\u306b daze \u3092\u4ed8\u3051\u308b\u3002\n                    message += \"daze\";\n\n                    // \u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u306b\u5165\u308c\u308b\n                    rollingBuffer.PutMessage(message);\n                });\n            }\n\n            return m_eventHandler_;\n        }\n\n#if UBUNTU\n        static BasicDeliverEventHandler m_eventHandler_;\n#else\n        static EventHandler<BasicDeliverEventArgs> m_eventHandler_;\n#endif\n\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseChannel(int index)\n        {\n            if (null != m_channels_[index])\n            {\n                m_channels_[index].Close();\n                m_channels_[index] = null;\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            // \u5e38\u6642\u76e3\u8996\u3092\u30b9\u30bf\u30fc\u30c8\n            StartDequeue();\n\n            // \u7121\u9650\u30eb\u30fc\u30d7\n            while (IsConnected())\n            {\n                string message = rollingBuffer.GetMessage();\n                if (null != message)\n                {\n                    // \u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\n                    Enqueue(message);\n                }\n                Thread.Sleep(20);\n            }\n\n            // \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u81ea\u5206\u3067\u306f\u63a5\u7d9a\u3092\u5207\u3089\u306a\u3044\u3002\n        }\n\n        static void Enqueue(string message)\n        {\n            IModel channel = GetChannel(ENQUEUE_INDEX);\n\n            byte[] body = Encoding.UTF8.GetBytes(message);\n            channel.BasicPublish(\"\", QUEUE_NAMES[ENQUEUE_INDEX], null, body);\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseChannel(ENQUEUE_INDEX);\n        }\n\n        static void StartDequeue()\n        {\n            IModel channel = GetChannel(DEQUEUE_INDEX);\n            EventingBasicConsumer consumer = GetConsumer(DEQUEUE_INDEX);\n            // \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n            consumer.Received += GetReceiveHandler();\n\n#if UBUNTU\n            // Ubuntu\u3067\u306f\u4f55\u6545\u304b\u5f15\u6570\u304c 5 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n            channel.BasicConsume( QUEUE_NAMES[DEQUEUE_INDEX], true, \"\", null, consumer);\n#else\n            channel.BasicConsume( QUEUE_NAMES[DEQUEUE_INDEX], true, consumer);\n#endif\n\n            // \u5272\u8fbc\u307f\u51e6\u7406\u306e\u524a\u9664\n            // consumer.Received -= GetReceiveHandler();\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            // CloseChannel(DEQUEUE_INDEX);\n        }\n    }\n\n    /// <summary>\n    /// \u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3002\n    /// \u3053\u308c\u306f\u30e1\u30a4\u30f3\u30fb\u30b9\u30ec\u30c3\u30c9\u306b\u7f6e\u304f\u3002\n    /// \u30c7\u30ad\u30e5\u30fc\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n    /// \u30c7\u30ad\u30e5\u30fc\u51e6\u7406\u306f\u3001\u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3092\u4ef2\u4ecb\u306b\u3057\u3066\u30a8\u30f3\u30ad\u30e5\u30fc\u51e6\u7406\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6e21\u3059\u3002\n    /// </summary>\n    public class RotationBuffer\n    {\n        public const int bufferSize = 100;\n        public string[] buffer = new string[bufferSize];\n        public int[] bufferCursors = new int[] { 0, 0 };\n        public const int PUT_INDEX = 0;\n        public const int GET_INDEX = 1;\n        public void PutMessage(string message)\n        {\n            buffer[bufferCursors[PUT_INDEX]] = message;\n            bufferCursors[PUT_INDEX]++;\n            if (!(bufferCursors[PUT_INDEX] < bufferSize))\n            {\n                bufferCursors[PUT_INDEX] = 0;\n            }\n        }\n        public string GetMessage()\n        {\n            if (null != buffer[bufferCursors[GET_INDEX]])\n            {\n                string message = buffer[bufferCursors[GET_INDEX]];\n                buffer[bufferCursors[GET_INDEX]] = null;\n                bufferCursors[GET_INDEX]++;\n                if (!(bufferCursors[GET_INDEX] < bufferSize))\n                {\n                    bufferCursors[GET_INDEX] = 0;\n                }\n                return message;\n            }\n            return null;\n        }\n    }\n}\n```\n\n# \u753b\u9762\u3068\u30ad\u30fc\u30dc\u30fc\u30c9\u306b\u4e00\u5ea6\u3082\u63a5\u7d9a\u3057\u306a\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u306a\u3089\u3000\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u5e38\u99d0\u3067\u304d\u308b\u3093\u3060\u308d\u3046\u304b\uff1f\n\n```\nnohup ./tamesi33a2_cs.exe > ./tamesi33a2_cs.out.log 2> ./tamesi33a2_cs.err.log < /dev/null &\n```\n\n\u3067\u8d70\u3089\u305b\u3066\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u3001\n\n```\n# ps aux | grep tamesi33\nroot      9044  3.0  2.3 341852 23828 ?        Sl   13:47   0:05 /usr/bin/cli . tamesi33a2_cs.exe\nroot      9137  0.0  0.0  12936   984 pts/6    S+   13:50   0:00 grep --color=auto tamesi33\n```\n\n\u30ed\u30b0\u30a4\u30f3\u3057\u76f4\u3057\u3066\u3082\u3000\u30d7\u30ed\u30bb\u30b9\u306f\u6b8b\u3063\u3066\u3044\u308b\u3088\u3046\u3060\u3002\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308c\u3070\u3000\u8a71\u3057\u306f\u65e9\u3044\u3093\u3060\u304c\u3002\n\n\u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u304b\u3001\u305d\u308c\u304c\u3060\u3081\u306a\u3089\uff34\uff23\uff30\u3067\u30dd\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u304b\u3002\n\n# \u30c7\u30ad\u30e5\u30fc\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u3001\u30a8\u30f3\u30ad\u30e5\u30fc\u306f\u3067\u304d\u306a\u3044\u3002\n\n\u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3067\u4ef2\u4ecb\u3057\u305f\u3002\n\n\u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u306f\u30e1\u30a4\u30f3\u30fb\u30b9\u30ec\u30c3\u30c9\u306b\u7f6e\u304f\u3002\n\u30c7\u30ad\u30e5\u30fc\u51e6\u7406\u306f\u3001\u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3092\u4ef2\u4ecb\u306b\u3057\u3066\u30a8\u30f3\u30ad\u30e5\u30fc\u51e6\u7406\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6e21\u3059\u3002\n\n\u3053\u308c\u3067\u30001112\u21921113\u3000\u306e\u6d41\u308c\u306f\u3046\u307e\u304f\u3044\u3063\u305f\u3002\n\n```\n# nohup ./tamesi33a2_cs.exe > ./tamesi33a2_cs.out.log 2> ./tamesi33a2_cs.err.log < /dev/null &\n[1] 11288\nroot@tk2-217-18401:/home/\u2605user/shogi/csharp_service# jobs\n[1]+  Running                 nohup ./tamesi33a2_cs.exe > ./tamesi33a2_cs.out.log 2> ./tamesi33a2_cs.err.log < /dev/null &\nroot@tk2-217-18401:/home/\u2605user/shogi/csharp_service# ./tamesi33a1_cs.exe                                               \u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n1\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\ndorayaki\n Enqueue(^q^) dorayaki\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n1\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nkamome\n Enqueue(^q^) kamome\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n1\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nsirasu\n Enqueue(^q^) sirasu\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\nquit\nroot@tk2-217-18401:/home/\u2605user/shogi/csharp_service# rabbitmqctl list_queues                                           Listing queues ...\n1112    0\n1111    0\n1113    3\nmyqueue 0\nroot@tk2-217-18401:/home/\u2605user/shogi/csharp_service# ./tamesi33a1_cs.exe\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n2\n Please, wait dequeue... Or Press any key to menu.\n [interrupt!] Dequeue(^q^) dorayakidaze\n [interrupt!] Dequeue(^q^) kamomedaze\n [interrupt!] Dequeue(^q^) sirasudaze\n```\n\n\u6b21\u306f\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u3066\u307f\u308b\u3002\n\n```\nroot@tk2-217-18401:/home/\u2605user/shogi/csharp_service# rabbitmqctl list_queues\nListing queues ...\n1112    0\n1111    0\n1113    0\nmyqueue 0\nroot@tk2-217-18401:/home/\u2605user/shogi/csharp_service# ./tamesi33a1_cs.exe\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n1\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nyakitori\n Enqueue(^q^) yakitori\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n1\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nbrush\n Enqueue(^q^) brush\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n1\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nkamome\n Enqueue(^q^) kamome\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\nquit\nroot@tk2-217-18401:/home/\u2605user/shogi/csharp_service# rabbitmqctl list_queues\nListing queues ...\n1112    0\n1111    0\n1113    3\nmyqueue 0\nroot@tk2-217-18401:/home/\u2605user/shogi/csharp_service# ./tamesi33a1_cs.exe\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n2\n Please, wait dequeue... Or Press any key to menu.\n [interrupt!] Dequeue(^q^) yakitoridaze\n [interrupt!] Dequeue(^q^) brushdaze\n [interrupt!] Dequeue(^q^) kamomedaze\n```\n\n\u3044\u3051\u305f\u3002\n\n**\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u56de\u3057\u305f\u30d7\u30ed\u30bb\u30b9\u3068\u306f\u3000\u30ad\u30fc\u30dc\u30fc\u30c9\u3001\u753b\u9762\u306b\u3000\u6a19\u6e96\u5165\u51fa\u529b\u3092\u63a5\u7d9a\u3059\u308b\u306e\u306f\u3000\u304a\u3055\u3089\u3070**\u3000\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\n\uff2f\uff33\u306f\u3000\u30b7\u30f3\u30b0\u30eb\u30fb\u30bf\u30b9\u30af\u306a\u3093\u3060\u308d\u3046\u304b\uff1f\n\n# C++\u306e\u30d7\u30ed\u30bb\u30b9\u901a\u4fe1\u306e\u3000publish\u3000\u306e\u65b9\u3092\u3069\u3046\u3057\u3088\u3046\u304b\n\nC++\u306f \u30d7\u30ed\u30bb\u30b9\u901a\u4fe1\u306epublish \u304c\u52d5\u3044\u3066\u3044\u306a\u3044\u306e\u3060\u3063\u305f\u3002\u4f55\u304b\u63a2\u3055\u306a\u3044\u3068\u306a\u3002\n\n\u300cClients & Developer Tools\u300d\uff08RabbitMQ\uff09\nhttps://www.rabbitmq.com/devtools.html\n\n\u300cRabbitMQ C client\u300d\uff08alanxz/rabbitmq-c\uff09\nhttps://github.com/alanxz/rabbitmq-c\n\n\uff23\u8a00\u8a9e\u306a\u3089\u3053\u308c\u3089\u3057\u3044\u3002\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3068\u304b g++ \u3067\u3082\u3044\u3044\u306e\u304b\uff1f\n\n\u300cSimpleAmqpClient\u300d\uff08alanxz/SimpleAmqpClient\uff09\nhttps://github.com/alanxz/SimpleAmqpClient\n\n\u3053\u308c\u3092\u4f7f\u3046\u306b\u306f\u3001\u4e0a\u8a18\u306e\uff23\u8a00\u8a9e\u306e\u3084\u3064\u304c\u3044\u308b\u3089\u3057\u3044\u3002\uff12\u5ea6\u624b\u9593\u3060\u306a\u3042\u3002\n\n\u300cabbitcpp\u300d\uff08akalend/amqpcpp\uff09\nhttps://github.com/akalend/amqpcpp\n\n\u3053\u308c\u306b\u306f publish \u306e example \u3082\u3042\u308b\u3002\u3053\u308c\u304c\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3002\n\n# AMQP-CPP \u3068 amqpcpp\n\n\u540d\u524d\u304c\u307e\u304e\u3089\u308f\u3057\u3059\u304e\u3060\u308d\u3002\u30d5\u30a1\u30a4\u30eb\u3068\u304b\u3000\u885d\u7a81\u3057\u306a\u3051\u308c\u3070\u3044\u3044\u304c\u3002\n\namqpcpp \u3092 Git Hub \u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u3066\u3001FileZilla \u3067 Windows 10 \u304b\u3089 Ubuntu \u3078\u30d5\u30a1\u30a4\u30eb\u79fb\u52d5\u3002\n\n```\n# make install\nmake: *** No rule to make target 'install'.  Stop.\n```\n\n\u306a\u3093\u306e\u3053\u3063\u3061\u3083\u3002\n\n```\n# make\ng++  -Wall -I/usr/local/include -L/usr/local/lib -Iinclude/  -c -o src/AMQP.o src/AMQP.cpp\nIn file included from src/AMQP.cpp:9:0:\ninclude/AMQPcpp.h:44:18: fatal error: amqp.h: No such file or directory\ncompilation terminated.\n<builtin>: recipe for target 'src/AMQP.o' failed\nmake: *** [src/AMQP.o] Error 1\n```\n\n\u3046\u30fc\u3080\u3002\n\nhttp://hg.rabbitmq.com/rabbitmq-codegen/\n\n\u306a\u3093\u3060\u308d\u3046\u3053\u308c\u3002\n\nzip \u306e\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3002\n\n\u89e3\u51cd\u3057\u3066 rabbitmq-codegen-458c4557f51c \u3092 FileZilla \u3067\u79fb\u52d5\u3002\n\n```\n# cd rabbitmq-codegen-458c4557f51c\n# make install\nmake: *** No rule to make target 'install'.  Stop.\n```\n\n\u3053\u308c\u3082\u9055\u3046\u3002\n\n\u306a\u3093\u304b\u3000Makefile \u306e\u4e2d\u8eab\u304c\u8db3\u308a\u306a\u3044\u3093\u3058\u3083\u306a\u3044\u304b\uff1f\n\n# AMQP-CPP \u306e publish \u306e\u4f7f\u3044\u65b9\u3092\u30b0\u30b0\u308d\u3046\n\n\u300c\u5229\u7528AMQP-CPP\u8bbf\u95eeRabbitMq\uff0c\u6d88\u606f\u4e0d\u80fd\u8d85\u8fc710K\u5426\u5219consume\u4e0d\u5230\u300d\uff08cnblogs\uff09\nhttps://q.cnblogs.com/q/82696/\n\n```\nchannel.declareQueue(AMQP::exclusive).onSuccess(callback);\n```\n\n\u3067\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u8aad\u3093\u3067\u3001\u305d\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u4e2d\u3067\n\n```\nchannel.publish(\"\",\"rpc_queue\",env);\n```\n\n\u3068\u66f8\u304f\u306e\u3060\u308d\u3046\u304b\uff1f\n\n\u300cAMQP-CPP/tests/myconnection.cpp\u300d\uff08CopernicaMarketingSoftware/AMQP-CPP\uff09\nhttps://github.com/CopernicaMarketingSoftware/AMQP-CPP/blob/master/tests/myconnection.cpp\n\n```\n// OS      : Ubuntu 16.04\n// Server  : Sakura VPS (Rental)\n// Library : libev\n//         : Install   : Command  : sudo apt-get update\n//                                : sudo apt-get install libev-dev\n// Service : RabbitMQ\n//         : Reference : Web site : Top page http://www.rabbitmq.com/\n//         : Install   : Web site : Installing on Debian / Ubuntu http://www.rabbitmq.com/install-debian.html\n//         : Manual    : Command  : man rabbitmqctl\n//         : Start     : Command  : rabbitmq-server\n//         : Stop      : Command  : rabbitmqctl stop\n//         : Check     : Command  : rabbitmqctl status\n//         :           : Command  : rabbitmqctl list_queues\n// Library : AMQP-CPP\n//         : Reference : Web site : AMQP-CPP README.md https://github.com/CopernicaMarketingSoftware/AMQP-CPP\n//         : Directory : Command  : cd /usr/include/amqpcpp/\n//         : Compile   : Command  : g++ -std=c++11 publish.cpp -o publish.exe -lev -lamqpcpp -pthread\n//         : Execute   : Command  : ./publish.exe\n//\n// publish.cpp\n// Reffered source code : how to publish messages #109 https://github.com/CopernicaMarketingSoftware/AMQP-CPP/issues/109\n// Reffered source code : https://github.com/CopernicaMarketingSoftware/AMQP-CPP/blob/master/tests/myconnection.cpp\n#include <iostream>\n#include <string>\n\n#include <ev.h>\n#include <amqpcpp.h>\n#include <amqpcpp/libev.h>\n\nauto* loop = EV_DEFAULT;\n\nAMQP::LibEvHandler handler{loop};\nAMQP::Address address{\"amqp://localhost:5672\"};\nAMQP::TcpConnection connection{&handler, address};\nAMQP::TcpChannel channel{&connection};\n\nstd::string exchange_name = \"myexchange\";\nstd::string queue_name    = \"myqueue\";\nstd::string routing_key   = \"\";\n\nint main(int argc, char* argv[]) {\n\n    std::cout << \"channel.connected: \" << channel.connected() << \"\\n\";\n\n    channel.declareExchange(exchange_name, AMQP::direct, AMQP::durable);\n    channel.declareQueue(queue_name, AMQP::durable)\n    .onSuccess([](const std::string& name, uint32_t messages, uint32_t consumers) {\n        std::cout << \"declared queue \" << name << \" (messages: \" << messages << \", consumers: \" << consumers << \")\\n\";\n    })\n    .onError([](const char* msg) {\n        std::cout << \"error declaring queue: \" << msg << \"\\n\";\n    });\n\n    channel.onReady([]() {\n        std::cout << \"onReady\\n\";\n    });\n\n    channel.bindQueue(exchange_name, queue_name, routing_key)\n    .onSuccess([](){\n        std::cout << \"bindQueue.onSuccess\\n\";\n\n        std::string msg = \"hello, japan\";\n        if (channel.publish(exchange_name, routing_key, msg.c_str(), msg.size())) {\n            std::cout << \"publish ok\\n\";\n        } else {\n            std::cout << \"failed to publish?\\n\";\n        }\n\n        // break in ev loop.\n        connection.close();\n    });\n\n    // We will monitor until the connection is lost. Execute channel.declareQueue( ... ).\n    ev_run(loop);\n\n    return 0;\n}\n\n/*\n# ./publish.exe\nchannel.connected: 1\nonReady\ndeclared queue myqueue (messages: 1, consumers: 0)\nbindQueue.onSuccess\npublish ok\n*/\n```\n\n\u3053\u3046\u66f8\u304f\u3068 myqueue \u3067\u306f\u52d5\u304f\u304c\u3001 \"1111\" \u3067\u306f\u52d5\u304b\u306a\u3044\u3002\u30ad\u30e5\u30fc\u306b\u72b6\u614b\u304c\u3042\u308b\u306e\u3060\u308d\u3046\u304b\uff1f\n\n# publish \u3067\u3051\u305f\n\n\u30ad\u30e5\u30fc\u306e\u72b6\u614b\u304c durable, autodelete, passive, exclusive \u306e\uff14\u3064\u3042\u3063\u3066\u3001\u5408\u308f\u306a\u3044\u306e\u3092\u8a2d\u5b9a\u3057\u3066\u306f\u3044\u3051\u306a\u3044\u306e\u304b\u3002\n\n```\n// OS      : Ubuntu 16.04\n// Server  : Sakura VPS (Rental)\n// Library : libev\n//         : Install   : Command  : sudo apt-get update\n//                                : sudo apt-get install libev-dev\n// Service : RabbitMQ\n//         : Reference : Web site : Top page http://www.rabbitmq.com/\n//         : Install   : Web site : Installing on Debian / Ubuntu http://www.rabbitmq.com/install-debian.html\n//         : Manual    : Command  : man rabbitmqctl\n//         : Start     : Command  : rabbitmq-server\n//         : Stop      : Command  : rabbitmqctl stop\n//         : Check     : Command  : rabbitmqctl status\n//         :           : Command  : rabbitmqctl list_queues\n// Library : AMQP-CPP\n//         : Reference : Web site : AMQP-CPP README.md https://github.com/CopernicaMarketingSoftware/AMQP-CPP\n//         : Directory : Command  : cd /usr/include/amqpcpp/\n//         : Compile   : Command  : g++ -std=c++11 publish.cpp -o publish.exe -lev -lamqpcpp -pthread\n//         : Execute   : Command  : ./publish.exe\n//\n// publish.cpp\n// Reffered source code : how to publish messages #109 https://github.com/CopernicaMarketingSoftware/AMQP-CPP/issues/109\n// Reffered source code : https://github.com/CopernicaMarketingSoftware/AMQP-CPP/blob/master/tests/myconnection.cpp\n#include <iostream>\n#include <string>\n\n#include <ev.h>\n#include <amqpcpp.h>\n#include <amqpcpp/libev.h>\n\nint main(int argc, char* argv[]) {\n\n    auto* loop          = EV_DEFAULT;\n    AMQP::LibEvHandler    handler{loop};\n    AMQP::Address         address{\"amqp://localhost:5672\"};\n    AMQP::TcpConnection   connection{&handler, address};\n    AMQP::TcpChannel      channel{&connection};\n\n    std::string exchange_name = \"myexchange\";\n    std::string queue_name    = \"1111\";\n    std::string routing_key   = \"\";\n\n    std::cout << \"channel.connected: \" << channel.connected() << \"\\n\";\n\n    channel.declareQueue(queue_name)\n    .onSuccess([](const std::string& name, uint32_t messages, uint32_t consumers) {\n        std::cout << \"declared queue \" << name << \" (messages: \" << messages << \", consumers: \" << consumers << \")\\n\";\n    })\n    .onError([](const char* errMsg) {\n        std::cout << \"error declaring queue: \" << errMsg << \"\\n\";\n    });\n\n    channel.onReady([]() {\n        std::cout << \"onReady\\n\";\n    });\n\n    channel.bindQueue(exchange_name, queue_name, routing_key)\n    .onSuccess([&connection,&channel,&exchange_name,&routing_key](){\n        std::cout << \"bindQueue.onSuccess\\n\";\n\n        std::string msg = \"hello, japan\";\n        if (channel.publish(exchange_name, routing_key, msg.c_str(), msg.size())) {\n            std::cout << \"publish ok\\n\";\n        } else {\n            std::cout << \"failed to publish?\\n\";\n        }\n\n        // break in ev loop.\n        connection.close();\n    });\n\n    // We will monitor until the connection is lost. Execute channel.declareQueue( ... ), etc.\n    ev_run(loop);\n\n    return 0;\n}\n\n/*\nchannel.connected: 1\nonReady\ndeclared queue 1111 (messages: 0, consumers: 0)\nbindQueue.onSuccess\npublish ok\n*/\n```\n\n# \u3058\u3083\u3042\u3001\u6d6e\u304b\u3080\u702c\u306e\u6a19\u6e96\u5165\u51fa\u529b\u3092\u3000\u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u306b\u7f6e\u304d\u63db\u3048\u3088\u3046\n\n\u30b9\u30c8\u30ea\u30fc\u30e0\u51fa\u529b\u306a\u3093\u304b\u3000\u3059\u3054\u3044\u6570\u3042\u308b\u304c\u3001\u3069\u3046\u7f6e\u304d\u63db\u3048\u308b\u306e\u304c\u3044\u3044\u306e\u304b\u3002\n\n# \u8a71\u3057\u304c\u5909\u308f\u308b\u306e\u3067\u6b21\u306e\u8a18\u4e8b\u3078\n", "tags": ["\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u5c06\u68cb", "ubuntu16.04", "C++", "AMQP-CPP", "RabbitMQ"]}