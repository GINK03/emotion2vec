{"context": " More than 1 year has passed since last update.\nThis function return a simple list made by aparted complex nested list recurringly.\n\nloose.py\ndef loose(st):\n    \"\"\"\n    apart given nested list to one dimension list recurringly.\n    \"\"\"\n    if isinstance(st, list):\n        ret = []\n        for s in st:\n            ret += loose(s)\n        return ret\n    else:\n        return st\n\nif __name__ == \"__main__\" :\n    a = [[\"1\",\"1\"],\"1\",[\"1\",[\"1\"],[\"1\",\"1\",\"1\"],\"1\"],[\"1\",\"1\",\"1\",\"1\"]]\n    print loose(a)\n\n\n\ncaution\n\nyou must not use list involving expression.\n\nExample\n\nIn [1]: import loose\n\nIn [2]: loose.loose([\"2\",\"3\",[\"2\",[\"1\",\"1\",[\"1\",\"2\",\"3\"],\"4\"],\"5\"],\"6\"])\nOut[2]: ['2', '3', '2', '1', '1', '1', '2', '3', '4', '5', '6']\n\n----------\n\nThis function return a simple list made by aparted complex nested list recurringly.\n\n```python:loose.py\ndef loose(st):\n    \"\"\"\n    apart given nested list to one dimension list recurringly.\n    \"\"\"\n    if isinstance(st, list):\n        ret = []\n        for s in st:\n            ret += loose(s)\n        return ret\n    else:\n        return st\n\nif __name__ == \"__main__\" :\n    a = [[\"1\",\"1\"],\"1\",[\"1\",[\"1\"],[\"1\",\"1\",\"1\"],\"1\"],[\"1\",\"1\",\"1\",\"1\"]]\n    print loose(a)\n```\n\n- caution\n\nyou must not use list involving expression.\n\n- Example\n\n```ipython\nIn [1]: import loose\n\nIn [2]: loose.loose([\"2\",\"3\",[\"2\",[\"1\",\"1\",[\"1\",\"2\",\"3\"],\"4\"],\"5\"],\"6\"])\nOut[2]: ['2', '3', '2', '1', '1', '1', '2', '3', '4', '5', '6']\n```\n", "tags": ["list", "Python"]}