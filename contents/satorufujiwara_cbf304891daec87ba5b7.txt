{"context": "\n\nIntroduction\nAndroid\u306b\u3068\u3063\u3066\u30a2\u30d7\u30ea\u8a2d\u8a08\u306f\u6c38\u9060\u306e\u8ab2\u984c\u3060\u3068\u601d\u3044\u307e\u3059\u3002\nActivity\u304c\u72ec\u7279\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u304c\u3055\u3089\u306b\u8ab2\u984c\u3092\u8907\u96d1\u5316\u3057\u307e\u3059\u3002\n\u8a2d\u8a08\u306b\u3064\u3044\u3066\u306fMVC\u3084MVP\u3001MVVM\u3001Clean-Architecture\u3001DDD\u306a\u3069\u304c\u6700\u8fd1\u306e\u4e3b\u6d41\u3067\u3057\u3087\u3046\u304b\u3002\n\u4e0a\u8a18\u306b\u3042\u304c\u3063\u305f\u8a2d\u8a08\u624b\u6cd5\u306b\u95a2\u3057\u3066\u306f\u7d20\u6674\u3089\u3057\u3044\u8a18\u4e8b\u304c\u3044\u304f\u3064\u3082\u3042\u308b\u306e\u3067\u3068\u3066\u3082\u53c2\u8003\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nAndroid\u3067\u306fMVC\u3088\u308aMVP\u306e\u65b9\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\nhttp://konifar.hatenablog.com/entry/2015/04/17/010606\n[ Android ] - \u3053\u308c\u304b\u3089\u306e\u300c\u8a2d\u8a08\u300d\u306e\u8a71\u3092\u3057\u3088\u3046\nhttps://tech.recruit-mp.co.jp/mobile/android-architecture/\nAndroid\u30aa\u30fc\u30eb\u30b9\u30bf\u30fc\u30ba\u3067Clean Architecture\u306b\u3064\u3044\u3066\u767a\u8868\u3057\u3066\u304d\u305f&\u53c2\u8003\u30ea\u30f3\u30af\u96c6\nhttp://tomoima525.hatenablog.com/entry/2015/08/13/190731\n\n\u8a2d\u8a08\u306b\u7d76\u5bfe\u306e\u6b63\u89e3\u306f\u306a\u304f\u3001\u30c1\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u306e\u898f\u6a21\u306b\u3088\u308a\u69d8\u3005\u306a\u8a2d\u8a08\u304c\u8003\u3048\u3089\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u79c1\u3082\u6bd4\u8f03\u7684\u5927\u898f\u6a21\u306a\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u306b\u3042\u305f\u308a\u8a2d\u8a08\u3092\u8a66\u884c\u932f\u8aa4\u3057\u306a\u304c\u3089\u4f5c\u3063\u3066\u3044\u305f\u306e\u3067\u3067\u3059\u304c\u3001\u65e5\u3005\u958b\u767a\u3057\u3066\u3044\u304f\u4e2d\u3067\u3001\u3069\u3046\u3057\u3066\u3082\u89e3\u6c7a\u3057\u305f\u3044\u554f\u984c\u3092SQLBrite\u3068\u3044\u3046\u3059\u3070\u3089\u3057\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u89e3\u6c7a\u3057\u3001\u96a3\u306e\u30c1\u30fc\u30e0\u304cEventBus+Flux\u3092\u63a1\u7528\u3057\u3066\u308b\u306e\u3092\u898b\u3066\u3044\u308b\u3046\u3061\u306b\u3001UI\u30ec\u30a4\u30e4\u30fc\u306e\u307fRxJava+Flux\u3067\u30a2\u30d7\u30ea\u3092\u8a2d\u8a08\u3059\u308b\u3068\u3044\u3046\u5f62\u306b\u884c\u304d\u7740\u304d\u307e\u3057\u305f\u3002\n\u672c\u8a18\u4e8b\u3067\u306f\u5099\u5fd8\u9332\u7684\u306b\u305d\u306e\u8a2d\u8a08\u306e\u73fe\u5728\u306e\u6307\u91dd\u3092\u307e\u3068\u3081\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u73fe\u5728\u9032\u884c\u7cfb\u3067\u958b\u767a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4f55\u304b\u9593\u9055\u3063\u3066\u3044\u308b\u70b9\u3084\u3054\u610f\u898b\u7b49\u3042\u308c\u3070\u305c\u3072\u3001\u30b3\u30e1\u30f3\u30c8\u3084Twitter\u306a\u3069\u3067\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u809d\u3068\u306a\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u9055\u3044\u307e\u3059\u304c\u3001\u8a2d\u8a08\u306b\u3064\u3044\u3066\u306fizumin5210\u3055\u3093\u306e\u8003\u3048\u3066\u3044\u308b\u8a2d\u8a08\u306b\u975e\u5e38\u306b\u8fd1\u3044\u3093\u3067\u306f\u306a\u3044\u304b\u306a\uff1f\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\nClean Architecture + DDD + Redux + RxJava\u3092Android\u3067\u3084\u308b\u3068\u304d\u306b\u3069\u3053\u307e\u3067\u5206\u5272\u3059\u308b\u304b\u554f\u984c\nhttp://izumin.hateblo.jp/entry/2016/01/24/221943\n\n\nKotlin\nKotlin\u306b\u3064\u3044\u3066\u306f\u524d\u56de\u306e\u8a18\u4e8b\u3092\u307f\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\u8a72\u5f53\u30a2\u30d7\u30ea\u3092\u307b\u307cKotlin\u3067\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\u306a\u3069\u306fKotlin\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u8a2d\u8a08\u4e0aKotlin\u3067\u3042\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3057\u304b\u3057\u3001\u30e9\u30e0\u30c0\u3084\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u306a\u3069Kotlin\u3067\u8a18\u8ff0\u3057\u305f\u307b\u3046\u304c\u3001\u3059\u3063\u304d\u308a\u3068\u66f8\u3051\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u307e\u305f\u3001RxJava\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3060\u3044\u305f\u3044Kotlin\u5411\u3051\u306b\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u304c\u51fa\u3066\u3044\u308b\u306e\u3067\u3042\u308f\u305b\u3066\u4f7f\u3046\u306e\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\n\nRxJava\nhydrakecat\u3055\u3093\u306b\u3088\u308b\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u53c2\u8003\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nRxJava \u306f Subscriber \u3092\u4e2d\u5fc3\u306b\u6349\u3048\u308b\u3068\u7406\u89e3\u3057\u3084\u3059\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u3044\u3046\u8a71\nhttp://hydrakecat.hatenablog.jp/entry/2015/12/22/RxJava_%E3%81%AF_Subscriber_%E3%82%92%E4%B8%AD%E5%BF%83%E3%81%AB%E6%8D%89%E3%81%88%E3%82%8B%E3%81%A8%E7%90%86%E8%A7%A3%E3%81%97%E3%82%84%E3%81%99%E3%81%84%E3%82%93%E3%81%98%E3%82%83%E3%81%AA%E3%81%84\n\n\u4e0a\u8a18\u8a18\u4e8b\u3067\u306f\u300cEverything is Subscriber.\u300d\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306e\u8a2d\u8a08\u306f\u5143\u3005\u306e\u300cEverything is a stream.\u300d\u306e\u8003\u3048\u306b\u5247\u3063\u305f\u8a2d\u8a08\u3068\u3082\u8a00\u3048\u307e\u3059\u3002\n\u307e\u305fSubject\u3092\u591a\u7528\u3059\u308b\u306e\u3067\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3082\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\nRx\u3067\u77e5\u3063\u3066\u304a\u304f\u3068\u4fbf\u5229\u306aSubject\u305f\u3061\nhttp://qiita.com/hide92795/items/f7205c8171826cc2153b#serializedsubject\n\n\nFlux\n\u4ee5\u4e0b\u306f\u516c\u5f0f\u30b5\u30a4\u30c8\u306b\u3042\u308b\u306b\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u56f3\u3067\u3059\u3002\n\u300cAction->Dispatcher->Store->View\u300d\u3068\u3044\u3046\u30d5\u30ed\u30fc\u3092\u5fc5\u305a\u5b88\u308a\u307e\u3059\u3002\n\n\nhttps://facebook.github.io/flux/docs/overview.html#content\n\nflux\u3001\u304a\u3088\u3073\u305d\u306eAndroid\u3078\u306e\u5c0e\u5165\u306fizumin5210\u3055\u3093\u306b\u3088\u308b\u8a18\u4e8b\u304c\u53c2\u8003\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nDroidux: Redux\u3092Android\u306b\u6301\u3061\u8fbc\u3093\u3067\u72b6\u614b\u7ba1\u7406\u304b\u3089\u89e3\u653e\u3055\u308c\u3088\u3046\uff01\nhttp://qiita.com/izumin5210/items/549fd15d97e9fc3b1ef7\n\n\u4e0a\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u5185\u3067\u3082PublishSubject\u304cDispatcher\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306e\u8a2d\u8a08\u306f\u305d\u308c\u3089\u3092\u62e1\u5145\u3057\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3069\u3046\u3057\u3066\u3082\u89e3\u6c7a\u3057\u305f\u3044\u554f\u984c\n\u73fe\u5728\u4f5c\u3063\u3066\u3044\u308b\u30a2\u30d7\u30ea\u306b\u306f30\u500b\u8fd1\u3044Activity\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\n\u305d\u306e\u4e2d\u306b\u306f\u5225\u306eActivity\u3067\u8d77\u304d\u305f\u30a2\u30af\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u3001\u753b\u9762\u5185\u306e\u8868\u793a\u3092\u5909\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3082\u306e\u304c\u3044\u304f\u3064\u304b\u5b58\u5728\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u300c\u30d5\u30a9\u30ed\u30fc\u300d\u304c\u305d\u308c\u306b\u5f53\u305f\u308a\u307e\u3059\u3002\u300c\u30d5\u30a9\u30ed\u30fc\u300d\u30dc\u30bf\u30f3\u304c\u3044\u304f\u3064\u304b\u306eActivity\u306b\u5b58\u5728\u3057\u3066\u3044\u305f\u3089\u3001\u3069\u3053\u304b\u3067\u305d\u308c\u304c\u62bc\u3055\u308c\u305f\u5834\u5408\u306b\u5168\u3066\u306eActivity\u3067\u300c\u30d5\u30a9\u30ed\u30fc\u6e08\u300d\u3068\u306a\u3063\u3066\u3066\u6b32\u3057\u3044\u3001\u305d\u306eActivity\u304c\u305f\u3068\u3048\u30b7\u30b9\u30c6\u30e0\u306b\u3088\u3063\u3066destroy\u3055\u308c\u3066\u3044\u305f\u3068\u3057\u3066\u3082\u3002\u3053\u308c\u304c\u3069\u3046\u3057\u3066\u3082\u89e3\u6c7a\u3057\u305f\u3044\u554f\u984c\u3067\u3057\u305f\u3002\n\u4ed6\u306b\u3082\u30ed\u30b0\u30a4\u30f3\u60c5\u5831\u3084\u3001\u8a2d\u5b9a\u306a\u3069\u300c\u72b6\u614b\u300d\u3092Activity\u3092\u8de8\u3044\u3060\u30a2\u30d7\u30ea\u5168\u4f53\u3067\u7ba1\u7406\u3057\u305f\u3044\u3082\u306e\u306f\u5fc5\u305a\u3068\u3044\u3063\u3066\u5b58\u5728\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nEventBus\u3001Otto\u3001LocalBroadcast\u306a\u3069\u306fActivity\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u524d\u63d0\u306a\u306e\u3067\u3001\u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u306b\u306f\u81f3\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u5168\u3066\u306e\u753b\u9762\u306e\u30c7\u30fc\u30bf\u306e\u307f\u3092\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u7684\u306b\u4e00\u7b87\u6240\u306b\u6301\u3064\u3068\u3044\u3046\u624b\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u5927\u898f\u6a21\u30a2\u30d7\u30ea\u306b\u306f\u5411\u304b\u306a\u3044\u3067\u3057\u3087\u3046\u3002\n\u4eca\u56de\u306e\u8a2d\u8a08\u3067\u306fSQLBrite\u3092\u7528\u3044\u3066\u3053\u308c\u3092\u89e3\u6c7a\u3057\u3066\u3044\u307e\u3059\u3002\n\nRxJava + Flux\n\u524d\u7f6e\u304d\u304c\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306e\u8a2d\u8a08\u306e\u8a71\u3092\u3057\u307e\u3059\u3002\n\u8981\u70b9\u306f\u4ee5\u4e0b\u306e3\u3064\u3067\u3059\u3002\n\nFlux\u306eDispatcher/Store\u3068\u3057\u3066RxJava\u304a\u3088\u3073\u305d\u306e\u4ed6\u306eRxJava\u95a2\u9023\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\nStore\u304b\u3089\u306f\u5168\u3066Observable\u3068\u3057\u3066\u72b6\u614b\u304c\u6d41\u308c\u3066\u304d\u3066\u3001\u305d\u308c\u3092\u5fc5\u8981\u306aView\u304c\u305d\u308c\u3092subscribe\u3059\u308b\u3002\nView\u306f\u72b6\u614b\u3092\u6301\u305f\u305a\u3001Store\u304c\u72b6\u614b\u3092\u6301\u3064\u3002\n\n\n\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\n\nDispatcher/Store\u3068\u3057\u3066\u4f7f\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\n\nRxJava\nSQLBrite\nrx-preferences\n\n\n\u4f75\u7528\u3057\u305f\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\n\n\nDagger2\n\nDispatcher\u3084Store,Action\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u7ba1\u7406\u306b\n\n\nRxAndroid\nRxLifecycle\n\nRxBinding\n\n\u30e6\u30fc\u30b6\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304cObservable\u3068\u3057\u3066\u6d41\u308c\u3066\u304f\u308b\u306e\u3067\u3001\u5168\u3066\u3092Stream\u5316\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\n\nRxBinding\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u306e\u5165\u529b\u30a4\u30d9\u30f3\u30c8\u3084\u30bb\u30f3\u30b5\u30fc\u306a\u3069\u306e\u30a4\u30d9\u30f3\u30c8\u3092Observable\u306b\u5909\u3048\u308b\u3082\u306e\u306f\u7a4d\u6975\u7684\u306b\u5c0e\u5165\u3057\u305f\u65b9\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u6700\u5c0f\u8a2d\u8a08\nflux\u3067\u306fDispatcher\u30921\u3064\u7528\u610f\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u30eb\u30fc\u30eb\u306b\u5247\u3089\u305aDispatcher\u306f\u300c\u30a2\u30d7\u30ea\u5168\u4f53\u3067\u5171\u6709\u3055\u308c\u308b\u3082\u306e\u300d\u3068\u3001\u7279\u5b9a\u306e\u300cActivity\u300d\u5185\u3067\u306e\u307f\u4f7f\u308f\u308c\u308b\u3082\u306e\u306bScope\u3092\u5206\u3051\u3066\u8907\u6570\u7528\u610f\u3059\u308b\u3053\u3068\u3068\u3057\u307e\u3059\u3002\n\u3053\u308c\u3089\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u7ba1\u7406\u306fDagger2\u3092\u7528\u3044\u3066\u884c\u3044\u307e\u3059\u3002\n\u251c data\n\u251c ui\n\u2502 \u251c main\n\u2502 \u2502 \u251c MainAction\n\u2502 \u2502 \u251c MainActivity\n\u2502 \u2502 \u251c MainComponent\n\u2502 \u2502 \u251c MainDispatcher\n\u2502 \u2502 \u251c MainFragment\n\u2502 \u2502 \u251c MainModule\n\u2502 \u2502 \u251c MainScope\n\u2502 \u2502 \u2514 MainStore\n\u2502 \u251c AppAction\n\u2502 \u251c AppDispatcher\n\u2502 \u251c AppComponent\n\u2502 \u251c AppModule\n\u2502 \u251c AppScope\n\u2502 \u2514 AppStore\n\n\nDispatcher/Store\u306e\u7a2e\u985e\ndispatch\u3057\u305f\u3044\u30a4\u30d9\u30f3\u30c8\u3084\u4fdd\u5b58\u3057\u305f\u3044\u72b6\u614b\u306b\u3088\u3063\u3066\u4f7f\u3044\u5206\u3051\u307e\u3059\u3002\n\nPublishSubject\nsubscribe\u3057\u305f\u5f8c\u306eemit\u3092Subscriber\u306b\u4f1d\u3048\u308bSubject\u3067\u3059\u3002\n\u72b6\u614b\u3092\u4fdd\u6301\u3059\u308b\u5fc5\u8981\u306e\u306a\u3044\u4e00\u6642\u7684\u306aEvent\u306a\u3069\u3092dispatch\u3059\u308b\u306e\u306b\u5411\u3044\u3066\u3044\u307e\u3059\u3002\n\nErrorDispatcher.kt\nval errorEventObservable = SerializedSubject(PublishSubject.create<String>())\n\n\n\nErrorStore.kt\nfun errorEvents() = errorDispatcher.errorEventObservable\n\n\n\nMainActivity.kt\nclass MainActivity : RxAppCompatActivity() {\n\n    @Inject lateinit var mainStore: MainStore\n\n    override fun onResume() {\n        super.onResume()\n        mainStore.errors()\n                .observeOn(AndroidSchedulers.mainThread())\n                .bindToLifecycle(this)\n                .subscribe { showToast(R.string.error) }\n    }\n\n\nonResume\u5185\u3067subscribe\u3059\u308c\u3070RxLifecycle\u306b\u3088\u3063\u3066onPause\u5185\u3067unsubcribe\u3055\u308c\u308b\u306e\u3067\u3001Activity\u304c\u6700\u524d\u9762\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u6642\u306b\u7279\u5b9a\u306eAction\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u306a\u3069\u306b\u4f7f\u3048\u307e\u3059\u3002\n\nBehaviorSubject\nPublishSubject\u3068\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001subscribe\u3057\u305f\u969b\u306b\u76f4\u524d\u306e\u5024\u3092emit\u3059\u308b\u306e\u3067\u72b6\u614b\u3092\u4fdd\u6301\u51fa\u6765\u307e\u3059\u3002\n\u753b\u9762\u9593\u3067\u9023\u643a\u3059\u308b\u5fc5\u8981\u306e\u306a\u3044\u72b6\u614b\u3084\u3001\u753b\u9762\u9593\u3067\u9023\u643a\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u3066\u305d\u306e\u72b6\u614b\u3078\u306e\u30a2\u30af\u30bb\u30b9\u304c\u591a\u3044\u3082\u306e\u306b\u5411\u3044\u3066\u3044\u307e\u3059\u3002\n\nUserDispatcher.kt\nval userObservable = SerializedSubject(BehaviorSubject.create<User>())\n\n\n\nUserStore.kt\nfun user() = userDispatcher.userObservable\n\n\n\nMainActivity.kt\nclass MainActivity : RxAppCompatActivity() {\n\n    @Inject lateinit var userStore: UserStore\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.main_activity)\n        userStore.user()\n                .observeOn(AndroidSchedulers.mainThread())\n                .bindToLifecycle(this)\n                .subscribe { userNameTextView.text = it.name }\n    }\n\n\n\nBriteDatabase\nSQLBrite\u306fSQLite\u306equery\u3092stream\u306b\u5909\u63db\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002subscribe\u3057\u3066\u3044\u308bquery\u304c\u3042\u308b\u5834\u5408\u306b\u3001\u540c\u3058\u30c6\u30fc\u30d6\u30eb\u306b\u5909\u66f4\u304c\u3042\u308b\u3068\u518d\u5ea6\u540c\u4e00query\u3092SQLite\u306b\u9069\u5fdc\u3057\u3001\u7d50\u679c\u304cSubscriber\u3078emit\u3055\u308c\u307e\u3059\u3002\n\n\nBriteDatabase.java\n  public long insert(@NonNull String table, @NonNull ContentValues values,\n      @ConflictAlgorithm int conflictAlgorithm) {\n    SQLiteDatabase db = getWriteableDatabase();\n    if (logging) {\n      log(\"INSERT\\n  table: %s\\n  values: %s\\n  conflictAlgorithm: %s\", table, values,\n          conflictString(conflictAlgorithm));\n    }\n    long rowId = db.insertWithOnConflict(table, null, values, conflictAlgorithm);\n    if (logging) log(\"INSERT id: %s\", rowId);\n    if (rowId != -1) {\n      // Only send a table trigger if the insert was successful.\n      sendTableTrigger(Collections.singleton(table));\n    }\n    return rowId;\n  }\n\n\nhttps://github.com/square/sqlbrite/blob/0.6.2/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteDatabase.java#L385\n\n\u4e0a\u8a18\u306finsert\u6642\u306eBriteDatabase\u5185\u306e\u30b3\u30fc\u30c9\u3067\u3059\u304c\u3001sendTableTrigger\u306b\u3088\u3063\u3066\u305d\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u5bfe\u3057\u3066\u306e\u5909\u66f4\u304c\u4ed6\u306eSubscriber\u306b\u4f1d\u308f\u308a\u307e\u3059\u3002\u3053\u308c\u3092Dispatcher\u3068\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002\n\nMainDispatcher.kt\nclass MainDispatcher(val db: BriteDatabase) {\nprivate val emptyObservable = SerializedSubject(PublishSubject.create<String>())\n\n    fun repoObservable(screenId: String) =\n            db.createQuery(TABLE_NAME, \"SELECT * FROM $TABLE_NAME WHERE $SCREEN_ID=?\", screenId)\n                    .mapToList { Repo(it.getStringByName(REPO_ID), it.getStringByName(REPO_NAME)) }\n                    .mergeWith(emptyObservable.filter { it == screenId }.map { emptyList<Repo>() })\n\n    fun dispatch(screenId: String, list: List<Repo>) = db.newTransaction().run {\n        var rows = 0\n        try {\n            db.delete(TABLE_NAME, \"$SCREEN_ID=?\", screenId)\n            list.filterNotNull().map { repo ->\n                ContentValues().apply {\n                    put(SCREEN_ID, screenId)\n                    put(REPO_ID, repo.id)\n                    put(REPO_NAME, repo.name)\n                }\n            }.forEach {\n                db.insert(TABLE_NAME, it)\n                rows++\n            }\n            markSuccessful()\n        } finally {\n            end()\n        }\n        if (list.size == 0) emptyObservable.onNext(screenId)\n        rows\n    }\n}\n\n\nBriteDatabase::createQuery\u3067\u6b32\u3057\u3044\u30c7\u30fc\u30bf\u306eSELECT\u6587\u3092\u66f8\u3044\u3066\u304a\u3051\u3070\u540c\u30c6\u30fc\u30d6\u30eb\u3078\u306e\u5909\u66f4\u3092subscribe\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002mapToList\u3092\u4f7f\u3048\u3070Cursor\u3092\u6b32\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078map\u51fa\u6765\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u4f8b\u3067\u306fdispatch\u3059\u308b\u6642\u306bdelete\u3057\u3066insert\u3001\u3059\u306a\u308f\u3061replace\u3092\u3057\u3066\u3044\u307e\u3059\u30020\u4ef6\u304b\u30890\u4ef6\u306b\u306a\u3063\u305f\u5834\u5408\u306e\u307f\u3001SQLBrite\u306f\u5185\u90e8\u3067dispatch\u3057\u307e\u305b\u3093\u3002\u3053\u306e\u6319\u52d5\u304c\u4ed6\u306eDispatcher\u3068\u9055\u3046\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306e\u307f\u5225\u306eSubject(\u4e0a\u8a18\u306e\u4f8b\u3067\u306femptyObservable)\u304b\u3089\u5024\u3092\u9001\u308b\u3053\u3068\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u30c6\u30fc\u30d6\u30eb\u306f\u540c\u3058Activity\u306e\u5225\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3082\u5171\u6709\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3054\u3068\u306bscreenId\u3092\u5272\u308a\u632f\u3063\u3066\u305d\u308c\u3089\u3092\u533a\u5225\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nMainActivity.kt\nprivate var screenId: String by Delegates.notNull()\n\noverride fun onSaveInstanceState(outState: Bundle?) {\n    super.onSaveInstanceState(outState)\n    outState?.putString(KEY_SCREEN_ID, screenId)\n}\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    screenId = savedInstanceState?.getString(KEY_SCREEN_ID) ?: hashCode().toString()\n}\n\n\nSQL\u3092\u66f8\u304f\u7169\u96d1\u3055\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u524d\u8ff0\u306e\u30d5\u30a9\u30ed\u30fc\u306e\u3088\u3046\u306b\u4ed6\u306eStore\u306b\u5909\u66f4\u3092\u4f1d\u3048\u305f\u3044\u5834\u5408\u306f\u30c6\u30fc\u30d6\u30eb\u3092\u5909\u66f4\u3057\u3066\u304a\u3051\u3070\u3001\u305d\u308c\u304cStore\u3092\u901a\u3058\u3066View\u306b\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\u753b\u9762\u9593\u3067\u30c7\u30fc\u30bf\u3092\u5171\u6709\u3057\u305f\u3044\u304c\u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u3082\u306e\u3001\u30ea\u30b9\u30c8\u306a\u3069\u3067\u9806\u756a\u304c\u610f\u5473\u3092\u6301\u3064\u3082\u306e\u3092\u4fdd\u6301\u3059\u308b\u306e\u306b\u5411\u3044\u3066\u3044\u308bDispatcher\u3067\u3059\u3002\n\nRxSharedPreferences\nrx-preferences\u3082SQLBrite\u3068\u540c\u69d8\u306bSharedPreferences\u306e\u7279\u5b9a\u306ekey\u306b\u5bfe\u3059\u308b\u5909\u66f4\u3092\u4ed6\u306eSubscriber\u306bemit\u3057\u307e\u3059\u3002\u3053\u308c\u3092Dispatcher\u3068\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002\n\nUserDispatcher.kt\nclass UserDispatcher(val context: Context) {\n\n    fun user() = context.getRxPrefs(\"user\").getString(\"id\").asObservable()\n\n    fun dispatchUser(id: String) = context.getRxPrefs(\"user\").getString(\"id\").set(id)\n}\n\nfun Context.getRxPrefs(name: String): RxSharedPreferences = RxSharedPreferences.create(\n        getSharedPreferences(BuildConfig.APPLICATION_ID + '.' + name, Context.MODE_PRIVATE))\n\n\n\u753b\u9762\u9593\u3067\u30c7\u30fc\u30bf\u3092\u5171\u6709\u3057\u305f\u3044\u304c\u9806\u756a\u306f\u95a2\u4fc2\u306a\u304f\u3001\u304b\u3064\u5e38\u306b\u4fdd\u6301\u3057\u3066\u304a\u304f\u5fc5\u8981\u306e\u306a\u3044\u3082\u306e\u306b\u5411\u3044\u3066\u3044\u308bDispatcher\u3067\u3059\u3002\n\nRxBinding\u3068\u306e\u4f75\u7528\nStore\u304b\u3089\u306fstream\u3068\u3057\u3066\u30c7\u30fc\u30bf\u304c\u6d41\u308c\u3066\u304d\u307e\u3059\u306e\u3067\u3001RxBinding\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u306b\u3088\u3063\u3066RxJava\u306e\u6069\u6075\u3092\u53d7\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nview.globalLayouts()\n    .withLatestFrom(store.data()) { view, data -> data }\n    .first()\n    .bindToLifecycle(this)\n    .subscribe { // Bind data to views. }\n\n\u4e0a\u306e\u4f8b\u3067\u306fViewTreeObserver.OnGlobalLayoutListener\u3092\u7528\u3044\u3066View\u306e\u9ad8\u3055\u306a\u3069\u304c\u6c7a\u307e\u3063\u3066\u304b\u3089Store\u306e\u30c7\u30fc\u30bf\u3092View\u306b\u53cd\u6620\u3055\u305b\u3066\u3044\u307e\u3059\u3002\ndrawerStore.clickMenuEvents()\n           .observeOn(AndroidSchedulers.mainThread())\n           .doOnNext { activity.drawerLayout.closeDrawers() }\n           .zipWith(drawerLayout.drawerOpen(Gravity.LEFT).skip(1).filter { !it }) { intent, drawer -> intent }\n           .bindToLifecycle(this)\n           .subscribe { startActivity(it) }\n\n\u4e0a\u306e\u4f8b\u3067clickMenuEvents\u306fObservable<Intent>\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u308c\u306fStore\u304b\u3089\u6d41\u308c\u3066\u304f\u308bDrawer\u306e\u30a2\u30a4\u30c6\u30e0\u304c\u62bc\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u3051\u3066Drawer\u3092\u9589\u3058\u3066\u304b\u3089startActivity\u3092\u3059\u308b\u4f8b\u3067\u3059\u3002\nRxBinding\u306eDrawerLayout::drawerOpen(Int)\u306f\u521d\u671f\u5024\u3092emit\u3059\u308b\u306e\u3067skip(1)\u3092\u3064\u3051\u3066\u3044\u307e\u3059\u3002\nRxJava\u306ezipWith\u3092\u4f7f\u3046\u3053\u3068\u3067Activity\u3084Fragment\u306e\u30d7\u30ed\u30d1\u30c6\u30a3(Java\u306b\u304a\u3051\u308b\u30d5\u30a3\u30fc\u30eb\u30c9)\u306b\u72b6\u614b\u3092\u6301\u3064\u3053\u3068\u306a\u304f\u5f85\u3061\u5408\u308f\u305b\u3092\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002zipWith\u306e\u884c\u3092\u6d88\u3059\u3060\u3051\u3067\u5f85\u3061\u5408\u308f\u305b\u306e\u307f\u304c\u306a\u304f\u306a\u308b\u70b9\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\n\nSample\n\u4e0a\u8a18\u306e\u5b9f\u88c5\u306e\u4f8b\u306f\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/satorufujiwara/kotlin-android-flux\n\nDiscussion\nFlux\u3092\u610f\u8b58\u3057\u306a\u304c\u3089\u8a2d\u8a08\u30fb\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u8907\u6570\u306eDispatcher\u304c\u5b58\u5728\u3059\u308b\u70b9\u3084Action\u5185\u3067\u30c7\u30fc\u30bf\u30ec\u30a4\u30e4\u30fc\u3067\u3042\u308bRepository\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3044\u308b\u3042\u305f\u308a\u304cFlux\u3068\u306f\u9055\u3046\u306e\u304b\u306a\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u5b9f\u969b\u306b\u307e\u3068\u3081\u3066\u307f\u308b\u3068Flux\u3068\u3044\u3046\u3088\u308a\u304b\u306fMVVM\u306b\u8fd1\u3044\u5b9f\u88c5\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002Store\u304cMVVM\u306eViewModel\u306b\u3042\u305f\u308b\u3088\u3046\u306a\u5b9f\u88c5\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u70b9\u304cMVVM\u3068\u9055\u3063\u3066\u3044\u308b\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\nStore\u3078\u306e\u5909\u66f4\u306f\u5fc5\u305a\u300cAction->Dispatcher\u300d\u3092\u7d4c\u7531\u3059\u308b\nView\u304b\u3089\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u4f1d\u3048\u308bAction\u3068View\u3078\u5f71\u97ff\u304c\u3042\u308bStore\u304c\u5206\u96e2\u3055\u308c\u3066\u3044\u308b\u3002\nStore\u306e\u3069\u306e\u5909\u66f4\u3092\u3001\u3069\u306e\u671f\u9593\u3001\u3069\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067register\u3059\u308b\u304b\u306fView\u306b\u59d4\u306d\u3089\u308c\u3066\u3044\u308b (RxLifecycle\u304c\u4fbf\u5229)\nView\u3067\u8d77\u304d\u308b\u30a4\u30d9\u30f3\u30c8\u304c\u3069\u306eAction\u3092\u547c\u3076\u304b\u306fView\u306b\u59d4\u306d\u3089\u3066\u3044\u308b\n\n\u73fe\u72b6\u8003\u3048\u3066\u3044\u308b\u30e1\u30ea\u30c3\u30c8\u30c7\u30e1\u30ea\u30c3\u30c8\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\nPros\n\nAciton\u306b\u5bfe\u3059\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u304c\u7121\u304f\u306a\u308b\n\n\n\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u30eb\u30fc\u30d7\u3092\u6392\u9664\u51fa\u6765\u308b\n\u7121\u540d\u30af\u30e9\u30b9\u304cActivity\u53c2\u7167\u3059\u308b\u3053\u3068\u306b\u3088\u308b\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3092\u610f\u8b58\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\n\n\nActivity\u3084Fragment\u304c\u81ea\u8eab\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306b\u5408\u308f\u305b\u3066Store\u3092subscribe\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\n\n\nStore\u306f\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3092\u610f\u8b58\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044 \n\n\nSQLite\u3084SharedPreferences\u3092\u5909\u66f4\u3057\u3066\u304a\u3051\u3070\u753b\u9762\u9593\u306e\u72b6\u614b\u9023\u643a\u304c\u53ef\u80fd\u3068\u306a\u308b\n\u5168\u3066\u306e\u72b6\u614b\u5909\u5316\u3092Stream\u5316\u51fa\u6765\u308b\n\n\nRxJava\u597d\u304d\u306a\u4eba\u306b\u306f\u305f\u307e\u3089\u306a\u3044 \n\n\n\n\nCons\n\nDisaptcher\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u95a2\u3057\u3066\u6c17\u3092\u914d\u308b\u5fc5\u8981\u304c\u3042\u308b\n\n\nDagger2\u306eScope\u3054\u3068\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u306e\u3067Subject\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3054\u3068\u306b\u4f1d\u308f\u308b\nDispatcher\u304cSQLBrite/rx-pereferences\u3067\u3042\u308b\u5834\u5408\u306fScope\u306b\u95a2\u4fc2\u306a\u304f\u30a2\u30d7\u30ea\u5168\u4f53\u306b\u4f1d\u308f\u308b\n\n\nSQLite\u306e\u7ba1\u7406\u306b\u6c17\u3092\u914d\u308b\u5fc5\u8981\u304c\u3042\u308b\n\n\nActivity\u3054\u3068\u306eSQLite\u3067\u306fscreenId\u3067\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b \n\u30a2\u30d7\u30ea\u306e\u8d77\u52d5\u6642\u306b\u5168\u3066\u6d88\u3059\n\u30c6\u30fc\u30d6\u30eb\u9593\u306e\u540c\u671f\u306eSELECT\u6587\u306f\u90fd\u5ea6\u66f8\u304f\n\n\n\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u306f(\u307e\u3060)\u8003\u3048\u3089\u308c\u3066\u3044\u306a\u3044\n\n# Introduction\n\nAndroid\u306b\u3068\u3063\u3066\u30a2\u30d7\u30ea\u8a2d\u8a08\u306f\u6c38\u9060\u306e\u8ab2\u984c\u3060\u3068\u601d\u3044\u307e\u3059\u3002\nActivity\u304c\u72ec\u7279\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u304c\u3055\u3089\u306b\u8ab2\u984c\u3092\u8907\u96d1\u5316\u3057\u307e\u3059\u3002\n\u8a2d\u8a08\u306b\u3064\u3044\u3066\u306fMVC\u3084MVP\u3001MVVM\u3001Clean-Architecture\u3001DDD\u306a\u3069\u304c\u6700\u8fd1\u306e\u4e3b\u6d41\u3067\u3057\u3087\u3046\u304b\u3002\n\u4e0a\u8a18\u306b\u3042\u304c\u3063\u305f\u8a2d\u8a08\u624b\u6cd5\u306b\u95a2\u3057\u3066\u306f\u7d20\u6674\u3089\u3057\u3044\u8a18\u4e8b\u304c\u3044\u304f\u3064\u3082\u3042\u308b\u306e\u3067\u3068\u3066\u3082\u53c2\u8003\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n> Android\u3067\u306fMVC\u3088\u308aMVP\u306e\u65b9\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\n> http://konifar.hatenablog.com/entry/2015/04/17/010606\n> [ Android ] - \u3053\u308c\u304b\u3089\u306e\u300c\u8a2d\u8a08\u300d\u306e\u8a71\u3092\u3057\u3088\u3046\n> https://tech.recruit-mp.co.jp/mobile/android-architecture/\n> Android\u30aa\u30fc\u30eb\u30b9\u30bf\u30fc\u30ba\u3067Clean Architecture\u306b\u3064\u3044\u3066\u767a\u8868\u3057\u3066\u304d\u305f&\u53c2\u8003\u30ea\u30f3\u30af\u96c6\n> http://tomoima525.hatenablog.com/entry/2015/08/13/190731\n\n\u8a2d\u8a08\u306b\u7d76\u5bfe\u306e\u6b63\u89e3\u306f\u306a\u304f\u3001\u30c1\u30fc\u30e0\u3084\u30a2\u30d7\u30ea\u306e\u898f\u6a21\u306b\u3088\u308a\u69d8\u3005\u306a\u8a2d\u8a08\u304c\u8003\u3048\u3089\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u79c1\u3082\u6bd4\u8f03\u7684\u5927\u898f\u6a21\u306a\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u306b\u3042\u305f\u308a\u8a2d\u8a08\u3092\u8a66\u884c\u932f\u8aa4\u3057\u306a\u304c\u3089\u4f5c\u3063\u3066\u3044\u305f\u306e\u3067\u3067\u3059\u304c\u3001\u65e5\u3005\u958b\u767a\u3057\u3066\u3044\u304f\u4e2d\u3067\u3001\u3069\u3046\u3057\u3066\u3082\u89e3\u6c7a\u3057\u305f\u3044\u554f\u984c\u3092[SQLBrite](https://github.com/square/sqlbrite)\u3068\u3044\u3046\u3059\u3070\u3089\u3057\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u89e3\u6c7a\u3057\u3001\u96a3\u306e\u30c1\u30fc\u30e0\u304c[EventBus](https://github.com/greenrobot/EventBus)+[Flux](http://facebook.github.io/flux/)\u3092\u63a1\u7528\u3057\u3066\u308b\u306e\u3092\u898b\u3066\u3044\u308b\u3046\u3061\u306b\u3001**UI\u30ec\u30a4\u30e4\u30fc\u306e\u307fRxJava+Flux\u3067\u30a2\u30d7\u30ea\u3092\u8a2d\u8a08\u3059\u308b**\u3068\u3044\u3046\u5f62\u306b\u884c\u304d\u7740\u304d\u307e\u3057\u305f\u3002\n\n\u672c\u8a18\u4e8b\u3067\u306f\u5099\u5fd8\u9332\u7684\u306b\u305d\u306e\u8a2d\u8a08\u306e\u73fe\u5728\u306e\u6307\u91dd\u3092\u307e\u3068\u3081\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u73fe\u5728\u9032\u884c\u7cfb\u3067\u958b\u767a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4f55\u304b\u9593\u9055\u3063\u3066\u3044\u308b\u70b9\u3084\u3054\u610f\u898b\u7b49\u3042\u308c\u3070\u305c\u3072\u3001\u30b3\u30e1\u30f3\u30c8\u3084[Twitter](https://twitter.com/satorufujiwara)\u306a\u3069\u3067\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u809d\u3068\u306a\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u9055\u3044\u307e\u3059\u304c\u3001\u8a2d\u8a08\u306b\u3064\u3044\u3066\u306fizumin5210\u3055\u3093\u306e\u8003\u3048\u3066\u3044\u308b\u8a2d\u8a08\u306b\u975e\u5e38\u306b\u8fd1\u3044\u3093\u3067\u306f\u306a\u3044\u304b\u306a\uff1f\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n>Clean Architecture + DDD + Redux + RxJava\u3092Android\u3067\u3084\u308b\u3068\u304d\u306b\u3069\u3053\u307e\u3067\u5206\u5272\u3059\u308b\u304b\u554f\u984c\n>http://izumin.hateblo.jp/entry/2016/01/24/221943\n\n## Kotlin\n\nKotlin\u306b\u3064\u3044\u3066\u306f[\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/satorufujiwara/items/871c5b7b66c7691d82a8)\u3092\u307f\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\u8a72\u5f53\u30a2\u30d7\u30ea\u3092\u307b\u307cKotlin\u3067\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\u306a\u3069\u306fKotlin\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u8a2d\u8a08\u4e0aKotlin\u3067\u3042\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3057\u304b\u3057\u3001\u30e9\u30e0\u30c0\u3084\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u306a\u3069Kotlin\u3067\u8a18\u8ff0\u3057\u305f\u307b\u3046\u304c\u3001\u3059\u3063\u304d\u308a\u3068\u66f8\u3051\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u307e\u305f\u3001RxJava\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3060\u3044\u305f\u3044Kotlin\u5411\u3051\u306b\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u304c\u51fa\u3066\u3044\u308b\u306e\u3067\u3042\u308f\u305b\u3066\u4f7f\u3046\u306e\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\n\n## RxJava\n\nhydrakecat\u3055\u3093\u306b\u3088\u308b\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u53c2\u8003\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n> RxJava \u306f Subscriber \u3092\u4e2d\u5fc3\u306b\u6349\u3048\u308b\u3068\u7406\u89e3\u3057\u3084\u3059\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u3044\u3046\u8a71\n> http://hydrakecat.hatenablog.jp/entry/2015/12/22/RxJava_%E3%81%AF_Subscriber_%E3%82%92%E4%B8%AD%E5%BF%83%E3%81%AB%E6%8D%89%E3%81%88%E3%82%8B%E3%81%A8%E7%90%86%E8%A7%A3%E3%81%97%E3%82%84%E3%81%99%E3%81%84%E3%82%93%E3%81%98%E3%82%83%E3%81%AA%E3%81%84\n\n\u4e0a\u8a18\u8a18\u4e8b\u3067\u306f\u300cEverything is Subscriber.\u300d\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306e\u8a2d\u8a08\u306f\u5143\u3005\u306e[\u300cEverything is a stream.\u300d](http://slides.com/robwormald/everything-is-a-stream#/)\u306e\u8003\u3048\u306b\u5247\u3063\u305f\u8a2d\u8a08\u3068\u3082\u8a00\u3048\u307e\u3059\u3002\n\n\u307e\u305f`Subject`\u3092\u591a\u7528\u3059\u308b\u306e\u3067\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3082\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\n> Rx\u3067\u77e5\u3063\u3066\u304a\u304f\u3068\u4fbf\u5229\u306aSubject\u305f\u3061\n> http://qiita.com/hide92795/items/f7205c8171826cc2153b#serializedsubject\n\n## Flux\n\n\u4ee5\u4e0b\u306f[\u516c\u5f0f\u30b5\u30a4\u30c8](http://facebook.github.io/flux/)\u306b\u3042\u308b\u306b\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u56f3\u3067\u3059\u3002\n\u300cAction->Dispatcher->Store->View\u300d\u3068\u3044\u3046\u30d5\u30ed\u30fc\u3092\u5fc5\u305a\u5b88\u308a\u307e\u3059\u3002\n\n> ![flux-simple-f8-diagram-explained-1300w.png](https://qiita-image-store.s3.amazonaws.com/0/36413/1e02cc99-cf41-bb38-cd3e-a77c9e4ee621.png)\n> https://facebook.github.io/flux/docs/overview.html#content\n\nflux\u3001\u304a\u3088\u3073\u305d\u306eAndroid\u3078\u306e\u5c0e\u5165\u306fizumin5210\u3055\u3093\u306b\u3088\u308b\u8a18\u4e8b\u304c\u53c2\u8003\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n> Droidux: Redux\u3092Android\u306b\u6301\u3061\u8fbc\u3093\u3067\u72b6\u614b\u7ba1\u7406\u304b\u3089\u89e3\u653e\u3055\u308c\u3088\u3046\uff01\n> http://qiita.com/izumin5210/items/549fd15d97e9fc3b1ef7\n\n\u4e0a\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u5185\u3067\u3082`PublishSubject`\u304cDispatcher\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306e\u8a2d\u8a08\u306f\u305d\u308c\u3089\u3092\u62e1\u5145\u3057\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\n## \u3069\u3046\u3057\u3066\u3082\u89e3\u6c7a\u3057\u305f\u3044\u554f\u984c\n\n\u73fe\u5728\u4f5c\u3063\u3066\u3044\u308b\u30a2\u30d7\u30ea\u306b\u306f30\u500b\u8fd1\u3044`Activity`\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\n\u305d\u306e\u4e2d\u306b\u306f\u5225\u306e`Activity`\u3067\u8d77\u304d\u305f\u30a2\u30af\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u3001\u753b\u9762\u5185\u306e\u8868\u793a\u3092\u5909\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3082\u306e\u304c\u3044\u304f\u3064\u304b\u5b58\u5728\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u300c\u30d5\u30a9\u30ed\u30fc\u300d\u304c\u305d\u308c\u306b\u5f53\u305f\u308a\u307e\u3059\u3002\u300c\u30d5\u30a9\u30ed\u30fc\u300d\u30dc\u30bf\u30f3\u304c\u3044\u304f\u3064\u304b\u306e`Activity`\u306b\u5b58\u5728\u3057\u3066\u3044\u305f\u3089\u3001\u3069\u3053\u304b\u3067\u305d\u308c\u304c\u62bc\u3055\u308c\u305f\u5834\u5408\u306b\u5168\u3066\u306e`Activity`\u3067\u300c\u30d5\u30a9\u30ed\u30fc\u6e08\u300d\u3068\u306a\u3063\u3066\u3066\u6b32\u3057\u3044\u3001\u305d\u306e`Activity`\u304c\u305f\u3068\u3048\u30b7\u30b9\u30c6\u30e0\u306b\u3088\u3063\u3066destroy\u3055\u308c\u3066\u3044\u305f\u3068\u3057\u3066\u3082\u3002\u3053\u308c\u304c\u3069\u3046\u3057\u3066\u3082\u89e3\u6c7a\u3057\u305f\u3044\u554f\u984c\u3067\u3057\u305f\u3002\n\n\u4ed6\u306b\u3082\u30ed\u30b0\u30a4\u30f3\u60c5\u5831\u3084\u3001\u8a2d\u5b9a\u306a\u3069\u300c\u72b6\u614b\u300d\u3092`Activity`\u3092\u8de8\u3044\u3060\u30a2\u30d7\u30ea\u5168\u4f53\u3067\u7ba1\u7406\u3057\u305f\u3044\u3082\u306e\u306f\u5fc5\u305a\u3068\u3044\u3063\u3066\u5b58\u5728\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n[EventBus](https://github.com/greenrobot/EventBus)\u3001[Otto](https://github.com/square/otto)\u3001[LocalBroadcast](http://developer.android.com/intl/ja/reference/android/support/v4/content/LocalBroadcastManager.html)\u306a\u3069\u306f`Activity`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u524d\u63d0\u306a\u306e\u3067\u3001\u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u306b\u306f\u81f3\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u5168\u3066\u306e\u753b\u9762\u306e\u30c7\u30fc\u30bf\u306e\u307f\u3092\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u7684\u306b\u4e00\u7b87\u6240\u306b\u6301\u3064\u3068\u3044\u3046\u624b\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u5927\u898f\u6a21\u30a2\u30d7\u30ea\u306b\u306f\u5411\u304b\u306a\u3044\u3067\u3057\u3087\u3046\u3002\n\u4eca\u56de\u306e\u8a2d\u8a08\u3067\u306f[SQLBrite](https://github.com/square/sqlbrite)\u3092\u7528\u3044\u3066\u3053\u308c\u3092\u89e3\u6c7a\u3057\u3066\u3044\u307e\u3059\u3002\n\n# RxJava + Flux\n\n\u524d\u7f6e\u304d\u304c\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306e\u8a2d\u8a08\u306e\u8a71\u3092\u3057\u307e\u3059\u3002\n\u8981\u70b9\u306f\u4ee5\u4e0b\u306e3\u3064\u3067\u3059\u3002\n\n* Flux\u306eDispatcher/Store\u3068\u3057\u3066RxJava\u304a\u3088\u3073\u305d\u306e\u4ed6\u306eRxJava\u95a2\u9023\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\n* Store\u304b\u3089\u306f\u5168\u3066`Observable`\u3068\u3057\u3066\u72b6\u614b\u304c\u6d41\u308c\u3066\u304d\u3066\u3001\u305d\u308c\u3092\u5fc5\u8981\u306aView\u304c\u305d\u308c\u3092subscribe\u3059\u308b\u3002\n* View\u306f\u72b6\u614b\u3092\u6301\u305f\u305a\u3001Store\u304c\u72b6\u614b\u3092\u6301\u3064\u3002\n\n## \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\n\n### Dispatcher/Store\u3068\u3057\u3066\u4f7f\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\n* [RxJava](https://github.com/ReactiveX/RxJava)\n* [SQLBrite](https://github.com/square/sqlbrite)\n* [rx-preferences](https://github.com/f2prateek/rx-preferences)\n\n### \u4f75\u7528\u3057\u305f\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\n* [Dagger2](http://google.github.io/dagger/)\n * Dispatcher\u3084Store,Action\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u7ba1\u7406\u306b\n* [RxAndroid](https://github.com/ReactiveX/RxAndroid)\n* [RxLifecycle](https://github.com/trello/RxLifecycle)\n* [RxBinding](https://github.com/JakeWharton/RxBinding)\n * \u30e6\u30fc\u30b6\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c`Observable`\u3068\u3057\u3066\u6d41\u308c\u3066\u304f\u308b\u306e\u3067\u3001\u5168\u3066\u3092Stream\u5316\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\nRxBinding\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u306e\u5165\u529b\u30a4\u30d9\u30f3\u30c8\u3084\u30bb\u30f3\u30b5\u30fc\u306a\u3069\u306e\u30a4\u30d9\u30f3\u30c8\u3092`Observable`\u306b\u5909\u3048\u308b\u3082\u306e\u306f\u7a4d\u6975\u7684\u306b\u5c0e\u5165\u3057\u305f\u65b9\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u6700\u5c0f\u8a2d\u8a08\n\nflux\u3067\u306fDispatcher\u30921\u3064\u7528\u610f\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u30eb\u30fc\u30eb\u306b\u5247\u3089\u305aDispatcher\u306f\u300c\u30a2\u30d7\u30ea\u5168\u4f53\u3067\u5171\u6709\u3055\u308c\u308b\u3082\u306e\u300d\u3068\u3001\u7279\u5b9a\u306e\u300cActivity\u300d\u5185\u3067\u306e\u307f\u4f7f\u308f\u308c\u308b\u3082\u306e\u306bScope\u3092\u5206\u3051\u3066\u8907\u6570\u7528\u610f\u3059\u308b\u3053\u3068\u3068\u3057\u307e\u3059\u3002\n\u3053\u308c\u3089\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u7ba1\u7406\u306fDagger2\u3092\u7528\u3044\u3066\u884c\u3044\u307e\u3059\u3002\n\n```\n\u251c data\n\u251c ui\n\u2502 \u251c main\n\u2502 \u2502 \u251c MainAction\n\u2502 \u2502 \u251c MainActivity\n\u2502 \u2502 \u251c MainComponent\n\u2502 \u2502 \u251c MainDispatcher\n\u2502 \u2502 \u251c MainFragment\n\u2502 \u2502 \u251c MainModule\n\u2502 \u2502 \u251c MainScope\n\u2502 \u2502 \u2514 MainStore\n\u2502 \u251c AppAction\n\u2502 \u251c AppDispatcher\n\u2502 \u251c AppComponent\n\u2502 \u251c AppModule\n\u2502 \u251c AppScope\n\u2502 \u2514 AppStore\n```\n\n## Dispatcher/Store\u306e\u7a2e\u985e\n\ndispatch\u3057\u305f\u3044\u30a4\u30d9\u30f3\u30c8\u3084\u4fdd\u5b58\u3057\u305f\u3044\u72b6\u614b\u306b\u3088\u3063\u3066\u4f7f\u3044\u5206\u3051\u307e\u3059\u3002\n\n### PublishSubject\n\nsubscribe\u3057\u305f\u5f8c\u306eemit\u3092Subscriber\u306b\u4f1d\u3048\u308bSubject\u3067\u3059\u3002\n\u72b6\u614b\u3092\u4fdd\u6301\u3059\u308b\u5fc5\u8981\u306e\u306a\u3044\u4e00\u6642\u7684\u306aEvent\u306a\u3069\u3092dispatch\u3059\u308b\u306e\u306b\u5411\u3044\u3066\u3044\u307e\u3059\u3002\n\n```kotlin:ErrorDispatcher.kt\nval errorEventObservable = SerializedSubject(PublishSubject.create<String>())\n```\n\n```kotlin:ErrorStore.kt\nfun errorEvents() = errorDispatcher.errorEventObservable\n```\n\n```kotlin:MainActivity.kt\nclass MainActivity : RxAppCompatActivity() {\n\n    @Inject lateinit var mainStore: MainStore\n\n    override fun onResume() {\n        super.onResume()\n        mainStore.errors()\n                .observeOn(AndroidSchedulers.mainThread())\n                .bindToLifecycle(this)\n                .subscribe { showToast(R.string.error) }\n    }\n```\n`onResume`\u5185\u3067subscribe\u3059\u308c\u3070RxLifecycle\u306b\u3088\u3063\u3066`onPause`\u5185\u3067unsubcribe\u3055\u308c\u308b\u306e\u3067\u3001Activity\u304c\u6700\u524d\u9762\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u6642\u306b\u7279\u5b9a\u306eAction\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u306a\u3069\u306b\u4f7f\u3048\u307e\u3059\u3002\n\n### BehaviorSubject\n\n`PublishSubject`\u3068\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001subscribe\u3057\u305f\u969b\u306b\u76f4\u524d\u306e\u5024\u3092emit\u3059\u308b\u306e\u3067\u72b6\u614b\u3092\u4fdd\u6301\u51fa\u6765\u307e\u3059\u3002\n\u753b\u9762\u9593\u3067\u9023\u643a\u3059\u308b\u5fc5\u8981\u306e\u306a\u3044\u72b6\u614b\u3084\u3001\u753b\u9762\u9593\u3067\u9023\u643a\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u3066\u305d\u306e\u72b6\u614b\u3078\u306e\u30a2\u30af\u30bb\u30b9\u304c\u591a\u3044\u3082\u306e\u306b\u5411\u3044\u3066\u3044\u307e\u3059\u3002\n\n```kotlin:UserDispatcher.kt\nval userObservable = SerializedSubject(BehaviorSubject.create<User>())\n```\n\n```kotlin:UserStore.kt\nfun user() = userDispatcher.userObservable\n```\n\n```kotlin:MainActivity.kt\nclass MainActivity : RxAppCompatActivity() {\n\n    @Inject lateinit var userStore: UserStore\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.main_activity)\n        userStore.user()\n                .observeOn(AndroidSchedulers.mainThread())\n                .bindToLifecycle(this)\n                .subscribe { userNameTextView.text = it.name }\n    }\n```\n\n### BriteDatabase\n\n[SQLBrite](https://github.com/square/sqlbrite)\u306fSQLite\u306equery\u3092stream\u306b\u5909\u63db\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002subscribe\u3057\u3066\u3044\u308bquery\u304c\u3042\u308b\u5834\u5408\u306b\u3001\u540c\u3058\u30c6\u30fc\u30d6\u30eb\u306b\u5909\u66f4\u304c\u3042\u308b\u3068\u518d\u5ea6\u540c\u4e00query\u3092SQLite\u306b\u9069\u5fdc\u3057\u3001\u7d50\u679c\u304cSubscriber\u3078emit\u3055\u308c\u307e\u3059\u3002\n\n>```Java:BriteDatabase.java\n  public long insert(@NonNull String table, @NonNull ContentValues values,\n      @ConflictAlgorithm int conflictAlgorithm) {\n    SQLiteDatabase db = getWriteableDatabase();\n    if (logging) {\n      log(\"INSERT\\n  table: %s\\n  values: %s\\n  conflictAlgorithm: %s\", table, values,\n          conflictString(conflictAlgorithm));\n    }\n    long rowId = db.insertWithOnConflict(table, null, values, conflictAlgorithm);\n    if (logging) log(\"INSERT id: %s\", rowId);\n    if (rowId != -1) {\n      // Only send a table trigger if the insert was successful.\n      sendTableTrigger(Collections.singleton(table));\n    }\n    return rowId;\n  }\n```\n>https://github.com/square/sqlbrite/blob/0.6.2/sqlbrite/src/main/java/com/squareup/sqlbrite/BriteDatabase.java#L385\n\n\u4e0a\u8a18\u306finsert\u6642\u306e`BriteDatabase`\u5185\u306e\u30b3\u30fc\u30c9\u3067\u3059\u304c\u3001`sendTableTrigger`\u306b\u3088\u3063\u3066\u305d\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u5bfe\u3057\u3066\u306e\u5909\u66f4\u304c\u4ed6\u306eSubscriber\u306b\u4f1d\u308f\u308a\u307e\u3059\u3002\u3053\u308c\u3092Dispatcher\u3068\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002\n\n```kotlin:MainDispatcher.kt\nclass MainDispatcher(val db: BriteDatabase) {\nprivate val emptyObservable = SerializedSubject(PublishSubject.create<String>())\n\n    fun repoObservable(screenId: String) =\n            db.createQuery(TABLE_NAME, \"SELECT * FROM $TABLE_NAME WHERE $SCREEN_ID=?\", screenId)\n                    .mapToList { Repo(it.getStringByName(REPO_ID), it.getStringByName(REPO_NAME)) }\n                    .mergeWith(emptyObservable.filter { it == screenId }.map { emptyList<Repo>() })\n\n    fun dispatch(screenId: String, list: List<Repo>) = db.newTransaction().run {\n        var rows = 0\n        try {\n            db.delete(TABLE_NAME, \"$SCREEN_ID=?\", screenId)\n            list.filterNotNull().map { repo ->\n                ContentValues().apply {\n                    put(SCREEN_ID, screenId)\n                    put(REPO_ID, repo.id)\n                    put(REPO_NAME, repo.name)\n                }\n            }.forEach {\n                db.insert(TABLE_NAME, it)\n                rows++\n            }\n            markSuccessful()\n        } finally {\n            end()\n        }\n        if (list.size == 0) emptyObservable.onNext(screenId)\n        rows\n    }\n}\n```\n\n`BriteDatabase::createQuery`\u3067\u6b32\u3057\u3044\u30c7\u30fc\u30bf\u306eSELECT\u6587\u3092\u66f8\u3044\u3066\u304a\u3051\u3070\u540c\u30c6\u30fc\u30d6\u30eb\u3078\u306e\u5909\u66f4\u3092subscribe\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002`mapToList`\u3092\u4f7f\u3048\u3070Cursor\u3092\u6b32\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078map\u51fa\u6765\u307e\u3059\u3002\n\n\u4e0a\u8a18\u306e\u4f8b\u3067\u306fdispatch\u3059\u308b\u6642\u306bdelete\u3057\u3066insert\u3001\u3059\u306a\u308f\u3061replace\u3092\u3057\u3066\u3044\u307e\u3059\u30020\u4ef6\u304b\u30890\u4ef6\u306b\u306a\u3063\u305f\u5834\u5408\u306e\u307f\u3001SQLBrite\u306f\u5185\u90e8\u3067dispatch\u3057\u307e\u305b\u3093\u3002\u3053\u306e\u6319\u52d5\u304c\u4ed6\u306eDispatcher\u3068\u9055\u3046\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306e\u307f\u5225\u306eSubject(\u4e0a\u8a18\u306e\u4f8b\u3067\u306f`emptyObservable`)\u304b\u3089\u5024\u3092\u9001\u308b\u3053\u3068\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30c6\u30fc\u30d6\u30eb\u306f\u540c\u3058Activity\u306e\u5225\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3082\u5171\u6709\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3054\u3068\u306b`screenId`\u3092\u5272\u308a\u632f\u3063\u3066\u305d\u308c\u3089\u3092\u533a\u5225\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```kotlin:MainActivity.kt\nprivate var screenId: String by Delegates.notNull()\n\noverride fun onSaveInstanceState(outState: Bundle?) {\n    super.onSaveInstanceState(outState)\n    outState?.putString(KEY_SCREEN_ID, screenId)\n}\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    screenId = savedInstanceState?.getString(KEY_SCREEN_ID) ?: hashCode().toString()\n}\n```\n\nSQL\u3092\u66f8\u304f\u7169\u96d1\u3055\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u524d\u8ff0\u306e\u30d5\u30a9\u30ed\u30fc\u306e\u3088\u3046\u306b\u4ed6\u306eStore\u306b\u5909\u66f4\u3092\u4f1d\u3048\u305f\u3044\u5834\u5408\u306f\u30c6\u30fc\u30d6\u30eb\u3092\u5909\u66f4\u3057\u3066\u304a\u3051\u3070\u3001\u305d\u308c\u304cStore\u3092\u901a\u3058\u3066View\u306b\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\u753b\u9762\u9593\u3067\u30c7\u30fc\u30bf\u3092\u5171\u6709\u3057\u305f\u3044\u304c\u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u3082\u306e\u3001\u30ea\u30b9\u30c8\u306a\u3069\u3067\u9806\u756a\u304c\u610f\u5473\u3092\u6301\u3064\u3082\u306e\u3092\u4fdd\u6301\u3059\u308b\u306e\u306b\u5411\u3044\u3066\u3044\u308bDispatcher\u3067\u3059\u3002\n\n### RxSharedPreferences\n\n[rx-preferences](https://github.com/f2prateek/rx-preferences)\u3082SQLBrite\u3068\u540c\u69d8\u306bSharedPreferences\u306e\u7279\u5b9a\u306ekey\u306b\u5bfe\u3059\u308b\u5909\u66f4\u3092\u4ed6\u306eSubscriber\u306bemit\u3057\u307e\u3059\u3002\u3053\u308c\u3092Dispatcher\u3068\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002\n\n```kotlin:UserDispatcher.kt\nclass UserDispatcher(val context: Context) {\n\n    fun user() = context.getRxPrefs(\"user\").getString(\"id\").asObservable()\n\n    fun dispatchUser(id: String) = context.getRxPrefs(\"user\").getString(\"id\").set(id)\n}\n\nfun Context.getRxPrefs(name: String): RxSharedPreferences = RxSharedPreferences.create(\n        getSharedPreferences(BuildConfig.APPLICATION_ID + '.' + name, Context.MODE_PRIVATE))\n```\n\n\u753b\u9762\u9593\u3067\u30c7\u30fc\u30bf\u3092\u5171\u6709\u3057\u305f\u3044\u304c\u9806\u756a\u306f\u95a2\u4fc2\u306a\u304f\u3001\u304b\u3064\u5e38\u306b\u4fdd\u6301\u3057\u3066\u304a\u304f\u5fc5\u8981\u306e\u306a\u3044\u3082\u306e\u306b\u5411\u3044\u3066\u3044\u308bDispatcher\u3067\u3059\u3002\n\n# RxBinding\u3068\u306e\u4f75\u7528\n\nStore\u304b\u3089\u306fstream\u3068\u3057\u3066\u30c7\u30fc\u30bf\u304c\u6d41\u308c\u3066\u304d\u307e\u3059\u306e\u3067\u3001RxBinding\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u306b\u3088\u3063\u3066RxJava\u306e\u6069\u6075\u3092\u53d7\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```kotlin\nview.globalLayouts()\n    .withLatestFrom(store.data()) { view, data -> data }\n    .first()\n    .bindToLifecycle(this)\n    .subscribe { // Bind data to views. }\n```\n\u4e0a\u306e\u4f8b\u3067\u306f[`ViewTreeObserver.OnGlobalLayoutListener`](http://developer.android.com/intl/ja/reference/android/view/ViewTreeObserver.OnGlobalLayoutListener.html)\u3092\u7528\u3044\u3066View\u306e\u9ad8\u3055\u306a\u3069\u304c\u6c7a\u307e\u3063\u3066\u304b\u3089Store\u306e\u30c7\u30fc\u30bf\u3092View\u306b\u53cd\u6620\u3055\u305b\u3066\u3044\u307e\u3059\u3002\n\n```kotlin\ndrawerStore.clickMenuEvents()\n           .observeOn(AndroidSchedulers.mainThread())\n           .doOnNext { activity.drawerLayout.closeDrawers() }\n           .zipWith(drawerLayout.drawerOpen(Gravity.LEFT).skip(1).filter { !it }) { intent, drawer -> intent }\n           .bindToLifecycle(this)\n           .subscribe { startActivity(it) }\n```\n\u4e0a\u306e\u4f8b\u3067`clickMenuEvents`\u306f`Observable<Intent>`\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u308c\u306fStore\u304b\u3089\u6d41\u308c\u3066\u304f\u308bDrawer\u306e\u30a2\u30a4\u30c6\u30e0\u304c\u62bc\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u3051\u3066Drawer\u3092\u9589\u3058\u3066\u304b\u3089startActivity\u3092\u3059\u308b\u4f8b\u3067\u3059\u3002\nRxBinding\u306e`DrawerLayout::drawerOpen(Int)`\u306f\u521d\u671f\u5024\u3092emit\u3059\u308b\u306e\u3067`skip(1)`\u3092\u3064\u3051\u3066\u3044\u307e\u3059\u3002\nRxJava\u306e`zipWith`\u3092\u4f7f\u3046\u3053\u3068\u3067Activity\u3084Fragment\u306e\u30d7\u30ed\u30d1\u30c6\u30a3(Java\u306b\u304a\u3051\u308b\u30d5\u30a3\u30fc\u30eb\u30c9)\u306b\u72b6\u614b\u3092\u6301\u3064\u3053\u3068\u306a\u304f\u5f85\u3061\u5408\u308f\u305b\u3092\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002`zipWith`\u306e\u884c\u3092\u6d88\u3059\u3060\u3051\u3067\u5f85\u3061\u5408\u308f\u305b\u306e\u307f\u304c\u306a\u304f\u306a\u308b\u70b9\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\n\n# Sample\n\n\u4e0a\u8a18\u306e\u5b9f\u88c5\u306e\u4f8b\u306f\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\n\nhttps://github.com/satorufujiwara/kotlin-android-flux\n\n# Discussion\n\nFlux\u3092\u610f\u8b58\u3057\u306a\u304c\u3089\u8a2d\u8a08\u30fb\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u8907\u6570\u306eDispatcher\u304c\u5b58\u5728\u3059\u308b\u70b9\u3084Action\u5185\u3067\u30c7\u30fc\u30bf\u30ec\u30a4\u30e4\u30fc\u3067\u3042\u308bRepository\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3044\u308b\u3042\u305f\u308a\u304cFlux\u3068\u306f\u9055\u3046\u306e\u304b\u306a\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u5b9f\u969b\u306b\u307e\u3068\u3081\u3066\u307f\u308b\u3068Flux\u3068\u3044\u3046\u3088\u308a\u304b\u306fMVVM\u306b\u8fd1\u3044\u5b9f\u88c5\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002Store\u304cMVVM\u306eViewModel\u306b\u3042\u305f\u308b\u3088\u3046\u306a\u5b9f\u88c5\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u70b9\u304cMVVM\u3068\u9055\u3063\u3066\u3044\u308b\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\n* Store\u3078\u306e\u5909\u66f4\u306f\u5fc5\u305a\u300cAction->Dispatcher\u300d\u3092\u7d4c\u7531\u3059\u308b\n* View\u304b\u3089\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u4f1d\u3048\u308bAction\u3068View\u3078\u5f71\u97ff\u304c\u3042\u308bStore\u304c\u5206\u96e2\u3055\u308c\u3066\u3044\u308b\u3002\n* Store\u306e\u3069\u306e\u5909\u66f4\u3092\u3001\u3069\u306e\u671f\u9593\u3001\u3069\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067register\u3059\u308b\u304b\u306fView\u306b\u59d4\u306d\u3089\u308c\u3066\u3044\u308b (RxLifecycle\u304c\u4fbf\u5229)\n* View\u3067\u8d77\u304d\u308b\u30a4\u30d9\u30f3\u30c8\u304c\u3069\u306eAction\u3092\u547c\u3076\u304b\u306fView\u306b\u59d4\u306d\u3089\u3066\u3044\u308b\n\n\u73fe\u72b6\u8003\u3048\u3066\u3044\u308b\u30e1\u30ea\u30c3\u30c8\u30c7\u30e1\u30ea\u30c3\u30c8\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\n## Pros\n\n* Aciton\u306b\u5bfe\u3059\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u304c\u7121\u304f\u306a\u308b\n * \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u30eb\u30fc\u30d7\u3092\u6392\u9664\u51fa\u6765\u308b\n * \u7121\u540d\u30af\u30e9\u30b9\u304cActivity\u53c2\u7167\u3059\u308b\u3053\u3068\u306b\u3088\u308b\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3092\u610f\u8b58\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\n* Activity\u3084Fragment\u304c\u81ea\u8eab\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306b\u5408\u308f\u305b\u3066Store\u3092subscribe\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\n * Store\u306f\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3092\u610f\u8b58\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044 \n* SQLite\u3084SharedPreferences\u3092\u5909\u66f4\u3057\u3066\u304a\u3051\u3070\u753b\u9762\u9593\u306e\u72b6\u614b\u9023\u643a\u304c\u53ef\u80fd\u3068\u306a\u308b\n* \u5168\u3066\u306e\u72b6\u614b\u5909\u5316\u3092Stream\u5316\u51fa\u6765\u308b\n * RxJava\u597d\u304d\u306a\u4eba\u306b\u306f\u305f\u307e\u3089\u306a\u3044 \n\n## Cons\n\n* Disaptcher\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u95a2\u3057\u3066\u6c17\u3092\u914d\u308b\u5fc5\u8981\u304c\u3042\u308b\n * Dagger2\u306eScope\u3054\u3068\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u306e\u3067Subject\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3054\u3068\u306b\u4f1d\u308f\u308b\n * Dispatcher\u304cSQLBrite/rx-pereferences\u3067\u3042\u308b\u5834\u5408\u306fScope\u306b\u95a2\u4fc2\u306a\u304f\u30a2\u30d7\u30ea\u5168\u4f53\u306b\u4f1d\u308f\u308b\n* SQLite\u306e\u7ba1\u7406\u306b\u6c17\u3092\u914d\u308b\u5fc5\u8981\u304c\u3042\u308b\n * Activity\u3054\u3068\u306eSQLite\u3067\u306fscreenId\u3067\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b \n * \u30a2\u30d7\u30ea\u306e\u8d77\u52d5\u6642\u306b\u5168\u3066\u6d88\u3059\n * \u30c6\u30fc\u30d6\u30eb\u9593\u306e\u540c\u671f\u306eSELECT\u6587\u306f\u90fd\u5ea6\u66f8\u304f\n* \u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u306f(\u307e\u3060)\u8003\u3048\u3089\u308c\u3066\u3044\u306a\u3044\n", "tags": ["Android", "RxJava", "flux", "Kotlin"]}