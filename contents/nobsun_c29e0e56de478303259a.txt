{"tags": ["Haskell", "yhpg", "\u3069\u3046\u66f8\u304f"], "context": "\u3075\u305f\u30de\u30b9\u306e\u9818\u57df\u306e\u6570\n\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304fF01\u306e\u554f\u984c\n\nF01.hs\nmodule F01 where\n\nimport Control.Arrow\nimport Numeric\nimport Data.Char\nimport Data.Function\nimport Data.List\nimport Text.Printf\nimport Debug.Trace\n\ninfixr ...\n(...) :: Show b => (b -> c) -> (a -> b) -> (a -> c)\n(f ... g) x = let y = g x in trace (show y) (f y)\n\n\ntype Board = [[Int]]\n\nreadBoard :: String -> Board\nreadBoard = map (map digitToInt)\n          . map (printf \"%08b\" :: Int -> String)\n          . map (fst . head  . readHex :: String -> Int)\n          . words\n          . map cnv\n  where\n    cnv '/' = ' '\n    cnv c   = c\n\ntype Line = [(Int,(Int,Int))]\n\ncheckBoard :: Board -> [Line]\ncheckBoard = map unzipp\n           . slice3\n           . (twos:)\n           . (++[twos])\n\ntwos :: [Int]\ntwos = replicate 8 2\n\nslice3 :: [a] -> [(a,(a,a))]\nslice3 (x:xs@(y:z:_)) = (y,(x,z)) : slice3 xs\nslice3 _              = []\n\nunzipp :: ([a],([a],[a])) -> [(a,(a,a))]\nunzipp = uncurry zip . second (uncurry zip)\n\nh2count :: Line -> (Int,Int)\nh2count = count (0,0)\n        . filter contline\n        . filter ((2 ==) . length)\n        . groupBy ((==) `on` fst)\n  where\n    count (zrs,ons) [] = (zrs,ons)\n    count (zrs,ons) (((0,_):_):rs) = count (succ zrs,ons) rs\n    count (zrs,ons) (((1,_):_):rs) = count (zrs,succ ons) rs\n    contline [(x,(y,z)),(x',(y',z'))] = x /= y && x /= z && x' /= y' && x' /= z'\n\ntype Problem = String\ntype Answer  = String\n\nf01 :: Problem -> Answer\nf01 = showCount\n    . foldr add (0,0)\n    . map h2count\n    . uncurry (++)\n    . (checkBoard &&& checkBoard . transpose)\n    . readBoard\n\nshowCount :: (Int,Int) -> String\nshowCount (x,y) = show x++\",\"++show y\n\nadd :: (Int,Int) -> (Int,Int) -> (Int,Int)\nadd (x,y) (z,w) = (x+z,y+w)\n\n{- |\n>>> test ( \"dc/bc/a7/59/03/d5/d4/ea\", \"2,3\" )\nTrue    \n>>> test ( \"ff/ff/ff/ff/ff/ff/ff/ff\", \"0,0\" )\nTrue    \n>>> test ( \"00/00/00/00/00/00/00/00\", \"0,0\" )\nTrue    \n>>> test ( \"cc/33/cc/33/cc/33/cc/33\", \"16,16\" )\nTrue    \n>>> test ( \"aa/aa/55/55/aa/aa/55/55\", \"16,16\" )\nTrue    \n>>> test ( \"ac/a3/5c/53/ca/3a/c5/35\", \"8,8\" )\nTrue    \n>>> test ( \"db/00/db/00/db/00/aa/aa\", \"0,13\" )\nTrue    \n>>> test ( \"24/24/db/24/24/db/24/24\", \"0,12\" )\nTrue    \n>>> test ( \"d7/d7/e9/f1/f7/de/60/56\", \"3,2\" )\nTrue    \n>>> test ( \"17/7d/64/9b/a5/39/53/a6\", \"2,2\" )\nTrue    \n>>> test ( \"bb/8f/18/fb/89/c2/c7/35\", \"1,2\" )\nTrue    \n>>> test ( \"6d/63/20/08/54/cd/32/4f\", \"2,2\" )\nTrue    \n>>> test ( \"a9/ca/cd/46/99/e6/f0/30\", \"2,2\" )\nTrue    \n>>> test ( \"5b/70/fd/45/e2/a1/ab/9a\", \"1,2\" )\nTrue    \n>>> test ( \"24/e4/a8/12/e1/a6/3f/f3\", \"2,1\" )\nTrue    \n>>> test ( \"79/32/2e/07/d5/10/e7/9d\", \"2,2\" )\nTrue    \n>>> test ( \"60/bc/ab/ec/1f/eb/63/2c\", \"4,2\" )\nTrue    \n>>> test ( \"a5/dd/92/4e/67/c6/dc/34\", \"6,1\" )\nTrue    \n>>> test ( \"aa/96/6d/67/d2/a8/ac/90\", \"3,2\" )\nTrue    \n>>> test ( \"95/72/7d/5c/47/dc/ef/99\", \"4,0\" )\nTrue    \n>>> test ( \"17/d6/6a/27/1f/25/26/b8\", \"2,1\" )\nTrue    \n>>> test ( \"f0/f3/76/c5/31/ca/6b/ae\", \"1,2\" )\nTrue    \n>>> test ( \"01/59/26/fa/8c/70/12/cd\", \"1,4\" )\nTrue    \n>>> test ( \"1a/c3/1f/0b/83/b6/81/0d\", \"0,5\" )\nTrue    \n>>> test ( \"4c/49/05/cf/54/bb/1f/da\", \"1,2\" )\nTrue    \n>>> test ( \"eb/7c/d5/09/2a/c2/14/6b\", \"0,7\" )\nTrue    \n>>> test ( \"b4/d3/4c/c4/ed/19/e8/63\", \"1,3\" )\nTrue    \n>>> test ( \"bd/bc/6d/60/9b/00/9a/32\", \"2,4\" )\nTrue    \n>>> test ( \"94/97/3f/e3/c7/06/15/c0\", \"2,2\" )\nTrue    \n>>> test ( \"5f/1d/67/16/b8/f7/0a/2a\", \"2,2\" )\nTrue    \n>>> test ( \"df/e6/f9/4f/59/e9/1f/ee\", \"3,0\" )\nTrue    \n>>> test ( \"5a/53/9a/9a/73/b4/37/07\", \"3,2\" )\nTrue    \n>>> test ( \"bd/87/7c/e7/c0/37/82/da\", \"2,3\" )\nTrue    \n>>> test ( \"3d/c0/13/ac/57/3d/15/78\", \"2,2\" )\nTrue    \n>>> test ( \"63/64/54/3a/40/28/4e/4e\", \"0,3\" )\nTrue    \n>>> test ( \"f6/81/c9/15/00/4c/a0/a8\", \"1,4\" )\nTrue    \n>>> test ( \"19/41/df/f8/e3/74/6b/9b\", \"4,2\" )\nTrue    \n>>> test ( \"d5/0b/dd/35/3b/d2/0b/6b\", \"1,5\" )\nTrue    \n>>> test ( \"08/b7/91/f3/6e/3c/74/a0\", \"0,0\" )\nTrue    \n>>> test ( \"b8/a8/b4/a6/93/2c/94/3f\", \"0,0\" )\nTrue    \n>>> test ( \"88/22/21/ee/dc/19/43/01\", \"0,0\" )\nTrue    \n>>> test ( \"e1/ee/35/bc/fc/00/8e/fe\", \"0,0\" )\nTrue    \n>>> test ( \"3c/42/63/5f/27/47/07/90\", \"0,0\" )\nTrue\n-}\n\ntest :: (Problem,Answer) -> Bool\ntest (p,a) = f01 p == a\n\n\n[\u3075\u305f\u30de\u30b9\u306e\u9818\u57df\u306e\u6570](http://nabetani.sakura.ne.jp/hena/ordf01_twicel/)\n[\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304fF01\u306e\u554f\u984c](http://qiita.com/Nabetani/items/8e02ede04315b4eadd6d)\n\n```haskell:F01.hs\nmodule F01 where\n\nimport Control.Arrow\nimport Numeric\nimport Data.Char\nimport Data.Function\nimport Data.List\nimport Text.Printf\nimport Debug.Trace\n\ninfixr ...\n(...) :: Show b => (b -> c) -> (a -> b) -> (a -> c)\n(f ... g) x = let y = g x in trace (show y) (f y)\n\n\ntype Board = [[Int]]\n\nreadBoard :: String -> Board\nreadBoard = map (map digitToInt)\n          . map (printf \"%08b\" :: Int -> String)\n          . map (fst . head  . readHex :: String -> Int)\n          . words\n          . map cnv\n  where\n    cnv '/' = ' '\n    cnv c   = c\n\ntype Line = [(Int,(Int,Int))]\n\ncheckBoard :: Board -> [Line]\ncheckBoard = map unzipp\n           . slice3\n           . (twos:)\n           . (++[twos])\n\ntwos :: [Int]\ntwos = replicate 8 2\n\nslice3 :: [a] -> [(a,(a,a))]\nslice3 (x:xs@(y:z:_)) = (y,(x,z)) : slice3 xs\nslice3 _              = []\n\nunzipp :: ([a],([a],[a])) -> [(a,(a,a))]\nunzipp = uncurry zip . second (uncurry zip)\n\nh2count :: Line -> (Int,Int)\nh2count = count (0,0)\n        . filter contline\n        . filter ((2 ==) . length)\n        . groupBy ((==) `on` fst)\n  where\n    count (zrs,ons) [] = (zrs,ons)\n    count (zrs,ons) (((0,_):_):rs) = count (succ zrs,ons) rs\n    count (zrs,ons) (((1,_):_):rs) = count (zrs,succ ons) rs\n    contline [(x,(y,z)),(x',(y',z'))] = x /= y && x /= z && x' /= y' && x' /= z'\n\ntype Problem = String\ntype Answer  = String\n\nf01 :: Problem -> Answer\nf01 = showCount\n    . foldr add (0,0)\n    . map h2count\n    . uncurry (++)\n    . (checkBoard &&& checkBoard . transpose)\n    . readBoard\n\nshowCount :: (Int,Int) -> String\nshowCount (x,y) = show x++\",\"++show y\n\nadd :: (Int,Int) -> (Int,Int) -> (Int,Int)\nadd (x,y) (z,w) = (x+z,y+w)\n\n{- |\n>>> test ( \"dc/bc/a7/59/03/d5/d4/ea\", \"2,3\" )\nTrue    \n>>> test ( \"ff/ff/ff/ff/ff/ff/ff/ff\", \"0,0\" )\nTrue    \n>>> test ( \"00/00/00/00/00/00/00/00\", \"0,0\" )\nTrue    \n>>> test ( \"cc/33/cc/33/cc/33/cc/33\", \"16,16\" )\nTrue    \n>>> test ( \"aa/aa/55/55/aa/aa/55/55\", \"16,16\" )\nTrue    \n>>> test ( \"ac/a3/5c/53/ca/3a/c5/35\", \"8,8\" )\nTrue    \n>>> test ( \"db/00/db/00/db/00/aa/aa\", \"0,13\" )\nTrue    \n>>> test ( \"24/24/db/24/24/db/24/24\", \"0,12\" )\nTrue    \n>>> test ( \"d7/d7/e9/f1/f7/de/60/56\", \"3,2\" )\nTrue    \n>>> test ( \"17/7d/64/9b/a5/39/53/a6\", \"2,2\" )\nTrue    \n>>> test ( \"bb/8f/18/fb/89/c2/c7/35\", \"1,2\" )\nTrue    \n>>> test ( \"6d/63/20/08/54/cd/32/4f\", \"2,2\" )\nTrue    \n>>> test ( \"a9/ca/cd/46/99/e6/f0/30\", \"2,2\" )\nTrue    \n>>> test ( \"5b/70/fd/45/e2/a1/ab/9a\", \"1,2\" )\nTrue    \n>>> test ( \"24/e4/a8/12/e1/a6/3f/f3\", \"2,1\" )\nTrue    \n>>> test ( \"79/32/2e/07/d5/10/e7/9d\", \"2,2\" )\nTrue    \n>>> test ( \"60/bc/ab/ec/1f/eb/63/2c\", \"4,2\" )\nTrue    \n>>> test ( \"a5/dd/92/4e/67/c6/dc/34\", \"6,1\" )\nTrue    \n>>> test ( \"aa/96/6d/67/d2/a8/ac/90\", \"3,2\" )\nTrue    \n>>> test ( \"95/72/7d/5c/47/dc/ef/99\", \"4,0\" )\nTrue    \n>>> test ( \"17/d6/6a/27/1f/25/26/b8\", \"2,1\" )\nTrue    \n>>> test ( \"f0/f3/76/c5/31/ca/6b/ae\", \"1,2\" )\nTrue    \n>>> test ( \"01/59/26/fa/8c/70/12/cd\", \"1,4\" )\nTrue    \n>>> test ( \"1a/c3/1f/0b/83/b6/81/0d\", \"0,5\" )\nTrue    \n>>> test ( \"4c/49/05/cf/54/bb/1f/da\", \"1,2\" )\nTrue    \n>>> test ( \"eb/7c/d5/09/2a/c2/14/6b\", \"0,7\" )\nTrue    \n>>> test ( \"b4/d3/4c/c4/ed/19/e8/63\", \"1,3\" )\nTrue    \n>>> test ( \"bd/bc/6d/60/9b/00/9a/32\", \"2,4\" )\nTrue    \n>>> test ( \"94/97/3f/e3/c7/06/15/c0\", \"2,2\" )\nTrue    \n>>> test ( \"5f/1d/67/16/b8/f7/0a/2a\", \"2,2\" )\nTrue    \n>>> test ( \"df/e6/f9/4f/59/e9/1f/ee\", \"3,0\" )\nTrue    \n>>> test ( \"5a/53/9a/9a/73/b4/37/07\", \"3,2\" )\nTrue    \n>>> test ( \"bd/87/7c/e7/c0/37/82/da\", \"2,3\" )\nTrue    \n>>> test ( \"3d/c0/13/ac/57/3d/15/78\", \"2,2\" )\nTrue    \n>>> test ( \"63/64/54/3a/40/28/4e/4e\", \"0,3\" )\nTrue    \n>>> test ( \"f6/81/c9/15/00/4c/a0/a8\", \"1,4\" )\nTrue    \n>>> test ( \"19/41/df/f8/e3/74/6b/9b\", \"4,2\" )\nTrue    \n>>> test ( \"d5/0b/dd/35/3b/d2/0b/6b\", \"1,5\" )\nTrue    \n>>> test ( \"08/b7/91/f3/6e/3c/74/a0\", \"0,0\" )\nTrue    \n>>> test ( \"b8/a8/b4/a6/93/2c/94/3f\", \"0,0\" )\nTrue    \n>>> test ( \"88/22/21/ee/dc/19/43/01\", \"0,0\" )\nTrue    \n>>> test ( \"e1/ee/35/bc/fc/00/8e/fe\", \"0,0\" )\nTrue    \n>>> test ( \"3c/42/63/5f/27/47/07/90\", \"0,0\" )\nTrue\n-}\n\ntest :: (Problem,Answer) -> Bool\ntest (p,a) = f01 p == a\n```\n"}