{"context": "\u5c4b\u5916\u9ad8\u5ea6\u6e2c\u5b9a\u3092\u3059\u308b\u305f\u3081\u306b\u6c17\u5727\u8a08\u3092\u8cfc\u5165\u3002\u672c\u65e5\u5c4a\u3044\u305f\u3002\nhttp://akizukidenshi.com/catalog/g/gI-04596/\n\u95a2\u9023 http://qiita.com/7of9/items/02433dfcda8c840b878f\n\n\u8cc7\u6599\nDataSheet\n\u3010\u304d\u3080\u8336\u5de5\u623f\u30ac\u30ec\u30fc\u30b8\u30cf\u30a6\u30b9\u3011 : \u65e7\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u60c5\u5831?\n\n\u56de\u8def\nAQM0802\u63a5\u7d9a\u306b\u4f7f\u3063\u305f\u30e6\u30cb\u30fc\u30d0\u30b5\u30eb\u57fa\u677f\u3092\u6d41\u7528\u3002\nhttp://qiita.com/7of9/items/bf5a653d1925cbb38569\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u63a5\u7d9a\u3057\u305f\u3002\n\nESP8266:SDA (IO4) <-> MPL115A2: SDA(Pin7)\nESP8266:SCL (IO5) <-> MPL115A2: SCL(Pin8)\nEPS8266:VCC <-> MPL115A2: VDD(Pin1)\nEPS8266:VCC <-> MPL115A2: SHDN(Pin4)\nEPS8266:VCC <-> MPL115A2: RST(Pin5)\nESP8266:VSS <-> MPL115A2: GND(Pin3)\nESP8266:GND <-> 1uF <-> MPL115A2: CAP(Pin2)\n\nSDA\u3068SCL\u306f4.7k\u3067\u30d7\u30eb\u30a2\u30c3\u30d7\u3068\u30c7\u30fc\u30bf\u30b7\u30fc\u30c8\u306b\u3042\u308b\u304c\u3001\u4eca\u56de\u306f\u57fa\u677f\u306e\u6d41\u7528\u306710k\u30d7\u30eb\u30a2\u30c3\u30d7\u3067\u52d5\u4f5c\u3002\n\u56de\u8def\u56f3 @ upverter\n\u30d6\u30ec\u30c3\u30c9\u30dc\u30fc\u30c9\u3067\u5b9f\u88c5\u3002\n\u9ec4\u8272: SCL\n\u9ec4\u8272\u3068\u4ea4\u5dee\u3059\u308b\u30aa\u30ec\u30f3\u30b8: SDA\n\u7dd1\u8272: GND\n\u8d64\u8272: VCC\n\n\ncode v0.1\n\u3010\u304d\u3080\u8336\u5de5\u623f\u30ac\u30ec\u30fc\u30b8\u30cf\u30a6\u30b9\u3011\n\u306e\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u30c7\u30fc\u30bf\u30b7\u30fc\u30c8\u3092\u898b\u306a\u304c\u3089\u5909\u66f4\u3057\u305f\u3002\n\u5e73\u5747\u5316\u51e6\u7406\u306f\u672a\u5b9f\u88c5\u3002\n\nesp8266_160528_MPL115A2.ino\n#include <Wire.h>\n\n/*\n * v0.1 2016 May 28\n *   - add PrintPressure()\n *   - add ReadPressureAndTemperature()\n *   - add ReadCofficient()\n */\n\n#define MPL_ADDR (0x60)\n\nstatic float s_a0, s_b1, s_b2, s_c12; // \u4fc2\u6570\u30c7\u30fc\u30bf\nunsigned long iPress, iTemp;\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println(\"\");\n\n  Wire.begin();\n  delay(3000); // msec\n  ReadCoefficient();\n}\n\nbool ReadCoefficient()\n{\n  int len;\n  unsigned int hi, lw;\n\n  Wire.beginTransmission(MPL_ADDR);\n  Wire.write(0x04);\n  len = Wire.endTransmission();\n  if (len == 0) {\n    len = Wire.requestFrom(MPL_ADDR, 8);\n    if (len == 8) {\n      hi = Wire.read();\n      lw = Wire.read();\n      s_a0 = (hi << 5) + (lw >> 3) + (lw & 0x07) / 8.0;\n      hi = Wire.read();\n      lw = Wire.read();\n      s_b1 = ( hi & 0x1F) * 0x100 + lw;\n      s_b1 = s_b1 / 8192.0 - 3.0;\n      hi = Wire.read();\n      lw = Wire.read();\n      s_b2 = (hi & 0x80) << 8 + lw;\n      s_b2 = s_b2 / 16384.0 - 2.0;\n      hi = Wire.read();\n      lw = Wire.read();\n      s_c12 = (hi * 0x100) + lw;\n      s_c12 = s_c12 / 16777216.0;\n\n      Serial.println(s_a0);\n      Serial.println(s_b1);\n      Serial.println(s_b2);\n      Serial.println(s_c12);      \n      return true;\n    }\n  }\n  return false;\n}\n\nbool ReadPressureAndTemperature()\n{\n  int len;\n  unsigned int hi, lw;\n\n  // 1. start conversion\n  Wire.beginTransmission(MPL_ADDR);\n  Wire.write(0x12);\n  Wire.write(0x01);\n  len = Wire.endTransmission();\n  if (len != 0) return false;\n  delay(3); // msec\n\n  // 2. get values\n  Wire.beginTransmission(MPL_ADDR);\n  Wire.write(0x00);\n  len = Wire.endTransmission();\n  if (len == 0) {\n    len = Wire.requestFrom(MPL_ADDR, 4);\n    if (len == 4) {\n      hi = Wire.read();\n      lw = Wire.read();\n      iPress = (hi * 256 + lw) / 64;\n      hi = Wire.read();\n      lw = Wire.read();\n      iTemp = ( hi * 256 + lw) / 64;\n      return true;      \n    }\n  }\n  return false;\n}\n\nvoid PrintPressure()\n{\n  float prs, f0;\n  f0 = s_a0 + ( s_b1 + s_c12 * iTemp) * iPress + s_b2 * iTemp;\n  prs = f0 * ( (115.0 - 50.0) / 1023.0 ) + 50.0;\n  Serial.print(\"Pressure=\");\n  Serial.println(prs);\n}\n\nvoid loop() {\n  if (ReadPressureAndTemperature()) {\n    PrintPressure();\n  }\n  delay(1000); // msec\n}\n\n\n\n\u7d50\u679c (v0.1) > \u4fc2\u6570\u9593\u9055\u3044\n4\u3064\u306e\u4fc2\u6570\u3068\u5727\u529b(kPa)\u3002\n\u6b63\u3057\u3044\u306e\u304b\u306f\u672a\u78ba\u8a8d\u3002\u3068\u308a\u3042\u3048\u305a\u901a\u4fe1\u306f\u3067\u304d\u3066\u3044\u308b\u3001\u3068\u3044\u3046\u7a0b\u5ea6\u3002\n\u4fc2\u6570\u306e\u8a08\u7b97\u5f0f\u306b\u3064\u3044\u3066\u306f\u8981\u78ba\u8a8d\u3002\n1905.00\n-2.24\n-2.00\n0.00\nPressure=66.94\nPressure=66.83\nPressure=66.72\nPressure=66.83\nPressure=66.94\nPressure=66.72\nPressure=66.94\nPressure=66.94\nPressure=66.95\nPressure=66.71\n\n\ncode v0.2\n\u4fc2\u6570\u304c\u3069\u3046\u3082\u304a\u304b\u3057\u3044\u3088\u3046\u3060\u3063\u305f\u3002\n\u4ee5\u4e0b\u3067\u4fc2\u6570\u306e\u8a08\u7b97\u304c\u8a73\u3057\u3044\u3002\nhttp://seppina.cocolog-nifty.com/blog/2014/09/pici2c---mpl115.html\n\nesp8266_160528_MPL115A2.ino\n#include <Wire.h>\n\n/*\n * v0.2 2016 May 29\n *   - fix bug > coefficients calculation\n * v0.1 2016 May 28\n *   - add PrintPressure()\n *   - add ReadPressureAndTemperature()\n *   - add ReadCoefficient()\n */\n\n#define MPL_ADDR (0x60)\n\nstatic float s_a0, s_b1, s_b2, s_c12; // \u4fc2\u6570\u30c7\u30fc\u30bf\nunsigned long iPress, iTemp;\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println(\"\");\n\n  Wire.begin();\n  delay(3000); // msec\n  ReadCoefficient();\n}\n\nbool ReadCoefficient()\n{\n  int len;\n  unsigned int hi, lw;\n\n  Wire.beginTransmission(MPL_ADDR);\n  Wire.write(0x04);\n  len = Wire.endTransmission();\n  if (len == 0) {\n    len = Wire.requestFrom(MPL_ADDR, 8);\n    if (len == 8) {\n      hi = Wire.read();\n      lw = Wire.read();\n      s_a0 = (hi << 8) + lw;\n      s_a0 /= 8.0;\n      if (hi & 0x80) s_a0 -= 8192.0;\n      hi = Wire.read();\n      lw = Wire.read();\n      s_b1 = (hi << 8) + lw;\n      s_b1 /= 8192.0;\n      if (hi & 0x80) s_b1 -= 8.0;\n      hi = Wire.read();\n      lw = Wire.read();\n      s_b2 = (hi << 8) + lw;\n      s_b2 /= 16384.0;\n      if (hi & 0x80) s_b2 -= 4.0;\n      hi = Wire.read();\n      lw = Wire.read();\n      s_c12 = (hi << 8) + lw;\n      s_c12 /= 32768.0;\n      if (hi & 0x80) s_c12 -= 2.0;\n      s_c12 /= 512.0;\n\n      Serial.println(s_a0);\n      Serial.println(s_b1);\n      Serial.println(s_b2);\n      Serial.println(s_c12);      \n      return true;\n    }\n  }\n  return false;\n}\n\nbool ReadPressureAndTemperature()\n{\n  int len;\n  unsigned int hi, lw;\n\n  // 1. start conversion\n  Wire.beginTransmission(MPL_ADDR);\n  Wire.write(0x12);\n  Wire.write(0x01);\n  len = Wire.endTransmission();\n  if (len != 0) return false;\n  delay(3); // msec\n\n  // 2. get values\n  Wire.beginTransmission(MPL_ADDR);\n  Wire.write(0x00);\n  len = Wire.endTransmission();\n  if (len == 0) {\n    len = Wire.requestFrom(MPL_ADDR, 4);\n    if (len == 4) {\n      hi = Wire.read();\n      lw = Wire.read();\n      iPress = (hi * 256 + lw) / 64;\n      hi = Wire.read();\n      lw = Wire.read();\n      iTemp = ( hi * 256 + lw) / 64;\n      return true;      \n    }\n  }\n  return false;\n}\n\nvoid PrintPressure()\n{\n  float prs, f0;\n  f0 = s_a0 + ( s_b1 + s_c12 * iTemp) * iPress + s_b2 * iTemp;\n  prs = f0 * ( (115.0 - 50.0) / 1023.0 ) + 50.0;\n  Serial.print(\"Pressure=\");\n  Serial.println(prs);\n}\n\nvoid loop() {\n  if (ReadPressureAndTemperature()) {\n    PrintPressure();\n  }\n  delay(1000); // msec\n}\n\n\n\n\u7d50\u679c(v0.2)\n\n\u7d50\u679c\n1905.00\n-2.24\n-0.94\n0.00\nPressure=100.48\nPressure=100.68\nPressure=100.60\nPressure=100.48\nPressure=100.60\nPressure=100.40\nPressure=100.60\n\n\n\u6c17\u5727\u304c100.48kPa = 1004.8hPa\u3002\n\u3060\u3044\u305f\u3044\u3088\u304f\u805e\u304f\u6c17\u5727(1013hPa)\u306e\u30aa\u30fc\u30c0\u30fc\u306b\u306f\u306a\u3063\u305f\u3002\n\u4fc2\u6570\u306e4\u3064\u76ee\u306f\u8868\u793a\u6841\u304c\u5c11\u65702\u6841\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3002\n\u30b7\u30ea\u30a2\u30eb\u51fa\u529b\u3092\u7d9a\u3051\u3066\u3044\u308b\u3068\u9014\u4e2d\u3067\u51fa\u529b\u304c\u6b62\u307e\u3063\u3066\u3057\u307e\u3046\u3002\u30b3\u30fc\u30c9\u304c\u60aa\u3044\u306e\u304b\u57fa\u677f\u3001\u96fb\u6c60\u304c\u60aa\u3044\u306e\u304b\u8981\u8abf\u67fb\u3002\n\n\u30e6\u30cb\u30fc\u30d0\u30b5\u30eb\u57fa\u677f\u5b9f\u88c5\n\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u57fa\u677f\u5b9f\u88c5\u3057\u305f\u3002\n\u5de6\u306fmicroSD\u3067\u4fdd\u5b58\u3059\u308b\u305f\u3081\u306e\u57fa\u677f\u3002\n\u53f3\u304c\u6c17\u5727\u8a08\u3092\u5b9f\u88c5\u3057\u305f\u57fa\u677f\u3002\n\u305d\u308c\u305e\u308c\u3001XHP\u30b3\u30cd\u30af\u30bf\u304b\u3089\u96fb\u6e90\u4f9b\u7d66\u3067\u304d\u308b\u304c\u3001\u5c4b\u5916\u4f7f\u7528\u306e\u305f\u3081\u306bCR-123A\u3092\u76f4\u633f\u3057\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\u6c17\u5727\u8a08\u306e\u30d7\u30eb\u30a2\u30c3\u30d7\u62b5\u6297\u306f4.7k\u306b\u3057\u3066\u3044\u308b\u3002\n\n\u5c4b\u5916\u9ad8\u5ea6\u6e2c\u5b9a\u3092\u3059\u308b\u305f\u3081\u306b\u6c17\u5727\u8a08\u3092\u8cfc\u5165\u3002\u672c\u65e5\u5c4a\u3044\u305f\u3002\nhttp://akizukidenshi.com/catalog/g/gI-04596/\n\n\u95a2\u9023 http://qiita.com/7of9/items/02433dfcda8c840b878f\n\n\n## \u8cc7\u6599\n[DataSheet](http://cache.freescale.com/files/sensors/doc/data_sheet/MPL115A2.pdf)\n\n[\u3010\u304d\u3080\u8336\u5de5\u623f\u30ac\u30ec\u30fc\u30b8\u30cf\u30a6\u30b9\u3011](\nhttp://www.geocities.jp/zattouka/GarageHouse/micon/Arduino/Pressure/Pressure2.htm) : \u65e7\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u60c5\u5831?\n\n\n## \u56de\u8def\n\nAQM0802\u63a5\u7d9a\u306b\u4f7f\u3063\u305f\u30e6\u30cb\u30fc\u30d0\u30b5\u30eb\u57fa\u677f\u3092\u6d41\u7528\u3002\nhttp://qiita.com/7of9/items/bf5a653d1925cbb38569\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u63a5\u7d9a\u3057\u305f\u3002\n\n- ESP8266:SDA (IO4) <-> MPL115A2: SDA(Pin7)\n- ESP8266:SCL (IO5) <-> MPL115A2: SCL(Pin8)\n- EPS8266:VCC <-> MPL115A2: VDD(Pin1)\n- EPS8266:VCC <-> MPL115A2: SHDN(Pin4)\n- EPS8266:VCC <-> MPL115A2: RST(Pin5)\n- ESP8266:VSS <-> MPL115A2: GND(Pin3)\n- ESP8266:GND <-> 1uF <-> MPL115A2: CAP(Pin2)\n\nSDA\u3068SCL\u306f4.7k\u3067\u30d7\u30eb\u30a2\u30c3\u30d7\u3068\u30c7\u30fc\u30bf\u30b7\u30fc\u30c8\u306b\u3042\u308b\u304c\u3001\u4eca\u56de\u306f\u57fa\u677f\u306e\u6d41\u7528\u306710k\u30d7\u30eb\u30a2\u30c3\u30d7\u3067\u52d5\u4f5c\u3002\n\n[\u56de\u8def\u56f3 @ upverter](https://upverter.com/7of9/b5e95a0eab20fddc/160529_ESP8266_MPL115A2/)\n\n\n\n\u30d6\u30ec\u30c3\u30c9\u30dc\u30fc\u30c9\u3067\u5b9f\u88c5\u3002\n\u9ec4\u8272: SCL\n\u9ec4\u8272\u3068\u4ea4\u5dee\u3059\u308b\u30aa\u30ec\u30f3\u30b8: SDA\n\u7dd1\u8272: GND\n\u8d64\u8272: VCC\n\n![DSC_0168.JPG](https://qiita-image-store.s3.amazonaws.com/0/32870/3495361e-c653-2698-75c6-08465fb4b413.jpeg)\n\n\n## code v0.1\n\n[\u3010\u304d\u3080\u8336\u5de5\u623f\u30ac\u30ec\u30fc\u30b8\u30cf\u30a6\u30b9\u3011](\nhttp://www.geocities.jp/zattouka/GarageHouse/micon/Arduino/Pressure/Pressure2.htm)\n\u306e\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u30c7\u30fc\u30bf\u30b7\u30fc\u30c8\u3092\u898b\u306a\u304c\u3089\u5909\u66f4\u3057\u305f\u3002\n\u5e73\u5747\u5316\u51e6\u7406\u306f\u672a\u5b9f\u88c5\u3002\n\n```esp8266_160528_MPL115A2.ino\n#include <Wire.h>\n\n/*\n * v0.1 2016 May 28\n *   - add PrintPressure()\n *   - add ReadPressureAndTemperature()\n *   - add ReadCofficient()\n */\n\n#define MPL_ADDR (0x60)\n\nstatic float s_a0, s_b1, s_b2, s_c12; // \u4fc2\u6570\u30c7\u30fc\u30bf\nunsigned long iPress, iTemp;\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println(\"\");\n\n  Wire.begin();\n  delay(3000); // msec\n  ReadCoefficient();\n}\n\nbool ReadCoefficient()\n{\n  int len;\n  unsigned int hi, lw;\n\n  Wire.beginTransmission(MPL_ADDR);\n  Wire.write(0x04);\n  len = Wire.endTransmission();\n  if (len == 0) {\n    len = Wire.requestFrom(MPL_ADDR, 8);\n    if (len == 8) {\n      hi = Wire.read();\n      lw = Wire.read();\n      s_a0 = (hi << 5) + (lw >> 3) + (lw & 0x07) / 8.0;\n      hi = Wire.read();\n      lw = Wire.read();\n      s_b1 = ( hi & 0x1F) * 0x100 + lw;\n      s_b1 = s_b1 / 8192.0 - 3.0;\n      hi = Wire.read();\n      lw = Wire.read();\n      s_b2 = (hi & 0x80) << 8 + lw;\n      s_b2 = s_b2 / 16384.0 - 2.0;\n      hi = Wire.read();\n      lw = Wire.read();\n      s_c12 = (hi * 0x100) + lw;\n      s_c12 = s_c12 / 16777216.0;\n\n      Serial.println(s_a0);\n      Serial.println(s_b1);\n      Serial.println(s_b2);\n      Serial.println(s_c12);      \n      return true;\n    }\n  }\n  return false;\n}\n\nbool ReadPressureAndTemperature()\n{\n  int len;\n  unsigned int hi, lw;\n\n  // 1. start conversion\n  Wire.beginTransmission(MPL_ADDR);\n  Wire.write(0x12);\n  Wire.write(0x01);\n  len = Wire.endTransmission();\n  if (len != 0) return false;\n  delay(3); // msec\n\n  // 2. get values\n  Wire.beginTransmission(MPL_ADDR);\n  Wire.write(0x00);\n  len = Wire.endTransmission();\n  if (len == 0) {\n    len = Wire.requestFrom(MPL_ADDR, 4);\n    if (len == 4) {\n      hi = Wire.read();\n      lw = Wire.read();\n      iPress = (hi * 256 + lw) / 64;\n      hi = Wire.read();\n      lw = Wire.read();\n      iTemp = ( hi * 256 + lw) / 64;\n      return true;      \n    }\n  }\n  return false;\n}\n\nvoid PrintPressure()\n{\n  float prs, f0;\n  f0 = s_a0 + ( s_b1 + s_c12 * iTemp) * iPress + s_b2 * iTemp;\n  prs = f0 * ( (115.0 - 50.0) / 1023.0 ) + 50.0;\n  Serial.print(\"Pressure=\");\n  Serial.println(prs);\n}\n\nvoid loop() {\n  if (ReadPressureAndTemperature()) {\n    PrintPressure();\n  }\n  delay(1000); // msec\n}\n```\n\n\n\n## \u7d50\u679c (v0.1) > \u4fc2\u6570\u9593\u9055\u3044\n\n4\u3064\u306e\u4fc2\u6570\u3068\u5727\u529b(kPa)\u3002\n\n\u6b63\u3057\u3044\u306e\u304b\u306f\u672a\u78ba\u8a8d\u3002\u3068\u308a\u3042\u3048\u305a\u901a\u4fe1\u306f\u3067\u304d\u3066\u3044\u308b\u3001\u3068\u3044\u3046\u7a0b\u5ea6\u3002\n\u4fc2\u6570\u306e\u8a08\u7b97\u5f0f\u306b\u3064\u3044\u3066\u306f\u8981\u78ba\u8a8d\u3002\n\n```\n1905.00\n-2.24\n-2.00\n0.00\nPressure=66.94\nPressure=66.83\nPressure=66.72\nPressure=66.83\nPressure=66.94\nPressure=66.72\nPressure=66.94\nPressure=66.94\nPressure=66.95\nPressure=66.71\n```\n\n## code v0.2\n\n\u4fc2\u6570\u304c\u3069\u3046\u3082\u304a\u304b\u3057\u3044\u3088\u3046\u3060\u3063\u305f\u3002\n\n\u4ee5\u4e0b\u3067\u4fc2\u6570\u306e\u8a08\u7b97\u304c\u8a73\u3057\u3044\u3002\nhttp://seppina.cocolog-nifty.com/blog/2014/09/pici2c---mpl115.html\n\n\n```esp8266_160528_MPL115A2.ino\n#include <Wire.h>\n\n/*\n * v0.2 2016 May 29\n *   - fix bug > coefficients calculation\n * v0.1 2016 May 28\n *   - add PrintPressure()\n *   - add ReadPressureAndTemperature()\n *   - add ReadCoefficient()\n */\n\n#define MPL_ADDR (0x60)\n\nstatic float s_a0, s_b1, s_b2, s_c12; // \u4fc2\u6570\u30c7\u30fc\u30bf\nunsigned long iPress, iTemp;\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println(\"\");\n\n  Wire.begin();\n  delay(3000); // msec\n  ReadCoefficient();\n}\n\nbool ReadCoefficient()\n{\n  int len;\n  unsigned int hi, lw;\n\n  Wire.beginTransmission(MPL_ADDR);\n  Wire.write(0x04);\n  len = Wire.endTransmission();\n  if (len == 0) {\n    len = Wire.requestFrom(MPL_ADDR, 8);\n    if (len == 8) {\n      hi = Wire.read();\n      lw = Wire.read();\n      s_a0 = (hi << 8) + lw;\n      s_a0 /= 8.0;\n      if (hi & 0x80) s_a0 -= 8192.0;\n      hi = Wire.read();\n      lw = Wire.read();\n      s_b1 = (hi << 8) + lw;\n      s_b1 /= 8192.0;\n      if (hi & 0x80) s_b1 -= 8.0;\n      hi = Wire.read();\n      lw = Wire.read();\n      s_b2 = (hi << 8) + lw;\n      s_b2 /= 16384.0;\n      if (hi & 0x80) s_b2 -= 4.0;\n      hi = Wire.read();\n      lw = Wire.read();\n      s_c12 = (hi << 8) + lw;\n      s_c12 /= 32768.0;\n      if (hi & 0x80) s_c12 -= 2.0;\n      s_c12 /= 512.0;\n\n      Serial.println(s_a0);\n      Serial.println(s_b1);\n      Serial.println(s_b2);\n      Serial.println(s_c12);      \n      return true;\n    }\n  }\n  return false;\n}\n\nbool ReadPressureAndTemperature()\n{\n  int len;\n  unsigned int hi, lw;\n\n  // 1. start conversion\n  Wire.beginTransmission(MPL_ADDR);\n  Wire.write(0x12);\n  Wire.write(0x01);\n  len = Wire.endTransmission();\n  if (len != 0) return false;\n  delay(3); // msec\n\n  // 2. get values\n  Wire.beginTransmission(MPL_ADDR);\n  Wire.write(0x00);\n  len = Wire.endTransmission();\n  if (len == 0) {\n    len = Wire.requestFrom(MPL_ADDR, 4);\n    if (len == 4) {\n      hi = Wire.read();\n      lw = Wire.read();\n      iPress = (hi * 256 + lw) / 64;\n      hi = Wire.read();\n      lw = Wire.read();\n      iTemp = ( hi * 256 + lw) / 64;\n      return true;      \n    }\n  }\n  return false;\n}\n\nvoid PrintPressure()\n{\n  float prs, f0;\n  f0 = s_a0 + ( s_b1 + s_c12 * iTemp) * iPress + s_b2 * iTemp;\n  prs = f0 * ( (115.0 - 50.0) / 1023.0 ) + 50.0;\n  Serial.print(\"Pressure=\");\n  Serial.println(prs);\n}\n\nvoid loop() {\n  if (ReadPressureAndTemperature()) {\n    PrintPressure();\n  }\n  delay(1000); // msec\n}\n```\n\n## \u7d50\u679c(v0.2)\n\n```txt:\u7d50\u679c\n1905.00\n-2.24\n-0.94\n0.00\nPressure=100.48\nPressure=100.68\nPressure=100.60\nPressure=100.48\nPressure=100.60\nPressure=100.40\nPressure=100.60\n```\n\n\u6c17\u5727\u304c100.48kPa = 1004.8hPa\u3002\n\u3060\u3044\u305f\u3044\u3088\u304f\u805e\u304f\u6c17\u5727(1013hPa)\u306e\u30aa\u30fc\u30c0\u30fc\u306b\u306f\u306a\u3063\u305f\u3002\n\n\u4fc2\u6570\u306e4\u3064\u76ee\u306f\u8868\u793a\u6841\u304c\u5c11\u65702\u6841\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3002\n\n\u30b7\u30ea\u30a2\u30eb\u51fa\u529b\u3092\u7d9a\u3051\u3066\u3044\u308b\u3068\u9014\u4e2d\u3067\u51fa\u529b\u304c\u6b62\u307e\u3063\u3066\u3057\u307e\u3046\u3002\u30b3\u30fc\u30c9\u304c\u60aa\u3044\u306e\u304b\u57fa\u677f\u3001\u96fb\u6c60\u304c\u60aa\u3044\u306e\u304b\u8981\u8abf\u67fb\u3002\n\n\n## \u30e6\u30cb\u30fc\u30d0\u30b5\u30eb\u57fa\u677f\u5b9f\u88c5\n\n\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u57fa\u677f\u5b9f\u88c5\u3057\u305f\u3002\n\n\u5de6\u306fmicroSD\u3067\u4fdd\u5b58\u3059\u308b\u305f\u3081\u306e\u57fa\u677f\u3002\n\u53f3\u304c\u6c17\u5727\u8a08\u3092\u5b9f\u88c5\u3057\u305f\u57fa\u677f\u3002\n\n\u305d\u308c\u305e\u308c\u3001XHP\u30b3\u30cd\u30af\u30bf\u304b\u3089\u96fb\u6e90\u4f9b\u7d66\u3067\u304d\u308b\u304c\u3001\u5c4b\u5916\u4f7f\u7528\u306e\u305f\u3081\u306bCR-123A\u3092\u76f4\u633f\u3057\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\u6c17\u5727\u8a08\u306e\u30d7\u30eb\u30a2\u30c3\u30d7\u62b5\u6297\u306f4.7k\u306b\u3057\u3066\u3044\u308b\u3002\n\n![DSC_0170.JPG](https://qiita-image-store.s3.amazonaws.com/0/32870/722eeed3-3790-4656-c12b-9dccd9ef5a1e.jpeg)\n\n", "tags": ["borgSensorSystem1", "\u96fb\u5b50\u5de5\u4f5c", "ESP8266", "universalCircuit"]}